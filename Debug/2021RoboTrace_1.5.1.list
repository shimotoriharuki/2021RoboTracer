
2021RoboTrace_1.5.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018b74  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000834  08018d38  08018d38  00028d38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801956c  0801956c  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  0801956c  0801956c  0002956c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019574  08019574  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08019574  08019574  00029574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801957c  0801957c  0002957c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08019580  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00049ac8  200001e0  0801975c  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  20049ca8  0801975c  00039ca8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003b8e6  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007c33  00000000  00000000  0006baf2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002390  00000000  00000000  00073728  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000020c0  00000000  00000000  00075ab8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000354b4  00000000  00000000  00077b78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002675f  00000000  00000000  000ad02c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001113a0  00000000  00000000  000d378b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e4b2b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a6b8  00000000  00000000  001e4ba8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08018d1c 	.word	0x08018d1c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	08018d1c 	.word	0x08018d1c

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <lcd_cmd>:

extern I2C_HandleTypeDef hi2c1;

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	733b      	strb	r3, [r7, #12]
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txcmd,2,100);
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	217c      	movs	r1, #124	; 0x7c
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <lcd_cmd+0x2c>)
 8000fd8:	f00a fb9a 	bl	800b710 <HAL_I2C_Master_Transmit>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	200477a0 	.word	0x200477a0

08000fe8 <lcd_data>:

void lcd_data(uint8_t data) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 8000ff2:	2340      	movs	r3, #64	; 0x40
 8000ff4:	733b      	strb	r3, [r7, #12]
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txdata,2,100);
 8000ffa:	f107 020c 	add.w	r2, r7, #12
 8000ffe:	2364      	movs	r3, #100	; 0x64
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2302      	movs	r3, #2
 8001004:	217c      	movs	r1, #124	; 0x7c
 8001006:	4803      	ldr	r0, [pc, #12]	; (8001014 <lcd_data+0x2c>)
 8001008:	f00a fb82 	bl	800b710 <HAL_I2C_Master_Transmit>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	200477a0 	.word	0x200477a0

08001018 <lcd_init>:

void lcd_init(){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
 800101c:	2201      	movs	r2, #1
 800101e:	2110      	movs	r1, #16
 8001020:	481e      	ldr	r0, [pc, #120]	; (800109c <lcd_init+0x84>)
 8001022:	f00a fa0b 	bl	800b43c <HAL_GPIO_WritePin>
	HAL_Delay(40);
 8001026:	2028      	movs	r0, #40	; 0x28
 8001028:	f008 ff72 	bl	8009f10 <HAL_Delay>
	lcd_cmd(0x38);
 800102c:	2038      	movs	r0, #56	; 0x38
 800102e:	f7ff ffc3 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f008 ff6c 	bl	8009f10 <HAL_Delay>
	lcd_cmd(0x39);
 8001038:	2039      	movs	r0, #57	; 0x39
 800103a:	f7ff ffbd 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800103e:	2001      	movs	r0, #1
 8001040:	f008 ff66 	bl	8009f10 <HAL_Delay>
	lcd_cmd(0x14);
 8001044:	2014      	movs	r0, #20
 8001046:	f7ff ffb7 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f008 ff60 	bl	8009f10 <HAL_Delay>
	lcd_cmd(0x70);
 8001050:	2070      	movs	r0, #112	; 0x70
 8001052:	f7ff ffb1 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f008 ff5a 	bl	8009f10 <HAL_Delay>
	lcd_cmd(0x56);
 800105c:	2056      	movs	r0, #86	; 0x56
 800105e:	f7ff ffab 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f008 ff54 	bl	8009f10 <HAL_Delay>
	lcd_cmd(0x6C);
 8001068:	206c      	movs	r0, #108	; 0x6c
 800106a:	f7ff ffa5 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(200);
 800106e:	20c8      	movs	r0, #200	; 0xc8
 8001070:	f008 ff4e 	bl	8009f10 <HAL_Delay>
	lcd_cmd(0x38);
 8001074:	2038      	movs	r0, #56	; 0x38
 8001076:	f7ff ff9f 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800107a:	2001      	movs	r0, #1
 800107c:	f008 ff48 	bl	8009f10 <HAL_Delay>
	lcd_cmd(0x0C);
 8001080:	200c      	movs	r0, #12
 8001082:	f7ff ff99 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001086:	2001      	movs	r0, #1
 8001088:	f008 ff42 	bl	8009f10 <HAL_Delay>
	lcd_cmd(0x01);
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff ff93 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001092:	2001      	movs	r0, #1
 8001094:	f008 ff3c 	bl	8009f10 <HAL_Delay>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020000 	.word	0x40020000

080010a0 <lcd_clear>:

void lcd_clear(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff87 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f008 ff30 	bl	8009f10 <HAL_Delay>
	lcd_cmd(0x02);
 80010b0:	2002      	movs	r0, #2
 80010b2:	f7ff ff81 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f008 ff2a 	bl	8009f10 <HAL_Delay>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <lcd_locate>:

void lcd_locate(int x, int y) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3302      	adds	r3, #2
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	019b      	lsls	r3, r3, #6
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4413      	add	r3, r2
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff6b 	bl	8000fb8 <lcd_cmd>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <lcd_print>:

void lcd_print(const char *str) {
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 80010f2:	e007      	b.n	8001104 <lcd_print+0x1a>
	{
			lcd_data(*str);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff75 	bl	8000fe8 <lcd_data>
			str++;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3301      	adds	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f3      	bne.n	80010f4 <lcd_print+0xa>
	}
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <lcd_printf>:

short lcd_printf(const char *format, ...) {
 8001114:	b40f      	push	{r0, r1, r2, r3}
 8001116:	b580      	push	{r7, lr}
 8001118:	b088      	sub	sp, #32
 800111a:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

  va_start(argptr, format);
 800111c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001120:	61bb      	str	r3, [r7, #24]
  ret = vsprintf(lcd_bff, format, argptr);
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001128:	4618      	mov	r0, r3
 800112a:	f015 f9c1 	bl	80164b0 <vsiprintf>
 800112e:	4603      	mov	r3, r0
 8001130:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 8001132:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001136:	2b00      	cmp	r3, #0
 8001138:	dd03      	ble.n	8001142 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ffd4 	bl	80010ea <lcd_print>
	}

	return ret;
 8001142:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001150:	b004      	add	sp, #16
 8001152:	4770      	bx	lr

08001154 <_ZN3ESC20getCounterPeriodTIM3Ef>:
#define ESC_MAX_TIM10_11 7559

//---private---//

uint16_t ESC::getCounterPeriodTIM3(float ratio)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	ed87 0a00 	vstr	s0, [r7]
	return int((ESC_MAX_TIM3 - ESC_MIN_TIM3) * ratio + ESC_MIN_TIM3);
 8001160:	edd7 7a00 	vldr	s15, [r7]
 8001164:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800118c <_ZN3ESC20getCounterPeriodTIM3Ef+0x38>
 8001168:	ee67 7a87 	vmul.f32	s15, s15, s14
 800116c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001190 <_ZN3ESC20getCounterPeriodTIM3Ef+0x3c>
 8001170:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001174:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001178:	ee17 3a90 	vmov	r3, s15
 800117c:	b29b      	uxth	r3, r3
}
 800117e:	4618      	mov	r0, r3
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	44ec4000 	.word	0x44ec4000
 8001190:	44ec2000 	.word	0x44ec2000

08001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>:

uint16_t ESC::getCounterPeriodTIM10_11(float ratio)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	ed87 0a00 	vstr	s0, [r7]
	return int((ESC_MAX_TIM10_11 - ESC_MIN_TIM10_11) * ratio + ESC_MIN_TIM10_11);
 80011a0:	edd7 7a00 	vldr	s15, [r7]
 80011a4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80011cc <_ZN3ESC24getCounterPeriodTIM10_11Ef+0x38>
 80011a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011ac:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80011d0 <_ZN3ESC24getCounterPeriodTIM10_11Ef+0x3c>
 80011b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011b8:	ee17 3a90 	vmov	r3, s15
 80011bc:	b29b      	uxth	r3, r3
}
 80011be:	4618      	mov	r0, r3
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	456cd000 	.word	0x456cd000
 80011d0:	456ba000 	.word	0x456ba000

080011d4 <_ZN3ESCC1Ev>:

//---public---//
ESC::ESC()
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
{

}
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4618      	mov	r0, r3
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
	...

080011ec <_ZN3ESC4initEv>:

void ESC::init()
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80011f4:	2100      	movs	r1, #0
 80011f6:	4813      	ldr	r0, [pc, #76]	; (8001244 <_ZN3ESC4initEv+0x58>)
 80011f8:	f00e f852 	bl	800f2a0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80011fc:	2104      	movs	r1, #4
 80011fe:	4811      	ldr	r0, [pc, #68]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001200:	f00e f84e 	bl	800f2a0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 8001204:	2100      	movs	r1, #0
 8001206:	4810      	ldr	r0, [pc, #64]	; (8001248 <_ZN3ESC4initEv+0x5c>)
 8001208:	f00e f84a 	bl	800f2a0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 800120c:	2100      	movs	r1, #0
 800120e:	480f      	ldr	r0, [pc, #60]	; (800124c <_ZN3ESC4initEv+0x60>)
 8001210:	f00e f846 	bl	800f2a0 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ESC_MIN_TIM3);
 8001214:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f240 7261 	movw	r2, #1889	; 0x761
 800121c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ESC_MIN_TIM3);
 800121e:	4b09      	ldr	r3, [pc, #36]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f240 7261 	movw	r2, #1889	; 0x761
 8001226:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 8001228:	4b07      	ldr	r3, [pc, #28]	; (8001248 <_ZN3ESC4initEv+0x5c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f640 62ba 	movw	r2, #3770	; 0xeba
 8001230:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 8001232:	4b06      	ldr	r3, [pc, #24]	; (800124c <_ZN3ESC4initEv+0x60>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f640 62ba 	movw	r2, #3770	; 0xeba
 800123a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800123c:	bf00      	nop
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	2004788c 	.word	0x2004788c
 8001248:	200477f4 	.word	0x200477f4
 800124c:	20047914 	.word	0x20047914

08001250 <_ZN3ESC2onEffff>:

void ESC::on(float FL, float FR, float RL, float RR)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	6178      	str	r0, [r7, #20]
 8001258:	ed87 0a04 	vstr	s0, [r7, #16]
 800125c:	edc7 0a03 	vstr	s1, [r7, #12]
 8001260:	ed87 1a02 	vstr	s2, [r7, #8]
 8001264:	edc7 1a01 	vstr	s3, [r7, #4]
	if(FL > 1.0) FL = 1.0;
 8001268:	edd7 7a04 	vldr	s15, [r7, #16]
 800126c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001270:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001278:	dd03      	ble.n	8001282 <_ZN3ESC2onEffff+0x32>
 800127a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800127e:	613b      	str	r3, [r7, #16]
 8001280:	e009      	b.n	8001296 <_ZN3ESC2onEffff+0x46>
	else if(FL < 0) FL = 0;
 8001282:	edd7 7a04 	vldr	s15, [r7, #16]
 8001286:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800128a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800128e:	d502      	bpl.n	8001296 <_ZN3ESC2onEffff+0x46>
 8001290:	f04f 0300 	mov.w	r3, #0
 8001294:	613b      	str	r3, [r7, #16]

	if(FR > 1.0) FR = 1.0;
 8001296:	edd7 7a03 	vldr	s15, [r7, #12]
 800129a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800129e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a6:	dd03      	ble.n	80012b0 <_ZN3ESC2onEffff+0x60>
 80012a8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	e009      	b.n	80012c4 <_ZN3ESC2onEffff+0x74>
	else if(FR < 0) FR = 0;
 80012b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80012b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012bc:	d502      	bpl.n	80012c4 <_ZN3ESC2onEffff+0x74>
 80012be:	f04f 0300 	mov.w	r3, #0
 80012c2:	60fb      	str	r3, [r7, #12]

	if(RL > 1.0) RL = 1.0;
 80012c4:	edd7 7a02 	vldr	s15, [r7, #8]
 80012c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d4:	dd03      	ble.n	80012de <_ZN3ESC2onEffff+0x8e>
 80012d6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012da:	60bb      	str	r3, [r7, #8]
 80012dc:	e009      	b.n	80012f2 <_ZN3ESC2onEffff+0xa2>
	else if(RL < 0) RL = 0;
 80012de:	edd7 7a02 	vldr	s15, [r7, #8]
 80012e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ea:	d502      	bpl.n	80012f2 <_ZN3ESC2onEffff+0xa2>
 80012ec:	f04f 0300 	mov.w	r3, #0
 80012f0:	60bb      	str	r3, [r7, #8]

	if(RR > 1.0) RR = 1.0;
 80012f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80012f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001302:	dd03      	ble.n	800130c <_ZN3ESC2onEffff+0xbc>
 8001304:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001308:	607b      	str	r3, [r7, #4]
 800130a:	e009      	b.n	8001320 <_ZN3ESC2onEffff+0xd0>
	else if(RR < 0) RR = 0;
 800130c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001310:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001318:	d502      	bpl.n	8001320 <_ZN3ESC2onEffff+0xd0>
 800131a:	f04f 0300 	mov.w	r3, #0
 800131e:	607b      	str	r3, [r7, #4]

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, getCounterPeriodTIM3(FL));
 8001320:	ed97 0a04 	vldr	s0, [r7, #16]
 8001324:	6978      	ldr	r0, [r7, #20]
 8001326:	f7ff ff15 	bl	8001154 <_ZN3ESC20getCounterPeriodTIM3Ef>
 800132a:	4603      	mov	r3, r0
 800132c:	461a      	mov	r2, r3
 800132e:	4b12      	ldr	r3, [pc, #72]	; (8001378 <_ZN3ESC2onEffff+0x128>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, getCounterPeriodTIM10_11(FR));
 8001334:	ed97 0a03 	vldr	s0, [r7, #12]
 8001338:	6978      	ldr	r0, [r7, #20]
 800133a:	f7ff ff2b 	bl	8001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>
 800133e:	4603      	mov	r3, r0
 8001340:	461a      	mov	r2, r3
 8001342:	4b0e      	ldr	r3, [pc, #56]	; (800137c <_ZN3ESC2onEffff+0x12c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, getCounterPeriodTIM3(RL));
 8001348:	ed97 0a02 	vldr	s0, [r7, #8]
 800134c:	6978      	ldr	r0, [r7, #20]
 800134e:	f7ff ff01 	bl	8001154 <_ZN3ESC20getCounterPeriodTIM3Ef>
 8001352:	4603      	mov	r3, r0
 8001354:	461a      	mov	r2, r3
 8001356:	4b08      	ldr	r3, [pc, #32]	; (8001378 <_ZN3ESC2onEffff+0x128>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, getCounterPeriodTIM10_11(RR));
 800135c:	ed97 0a01 	vldr	s0, [r7, #4]
 8001360:	6978      	ldr	r0, [r7, #20]
 8001362:	f7ff ff17 	bl	8001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>
 8001366:	4603      	mov	r3, r0
 8001368:	461a      	mov	r2, r3
 800136a:	4b05      	ldr	r3, [pc, #20]	; (8001380 <_ZN3ESC2onEffff+0x130>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001370:	bf00      	nop
 8001372:	3718      	adds	r7, #24
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	2004788c 	.word	0x2004788c
 800137c:	20047914 	.word	0x20047914
 8001380:	200477f4 	.word	0x200477f4

08001384 <_ZN3ESC3offEv>:

void ESC::off()
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ESC_MIN_TIM3);
 800138c:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <_ZN3ESC3offEv+0x3c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f240 7261 	movw	r2, #1889	; 0x761
 8001394:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ESC_MIN_TIM3);
 8001396:	4b0a      	ldr	r3, [pc, #40]	; (80013c0 <_ZN3ESC3offEv+0x3c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f240 7261 	movw	r2, #1889	; 0x761
 800139e:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 80013a0:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <_ZN3ESC3offEv+0x40>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f640 62ba 	movw	r2, #3770	; 0xeba
 80013a8:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 80013aa:	4b07      	ldr	r3, [pc, #28]	; (80013c8 <_ZN3ESC3offEv+0x44>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f640 62ba 	movw	r2, #3770	; 0xeba
 80013b2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	2004788c 	.word	0x2004788c
 80013c4:	200477f4 	.word	0x200477f4
 80013c8:	20047914 	.word	0x20047914

080013cc <_ZN7EncoderC1Ev>:

float monitor_distance;
float monitor_cnt_l;
float monitor_cnt_l_lpf;

Encoder::Encoder() : cnt_l_(0), cnt_r_(0), distance_(0), total_cnt_l_(0), total_cnt_r_(0), distance_10mm_(0), total_distance_(0),
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
		side_line_ignore_distance_(), cross_line_ignore_distance_(0), goal_judge_distance_(0){}
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f04f 0200 	mov.w	r2, #0
 80013e2:	605a      	str	r2, [r3, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f04f 0200 	mov.w	r2, #0
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f04f 0200 	mov.w	r2, #0
 80013f2:	60da      	str	r2, [r3, #12]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f04f 0200 	mov.w	r2, #0
 80013fa:	611a      	str	r2, [r3, #16]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f04f 0200 	mov.w	r2, #0
 8001402:	615a      	str	r2, [r3, #20]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f04f 0200 	mov.w	r2, #0
 800140a:	619a      	str	r2, [r3, #24]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f04f 0200 	mov.w	r2, #0
 8001412:	61da      	str	r2, [r3, #28]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f04f 0200 	mov.w	r2, #0
 800141a:	621a      	str	r2, [r3, #32]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f04f 0200 	mov.w	r2, #0
 8001422:	625a      	str	r2, [r3, #36]	; 0x24
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	4618      	mov	r0, r3
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
	...

08001434 <_ZN7Encoder4initEv>:

void Encoder::init()
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 800143c:	213c      	movs	r1, #60	; 0x3c
 800143e:	4809      	ldr	r0, [pc, #36]	; (8001464 <_ZN7Encoder4initEv+0x30>)
 8001440:	f00d fffe 	bl	800f440 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 8001444:	213c      	movs	r1, #60	; 0x3c
 8001446:	4808      	ldr	r0, [pc, #32]	; (8001468 <_ZN7Encoder4initEv+0x34>)
 8001448:	f00d fffa 	bl	800f440 <HAL_TIM_Encoder_Start>
	TIM1 -> CNT = CNT_OFFSET;
 800144c:	4b07      	ldr	r3, [pc, #28]	; (800146c <_ZN7Encoder4initEv+0x38>)
 800144e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001452:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 8001454:	4b06      	ldr	r3, [pc, #24]	; (8001470 <_ZN7Encoder4initEv+0x3c>)
 8001456:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800145a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800145c:	bf00      	nop
 800145e:	3708      	adds	r7, #8
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	200479f4 	.word	0x200479f4
 8001468:	200476d8 	.word	0x200476d8
 800146c:	40010000 	.word	0x40010000
 8001470:	40010400 	.word	0x40010400
 8001474:	00000000 	.word	0x00000000

08001478 <_ZN7Encoder6updateEv>:

void Encoder::update()
{
 8001478:	b590      	push	{r4, r7, lr}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
	//static float pre_cnt_l, pre_cnt_r;
	float cnt_l = (float(CNT_OFFSET) - float(TIM1 -> CNT)) * CORRECTION_COEFFICIENT;
 8001480:	4b45      	ldr	r3, [pc, #276]	; (8001598 <_ZN7Encoder6updateEv+0x120>)
 8001482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001484:	ee07 3a90 	vmov	s15, r3
 8001488:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800148c:	ed9f 7a43 	vldr	s14, [pc, #268]	; 800159c <_ZN7Encoder6updateEv+0x124>
 8001490:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001494:	ed9f 7a42 	vldr	s14, [pc, #264]	; 80015a0 <_ZN7Encoder6updateEv+0x128>
 8001498:	ee67 7a87 	vmul.f32	s15, s15, s14
 800149c:	edc7 7a03 	vstr	s15, [r7, #12]
	float cnt_r = (float(TIM8 -> CNT) - float(CNT_OFFSET)) * CORRECTION_COEFFICIENT;
 80014a0:	4b40      	ldr	r3, [pc, #256]	; (80015a4 <_ZN7Encoder6updateEv+0x12c>)
 80014a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a4:	ee07 3a90 	vmov	s15, r3
 80014a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014ac:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800159c <_ZN7Encoder6updateEv+0x124>
 80014b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80014b4:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 80015a0 <_ZN7Encoder6updateEv+0x128>
 80014b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014bc:	edc7 7a02 	vstr	s15, [r7, #8]
	//monitor_cnt_l = cnt_l;

	cnt_l_ = cnt_l;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	68fa      	ldr	r2, [r7, #12]
 80014c4:	601a      	str	r2, [r3, #0]
	cnt_r_ = cnt_r;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	68ba      	ldr	r2, [r7, #8]
 80014ca:	605a      	str	r2, [r3, #4]

	//distance_ = distance_ + DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
	distance_ = DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	ed93 7a00 	vldr	s14, [r3]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	edd3 7a01 	vldr	s15, [r3, #4]
 80014d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014dc:	ee17 0a90 	vmov	r0, s15
 80014e0:	f7ff f84a 	bl	8000578 <__aeabi_f2d>
 80014e4:	a32a      	add	r3, pc, #168	; (adr r3, 8001590 <_ZN7Encoder6updateEv+0x118>)
 80014e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ea:	f7ff f89d 	bl	8000628 <__aeabi_dmul>
 80014ee:	4603      	mov	r3, r0
 80014f0:	460c      	mov	r4, r1
 80014f2:	4618      	mov	r0, r3
 80014f4:	4621      	mov	r1, r4
 80014f6:	f04f 0200 	mov.w	r2, #0
 80014fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014fe:	f7ff f9bd 	bl	800087c <__aeabi_ddiv>
 8001502:	4603      	mov	r3, r0
 8001504:	460c      	mov	r4, r1
 8001506:	4618      	mov	r0, r3
 8001508:	4621      	mov	r1, r4
 800150a:	f7ff fb85 	bl	8000c18 <__aeabi_d2f>
 800150e:	4602      	mov	r2, r0
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	609a      	str	r2, [r3, #8]
	distance_10mm_ += distance_;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	ed93 7a05 	vldr	s14, [r3, #20]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001520:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	edc3 7a05 	vstr	s15, [r3, #20]
	total_distance_ += distance_;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	ed93 7a06 	vldr	s14, [r3, #24]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	edd3 7a02 	vldr	s15, [r3, #8]
 8001536:	ee77 7a27 	vadd.f32	s15, s14, s15
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	edc3 7a06 	vstr	s15, [r3, #24]
	side_line_ignore_distance_ += distance_;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	ed93 7a07 	vldr	s14, [r3, #28]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	edd3 7a02 	vldr	s15, [r3, #8]
 800154c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	edc3 7a07 	vstr	s15, [r3, #28]
	cross_line_ignore_distance_ += distance_;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	ed93 7a08 	vldr	s14, [r3, #32]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001562:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	edc3 7a08 	vstr	s15, [r3, #32]
	goal_judge_distance_ += distance_;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	edd3 7a02 	vldr	s15, [r3, #8]
 8001578:	ee77 7a27 	vadd.f32	s15, s14, s15
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	//monitor_distance = distance_10mm_;
}
 8001582:	bf00      	nop
 8001584:	3714      	adds	r7, #20
 8001586:	46bd      	mov	sp, r7
 8001588:	bd90      	pop	{r4, r7, pc}
 800158a:	bf00      	nop
 800158c:	f3af 8000 	nop.w
 8001590:	ce73a049 	.word	0xce73a049
 8001594:	3f77a3f6 	.word	0x3f77a3f6
 8001598:	40010000 	.word	0x40010000
 800159c:	47000000 	.word	0x47000000
 80015a0:	3f912547 	.word	0x3f912547
 80015a4:	40010400 	.word	0x40010400

080015a8 <_ZN7Encoder5clearEv>:

void Encoder::clear()
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
	cnt_l_ = 0;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f04f 0200 	mov.w	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
	cnt_r_ = 0;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f04f 0200 	mov.w	r2, #0
 80015be:	605a      	str	r2, [r3, #4]
	TIM1 -> CNT = CNT_OFFSET;
 80015c0:	4b08      	ldr	r3, [pc, #32]	; (80015e4 <_ZN7Encoder5clearEv+0x3c>)
 80015c2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80015c6:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 80015c8:	4b07      	ldr	r3, [pc, #28]	; (80015e8 <_ZN7Encoder5clearEv+0x40>)
 80015ca:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80015ce:	625a      	str	r2, [r3, #36]	; 0x24
	distance_ = 0;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f04f 0200 	mov.w	r2, #0
 80015d6:	609a      	str	r2, [r3, #8]
}
 80015d8:	bf00      	nop
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	40010000 	.word	0x40010000
 80015e8:	40010400 	.word	0x40010400

080015ec <_ZN7Encoder6getCntERfS0_>:

void Encoder::getCnt(float &cnt_l, float &cnt_r)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	607a      	str	r2, [r7, #4]
	cnt_l = cnt_l_;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	601a      	str	r2, [r3, #0]
	cnt_r = cnt_r_;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	685a      	ldr	r2, [r3, #4]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	601a      	str	r2, [r3, #0]
}
 8001608:	bf00      	nop
 800160a:	3714      	adds	r7, #20
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <_ZN7Encoder11getDistanceEv>:

float Encoder::getDistance()
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
	return distance_;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	ee07 3a90 	vmov	s15, r3
}
 8001624:	eeb0 0a67 	vmov.f32	s0, s15
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr

08001632 <_ZN7Encoder15getDistance10mmEv>:

float Encoder::getDistance10mm()
{
 8001632:	b480      	push	{r7}
 8001634:	b083      	sub	sp, #12
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
	return distance_10mm_;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	695b      	ldr	r3, [r3, #20]
 800163e:	ee07 3a90 	vmov	s15, r3
}
 8001642:	eeb0 0a67 	vmov.f32	s0, s15
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <_ZN7Encoder16getTotalDistanceEv>:

float Encoder::getTotalDistance()
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
	return total_distance_;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	699b      	ldr	r3, [r3, #24]
 800165c:	ee07 3a90 	vmov	s15, r3
}
 8001660:	eeb0 0a67 	vmov.f32	s0, s15
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr

0800166e <_ZN7Encoder16setTotalDistanceEf>:

void Encoder::setTotalDistance(float true_distance){
 800166e:	b480      	push	{r7}
 8001670:	b083      	sub	sp, #12
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
 8001676:	ed87 0a00 	vstr	s0, [r7]
	total_distance_ = true_distance;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	683a      	ldr	r2, [r7, #0]
 800167e:	619a      	str	r2, [r3, #24]
}
 8001680:	bf00      	nop
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <_ZN7Encoder17clearDistance10mmEv>:
	return (total_cnt_l_ + total_cnt_r_) / 2;
}
*/

void Encoder::clearDistance10mm()
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
	//total_cnt_l_ = 0;
	//total_cnt_r_ = 0;
	distance_10mm_ = 0;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f04f 0200 	mov.w	r2, #0
 800169a:	615a      	str	r2, [r3, #20]
}
 800169c:	bf00      	nop
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <_ZN7Encoder18clearTotalDistanceEv>:

void Encoder::clearTotalDistance()
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
	total_distance_ = 0;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f04f 0200 	mov.w	r2, #0
 80016b6:	619a      	str	r2, [r3, #24]
}
 80016b8:	bf00      	nop
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <_ZN7Encoder25getSideLineIgnoreDistanceEv>:

float Encoder::getSideLineIgnoreDistance()
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
	return side_line_ignore_distance_;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	69db      	ldr	r3, [r3, #28]
 80016d0:	ee07 3a90 	vmov	s15, r3
}
 80016d4:	eeb0 0a67 	vmov.f32	s0, s15
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr

080016e2 <_ZN7Encoder27clearSideLineIgnoreDistanceEv>:

void Encoder::clearSideLineIgnoreDistance()
{
 80016e2:	b480      	push	{r7}
 80016e4:	b083      	sub	sp, #12
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
	side_line_ignore_distance_ = 0;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	f04f 0200 	mov.w	r2, #0
 80016f0:	61da      	str	r2, [r3, #28]
}
 80016f2:	bf00      	nop
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr

080016fe <_ZN7Encoder26getCrossLineIgnoreDistanceEv>:
float Encoder::getCrossLineIgnoreDistance()
{
 80016fe:	b480      	push	{r7}
 8001700:	b083      	sub	sp, #12
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
	return cross_line_ignore_distance_;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6a1b      	ldr	r3, [r3, #32]
 800170a:	ee07 3a90 	vmov	s15, r3
}
 800170e:	eeb0 0a67 	vmov.f32	s0, s15
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>:

void Encoder::clearCrossLineIgnoreDistance()
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
	cross_line_ignore_distance_ = 0;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f04f 0200 	mov.w	r2, #0
 800172a:	621a      	str	r2, [r3, #32]
}
 800172c:	bf00      	nop
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <_ZN7Encoder20getGoalJudgeDistanceEv>:

float Encoder::getGoalJudgeDistance()
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
	return goal_judge_distance_;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001744:	ee07 3a90 	vmov	s15, r3
}
 8001748:	eeb0 0a67 	vmov.f32	s0, s15
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <_ZN7Encoder22clearGoalJudgeDistanceEv>:

void Encoder::clearGoalJudgeDistance()
{
 8001756:	b480      	push	{r7}
 8001758:	b083      	sub	sp, #12
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
	goal_judge_distance_= 0;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f04f 0200 	mov.w	r2, #0
 8001764:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001766:	bf00      	nop
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr

08001772 <user_fopen>:
//* 役割　：　fopenする
//* 引数　：　char, float *: short　: フォルダ名、ファイル名
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fopen(const char *p_folder_name, const char *p_file_name){
 8001772:	b580      	push	{r7, lr}
 8001774:	b084      	sub	sp, #16
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
 800177a:	6039      	str	r1, [r7, #0]

	FRESULT ret = 0;
 800177c:	2300      	movs	r3, #0
 800177e:	73fb      	strb	r3, [r7, #15]

	create_path(p_folder_name, p_file_name);
 8001780:	6839      	ldr	r1, [r7, #0]
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f000 f978 	bl	8001a78 <create_path>

	fopen_folder_and_file();	//書き込むファイルを選択
 8001788:	f000 f98c 	bl	8001aa4 <fopen_folder_and_file>

	return ret;
 800178c:	7bfb      	ldrb	r3, [r7, #15]
}
 800178e:	4618      	mov	r0, r3
 8001790:	3710      	adds	r7, #16
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
	...

08001798 <user_fclose>:
//* 役割　：　fcloseする
//* 引数　：　void
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fclose(){
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 800179e:	2300      	movs	r3, #0
 80017a0:	71fb      	strb	r3, [r7, #7]

	f_close(&fil);	//ファイル閉じる
 80017a2:	4804      	ldr	r0, [pc, #16]	; (80017b4 <user_fclose+0x1c>)
 80017a4:	f012 fba6 	bl	8013ef4 <f_close>

	return ret;
 80017a8:	79fb      	ldrb	r3, [r7, #7]
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	200465e4 	.word	0x200465e4

080017b8 <sd_write_float>:
//* 役割　：　SDに書き込む
//* 引数　：　short, float *, char : 変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_float(short size, float *data, char state){
 80017b8:	b590      	push	{r4, r7, lr}
 80017ba:	b087      	sub	sp, #28
 80017bc:	af02      	add	r7, sp, #8
 80017be:	4603      	mov	r3, r0
 80017c0:	6039      	str	r1, [r7, #0]
 80017c2:	80fb      	strh	r3, [r7, #6]
 80017c4:	4613      	mov	r3, r2
 80017c6:	717b      	strb	r3, [r7, #5]
	FRESULT ret = 0;
 80017c8:	2300      	movs	r3, #0
 80017ca:	737b      	strb	r3, [r7, #13]

	for(short i = 0 ; i < size; i++){
 80017cc:	2300      	movs	r3, #0
 80017ce:	81fb      	strh	r3, [r7, #14]
 80017d0:	e030      	b.n	8001834 <sd_write_float+0x7c>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 80017d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	683a      	ldr	r2, [r7, #0]
 80017da:	4413      	add	r3, r2
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4618      	mov	r0, r3
 80017e0:	f7fe feca 	bl	8000578 <__aeabi_f2d>
 80017e4:	4603      	mov	r3, r0
 80017e6:	460c      	mov	r4, r1
 80017e8:	e9cd 3400 	strd	r3, r4, [sp]
 80017ec:	4a17      	ldr	r2, [pc, #92]	; (800184c <sd_write_float+0x94>)
 80017ee:	2180      	movs	r1, #128	; 0x80
 80017f0:	4817      	ldr	r0, [pc, #92]	; (8001850 <sd_write_float+0x98>)
 80017f2:	f013 ff0f 	bl	8015614 <sniprintf>

		if(state == ADD_WRITE){
 80017f6:	797b      	ldrb	r3, [r7, #5]
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d106      	bne.n	800180a <sd_write_float+0x52>
			f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 80017fc:	4b15      	ldr	r3, [pc, #84]	; (8001854 <sd_write_float+0x9c>)
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	4619      	mov	r1, r3
 8001802:	4814      	ldr	r0, [pc, #80]	; (8001854 <sd_write_float+0x9c>)
 8001804:	f012 fbea 	bl	8013fdc <f_lseek>
 8001808:	e003      	b.n	8001812 <sd_write_float+0x5a>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
 800180a:	2100      	movs	r1, #0
 800180c:	4811      	ldr	r0, [pc, #68]	; (8001854 <sd_write_float+0x9c>)
 800180e:	f012 fbe5 	bl	8013fdc <f_lseek>
		}

		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 8001812:	480f      	ldr	r0, [pc, #60]	; (8001850 <sd_write_float+0x98>)
 8001814:	f7fe fcf4 	bl	8000200 <strlen>
 8001818:	4602      	mov	r2, r0
 800181a:	4b0f      	ldr	r3, [pc, #60]	; (8001858 <sd_write_float+0xa0>)
 800181c:	490c      	ldr	r1, [pc, #48]	; (8001850 <sd_write_float+0x98>)
 800181e:	480d      	ldr	r0, [pc, #52]	; (8001854 <sd_write_float+0x9c>)
 8001820:	f012 f953 	bl	8013aca <f_write>

		bufclear();	//書き込み用のバッファをクリア
 8001824:	f000 f958 	bl	8001ad8 <bufclear>
	for(short i = 0 ; i < size; i++){
 8001828:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800182c:	b29b      	uxth	r3, r3
 800182e:	3301      	adds	r3, #1
 8001830:	b29b      	uxth	r3, r3
 8001832:	81fb      	strh	r3, [r7, #14]
 8001834:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001838:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800183c:	429a      	cmp	r2, r3
 800183e:	dbc8      	blt.n	80017d2 <sd_write_float+0x1a>
	}
	return ret;
 8001840:	7b7b      	ldrb	r3, [r7, #13]
}
 8001842:	4618      	mov	r0, r3
 8001844:	3714      	adds	r7, #20
 8001846:	46bd      	mov	sp, r7
 8001848:	bd90      	pop	{r4, r7, pc}
 800184a:	bf00      	nop
 800184c:	08018d38 	.word	0x08018d38
 8001850:	20046554 	.word	0x20046554
 8001854:	200465e4 	.word	0x200465e4
 8001858:	200465d4 	.word	0x200465d4

0800185c <sd_write_array_float>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data, char state){
 800185c:	b590      	push	{r4, r7, lr}
 800185e:	b089      	sub	sp, #36	; 0x24
 8001860:	af02      	add	r7, sp, #8
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	60b9      	str	r1, [r7, #8]
 8001866:	603b      	str	r3, [r7, #0]
 8001868:	4613      	mov	r3, r2
 800186a:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 800186c:	2300      	movs	r3, #0
 800186e:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001870:	68b9      	ldr	r1, [r7, #8]
 8001872:	68f8      	ldr	r0, [r7, #12]
 8001874:	f000 f900 	bl	8001a78 <create_path>

	if(state == OVER_WRITE){
 8001878:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800187c:	2b00      	cmp	r3, #0
 800187e:	d108      	bne.n	8001892 <sd_write_array_float+0x36>
		f_chdir(dirpath);
 8001880:	4822      	ldr	r0, [pc, #136]	; (800190c <sd_write_array_float+0xb0>)
 8001882:	f012 fb61 	bl	8013f48 <f_chdir>
		f_unlink(filepath);	//	一回消す
 8001886:	4822      	ldr	r0, [pc, #136]	; (8001910 <sd_write_array_float+0xb4>)
 8001888:	f012 fdcc 	bl	8014424 <f_unlink>
		f_chdir("..");
 800188c:	4821      	ldr	r0, [pc, #132]	; (8001914 <sd_write_array_float+0xb8>)
 800188e:	f012 fb5b 	bl	8013f48 <f_chdir>
	}

	fopen_folder_and_file();	//	書き込むファイルを選択
 8001892:	f000 f907 	bl	8001aa4 <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 8001896:	2300      	movs	r3, #0
 8001898:	82fb      	strh	r3, [r7, #22]
 800189a:	e028      	b.n	80018ee <sd_write_array_float+0x92>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 800189c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	683a      	ldr	r2, [r7, #0]
 80018a4:	4413      	add	r3, r2
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7fe fe65 	bl	8000578 <__aeabi_f2d>
 80018ae:	4603      	mov	r3, r0
 80018b0:	460c      	mov	r4, r1
 80018b2:	e9cd 3400 	strd	r3, r4, [sp]
 80018b6:	4a18      	ldr	r2, [pc, #96]	; (8001918 <sd_write_array_float+0xbc>)
 80018b8:	2180      	movs	r1, #128	; 0x80
 80018ba:	4818      	ldr	r0, [pc, #96]	; (800191c <sd_write_array_float+0xc0>)
 80018bc:	f013 feaa 	bl	8015614 <sniprintf>

		f_lseek(&fil, f_size(&fil));	//	ファイルの最後に移動
 80018c0:	4b17      	ldr	r3, [pc, #92]	; (8001920 <sd_write_array_float+0xc4>)
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	4619      	mov	r1, r3
 80018c6:	4816      	ldr	r0, [pc, #88]	; (8001920 <sd_write_array_float+0xc4>)
 80018c8:	f012 fb88 	bl	8013fdc <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//	書き込む
 80018cc:	4813      	ldr	r0, [pc, #76]	; (800191c <sd_write_array_float+0xc0>)
 80018ce:	f7fe fc97 	bl	8000200 <strlen>
 80018d2:	4602      	mov	r2, r0
 80018d4:	4b13      	ldr	r3, [pc, #76]	; (8001924 <sd_write_array_float+0xc8>)
 80018d6:	4911      	ldr	r1, [pc, #68]	; (800191c <sd_write_array_float+0xc0>)
 80018d8:	4811      	ldr	r0, [pc, #68]	; (8001920 <sd_write_array_float+0xc4>)
 80018da:	f012 f8f6 	bl	8013aca <f_write>

		bufclear();	//	書き込み用のバッファをクリア
 80018de:	f000 f8fb 	bl	8001ad8 <bufclear>
	for(short i = 0 ; i < size; i++){
 80018e2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	3301      	adds	r3, #1
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	82fb      	strh	r3, [r7, #22]
 80018ee:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80018f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018f6:	429a      	cmp	r2, r3
 80018f8:	dbd0      	blt.n	800189c <sd_write_array_float+0x40>
	}

	f_close(&fil);	//	ファイル閉じる
 80018fa:	4809      	ldr	r0, [pc, #36]	; (8001920 <sd_write_array_float+0xc4>)
 80018fc:	f012 fafa 	bl	8013ef4 <f_close>

	return ret;
 8001900:	7d7b      	ldrb	r3, [r7, #21]
}
 8001902:	4618      	mov	r0, r3
 8001904:	371c      	adds	r7, #28
 8001906:	46bd      	mov	sp, r7
 8001908:	bd90      	pop	{r4, r7, pc}
 800190a:	bf00      	nop
 800190c:	20046454 	.word	0x20046454
 8001910:	20045314 	.word	0x20045314
 8001914:	08018d54 	.word	0x08018d54
 8001918:	08018d38 	.word	0x08018d38
 800191c:	20046554 	.word	0x20046554
 8001920:	200465e4 	.word	0x200465e4
 8001924:	200465d4 	.word	0x200465d4

08001928 <sd_read_array_float>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, float *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data){
 8001928:	b580      	push	{r7, lr}
 800192a:	b086      	sub	sp, #24
 800192c:	af00      	add	r7, sp, #0
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	60b9      	str	r1, [r7, #8]
 8001932:	603b      	str	r3, [r7, #0]
 8001934:	4613      	mov	r3, r2
 8001936:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001938:	2300      	movs	r3, #0
 800193a:	757b      	strb	r3, [r7, #21]
	short i = 0;
 800193c:	2300      	movs	r3, #0
 800193e:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 8001940:	68b9      	ldr	r1, [r7, #8]
 8001942:	68f8      	ldr	r0, [r7, #12]
 8001944:	f000 f898 	bl	8001a78 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 8001948:	f000 f8ac 	bl	8001aa4 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 800194c:	e019      	b.n	8001982 <sd_read_array_float+0x5a>
		sscanf(buffer, "%f", data + i);
 800194e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	683a      	ldr	r2, [r7, #0]
 8001956:	4413      	add	r3, r2
 8001958:	461a      	mov	r2, r3
 800195a:	4913      	ldr	r1, [pc, #76]	; (80019a8 <sd_read_array_float+0x80>)
 800195c:	4813      	ldr	r0, [pc, #76]	; (80019ac <sd_read_array_float+0x84>)
 800195e:	f013 fead 	bl	80156bc <siscanf>
		i++;
 8001962:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001966:	b29b      	uxth	r3, r3
 8001968:	3301      	adds	r3, #1
 800196a:	b29b      	uxth	r3, r3
 800196c:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 800196e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001972:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001976:	429a      	cmp	r2, r3
 8001978:	db03      	blt.n	8001982 <sd_read_array_float+0x5a>
 800197a:	88fb      	ldrh	r3, [r7, #6]
 800197c:	3b01      	subs	r3, #1
 800197e:	b29b      	uxth	r3, r3
 8001980:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001982:	4a0b      	ldr	r2, [pc, #44]	; (80019b0 <sd_read_array_float+0x88>)
 8001984:	2180      	movs	r1, #128	; 0x80
 8001986:	4809      	ldr	r0, [pc, #36]	; (80019ac <sd_read_array_float+0x84>)
 8001988:	f012 ff2a 	bl	80147e0 <f_gets>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d1dd      	bne.n	800194e <sd_read_array_float+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 8001992:	f000 f8a1 	bl	8001ad8 <bufclear>

	f_close(&fil);	//ファイル閉じる
 8001996:	4806      	ldr	r0, [pc, #24]	; (80019b0 <sd_read_array_float+0x88>)
 8001998:	f012 faac 	bl	8013ef4 <f_close>

	return ret;
 800199c:	7d7b      	ldrb	r3, [r7, #21]
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3718      	adds	r7, #24
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	08018d44 	.word	0x08018d44
 80019ac:	20046554 	.word	0x20046554
 80019b0:	200465e4 	.word	0x200465e4

080019b4 <sd_read_array_double>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, double *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_double(const char *p_folder_name, const char *p_file_name, short size, double *data){
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b086      	sub	sp, #24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	603b      	str	r3, [r7, #0]
 80019c0:	4613      	mov	r3, r2
 80019c2:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 80019c4:	2300      	movs	r3, #0
 80019c6:	757b      	strb	r3, [r7, #21]
	short i = 0;
 80019c8:	2300      	movs	r3, #0
 80019ca:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 80019cc:	68b9      	ldr	r1, [r7, #8]
 80019ce:	68f8      	ldr	r0, [r7, #12]
 80019d0:	f000 f852 	bl	8001a78 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 80019d4:	f000 f866 	bl	8001aa4 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80019d8:	e019      	b.n	8001a0e <sd_read_array_double+0x5a>
		sscanf(buffer, "%lf", data + i);
 80019da:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80019de:	00db      	lsls	r3, r3, #3
 80019e0:	683a      	ldr	r2, [r7, #0]
 80019e2:	4413      	add	r3, r2
 80019e4:	461a      	mov	r2, r3
 80019e6:	4913      	ldr	r1, [pc, #76]	; (8001a34 <sd_read_array_double+0x80>)
 80019e8:	4813      	ldr	r0, [pc, #76]	; (8001a38 <sd_read_array_double+0x84>)
 80019ea:	f013 fe67 	bl	80156bc <siscanf>
		i++;
 80019ee:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	3301      	adds	r3, #1
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 80019fa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80019fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a02:	429a      	cmp	r2, r3
 8001a04:	db03      	blt.n	8001a0e <sd_read_array_double+0x5a>
 8001a06:	88fb      	ldrh	r3, [r7, #6]
 8001a08:	3b01      	subs	r3, #1
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001a0e:	4a0b      	ldr	r2, [pc, #44]	; (8001a3c <sd_read_array_double+0x88>)
 8001a10:	2180      	movs	r1, #128	; 0x80
 8001a12:	4809      	ldr	r0, [pc, #36]	; (8001a38 <sd_read_array_double+0x84>)
 8001a14:	f012 fee4 	bl	80147e0 <f_gets>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d1dd      	bne.n	80019da <sd_read_array_double+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 8001a1e:	f000 f85b 	bl	8001ad8 <bufclear>

	f_close(&fil);	//ファイル閉じる
 8001a22:	4806      	ldr	r0, [pc, #24]	; (8001a3c <sd_read_array_double+0x88>)
 8001a24:	f012 fa66 	bl	8013ef4 <f_close>

	return ret;
 8001a28:	7d7b      	ldrb	r3, [r7, #21]
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3718      	adds	r7, #24
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	08018d50 	.word	0x08018d50
 8001a38:	20046554 	.word	0x20046554
 8001a3c:	200465e4 	.word	0x200465e4

08001a40 <sd_mount>:
//* 役割　：　SDカードをマウント
//* 引数　：　void:
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_mount(){
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 8001a46:	2300      	movs	r3, #0
 8001a48:	71fb      	strb	r3, [r7, #7]

	if(f_mount(&fs, "", 1) == FR_OK) ret = 1;
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	4908      	ldr	r1, [pc, #32]	; (8001a70 <sd_mount+0x30>)
 8001a4e:	4809      	ldr	r0, [pc, #36]	; (8001a74 <sd_mount+0x34>)
 8001a50:	f011 fcc8 	bl	80133e4 <f_mount>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d102      	bne.n	8001a60 <sd_mount+0x20>
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	71fb      	strb	r3, [r7, #7]
 8001a5e:	e001      	b.n	8001a64 <sd_mount+0x24>
	else ret = 0;
 8001a60:	2300      	movs	r3, #0
 8001a62:	71fb      	strb	r3, [r7, #7]

	return ret;
 8001a64:	79fb      	ldrb	r3, [r7, #7]
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	08018d60 	.word	0x08018d60
 8001a74:	20045414 	.word	0x20045414

08001a78 <create_path>:
//* 役割　：　操作するパスの文字列を作る
//* 引数　：　char, char: フォルダ名, ファイル名
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void create_path(char const *p_folder_name, char const *p_file_name){
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]

	sprintf(dirpath, "%s", p_folder_name);
 8001a82:	6879      	ldr	r1, [r7, #4]
 8001a84:	4805      	ldr	r0, [pc, #20]	; (8001a9c <create_path+0x24>)
 8001a86:	f013 fe45 	bl	8015714 <strcpy>

	sprintf(filepath, "%s", p_file_name);
 8001a8a:	6839      	ldr	r1, [r7, #0]
 8001a8c:	4804      	ldr	r0, [pc, #16]	; (8001aa0 <create_path+0x28>)
 8001a8e:	f013 fe41 	bl	8015714 <strcpy>

}
 8001a92:	bf00      	nop
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	20046454 	.word	0x20046454
 8001aa0:	20045314 	.word	0x20045314

08001aa4 <fopen_folder_and_file>:
//* 役割　：　操作するファイルを選択する_
//* 引数　：　char: ファイル選択
//* 戻り値：　char: 状態チェック	0(マウント失敗) or 1(成功)
//* 備考 : なし
//************************************************************************/
void fopen_folder_and_file(){	//mkdir
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0

	f_mkdir(dirpath);
 8001aa8:	4807      	ldr	r0, [pc, #28]	; (8001ac8 <fopen_folder_and_file+0x24>)
 8001aaa:	f012 fd7d 	bl	80145a8 <f_mkdir>

	f_chdir(dirpath);
 8001aae:	4806      	ldr	r0, [pc, #24]	; (8001ac8 <fopen_folder_and_file+0x24>)
 8001ab0:	f012 fa4a 	bl	8013f48 <f_chdir>

	f_open(&fil, filepath, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001ab4:	2213      	movs	r2, #19
 8001ab6:	4905      	ldr	r1, [pc, #20]	; (8001acc <fopen_folder_and_file+0x28>)
 8001ab8:	4805      	ldr	r0, [pc, #20]	; (8001ad0 <fopen_folder_and_file+0x2c>)
 8001aba:	f011 fcd9 	bl	8013470 <f_open>

	f_chdir("..");
 8001abe:	4805      	ldr	r0, [pc, #20]	; (8001ad4 <fopen_folder_and_file+0x30>)
 8001ac0:	f012 fa42 	bl	8013f48 <f_chdir>


}
 8001ac4:	bf00      	nop
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	20046454 	.word	0x20046454
 8001acc:	20045314 	.word	0x20045314
 8001ad0:	200465e4 	.word	0x200465e4
 8001ad4:	08018d54 	.word	0x08018d54

08001ad8 <bufclear>:
//* 役割　：　バッファをクリア
//* 引数　：　void:
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void bufclear(void){
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFF_SIZE; i++){
 8001ade:	2300      	movs	r3, #0
 8001ae0:	607b      	str	r3, [r7, #4]
 8001ae2:	e007      	b.n	8001af4 <bufclear+0x1c>
		buffer[i] = '\0';
 8001ae4:	4a08      	ldr	r2, [pc, #32]	; (8001b08 <bufclear+0x30>)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4413      	add	r3, r2
 8001aea:	2200      	movs	r2, #0
 8001aec:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFF_SIZE; i++){
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	3301      	adds	r3, #1
 8001af2:	607b      	str	r3, [r7, #4]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2b7f      	cmp	r3, #127	; 0x7f
 8001af8:	ddf4      	ble.n	8001ae4 <bufclear+0xc>
	}
}
 8001afa:	bf00      	nop
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	20046554 	.word	0x20046554

08001b0c <read_byte>:
#include "ICM_20648.h"

volatile int16_t xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	4603      	mov	r3, r0
 8001b14:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 8001b16:	79fb      	ldrb	r3, [r7, #7]
 8001b18:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8001b20:	2200      	movs	r2, #0
 8001b22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b26:	480e      	ldr	r0, [pc, #56]	; (8001b60 <read_byte+0x54>)
 8001b28:	f009 fc88 	bl	800b43c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001b2c:	f107 010f 	add.w	r1, r7, #15
 8001b30:	2364      	movs	r3, #100	; 0x64
 8001b32:	2201      	movs	r2, #1
 8001b34:	480b      	ldr	r0, [pc, #44]	; (8001b64 <read_byte+0x58>)
 8001b36:	f00c fe49 	bl	800e7cc <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,&val,1,100);
 8001b3a:	f107 010e 	add.w	r1, r7, #14
 8001b3e:	2364      	movs	r3, #100	; 0x64
 8001b40:	2201      	movs	r2, #1
 8001b42:	4808      	ldr	r0, [pc, #32]	; (8001b64 <read_byte+0x58>)
 8001b44:	f00c ff76 	bl	800ea34 <HAL_SPI_Receive>
	CS_SET;
 8001b48:	2201      	movs	r2, #1
 8001b4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b4e:	4804      	ldr	r0, [pc, #16]	; (8001b60 <read_byte+0x54>)
 8001b50:	f009 fc74 	bl	800b43c <HAL_GPIO_WritePin>

	return val;
 8001b54:	7bbb      	ldrb	r3, [r7, #14]
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40020400 	.word	0x40020400
 8001b64:	20047680 	.word	0x20047680

08001b68 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4603      	mov	r3, r0
 8001b70:	460a      	mov	r2, r1
 8001b72:	71fb      	strb	r3, [r7, #7]
 8001b74:	4613      	mov	r3, r2
 8001b76:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8001b78:	79fb      	ldrb	r3, [r7, #7]
 8001b7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8001b82:	2200      	movs	r2, #0
 8001b84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b88:	480c      	ldr	r0, [pc, #48]	; (8001bbc <write_byte+0x54>)
 8001b8a:	f009 fc57 	bl	800b43c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001b8e:	f107 010f 	add.w	r1, r7, #15
 8001b92:	2364      	movs	r3, #100	; 0x64
 8001b94:	2201      	movs	r2, #1
 8001b96:	480a      	ldr	r0, [pc, #40]	; (8001bc0 <write_byte+0x58>)
 8001b98:	f00c fe18 	bl	800e7cc <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&val,1,100);
 8001b9c:	1db9      	adds	r1, r7, #6
 8001b9e:	2364      	movs	r3, #100	; 0x64
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	4807      	ldr	r0, [pc, #28]	; (8001bc0 <write_byte+0x58>)
 8001ba4:	f00c fe12 	bl	800e7cc <HAL_SPI_Transmit>
	CS_SET;
 8001ba8:	2201      	movs	r2, #1
 8001baa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bae:	4803      	ldr	r0, [pc, #12]	; (8001bbc <write_byte+0x54>)
 8001bb0:	f009 fc44 	bl	800b43c <HAL_GPIO_WritePin>
}
 8001bb4:	bf00      	nop
 8001bb6:	3710      	adds	r7, #16
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	40020400 	.word	0x40020400
 8001bc0:	20047680 	.word	0x20047680

08001bc4 <IMU_init>:

uint16_t IMU_init() {
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
	uint8_t who_am_i;
	uint16_t ret = 0;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	80fb      	strh	r3, [r7, #6]

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 8001bce:	2000      	movs	r0, #0
 8001bd0:	f7ff ff9c 	bl	8001b0c <read_byte>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	717b      	strb	r3, [r7, #5]
	if ( who_am_i == 0xE0 ) {
 8001bd8:	797b      	ldrb	r3, [r7, #5]
 8001bda:	2be0      	cmp	r3, #224	; 0xe0
 8001bdc:	d119      	bne.n	8001c12 <IMU_init+0x4e>
		ret = 1;
 8001bde:	2301      	movs	r3, #1
 8001be0:	80fb      	strh	r3, [r7, #6]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 8001be2:	2101      	movs	r1, #1
 8001be4:	2006      	movs	r0, #6
 8001be6:	f7ff ffbf 	bl	8001b68 <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 8001bea:	2110      	movs	r1, #16
 8001bec:	2003      	movs	r0, #3
 8001bee:	f7ff ffbb 	bl	8001b68 <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 8001bf2:	2120      	movs	r1, #32
 8001bf4:	207f      	movs	r0, #127	; 0x7f
 8001bf6:	f7ff ffb7 	bl	8001b68 <write_byte>
		write_byte(0x01,0x06);	//レンジ±2000dps
 8001bfa:	2106      	movs	r1, #6
 8001bfc:	2001      	movs	r0, #1
 8001bfe:	f7ff ffb3 	bl	8001b68 <write_byte>
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//レンジ±16g
 8001c02:	2106      	movs	r1, #6
 8001c04:	2014      	movs	r0, #20
 8001c06:	f7ff ffaf 	bl	8001b68 <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	207f      	movs	r0, #127	; 0x7f
 8001c0e:	f7ff ffab 	bl	8001b68 <write_byte>
	}
	return ret;
 8001c12:	88fb      	ldrh	r3, [r7, #6]
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3708      	adds	r7, #8
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <read_gyro_data>:

void read_gyro_data() {
 8001c1c:	b598      	push	{r3, r4, r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 8001c20:	2033      	movs	r0, #51	; 0x33
 8001c22:	f7ff ff73 	bl	8001b0c <read_byte>
 8001c26:	4603      	mov	r3, r0
 8001c28:	021b      	lsls	r3, r3, #8
 8001c2a:	b21c      	sxth	r4, r3
 8001c2c:	2034      	movs	r0, #52	; 0x34
 8001c2e:	f7ff ff6d 	bl	8001b0c <read_byte>
 8001c32:	4603      	mov	r3, r0
 8001c34:	b21b      	sxth	r3, r3
 8001c36:	4323      	orrs	r3, r4
 8001c38:	b21a      	sxth	r2, r3
 8001c3a:	4b11      	ldr	r3, [pc, #68]	; (8001c80 <read_gyro_data+0x64>)
 8001c3c:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 8001c3e:	2035      	movs	r0, #53	; 0x35
 8001c40:	f7ff ff64 	bl	8001b0c <read_byte>
 8001c44:	4603      	mov	r3, r0
 8001c46:	021b      	lsls	r3, r3, #8
 8001c48:	b21c      	sxth	r4, r3
 8001c4a:	2036      	movs	r0, #54	; 0x36
 8001c4c:	f7ff ff5e 	bl	8001b0c <read_byte>
 8001c50:	4603      	mov	r3, r0
 8001c52:	b21b      	sxth	r3, r3
 8001c54:	4323      	orrs	r3, r4
 8001c56:	b21a      	sxth	r2, r3
 8001c58:	4b0a      	ldr	r3, [pc, #40]	; (8001c84 <read_gyro_data+0x68>)
 8001c5a:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 8001c5c:	2037      	movs	r0, #55	; 0x37
 8001c5e:	f7ff ff55 	bl	8001b0c <read_byte>
 8001c62:	4603      	mov	r3, r0
 8001c64:	021b      	lsls	r3, r3, #8
 8001c66:	b21c      	sxth	r4, r3
 8001c68:	2038      	movs	r0, #56	; 0x38
 8001c6a:	f7ff ff4f 	bl	8001b0c <read_byte>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	b21b      	sxth	r3, r3
 8001c72:	4323      	orrs	r3, r4
 8001c74:	b21a      	sxth	r2, r3
 8001c76:	4b04      	ldr	r3, [pc, #16]	; (8001c88 <read_gyro_data+0x6c>)
 8001c78:	801a      	strh	r2, [r3, #0]
}
 8001c7a:	bf00      	nop
 8001c7c:	bd98      	pop	{r3, r4, r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	2004761c 	.word	0x2004761c
 8001c84:	2004761a 	.word	0x2004761a
 8001c88:	20047614 	.word	0x20047614

08001c8c <_ZN3IMUC1Ev>:

#define PI 3.1415926535

float mon_zg;

IMU::IMU() : xa_(0), ya_(0), za_(0), xg_(0), yg_(0), zg_(0), offset_(0)
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2200      	movs	r2, #0
 8001c98:	801a      	strh	r2, [r3, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	805a      	strh	r2, [r3, #2]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	809a      	strh	r2, [r3, #4]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	80da      	strh	r2, [r3, #6]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	811a      	strh	r2, [r3, #8]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	815a      	strh	r2, [r3, #10]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f04f 0200 	mov.w	r2, #0
 8001cbe:	60da      	str	r2, [r3, #12]
{

}
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
	...

08001cd0 <_ZN3IMU4initEv>:

void IMU::init()
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
	uint16_t who_i_am;
	who_i_am = IMU_init();
 8001cd8:	f7ff ff74 	bl	8001bc4 <IMU_init>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	81fb      	strh	r3, [r7, #14]
	//printf("who i am: %d\n", who_i_am);

	lcd_clear();
 8001ce0:	f7ff f9de 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	2000      	movs	r0, #0
 8001ce8:	f7ff f9ea 	bl	80010c0 <lcd_locate>
	lcd_printf("IMUstatus");
 8001cec:	4809      	ldr	r0, [pc, #36]	; (8001d14 <_ZN3IMU4initEv+0x44>)
 8001cee:	f7ff fa11 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001cf2:	2101      	movs	r1, #1
 8001cf4:	2000      	movs	r0, #0
 8001cf6:	f7ff f9e3 	bl	80010c0 <lcd_locate>
	lcd_printf("%d", who_i_am);
 8001cfa:	89fb      	ldrh	r3, [r7, #14]
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4806      	ldr	r0, [pc, #24]	; (8001d18 <_ZN3IMU4initEv+0x48>)
 8001d00:	f7ff fa08 	bl	8001114 <lcd_printf>

	HAL_Delay(500);
 8001d04:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d08:	f008 f902 	bl	8009f10 <HAL_Delay>

}
 8001d0c:	bf00      	nop
 8001d0e:	3710      	adds	r7, #16
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	08018d64 	.word	0x08018d64
 8001d18:	08018d70 	.word	0x08018d70
 8001d1c:	00000000 	.word	0x00000000

08001d20 <_ZN3IMU12updateValuesEv>:
	if(array_idx >= STORE_NUM) array_idx = 0;

}
*/
void IMU::updateValues()
{
 8001d20:	b5b0      	push	{r4, r5, r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
	read_gyro_data();
 8001d28:	f7ff ff78 	bl	8001c1c <read_gyro_data>
	//read_accel_data();

	//xa_ = xa;
	//ya_ = ya;
	//za_ = za;
	xg_ = xg;
 8001d2c:	4b24      	ldr	r3, [pc, #144]	; (8001dc0 <_ZN3IMU12updateValuesEv+0xa0>)
 8001d2e:	881b      	ldrh	r3, [r3, #0]
 8001d30:	b21a      	sxth	r2, r3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	80da      	strh	r2, [r3, #6]
	yg_ = yg;
 8001d36:	4b23      	ldr	r3, [pc, #140]	; (8001dc4 <_ZN3IMU12updateValuesEv+0xa4>)
 8001d38:	881b      	ldrh	r3, [r3, #0]
 8001d3a:	b21a      	sxth	r2, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	811a      	strh	r2, [r3, #8]
	zg_ = zg;
 8001d40:	4b21      	ldr	r3, [pc, #132]	; (8001dc8 <_ZN3IMU12updateValuesEv+0xa8>)
 8001d42:	881b      	ldrh	r3, [r3, #0]
 8001d44:	b21a      	sxth	r2, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	815a      	strh	r2, [r3, #10]

	static int16_t pre_zg;
	zg_ = ((R_IMU)*(zg_) + (1.0 - (R_IMU))* (pre_zg)); // lowpath filter
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7fe fbff 	bl	8000554 <__aeabi_i2d>
 8001d56:	a316      	add	r3, pc, #88	; (adr r3, 8001db0 <_ZN3IMU12updateValuesEv+0x90>)
 8001d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d5c:	f7fe fc64 	bl	8000628 <__aeabi_dmul>
 8001d60:	4603      	mov	r3, r0
 8001d62:	460c      	mov	r4, r1
 8001d64:	4625      	mov	r5, r4
 8001d66:	461c      	mov	r4, r3
 8001d68:	4b18      	ldr	r3, [pc, #96]	; (8001dcc <_ZN3IMU12updateValuesEv+0xac>)
 8001d6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7fe fbf0 	bl	8000554 <__aeabi_i2d>
 8001d74:	a310      	add	r3, pc, #64	; (adr r3, 8001db8 <_ZN3IMU12updateValuesEv+0x98>)
 8001d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d7a:	f7fe fc55 	bl	8000628 <__aeabi_dmul>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	460b      	mov	r3, r1
 8001d82:	4620      	mov	r0, r4
 8001d84:	4629      	mov	r1, r5
 8001d86:	f7fe fa99 	bl	80002bc <__adddf3>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	460c      	mov	r4, r1
 8001d8e:	4618      	mov	r0, r3
 8001d90:	4621      	mov	r1, r4
 8001d92:	f7fe fef9 	bl	8000b88 <__aeabi_d2iz>
 8001d96:	4603      	mov	r3, r0
 8001d98:	b21a      	sxth	r2, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	815a      	strh	r2, [r3, #10]

	pre_zg = zg_;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001da4:	4b09      	ldr	r3, [pc, #36]	; (8001dcc <_ZN3IMU12updateValuesEv+0xac>)
 8001da6:	801a      	strh	r2, [r3, #0]
	zg_ = temp_val[2];
	mon_zg_ = zg_;
	*/


}
 8001da8:	bf00      	nop
 8001daa:	3708      	adds	r7, #8
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bdb0      	pop	{r4, r5, r7, pc}
 8001db0:	47ae147b 	.word	0x47ae147b
 8001db4:	3f847ae1 	.word	0x3f847ae1
 8001db8:	7ae147ae 	.word	0x7ae147ae
 8001dbc:	3fefae14 	.word	0x3fefae14
 8001dc0:	2004761c 	.word	0x2004761c
 8001dc4:	2004761a 	.word	0x2004761a
 8001dc8:	20047614 	.word	0x20047614
 8001dcc:	200001fc 	.word	0x200001fc

08001dd0 <_ZN3IMU8getOmegaEv>:

float IMU::getOmega()
{
 8001dd0:	b5b0      	push	{r4, r5, r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
	float corrected_zg = float(zg_) - offset_;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001dde:	ee07 3a90 	vmov	s15, r3
 8001de2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	edd3 7a03 	vldr	s15, [r3, #12]
 8001dec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001df0:	edc7 7a03 	vstr	s15, [r7, #12]
	float omega = -(corrected_zg / 16.4) * PI / 180;
 8001df4:	68f8      	ldr	r0, [r7, #12]
 8001df6:	f7fe fbbf 	bl	8000578 <__aeabi_f2d>
 8001dfa:	a316      	add	r3, pc, #88	; (adr r3, 8001e54 <_ZN3IMU8getOmegaEv+0x84>)
 8001dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e00:	f7fe fd3c 	bl	800087c <__aeabi_ddiv>
 8001e04:	4602      	mov	r2, r0
 8001e06:	460b      	mov	r3, r1
 8001e08:	4614      	mov	r4, r2
 8001e0a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001e0e:	a313      	add	r3, pc, #76	; (adr r3, 8001e5c <_ZN3IMU8getOmegaEv+0x8c>)
 8001e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e14:	4620      	mov	r0, r4
 8001e16:	4629      	mov	r1, r5
 8001e18:	f7fe fc06 	bl	8000628 <__aeabi_dmul>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	460c      	mov	r4, r1
 8001e20:	4618      	mov	r0, r3
 8001e22:	4621      	mov	r1, r4
 8001e24:	f04f 0200 	mov.w	r2, #0
 8001e28:	4b09      	ldr	r3, [pc, #36]	; (8001e50 <_ZN3IMU8getOmegaEv+0x80>)
 8001e2a:	f7fe fd27 	bl	800087c <__aeabi_ddiv>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	460c      	mov	r4, r1
 8001e32:	4618      	mov	r0, r3
 8001e34:	4621      	mov	r1, r4
 8001e36:	f7fe feef 	bl	8000c18 <__aeabi_d2f>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	60bb      	str	r3, [r7, #8]

	return omega;
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	ee07 3a90 	vmov	s15, r3
}
 8001e44:	eeb0 0a67 	vmov.f32	s0, s15
 8001e48:	3710      	adds	r7, #16
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bdb0      	pop	{r4, r5, r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	40668000 	.word	0x40668000
 8001e54:	66666666 	.word	0x66666666
 8001e58:	40306666 	.word	0x40306666
 8001e5c:	54411744 	.word	0x54411744
 8001e60:	400921fb 	.word	0x400921fb

08001e64 <_ZN3IMU11calibrationEv>:

void IMU::calibration()
{
 8001e64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e66:	b08b      	sub	sp, #44	; 0x2c
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
	float sum;
	for(const auto &v : zg_vals){
		sum += v;
	}

	offset_ = sum / num;
 8001e6c:	466b      	mov	r3, sp
 8001e6e:	461e      	mov	r6, r3
	HAL_Delay(800);
 8001e70:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001e74:	f008 f84c 	bl	8009f10 <HAL_Delay>
	lcd_clear();
 8001e78:	f7ff f912 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	2000      	movs	r0, #0
 8001e80:	f7ff f91e 	bl	80010c0 <lcd_locate>
	lcd_printf("IMU     ");
 8001e84:	4840      	ldr	r0, [pc, #256]	; (8001f88 <_ZN3IMU11calibrationEv+0x124>)
 8001e86:	f7ff f945 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001e8a:	2101      	movs	r1, #1
 8001e8c:	2000      	movs	r0, #0
 8001e8e:	f7ff f917 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 8001e92:	483e      	ldr	r0, [pc, #248]	; (8001f8c <_ZN3IMU11calibrationEv+0x128>)
 8001e94:	f7ff f93e 	bl	8001114 <lcd_printf>
	int16_t num = 2000;
 8001e98:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001e9c:	83bb      	strh	r3, [r7, #28]
	float zg_vals[num];
 8001e9e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001ea2:	1e5d      	subs	r5, r3, #1
 8001ea4:	61bd      	str	r5, [r7, #24]
 8001ea6:	462b      	mov	r3, r5
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	4619      	mov	r1, r3
 8001eac:	f04f 0200 	mov.w	r2, #0
 8001eb0:	f04f 0300 	mov.w	r3, #0
 8001eb4:	f04f 0400 	mov.w	r4, #0
 8001eb8:	0154      	lsls	r4, r2, #5
 8001eba:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001ebe:	014b      	lsls	r3, r1, #5
 8001ec0:	462b      	mov	r3, r5
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	f04f 0200 	mov.w	r2, #0
 8001eca:	f04f 0300 	mov.w	r3, #0
 8001ece:	f04f 0400 	mov.w	r4, #0
 8001ed2:	0154      	lsls	r4, r2, #5
 8001ed4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001ed8:	014b      	lsls	r3, r1, #5
 8001eda:	462b      	mov	r3, r5
 8001edc:	3301      	adds	r3, #1
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	3303      	adds	r3, #3
 8001ee2:	3307      	adds	r3, #7
 8001ee4:	08db      	lsrs	r3, r3, #3
 8001ee6:	00db      	lsls	r3, r3, #3
 8001ee8:	ebad 0d03 	sub.w	sp, sp, r3
 8001eec:	466b      	mov	r3, sp
 8001eee:	3303      	adds	r3, #3
 8001ef0:	089b      	lsrs	r3, r3, #2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	617b      	str	r3, [r7, #20]
	for(uint16_t i = 0; i < num; i++){
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	83fb      	strh	r3, [r7, #30]
 8001efa:	8bfa      	ldrh	r2, [r7, #30]
 8001efc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	da13      	bge.n	8001f2c <_ZN3IMU11calibrationEv+0xc8>
		zg_vals[i] = float(zg_);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001f0a:	8bfb      	ldrh	r3, [r7, #30]
 8001f0c:	ee07 2a90 	vmov	s15, r2
 8001f10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f14:	697a      	ldr	r2, [r7, #20]
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	4413      	add	r3, r2
 8001f1a:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(1);
 8001f1e:	2001      	movs	r0, #1
 8001f20:	f007 fff6 	bl	8009f10 <HAL_Delay>
	for(uint16_t i = 0; i < num; i++){
 8001f24:	8bfb      	ldrh	r3, [r7, #30]
 8001f26:	3301      	adds	r3, #1
 8001f28:	83fb      	strh	r3, [r7, #30]
 8001f2a:	e7e6      	b.n	8001efa <_ZN3IMU11calibrationEv+0x96>
	for(const auto &v : zg_vals){
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f30:	697a      	ldr	r2, [r7, #20]
 8001f32:	462b      	mov	r3, r5
 8001f34:	3301      	adds	r3, #1
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	4413      	add	r3, r2
 8001f3a:	613b      	str	r3, [r7, #16]
 8001f3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d00e      	beq.n	8001f62 <_ZN3IMU11calibrationEv+0xfe>
 8001f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f46:	60fb      	str	r3, [r7, #12]
		sum += v;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	edd3 7a00 	vldr	s15, [r3]
 8001f4e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001f52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f56:	edc7 7a08 	vstr	s15, [r7, #32]
	for(const auto &v : zg_vals){
 8001f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5c:	3304      	adds	r3, #4
 8001f5e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f60:	e7ec      	b.n	8001f3c <_ZN3IMU11calibrationEv+0xd8>
	offset_ = sum / num;
 8001f62:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001f66:	ee07 3a90 	vmov	s15, r3
 8001f6a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f6e:	edd7 6a08 	vldr	s13, [r7, #32]
 8001f72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	edc3 7a03 	vstr	s15, [r3, #12]
 8001f7c:	46b5      	mov	sp, r6
}
 8001f7e:	bf00      	nop
 8001f80:	372c      	adds	r7, #44	; 0x2c
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f86:	bf00      	nop
 8001f88:	08018d74 	.word	0x08018d74
 8001f8c:	08018d80 	.word	0x08018d80

08001f90 <INA260_read>:

#include "INA260.h"

//#define SLAVEADRESS1 (0x44<<1)

unsigned short INA260_read(uint8_t pointer_byte, uint8_t slave_adress) {
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b086      	sub	sp, #24
 8001f94:	af02      	add	r7, sp, #8
 8001f96:	4603      	mov	r3, r0
 8001f98:	460a      	mov	r2, r1
 8001f9a:	71fb      	strb	r3, [r7, #7]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	71bb      	strb	r3, [r7, #6]
	uint8_t Rxdata[2];
	unsigned short val;
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, &pointer_byte, 1, 100);
 8001fa0:	79bb      	ldrb	r3, [r7, #6]
 8001fa2:	b299      	uxth	r1, r3
 8001fa4:	1dfa      	adds	r2, r7, #7
 8001fa6:	2364      	movs	r3, #100	; 0x64
 8001fa8:	9300      	str	r3, [sp, #0]
 8001faa:	2301      	movs	r3, #1
 8001fac:	480c      	ldr	r0, [pc, #48]	; (8001fe0 <INA260_read+0x50>)
 8001fae:	f009 fbaf 	bl	800b710 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, slave_adress, Rxdata, 2, 100);
 8001fb2:	79bb      	ldrb	r3, [r7, #6]
 8001fb4:	b299      	uxth	r1, r3
 8001fb6:	f107 020c 	add.w	r2, r7, #12
 8001fba:	2364      	movs	r3, #100	; 0x64
 8001fbc:	9300      	str	r3, [sp, #0]
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	4807      	ldr	r0, [pc, #28]	; (8001fe0 <INA260_read+0x50>)
 8001fc2:	f009 fca3 	bl	800b90c <HAL_I2C_Master_Receive>
	val = ((unsigned short)Rxdata[0] << 8) | (unsigned short)Rxdata[1];
 8001fc6:	7b3b      	ldrb	r3, [r7, #12]
 8001fc8:	021b      	lsls	r3, r3, #8
 8001fca:	b21a      	sxth	r2, r3
 8001fcc:	7b7b      	ldrb	r3, [r7, #13]
 8001fce:	b21b      	sxth	r3, r3
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	b21b      	sxth	r3, r3
 8001fd4:	81fb      	strh	r3, [r7, #14]
	return val;
 8001fd6:	89fb      	ldrh	r3, [r7, #14]
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3710      	adds	r7, #16
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	20047834 	.word	0x20047834

08001fe4 <INA260_write>:

void INA260_write(uint8_t pointer_byte , uint8_t data_msbyte , uint8_t data_lsbyte, uint8_t slave_adress) {
 8001fe4:	b590      	push	{r4, r7, lr}
 8001fe6:	b087      	sub	sp, #28
 8001fe8:	af02      	add	r7, sp, #8
 8001fea:	4604      	mov	r4, r0
 8001fec:	4608      	mov	r0, r1
 8001fee:	4611      	mov	r1, r2
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	4623      	mov	r3, r4
 8001ff4:	71fb      	strb	r3, [r7, #7]
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	71bb      	strb	r3, [r7, #6]
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	717b      	strb	r3, [r7, #5]
 8001ffe:	4613      	mov	r3, r2
 8002000:	713b      	strb	r3, [r7, #4]
	uint8_t Txcmd[3] = { pointer_byte , data_msbyte , data_lsbyte };
 8002002:	79fb      	ldrb	r3, [r7, #7]
 8002004:	733b      	strb	r3, [r7, #12]
 8002006:	79bb      	ldrb	r3, [r7, #6]
 8002008:	737b      	strb	r3, [r7, #13]
 800200a:	797b      	ldrb	r3, [r7, #5]
 800200c:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, Txcmd, 3, 100);
 800200e:	793b      	ldrb	r3, [r7, #4]
 8002010:	b299      	uxth	r1, r3
 8002012:	f107 020c 	add.w	r2, r7, #12
 8002016:	2364      	movs	r3, #100	; 0x64
 8002018:	9300      	str	r3, [sp, #0]
 800201a:	2303      	movs	r3, #3
 800201c:	4803      	ldr	r0, [pc, #12]	; (800202c <INA260_write+0x48>)
 800201e:	f009 fb77 	bl	800b710 <HAL_I2C_Master_Transmit>
}
 8002022:	bf00      	nop
 8002024:	3714      	adds	r7, #20
 8002026:	46bd      	mov	sp, r7
 8002028:	bd90      	pop	{r4, r7, pc}
 800202a:	bf00      	nop
 800202c:	20047834 	.word	0x20047834

08002030 <setConfig>:

void setConfig(uint8_t msbyte , uint8_t lsbyte, uint8_t slave_adress) {
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	4603      	mov	r3, r0
 8002038:	71fb      	strb	r3, [r7, #7]
 800203a:	460b      	mov	r3, r1
 800203c:	71bb      	strb	r3, [r7, #6]
 800203e:	4613      	mov	r3, r2
 8002040:	717b      	strb	r3, [r7, #5]
	INA260_write(0x00 , msbyte , lsbyte, slave_adress);
 8002042:	797b      	ldrb	r3, [r7, #5]
 8002044:	79ba      	ldrb	r2, [r7, #6]
 8002046:	79f9      	ldrb	r1, [r7, #7]
 8002048:	2000      	movs	r0, #0
 800204a:	f7ff ffcb 	bl	8001fe4 <INA260_write>
}
 800204e:	bf00      	nop
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}

08002056 <INA260_init>:

void INA260_init(uint8_t slave_adress) {
 8002056:	b580      	push	{r7, lr}
 8002058:	b082      	sub	sp, #8
 800205a:	af00      	add	r7, sp, #0
 800205c:	4603      	mov	r3, r0
 800205e:	71fb      	strb	r3, [r7, #7]
	setConfig(0x00,0xDF, slave_adress);//AVG=1,BusVoltageConversionTime=588u,ShuntCurrentConversionTime=588u,mode=BusVoltageContinuous
 8002060:	79fb      	ldrb	r3, [r7, #7]
 8002062:	461a      	mov	r2, r3
 8002064:	21df      	movs	r1, #223	; 0xdf
 8002066:	2000      	movs	r0, #0
 8002068:	f7ff ffe2 	bl	8002030 <setConfig>
}
 800206c:	bf00      	nop
 800206e:	3708      	adds	r7, #8
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <_ZN8JoyStickC1Ev>:
 */

#include "Joystick.hpp"
//#include "stm32f4xx_hal.h"

JoyStick::JoyStick()
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
{

}
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	4618      	mov	r0, r3
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
	...

0800208c <_ZN8JoyStick8getValueEv>:

uint16_t JoyStick::getValue()
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8002094:	2300      	movs	r3, #0
 8002096:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10)) ret_value |= 0x01;
 8002098:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800209c:	482a      	ldr	r0, [pc, #168]	; (8002148 <_ZN8JoyStick8getValueEv+0xbc>)
 800209e:	f009 f9b5 	bl	800b40c <HAL_GPIO_ReadPin>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	bf0c      	ite	eq
 80020a8:	2301      	moveq	r3, #1
 80020aa:	2300      	movne	r3, #0
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d003      	beq.n	80020ba <_ZN8JoyStick8getValueEv+0x2e>
 80020b2:	89fb      	ldrh	r3, [r7, #14]
 80020b4:	f043 0301 	orr.w	r3, r3, #1
 80020b8:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_0)) ret_value |= 0x02;
 80020ba:	2101      	movs	r1, #1
 80020bc:	4823      	ldr	r0, [pc, #140]	; (800214c <_ZN8JoyStick8getValueEv+0xc0>)
 80020be:	f009 f9a5 	bl	800b40c <HAL_GPIO_ReadPin>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	bf0c      	ite	eq
 80020c8:	2301      	moveq	r3, #1
 80020ca:	2300      	movne	r3, #0
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d003      	beq.n	80020da <_ZN8JoyStick8getValueEv+0x4e>
 80020d2:	89fb      	ldrh	r3, [r7, #14]
 80020d4:	f043 0302 	orr.w	r3, r3, #2
 80020d8:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8)) ret_value |= 0x04;
 80020da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020de:	481a      	ldr	r0, [pc, #104]	; (8002148 <_ZN8JoyStick8getValueEv+0xbc>)
 80020e0:	f009 f994 	bl	800b40c <HAL_GPIO_ReadPin>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	bf0c      	ite	eq
 80020ea:	2301      	moveq	r3, #1
 80020ec:	2300      	movne	r3, #0
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d003      	beq.n	80020fc <_ZN8JoyStick8getValueEv+0x70>
 80020f4:	89fb      	ldrh	r3, [r7, #14]
 80020f6:	f043 0304 	orr.w	r3, r3, #4
 80020fa:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)) ret_value |= 0x08;
 80020fc:	2104      	movs	r1, #4
 80020fe:	4814      	ldr	r0, [pc, #80]	; (8002150 <_ZN8JoyStick8getValueEv+0xc4>)
 8002100:	f009 f984 	bl	800b40c <HAL_GPIO_ReadPin>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	bf0c      	ite	eq
 800210a:	2301      	moveq	r3, #1
 800210c:	2300      	movne	r3, #0
 800210e:	b2db      	uxtb	r3, r3
 8002110:	2b00      	cmp	r3, #0
 8002112:	d003      	beq.n	800211c <_ZN8JoyStick8getValueEv+0x90>
 8002114:	89fb      	ldrh	r3, [r7, #14]
 8002116:	f043 0308 	orr.w	r3, r3, #8
 800211a:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7)) ret_value |= 0x10;
 800211c:	2180      	movs	r1, #128	; 0x80
 800211e:	480a      	ldr	r0, [pc, #40]	; (8002148 <_ZN8JoyStick8getValueEv+0xbc>)
 8002120:	f009 f974 	bl	800b40c <HAL_GPIO_ReadPin>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	bf0c      	ite	eq
 800212a:	2301      	moveq	r3, #1
 800212c:	2300      	movne	r3, #0
 800212e:	b2db      	uxtb	r3, r3
 8002130:	2b00      	cmp	r3, #0
 8002132:	d003      	beq.n	800213c <_ZN8JoyStick8getValueEv+0xb0>
 8002134:	89fb      	ldrh	r3, [r7, #14]
 8002136:	f043 0310 	orr.w	r3, r3, #16
 800213a:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 800213c:	89fb      	ldrh	r3, [r7, #14]
}
 800213e:	4618      	mov	r0, r3
 8002140:	3710      	adds	r7, #16
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	40021000 	.word	0x40021000
 800214c:	40020c00 	.word	0x40020c00
 8002150:	40020400 	.word	0x40020400

08002154 <_ZN3LED9fullColorEc>:
 */

#include "LED.hpp"

void LED::fullColor(char color)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	460b      	mov	r3, r1
 800215e:	70fb      	strb	r3, [r7, #3]
	if(color == 'R'){
 8002160:	78fb      	ldrb	r3, [r7, #3]
 8002162:	2b52      	cmp	r3, #82	; 0x52
 8002164:	d112      	bne.n	800218c <_ZN3LED9fullColorEc+0x38>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002166:	2200      	movs	r2, #0
 8002168:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800216c:	4856      	ldr	r0, [pc, #344]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 800216e:	f009 f965 	bl	800b43c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8002172:	2201      	movs	r2, #1
 8002174:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002178:	4853      	ldr	r0, [pc, #332]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 800217a:	f009 f95f 	bl	800b43c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800217e:	2201      	movs	r2, #1
 8002180:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002184:	4850      	ldr	r0, [pc, #320]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 8002186:	f009 f959 	bl	800b43c <HAL_GPIO_WritePin>
	else if(color == '~'){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
	}
}
 800218a:	e098      	b.n	80022be <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'G'){
 800218c:	78fb      	ldrb	r3, [r7, #3]
 800218e:	2b47      	cmp	r3, #71	; 0x47
 8002190:	d112      	bne.n	80021b8 <_ZN3LED9fullColorEc+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8002192:	2201      	movs	r2, #1
 8002194:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002198:	484b      	ldr	r0, [pc, #300]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 800219a:	f009 f94f 	bl	800b43c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800219e:	2200      	movs	r2, #0
 80021a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021a4:	4848      	ldr	r0, [pc, #288]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 80021a6:	f009 f949 	bl	800b43c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80021aa:	2201      	movs	r2, #1
 80021ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021b0:	4845      	ldr	r0, [pc, #276]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 80021b2:	f009 f943 	bl	800b43c <HAL_GPIO_WritePin>
}
 80021b6:	e082      	b.n	80022be <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'B'){
 80021b8:	78fb      	ldrb	r3, [r7, #3]
 80021ba:	2b42      	cmp	r3, #66	; 0x42
 80021bc:	d112      	bne.n	80021e4 <_ZN3LED9fullColorEc+0x90>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80021be:	2201      	movs	r2, #1
 80021c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021c4:	4840      	ldr	r0, [pc, #256]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 80021c6:	f009 f939 	bl	800b43c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80021ca:	2201      	movs	r2, #1
 80021cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021d0:	483d      	ldr	r0, [pc, #244]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 80021d2:	f009 f933 	bl	800b43c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80021d6:	2200      	movs	r2, #0
 80021d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021dc:	483a      	ldr	r0, [pc, #232]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 80021de:	f009 f92d 	bl	800b43c <HAL_GPIO_WritePin>
}
 80021e2:	e06c      	b.n	80022be <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'C'){
 80021e4:	78fb      	ldrb	r3, [r7, #3]
 80021e6:	2b43      	cmp	r3, #67	; 0x43
 80021e8:	d112      	bne.n	8002210 <_ZN3LED9fullColorEc+0xbc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80021ea:	2201      	movs	r2, #1
 80021ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021f0:	4835      	ldr	r0, [pc, #212]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 80021f2:	f009 f923 	bl	800b43c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80021f6:	2200      	movs	r2, #0
 80021f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021fc:	4832      	ldr	r0, [pc, #200]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 80021fe:	f009 f91d 	bl	800b43c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8002202:	2200      	movs	r2, #0
 8002204:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002208:	482f      	ldr	r0, [pc, #188]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 800220a:	f009 f917 	bl	800b43c <HAL_GPIO_WritePin>
}
 800220e:	e056      	b.n	80022be <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'M'){
 8002210:	78fb      	ldrb	r3, [r7, #3]
 8002212:	2b4d      	cmp	r3, #77	; 0x4d
 8002214:	d112      	bne.n	800223c <_ZN3LED9fullColorEc+0xe8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002216:	2200      	movs	r2, #0
 8002218:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800221c:	482a      	ldr	r0, [pc, #168]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 800221e:	f009 f90d 	bl	800b43c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8002222:	2201      	movs	r2, #1
 8002224:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002228:	4827      	ldr	r0, [pc, #156]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 800222a:	f009 f907 	bl	800b43c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800222e:	2200      	movs	r2, #0
 8002230:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002234:	4824      	ldr	r0, [pc, #144]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 8002236:	f009 f901 	bl	800b43c <HAL_GPIO_WritePin>
}
 800223a:	e040      	b.n	80022be <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'Y'){
 800223c:	78fb      	ldrb	r3, [r7, #3]
 800223e:	2b59      	cmp	r3, #89	; 0x59
 8002240:	d112      	bne.n	8002268 <_ZN3LED9fullColorEc+0x114>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002242:	2200      	movs	r2, #0
 8002244:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002248:	481f      	ldr	r0, [pc, #124]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 800224a:	f009 f8f7 	bl	800b43c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800224e:	2200      	movs	r2, #0
 8002250:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002254:	481c      	ldr	r0, [pc, #112]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 8002256:	f009 f8f1 	bl	800b43c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800225a:	2201      	movs	r2, #1
 800225c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002260:	4819      	ldr	r0, [pc, #100]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 8002262:	f009 f8eb 	bl	800b43c <HAL_GPIO_WritePin>
}
 8002266:	e02a      	b.n	80022be <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'W'){
 8002268:	78fb      	ldrb	r3, [r7, #3]
 800226a:	2b57      	cmp	r3, #87	; 0x57
 800226c:	d112      	bne.n	8002294 <_ZN3LED9fullColorEc+0x140>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800226e:	2200      	movs	r2, #0
 8002270:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002274:	4814      	ldr	r0, [pc, #80]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 8002276:	f009 f8e1 	bl	800b43c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800227a:	2200      	movs	r2, #0
 800227c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002280:	4811      	ldr	r0, [pc, #68]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 8002282:	f009 f8db 	bl	800b43c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8002286:	2200      	movs	r2, #0
 8002288:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800228c:	480e      	ldr	r0, [pc, #56]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 800228e:	f009 f8d5 	bl	800b43c <HAL_GPIO_WritePin>
}
 8002292:	e014      	b.n	80022be <_ZN3LED9fullColorEc+0x16a>
	else if(color == '~'){
 8002294:	78fb      	ldrb	r3, [r7, #3]
 8002296:	2b7e      	cmp	r3, #126	; 0x7e
 8002298:	d111      	bne.n	80022be <_ZN3LED9fullColorEc+0x16a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800229a:	2201      	movs	r2, #1
 800229c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022a0:	4809      	ldr	r0, [pc, #36]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 80022a2:	f009 f8cb 	bl	800b43c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80022a6:	2201      	movs	r2, #1
 80022a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022ac:	4806      	ldr	r0, [pc, #24]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 80022ae:	f009 f8c5 	bl	800b43c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80022b2:	2201      	movs	r2, #1
 80022b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022b8:	4803      	ldr	r0, [pc, #12]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 80022ba:	f009 f8bf 	bl	800b43c <HAL_GPIO_WritePin>
}
 80022be:	bf00      	nop
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	40020000 	.word	0x40020000

080022cc <_ZN3LED2LREaa>:

void LED::LR(int8_t l_status, int8_t r_status)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	460b      	mov	r3, r1
 80022d6:	70fb      	strb	r3, [r7, #3]
 80022d8:	4613      	mov	r3, r2
 80022da:	70bb      	strb	r3, [r7, #2]
	if(l_status == 1)
 80022dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d106      	bne.n	80022f2 <_ZN3LED2LREaa+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80022e4:	2201      	movs	r2, #1
 80022e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022ea:	4813      	ldr	r0, [pc, #76]	; (8002338 <_ZN3LED2LREaa+0x6c>)
 80022ec:	f009 f8a6 	bl	800b43c <HAL_GPIO_WritePin>
 80022f0:	e009      	b.n	8002306 <_ZN3LED2LREaa+0x3a>
	else if(l_status == 0)
 80022f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d105      	bne.n	8002306 <_ZN3LED2LREaa+0x3a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80022fa:	2200      	movs	r2, #0
 80022fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002300:	480d      	ldr	r0, [pc, #52]	; (8002338 <_ZN3LED2LREaa+0x6c>)
 8002302:	f009 f89b 	bl	800b43c <HAL_GPIO_WritePin>

	if(r_status == 1)
 8002306:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800230a:	2b01      	cmp	r3, #1
 800230c:	d106      	bne.n	800231c <_ZN3LED2LREaa+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800230e:	2201      	movs	r2, #1
 8002310:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002314:	4808      	ldr	r0, [pc, #32]	; (8002338 <_ZN3LED2LREaa+0x6c>)
 8002316:	f009 f891 	bl	800b43c <HAL_GPIO_WritePin>
	else if(r_status == 0)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);

}
 800231a:	e009      	b.n	8002330 <_ZN3LED2LREaa+0x64>
	else if(r_status == 0)
 800231c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d105      	bne.n	8002330 <_ZN3LED2LREaa+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8002324:	2200      	movs	r2, #0
 8002326:	f44f 7100 	mov.w	r1, #512	; 0x200
 800232a:	4803      	ldr	r0, [pc, #12]	; (8002338 <_ZN3LED2LREaa+0x6c>)
 800232c:	f009 f886 	bl	800b43c <HAL_GPIO_WritePin>
}
 8002330:	bf00      	nop
 8002332:	3708      	adds	r7, #8
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	40020000 	.word	0x40020000

0800233c <_ZN10LineSensorC1Ev>:
float mon_sens9;
float mon_sens10;
float mon_sens11;
float mon_sens12;

LineSensor::LineSensor()
 800233c:	b580      	push	{r7, lr}
 800233e:	b092      	sub	sp, #72	; 0x48
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 800234a:	4618      	mov	r0, r3
 800234c:	f7ff fe92 	bl	8002074 <_ZN8JoyStickC1Ev>
{
	for(auto &av : analog_val_){
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	637b      	str	r3, [r7, #52]	; 0x34
 8002354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002356:	647b      	str	r3, [r7, #68]	; 0x44
 8002358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800235a:	331c      	adds	r3, #28
 800235c:	633b      	str	r3, [r7, #48]	; 0x30
 800235e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002362:	429a      	cmp	r2, r3
 8002364:	d008      	beq.n	8002378 <_ZN10LineSensorC1Ev+0x3c>
 8002366:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002368:	62fb      	str	r3, [r7, #44]	; 0x2c
		av = 0;
 800236a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800236c:	2200      	movs	r2, #0
 800236e:	801a      	strh	r2, [r3, #0]
	for(auto &av : analog_val_){
 8002370:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002372:	3302      	adds	r3, #2
 8002374:	647b      	str	r3, [r7, #68]	; 0x44
 8002376:	e7f2      	b.n	800235e <_ZN10LineSensorC1Ev+0x22>
	}

	for(auto &s : sensor){
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 800237e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002382:	643b      	str	r3, [r7, #64]	; 0x40
 8002384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002386:	3338      	adds	r3, #56	; 0x38
 8002388:	627b      	str	r3, [r7, #36]	; 0x24
 800238a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800238c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238e:	429a      	cmp	r2, r3
 8002390:	d009      	beq.n	80023a6 <_ZN10LineSensorC1Ev+0x6a>
 8002392:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002394:	623b      	str	r3, [r7, #32]
		s = 0;
 8002396:	6a3b      	ldr	r3, [r7, #32]
 8002398:	f04f 0200 	mov.w	r2, #0
 800239c:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor){
 800239e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023a0:	3304      	adds	r3, #4
 80023a2:	643b      	str	r3, [r7, #64]	; 0x40
 80023a4:	e7f1      	b.n	800238a <_ZN10LineSensorC1Ev+0x4e>
	}

	for(auto &m : offset_values_){
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80023ac:	61fb      	str	r3, [r7, #28]
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	3338      	adds	r3, #56	; 0x38
 80023b6:	61bb      	str	r3, [r7, #24]
 80023b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d009      	beq.n	80023d4 <_ZN10LineSensorC1Ev+0x98>
 80023c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023c2:	617b      	str	r3, [r7, #20]
		m = 0;
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	f04f 0200 	mov.w	r2, #0
 80023ca:	601a      	str	r2, [r3, #0]
	for(auto &m : offset_values_){
 80023cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023ce:	3304      	adds	r3, #4
 80023d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023d2:	e7f1      	b.n	80023b8 <_ZN10LineSensorC1Ev+0x7c>
	}
	for(auto &s : sensor_coefficient_){
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 80023da:	613b      	str	r3, [r7, #16]
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	63bb      	str	r3, [r7, #56]	; 0x38
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	3338      	adds	r3, #56	; 0x38
 80023e4:	60fb      	str	r3, [r7, #12]
 80023e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d009      	beq.n	8002402 <_ZN10LineSensorC1Ev+0xc6>
 80023ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023f0:	60bb      	str	r3, [r7, #8]
		s = 1;
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80023f8:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor_coefficient_){
 80023fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023fc:	3304      	adds	r3, #4
 80023fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8002400:	e7f1      	b.n	80023e6 <_ZN10LineSensorC1Ev+0xaa>
	}

}
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4618      	mov	r0, r3
 8002406:	3748      	adds	r7, #72	; 0x48
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <_ZN10LineSensor8ADCStartEv>:

void LineSensor::ADCStart()
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog_val_, 14);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	220e      	movs	r2, #14
 8002418:	4619      	mov	r1, r3
 800241a:	4803      	ldr	r0, [pc, #12]	; (8002428 <_ZN10LineSensor8ADCStartEv+0x1c>)
 800241c:	f007 fdde 	bl	8009fdc <HAL_ADC_Start_DMA>
}
 8002420:	bf00      	nop
 8002422:	3708      	adds	r7, #8
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	20047758 	.word	0x20047758

0800242c <_ZN10LineSensor17storeSensorValuesEv>:

void LineSensor::storeSensorValues()
{
 800242c:	b480      	push	{r7}
 800242e:	b085      	sub	sp, #20
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
	static uint8_t cnt = 0;

	for(int i = 0; i < AD_DATA_SIZE; i++){
 8002434:	2300      	movs	r3, #0
 8002436:	60fb      	str	r3, [r7, #12]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2b0d      	cmp	r3, #13
 800243c:	dc2f      	bgt.n	800249e <_ZN10LineSensor17storeSensorValuesEv+0x72>
		store_vals_[cnt][i] = sensor_coefficient_[i] * (analog_val_[i] - offset_values_[i]) ;
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	3392      	adds	r3, #146	; 0x92
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	4413      	add	r3, r2
 8002448:	3304      	adds	r3, #4
 800244a:	ed93 7a00 	vldr	s14, [r3]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	68fa      	ldr	r2, [r7, #12]
 8002452:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002456:	ee07 3a90 	vmov	s15, r3
 800245a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	33a0      	adds	r3, #160	; 0xa0
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	4413      	add	r3, r2
 8002468:	3304      	adds	r3, #4
 800246a:	edd3 7a00 	vldr	s15, [r3]
 800246e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002472:	4b14      	ldr	r3, [pc, #80]	; (80024c4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	4619      	mov	r1, r3
 8002478:	ee67 7a27 	vmul.f32	s15, s14, s15
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	460b      	mov	r3, r1
 8002480:	00db      	lsls	r3, r3, #3
 8002482:	1a5b      	subs	r3, r3, r1
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	68f9      	ldr	r1, [r7, #12]
 8002488:	440b      	add	r3, r1
 800248a:	3306      	adds	r3, #6
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	4413      	add	r3, r2
 8002490:	3304      	adds	r3, #4
 8002492:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < AD_DATA_SIZE; i++){
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	3301      	adds	r3, #1
 800249a:	60fb      	str	r3, [r7, #12]
 800249c:	e7cc      	b.n	8002438 <_ZN10LineSensor17storeSensorValuesEv+0xc>
		//store_vals_[cnt][i] = float(analog_val_[i]) ;
	}

	cnt++;
 800249e:	4b09      	ldr	r3, [pc, #36]	; (80024c4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	3301      	adds	r3, #1
 80024a4:	b2da      	uxtb	r2, r3
 80024a6:	4b07      	ldr	r3, [pc, #28]	; (80024c4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80024a8:	701a      	strb	r2, [r3, #0]
	if(cnt >= 10) cnt = 0;
 80024aa:	4b06      	ldr	r3, [pc, #24]	; (80024c4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	2b09      	cmp	r3, #9
 80024b0:	d902      	bls.n	80024b8 <_ZN10LineSensor17storeSensorValuesEv+0x8c>
 80024b2:	4b04      	ldr	r3, [pc, #16]	; (80024c4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	701a      	strb	r2, [r3, #0]


}
 80024b8:	bf00      	nop
 80024ba:	3714      	adds	r7, #20
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr
 80024c4:	200001fe 	.word	0x200001fe

080024c8 <_ZN10LineSensor18updateSensorValuesEv>:
void LineSensor::updateSensorValues()
{
 80024c8:	b490      	push	{r4, r7}
 80024ca:	b08e      	sub	sp, #56	; 0x38
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
	float temp_val[10];

	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 80024d0:	2300      	movs	r3, #0
 80024d2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80024d6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80024da:	2b0d      	cmp	r3, #13
 80024dc:	f200 8087 	bhi.w	80025ee <_ZN10LineSensor18updateSensorValuesEv+0x126>
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 80024e0:	2300      	movs	r3, #0
 80024e2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80024e6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80024ea:	2b09      	cmp	r3, #9
 80024ec:	d81c      	bhi.n	8002528 <_ZN10LineSensor18updateSensorValuesEv+0x60>
			temp_val[store_cnt] = store_vals_[store_cnt][ad_cnt];
 80024ee:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80024f2:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 80024f6:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	4613      	mov	r3, r2
 80024fe:	00db      	lsls	r3, r3, #3
 8002500:	1a9b      	subs	r3, r3, r2
 8002502:	005b      	lsls	r3, r3, #1
 8002504:	4423      	add	r3, r4
 8002506:	3306      	adds	r3, #6
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	4403      	add	r3, r0
 800250c:	3304      	adds	r3, #4
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	008b      	lsls	r3, r1, #2
 8002512:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002516:	440b      	add	r3, r1
 8002518:	3b30      	subs	r3, #48	; 0x30
 800251a:	601a      	str	r2, [r3, #0]
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 800251c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002520:	3301      	adds	r3, #1
 8002522:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002526:	e7de      	b.n	80024e6 <_ZN10LineSensor18updateSensorValuesEv+0x1e>
		}

		// sort
		for(uint8_t i = 0; i < 10; i++){
 8002528:	2300      	movs	r3, #0
 800252a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800252e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002532:	2b09      	cmp	r3, #9
 8002534:	d84d      	bhi.n	80025d2 <_ZN10LineSensor18updateSensorValuesEv+0x10a>
			for (uint8_t j = i+1; j < 10; j++) {
 8002536:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800253a:	3301      	adds	r3, #1
 800253c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002540:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002544:	2b09      	cmp	r3, #9
 8002546:	d83e      	bhi.n	80025c6 <_ZN10LineSensor18updateSensorValuesEv+0xfe>
				if(temp_val[i] < temp_val[j]){
 8002548:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002552:	4413      	add	r3, r2
 8002554:	3b30      	subs	r3, #48	; 0x30
 8002556:	ed93 7a00 	vldr	s14, [r3]
 800255a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002564:	4413      	add	r3, r2
 8002566:	3b30      	subs	r3, #48	; 0x30
 8002568:	edd3 7a00 	vldr	s15, [r3]
 800256c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002574:	d521      	bpl.n	80025ba <_ZN10LineSensor18updateSensorValuesEv+0xf2>
					float tmp = temp_val[j];
 8002576:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002580:	4413      	add	r3, r2
 8002582:	3b30      	subs	r3, #48	; 0x30
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	633b      	str	r3, [r7, #48]	; 0x30
					temp_val[j] = temp_val[i];
 8002588:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800258c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002590:	0092      	lsls	r2, r2, #2
 8002592:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002596:	440a      	add	r2, r1
 8002598:	3a30      	subs	r2, #48	; 0x30
 800259a:	6812      	ldr	r2, [r2, #0]
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80025a2:	440b      	add	r3, r1
 80025a4:	3b30      	subs	r3, #48	; 0x30
 80025a6:	601a      	str	r2, [r3, #0]
					temp_val[i] = tmp;
 80025a8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80025b2:	4413      	add	r3, r2
 80025b4:	3b30      	subs	r3, #48	; 0x30
 80025b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025b8:	601a      	str	r2, [r3, #0]
			for (uint8_t j = i+1; j < 10; j++) {
 80025ba:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80025be:	3301      	adds	r3, #1
 80025c0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80025c4:	e7bc      	b.n	8002540 <_ZN10LineSensor18updateSensorValuesEv+0x78>
		for(uint8_t i = 0; i < 10; i++){
 80025c6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80025ca:	3301      	adds	r3, #1
 80025cc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80025d0:	e7ad      	b.n	800252e <_ZN10LineSensor18updateSensorValuesEv+0x66>
				}
			}
		}

		sensor[ad_cnt] = temp_val[5];
 80025d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80025d6:	69fa      	ldr	r2, [r7, #28]
 80025d8:	6879      	ldr	r1, [r7, #4]
 80025da:	33b0      	adds	r3, #176	; 0xb0
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	440b      	add	r3, r1
 80025e0:	601a      	str	r2, [r3, #0]
	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 80025e2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80025e6:	3301      	adds	r3, #1
 80025e8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80025ec:	e773      	b.n	80024d6 <_ZN10LineSensor18updateSensorValuesEv+0xe>
	mon_sens9 = sensor[9];
	mon_sens10 = sensor[10];
	mon_sens11 = sensor[11];
	mon_sens12 = sensor[12];
	*/
}
 80025ee:	bf00      	nop
 80025f0:	3738      	adds	r7, #56	; 0x38
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bc90      	pop	{r4, r7}
 80025f6:	4770      	bx	lr

080025f8 <_ZN10LineSensor11calibrationEv>:

void LineSensor::calibration()
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b0a0      	sub	sp, #128	; 0x80
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);
 8002600:	2064      	movs	r0, #100	; 0x64
 8002602:	f007 fc85 	bl	8009f10 <HAL_Delay>

	lcd_clear();
 8002606:	f7fe fd4b 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 800260a:	2100      	movs	r1, #0
 800260c:	2000      	movs	r0, #0
 800260e:	f7fe fd57 	bl	80010c0 <lcd_locate>
	lcd_printf("LineSens");
 8002612:	4886      	ldr	r0, [pc, #536]	; (800282c <_ZN10LineSensor11calibrationEv+0x234>)
 8002614:	f7fe fd7e 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8002618:	2101      	movs	r1, #1
 800261a:	2000      	movs	r0, #0
 800261c:	f7fe fd50 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 8002620:	4883      	ldr	r0, [pc, #524]	; (8002830 <_ZN10LineSensor11calibrationEv+0x238>)
 8002622:	f7fe fd77 	bl	8001114 <lcd_printf>


	float max_values[AD_DATA_SIZE];
	float min_values[AD_DATA_SIZE];

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002626:	2300      	movs	r3, #0
 8002628:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 800262c:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002630:	2b0d      	cmp	r3, #13
 8002632:	d823      	bhi.n	800267c <_ZN10LineSensor11calibrationEv+0x84>
		max_values[i] = sensor[i];
 8002634:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8002638:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800263c:	6879      	ldr	r1, [r7, #4]
 800263e:	32b0      	adds	r2, #176	; 0xb0
 8002640:	0092      	lsls	r2, r2, #2
 8002642:	440a      	add	r2, r1
 8002644:	6812      	ldr	r2, [r2, #0]
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800264c:	440b      	add	r3, r1
 800264e:	3b40      	subs	r3, #64	; 0x40
 8002650:	601a      	str	r2, [r3, #0]
		min_values[i] = sensor[i];
 8002652:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8002656:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800265a:	6879      	ldr	r1, [r7, #4]
 800265c:	32b0      	adds	r2, #176	; 0xb0
 800265e:	0092      	lsls	r2, r2, #2
 8002660:	440a      	add	r2, r1
 8002662:	6812      	ldr	r2, [r2, #0]
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800266a:	440b      	add	r3, r1
 800266c:	3b78      	subs	r3, #120	; 0x78
 800266e:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002670:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002674:	3301      	adds	r3, #1
 8002676:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 800267a:	e7d7      	b.n	800262c <_ZN10LineSensor11calibrationEv+0x34>
	}

	while(joy_stick_.getValue() != JOY_C){
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 8002682:	4618      	mov	r0, r3
 8002684:	f7ff fd02 	bl	800208c <_ZN8JoyStick8getValueEv>
 8002688:	4603      	mov	r3, r0
 800268a:	2b02      	cmp	r3, #2
 800268c:	bf14      	ite	ne
 800268e:	2301      	movne	r3, #1
 8002690:	2300      	moveq	r3, #0
 8002692:	b2db      	uxtb	r3, r3
 8002694:	2b00      	cmp	r3, #0
 8002696:	d079      	beq.n	800278c <_ZN10LineSensor11calibrationEv+0x194>

		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002698:	2300      	movs	r3, #0
 800269a:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 800269e:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80026a2:	2b0d      	cmp	r3, #13
 80026a4:	d850      	bhi.n	8002748 <_ZN10LineSensor11calibrationEv+0x150>
			if(max_values[i] < sensor[i]){
 80026a6:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80026b0:	4413      	add	r3, r2
 80026b2:	3b40      	subs	r3, #64	; 0x40
 80026b4:	ed93 7a00 	vldr	s14, [r3]
 80026b8:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	33b0      	adds	r3, #176	; 0xb0
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	4413      	add	r3, r2
 80026c4:	edd3 7a00 	vldr	s15, [r3]
 80026c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026d0:	d50f      	bpl.n	80026f2 <_ZN10LineSensor11calibrationEv+0xfa>
				max_values[i] = sensor[i];
 80026d2:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 80026d6:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80026da:	6879      	ldr	r1, [r7, #4]
 80026dc:	32b0      	adds	r2, #176	; 0xb0
 80026de:	0092      	lsls	r2, r2, #2
 80026e0:	440a      	add	r2, r1
 80026e2:	6812      	ldr	r2, [r2, #0]
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80026ea:	440b      	add	r3, r1
 80026ec:	3b40      	subs	r3, #64	; 0x40
 80026ee:	601a      	str	r2, [r3, #0]
 80026f0:	e024      	b.n	800273c <_ZN10LineSensor11calibrationEv+0x144>
			}
			else if(min_values[i] > sensor[i]){
 80026f2:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80026fc:	4413      	add	r3, r2
 80026fe:	3b78      	subs	r3, #120	; 0x78
 8002700:	ed93 7a00 	vldr	s14, [r3]
 8002704:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	33b0      	adds	r3, #176	; 0xb0
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	4413      	add	r3, r2
 8002710:	edd3 7a00 	vldr	s15, [r3]
 8002714:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800271c:	dd0e      	ble.n	800273c <_ZN10LineSensor11calibrationEv+0x144>
				min_values[i] = sensor[i];
 800271e:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 8002722:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002726:	6879      	ldr	r1, [r7, #4]
 8002728:	32b0      	adds	r2, #176	; 0xb0
 800272a:	0092      	lsls	r2, r2, #2
 800272c:	440a      	add	r2, r1
 800272e:	6812      	ldr	r2, [r2, #0]
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002736:	440b      	add	r3, r1
 8002738:	3b78      	subs	r3, #120	; 0x78
 800273a:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800273c:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002740:	3301      	adds	r3, #1
 8002742:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8002746:	e7aa      	b.n	800269e <_ZN10LineSensor11calibrationEv+0xa6>
			}
		}

		if(rotary_switch_.getValue() == 0){
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f203 23be 	addw	r3, r3, #702	; 0x2be
 800274e:	4618      	mov	r0, r3
 8002750:	f002 fe74 	bl	800543c <_ZN12RotarySwitch8getValueEv>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	bf0c      	ite	eq
 800275a:	2301      	moveq	r3, #1
 800275c:	2300      	movne	r3, #0
 800275e:	b2db      	uxtb	r3, r3
 8002760:	2b00      	cmp	r3, #0
 8002762:	d009      	beq.n	8002778 <_ZN10LineSensor11calibrationEv+0x180>
			led_.LR(-1, 1);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 800276a:	2201      	movs	r2, #1
 800276c:	f04f 31ff 	mov.w	r1, #4294967295
 8002770:	4618      	mov	r0, r3
 8002772:	f7ff fdab 	bl	80022cc <_ZN3LED2LREaa>
 8002776:	e781      	b.n	800267c <_ZN10LineSensor11calibrationEv+0x84>

		}
		else{
			led_.LR(-1, 0);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 800277e:	2200      	movs	r2, #0
 8002780:	f04f 31ff 	mov.w	r1, #4294967295
 8002784:	4618      	mov	r0, r3
 8002786:	f7ff fda1 	bl	80022cc <_ZN3LED2LREaa>
	while(joy_stick_.getValue() != JOY_C){
 800278a:	e777      	b.n	800267c <_ZN10LineSensor11calibrationEv+0x84>
		printf("%f, ", m);
	}
		printf("\n");
	*/

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800278c:	2300      	movs	r3, #0
 800278e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8002792:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002796:	2b0d      	cmp	r3, #13
 8002798:	d826      	bhi.n	80027e8 <_ZN10LineSensor11calibrationEv+0x1f0>
		sensor_coefficient_[i] = 1000 / (max_values[i] - min_values[i]);
 800279a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80027a4:	4413      	add	r3, r2
 80027a6:	3b40      	subs	r3, #64	; 0x40
 80027a8:	ed93 7a00 	vldr	s14, [r3]
 80027ac:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80027b6:	4413      	add	r3, r2
 80027b8:	3b78      	subs	r3, #120	; 0x78
 80027ba:	edd3 7a00 	vldr	s15, [r3]
 80027be:	ee37 7a67 	vsub.f32	s14, s14, s15
 80027c2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80027c6:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8002834 <_ZN10LineSensor11calibrationEv+0x23c>
 80027ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	3392      	adds	r3, #146	; 0x92
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	4413      	add	r3, r2
 80027d6:	3304      	adds	r3, #4
 80027d8:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80027dc:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80027e0:	3301      	adds	r3, #1
 80027e2:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 80027e6:	e7d4      	b.n	8002792 <_ZN10LineSensor11calibrationEv+0x19a>
	}
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80027e8:	2300      	movs	r3, #0
 80027ea:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 80027ee:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80027f2:	2b0d      	cmp	r3, #13
 80027f4:	d815      	bhi.n	8002822 <_ZN10LineSensor11calibrationEv+0x22a>
		offset_values_[i] = min_values[i];
 80027f6:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 80027fa:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80027fe:	0092      	lsls	r2, r2, #2
 8002800:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002804:	440a      	add	r2, r1
 8002806:	3a78      	subs	r2, #120	; 0x78
 8002808:	6812      	ldr	r2, [r2, #0]
 800280a:	6879      	ldr	r1, [r7, #4]
 800280c:	33a0      	adds	r3, #160	; 0xa0
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	440b      	add	r3, r1
 8002812:	3304      	adds	r3, #4
 8002814:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002816:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800281a:	3301      	adds	r3, #1
 800281c:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8002820:	e7e5      	b.n	80027ee <_ZN10LineSensor11calibrationEv+0x1f6>
	}


}
 8002822:	bf00      	nop
 8002824:	3780      	adds	r7, #128	; 0x80
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	08018d8c 	.word	0x08018d8c
 8002830:	08018d98 	.word	0x08018d98
 8002834:	447a0000 	.word	0x447a0000

08002838 <_ZN10LineSensor13emergencyStopEv>:
{
	//printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n", sensor[0], sensor[1], sensor[2], sensor[3], sensor[4], sensor[5], sensor[6], sensor[7], sensor[8], sensor[9], sensor[10], sensor[11], sensor[12], sensor[13]);
}

bool LineSensor::emergencyStop()
{
 8002838:	b480      	push	{r7}
 800283a:	b085      	sub	sp, #20
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
	uint16_t out_cnt = 0;
 8002840:	2300      	movs	r3, #0
 8002842:	81fb      	strh	r3, [r7, #14]
	/*
	for(const auto & s : sensor){
		if(s >= 550) out_cnt++;
	}
	*/
	for(uint16_t i = 3; i <= 10; i++){
 8002844:	2303      	movs	r3, #3
 8002846:	81bb      	strh	r3, [r7, #12]
 8002848:	89bb      	ldrh	r3, [r7, #12]
 800284a:	2b0a      	cmp	r3, #10
 800284c:	d814      	bhi.n	8002878 <_ZN10LineSensor13emergencyStopEv+0x40>
		if(sensor[i] >= 550) out_cnt++;
 800284e:	89bb      	ldrh	r3, [r7, #12]
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	33b0      	adds	r3, #176	; 0xb0
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	4413      	add	r3, r2
 8002858:	edd3 7a00 	vldr	s15, [r3]
 800285c:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80028cc <_ZN10LineSensor13emergencyStopEv+0x94>
 8002860:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002868:	db02      	blt.n	8002870 <_ZN10LineSensor13emergencyStopEv+0x38>
 800286a:	89fb      	ldrh	r3, [r7, #14]
 800286c:	3301      	adds	r3, #1
 800286e:	81fb      	strh	r3, [r7, #14]
	for(uint16_t i = 3; i <= 10; i++){
 8002870:	89bb      	ldrh	r3, [r7, #12]
 8002872:	3301      	adds	r3, #1
 8002874:	81bb      	strh	r3, [r7, #12]
 8002876:	e7e7      	b.n	8002848 <_ZN10LineSensor13emergencyStopEv+0x10>
	}

	if(out_cnt >= 8){
 8002878:	89fb      	ldrh	r3, [r7, #14]
 800287a:	2b07      	cmp	r3, #7
 800287c:	d906      	bls.n	800288c <_ZN10LineSensor13emergencyStopEv+0x54>
		cnt++;
 800287e:	4b14      	ldr	r3, [pc, #80]	; (80028d0 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002880:	881b      	ldrh	r3, [r3, #0]
 8002882:	3301      	adds	r3, #1
 8002884:	b29a      	uxth	r2, r3
 8002886:	4b12      	ldr	r3, [pc, #72]	; (80028d0 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002888:	801a      	strh	r2, [r3, #0]
 800288a:	e002      	b.n	8002892 <_ZN10LineSensor13emergencyStopEv+0x5a>
	}
	else{
		cnt = 0;
 800288c:	4b10      	ldr	r3, [pc, #64]	; (80028d0 <_ZN10LineSensor13emergencyStopEv+0x98>)
 800288e:	2200      	movs	r2, #0
 8002890:	801a      	strh	r2, [r3, #0]
	}

	if(cnt >= 100){
 8002892:	4b0f      	ldr	r3, [pc, #60]	; (80028d0 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002894:	881b      	ldrh	r3, [r3, #0]
 8002896:	2b63      	cmp	r3, #99	; 0x63
 8002898:	d903      	bls.n	80028a2 <_ZN10LineSensor13emergencyStopEv+0x6a>
		flag = true;
 800289a:	4b0e      	ldr	r3, [pc, #56]	; (80028d4 <_ZN10LineSensor13emergencyStopEv+0x9c>)
 800289c:	2201      	movs	r2, #1
 800289e:	701a      	strb	r2, [r3, #0]
 80028a0:	e002      	b.n	80028a8 <_ZN10LineSensor13emergencyStopEv+0x70>
	}
	else flag = false;
 80028a2:	4b0c      	ldr	r3, [pc, #48]	; (80028d4 <_ZN10LineSensor13emergencyStopEv+0x9c>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	701a      	strb	r2, [r3, #0]

	if(cnt >= 10000) cnt = 10000;
 80028a8:	4b09      	ldr	r3, [pc, #36]	; (80028d0 <_ZN10LineSensor13emergencyStopEv+0x98>)
 80028aa:	881b      	ldrh	r3, [r3, #0]
 80028ac:	f242 720f 	movw	r2, #9999	; 0x270f
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d903      	bls.n	80028bc <_ZN10LineSensor13emergencyStopEv+0x84>
 80028b4:	4b06      	ldr	r3, [pc, #24]	; (80028d0 <_ZN10LineSensor13emergencyStopEv+0x98>)
 80028b6:	f242 7210 	movw	r2, #10000	; 0x2710
 80028ba:	801a      	strh	r2, [r3, #0]

	return flag;
 80028bc:	4b05      	ldr	r3, [pc, #20]	; (80028d4 <_ZN10LineSensor13emergencyStopEv+0x9c>)
 80028be:	781b      	ldrb	r3, [r3, #0]

}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3714      	adds	r7, #20
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr
 80028cc:	44098000 	.word	0x44098000
 80028d0:	20000200 	.word	0x20000200
 80028d4:	20000202 	.word	0x20000202

080028d8 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	ed87 0a01 	vstr	s0, [r7, #4]
 80028e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80028e6:	eef0 7ae7 	vabs.f32	s15, s15
 80028ea:	eeb0 0a67 	vmov.f32	s0, s15
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC>:
float mon_ref_dis, mon_current_dis;
uint16_t mon_vel_idx, mon_i;
float mon_tar_vel;


LineTrace::LineTrace(Motor *motor, LineSensor *line_sensor, VelocityCtrl *velocity_ctrl, SideSensor *side_sensor, Encoder *encoder, Odometry *odometry, Logger *logger, IMU *imu, ESC *esc) :
 80028f8:	b480      	push	{r7}
 80028fa:	b089      	sub	sp, #36	; 0x24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	607a      	str	r2, [r7, #4]
 8002904:	603b      	str	r3, [r7, #0]
				kp_(0), kd_(0), ki_(0),
				excution_flag_(false), i_reset_flag_(false), normal_ratio_(0),
				target_velocity_(0), max_velocity_(0), max_velocity2_(0), min_velocity_(0), min_velocity2_(0), logging_flag_(false),
				ref_distance_(0), velocity_play_flag_(false), velocity_table_idx_(0), mode_selector_(0), crossline_idx_(0), sideline_idx_(0), sideline_idx2_(0), all_sideline_idx_(0),
				ignore_crossline_flag_(false), stable_flag_(false), stable_flag_force_(false), stable_cnt_reset_flag_(false), max_acc_(0), max_dec_(0), max_acc2_(0), max_dec2_(0), correction_check_cnt_(0),
				store_check_cnt_(0), ignore_check_cnt_(0), all_sideline_flag_(false)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	f04f 0200 	mov.w	r2, #0
 800290c:	629a      	str	r2, [r3, #40]	; 0x28
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	f04f 0200 	mov.w	r2, #0
 8002914:	62da      	str	r2, [r3, #44]	; 0x2c
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f04f 0200 	mov.w	r2, #0
 800291c:	631a      	str	r2, [r3, #48]	; 0x30
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2200      	movs	r2, #0
 8002922:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	f04f 0200 	mov.w	r2, #0
 8002934:	645a      	str	r2, [r3, #68]	; 0x44
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	f04f 0200 	mov.w	r2, #0
 800293c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f04f 0200 	mov.w	r2, #0
 8002946:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f04f 0200 	mov.w	r2, #0
 8002950:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f04f 0200 	mov.w	r2, #0
 800295a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f04f 0200 	mov.w	r2, #0
 8002964:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2200      	movs	r2, #0
 800296c:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8002976:	330c      	adds	r3, #12
 8002978:	f04f 0200 	mov.w	r2, #0
 800297c:	601a      	str	r2, [r3, #0]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002984:	3350      	adds	r3, #80	; 0x50
 8002986:	2200      	movs	r2, #0
 8002988:	701a      	strb	r2, [r3, #0]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002990:	3352      	adds	r3, #82	; 0x52
 8002992:	2200      	movs	r2, #0
 8002994:	801a      	strh	r2, [r3, #0]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800299c:	3354      	adds	r3, #84	; 0x54
 800299e:	2200      	movs	r2, #0
 80029a0:	801a      	strh	r2, [r3, #0]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80029a8:	3318      	adds	r3, #24
 80029aa:	2200      	movs	r2, #0
 80029ac:	801a      	strh	r2, [r3, #0]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80029b4:	331c      	adds	r3, #28
 80029b6:	2200      	movs	r2, #0
 80029b8:	801a      	strh	r2, [r3, #0]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80029c0:	331e      	adds	r3, #30
 80029c2:	2200      	movs	r2, #0
 80029c4:	801a      	strh	r2, [r3, #0]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80029cc:	3320      	adds	r3, #32
 80029ce:	2200      	movs	r2, #0
 80029d0:	801a      	strh	r2, [r3, #0]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80029d8:	3322      	adds	r3, #34	; 0x22
 80029da:	2200      	movs	r2, #0
 80029dc:	701a      	strb	r2, [r3, #0]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80029e4:	3323      	adds	r3, #35	; 0x23
 80029e6:	2200      	movs	r2, #0
 80029e8:	701a      	strb	r2, [r3, #0]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80029f0:	3324      	adds	r3, #36	; 0x24
 80029f2:	2200      	movs	r2, #0
 80029f4:	701a      	strb	r2, [r3, #0]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80029fc:	3325      	adds	r3, #37	; 0x25
 80029fe:	2200      	movs	r2, #0
 8002a00:	701a      	strb	r2, [r3, #0]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002a08:	3328      	adds	r3, #40	; 0x28
 8002a0a:	f04f 0200 	mov.w	r2, #0
 8002a0e:	601a      	str	r2, [r3, #0]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002a16:	332c      	adds	r3, #44	; 0x2c
 8002a18:	f04f 0200 	mov.w	r2, #0
 8002a1c:	601a      	str	r2, [r3, #0]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002a24:	3330      	adds	r3, #48	; 0x30
 8002a26:	f04f 0200 	mov.w	r2, #0
 8002a2a:	601a      	str	r2, [r3, #0]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002a32:	3334      	adds	r3, #52	; 0x34
 8002a34:	f04f 0200 	mov.w	r2, #0
 8002a38:	601a      	str	r2, [r3, #0]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002a40:	3338      	adds	r3, #56	; 0x38
 8002a42:	2200      	movs	r2, #0
 8002a44:	801a      	strh	r2, [r3, #0]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002a4c:	333a      	adds	r3, #58	; 0x3a
 8002a4e:	2200      	movs	r2, #0
 8002a50:	801a      	strh	r2, [r3, #0]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002a58:	333c      	adds	r3, #60	; 0x3c
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	801a      	strh	r2, [r3, #0]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002a64:	333e      	adds	r3, #62	; 0x3e
 8002a66:	2200      	movs	r2, #0
 8002a68:	701a      	strb	r2, [r3, #0]

{
	motor_ = motor;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	68ba      	ldr	r2, [r7, #8]
 8002a6e:	601a      	str	r2, [r3, #0]
	line_sensor_ = line_sensor;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	683a      	ldr	r2, [r7, #0]
 8002a7a:	609a      	str	r2, [r3, #8]
	side_sensor_ = side_sensor;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a80:	611a      	str	r2, [r3, #16]
	encoder_ = encoder;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a86:	615a      	str	r2, [r3, #20]
	odometry_ = odometry;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a8c:	619a      	str	r2, [r3, #24]
	logger_ = logger;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a92:	61da      	str	r2, [r3, #28]
	imu_ = imu;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a98:	621a      	str	r2, [r3, #32]
	esc_ = esc;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a9e:	625a      	str	r2, [r3, #36]	; 0x24

	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	83fb      	strh	r3, [r7, #30]
 8002aa4:	8bfb      	ldrh	r3, [r7, #30]
 8002aa6:	f241 726f 	movw	r2, #5999	; 0x176f
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d80d      	bhi.n	8002aca <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1d2>
		velocity_table_[i] = 0;
 8002aae:	8bfb      	ldrh	r3, [r7, #30]
 8002ab0:	68fa      	ldr	r2, [r7, #12]
 8002ab2:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8002ab6:	3304      	adds	r3, #4
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	4413      	add	r3, r2
 8002abc:	f04f 0200 	mov.w	r2, #0
 8002ac0:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002ac2:	8bfb      	ldrh	r3, [r7, #30]
 8002ac4:	3301      	adds	r3, #1
 8002ac6:	83fb      	strh	r3, [r7, #30]
 8002ac8:	e7ec      	b.n	8002aa4 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1ac>
	}
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002aca:	2300      	movs	r3, #0
 8002acc:	83bb      	strh	r3, [r7, #28]
 8002ace:	8bbb      	ldrh	r3, [r7, #28]
 8002ad0:	2b63      	cmp	r3, #99	; 0x63
 8002ad2:	d80d      	bhi.n	8002af0 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1f8>
		crossline_distance_[i] = 0;
 8002ad4:	8bbb      	ldrh	r3, [r7, #28]
 8002ad6:	68fa      	ldr	r2, [r7, #12]
 8002ad8:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8002adc:	3316      	adds	r3, #22
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	4413      	add	r3, r2
 8002ae2:	f04f 0200 	mov.w	r2, #0
 8002ae6:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002ae8:	8bbb      	ldrh	r3, [r7, #28]
 8002aea:	3301      	adds	r3, #1
 8002aec:	83bb      	strh	r3, [r7, #28]
 8002aee:	e7ee      	b.n	8002ace <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1d6>
	}
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002af0:	2300      	movs	r3, #0
 8002af2:	837b      	strh	r3, [r7, #26]
 8002af4:	8b7b      	ldrh	r3, [r7, #26]
 8002af6:	2b63      	cmp	r3, #99	; 0x63
 8002af8:	d80d      	bhi.n	8002b16 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x21e>
		crossline_distance2_[i] = 0;
 8002afa:	8b7b      	ldrh	r3, [r7, #26]
 8002afc:	68fa      	ldr	r2, [r7, #12]
 8002afe:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 8002b02:	333a      	adds	r3, #58	; 0x3a
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	4413      	add	r3, r2
 8002b08:	f04f 0200 	mov.w	r2, #0
 8002b0c:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002b0e:	8b7b      	ldrh	r3, [r7, #26]
 8002b10:	3301      	adds	r3, #1
 8002b12:	837b      	strh	r3, [r7, #26]
 8002b14:	e7ee      	b.n	8002af4 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1fc>
	}
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002b16:	2300      	movs	r3, #0
 8002b18:	833b      	strh	r3, [r7, #24]
 8002b1a:	8b3b      	ldrh	r3, [r7, #24]
 8002b1c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002b20:	d20d      	bcs.n	8002b3e <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x246>
		sideline_distance_[i] = 0;
 8002b22:	8b3b      	ldrh	r3, [r7, #24]
 8002b24:	68fa      	ldr	r2, [r7, #12]
 8002b26:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 8002b2a:	331e      	adds	r3, #30
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	4413      	add	r3, r2
 8002b30:	f04f 0200 	mov.w	r2, #0
 8002b34:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002b36:	8b3b      	ldrh	r3, [r7, #24]
 8002b38:	3301      	adds	r3, #1
 8002b3a:	833b      	strh	r3, [r7, #24]
 8002b3c:	e7ed      	b.n	8002b1a <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x222>
	}
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002b3e:	2300      	movs	r3, #0
 8002b40:	82fb      	strh	r3, [r7, #22]
 8002b42:	8afb      	ldrh	r3, [r7, #22]
 8002b44:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002b48:	d20d      	bcs.n	8002b66 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x26e>
		sideline_distance2_[i] = 0;
 8002b4a:	8afb      	ldrh	r3, [r7, #22]
 8002b4c:	68fa      	ldr	r2, [r7, #12]
 8002b4e:	f503 5347 	add.w	r3, r3, #12736	; 0x31c0
 8002b52:	3312      	adds	r3, #18
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	4413      	add	r3, r2
 8002b58:	f04f 0200 	mov.w	r2, #0
 8002b5c:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002b5e:	8afb      	ldrh	r3, [r7, #22]
 8002b60:	3301      	adds	r3, #1
 8002b62:	82fb      	strh	r3, [r7, #22]
 8002b64:	e7ed      	b.n	8002b42 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x24a>
	/*
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
		all_sideline_distance_[i] = 0;
	}
	*/
}
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3724      	adds	r7, #36	; 0x24
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <_ZN9LineTrace9calcErrorEv>:

// ---------------------------------------------------------------------------------------------------//
// -------------------------------------Sensor angle based line following --------------------------//
// ---------------------------------------------------------------------------------------------------//
float LineTrace::calcError()
{
 8002b74:	b480      	push	{r7}
 8002b76:	b085      	sub	sp, #20
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
	/*
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
			- (line_sensor_->sensor[7] + line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10] + line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]);
	*/

	float diff = (line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5])
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	ed93 7ab3 	vldr	s14, [r3, #716]	; 0x2cc
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8002b8c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	edd3 7ab5 	vldr	s15, [r3, #724]	; 0x2d4
 8002b98:	ee37 7a27 	vadd.f32	s14, s14, s15
			- (line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10]);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	edd3 6ab8 	vldr	s13, [r3, #736]	; 0x2e0
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	edd3 7ab9 	vldr	s15, [r3, #740]	; 0x2e4
 8002bac:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 8002bb8:	ee76 7aa7 	vadd.f32	s15, s13, s15
	float diff = (line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5])
 8002bbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bc0:	edc7 7a03 	vstr	s15, [r7, #12]
	//mon_diff = diff;

	return diff;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	ee07 3a90 	vmov	s15, r3

}
 8002bca:	eeb0 0a67 	vmov.f32	s0, s15
 8002bce:	3714      	adds	r7, #20
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr

08002bd8 <_ZN9LineTrace8pidTraceEv>:
}
// ---------------------------------------------------------------------------------------------------//
// ----------------------------------Standar line following ------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::pidTrace()
{
 8002bd8:	b5b0      	push	{r4, r5, r7, lr}
 8002bda:	b086      	sub	sp, #24
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
	float diff = calcError();
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f7ff ffc7 	bl	8002b74 <_ZN9LineTrace9calcErrorEv>
 8002be6:	ed87 0a03 	vstr	s0, [r7, #12]
	static float pre_diff = 0;
	float p, d;
	static float i;

	if(i_reset_flag_ == true){
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d007      	beq.n	8002c04 <_ZN9LineTrace8pidTraceEv+0x2c>
		i = 0;
 8002bf4:	4b66      	ldr	r3, [pc, #408]	; (8002d90 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002bf6:	f04f 0200 	mov.w	r2, #0
 8002bfa:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	}

	if(mode_selector_ == FIRST_RUNNING){
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002c0a:	3354      	adds	r3, #84	; 0x54
 8002c0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d14c      	bne.n	8002cae <_ZN9LineTrace8pidTraceEv+0xd6>
		p = kp_slow_ * diff;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002c1a:	ed97 7a03 	vldr	s14, [r7, #12]
 8002c1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c22:	edc7 7a05 	vstr	s15, [r7, #20]
		d = kd_slow_ * (diff - pre_diff) / DELTA_T;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8002c2c:	4b59      	ldr	r3, [pc, #356]	; (8002d94 <_ZN9LineTrace8pidTraceEv+0x1bc>)
 8002c2e:	edd3 7a00 	vldr	s15, [r3]
 8002c32:	edd7 6a03 	vldr	s13, [r7, #12]
 8002c36:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002c3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c3e:	ee17 0a90 	vmov	r0, s15
 8002c42:	f7fd fc99 	bl	8000578 <__aeabi_f2d>
 8002c46:	a350      	add	r3, pc, #320	; (adr r3, 8002d88 <_ZN9LineTrace8pidTraceEv+0x1b0>)
 8002c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c4c:	f7fd fe16 	bl	800087c <__aeabi_ddiv>
 8002c50:	4603      	mov	r3, r0
 8002c52:	460c      	mov	r4, r1
 8002c54:	4618      	mov	r0, r3
 8002c56:	4621      	mov	r1, r4
 8002c58:	f7fd ffde 	bl	8000c18 <__aeabi_d2f>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	613b      	str	r3, [r7, #16]
		i += ki_slow_ * diff * DELTA_T;
 8002c60:	4b4b      	ldr	r3, [pc, #300]	; (8002d90 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7fd fc87 	bl	8000578 <__aeabi_f2d>
 8002c6a:	4604      	mov	r4, r0
 8002c6c:	460d      	mov	r5, r1
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8002c74:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c7c:	ee17 0a90 	vmov	r0, s15
 8002c80:	f7fd fc7a 	bl	8000578 <__aeabi_f2d>
 8002c84:	a340      	add	r3, pc, #256	; (adr r3, 8002d88 <_ZN9LineTrace8pidTraceEv+0x1b0>)
 8002c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c8a:	f7fd fccd 	bl	8000628 <__aeabi_dmul>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	460b      	mov	r3, r1
 8002c92:	4620      	mov	r0, r4
 8002c94:	4629      	mov	r1, r5
 8002c96:	f7fd fb11 	bl	80002bc <__adddf3>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	460c      	mov	r4, r1
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	4621      	mov	r1, r4
 8002ca2:	f7fd ffb9 	bl	8000c18 <__aeabi_d2f>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	4b39      	ldr	r3, [pc, #228]	; (8002d90 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002caa:	601a      	str	r2, [r3, #0]
 8002cac:	e04b      	b.n	8002d46 <_ZN9LineTrace8pidTraceEv+0x16e>
	}
	else{
		p = kp_ * diff;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002cb4:	ed97 7a03 	vldr	s14, [r7, #12]
 8002cb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cbc:	edc7 7a05 	vstr	s15, [r7, #20]
		d = kd_ * (diff - pre_diff) / DELTA_T;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8002cc6:	4b33      	ldr	r3, [pc, #204]	; (8002d94 <_ZN9LineTrace8pidTraceEv+0x1bc>)
 8002cc8:	edd3 7a00 	vldr	s15, [r3]
 8002ccc:	edd7 6a03 	vldr	s13, [r7, #12]
 8002cd0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002cd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cd8:	ee17 0a90 	vmov	r0, s15
 8002cdc:	f7fd fc4c 	bl	8000578 <__aeabi_f2d>
 8002ce0:	a329      	add	r3, pc, #164	; (adr r3, 8002d88 <_ZN9LineTrace8pidTraceEv+0x1b0>)
 8002ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ce6:	f7fd fdc9 	bl	800087c <__aeabi_ddiv>
 8002cea:	4603      	mov	r3, r0
 8002cec:	460c      	mov	r4, r1
 8002cee:	4618      	mov	r0, r3
 8002cf0:	4621      	mov	r1, r4
 8002cf2:	f7fd ff91 	bl	8000c18 <__aeabi_d2f>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	613b      	str	r3, [r7, #16]
		i += ki_ * diff * DELTA_T;
 8002cfa:	4b25      	ldr	r3, [pc, #148]	; (8002d90 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f7fd fc3a 	bl	8000578 <__aeabi_f2d>
 8002d04:	4604      	mov	r4, r0
 8002d06:	460d      	mov	r5, r1
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8002d0e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d16:	ee17 0a90 	vmov	r0, s15
 8002d1a:	f7fd fc2d 	bl	8000578 <__aeabi_f2d>
 8002d1e:	a31a      	add	r3, pc, #104	; (adr r3, 8002d88 <_ZN9LineTrace8pidTraceEv+0x1b0>)
 8002d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d24:	f7fd fc80 	bl	8000628 <__aeabi_dmul>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	460b      	mov	r3, r1
 8002d2c:	4620      	mov	r0, r4
 8002d2e:	4629      	mov	r1, r5
 8002d30:	f7fd fac4 	bl	80002bc <__adddf3>
 8002d34:	4603      	mov	r3, r0
 8002d36:	460c      	mov	r4, r1
 8002d38:	4618      	mov	r0, r3
 8002d3a:	4621      	mov	r1, r4
 8002d3c:	f7fd ff6c 	bl	8000c18 <__aeabi_d2f>
 8002d40:	4602      	mov	r2, r0
 8002d42:	4b13      	ldr	r3, [pc, #76]	; (8002d90 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002d44:	601a      	str	r2, [r3, #0]
	}

	float rotation_ratio = p + d + i;
 8002d46:	ed97 7a05 	vldr	s14, [r7, #20]
 8002d4a:	edd7 7a04 	vldr	s15, [r7, #16]
 8002d4e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d52:	4b0f      	ldr	r3, [pc, #60]	; (8002d90 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002d54:	edd3 7a00 	vldr	s15, [r3]
 8002d58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d5c:	edc7 7a02 	vstr	s15, [r7, #8]

	velocity_ctrl_->setTranslationVelocityOnly(target_velocity_, rotation_ratio);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	689a      	ldr	r2, [r3, #8]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8002d6a:	edd7 0a02 	vldr	s1, [r7, #8]
 8002d6e:	eeb0 0a67 	vmov.f32	s0, s15
 8002d72:	4610      	mov	r0, r2
 8002d74:	f002 fff4 	bl	8005d60 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>

	pre_diff = diff;
 8002d78:	4a06      	ldr	r2, [pc, #24]	; (8002d94 <_ZN9LineTrace8pidTraceEv+0x1bc>)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6013      	str	r3, [r2, #0]

}
 8002d7e:	bf00      	nop
 8002d80:	3718      	adds	r7, #24
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bdb0      	pop	{r4, r5, r7, pc}
 8002d86:	bf00      	nop
 8002d88:	d2f1a9fc 	.word	0xd2f1a9fc
 8002d8c:	3f50624d 	.word	0x3f50624d
 8002d90:	20000214 	.word	0x20000214
 8002d94:	20000210 	.word	0x20000210

08002d98 <_ZN9LineTrace11loggerStartEv>:

// ---------------------------------------------------------------------------------------//
// -------------------------------------Logging-------------------------------------------//
// ---------------------------------------------------------------------------------------//
void LineTrace::loggerStart()
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
	encoder_->clearDistance10mm();
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	695b      	ldr	r3, [r3, #20]
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7fe fc71 	bl	800168c <_ZN7Encoder17clearDistance10mmEv>
	odometry_->clearPotition();
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	699b      	ldr	r3, [r3, #24]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f002 fa03 	bl	80051ba <_ZN8Odometry13clearPotitionEv>
	logger_->resetLogsDis2();
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	69db      	ldr	r3, [r3, #28]
 8002db8:	4618      	mov	r0, r3
 8002dba:	f001 ff92 	bl	8004ce2 <_ZN6Logger13resetLogsDis2Ev>

	logging_flag_ = true;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
}
 8002dc6:	bf00      	nop
 8002dc8:	3708      	adds	r7, #8
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}

08002dce <_ZN9LineTrace10loggerStopEv>:

void LineTrace::loggerStop()
{
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	b082      	sub	sp, #8
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
	logger_->stop();
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	69db      	ldr	r3, [r3, #28]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f002 f858 	bl	8004e90 <_ZN6Logger4stopEv>
	logging_flag_ = false;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
}
 8002de8:	bf00      	nop
 8002dea:	3708      	adds	r7, #8
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <_ZN9LineTrace22storeCrossLineDistanceEv>:

void LineTrace::storeCrossLineDistance()
{
 8002df0:	b590      	push	{r4, r7, lr}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
	crossline_distance_[crossline_idx_] = encoder_->getTotalDistance();
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	695a      	ldr	r2, [r3, #20]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002e02:	3318      	adds	r3, #24
 8002e04:	881b      	ldrh	r3, [r3, #0]
 8002e06:	461c      	mov	r4, r3
 8002e08:	4610      	mov	r0, r2
 8002e0a:	f7fe fc21 	bl	8001650 <_ZN7Encoder16getTotalDistanceEv>
 8002e0e:	eef0 7a40 	vmov.f32	s15, s0
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	f504 533c 	add.w	r3, r4, #12032	; 0x2f00
 8002e18:	3316      	adds	r3, #22
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	4413      	add	r3, r2
 8002e1e:	edc3 7a00 	vstr	s15, [r3]
	crossline_idx_++;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002e28:	3318      	adds	r3, #24
 8002e2a:	881b      	ldrh	r3, [r3, #0]
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	b29a      	uxth	r2, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002e36:	3318      	adds	r3, #24
 8002e38:	801a      	strh	r2, [r3, #0]

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002e40:	3318      	adds	r3, #24
 8002e42:	881b      	ldrh	r3, [r3, #0]
 8002e44:	2b63      	cmp	r3, #99	; 0x63
 8002e46:	d905      	bls.n	8002e54 <_ZN9LineTrace22storeCrossLineDistanceEv+0x64>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002e4e:	3318      	adds	r3, #24
 8002e50:	2263      	movs	r2, #99	; 0x63
 8002e52:	801a      	strh	r2, [r3, #0]
}
 8002e54:	bf00      	nop
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd90      	pop	{r4, r7, pc}

08002e5c <_ZN9LineTrace23storeCrossLineDistance2Ev>:

void LineTrace::storeCrossLineDistance2()
{
 8002e5c:	b590      	push	{r4, r7, lr}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
	crossline_distance2_[crossline_idx2_] = encoder_->getTotalDistance();
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	695a      	ldr	r2, [r3, #20]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002e6e:	331a      	adds	r3, #26
 8002e70:	881b      	ldrh	r3, [r3, #0]
 8002e72:	461c      	mov	r4, r3
 8002e74:	4610      	mov	r0, r2
 8002e76:	f7fe fbeb 	bl	8001650 <_ZN7Encoder16getTotalDistanceEv>
 8002e7a:	eef0 7a40 	vmov.f32	s15, s0
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	f504 533d 	add.w	r3, r4, #12096	; 0x2f40
 8002e84:	333a      	adds	r3, #58	; 0x3a
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	4413      	add	r3, r2
 8002e8a:	edc3 7a00 	vstr	s15, [r3]
	crossline_idx2_++;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002e94:	331a      	adds	r3, #26
 8002e96:	881b      	ldrh	r3, [r3, #0]
 8002e98:	3301      	adds	r3, #1
 8002e9a:	b29a      	uxth	r2, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002ea2:	331a      	adds	r3, #26
 8002ea4:	801a      	strh	r2, [r3, #0]

	if(crossline_idx2_ >= CROSSLINE_SIZE) crossline_idx2_ = CROSSLINE_SIZE - 1;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002eac:	331a      	adds	r3, #26
 8002eae:	881b      	ldrh	r3, [r3, #0]
 8002eb0:	2b63      	cmp	r3, #99	; 0x63
 8002eb2:	d905      	bls.n	8002ec0 <_ZN9LineTrace23storeCrossLineDistance2Ev+0x64>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002eba:	331a      	adds	r3, #26
 8002ebc:	2263      	movs	r2, #99	; 0x63
 8002ebe:	801a      	strh	r2, [r3, #0]
}
 8002ec0:	bf00      	nop
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd90      	pop	{r4, r7, pc}

08002ec8 <_ZN9LineTrace21storeSideLineDistanceEv>:

void LineTrace::storeSideLineDistance()
{
 8002ec8:	b590      	push	{r4, r7, lr}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
	sideline_distance_[sideline_idx_] = encoder_->getTotalDistance();
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	695a      	ldr	r2, [r3, #20]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002eda:	331c      	adds	r3, #28
 8002edc:	881b      	ldrh	r3, [r3, #0]
 8002ede:	461c      	mov	r4, r3
 8002ee0:	4610      	mov	r0, r2
 8002ee2:	f7fe fbb5 	bl	8001650 <_ZN7Encoder16getTotalDistanceEv>
 8002ee6:	eef0 7a40 	vmov.f32	s15, s0
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	f504 533f 	add.w	r3, r4, #12224	; 0x2fc0
 8002ef0:	331e      	adds	r3, #30
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	4413      	add	r3, r2
 8002ef6:	edc3 7a00 	vstr	s15, [r3]
	sideline_idx_++;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002f00:	331c      	adds	r3, #28
 8002f02:	881b      	ldrh	r3, [r3, #0]
 8002f04:	3301      	adds	r3, #1
 8002f06:	b29a      	uxth	r2, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002f0e:	331c      	adds	r3, #28
 8002f10:	801a      	strh	r2, [r3, #0]

	if(sideline_idx_ >= SIDELINE_SIZE) sideline_idx_ = SIDELINE_SIZE - 1;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002f18:	331c      	adds	r3, #28
 8002f1a:	881b      	ldrh	r3, [r3, #0]
 8002f1c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002f20:	d306      	bcc.n	8002f30 <_ZN9LineTrace21storeSideLineDistanceEv+0x68>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002f28:	331c      	adds	r3, #28
 8002f2a:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002f2e:	801a      	strh	r2, [r3, #0]
}
 8002f30:	bf00      	nop
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd90      	pop	{r4, r7, pc}

08002f38 <_ZN9LineTrace22storeSideLineDistance2Ev>:

void LineTrace::storeSideLineDistance2()
{
 8002f38:	b590      	push	{r4, r7, lr}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
	sideline_distance2_[sideline_idx2_] = encoder_->getTotalDistance();
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	695a      	ldr	r2, [r3, #20]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002f4a:	331e      	adds	r3, #30
 8002f4c:	881b      	ldrh	r3, [r3, #0]
 8002f4e:	461c      	mov	r4, r3
 8002f50:	4610      	mov	r0, r2
 8002f52:	f7fe fb7d 	bl	8001650 <_ZN7Encoder16getTotalDistanceEv>
 8002f56:	eef0 7a40 	vmov.f32	s15, s0
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	f504 5347 	add.w	r3, r4, #12736	; 0x31c0
 8002f60:	3312      	adds	r3, #18
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	4413      	add	r3, r2
 8002f66:	edc3 7a00 	vstr	s15, [r3]
	sideline_idx2_++;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002f70:	331e      	adds	r3, #30
 8002f72:	881b      	ldrh	r3, [r3, #0]
 8002f74:	3301      	adds	r3, #1
 8002f76:	b29a      	uxth	r2, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002f7e:	331e      	adds	r3, #30
 8002f80:	801a      	strh	r2, [r3, #0]

	if(sideline_idx2_ >= SIDELINE_SIZE) sideline_idx2_ = SIDELINE_SIZE - 1;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002f88:	331e      	adds	r3, #30
 8002f8a:	881b      	ldrh	r3, [r3, #0]
 8002f8c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002f90:	d306      	bcc.n	8002fa0 <_ZN9LineTrace22storeSideLineDistance2Ev+0x68>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002f98:	331e      	adds	r3, #30
 8002f9a:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002f9e:	801a      	strh	r2, [r3, #0]
}
 8002fa0:	bf00      	nop
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd90      	pop	{r4, r7, pc}

08002fa8 <_ZN9LineTrace9storeLogsEv>:
	if(all_sideline_idx_ >= SIDELINE_SIZE) all_sideline_idx_ = SIDELINE_SIZE - 1;
}
*/

void LineTrace::storeLogs()
{
 8002fa8:	b590      	push	{r4, r7, lr}
 8002faa:	ed2d 8b02 	vpush	{d8}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
	if(logging_flag_ == true){
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d046      	beq.n	800304c <_ZN9LineTrace9storeLogsEv+0xa4>
		if(mode_selector_ == FIRST_RUNNING)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002fc4:	3354      	adds	r3, #84	; 0x54
 8002fc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d11c      	bne.n	8003008 <_ZN9LineTrace9storeLogsEv+0x60>
			//logger_->storeDistanceAndTheta(encoder_->getDistance10mm(), odometry_->getTheta());
			logger_->storeDistanceAndTheta(encoder_->getDistance10mm(), odometry_->getDeltaTheta());
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	69dc      	ldr	r4, [r3, #28]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	695b      	ldr	r3, [r3, #20]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7fe fb2b 	bl	8001632 <_ZN7Encoder15getDistance10mmEv>
 8002fdc:	eeb0 8a40 	vmov.f32	s16, s0
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	699b      	ldr	r3, [r3, #24]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f002 f8d7 	bl	8005198 <_ZN8Odometry13getDeltaThetaEv>
 8002fea:	ec53 2b10 	vmov	r2, r3, d0
 8002fee:	4610      	mov	r0, r2
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	f7fd fe11 	bl	8000c18 <__aeabi_d2f>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	ee00 3a90 	vmov	s1, r3
 8002ffc:	eeb0 0a48 	vmov.f32	s0, s16
 8003000:	4620      	mov	r0, r4
 8003002:	f001 fd79 	bl	8004af8 <_ZN6Logger21storeDistanceAndThetaEff>
 8003006:	e01b      	b.n	8003040 <_ZN9LineTrace9storeLogsEv+0x98>
		else
			//logger_->storeDistanceAndTheta2(encoder_->getDistance10mm(), odometry_->getTheta());
			//logger_->storeDistanceAndTheta2(encoder_->getTotalDistance(), odometry_->getTheta());
			logger_->storeDistanceAndTheta(encoder_->getDistance10mm(), odometry_->getDeltaTheta());
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	69dc      	ldr	r4, [r3, #28]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	695b      	ldr	r3, [r3, #20]
 8003010:	4618      	mov	r0, r3
 8003012:	f7fe fb0e 	bl	8001632 <_ZN7Encoder15getDistance10mmEv>
 8003016:	eeb0 8a40 	vmov.f32	s16, s0
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	699b      	ldr	r3, [r3, #24]
 800301e:	4618      	mov	r0, r3
 8003020:	f002 f8ba 	bl	8005198 <_ZN8Odometry13getDeltaThetaEv>
 8003024:	ec53 2b10 	vmov	r2, r3, d0
 8003028:	4610      	mov	r0, r2
 800302a:	4619      	mov	r1, r3
 800302c:	f7fd fdf4 	bl	8000c18 <__aeabi_d2f>
 8003030:	4603      	mov	r3, r0
 8003032:	ee00 3a90 	vmov	s1, r3
 8003036:	eeb0 0a48 	vmov.f32	s0, s16
 800303a:	4620      	mov	r0, r4
 800303c:	f001 fd5c 	bl	8004af8 <_ZN6Logger21storeDistanceAndThetaEff>
			//logger_->storeDistanceAndTheta2(encoder_->getDistance10mm(), odometry_->getTheta());

		mon_store_cnt++;
 8003040:	4b05      	ldr	r3, [pc, #20]	; (8003058 <_ZN9LineTrace9storeLogsEv+0xb0>)
 8003042:	881b      	ldrh	r3, [r3, #0]
 8003044:	3301      	adds	r3, #1
 8003046:	b29a      	uxth	r2, r3
 8003048:	4b03      	ldr	r3, [pc, #12]	; (8003058 <_ZN9LineTrace9storeLogsEv+0xb0>)
 800304a:	801a      	strh	r2, [r3, #0]
	}
}
 800304c:	bf00      	nop
 800304e:	370c      	adds	r7, #12
 8003050:	46bd      	mov	sp, r7
 8003052:	ecbd 8b02 	vpop	{d8}
 8003056:	bd90      	pop	{r4, r7, pc}
 8003058:	20000204 	.word	0x20000204

0800305c <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv>:

// ---------------------------------------------------------------------------------------------------//
// ----------------------------------Position correction----------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::correctionTotalDistanceFromCrossLine()
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
			break;
		}
	}
	*/

	while(crossline_idx_ <= CROSSLINE_SIZE){
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800306a:	3318      	adds	r3, #24
 800306c:	881b      	ldrh	r3, [r3, #0]
 800306e:	2b64      	cmp	r3, #100	; 0x64
 8003070:	d85a      	bhi.n	8003128 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0xcc>
		float temp_crossline_distance = crossline_distance_[crossline_idx_];
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003078:	3318      	adds	r3, #24
 800307a:	881b      	ldrh	r3, [r3, #0]
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8003082:	3316      	adds	r3, #22
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	4413      	add	r3, r2
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	60fb      	str	r3, [r7, #12]
		float diff = abs(temp_crossline_distance - (encoder_->getTotalDistance() / DISTANCE_CORRECTION_CONST));
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	695b      	ldr	r3, [r3, #20]
 8003090:	4618      	mov	r0, r3
 8003092:	f7fe fadd 	bl	8001650 <_ZN7Encoder16getTotalDistanceEv>
 8003096:	eeb0 7a40 	vmov.f32	s14, s0
 800309a:	edd7 7a03 	vldr	s15, [r7, #12]
 800309e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80030a2:	eeb0 0a67 	vmov.f32	s0, s15
 80030a6:	f7ff fc17 	bl	80028d8 <_ZSt3absf>
 80030aa:	ed87 0a02 	vstr	s0, [r7, #8]
		if(diff <= 250){
 80030ae:	edd7 7a02 	vldr	s15, [r7, #8]
 80030b2:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800314c <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0xf0>
 80030b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030be:	d826      	bhi.n	800310e <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0xb2>
			correction_check_cnt_ = 0;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80030c6:	3338      	adds	r3, #56	; 0x38
 80030c8:	2200      	movs	r2, #0
 80030ca:	801a      	strh	r2, [r3, #0]
			encoder_->setTotalDistance(crossline_distance_[crossline_idx_] / DISTANCE_CORRECTION_CONST);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6959      	ldr	r1, [r3, #20]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80030d6:	3318      	adds	r3, #24
 80030d8:	881b      	ldrh	r3, [r3, #0]
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 80030e0:	3316      	adds	r3, #22
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	4413      	add	r3, r2
 80030e6:	edd3 7a00 	vldr	s15, [r3]
 80030ea:	eeb0 0a67 	vmov.f32	s0, s15
 80030ee:	4608      	mov	r0, r1
 80030f0:	f7fe fabd 	bl	800166e <_ZN7Encoder16setTotalDistanceEf>
			crossline_idx_++;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80030fa:	3318      	adds	r3, #24
 80030fc:	881b      	ldrh	r3, [r3, #0]
 80030fe:	3301      	adds	r3, #1
 8003100:	b29a      	uxth	r2, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003108:	3318      	adds	r3, #24
 800310a:	801a      	strh	r2, [r3, #0]
			break;
 800310c:	e00c      	b.n	8003128 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0xcc>
		}
		crossline_idx_++;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003114:	3318      	adds	r3, #24
 8003116:	881b      	ldrh	r3, [r3, #0]
 8003118:	3301      	adds	r3, #1
 800311a:	b29a      	uxth	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003122:	3318      	adds	r3, #24
 8003124:	801a      	strh	r2, [r3, #0]
	while(crossline_idx_ <= CROSSLINE_SIZE){
 8003126:	e79d      	b.n	8003064 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0x8>
	}

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800312e:	3318      	adds	r3, #24
 8003130:	881b      	ldrh	r3, [r3, #0]
 8003132:	2b63      	cmp	r3, #99	; 0x63
 8003134:	d905      	bls.n	8003142 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0xe6>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800313c:	3318      	adds	r3, #24
 800313e:	2263      	movs	r2, #99	; 0x63
 8003140:	801a      	strh	r2, [r3, #0]

}
 8003142:	bf00      	nop
 8003144:	3710      	adds	r7, #16
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	437a0000 	.word	0x437a0000

08003150 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv>:

void LineTrace::correctionTotalDistanceFromSideMarker()
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b086      	sub	sp, #24
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]

	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8003158:	2300      	movs	r3, #0
 800315a:	82fb      	strh	r3, [r7, #22]
 800315c:	8afb      	ldrh	r3, [r7, #22]
 800315e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003162:	d23d      	bcs.n	80031e0 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x90>
		float temp_sideline_distance = sideline_distance_[i];
 8003164:	8afb      	ldrh	r3, [r7, #22]
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 800316c:	331e      	adds	r3, #30
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	4413      	add	r3, r2
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	613b      	str	r3, [r7, #16]
		float diff = abs(temp_sideline_distance - (encoder_->getTotalDistance() / DISTANCE_CORRECTION_CONST));
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	695b      	ldr	r3, [r3, #20]
 800317a:	4618      	mov	r0, r3
 800317c:	f7fe fa68 	bl	8001650 <_ZN7Encoder16getTotalDistanceEv>
 8003180:	eeb0 7a40 	vmov.f32	s14, s0
 8003184:	edd7 7a04 	vldr	s15, [r7, #16]
 8003188:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800318c:	eeb0 0a67 	vmov.f32	s0, s15
 8003190:	f7ff fba2 	bl	80028d8 <_ZSt3absf>
 8003194:	ed87 0a03 	vstr	s0, [r7, #12]
		if(diff <= 230){
 8003198:	edd7 7a03 	vldr	s15, [r7, #12]
 800319c:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8003208 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xb8>
 80031a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031a8:	d816      	bhi.n	80031d8 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x88>
			correction_check_cnt_ = 0;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80031b0:	3338      	adds	r3, #56	; 0x38
 80031b2:	2200      	movs	r2, #0
 80031b4:	801a      	strh	r2, [r3, #0]
			encoder_->setTotalDistance(sideline_distance_[i] / DISTANCE_CORRECTION_CONST);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6959      	ldr	r1, [r3, #20]
 80031ba:	8afb      	ldrh	r3, [r7, #22]
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 80031c2:	331e      	adds	r3, #30
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	4413      	add	r3, r2
 80031c8:	edd3 7a00 	vldr	s15, [r3]
 80031cc:	eeb0 0a67 	vmov.f32	s0, s15
 80031d0:	4608      	mov	r0, r1
 80031d2:	f7fe fa4c 	bl	800166e <_ZN7Encoder16setTotalDistanceEf>
			break;
 80031d6:	e003      	b.n	80031e0 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x90>
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 80031d8:	8afb      	ldrh	r3, [r7, #22]
 80031da:	3301      	adds	r3, #1
 80031dc:	82fb      	strh	r3, [r7, #22]
 80031de:	e7bd      	b.n	800315c <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xc>
		}
		sideline_idx_++;
	}
	*/

	if(sideline_idx_ >= SIDELINE_SIZE) sideline_idx_ = SIDELINE_SIZE - 1;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80031e6:	331c      	adds	r3, #28
 80031e8:	881b      	ldrh	r3, [r3, #0]
 80031ea:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80031ee:	d306      	bcc.n	80031fe <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xae>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80031f6:	331c      	adds	r3, #28
 80031f8:	f240 12f3 	movw	r2, #499	; 0x1f3
 80031fc:	801a      	strh	r2, [r3, #0]

}
 80031fe:	bf00      	nop
 8003200:	3718      	adds	r7, #24
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	43660000 	.word	0x43660000

0800320c <_ZN9LineTrace15radius2VelocityEf>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------ Acceleration / deceleration processing------------------------------------//
// ---------------------------------------------------------------------------------------------------//
float LineTrace::radius2Velocity(float radius)
{
 800320c:	b480      	push	{r7}
 800320e:	b085      	sub	sp, #20
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	ed87 0a00 	vstr	s0, [r7]
		else if(radius < 800) velocity = 1.7;
		else if(radius < 1400) velocity = 2.0;
		else velocity = max_velocity_;
	}
	*/
	if(mode_selector_ == SECOND_RUNNING){
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800321e:	3354      	adds	r3, #84	; 0x54
 8003220:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003224:	2b01      	cmp	r3, #1
 8003226:	d144      	bne.n	80032b2 <_ZN9LineTrace15radius2VelocityEf+0xa6>
		if(radius < 400) velocity = min_velocity_;
 8003228:	edd7 7a00 	vldr	s15, [r7]
 800322c:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8003364 <_ZN9LineTrace15radius2VelocityEf+0x158>
 8003230:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003238:	d504      	bpl.n	8003244 <_ZN9LineTrace15radius2VelocityEf+0x38>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003240:	60fb      	str	r3, [r7, #12]
 8003242:	e084      	b.n	800334e <_ZN9LineTrace15radius2VelocityEf+0x142>
		else if(radius < 500) velocity = 1.5;
 8003244:	edd7 7a00 	vldr	s15, [r7]
 8003248:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8003368 <_ZN9LineTrace15radius2VelocityEf+0x15c>
 800324c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003254:	d503      	bpl.n	800325e <_ZN9LineTrace15radius2VelocityEf+0x52>
 8003256:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800325a:	60fb      	str	r3, [r7, #12]
 800325c:	e077      	b.n	800334e <_ZN9LineTrace15radius2VelocityEf+0x142>
		else if(radius < 650) velocity = 2.0;
 800325e:	edd7 7a00 	vldr	s15, [r7]
 8003262:	ed9f 7a42 	vldr	s14, [pc, #264]	; 800336c <_ZN9LineTrace15radius2VelocityEf+0x160>
 8003266:	eef4 7ac7 	vcmpe.f32	s15, s14
 800326a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800326e:	d503      	bpl.n	8003278 <_ZN9LineTrace15radius2VelocityEf+0x6c>
 8003270:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003274:	60fb      	str	r3, [r7, #12]
 8003276:	e06a      	b.n	800334e <_ZN9LineTrace15radius2VelocityEf+0x142>
		else if(radius < 1500) velocity = 2.5;
 8003278:	edd7 7a00 	vldr	s15, [r7]
 800327c:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8003370 <_ZN9LineTrace15radius2VelocityEf+0x164>
 8003280:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003288:	d502      	bpl.n	8003290 <_ZN9LineTrace15radius2VelocityEf+0x84>
 800328a:	4b3a      	ldr	r3, [pc, #232]	; (8003374 <_ZN9LineTrace15radius2VelocityEf+0x168>)
 800328c:	60fb      	str	r3, [r7, #12]
 800328e:	e05e      	b.n	800334e <_ZN9LineTrace15radius2VelocityEf+0x142>
		else if(radius < 2000) velocity = 3.0;
 8003290:	edd7 7a00 	vldr	s15, [r7]
 8003294:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8003378 <_ZN9LineTrace15radius2VelocityEf+0x16c>
 8003298:	eef4 7ac7 	vcmpe.f32	s15, s14
 800329c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032a0:	d502      	bpl.n	80032a8 <_ZN9LineTrace15radius2VelocityEf+0x9c>
 80032a2:	4b36      	ldr	r3, [pc, #216]	; (800337c <_ZN9LineTrace15radius2VelocityEf+0x170>)
 80032a4:	60fb      	str	r3, [r7, #12]
 80032a6:	e052      	b.n	800334e <_ZN9LineTrace15radius2VelocityEf+0x142>
		else velocity = max_velocity_;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80032ae:	60fb      	str	r3, [r7, #12]
 80032b0:	e04d      	b.n	800334e <_ZN9LineTrace15radius2VelocityEf+0x142>
	}

	else if(mode_selector_ == THIRD_RUNNING){
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80032b8:	3354      	adds	r3, #84	; 0x54
 80032ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d143      	bne.n	800334a <_ZN9LineTrace15radius2VelocityEf+0x13e>
		if(radius < 400) velocity = min_velocity2_;
 80032c2:	edd7 7a00 	vldr	s15, [r7]
 80032c6:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8003364 <_ZN9LineTrace15radius2VelocityEf+0x158>
 80032ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032d2:	d504      	bpl.n	80032de <_ZN9LineTrace15radius2VelocityEf+0xd2>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80032da:	60fb      	str	r3, [r7, #12]
 80032dc:	e037      	b.n	800334e <_ZN9LineTrace15radius2VelocityEf+0x142>
		else if(radius < 500) velocity = 1.7;
 80032de:	edd7 7a00 	vldr	s15, [r7]
 80032e2:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8003368 <_ZN9LineTrace15radius2VelocityEf+0x15c>
 80032e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032ee:	d502      	bpl.n	80032f6 <_ZN9LineTrace15radius2VelocityEf+0xea>
 80032f0:	4b23      	ldr	r3, [pc, #140]	; (8003380 <_ZN9LineTrace15radius2VelocityEf+0x174>)
 80032f2:	60fb      	str	r3, [r7, #12]
 80032f4:	e02b      	b.n	800334e <_ZN9LineTrace15radius2VelocityEf+0x142>
		else if(radius < 650) velocity = 2.0;
 80032f6:	edd7 7a00 	vldr	s15, [r7]
 80032fa:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800336c <_ZN9LineTrace15radius2VelocityEf+0x160>
 80032fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003306:	d503      	bpl.n	8003310 <_ZN9LineTrace15radius2VelocityEf+0x104>
 8003308:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800330c:	60fb      	str	r3, [r7, #12]
 800330e:	e01e      	b.n	800334e <_ZN9LineTrace15radius2VelocityEf+0x142>
		else if(radius < 1500) velocity = 2.5;
 8003310:	edd7 7a00 	vldr	s15, [r7]
 8003314:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8003370 <_ZN9LineTrace15radius2VelocityEf+0x164>
 8003318:	eef4 7ac7 	vcmpe.f32	s15, s14
 800331c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003320:	d502      	bpl.n	8003328 <_ZN9LineTrace15radius2VelocityEf+0x11c>
 8003322:	4b14      	ldr	r3, [pc, #80]	; (8003374 <_ZN9LineTrace15radius2VelocityEf+0x168>)
 8003324:	60fb      	str	r3, [r7, #12]
 8003326:	e012      	b.n	800334e <_ZN9LineTrace15radius2VelocityEf+0x142>
		else if(radius < 2000) velocity = 3.0;
 8003328:	edd7 7a00 	vldr	s15, [r7]
 800332c:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8003378 <_ZN9LineTrace15radius2VelocityEf+0x16c>
 8003330:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003338:	d502      	bpl.n	8003340 <_ZN9LineTrace15radius2VelocityEf+0x134>
 800333a:	4b10      	ldr	r3, [pc, #64]	; (800337c <_ZN9LineTrace15radius2VelocityEf+0x170>)
 800333c:	60fb      	str	r3, [r7, #12]
 800333e:	e006      	b.n	800334e <_ZN9LineTrace15radius2VelocityEf+0x142>
		else velocity = max_velocity2_;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003346:	60fb      	str	r3, [r7, #12]
 8003348:	e001      	b.n	800334e <_ZN9LineTrace15radius2VelocityEf+0x142>
	}
	else velocity = 1.3;
 800334a:	4b0e      	ldr	r3, [pc, #56]	; (8003384 <_ZN9LineTrace15radius2VelocityEf+0x178>)
 800334c:	60fb      	str	r3, [r7, #12]

	return velocity;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	ee07 3a90 	vmov	s15, r3
}
 8003354:	eeb0 0a67 	vmov.f32	s0, s15
 8003358:	3714      	adds	r7, #20
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop
 8003364:	43c80000 	.word	0x43c80000
 8003368:	43fa0000 	.word	0x43fa0000
 800336c:	44228000 	.word	0x44228000
 8003370:	44bb8000 	.word	0x44bb8000
 8003374:	40200000 	.word	0x40200000
 8003378:	44fa0000 	.word	0x44fa0000
 800337c:	40400000 	.word	0x40400000
 8003380:	3fd9999a 	.word	0x3fd9999a
 8003384:	3fa66666 	.word	0x3fa66666

08003388 <_ZN9LineTrace20decelerateProcessingEfPKf>:

	return a * exp(b * radius) + c * exp(d * radius);
}

void LineTrace::decelerateProcessing(const float am, const float *p_distance)
{
 8003388:	b5b0      	push	{r4, r5, r7, lr}
 800338a:	b088      	sub	sp, #32
 800338c:	af00      	add	r7, sp, #0
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	ed87 0a02 	vstr	s0, [r7, #8]
 8003394:	6079      	str	r1, [r7, #4]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 8003396:	f241 736f 	movw	r3, #5999	; 0x176f
 800339a:	83fb      	strh	r3, [r7, #30]
 800339c:	8bfb      	ldrh	r3, [r7, #30]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	f000 808d 	beq.w	80034be <_ZN9LineTrace20decelerateProcessingEfPKf+0x136>
		float v_diff = velocity_table_[i-1] - velocity_table_[i];
 80033a4:	8bfb      	ldrh	r3, [r7, #30]
 80033a6:	3b01      	subs	r3, #1
 80033a8:	68fa      	ldr	r2, [r7, #12]
 80033aa:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80033ae:	3304      	adds	r3, #4
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	4413      	add	r3, r2
 80033b4:	ed93 7a00 	vldr	s14, [r3]
 80033b8:	8bfb      	ldrh	r3, [r7, #30]
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80033c0:	3304      	adds	r3, #4
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	4413      	add	r3, r2
 80033c6:	edd3 7a00 	vldr	s15, [r3]
 80033ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033ce:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 80033d2:	edd7 7a06 	vldr	s15, [r7, #24]
 80033d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80033da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033de:	dd6a      	ble.n	80034b6 <_ZN9LineTrace20decelerateProcessingEfPKf+0x12e>
			float t = p_distance[i]*1e-3 / v_diff;
 80033e0:	8bfb      	ldrh	r3, [r7, #30]
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	4413      	add	r3, r2
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4618      	mov	r0, r3
 80033ec:	f7fd f8c4 	bl	8000578 <__aeabi_f2d>
 80033f0:	a335      	add	r3, pc, #212	; (adr r3, 80034c8 <_ZN9LineTrace20decelerateProcessingEfPKf+0x140>)
 80033f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033f6:	f7fd f917 	bl	8000628 <__aeabi_dmul>
 80033fa:	4603      	mov	r3, r0
 80033fc:	460c      	mov	r4, r1
 80033fe:	4625      	mov	r5, r4
 8003400:	461c      	mov	r4, r3
 8003402:	69b8      	ldr	r0, [r7, #24]
 8003404:	f7fd f8b8 	bl	8000578 <__aeabi_f2d>
 8003408:	4602      	mov	r2, r0
 800340a:	460b      	mov	r3, r1
 800340c:	4620      	mov	r0, r4
 800340e:	4629      	mov	r1, r5
 8003410:	f7fd fa34 	bl	800087c <__aeabi_ddiv>
 8003414:	4603      	mov	r3, r0
 8003416:	460c      	mov	r4, r1
 8003418:	4618      	mov	r0, r3
 800341a:	4621      	mov	r1, r4
 800341c:	f7fd fbfc 	bl	8000c18 <__aeabi_d2f>
 8003420:	4603      	mov	r3, r0
 8003422:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 8003424:	edd7 6a06 	vldr	s13, [r7, #24]
 8003428:	ed97 7a05 	vldr	s14, [r7, #20]
 800342c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003430:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 8003434:	ed97 7a04 	vldr	s14, [r7, #16]
 8003438:	edd7 7a02 	vldr	s15, [r7, #8]
 800343c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003444:	dd37      	ble.n	80034b6 <_ZN9LineTrace20decelerateProcessingEfPKf+0x12e>
				velocity_table_[i-1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 8003446:	8bfb      	ldrh	r3, [r7, #30]
 8003448:	68fa      	ldr	r2, [r7, #12]
 800344a:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 800344e:	3304      	adds	r3, #4
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	4413      	add	r3, r2
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4618      	mov	r0, r3
 8003458:	f7fd f88e 	bl	8000578 <__aeabi_f2d>
 800345c:	4604      	mov	r4, r0
 800345e:	460d      	mov	r5, r1
 8003460:	8bfb      	ldrh	r3, [r7, #30]
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	4413      	add	r3, r2
 8003468:	ed93 7a00 	vldr	s14, [r3]
 800346c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003470:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003474:	ee17 0a90 	vmov	r0, s15
 8003478:	f7fd f87e 	bl	8000578 <__aeabi_f2d>
 800347c:	a312      	add	r3, pc, #72	; (adr r3, 80034c8 <_ZN9LineTrace20decelerateProcessingEfPKf+0x140>)
 800347e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003482:	f7fd f8d1 	bl	8000628 <__aeabi_dmul>
 8003486:	4602      	mov	r2, r0
 8003488:	460b      	mov	r3, r1
 800348a:	4620      	mov	r0, r4
 800348c:	4629      	mov	r1, r5
 800348e:	f7fc ff15 	bl	80002bc <__adddf3>
 8003492:	4603      	mov	r3, r0
 8003494:	460c      	mov	r4, r1
 8003496:	4619      	mov	r1, r3
 8003498:	4622      	mov	r2, r4
 800349a:	8bfb      	ldrh	r3, [r7, #30]
 800349c:	1e5c      	subs	r4, r3, #1
 800349e:	4608      	mov	r0, r1
 80034a0:	4611      	mov	r1, r2
 80034a2:	f7fd fbb9 	bl	8000c18 <__aeabi_d2f>
 80034a6:	4601      	mov	r1, r0
 80034a8:	68fa      	ldr	r2, [r7, #12]
 80034aa:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 80034ae:	3304      	adds	r3, #4
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	4413      	add	r3, r2
 80034b4:	6019      	str	r1, [r3, #0]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 80034b6:	8bfb      	ldrh	r3, [r7, #30]
 80034b8:	3b01      	subs	r3, #1
 80034ba:	83fb      	strh	r3, [r7, #30]
 80034bc:	e76e      	b.n	800339c <_ZN9LineTrace20decelerateProcessingEfPKf+0x14>
			}

		}
	}

}
 80034be:	bf00      	nop
 80034c0:	3720      	adds	r7, #32
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bdb0      	pop	{r4, r5, r7, pc}
 80034c6:	bf00      	nop
 80034c8:	d2f1a9fc 	.word	0xd2f1a9fc
 80034cc:	3f50624d 	.word	0x3f50624d

080034d0 <_ZN9LineTrace20accelerateProcessingEfPKf>:

void LineTrace::accelerateProcessing(const float am, const float *p_distance)
{
 80034d0:	b5b0      	push	{r4, r5, r7, lr}
 80034d2:	b088      	sub	sp, #32
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	ed87 0a02 	vstr	s0, [r7, #8]
 80034dc:	6079      	str	r1, [r7, #4]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 80034de:	2300      	movs	r3, #0
 80034e0:	83fb      	strh	r3, [r7, #30]
 80034e2:	8bfb      	ldrh	r3, [r7, #30]
 80034e4:	f241 726f 	movw	r2, #5999	; 0x176f
 80034e8:	4293      	cmp	r3, r2
 80034ea:	f200 808d 	bhi.w	8003608 <_ZN9LineTrace20accelerateProcessingEfPKf+0x138>
		float v_diff = velocity_table_[i+1] - velocity_table_[i];
 80034ee:	8bfb      	ldrh	r3, [r7, #30]
 80034f0:	3301      	adds	r3, #1
 80034f2:	68fa      	ldr	r2, [r7, #12]
 80034f4:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80034f8:	3304      	adds	r3, #4
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	4413      	add	r3, r2
 80034fe:	ed93 7a00 	vldr	s14, [r3]
 8003502:	8bfb      	ldrh	r3, [r7, #30]
 8003504:	68fa      	ldr	r2, [r7, #12]
 8003506:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 800350a:	3304      	adds	r3, #4
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	4413      	add	r3, r2
 8003510:	edd3 7a00 	vldr	s15, [r3]
 8003514:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003518:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 800351c:	edd7 7a06 	vldr	s15, [r7, #24]
 8003520:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003528:	dd6a      	ble.n	8003600 <_ZN9LineTrace20accelerateProcessingEfPKf+0x130>
			float t = p_distance[i]*1e-3 / v_diff;
 800352a:	8bfb      	ldrh	r3, [r7, #30]
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	4413      	add	r3, r2
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4618      	mov	r0, r3
 8003536:	f7fd f81f 	bl	8000578 <__aeabi_f2d>
 800353a:	a335      	add	r3, pc, #212	; (adr r3, 8003610 <_ZN9LineTrace20accelerateProcessingEfPKf+0x140>)
 800353c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003540:	f7fd f872 	bl	8000628 <__aeabi_dmul>
 8003544:	4603      	mov	r3, r0
 8003546:	460c      	mov	r4, r1
 8003548:	4625      	mov	r5, r4
 800354a:	461c      	mov	r4, r3
 800354c:	69b8      	ldr	r0, [r7, #24]
 800354e:	f7fd f813 	bl	8000578 <__aeabi_f2d>
 8003552:	4602      	mov	r2, r0
 8003554:	460b      	mov	r3, r1
 8003556:	4620      	mov	r0, r4
 8003558:	4629      	mov	r1, r5
 800355a:	f7fd f98f 	bl	800087c <__aeabi_ddiv>
 800355e:	4603      	mov	r3, r0
 8003560:	460c      	mov	r4, r1
 8003562:	4618      	mov	r0, r3
 8003564:	4621      	mov	r1, r4
 8003566:	f7fd fb57 	bl	8000c18 <__aeabi_d2f>
 800356a:	4603      	mov	r3, r0
 800356c:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 800356e:	edd7 6a06 	vldr	s13, [r7, #24]
 8003572:	ed97 7a05 	vldr	s14, [r7, #20]
 8003576:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800357a:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 800357e:	ed97 7a04 	vldr	s14, [r7, #16]
 8003582:	edd7 7a02 	vldr	s15, [r7, #8]
 8003586:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800358a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800358e:	dd37      	ble.n	8003600 <_ZN9LineTrace20accelerateProcessingEfPKf+0x130>
				velocity_table_[i+1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 8003590:	8bfb      	ldrh	r3, [r7, #30]
 8003592:	68fa      	ldr	r2, [r7, #12]
 8003594:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003598:	3304      	adds	r3, #4
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	4413      	add	r3, r2
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7fc ffe9 	bl	8000578 <__aeabi_f2d>
 80035a6:	4604      	mov	r4, r0
 80035a8:	460d      	mov	r5, r1
 80035aa:	8bfb      	ldrh	r3, [r7, #30]
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	4413      	add	r3, r2
 80035b2:	ed93 7a00 	vldr	s14, [r3]
 80035b6:	edd7 7a02 	vldr	s15, [r7, #8]
 80035ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035be:	ee17 0a90 	vmov	r0, s15
 80035c2:	f7fc ffd9 	bl	8000578 <__aeabi_f2d>
 80035c6:	a312      	add	r3, pc, #72	; (adr r3, 8003610 <_ZN9LineTrace20accelerateProcessingEfPKf+0x140>)
 80035c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035cc:	f7fd f82c 	bl	8000628 <__aeabi_dmul>
 80035d0:	4602      	mov	r2, r0
 80035d2:	460b      	mov	r3, r1
 80035d4:	4620      	mov	r0, r4
 80035d6:	4629      	mov	r1, r5
 80035d8:	f7fc fe70 	bl	80002bc <__adddf3>
 80035dc:	4603      	mov	r3, r0
 80035de:	460c      	mov	r4, r1
 80035e0:	4619      	mov	r1, r3
 80035e2:	4622      	mov	r2, r4
 80035e4:	8bfb      	ldrh	r3, [r7, #30]
 80035e6:	1c5c      	adds	r4, r3, #1
 80035e8:	4608      	mov	r0, r1
 80035ea:	4611      	mov	r1, r2
 80035ec:	f7fd fb14 	bl	8000c18 <__aeabi_d2f>
 80035f0:	4601      	mov	r1, r0
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 80035f8:	3304      	adds	r3, #4
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	4413      	add	r3, r2
 80035fe:	6019      	str	r1, [r3, #0]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 8003600:	8bfb      	ldrh	r3, [r7, #30]
 8003602:	3301      	adds	r3, #1
 8003604:	83fb      	strh	r3, [r7, #30]
 8003606:	e76c      	b.n	80034e2 <_ZN9LineTrace20accelerateProcessingEfPKf+0x12>
			}

		}
	}

}
 8003608:	bf00      	nop
 800360a:	3720      	adds	r7, #32
 800360c:	46bd      	mov	sp, r7
 800360e:	bdb0      	pop	{r4, r5, r7, pc}
 8003610:	d2f1a9fc 	.word	0xd2f1a9fc
 8003614:	3f50624d 	.word	0x3f50624d

08003618 <_ZN9LineTrace17startVelocityPlayEv>:

void LineTrace::startVelocityPlay()
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
	encoder_->clearTotalDistance();
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	695b      	ldr	r3, [r3, #20]
 8003624:	4618      	mov	r0, r3
 8003626:	f7fe f83f 	bl	80016a8 <_ZN7Encoder18clearTotalDistanceEv>
	velocity_play_flag_ = true;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003630:	3350      	adds	r3, #80	; 0x50
 8003632:	2201      	movs	r2, #1
 8003634:	701a      	strb	r2, [r3, #0]
	velocity_table_idx_ = 0;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800363c:	3352      	adds	r3, #82	; 0x52
 800363e:	2200      	movs	r2, #0
 8003640:	801a      	strh	r2, [r3, #0]
	ref_distance_ = 0;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8003648:	330c      	adds	r3, #12
 800364a:	f04f 0200 	mov.w	r2, #0
 800364e:	601a      	str	r2, [r3, #0]
}
 8003650:	bf00      	nop
 8003652:	3708      	adds	r7, #8
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <_ZN9LineTrace16stopVelocityPlayEv>:

void LineTrace::stopVelocityPlay()
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
	velocity_play_flag_ = false;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003666:	3350      	adds	r3, #80	; 0x50
 8003668:	2200      	movs	r2, #0
 800366a:	701a      	strb	r2, [r3, #0]
	velocity_table_idx_ = 0;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003672:	3352      	adds	r3, #82	; 0x52
 8003674:	2200      	movs	r2, #0
 8003676:	801a      	strh	r2, [r3, #0]
	ref_distance_ = 0;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 800367e:	330c      	adds	r3, #12
 8003680:	f04f 0200 	mov.w	r2, #0
 8003684:	601a      	str	r2, [r3, #0]
}
 8003686:	bf00      	nop
 8003688:	370c      	adds	r7, #12
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr

08003692 <_ZN9LineTrace20updateTargetVelocityEv>:

void LineTrace::updateTargetVelocity()
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b082      	sub	sp, #8
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
	if(velocity_play_flag_ == true){
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80036a0:	3350      	adds	r3, #80	; 0x50
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d05e      	beq.n	8003766 <_ZN9LineTrace20updateTargetVelocityEv+0xd4>
		while(encoder_->getTotalDistance() * DISTANCE_CORRECTION_CONST >= ref_distance_){
			ref_distance_ += ref_delta_distances_[velocity_table_idx_];
			velocity_table_idx_++;
		}
		*/
		if(encoder_->getTotalDistance() * DISTANCE_CORRECTION_CONST >= ref_distance_){
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	695b      	ldr	r3, [r3, #20]
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7fd ffcf 	bl	8001650 <_ZN7Encoder16getTotalDistanceEv>
 80036b2:	eeb0 7a40 	vmov.f32	s14, s0
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80036bc:	330c      	adds	r3, #12
 80036be:	edd3 7a00 	vldr	s15, [r3]
 80036c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036ca:	bfac      	ite	ge
 80036cc:	2301      	movge	r3, #1
 80036ce:	2300      	movlt	r3, #0
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d025      	beq.n	8003722 <_ZN9LineTrace20updateTargetVelocityEv+0x90>
			ref_distance_ += ref_delta_distances_[velocity_table_idx_];
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80036dc:	330c      	adds	r3, #12
 80036de:	ed93 7a00 	vldr	s14, [r3]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80036e8:	3352      	adds	r3, #82	; 0x52
 80036ea:	881b      	ldrh	r3, [r3, #0]
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	3332      	adds	r3, #50	; 0x32
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	4413      	add	r3, r2
 80036f4:	3304      	adds	r3, #4
 80036f6:	edd3 7a00 	vldr	s15, [r3]
 80036fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8003704:	330c      	adds	r3, #12
 8003706:	edc3 7a00 	vstr	s15, [r3]
			velocity_table_idx_++;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003710:	3352      	adds	r3, #82	; 0x52
 8003712:	881b      	ldrh	r3, [r3, #0]
 8003714:	3301      	adds	r3, #1
 8003716:	b29a      	uxth	r2, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800371e:	3352      	adds	r3, #82	; 0x52
 8003720:	801a      	strh	r2, [r3, #0]
		}

		if(velocity_table_idx_ >= LOG_DATA_SIZE_DIS) velocity_table_idx_ = LOG_DATA_SIZE_DIS - 1;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003728:	3352      	adds	r3, #82	; 0x52
 800372a:	881b      	ldrh	r3, [r3, #0]
 800372c:	f241 726f 	movw	r2, #5999	; 0x176f
 8003730:	4293      	cmp	r3, r2
 8003732:	d906      	bls.n	8003742 <_ZN9LineTrace20updateTargetVelocityEv+0xb0>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800373a:	3352      	adds	r3, #82	; 0x52
 800373c:	f241 726f 	movw	r2, #5999	; 0x176f
 8003740:	801a      	strh	r2, [r3, #0]

		setTargetVelocity(velocity_table_[velocity_table_idx_]);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003748:	3352      	adds	r3, #82	; 0x52
 800374a:	881b      	ldrh	r3, [r3, #0]
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003752:	3304      	adds	r3, #4
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	4413      	add	r3, r2
 8003758:	edd3 7a00 	vldr	s15, [r3]
 800375c:	eeb0 0a67 	vmov.f32	s0, s15
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f000 fad0 	bl	8003d06 <_ZN9LineTrace17setTargetVelocityEf>
		mon_vel_idx = velocity_table_idx_;
		mon_tar_vel = velocity_table_[velocity_table_idx_];
		*/

	}
}
 8003766:	bf00      	nop
 8003768:	3708      	adds	r7, #8
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}

0800376e <_ZN9LineTrace16isTargetDistanceEf>:

bool LineTrace::isTargetDistance(float target_distance)
{
 800376e:	b580      	push	{r7, lr}
 8003770:	b084      	sub	sp, #16
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
 8003776:	ed87 0a00 	vstr	s0, [r7]
	bool ret = false;
 800377a:	2300      	movs	r3, #0
 800377c:	73fb      	strb	r3, [r7, #15]
	if(encoder_->getDistance10mm() >= target_distance){
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	695b      	ldr	r3, [r3, #20]
 8003782:	4618      	mov	r0, r3
 8003784:	f7fd ff55 	bl	8001632 <_ZN7Encoder15getDistance10mmEv>
 8003788:	eeb0 7a40 	vmov.f32	s14, s0
 800378c:	edd7 7a00 	vldr	s15, [r7]
 8003790:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003798:	bf94      	ite	ls
 800379a:	2301      	movls	r3, #1
 800379c:	2300      	movhi	r3, #0
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d001      	beq.n	80037a8 <_ZN9LineTrace16isTargetDistanceEf+0x3a>
		ret = true;
 80037a4:	2301      	movs	r3, #1
 80037a6:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 80037a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3710      	adds	r7, #16
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
	...

080037b4 <_ZN9LineTrace11isCrossLineEv>:

bool LineTrace::isCrossLine()
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
	static uint16_t cnt = 0;
	//float sensor_edge_val_l = (line_sensor_->sensor[3] + line_sensor_->sensor[4]) / 2;
	//float sensor_edge_val_r = (line_sensor_->sensor[9] + line_sensor_->sensor[10]) / 2;
	float sensor_edge_val_l = (line_sensor_->sensor[0] + line_sensor_->sensor[1]) / 2;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 80037cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037d0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80037d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80037d8:	edc7 7a03 	vstr	s15, [r7, #12]
	float sensor_edge_val_r = (line_sensor_->sensor[12] + line_sensor_->sensor[13]) / 2;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	ed93 7abc 	vldr	s14, [r3, #752]	; 0x2f0
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 80037ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037f0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80037f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80037f8:	edc7 7a02 	vstr	s15, [r7, #8]
	static bool flag = false;
	static bool white_flag = false;
	mon_ave_l = sensor_edge_val_l;
 80037fc:	4a3d      	ldr	r2, [pc, #244]	; (80038f4 <_ZN9LineTrace11isCrossLineEv+0x140>)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6013      	str	r3, [r2, #0]
	mon_ave_r = sensor_edge_val_r;
 8003802:	4a3d      	ldr	r2, [pc, #244]	; (80038f8 <_ZN9LineTrace11isCrossLineEv+0x144>)
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	6013      	str	r3, [r2, #0]

	//if(white_flag == false){
		if(sensor_edge_val_l < 650 && sensor_edge_val_r < 650 && encoder_->getCrossLineIgnoreDistance() >= 60){
 8003808:	edd7 7a03 	vldr	s15, [r7, #12]
 800380c:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80038fc <_ZN9LineTrace11isCrossLineEv+0x148>
 8003810:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003818:	d518      	bpl.n	800384c <_ZN9LineTrace11isCrossLineEv+0x98>
 800381a:	edd7 7a02 	vldr	s15, [r7, #8]
 800381e:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80038fc <_ZN9LineTrace11isCrossLineEv+0x148>
 8003822:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800382a:	d50f      	bpl.n	800384c <_ZN9LineTrace11isCrossLineEv+0x98>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	695b      	ldr	r3, [r3, #20]
 8003830:	4618      	mov	r0, r3
 8003832:	f7fd ff64 	bl	80016fe <_ZN7Encoder26getCrossLineIgnoreDistanceEv>
 8003836:	eeb0 7a40 	vmov.f32	s14, s0
 800383a:	eddf 7a31 	vldr	s15, [pc, #196]	; 8003900 <_ZN9LineTrace11isCrossLineEv+0x14c>
 800383e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003846:	db01      	blt.n	800384c <_ZN9LineTrace11isCrossLineEv+0x98>
 8003848:	2301      	movs	r3, #1
 800384a:	e000      	b.n	800384e <_ZN9LineTrace11isCrossLineEv+0x9a>
 800384c:	2300      	movs	r3, #0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d006      	beq.n	8003860 <_ZN9LineTrace11isCrossLineEv+0xac>
			cnt++;
 8003852:	4b2c      	ldr	r3, [pc, #176]	; (8003904 <_ZN9LineTrace11isCrossLineEv+0x150>)
 8003854:	881b      	ldrh	r3, [r3, #0]
 8003856:	3301      	adds	r3, #1
 8003858:	b29a      	uxth	r2, r3
 800385a:	4b2a      	ldr	r3, [pc, #168]	; (8003904 <_ZN9LineTrace11isCrossLineEv+0x150>)
 800385c:	801a      	strh	r2, [r3, #0]
 800385e:	e002      	b.n	8003866 <_ZN9LineTrace11isCrossLineEv+0xb2>
		}
		else{
			cnt = 0;
 8003860:	4b28      	ldr	r3, [pc, #160]	; (8003904 <_ZN9LineTrace11isCrossLineEv+0x150>)
 8003862:	2200      	movs	r2, #0
 8003864:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 3){
 8003866:	4b27      	ldr	r3, [pc, #156]	; (8003904 <_ZN9LineTrace11isCrossLineEv+0x150>)
 8003868:	881b      	ldrh	r3, [r3, #0]
 800386a:	2b02      	cmp	r3, #2
 800386c:	d93b      	bls.n	80038e6 <_ZN9LineTrace11isCrossLineEv+0x132>
			flag = true;
 800386e:	4b26      	ldr	r3, [pc, #152]	; (8003908 <_ZN9LineTrace11isCrossLineEv+0x154>)
 8003870:	2201      	movs	r2, #1
 8003872:	701a      	strb	r2, [r3, #0]
			white_flag = true;
 8003874:	4b25      	ldr	r3, [pc, #148]	; (800390c <_ZN9LineTrace11isCrossLineEv+0x158>)
 8003876:	2201      	movs	r2, #1
 8003878:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 800387a:	4b22      	ldr	r3, [pc, #136]	; (8003904 <_ZN9LineTrace11isCrossLineEv+0x150>)
 800387c:	2200      	movs	r2, #0
 800387e:	801a      	strh	r2, [r3, #0]

			side_sensor_->enableIgnore();
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	691b      	ldr	r3, [r3, #16]
 8003884:	4618      	mov	r0, r3
 8003886:	f001 ff33 	bl	80056f0 <_ZN10SideSensor12enableIgnoreEv>
			encoder_->clearSideLineIgnoreDistance();
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	695b      	ldr	r3, [r3, #20]
 800388e:	4618      	mov	r0, r3
 8003890:	f7fd ff27 	bl	80016e2 <_ZN7Encoder27clearSideLineIgnoreDistanceEv>
			encoder_->clearCrossLineIgnoreDistance();
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	695b      	ldr	r3, [r3, #20]
 8003898:	4618      	mov	r0, r3
 800389a:	f7fd ff3f 	bl	800171c <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>

			stable_cnt_reset_flag_ = true; //Because the conditions do not differ between when you tremble and when you do not tremble
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80038a4:	3325      	adds	r3, #37	; 0x25
 80038a6:	2201      	movs	r2, #1
 80038a8:	701a      	strb	r2, [r3, #0]
			//stable_flag_force_ = true;
			if(mode_selector_ == FIRST_RUNNING){
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80038b0:	3354      	adds	r3, #84	; 0x54
 80038b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d109      	bne.n	80038ce <_ZN9LineTrace11isCrossLineEv+0x11a>
				store_check_cnt_ = 0;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80038c0:	333a      	adds	r3, #58	; 0x3a
 80038c2:	2200      	movs	r2, #0
 80038c4:	801a      	strh	r2, [r3, #0]
				storeCrossLineDistance();
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f7ff fa92 	bl	8002df0 <_ZN9LineTrace22storeCrossLineDistanceEv>
 80038cc:	e00b      	b.n	80038e6 <_ZN9LineTrace11isCrossLineEv+0x132>
			}
			else{
				store_check_cnt_ = 0;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80038d4:	333a      	adds	r3, #58	; 0x3a
 80038d6:	2200      	movs	r2, #0
 80038d8:	801a      	strh	r2, [r3, #0]
				correctionTotalDistanceFromCrossLine();
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f7ff fbbe 	bl	800305c <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv>
				storeCrossLineDistance2(); //for correction check
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f7ff fabb 	bl	8002e5c <_ZN9LineTrace23storeCrossLineDistance2Ev>
		}

	}
	*/

	return flag;
 80038e6:	4b08      	ldr	r3, [pc, #32]	; (8003908 <_ZN9LineTrace11isCrossLineEv+0x154>)
 80038e8:	781b      	ldrb	r3, [r3, #0]
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3710      	adds	r7, #16
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	20000208 	.word	0x20000208
 80038f8:	2000020c 	.word	0x2000020c
 80038fc:	44228000 	.word	0x44228000
 8003900:	42700000 	.word	0x42700000
 8003904:	20000218 	.word	0x20000218
 8003908:	2000021a 	.word	0x2000021a
 800390c:	2000021b 	.word	0x2000021b

08003910 <_ZN9LineTrace8isStableEv>:

bool LineTrace::isStable()
{
 8003910:	b590      	push	{r4, r7, lr}
 8003912:	b087      	sub	sp, #28
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8003918:	2300      	movs	r3, #0
 800391a:	75fb      	strb	r3, [r7, #23]
	static uint16_t stable_cnt = 0;
	float temp_distance = encoder_->getDistance10mm();
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	695b      	ldr	r3, [r3, #20]
 8003920:	4618      	mov	r0, r3
 8003922:	f7fd fe86 	bl	8001632 <_ZN7Encoder15getDistance10mmEv>
 8003926:	ed87 0a02 	vstr	s0, [r7, #8]
	float temp_theta = odometry_->getTheta();;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	699b      	ldr	r3, [r3, #24]
 800392e:	4618      	mov	r0, r3
 8003930:	f001 fc21 	bl	8005176 <_ZN8Odometry8getThetaEv>
 8003934:	ec54 3b10 	vmov	r3, r4, d0
 8003938:	4618      	mov	r0, r3
 800393a:	4621      	mov	r1, r4
 800393c:	f7fd f96c 	bl	8000c18 <__aeabi_d2f>
 8003940:	4603      	mov	r3, r0
 8003942:	613b      	str	r3, [r7, #16]

	if(temp_theta == 0) temp_theta = 0.00001;
 8003944:	edd7 7a04 	vldr	s15, [r7, #16]
 8003948:	eef5 7a40 	vcmp.f32	s15, #0.0
 800394c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003950:	d101      	bne.n	8003956 <_ZN9LineTrace8isStableEv+0x46>
 8003952:	4b23      	ldr	r3, [pc, #140]	; (80039e0 <_ZN9LineTrace8isStableEv+0xd0>)
 8003954:	613b      	str	r3, [r7, #16]
	float radius = abs(temp_distance / temp_theta);
 8003956:	ed97 7a02 	vldr	s14, [r7, #8]
 800395a:	edd7 7a04 	vldr	s15, [r7, #16]
 800395e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003962:	eeb0 0a66 	vmov.f32	s0, s13
 8003966:	f7fe ffb7 	bl	80028d8 <_ZSt3absf>
 800396a:	ed87 0a03 	vstr	s0, [r7, #12]
	if(radius >= 5000) radius = 5000;
 800396e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003972:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80039e4 <_ZN9LineTrace8isStableEv+0xd4>
 8003976:	eef4 7ac7 	vcmpe.f32	s15, s14
 800397a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800397e:	db01      	blt.n	8003984 <_ZN9LineTrace8isStableEv+0x74>
 8003980:	4b19      	ldr	r3, [pc, #100]	; (80039e8 <_ZN9LineTrace8isStableEv+0xd8>)
 8003982:	60fb      	str	r3, [r7, #12]

	if(stable_cnt_reset_flag_ == true){
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800398a:	3325      	adds	r3, #37	; 0x25
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d008      	beq.n	80039a4 <_ZN9LineTrace8isStableEv+0x94>
		stable_cnt = 0;
 8003992:	4b16      	ldr	r3, [pc, #88]	; (80039ec <_ZN9LineTrace8isStableEv+0xdc>)
 8003994:	2200      	movs	r2, #0
 8003996:	801a      	strh	r2, [r3, #0]
		stable_cnt_reset_flag_ = false;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800399e:	3325      	adds	r3, #37	; 0x25
 80039a0:	2200      	movs	r2, #0
 80039a2:	701a      	strb	r2, [r3, #0]
	}

	if(radius >= 2000){
 80039a4:	edd7 7a03 	vldr	s15, [r7, #12]
 80039a8:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80039f0 <_ZN9LineTrace8isStableEv+0xe0>
 80039ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039b4:	db06      	blt.n	80039c4 <_ZN9LineTrace8isStableEv+0xb4>
		stable_cnt++;
 80039b6:	4b0d      	ldr	r3, [pc, #52]	; (80039ec <_ZN9LineTrace8isStableEv+0xdc>)
 80039b8:	881b      	ldrh	r3, [r3, #0]
 80039ba:	3301      	adds	r3, #1
 80039bc:	b29a      	uxth	r2, r3
 80039be:	4b0b      	ldr	r3, [pc, #44]	; (80039ec <_ZN9LineTrace8isStableEv+0xdc>)
 80039c0:	801a      	strh	r2, [r3, #0]
 80039c2:	e002      	b.n	80039ca <_ZN9LineTrace8isStableEv+0xba>
	}
	else{
		stable_cnt = 0;
 80039c4:	4b09      	ldr	r3, [pc, #36]	; (80039ec <_ZN9LineTrace8isStableEv+0xdc>)
 80039c6:	2200      	movs	r2, #0
 80039c8:	801a      	strh	r2, [r3, #0]
	}

	if(stable_cnt >= 25){ //250mm
 80039ca:	4b08      	ldr	r3, [pc, #32]	; (80039ec <_ZN9LineTrace8isStableEv+0xdc>)
 80039cc:	881b      	ldrh	r3, [r3, #0]
 80039ce:	2b18      	cmp	r3, #24
 80039d0:	d901      	bls.n	80039d6 <_ZN9LineTrace8isStableEv+0xc6>
		ret = true;
 80039d2:	2301      	movs	r3, #1
 80039d4:	75fb      	strb	r3, [r7, #23]
	}

	return ret;
 80039d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80039d8:	4618      	mov	r0, r3
 80039da:	371c      	adds	r7, #28
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd90      	pop	{r4, r7, pc}
 80039e0:	3727c5ac 	.word	0x3727c5ac
 80039e4:	459c4000 	.word	0x459c4000
 80039e8:	459c4000 	.word	0x459c4000
 80039ec:	2000021c 	.word	0x2000021c
 80039f0:	44fa0000 	.word	0x44fa0000

080039f4 <_ZN9LineTrace4initEv>:
// -------public---------- //
// ---------------------------------------------------------------------------------------------------//
// ------------------------------------ Initialize----------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::init()
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b092      	sub	sp, #72	; 0x48
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
	float temp_kp, temp_ki, temp_kd;
	sd_read_array_float("PARAMS", "KP.TXT", 1, &temp_kp);
 80039fc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003a00:	2201      	movs	r2, #1
 8003a02:	4963      	ldr	r1, [pc, #396]	; (8003b90 <_ZN9LineTrace4initEv+0x19c>)
 8003a04:	4863      	ldr	r0, [pc, #396]	; (8003b94 <_ZN9LineTrace4initEv+0x1a0>)
 8003a06:	f7fd ff8f 	bl	8001928 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KI.TXT", 1, &temp_ki);
 8003a0a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003a0e:	2201      	movs	r2, #1
 8003a10:	4961      	ldr	r1, [pc, #388]	; (8003b98 <_ZN9LineTrace4initEv+0x1a4>)
 8003a12:	4860      	ldr	r0, [pc, #384]	; (8003b94 <_ZN9LineTrace4initEv+0x1a0>)
 8003a14:	f7fd ff88 	bl	8001928 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KD.TXT", 1, &temp_kd);
 8003a18:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	495f      	ldr	r1, [pc, #380]	; (8003b9c <_ZN9LineTrace4initEv+0x1a8>)
 8003a20:	485c      	ldr	r0, [pc, #368]	; (8003b94 <_ZN9LineTrace4initEv+0x1a0>)
 8003a22:	f7fd ff81 	bl	8001928 <sd_read_array_float>
	setGain(temp_kp, temp_ki, temp_kd);
 8003a26:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003a2a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8003a2e:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8003a32:	eeb0 1a66 	vmov.f32	s2, s13
 8003a36:	eef0 0a47 	vmov.f32	s1, s14
 8003a3a:	eeb0 0a67 	vmov.f32	s0, s15
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f000 f8c6 	bl	8003bd0 <_ZN9LineTrace7setGainEfff>

	float temp_kp_slow, temp_ki_slow, temp_kd_slow;
	sd_read_array_float("PARAMS", "KP_SLOW.TXT", 1, &temp_kp_slow);
 8003a44:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003a48:	2201      	movs	r2, #1
 8003a4a:	4955      	ldr	r1, [pc, #340]	; (8003ba0 <_ZN9LineTrace4initEv+0x1ac>)
 8003a4c:	4851      	ldr	r0, [pc, #324]	; (8003b94 <_ZN9LineTrace4initEv+0x1a0>)
 8003a4e:	f7fd ff6b 	bl	8001928 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KI_SLOW.TXT", 1, &temp_ki_slow);
 8003a52:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003a56:	2201      	movs	r2, #1
 8003a58:	4952      	ldr	r1, [pc, #328]	; (8003ba4 <_ZN9LineTrace4initEv+0x1b0>)
 8003a5a:	484e      	ldr	r0, [pc, #312]	; (8003b94 <_ZN9LineTrace4initEv+0x1a0>)
 8003a5c:	f7fd ff64 	bl	8001928 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KD_SLOW.TXT", 1, &temp_kd_slow);
 8003a60:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003a64:	2201      	movs	r2, #1
 8003a66:	4950      	ldr	r1, [pc, #320]	; (8003ba8 <_ZN9LineTrace4initEv+0x1b4>)
 8003a68:	484a      	ldr	r0, [pc, #296]	; (8003b94 <_ZN9LineTrace4initEv+0x1a0>)
 8003a6a:	f7fd ff5d 	bl	8001928 <sd_read_array_float>
	setGainSlow(temp_kp_slow, temp_ki_slow, temp_kd_slow);
 8003a6e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003a72:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003a76:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8003a7a:	eeb0 1a66 	vmov.f32	s2, s13
 8003a7e:	eef0 0a47 	vmov.f32	s1, s14
 8003a82:	eeb0 0a67 	vmov.f32	s0, s15
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 f8e8 	bl	8003c5c <_ZN9LineTrace11setGainSlowEfff>

	float temp_velocity, temp_max_velocity, temp_max_velocity2, temp_min_velocity, temp_min_velocity2;
	sd_read_array_float("PARAMS", "TARVEL1.TXT", 1, &temp_velocity);
 8003a8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a90:	2201      	movs	r2, #1
 8003a92:	4946      	ldr	r1, [pc, #280]	; (8003bac <_ZN9LineTrace4initEv+0x1b8>)
 8003a94:	483f      	ldr	r0, [pc, #252]	; (8003b94 <_ZN9LineTrace4initEv+0x1a0>)
 8003a96:	f7fd ff47 	bl	8001928 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL2.TXT", 1, &temp_max_velocity);
 8003a9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	4943      	ldr	r1, [pc, #268]	; (8003bb0 <_ZN9LineTrace4initEv+0x1bc>)
 8003aa2:	483c      	ldr	r0, [pc, #240]	; (8003b94 <_ZN9LineTrace4initEv+0x1a0>)
 8003aa4:	f7fd ff40 	bl	8001928 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL3.TXT", 1, &temp_max_velocity2);
 8003aa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003aac:	2201      	movs	r2, #1
 8003aae:	4941      	ldr	r1, [pc, #260]	; (8003bb4 <_ZN9LineTrace4initEv+0x1c0>)
 8003ab0:	4838      	ldr	r0, [pc, #224]	; (8003b94 <_ZN9LineTrace4initEv+0x1a0>)
 8003ab2:	f7fd ff39 	bl	8001928 <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL.TXT", 1, &temp_min_velocity);
 8003ab6:	f107 0320 	add.w	r3, r7, #32
 8003aba:	2201      	movs	r2, #1
 8003abc:	493e      	ldr	r1, [pc, #248]	; (8003bb8 <_ZN9LineTrace4initEv+0x1c4>)
 8003abe:	4835      	ldr	r0, [pc, #212]	; (8003b94 <_ZN9LineTrace4initEv+0x1a0>)
 8003ac0:	f7fd ff32 	bl	8001928 <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL2.TXT", 1, &temp_min_velocity2);
 8003ac4:	f107 031c 	add.w	r3, r7, #28
 8003ac8:	2201      	movs	r2, #1
 8003aca:	493c      	ldr	r1, [pc, #240]	; (8003bbc <_ZN9LineTrace4initEv+0x1c8>)
 8003acc:	4831      	ldr	r0, [pc, #196]	; (8003b94 <_ZN9LineTrace4initEv+0x1a0>)
 8003ace:	f7fd ff2b 	bl	8001928 <sd_read_array_float>
	setTargetVelocity(temp_velocity);
 8003ad2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003ad6:	eeb0 0a67 	vmov.f32	s0, s15
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f000 f913 	bl	8003d06 <_ZN9LineTrace17setTargetVelocityEf>
	setMaxVelocity(temp_max_velocity);
 8003ae0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003ae4:	eeb0 0a67 	vmov.f32	s0, s15
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f000 f91c 	bl	8003d26 <_ZN9LineTrace14setMaxVelocityEf>
	setMaxVelocity2(temp_max_velocity2);
 8003aee:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003af2:	eeb0 0a67 	vmov.f32	s0, s15
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f000 f925 	bl	8003d46 <_ZN9LineTrace15setMaxVelocity2Ef>
	setMinVelocity(temp_min_velocity);
 8003afc:	edd7 7a08 	vldr	s15, [r7, #32]
 8003b00:	eeb0 0a67 	vmov.f32	s0, s15
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f000 f92e 	bl	8003d66 <_ZN9LineTrace14setMinVelocityEf>
	setMinVelocity2(temp_min_velocity2);
 8003b0a:	edd7 7a07 	vldr	s15, [r7, #28]
 8003b0e:	eeb0 0a67 	vmov.f32	s0, s15
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f000 f937 	bl	8003d86 <_ZN9LineTrace15setMinVelocity2Ef>

	float temp_acc, temp_dec;
	sd_read_array_float("PARAMS", "ACC.TXT", 1, &temp_acc);
 8003b18:	f107 0318 	add.w	r3, r7, #24
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	4928      	ldr	r1, [pc, #160]	; (8003bc0 <_ZN9LineTrace4initEv+0x1cc>)
 8003b20:	481c      	ldr	r0, [pc, #112]	; (8003b94 <_ZN9LineTrace4initEv+0x1a0>)
 8003b22:	f7fd ff01 	bl	8001928 <sd_read_array_float>
	sd_read_array_float("PARAMS", "DEC.TXT", 1, &temp_dec);
 8003b26:	f107 0314 	add.w	r3, r7, #20
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	4925      	ldr	r1, [pc, #148]	; (8003bc4 <_ZN9LineTrace4initEv+0x1d0>)
 8003b2e:	4819      	ldr	r0, [pc, #100]	; (8003b94 <_ZN9LineTrace4initEv+0x1a0>)
 8003b30:	f7fd fefa 	bl	8001928 <sd_read_array_float>
	setMaxAccDec(temp_acc, temp_dec);
 8003b34:	edd7 7a06 	vldr	s15, [r7, #24]
 8003b38:	ed97 7a05 	vldr	s14, [r7, #20]
 8003b3c:	eef0 0a47 	vmov.f32	s1, s14
 8003b40:	eeb0 0a67 	vmov.f32	s0, s15
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f000 f97e 	bl	8003e46 <_ZN9LineTrace12setMaxAccDecEff>

	float temp_acc2 = 0, temp_dec2 = 0;
 8003b4a:	f04f 0300 	mov.w	r3, #0
 8003b4e:	613b      	str	r3, [r7, #16]
 8003b50:	f04f 0300 	mov.w	r3, #0
 8003b54:	60fb      	str	r3, [r7, #12]
	sd_read_array_float("PARAMS", "ACC2.TXT", 1, &temp_acc2);
 8003b56:	f107 0310 	add.w	r3, r7, #16
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	491a      	ldr	r1, [pc, #104]	; (8003bc8 <_ZN9LineTrace4initEv+0x1d4>)
 8003b5e:	480d      	ldr	r0, [pc, #52]	; (8003b94 <_ZN9LineTrace4initEv+0x1a0>)
 8003b60:	f7fd fee2 	bl	8001928 <sd_read_array_float>
	sd_read_array_float("PARAMS", "DEC2.TXT", 1, &temp_dec2);
 8003b64:	f107 030c 	add.w	r3, r7, #12
 8003b68:	2201      	movs	r2, #1
 8003b6a:	4918      	ldr	r1, [pc, #96]	; (8003bcc <_ZN9LineTrace4initEv+0x1d8>)
 8003b6c:	4809      	ldr	r0, [pc, #36]	; (8003b94 <_ZN9LineTrace4initEv+0x1a0>)
 8003b6e:	f7fd fedb 	bl	8001928 <sd_read_array_float>
	setMaxAccDec2(temp_acc2, temp_dec2);
 8003b72:	edd7 7a04 	vldr	s15, [r7, #16]
 8003b76:	ed97 7a03 	vldr	s14, [r7, #12]
 8003b7a:	eef0 0a47 	vmov.f32	s1, s14
 8003b7e:	eeb0 0a67 	vmov.f32	s0, s15
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f000 f979 	bl	8003e7a <_ZN9LineTrace13setMaxAccDec2Eff>
}
 8003b88:	bf00      	nop
 8003b8a:	3748      	adds	r7, #72	; 0x48
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	08018dd8 	.word	0x08018dd8
 8003b94:	08018de0 	.word	0x08018de0
 8003b98:	08018de8 	.word	0x08018de8
 8003b9c:	08018df0 	.word	0x08018df0
 8003ba0:	08018df8 	.word	0x08018df8
 8003ba4:	08018e04 	.word	0x08018e04
 8003ba8:	08018e10 	.word	0x08018e10
 8003bac:	08018e1c 	.word	0x08018e1c
 8003bb0:	08018e28 	.word	0x08018e28
 8003bb4:	08018e34 	.word	0x08018e34
 8003bb8:	08018e40 	.word	0x08018e40
 8003bbc:	08018e4c 	.word	0x08018e4c
 8003bc0:	08018e58 	.word	0x08018e58
 8003bc4:	08018e60 	.word	0x08018e60
 8003bc8:	08018e68 	.word	0x08018e68
 8003bcc:	08018e74 	.word	0x08018e74

08003bd0 <_ZN9LineTrace7setGainEfff>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------------- Line following gain------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setGain(float kp, float ki, float kd)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b085      	sub	sp, #20
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	ed87 0a02 	vstr	s0, [r7, #8]
 8003bdc:	edc7 0a01 	vstr	s1, [r7, #4]
 8003be0:	ed87 1a00 	vstr	s2, [r7]
	kp_ = kp;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	68ba      	ldr	r2, [r7, #8]
 8003be8:	629a      	str	r2, [r3, #40]	; 0x28
	ki_ = ki;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	631a      	str	r2, [r3, #48]	; 0x30
	kd_ = kd;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	683a      	ldr	r2, [r7, #0]
 8003bf4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003bf6:	bf00      	nop
 8003bf8:	3714      	adds	r7, #20
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr

08003c02 <_ZN9LineTrace5getKpEv>:

float LineTrace::getKp()
{
 8003c02:	b480      	push	{r7}
 8003c04:	b083      	sub	sp, #12
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
	return kp_;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c0e:	ee07 3a90 	vmov	s15, r3
}
 8003c12:	eeb0 0a67 	vmov.f32	s0, s15
 8003c16:	370c      	adds	r7, #12
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <_ZN9LineTrace5getKiEv>:

float LineTrace::getKi()
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
	return ki_;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c2c:	ee07 3a90 	vmov	s15, r3
}
 8003c30:	eeb0 0a67 	vmov.f32	s0, s15
 8003c34:	370c      	adds	r7, #12
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr

08003c3e <_ZN9LineTrace5getKdEv>:

float LineTrace::getKd()
{
 8003c3e:	b480      	push	{r7}
 8003c40:	b083      	sub	sp, #12
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]
	return kd_;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c4a:	ee07 3a90 	vmov	s15, r3
}
 8003c4e:	eeb0 0a67 	vmov.f32	s0, s15
 8003c52:	370c      	adds	r7, #12
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr

08003c5c <_ZN9LineTrace11setGainSlowEfff>:

void LineTrace::setGainSlow(float kp, float ki, float kd)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b085      	sub	sp, #20
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	60f8      	str	r0, [r7, #12]
 8003c64:	ed87 0a02 	vstr	s0, [r7, #8]
 8003c68:	edc7 0a01 	vstr	s1, [r7, #4]
 8003c6c:	ed87 1a00 	vstr	s2, [r7]
	kp_slow_ = kp;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	68ba      	ldr	r2, [r7, #8]
 8003c74:	635a      	str	r2, [r3, #52]	; 0x34
	ki_slow_ = ki;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	63da      	str	r2, [r3, #60]	; 0x3c
	kd_slow_ = kd;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	683a      	ldr	r2, [r7, #0]
 8003c80:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003c82:	bf00      	nop
 8003c84:	3714      	adds	r7, #20
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr

08003c8e <_ZN9LineTrace9getKpSlowEv>:

float LineTrace::getKpSlow()
{
 8003c8e:	b480      	push	{r7}
 8003c90:	b083      	sub	sp, #12
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	6078      	str	r0, [r7, #4]
	return kp_slow_;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c9a:	ee07 3a90 	vmov	s15, r3
}
 8003c9e:	eeb0 0a67 	vmov.f32	s0, s15
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <_ZN9LineTrace9getKiSlowEv>:

float LineTrace::getKiSlow()
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
	return ki_slow_;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cb8:	ee07 3a90 	vmov	s15, r3
}
 8003cbc:	eeb0 0a67 	vmov.f32	s0, s15
 8003cc0:	370c      	adds	r7, #12
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr

08003cca <_ZN9LineTrace9getKdSlowEv>:

float LineTrace::getKdSlow()
{
 8003cca:	b480      	push	{r7}
 8003ccc:	b083      	sub	sp, #12
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6078      	str	r0, [r7, #4]
	return kd_slow_;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd6:	ee07 3a90 	vmov	s15, r3
}
 8003cda:	eeb0 0a67 	vmov.f32	s0, s15
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <_ZN9LineTrace14setNormalRatioEf>:
// ---------------------------------------------------------------------------------------------------//
// ------------------------------ Velocity setting----------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//

void LineTrace::setNormalRatio(float ratio)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	ed87 0a00 	vstr	s0, [r7]
	normal_ratio_ = ratio;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	683a      	ldr	r2, [r7, #0]
 8003cf8:	645a      	str	r2, [r3, #68]	; 0x44
}
 8003cfa:	bf00      	nop
 8003cfc:	370c      	adds	r7, #12
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr

08003d06 <_ZN9LineTrace17setTargetVelocityEf>:

void LineTrace::setTargetVelocity(float velocity)
{
 8003d06:	b480      	push	{r7}
 8003d08:	b083      	sub	sp, #12
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
 8003d0e:	ed87 0a00 	vstr	s0, [r7]
	target_velocity_ = velocity;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	683a      	ldr	r2, [r7, #0]
 8003d16:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8003d1a:	bf00      	nop
 8003d1c:	370c      	adds	r7, #12
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr

08003d26 <_ZN9LineTrace14setMaxVelocityEf>:

void LineTrace::setMaxVelocity(float velocity)
{
 8003d26:	b480      	push	{r7}
 8003d28:	b083      	sub	sp, #12
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
 8003d2e:	ed87 0a00 	vstr	s0, [r7]
	max_velocity_ = velocity;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	683a      	ldr	r2, [r7, #0]
 8003d36:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
 8003d3a:	bf00      	nop
 8003d3c:	370c      	adds	r7, #12
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr

08003d46 <_ZN9LineTrace15setMaxVelocity2Ef>:

void LineTrace::setMaxVelocity2(float velocity)
{
 8003d46:	b480      	push	{r7}
 8003d48:	b083      	sub	sp, #12
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
 8003d4e:	ed87 0a00 	vstr	s0, [r7]
	max_velocity2_ = velocity;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	683a      	ldr	r2, [r7, #0]
 8003d56:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
}
 8003d5a:	bf00      	nop
 8003d5c:	370c      	adds	r7, #12
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr

08003d66 <_ZN9LineTrace14setMinVelocityEf>:

void LineTrace::setMinVelocity(float velocity)
{
 8003d66:	b480      	push	{r7}
 8003d68:	b083      	sub	sp, #12
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	6078      	str	r0, [r7, #4]
 8003d6e:	ed87 0a00 	vstr	s0, [r7]
	min_velocity_ = velocity;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	683a      	ldr	r2, [r7, #0]
 8003d76:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8003d7a:	bf00      	nop
 8003d7c:	370c      	adds	r7, #12
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr

08003d86 <_ZN9LineTrace15setMinVelocity2Ef>:

void LineTrace::setMinVelocity2(float velocity)
{
 8003d86:	b480      	push	{r7}
 8003d88:	b083      	sub	sp, #12
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
 8003d8e:	ed87 0a00 	vstr	s0, [r7]
	min_velocity2_ = velocity;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	683a      	ldr	r2, [r7, #0]
 8003d96:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
 8003d9a:	bf00      	nop
 8003d9c:	370c      	adds	r7, #12
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr

08003da6 <_ZN9LineTrace17getTargetVelocityEv>:

float LineTrace::getTargetVelocity()
{
 8003da6:	b480      	push	{r7}
 8003da8:	b083      	sub	sp, #12
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
	return target_velocity_;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003db4:	ee07 3a90 	vmov	s15, r3
}
 8003db8:	eeb0 0a67 	vmov.f32	s0, s15
 8003dbc:	370c      	adds	r7, #12
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr

08003dc6 <_ZN9LineTrace14getMaxVelocityEv>:

float LineTrace::getMaxVelocity()
{
 8003dc6:	b480      	push	{r7}
 8003dc8:	b083      	sub	sp, #12
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
	return max_velocity_;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003dd4:	ee07 3a90 	vmov	s15, r3
}
 8003dd8:	eeb0 0a67 	vmov.f32	s0, s15
 8003ddc:	370c      	adds	r7, #12
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr

08003de6 <_ZN9LineTrace15getMaxVelocity2Ev>:

float LineTrace::getMaxVelocity2()
{
 8003de6:	b480      	push	{r7}
 8003de8:	b083      	sub	sp, #12
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
	return max_velocity2_;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003df4:	ee07 3a90 	vmov	s15, r3
}
 8003df8:	eeb0 0a67 	vmov.f32	s0, s15
 8003dfc:	370c      	adds	r7, #12
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr

08003e06 <_ZN9LineTrace14getMinVelocityEv>:

float LineTrace::getMinVelocity()
{
 8003e06:	b480      	push	{r7}
 8003e08:	b083      	sub	sp, #12
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
	return min_velocity_;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003e14:	ee07 3a90 	vmov	s15, r3
}
 8003e18:	eeb0 0a67 	vmov.f32	s0, s15
 8003e1c:	370c      	adds	r7, #12
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr

08003e26 <_ZN9LineTrace15getMinVelocity2Ev>:

float LineTrace::getMinVelocity2()
{
 8003e26:	b480      	push	{r7}
 8003e28:	b083      	sub	sp, #12
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
	return min_velocity2_;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003e34:	ee07 3a90 	vmov	s15, r3
}
 8003e38:	eeb0 0a67 	vmov.f32	s0, s15
 8003e3c:	370c      	adds	r7, #12
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr

08003e46 <_ZN9LineTrace12setMaxAccDecEff>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------------ Acceleration setting------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setMaxAccDec(const float acc, const float dec)
{
 8003e46:	b480      	push	{r7}
 8003e48:	b085      	sub	sp, #20
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	60f8      	str	r0, [r7, #12]
 8003e4e:	ed87 0a02 	vstr	s0, [r7, #8]
 8003e52:	edc7 0a01 	vstr	s1, [r7, #4]
	max_acc_ = acc;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003e5c:	3328      	adds	r3, #40	; 0x28
 8003e5e:	68ba      	ldr	r2, [r7, #8]
 8003e60:	601a      	str	r2, [r3, #0]
	max_dec_ = dec;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003e68:	332c      	adds	r3, #44	; 0x2c
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	601a      	str	r2, [r3, #0]
}
 8003e6e:	bf00      	nop
 8003e70:	3714      	adds	r7, #20
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr

08003e7a <_ZN9LineTrace13setMaxAccDec2Eff>:

void LineTrace::setMaxAccDec2(const float acc, const float dec)
{
 8003e7a:	b480      	push	{r7}
 8003e7c:	b085      	sub	sp, #20
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	60f8      	str	r0, [r7, #12]
 8003e82:	ed87 0a02 	vstr	s0, [r7, #8]
 8003e86:	edc7 0a01 	vstr	s1, [r7, #4]
	max_acc2_ = acc;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003e90:	3330      	adds	r3, #48	; 0x30
 8003e92:	68ba      	ldr	r2, [r7, #8]
 8003e94:	601a      	str	r2, [r3, #0]
	max_dec2_ = dec;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003e9c:	3334      	adds	r3, #52	; 0x34
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	601a      	str	r2, [r3, #0]
}
 8003ea2:	bf00      	nop
 8003ea4:	3714      	adds	r7, #20
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr

08003eae <_ZN9LineTrace9getMaxAccEv>:

float LineTrace::getMaxAcc()
{
 8003eae:	b480      	push	{r7}
 8003eb0:	b083      	sub	sp, #12
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
	return max_acc_;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003ebc:	3328      	adds	r3, #40	; 0x28
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	ee07 3a90 	vmov	s15, r3
}
 8003ec4:	eeb0 0a67 	vmov.f32	s0, s15
 8003ec8:	370c      	adds	r7, #12
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr

08003ed2 <_ZN9LineTrace10getMaxDec2Ev>:

float LineTrace::getMaxDec2()
{
 8003ed2:	b480      	push	{r7}
 8003ed4:	b083      	sub	sp, #12
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
	return max_dec2_;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003ee0:	3334      	adds	r3, #52	; 0x34
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	ee07 3a90 	vmov	s15, r3
}
 8003ee8:	eeb0 0a67 	vmov.f32	s0, s15
 8003eec:	370c      	adds	r7, #12
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr

08003ef6 <_ZN9LineTrace10getMaxAcc2Ev>:

float LineTrace::getMaxAcc2()
{
 8003ef6:	b480      	push	{r7}
 8003ef8:	b083      	sub	sp, #12
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	6078      	str	r0, [r7, #4]
	return max_acc2_;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003f04:	3330      	adds	r3, #48	; 0x30
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	ee07 3a90 	vmov	s15, r3
}
 8003f0c:	eeb0 0a67 	vmov.f32	s0, s15
 8003f10:	370c      	adds	r7, #12
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr

08003f1a <_ZN9LineTrace9getMaxDecEv>:

float LineTrace::getMaxDec()
{
 8003f1a:	b480      	push	{r7}
 8003f1c:	b083      	sub	sp, #12
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
	return max_dec_;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003f28:	332c      	adds	r3, #44	; 0x2c
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	ee07 3a90 	vmov	s15, r3
}
 8003f30:	eeb0 0a67 	vmov.f32	s0, s15
 8003f34:	370c      	adds	r7, #12
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr
	...

08003f40 <_ZN9LineTrace4flipEv>:

// ---------------------------------------------------------------------------------------------------//
// ---------------------------------------- Flip -----------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::flip()
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
	if(excution_flag_ == true){
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	f000 80b4 	beq.w	80040bc <_ZN9LineTrace4flipEv+0x17c>
		// ---- line following processing -----//
		pidTrace();
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f7fe fe3f 	bl	8002bd8 <_ZN9LineTrace8pidTraceEv>
		//steeringAngleTrace();

		// ---- Target Velocity Updata ------//
		updateTargetVelocity();
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f7ff fb99 	bl	8003692 <_ZN9LineTrace20updateTargetVelocityEv>

		// ----- Processing at regular distances -----//

		if(isTargetDistance(10) == true){
 8003f60:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f7ff fc02 	bl	800376e <_ZN9LineTrace16isTargetDistanceEf>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d028      	beq.n	8003fc2 <_ZN9LineTrace4flipEv+0x82>
			// ---- Store Logs ------//
			storeLogs();
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f7ff f819 	bl	8002fa8 <_ZN9LineTrace9storeLogsEv>

			// -------- Detect Robot stabilization ------//
			if(isStable() == true && side_sensor_->getStatusL() == false){ // Stabilizing and side sensor is black
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f7ff fcca 	bl	8003910 <_ZN9LineTrace8isStableEv>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d00c      	beq.n	8003f9c <_ZN9LineTrace4flipEv+0x5c>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	691b      	ldr	r3, [r3, #16]
 8003f86:	4618      	mov	r0, r3
 8003f88:	f001 fb8a 	bl	80056a0 <_ZN10SideSensor10getStatusLEv>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	f083 0301 	eor.w	r3, r3, #1
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d001      	beq.n	8003f9c <_ZN9LineTrace4flipEv+0x5c>
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e000      	b.n	8003f9e <_ZN9LineTrace4flipEv+0x5e>
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d005      	beq.n	8003fae <_ZN9LineTrace4flipEv+0x6e>
				stable_flag_ = true;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003fa8:	3323      	adds	r3, #35	; 0x23
 8003faa:	2201      	movs	r2, #1
 8003fac:	701a      	strb	r2, [r3, #0]
			}

			// ---reset total cnt ---//
			encoder_->clearDistance10mm();
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	695b      	ldr	r3, [r3, #20]
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f7fd fb6a 	bl	800168c <_ZN7Encoder17clearDistance10mmEv>
			odometry_->clearPotition();
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	699b      	ldr	r3, [r3, #24]
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f001 f8fc 	bl	80051ba <_ZN8Odometry13clearPotitionEv>
		}

		// ----- cross line ignore processing ------//
		if(isCrossLine() == true){ //detect cross line
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f7ff fbf6 	bl	80037b4 <_ZN9LineTrace11isCrossLineEv>
			// Note: Store cross line distance here.
			//led_.LR(1, -1);
		}

		// ------- Store side line distance or correction distance------//
		if(stable_flag_ == true && side_sensor_->getStatusL() == true){ //Stabilizing and side sensor is white
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003fce:	3323      	adds	r3, #35	; 0x23
 8003fd0:	781b      	ldrb	r3, [r3, #0]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d009      	beq.n	8003fea <_ZN9LineTrace4flipEv+0xaa>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f001 fb60 	bl	80056a0 <_ZN10SideSensor10getStatusLEv>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d001      	beq.n	8003fea <_ZN9LineTrace4flipEv+0xaa>
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e000      	b.n	8003fec <_ZN9LineTrace4flipEv+0xac>
 8003fea:	2300      	movs	r3, #0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d02f      	beq.n	8004050 <_ZN9LineTrace4flipEv+0x110>
		//if((stable_flag_force_ == true || stable_flag_ == true) && side_sensor_->getStatusL() == true && encoder_->getSideLineIgnoreDistance() >= 120){ //Stabilizing and side sensor is white
			//correction_check_cnt_ = 0;

			if(mode_selector_ == FIRST_RUNNING){
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003ff6:	3354      	adds	r3, #84	; 0x54
 8003ff8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d109      	bne.n	8004014 <_ZN9LineTrace4flipEv+0xd4>
				store_check_cnt_ = 0;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004006:	333a      	adds	r3, #58	; 0x3a
 8004008:	2200      	movs	r2, #0
 800400a:	801a      	strh	r2, [r3, #0]
				storeSideLineDistance();
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f7fe ff5b 	bl	8002ec8 <_ZN9LineTrace21storeSideLineDistanceEv>
 8004012:	e00b      	b.n	800402c <_ZN9LineTrace4flipEv+0xec>
			}
			else{
				store_check_cnt_ = 0;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800401a:	333a      	adds	r3, #58	; 0x3a
 800401c:	2200      	movs	r2, #0
 800401e:	801a      	strh	r2, [r3, #0]
				correctionTotalDistanceFromSideMarker();
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f7ff f895 	bl	8003150 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv>
				storeSideLineDistance2(); //for correction check
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f7fe ff86 	bl	8002f38 <_ZN9LineTrace22storeSideLineDistance2Ev>
			}

			stable_flag_ = false;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004032:	3323      	adds	r3, #35	; 0x23
 8004034:	2200      	movs	r2, #0
 8004036:	701a      	strb	r2, [r3, #0]
			stable_flag_force_ = false;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800403e:	3324      	adds	r3, #36	; 0x24
 8004040:	2200      	movs	r2, #0
 8004042:	701a      	strb	r2, [r3, #0]
			stable_cnt_reset_flag_ = true;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800404a:	3325      	adds	r3, #37	; 0x25
 800404c:	2201      	movs	r2, #1
 800404e:	701a      	strb	r2, [r3, #0]
		}



		if(side_sensor_->getIgnoreFlag() == true && encoder_->getSideLineIgnoreDistance() >= 100){
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	691b      	ldr	r3, [r3, #16]
 8004054:	4618      	mov	r0, r3
 8004056:	f001 fb65 	bl	8005724 <_ZN10SideSensor13getIgnoreFlagEv>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00f      	beq.n	8004080 <_ZN9LineTrace4flipEv+0x140>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	695b      	ldr	r3, [r3, #20]
 8004064:	4618      	mov	r0, r3
 8004066:	f7fd fb2d 	bl	80016c4 <_ZN7Encoder25getSideLineIgnoreDistanceEv>
 800406a:	eeb0 7a40 	vmov.f32	s14, s0
 800406e:	eddf 7a15 	vldr	s15, [pc, #84]	; 80040c4 <_ZN9LineTrace4flipEv+0x184>
 8004072:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800407a:	db01      	blt.n	8004080 <_ZN9LineTrace4flipEv+0x140>
 800407c:	2301      	movs	r3, #1
 800407e:	e000      	b.n	8004082 <_ZN9LineTrace4flipEv+0x142>
 8004080:	2300      	movs	r3, #0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d004      	beq.n	8004090 <_ZN9LineTrace4flipEv+0x150>
			side_sensor_->disableIgnore();
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	4618      	mov	r0, r3
 800408c:	f001 fb3d 	bl	800570a <_ZN10SideSensor13disableIgnoreEv>
			all_sideline_flag_ = false;
		}
		*/

		// ----- Emergency stop processing------//
		if(line_sensor_->emergencyStop() == true){
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	4618      	mov	r0, r3
 8004096:	f7fe fbcf 	bl	8002838 <_ZN10LineSensor13emergencyStopEv>
 800409a:	4603      	mov	r3, r0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d00d      	beq.n	80040bc <_ZN9LineTrace4flipEv+0x17c>
			velocity_ctrl_->setTranslationVelocityOnly(0, 0);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	eddf 0a08 	vldr	s1, [pc, #32]	; 80040c8 <_ZN9LineTrace4flipEv+0x188>
 80040a8:	ed9f 0a07 	vldr	s0, [pc, #28]	; 80040c8 <_ZN9LineTrace4flipEv+0x188>
 80040ac:	4618      	mov	r0, r3
 80040ae:	f001 fe57 	bl	8005d60 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>
			esc_->off();
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b6:	4618      	mov	r0, r3
 80040b8:	f7fd f964 	bl	8001384 <_ZN3ESC3offEv>
			//led_.LR(0, -1);
		}


	}
}
 80040bc:	bf00      	nop
 80040be:	3708      	adds	r7, #8
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	42c80000 	.word	0x42c80000
 80040c8:	00000000 	.word	0x00000000

080040cc <_ZN9LineTrace7setModeEs>:

// ---------------------------------------------------------------------------------------------------//
// ---------------------------------- Mode set to stop------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setMode(int16_t mode)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	460b      	mov	r3, r1
 80040d6:	807b      	strh	r3, [r7, #2]
	mode_selector_ = mode;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80040de:	3354      	adds	r3, #84	; 0x54
 80040e0:	887a      	ldrh	r2, [r7, #2]
 80040e2:	801a      	strh	r2, [r3, #0]
}
 80040e4:	bf00      	nop
 80040e6:	370c      	adds	r7, #12
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <_ZN9LineTrace5startEv>:

void LineTrace::start()
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b082      	sub	sp, #8
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	i_reset_flag_ = true;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	velocity_ctrl_->start();
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	4618      	mov	r0, r3
 800410e:	f001 fe80 	bl	8005e12 <_ZN12VelocityCtrl5startEv>
	side_sensor_->resetWhiteLineCnt();
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	691b      	ldr	r3, [r3, #16]
 8004116:	4618      	mov	r0, r3
 8004118:	f001 fada 	bl	80056d0 <_ZN10SideSensor17resetWhiteLineCntEv>
	crossline_idx_ = 0;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004122:	3318      	adds	r3, #24
 8004124:	2200      	movs	r2, #0
 8004126:	801a      	strh	r2, [r3, #0]
	sideline_idx_ = 0;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800412e:	331c      	adds	r3, #28
 8004130:	2200      	movs	r2, #0
 8004132:	801a      	strh	r2, [r3, #0]
	sideline_idx2_ = 0;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800413a:	331e      	adds	r3, #30
 800413c:	2200      	movs	r2, #0
 800413e:	801a      	strh	r2, [r3, #0]
	all_sideline_idx_ = 0;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004146:	3320      	adds	r3, #32
 8004148:	2200      	movs	r2, #0
 800414a:	801a      	strh	r2, [r3, #0]
}
 800414c:	bf00      	nop
 800414e:	3708      	adds	r7, #8
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}

08004154 <_ZN9LineTrace7runningEv>:


void LineTrace::running()
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b084      	sub	sp, #16
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
	uint16_t stage = 0;
 800415c:	2300      	movs	r3, #0
 800415e:	81fb      	strh	r3, [r7, #14]
	bool goal_flag = false;
 8004160:	2300      	movs	r3, #0
 8004162:	737b      	strb	r3, [r7, #13]
	bool goal_judge_flag = false;
 8004164:	2300      	movs	r3, #0
 8004166:	733b      	strb	r3, [r7, #12]
	start();
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f7ff ffc1 	bl	80040f0 <_ZN9LineTrace5startEv>

	while(goal_flag == false){
 800416e:	7b7b      	ldrb	r3, [r7, #13]
 8004170:	2b00      	cmp	r3, #0
 8004172:	f040 815f 	bne.w	8004434 <_ZN9LineTrace7runningEv+0x2e0>
		switch(stage){
 8004176:	89fb      	ldrh	r3, [r7, #14]
 8004178:	2b05      	cmp	r3, #5
 800417a:	d03a      	beq.n	80041f2 <_ZN9LineTrace7runningEv+0x9e>
 800417c:	2b0a      	cmp	r3, #10
 800417e:	d047      	beq.n	8004210 <_ZN9LineTrace7runningEv+0xbc>
 8004180:	2b00      	cmp	r3, #0
 8004182:	f040 80c7 	bne.w	8004314 <_ZN9LineTrace7runningEv+0x1c0>
		case 0:
			//if(side_sensor_->getWhiteLineCntR() == 1){
			if(side_sensor_->getStatusR() == true){
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	4618      	mov	r0, r3
 800418c:	f001 fa94 	bl	80056b8 <_ZN10SideSensor10getStatusREv>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	f000 80b9 	beq.w	800430a <_ZN9LineTrace7runningEv+0x1b6>
				loggerStart();
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f7fe fdfd 	bl	8002d98 <_ZN9LineTrace11loggerStartEv>
				logger_->start();
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	69db      	ldr	r3, [r3, #28]
 80041a2:	4618      	mov	r0, r3
 80041a4:	f000 fe55 	bl	8004e52 <_ZN6Logger5startEv>
				if(mode_selector_ != FIRST_RUNNING){ // Other than first running
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80041ae:	3354      	adds	r3, #84	; 0x54
 80041b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d002      	beq.n	80041be <_ZN9LineTrace7runningEv+0x6a>
					startVelocityPlay();
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f7ff fa2d 	bl	8003618 <_ZN9LineTrace17startVelocityPlayEv>
				}

				encoder_->clearSideLineIgnoreDistance();
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	695b      	ldr	r3, [r3, #20]
 80041c2:	4618      	mov	r0, r3
 80041c4:	f7fd fa8d 	bl	80016e2 <_ZN7Encoder27clearSideLineIgnoreDistanceEv>
				encoder_->clearCrossLineIgnoreDistance();
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	695b      	ldr	r3, [r3, #20]
 80041cc:	4618      	mov	r0, r3
 80041ce:	f7fd faa5 	bl	800171c <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
				encoder_->clearTotalDistance();
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	695b      	ldr	r3, [r3, #20]
 80041d6:	4618      	mov	r0, r3
 80041d8:	f7fd fa66 	bl	80016a8 <_ZN7Encoder18clearTotalDistanceEv>
				led_.LR(0, -1);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	330c      	adds	r3, #12
 80041e0:	f04f 32ff 	mov.w	r2, #4294967295
 80041e4:	2100      	movs	r1, #0
 80041e6:	4618      	mov	r0, r3
 80041e8:	f7fe f870 	bl	80022cc <_ZN3LED2LREaa>
				stage = 5;
 80041ec:	2305      	movs	r3, #5
 80041ee:	81fb      	strh	r3, [r7, #14]
			}

			break;
 80041f0:	e08b      	b.n	800430a <_ZN9LineTrace7runningEv+0x1b6>

		case 5:
			if(side_sensor_->getStatusR() == false) stage = 10;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	4618      	mov	r0, r3
 80041f8:	f001 fa5e 	bl	80056b8 <_ZN10SideSensor10getStatusREv>
 80041fc:	4603      	mov	r3, r0
 80041fe:	f083 0301 	eor.w	r3, r3, #1
 8004202:	b2db      	uxtb	r3, r3
 8004204:	2b00      	cmp	r3, #0
 8004206:	f000 8082 	beq.w	800430e <_ZN9LineTrace7runningEv+0x1ba>
 800420a:	230a      	movs	r3, #10
 800420c:	81fb      	strh	r3, [r7, #14]

			break;
 800420e:	e07e      	b.n	800430e <_ZN9LineTrace7runningEv+0x1ba>
		case 10:
			//if(side_sensor_->getWhiteLineCntR() == 2){
			if(side_sensor_->getStatusL() == true){
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	691b      	ldr	r3, [r3, #16]
 8004214:	4618      	mov	r0, r3
 8004216:	f001 fa43 	bl	80056a0 <_ZN10SideSensor10getStatusLEv>
 800421a:	4603      	mov	r3, r0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d00c      	beq.n	800423a <_ZN9LineTrace7runningEv+0xe6>
				goal_judge_flag = false;
 8004220:	2300      	movs	r3, #0
 8004222:	733b      	strb	r3, [r7, #12]
				encoder_->clearGoalJudgeDistance();
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	695b      	ldr	r3, [r3, #20]
 8004228:	4618      	mov	r0, r3
 800422a:	f7fd fa94 	bl	8001756 <_ZN7Encoder22clearGoalJudgeDistanceEv>
				led_.fullColor('B');
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	330c      	adds	r3, #12
 8004232:	2142      	movs	r1, #66	; 0x42
 8004234:	4618      	mov	r0, r3
 8004236:	f7fd ff8d 	bl	8002154 <_ZN3LED9fullColorEc>
			}

			if(goal_judge_flag == false && side_sensor_->getStatusR() == true && encoder_->getGoalJudgeDistance() >= 30){
 800423a:	7b3b      	ldrb	r3, [r7, #12]
 800423c:	f083 0301 	eor.w	r3, r3, #1
 8004240:	b2db      	uxtb	r3, r3
 8004242:	2b00      	cmp	r3, #0
 8004244:	d017      	beq.n	8004276 <_ZN9LineTrace7runningEv+0x122>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	4618      	mov	r0, r3
 800424c:	f001 fa34 	bl	80056b8 <_ZN10SideSensor10getStatusREv>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d00f      	beq.n	8004276 <_ZN9LineTrace7runningEv+0x122>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	695b      	ldr	r3, [r3, #20]
 800425a:	4618      	mov	r0, r3
 800425c:	f7fd fa6c 	bl	8001738 <_ZN7Encoder20getGoalJudgeDistanceEv>
 8004260:	eeb0 7a40 	vmov.f32	s14, s0
 8004264:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 8004268:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800426c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004270:	db01      	blt.n	8004276 <_ZN9LineTrace7runningEv+0x122>
 8004272:	2301      	movs	r3, #1
 8004274:	e000      	b.n	8004278 <_ZN9LineTrace7runningEv+0x124>
 8004276:	2300      	movs	r3, #0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d013      	beq.n	80042a4 <_ZN9LineTrace7runningEv+0x150>
				goal_judge_flag = true;
 800427c:	2301      	movs	r3, #1
 800427e:	733b      	strb	r3, [r7, #12]
				encoder_->clearGoalJudgeDistance();
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	695b      	ldr	r3, [r3, #20]
 8004284:	4618      	mov	r0, r3
 8004286:	f7fd fa66 	bl	8001756 <_ZN7Encoder22clearGoalJudgeDistanceEv>
				ignore_check_cnt_ = 0;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004290:	333c      	adds	r3, #60	; 0x3c
 8004292:	2200      	movs	r2, #0
 8004294:	801a      	strh	r2, [r3, #0]

				led_.fullColor('Y');
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	330c      	adds	r3, #12
 800429a:	2159      	movs	r1, #89	; 0x59
 800429c:	4618      	mov	r0, r3
 800429e:	f7fd ff59 	bl	8002154 <_ZN3LED9fullColorEc>
				goal_flag = true;
				goal_judge_flag = false;

			}

			break;
 80042a2:	e036      	b.n	8004312 <_ZN9LineTrace7runningEv+0x1be>
			else if(goal_judge_flag == true && encoder_->getGoalJudgeDistance() >= 30){
 80042a4:	7b3b      	ldrb	r3, [r7, #12]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d00f      	beq.n	80042ca <_ZN9LineTrace7runningEv+0x176>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	695b      	ldr	r3, [r3, #20]
 80042ae:	4618      	mov	r0, r3
 80042b0:	f7fd fa42 	bl	8001738 <_ZN7Encoder20getGoalJudgeDistanceEv>
 80042b4:	eeb0 7a40 	vmov.f32	s14, s0
 80042b8:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 80042bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80042c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042c4:	db01      	blt.n	80042ca <_ZN9LineTrace7runningEv+0x176>
 80042c6:	2301      	movs	r3, #1
 80042c8:	e000      	b.n	80042cc <_ZN9LineTrace7runningEv+0x178>
 80042ca:	2300      	movs	r3, #0
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d020      	beq.n	8004312 <_ZN9LineTrace7runningEv+0x1be>
				led_.fullColor('M');
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	330c      	adds	r3, #12
 80042d4:	214d      	movs	r1, #77	; 0x4d
 80042d6:	4618      	mov	r0, r3
 80042d8:	f7fd ff3c 	bl	8002154 <_ZN3LED9fullColorEc>
				loggerStop();
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f7fe fd76 	bl	8002dce <_ZN9LineTrace10loggerStopEv>
				stopVelocityPlay();
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f7ff f9b8 	bl	8003658 <_ZN9LineTrace16stopVelocityPlayEv>
				HAL_Delay(100); //Run through after the goal
 80042e8:	2064      	movs	r0, #100	; 0x64
 80042ea:	f005 fe11 	bl	8009f10 <HAL_Delay>
				setTargetVelocity(0);
 80042ee:	ed9f 0a55 	vldr	s0, [pc, #340]	; 8004444 <_ZN9LineTrace7runningEv+0x2f0>
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f7ff fd07 	bl	8003d06 <_ZN9LineTrace17setTargetVelocityEf>
				HAL_Delay(500); //Stop for a while on the spot
 80042f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80042fc:	f005 fe08 	bl	8009f10 <HAL_Delay>
				goal_flag = true;
 8004300:	2301      	movs	r3, #1
 8004302:	737b      	strb	r3, [r7, #13]
				goal_judge_flag = false;
 8004304:	2300      	movs	r3, #0
 8004306:	733b      	strb	r3, [r7, #12]
			break;
 8004308:	e003      	b.n	8004312 <_ZN9LineTrace7runningEv+0x1be>
			break;
 800430a:	bf00      	nop
 800430c:	e002      	b.n	8004314 <_ZN9LineTrace7runningEv+0x1c0>
			break;
 800430e:	bf00      	nop
 8004310:	e000      	b.n	8004314 <_ZN9LineTrace7runningEv+0x1c0>
			break;
 8004312:	bf00      	nop
		}

		// ---------Confirmation when corrected ------------//
		correction_check_cnt_++;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800431a:	3338      	adds	r3, #56	; 0x38
 800431c:	881b      	ldrh	r3, [r3, #0]
 800431e:	3301      	adds	r3, #1
 8004320:	b29a      	uxth	r2, r3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004328:	3338      	adds	r3, #56	; 0x38
 800432a:	801a      	strh	r2, [r3, #0]
		if(correction_check_cnt_ >= 10000) correction_check_cnt_ = 10000;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004332:	3338      	adds	r3, #56	; 0x38
 8004334:	881b      	ldrh	r3, [r3, #0]
 8004336:	f242 720f 	movw	r2, #9999	; 0x270f
 800433a:	4293      	cmp	r3, r2
 800433c:	d906      	bls.n	800434c <_ZN9LineTrace7runningEv+0x1f8>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004344:	3338      	adds	r3, #56	; 0x38
 8004346:	f242 7210 	movw	r2, #10000	; 0x2710
 800434a:	801a      	strh	r2, [r3, #0]

		if(correction_check_cnt_ <= 300) led_.fullColor('R');
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004352:	3338      	adds	r3, #56	; 0x38
 8004354:	881b      	ldrh	r3, [r3, #0]
 8004356:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800435a:	d805      	bhi.n	8004368 <_ZN9LineTrace7runningEv+0x214>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	330c      	adds	r3, #12
 8004360:	2152      	movs	r1, #82	; 0x52
 8004362:	4618      	mov	r0, r3
 8004364:	f7fd fef6 	bl	8002154 <_ZN3LED9fullColorEc>

		store_check_cnt_++;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800436e:	333a      	adds	r3, #58	; 0x3a
 8004370:	881b      	ldrh	r3, [r3, #0]
 8004372:	3301      	adds	r3, #1
 8004374:	b29a      	uxth	r2, r3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800437c:	333a      	adds	r3, #58	; 0x3a
 800437e:	801a      	strh	r2, [r3, #0]
		if(store_check_cnt_>= 10000) store_check_cnt_ = 10000;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004386:	333a      	adds	r3, #58	; 0x3a
 8004388:	881b      	ldrh	r3, [r3, #0]
 800438a:	f242 720f 	movw	r2, #9999	; 0x270f
 800438e:	4293      	cmp	r3, r2
 8004390:	d906      	bls.n	80043a0 <_ZN9LineTrace7runningEv+0x24c>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004398:	333a      	adds	r3, #58	; 0x3a
 800439a:	f242 7210 	movw	r2, #10000	; 0x2710
 800439e:	801a      	strh	r2, [r3, #0]

		if(store_check_cnt_ <= 500) led_.LR(1, -1);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80043a6:	333a      	adds	r3, #58	; 0x3a
 80043a8:	881b      	ldrh	r3, [r3, #0]
 80043aa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80043ae:	d808      	bhi.n	80043c2 <_ZN9LineTrace7runningEv+0x26e>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	330c      	adds	r3, #12
 80043b4:	f04f 32ff 	mov.w	r2, #4294967295
 80043b8:	2101      	movs	r1, #1
 80043ba:	4618      	mov	r0, r3
 80043bc:	f7fd ff86 	bl	80022cc <_ZN3LED2LREaa>
 80043c0:	e007      	b.n	80043d2 <_ZN9LineTrace7runningEv+0x27e>
		else led_.LR(0, -1);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	330c      	adds	r3, #12
 80043c6:	f04f 32ff 	mov.w	r2, #4294967295
 80043ca:	2100      	movs	r1, #0
 80043cc:	4618      	mov	r0, r3
 80043ce:	f7fd ff7d 	bl	80022cc <_ZN3LED2LREaa>

		ignore_check_cnt_++;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80043d8:	333c      	adds	r3, #60	; 0x3c
 80043da:	881b      	ldrh	r3, [r3, #0]
 80043dc:	3301      	adds	r3, #1
 80043de:	b29a      	uxth	r2, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80043e6:	333c      	adds	r3, #60	; 0x3c
 80043e8:	801a      	strh	r2, [r3, #0]
		if(ignore_check_cnt_>= 10000) ignore_check_cnt_= 10000;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80043f0:	333c      	adds	r3, #60	; 0x3c
 80043f2:	881b      	ldrh	r3, [r3, #0]
 80043f4:	f242 720f 	movw	r2, #9999	; 0x270f
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d906      	bls.n	800440a <_ZN9LineTrace7runningEv+0x2b6>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004402:	333c      	adds	r3, #60	; 0x3c
 8004404:	f242 7210 	movw	r2, #10000	; 0x2710
 8004408:	801a      	strh	r2, [r3, #0]

		if(ignore_check_cnt_ <= 200) led_.fullColor('Y');
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004410:	333c      	adds	r3, #60	; 0x3c
 8004412:	881b      	ldrh	r3, [r3, #0]
 8004414:	2bc8      	cmp	r3, #200	; 0xc8
 8004416:	d806      	bhi.n	8004426 <_ZN9LineTrace7runningEv+0x2d2>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	330c      	adds	r3, #12
 800441c:	2159      	movs	r1, #89	; 0x59
 800441e:	4618      	mov	r0, r3
 8004420:	f7fd fe98 	bl	8002154 <_ZN3LED9fullColorEc>
 8004424:	e6a3      	b.n	800416e <_ZN9LineTrace7runningEv+0x1a>
		else led_.fullColor('B');
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	330c      	adds	r3, #12
 800442a:	2142      	movs	r1, #66	; 0x42
 800442c:	4618      	mov	r0, r3
 800442e:	f7fd fe91 	bl	8002154 <_ZN3LED9fullColorEc>
	while(goal_flag == false){
 8004432:	e69c      	b.n	800416e <_ZN9LineTrace7runningEv+0x1a>
	}

	stop();
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f000 f807 	bl	8004448 <_ZN9LineTrace4stopEv>
}
 800443a:	bf00      	nop
 800443c:	3710      	adds	r7, #16
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	00000000 	.word	0x00000000

08004448 <_ZN9LineTrace4stopEv>:

void LineTrace::stop()
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af02      	add	r7, sp, #8
 800444e:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	velocity_ctrl_->stop();
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	4618      	mov	r0, r3
 800445e:	f001 fceb 	bl	8005e38 <_ZN12VelocityCtrl4stopEv>

	led_.LR(-1, 1);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	330c      	adds	r3, #12
 8004466:	2201      	movs	r2, #1
 8004468:	f04f 31ff 	mov.w	r1, #4294967295
 800446c:	4618      	mov	r0, r3
 800446e:	f7fd ff2d 	bl	80022cc <_ZN3LED2LREaa>
	if(mode_selector_ == FIRST_RUNNING){ //First running
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004478:	3354      	adds	r3, #84	; 0x54
 800447a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d11e      	bne.n	80044c0 <_ZN9LineTrace4stopEv+0x78>
		logger_->saveDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	69d8      	ldr	r0, [r3, #28]
 8004486:	4b26      	ldr	r3, [pc, #152]	; (8004520 <_ZN9LineTrace4stopEv+0xd8>)
 8004488:	4a26      	ldr	r2, [pc, #152]	; (8004524 <_ZN9LineTrace4stopEv+0xdc>)
 800448a:	4927      	ldr	r1, [pc, #156]	; (8004528 <_ZN9LineTrace4stopEv+0xe0>)
 800448c:	f000 fbc3 	bl	8004c16 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>
		sd_write_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_, OVER_WRITE);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004496:	3358      	adds	r3, #88	; 0x58
 8004498:	2200      	movs	r2, #0
 800449a:	9200      	str	r2, [sp, #0]
 800449c:	2264      	movs	r2, #100	; 0x64
 800449e:	4923      	ldr	r1, [pc, #140]	; (800452c <_ZN9LineTrace4stopEv+0xe4>)
 80044a0:	4821      	ldr	r0, [pc, #132]	; (8004528 <_ZN9LineTrace4stopEv+0xe0>)
 80044a2:	f7fd f9db 	bl	800185c <sd_write_array_float>
		sd_write_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_, OVER_WRITE);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f503 433f 	add.w	r3, r3, #48896	; 0xbf00
 80044ac:	3378      	adds	r3, #120	; 0x78
 80044ae:	2200      	movs	r2, #0
 80044b0:	9200      	str	r2, [sp, #0]
 80044b2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80044b6:	491e      	ldr	r1, [pc, #120]	; (8004530 <_ZN9LineTrace4stopEv+0xe8>)
 80044b8:	481b      	ldr	r0, [pc, #108]	; (8004528 <_ZN9LineTrace4stopEv+0xe0>)
 80044ba:	f7fd f9cf 	bl	800185c <sd_write_array_float>
 80044be:	e01d      	b.n	80044fc <_ZN9LineTrace4stopEv+0xb4>
	}
	else{//Secondary run
		logger_->saveDistanceAndTheta2("COURSLOG", "DISTANC2.TXT", "THETA2.TXT");
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	69d8      	ldr	r0, [r3, #28]
 80044c4:	4b1b      	ldr	r3, [pc, #108]	; (8004534 <_ZN9LineTrace4stopEv+0xec>)
 80044c6:	4a1c      	ldr	r2, [pc, #112]	; (8004538 <_ZN9LineTrace4stopEv+0xf0>)
 80044c8:	4917      	ldr	r1, [pc, #92]	; (8004528 <_ZN9LineTrace4stopEv+0xe0>)
 80044ca:	f000 fbc7 	bl	8004c5c <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>
		sd_write_array_float("COURSLOG", "CROSSDI2.TXT", CROSSLINE_SIZE, crossline_distance2_, OVER_WRITE);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f503 433d 	add.w	r3, r3, #48384	; 0xbd00
 80044d4:	33e8      	adds	r3, #232	; 0xe8
 80044d6:	2200      	movs	r2, #0
 80044d8:	9200      	str	r2, [sp, #0]
 80044da:	2264      	movs	r2, #100	; 0x64
 80044dc:	4917      	ldr	r1, [pc, #92]	; (800453c <_ZN9LineTrace4stopEv+0xf4>)
 80044de:	4812      	ldr	r0, [pc, #72]	; (8004528 <_ZN9LineTrace4stopEv+0xe0>)
 80044e0:	f7fd f9bc 	bl	800185c <sd_write_array_float>
		sd_write_array_float("COURSLOG", "SIDEDIS2.TXT", SIDELINE_SIZE, sideline_distance2_, OVER_WRITE);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f503 4347 	add.w	r3, r3, #50944	; 0xc700
 80044ea:	3348      	adds	r3, #72	; 0x48
 80044ec:	2200      	movs	r2, #0
 80044ee:	9200      	str	r2, [sp, #0]
 80044f0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80044f4:	4912      	ldr	r1, [pc, #72]	; (8004540 <_ZN9LineTrace4stopEv+0xf8>)
 80044f6:	480c      	ldr	r0, [pc, #48]	; (8004528 <_ZN9LineTrace4stopEv+0xe0>)
 80044f8:	f7fd f9b0 	bl	800185c <sd_write_array_float>
	}
	//sd_write_array_float("COURSLOG", "ASIDEDIS.TXT", SIDELINE_SIZE, all_sideline_distance_, OVER_WRITE);

	led_.LR(-1, 0);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	330c      	adds	r3, #12
 8004500:	2200      	movs	r2, #0
 8004502:	f04f 31ff 	mov.w	r1, #4294967295
 8004506:	4618      	mov	r0, r3
 8004508:	f7fd fee0 	bl	80022cc <_ZN3LED2LREaa>

	logger_->resetIdx();
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	69db      	ldr	r3, [r3, #28]
 8004510:	4618      	mov	r0, r3
 8004512:	f000 fc7f 	bl	8004e14 <_ZN6Logger8resetIdxEv>
	//logger_->resetLogsDis2();
}
 8004516:	bf00      	nop
 8004518:	3708      	adds	r7, #8
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
 800451e:	bf00      	nop
 8004520:	08018e80 	.word	0x08018e80
 8004524:	08018e8c 	.word	0x08018e8c
 8004528:	08018e9c 	.word	0x08018e9c
 800452c:	08018ea8 	.word	0x08018ea8
 8004530:	08018eb8 	.word	0x08018eb8
 8004534:	08018ec4 	.word	0x08018ec4
 8004538:	08018ed0 	.word	0x08018ed0
 800453c:	08018ee0 	.word	0x08018ee0
 8004540:	08018ef0 	.word	0x08018ef0

08004544 <_ZN9LineTrace20createVelocityTabeleEv>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------------ Create velocity table-----------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::createVelocityTabele()
{
 8004544:	b590      	push	{r4, r7, lr}
 8004546:	b08b      	sub	sp, #44	; 0x2c
 8004548:	af02      	add	r7, sp, #8
 800454a:	6078      	str	r0, [r7, #4]
	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	69db      	ldr	r3, [r3, #28]
 8004550:	4618      	mov	r0, r3
 8004552:	f000 fb1a 	bl	8004b8a <_ZN6Logger23getDistanceArrayPointerEv>
 8004556:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	69db      	ldr	r3, [r3, #28]
 800455c:	4618      	mov	r0, r3
 800455e:	f000 fb22 	bl	8004ba6 <_ZN6Logger20getThetaArrayPointerEv>
 8004562:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8004564:	2300      	movs	r3, #0
 8004566:	837b      	strh	r3, [r7, #26]
 8004568:	8b7b      	ldrh	r3, [r7, #26]
 800456a:	f241 726f 	movw	r2, #5999	; 0x176f
 800456e:	4293      	cmp	r3, r2
 8004570:	d84b      	bhi.n	800460a <_ZN9LineTrace20createVelocityTabeleEv+0xc6>
		temp_distance = p_distance[i];
 8004572:	8b7b      	ldrh	r3, [r7, #26]
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	693a      	ldr	r2, [r7, #16]
 8004578:	4413      	add	r3, r2
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 800457e:	8b7b      	ldrh	r3, [r7, #26]
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	4413      	add	r3, r2
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 800458a:	edd7 7a07 	vldr	s15, [r7, #28]
 800458e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004596:	d101      	bne.n	800459c <_ZN9LineTrace20createVelocityTabeleEv+0x58>
 8004598:	4b4c      	ldr	r3, [pc, #304]	; (80046cc <_ZN9LineTrace20createVelocityTabeleEv+0x188>)
 800459a:	61fb      	str	r3, [r7, #28]
		float radius = abs(temp_distance / temp_theta);
 800459c:	ed97 7a02 	vldr	s14, [r7, #8]
 80045a0:	edd7 7a07 	vldr	s15, [r7, #28]
 80045a4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80045a8:	eeb0 0a66 	vmov.f32	s0, s13
 80045ac:	f7fe f994 	bl	80028d8 <_ZSt3absf>
 80045b0:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius >= 5000) radius = 5000;
 80045b4:	edd7 7a05 	vldr	s15, [r7, #20]
 80045b8:	ed9f 7a45 	vldr	s14, [pc, #276]	; 80046d0 <_ZN9LineTrace20createVelocityTabeleEv+0x18c>
 80045bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045c4:	db01      	blt.n	80045ca <_ZN9LineTrace20createVelocityTabeleEv+0x86>
 80045c6:	4b43      	ldr	r3, [pc, #268]	; (80046d4 <_ZN9LineTrace20createVelocityTabeleEv+0x190>)
 80045c8:	617b      	str	r3, [r7, #20]

		velocity_table_[i] = radius2Velocity(radius);
 80045ca:	8b7c      	ldrh	r4, [r7, #26]
 80045cc:	ed97 0a05 	vldr	s0, [r7, #20]
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f7fe fe1b 	bl	800320c <_ZN9LineTrace15radius2VelocityEf>
 80045d6:	eef0 7a40 	vmov.f32	s15, s0
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 80045e0:	3304      	adds	r3, #4
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	4413      	add	r3, r2
 80045e6:	edc3 7a00 	vstr	s15, [r3]

		ref_delta_distances_[i] = p_distance[i]; //copy
 80045ea:	8b7b      	ldrh	r3, [r7, #26]
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	693a      	ldr	r2, [r7, #16]
 80045f0:	441a      	add	r2, r3
 80045f2:	8b7b      	ldrh	r3, [r7, #26]
 80045f4:	6812      	ldr	r2, [r2, #0]
 80045f6:	6879      	ldr	r1, [r7, #4]
 80045f8:	3332      	adds	r3, #50	; 0x32
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	440b      	add	r3, r1
 80045fe:	3304      	adds	r3, #4
 8004600:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8004602:	8b7b      	ldrh	r3, [r7, #26]
 8004604:	3301      	adds	r3, #1
 8004606:	837b      	strh	r3, [r7, #26]
 8004608:	e7ae      	b.n	8004568 <_ZN9LineTrace20createVelocityTabeleEv+0x24>
	}


	if(mode_selector_ == SECOND_RUNNING){
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004610:	3354      	adds	r3, #84	; 0x54
 8004612:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004616:	2b01      	cmp	r3, #1
 8004618:	d120      	bne.n	800465c <_ZN9LineTrace20createVelocityTabeleEv+0x118>
		velocity_table_[0] = min_velocity_;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004626:	3310      	adds	r3, #16
 8004628:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec_, p_distance);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004630:	332c      	adds	r3, #44	; 0x2c
 8004632:	edd3 7a00 	vldr	s15, [r3]
 8004636:	6939      	ldr	r1, [r7, #16]
 8004638:	eeb0 0a67 	vmov.f32	s0, s15
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f7fe fea3 	bl	8003388 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc_, p_distance);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004648:	3328      	adds	r3, #40	; 0x28
 800464a:	edd3 7a00 	vldr	s15, [r3]
 800464e:	6939      	ldr	r1, [r7, #16]
 8004650:	eeb0 0a67 	vmov.f32	s0, s15
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f7fe ff3b 	bl	80034d0 <_ZN9LineTrace20accelerateProcessingEfPKf>
 800465a:	e027      	b.n	80046ac <_ZN9LineTrace20createVelocityTabeleEv+0x168>
	}
	else if(mode_selector_ == THIRD_RUNNING){
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004662:	3354      	adds	r3, #84	; 0x54
 8004664:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004668:	2b02      	cmp	r3, #2
 800466a:	d11f      	bne.n	80046ac <_ZN9LineTrace20createVelocityTabeleEv+0x168>
		velocity_table_[0] = min_velocity2_;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004678:	3310      	adds	r3, #16
 800467a:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec2_, p_distance);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004682:	3334      	adds	r3, #52	; 0x34
 8004684:	edd3 7a00 	vldr	s15, [r3]
 8004688:	6939      	ldr	r1, [r7, #16]
 800468a:	eeb0 0a67 	vmov.f32	s0, s15
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f7fe fe7a 	bl	8003388 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc2_, p_distance);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800469a:	3330      	adds	r3, #48	; 0x30
 800469c:	edd3 7a00 	vldr	s15, [r3]
 80046a0:	6939      	ldr	r1, [r7, #16]
 80046a2:	eeb0 0a67 	vmov.f32	s0, s15
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f7fe ff12 	bl	80034d0 <_ZN9LineTrace20accelerateProcessingEfPKf>
	}

	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80046b2:	3310      	adds	r3, #16
 80046b4:	2200      	movs	r2, #0
 80046b6:	9200      	str	r2, [sp, #0]
 80046b8:	f241 7270 	movw	r2, #6000	; 0x1770
 80046bc:	4906      	ldr	r1, [pc, #24]	; (80046d8 <_ZN9LineTrace20createVelocityTabeleEv+0x194>)
 80046be:	4807      	ldr	r0, [pc, #28]	; (80046dc <_ZN9LineTrace20createVelocityTabeleEv+0x198>)
 80046c0:	f7fd f8cc 	bl	800185c <sd_write_array_float>

}
 80046c4:	bf00      	nop
 80046c6:	3724      	adds	r7, #36	; 0x24
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd90      	pop	{r4, r7, pc}
 80046cc:	3727c5ac 	.word	0x3727c5ac
 80046d0:	459c4000 	.word	0x459c4000
 80046d4:	459c4000 	.word	0x459c4000
 80046d8:	08018f00 	.word	0x08018f00
 80046dc:	08018e9c 	.word	0x08018e9c

080046e0 <_ZN9LineTrace26createVelocityTabeleFromSDEv>:

void LineTrace::createVelocityTabeleFromSD()
{
 80046e0:	b590      	push	{r4, r7, lr}
 80046e2:	b08b      	sub	sp, #44	; 0x2c
 80046e4:	af02      	add	r7, sp, #8
 80046e6:	6078      	str	r0, [r7, #4]
	logger_->importDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	69d8      	ldr	r0, [r3, #28]
 80046ec:	4b6b      	ldr	r3, [pc, #428]	; (800489c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1bc>)
 80046ee:	4a6c      	ldr	r2, [pc, #432]	; (80048a0 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c0>)
 80046f0:	496c      	ldr	r1, [pc, #432]	; (80048a4 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 80046f2:	f000 fad7 	bl	8004ca4 <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>
	sd_read_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80046fc:	3358      	adds	r3, #88	; 0x58
 80046fe:	2264      	movs	r2, #100	; 0x64
 8004700:	4969      	ldr	r1, [pc, #420]	; (80048a8 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c8>)
 8004702:	4868      	ldr	r0, [pc, #416]	; (80048a4 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 8004704:	f7fd f910 	bl	8001928 <sd_read_array_float>
	sd_read_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f503 433f 	add.w	r3, r3, #48896	; 0xbf00
 800470e:	3378      	adds	r3, #120	; 0x78
 8004710:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004714:	4965      	ldr	r1, [pc, #404]	; (80048ac <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1cc>)
 8004716:	4863      	ldr	r0, [pc, #396]	; (80048a4 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 8004718:	f7fd f906 	bl	8001928 <sd_read_array_float>

	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	69db      	ldr	r3, [r3, #28]
 8004720:	4618      	mov	r0, r3
 8004722:	f000 fa32 	bl	8004b8a <_ZN6Logger23getDistanceArrayPointerEv>
 8004726:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	69db      	ldr	r3, [r3, #28]
 800472c:	4618      	mov	r0, r3
 800472e:	f000 fa3a 	bl	8004ba6 <_ZN6Logger20getThetaArrayPointerEv>
 8004732:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	//float pre_radius = 0;;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8004734:	2300      	movs	r3, #0
 8004736:	837b      	strh	r3, [r7, #26]
 8004738:	8b7b      	ldrh	r3, [r7, #26]
 800473a:	f241 726f 	movw	r2, #5999	; 0x176f
 800473e:	4293      	cmp	r3, r2
 8004740:	d84b      	bhi.n	80047da <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xfa>

		temp_distance = p_distance[i];
 8004742:	8b7b      	ldrh	r3, [r7, #26]
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	693a      	ldr	r2, [r7, #16]
 8004748:	4413      	add	r3, r2
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 800474e:	8b7b      	ldrh	r3, [r7, #26]
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	68fa      	ldr	r2, [r7, #12]
 8004754:	4413      	add	r3, r2
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 800475a:	edd7 7a07 	vldr	s15, [r7, #28]
 800475e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004766:	d101      	bne.n	800476c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x8c>
 8004768:	4b51      	ldr	r3, [pc, #324]	; (80048b0 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d0>)
 800476a:	61fb      	str	r3, [r7, #28]
		float radius_origin = abs(temp_distance / temp_theta);
 800476c:	ed97 7a02 	vldr	s14, [r7, #8]
 8004770:	edd7 7a07 	vldr	s15, [r7, #28]
 8004774:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004778:	eeb0 0a66 	vmov.f32	s0, s13
 800477c:	f7fe f8ac 	bl	80028d8 <_ZSt3absf>
 8004780:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius_origin >= 5000) radius_origin = 5000;
 8004784:	edd7 7a05 	vldr	s15, [r7, #20]
 8004788:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80048b4 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d4>
 800478c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004794:	db01      	blt.n	800479a <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xba>
 8004796:	4b48      	ldr	r3, [pc, #288]	; (80048b8 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d8>)
 8004798:	617b      	str	r3, [r7, #20]

		//float radius_lpf = ((R_RADIUS)*(radius_origin) + (1.0 - (R_RADIUS))* (pre_radius));
		//velocity_table_[i] = radius_lpf;
		velocity_table_[i] = radius2Velocity(radius_origin);
 800479a:	8b7c      	ldrh	r4, [r7, #26]
 800479c:	ed97 0a05 	vldr	s0, [r7, #20]
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f7fe fd33 	bl	800320c <_ZN9LineTrace15radius2VelocityEf>
 80047a6:	eef0 7a40 	vmov.f32	s15, s0
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 80047b0:	3304      	adds	r3, #4
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	4413      	add	r3, r2
 80047b6:	edc3 7a00 	vstr	s15, [r3]
		//pre_radius = radius_origin;

		ref_delta_distances_[i] = p_distance[i]; //copy
 80047ba:	8b7b      	ldrh	r3, [r7, #26]
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	693a      	ldr	r2, [r7, #16]
 80047c0:	441a      	add	r2, r3
 80047c2:	8b7b      	ldrh	r3, [r7, #26]
 80047c4:	6812      	ldr	r2, [r2, #0]
 80047c6:	6879      	ldr	r1, [r7, #4]
 80047c8:	3332      	adds	r3, #50	; 0x32
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	440b      	add	r3, r1
 80047ce:	3304      	adds	r3, #4
 80047d0:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 80047d2:	8b7b      	ldrh	r3, [r7, #26]
 80047d4:	3301      	adds	r3, #1
 80047d6:	837b      	strh	r3, [r7, #26]
 80047d8:	e7ae      	b.n	8004738 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x58>
	}

	if(mode_selector_ == SECOND_RUNNING){
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80047e0:	3354      	adds	r3, #84	; 0x54
 80047e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d120      	bne.n	800482c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x14c>
		velocity_table_[0] = min_velocity_;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80047f6:	3310      	adds	r3, #16
 80047f8:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec_, p_distance);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004800:	332c      	adds	r3, #44	; 0x2c
 8004802:	edd3 7a00 	vldr	s15, [r3]
 8004806:	6939      	ldr	r1, [r7, #16]
 8004808:	eeb0 0a67 	vmov.f32	s0, s15
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f7fe fdbb 	bl	8003388 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc_, p_distance);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004818:	3328      	adds	r3, #40	; 0x28
 800481a:	edd3 7a00 	vldr	s15, [r3]
 800481e:	6939      	ldr	r1, [r7, #16]
 8004820:	eeb0 0a67 	vmov.f32	s0, s15
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f7fe fe53 	bl	80034d0 <_ZN9LineTrace20accelerateProcessingEfPKf>
 800482a:	e027      	b.n	800487c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x19c>
	}
	else if(mode_selector_ == THIRD_RUNNING){
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004832:	3354      	adds	r3, #84	; 0x54
 8004834:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004838:	2b02      	cmp	r3, #2
 800483a:	d11f      	bne.n	800487c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x19c>
		velocity_table_[0] = min_velocity2_;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004848:	3310      	adds	r3, #16
 800484a:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec2_, p_distance);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004852:	3334      	adds	r3, #52	; 0x34
 8004854:	edd3 7a00 	vldr	s15, [r3]
 8004858:	6939      	ldr	r1, [r7, #16]
 800485a:	eeb0 0a67 	vmov.f32	s0, s15
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f7fe fd92 	bl	8003388 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc2_, p_distance);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800486a:	3330      	adds	r3, #48	; 0x30
 800486c:	edd3 7a00 	vldr	s15, [r3]
 8004870:	6939      	ldr	r1, [r7, #16]
 8004872:	eeb0 0a67 	vmov.f32	s0, s15
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f7fe fe2a 	bl	80034d0 <_ZN9LineTrace20accelerateProcessingEfPKf>
	}


	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004882:	3310      	adds	r3, #16
 8004884:	2200      	movs	r2, #0
 8004886:	9200      	str	r2, [sp, #0]
 8004888:	f241 7270 	movw	r2, #6000	; 0x1770
 800488c:	490b      	ldr	r1, [pc, #44]	; (80048bc <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1dc>)
 800488e:	4805      	ldr	r0, [pc, #20]	; (80048a4 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 8004890:	f7fc ffe4 	bl	800185c <sd_write_array_float>

}
 8004894:	bf00      	nop
 8004896:	3724      	adds	r7, #36	; 0x24
 8004898:	46bd      	mov	sp, r7
 800489a:	bd90      	pop	{r4, r7, pc}
 800489c:	08018e80 	.word	0x08018e80
 80048a0:	08018e8c 	.word	0x08018e8c
 80048a4:	08018e9c 	.word	0x08018e9c
 80048a8:	08018ea8 	.word	0x08018ea8
 80048ac:	08018eb8 	.word	0x08018eb8
 80048b0:	3727c5ac 	.word	0x3727c5ac
 80048b4:	459c4000 	.word	0x459c4000
 80048b8:	459c4000 	.word	0x459c4000
 80048bc:	08018f00 	.word	0x08018f00

080048c0 <_ZN6LoggerC1Ev>:
#include "AQM0802.h"

uint16_t mon_idx1, mon_idx2;
float mon_data1, mon_data2, mon_data3;

Logger::Logger() : recording_flag_(false), log_index_tim_(0), log_index_tim2_(0), log_index_tim_int_(0), log_index_tim2_int_(0), log_index_dis_(0){}
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80048ce:	f503 7368 	add.w	r3, r3, #928	; 0x3a0
 80048d2:	2200      	movs	r2, #0
 80048d4:	701a      	strb	r2, [r3, #0]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80048dc:	f203 33a2 	addw	r3, r3, #930	; 0x3a2
 80048e0:	2200      	movs	r2, #0
 80048e2:	801a      	strh	r2, [r3, #0]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80048ea:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 80048ee:	2200      	movs	r2, #0
 80048f0:	801a      	strh	r2, [r3, #0]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80048f8:	f203 33a6 	addw	r3, r3, #934	; 0x3a6
 80048fc:	2200      	movs	r2, #0
 80048fe:	801a      	strh	r2, [r3, #0]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004906:	f503 736a 	add.w	r3, r3, #936	; 0x3a8
 800490a:	2200      	movs	r2, #0
 800490c:	801a      	strh	r2, [r3, #0]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004914:	f203 33aa 	addw	r3, r3, #938	; 0x3aa
 8004918:	2200      	movs	r2, #0
 800491a:	801a      	strh	r2, [r3, #0]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4618      	mov	r0, r3
 8004920:	370c      	adds	r7, #12
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr
	...

0800492c <_ZN6Logger10sdCardInitEv>:

bool Logger::sdCardInit()
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8004934:	2300      	movs	r3, #0
 8004936:	73fb      	strb	r3, [r7, #15]

	if(sd_mount() == 1){
 8004938:	f7fd f882 	bl	8001a40 <sd_mount>
 800493c:	4603      	mov	r3, r0
 800493e:	2b01      	cmp	r3, #1
 8004940:	bf0c      	ite	eq
 8004942:	2301      	moveq	r3, #1
 8004944:	2300      	movne	r3, #0
 8004946:	b2db      	uxtb	r3, r3
 8004948:	2b00      	cmp	r3, #0
 800494a:	d016      	beq.n	800497a <_ZN6Logger10sdCardInitEv+0x4e>
	  //printf("mount success\r\n");

	  lcd_clear();
 800494c:	f7fc fba8 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 8004950:	2100      	movs	r1, #0
 8004952:	2000      	movs	r0, #0
 8004954:	f7fc fbb4 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 8004958:	4815      	ldr	r0, [pc, #84]	; (80049b0 <_ZN6Logger10sdCardInitEv+0x84>)
 800495a:	f7fc fbdb 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 800495e:	2101      	movs	r1, #1
 8004960:	2000      	movs	r0, #0
 8004962:	f7fc fbad 	bl	80010c0 <lcd_locate>
	  lcd_printf("success");
 8004966:	4813      	ldr	r0, [pc, #76]	; (80049b4 <_ZN6Logger10sdCardInitEv+0x88>)
 8004968:	f7fc fbd4 	bl	8001114 <lcd_printf>
	  HAL_Delay(500);
 800496c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004970:	f005 face 	bl	8009f10 <HAL_Delay>

	  ret = true;
 8004974:	2301      	movs	r3, #1
 8004976:	73fb      	strb	r3, [r7, #15]
 8004978:	e015      	b.n	80049a6 <_ZN6Logger10sdCardInitEv+0x7a>
	}
	else{
	  //printf("mount error\r\n");

	  lcd_clear();
 800497a:	f7fc fb91 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 800497e:	2100      	movs	r1, #0
 8004980:	2000      	movs	r0, #0
 8004982:	f7fc fb9d 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 8004986:	480a      	ldr	r0, [pc, #40]	; (80049b0 <_ZN6Logger10sdCardInitEv+0x84>)
 8004988:	f7fc fbc4 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 800498c:	2101      	movs	r1, #1
 800498e:	2000      	movs	r0, #0
 8004990:	f7fc fb96 	bl	80010c0 <lcd_locate>
	  lcd_printf("fail");
 8004994:	4808      	ldr	r0, [pc, #32]	; (80049b8 <_ZN6Logger10sdCardInitEv+0x8c>)
 8004996:	f7fc fbbd 	bl	8001114 <lcd_printf>
	  HAL_Delay(1000);
 800499a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800499e:	f005 fab7 	bl	8009f10 <HAL_Delay>

	  ret = false;
 80049a2:	2300      	movs	r3, #0
 80049a4:	73fb      	strb	r3, [r7, #15]
	//data[0] = 100;
	//sd_write_array_int("sdio", "write1.txt", DATA_SIZE, data, ADD_WRITE); //write
	//sd_read_array_int("sdio", "write1.txt", DATA_SIZE, temp); //read
	//sd_write_array_int("sdio", "write2.txt", DATA_SIZE, temp, ADD_WRITE); //write

	return ret;
 80049a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3710      	adds	r7, #16
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}
 80049b0:	08018f10 	.word	0x08018f10
 80049b4:	08018f1c 	.word	0x08018f1c
 80049b8:	08018f24 	.word	0x08018f24

080049bc <_ZN6Logger8storeLogEf>:
void Logger::storeLog(float data)
{
 80049bc:	b480      	push	{r7}
 80049be:	b083      	sub	sp, #12
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80049ce:	f503 7368 	add.w	r3, r3, #928	; 0x3a0
 80049d2:	781b      	ldrb	r3, [r3, #0]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d034      	beq.n	8004a42 <_ZN6Logger8storeLogEf+0x86>
		store_data_float_[log_index_tim_] = data;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80049de:	f203 33a2 	addw	r3, r3, #930	; 0x3a2
 80049e2:	881b      	ldrh	r3, [r3, #0]
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	4413      	add	r3, r2
 80049ea:	683a      	ldr	r2, [r7, #0]
 80049ec:	601a      	str	r2, [r3, #0]

		log_index_tim_++;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80049f4:	f203 33a2 	addw	r3, r3, #930	; 0x3a2
 80049f8:	881b      	ldrh	r3, [r3, #0]
 80049fa:	3301      	adds	r3, #1
 80049fc:	b29a      	uxth	r2, r3
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004a04:	f203 33a2 	addw	r3, r3, #930	; 0x3a2
 8004a08:	801a      	strh	r2, [r3, #0]
		mon_idx1 = log_index_tim_;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004a10:	f203 33a2 	addw	r3, r3, #930	; 0x3a2
 8004a14:	881a      	ldrh	r2, [r3, #0]
 8004a16:	4b0e      	ldr	r3, [pc, #56]	; (8004a50 <_ZN6Logger8storeLogEf+0x94>)
 8004a18:	801a      	strh	r2, [r3, #0]
		mon_data1 = data;
 8004a1a:	4a0e      	ldr	r2, [pc, #56]	; (8004a54 <_ZN6Logger8storeLogEf+0x98>)
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	6013      	str	r3, [r2, #0]

		if(log_index_tim_ >= LOG_DATA_SIZE_TIM) log_index_tim_ = 0;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004a26:	f203 33a2 	addw	r3, r3, #930	; 0x3a2
 8004a2a:	881b      	ldrh	r3, [r3, #0]
 8004a2c:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d906      	bls.n	8004a42 <_ZN6Logger8storeLogEf+0x86>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004a3a:	f203 33a2 	addw	r3, r3, #930	; 0x3a2
 8004a3e:	2200      	movs	r2, #0
 8004a40:	801a      	strh	r2, [r3, #0]
	}
}
 8004a42:	bf00      	nop
 8004a44:	370c      	adds	r7, #12
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr
 8004a4e:	bf00      	nop
 8004a50:	2000021e 	.word	0x2000021e
 8004a54:	20000224 	.word	0x20000224

08004a58 <_ZN6Logger9storeLog2Ef>:

void Logger::storeLog2(float data)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004a6a:	f503 7368 	add.w	r3, r3, #928	; 0x3a0
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d036      	beq.n	8004ae2 <_ZN6Logger9storeLog2Ef+0x8a>
		store_data_float2_[log_index_tim2_] = data;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004a7a:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8004a7e:	881b      	ldrh	r3, [r3, #0]
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	4413      	add	r3, r2
 8004a8a:	683a      	ldr	r2, [r7, #0]
 8004a8c:	601a      	str	r2, [r3, #0]

		log_index_tim2_++;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004a94:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8004a98:	881b      	ldrh	r3, [r3, #0]
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	b29a      	uxth	r2, r3
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004aa4:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8004aa8:	801a      	strh	r2, [r3, #0]
		mon_idx2 = log_index_tim2_;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004ab0:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8004ab4:	881a      	ldrh	r2, [r3, #0]
 8004ab6:	4b0e      	ldr	r3, [pc, #56]	; (8004af0 <_ZN6Logger9storeLog2Ef+0x98>)
 8004ab8:	801a      	strh	r2, [r3, #0]
		mon_data2 = data;
 8004aba:	4a0e      	ldr	r2, [pc, #56]	; (8004af4 <_ZN6Logger9storeLog2Ef+0x9c>)
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	6013      	str	r3, [r2, #0]

		if(log_index_tim2_ >= LOG_DATA_SIZE_TIM2) log_index_tim2_ = 0;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004ac6:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8004aca:	881b      	ldrh	r3, [r3, #0]
 8004acc:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d906      	bls.n	8004ae2 <_ZN6Logger9storeLog2Ef+0x8a>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004ada:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8004ade:	2200      	movs	r2, #0
 8004ae0:	801a      	strh	r2, [r3, #0]
	}
}
 8004ae2:	bf00      	nop
 8004ae4:	370c      	adds	r7, #12
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr
 8004aee:	bf00      	nop
 8004af0:	20000220 	.word	0x20000220
 8004af4:	20000228 	.word	0x20000228

08004af8 <_ZN6Logger21storeDistanceAndThetaEff>:
	}

}

void Logger::storeDistanceAndTheta(float distance, float theta)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b085      	sub	sp, #20
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	ed87 0a02 	vstr	s0, [r7, #8]
 8004b04:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance_[log_index_dis_] = distance;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004b0e:	f203 33aa 	addw	r3, r3, #938	; 0x3aa
 8004b12:	881b      	ldrh	r3, [r3, #0]
 8004b14:	68fa      	ldr	r2, [r7, #12]
 8004b16:	f503 530c 	add.w	r3, r3, #8960	; 0x2300
 8004b1a:	3328      	adds	r3, #40	; 0x28
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	4413      	add	r3, r2
 8004b20:	68ba      	ldr	r2, [r7, #8]
 8004b22:	601a      	str	r2, [r3, #0]
		store_theta_[log_index_dis_] = theta;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004b2a:	f203 33aa 	addw	r3, r3, #938	; 0x3aa
 8004b2e:	881b      	ldrh	r3, [r3, #0]
 8004b30:	68fa      	ldr	r2, [r7, #12]
 8004b32:	f503 536a 	add.w	r3, r3, #14976	; 0x3a80
 8004b36:	3318      	adds	r3, #24
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	4413      	add	r3, r2
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004b46:	f203 33aa 	addw	r3, r3, #938	; 0x3aa
 8004b4a:	881b      	ldrh	r3, [r3, #0]
 8004b4c:	3301      	adds	r3, #1
 8004b4e:	b29a      	uxth	r2, r3
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004b56:	f203 33aa 	addw	r3, r3, #938	; 0x3aa
 8004b5a:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004b62:	f203 33aa 	addw	r3, r3, #938	; 0x3aa
 8004b66:	881b      	ldrh	r3, [r3, #0]
 8004b68:	f241 726f 	movw	r2, #5999	; 0x176f
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d906      	bls.n	8004b7e <_ZN6Logger21storeDistanceAndThetaEff+0x86>
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004b76:	f203 33aa 	addw	r3, r3, #938	; 0x3aa
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	801a      	strh	r2, [r3, #0]
	//}
}
 8004b7e:	bf00      	nop
 8004b80:	3714      	adds	r7, #20
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr

08004b8a <_ZN6Logger23getDistanceArrayPointerEv>:

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
	//}
}
const float *Logger::getDistanceArrayPointer()
{
 8004b8a:	b480      	push	{r7}
 8004b8c:	b083      	sub	sp, #12
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	6078      	str	r0, [r7, #4]
	return store_distance_;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f503 430c 	add.w	r3, r3, #35840	; 0x8c00
 8004b98:	33a0      	adds	r3, #160	; 0xa0
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	370c      	adds	r7, #12
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr

08004ba6 <_ZN6Logger20getThetaArrayPointerEv>:

const float *Logger::getThetaArrayPointer()
{
 8004ba6:	b480      	push	{r7}
 8004ba8:	b083      	sub	sp, #12
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	6078      	str	r0, [r7, #4]
	return store_theta_;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f503 436a 	add.w	r3, r3, #59904	; 0xea00
 8004bb4:	3360      	adds	r3, #96	; 0x60
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	370c      	adds	r7, #12
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr

08004bc2 <_ZN6Logger8saveLogsEPKcS1_>:

void Logger::saveLogs(const char *folder_name, const char *file_name)
{
 8004bc2:	b580      	push	{r7, lr}
 8004bc4:	b086      	sub	sp, #24
 8004bc6:	af02      	add	r7, sp, #8
 8004bc8:	60f8      	str	r0, [r7, #12]
 8004bca:	60b9      	str	r1, [r7, #8]
 8004bcc:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM, store_data_float_, OVER_WRITE); //write
 8004bce:	68fa      	ldr	r2, [r7, #12]
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	9300      	str	r3, [sp, #0]
 8004bd4:	4613      	mov	r3, r2
 8004bd6:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8004bda:	6879      	ldr	r1, [r7, #4]
 8004bdc:	68b8      	ldr	r0, [r7, #8]
 8004bde:	f7fc fe3d 	bl	800185c <sd_write_array_float>
}
 8004be2:	bf00      	nop
 8004be4:	3710      	adds	r7, #16
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}

08004bea <_ZN6Logger9saveLogs2EPKcS1_>:
void Logger::saveLogs2(const char *folder_name, const char *file_name)
{
 8004bea:	b580      	push	{r7, lr}
 8004bec:	b086      	sub	sp, #24
 8004bee:	af02      	add	r7, sp, #8
 8004bf0:	60f8      	str	r0, [r7, #12]
 8004bf2:	60b9      	str	r1, [r7, #8]
 8004bf4:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_float2_, OVER_WRITE); //write
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 8004bfc:	3320      	adds	r3, #32
 8004bfe:	2200      	movs	r2, #0
 8004c00:	9200      	str	r2, [sp, #0]
 8004c02:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8004c06:	6879      	ldr	r1, [r7, #4]
 8004c08:	68b8      	ldr	r0, [r7, #8]
 8004c0a:	f7fc fe27 	bl	800185c <sd_write_array_float>
}
 8004c0e:	bf00      	nop
 8004c10:	3710      	adds	r7, #16
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}

08004c16 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>:
void Logger::saveLogs2Int(const char *folder_name, const char *file_name)
{
	sd_write_array_int(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_int2_, OVER_WRITE); //write
}
void Logger::saveDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004c16:	b580      	push	{r7, lr}
 8004c18:	b086      	sub	sp, #24
 8004c1a:	af02      	add	r7, sp, #8
 8004c1c:	60f8      	str	r0, [r7, #12]
 8004c1e:	60b9      	str	r1, [r7, #8]
 8004c20:	607a      	str	r2, [r7, #4]
 8004c22:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_, OVER_WRITE); //write
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f503 430c 	add.w	r3, r3, #35840	; 0x8c00
 8004c2a:	33a0      	adds	r3, #160	; 0xa0
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	9200      	str	r2, [sp, #0]
 8004c30:	f241 7270 	movw	r2, #6000	; 0x1770
 8004c34:	6879      	ldr	r1, [r7, #4]
 8004c36:	68b8      	ldr	r0, [r7, #8]
 8004c38:	f7fc fe10 	bl	800185c <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_, OVER_WRITE); //write
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f503 436a 	add.w	r3, r3, #59904	; 0xea00
 8004c42:	3360      	adds	r3, #96	; 0x60
 8004c44:	2200      	movs	r2, #0
 8004c46:	9200      	str	r2, [sp, #0]
 8004c48:	f241 7270 	movw	r2, #6000	; 0x1770
 8004c4c:	6839      	ldr	r1, [r7, #0]
 8004c4e:	68b8      	ldr	r0, [r7, #8]
 8004c50:	f7fc fe04 	bl	800185c <sd_write_array_float>
}
 8004c54:	bf00      	nop
 8004c56:	3710      	adds	r7, #16
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}

08004c5c <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>:

void Logger::saveDistanceAndTheta2(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b086      	sub	sp, #24
 8004c60:	af02      	add	r7, sp, #8
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	60b9      	str	r1, [r7, #8]
 8004c66:	607a      	str	r2, [r7, #4]
 8004c68:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance2_, OVER_WRITE); //write
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	f503 33a4 	add.w	r3, r3, #83968	; 0x14800
 8004c70:	3320      	adds	r3, #32
 8004c72:	2200      	movs	r2, #0
 8004c74:	9200      	str	r2, [sp, #0]
 8004c76:	f241 7270 	movw	r2, #6000	; 0x1770
 8004c7a:	6879      	ldr	r1, [r7, #4]
 8004c7c:	68b8      	ldr	r0, [r7, #8]
 8004c7e:	f7fc fded 	bl	800185c <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta2_, OVER_WRITE); //write
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	f503 33d2 	add.w	r3, r3, #107520	; 0x1a400
 8004c88:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	9200      	str	r2, [sp, #0]
 8004c90:	f241 7270 	movw	r2, #6000	; 0x1770
 8004c94:	6839      	ldr	r1, [r7, #0]
 8004c96:	68b8      	ldr	r0, [r7, #8]
 8004c98:	f7fc fde0 	bl	800185c <sd_write_array_float>
}
 8004c9c:	bf00      	nop
 8004c9e:	3710      	adds	r7, #16
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>:

void Logger::importDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	60f8      	str	r0, [r7, #12]
 8004cac:	60b9      	str	r1, [r7, #8]
 8004cae:	607a      	str	r2, [r7, #4]
 8004cb0:	603b      	str	r3, [r7, #0]
	sd_read_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_); //read
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f503 430c 	add.w	r3, r3, #35840	; 0x8c00
 8004cb8:	33a0      	adds	r3, #160	; 0xa0
 8004cba:	f241 7270 	movw	r2, #6000	; 0x1770
 8004cbe:	6879      	ldr	r1, [r7, #4]
 8004cc0:	68b8      	ldr	r0, [r7, #8]
 8004cc2:	f7fc fe31 	bl	8001928 <sd_read_array_float>
	sd_read_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_); //read
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	f503 436a 	add.w	r3, r3, #59904	; 0xea00
 8004ccc:	3360      	adds	r3, #96	; 0x60
 8004cce:	f241 7270 	movw	r2, #6000	; 0x1770
 8004cd2:	6839      	ldr	r1, [r7, #0]
 8004cd4:	68b8      	ldr	r0, [r7, #8]
 8004cd6:	f7fc fe27 	bl	8001928 <sd_read_array_float>
}
 8004cda:	bf00      	nop
 8004cdc:	3710      	adds	r7, #16
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}

08004ce2 <_ZN6Logger13resetLogsDis2Ev>:

	log_index_tim_ = 0;
}

void Logger::resetLogsDis2()
{
 8004ce2:	b480      	push	{r7}
 8004ce4:	b08b      	sub	sp, #44	; 0x2c
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	6078      	str	r0, [r7, #4]
	for(auto &log : store_distance2_){
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f503 33a4 	add.w	r3, r3, #83968	; 0x14800
 8004cf0:	3320      	adds	r3, #32
 8004cf2:	61fb      	str	r3, [r7, #28]
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	627b      	str	r3, [r7, #36]	; 0x24
 8004cf8:	69fb      	ldr	r3, [r7, #28]
 8004cfa:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004cfe:	3340      	adds	r3, #64	; 0x40
 8004d00:	61bb      	str	r3, [r7, #24]
 8004d02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d04:	69bb      	ldr	r3, [r7, #24]
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d009      	beq.n	8004d1e <_ZN6Logger13resetLogsDis2Ev+0x3c>
 8004d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0c:	617b      	str	r3, [r7, #20]
		log = 0;
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	f04f 0200 	mov.w	r2, #0
 8004d14:	601a      	str	r2, [r3, #0]
	for(auto &log : store_distance2_){
 8004d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d18:	3304      	adds	r3, #4
 8004d1a:	627b      	str	r3, [r7, #36]	; 0x24
 8004d1c:	e7f1      	b.n	8004d02 <_ZN6Logger13resetLogsDis2Ev+0x20>
	}
	for(auto &log : store_theta2_){
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f503 33d2 	add.w	r3, r3, #107520	; 0x1a400
 8004d24:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8004d28:	613b      	str	r3, [r7, #16]
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	623b      	str	r3, [r7, #32]
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004d34:	3340      	adds	r3, #64	; 0x40
 8004d36:	60fb      	str	r3, [r7, #12]
 8004d38:	6a3a      	ldr	r2, [r7, #32]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d009      	beq.n	8004d54 <_ZN6Logger13resetLogsDis2Ev+0x72>
 8004d40:	6a3b      	ldr	r3, [r7, #32]
 8004d42:	60bb      	str	r3, [r7, #8]
		log = 0;
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	f04f 0200 	mov.w	r2, #0
 8004d4a:	601a      	str	r2, [r3, #0]
	for(auto &log : store_theta2_){
 8004d4c:	6a3b      	ldr	r3, [r7, #32]
 8004d4e:	3304      	adds	r3, #4
 8004d50:	623b      	str	r3, [r7, #32]
 8004d52:	e7f1      	b.n	8004d38 <_ZN6Logger13resetLogsDis2Ev+0x56>
	}

	log_index_tim2_ = 0;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004d5a:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8004d5e:	2200      	movs	r2, #0
 8004d60:	801a      	strh	r2, [r3, #0]
}
 8004d62:	bf00      	nop
 8004d64:	372c      	adds	r7, #44	; 0x2c
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr

08004d6e <_ZN6Logger13resetLogsTim1Ev>:

void Logger::resetLogsTim1()
{
 8004d6e:	b480      	push	{r7}
 8004d70:	b087      	sub	sp, #28
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
	for(auto &log : store_data_float_){
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	613b      	str	r3, [r7, #16]
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	617b      	str	r3, [r7, #20]
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 8004d84:	3320      	adds	r3, #32
 8004d86:	60fb      	str	r3, [r7, #12]
 8004d88:	697a      	ldr	r2, [r7, #20]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d009      	beq.n	8004da4 <_ZN6Logger13resetLogsTim1Ev+0x36>
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	60bb      	str	r3, [r7, #8]
		log = 0;
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	f04f 0200 	mov.w	r2, #0
 8004d9a:	601a      	str	r2, [r3, #0]
	for(auto &log : store_data_float_){
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	3304      	adds	r3, #4
 8004da0:	617b      	str	r3, [r7, #20]
 8004da2:	e7f1      	b.n	8004d88 <_ZN6Logger13resetLogsTim1Ev+0x1a>
	}

	log_index_tim_ = 0;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004daa:	f203 33a2 	addw	r3, r3, #930	; 0x3a2
 8004dae:	2200      	movs	r2, #0
 8004db0:	801a      	strh	r2, [r3, #0]
}
 8004db2:	bf00      	nop
 8004db4:	371c      	adds	r7, #28
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr

08004dbe <_ZN6Logger13resetLogsTim2Ev>:

void Logger::resetLogsTim2()
{
 8004dbe:	b480      	push	{r7}
 8004dc0:	b087      	sub	sp, #28
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
	for(auto &log : store_data_float2_){
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 8004dcc:	3320      	adds	r3, #32
 8004dce:	613b      	str	r3, [r7, #16]
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	617b      	str	r3, [r7, #20]
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 8004dda:	3320      	adds	r3, #32
 8004ddc:	60fb      	str	r3, [r7, #12]
 8004dde:	697a      	ldr	r2, [r7, #20]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d009      	beq.n	8004dfa <_ZN6Logger13resetLogsTim2Ev+0x3c>
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	60bb      	str	r3, [r7, #8]
		log = 0;
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	f04f 0200 	mov.w	r2, #0
 8004df0:	601a      	str	r2, [r3, #0]
	for(auto &log : store_data_float2_){
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	3304      	adds	r3, #4
 8004df6:	617b      	str	r3, [r7, #20]
 8004df8:	e7f1      	b.n	8004dde <_ZN6Logger13resetLogsTim2Ev+0x20>
	}

	log_index_tim2_ = 0;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004e00:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8004e04:	2200      	movs	r2, #0
 8004e06:	801a      	strh	r2, [r3, #0]
}
 8004e08:	bf00      	nop
 8004e0a:	371c      	adds	r7, #28
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr

08004e14 <_ZN6Logger8resetIdxEv>:
void Logger::resetIdx()
{
 8004e14:	b480      	push	{r7}
 8004e16:	b083      	sub	sp, #12
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
	log_index_tim_ = 0;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004e22:	f203 33a2 	addw	r3, r3, #930	; 0x3a2
 8004e26:	2200      	movs	r2, #0
 8004e28:	801a      	strh	r2, [r3, #0]
	log_index_tim2_ = 0;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004e30:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8004e34:	2200      	movs	r2, #0
 8004e36:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004e3e:	f203 33aa 	addw	r3, r3, #938	; 0x3aa
 8004e42:	2200      	movs	r2, #0
 8004e44:	801a      	strh	r2, [r3, #0]
}
 8004e46:	bf00      	nop
 8004e48:	370c      	adds	r7, #12
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr

08004e52 <_ZN6Logger5startEv>:

void Logger::start()
{
 8004e52:	b480      	push	{r7}
 8004e54:	b083      	sub	sp, #12
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
	log_index_tim_ = 0;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004e60:	f203 33a2 	addw	r3, r3, #930	; 0x3a2
 8004e64:	2200      	movs	r2, #0
 8004e66:	801a      	strh	r2, [r3, #0]
	log_index_tim2_ = 0;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004e6e:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8004e72:	2200      	movs	r2, #0
 8004e74:	801a      	strh	r2, [r3, #0]
	recording_flag_ = true;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004e7c:	f503 7368 	add.w	r3, r3, #928	; 0x3a0
 8004e80:	2201      	movs	r2, #1
 8004e82:	701a      	strb	r2, [r3, #0]
}
 8004e84:	bf00      	nop
 8004e86:	370c      	adds	r7, #12
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr

08004e90 <_ZN6Logger4stopEv>:

void Logger::stop()
{
 8004e90:	b480      	push	{r7}
 8004e92:	b083      	sub	sp, #12
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
	recording_flag_ = false;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004e9e:	f503 7368 	add.w	r3, r3, #928	; 0x3a0
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	701a      	strb	r2, [r3, #0]
}
 8004ea6:	bf00      	nop
 8004ea8:	370c      	adds	r7, #12
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr

08004eb2 <_ZN5MotorC1Ev>:

#include "Motor.hpp"
#include "G_variables.h"


Motor::Motor() : temp_left_counter_period_(0), temp_right_counter_period_(0){}
 8004eb2:	b480      	push	{r7}
 8004eb4:	b083      	sub	sp, #12
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	6078      	str	r0, [r7, #4]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	801a      	strh	r2, [r3, #0]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	805a      	strh	r2, [r3, #2]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4618      	mov	r0, r3
 8004eca:	370c      	adds	r7, #12
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr

08004ed4 <_ZN5Motor4initEv>:

void Motor::init()
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b082      	sub	sp, #8
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
	//PWM start
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8004edc:	2108      	movs	r1, #8
 8004ede:	4805      	ldr	r0, [pc, #20]	; (8004ef4 <_ZN5Motor4initEv+0x20>)
 8004ee0:	f00a f9de 	bl	800f2a0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8004ee4:	210c      	movs	r1, #12
 8004ee6:	4803      	ldr	r0, [pc, #12]	; (8004ef4 <_ZN5Motor4initEv+0x20>)
 8004ee8:	f00a f9da 	bl	800f2a0 <HAL_TIM_PWM_Start>

}
 8004eec:	bf00      	nop
 8004eee:	3708      	adds	r7, #8
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}
 8004ef4:	20047718 	.word	0x20047718

08004ef8 <_ZN5Motor9motorCtrlEv>:

void Motor::motorCtrl()
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b084      	sub	sp, #16
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
	uint16_t left_counter_period, right_counter_period;

	if(temp_left_counter_period_ < 0) {
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	da0d      	bge.n	8004f26 <_ZN5Motor9motorCtrlEv+0x2e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004f10:	481f      	ldr	r0, [pc, #124]	; (8004f90 <_ZN5Motor9motorCtrlEv+0x98>)
 8004f12:	f006 fa93 	bl	800b43c <HAL_GPIO_WritePin>
		left_counter_period = -1 * temp_left_counter_period_;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	425b      	negs	r3, r3
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	81fb      	strh	r3, [r7, #14]
 8004f24:	e00a      	b.n	8004f3c <_ZN5Motor9motorCtrlEv+0x44>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8004f26:	2201      	movs	r2, #1
 8004f28:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004f2c:	4818      	ldr	r0, [pc, #96]	; (8004f90 <_ZN5Motor9motorCtrlEv+0x98>)
 8004f2e:	f006 fa85 	bl	800b43c <HAL_GPIO_WritePin>
		left_counter_period = temp_left_counter_period_;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	81fb      	strh	r3, [r7, #14]
	}

	if(temp_right_counter_period_ < 0) {
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	da0d      	bge.n	8004f62 <_ZN5Motor9motorCtrlEv+0x6a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8004f46:	2201      	movs	r2, #1
 8004f48:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004f4c:	4810      	ldr	r0, [pc, #64]	; (8004f90 <_ZN5Motor9motorCtrlEv+0x98>)
 8004f4e:	f006 fa75 	bl	800b43c <HAL_GPIO_WritePin>
		right_counter_period = -1 * temp_right_counter_period_;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004f58:	b29b      	uxth	r3, r3
 8004f5a:	425b      	negs	r3, r3
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	81bb      	strh	r3, [r7, #12]
 8004f60:	e00a      	b.n	8004f78 <_ZN5Motor9motorCtrlEv+0x80>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 8004f62:	2200      	movs	r2, #0
 8004f64:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004f68:	4809      	ldr	r0, [pc, #36]	; (8004f90 <_ZN5Motor9motorCtrlEv+0x98>)
 8004f6a:	f006 fa67 	bl	800b43c <HAL_GPIO_WritePin>
		right_counter_period = temp_right_counter_period_;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	81bb      	strh	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, left_counter_period);
 8004f78:	89fa      	ldrh	r2, [r7, #14]
 8004f7a:	4b06      	ldr	r3, [pc, #24]	; (8004f94 <_ZN5Motor9motorCtrlEv+0x9c>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, right_counter_period);
 8004f80:	89ba      	ldrh	r2, [r7, #12]
 8004f82:	4b04      	ldr	r3, [pc, #16]	; (8004f94 <_ZN5Motor9motorCtrlEv+0x9c>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004f88:	bf00      	nop
 8004f8a:	3710      	adds	r7, #16
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}
 8004f90:	40020c00 	.word	0x40020c00
 8004f94:	20047718 	.word	0x20047718

08004f98 <_ZN5Motor8setRatioEdd>:

void Motor::setRatio(double left_ratio, double right_ratio)
{
 8004f98:	b590      	push	{r4, r7, lr}
 8004f9a:	b087      	sub	sp, #28
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6178      	str	r0, [r7, #20]
 8004fa0:	ed87 0b02 	vstr	d0, [r7, #8]
 8004fa4:	ed87 1b00 	vstr	d1, [r7]
	if(left_ratio > 1) left_ratio = 1;
 8004fa8:	f04f 0200 	mov.w	r2, #0
 8004fac:	4b30      	ldr	r3, [pc, #192]	; (8005070 <_ZN5Motor8setRatioEdd+0xd8>)
 8004fae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004fb2:	f7fb fdc9 	bl	8000b48 <__aeabi_dcmpgt>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d005      	beq.n	8004fc8 <_ZN5Motor8setRatioEdd+0x30>
 8004fbc:	f04f 0300 	mov.w	r3, #0
 8004fc0:	4c2b      	ldr	r4, [pc, #172]	; (8005070 <_ZN5Motor8setRatioEdd+0xd8>)
 8004fc2:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8004fc6:	e00e      	b.n	8004fe6 <_ZN5Motor8setRatioEdd+0x4e>
	else if(left_ratio < -1) left_ratio = -1;
 8004fc8:	f04f 0200 	mov.w	r2, #0
 8004fcc:	4b29      	ldr	r3, [pc, #164]	; (8005074 <_ZN5Motor8setRatioEdd+0xdc>)
 8004fce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004fd2:	f7fb fd9b 	bl	8000b0c <__aeabi_dcmplt>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d004      	beq.n	8004fe6 <_ZN5Motor8setRatioEdd+0x4e>
 8004fdc:	f04f 0300 	mov.w	r3, #0
 8004fe0:	4c24      	ldr	r4, [pc, #144]	; (8005074 <_ZN5Motor8setRatioEdd+0xdc>)
 8004fe2:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if(right_ratio > 1) right_ratio = 1;
 8004fe6:	f04f 0200 	mov.w	r2, #0
 8004fea:	4b21      	ldr	r3, [pc, #132]	; (8005070 <_ZN5Motor8setRatioEdd+0xd8>)
 8004fec:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004ff0:	f7fb fdaa 	bl	8000b48 <__aeabi_dcmpgt>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d005      	beq.n	8005006 <_ZN5Motor8setRatioEdd+0x6e>
 8004ffa:	f04f 0300 	mov.w	r3, #0
 8004ffe:	4c1c      	ldr	r4, [pc, #112]	; (8005070 <_ZN5Motor8setRatioEdd+0xd8>)
 8005000:	e9c7 3400 	strd	r3, r4, [r7]
 8005004:	e00e      	b.n	8005024 <_ZN5Motor8setRatioEdd+0x8c>
	else if(right_ratio < -1) right_ratio = -1;
 8005006:	f04f 0200 	mov.w	r2, #0
 800500a:	4b1a      	ldr	r3, [pc, #104]	; (8005074 <_ZN5Motor8setRatioEdd+0xdc>)
 800500c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005010:	f7fb fd7c 	bl	8000b0c <__aeabi_dcmplt>
 8005014:	4603      	mov	r3, r0
 8005016:	2b00      	cmp	r3, #0
 8005018:	d004      	beq.n	8005024 <_ZN5Motor8setRatioEdd+0x8c>
 800501a:	f04f 0300 	mov.w	r3, #0
 800501e:	4c15      	ldr	r4, [pc, #84]	; (8005074 <_ZN5Motor8setRatioEdd+0xdc>)
 8005020:	e9c7 3400 	strd	r3, r4, [r7]

	temp_left_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * left_ratio);
 8005024:	f04f 0200 	mov.w	r2, #0
 8005028:	4b13      	ldr	r3, [pc, #76]	; (8005078 <_ZN5Motor8setRatioEdd+0xe0>)
 800502a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800502e:	f7fb fafb 	bl	8000628 <__aeabi_dmul>
 8005032:	4603      	mov	r3, r0
 8005034:	460c      	mov	r4, r1
 8005036:	4618      	mov	r0, r3
 8005038:	4621      	mov	r1, r4
 800503a:	f7fb fda5 	bl	8000b88 <__aeabi_d2iz>
 800503e:	4603      	mov	r3, r0
 8005040:	b21a      	sxth	r2, r3
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	801a      	strh	r2, [r3, #0]
	temp_right_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * right_ratio);
 8005046:	f04f 0200 	mov.w	r2, #0
 800504a:	4b0b      	ldr	r3, [pc, #44]	; (8005078 <_ZN5Motor8setRatioEdd+0xe0>)
 800504c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005050:	f7fb faea 	bl	8000628 <__aeabi_dmul>
 8005054:	4603      	mov	r3, r0
 8005056:	460c      	mov	r4, r1
 8005058:	4618      	mov	r0, r3
 800505a:	4621      	mov	r1, r4
 800505c:	f7fb fd94 	bl	8000b88 <__aeabi_d2iz>
 8005060:	4603      	mov	r3, r0
 8005062:	b21a      	sxth	r2, r3
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	805a      	strh	r2, [r3, #2]

}
 8005068:	bf00      	nop
 800506a:	371c      	adds	r7, #28
 800506c:	46bd      	mov	sp, r7
 800506e:	bd90      	pop	{r4, r7, pc}
 8005070:	3ff00000 	.word	0x3ff00000
 8005074:	bff00000 	.word	0xbff00000
 8005078:	409c2000 	.word	0x409c2000

0800507c <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>:

#define DELTA_T 0.001

float monitor_x, monitor_y, monitor_theta;

Odometry::Odometry(Encoder *encoder, IMU *imu, VelocityCtrl *velocity_ctrl) : x_robot_(0), y_robot_(0), theta_(0), x_sens_(0), y_sens_(0)
 800507c:	b490      	push	{r4, r7}
 800507e:	b084      	sub	sp, #16
 8005080:	af00      	add	r7, sp, #0
 8005082:	60f8      	str	r0, [r7, #12]
 8005084:	60b9      	str	r1, [r7, #8]
 8005086:	607a      	str	r2, [r7, #4]
 8005088:	603b      	str	r3, [r7, #0]
 800508a:	68fa      	ldr	r2, [r7, #12]
 800508c:	f04f 0300 	mov.w	r3, #0
 8005090:	f04f 0400 	mov.w	r4, #0
 8005094:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8005098:	68fa      	ldr	r2, [r7, #12]
 800509a:	f04f 0300 	mov.w	r3, #0
 800509e:	f04f 0400 	mov.w	r4, #0
 80050a2:	e9c2 3406 	strd	r3, r4, [r2, #24]
 80050a6:	68fa      	ldr	r2, [r7, #12]
 80050a8:	f04f 0300 	mov.w	r3, #0
 80050ac:	f04f 0400 	mov.w	r4, #0
 80050b0:	e9c2 3408 	strd	r3, r4, [r2, #32]
 80050b4:	68fa      	ldr	r2, [r7, #12]
 80050b6:	f04f 0300 	mov.w	r3, #0
 80050ba:	f04f 0400 	mov.w	r4, #0
 80050be:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
 80050c2:	68fa      	ldr	r2, [r7, #12]
 80050c4:	f04f 0300 	mov.w	r3, #0
 80050c8:	f04f 0400 	mov.w	r4, #0
 80050cc:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
{
	encoder_ = encoder;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	68ba      	ldr	r2, [r7, #8]
 80050d4:	601a      	str	r2, [r3, #0]
	imu_ = imu;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	683a      	ldr	r2, [r7, #0]
 80050e0:	609a      	str	r2, [r3, #8]
}
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	4618      	mov	r0, r3
 80050e6:	3710      	adds	r7, #16
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bc90      	pop	{r4, r7}
 80050ec:	4770      	bx	lr
	...

080050f0 <_ZN8Odometry12calcPotitionEv>:


void Odometry::calcPotition()
{
 80050f0:	b590      	push	{r4, r7, lr}
 80050f2:	b085      	sub	sp, #20
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
	//float current_velocity = velocity_ctrl_->getCurrentVelocity();
	double current_omega = imu_->getOmega();
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	4618      	mov	r0, r3
 80050fe:	f7fc fe67 	bl	8001dd0 <_ZN3IMU8getOmegaEv>
 8005102:	ee10 3a10 	vmov	r3, s0
 8005106:	4618      	mov	r0, r3
 8005108:	f7fb fa36 	bl	8000578 <__aeabi_f2d>
 800510c:	4603      	mov	r3, r0
 800510e:	460c      	mov	r4, r1
 8005110:	e9c7 3402 	strd	r3, r4, [r7, #8]
	//float distance = encoder_->getDistance();

	delta_theta_ = current_omega * DELTA_T;
 8005114:	a310      	add	r3, pc, #64	; (adr r3, 8005158 <_ZN8Odometry12calcPotitionEv+0x68>)
 8005116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800511a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800511e:	f7fb fa83 	bl	8000628 <__aeabi_dmul>
 8005122:	4603      	mov	r3, r0
 8005124:	460c      	mov	r4, r1
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38

	//x_robot_ = x_robot_ + distance * cos(theta_ + delta_theta_ / 2);
	//y_robot_ = y_robot_ + distance * sin(theta_ + delta_theta_ / 2);
	theta_= theta_ + delta_theta_;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8005138:	461a      	mov	r2, r3
 800513a:	4623      	mov	r3, r4
 800513c:	f7fb f8be 	bl	80002bc <__adddf3>
 8005140:	4603      	mov	r3, r0
 8005142:	460c      	mov	r4, r1
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	e9c2 3408 	strd	r3, r4, [r2, #32]
	//y_sens_ = y_robot_ + SENSOR_LENGTH * sin(theta_);

	//monitor_x = x_sens_;
	//monitor_y = y_sens_;
	//monitor_theta = theta_;
}
 800514a:	bf00      	nop
 800514c:	3714      	adds	r7, #20
 800514e:	46bd      	mov	sp, r7
 8005150:	bd90      	pop	{r4, r7, pc}
 8005152:	bf00      	nop
 8005154:	f3af 8000 	nop.w
 8005158:	d2f1a9fc 	.word	0xd2f1a9fc
 800515c:	3f50624d 	.word	0x3f50624d

08005160 <_ZN8Odometry4flipEv>:

void Odometry::flip()
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b082      	sub	sp, #8
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
	calcPotition();
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f7ff ffc1 	bl	80050f0 <_ZN8Odometry12calcPotitionEv>
}
 800516e:	bf00      	nop
 8005170:	3708      	adds	r7, #8
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}

08005176 <_ZN8Odometry8getThetaEv>:
{
	return y_sens_;
}

double Odometry::getTheta()
{
 8005176:	b490      	push	{r4, r7}
 8005178:	b082      	sub	sp, #8
 800517a:	af00      	add	r7, sp, #0
 800517c:	6078      	str	r0, [r7, #4]
	return theta_;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8005184:	ec44 3b17 	vmov	d7, r3, r4
}
 8005188:	eeb0 0a47 	vmov.f32	s0, s14
 800518c:	eef0 0a67 	vmov.f32	s1, s15
 8005190:	3708      	adds	r7, #8
 8005192:	46bd      	mov	sp, r7
 8005194:	bc90      	pop	{r4, r7}
 8005196:	4770      	bx	lr

08005198 <_ZN8Odometry13getDeltaThetaEv>:

double Odometry::getDeltaTheta()
{
 8005198:	b490      	push	{r4, r7}
 800519a:	b082      	sub	sp, #8
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
	return delta_theta_;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 80051a6:	ec44 3b17 	vmov	d7, r3, r4
}
 80051aa:	eeb0 0a47 	vmov.f32	s0, s14
 80051ae:	eef0 0a67 	vmov.f32	s1, s15
 80051b2:	3708      	adds	r7, #8
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bc90      	pop	{r4, r7}
 80051b8:	4770      	bx	lr

080051ba <_ZN8Odometry13clearPotitionEv>:

void Odometry::clearPotition()
{
 80051ba:	b490      	push	{r4, r7}
 80051bc:	b082      	sub	sp, #8
 80051be:	af00      	add	r7, sp, #0
 80051c0:	6078      	str	r0, [r7, #4]
	x_sens_ = 0;
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	f04f 0300 	mov.w	r3, #0
 80051c8:	f04f 0400 	mov.w	r4, #0
 80051cc:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = 0;
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	f04f 0300 	mov.w	r3, #0
 80051d6:	f04f 0400 	mov.w	r4, #0
 80051da:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	theta_ = 0;
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	f04f 0300 	mov.w	r3, #0
 80051e4:	f04f 0400 	mov.w	r4, #0
 80051e8:	e9c2 3408 	strd	r3, r4, [r2, #32]
}
 80051ec:	bf00      	nop
 80051ee:	3708      	adds	r7, #8
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bc90      	pop	{r4, r7}
 80051f4:	4770      	bx	lr
	...

080051f8 <_ZN13PathFollowingC1Ev>:

uint16_t mon_ref_num;
double mon_x, mon_y, mon_th;
double mon_log_dis, mon_log_th;

PathFollowing::PathFollowing() : execute_flag_(false), x_tar_(0), y_tar_(0), th_tar_(0), ref_num(0)
 80051f8:	b490      	push	{r4, r7}
 80051fa:	b082      	sub	sp, #8
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2200      	movs	r2, #0
 8005204:	701a      	strb	r2, [r3, #0]
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	f04f 0300 	mov.w	r3, #0
 800520c:	f04f 0400 	mov.w	r4, #0
 8005210:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	f04f 0300 	mov.w	r3, #0
 800521a:	f04f 0400 	mov.w	r4, #0
 800521e:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	f04f 0300 	mov.w	r3, #0
 8005228:	f04f 0400 	mov.w	r4, #0
 800522c:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8005236:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800523a:	2200      	movs	r2, #0
 800523c:	801a      	strh	r2, [r3, #0]
{
	rtParam.kx = 0;
 800523e:	4a29      	ldr	r2, [pc, #164]	; (80052e4 <_ZN13PathFollowingC1Ev+0xec>)
 8005240:	f04f 0300 	mov.w	r3, #0
 8005244:	f04f 0400 	mov.w	r4, #0
 8005248:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = 0;
 800524c:	4a25      	ldr	r2, [pc, #148]	; (80052e4 <_ZN13PathFollowingC1Ev+0xec>)
 800524e:	f04f 0300 	mov.w	r3, #0
 8005252:	f04f 0400 	mov.w	r4, #0
 8005256:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = 0;
 800525a:	4a22      	ldr	r2, [pc, #136]	; (80052e4 <_ZN13PathFollowingC1Ev+0xec>)
 800525c:	f04f 0300 	mov.w	r3, #0
 8005260:	f04f 0400 	mov.w	r4, #0
 8005264:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.target_x = 0;
 8005268:	4a1f      	ldr	r2, [pc, #124]	; (80052e8 <_ZN13PathFollowingC1Ev+0xf0>)
 800526a:	f04f 0300 	mov.w	r3, #0
 800526e:	f04f 0400 	mov.w	r4, #0
 8005272:	e9c2 3400 	strd	r3, r4, [r2]
	rtU.target_y = 0;
 8005276:	4a1c      	ldr	r2, [pc, #112]	; (80052e8 <_ZN13PathFollowingC1Ev+0xf0>)
 8005278:	f04f 0300 	mov.w	r3, #0
 800527c:	f04f 0400 	mov.w	r4, #0
 8005280:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtU.th = 0;
 8005284:	4a18      	ldr	r2, [pc, #96]	; (80052e8 <_ZN13PathFollowingC1Ev+0xf0>)
 8005286:	f04f 0300 	mov.w	r3, #0
 800528a:	f04f 0400 	mov.w	r4, #0
 800528e:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.x = 0;
 8005292:	4a15      	ldr	r2, [pc, #84]	; (80052e8 <_ZN13PathFollowingC1Ev+0xf0>)
 8005294:	f04f 0300 	mov.w	r3, #0
 8005298:	f04f 0400 	mov.w	r4, #0
 800529c:	e9c2 3406 	strd	r3, r4, [r2, #24]
	rtU.y = 0;
 80052a0:	4a11      	ldr	r2, [pc, #68]	; (80052e8 <_ZN13PathFollowingC1Ev+0xf0>)
 80052a2:	f04f 0300 	mov.w	r3, #0
 80052a6:	f04f 0400 	mov.w	r4, #0
 80052aa:	e9c2 3408 	strd	r3, r4, [r2, #32]
	rtU.th_cur = 0;
 80052ae:	4a0e      	ldr	r2, [pc, #56]	; (80052e8 <_ZN13PathFollowingC1Ev+0xf0>)
 80052b0:	f04f 0300 	mov.w	r3, #0
 80052b4:	f04f 0400 	mov.w	r4, #0
 80052b8:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	rtY.V_tar = 0;
 80052bc:	4a0b      	ldr	r2, [pc, #44]	; (80052ec <_ZN13PathFollowingC1Ev+0xf4>)
 80052be:	f04f 0300 	mov.w	r3, #0
 80052c2:	f04f 0400 	mov.w	r4, #0
 80052c6:	e9c2 3400 	strd	r3, r4, [r2]
	rtY.tar = 0;
 80052ca:	4a08      	ldr	r2, [pc, #32]	; (80052ec <_ZN13PathFollowingC1Ev+0xf4>)
 80052cc:	f04f 0300 	mov.w	r3, #0
 80052d0:	f04f 0400 	mov.w	r4, #0
 80052d4:	e9c2 3402 	strd	r3, r4, [r2, #8]

}
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	4618      	mov	r0, r3
 80052dc:	3708      	adds	r7, #8
 80052de:	46bd      	mov	sp, r7
 80052e0:	bc90      	pop	{r4, r7}
 80052e2:	4770      	bx	lr
 80052e4:	20047c18 	.word	0x20047c18
 80052e8:	20047ba8 	.word	0x20047ba8
 80052ec:	20047c08 	.word	0x20047c08

080052f0 <_ZN13PathFollowing4initEv>:
	}

}

void PathFollowing::init()
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b088      	sub	sp, #32
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
	path_following_initialize();
 80052f8:	f001 fd62 	bl	8006dc0 <path_following_initialize>

	double temp_kx, temp_ky, temp_kt;
	sd_read_array_double("PARAMS", "KX.TXT", 1, &temp_kx);
 80052fc:	f107 0318 	add.w	r3, r7, #24
 8005300:	2201      	movs	r2, #1
 8005302:	4915      	ldr	r1, [pc, #84]	; (8005358 <_ZN13PathFollowing4initEv+0x68>)
 8005304:	4815      	ldr	r0, [pc, #84]	; (800535c <_ZN13PathFollowing4initEv+0x6c>)
 8005306:	f7fc fb55 	bl	80019b4 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KY.TXT", 1, &temp_ky);
 800530a:	f107 0310 	add.w	r3, r7, #16
 800530e:	2201      	movs	r2, #1
 8005310:	4913      	ldr	r1, [pc, #76]	; (8005360 <_ZN13PathFollowing4initEv+0x70>)
 8005312:	4812      	ldr	r0, [pc, #72]	; (800535c <_ZN13PathFollowing4initEv+0x6c>)
 8005314:	f7fc fb4e 	bl	80019b4 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KT.TXT", 1, &temp_kt);
 8005318:	f107 0308 	add.w	r3, r7, #8
 800531c:	2201      	movs	r2, #1
 800531e:	4911      	ldr	r1, [pc, #68]	; (8005364 <_ZN13PathFollowing4initEv+0x74>)
 8005320:	480e      	ldr	r0, [pc, #56]	; (800535c <_ZN13PathFollowing4initEv+0x6c>)
 8005322:	f7fc fb47 	bl	80019b4 <sd_read_array_double>
	setGain(temp_kx, temp_ky, temp_kt);
 8005326:	ed97 7b06 	vldr	d7, [r7, #24]
 800532a:	ed97 6b04 	vldr	d6, [r7, #16]
 800532e:	ed97 5b02 	vldr	d5, [r7, #8]
 8005332:	eeb0 2a45 	vmov.f32	s4, s10
 8005336:	eef0 2a65 	vmov.f32	s5, s11
 800533a:	eeb0 1a46 	vmov.f32	s2, s12
 800533e:	eef0 1a66 	vmov.f32	s3, s13
 8005342:	eeb0 0a47 	vmov.f32	s0, s14
 8005346:	eef0 0a67 	vmov.f32	s1, s15
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f000 f80c 	bl	8005368 <_ZN13PathFollowing7setGainEddd>
}
 8005350:	bf00      	nop
 8005352:	3720      	adds	r7, #32
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}
 8005358:	08018f2c 	.word	0x08018f2c
 800535c:	08018f34 	.word	0x08018f34
 8005360:	08018f3c 	.word	0x08018f3c
 8005364:	08018f44 	.word	0x08018f44

08005368 <_ZN13PathFollowing7setGainEddd>:

void PathFollowing::setGain(double kx, double ky, double kt)
{
 8005368:	b490      	push	{r4, r7}
 800536a:	b088      	sub	sp, #32
 800536c:	af00      	add	r7, sp, #0
 800536e:	61f8      	str	r0, [r7, #28]
 8005370:	ed87 0b04 	vstr	d0, [r7, #16]
 8005374:	ed87 1b02 	vstr	d1, [r7, #8]
 8005378:	ed87 2b00 	vstr	d2, [r7]
	rtParam.kx = kx;
 800537c:	4a09      	ldr	r2, [pc, #36]	; (80053a4 <_ZN13PathFollowing7setGainEddd+0x3c>)
 800537e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8005382:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = ky;
 8005386:	4a07      	ldr	r2, [pc, #28]	; (80053a4 <_ZN13PathFollowing7setGainEddd+0x3c>)
 8005388:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800538c:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = kt;
 8005390:	4a04      	ldr	r2, [pc, #16]	; (80053a4 <_ZN13PathFollowing7setGainEddd+0x3c>)
 8005392:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005396:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 800539a:	bf00      	nop
 800539c:	3720      	adds	r7, #32
 800539e:	46bd      	mov	sp, r7
 80053a0:	bc90      	pop	{r4, r7}
 80053a2:	4770      	bx	lr
 80053a4:	20047c18 	.word	0x20047c18

080053a8 <_ZN11PowerSensor4initEv>:
#define LOW_VOLTAGE_THRESHOLD 7.4

float monitor_voltage;

void PowerSensor::init()
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b082      	sub	sp, #8
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT);
 80053b0:	2088      	movs	r0, #136	; 0x88
 80053b2:	f7fc fe50 	bl	8002056 <INA260_init>
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT);
 80053b6:	2080      	movs	r0, #128	; 0x80
 80053b8:	f7fc fe4d 	bl	8002056 <INA260_init>
}
 80053bc:	bf00      	nop
 80053be:	3708      	adds	r7, #8
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}
 80053c4:	0000      	movs	r0, r0
	...

080053c8 <_ZN11PowerSensor12updateValuesEv>:

void PowerSensor::updateValues()
{
 80053c8:	b590      	push	{r4, r7, lr}
 80053ca:	b083      	sub	sp, #12
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
	//current_l_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
	//current_r_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT) * 0.00125;
	buttery_voltage_ = INA260_read(0x02, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
 80053d0:	2188      	movs	r1, #136	; 0x88
 80053d2:	2002      	movs	r0, #2
 80053d4:	f7fc fddc 	bl	8001f90 <INA260_read>
 80053d8:	4603      	mov	r3, r0
 80053da:	4618      	mov	r0, r3
 80053dc:	f7fb f8ba 	bl	8000554 <__aeabi_i2d>
 80053e0:	a30c      	add	r3, pc, #48	; (adr r3, 8005414 <_ZN11PowerSensor12updateValuesEv+0x4c>)
 80053e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053e6:	f7fb f91f 	bl	8000628 <__aeabi_dmul>
 80053ea:	4603      	mov	r3, r0
 80053ec:	460c      	mov	r4, r1
 80053ee:	4618      	mov	r0, r3
 80053f0:	4621      	mov	r1, r4
 80053f2:	f7fb fc11 	bl	8000c18 <__aeabi_d2f>
 80053f6:	4602      	mov	r2, r0
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	609a      	str	r2, [r3, #8]

	monitor_voltage = buttery_voltage_;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	4a03      	ldr	r2, [pc, #12]	; (8005410 <_ZN11PowerSensor12updateValuesEv+0x48>)
 8005402:	6013      	str	r3, [r2, #0]
}
 8005404:	bf00      	nop
 8005406:	370c      	adds	r7, #12
 8005408:	46bd      	mov	sp, r7
 800540a:	bd90      	pop	{r4, r7, pc}
 800540c:	f3af 8000 	nop.w
 8005410:	2000022c 	.word	0x2000022c
 8005414:	47ae147b 	.word	0x47ae147b
 8005418:	3f547ae1 	.word	0x3f547ae1

0800541c <_ZN11PowerSensor17getButteryVoltageEv>:
	left = current_l_;
	right = current_r_;
}

float PowerSensor::getButteryVoltage()
{
 800541c:	b480      	push	{r7}
 800541e:	b083      	sub	sp, #12
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
	return buttery_voltage_;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	ee07 3a90 	vmov	s15, r3

}
 800542c:	eeb0 0a67 	vmov.f32	s0, s15
 8005430:	370c      	adds	r7, #12
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr
	...

0800543c <_ZN12RotarySwitch8getValueEv>:

#include "RotarySwitch.hpp"


uint16_t RotarySwitch::getValue()
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b084      	sub	sp, #16
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8005444:	2300      	movs	r3, #0
 8005446:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_1))	ret_value |= 0x01;
 8005448:	2102      	movs	r1, #2
 800544a:	4822      	ldr	r0, [pc, #136]	; (80054d4 <_ZN12RotarySwitch8getValueEv+0x98>)
 800544c:	f005 ffde 	bl	800b40c <HAL_GPIO_ReadPin>
 8005450:	4603      	mov	r3, r0
 8005452:	2b00      	cmp	r3, #0
 8005454:	bf0c      	ite	eq
 8005456:	2301      	moveq	r3, #1
 8005458:	2300      	movne	r3, #0
 800545a:	b2db      	uxtb	r3, r3
 800545c:	2b00      	cmp	r3, #0
 800545e:	d003      	beq.n	8005468 <_ZN12RotarySwitch8getValueEv+0x2c>
 8005460:	89fb      	ldrh	r3, [r7, #14]
 8005462:	f043 0301 	orr.w	r3, r3, #1
 8005466:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_3))	ret_value |= 0x02;
 8005468:	2108      	movs	r1, #8
 800546a:	481a      	ldr	r0, [pc, #104]	; (80054d4 <_ZN12RotarySwitch8getValueEv+0x98>)
 800546c:	f005 ffce 	bl	800b40c <HAL_GPIO_ReadPin>
 8005470:	4603      	mov	r3, r0
 8005472:	2b00      	cmp	r3, #0
 8005474:	bf0c      	ite	eq
 8005476:	2301      	moveq	r3, #1
 8005478:	2300      	movne	r3, #0
 800547a:	b2db      	uxtb	r3, r3
 800547c:	2b00      	cmp	r3, #0
 800547e:	d003      	beq.n	8005488 <_ZN12RotarySwitch8getValueEv+0x4c>
 8005480:	89fb      	ldrh	r3, [r7, #14]
 8005482:	f043 0302 	orr.w	r3, r3, #2
 8005486:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_4))	ret_value |= 0x04;
 8005488:	2110      	movs	r1, #16
 800548a:	4812      	ldr	r0, [pc, #72]	; (80054d4 <_ZN12RotarySwitch8getValueEv+0x98>)
 800548c:	f005 ffbe 	bl	800b40c <HAL_GPIO_ReadPin>
 8005490:	4603      	mov	r3, r0
 8005492:	2b00      	cmp	r3, #0
 8005494:	bf0c      	ite	eq
 8005496:	2301      	moveq	r3, #1
 8005498:	2300      	movne	r3, #0
 800549a:	b2db      	uxtb	r3, r3
 800549c:	2b00      	cmp	r3, #0
 800549e:	d003      	beq.n	80054a8 <_ZN12RotarySwitch8getValueEv+0x6c>
 80054a0:	89fb      	ldrh	r3, [r7, #14]
 80054a2:	f043 0304 	orr.w	r3, r3, #4
 80054a6:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7))	ret_value |= 0x08;
 80054a8:	2180      	movs	r1, #128	; 0x80
 80054aa:	480a      	ldr	r0, [pc, #40]	; (80054d4 <_ZN12RotarySwitch8getValueEv+0x98>)
 80054ac:	f005 ffae 	bl	800b40c <HAL_GPIO_ReadPin>
 80054b0:	4603      	mov	r3, r0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	bf0c      	ite	eq
 80054b6:	2301      	moveq	r3, #1
 80054b8:	2300      	movne	r3, #0
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d003      	beq.n	80054c8 <_ZN12RotarySwitch8getValueEv+0x8c>
 80054c0:	89fb      	ldrh	r3, [r7, #14]
 80054c2:	f043 0308 	orr.w	r3, r3, #8
 80054c6:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 80054c8:	89fb      	ldrh	r3, [r7, #14]

}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3710      	adds	r7, #16
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	bf00      	nop
 80054d4:	40020c00 	.word	0x40020c00

080054d8 <_ZN10SideSensorC1Ev>:
uint16_t mon_status;
bool mon_status_L, mon_status_R;
uint16_t mon_cnt_l, mon_cnt_r;
bool mon_rise_fall_flag = true;

SideSensor::SideSensor() : status_(0), status_L_(false), status_R_(false), white_line_cnt_l_(0), white_line_cnt_r_(0), ignore_flag_(false),
 80054d8:	b480      	push	{r7}
 80054da:	b083      	sub	sp, #12
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
		timer_R_(0), timer_L_(0), rise_fall_flag_R_(true), rise_fall_flag_L_(true)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2200      	movs	r2, #0
 80054e4:	801a      	strh	r2, [r3, #0]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2200      	movs	r2, #0
 80054ea:	709a      	strb	r2, [r3, #2]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2200      	movs	r2, #0
 80054f0:	70da      	strb	r2, [r3, #3]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	809a      	strh	r2, [r3, #4]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	80da      	strh	r2, [r3, #6]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	721a      	strb	r2, [r3, #8]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	815a      	strh	r2, [r3, #10]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2200      	movs	r2, #0
 800550e:	819a      	strh	r2, [r3, #12]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	739a      	strb	r2, [r3, #14]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2201      	movs	r2, #1
 800551a:	73da      	strb	r2, [r3, #15]
{

}
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	4618      	mov	r0, r3
 8005520:	370c      	adds	r7, #12
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr
	...

0800552c <_ZN10SideSensor21updateStatusRightExtiEv>:

void SideSensor::updateStatusRightExti()
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b082      	sub	sp, #8
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_2) == GPIO_PIN_SET){ // 立ち上がり Black
 8005534:	2104      	movs	r1, #4
 8005536:	480e      	ldr	r0, [pc, #56]	; (8005570 <_ZN10SideSensor21updateStatusRightExtiEv+0x44>)
 8005538:	f005 ff68 	bl	800b40c <HAL_GPIO_ReadPin>
 800553c:	4603      	mov	r3, r0
 800553e:	2b01      	cmp	r3, #1
 8005540:	bf0c      	ite	eq
 8005542:	2301      	moveq	r3, #1
 8005544:	2300      	movne	r3, #0
 8005546:	b2db      	uxtb	r3, r3
 8005548:	2b00      	cmp	r3, #0
 800554a:	d006      	beq.n	800555a <_ZN10SideSensor21updateStatusRightExtiEv+0x2e>
		timer_R_ = 0;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2200      	movs	r2, #0
 8005550:	815a      	strh	r2, [r3, #10]
		rise_fall_flag_R_ = true;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2201      	movs	r2, #1
 8005556:	739a      	strb	r2, [r3, #14]
	}
	else{	//White
		timer_R_ = 0;
		rise_fall_flag_R_ = false;
	}
}
 8005558:	e005      	b.n	8005566 <_ZN10SideSensor21updateStatusRightExtiEv+0x3a>
		timer_R_ = 0;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2200      	movs	r2, #0
 800555e:	815a      	strh	r2, [r3, #10]
		rise_fall_flag_R_ = false;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	739a      	strb	r2, [r3, #14]
}
 8005566:	bf00      	nop
 8005568:	3708      	adds	r7, #8
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}
 800556e:	bf00      	nop
 8005570:	40021000 	.word	0x40021000

08005574 <_ZN10SideSensor20updateStatusLeftExtiEv>:

void SideSensor::updateStatusLeftExti()
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b082      	sub	sp, #8
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_8) == GPIO_PIN_SET){ // 立ち上がり Black
 800557c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005580:	480d      	ldr	r0, [pc, #52]	; (80055b8 <_ZN10SideSensor20updateStatusLeftExtiEv+0x44>)
 8005582:	f005 ff43 	bl	800b40c <HAL_GPIO_ReadPin>
 8005586:	4603      	mov	r3, r0
 8005588:	2b01      	cmp	r3, #1
 800558a:	bf0c      	ite	eq
 800558c:	2301      	moveq	r3, #1
 800558e:	2300      	movne	r3, #0
 8005590:	b2db      	uxtb	r3, r3
 8005592:	2b00      	cmp	r3, #0
 8005594:	d006      	beq.n	80055a4 <_ZN10SideSensor20updateStatusLeftExtiEv+0x30>
		timer_L_ = 0;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	819a      	strh	r2, [r3, #12]
		rise_fall_flag_L_ = true;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2201      	movs	r2, #1
 80055a0:	73da      	strb	r2, [r3, #15]
	}
	else{	//White
		timer_L_ = 0;
		rise_fall_flag_L_ = false;
	}
}
 80055a2:	e005      	b.n	80055b0 <_ZN10SideSensor20updateStatusLeftExtiEv+0x3c>
		timer_L_ = 0;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	819a      	strh	r2, [r3, #12]
		rise_fall_flag_L_ = false;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	73da      	strb	r2, [r3, #15]
}
 80055b0:	bf00      	nop
 80055b2:	3708      	adds	r7, #8
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}
 80055b8:	40020c00 	.word	0x40020c00

080055bc <_ZN10SideSensor12updateStatusEv>:

void SideSensor::updateStatus() // called timer flip
{
 80055bc:	b480      	push	{r7}
 80055be:	b083      	sub	sp, #12
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
	timer_R_++;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	895b      	ldrh	r3, [r3, #10]
 80055c8:	3301      	adds	r3, #1
 80055ca:	b29a      	uxth	r2, r3
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	815a      	strh	r2, [r3, #10]
	timer_L_++;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	899b      	ldrh	r3, [r3, #12]
 80055d4:	3301      	adds	r3, #1
 80055d6:	b29a      	uxth	r2, r3
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	819a      	strh	r2, [r3, #12]
	if(timer_R_ >= 10000) timer_R_ = 10000;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	895b      	ldrh	r3, [r3, #10]
 80055e0:	f242 720f 	movw	r2, #9999	; 0x270f
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d903      	bls.n	80055f0 <_ZN10SideSensor12updateStatusEv+0x34>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f242 7210 	movw	r2, #10000	; 0x2710
 80055ee:	815a      	strh	r2, [r3, #10]
	if(timer_L_ >= 10000) timer_L_ = 10000;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	899b      	ldrh	r3, [r3, #12]
 80055f4:	f242 720f 	movw	r2, #9999	; 0x270f
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d903      	bls.n	8005604 <_ZN10SideSensor12updateStatusEv+0x48>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f242 7210 	movw	r2, #10000	; 0x2710
 8005602:	819a      	strh	r2, [r3, #12]

	if(ignore_flag_ == false){
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	7a1b      	ldrb	r3, [r3, #8]
 8005608:	f083 0301 	eor.w	r3, r3, #1
 800560c:	b2db      	uxtb	r3, r3
 800560e:	2b00      	cmp	r3, #0
 8005610:	d019      	beq.n	8005646 <_ZN10SideSensor12updateStatusEv+0x8a>
		if(rise_fall_flag_R_ == true && timer_R_ >= 2){
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	7b9b      	ldrb	r3, [r3, #14]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d007      	beq.n	800562a <_ZN10SideSensor12updateStatusEv+0x6e>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	895b      	ldrh	r3, [r3, #10]
 800561e:	2b01      	cmp	r3, #1
 8005620:	d903      	bls.n	800562a <_ZN10SideSensor12updateStatusEv+0x6e>
			status_R_ = false;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2200      	movs	r2, #0
 8005626:	70da      	strb	r2, [r3, #3]
 8005628:	e00d      	b.n	8005646 <_ZN10SideSensor12updateStatusEv+0x8a>
		}
		else if(rise_fall_flag_R_ == false && timer_R_ >= 2){
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	7b9b      	ldrb	r3, [r3, #14]
 800562e:	f083 0301 	eor.w	r3, r3, #1
 8005632:	b2db      	uxtb	r3, r3
 8005634:	2b00      	cmp	r3, #0
 8005636:	d006      	beq.n	8005646 <_ZN10SideSensor12updateStatusEv+0x8a>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	895b      	ldrh	r3, [r3, #10]
 800563c:	2b01      	cmp	r3, #1
 800563e:	d902      	bls.n	8005646 <_ZN10SideSensor12updateStatusEv+0x8a>
			status_R_ = true;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2201      	movs	r2, #1
 8005644:	70da      	strb	r2, [r3, #3]
		}
	}

	if(rise_fall_flag_L_ == true && timer_L_ >= 2){
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	7bdb      	ldrb	r3, [r3, #15]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d007      	beq.n	800565e <_ZN10SideSensor12updateStatusEv+0xa2>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	899b      	ldrh	r3, [r3, #12]
 8005652:	2b01      	cmp	r3, #1
 8005654:	d903      	bls.n	800565e <_ZN10SideSensor12updateStatusEv+0xa2>
		status_L_ = false;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	709a      	strb	r2, [r3, #2]
 800565c:	e00d      	b.n	800567a <_ZN10SideSensor12updateStatusEv+0xbe>
	}
	else if(rise_fall_flag_L_ == false && timer_L_ >= 2){
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	7bdb      	ldrb	r3, [r3, #15]
 8005662:	f083 0301 	eor.w	r3, r3, #1
 8005666:	b2db      	uxtb	r3, r3
 8005668:	2b00      	cmp	r3, #0
 800566a:	d006      	beq.n	800567a <_ZN10SideSensor12updateStatusEv+0xbe>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	899b      	ldrh	r3, [r3, #12]
 8005670:	2b01      	cmp	r3, #1
 8005672:	d902      	bls.n	800567a <_ZN10SideSensor12updateStatusEv+0xbe>
		status_L_ = true;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	709a      	strb	r2, [r3, #2]
	}

	mon_status_R = status_R_;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	78da      	ldrb	r2, [r3, #3]
 800567e:	4b06      	ldr	r3, [pc, #24]	; (8005698 <_ZN10SideSensor12updateStatusEv+0xdc>)
 8005680:	701a      	strb	r2, [r3, #0]
	mon_status_L = status_L_;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	789a      	ldrb	r2, [r3, #2]
 8005686:	4b05      	ldr	r3, [pc, #20]	; (800569c <_ZN10SideSensor12updateStatusEv+0xe0>)
 8005688:	701a      	strb	r2, [r3, #0]
}
 800568a:	bf00      	nop
 800568c:	370c      	adds	r7, #12
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr
 8005696:	bf00      	nop
 8005698:	20000231 	.word	0x20000231
 800569c:	20000230 	.word	0x20000230

080056a0 <_ZN10SideSensor10getStatusLEv>:
{
	return status_;
}

bool SideSensor::getStatusL()
{
 80056a0:	b480      	push	{r7}
 80056a2:	b083      	sub	sp, #12
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
	return status_L_;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	789b      	ldrb	r3, [r3, #2]
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	370c      	adds	r7, #12
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr

080056b8 <_ZN10SideSensor10getStatusREv>:

bool SideSensor::getStatusR()
{
 80056b8:	b480      	push	{r7}
 80056ba:	b083      	sub	sp, #12
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
	return status_R_;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	78db      	ldrb	r3, [r3, #3]
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	370c      	adds	r7, #12
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr

080056d0 <_ZN10SideSensor17resetWhiteLineCntEv>:
{
	return white_line_cnt_r_;
}

void SideSensor::resetWhiteLineCnt()
{
 80056d0:	b480      	push	{r7}
 80056d2:	b083      	sub	sp, #12
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
	white_line_cnt_l_ = 0;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2200      	movs	r2, #0
 80056dc:	809a      	strh	r2, [r3, #4]
	white_line_cnt_r_ = 0;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	80da      	strh	r2, [r3, #6]
}
 80056e4:	bf00      	nop
 80056e6:	370c      	adds	r7, #12
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr

080056f0 <_ZN10SideSensor12enableIgnoreEv>:

void SideSensor::enableIgnore()
{
 80056f0:	b480      	push	{r7}
 80056f2:	b083      	sub	sp, #12
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
	ignore_flag_ = true;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2201      	movs	r2, #1
 80056fc:	721a      	strb	r2, [r3, #8]
}
 80056fe:	bf00      	nop
 8005700:	370c      	adds	r7, #12
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr

0800570a <_ZN10SideSensor13disableIgnoreEv>:

void SideSensor::disableIgnore()
{
 800570a:	b480      	push	{r7}
 800570c:	b083      	sub	sp, #12
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
	ignore_flag_ = false;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	721a      	strb	r2, [r3, #8]
}
 8005718:	bf00      	nop
 800571a:	370c      	adds	r7, #12
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr

08005724 <_ZN10SideSensor13getIgnoreFlagEv>:

bool SideSensor::getIgnoreFlag()
{
 8005724:	b480      	push	{r7}
 8005726:	b083      	sub	sp, #12
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
	return ignore_flag_;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	7a1b      	ldrb	r3, [r3, #8]
}
 8005730:	4618      	mov	r0, r3
 8005732:	370c      	adds	r7, #12
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr

0800573c <_ZN20SystemIdentificationC1EP6LoggerP5Motor>:

#include "SystemIdentification.hpp"

float mon_msig;

SystemIdentification::SystemIdentification(Logger *logger, Motor *motor) : msigArrayIdx_(0), inputVal_(0), processing_flag_(false)
 800573c:	b580      	push	{r7, lr}
 800573e:	b084      	sub	sp, #16
 8005740:	af00      	add	r7, sp, #0
 8005742:	60f8      	str	r0, [r7, #12]
 8005744:	60b9      	str	r1, [r7, #8]
 8005746:	607a      	str	r2, [r7, #4]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	3308      	adds	r3, #8
 800574c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005750:	2100      	movs	r1, #0
 8005752:	4618      	mov	r0, r3
 8005754:	f00f f912 	bl	801497c <memset>
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800575e:	811a      	strh	r2, [r3, #8]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005766:	815a      	strh	r2, [r3, #10]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800576e:	819a      	strh	r2, [r3, #12]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005776:	81da      	strh	r2, [r3, #14]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800577e:	821a      	strh	r2, [r3, #16]
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005786:	825a      	strh	r2, [r3, #18]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2201      	movs	r2, #1
 800578c:	829a      	strh	r2, [r3, #20]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2201      	movs	r2, #1
 8005792:	82da      	strh	r2, [r3, #22]
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2201      	movs	r2, #1
 8005798:	831a      	strh	r2, [r3, #24]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2201      	movs	r2, #1
 800579e:	835a      	strh	r2, [r3, #26]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2201      	movs	r2, #1
 80057a4:	839a      	strh	r2, [r3, #28]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2201      	movs	r2, #1
 80057aa:	83da      	strh	r2, [r3, #30]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2201      	movs	r2, #1
 80057b0:	841a      	strh	r2, [r3, #32]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80057b8:	845a      	strh	r2, [r3, #34]	; 0x22
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2201      	movs	r2, #1
 80057be:	849a      	strh	r2, [r3, #36]	; 0x24
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80057c6:	84da      	strh	r2, [r3, #38]	; 0x26
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2201      	movs	r2, #1
 80057cc:	851a      	strh	r2, [r3, #40]	; 0x28
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80057d4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2201      	movs	r2, #1
 80057da:	859a      	strh	r2, [r3, #44]	; 0x2c
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80057e2:	85da      	strh	r2, [r3, #46]	; 0x2e
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80057ea:	861a      	strh	r2, [r3, #48]	; 0x30
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2201      	movs	r2, #1
 80057f0:	865a      	strh	r2, [r3, #50]	; 0x32
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2201      	movs	r2, #1
 80057f6:	869a      	strh	r2, [r3, #52]	; 0x34
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80057fe:	86da      	strh	r2, [r3, #54]	; 0x36
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005806:	871a      	strh	r2, [r3, #56]	; 0x38
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2201      	movs	r2, #1
 800580c:	875a      	strh	r2, [r3, #58]	; 0x3a
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2201      	movs	r2, #1
 8005812:	879a      	strh	r2, [r3, #60]	; 0x3c
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2201      	movs	r2, #1
 8005818:	87da      	strh	r2, [r3, #62]	; 0x3e
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005820:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2201      	movs	r2, #1
 8005828:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2201      	movs	r2, #1
 8005830:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2201      	movs	r2, #1
 8005838:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005842:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2201      	movs	r2, #1
 800584a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005854:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800585e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2201      	movs	r2, #1
 8005866:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005870:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2201      	movs	r2, #1
 8005878:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2201      	movs	r2, #1
 8005880:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800588a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005894:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800589e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2201      	movs	r2, #1
 80058a6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2201      	movs	r2, #1
 80058ae:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058b8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2201      	movs	r2, #1
 80058c0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058e2:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2201      	movs	r2, #1
 80058ea:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2201      	movs	r2, #1
 80058f2:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058fc:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2201      	movs	r2, #1
 8005904:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800590e:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2201      	movs	r2, #1
 8005916:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2201      	movs	r2, #1
 800591e:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005928:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2201      	movs	r2, #1
 8005930:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2201      	movs	r2, #1
 8005938:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005942:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800594c:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2201      	movs	r2, #1
 8005954:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800595e:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005968:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2201      	movs	r2, #1
 8005970:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800597a:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005984:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800598e:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2201      	movs	r2, #1
 8005996:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2201      	movs	r2, #1
 800599e:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2201      	movs	r2, #1
 80059a6:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059b0:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059ba:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059c4:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059ce:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2201      	movs	r2, #1
 80059d6:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059e0:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2201      	movs	r2, #1
 80059e8:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2201      	movs	r2, #1
 80059f0:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2201      	movs	r2, #1
 8005a00:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2201      	movs	r2, #1
 8005a08:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a12:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a1c:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2201      	movs	r2, #1
 8005a24:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a2e:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2201      	movs	r2, #1
 8005a36:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a40:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a62:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a6c:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a86:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a98:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f04f 0200 	mov.w	r2, #0
 8005aaa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
{
	logger_ = logger;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	68ba      	ldr	r2, [r7, #8]
 8005aba:	601a      	str	r2, [r3, #0]
	motor_ = motor;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	605a      	str	r2, [r3, #4]
	//msigItr_ = msigArray_.begin();
}
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3710      	adds	r7, #16
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}

08005acc <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>:
//#include "ICM_20648.h"
#include <stdio.h>

float mon_current_velocity;

VelocityCtrl::VelocityCtrl(Motor *motor, Encoder *encoder, IMU *imu) :
 8005acc:	b480      	push	{r7}
 8005ace:	b085      	sub	sp, #20
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	60f8      	str	r0, [r7, #12]
 8005ad4:	60b9      	str	r1, [r7, #8]
 8005ad6:	607a      	str	r2, [r7, #4]
 8005ad8:	603b      	str	r3, [r7, #0]
target_velocity_(0), target_omega_(0), current_velocity_(0), current_omega_(0), v_kp_(0), v_kd_(0), v_ki_(0),
	o_kp_(0), o_kd_(0), o_ki_(0), excution_flag_(false), i_reset_flag_(false), rotation_ratio_(0)
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	f04f 0200 	mov.w	r2, #0
 8005ae0:	601a      	str	r2, [r3, #0]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f04f 0200 	mov.w	r2, #0
 8005ae8:	605a      	str	r2, [r3, #4]
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	f04f 0200 	mov.w	r2, #0
 8005af0:	609a      	str	r2, [r3, #8]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	f04f 0200 	mov.w	r2, #0
 8005af8:	60da      	str	r2, [r3, #12]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	f04f 0200 	mov.w	r2, #0
 8005b00:	611a      	str	r2, [r3, #16]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	f04f 0200 	mov.w	r2, #0
 8005b08:	615a      	str	r2, [r3, #20]
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	f04f 0200 	mov.w	r2, #0
 8005b10:	619a      	str	r2, [r3, #24]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f04f 0200 	mov.w	r2, #0
 8005b18:	61da      	str	r2, [r3, #28]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	f04f 0200 	mov.w	r2, #0
 8005b20:	621a      	str	r2, [r3, #32]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f04f 0200 	mov.w	r2, #0
 8005b28:	625a      	str	r2, [r3, #36]	; 0x24
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2200      	movs	r2, #0
 8005b36:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	f04f 0200 	mov.w	r2, #0
 8005b40:	62da      	str	r2, [r3, #44]	; 0x2c
{
	motor_ = motor;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	68ba      	ldr	r2, [r7, #8]
 8005b46:	631a      	str	r2, [r3, #48]	; 0x30
	encoder_ = encoder;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	687a      	ldr	r2, [r7, #4]
 8005b4c:	635a      	str	r2, [r3, #52]	; 0x34
	imu_ = imu;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	683a      	ldr	r2, [r7, #0]
 8005b52:	639a      	str	r2, [r3, #56]	; 0x38

}
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	4618      	mov	r0, r3
 8005b58:	3714      	adds	r7, #20
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr
 8005b62:	0000      	movs	r0, r0
 8005b64:	0000      	movs	r0, r0
	...

08005b68 <_ZN12VelocityCtrl12calcVelocityEv>:

// ---------private ---------//

float VelocityCtrl::calcVelocity()
{
 8005b68:	b590      	push	{r4, r7, lr}
 8005b6a:	b087      	sub	sp, #28
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
	float enc_l, enc_r;
	encoder_->getCnt(enc_l, enc_r);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b74:	f107 020c 	add.w	r2, r7, #12
 8005b78:	f107 0110 	add.w	r1, r7, #16
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f7fb fd35 	bl	80015ec <_ZN7Encoder6getCntERfS0_>
	float enc_cnt = (enc_l + enc_r) / 2;
 8005b82:	ed97 7a04 	vldr	s14, [r7, #16]
 8005b86:	edd7 7a03 	vldr	s15, [r7, #12]
 8005b8a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005b8e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005b92:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005b96:	edc7 7a05 	vstr	s15, [r7, #20]

	current_velocity_ = VELOCITY_PER_CNT * enc_cnt;
 8005b9a:	6978      	ldr	r0, [r7, #20]
 8005b9c:	f7fa fcec 	bl	8000578 <__aeabi_f2d>
 8005ba0:	a30e      	add	r3, pc, #56	; (adr r3, 8005bdc <_ZN12VelocityCtrl12calcVelocityEv+0x74>)
 8005ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ba6:	f7fa fd3f 	bl	8000628 <__aeabi_dmul>
 8005baa:	4603      	mov	r3, r0
 8005bac:	460c      	mov	r4, r1
 8005bae:	4618      	mov	r0, r3
 8005bb0:	4621      	mov	r1, r4
 8005bb2:	f7fb f831 	bl	8000c18 <__aeabi_d2f>
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	609a      	str	r2, [r3, #8]
	mon_current_velocity = current_velocity_;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	4a05      	ldr	r2, [pc, #20]	; (8005bd8 <_ZN12VelocityCtrl12calcVelocityEv+0x70>)
 8005bc2:	6013      	str	r3, [r2, #0]

	return current_velocity_;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	ee07 3a90 	vmov	s15, r3
}
 8005bcc:	eeb0 0a67 	vmov.f32	s0, s15
 8005bd0:	371c      	adds	r7, #28
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd90      	pop	{r4, r7, pc}
 8005bd6:	bf00      	nop
 8005bd8:	20000234 	.word	0x20000234
 8005bdc:	1ab1d998 	.word	0x1ab1d998
 8005be0:	3f7830b5 	.word	0x3f7830b5
 8005be4:	00000000 	.word	0x00000000

08005be8 <_ZN12VelocityCtrl18pidTranslationOnlyEv>:
	v_pre_diff = v_diff;
	o_pre_diff = o_diff;
}

void VelocityCtrl::pidTranslationOnly()
{
 8005be8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bea:	b087      	sub	sp, #28
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
	float static v_pre_diff;
	float v_diff = target_velocity_ - current_velocity_;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	ed93 7a00 	vldr	s14, [r3]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	edd3 7a02 	vldr	s15, [r3, #8]
 8005bfc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c00:	edc7 7a05 	vstr	s15, [r7, #20]

	float v_p, v_d ;
	static float v_i;

	if(i_reset_flag_ == true){
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d007      	beq.n	8005c1e <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x36>
		v_i = 0;
 8005c0e:	4b48      	ldr	r3, [pc, #288]	; (8005d30 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005c10:	f04f 0200 	mov.w	r2, #0
 8005c14:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	}

	v_p = v_kp_ * v_diff;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	edd3 7a04 	vldr	s15, [r3, #16]
 8005c24:	ed97 7a05 	vldr	s14, [r7, #20]
 8005c28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c2c:	edc7 7a04 	vstr	s15, [r7, #16]
	v_i += v_ki_ * v_diff * DELTA_T;
 8005c30:	4b3f      	ldr	r3, [pc, #252]	; (8005d30 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4618      	mov	r0, r3
 8005c36:	f7fa fc9f 	bl	8000578 <__aeabi_f2d>
 8005c3a:	4604      	mov	r4, r0
 8005c3c:	460d      	mov	r5, r1
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	ed93 7a06 	vldr	s14, [r3, #24]
 8005c44:	edd7 7a05 	vldr	s15, [r7, #20]
 8005c48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c4c:	ee17 0a90 	vmov	r0, s15
 8005c50:	f7fa fc92 	bl	8000578 <__aeabi_f2d>
 8005c54:	a334      	add	r3, pc, #208	; (adr r3, 8005d28 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 8005c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c5a:	f7fa fce5 	bl	8000628 <__aeabi_dmul>
 8005c5e:	4602      	mov	r2, r0
 8005c60:	460b      	mov	r3, r1
 8005c62:	4620      	mov	r0, r4
 8005c64:	4629      	mov	r1, r5
 8005c66:	f7fa fb29 	bl	80002bc <__adddf3>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	460c      	mov	r4, r1
 8005c6e:	4618      	mov	r0, r3
 8005c70:	4621      	mov	r1, r4
 8005c72:	f7fa ffd1 	bl	8000c18 <__aeabi_d2f>
 8005c76:	4602      	mov	r2, r0
 8005c78:	4b2d      	ldr	r3, [pc, #180]	; (8005d30 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005c7a:	601a      	str	r2, [r3, #0]
	v_d = v_kd_ * (v_diff - v_pre_diff) / DELTA_T;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	ed93 7a05 	vldr	s14, [r3, #20]
 8005c82:	4b2c      	ldr	r3, [pc, #176]	; (8005d34 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 8005c84:	edd3 7a00 	vldr	s15, [r3]
 8005c88:	edd7 6a05 	vldr	s13, [r7, #20]
 8005c8c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005c90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c94:	ee17 0a90 	vmov	r0, s15
 8005c98:	f7fa fc6e 	bl	8000578 <__aeabi_f2d>
 8005c9c:	a322      	add	r3, pc, #136	; (adr r3, 8005d28 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 8005c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ca2:	f7fa fdeb 	bl	800087c <__aeabi_ddiv>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	460c      	mov	r4, r1
 8005caa:	4618      	mov	r0, r3
 8005cac:	4621      	mov	r1, r4
 8005cae:	f7fa ffb3 	bl	8000c18 <__aeabi_d2f>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	60fb      	str	r3, [r7, #12]

	float translation_ratio;

	translation_ratio =  v_p + v_d + v_i;
 8005cb6:	ed97 7a04 	vldr	s14, [r7, #16]
 8005cba:	edd7 7a03 	vldr	s15, [r7, #12]
 8005cbe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005cc2:	4b1b      	ldr	r3, [pc, #108]	; (8005d30 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005cc4:	edd3 7a00 	vldr	s15, [r3]
 8005cc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ccc:	edc7 7a02 	vstr	s15, [r7, #8]

	motor_->setRatio(translation_ratio + rotation_ratio_, translation_ratio - rotation_ratio_);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8005cda:	edd7 7a02 	vldr	s15, [r7, #8]
 8005cde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ce2:	ee17 0a90 	vmov	r0, s15
 8005ce6:	f7fa fc47 	bl	8000578 <__aeabi_f2d>
 8005cea:	4605      	mov	r5, r0
 8005cec:	460e      	mov	r6, r1
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005cf4:	ed97 7a02 	vldr	s14, [r7, #8]
 8005cf8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005cfc:	ee17 0a90 	vmov	r0, s15
 8005d00:	f7fa fc3a 	bl	8000578 <__aeabi_f2d>
 8005d04:	4602      	mov	r2, r0
 8005d06:	460b      	mov	r3, r1
 8005d08:	ec43 2b11 	vmov	d1, r2, r3
 8005d0c:	ec46 5b10 	vmov	d0, r5, r6
 8005d10:	4620      	mov	r0, r4
 8005d12:	f7ff f941 	bl	8004f98 <_ZN5Motor8setRatioEdd>

	v_pre_diff = v_diff;
 8005d16:	4a07      	ldr	r2, [pc, #28]	; (8005d34 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	6013      	str	r3, [r2, #0]
}
 8005d1c:	bf00      	nop
 8005d1e:	371c      	adds	r7, #28
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d24:	f3af 8000 	nop.w
 8005d28:	d2f1a9fc 	.word	0xd2f1a9fc
 8005d2c:	3f50624d 	.word	0x3f50624d
 8005d30:	2000023c 	.word	0x2000023c
 8005d34:	20000238 	.word	0x20000238

08005d38 <_ZN12VelocityCtrl11setVelocityEff>:
{

}

void VelocityCtrl::setVelocity(float velocity, float omega)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b085      	sub	sp, #20
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	60f8      	str	r0, [r7, #12]
 8005d40:	ed87 0a02 	vstr	s0, [r7, #8]
 8005d44:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	68ba      	ldr	r2, [r7, #8]
 8005d4c:	601a      	str	r2, [r3, #0]
	target_omega_= omega;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	605a      	str	r2, [r3, #4]
}
 8005d54:	bf00      	nop
 8005d56:	3714      	adds	r7, #20
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr

08005d60 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>:

void VelocityCtrl::setTranslationVelocityOnly(float velocity, float rotation_ratio)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b085      	sub	sp, #20
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	60f8      	str	r0, [r7, #12]
 8005d68:	ed87 0a02 	vstr	s0, [r7, #8]
 8005d6c:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	68ba      	ldr	r2, [r7, #8]
 8005d74:	601a      	str	r2, [r3, #0]
	rotation_ratio_ = rotation_ratio;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005d7c:	bf00      	nop
 8005d7e:	3714      	adds	r7, #20
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr

08005d88 <_ZN12VelocityCtrl15setVelocityGainEfff>:

void VelocityCtrl::setVelocityGain(float kp, float ki, float kd)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b085      	sub	sp, #20
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	60f8      	str	r0, [r7, #12]
 8005d90:	ed87 0a02 	vstr	s0, [r7, #8]
 8005d94:	edc7 0a01 	vstr	s1, [r7, #4]
 8005d98:	ed87 1a00 	vstr	s2, [r7]
	v_kp_ = kp;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	68ba      	ldr	r2, [r7, #8]
 8005da0:	611a      	str	r2, [r3, #16]
	v_ki_ = ki;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	619a      	str	r2, [r3, #24]
	v_kd_ = kd;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	683a      	ldr	r2, [r7, #0]
 8005dac:	615a      	str	r2, [r3, #20]
}
 8005dae:	bf00      	nop
 8005db0:	3714      	adds	r7, #20
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr

08005dba <_ZN12VelocityCtrl12setOmegaGainEfff>:

void VelocityCtrl::setOmegaGain(float kp, float ki, float kd)
{
 8005dba:	b480      	push	{r7}
 8005dbc:	b085      	sub	sp, #20
 8005dbe:	af00      	add	r7, sp, #0
 8005dc0:	60f8      	str	r0, [r7, #12]
 8005dc2:	ed87 0a02 	vstr	s0, [r7, #8]
 8005dc6:	edc7 0a01 	vstr	s1, [r7, #4]
 8005dca:	ed87 1a00 	vstr	s2, [r7]
	o_kp_ = kp;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	68ba      	ldr	r2, [r7, #8]
 8005dd2:	61da      	str	r2, [r3, #28]
	o_ki_ = ki;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	687a      	ldr	r2, [r7, #4]
 8005dd8:	625a      	str	r2, [r3, #36]	; 0x24
	o_kd_ = kd;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	683a      	ldr	r2, [r7, #0]
 8005dde:	621a      	str	r2, [r3, #32]
}
 8005de0:	bf00      	nop
 8005de2:	3714      	adds	r7, #20
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr

08005dec <_ZN12VelocityCtrl4flipEv>:

void VelocityCtrl::flip()
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b082      	sub	sp, #8
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
    calcVelocity();
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f7ff feb7 	bl	8005b68 <_ZN12VelocityCtrl12calcVelocityEv>
	//calcOmega();

	if(excution_flag_ == true){
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d002      	beq.n	8005e0a <_ZN12VelocityCtrl4flipEv+0x1e>
		//pid();
		pidTranslationOnly();
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f7ff feef 	bl	8005be8 <_ZN12VelocityCtrl18pidTranslationOnlyEv>
	}


}
 8005e0a:	bf00      	nop
 8005e0c:	3708      	adds	r7, #8
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}

08005e12 <_ZN12VelocityCtrl5startEv>:

void VelocityCtrl::start()
{
 8005e12:	b480      	push	{r7}
 8005e14:	b083      	sub	sp, #12
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	i_reset_flag_ = true;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2201      	movs	r2, #1
 8005e26:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	//calcOmega();
}
 8005e2a:	bf00      	nop
 8005e2c:	370c      	adds	r7, #12
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr
	...

08005e38 <_ZN12VelocityCtrl4stopEv>:

void VelocityCtrl::stop()
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b082      	sub	sp, #8
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	motor_->setRatio(0, 0);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e4c:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8005e68 <_ZN12VelocityCtrl4stopEv+0x30>
 8005e50:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8005e68 <_ZN12VelocityCtrl4stopEv+0x30>
 8005e54:	4618      	mov	r0, r3
 8005e56:	f7ff f89f 	bl	8004f98 <_ZN5Motor8setRatioEdd>

}
 8005e5a:	bf00      	nop
 8005e5c:	3708      	adds	r7, #8
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}
 8005e62:	bf00      	nop
 8005e64:	f3af 8000 	nop.w
	...

08005e70 <_ZN12VelocityCtrl18getCurrentVelocityEv>:

float VelocityCtrl::getCurrentVelocity()
{
 8005e70:	b480      	push	{r7}
 8005e72:	b083      	sub	sp, #12
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
	return current_velocity_;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	689b      	ldr	r3, [r3, #8]
 8005e7c:	ee07 3a90 	vmov	s15, r3
}
 8005e80:	eeb0 0a67 	vmov.f32	s0, s15
 8005e84:	370c      	adds	r7, #12
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr

08005e8e <HAL_GPIO_EXTI_Callback>:
  return len;
}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005e8e:	b580      	push	{r7, lr}
 8005e90:	b082      	sub	sp, #8
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	4603      	mov	r3, r0
 8005e96:	80fb      	strh	r3, [r7, #6]
	cppExit(GPIO_Pin);
 8005e98:	88fb      	ldrh	r3, [r7, #6]
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f001 fe68 	bl	8007b70 <cppExit>
}
 8005ea0:	bf00      	nop
 8005ea2:	3708      	adds	r7, #8
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}

08005ea8 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b082      	sub	sp, #8
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7){
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a1e      	ldr	r2, [pc, #120]	; (8005f30 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d10e      	bne.n	8005ed8 <HAL_TIM_PeriodElapsedCallback+0x30>
		cppFlip100ns();
 8005eba:	f001 fe31 	bl	8007b20 <cppFlip100ns>

		tim7_timer++;
 8005ebe:	4b1d      	ldr	r3, [pc, #116]	; (8005f34 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	3301      	adds	r3, #1
 8005ec4:	4a1b      	ldr	r2, [pc, #108]	; (8005f34 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005ec6:	6013      	str	r3, [r2, #0]
		if(tim7_timer >= 100000) tim7_timer = 0;
 8005ec8:	4b1a      	ldr	r3, [pc, #104]	; (8005f34 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a1a      	ldr	r2, [pc, #104]	; (8005f38 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d902      	bls.n	8005ed8 <HAL_TIM_PeriodElapsedCallback+0x30>
 8005ed2:	4b18      	ldr	r3, [pc, #96]	; (8005f34 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM6){
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a17      	ldr	r2, [pc, #92]	; (8005f3c <HAL_TIM_PeriodElapsedCallback+0x94>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d10e      	bne.n	8005f00 <HAL_TIM_PeriodElapsedCallback+0x58>
		cppFlip1ms();
 8005ee2:	f001 fded 	bl	8007ac0 <cppFlip1ms>

		tim6_timer++;
 8005ee6:	4b16      	ldr	r3, [pc, #88]	; (8005f40 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	3301      	adds	r3, #1
 8005eec:	4a14      	ldr	r2, [pc, #80]	; (8005f40 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005eee:	6013      	str	r3, [r2, #0]
		if(tim6_timer >= 100000) tim6_timer = 0;
 8005ef0:	4b13      	ldr	r3, [pc, #76]	; (8005f40 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a10      	ldr	r2, [pc, #64]	; (8005f38 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d902      	bls.n	8005f00 <HAL_TIM_PeriodElapsedCallback+0x58>
 8005efa:	4b11      	ldr	r3, [pc, #68]	; (8005f40 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005efc:	2200      	movs	r2, #0
 8005efe:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM13){
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a0f      	ldr	r2, [pc, #60]	; (8005f44 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d10e      	bne.n	8005f28 <HAL_TIM_PeriodElapsedCallback+0x80>
		cppFlip10ms();
 8005f0a:	f001 fe13 	bl	8007b34 <cppFlip10ms>

		tim13_timer++;
 8005f0e:	4b0e      	ldr	r3, [pc, #56]	; (8005f48 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	3301      	adds	r3, #1
 8005f14:	4a0c      	ldr	r2, [pc, #48]	; (8005f48 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005f16:	6013      	str	r3, [r2, #0]
		if(tim13_timer >= 100000) tim13_timer = 0;
 8005f18:	4b0b      	ldr	r3, [pc, #44]	; (8005f48 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a06      	ldr	r2, [pc, #24]	; (8005f38 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d902      	bls.n	8005f28 <HAL_TIM_PeriodElapsedCallback+0x80>
 8005f22:	4b09      	ldr	r3, [pc, #36]	; (8005f48 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005f24:	2200      	movs	r2, #0
 8005f26:	601a      	str	r2, [r3, #0]
	}

}
 8005f28:	bf00      	nop
 8005f2a:	3708      	adds	r7, #8
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}
 8005f30:	40001400 	.word	0x40001400
 8005f34:	200478cc 	.word	0x200478cc
 8005f38:	0001869f 	.word	0x0001869f
 8005f3c:	40001000 	.word	0x40001000
 8005f40:	20047888 	.word	0x20047888
 8005f44:	40001c00 	.word	0x40001c00
 8005f48:	200478d0 	.word	0x200478d0

08005f4c <init>:

void init()
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	af00      	add	r7, sp, #0
	// ------initialize------//
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET); // sensor led ON
 8005f50:	2201      	movs	r2, #1
 8005f52:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005f56:	4808      	ldr	r0, [pc, #32]	; (8005f78 <init+0x2c>)
 8005f58:	f005 fa70 	bl	800b43c <HAL_GPIO_WritePin>

	// timer interrpt in start
	HAL_TIM_Base_Start_IT(&htim6);
 8005f5c:	4807      	ldr	r0, [pc, #28]	; (8005f7c <init+0x30>)
 8005f5e:	f009 f950 	bl	800f202 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8005f62:	4807      	ldr	r0, [pc, #28]	; (8005f80 <init+0x34>)
 8005f64:	f009 f94d 	bl	800f202 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 8005f68:	4806      	ldr	r0, [pc, #24]	; (8005f84 <init+0x38>)
 8005f6a:	f009 f94a 	bl	800f202 <HAL_TIM_Base_Start_IT>

	cppInit();
 8005f6e:	f001 fd05 	bl	800797c <cppInit>

	//path_following_initialize();

}
 8005f72:	bf00      	nop
 8005f74:	bd80      	pop	{r7, pc}
 8005f76:	bf00      	nop
 8005f78:	40021000 	.word	0x40021000
 8005f7c:	200479b4 	.word	0x200479b4
 8005f80:	20047b58 	.word	0x20047b58
 8005f84:	200478d4 	.word	0x200478d4

08005f88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005f8c:	f003 ff4e 	bl	8009e2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005f90:	f000 f82a 	bl	8005fe8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005f94:	f000 fdbc 	bl	8006b10 <MX_GPIO_Init>
  MX_DMA_Init();
 8005f98:	f000 fd8a 	bl	8006ab0 <MX_DMA_Init>
  MX_I2C2_Init();
 8005f9c:	f000 f9e8 	bl	8006370 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8005fa0:	f000 fa14 	bl	80063cc <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 8005fa4:	f000 fa32 	bl	800640c <MX_SPI2_Init>
  MX_TIM1_Init();
 8005fa8:	f000 fa66 	bl	8006478 <MX_TIM1_Init>
  MX_TIM4_Init();
 8005fac:	f000 fb70 	bl	8006690 <MX_TIM4_Init>
  MX_TIM8_Init();
 8005fb0:	f000 fc3c 	bl	800682c <MX_TIM8_Init>
  MX_USART2_UART_Init();
 8005fb4:	f000 fd52 	bl	8006a5c <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8005fb8:	f00b f8f6 	bl	80111a8 <MX_FATFS_Init>
  MX_TIM6_Init();
 8005fbc:	f000 fbcc 	bl	8006758 <MX_TIM6_Init>
  MX_I2C1_Init();
 8005fc0:	f000 f9a8 	bl	8006314 <MX_I2C1_Init>
  MX_TIM3_Init();
 8005fc4:	f000 fb00 	bl	80065c8 <MX_TIM3_Init>
  MX_TIM10_Init();
 8005fc8:	f000 fc88 	bl	80068dc <MX_TIM10_Init>
  MX_TIM11_Init();
 8005fcc:	f000 fcd4 	bl	8006978 <MX_TIM11_Init>
  MX_ADC2_Init();
 8005fd0:	f000 f898 	bl	8006104 <MX_ADC2_Init>
  MX_TIM7_Init();
 8005fd4:	f000 fbf6 	bl	80067c4 <MX_TIM7_Init>
  MX_TIM13_Init();
 8005fd8:	f000 fd1c 	bl	8006a14 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  init();
 8005fdc:	f7ff ffb6 	bl	8005f4c <init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  cppLoop();
 8005fe0:	f001 fde2 	bl	8007ba8 <cppLoop>
 8005fe4:	e7fc      	b.n	8005fe0 <main+0x58>
	...

08005fe8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b0a4      	sub	sp, #144	; 0x90
 8005fec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005fee:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005ff2:	2234      	movs	r2, #52	; 0x34
 8005ff4:	2100      	movs	r1, #0
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f00e fcc0 	bl	801497c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005ffc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006000:	2200      	movs	r2, #0
 8006002:	601a      	str	r2, [r3, #0]
 8006004:	605a      	str	r2, [r3, #4]
 8006006:	609a      	str	r2, [r3, #8]
 8006008:	60da      	str	r2, [r3, #12]
 800600a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800600c:	f107 030c 	add.w	r3, r7, #12
 8006010:	223c      	movs	r2, #60	; 0x3c
 8006012:	2100      	movs	r1, #0
 8006014:	4618      	mov	r0, r3
 8006016:	f00e fcb1 	bl	801497c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800601a:	2300      	movs	r3, #0
 800601c:	60bb      	str	r3, [r7, #8]
 800601e:	4b37      	ldr	r3, [pc, #220]	; (80060fc <SystemClock_Config+0x114>)
 8006020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006022:	4a36      	ldr	r2, [pc, #216]	; (80060fc <SystemClock_Config+0x114>)
 8006024:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006028:	6413      	str	r3, [r2, #64]	; 0x40
 800602a:	4b34      	ldr	r3, [pc, #208]	; (80060fc <SystemClock_Config+0x114>)
 800602c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800602e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006032:	60bb      	str	r3, [r7, #8]
 8006034:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006036:	2300      	movs	r3, #0
 8006038:	607b      	str	r3, [r7, #4]
 800603a:	4b31      	ldr	r3, [pc, #196]	; (8006100 <SystemClock_Config+0x118>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a30      	ldr	r2, [pc, #192]	; (8006100 <SystemClock_Config+0x118>)
 8006040:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006044:	6013      	str	r3, [r2, #0]
 8006046:	4b2e      	ldr	r3, [pc, #184]	; (8006100 <SystemClock_Config+0x118>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800604e:	607b      	str	r3, [r7, #4]
 8006050:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006052:	2301      	movs	r3, #1
 8006054:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006056:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800605a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800605c:	2302      	movs	r3, #2
 800605e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006060:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006064:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 8;
 8006066:	2308      	movs	r3, #8
 8006068:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800606a:	23b4      	movs	r3, #180	; 0xb4
 800606c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006070:	2302      	movs	r3, #2
 8006072:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8006076:	2308      	movs	r3, #8
 8006078:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 800607c:	2302      	movs	r3, #2
 800607e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006082:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8006086:	4618      	mov	r0, r3
 8006088:	f006 fe12 	bl	800ccb0 <HAL_RCC_OscConfig>
 800608c:	4603      	mov	r3, r0
 800608e:	2b00      	cmp	r3, #0
 8006090:	d001      	beq.n	8006096 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8006092:	f000 fe91 	bl	8006db8 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8006096:	f006 f98d 	bl	800c3b4 <HAL_PWREx_EnableOverDrive>
 800609a:	4603      	mov	r3, r0
 800609c:	2b00      	cmp	r3, #0
 800609e:	d001      	beq.n	80060a4 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80060a0:	f000 fe8a 	bl	8006db8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80060a4:	230f      	movs	r3, #15
 80060a6:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80060a8:	2302      	movs	r3, #2
 80060aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80060ac:	2300      	movs	r3, #0
 80060ae:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80060b0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80060b4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80060b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80060ba:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80060bc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80060c0:	2105      	movs	r1, #5
 80060c2:	4618      	mov	r0, r3
 80060c4:	f006 f9c6 	bl	800c454 <HAL_RCC_ClockConfig>
 80060c8:	4603      	mov	r3, r0
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d001      	beq.n	80060d2 <SystemClock_Config+0xea>
  {
    Error_Handler();
 80060ce:	f000 fe73 	bl	8006db8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 80060d2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80060d6:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80060d8:	2300      	movs	r3, #0
 80060da:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 80060dc:	2300      	movs	r3, #0
 80060de:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80060e0:	f107 030c 	add.w	r3, r7, #12
 80060e4:	4618      	mov	r0, r3
 80060e6:	f006 fba5 	bl	800c834 <HAL_RCCEx_PeriphCLKConfig>
 80060ea:	4603      	mov	r3, r0
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d001      	beq.n	80060f4 <SystemClock_Config+0x10c>
  {
    Error_Handler();
 80060f0:	f000 fe62 	bl	8006db8 <Error_Handler>
  }
}
 80060f4:	bf00      	nop
 80060f6:	3790      	adds	r7, #144	; 0x90
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}
 80060fc:	40023800 	.word	0x40023800
 8006100:	40007000 	.word	0x40007000

08006104 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b084      	sub	sp, #16
 8006108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800610a:	463b      	mov	r3, r7
 800610c:	2200      	movs	r2, #0
 800610e:	601a      	str	r2, [r3, #0]
 8006110:	605a      	str	r2, [r3, #4]
 8006112:	609a      	str	r2, [r3, #8]
 8006114:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8006116:	4b7c      	ldr	r3, [pc, #496]	; (8006308 <MX_ADC2_Init+0x204>)
 8006118:	4a7c      	ldr	r2, [pc, #496]	; (800630c <MX_ADC2_Init+0x208>)
 800611a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800611c:	4b7a      	ldr	r3, [pc, #488]	; (8006308 <MX_ADC2_Init+0x204>)
 800611e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006122:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8006124:	4b78      	ldr	r3, [pc, #480]	; (8006308 <MX_ADC2_Init+0x204>)
 8006126:	2200      	movs	r2, #0
 8006128:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800612a:	4b77      	ldr	r3, [pc, #476]	; (8006308 <MX_ADC2_Init+0x204>)
 800612c:	2201      	movs	r2, #1
 800612e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8006130:	4b75      	ldr	r3, [pc, #468]	; (8006308 <MX_ADC2_Init+0x204>)
 8006132:	2201      	movs	r2, #1
 8006134:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8006136:	4b74      	ldr	r3, [pc, #464]	; (8006308 <MX_ADC2_Init+0x204>)
 8006138:	2200      	movs	r2, #0
 800613a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800613e:	4b72      	ldr	r3, [pc, #456]	; (8006308 <MX_ADC2_Init+0x204>)
 8006140:	2200      	movs	r2, #0
 8006142:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006144:	4b70      	ldr	r3, [pc, #448]	; (8006308 <MX_ADC2_Init+0x204>)
 8006146:	4a72      	ldr	r2, [pc, #456]	; (8006310 <MX_ADC2_Init+0x20c>)
 8006148:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800614a:	4b6f      	ldr	r3, [pc, #444]	; (8006308 <MX_ADC2_Init+0x204>)
 800614c:	2200      	movs	r2, #0
 800614e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 14;
 8006150:	4b6d      	ldr	r3, [pc, #436]	; (8006308 <MX_ADC2_Init+0x204>)
 8006152:	220e      	movs	r2, #14
 8006154:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8006156:	4b6c      	ldr	r3, [pc, #432]	; (8006308 <MX_ADC2_Init+0x204>)
 8006158:	2201      	movs	r2, #1
 800615a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800615e:	4b6a      	ldr	r3, [pc, #424]	; (8006308 <MX_ADC2_Init+0x204>)
 8006160:	2201      	movs	r2, #1
 8006162:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8006164:	4868      	ldr	r0, [pc, #416]	; (8006308 <MX_ADC2_Init+0x204>)
 8006166:	f003 fef5 	bl	8009f54 <HAL_ADC_Init>
 800616a:	4603      	mov	r3, r0
 800616c:	2b00      	cmp	r3, #0
 800616e:	d001      	beq.n	8006174 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8006170:	f000 fe22 	bl	8006db8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8006174:	230a      	movs	r3, #10
 8006176:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8006178:	2301      	movs	r3, #1
 800617a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 800617c:	2306      	movs	r3, #6
 800617e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006180:	463b      	mov	r3, r7
 8006182:	4619      	mov	r1, r3
 8006184:	4860      	ldr	r0, [pc, #384]	; (8006308 <MX_ADC2_Init+0x204>)
 8006186:	f004 f839 	bl	800a1fc <HAL_ADC_ConfigChannel>
 800618a:	4603      	mov	r3, r0
 800618c:	2b00      	cmp	r3, #0
 800618e:	d001      	beq.n	8006194 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8006190:	f000 fe12 	bl	8006db8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8006194:	230b      	movs	r3, #11
 8006196:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8006198:	2302      	movs	r3, #2
 800619a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800619c:	463b      	mov	r3, r7
 800619e:	4619      	mov	r1, r3
 80061a0:	4859      	ldr	r0, [pc, #356]	; (8006308 <MX_ADC2_Init+0x204>)
 80061a2:	f004 f82b 	bl	800a1fc <HAL_ADC_ConfigChannel>
 80061a6:	4603      	mov	r3, r0
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d001      	beq.n	80061b0 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 80061ac:	f000 fe04 	bl	8006db8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80061b0:	230c      	movs	r3, #12
 80061b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80061b4:	2303      	movs	r3, #3
 80061b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80061b8:	463b      	mov	r3, r7
 80061ba:	4619      	mov	r1, r3
 80061bc:	4852      	ldr	r0, [pc, #328]	; (8006308 <MX_ADC2_Init+0x204>)
 80061be:	f004 f81d 	bl	800a1fc <HAL_ADC_ConfigChannel>
 80061c2:	4603      	mov	r3, r0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d001      	beq.n	80061cc <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 80061c8:	f000 fdf6 	bl	8006db8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80061cc:	230d      	movs	r3, #13
 80061ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80061d0:	2304      	movs	r3, #4
 80061d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80061d4:	463b      	mov	r3, r7
 80061d6:	4619      	mov	r1, r3
 80061d8:	484b      	ldr	r0, [pc, #300]	; (8006308 <MX_ADC2_Init+0x204>)
 80061da:	f004 f80f 	bl	800a1fc <HAL_ADC_ConfigChannel>
 80061de:	4603      	mov	r3, r0
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d001      	beq.n	80061e8 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 80061e4:	f000 fde8 	bl	8006db8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80061e8:	2300      	movs	r3, #0
 80061ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80061ec:	2305      	movs	r3, #5
 80061ee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80061f0:	463b      	mov	r3, r7
 80061f2:	4619      	mov	r1, r3
 80061f4:	4844      	ldr	r0, [pc, #272]	; (8006308 <MX_ADC2_Init+0x204>)
 80061f6:	f004 f801 	bl	800a1fc <HAL_ADC_ConfigChannel>
 80061fa:	4603      	mov	r3, r0
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d001      	beq.n	8006204 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8006200:	f000 fdda 	bl	8006db8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8006204:	2301      	movs	r3, #1
 8006206:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8006208:	2306      	movs	r3, #6
 800620a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800620c:	463b      	mov	r3, r7
 800620e:	4619      	mov	r1, r3
 8006210:	483d      	ldr	r0, [pc, #244]	; (8006308 <MX_ADC2_Init+0x204>)
 8006212:	f003 fff3 	bl	800a1fc <HAL_ADC_ConfigChannel>
 8006216:	4603      	mov	r3, r0
 8006218:	2b00      	cmp	r3, #0
 800621a:	d001      	beq.n	8006220 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 800621c:	f000 fdcc 	bl	8006db8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8006220:	2302      	movs	r3, #2
 8006222:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8006224:	2307      	movs	r3, #7
 8006226:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006228:	463b      	mov	r3, r7
 800622a:	4619      	mov	r1, r3
 800622c:	4836      	ldr	r0, [pc, #216]	; (8006308 <MX_ADC2_Init+0x204>)
 800622e:	f003 ffe5 	bl	800a1fc <HAL_ADC_ConfigChannel>
 8006232:	4603      	mov	r3, r0
 8006234:	2b00      	cmp	r3, #0
 8006236:	d001      	beq.n	800623c <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 8006238:	f000 fdbe 	bl	8006db8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800623c:	2303      	movs	r3, #3
 800623e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8006240:	2308      	movs	r3, #8
 8006242:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006244:	463b      	mov	r3, r7
 8006246:	4619      	mov	r1, r3
 8006248:	482f      	ldr	r0, [pc, #188]	; (8006308 <MX_ADC2_Init+0x204>)
 800624a:	f003 ffd7 	bl	800a1fc <HAL_ADC_ConfigChannel>
 800624e:	4603      	mov	r3, r0
 8006250:	2b00      	cmp	r3, #0
 8006252:	d001      	beq.n	8006258 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 8006254:	f000 fdb0 	bl	8006db8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8006258:	2304      	movs	r3, #4
 800625a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 800625c:	2309      	movs	r3, #9
 800625e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006260:	463b      	mov	r3, r7
 8006262:	4619      	mov	r1, r3
 8006264:	4828      	ldr	r0, [pc, #160]	; (8006308 <MX_ADC2_Init+0x204>)
 8006266:	f003 ffc9 	bl	800a1fc <HAL_ADC_ConfigChannel>
 800626a:	4603      	mov	r3, r0
 800626c:	2b00      	cmp	r3, #0
 800626e:	d001      	beq.n	8006274 <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 8006270:	f000 fda2 	bl	8006db8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8006274:	2305      	movs	r3, #5
 8006276:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8006278:	230a      	movs	r3, #10
 800627a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800627c:	463b      	mov	r3, r7
 800627e:	4619      	mov	r1, r3
 8006280:	4821      	ldr	r0, [pc, #132]	; (8006308 <MX_ADC2_Init+0x204>)
 8006282:	f003 ffbb 	bl	800a1fc <HAL_ADC_ConfigChannel>
 8006286:	4603      	mov	r3, r0
 8006288:	2b00      	cmp	r3, #0
 800628a:	d001      	beq.n	8006290 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 800628c:	f000 fd94 	bl	8006db8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8006290:	2306      	movs	r3, #6
 8006292:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8006294:	230b      	movs	r3, #11
 8006296:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006298:	463b      	mov	r3, r7
 800629a:	4619      	mov	r1, r3
 800629c:	481a      	ldr	r0, [pc, #104]	; (8006308 <MX_ADC2_Init+0x204>)
 800629e:	f003 ffad 	bl	800a1fc <HAL_ADC_ConfigChannel>
 80062a2:	4603      	mov	r3, r0
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d001      	beq.n	80062ac <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 80062a8:	f000 fd86 	bl	8006db8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80062ac:	2307      	movs	r3, #7
 80062ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 80062b0:	230c      	movs	r3, #12
 80062b2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80062b4:	463b      	mov	r3, r7
 80062b6:	4619      	mov	r1, r3
 80062b8:	4813      	ldr	r0, [pc, #76]	; (8006308 <MX_ADC2_Init+0x204>)
 80062ba:	f003 ff9f 	bl	800a1fc <HAL_ADC_ConfigChannel>
 80062be:	4603      	mov	r3, r0
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d001      	beq.n	80062c8 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 80062c4:	f000 fd78 	bl	8006db8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80062c8:	2308      	movs	r3, #8
 80062ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 80062cc:	230d      	movs	r3, #13
 80062ce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80062d0:	463b      	mov	r3, r7
 80062d2:	4619      	mov	r1, r3
 80062d4:	480c      	ldr	r0, [pc, #48]	; (8006308 <MX_ADC2_Init+0x204>)
 80062d6:	f003 ff91 	bl	800a1fc <HAL_ADC_ConfigChannel>
 80062da:	4603      	mov	r3, r0
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d001      	beq.n	80062e4 <MX_ADC2_Init+0x1e0>
  {
    Error_Handler();
 80062e0:	f000 fd6a 	bl	8006db8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80062e4:	2309      	movs	r3, #9
 80062e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 80062e8:	230e      	movs	r3, #14
 80062ea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80062ec:	463b      	mov	r3, r7
 80062ee:	4619      	mov	r1, r3
 80062f0:	4805      	ldr	r0, [pc, #20]	; (8006308 <MX_ADC2_Init+0x204>)
 80062f2:	f003 ff83 	bl	800a1fc <HAL_ADC_ConfigChannel>
 80062f6:	4603      	mov	r3, r0
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d001      	beq.n	8006300 <MX_ADC2_Init+0x1fc>
  {
    Error_Handler();
 80062fc:	f000 fd5c 	bl	8006db8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8006300:	bf00      	nop
 8006302:	3710      	adds	r7, #16
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}
 8006308:	20047758 	.word	0x20047758
 800630c:	40012100 	.word	0x40012100
 8006310:	0f000001 	.word	0x0f000001

08006314 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8006318:	4b12      	ldr	r3, [pc, #72]	; (8006364 <MX_I2C1_Init+0x50>)
 800631a:	4a13      	ldr	r2, [pc, #76]	; (8006368 <MX_I2C1_Init+0x54>)
 800631c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800631e:	4b11      	ldr	r3, [pc, #68]	; (8006364 <MX_I2C1_Init+0x50>)
 8006320:	4a12      	ldr	r2, [pc, #72]	; (800636c <MX_I2C1_Init+0x58>)
 8006322:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006324:	4b0f      	ldr	r3, [pc, #60]	; (8006364 <MX_I2C1_Init+0x50>)
 8006326:	2200      	movs	r2, #0
 8006328:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800632a:	4b0e      	ldr	r3, [pc, #56]	; (8006364 <MX_I2C1_Init+0x50>)
 800632c:	2200      	movs	r2, #0
 800632e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006330:	4b0c      	ldr	r3, [pc, #48]	; (8006364 <MX_I2C1_Init+0x50>)
 8006332:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006336:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006338:	4b0a      	ldr	r3, [pc, #40]	; (8006364 <MX_I2C1_Init+0x50>)
 800633a:	2200      	movs	r2, #0
 800633c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800633e:	4b09      	ldr	r3, [pc, #36]	; (8006364 <MX_I2C1_Init+0x50>)
 8006340:	2200      	movs	r2, #0
 8006342:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006344:	4b07      	ldr	r3, [pc, #28]	; (8006364 <MX_I2C1_Init+0x50>)
 8006346:	2200      	movs	r2, #0
 8006348:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 800634a:	4b06      	ldr	r3, [pc, #24]	; (8006364 <MX_I2C1_Init+0x50>)
 800634c:	2280      	movs	r2, #128	; 0x80
 800634e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006350:	4804      	ldr	r0, [pc, #16]	; (8006364 <MX_I2C1_Init+0x50>)
 8006352:	f005 f8a5 	bl	800b4a0 <HAL_I2C_Init>
 8006356:	4603      	mov	r3, r0
 8006358:	2b00      	cmp	r3, #0
 800635a:	d001      	beq.n	8006360 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800635c:	f000 fd2c 	bl	8006db8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8006360:	bf00      	nop
 8006362:	bd80      	pop	{r7, pc}
 8006364:	200477a0 	.word	0x200477a0
 8006368:	40005400 	.word	0x40005400
 800636c:	000186a0 	.word	0x000186a0

08006370 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8006374:	4b12      	ldr	r3, [pc, #72]	; (80063c0 <MX_I2C2_Init+0x50>)
 8006376:	4a13      	ldr	r2, [pc, #76]	; (80063c4 <MX_I2C2_Init+0x54>)
 8006378:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800637a:	4b11      	ldr	r3, [pc, #68]	; (80063c0 <MX_I2C2_Init+0x50>)
 800637c:	4a12      	ldr	r2, [pc, #72]	; (80063c8 <MX_I2C2_Init+0x58>)
 800637e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006380:	4b0f      	ldr	r3, [pc, #60]	; (80063c0 <MX_I2C2_Init+0x50>)
 8006382:	2200      	movs	r2, #0
 8006384:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8006386:	4b0e      	ldr	r3, [pc, #56]	; (80063c0 <MX_I2C2_Init+0x50>)
 8006388:	2200      	movs	r2, #0
 800638a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800638c:	4b0c      	ldr	r3, [pc, #48]	; (80063c0 <MX_I2C2_Init+0x50>)
 800638e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006392:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006394:	4b0a      	ldr	r3, [pc, #40]	; (80063c0 <MX_I2C2_Init+0x50>)
 8006396:	2200      	movs	r2, #0
 8006398:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800639a:	4b09      	ldr	r3, [pc, #36]	; (80063c0 <MX_I2C2_Init+0x50>)
 800639c:	2200      	movs	r2, #0
 800639e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80063a0:	4b07      	ldr	r3, [pc, #28]	; (80063c0 <MX_I2C2_Init+0x50>)
 80063a2:	2200      	movs	r2, #0
 80063a4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 80063a6:	4b06      	ldr	r3, [pc, #24]	; (80063c0 <MX_I2C2_Init+0x50>)
 80063a8:	2280      	movs	r2, #128	; 0x80
 80063aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80063ac:	4804      	ldr	r0, [pc, #16]	; (80063c0 <MX_I2C2_Init+0x50>)
 80063ae:	f005 f877 	bl	800b4a0 <HAL_I2C_Init>
 80063b2:	4603      	mov	r3, r0
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d001      	beq.n	80063bc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80063b8:	f000 fcfe 	bl	8006db8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80063bc:	bf00      	nop
 80063be:	bd80      	pop	{r7, pc}
 80063c0:	20047834 	.word	0x20047834
 80063c4:	40005800 	.word	0x40005800
 80063c8:	000186a0 	.word	0x000186a0

080063cc <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80063cc:	b480      	push	{r7}
 80063ce:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80063d0:	4b0c      	ldr	r3, [pc, #48]	; (8006404 <MX_SDIO_SD_Init+0x38>)
 80063d2:	4a0d      	ldr	r2, [pc, #52]	; (8006408 <MX_SDIO_SD_Init+0x3c>)
 80063d4:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80063d6:	4b0b      	ldr	r3, [pc, #44]	; (8006404 <MX_SDIO_SD_Init+0x38>)
 80063d8:	2200      	movs	r2, #0
 80063da:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80063dc:	4b09      	ldr	r3, [pc, #36]	; (8006404 <MX_SDIO_SD_Init+0x38>)
 80063de:	2200      	movs	r2, #0
 80063e0:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80063e2:	4b08      	ldr	r3, [pc, #32]	; (8006404 <MX_SDIO_SD_Init+0x38>)
 80063e4:	2200      	movs	r2, #0
 80063e6:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80063e8:	4b06      	ldr	r3, [pc, #24]	; (8006404 <MX_SDIO_SD_Init+0x38>)
 80063ea:	2200      	movs	r2, #0
 80063ec:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80063ee:	4b05      	ldr	r3, [pc, #20]	; (8006404 <MX_SDIO_SD_Init+0x38>)
 80063f0:	2200      	movs	r2, #0
 80063f2:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 4;
 80063f4:	4b03      	ldr	r3, [pc, #12]	; (8006404 <MX_SDIO_SD_Init+0x38>)
 80063f6:	2204      	movs	r2, #4
 80063f8:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80063fa:	bf00      	nop
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr
 8006404:	20047a34 	.word	0x20047a34
 8006408:	40012c00 	.word	0x40012c00

0800640c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8006410:	4b17      	ldr	r3, [pc, #92]	; (8006470 <MX_SPI2_Init+0x64>)
 8006412:	4a18      	ldr	r2, [pc, #96]	; (8006474 <MX_SPI2_Init+0x68>)
 8006414:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8006416:	4b16      	ldr	r3, [pc, #88]	; (8006470 <MX_SPI2_Init+0x64>)
 8006418:	f44f 7282 	mov.w	r2, #260	; 0x104
 800641c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800641e:	4b14      	ldr	r3, [pc, #80]	; (8006470 <MX_SPI2_Init+0x64>)
 8006420:	2200      	movs	r2, #0
 8006422:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8006424:	4b12      	ldr	r3, [pc, #72]	; (8006470 <MX_SPI2_Init+0x64>)
 8006426:	2200      	movs	r2, #0
 8006428:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800642a:	4b11      	ldr	r3, [pc, #68]	; (8006470 <MX_SPI2_Init+0x64>)
 800642c:	2202      	movs	r2, #2
 800642e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8006430:	4b0f      	ldr	r3, [pc, #60]	; (8006470 <MX_SPI2_Init+0x64>)
 8006432:	2201      	movs	r2, #1
 8006434:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8006436:	4b0e      	ldr	r3, [pc, #56]	; (8006470 <MX_SPI2_Init+0x64>)
 8006438:	f44f 7200 	mov.w	r2, #512	; 0x200
 800643c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800643e:	4b0c      	ldr	r3, [pc, #48]	; (8006470 <MX_SPI2_Init+0x64>)
 8006440:	2220      	movs	r2, #32
 8006442:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006444:	4b0a      	ldr	r3, [pc, #40]	; (8006470 <MX_SPI2_Init+0x64>)
 8006446:	2200      	movs	r2, #0
 8006448:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800644a:	4b09      	ldr	r3, [pc, #36]	; (8006470 <MX_SPI2_Init+0x64>)
 800644c:	2200      	movs	r2, #0
 800644e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006450:	4b07      	ldr	r3, [pc, #28]	; (8006470 <MX_SPI2_Init+0x64>)
 8006452:	2200      	movs	r2, #0
 8006454:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8006456:	4b06      	ldr	r3, [pc, #24]	; (8006470 <MX_SPI2_Init+0x64>)
 8006458:	220a      	movs	r2, #10
 800645a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800645c:	4804      	ldr	r0, [pc, #16]	; (8006470 <MX_SPI2_Init+0x64>)
 800645e:	f008 f951 	bl	800e704 <HAL_SPI_Init>
 8006462:	4603      	mov	r3, r0
 8006464:	2b00      	cmp	r3, #0
 8006466:	d001      	beq.n	800646c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8006468:	f000 fca6 	bl	8006db8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800646c:	bf00      	nop
 800646e:	bd80      	pop	{r7, pc}
 8006470:	20047680 	.word	0x20047680
 8006474:	40003800 	.word	0x40003800

08006478 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b09a      	sub	sp, #104	; 0x68
 800647c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800647e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006482:	2224      	movs	r2, #36	; 0x24
 8006484:	2100      	movs	r1, #0
 8006486:	4618      	mov	r0, r3
 8006488:	f00e fa78 	bl	801497c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800648c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006490:	2200      	movs	r2, #0
 8006492:	601a      	str	r2, [r3, #0]
 8006494:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006496:	f107 0320 	add.w	r3, r7, #32
 800649a:	2200      	movs	r2, #0
 800649c:	601a      	str	r2, [r3, #0]
 800649e:	605a      	str	r2, [r3, #4]
 80064a0:	609a      	str	r2, [r3, #8]
 80064a2:	60da      	str	r2, [r3, #12]
 80064a4:	611a      	str	r2, [r3, #16]
 80064a6:	615a      	str	r2, [r3, #20]
 80064a8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80064aa:	463b      	mov	r3, r7
 80064ac:	2220      	movs	r2, #32
 80064ae:	2100      	movs	r1, #0
 80064b0:	4618      	mov	r0, r3
 80064b2:	f00e fa63 	bl	801497c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80064b6:	4b42      	ldr	r3, [pc, #264]	; (80065c0 <MX_TIM1_Init+0x148>)
 80064b8:	4a42      	ldr	r2, [pc, #264]	; (80065c4 <MX_TIM1_Init+0x14c>)
 80064ba:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80064bc:	4b40      	ldr	r3, [pc, #256]	; (80065c0 <MX_TIM1_Init+0x148>)
 80064be:	2200      	movs	r2, #0
 80064c0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80064c2:	4b3f      	ldr	r3, [pc, #252]	; (80065c0 <MX_TIM1_Init+0x148>)
 80064c4:	2200      	movs	r2, #0
 80064c6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80064c8:	4b3d      	ldr	r3, [pc, #244]	; (80065c0 <MX_TIM1_Init+0x148>)
 80064ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80064ce:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80064d0:	4b3b      	ldr	r3, [pc, #236]	; (80065c0 <MX_TIM1_Init+0x148>)
 80064d2:	2200      	movs	r2, #0
 80064d4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80064d6:	4b3a      	ldr	r3, [pc, #232]	; (80065c0 <MX_TIM1_Init+0x148>)
 80064d8:	2200      	movs	r2, #0
 80064da:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80064dc:	4b38      	ldr	r3, [pc, #224]	; (80065c0 <MX_TIM1_Init+0x148>)
 80064de:	2200      	movs	r2, #0
 80064e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80064e2:	4837      	ldr	r0, [pc, #220]	; (80065c0 <MX_TIM1_Init+0x148>)
 80064e4:	f008 feb1 	bl	800f24a <HAL_TIM_PWM_Init>
 80064e8:	4603      	mov	r3, r0
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d001      	beq.n	80064f2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80064ee:	f000 fc63 	bl	8006db8 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80064f2:	2303      	movs	r3, #3
 80064f4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80064f6:	2300      	movs	r3, #0
 80064f8:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80064fa:	2301      	movs	r3, #1
 80064fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80064fe:	2300      	movs	r3, #0
 8006500:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8006502:	2300      	movs	r3, #0
 8006504:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006506:	2300      	movs	r3, #0
 8006508:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800650a:	2301      	movs	r3, #1
 800650c:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800650e:	2300      	movs	r3, #0
 8006510:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8006512:	2300      	movs	r3, #0
 8006514:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8006516:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800651a:	4619      	mov	r1, r3
 800651c:	4828      	ldr	r0, [pc, #160]	; (80065c0 <MX_TIM1_Init+0x148>)
 800651e:	f008 fefd 	bl	800f31c <HAL_TIM_Encoder_Init>
 8006522:	4603      	mov	r3, r0
 8006524:	2b00      	cmp	r3, #0
 8006526:	d001      	beq.n	800652c <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8006528:	f000 fc46 	bl	8006db8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800652c:	2300      	movs	r3, #0
 800652e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006530:	2300      	movs	r3, #0
 8006532:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8006534:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006538:	4619      	mov	r1, r3
 800653a:	4821      	ldr	r0, [pc, #132]	; (80065c0 <MX_TIM1_Init+0x148>)
 800653c:	f009 fc24 	bl	800fd88 <HAL_TIMEx_MasterConfigSynchronization>
 8006540:	4603      	mov	r3, r0
 8006542:	2b00      	cmp	r3, #0
 8006544:	d001      	beq.n	800654a <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 8006546:	f000 fc37 	bl	8006db8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800654a:	2360      	movs	r3, #96	; 0x60
 800654c:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 800654e:	2300      	movs	r3, #0
 8006550:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006552:	2300      	movs	r3, #0
 8006554:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8006556:	2300      	movs	r3, #0
 8006558:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800655a:	2300      	movs	r3, #0
 800655c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800655e:	2300      	movs	r3, #0
 8006560:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006562:	2300      	movs	r3, #0
 8006564:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8006566:	f107 0320 	add.w	r3, r7, #32
 800656a:	2208      	movs	r2, #8
 800656c:	4619      	mov	r1, r3
 800656e:	4814      	ldr	r0, [pc, #80]	; (80065c0 <MX_TIM1_Init+0x148>)
 8006570:	f009 f8a6 	bl	800f6c0 <HAL_TIM_PWM_ConfigChannel>
 8006574:	4603      	mov	r3, r0
 8006576:	2b00      	cmp	r3, #0
 8006578:	d001      	beq.n	800657e <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 800657a:	f000 fc1d 	bl	8006db8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800657e:	2300      	movs	r3, #0
 8006580:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8006582:	2300      	movs	r3, #0
 8006584:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8006586:	2300      	movs	r3, #0
 8006588:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800658a:	2300      	movs	r3, #0
 800658c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800658e:	2300      	movs	r3, #0
 8006590:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8006592:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006596:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006598:	2300      	movs	r3, #0
 800659a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800659c:	463b      	mov	r3, r7
 800659e:	4619      	mov	r1, r3
 80065a0:	4807      	ldr	r0, [pc, #28]	; (80065c0 <MX_TIM1_Init+0x148>)
 80065a2:	f009 fc6d 	bl	800fe80 <HAL_TIMEx_ConfigBreakDeadTime>
 80065a6:	4603      	mov	r3, r0
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d001      	beq.n	80065b0 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 80065ac:	f000 fc04 	bl	8006db8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80065b0:	4803      	ldr	r0, [pc, #12]	; (80065c0 <MX_TIM1_Init+0x148>)
 80065b2:	f000 fff1 	bl	8007598 <HAL_TIM_MspPostInit>

}
 80065b6:	bf00      	nop
 80065b8:	3768      	adds	r7, #104	; 0x68
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}
 80065be:	bf00      	nop
 80065c0:	200479f4 	.word	0x200479f4
 80065c4:	40010000 	.word	0x40010000

080065c8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b08a      	sub	sp, #40	; 0x28
 80065cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80065ce:	f107 0320 	add.w	r3, r7, #32
 80065d2:	2200      	movs	r2, #0
 80065d4:	601a      	str	r2, [r3, #0]
 80065d6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80065d8:	1d3b      	adds	r3, r7, #4
 80065da:	2200      	movs	r2, #0
 80065dc:	601a      	str	r2, [r3, #0]
 80065de:	605a      	str	r2, [r3, #4]
 80065e0:	609a      	str	r2, [r3, #8]
 80065e2:	60da      	str	r2, [r3, #12]
 80065e4:	611a      	str	r2, [r3, #16]
 80065e6:	615a      	str	r2, [r3, #20]
 80065e8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80065ea:	4b27      	ldr	r3, [pc, #156]	; (8006688 <MX_TIM3_Init+0xc0>)
 80065ec:	4a27      	ldr	r2, [pc, #156]	; (800668c <MX_TIM3_Init+0xc4>)
 80065ee:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 80065f0:	4b25      	ldr	r3, [pc, #148]	; (8006688 <MX_TIM3_Init+0xc0>)
 80065f2:	2201      	movs	r2, #1
 80065f4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80065f6:	4b24      	ldr	r3, [pc, #144]	; (8006688 <MX_TIM3_Init+0xc0>)
 80065f8:	2200      	movs	r2, #0
 80065fa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4499;
 80065fc:	4b22      	ldr	r3, [pc, #136]	; (8006688 <MX_TIM3_Init+0xc0>)
 80065fe:	f241 1293 	movw	r2, #4499	; 0x1193
 8006602:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006604:	4b20      	ldr	r3, [pc, #128]	; (8006688 <MX_TIM3_Init+0xc0>)
 8006606:	2200      	movs	r2, #0
 8006608:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800660a:	4b1f      	ldr	r3, [pc, #124]	; (8006688 <MX_TIM3_Init+0xc0>)
 800660c:	2200      	movs	r2, #0
 800660e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8006610:	481d      	ldr	r0, [pc, #116]	; (8006688 <MX_TIM3_Init+0xc0>)
 8006612:	f008 fe1a 	bl	800f24a <HAL_TIM_PWM_Init>
 8006616:	4603      	mov	r3, r0
 8006618:	2b00      	cmp	r3, #0
 800661a:	d001      	beq.n	8006620 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800661c:	f000 fbcc 	bl	8006db8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006620:	2300      	movs	r3, #0
 8006622:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006624:	2300      	movs	r3, #0
 8006626:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006628:	f107 0320 	add.w	r3, r7, #32
 800662c:	4619      	mov	r1, r3
 800662e:	4816      	ldr	r0, [pc, #88]	; (8006688 <MX_TIM3_Init+0xc0>)
 8006630:	f009 fbaa 	bl	800fd88 <HAL_TIMEx_MasterConfigSynchronization>
 8006634:	4603      	mov	r3, r0
 8006636:	2b00      	cmp	r3, #0
 8006638:	d001      	beq.n	800663e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800663a:	f000 fbbd 	bl	8006db8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800663e:	2360      	movs	r3, #96	; 0x60
 8006640:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006642:	2300      	movs	r3, #0
 8006644:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006646:	2300      	movs	r3, #0
 8006648:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800664a:	2300      	movs	r3, #0
 800664c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800664e:	1d3b      	adds	r3, r7, #4
 8006650:	2200      	movs	r2, #0
 8006652:	4619      	mov	r1, r3
 8006654:	480c      	ldr	r0, [pc, #48]	; (8006688 <MX_TIM3_Init+0xc0>)
 8006656:	f009 f833 	bl	800f6c0 <HAL_TIM_PWM_ConfigChannel>
 800665a:	4603      	mov	r3, r0
 800665c:	2b00      	cmp	r3, #0
 800665e:	d001      	beq.n	8006664 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8006660:	f000 fbaa 	bl	8006db8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006664:	1d3b      	adds	r3, r7, #4
 8006666:	2204      	movs	r2, #4
 8006668:	4619      	mov	r1, r3
 800666a:	4807      	ldr	r0, [pc, #28]	; (8006688 <MX_TIM3_Init+0xc0>)
 800666c:	f009 f828 	bl	800f6c0 <HAL_TIM_PWM_ConfigChannel>
 8006670:	4603      	mov	r3, r0
 8006672:	2b00      	cmp	r3, #0
 8006674:	d001      	beq.n	800667a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8006676:	f000 fb9f 	bl	8006db8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800667a:	4803      	ldr	r0, [pc, #12]	; (8006688 <MX_TIM3_Init+0xc0>)
 800667c:	f000 ff8c 	bl	8007598 <HAL_TIM_MspPostInit>

}
 8006680:	bf00      	nop
 8006682:	3728      	adds	r7, #40	; 0x28
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}
 8006688:	2004788c 	.word	0x2004788c
 800668c:	40000400 	.word	0x40000400

08006690 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b08a      	sub	sp, #40	; 0x28
 8006694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006696:	f107 0320 	add.w	r3, r7, #32
 800669a:	2200      	movs	r2, #0
 800669c:	601a      	str	r2, [r3, #0]
 800669e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80066a0:	1d3b      	adds	r3, r7, #4
 80066a2:	2200      	movs	r2, #0
 80066a4:	601a      	str	r2, [r3, #0]
 80066a6:	605a      	str	r2, [r3, #4]
 80066a8:	609a      	str	r2, [r3, #8]
 80066aa:	60da      	str	r2, [r3, #12]
 80066ac:	611a      	str	r2, [r3, #16]
 80066ae:	615a      	str	r2, [r3, #20]
 80066b0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80066b2:	4b27      	ldr	r3, [pc, #156]	; (8006750 <MX_TIM4_Init+0xc0>)
 80066b4:	4a27      	ldr	r2, [pc, #156]	; (8006754 <MX_TIM4_Init+0xc4>)
 80066b6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80066b8:	4b25      	ldr	r3, [pc, #148]	; (8006750 <MX_TIM4_Init+0xc0>)
 80066ba:	2200      	movs	r2, #0
 80066bc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80066be:	4b24      	ldr	r3, [pc, #144]	; (8006750 <MX_TIM4_Init+0xc0>)
 80066c0:	2200      	movs	r2, #0
 80066c2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 80066c4:	4b22      	ldr	r3, [pc, #136]	; (8006750 <MX_TIM4_Init+0xc0>)
 80066c6:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80066ca:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80066cc:	4b20      	ldr	r3, [pc, #128]	; (8006750 <MX_TIM4_Init+0xc0>)
 80066ce:	2200      	movs	r2, #0
 80066d0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80066d2:	4b1f      	ldr	r3, [pc, #124]	; (8006750 <MX_TIM4_Init+0xc0>)
 80066d4:	2200      	movs	r2, #0
 80066d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80066d8:	481d      	ldr	r0, [pc, #116]	; (8006750 <MX_TIM4_Init+0xc0>)
 80066da:	f008 fdb6 	bl	800f24a <HAL_TIM_PWM_Init>
 80066de:	4603      	mov	r3, r0
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d001      	beq.n	80066e8 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80066e4:	f000 fb68 	bl	8006db8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80066e8:	2300      	movs	r3, #0
 80066ea:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80066ec:	2300      	movs	r3, #0
 80066ee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80066f0:	f107 0320 	add.w	r3, r7, #32
 80066f4:	4619      	mov	r1, r3
 80066f6:	4816      	ldr	r0, [pc, #88]	; (8006750 <MX_TIM4_Init+0xc0>)
 80066f8:	f009 fb46 	bl	800fd88 <HAL_TIMEx_MasterConfigSynchronization>
 80066fc:	4603      	mov	r3, r0
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d001      	beq.n	8006706 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8006702:	f000 fb59 	bl	8006db8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006706:	2360      	movs	r3, #96	; 0x60
 8006708:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800670a:	2300      	movs	r3, #0
 800670c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800670e:	2300      	movs	r3, #0
 8006710:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006712:	2300      	movs	r3, #0
 8006714:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8006716:	1d3b      	adds	r3, r7, #4
 8006718:	2208      	movs	r2, #8
 800671a:	4619      	mov	r1, r3
 800671c:	480c      	ldr	r0, [pc, #48]	; (8006750 <MX_TIM4_Init+0xc0>)
 800671e:	f008 ffcf 	bl	800f6c0 <HAL_TIM_PWM_ConfigChannel>
 8006722:	4603      	mov	r3, r0
 8006724:	2b00      	cmp	r3, #0
 8006726:	d001      	beq.n	800672c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8006728:	f000 fb46 	bl	8006db8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800672c:	1d3b      	adds	r3, r7, #4
 800672e:	220c      	movs	r2, #12
 8006730:	4619      	mov	r1, r3
 8006732:	4807      	ldr	r0, [pc, #28]	; (8006750 <MX_TIM4_Init+0xc0>)
 8006734:	f008 ffc4 	bl	800f6c0 <HAL_TIM_PWM_ConfigChannel>
 8006738:	4603      	mov	r3, r0
 800673a:	2b00      	cmp	r3, #0
 800673c:	d001      	beq.n	8006742 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800673e:	f000 fb3b 	bl	8006db8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8006742:	4803      	ldr	r0, [pc, #12]	; (8006750 <MX_TIM4_Init+0xc0>)
 8006744:	f000 ff28 	bl	8007598 <HAL_TIM_MspPostInit>

}
 8006748:	bf00      	nop
 800674a:	3728      	adds	r7, #40	; 0x28
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}
 8006750:	20047718 	.word	0x20047718
 8006754:	40000800 	.word	0x40000800

08006758 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b082      	sub	sp, #8
 800675c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800675e:	463b      	mov	r3, r7
 8006760:	2200      	movs	r2, #0
 8006762:	601a      	str	r2, [r3, #0]
 8006764:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8006766:	4b15      	ldr	r3, [pc, #84]	; (80067bc <MX_TIM6_Init+0x64>)
 8006768:	4a15      	ldr	r2, [pc, #84]	; (80067c0 <MX_TIM6_Init+0x68>)
 800676a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 800676c:	4b13      	ldr	r3, [pc, #76]	; (80067bc <MX_TIM6_Init+0x64>)
 800676e:	2259      	movs	r2, #89	; 0x59
 8006770:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006772:	4b12      	ldr	r3, [pc, #72]	; (80067bc <MX_TIM6_Init+0x64>)
 8006774:	2200      	movs	r2, #0
 8006776:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8006778:	4b10      	ldr	r3, [pc, #64]	; (80067bc <MX_TIM6_Init+0x64>)
 800677a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800677e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006780:	4b0e      	ldr	r3, [pc, #56]	; (80067bc <MX_TIM6_Init+0x64>)
 8006782:	2280      	movs	r2, #128	; 0x80
 8006784:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8006786:	480d      	ldr	r0, [pc, #52]	; (80067bc <MX_TIM6_Init+0x64>)
 8006788:	f008 fd10 	bl	800f1ac <HAL_TIM_Base_Init>
 800678c:	4603      	mov	r3, r0
 800678e:	2b00      	cmp	r3, #0
 8006790:	d001      	beq.n	8006796 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8006792:	f000 fb11 	bl	8006db8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006796:	2300      	movs	r3, #0
 8006798:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800679a:	2300      	movs	r3, #0
 800679c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800679e:	463b      	mov	r3, r7
 80067a0:	4619      	mov	r1, r3
 80067a2:	4806      	ldr	r0, [pc, #24]	; (80067bc <MX_TIM6_Init+0x64>)
 80067a4:	f009 faf0 	bl	800fd88 <HAL_TIMEx_MasterConfigSynchronization>
 80067a8:	4603      	mov	r3, r0
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d001      	beq.n	80067b2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80067ae:	f000 fb03 	bl	8006db8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80067b2:	bf00      	nop
 80067b4:	3708      	adds	r7, #8
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}
 80067ba:	bf00      	nop
 80067bc:	200479b4 	.word	0x200479b4
 80067c0:	40001000 	.word	0x40001000

080067c4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b082      	sub	sp, #8
 80067c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80067ca:	463b      	mov	r3, r7
 80067cc:	2200      	movs	r2, #0
 80067ce:	601a      	str	r2, [r3, #0]
 80067d0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80067d2:	4b14      	ldr	r3, [pc, #80]	; (8006824 <MX_TIM7_Init+0x60>)
 80067d4:	4a14      	ldr	r2, [pc, #80]	; (8006828 <MX_TIM7_Init+0x64>)
 80067d6:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 179;
 80067d8:	4b12      	ldr	r3, [pc, #72]	; (8006824 <MX_TIM7_Init+0x60>)
 80067da:	22b3      	movs	r2, #179	; 0xb3
 80067dc:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80067de:	4b11      	ldr	r3, [pc, #68]	; (8006824 <MX_TIM7_Init+0x60>)
 80067e0:	2200      	movs	r2, #0
 80067e2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49;
 80067e4:	4b0f      	ldr	r3, [pc, #60]	; (8006824 <MX_TIM7_Init+0x60>)
 80067e6:	2231      	movs	r2, #49	; 0x31
 80067e8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80067ea:	4b0e      	ldr	r3, [pc, #56]	; (8006824 <MX_TIM7_Init+0x60>)
 80067ec:	2280      	movs	r2, #128	; 0x80
 80067ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80067f0:	480c      	ldr	r0, [pc, #48]	; (8006824 <MX_TIM7_Init+0x60>)
 80067f2:	f008 fcdb 	bl	800f1ac <HAL_TIM_Base_Init>
 80067f6:	4603      	mov	r3, r0
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d001      	beq.n	8006800 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 80067fc:	f000 fadc 	bl	8006db8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006800:	2300      	movs	r3, #0
 8006802:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006804:	2300      	movs	r3, #0
 8006806:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8006808:	463b      	mov	r3, r7
 800680a:	4619      	mov	r1, r3
 800680c:	4805      	ldr	r0, [pc, #20]	; (8006824 <MX_TIM7_Init+0x60>)
 800680e:	f009 fabb 	bl	800fd88 <HAL_TIMEx_MasterConfigSynchronization>
 8006812:	4603      	mov	r3, r0
 8006814:	2b00      	cmp	r3, #0
 8006816:	d001      	beq.n	800681c <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8006818:	f000 face 	bl	8006db8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800681c:	bf00      	nop
 800681e:	3708      	adds	r7, #8
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}
 8006824:	20047b58 	.word	0x20047b58
 8006828:	40001400 	.word	0x40001400

0800682c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b08c      	sub	sp, #48	; 0x30
 8006830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8006832:	f107 030c 	add.w	r3, r7, #12
 8006836:	2224      	movs	r2, #36	; 0x24
 8006838:	2100      	movs	r1, #0
 800683a:	4618      	mov	r0, r3
 800683c:	f00e f89e 	bl	801497c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006840:	1d3b      	adds	r3, r7, #4
 8006842:	2200      	movs	r2, #0
 8006844:	601a      	str	r2, [r3, #0]
 8006846:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8006848:	4b22      	ldr	r3, [pc, #136]	; (80068d4 <MX_TIM8_Init+0xa8>)
 800684a:	4a23      	ldr	r2, [pc, #140]	; (80068d8 <MX_TIM8_Init+0xac>)
 800684c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800684e:	4b21      	ldr	r3, [pc, #132]	; (80068d4 <MX_TIM8_Init+0xa8>)
 8006850:	2200      	movs	r2, #0
 8006852:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8006854:	4b1f      	ldr	r3, [pc, #124]	; (80068d4 <MX_TIM8_Init+0xa8>)
 8006856:	2210      	movs	r2, #16
 8006858:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800685a:	4b1e      	ldr	r3, [pc, #120]	; (80068d4 <MX_TIM8_Init+0xa8>)
 800685c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006860:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006862:	4b1c      	ldr	r3, [pc, #112]	; (80068d4 <MX_TIM8_Init+0xa8>)
 8006864:	2200      	movs	r2, #0
 8006866:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8006868:	4b1a      	ldr	r3, [pc, #104]	; (80068d4 <MX_TIM8_Init+0xa8>)
 800686a:	2200      	movs	r2, #0
 800686c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800686e:	4b19      	ldr	r3, [pc, #100]	; (80068d4 <MX_TIM8_Init+0xa8>)
 8006870:	2200      	movs	r2, #0
 8006872:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8006874:	2303      	movs	r3, #3
 8006876:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006878:	2300      	movs	r3, #0
 800687a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800687c:	2301      	movs	r3, #1
 800687e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006880:	2300      	movs	r3, #0
 8006882:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8006884:	2300      	movs	r3, #0
 8006886:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006888:	2300      	movs	r3, #0
 800688a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800688c:	2301      	movs	r3, #1
 800688e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8006890:	2300      	movs	r3, #0
 8006892:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8006894:	2300      	movs	r3, #0
 8006896:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8006898:	f107 030c 	add.w	r3, r7, #12
 800689c:	4619      	mov	r1, r3
 800689e:	480d      	ldr	r0, [pc, #52]	; (80068d4 <MX_TIM8_Init+0xa8>)
 80068a0:	f008 fd3c 	bl	800f31c <HAL_TIM_Encoder_Init>
 80068a4:	4603      	mov	r3, r0
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d001      	beq.n	80068ae <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 80068aa:	f000 fa85 	bl	8006db8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80068ae:	2300      	movs	r3, #0
 80068b0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80068b2:	2300      	movs	r3, #0
 80068b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80068b6:	1d3b      	adds	r3, r7, #4
 80068b8:	4619      	mov	r1, r3
 80068ba:	4806      	ldr	r0, [pc, #24]	; (80068d4 <MX_TIM8_Init+0xa8>)
 80068bc:	f009 fa64 	bl	800fd88 <HAL_TIMEx_MasterConfigSynchronization>
 80068c0:	4603      	mov	r3, r0
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d001      	beq.n	80068ca <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 80068c6:	f000 fa77 	bl	8006db8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80068ca:	bf00      	nop
 80068cc:	3730      	adds	r7, #48	; 0x30
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}
 80068d2:	bf00      	nop
 80068d4:	200476d8 	.word	0x200476d8
 80068d8:	40010400 	.word	0x40010400

080068dc <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b088      	sub	sp, #32
 80068e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80068e2:	1d3b      	adds	r3, r7, #4
 80068e4:	2200      	movs	r2, #0
 80068e6:	601a      	str	r2, [r3, #0]
 80068e8:	605a      	str	r2, [r3, #4]
 80068ea:	609a      	str	r2, [r3, #8]
 80068ec:	60da      	str	r2, [r3, #12]
 80068ee:	611a      	str	r2, [r3, #16]
 80068f0:	615a      	str	r2, [r3, #20]
 80068f2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80068f4:	4b1e      	ldr	r3, [pc, #120]	; (8006970 <MX_TIM10_Init+0x94>)
 80068f6:	4a1f      	ldr	r2, [pc, #124]	; (8006974 <MX_TIM10_Init+0x98>)
 80068f8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 1;
 80068fa:	4b1d      	ldr	r3, [pc, #116]	; (8006970 <MX_TIM10_Init+0x94>)
 80068fc:	2201      	movs	r2, #1
 80068fe:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006900:	4b1b      	ldr	r3, [pc, #108]	; (8006970 <MX_TIM10_Init+0x94>)
 8006902:	2200      	movs	r2, #0
 8006904:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 8999;
 8006906:	4b1a      	ldr	r3, [pc, #104]	; (8006970 <MX_TIM10_Init+0x94>)
 8006908:	f242 3227 	movw	r2, #8999	; 0x2327
 800690c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800690e:	4b18      	ldr	r3, [pc, #96]	; (8006970 <MX_TIM10_Init+0x94>)
 8006910:	2200      	movs	r2, #0
 8006912:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006914:	4b16      	ldr	r3, [pc, #88]	; (8006970 <MX_TIM10_Init+0x94>)
 8006916:	2200      	movs	r2, #0
 8006918:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800691a:	4815      	ldr	r0, [pc, #84]	; (8006970 <MX_TIM10_Init+0x94>)
 800691c:	f008 fc46 	bl	800f1ac <HAL_TIM_Base_Init>
 8006920:	4603      	mov	r3, r0
 8006922:	2b00      	cmp	r3, #0
 8006924:	d001      	beq.n	800692a <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8006926:	f000 fa47 	bl	8006db8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 800692a:	4811      	ldr	r0, [pc, #68]	; (8006970 <MX_TIM10_Init+0x94>)
 800692c:	f008 fc8d 	bl	800f24a <HAL_TIM_PWM_Init>
 8006930:	4603      	mov	r3, r0
 8006932:	2b00      	cmp	r3, #0
 8006934:	d001      	beq.n	800693a <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8006936:	f000 fa3f 	bl	8006db8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800693a:	2360      	movs	r3, #96	; 0x60
 800693c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800693e:	2300      	movs	r3, #0
 8006940:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006942:	2300      	movs	r3, #0
 8006944:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006946:	2300      	movs	r3, #0
 8006948:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800694a:	1d3b      	adds	r3, r7, #4
 800694c:	2200      	movs	r2, #0
 800694e:	4619      	mov	r1, r3
 8006950:	4807      	ldr	r0, [pc, #28]	; (8006970 <MX_TIM10_Init+0x94>)
 8006952:	f008 feb5 	bl	800f6c0 <HAL_TIM_PWM_ConfigChannel>
 8006956:	4603      	mov	r3, r0
 8006958:	2b00      	cmp	r3, #0
 800695a:	d001      	beq.n	8006960 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 800695c:	f000 fa2c 	bl	8006db8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8006960:	4803      	ldr	r0, [pc, #12]	; (8006970 <MX_TIM10_Init+0x94>)
 8006962:	f000 fe19 	bl	8007598 <HAL_TIM_MspPostInit>

}
 8006966:	bf00      	nop
 8006968:	3720      	adds	r7, #32
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}
 800696e:	bf00      	nop
 8006970:	200477f4 	.word	0x200477f4
 8006974:	40014400 	.word	0x40014400

08006978 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b088      	sub	sp, #32
 800697c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800697e:	1d3b      	adds	r3, r7, #4
 8006980:	2200      	movs	r2, #0
 8006982:	601a      	str	r2, [r3, #0]
 8006984:	605a      	str	r2, [r3, #4]
 8006986:	609a      	str	r2, [r3, #8]
 8006988:	60da      	str	r2, [r3, #12]
 800698a:	611a      	str	r2, [r3, #16]
 800698c:	615a      	str	r2, [r3, #20]
 800698e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8006990:	4b1e      	ldr	r3, [pc, #120]	; (8006a0c <MX_TIM11_Init+0x94>)
 8006992:	4a1f      	ldr	r2, [pc, #124]	; (8006a10 <MX_TIM11_Init+0x98>)
 8006994:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 1;
 8006996:	4b1d      	ldr	r3, [pc, #116]	; (8006a0c <MX_TIM11_Init+0x94>)
 8006998:	2201      	movs	r2, #1
 800699a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800699c:	4b1b      	ldr	r3, [pc, #108]	; (8006a0c <MX_TIM11_Init+0x94>)
 800699e:	2200      	movs	r2, #0
 80069a0:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 8999;
 80069a2:	4b1a      	ldr	r3, [pc, #104]	; (8006a0c <MX_TIM11_Init+0x94>)
 80069a4:	f242 3227 	movw	r2, #8999	; 0x2327
 80069a8:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80069aa:	4b18      	ldr	r3, [pc, #96]	; (8006a0c <MX_TIM11_Init+0x94>)
 80069ac:	2200      	movs	r2, #0
 80069ae:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80069b0:	4b16      	ldr	r3, [pc, #88]	; (8006a0c <MX_TIM11_Init+0x94>)
 80069b2:	2200      	movs	r2, #0
 80069b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80069b6:	4815      	ldr	r0, [pc, #84]	; (8006a0c <MX_TIM11_Init+0x94>)
 80069b8:	f008 fbf8 	bl	800f1ac <HAL_TIM_Base_Init>
 80069bc:	4603      	mov	r3, r0
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d001      	beq.n	80069c6 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 80069c2:	f000 f9f9 	bl	8006db8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 80069c6:	4811      	ldr	r0, [pc, #68]	; (8006a0c <MX_TIM11_Init+0x94>)
 80069c8:	f008 fc3f 	bl	800f24a <HAL_TIM_PWM_Init>
 80069cc:	4603      	mov	r3, r0
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d001      	beq.n	80069d6 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 80069d2:	f000 f9f1 	bl	8006db8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80069d6:	2360      	movs	r3, #96	; 0x60
 80069d8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80069da:	2300      	movs	r3, #0
 80069dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80069de:	2300      	movs	r3, #0
 80069e0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80069e2:	2300      	movs	r3, #0
 80069e4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80069e6:	1d3b      	adds	r3, r7, #4
 80069e8:	2200      	movs	r2, #0
 80069ea:	4619      	mov	r1, r3
 80069ec:	4807      	ldr	r0, [pc, #28]	; (8006a0c <MX_TIM11_Init+0x94>)
 80069ee:	f008 fe67 	bl	800f6c0 <HAL_TIM_PWM_ConfigChannel>
 80069f2:	4603      	mov	r3, r0
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d001      	beq.n	80069fc <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 80069f8:	f000 f9de 	bl	8006db8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 80069fc:	4803      	ldr	r0, [pc, #12]	; (8006a0c <MX_TIM11_Init+0x94>)
 80069fe:	f000 fdcb 	bl	8007598 <HAL_TIM_MspPostInit>

}
 8006a02:	bf00      	nop
 8006a04:	3720      	adds	r7, #32
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}
 8006a0a:	bf00      	nop
 8006a0c:	20047914 	.word	0x20047914
 8006a10:	40014800 	.word	0x40014800

08006a14 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8006a18:	4b0e      	ldr	r3, [pc, #56]	; (8006a54 <MX_TIM13_Init+0x40>)
 8006a1a:	4a0f      	ldr	r2, [pc, #60]	; (8006a58 <MX_TIM13_Init+0x44>)
 8006a1c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 89;
 8006a1e:	4b0d      	ldr	r3, [pc, #52]	; (8006a54 <MX_TIM13_Init+0x40>)
 8006a20:	2259      	movs	r2, #89	; 0x59
 8006a22:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006a24:	4b0b      	ldr	r3, [pc, #44]	; (8006a54 <MX_TIM13_Init+0x40>)
 8006a26:	2200      	movs	r2, #0
 8006a28:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 8006a2a:	4b0a      	ldr	r3, [pc, #40]	; (8006a54 <MX_TIM13_Init+0x40>)
 8006a2c:	f242 720f 	movw	r2, #9999	; 0x270f
 8006a30:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006a32:	4b08      	ldr	r3, [pc, #32]	; (8006a54 <MX_TIM13_Init+0x40>)
 8006a34:	2200      	movs	r2, #0
 8006a36:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006a38:	4b06      	ldr	r3, [pc, #24]	; (8006a54 <MX_TIM13_Init+0x40>)
 8006a3a:	2280      	movs	r2, #128	; 0x80
 8006a3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8006a3e:	4805      	ldr	r0, [pc, #20]	; (8006a54 <MX_TIM13_Init+0x40>)
 8006a40:	f008 fbb4 	bl	800f1ac <HAL_TIM_Base_Init>
 8006a44:	4603      	mov	r3, r0
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d001      	beq.n	8006a4e <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8006a4a:	f000 f9b5 	bl	8006db8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8006a4e:	bf00      	nop
 8006a50:	bd80      	pop	{r7, pc}
 8006a52:	bf00      	nop
 8006a54:	200478d4 	.word	0x200478d4
 8006a58:	40001c00 	.word	0x40001c00

08006a5c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006a60:	4b11      	ldr	r3, [pc, #68]	; (8006aa8 <MX_USART2_UART_Init+0x4c>)
 8006a62:	4a12      	ldr	r2, [pc, #72]	; (8006aac <MX_USART2_UART_Init+0x50>)
 8006a64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8006a66:	4b10      	ldr	r3, [pc, #64]	; (8006aa8 <MX_USART2_UART_Init+0x4c>)
 8006a68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006a6c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006a6e:	4b0e      	ldr	r3, [pc, #56]	; (8006aa8 <MX_USART2_UART_Init+0x4c>)
 8006a70:	2200      	movs	r2, #0
 8006a72:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006a74:	4b0c      	ldr	r3, [pc, #48]	; (8006aa8 <MX_USART2_UART_Init+0x4c>)
 8006a76:	2200      	movs	r2, #0
 8006a78:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006a7a:	4b0b      	ldr	r3, [pc, #44]	; (8006aa8 <MX_USART2_UART_Init+0x4c>)
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006a80:	4b09      	ldr	r3, [pc, #36]	; (8006aa8 <MX_USART2_UART_Init+0x4c>)
 8006a82:	220c      	movs	r2, #12
 8006a84:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006a86:	4b08      	ldr	r3, [pc, #32]	; (8006aa8 <MX_USART2_UART_Init+0x4c>)
 8006a88:	2200      	movs	r2, #0
 8006a8a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006a8c:	4b06      	ldr	r3, [pc, #24]	; (8006aa8 <MX_USART2_UART_Init+0x4c>)
 8006a8e:	2200      	movs	r2, #0
 8006a90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006a92:	4805      	ldr	r0, [pc, #20]	; (8006aa8 <MX_USART2_UART_Init+0x4c>)
 8006a94:	f009 fa5a 	bl	800ff4c <HAL_UART_Init>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d001      	beq.n	8006aa2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8006a9e:	f000 f98b 	bl	8006db8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006aa2:	bf00      	nop
 8006aa4:	bd80      	pop	{r7, pc}
 8006aa6:	bf00      	nop
 8006aa8:	20047ab8 	.word	0x20047ab8
 8006aac:	40004400 	.word	0x40004400

08006ab0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b082      	sub	sp, #8
 8006ab4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	607b      	str	r3, [r7, #4]
 8006aba:	4b14      	ldr	r3, [pc, #80]	; (8006b0c <MX_DMA_Init+0x5c>)
 8006abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006abe:	4a13      	ldr	r2, [pc, #76]	; (8006b0c <MX_DMA_Init+0x5c>)
 8006ac0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8006ac6:	4b11      	ldr	r3, [pc, #68]	; (8006b0c <MX_DMA_Init+0x5c>)
 8006ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ace:	607b      	str	r3, [r7, #4]
 8006ad0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	2100      	movs	r1, #0
 8006ad6:	203a      	movs	r0, #58	; 0x3a
 8006ad8:	f003 ff1b 	bl	800a912 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8006adc:	203a      	movs	r0, #58	; 0x3a
 8006ade:	f003 ff34 	bl	800a94a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	2100      	movs	r1, #0
 8006ae6:	203b      	movs	r0, #59	; 0x3b
 8006ae8:	f003 ff13 	bl	800a912 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8006aec:	203b      	movs	r0, #59	; 0x3b
 8006aee:	f003 ff2c 	bl	800a94a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8006af2:	2200      	movs	r2, #0
 8006af4:	2100      	movs	r1, #0
 8006af6:	2045      	movs	r0, #69	; 0x45
 8006af8:	f003 ff0b 	bl	800a912 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8006afc:	2045      	movs	r0, #69	; 0x45
 8006afe:	f003 ff24 	bl	800a94a <HAL_NVIC_EnableIRQ>

}
 8006b02:	bf00      	nop
 8006b04:	3708      	adds	r7, #8
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}
 8006b0a:	bf00      	nop
 8006b0c:	40023800 	.word	0x40023800

08006b10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b08c      	sub	sp, #48	; 0x30
 8006b14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b16:	f107 031c 	add.w	r3, r7, #28
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	601a      	str	r2, [r3, #0]
 8006b1e:	605a      	str	r2, [r3, #4]
 8006b20:	609a      	str	r2, [r3, #8]
 8006b22:	60da      	str	r2, [r3, #12]
 8006b24:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006b26:	2300      	movs	r3, #0
 8006b28:	61bb      	str	r3, [r7, #24]
 8006b2a:	4b9c      	ldr	r3, [pc, #624]	; (8006d9c <MX_GPIO_Init+0x28c>)
 8006b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b2e:	4a9b      	ldr	r2, [pc, #620]	; (8006d9c <MX_GPIO_Init+0x28c>)
 8006b30:	f043 0310 	orr.w	r3, r3, #16
 8006b34:	6313      	str	r3, [r2, #48]	; 0x30
 8006b36:	4b99      	ldr	r3, [pc, #612]	; (8006d9c <MX_GPIO_Init+0x28c>)
 8006b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b3a:	f003 0310 	and.w	r3, r3, #16
 8006b3e:	61bb      	str	r3, [r7, #24]
 8006b40:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006b42:	2300      	movs	r3, #0
 8006b44:	617b      	str	r3, [r7, #20]
 8006b46:	4b95      	ldr	r3, [pc, #596]	; (8006d9c <MX_GPIO_Init+0x28c>)
 8006b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b4a:	4a94      	ldr	r2, [pc, #592]	; (8006d9c <MX_GPIO_Init+0x28c>)
 8006b4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b50:	6313      	str	r3, [r2, #48]	; 0x30
 8006b52:	4b92      	ldr	r3, [pc, #584]	; (8006d9c <MX_GPIO_Init+0x28c>)
 8006b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b5a:	617b      	str	r3, [r7, #20]
 8006b5c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006b5e:	2300      	movs	r3, #0
 8006b60:	613b      	str	r3, [r7, #16]
 8006b62:	4b8e      	ldr	r3, [pc, #568]	; (8006d9c <MX_GPIO_Init+0x28c>)
 8006b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b66:	4a8d      	ldr	r2, [pc, #564]	; (8006d9c <MX_GPIO_Init+0x28c>)
 8006b68:	f043 0304 	orr.w	r3, r3, #4
 8006b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8006b6e:	4b8b      	ldr	r3, [pc, #556]	; (8006d9c <MX_GPIO_Init+0x28c>)
 8006b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b72:	f003 0304 	and.w	r3, r3, #4
 8006b76:	613b      	str	r3, [r7, #16]
 8006b78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	60fb      	str	r3, [r7, #12]
 8006b7e:	4b87      	ldr	r3, [pc, #540]	; (8006d9c <MX_GPIO_Init+0x28c>)
 8006b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b82:	4a86      	ldr	r2, [pc, #536]	; (8006d9c <MX_GPIO_Init+0x28c>)
 8006b84:	f043 0301 	orr.w	r3, r3, #1
 8006b88:	6313      	str	r3, [r2, #48]	; 0x30
 8006b8a:	4b84      	ldr	r3, [pc, #528]	; (8006d9c <MX_GPIO_Init+0x28c>)
 8006b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b8e:	f003 0301 	and.w	r3, r3, #1
 8006b92:	60fb      	str	r3, [r7, #12]
 8006b94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006b96:	2300      	movs	r3, #0
 8006b98:	60bb      	str	r3, [r7, #8]
 8006b9a:	4b80      	ldr	r3, [pc, #512]	; (8006d9c <MX_GPIO_Init+0x28c>)
 8006b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b9e:	4a7f      	ldr	r2, [pc, #508]	; (8006d9c <MX_GPIO_Init+0x28c>)
 8006ba0:	f043 0302 	orr.w	r3, r3, #2
 8006ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8006ba6:	4b7d      	ldr	r3, [pc, #500]	; (8006d9c <MX_GPIO_Init+0x28c>)
 8006ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006baa:	f003 0302 	and.w	r3, r3, #2
 8006bae:	60bb      	str	r3, [r7, #8]
 8006bb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	607b      	str	r3, [r7, #4]
 8006bb6:	4b79      	ldr	r3, [pc, #484]	; (8006d9c <MX_GPIO_Init+0x28c>)
 8006bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bba:	4a78      	ldr	r2, [pc, #480]	; (8006d9c <MX_GPIO_Init+0x28c>)
 8006bbc:	f043 0308 	orr.w	r3, r3, #8
 8006bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8006bc2:	4b76      	ldr	r3, [pc, #472]	; (8006d9c <MX_GPIO_Init+0x28c>)
 8006bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bc6:	f003 0308 	and.w	r3, r3, #8
 8006bca:	607b      	str	r3, [r7, #4]
 8006bcc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8006bce:	2200      	movs	r2, #0
 8006bd0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006bd4:	4872      	ldr	r0, [pc, #456]	; (8006da0 <MX_GPIO_Init+0x290>)
 8006bd6:	f004 fc31 	bl	800b43c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006be0:	4870      	ldr	r0, [pc, #448]	; (8006da4 <MX_GPIO_Init+0x294>)
 8006be2:	f004 fc2b 	bl	800b43c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8006be6:	2200      	movs	r2, #0
 8006be8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006bec:	486e      	ldr	r0, [pc, #440]	; (8006da8 <MX_GPIO_Init+0x298>)
 8006bee:	f004 fc25 	bl	800b43c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8006bf8:	486c      	ldr	r0, [pc, #432]	; (8006dac <MX_GPIO_Init+0x29c>)
 8006bfa:	f004 fc1f 	bl	800b43c <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006bfe:	2304      	movs	r3, #4
 8006c00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8006c02:	4b6b      	ldr	r3, [pc, #428]	; (8006db0 <MX_GPIO_Init+0x2a0>)
 8006c04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c06:	2300      	movs	r3, #0
 8006c08:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006c0a:	f107 031c 	add.w	r3, r7, #28
 8006c0e:	4619      	mov	r1, r3
 8006c10:	4863      	ldr	r0, [pc, #396]	; (8006da0 <MX_GPIO_Init+0x290>)
 8006c12:	f004 fa51 	bl	800b0b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8006c16:	230f      	movs	r3, #15
 8006c18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006c1a:	2303      	movs	r3, #3
 8006c1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006c22:	f107 031c 	add.w	r3, r7, #28
 8006c26:	4619      	mov	r1, r3
 8006c28:	4862      	ldr	r0, [pc, #392]	; (8006db4 <MX_GPIO_Init+0x2a4>)
 8006c2a:	f004 fa45 	bl	800b0b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8006c2e:	23e1      	movs	r3, #225	; 0xe1
 8006c30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006c32:	2303      	movs	r3, #3
 8006c34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c36:	2300      	movs	r3, #0
 8006c38:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c3a:	f107 031c 	add.w	r3, r7, #28
 8006c3e:	4619      	mov	r1, r3
 8006c40:	485a      	ldr	r0, [pc, #360]	; (8006dac <MX_GPIO_Init+0x29c>)
 8006c42:	f004 fa39 	bl	800b0b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006c46:	2303      	movs	r3, #3
 8006c48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006c4a:	2303      	movs	r3, #3
 8006c4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c52:	f107 031c 	add.w	r3, r7, #28
 8006c56:	4619      	mov	r1, r3
 8006c58:	4852      	ldr	r0, [pc, #328]	; (8006da4 <MX_GPIO_Init+0x294>)
 8006c5a:	f004 fa2d 	bl	800b0b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006c5e:	2304      	movs	r3, #4
 8006c60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006c62:	2300      	movs	r3, #0
 8006c64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006c66:	2301      	movs	r3, #1
 8006c68:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c6a:	f107 031c 	add.w	r3, r7, #28
 8006c6e:	4619      	mov	r1, r3
 8006c70:	484c      	ldr	r0, [pc, #304]	; (8006da4 <MX_GPIO_Init+0x294>)
 8006c72:	f004 fa21 	bl	800b0b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 8006c76:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 8006c7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006c80:	2301      	movs	r3, #1
 8006c82:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006c84:	f107 031c 	add.w	r3, r7, #28
 8006c88:	4619      	mov	r1, r3
 8006c8a:	4845      	ldr	r0, [pc, #276]	; (8006da0 <MX_GPIO_Init+0x290>)
 8006c8c:	f004 fa14 	bl	800b0b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8006c90:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006c94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006c96:	2301      	movs	r3, #1
 8006c98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006ca2:	f107 031c 	add.w	r3, r7, #28
 8006ca6:	4619      	mov	r1, r3
 8006ca8:	483d      	ldr	r0, [pc, #244]	; (8006da0 <MX_GPIO_Init+0x290>)
 8006caa:	f004 fa05 	bl	800b0b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8006cae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006cb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006cc0:	f107 031c 	add.w	r3, r7, #28
 8006cc4:	4619      	mov	r1, r3
 8006cc6:	4837      	ldr	r0, [pc, #220]	; (8006da4 <MX_GPIO_Init+0x294>)
 8006cc8:	f004 f9f6 	bl	800b0b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006ccc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006cd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8006cd2:	4b37      	ldr	r3, [pc, #220]	; (8006db0 <MX_GPIO_Init+0x2a0>)
 8006cd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006cda:	f107 031c 	add.w	r3, r7, #28
 8006cde:	4619      	mov	r1, r3
 8006ce0:	4831      	ldr	r0, [pc, #196]	; (8006da8 <MX_GPIO_Init+0x298>)
 8006ce2:	f004 f9e9 	bl	800b0b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006ce6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006cea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006cec:	2301      	movs	r3, #1
 8006cee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006cf8:	f107 031c 	add.w	r3, r7, #28
 8006cfc:	4619      	mov	r1, r3
 8006cfe:	482a      	ldr	r0, [pc, #168]	; (8006da8 <MX_GPIO_Init+0x298>)
 8006d00:	f004 f9da 	bl	800b0b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006d04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d12:	2300      	movs	r3, #0
 8006d14:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006d16:	f107 031c 	add.w	r3, r7, #28
 8006d1a:	4619      	mov	r1, r3
 8006d1c:	4822      	ldr	r0, [pc, #136]	; (8006da8 <MX_GPIO_Init+0x298>)
 8006d1e:	f004 f9cb 	bl	800b0b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006d22:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8006d26:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d30:	2300      	movs	r3, #0
 8006d32:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d34:	f107 031c 	add.w	r3, r7, #28
 8006d38:	4619      	mov	r1, r3
 8006d3a:	481c      	ldr	r0, [pc, #112]	; (8006dac <MX_GPIO_Init+0x29c>)
 8006d3c:	f004 f9bc 	bl	800b0b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8006d40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006d46:	2300      	movs	r3, #0
 8006d48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d4e:	f107 031c 	add.w	r3, r7, #28
 8006d52:	4619      	mov	r1, r3
 8006d54:	4815      	ldr	r0, [pc, #84]	; (8006dac <MX_GPIO_Init+0x29c>)
 8006d56:	f004 f9af 	bl	800b0b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8006d5a:	239b      	movs	r3, #155	; 0x9b
 8006d5c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006d62:	2301      	movs	r3, #1
 8006d64:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006d66:	f107 031c 	add.w	r3, r7, #28
 8006d6a:	4619      	mov	r1, r3
 8006d6c:	480e      	ldr	r0, [pc, #56]	; (8006da8 <MX_GPIO_Init+0x298>)
 8006d6e:	f004 f9a3 	bl	800b0b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8006d72:	2200      	movs	r2, #0
 8006d74:	2100      	movs	r1, #0
 8006d76:	2008      	movs	r0, #8
 8006d78:	f003 fdcb 	bl	800a912 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8006d7c:	2008      	movs	r0, #8
 8006d7e:	f003 fde4 	bl	800a94a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8006d82:	2200      	movs	r2, #0
 8006d84:	2100      	movs	r1, #0
 8006d86:	2017      	movs	r0, #23
 8006d88:	f003 fdc3 	bl	800a912 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8006d8c:	2017      	movs	r0, #23
 8006d8e:	f003 fddc 	bl	800a94a <HAL_NVIC_EnableIRQ>

}
 8006d92:	bf00      	nop
 8006d94:	3730      	adds	r7, #48	; 0x30
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}
 8006d9a:	bf00      	nop
 8006d9c:	40023800 	.word	0x40023800
 8006da0:	40021000 	.word	0x40021000
 8006da4:	40020400 	.word	0x40020400
 8006da8:	40020c00 	.word	0x40020c00
 8006dac:	40020000 	.word	0x40020000
 8006db0:	10310000 	.word	0x10310000
 8006db4:	40020800 	.word	0x40020800

08006db8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006db8:	b480      	push	{r7}
 8006dba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006dbc:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006dbe:	e7fe      	b.n	8006dbe <Error_Handler+0x6>

08006dc0 <path_following_initialize>:
  /* End of Outputs for SubSystem: '<Root>/path_following' */
}

/* Model initialize function */
void path_following_initialize(void)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	af00      	add	r7, sp, #0
  /* (no initialization code required) */
}
 8006dc4:	bf00      	nop
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dcc:	4770      	bx	lr
	...

08006dd0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b083      	sub	sp, #12
 8006dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	607b      	str	r3, [r7, #4]
 8006dda:	4b10      	ldr	r3, [pc, #64]	; (8006e1c <HAL_MspInit+0x4c>)
 8006ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dde:	4a0f      	ldr	r2, [pc, #60]	; (8006e1c <HAL_MspInit+0x4c>)
 8006de0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006de4:	6453      	str	r3, [r2, #68]	; 0x44
 8006de6:	4b0d      	ldr	r3, [pc, #52]	; (8006e1c <HAL_MspInit+0x4c>)
 8006de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006dee:	607b      	str	r3, [r7, #4]
 8006df0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006df2:	2300      	movs	r3, #0
 8006df4:	603b      	str	r3, [r7, #0]
 8006df6:	4b09      	ldr	r3, [pc, #36]	; (8006e1c <HAL_MspInit+0x4c>)
 8006df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dfa:	4a08      	ldr	r2, [pc, #32]	; (8006e1c <HAL_MspInit+0x4c>)
 8006dfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e00:	6413      	str	r3, [r2, #64]	; 0x40
 8006e02:	4b06      	ldr	r3, [pc, #24]	; (8006e1c <HAL_MspInit+0x4c>)
 8006e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e0a:	603b      	str	r3, [r7, #0]
 8006e0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006e0e:	bf00      	nop
 8006e10:	370c      	adds	r7, #12
 8006e12:	46bd      	mov	sp, r7
 8006e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e18:	4770      	bx	lr
 8006e1a:	bf00      	nop
 8006e1c:	40023800 	.word	0x40023800

08006e20 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b08c      	sub	sp, #48	; 0x30
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e28:	f107 031c 	add.w	r3, r7, #28
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	601a      	str	r2, [r3, #0]
 8006e30:	605a      	str	r2, [r3, #4]
 8006e32:	609a      	str	r2, [r3, #8]
 8006e34:	60da      	str	r2, [r3, #12]
 8006e36:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a4a      	ldr	r2, [pc, #296]	; (8006f68 <HAL_ADC_MspInit+0x148>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	f040 808e 	bne.w	8006f60 <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8006e44:	2300      	movs	r3, #0
 8006e46:	61bb      	str	r3, [r7, #24]
 8006e48:	4b48      	ldr	r3, [pc, #288]	; (8006f6c <HAL_ADC_MspInit+0x14c>)
 8006e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e4c:	4a47      	ldr	r2, [pc, #284]	; (8006f6c <HAL_ADC_MspInit+0x14c>)
 8006e4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006e52:	6453      	str	r3, [r2, #68]	; 0x44
 8006e54:	4b45      	ldr	r3, [pc, #276]	; (8006f6c <HAL_ADC_MspInit+0x14c>)
 8006e56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e5c:	61bb      	str	r3, [r7, #24]
 8006e5e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006e60:	2300      	movs	r3, #0
 8006e62:	617b      	str	r3, [r7, #20]
 8006e64:	4b41      	ldr	r3, [pc, #260]	; (8006f6c <HAL_ADC_MspInit+0x14c>)
 8006e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e68:	4a40      	ldr	r2, [pc, #256]	; (8006f6c <HAL_ADC_MspInit+0x14c>)
 8006e6a:	f043 0304 	orr.w	r3, r3, #4
 8006e6e:	6313      	str	r3, [r2, #48]	; 0x30
 8006e70:	4b3e      	ldr	r3, [pc, #248]	; (8006f6c <HAL_ADC_MspInit+0x14c>)
 8006e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e74:	f003 0304 	and.w	r3, r3, #4
 8006e78:	617b      	str	r3, [r7, #20]
 8006e7a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	613b      	str	r3, [r7, #16]
 8006e80:	4b3a      	ldr	r3, [pc, #232]	; (8006f6c <HAL_ADC_MspInit+0x14c>)
 8006e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e84:	4a39      	ldr	r2, [pc, #228]	; (8006f6c <HAL_ADC_MspInit+0x14c>)
 8006e86:	f043 0301 	orr.w	r3, r3, #1
 8006e8a:	6313      	str	r3, [r2, #48]	; 0x30
 8006e8c:	4b37      	ldr	r3, [pc, #220]	; (8006f6c <HAL_ADC_MspInit+0x14c>)
 8006e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e90:	f003 0301 	and.w	r3, r3, #1
 8006e94:	613b      	str	r3, [r7, #16]
 8006e96:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006e98:	2300      	movs	r3, #0
 8006e9a:	60fb      	str	r3, [r7, #12]
 8006e9c:	4b33      	ldr	r3, [pc, #204]	; (8006f6c <HAL_ADC_MspInit+0x14c>)
 8006e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ea0:	4a32      	ldr	r2, [pc, #200]	; (8006f6c <HAL_ADC_MspInit+0x14c>)
 8006ea2:	f043 0302 	orr.w	r3, r3, #2
 8006ea6:	6313      	str	r3, [r2, #48]	; 0x30
 8006ea8:	4b30      	ldr	r3, [pc, #192]	; (8006f6c <HAL_ADC_MspInit+0x14c>)
 8006eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eac:	f003 0302 	and.w	r3, r3, #2
 8006eb0:	60fb      	str	r3, [r7, #12]
 8006eb2:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC2_IN6
    PA7     ------> ADC2_IN7
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8006eb4:	230f      	movs	r3, #15
 8006eb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006eb8:	2303      	movs	r3, #3
 8006eba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006ec0:	f107 031c 	add.w	r3, r7, #28
 8006ec4:	4619      	mov	r1, r3
 8006ec6:	482a      	ldr	r0, [pc, #168]	; (8006f70 <HAL_ADC_MspInit+0x150>)
 8006ec8:	f004 f8f6 	bl	800b0b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8006ecc:	23ff      	movs	r3, #255	; 0xff
 8006ece:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006ed0:	2303      	movs	r3, #3
 8006ed2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ed8:	f107 031c 	add.w	r3, r7, #28
 8006edc:	4619      	mov	r1, r3
 8006ede:	4825      	ldr	r0, [pc, #148]	; (8006f74 <HAL_ADC_MspInit+0x154>)
 8006ee0:	f004 f8ea 	bl	800b0b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006ee4:	2303      	movs	r3, #3
 8006ee6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006ee8:	2303      	movs	r3, #3
 8006eea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006eec:	2300      	movs	r3, #0
 8006eee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006ef0:	f107 031c 	add.w	r3, r7, #28
 8006ef4:	4619      	mov	r1, r3
 8006ef6:	4820      	ldr	r0, [pc, #128]	; (8006f78 <HAL_ADC_MspInit+0x158>)
 8006ef8:	f004 f8de 	bl	800b0b8 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 8006efc:	4b1f      	ldr	r3, [pc, #124]	; (8006f7c <HAL_ADC_MspInit+0x15c>)
 8006efe:	4a20      	ldr	r2, [pc, #128]	; (8006f80 <HAL_ADC_MspInit+0x160>)
 8006f00:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8006f02:	4b1e      	ldr	r3, [pc, #120]	; (8006f7c <HAL_ADC_MspInit+0x15c>)
 8006f04:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006f08:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006f0a:	4b1c      	ldr	r3, [pc, #112]	; (8006f7c <HAL_ADC_MspInit+0x15c>)
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8006f10:	4b1a      	ldr	r3, [pc, #104]	; (8006f7c <HAL_ADC_MspInit+0x15c>)
 8006f12:	2200      	movs	r2, #0
 8006f14:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8006f16:	4b19      	ldr	r3, [pc, #100]	; (8006f7c <HAL_ADC_MspInit+0x15c>)
 8006f18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006f1c:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006f1e:	4b17      	ldr	r3, [pc, #92]	; (8006f7c <HAL_ADC_MspInit+0x15c>)
 8006f20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f24:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006f26:	4b15      	ldr	r3, [pc, #84]	; (8006f7c <HAL_ADC_MspInit+0x15c>)
 8006f28:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006f2c:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8006f2e:	4b13      	ldr	r3, [pc, #76]	; (8006f7c <HAL_ADC_MspInit+0x15c>)
 8006f30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006f34:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006f36:	4b11      	ldr	r3, [pc, #68]	; (8006f7c <HAL_ADC_MspInit+0x15c>)
 8006f38:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006f3c:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006f3e:	4b0f      	ldr	r3, [pc, #60]	; (8006f7c <HAL_ADC_MspInit+0x15c>)
 8006f40:	2200      	movs	r2, #0
 8006f42:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8006f44:	480d      	ldr	r0, [pc, #52]	; (8006f7c <HAL_ADC_MspInit+0x15c>)
 8006f46:	f003 fd1b 	bl	800a980 <HAL_DMA_Init>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d001      	beq.n	8006f54 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8006f50:	f7ff ff32 	bl	8006db8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	4a09      	ldr	r2, [pc, #36]	; (8006f7c <HAL_ADC_MspInit+0x15c>)
 8006f58:	639a      	str	r2, [r3, #56]	; 0x38
 8006f5a:	4a08      	ldr	r2, [pc, #32]	; (8006f7c <HAL_ADC_MspInit+0x15c>)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8006f60:	bf00      	nop
 8006f62:	3730      	adds	r7, #48	; 0x30
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}
 8006f68:	40012100 	.word	0x40012100
 8006f6c:	40023800 	.word	0x40023800
 8006f70:	40020800 	.word	0x40020800
 8006f74:	40020000 	.word	0x40020000
 8006f78:	40020400 	.word	0x40020400
 8006f7c:	20047af8 	.word	0x20047af8
 8006f80:	40026440 	.word	0x40026440

08006f84 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b08c      	sub	sp, #48	; 0x30
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f8c:	f107 031c 	add.w	r3, r7, #28
 8006f90:	2200      	movs	r2, #0
 8006f92:	601a      	str	r2, [r3, #0]
 8006f94:	605a      	str	r2, [r3, #4]
 8006f96:	609a      	str	r2, [r3, #8]
 8006f98:	60da      	str	r2, [r3, #12]
 8006f9a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a32      	ldr	r2, [pc, #200]	; (800706c <HAL_I2C_MspInit+0xe8>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d12c      	bne.n	8007000 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	61bb      	str	r3, [r7, #24]
 8006faa:	4b31      	ldr	r3, [pc, #196]	; (8007070 <HAL_I2C_MspInit+0xec>)
 8006fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fae:	4a30      	ldr	r2, [pc, #192]	; (8007070 <HAL_I2C_MspInit+0xec>)
 8006fb0:	f043 0302 	orr.w	r3, r3, #2
 8006fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8006fb6:	4b2e      	ldr	r3, [pc, #184]	; (8007070 <HAL_I2C_MspInit+0xec>)
 8006fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fba:	f003 0302 	and.w	r3, r3, #2
 8006fbe:	61bb      	str	r3, [r7, #24]
 8006fc0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006fc2:	23c0      	movs	r3, #192	; 0xc0
 8006fc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006fc6:	2312      	movs	r3, #18
 8006fc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006fce:	2303      	movs	r3, #3
 8006fd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006fd2:	2304      	movs	r3, #4
 8006fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006fd6:	f107 031c 	add.w	r3, r7, #28
 8006fda:	4619      	mov	r1, r3
 8006fdc:	4825      	ldr	r0, [pc, #148]	; (8007074 <HAL_I2C_MspInit+0xf0>)
 8006fde:	f004 f86b 	bl	800b0b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	617b      	str	r3, [r7, #20]
 8006fe6:	4b22      	ldr	r3, [pc, #136]	; (8007070 <HAL_I2C_MspInit+0xec>)
 8006fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fea:	4a21      	ldr	r2, [pc, #132]	; (8007070 <HAL_I2C_MspInit+0xec>)
 8006fec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006ff0:	6413      	str	r3, [r2, #64]	; 0x40
 8006ff2:	4b1f      	ldr	r3, [pc, #124]	; (8007070 <HAL_I2C_MspInit+0xec>)
 8006ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ff6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006ffa:	617b      	str	r3, [r7, #20]
 8006ffc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8006ffe:	e031      	b.n	8007064 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a1c      	ldr	r2, [pc, #112]	; (8007078 <HAL_I2C_MspInit+0xf4>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d12c      	bne.n	8007064 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800700a:	2300      	movs	r3, #0
 800700c:	613b      	str	r3, [r7, #16]
 800700e:	4b18      	ldr	r3, [pc, #96]	; (8007070 <HAL_I2C_MspInit+0xec>)
 8007010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007012:	4a17      	ldr	r2, [pc, #92]	; (8007070 <HAL_I2C_MspInit+0xec>)
 8007014:	f043 0302 	orr.w	r3, r3, #2
 8007018:	6313      	str	r3, [r2, #48]	; 0x30
 800701a:	4b15      	ldr	r3, [pc, #84]	; (8007070 <HAL_I2C_MspInit+0xec>)
 800701c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800701e:	f003 0302 	and.w	r3, r3, #2
 8007022:	613b      	str	r3, [r7, #16]
 8007024:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8007026:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800702a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800702c:	2312      	movs	r3, #18
 800702e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007030:	2301      	movs	r3, #1
 8007032:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007034:	2303      	movs	r3, #3
 8007036:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8007038:	2304      	movs	r3, #4
 800703a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800703c:	f107 031c 	add.w	r3, r7, #28
 8007040:	4619      	mov	r1, r3
 8007042:	480c      	ldr	r0, [pc, #48]	; (8007074 <HAL_I2C_MspInit+0xf0>)
 8007044:	f004 f838 	bl	800b0b8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8007048:	2300      	movs	r3, #0
 800704a:	60fb      	str	r3, [r7, #12]
 800704c:	4b08      	ldr	r3, [pc, #32]	; (8007070 <HAL_I2C_MspInit+0xec>)
 800704e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007050:	4a07      	ldr	r2, [pc, #28]	; (8007070 <HAL_I2C_MspInit+0xec>)
 8007052:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007056:	6413      	str	r3, [r2, #64]	; 0x40
 8007058:	4b05      	ldr	r3, [pc, #20]	; (8007070 <HAL_I2C_MspInit+0xec>)
 800705a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800705c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007060:	60fb      	str	r3, [r7, #12]
 8007062:	68fb      	ldr	r3, [r7, #12]
}
 8007064:	bf00      	nop
 8007066:	3730      	adds	r7, #48	; 0x30
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}
 800706c:	40005400 	.word	0x40005400
 8007070:	40023800 	.word	0x40023800
 8007074:	40020400 	.word	0x40020400
 8007078:	40005800 	.word	0x40005800

0800707c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b08a      	sub	sp, #40	; 0x28
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007084:	f107 0314 	add.w	r3, r7, #20
 8007088:	2200      	movs	r2, #0
 800708a:	601a      	str	r2, [r3, #0]
 800708c:	605a      	str	r2, [r3, #4]
 800708e:	609a      	str	r2, [r3, #8]
 8007090:	60da      	str	r2, [r3, #12]
 8007092:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a69      	ldr	r2, [pc, #420]	; (8007240 <HAL_SD_MspInit+0x1c4>)
 800709a:	4293      	cmp	r3, r2
 800709c:	f040 80cb 	bne.w	8007236 <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80070a0:	2300      	movs	r3, #0
 80070a2:	613b      	str	r3, [r7, #16]
 80070a4:	4b67      	ldr	r3, [pc, #412]	; (8007244 <HAL_SD_MspInit+0x1c8>)
 80070a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070a8:	4a66      	ldr	r2, [pc, #408]	; (8007244 <HAL_SD_MspInit+0x1c8>)
 80070aa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80070ae:	6453      	str	r3, [r2, #68]	; 0x44
 80070b0:	4b64      	ldr	r3, [pc, #400]	; (8007244 <HAL_SD_MspInit+0x1c8>)
 80070b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070b8:	613b      	str	r3, [r7, #16]
 80070ba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80070bc:	2300      	movs	r3, #0
 80070be:	60fb      	str	r3, [r7, #12]
 80070c0:	4b60      	ldr	r3, [pc, #384]	; (8007244 <HAL_SD_MspInit+0x1c8>)
 80070c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070c4:	4a5f      	ldr	r2, [pc, #380]	; (8007244 <HAL_SD_MspInit+0x1c8>)
 80070c6:	f043 0304 	orr.w	r3, r3, #4
 80070ca:	6313      	str	r3, [r2, #48]	; 0x30
 80070cc:	4b5d      	ldr	r3, [pc, #372]	; (8007244 <HAL_SD_MspInit+0x1c8>)
 80070ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070d0:	f003 0304 	and.w	r3, r3, #4
 80070d4:	60fb      	str	r3, [r7, #12]
 80070d6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80070d8:	2300      	movs	r3, #0
 80070da:	60bb      	str	r3, [r7, #8]
 80070dc:	4b59      	ldr	r3, [pc, #356]	; (8007244 <HAL_SD_MspInit+0x1c8>)
 80070de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070e0:	4a58      	ldr	r2, [pc, #352]	; (8007244 <HAL_SD_MspInit+0x1c8>)
 80070e2:	f043 0308 	orr.w	r3, r3, #8
 80070e6:	6313      	str	r3, [r2, #48]	; 0x30
 80070e8:	4b56      	ldr	r3, [pc, #344]	; (8007244 <HAL_SD_MspInit+0x1c8>)
 80070ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ec:	f003 0308 	and.w	r3, r3, #8
 80070f0:	60bb      	str	r3, [r7, #8]
 80070f2:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80070f4:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80070f8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070fa:	2302      	movs	r3, #2
 80070fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070fe:	2300      	movs	r3, #0
 8007100:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007102:	2303      	movs	r3, #3
 8007104:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8007106:	230c      	movs	r3, #12
 8007108:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800710a:	f107 0314 	add.w	r3, r7, #20
 800710e:	4619      	mov	r1, r3
 8007110:	484d      	ldr	r0, [pc, #308]	; (8007248 <HAL_SD_MspInit+0x1cc>)
 8007112:	f003 ffd1 	bl	800b0b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8007116:	2304      	movs	r3, #4
 8007118:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800711a:	2302      	movs	r3, #2
 800711c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800711e:	2300      	movs	r3, #0
 8007120:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007122:	2303      	movs	r3, #3
 8007124:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8007126:	230c      	movs	r3, #12
 8007128:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800712a:	f107 0314 	add.w	r3, r7, #20
 800712e:	4619      	mov	r1, r3
 8007130:	4846      	ldr	r0, [pc, #280]	; (800724c <HAL_SD_MspInit+0x1d0>)
 8007132:	f003 ffc1 	bl	800b0b8 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8007136:	4b46      	ldr	r3, [pc, #280]	; (8007250 <HAL_SD_MspInit+0x1d4>)
 8007138:	4a46      	ldr	r2, [pc, #280]	; (8007254 <HAL_SD_MspInit+0x1d8>)
 800713a:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 800713c:	4b44      	ldr	r3, [pc, #272]	; (8007250 <HAL_SD_MspInit+0x1d4>)
 800713e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007142:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007144:	4b42      	ldr	r3, [pc, #264]	; (8007250 <HAL_SD_MspInit+0x1d4>)
 8007146:	2200      	movs	r2, #0
 8007148:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800714a:	4b41      	ldr	r3, [pc, #260]	; (8007250 <HAL_SD_MspInit+0x1d4>)
 800714c:	2200      	movs	r2, #0
 800714e:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007150:	4b3f      	ldr	r3, [pc, #252]	; (8007250 <HAL_SD_MspInit+0x1d4>)
 8007152:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007156:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007158:	4b3d      	ldr	r3, [pc, #244]	; (8007250 <HAL_SD_MspInit+0x1d4>)
 800715a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800715e:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007160:	4b3b      	ldr	r3, [pc, #236]	; (8007250 <HAL_SD_MspInit+0x1d4>)
 8007162:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007166:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8007168:	4b39      	ldr	r3, [pc, #228]	; (8007250 <HAL_SD_MspInit+0x1d4>)
 800716a:	2220      	movs	r2, #32
 800716c:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800716e:	4b38      	ldr	r3, [pc, #224]	; (8007250 <HAL_SD_MspInit+0x1d4>)
 8007170:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8007174:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8007176:	4b36      	ldr	r3, [pc, #216]	; (8007250 <HAL_SD_MspInit+0x1d4>)
 8007178:	2204      	movs	r2, #4
 800717a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800717c:	4b34      	ldr	r3, [pc, #208]	; (8007250 <HAL_SD_MspInit+0x1d4>)
 800717e:	2203      	movs	r2, #3
 8007180:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8007182:	4b33      	ldr	r3, [pc, #204]	; (8007250 <HAL_SD_MspInit+0x1d4>)
 8007184:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8007188:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800718a:	4b31      	ldr	r3, [pc, #196]	; (8007250 <HAL_SD_MspInit+0x1d4>)
 800718c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8007190:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8007192:	482f      	ldr	r0, [pc, #188]	; (8007250 <HAL_SD_MspInit+0x1d4>)
 8007194:	f003 fbf4 	bl	800a980 <HAL_DMA_Init>
 8007198:	4603      	mov	r3, r0
 800719a:	2b00      	cmp	r3, #0
 800719c:	d001      	beq.n	80071a2 <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 800719e:	f7ff fe0b 	bl	8006db8 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	4a2a      	ldr	r2, [pc, #168]	; (8007250 <HAL_SD_MspInit+0x1d4>)
 80071a6:	641a      	str	r2, [r3, #64]	; 0x40
 80071a8:	4a29      	ldr	r2, [pc, #164]	; (8007250 <HAL_SD_MspInit+0x1d4>)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 80071ae:	4b2a      	ldr	r3, [pc, #168]	; (8007258 <HAL_SD_MspInit+0x1dc>)
 80071b0:	4a2a      	ldr	r2, [pc, #168]	; (800725c <HAL_SD_MspInit+0x1e0>)
 80071b2:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80071b4:	4b28      	ldr	r3, [pc, #160]	; (8007258 <HAL_SD_MspInit+0x1dc>)
 80071b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80071ba:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80071bc:	4b26      	ldr	r3, [pc, #152]	; (8007258 <HAL_SD_MspInit+0x1dc>)
 80071be:	2240      	movs	r2, #64	; 0x40
 80071c0:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80071c2:	4b25      	ldr	r3, [pc, #148]	; (8007258 <HAL_SD_MspInit+0x1dc>)
 80071c4:	2200      	movs	r2, #0
 80071c6:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80071c8:	4b23      	ldr	r3, [pc, #140]	; (8007258 <HAL_SD_MspInit+0x1dc>)
 80071ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80071ce:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80071d0:	4b21      	ldr	r3, [pc, #132]	; (8007258 <HAL_SD_MspInit+0x1dc>)
 80071d2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80071d6:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80071d8:	4b1f      	ldr	r3, [pc, #124]	; (8007258 <HAL_SD_MspInit+0x1dc>)
 80071da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80071de:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80071e0:	4b1d      	ldr	r3, [pc, #116]	; (8007258 <HAL_SD_MspInit+0x1dc>)
 80071e2:	2220      	movs	r2, #32
 80071e4:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80071e6:	4b1c      	ldr	r3, [pc, #112]	; (8007258 <HAL_SD_MspInit+0x1dc>)
 80071e8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80071ec:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80071ee:	4b1a      	ldr	r3, [pc, #104]	; (8007258 <HAL_SD_MspInit+0x1dc>)
 80071f0:	2204      	movs	r2, #4
 80071f2:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80071f4:	4b18      	ldr	r3, [pc, #96]	; (8007258 <HAL_SD_MspInit+0x1dc>)
 80071f6:	2203      	movs	r2, #3
 80071f8:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80071fa:	4b17      	ldr	r3, [pc, #92]	; (8007258 <HAL_SD_MspInit+0x1dc>)
 80071fc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8007200:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8007202:	4b15      	ldr	r3, [pc, #84]	; (8007258 <HAL_SD_MspInit+0x1dc>)
 8007204:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8007208:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 800720a:	4813      	ldr	r0, [pc, #76]	; (8007258 <HAL_SD_MspInit+0x1dc>)
 800720c:	f003 fbb8 	bl	800a980 <HAL_DMA_Init>
 8007210:	4603      	mov	r3, r0
 8007212:	2b00      	cmp	r3, #0
 8007214:	d001      	beq.n	800721a <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 8007216:	f7ff fdcf 	bl	8006db8 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	4a0e      	ldr	r2, [pc, #56]	; (8007258 <HAL_SD_MspInit+0x1dc>)
 800721e:	63da      	str	r2, [r3, #60]	; 0x3c
 8007220:	4a0d      	ldr	r2, [pc, #52]	; (8007258 <HAL_SD_MspInit+0x1dc>)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8007226:	2200      	movs	r2, #0
 8007228:	2100      	movs	r1, #0
 800722a:	2031      	movs	r0, #49	; 0x31
 800722c:	f003 fb71 	bl	800a912 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8007230:	2031      	movs	r0, #49	; 0x31
 8007232:	f003 fb8a 	bl	800a94a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8007236:	bf00      	nop
 8007238:	3728      	adds	r7, #40	; 0x28
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}
 800723e:	bf00      	nop
 8007240:	40012c00 	.word	0x40012c00
 8007244:	40023800 	.word	0x40023800
 8007248:	40020800 	.word	0x40020800
 800724c:	40020c00 	.word	0x40020c00
 8007250:	20047620 	.word	0x20047620
 8007254:	40026458 	.word	0x40026458
 8007258:	20047954 	.word	0x20047954
 800725c:	400264a0 	.word	0x400264a0

08007260 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b08a      	sub	sp, #40	; 0x28
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007268:	f107 0314 	add.w	r3, r7, #20
 800726c:	2200      	movs	r2, #0
 800726e:	601a      	str	r2, [r3, #0]
 8007270:	605a      	str	r2, [r3, #4]
 8007272:	609a      	str	r2, [r3, #8]
 8007274:	60da      	str	r2, [r3, #12]
 8007276:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a19      	ldr	r2, [pc, #100]	; (80072e4 <HAL_SPI_MspInit+0x84>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d12c      	bne.n	80072dc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007282:	2300      	movs	r3, #0
 8007284:	613b      	str	r3, [r7, #16]
 8007286:	4b18      	ldr	r3, [pc, #96]	; (80072e8 <HAL_SPI_MspInit+0x88>)
 8007288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800728a:	4a17      	ldr	r2, [pc, #92]	; (80072e8 <HAL_SPI_MspInit+0x88>)
 800728c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007290:	6413      	str	r3, [r2, #64]	; 0x40
 8007292:	4b15      	ldr	r3, [pc, #84]	; (80072e8 <HAL_SPI_MspInit+0x88>)
 8007294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007296:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800729a:	613b      	str	r3, [r7, #16]
 800729c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800729e:	2300      	movs	r3, #0
 80072a0:	60fb      	str	r3, [r7, #12]
 80072a2:	4b11      	ldr	r3, [pc, #68]	; (80072e8 <HAL_SPI_MspInit+0x88>)
 80072a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072a6:	4a10      	ldr	r2, [pc, #64]	; (80072e8 <HAL_SPI_MspInit+0x88>)
 80072a8:	f043 0302 	orr.w	r3, r3, #2
 80072ac:	6313      	str	r3, [r2, #48]	; 0x30
 80072ae:	4b0e      	ldr	r3, [pc, #56]	; (80072e8 <HAL_SPI_MspInit+0x88>)
 80072b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072b2:	f003 0302 	and.w	r3, r3, #2
 80072b6:	60fb      	str	r3, [r7, #12]
 80072b8:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80072ba:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80072be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072c0:	2302      	movs	r3, #2
 80072c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072c4:	2300      	movs	r3, #0
 80072c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80072c8:	2303      	movs	r3, #3
 80072ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80072cc:	2305      	movs	r3, #5
 80072ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80072d0:	f107 0314 	add.w	r3, r7, #20
 80072d4:	4619      	mov	r1, r3
 80072d6:	4805      	ldr	r0, [pc, #20]	; (80072ec <HAL_SPI_MspInit+0x8c>)
 80072d8:	f003 feee 	bl	800b0b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80072dc:	bf00      	nop
 80072de:	3728      	adds	r7, #40	; 0x28
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}
 80072e4:	40003800 	.word	0x40003800
 80072e8:	40023800 	.word	0x40023800
 80072ec:	40020400 	.word	0x40020400

080072f0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b08c      	sub	sp, #48	; 0x30
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80072f8:	f107 031c 	add.w	r3, r7, #28
 80072fc:	2200      	movs	r2, #0
 80072fe:	601a      	str	r2, [r3, #0]
 8007300:	605a      	str	r2, [r3, #4]
 8007302:	609a      	str	r2, [r3, #8]
 8007304:	60da      	str	r2, [r3, #12]
 8007306:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a2d      	ldr	r2, [pc, #180]	; (80073c4 <HAL_TIM_PWM_MspInit+0xd4>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d12d      	bne.n	800736e <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8007312:	2300      	movs	r3, #0
 8007314:	61bb      	str	r3, [r7, #24]
 8007316:	4b2c      	ldr	r3, [pc, #176]	; (80073c8 <HAL_TIM_PWM_MspInit+0xd8>)
 8007318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800731a:	4a2b      	ldr	r2, [pc, #172]	; (80073c8 <HAL_TIM_PWM_MspInit+0xd8>)
 800731c:	f043 0301 	orr.w	r3, r3, #1
 8007320:	6453      	str	r3, [r2, #68]	; 0x44
 8007322:	4b29      	ldr	r3, [pc, #164]	; (80073c8 <HAL_TIM_PWM_MspInit+0xd8>)
 8007324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007326:	f003 0301 	and.w	r3, r3, #1
 800732a:	61bb      	str	r3, [r7, #24]
 800732c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800732e:	2300      	movs	r3, #0
 8007330:	617b      	str	r3, [r7, #20]
 8007332:	4b25      	ldr	r3, [pc, #148]	; (80073c8 <HAL_TIM_PWM_MspInit+0xd8>)
 8007334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007336:	4a24      	ldr	r2, [pc, #144]	; (80073c8 <HAL_TIM_PWM_MspInit+0xd8>)
 8007338:	f043 0310 	orr.w	r3, r3, #16
 800733c:	6313      	str	r3, [r2, #48]	; 0x30
 800733e:	4b22      	ldr	r3, [pc, #136]	; (80073c8 <HAL_TIM_PWM_MspInit+0xd8>)
 8007340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007342:	f003 0310 	and.w	r3, r3, #16
 8007346:	617b      	str	r3, [r7, #20]
 8007348:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 800734a:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800734e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007350:	2302      	movs	r3, #2
 8007352:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007354:	2300      	movs	r3, #0
 8007356:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007358:	2300      	movs	r3, #0
 800735a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800735c:	2301      	movs	r3, #1
 800735e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007360:	f107 031c 	add.w	r3, r7, #28
 8007364:	4619      	mov	r1, r3
 8007366:	4819      	ldr	r0, [pc, #100]	; (80073cc <HAL_TIM_PWM_MspInit+0xdc>)
 8007368:	f003 fea6 	bl	800b0b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800736c:	e026      	b.n	80073bc <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM3)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a17      	ldr	r2, [pc, #92]	; (80073d0 <HAL_TIM_PWM_MspInit+0xe0>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d10e      	bne.n	8007396 <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007378:	2300      	movs	r3, #0
 800737a:	613b      	str	r3, [r7, #16]
 800737c:	4b12      	ldr	r3, [pc, #72]	; (80073c8 <HAL_TIM_PWM_MspInit+0xd8>)
 800737e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007380:	4a11      	ldr	r2, [pc, #68]	; (80073c8 <HAL_TIM_PWM_MspInit+0xd8>)
 8007382:	f043 0302 	orr.w	r3, r3, #2
 8007386:	6413      	str	r3, [r2, #64]	; 0x40
 8007388:	4b0f      	ldr	r3, [pc, #60]	; (80073c8 <HAL_TIM_PWM_MspInit+0xd8>)
 800738a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800738c:	f003 0302 	and.w	r3, r3, #2
 8007390:	613b      	str	r3, [r7, #16]
 8007392:	693b      	ldr	r3, [r7, #16]
}
 8007394:	e012      	b.n	80073bc <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM4)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a0e      	ldr	r2, [pc, #56]	; (80073d4 <HAL_TIM_PWM_MspInit+0xe4>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d10d      	bne.n	80073bc <HAL_TIM_PWM_MspInit+0xcc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80073a0:	2300      	movs	r3, #0
 80073a2:	60fb      	str	r3, [r7, #12]
 80073a4:	4b08      	ldr	r3, [pc, #32]	; (80073c8 <HAL_TIM_PWM_MspInit+0xd8>)
 80073a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073a8:	4a07      	ldr	r2, [pc, #28]	; (80073c8 <HAL_TIM_PWM_MspInit+0xd8>)
 80073aa:	f043 0304 	orr.w	r3, r3, #4
 80073ae:	6413      	str	r3, [r2, #64]	; 0x40
 80073b0:	4b05      	ldr	r3, [pc, #20]	; (80073c8 <HAL_TIM_PWM_MspInit+0xd8>)
 80073b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073b4:	f003 0304 	and.w	r3, r3, #4
 80073b8:	60fb      	str	r3, [r7, #12]
 80073ba:	68fb      	ldr	r3, [r7, #12]
}
 80073bc:	bf00      	nop
 80073be:	3730      	adds	r7, #48	; 0x30
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}
 80073c4:	40010000 	.word	0x40010000
 80073c8:	40023800 	.word	0x40023800
 80073cc:	40021000 	.word	0x40021000
 80073d0:	40000400 	.word	0x40000400
 80073d4:	40000800 	.word	0x40000800

080073d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b088      	sub	sp, #32
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a3e      	ldr	r2, [pc, #248]	; (80074e0 <HAL_TIM_Base_MspInit+0x108>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d116      	bne.n	8007418 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80073ea:	2300      	movs	r3, #0
 80073ec:	61fb      	str	r3, [r7, #28]
 80073ee:	4b3d      	ldr	r3, [pc, #244]	; (80074e4 <HAL_TIM_Base_MspInit+0x10c>)
 80073f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f2:	4a3c      	ldr	r2, [pc, #240]	; (80074e4 <HAL_TIM_Base_MspInit+0x10c>)
 80073f4:	f043 0310 	orr.w	r3, r3, #16
 80073f8:	6413      	str	r3, [r2, #64]	; 0x40
 80073fa:	4b3a      	ldr	r3, [pc, #232]	; (80074e4 <HAL_TIM_Base_MspInit+0x10c>)
 80073fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073fe:	f003 0310 	and.w	r3, r3, #16
 8007402:	61fb      	str	r3, [r7, #28]
 8007404:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8007406:	2200      	movs	r2, #0
 8007408:	2101      	movs	r1, #1
 800740a:	2036      	movs	r0, #54	; 0x36
 800740c:	f003 fa81 	bl	800a912 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8007410:	2036      	movs	r0, #54	; 0x36
 8007412:	f003 fa9a 	bl	800a94a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8007416:	e05e      	b.n	80074d6 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM7)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4a32      	ldr	r2, [pc, #200]	; (80074e8 <HAL_TIM_Base_MspInit+0x110>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d116      	bne.n	8007450 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8007422:	2300      	movs	r3, #0
 8007424:	61bb      	str	r3, [r7, #24]
 8007426:	4b2f      	ldr	r3, [pc, #188]	; (80074e4 <HAL_TIM_Base_MspInit+0x10c>)
 8007428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800742a:	4a2e      	ldr	r2, [pc, #184]	; (80074e4 <HAL_TIM_Base_MspInit+0x10c>)
 800742c:	f043 0320 	orr.w	r3, r3, #32
 8007430:	6413      	str	r3, [r2, #64]	; 0x40
 8007432:	4b2c      	ldr	r3, [pc, #176]	; (80074e4 <HAL_TIM_Base_MspInit+0x10c>)
 8007434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007436:	f003 0320 	and.w	r3, r3, #32
 800743a:	61bb      	str	r3, [r7, #24]
 800743c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800743e:	2200      	movs	r2, #0
 8007440:	2100      	movs	r1, #0
 8007442:	2037      	movs	r0, #55	; 0x37
 8007444:	f003 fa65 	bl	800a912 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8007448:	2037      	movs	r0, #55	; 0x37
 800744a:	f003 fa7e 	bl	800a94a <HAL_NVIC_EnableIRQ>
}
 800744e:	e042      	b.n	80074d6 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM10)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a25      	ldr	r2, [pc, #148]	; (80074ec <HAL_TIM_Base_MspInit+0x114>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d10e      	bne.n	8007478 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800745a:	2300      	movs	r3, #0
 800745c:	617b      	str	r3, [r7, #20]
 800745e:	4b21      	ldr	r3, [pc, #132]	; (80074e4 <HAL_TIM_Base_MspInit+0x10c>)
 8007460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007462:	4a20      	ldr	r2, [pc, #128]	; (80074e4 <HAL_TIM_Base_MspInit+0x10c>)
 8007464:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007468:	6453      	str	r3, [r2, #68]	; 0x44
 800746a:	4b1e      	ldr	r3, [pc, #120]	; (80074e4 <HAL_TIM_Base_MspInit+0x10c>)
 800746c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800746e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007472:	617b      	str	r3, [r7, #20]
 8007474:	697b      	ldr	r3, [r7, #20]
}
 8007476:	e02e      	b.n	80074d6 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM11)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a1c      	ldr	r2, [pc, #112]	; (80074f0 <HAL_TIM_Base_MspInit+0x118>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d10e      	bne.n	80074a0 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8007482:	2300      	movs	r3, #0
 8007484:	613b      	str	r3, [r7, #16]
 8007486:	4b17      	ldr	r3, [pc, #92]	; (80074e4 <HAL_TIM_Base_MspInit+0x10c>)
 8007488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800748a:	4a16      	ldr	r2, [pc, #88]	; (80074e4 <HAL_TIM_Base_MspInit+0x10c>)
 800748c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007490:	6453      	str	r3, [r2, #68]	; 0x44
 8007492:	4b14      	ldr	r3, [pc, #80]	; (80074e4 <HAL_TIM_Base_MspInit+0x10c>)
 8007494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007496:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800749a:	613b      	str	r3, [r7, #16]
 800749c:	693b      	ldr	r3, [r7, #16]
}
 800749e:	e01a      	b.n	80074d6 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM13)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a13      	ldr	r2, [pc, #76]	; (80074f4 <HAL_TIM_Base_MspInit+0x11c>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d115      	bne.n	80074d6 <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80074aa:	2300      	movs	r3, #0
 80074ac:	60fb      	str	r3, [r7, #12]
 80074ae:	4b0d      	ldr	r3, [pc, #52]	; (80074e4 <HAL_TIM_Base_MspInit+0x10c>)
 80074b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074b2:	4a0c      	ldr	r2, [pc, #48]	; (80074e4 <HAL_TIM_Base_MspInit+0x10c>)
 80074b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074b8:	6413      	str	r3, [r2, #64]	; 0x40
 80074ba:	4b0a      	ldr	r3, [pc, #40]	; (80074e4 <HAL_TIM_Base_MspInit+0x10c>)
 80074bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074c2:	60fb      	str	r3, [r7, #12]
 80074c4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80074c6:	2200      	movs	r2, #0
 80074c8:	2100      	movs	r1, #0
 80074ca:	202c      	movs	r0, #44	; 0x2c
 80074cc:	f003 fa21 	bl	800a912 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80074d0:	202c      	movs	r0, #44	; 0x2c
 80074d2:	f003 fa3a 	bl	800a94a <HAL_NVIC_EnableIRQ>
}
 80074d6:	bf00      	nop
 80074d8:	3720      	adds	r7, #32
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}
 80074de:	bf00      	nop
 80074e0:	40001000 	.word	0x40001000
 80074e4:	40023800 	.word	0x40023800
 80074e8:	40001400 	.word	0x40001400
 80074ec:	40014400 	.word	0x40014400
 80074f0:	40014800 	.word	0x40014800
 80074f4:	40001c00 	.word	0x40001c00

080074f8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b08a      	sub	sp, #40	; 0x28
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007500:	f107 0314 	add.w	r3, r7, #20
 8007504:	2200      	movs	r2, #0
 8007506:	601a      	str	r2, [r3, #0]
 8007508:	605a      	str	r2, [r3, #4]
 800750a:	609a      	str	r2, [r3, #8]
 800750c:	60da      	str	r2, [r3, #12]
 800750e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a1d      	ldr	r2, [pc, #116]	; (800758c <HAL_TIM_Encoder_MspInit+0x94>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d133      	bne.n	8007582 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800751a:	2300      	movs	r3, #0
 800751c:	613b      	str	r3, [r7, #16]
 800751e:	4b1c      	ldr	r3, [pc, #112]	; (8007590 <HAL_TIM_Encoder_MspInit+0x98>)
 8007520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007522:	4a1b      	ldr	r2, [pc, #108]	; (8007590 <HAL_TIM_Encoder_MspInit+0x98>)
 8007524:	f043 0302 	orr.w	r3, r3, #2
 8007528:	6453      	str	r3, [r2, #68]	; 0x44
 800752a:	4b19      	ldr	r3, [pc, #100]	; (8007590 <HAL_TIM_Encoder_MspInit+0x98>)
 800752c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800752e:	f003 0302 	and.w	r3, r3, #2
 8007532:	613b      	str	r3, [r7, #16]
 8007534:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007536:	2300      	movs	r3, #0
 8007538:	60fb      	str	r3, [r7, #12]
 800753a:	4b15      	ldr	r3, [pc, #84]	; (8007590 <HAL_TIM_Encoder_MspInit+0x98>)
 800753c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800753e:	4a14      	ldr	r2, [pc, #80]	; (8007590 <HAL_TIM_Encoder_MspInit+0x98>)
 8007540:	f043 0304 	orr.w	r3, r3, #4
 8007544:	6313      	str	r3, [r2, #48]	; 0x30
 8007546:	4b12      	ldr	r3, [pc, #72]	; (8007590 <HAL_TIM_Encoder_MspInit+0x98>)
 8007548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800754a:	f003 0304 	and.w	r3, r3, #4
 800754e:	60fb      	str	r3, [r7, #12]
 8007550:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007552:	23c0      	movs	r3, #192	; 0xc0
 8007554:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007556:	2302      	movs	r3, #2
 8007558:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800755a:	2300      	movs	r3, #0
 800755c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800755e:	2300      	movs	r3, #0
 8007560:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8007562:	2303      	movs	r3, #3
 8007564:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007566:	f107 0314 	add.w	r3, r7, #20
 800756a:	4619      	mov	r1, r3
 800756c:	4809      	ldr	r0, [pc, #36]	; (8007594 <HAL_TIM_Encoder_MspInit+0x9c>)
 800756e:	f003 fda3 	bl	800b0b8 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8007572:	2200      	movs	r2, #0
 8007574:	2100      	movs	r1, #0
 8007576:	202c      	movs	r0, #44	; 0x2c
 8007578:	f003 f9cb 	bl	800a912 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800757c:	202c      	movs	r0, #44	; 0x2c
 800757e:	f003 f9e4 	bl	800a94a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8007582:	bf00      	nop
 8007584:	3728      	adds	r7, #40	; 0x28
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}
 800758a:	bf00      	nop
 800758c:	40010400 	.word	0x40010400
 8007590:	40023800 	.word	0x40023800
 8007594:	40020800 	.word	0x40020800

08007598 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b08c      	sub	sp, #48	; 0x30
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80075a0:	f107 031c 	add.w	r3, r7, #28
 80075a4:	2200      	movs	r2, #0
 80075a6:	601a      	str	r2, [r3, #0]
 80075a8:	605a      	str	r2, [r3, #4]
 80075aa:	609a      	str	r2, [r3, #8]
 80075ac:	60da      	str	r2, [r3, #12]
 80075ae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a5c      	ldr	r2, [pc, #368]	; (8007728 <HAL_TIM_MspPostInit+0x190>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d11f      	bne.n	80075fa <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80075ba:	2300      	movs	r3, #0
 80075bc:	61bb      	str	r3, [r7, #24]
 80075be:	4b5b      	ldr	r3, [pc, #364]	; (800772c <HAL_TIM_MspPostInit+0x194>)
 80075c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075c2:	4a5a      	ldr	r2, [pc, #360]	; (800772c <HAL_TIM_MspPostInit+0x194>)
 80075c4:	f043 0310 	orr.w	r3, r3, #16
 80075c8:	6313      	str	r3, [r2, #48]	; 0x30
 80075ca:	4b58      	ldr	r3, [pc, #352]	; (800772c <HAL_TIM_MspPostInit+0x194>)
 80075cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ce:	f003 0310 	and.w	r3, r3, #16
 80075d2:	61bb      	str	r3, [r7, #24]
 80075d4:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80075d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80075da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075dc:	2302      	movs	r3, #2
 80075de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075e0:	2300      	movs	r3, #0
 80075e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80075e4:	2300      	movs	r3, #0
 80075e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80075e8:	2301      	movs	r3, #1
 80075ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80075ec:	f107 031c 	add.w	r3, r7, #28
 80075f0:	4619      	mov	r1, r3
 80075f2:	484f      	ldr	r0, [pc, #316]	; (8007730 <HAL_TIM_MspPostInit+0x198>)
 80075f4:	f003 fd60 	bl	800b0b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 80075f8:	e091      	b.n	800771e <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM3)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a4d      	ldr	r2, [pc, #308]	; (8007734 <HAL_TIM_MspPostInit+0x19c>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d11e      	bne.n	8007642 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007604:	2300      	movs	r3, #0
 8007606:	617b      	str	r3, [r7, #20]
 8007608:	4b48      	ldr	r3, [pc, #288]	; (800772c <HAL_TIM_MspPostInit+0x194>)
 800760a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800760c:	4a47      	ldr	r2, [pc, #284]	; (800772c <HAL_TIM_MspPostInit+0x194>)
 800760e:	f043 0302 	orr.w	r3, r3, #2
 8007612:	6313      	str	r3, [r2, #48]	; 0x30
 8007614:	4b45      	ldr	r3, [pc, #276]	; (800772c <HAL_TIM_MspPostInit+0x194>)
 8007616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007618:	f003 0302 	and.w	r3, r3, #2
 800761c:	617b      	str	r3, [r7, #20]
 800761e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8007620:	2330      	movs	r3, #48	; 0x30
 8007622:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007624:	2302      	movs	r3, #2
 8007626:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007628:	2300      	movs	r3, #0
 800762a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800762c:	2300      	movs	r3, #0
 800762e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8007630:	2302      	movs	r3, #2
 8007632:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007634:	f107 031c 	add.w	r3, r7, #28
 8007638:	4619      	mov	r1, r3
 800763a:	483f      	ldr	r0, [pc, #252]	; (8007738 <HAL_TIM_MspPostInit+0x1a0>)
 800763c:	f003 fd3c 	bl	800b0b8 <HAL_GPIO_Init>
}
 8007640:	e06d      	b.n	800771e <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM4)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4a3d      	ldr	r2, [pc, #244]	; (800773c <HAL_TIM_MspPostInit+0x1a4>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d11f      	bne.n	800768c <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800764c:	2300      	movs	r3, #0
 800764e:	613b      	str	r3, [r7, #16]
 8007650:	4b36      	ldr	r3, [pc, #216]	; (800772c <HAL_TIM_MspPostInit+0x194>)
 8007652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007654:	4a35      	ldr	r2, [pc, #212]	; (800772c <HAL_TIM_MspPostInit+0x194>)
 8007656:	f043 0308 	orr.w	r3, r3, #8
 800765a:	6313      	str	r3, [r2, #48]	; 0x30
 800765c:	4b33      	ldr	r3, [pc, #204]	; (800772c <HAL_TIM_MspPostInit+0x194>)
 800765e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007660:	f003 0308 	and.w	r3, r3, #8
 8007664:	613b      	str	r3, [r7, #16]
 8007666:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8007668:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800766c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800766e:	2302      	movs	r3, #2
 8007670:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007672:	2300      	movs	r3, #0
 8007674:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007676:	2300      	movs	r3, #0
 8007678:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800767a:	2302      	movs	r3, #2
 800767c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800767e:	f107 031c 	add.w	r3, r7, #28
 8007682:	4619      	mov	r1, r3
 8007684:	482e      	ldr	r0, [pc, #184]	; (8007740 <HAL_TIM_MspPostInit+0x1a8>)
 8007686:	f003 fd17 	bl	800b0b8 <HAL_GPIO_Init>
}
 800768a:	e048      	b.n	800771e <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM10)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a2c      	ldr	r2, [pc, #176]	; (8007744 <HAL_TIM_MspPostInit+0x1ac>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d11f      	bne.n	80076d6 <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007696:	2300      	movs	r3, #0
 8007698:	60fb      	str	r3, [r7, #12]
 800769a:	4b24      	ldr	r3, [pc, #144]	; (800772c <HAL_TIM_MspPostInit+0x194>)
 800769c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800769e:	4a23      	ldr	r2, [pc, #140]	; (800772c <HAL_TIM_MspPostInit+0x194>)
 80076a0:	f043 0302 	orr.w	r3, r3, #2
 80076a4:	6313      	str	r3, [r2, #48]	; 0x30
 80076a6:	4b21      	ldr	r3, [pc, #132]	; (800772c <HAL_TIM_MspPostInit+0x194>)
 80076a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076aa:	f003 0302 	and.w	r3, r3, #2
 80076ae:	60fb      	str	r3, [r7, #12]
 80076b0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80076b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80076b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80076b8:	2302      	movs	r3, #2
 80076ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076bc:	2300      	movs	r3, #0
 80076be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80076c0:	2300      	movs	r3, #0
 80076c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 80076c4:	2303      	movs	r3, #3
 80076c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80076c8:	f107 031c 	add.w	r3, r7, #28
 80076cc:	4619      	mov	r1, r3
 80076ce:	481a      	ldr	r0, [pc, #104]	; (8007738 <HAL_TIM_MspPostInit+0x1a0>)
 80076d0:	f003 fcf2 	bl	800b0b8 <HAL_GPIO_Init>
}
 80076d4:	e023      	b.n	800771e <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM11)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a1b      	ldr	r2, [pc, #108]	; (8007748 <HAL_TIM_MspPostInit+0x1b0>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d11e      	bne.n	800771e <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80076e0:	2300      	movs	r3, #0
 80076e2:	60bb      	str	r3, [r7, #8]
 80076e4:	4b11      	ldr	r3, [pc, #68]	; (800772c <HAL_TIM_MspPostInit+0x194>)
 80076e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076e8:	4a10      	ldr	r2, [pc, #64]	; (800772c <HAL_TIM_MspPostInit+0x194>)
 80076ea:	f043 0302 	orr.w	r3, r3, #2
 80076ee:	6313      	str	r3, [r2, #48]	; 0x30
 80076f0:	4b0e      	ldr	r3, [pc, #56]	; (800772c <HAL_TIM_MspPostInit+0x194>)
 80076f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076f4:	f003 0302 	and.w	r3, r3, #2
 80076f8:	60bb      	str	r3, [r7, #8]
 80076fa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80076fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007700:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007702:	2302      	movs	r3, #2
 8007704:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007706:	2300      	movs	r3, #0
 8007708:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800770a:	2300      	movs	r3, #0
 800770c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 800770e:	2303      	movs	r3, #3
 8007710:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007712:	f107 031c 	add.w	r3, r7, #28
 8007716:	4619      	mov	r1, r3
 8007718:	4807      	ldr	r0, [pc, #28]	; (8007738 <HAL_TIM_MspPostInit+0x1a0>)
 800771a:	f003 fccd 	bl	800b0b8 <HAL_GPIO_Init>
}
 800771e:	bf00      	nop
 8007720:	3730      	adds	r7, #48	; 0x30
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}
 8007726:	bf00      	nop
 8007728:	40010000 	.word	0x40010000
 800772c:	40023800 	.word	0x40023800
 8007730:	40021000 	.word	0x40021000
 8007734:	40000400 	.word	0x40000400
 8007738:	40020400 	.word	0x40020400
 800773c:	40000800 	.word	0x40000800
 8007740:	40020c00 	.word	0x40020c00
 8007744:	40014400 	.word	0x40014400
 8007748:	40014800 	.word	0x40014800

0800774c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b08a      	sub	sp, #40	; 0x28
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007754:	f107 0314 	add.w	r3, r7, #20
 8007758:	2200      	movs	r2, #0
 800775a:	601a      	str	r2, [r3, #0]
 800775c:	605a      	str	r2, [r3, #4]
 800775e:	609a      	str	r2, [r3, #8]
 8007760:	60da      	str	r2, [r3, #12]
 8007762:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4a19      	ldr	r2, [pc, #100]	; (80077d0 <HAL_UART_MspInit+0x84>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d12b      	bne.n	80077c6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800776e:	2300      	movs	r3, #0
 8007770:	613b      	str	r3, [r7, #16]
 8007772:	4b18      	ldr	r3, [pc, #96]	; (80077d4 <HAL_UART_MspInit+0x88>)
 8007774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007776:	4a17      	ldr	r2, [pc, #92]	; (80077d4 <HAL_UART_MspInit+0x88>)
 8007778:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800777c:	6413      	str	r3, [r2, #64]	; 0x40
 800777e:	4b15      	ldr	r3, [pc, #84]	; (80077d4 <HAL_UART_MspInit+0x88>)
 8007780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007786:	613b      	str	r3, [r7, #16]
 8007788:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800778a:	2300      	movs	r3, #0
 800778c:	60fb      	str	r3, [r7, #12]
 800778e:	4b11      	ldr	r3, [pc, #68]	; (80077d4 <HAL_UART_MspInit+0x88>)
 8007790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007792:	4a10      	ldr	r2, [pc, #64]	; (80077d4 <HAL_UART_MspInit+0x88>)
 8007794:	f043 0308 	orr.w	r3, r3, #8
 8007798:	6313      	str	r3, [r2, #48]	; 0x30
 800779a:	4b0e      	ldr	r3, [pc, #56]	; (80077d4 <HAL_UART_MspInit+0x88>)
 800779c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800779e:	f003 0308 	and.w	r3, r3, #8
 80077a2:	60fb      	str	r3, [r7, #12]
 80077a4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80077a6:	2360      	movs	r3, #96	; 0x60
 80077a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077aa:	2302      	movs	r3, #2
 80077ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077ae:	2300      	movs	r3, #0
 80077b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80077b2:	2303      	movs	r3, #3
 80077b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80077b6:	2307      	movs	r3, #7
 80077b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80077ba:	f107 0314 	add.w	r3, r7, #20
 80077be:	4619      	mov	r1, r3
 80077c0:	4805      	ldr	r0, [pc, #20]	; (80077d8 <HAL_UART_MspInit+0x8c>)
 80077c2:	f003 fc79 	bl	800b0b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80077c6:	bf00      	nop
 80077c8:	3728      	adds	r7, #40	; 0x28
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}
 80077ce:	bf00      	nop
 80077d0:	40004400 	.word	0x40004400
 80077d4:	40023800 	.word	0x40023800
 80077d8:	40020c00 	.word	0x40020c00

080077dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80077dc:	b480      	push	{r7}
 80077de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80077e0:	e7fe      	b.n	80077e0 <NMI_Handler+0x4>

080077e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80077e2:	b480      	push	{r7}
 80077e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80077e6:	e7fe      	b.n	80077e6 <HardFault_Handler+0x4>

080077e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80077e8:	b480      	push	{r7}
 80077ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80077ec:	e7fe      	b.n	80077ec <MemManage_Handler+0x4>

080077ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80077ee:	b480      	push	{r7}
 80077f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80077f2:	e7fe      	b.n	80077f2 <BusFault_Handler+0x4>

080077f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80077f4:	b480      	push	{r7}
 80077f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80077f8:	e7fe      	b.n	80077f8 <UsageFault_Handler+0x4>

080077fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80077fa:	b480      	push	{r7}
 80077fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80077fe:	bf00      	nop
 8007800:	46bd      	mov	sp, r7
 8007802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007806:	4770      	bx	lr

08007808 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007808:	b480      	push	{r7}
 800780a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800780c:	bf00      	nop
 800780e:	46bd      	mov	sp, r7
 8007810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007814:	4770      	bx	lr

08007816 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007816:	b480      	push	{r7}
 8007818:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800781a:	bf00      	nop
 800781c:	46bd      	mov	sp, r7
 800781e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007822:	4770      	bx	lr

08007824 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007828:	f002 fb52 	bl	8009ed0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800782c:	bf00      	nop
 800782e:	bd80      	pop	{r7, pc}

08007830 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8007834:	2004      	movs	r0, #4
 8007836:	f003 fe1b 	bl	800b470 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800783a:	bf00      	nop
 800783c:	bd80      	pop	{r7, pc}

0800783e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800783e:	b580      	push	{r7, lr}
 8007840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8007842:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007846:	f003 fe13 	bl	800b470 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800784a:	bf00      	nop
 800784c:	bd80      	pop	{r7, pc}
	...

08007850 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8007854:	4803      	ldr	r0, [pc, #12]	; (8007864 <TIM8_UP_TIM13_IRQHandler+0x14>)
 8007856:	f007 fe2a 	bl	800f4ae <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 800785a:	4803      	ldr	r0, [pc, #12]	; (8007868 <TIM8_UP_TIM13_IRQHandler+0x18>)
 800785c:	f007 fe27 	bl	800f4ae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8007860:	bf00      	nop
 8007862:	bd80      	pop	{r7, pc}
 8007864:	200476d8 	.word	0x200476d8
 8007868:	200478d4 	.word	0x200478d4

0800786c <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8007870:	4802      	ldr	r0, [pc, #8]	; (800787c <SDIO_IRQHandler+0x10>)
 8007872:	f005 fec3 	bl	800d5fc <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8007876:	bf00      	nop
 8007878:	bd80      	pop	{r7, pc}
 800787a:	bf00      	nop
 800787c:	20047a34 	.word	0x20047a34

08007880 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8007884:	4802      	ldr	r0, [pc, #8]	; (8007890 <TIM6_DAC_IRQHandler+0x10>)
 8007886:	f007 fe12 	bl	800f4ae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800788a:	bf00      	nop
 800788c:	bd80      	pop	{r7, pc}
 800788e:	bf00      	nop
 8007890:	200479b4 	.word	0x200479b4

08007894 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8007898:	4802      	ldr	r0, [pc, #8]	; (80078a4 <TIM7_IRQHandler+0x10>)
 800789a:	f007 fe08 	bl	800f4ae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800789e:	bf00      	nop
 80078a0:	bd80      	pop	{r7, pc}
 80078a2:	bf00      	nop
 80078a4:	20047b58 	.word	0x20047b58

080078a8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80078ac:	4802      	ldr	r0, [pc, #8]	; (80078b8 <DMA2_Stream2_IRQHandler+0x10>)
 80078ae:	f003 f98f 	bl	800abd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80078b2:	bf00      	nop
 80078b4:	bd80      	pop	{r7, pc}
 80078b6:	bf00      	nop
 80078b8:	20047af8 	.word	0x20047af8

080078bc <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 80078c0:	4802      	ldr	r0, [pc, #8]	; (80078cc <DMA2_Stream3_IRQHandler+0x10>)
 80078c2:	f003 f985 	bl	800abd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80078c6:	bf00      	nop
 80078c8:	bd80      	pop	{r7, pc}
 80078ca:	bf00      	nop
 80078cc:	20047620 	.word	0x20047620

080078d0 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 80078d4:	4802      	ldr	r0, [pc, #8]	; (80078e0 <DMA2_Stream6_IRQHandler+0x10>)
 80078d6:	f003 f97b 	bl	800abd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80078da:	bf00      	nop
 80078dc:	bd80      	pop	{r7, pc}
 80078de:	bf00      	nop
 80078e0:	20047954 	.word	0x20047954

080078e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b086      	sub	sp, #24
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80078ec:	4a14      	ldr	r2, [pc, #80]	; (8007940 <_sbrk+0x5c>)
 80078ee:	4b15      	ldr	r3, [pc, #84]	; (8007944 <_sbrk+0x60>)
 80078f0:	1ad3      	subs	r3, r2, r3
 80078f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80078f8:	4b13      	ldr	r3, [pc, #76]	; (8007948 <_sbrk+0x64>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d102      	bne.n	8007906 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007900:	4b11      	ldr	r3, [pc, #68]	; (8007948 <_sbrk+0x64>)
 8007902:	4a12      	ldr	r2, [pc, #72]	; (800794c <_sbrk+0x68>)
 8007904:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007906:	4b10      	ldr	r3, [pc, #64]	; (8007948 <_sbrk+0x64>)
 8007908:	681a      	ldr	r2, [r3, #0]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	4413      	add	r3, r2
 800790e:	693a      	ldr	r2, [r7, #16]
 8007910:	429a      	cmp	r2, r3
 8007912:	d207      	bcs.n	8007924 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007914:	f00d f808 	bl	8014928 <__errno>
 8007918:	4602      	mov	r2, r0
 800791a:	230c      	movs	r3, #12
 800791c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800791e:	f04f 33ff 	mov.w	r3, #4294967295
 8007922:	e009      	b.n	8007938 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007924:	4b08      	ldr	r3, [pc, #32]	; (8007948 <_sbrk+0x64>)
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800792a:	4b07      	ldr	r3, [pc, #28]	; (8007948 <_sbrk+0x64>)
 800792c:	681a      	ldr	r2, [r3, #0]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	4413      	add	r3, r2
 8007932:	4a05      	ldr	r2, [pc, #20]	; (8007948 <_sbrk+0x64>)
 8007934:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007936:	68fb      	ldr	r3, [r7, #12]
}
 8007938:	4618      	mov	r0, r3
 800793a:	3718      	adds	r7, #24
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}
 8007940:	20050000 	.word	0x20050000
 8007944:	00000800 	.word	0x00000800
 8007948:	20000240 	.word	0x20000240
 800794c:	20049ca8 	.word	0x20049ca8

08007950 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007950:	b480      	push	{r7}
 8007952:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007954:	4b08      	ldr	r3, [pc, #32]	; (8007978 <SystemInit+0x28>)
 8007956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800795a:	4a07      	ldr	r2, [pc, #28]	; (8007978 <SystemInit+0x28>)
 800795c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007960:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007964:	4b04      	ldr	r3, [pc, #16]	; (8007978 <SystemInit+0x28>)
 8007966:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800796a:	609a      	str	r2, [r3, #8]
#endif
}
 800796c:	bf00      	nop
 800796e:	46bd      	mov	sp, r7
 8007970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007974:	4770      	bx	lr
 8007976:	bf00      	nop
 8007978:	e000ed00 	.word	0xe000ed00

0800797c <cppInit>:
		}
	}
}

void cppInit(void)
{
 800797c:	b598      	push	{r3, r4, r7, lr}
 800797e:	af00      	add	r7, sp, #0
	lcd_init();
 8007980:	f7f9 fb4a 	bl	8001018 <lcd_init>

	//---------- Buttery Check ----------//
	power_sensor.init();
 8007984:	483b      	ldr	r0, [pc, #236]	; (8007a74 <cppInit+0xf8>)
 8007986:	f7fd fd0f 	bl	80053a8 <_ZN11PowerSensor4initEv>
	HAL_Delay(100);
 800798a:	2064      	movs	r0, #100	; 0x64
 800798c:	f002 fac0 	bl	8009f10 <HAL_Delay>
	power_sensor.updateValues();
 8007990:	4838      	ldr	r0, [pc, #224]	; (8007a74 <cppInit+0xf8>)
 8007992:	f7fd fd19 	bl	80053c8 <_ZN11PowerSensor12updateValuesEv>

	lcd_clear();
 8007996:	f7f9 fb83 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 800799a:	2100      	movs	r1, #0
 800799c:	2000      	movs	r0, #0
 800799e:	f7f9 fb8f 	bl	80010c0 <lcd_locate>
	lcd_printf("Voltage");
 80079a2:	4835      	ldr	r0, [pc, #212]	; (8007a78 <cppInit+0xfc>)
 80079a4:	f7f9 fbb6 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 80079a8:	2101      	movs	r1, #1
 80079aa:	2000      	movs	r0, #0
 80079ac:	f7f9 fb88 	bl	80010c0 <lcd_locate>
	lcd_printf("%f", power_sensor.getButteryVoltage());
 80079b0:	4830      	ldr	r0, [pc, #192]	; (8007a74 <cppInit+0xf8>)
 80079b2:	f7fd fd33 	bl	800541c <_ZN11PowerSensor17getButteryVoltageEv>
 80079b6:	ee10 3a10 	vmov	r3, s0
 80079ba:	4618      	mov	r0, r3
 80079bc:	f7f8 fddc 	bl	8000578 <__aeabi_f2d>
 80079c0:	4603      	mov	r3, r0
 80079c2:	460c      	mov	r4, r1
 80079c4:	461a      	mov	r2, r3
 80079c6:	4623      	mov	r3, r4
 80079c8:	482c      	ldr	r0, [pc, #176]	; (8007a7c <cppInit+0x100>)
 80079ca:	f7f9 fba3 	bl	8001114 <lcd_printf>
	HAL_Delay(800);
 80079ce:	f44f 7048 	mov.w	r0, #800	; 0x320
 80079d2:	f002 fa9d 	bl	8009f10 <HAL_Delay>

	//if(power_sensor.butteryCheck() == true) batteryLowMode(); //if battery low, informed

	// -----------initialize-------//
	if(logger.sdCardInit() == true){ //sd mount successfull
 80079d6:	482a      	ldr	r0, [pc, #168]	; (8007a80 <cppInit+0x104>)
 80079d8:	f7fc ffa8 	bl	800492c <_ZN6Logger10sdCardInitEv>
 80079dc:	4603      	mov	r3, r0
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d007      	beq.n	80079f2 <cppInit+0x76>
		led.fullColor('G');
 80079e2:	2147      	movs	r1, #71	; 0x47
 80079e4:	4827      	ldr	r0, [pc, #156]	; (8007a84 <cppInit+0x108>)
 80079e6:	f7fa fbb5 	bl	8002154 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 80079ea:	2064      	movs	r0, #100	; 0x64
 80079ec:	f002 fa90 	bl	8009f10 <HAL_Delay>
 80079f0:	e006      	b.n	8007a00 <cppInit+0x84>
	}
	else{ //sd mount fali
		led.fullColor('R');
 80079f2:	2152      	movs	r1, #82	; 0x52
 80079f4:	4823      	ldr	r0, [pc, #140]	; (8007a84 <cppInit+0x108>)
 80079f6:	f7fa fbad 	bl	8002154 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 80079fa:	2064      	movs	r0, #100	; 0x64
 80079fc:	f002 fa88 	bl	8009f10 <HAL_Delay>
	}

	line_sensor.ADCStart();
 8007a00:	4821      	ldr	r0, [pc, #132]	; (8007a88 <cppInit+0x10c>)
 8007a02:	f7fa fd03 	bl	800240c <_ZN10LineSensor8ADCStartEv>
	motor.init();
 8007a06:	4821      	ldr	r0, [pc, #132]	; (8007a8c <cppInit+0x110>)
 8007a08:	f7fd fa64 	bl	8004ed4 <_ZN5Motor4initEv>
	encoder.init();
 8007a0c:	4820      	ldr	r0, [pc, #128]	; (8007a90 <cppInit+0x114>)
 8007a0e:	f7f9 fd11 	bl	8001434 <_ZN7Encoder4initEv>
	imu.init();
 8007a12:	4820      	ldr	r0, [pc, #128]	; (8007a94 <cppInit+0x118>)
 8007a14:	f7fa f95c 	bl	8001cd0 <_ZN3IMU4initEv>
	line_trace.init();
 8007a18:	481f      	ldr	r0, [pc, #124]	; (8007a98 <cppInit+0x11c>)
 8007a1a:	f7fb ffeb 	bl	80039f4 <_ZN9LineTrace4initEv>

	line_sensor.calibration();
 8007a1e:	481a      	ldr	r0, [pc, #104]	; (8007a88 <cppInit+0x10c>)
 8007a20:	f7fa fdea 	bl	80025f8 <_ZN10LineSensor11calibrationEv>
	HAL_Delay(1000);
 8007a24:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007a28:	f002 fa72 	bl	8009f10 <HAL_Delay>

	led.fullColor('M');
 8007a2c:	214d      	movs	r1, #77	; 0x4d
 8007a2e:	4815      	ldr	r0, [pc, #84]	; (8007a84 <cppInit+0x108>)
 8007a30:	f7fa fb90 	bl	8002154 <_ZN3LED9fullColorEc>
	imu.calibration();
 8007a34:	4817      	ldr	r0, [pc, #92]	; (8007a94 <cppInit+0x118>)
 8007a36:	f7fa fa15 	bl	8001e64 <_ZN3IMU11calibrationEv>
	//line_trace.setGain(0.0005, 0.000003, 0);
	//line_trace.setGain(0.0005, 0.000002, 0);

	//velocity_ctrl.setVelocityGain(1.8295, 16.1174, 0.025243); //2s
	//velocity_ctrl.setVelocityGain(1.0154, 6.5511, 0.0010088); //3s dorone
	velocity_ctrl.setVelocityGain(1.2, 10.6, 0.0); //3s hand tune
 8007a3a:	ed9f 1a18 	vldr	s2, [pc, #96]	; 8007a9c <cppInit+0x120>
 8007a3e:	eddf 0a18 	vldr	s1, [pc, #96]	; 8007aa0 <cppInit+0x124>
 8007a42:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8007aa4 <cppInit+0x128>
 8007a46:	4818      	ldr	r0, [pc, #96]	; (8007aa8 <cppInit+0x12c>)
 8007a48:	f7fe f99e 	bl	8005d88 <_ZN12VelocityCtrl15setVelocityGainEfff>

	velocity_ctrl.setOmegaGain(0.060, 0.86816, 0.000); //2s
 8007a4c:	ed9f 1a13 	vldr	s2, [pc, #76]	; 8007a9c <cppInit+0x120>
 8007a50:	eddf 0a16 	vldr	s1, [pc, #88]	; 8007aac <cppInit+0x130>
 8007a54:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8007ab0 <cppInit+0x134>
 8007a58:	4813      	ldr	r0, [pc, #76]	; (8007aa8 <cppInit+0x12c>)
 8007a5a:	f7fe f9ae 	bl	8005dba <_ZN12VelocityCtrl12setOmegaGainEfff>


	//encoder.clearDistance();
	odometry.clearPotition();
 8007a5e:	4815      	ldr	r0, [pc, #84]	; (8007ab4 <cppInit+0x138>)
 8007a60:	f7fd fbab 	bl	80051ba <_ZN8Odometry13clearPotitionEv>

	path_following.init();
 8007a64:	4814      	ldr	r0, [pc, #80]	; (8007ab8 <cppInit+0x13c>)
 8007a66:	f7fd fc43 	bl	80052f0 <_ZN13PathFollowing4initEv>

	esc.init();
 8007a6a:	4814      	ldr	r0, [pc, #80]	; (8007abc <cppInit+0x140>)
 8007a6c:	f7f9 fbbe 	bl	80011ec <_ZN3ESC4initEv>

}
 8007a70:	bf00      	nop
 8007a72:	bd98      	pop	{r3, r4, r7, pc}
 8007a74:	2000055c 	.word	0x2000055c
 8007a78:	08018f74 	.word	0x08018f74
 8007a7c:	08018f7c 	.word	0x08018f7c
 8007a80:	2000057c 	.word	0x2000057c
 8007a84:	20000558 	.word	0x20000558
 8007a88:	20000244 	.word	0x20000244
 8007a8c:	20000554 	.word	0x20000554
 8007a90:	20020928 	.word	0x20020928
 8007a94:	20000568 	.word	0x20000568
 8007a98:	200209d4 	.word	0x200209d4
 8007a9c:	00000000 	.word	0x00000000
 8007aa0:	4129999a 	.word	0x4129999a
 8007aa4:	3f99999a 	.word	0x3f99999a
 8007aa8:	20020950 	.word	0x20020950
 8007aac:	3f5e3fbc 	.word	0x3f5e3fbc
 8007ab0:	3d75c28f 	.word	0x3d75c28f
 8007ab4:	20020990 	.word	0x20020990
 8007ab8:	2002db20 	.word	0x2002db20
 8007abc:	200209d0 	.word	0x200209d0

08007ac0 <cppFlip1ms>:

void cppFlip1ms(void)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	af00      	add	r7, sp, #0
	line_sensor.updateSensorValues();
 8007ac4:	480e      	ldr	r0, [pc, #56]	; (8007b00 <cppFlip1ms+0x40>)
 8007ac6:	f7fa fcff 	bl	80024c8 <_ZN10LineSensor18updateSensorValuesEv>
	imu.updateValues();
 8007aca:	480e      	ldr	r0, [pc, #56]	; (8007b04 <cppFlip1ms+0x44>)
 8007acc:	f7fa f928 	bl	8001d20 <_ZN3IMU12updateValuesEv>
	encoder.update();
 8007ad0:	480d      	ldr	r0, [pc, #52]	; (8007b08 <cppFlip1ms+0x48>)
 8007ad2:	f7f9 fcd1 	bl	8001478 <_ZN7Encoder6updateEv>
	line_trace.flip();
 8007ad6:	480d      	ldr	r0, [pc, #52]	; (8007b0c <cppFlip1ms+0x4c>)
 8007ad8:	f7fc fa32 	bl	8003f40 <_ZN9LineTrace4flipEv>
	velocity_ctrl.flip();
 8007adc:	480c      	ldr	r0, [pc, #48]	; (8007b10 <cppFlip1ms+0x50>)
 8007ade:	f7fe f985 	bl	8005dec <_ZN12VelocityCtrl4flipEv>
	odometry.flip();
 8007ae2:	480c      	ldr	r0, [pc, #48]	; (8007b14 <cppFlip1ms+0x54>)
 8007ae4:	f7fd fb3c 	bl	8005160 <_ZN8Odometry4flipEv>
	side_sensor.updateStatus();
 8007ae8:	480b      	ldr	r0, [pc, #44]	; (8007b18 <cppFlip1ms+0x58>)
 8007aea:	f7fd fd67 	bl	80055bc <_ZN10SideSensor12updateStatusEv>

	motor.motorCtrl();
 8007aee:	480b      	ldr	r0, [pc, #44]	; (8007b1c <cppFlip1ms+0x5c>)
 8007af0:	f7fd fa02 	bl	8004ef8 <_ZN5Motor9motorCtrlEv>
*/
	//mon_cnt = twice_cnt;
	/*
	*/

	encoder.clear();
 8007af4:	4804      	ldr	r0, [pc, #16]	; (8007b08 <cppFlip1ms+0x48>)
 8007af6:	f7f9 fd57 	bl	80015a8 <_ZN7Encoder5clearEv>

	//Buttery Check
	//power_sensor.updateValues();
	//if(power_sensor.butteryCheck() == true) led.fullColor('R');

}
 8007afa:	bf00      	nop
 8007afc:	bd80      	pop	{r7, pc}
 8007afe:	bf00      	nop
 8007b00:	20000244 	.word	0x20000244
 8007b04:	20000568 	.word	0x20000568
 8007b08:	20020928 	.word	0x20020928
 8007b0c:	200209d4 	.word	0x200209d4
 8007b10:	20020950 	.word	0x20020950
 8007b14:	20020990 	.word	0x20020990
 8007b18:	2000053c 	.word	0x2000053c
 8007b1c:	20000554 	.word	0x20000554

08007b20 <cppFlip100ns>:

void cppFlip100ns(void)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	af00      	add	r7, sp, #0
	line_sensor.storeSensorValues();
 8007b24:	4802      	ldr	r0, [pc, #8]	; (8007b30 <cppFlip100ns+0x10>)
 8007b26:	f7fa fc81 	bl	800242c <_ZN10LineSensor17storeSensorValuesEv>
}
 8007b2a:	bf00      	nop
 8007b2c:	bd80      	pop	{r7, pc}
 8007b2e:	bf00      	nop
 8007b30:	20000244 	.word	0x20000244

08007b34 <cppFlip10ms>:

void cppFlip10ms(void)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	af00      	add	r7, sp, #0
		sys_ident.updateMsig();
		twice_cnt = 0;
	}
	*/

	logger.storeLog(line_trace.getTargetVelocity());
 8007b38:	480a      	ldr	r0, [pc, #40]	; (8007b64 <cppFlip10ms+0x30>)
 8007b3a:	f7fc f934 	bl	8003da6 <_ZN9LineTrace17getTargetVelocityEv>
 8007b3e:	eef0 7a40 	vmov.f32	s15, s0
 8007b42:	eeb0 0a67 	vmov.f32	s0, s15
 8007b46:	4808      	ldr	r0, [pc, #32]	; (8007b68 <cppFlip10ms+0x34>)
 8007b48:	f7fc ff38 	bl	80049bc <_ZN6Logger8storeLogEf>
	logger.storeLog2(velocity_ctrl.getCurrentVelocity());
 8007b4c:	4807      	ldr	r0, [pc, #28]	; (8007b6c <cppFlip10ms+0x38>)
 8007b4e:	f7fe f98f 	bl	8005e70 <_ZN12VelocityCtrl18getCurrentVelocityEv>
 8007b52:	eef0 7a40 	vmov.f32	s15, s0
 8007b56:	eeb0 0a67 	vmov.f32	s0, s15
 8007b5a:	4803      	ldr	r0, [pc, #12]	; (8007b68 <cppFlip10ms+0x34>)
 8007b5c:	f7fc ff7c 	bl	8004a58 <_ZN6Logger9storeLog2Ef>
		path_following.flip();
	}
	velocity_ctrl.setVelocity(path_following.getV(), path_following.getW());
	*/

}
 8007b60:	bf00      	nop
 8007b62:	bd80      	pop	{r7, pc}
 8007b64:	200209d4 	.word	0x200209d4
 8007b68:	2000057c 	.word	0x2000057c
 8007b6c:	20020950 	.word	0x20020950

08007b70 <cppExit>:

void cppExit(uint16_t gpio_pin)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b082      	sub	sp, #8
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	4603      	mov	r3, r0
 8007b78:	80fb      	strh	r3, [r7, #6]
	if(gpio_pin == GPIO_PIN_2){ //Right
 8007b7a:	88fb      	ldrh	r3, [r7, #6]
 8007b7c:	2b04      	cmp	r3, #4
 8007b7e:	d103      	bne.n	8007b88 <cppExit+0x18>
		side_sensor.updateStatusRightExti();
 8007b80:	4807      	ldr	r0, [pc, #28]	; (8007ba0 <cppExit+0x30>)
 8007b82:	f7fd fcd3 	bl	800552c <_ZN10SideSensor21updateStatusRightExtiEv>
	}
	else if(gpio_pin == GPIO_PIN_8){ //Left
		side_sensor.updateStatusLeftExti();
	}
}
 8007b86:	e006      	b.n	8007b96 <cppExit+0x26>
	else if(gpio_pin == GPIO_PIN_8){ //Left
 8007b88:	88fb      	ldrh	r3, [r7, #6]
 8007b8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b8e:	d102      	bne.n	8007b96 <cppExit+0x26>
		side_sensor.updateStatusLeftExti();
 8007b90:	4803      	ldr	r0, [pc, #12]	; (8007ba0 <cppExit+0x30>)
 8007b92:	f7fd fcef 	bl	8005574 <_ZN10SideSensor20updateStatusLeftExtiEv>
}
 8007b96:	bf00      	nop
 8007b98:	3708      	adds	r7, #8
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}
 8007b9e:	bf00      	nop
 8007ba0:	2000053c 	.word	0x2000053c
 8007ba4:	00000000 	.word	0x00000000

08007ba8 <cppLoop>:

void cppLoop(void)
{
 8007ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007baa:	b085      	sub	sp, #20
 8007bac:	af02      	add	r7, sp, #8
	static int16_t selector_gain;
	static int16_t selector_run;
	static int16_t selector_acc, selector_acc2;
	static int16_t selector_vel, selector_vel2;

	static float adj_kp = line_trace.getKp();
 8007bae:	4baf      	ldr	r3, [pc, #700]	; (8007e6c <cppLoop+0x2c4>)
 8007bb0:	781b      	ldrb	r3, [r3, #0]
 8007bb2:	f3bf 8f5b 	dmb	ish
 8007bb6:	b2db      	uxtb	r3, r3
 8007bb8:	f003 0301 	and.w	r3, r3, #1
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	bf0c      	ite	eq
 8007bc0:	2301      	moveq	r3, #1
 8007bc2:	2300      	movne	r3, #0
 8007bc4:	b2db      	uxtb	r3, r3
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d015      	beq.n	8007bf6 <cppLoop+0x4e>
 8007bca:	48a8      	ldr	r0, [pc, #672]	; (8007e6c <cppLoop+0x2c4>)
 8007bcc:	f00c fe9d 	bl	801490a <__cxa_guard_acquire>
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	bf14      	ite	ne
 8007bd6:	2301      	movne	r3, #1
 8007bd8:	2300      	moveq	r3, #0
 8007bda:	b2db      	uxtb	r3, r3
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d00a      	beq.n	8007bf6 <cppLoop+0x4e>
 8007be0:	48a3      	ldr	r0, [pc, #652]	; (8007e70 <cppLoop+0x2c8>)
 8007be2:	f7fc f80e 	bl	8003c02 <_ZN9LineTrace5getKpEv>
 8007be6:	eef0 7a40 	vmov.f32	s15, s0
 8007bea:	4ba2      	ldr	r3, [pc, #648]	; (8007e74 <cppLoop+0x2cc>)
 8007bec:	edc3 7a00 	vstr	s15, [r3]
 8007bf0:	489e      	ldr	r0, [pc, #632]	; (8007e6c <cppLoop+0x2c4>)
 8007bf2:	f00c fe96 	bl	8014922 <__cxa_guard_release>
	static float adj_ki= line_trace.getKi();
 8007bf6:	4ba0      	ldr	r3, [pc, #640]	; (8007e78 <cppLoop+0x2d0>)
 8007bf8:	781b      	ldrb	r3, [r3, #0]
 8007bfa:	f3bf 8f5b 	dmb	ish
 8007bfe:	b2db      	uxtb	r3, r3
 8007c00:	f003 0301 	and.w	r3, r3, #1
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	bf0c      	ite	eq
 8007c08:	2301      	moveq	r3, #1
 8007c0a:	2300      	movne	r3, #0
 8007c0c:	b2db      	uxtb	r3, r3
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d015      	beq.n	8007c3e <cppLoop+0x96>
 8007c12:	4899      	ldr	r0, [pc, #612]	; (8007e78 <cppLoop+0x2d0>)
 8007c14:	f00c fe79 	bl	801490a <__cxa_guard_acquire>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	bf14      	ite	ne
 8007c1e:	2301      	movne	r3, #1
 8007c20:	2300      	moveq	r3, #0
 8007c22:	b2db      	uxtb	r3, r3
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d00a      	beq.n	8007c3e <cppLoop+0x96>
 8007c28:	4891      	ldr	r0, [pc, #580]	; (8007e70 <cppLoop+0x2c8>)
 8007c2a:	f7fb fff9 	bl	8003c20 <_ZN9LineTrace5getKiEv>
 8007c2e:	eef0 7a40 	vmov.f32	s15, s0
 8007c32:	4b92      	ldr	r3, [pc, #584]	; (8007e7c <cppLoop+0x2d4>)
 8007c34:	edc3 7a00 	vstr	s15, [r3]
 8007c38:	488f      	ldr	r0, [pc, #572]	; (8007e78 <cppLoop+0x2d0>)
 8007c3a:	f00c fe72 	bl	8014922 <__cxa_guard_release>
	static float adj_kd = line_trace.getKd();
 8007c3e:	4b90      	ldr	r3, [pc, #576]	; (8007e80 <cppLoop+0x2d8>)
 8007c40:	781b      	ldrb	r3, [r3, #0]
 8007c42:	f3bf 8f5b 	dmb	ish
 8007c46:	b2db      	uxtb	r3, r3
 8007c48:	f003 0301 	and.w	r3, r3, #1
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	bf0c      	ite	eq
 8007c50:	2301      	moveq	r3, #1
 8007c52:	2300      	movne	r3, #0
 8007c54:	b2db      	uxtb	r3, r3
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d015      	beq.n	8007c86 <cppLoop+0xde>
 8007c5a:	4889      	ldr	r0, [pc, #548]	; (8007e80 <cppLoop+0x2d8>)
 8007c5c:	f00c fe55 	bl	801490a <__cxa_guard_acquire>
 8007c60:	4603      	mov	r3, r0
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	bf14      	ite	ne
 8007c66:	2301      	movne	r3, #1
 8007c68:	2300      	moveq	r3, #0
 8007c6a:	b2db      	uxtb	r3, r3
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d00a      	beq.n	8007c86 <cppLoop+0xde>
 8007c70:	487f      	ldr	r0, [pc, #508]	; (8007e70 <cppLoop+0x2c8>)
 8007c72:	f7fb ffe4 	bl	8003c3e <_ZN9LineTrace5getKdEv>
 8007c76:	eef0 7a40 	vmov.f32	s15, s0
 8007c7a:	4b82      	ldr	r3, [pc, #520]	; (8007e84 <cppLoop+0x2dc>)
 8007c7c:	edc3 7a00 	vstr	s15, [r3]
 8007c80:	487f      	ldr	r0, [pc, #508]	; (8007e80 <cppLoop+0x2d8>)
 8007c82:	f00c fe4e 	bl	8014922 <__cxa_guard_release>

	static float adj_kp_slow = line_trace.getKpSlow();
 8007c86:	4b80      	ldr	r3, [pc, #512]	; (8007e88 <cppLoop+0x2e0>)
 8007c88:	781b      	ldrb	r3, [r3, #0]
 8007c8a:	f3bf 8f5b 	dmb	ish
 8007c8e:	b2db      	uxtb	r3, r3
 8007c90:	f003 0301 	and.w	r3, r3, #1
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	bf0c      	ite	eq
 8007c98:	2301      	moveq	r3, #1
 8007c9a:	2300      	movne	r3, #0
 8007c9c:	b2db      	uxtb	r3, r3
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d015      	beq.n	8007cce <cppLoop+0x126>
 8007ca2:	4879      	ldr	r0, [pc, #484]	; (8007e88 <cppLoop+0x2e0>)
 8007ca4:	f00c fe31 	bl	801490a <__cxa_guard_acquire>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	bf14      	ite	ne
 8007cae:	2301      	movne	r3, #1
 8007cb0:	2300      	moveq	r3, #0
 8007cb2:	b2db      	uxtb	r3, r3
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d00a      	beq.n	8007cce <cppLoop+0x126>
 8007cb8:	486d      	ldr	r0, [pc, #436]	; (8007e70 <cppLoop+0x2c8>)
 8007cba:	f7fb ffe8 	bl	8003c8e <_ZN9LineTrace9getKpSlowEv>
 8007cbe:	eef0 7a40 	vmov.f32	s15, s0
 8007cc2:	4b72      	ldr	r3, [pc, #456]	; (8007e8c <cppLoop+0x2e4>)
 8007cc4:	edc3 7a00 	vstr	s15, [r3]
 8007cc8:	486f      	ldr	r0, [pc, #444]	; (8007e88 <cppLoop+0x2e0>)
 8007cca:	f00c fe2a 	bl	8014922 <__cxa_guard_release>
	static float adj_ki_slow = line_trace.getKiSlow();
 8007cce:	4b70      	ldr	r3, [pc, #448]	; (8007e90 <cppLoop+0x2e8>)
 8007cd0:	781b      	ldrb	r3, [r3, #0]
 8007cd2:	f3bf 8f5b 	dmb	ish
 8007cd6:	b2db      	uxtb	r3, r3
 8007cd8:	f003 0301 	and.w	r3, r3, #1
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	bf0c      	ite	eq
 8007ce0:	2301      	moveq	r3, #1
 8007ce2:	2300      	movne	r3, #0
 8007ce4:	b2db      	uxtb	r3, r3
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d015      	beq.n	8007d16 <cppLoop+0x16e>
 8007cea:	4869      	ldr	r0, [pc, #420]	; (8007e90 <cppLoop+0x2e8>)
 8007cec:	f00c fe0d 	bl	801490a <__cxa_guard_acquire>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	bf14      	ite	ne
 8007cf6:	2301      	movne	r3, #1
 8007cf8:	2300      	moveq	r3, #0
 8007cfa:	b2db      	uxtb	r3, r3
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d00a      	beq.n	8007d16 <cppLoop+0x16e>
 8007d00:	485b      	ldr	r0, [pc, #364]	; (8007e70 <cppLoop+0x2c8>)
 8007d02:	f7fb ffd3 	bl	8003cac <_ZN9LineTrace9getKiSlowEv>
 8007d06:	eef0 7a40 	vmov.f32	s15, s0
 8007d0a:	4b62      	ldr	r3, [pc, #392]	; (8007e94 <cppLoop+0x2ec>)
 8007d0c:	edc3 7a00 	vstr	s15, [r3]
 8007d10:	485f      	ldr	r0, [pc, #380]	; (8007e90 <cppLoop+0x2e8>)
 8007d12:	f00c fe06 	bl	8014922 <__cxa_guard_release>
	static float adj_kd_slow = line_trace.getKdSlow();
 8007d16:	4b60      	ldr	r3, [pc, #384]	; (8007e98 <cppLoop+0x2f0>)
 8007d18:	781b      	ldrb	r3, [r3, #0]
 8007d1a:	f3bf 8f5b 	dmb	ish
 8007d1e:	b2db      	uxtb	r3, r3
 8007d20:	f003 0301 	and.w	r3, r3, #1
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	bf0c      	ite	eq
 8007d28:	2301      	moveq	r3, #1
 8007d2a:	2300      	movne	r3, #0
 8007d2c:	b2db      	uxtb	r3, r3
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d015      	beq.n	8007d5e <cppLoop+0x1b6>
 8007d32:	4859      	ldr	r0, [pc, #356]	; (8007e98 <cppLoop+0x2f0>)
 8007d34:	f00c fde9 	bl	801490a <__cxa_guard_acquire>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	bf14      	ite	ne
 8007d3e:	2301      	movne	r3, #1
 8007d40:	2300      	moveq	r3, #0
 8007d42:	b2db      	uxtb	r3, r3
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d00a      	beq.n	8007d5e <cppLoop+0x1b6>
 8007d48:	4849      	ldr	r0, [pc, #292]	; (8007e70 <cppLoop+0x2c8>)
 8007d4a:	f7fb ffbe 	bl	8003cca <_ZN9LineTrace9getKdSlowEv>
 8007d4e:	eef0 7a40 	vmov.f32	s15, s0
 8007d52:	4b52      	ldr	r3, [pc, #328]	; (8007e9c <cppLoop+0x2f4>)
 8007d54:	edc3 7a00 	vstr	s15, [r3]
 8007d58:	484f      	ldr	r0, [pc, #316]	; (8007e98 <cppLoop+0x2f0>)
 8007d5a:	f00c fde2 	bl	8014922 <__cxa_guard_release>

	static float adj_velocity = line_trace.getTargetVelocity();
 8007d5e:	4b50      	ldr	r3, [pc, #320]	; (8007ea0 <cppLoop+0x2f8>)
 8007d60:	781b      	ldrb	r3, [r3, #0]
 8007d62:	f3bf 8f5b 	dmb	ish
 8007d66:	b2db      	uxtb	r3, r3
 8007d68:	f003 0301 	and.w	r3, r3, #1
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	bf0c      	ite	eq
 8007d70:	2301      	moveq	r3, #1
 8007d72:	2300      	movne	r3, #0
 8007d74:	b2db      	uxtb	r3, r3
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d015      	beq.n	8007da6 <cppLoop+0x1fe>
 8007d7a:	4849      	ldr	r0, [pc, #292]	; (8007ea0 <cppLoop+0x2f8>)
 8007d7c:	f00c fdc5 	bl	801490a <__cxa_guard_acquire>
 8007d80:	4603      	mov	r3, r0
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	bf14      	ite	ne
 8007d86:	2301      	movne	r3, #1
 8007d88:	2300      	moveq	r3, #0
 8007d8a:	b2db      	uxtb	r3, r3
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d00a      	beq.n	8007da6 <cppLoop+0x1fe>
 8007d90:	4837      	ldr	r0, [pc, #220]	; (8007e70 <cppLoop+0x2c8>)
 8007d92:	f7fc f808 	bl	8003da6 <_ZN9LineTrace17getTargetVelocityEv>
 8007d96:	eef0 7a40 	vmov.f32	s15, s0
 8007d9a:	4b42      	ldr	r3, [pc, #264]	; (8007ea4 <cppLoop+0x2fc>)
 8007d9c:	edc3 7a00 	vstr	s15, [r3]
 8007da0:	483f      	ldr	r0, [pc, #252]	; (8007ea0 <cppLoop+0x2f8>)
 8007da2:	f00c fdbe 	bl	8014922 <__cxa_guard_release>
	static float adj_max_velocity = line_trace.getMaxVelocity();
 8007da6:	4b40      	ldr	r3, [pc, #256]	; (8007ea8 <cppLoop+0x300>)
 8007da8:	781b      	ldrb	r3, [r3, #0]
 8007daa:	f3bf 8f5b 	dmb	ish
 8007dae:	b2db      	uxtb	r3, r3
 8007db0:	f003 0301 	and.w	r3, r3, #1
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	bf0c      	ite	eq
 8007db8:	2301      	moveq	r3, #1
 8007dba:	2300      	movne	r3, #0
 8007dbc:	b2db      	uxtb	r3, r3
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d015      	beq.n	8007dee <cppLoop+0x246>
 8007dc2:	4839      	ldr	r0, [pc, #228]	; (8007ea8 <cppLoop+0x300>)
 8007dc4:	f00c fda1 	bl	801490a <__cxa_guard_acquire>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	bf14      	ite	ne
 8007dce:	2301      	movne	r3, #1
 8007dd0:	2300      	moveq	r3, #0
 8007dd2:	b2db      	uxtb	r3, r3
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d00a      	beq.n	8007dee <cppLoop+0x246>
 8007dd8:	4825      	ldr	r0, [pc, #148]	; (8007e70 <cppLoop+0x2c8>)
 8007dda:	f7fb fff4 	bl	8003dc6 <_ZN9LineTrace14getMaxVelocityEv>
 8007dde:	eef0 7a40 	vmov.f32	s15, s0
 8007de2:	4b32      	ldr	r3, [pc, #200]	; (8007eac <cppLoop+0x304>)
 8007de4:	edc3 7a00 	vstr	s15, [r3]
 8007de8:	482f      	ldr	r0, [pc, #188]	; (8007ea8 <cppLoop+0x300>)
 8007dea:	f00c fd9a 	bl	8014922 <__cxa_guard_release>
	static float adj_max_velocity2 = line_trace.getMaxVelocity2();
 8007dee:	4b30      	ldr	r3, [pc, #192]	; (8007eb0 <cppLoop+0x308>)
 8007df0:	781b      	ldrb	r3, [r3, #0]
 8007df2:	f3bf 8f5b 	dmb	ish
 8007df6:	b2db      	uxtb	r3, r3
 8007df8:	f003 0301 	and.w	r3, r3, #1
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	bf0c      	ite	eq
 8007e00:	2301      	moveq	r3, #1
 8007e02:	2300      	movne	r3, #0
 8007e04:	b2db      	uxtb	r3, r3
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d015      	beq.n	8007e36 <cppLoop+0x28e>
 8007e0a:	4829      	ldr	r0, [pc, #164]	; (8007eb0 <cppLoop+0x308>)
 8007e0c:	f00c fd7d 	bl	801490a <__cxa_guard_acquire>
 8007e10:	4603      	mov	r3, r0
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	bf14      	ite	ne
 8007e16:	2301      	movne	r3, #1
 8007e18:	2300      	moveq	r3, #0
 8007e1a:	b2db      	uxtb	r3, r3
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d00a      	beq.n	8007e36 <cppLoop+0x28e>
 8007e20:	4813      	ldr	r0, [pc, #76]	; (8007e70 <cppLoop+0x2c8>)
 8007e22:	f7fb ffe0 	bl	8003de6 <_ZN9LineTrace15getMaxVelocity2Ev>
 8007e26:	eef0 7a40 	vmov.f32	s15, s0
 8007e2a:	4b22      	ldr	r3, [pc, #136]	; (8007eb4 <cppLoop+0x30c>)
 8007e2c:	edc3 7a00 	vstr	s15, [r3]
 8007e30:	481f      	ldr	r0, [pc, #124]	; (8007eb0 <cppLoop+0x308>)
 8007e32:	f00c fd76 	bl	8014922 <__cxa_guard_release>
	static float adj_min_velocity = line_trace.getMinVelocity();
 8007e36:	4b20      	ldr	r3, [pc, #128]	; (8007eb8 <cppLoop+0x310>)
 8007e38:	781b      	ldrb	r3, [r3, #0]
 8007e3a:	f3bf 8f5b 	dmb	ish
 8007e3e:	b2db      	uxtb	r3, r3
 8007e40:	f003 0301 	and.w	r3, r3, #1
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	bf0c      	ite	eq
 8007e48:	2301      	moveq	r3, #1
 8007e4a:	2300      	movne	r3, #0
 8007e4c:	b2db      	uxtb	r3, r3
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d03f      	beq.n	8007ed2 <cppLoop+0x32a>
 8007e52:	4819      	ldr	r0, [pc, #100]	; (8007eb8 <cppLoop+0x310>)
 8007e54:	f00c fd59 	bl	801490a <__cxa_guard_acquire>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	bf14      	ite	ne
 8007e5e:	2301      	movne	r3, #1
 8007e60:	2300      	moveq	r3, #0
 8007e62:	b2db      	uxtb	r3, r3
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d034      	beq.n	8007ed2 <cppLoop+0x32a>
 8007e68:	e028      	b.n	8007ebc <cppLoop+0x314>
 8007e6a:	bf00      	nop
 8007e6c:	20045258 	.word	0x20045258
 8007e70:	200209d4 	.word	0x200209d4
 8007e74:	20045254 	.word	0x20045254
 8007e78:	20045260 	.word	0x20045260
 8007e7c:	2004525c 	.word	0x2004525c
 8007e80:	20045268 	.word	0x20045268
 8007e84:	20045264 	.word	0x20045264
 8007e88:	20045270 	.word	0x20045270
 8007e8c:	2004526c 	.word	0x2004526c
 8007e90:	20045278 	.word	0x20045278
 8007e94:	20045274 	.word	0x20045274
 8007e98:	20045280 	.word	0x20045280
 8007e9c:	2004527c 	.word	0x2004527c
 8007ea0:	20045288 	.word	0x20045288
 8007ea4:	20045284 	.word	0x20045284
 8007ea8:	20045290 	.word	0x20045290
 8007eac:	2004528c 	.word	0x2004528c
 8007eb0:	20045298 	.word	0x20045298
 8007eb4:	20045294 	.word	0x20045294
 8007eb8:	200452a0 	.word	0x200452a0
 8007ebc:	48b6      	ldr	r0, [pc, #728]	; (8008198 <cppLoop+0x5f0>)
 8007ebe:	f7fb ffa2 	bl	8003e06 <_ZN9LineTrace14getMinVelocityEv>
 8007ec2:	eef0 7a40 	vmov.f32	s15, s0
 8007ec6:	4bb5      	ldr	r3, [pc, #724]	; (800819c <cppLoop+0x5f4>)
 8007ec8:	edc3 7a00 	vstr	s15, [r3]
 8007ecc:	48b4      	ldr	r0, [pc, #720]	; (80081a0 <cppLoop+0x5f8>)
 8007ece:	f00c fd28 	bl	8014922 <__cxa_guard_release>
	static float adj_min_velocity2 = line_trace.getMinVelocity2();
 8007ed2:	4bb4      	ldr	r3, [pc, #720]	; (80081a4 <cppLoop+0x5fc>)
 8007ed4:	781b      	ldrb	r3, [r3, #0]
 8007ed6:	f3bf 8f5b 	dmb	ish
 8007eda:	b2db      	uxtb	r3, r3
 8007edc:	f003 0301 	and.w	r3, r3, #1
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	bf0c      	ite	eq
 8007ee4:	2301      	moveq	r3, #1
 8007ee6:	2300      	movne	r3, #0
 8007ee8:	b2db      	uxtb	r3, r3
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d015      	beq.n	8007f1a <cppLoop+0x372>
 8007eee:	48ad      	ldr	r0, [pc, #692]	; (80081a4 <cppLoop+0x5fc>)
 8007ef0:	f00c fd0b 	bl	801490a <__cxa_guard_acquire>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	bf14      	ite	ne
 8007efa:	2301      	movne	r3, #1
 8007efc:	2300      	moveq	r3, #0
 8007efe:	b2db      	uxtb	r3, r3
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d00a      	beq.n	8007f1a <cppLoop+0x372>
 8007f04:	48a4      	ldr	r0, [pc, #656]	; (8008198 <cppLoop+0x5f0>)
 8007f06:	f7fb ff8e 	bl	8003e26 <_ZN9LineTrace15getMinVelocity2Ev>
 8007f0a:	eef0 7a40 	vmov.f32	s15, s0
 8007f0e:	4ba6      	ldr	r3, [pc, #664]	; (80081a8 <cppLoop+0x600>)
 8007f10:	edc3 7a00 	vstr	s15, [r3]
 8007f14:	48a3      	ldr	r0, [pc, #652]	; (80081a4 <cppLoop+0x5fc>)
 8007f16:	f00c fd04 	bl	8014922 <__cxa_guard_release>

	static float adj_acc = line_trace.getMaxAcc();
 8007f1a:	4ba4      	ldr	r3, [pc, #656]	; (80081ac <cppLoop+0x604>)
 8007f1c:	781b      	ldrb	r3, [r3, #0]
 8007f1e:	f3bf 8f5b 	dmb	ish
 8007f22:	b2db      	uxtb	r3, r3
 8007f24:	f003 0301 	and.w	r3, r3, #1
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	bf0c      	ite	eq
 8007f2c:	2301      	moveq	r3, #1
 8007f2e:	2300      	movne	r3, #0
 8007f30:	b2db      	uxtb	r3, r3
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d015      	beq.n	8007f62 <cppLoop+0x3ba>
 8007f36:	489d      	ldr	r0, [pc, #628]	; (80081ac <cppLoop+0x604>)
 8007f38:	f00c fce7 	bl	801490a <__cxa_guard_acquire>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	bf14      	ite	ne
 8007f42:	2301      	movne	r3, #1
 8007f44:	2300      	moveq	r3, #0
 8007f46:	b2db      	uxtb	r3, r3
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d00a      	beq.n	8007f62 <cppLoop+0x3ba>
 8007f4c:	4892      	ldr	r0, [pc, #584]	; (8008198 <cppLoop+0x5f0>)
 8007f4e:	f7fb ffae 	bl	8003eae <_ZN9LineTrace9getMaxAccEv>
 8007f52:	eef0 7a40 	vmov.f32	s15, s0
 8007f56:	4b96      	ldr	r3, [pc, #600]	; (80081b0 <cppLoop+0x608>)
 8007f58:	edc3 7a00 	vstr	s15, [r3]
 8007f5c:	4893      	ldr	r0, [pc, #588]	; (80081ac <cppLoop+0x604>)
 8007f5e:	f00c fce0 	bl	8014922 <__cxa_guard_release>
	static float adj_dec = line_trace.getMaxDec();
 8007f62:	4b94      	ldr	r3, [pc, #592]	; (80081b4 <cppLoop+0x60c>)
 8007f64:	781b      	ldrb	r3, [r3, #0]
 8007f66:	f3bf 8f5b 	dmb	ish
 8007f6a:	b2db      	uxtb	r3, r3
 8007f6c:	f003 0301 	and.w	r3, r3, #1
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	bf0c      	ite	eq
 8007f74:	2301      	moveq	r3, #1
 8007f76:	2300      	movne	r3, #0
 8007f78:	b2db      	uxtb	r3, r3
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d015      	beq.n	8007faa <cppLoop+0x402>
 8007f7e:	488d      	ldr	r0, [pc, #564]	; (80081b4 <cppLoop+0x60c>)
 8007f80:	f00c fcc3 	bl	801490a <__cxa_guard_acquire>
 8007f84:	4603      	mov	r3, r0
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	bf14      	ite	ne
 8007f8a:	2301      	movne	r3, #1
 8007f8c:	2300      	moveq	r3, #0
 8007f8e:	b2db      	uxtb	r3, r3
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d00a      	beq.n	8007faa <cppLoop+0x402>
 8007f94:	4880      	ldr	r0, [pc, #512]	; (8008198 <cppLoop+0x5f0>)
 8007f96:	f7fb ffc0 	bl	8003f1a <_ZN9LineTrace9getMaxDecEv>
 8007f9a:	eef0 7a40 	vmov.f32	s15, s0
 8007f9e:	4b86      	ldr	r3, [pc, #536]	; (80081b8 <cppLoop+0x610>)
 8007fa0:	edc3 7a00 	vstr	s15, [r3]
 8007fa4:	4883      	ldr	r0, [pc, #524]	; (80081b4 <cppLoop+0x60c>)
 8007fa6:	f00c fcbc 	bl	8014922 <__cxa_guard_release>
	static float adj_acc2 = line_trace.getMaxAcc2();
 8007faa:	4b84      	ldr	r3, [pc, #528]	; (80081bc <cppLoop+0x614>)
 8007fac:	781b      	ldrb	r3, [r3, #0]
 8007fae:	f3bf 8f5b 	dmb	ish
 8007fb2:	b2db      	uxtb	r3, r3
 8007fb4:	f003 0301 	and.w	r3, r3, #1
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	bf0c      	ite	eq
 8007fbc:	2301      	moveq	r3, #1
 8007fbe:	2300      	movne	r3, #0
 8007fc0:	b2db      	uxtb	r3, r3
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d015      	beq.n	8007ff2 <cppLoop+0x44a>
 8007fc6:	487d      	ldr	r0, [pc, #500]	; (80081bc <cppLoop+0x614>)
 8007fc8:	f00c fc9f 	bl	801490a <__cxa_guard_acquire>
 8007fcc:	4603      	mov	r3, r0
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	bf14      	ite	ne
 8007fd2:	2301      	movne	r3, #1
 8007fd4:	2300      	moveq	r3, #0
 8007fd6:	b2db      	uxtb	r3, r3
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d00a      	beq.n	8007ff2 <cppLoop+0x44a>
 8007fdc:	486e      	ldr	r0, [pc, #440]	; (8008198 <cppLoop+0x5f0>)
 8007fde:	f7fb ff8a 	bl	8003ef6 <_ZN9LineTrace10getMaxAcc2Ev>
 8007fe2:	eef0 7a40 	vmov.f32	s15, s0
 8007fe6:	4b76      	ldr	r3, [pc, #472]	; (80081c0 <cppLoop+0x618>)
 8007fe8:	edc3 7a00 	vstr	s15, [r3]
 8007fec:	4873      	ldr	r0, [pc, #460]	; (80081bc <cppLoop+0x614>)
 8007fee:	f00c fc98 	bl	8014922 <__cxa_guard_release>
	static float adj_dec2 = line_trace.getMaxDec2();
 8007ff2:	4b74      	ldr	r3, [pc, #464]	; (80081c4 <cppLoop+0x61c>)
 8007ff4:	781b      	ldrb	r3, [r3, #0]
 8007ff6:	f3bf 8f5b 	dmb	ish
 8007ffa:	b2db      	uxtb	r3, r3
 8007ffc:	f003 0301 	and.w	r3, r3, #1
 8008000:	2b00      	cmp	r3, #0
 8008002:	bf0c      	ite	eq
 8008004:	2301      	moveq	r3, #1
 8008006:	2300      	movne	r3, #0
 8008008:	b2db      	uxtb	r3, r3
 800800a:	2b00      	cmp	r3, #0
 800800c:	d015      	beq.n	800803a <cppLoop+0x492>
 800800e:	486d      	ldr	r0, [pc, #436]	; (80081c4 <cppLoop+0x61c>)
 8008010:	f00c fc7b 	bl	801490a <__cxa_guard_acquire>
 8008014:	4603      	mov	r3, r0
 8008016:	2b00      	cmp	r3, #0
 8008018:	bf14      	ite	ne
 800801a:	2301      	movne	r3, #1
 800801c:	2300      	moveq	r3, #0
 800801e:	b2db      	uxtb	r3, r3
 8008020:	2b00      	cmp	r3, #0
 8008022:	d00a      	beq.n	800803a <cppLoop+0x492>
 8008024:	485c      	ldr	r0, [pc, #368]	; (8008198 <cppLoop+0x5f0>)
 8008026:	f7fb ff54 	bl	8003ed2 <_ZN9LineTrace10getMaxDec2Ev>
 800802a:	eef0 7a40 	vmov.f32	s15, s0
 800802e:	4b66      	ldr	r3, [pc, #408]	; (80081c8 <cppLoop+0x620>)
 8008030:	edc3 7a00 	vstr	s15, [r3]
 8008034:	4863      	ldr	r0, [pc, #396]	; (80081c4 <cppLoop+0x61c>)
 8008036:	f00c fc74 	bl	8014922 <__cxa_guard_release>

	switch(rotary_switch.getValue()){
 800803a:	4864      	ldr	r0, [pc, #400]	; (80081cc <cppLoop+0x624>)
 800803c:	f7fd f9fe 	bl	800543c <_ZN12RotarySwitch8getValueEv>
 8008040:	4603      	mov	r3, r0
 8008042:	2b0f      	cmp	r3, #15
 8008044:	f201 8617 	bhi.w	8009c76 <cppLoop+0x20ce>
 8008048:	a201      	add	r2, pc, #4	; (adr r2, 8008050 <cppLoop+0x4a8>)
 800804a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800804e:	bf00      	nop
 8008050:	08008091 	.word	0x08008091
 8008054:	0800845d 	.word	0x0800845d
 8008058:	080087d1 	.word	0x080087d1
 800805c:	08008a9d 	.word	0x08008a9d
 8008060:	08008e83 	.word	0x08008e83
 8008064:	0800929d 	.word	0x0800929d
 8008068:	08009523 	.word	0x08009523
 800806c:	08009c77 	.word	0x08009c77
 8008070:	08009c77 	.word	0x08009c77
 8008074:	08009c77 	.word	0x08009c77
 8008078:	080097a5 	.word	0x080097a5
 800807c:	08009861 	.word	0x08009861
 8008080:	08009901 	.word	0x08009901
 8008084:	08009987 	.word	0x08009987
 8008088:	08009ac5 	.word	0x08009ac5
 800808c:	08009b9f 	.word	0x08009b9f
	/*-------------------------------------------------------------------------*/
	/*-----------------------------------Gain setting 1 -----------------------*/
	/*-------------------------------------------------------------------------*/
	case 0:
		led.fullColor('W');
 8008090:	2157      	movs	r1, #87	; 0x57
 8008092:	484f      	ldr	r0, [pc, #316]	; (80081d0 <cppLoop+0x628>)
 8008094:	f7fa f85e 	bl	8002154 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008098:	f7f9 f802 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800809c:	2100      	movs	r1, #0
 800809e:	2000      	movs	r0, #0
 80080a0:	f7f9 f80e 	bl	80010c0 <lcd_locate>
		lcd_printf("Slow%4.2lf", abs(line_trace.getKpSlow()*10000));
 80080a4:	483c      	ldr	r0, [pc, #240]	; (8008198 <cppLoop+0x5f0>)
 80080a6:	f7fb fdf2 	bl	8003c8e <_ZN9LineTrace9getKpSlowEv>
 80080aa:	eeb0 7a40 	vmov.f32	s14, s0
 80080ae:	eddf 7a49 	vldr	s15, [pc, #292]	; 80081d4 <cppLoop+0x62c>
 80080b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080b6:	eeb0 0a67 	vmov.f32	s0, s15
 80080ba:	f7fa fc0d 	bl	80028d8 <_ZSt3absf>
 80080be:	ee10 3a10 	vmov	r3, s0
 80080c2:	4618      	mov	r0, r3
 80080c4:	f7f8 fa58 	bl	8000578 <__aeabi_f2d>
 80080c8:	4603      	mov	r3, r0
 80080ca:	460c      	mov	r4, r1
 80080cc:	461a      	mov	r2, r3
 80080ce:	4623      	mov	r3, r4
 80080d0:	4841      	ldr	r0, [pc, #260]	; (80081d8 <cppLoop+0x630>)
 80080d2:	f7f9 f81f 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80080d6:	2101      	movs	r1, #1
 80080d8:	2000      	movs	r0, #0
 80080da:	f7f8 fff1 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", abs(line_trace.getKiSlow()*1000), abs(line_trace.getKdSlow()*100000));
 80080de:	482e      	ldr	r0, [pc, #184]	; (8008198 <cppLoop+0x5f0>)
 80080e0:	f7fb fde4 	bl	8003cac <_ZN9LineTrace9getKiSlowEv>
 80080e4:	eeb0 7a40 	vmov.f32	s14, s0
 80080e8:	eddf 7a3c 	vldr	s15, [pc, #240]	; 80081dc <cppLoop+0x634>
 80080ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080f0:	eeb0 0a67 	vmov.f32	s0, s15
 80080f4:	f7fa fbf0 	bl	80028d8 <_ZSt3absf>
 80080f8:	ee10 3a10 	vmov	r3, s0
 80080fc:	4618      	mov	r0, r3
 80080fe:	f7f8 fa3b 	bl	8000578 <__aeabi_f2d>
 8008102:	4605      	mov	r5, r0
 8008104:	460e      	mov	r6, r1
 8008106:	4824      	ldr	r0, [pc, #144]	; (8008198 <cppLoop+0x5f0>)
 8008108:	f7fb fddf 	bl	8003cca <_ZN9LineTrace9getKdSlowEv>
 800810c:	eeb0 7a40 	vmov.f32	s14, s0
 8008110:	eddf 7a33 	vldr	s15, [pc, #204]	; 80081e0 <cppLoop+0x638>
 8008114:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008118:	eeb0 0a67 	vmov.f32	s0, s15
 800811c:	f7fa fbdc 	bl	80028d8 <_ZSt3absf>
 8008120:	ee10 3a10 	vmov	r3, s0
 8008124:	4618      	mov	r0, r3
 8008126:	f7f8 fa27 	bl	8000578 <__aeabi_f2d>
 800812a:	4603      	mov	r3, r0
 800812c:	460c      	mov	r4, r1
 800812e:	e9cd 3400 	strd	r3, r4, [sp]
 8008132:	462a      	mov	r2, r5
 8008134:	4633      	mov	r3, r6
 8008136:	482b      	ldr	r0, [pc, #172]	; (80081e4 <cppLoop+0x63c>)
 8008138:	f7f8 ffec 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_D){
 800813c:	482a      	ldr	r0, [pc, #168]	; (80081e8 <cppLoop+0x640>)
 800813e:	f7f9 ffa5 	bl	800208c <_ZN8JoyStick8getValueEv>
 8008142:	4603      	mov	r3, r0
 8008144:	2b04      	cmp	r3, #4
 8008146:	bf0c      	ite	eq
 8008148:	2301      	moveq	r3, #1
 800814a:	2300      	movne	r3, #0
 800814c:	b2db      	uxtb	r3, r3
 800814e:	2b00      	cmp	r3, #0
 8008150:	d04e      	beq.n	80081f0 <cppLoop+0x648>
			led.LR(-1, 1);
 8008152:	2201      	movs	r2, #1
 8008154:	f04f 31ff 	mov.w	r1, #4294967295
 8008158:	481d      	ldr	r0, [pc, #116]	; (80081d0 <cppLoop+0x628>)
 800815a:	f7fa f8b7 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 800815e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008162:	f001 fed5 	bl	8009f10 <HAL_Delay>

			selector_gain++;
 8008166:	4b21      	ldr	r3, [pc, #132]	; (80081ec <cppLoop+0x644>)
 8008168:	f9b3 3000 	ldrsh.w	r3, [r3]
 800816c:	b29b      	uxth	r3, r3
 800816e:	3301      	adds	r3, #1
 8008170:	b29b      	uxth	r3, r3
 8008172:	b21a      	sxth	r2, r3
 8008174:	4b1d      	ldr	r3, [pc, #116]	; (80081ec <cppLoop+0x644>)
 8008176:	801a      	strh	r2, [r3, #0]
			if(selector_gain >= 3) selector_gain = 0;
 8008178:	4b1c      	ldr	r3, [pc, #112]	; (80081ec <cppLoop+0x644>)
 800817a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800817e:	2b02      	cmp	r3, #2
 8008180:	dd02      	ble.n	8008188 <cppLoop+0x5e0>
 8008182:	4b1a      	ldr	r3, [pc, #104]	; (80081ec <cppLoop+0x644>)
 8008184:	2200      	movs	r2, #0
 8008186:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008188:	2200      	movs	r2, #0
 800818a:	f04f 31ff 	mov.w	r1, #4294967295
 800818e:	4810      	ldr	r0, [pc, #64]	; (80081d0 <cppLoop+0x628>)
 8008190:	f7fa f89c 	bl	80022cc <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "KD_SLOW.TXT", 1, &adj_kd_slow, OVER_WRITE);
			line_trace.setGainSlow(adj_kp_slow, adj_ki_slow, adj_kd_slow);

			led.LR(-1, 0);
		}
		break;
 8008194:	f001 bd71 	b.w	8009c7a <cppLoop+0x20d2>
 8008198:	200209d4 	.word	0x200209d4
 800819c:	2004529c 	.word	0x2004529c
 80081a0:	200452a0 	.word	0x200452a0
 80081a4:	200452a8 	.word	0x200452a8
 80081a8:	200452a4 	.word	0x200452a4
 80081ac:	200452b0 	.word	0x200452b0
 80081b0:	200452ac 	.word	0x200452ac
 80081b4:	200452b8 	.word	0x200452b8
 80081b8:	200452b4 	.word	0x200452b4
 80081bc:	200452c0 	.word	0x200452c0
 80081c0:	200452bc 	.word	0x200452bc
 80081c4:	200452c8 	.word	0x200452c8
 80081c8:	200452c4 	.word	0x200452c4
 80081cc:	20000550 	.word	0x20000550
 80081d0:	20000558 	.word	0x20000558
 80081d4:	461c4000 	.word	0x461c4000
 80081d8:	08018f80 	.word	0x08018f80
 80081dc:	447a0000 	.word	0x447a0000
 80081e0:	47c35000 	.word	0x47c35000
 80081e4:	08018f8c 	.word	0x08018f8c
 80081e8:	2000054c 	.word	0x2000054c
 80081ec:	20045248 	.word	0x20045248
		else if(joy_stick.getValue() == JOY_R){
 80081f0:	488f      	ldr	r0, [pc, #572]	; (8008430 <cppLoop+0x888>)
 80081f2:	f7f9 ff4b 	bl	800208c <_ZN8JoyStick8getValueEv>
 80081f6:	4603      	mov	r3, r0
 80081f8:	2b10      	cmp	r3, #16
 80081fa:	bf0c      	ite	eq
 80081fc:	2301      	moveq	r3, #1
 80081fe:	2300      	movne	r3, #0
 8008200:	b2db      	uxtb	r3, r3
 8008202:	2b00      	cmp	r3, #0
 8008204:	d059      	beq.n	80082ba <cppLoop+0x712>
			led.LR(-1, 1);
 8008206:	2201      	movs	r2, #1
 8008208:	f04f 31ff 	mov.w	r1, #4294967295
 800820c:	4889      	ldr	r0, [pc, #548]	; (8008434 <cppLoop+0x88c>)
 800820e:	f7fa f85d 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008212:	2064      	movs	r0, #100	; 0x64
 8008214:	f001 fe7c 	bl	8009f10 <HAL_Delay>
			if(selector_gain == 0){
 8008218:	4b87      	ldr	r3, [pc, #540]	; (8008438 <cppLoop+0x890>)
 800821a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d113      	bne.n	800824a <cppLoop+0x6a2>
				adj_kp_slow = adj_kp_slow + 0.000001;
 8008222:	4b86      	ldr	r3, [pc, #536]	; (800843c <cppLoop+0x894>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	4618      	mov	r0, r3
 8008228:	f7f8 f9a6 	bl	8000578 <__aeabi_f2d>
 800822c:	a37a      	add	r3, pc, #488	; (adr r3, 8008418 <cppLoop+0x870>)
 800822e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008232:	f7f8 f843 	bl	80002bc <__adddf3>
 8008236:	4603      	mov	r3, r0
 8008238:	460c      	mov	r4, r1
 800823a:	4618      	mov	r0, r3
 800823c:	4621      	mov	r1, r4
 800823e:	f7f8 fceb 	bl	8000c18 <__aeabi_d2f>
 8008242:	4602      	mov	r2, r0
 8008244:	4b7d      	ldr	r3, [pc, #500]	; (800843c <cppLoop+0x894>)
 8008246:	601a      	str	r2, [r3, #0]
 8008248:	e02b      	b.n	80082a2 <cppLoop+0x6fa>
			else if(selector_gain == 1){
 800824a:	4b7b      	ldr	r3, [pc, #492]	; (8008438 <cppLoop+0x890>)
 800824c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008250:	2b01      	cmp	r3, #1
 8008252:	d113      	bne.n	800827c <cppLoop+0x6d4>
				adj_ki_slow = adj_ki_slow + 0.00001;
 8008254:	4b7a      	ldr	r3, [pc, #488]	; (8008440 <cppLoop+0x898>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	4618      	mov	r0, r3
 800825a:	f7f8 f98d 	bl	8000578 <__aeabi_f2d>
 800825e:	a370      	add	r3, pc, #448	; (adr r3, 8008420 <cppLoop+0x878>)
 8008260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008264:	f7f8 f82a 	bl	80002bc <__adddf3>
 8008268:	4603      	mov	r3, r0
 800826a:	460c      	mov	r4, r1
 800826c:	4618      	mov	r0, r3
 800826e:	4621      	mov	r1, r4
 8008270:	f7f8 fcd2 	bl	8000c18 <__aeabi_d2f>
 8008274:	4602      	mov	r2, r0
 8008276:	4b72      	ldr	r3, [pc, #456]	; (8008440 <cppLoop+0x898>)
 8008278:	601a      	str	r2, [r3, #0]
 800827a:	e012      	b.n	80082a2 <cppLoop+0x6fa>
				adj_kd_slow = adj_kd_slow + 0.0000001;
 800827c:	4b71      	ldr	r3, [pc, #452]	; (8008444 <cppLoop+0x89c>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	4618      	mov	r0, r3
 8008282:	f7f8 f979 	bl	8000578 <__aeabi_f2d>
 8008286:	a368      	add	r3, pc, #416	; (adr r3, 8008428 <cppLoop+0x880>)
 8008288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800828c:	f7f8 f816 	bl	80002bc <__adddf3>
 8008290:	4603      	mov	r3, r0
 8008292:	460c      	mov	r4, r1
 8008294:	4618      	mov	r0, r3
 8008296:	4621      	mov	r1, r4
 8008298:	f7f8 fcbe 	bl	8000c18 <__aeabi_d2f>
 800829c:	4602      	mov	r2, r0
 800829e:	4b69      	ldr	r3, [pc, #420]	; (8008444 <cppLoop+0x89c>)
 80082a0:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 80082a2:	2152      	movs	r1, #82	; 0x52
 80082a4:	4863      	ldr	r0, [pc, #396]	; (8008434 <cppLoop+0x88c>)
 80082a6:	f7f9 ff55 	bl	8002154 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 80082aa:	2200      	movs	r2, #0
 80082ac:	f04f 31ff 	mov.w	r1, #4294967295
 80082b0:	4860      	ldr	r0, [pc, #384]	; (8008434 <cppLoop+0x88c>)
 80082b2:	f7fa f80b 	bl	80022cc <_ZN3LED2LREaa>
		break;
 80082b6:	f001 bce0 	b.w	8009c7a <cppLoop+0x20d2>
		else if(joy_stick.getValue() == JOY_L){
 80082ba:	485d      	ldr	r0, [pc, #372]	; (8008430 <cppLoop+0x888>)
 80082bc:	f7f9 fee6 	bl	800208c <_ZN8JoyStick8getValueEv>
 80082c0:	4603      	mov	r3, r0
 80082c2:	2b01      	cmp	r3, #1
 80082c4:	bf0c      	ite	eq
 80082c6:	2301      	moveq	r3, #1
 80082c8:	2300      	movne	r3, #0
 80082ca:	b2db      	uxtb	r3, r3
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d059      	beq.n	8008384 <cppLoop+0x7dc>
			led.LR(-1, 1);
 80082d0:	2201      	movs	r2, #1
 80082d2:	f04f 31ff 	mov.w	r1, #4294967295
 80082d6:	4857      	ldr	r0, [pc, #348]	; (8008434 <cppLoop+0x88c>)
 80082d8:	f7f9 fff8 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 80082dc:	2064      	movs	r0, #100	; 0x64
 80082de:	f001 fe17 	bl	8009f10 <HAL_Delay>
			if(selector_gain == 0){
 80082e2:	4b55      	ldr	r3, [pc, #340]	; (8008438 <cppLoop+0x890>)
 80082e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d113      	bne.n	8008314 <cppLoop+0x76c>
				adj_kp_slow = adj_kp_slow - 0.000001;
 80082ec:	4b53      	ldr	r3, [pc, #332]	; (800843c <cppLoop+0x894>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4618      	mov	r0, r3
 80082f2:	f7f8 f941 	bl	8000578 <__aeabi_f2d>
 80082f6:	a348      	add	r3, pc, #288	; (adr r3, 8008418 <cppLoop+0x870>)
 80082f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082fc:	f7f7 ffdc 	bl	80002b8 <__aeabi_dsub>
 8008300:	4603      	mov	r3, r0
 8008302:	460c      	mov	r4, r1
 8008304:	4618      	mov	r0, r3
 8008306:	4621      	mov	r1, r4
 8008308:	f7f8 fc86 	bl	8000c18 <__aeabi_d2f>
 800830c:	4602      	mov	r2, r0
 800830e:	4b4b      	ldr	r3, [pc, #300]	; (800843c <cppLoop+0x894>)
 8008310:	601a      	str	r2, [r3, #0]
 8008312:	e02b      	b.n	800836c <cppLoop+0x7c4>
			else if(selector_gain == 1){
 8008314:	4b48      	ldr	r3, [pc, #288]	; (8008438 <cppLoop+0x890>)
 8008316:	f9b3 3000 	ldrsh.w	r3, [r3]
 800831a:	2b01      	cmp	r3, #1
 800831c:	d113      	bne.n	8008346 <cppLoop+0x79e>
				adj_ki_slow = adj_ki_slow - 0.00001;
 800831e:	4b48      	ldr	r3, [pc, #288]	; (8008440 <cppLoop+0x898>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4618      	mov	r0, r3
 8008324:	f7f8 f928 	bl	8000578 <__aeabi_f2d>
 8008328:	a33d      	add	r3, pc, #244	; (adr r3, 8008420 <cppLoop+0x878>)
 800832a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800832e:	f7f7 ffc3 	bl	80002b8 <__aeabi_dsub>
 8008332:	4603      	mov	r3, r0
 8008334:	460c      	mov	r4, r1
 8008336:	4618      	mov	r0, r3
 8008338:	4621      	mov	r1, r4
 800833a:	f7f8 fc6d 	bl	8000c18 <__aeabi_d2f>
 800833e:	4602      	mov	r2, r0
 8008340:	4b3f      	ldr	r3, [pc, #252]	; (8008440 <cppLoop+0x898>)
 8008342:	601a      	str	r2, [r3, #0]
 8008344:	e012      	b.n	800836c <cppLoop+0x7c4>
				adj_kd_slow = adj_kd_slow - 0.0000001;
 8008346:	4b3f      	ldr	r3, [pc, #252]	; (8008444 <cppLoop+0x89c>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4618      	mov	r0, r3
 800834c:	f7f8 f914 	bl	8000578 <__aeabi_f2d>
 8008350:	a335      	add	r3, pc, #212	; (adr r3, 8008428 <cppLoop+0x880>)
 8008352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008356:	f7f7 ffaf 	bl	80002b8 <__aeabi_dsub>
 800835a:	4603      	mov	r3, r0
 800835c:	460c      	mov	r4, r1
 800835e:	4618      	mov	r0, r3
 8008360:	4621      	mov	r1, r4
 8008362:	f7f8 fc59 	bl	8000c18 <__aeabi_d2f>
 8008366:	4602      	mov	r2, r0
 8008368:	4b36      	ldr	r3, [pc, #216]	; (8008444 <cppLoop+0x89c>)
 800836a:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 800836c:	2152      	movs	r1, #82	; 0x52
 800836e:	4831      	ldr	r0, [pc, #196]	; (8008434 <cppLoop+0x88c>)
 8008370:	f7f9 fef0 	bl	8002154 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8008374:	2200      	movs	r2, #0
 8008376:	f04f 31ff 	mov.w	r1, #4294967295
 800837a:	482e      	ldr	r0, [pc, #184]	; (8008434 <cppLoop+0x88c>)
 800837c:	f7f9 ffa6 	bl	80022cc <_ZN3LED2LREaa>
		break;
 8008380:	f001 bc7b 	b.w	8009c7a <cppLoop+0x20d2>
		else if(joy_stick.getValue() == JOY_C){
 8008384:	482a      	ldr	r0, [pc, #168]	; (8008430 <cppLoop+0x888>)
 8008386:	f7f9 fe81 	bl	800208c <_ZN8JoyStick8getValueEv>
 800838a:	4603      	mov	r3, r0
 800838c:	2b02      	cmp	r3, #2
 800838e:	bf0c      	ite	eq
 8008390:	2301      	moveq	r3, #1
 8008392:	2300      	movne	r3, #0
 8008394:	b2db      	uxtb	r3, r3
 8008396:	2b00      	cmp	r3, #0
 8008398:	f001 846f 	beq.w	8009c7a <cppLoop+0x20d2>
			led.LR(-1, 1);
 800839c:	2201      	movs	r2, #1
 800839e:	f04f 31ff 	mov.w	r1, #4294967295
 80083a2:	4824      	ldr	r0, [pc, #144]	; (8008434 <cppLoop+0x88c>)
 80083a4:	f7f9 ff92 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 80083a8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80083ac:	f001 fdb0 	bl	8009f10 <HAL_Delay>
			sd_write_array_float("PARAMS", "KP_SLOW.TXT", 1, &adj_kp_slow, OVER_WRITE);
 80083b0:	2300      	movs	r3, #0
 80083b2:	9300      	str	r3, [sp, #0]
 80083b4:	4b21      	ldr	r3, [pc, #132]	; (800843c <cppLoop+0x894>)
 80083b6:	2201      	movs	r2, #1
 80083b8:	4923      	ldr	r1, [pc, #140]	; (8008448 <cppLoop+0x8a0>)
 80083ba:	4824      	ldr	r0, [pc, #144]	; (800844c <cppLoop+0x8a4>)
 80083bc:	f7f9 fa4e 	bl	800185c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KI_SLOW.TXT", 1, &adj_ki_slow, OVER_WRITE);
 80083c0:	2300      	movs	r3, #0
 80083c2:	9300      	str	r3, [sp, #0]
 80083c4:	4b1e      	ldr	r3, [pc, #120]	; (8008440 <cppLoop+0x898>)
 80083c6:	2201      	movs	r2, #1
 80083c8:	4921      	ldr	r1, [pc, #132]	; (8008450 <cppLoop+0x8a8>)
 80083ca:	4820      	ldr	r0, [pc, #128]	; (800844c <cppLoop+0x8a4>)
 80083cc:	f7f9 fa46 	bl	800185c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KD_SLOW.TXT", 1, &adj_kd_slow, OVER_WRITE);
 80083d0:	2300      	movs	r3, #0
 80083d2:	9300      	str	r3, [sp, #0]
 80083d4:	4b1b      	ldr	r3, [pc, #108]	; (8008444 <cppLoop+0x89c>)
 80083d6:	2201      	movs	r2, #1
 80083d8:	491e      	ldr	r1, [pc, #120]	; (8008454 <cppLoop+0x8ac>)
 80083da:	481c      	ldr	r0, [pc, #112]	; (800844c <cppLoop+0x8a4>)
 80083dc:	f7f9 fa3e 	bl	800185c <sd_write_array_float>
			line_trace.setGainSlow(adj_kp_slow, adj_ki_slow, adj_kd_slow);
 80083e0:	4b16      	ldr	r3, [pc, #88]	; (800843c <cppLoop+0x894>)
 80083e2:	edd3 7a00 	vldr	s15, [r3]
 80083e6:	4b16      	ldr	r3, [pc, #88]	; (8008440 <cppLoop+0x898>)
 80083e8:	ed93 7a00 	vldr	s14, [r3]
 80083ec:	4b15      	ldr	r3, [pc, #84]	; (8008444 <cppLoop+0x89c>)
 80083ee:	edd3 6a00 	vldr	s13, [r3]
 80083f2:	eeb0 1a66 	vmov.f32	s2, s13
 80083f6:	eef0 0a47 	vmov.f32	s1, s14
 80083fa:	eeb0 0a67 	vmov.f32	s0, s15
 80083fe:	4816      	ldr	r0, [pc, #88]	; (8008458 <cppLoop+0x8b0>)
 8008400:	f7fb fc2c 	bl	8003c5c <_ZN9LineTrace11setGainSlowEfff>
			led.LR(-1, 0);
 8008404:	2200      	movs	r2, #0
 8008406:	f04f 31ff 	mov.w	r1, #4294967295
 800840a:	480a      	ldr	r0, [pc, #40]	; (8008434 <cppLoop+0x88c>)
 800840c:	f7f9 ff5e 	bl	80022cc <_ZN3LED2LREaa>
		break;
 8008410:	f001 bc33 	b.w	8009c7a <cppLoop+0x20d2>
 8008414:	f3af 8000 	nop.w
 8008418:	a0b5ed8d 	.word	0xa0b5ed8d
 800841c:	3eb0c6f7 	.word	0x3eb0c6f7
 8008420:	88e368f1 	.word	0x88e368f1
 8008424:	3ee4f8b5 	.word	0x3ee4f8b5
 8008428:	9abcaf48 	.word	0x9abcaf48
 800842c:	3e7ad7f2 	.word	0x3e7ad7f2
 8008430:	2000054c 	.word	0x2000054c
 8008434:	20000558 	.word	0x20000558
 8008438:	20045248 	.word	0x20045248
 800843c:	2004526c 	.word	0x2004526c
 8008440:	20045274 	.word	0x20045274
 8008444:	2004527c 	.word	0x2004527c
 8008448:	08018f9c 	.word	0x08018f9c
 800844c:	08018fa8 	.word	0x08018fa8
 8008450:	08018fb0 	.word	0x08018fb0
 8008454:	08018fbc 	.word	0x08018fbc
 8008458:	200209d4 	.word	0x200209d4
	/*-------------------------------------------------------------------------*/
	/*-----------------------------------Gain setting 2 -----------------------*/
	/*-------------------------------------------------------------------------*/

	case 1:
		led.fullColor('W');
 800845c:	2157      	movs	r1, #87	; 0x57
 800845e:	48ac      	ldr	r0, [pc, #688]	; (8008710 <cppLoop+0xb68>)
 8008460:	f7f9 fe78 	bl	8002154 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008464:	f7f8 fe1c 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008468:	2100      	movs	r1, #0
 800846a:	2000      	movs	r0, #0
 800846c:	f7f8 fe28 	bl	80010c0 <lcd_locate>
		lcd_printf("Fast:%4.2lf", abs(line_trace.getKp()*10000));
 8008470:	48a8      	ldr	r0, [pc, #672]	; (8008714 <cppLoop+0xb6c>)
 8008472:	f7fb fbc6 	bl	8003c02 <_ZN9LineTrace5getKpEv>
 8008476:	eeb0 7a40 	vmov.f32	s14, s0
 800847a:	eddf 7aa7 	vldr	s15, [pc, #668]	; 8008718 <cppLoop+0xb70>
 800847e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008482:	eeb0 0a67 	vmov.f32	s0, s15
 8008486:	f7fa fa27 	bl	80028d8 <_ZSt3absf>
 800848a:	ee10 3a10 	vmov	r3, s0
 800848e:	4618      	mov	r0, r3
 8008490:	f7f8 f872 	bl	8000578 <__aeabi_f2d>
 8008494:	4603      	mov	r3, r0
 8008496:	460c      	mov	r4, r1
 8008498:	461a      	mov	r2, r3
 800849a:	4623      	mov	r3, r4
 800849c:	489f      	ldr	r0, [pc, #636]	; (800871c <cppLoop+0xb74>)
 800849e:	f7f8 fe39 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80084a2:	2101      	movs	r1, #1
 80084a4:	2000      	movs	r0, #0
 80084a6:	f7f8 fe0b 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", abs(line_trace.getKi()*1000), abs(line_trace.getKd()*100000));
 80084aa:	489a      	ldr	r0, [pc, #616]	; (8008714 <cppLoop+0xb6c>)
 80084ac:	f7fb fbb8 	bl	8003c20 <_ZN9LineTrace5getKiEv>
 80084b0:	eeb0 7a40 	vmov.f32	s14, s0
 80084b4:	eddf 7a9a 	vldr	s15, [pc, #616]	; 8008720 <cppLoop+0xb78>
 80084b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084bc:	eeb0 0a67 	vmov.f32	s0, s15
 80084c0:	f7fa fa0a 	bl	80028d8 <_ZSt3absf>
 80084c4:	ee10 3a10 	vmov	r3, s0
 80084c8:	4618      	mov	r0, r3
 80084ca:	f7f8 f855 	bl	8000578 <__aeabi_f2d>
 80084ce:	4605      	mov	r5, r0
 80084d0:	460e      	mov	r6, r1
 80084d2:	4890      	ldr	r0, [pc, #576]	; (8008714 <cppLoop+0xb6c>)
 80084d4:	f7fb fbb3 	bl	8003c3e <_ZN9LineTrace5getKdEv>
 80084d8:	eeb0 7a40 	vmov.f32	s14, s0
 80084dc:	eddf 7a91 	vldr	s15, [pc, #580]	; 8008724 <cppLoop+0xb7c>
 80084e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084e4:	eeb0 0a67 	vmov.f32	s0, s15
 80084e8:	f7fa f9f6 	bl	80028d8 <_ZSt3absf>
 80084ec:	ee10 3a10 	vmov	r3, s0
 80084f0:	4618      	mov	r0, r3
 80084f2:	f7f8 f841 	bl	8000578 <__aeabi_f2d>
 80084f6:	4603      	mov	r3, r0
 80084f8:	460c      	mov	r4, r1
 80084fa:	e9cd 3400 	strd	r3, r4, [sp]
 80084fe:	462a      	mov	r2, r5
 8008500:	4633      	mov	r3, r6
 8008502:	4889      	ldr	r0, [pc, #548]	; (8008728 <cppLoop+0xb80>)
 8008504:	f7f8 fe06 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_D){
 8008508:	4888      	ldr	r0, [pc, #544]	; (800872c <cppLoop+0xb84>)
 800850a:	f7f9 fdbf 	bl	800208c <_ZN8JoyStick8getValueEv>
 800850e:	4603      	mov	r3, r0
 8008510:	2b04      	cmp	r3, #4
 8008512:	bf0c      	ite	eq
 8008514:	2301      	moveq	r3, #1
 8008516:	2300      	movne	r3, #0
 8008518:	b2db      	uxtb	r3, r3
 800851a:	2b00      	cmp	r3, #0
 800851c:	d022      	beq.n	8008564 <cppLoop+0x9bc>
			led.LR(-1, 1);
 800851e:	2201      	movs	r2, #1
 8008520:	f04f 31ff 	mov.w	r1, #4294967295
 8008524:	487a      	ldr	r0, [pc, #488]	; (8008710 <cppLoop+0xb68>)
 8008526:	f7f9 fed1 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 800852a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800852e:	f001 fcef 	bl	8009f10 <HAL_Delay>

			selector_gain++;
 8008532:	4b7f      	ldr	r3, [pc, #508]	; (8008730 <cppLoop+0xb88>)
 8008534:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008538:	b29b      	uxth	r3, r3
 800853a:	3301      	adds	r3, #1
 800853c:	b29b      	uxth	r3, r3
 800853e:	b21a      	sxth	r2, r3
 8008540:	4b7b      	ldr	r3, [pc, #492]	; (8008730 <cppLoop+0xb88>)
 8008542:	801a      	strh	r2, [r3, #0]
			if(selector_gain >= 3) selector_gain = 0;
 8008544:	4b7a      	ldr	r3, [pc, #488]	; (8008730 <cppLoop+0xb88>)
 8008546:	f9b3 3000 	ldrsh.w	r3, [r3]
 800854a:	2b02      	cmp	r3, #2
 800854c:	dd02      	ble.n	8008554 <cppLoop+0x9ac>
 800854e:	4b78      	ldr	r3, [pc, #480]	; (8008730 <cppLoop+0xb88>)
 8008550:	2200      	movs	r2, #0
 8008552:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008554:	2200      	movs	r2, #0
 8008556:	f04f 31ff 	mov.w	r1, #4294967295
 800855a:	486d      	ldr	r0, [pc, #436]	; (8008710 <cppLoop+0xb68>)
 800855c:	f7f9 feb6 	bl	80022cc <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
			line_trace.setGain(adj_kp, adj_ki, adj_kd);

			led.LR(-1, 0);
		}
		break;
 8008560:	f001 bb8d 	b.w	8009c7e <cppLoop+0x20d6>
		else if(joy_stick.getValue() == JOY_R){
 8008564:	4871      	ldr	r0, [pc, #452]	; (800872c <cppLoop+0xb84>)
 8008566:	f7f9 fd91 	bl	800208c <_ZN8JoyStick8getValueEv>
 800856a:	4603      	mov	r3, r0
 800856c:	2b10      	cmp	r3, #16
 800856e:	bf0c      	ite	eq
 8008570:	2301      	moveq	r3, #1
 8008572:	2300      	movne	r3, #0
 8008574:	b2db      	uxtb	r3, r3
 8008576:	2b00      	cmp	r3, #0
 8008578:	d059      	beq.n	800862e <cppLoop+0xa86>
			led.LR(-1, 1);
 800857a:	2201      	movs	r2, #1
 800857c:	f04f 31ff 	mov.w	r1, #4294967295
 8008580:	4863      	ldr	r0, [pc, #396]	; (8008710 <cppLoop+0xb68>)
 8008582:	f7f9 fea3 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008586:	2064      	movs	r0, #100	; 0x64
 8008588:	f001 fcc2 	bl	8009f10 <HAL_Delay>
			if(selector_gain == 0){
 800858c:	4b68      	ldr	r3, [pc, #416]	; (8008730 <cppLoop+0xb88>)
 800858e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d113      	bne.n	80085be <cppLoop+0xa16>
				adj_kp = adj_kp + 0.000001;
 8008596:	4b67      	ldr	r3, [pc, #412]	; (8008734 <cppLoop+0xb8c>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4618      	mov	r0, r3
 800859c:	f7f7 ffec 	bl	8000578 <__aeabi_f2d>
 80085a0:	a355      	add	r3, pc, #340	; (adr r3, 80086f8 <cppLoop+0xb50>)
 80085a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085a6:	f7f7 fe89 	bl	80002bc <__adddf3>
 80085aa:	4603      	mov	r3, r0
 80085ac:	460c      	mov	r4, r1
 80085ae:	4618      	mov	r0, r3
 80085b0:	4621      	mov	r1, r4
 80085b2:	f7f8 fb31 	bl	8000c18 <__aeabi_d2f>
 80085b6:	4602      	mov	r2, r0
 80085b8:	4b5e      	ldr	r3, [pc, #376]	; (8008734 <cppLoop+0xb8c>)
 80085ba:	601a      	str	r2, [r3, #0]
 80085bc:	e02b      	b.n	8008616 <cppLoop+0xa6e>
			else if(selector_gain == 1){
 80085be:	4b5c      	ldr	r3, [pc, #368]	; (8008730 <cppLoop+0xb88>)
 80085c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80085c4:	2b01      	cmp	r3, #1
 80085c6:	d113      	bne.n	80085f0 <cppLoop+0xa48>
				adj_ki = adj_ki + 0.00001;
 80085c8:	4b5b      	ldr	r3, [pc, #364]	; (8008738 <cppLoop+0xb90>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4618      	mov	r0, r3
 80085ce:	f7f7 ffd3 	bl	8000578 <__aeabi_f2d>
 80085d2:	a34b      	add	r3, pc, #300	; (adr r3, 8008700 <cppLoop+0xb58>)
 80085d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085d8:	f7f7 fe70 	bl	80002bc <__adddf3>
 80085dc:	4603      	mov	r3, r0
 80085de:	460c      	mov	r4, r1
 80085e0:	4618      	mov	r0, r3
 80085e2:	4621      	mov	r1, r4
 80085e4:	f7f8 fb18 	bl	8000c18 <__aeabi_d2f>
 80085e8:	4602      	mov	r2, r0
 80085ea:	4b53      	ldr	r3, [pc, #332]	; (8008738 <cppLoop+0xb90>)
 80085ec:	601a      	str	r2, [r3, #0]
 80085ee:	e012      	b.n	8008616 <cppLoop+0xa6e>
				adj_kd = adj_kd + 0.0000001;
 80085f0:	4b52      	ldr	r3, [pc, #328]	; (800873c <cppLoop+0xb94>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	4618      	mov	r0, r3
 80085f6:	f7f7 ffbf 	bl	8000578 <__aeabi_f2d>
 80085fa:	a343      	add	r3, pc, #268	; (adr r3, 8008708 <cppLoop+0xb60>)
 80085fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008600:	f7f7 fe5c 	bl	80002bc <__adddf3>
 8008604:	4603      	mov	r3, r0
 8008606:	460c      	mov	r4, r1
 8008608:	4618      	mov	r0, r3
 800860a:	4621      	mov	r1, r4
 800860c:	f7f8 fb04 	bl	8000c18 <__aeabi_d2f>
 8008610:	4602      	mov	r2, r0
 8008612:	4b4a      	ldr	r3, [pc, #296]	; (800873c <cppLoop+0xb94>)
 8008614:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8008616:	2152      	movs	r1, #82	; 0x52
 8008618:	483d      	ldr	r0, [pc, #244]	; (8008710 <cppLoop+0xb68>)
 800861a:	f7f9 fd9b 	bl	8002154 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 800861e:	2200      	movs	r2, #0
 8008620:	f04f 31ff 	mov.w	r1, #4294967295
 8008624:	483a      	ldr	r0, [pc, #232]	; (8008710 <cppLoop+0xb68>)
 8008626:	f7f9 fe51 	bl	80022cc <_ZN3LED2LREaa>
		break;
 800862a:	f001 bb28 	b.w	8009c7e <cppLoop+0x20d6>
		else if(joy_stick.getValue() == JOY_L){
 800862e:	483f      	ldr	r0, [pc, #252]	; (800872c <cppLoop+0xb84>)
 8008630:	f7f9 fd2c 	bl	800208c <_ZN8JoyStick8getValueEv>
 8008634:	4603      	mov	r3, r0
 8008636:	2b01      	cmp	r3, #1
 8008638:	bf0c      	ite	eq
 800863a:	2301      	moveq	r3, #1
 800863c:	2300      	movne	r3, #0
 800863e:	b2db      	uxtb	r3, r3
 8008640:	2b00      	cmp	r3, #0
 8008642:	d07d      	beq.n	8008740 <cppLoop+0xb98>
			led.LR(-1, 1);
 8008644:	2201      	movs	r2, #1
 8008646:	f04f 31ff 	mov.w	r1, #4294967295
 800864a:	4831      	ldr	r0, [pc, #196]	; (8008710 <cppLoop+0xb68>)
 800864c:	f7f9 fe3e 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008650:	2064      	movs	r0, #100	; 0x64
 8008652:	f001 fc5d 	bl	8009f10 <HAL_Delay>
			if(selector_gain == 0){
 8008656:	4b36      	ldr	r3, [pc, #216]	; (8008730 <cppLoop+0xb88>)
 8008658:	f9b3 3000 	ldrsh.w	r3, [r3]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d113      	bne.n	8008688 <cppLoop+0xae0>
				adj_kp = adj_kp - 0.000001;
 8008660:	4b34      	ldr	r3, [pc, #208]	; (8008734 <cppLoop+0xb8c>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4618      	mov	r0, r3
 8008666:	f7f7 ff87 	bl	8000578 <__aeabi_f2d>
 800866a:	a323      	add	r3, pc, #140	; (adr r3, 80086f8 <cppLoop+0xb50>)
 800866c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008670:	f7f7 fe22 	bl	80002b8 <__aeabi_dsub>
 8008674:	4603      	mov	r3, r0
 8008676:	460c      	mov	r4, r1
 8008678:	4618      	mov	r0, r3
 800867a:	4621      	mov	r1, r4
 800867c:	f7f8 facc 	bl	8000c18 <__aeabi_d2f>
 8008680:	4602      	mov	r2, r0
 8008682:	4b2c      	ldr	r3, [pc, #176]	; (8008734 <cppLoop+0xb8c>)
 8008684:	601a      	str	r2, [r3, #0]
 8008686:	e02b      	b.n	80086e0 <cppLoop+0xb38>
			else if(selector_gain == 1){
 8008688:	4b29      	ldr	r3, [pc, #164]	; (8008730 <cppLoop+0xb88>)
 800868a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800868e:	2b01      	cmp	r3, #1
 8008690:	d113      	bne.n	80086ba <cppLoop+0xb12>
				adj_ki = adj_ki - 0.00001;
 8008692:	4b29      	ldr	r3, [pc, #164]	; (8008738 <cppLoop+0xb90>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4618      	mov	r0, r3
 8008698:	f7f7 ff6e 	bl	8000578 <__aeabi_f2d>
 800869c:	a318      	add	r3, pc, #96	; (adr r3, 8008700 <cppLoop+0xb58>)
 800869e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086a2:	f7f7 fe09 	bl	80002b8 <__aeabi_dsub>
 80086a6:	4603      	mov	r3, r0
 80086a8:	460c      	mov	r4, r1
 80086aa:	4618      	mov	r0, r3
 80086ac:	4621      	mov	r1, r4
 80086ae:	f7f8 fab3 	bl	8000c18 <__aeabi_d2f>
 80086b2:	4602      	mov	r2, r0
 80086b4:	4b20      	ldr	r3, [pc, #128]	; (8008738 <cppLoop+0xb90>)
 80086b6:	601a      	str	r2, [r3, #0]
 80086b8:	e012      	b.n	80086e0 <cppLoop+0xb38>
				adj_kd = adj_kd - 0.0000001;
 80086ba:	4b20      	ldr	r3, [pc, #128]	; (800873c <cppLoop+0xb94>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	4618      	mov	r0, r3
 80086c0:	f7f7 ff5a 	bl	8000578 <__aeabi_f2d>
 80086c4:	a310      	add	r3, pc, #64	; (adr r3, 8008708 <cppLoop+0xb60>)
 80086c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ca:	f7f7 fdf5 	bl	80002b8 <__aeabi_dsub>
 80086ce:	4603      	mov	r3, r0
 80086d0:	460c      	mov	r4, r1
 80086d2:	4618      	mov	r0, r3
 80086d4:	4621      	mov	r1, r4
 80086d6:	f7f8 fa9f 	bl	8000c18 <__aeabi_d2f>
 80086da:	4602      	mov	r2, r0
 80086dc:	4b17      	ldr	r3, [pc, #92]	; (800873c <cppLoop+0xb94>)
 80086de:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 80086e0:	2152      	movs	r1, #82	; 0x52
 80086e2:	480b      	ldr	r0, [pc, #44]	; (8008710 <cppLoop+0xb68>)
 80086e4:	f7f9 fd36 	bl	8002154 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 80086e8:	2200      	movs	r2, #0
 80086ea:	f04f 31ff 	mov.w	r1, #4294967295
 80086ee:	4808      	ldr	r0, [pc, #32]	; (8008710 <cppLoop+0xb68>)
 80086f0:	f7f9 fdec 	bl	80022cc <_ZN3LED2LREaa>
		break;
 80086f4:	f001 bac3 	b.w	8009c7e <cppLoop+0x20d6>
 80086f8:	a0b5ed8d 	.word	0xa0b5ed8d
 80086fc:	3eb0c6f7 	.word	0x3eb0c6f7
 8008700:	88e368f1 	.word	0x88e368f1
 8008704:	3ee4f8b5 	.word	0x3ee4f8b5
 8008708:	9abcaf48 	.word	0x9abcaf48
 800870c:	3e7ad7f2 	.word	0x3e7ad7f2
 8008710:	20000558 	.word	0x20000558
 8008714:	200209d4 	.word	0x200209d4
 8008718:	461c4000 	.word	0x461c4000
 800871c:	08018fc8 	.word	0x08018fc8
 8008720:	447a0000 	.word	0x447a0000
 8008724:	47c35000 	.word	0x47c35000
 8008728:	08018f8c 	.word	0x08018f8c
 800872c:	2000054c 	.word	0x2000054c
 8008730:	20045248 	.word	0x20045248
 8008734:	20045254 	.word	0x20045254
 8008738:	2004525c 	.word	0x2004525c
 800873c:	20045264 	.word	0x20045264
		else if(joy_stick.getValue() == JOY_C){
 8008740:	48c1      	ldr	r0, [pc, #772]	; (8008a48 <cppLoop+0xea0>)
 8008742:	f7f9 fca3 	bl	800208c <_ZN8JoyStick8getValueEv>
 8008746:	4603      	mov	r3, r0
 8008748:	2b02      	cmp	r3, #2
 800874a:	bf0c      	ite	eq
 800874c:	2301      	moveq	r3, #1
 800874e:	2300      	movne	r3, #0
 8008750:	b2db      	uxtb	r3, r3
 8008752:	2b00      	cmp	r3, #0
 8008754:	f001 8293 	beq.w	8009c7e <cppLoop+0x20d6>
			led.LR(-1, 1);
 8008758:	2201      	movs	r2, #1
 800875a:	f04f 31ff 	mov.w	r1, #4294967295
 800875e:	48bb      	ldr	r0, [pc, #748]	; (8008a4c <cppLoop+0xea4>)
 8008760:	f7f9 fdb4 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008764:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008768:	f001 fbd2 	bl	8009f10 <HAL_Delay>
			sd_write_array_float("PARAMS", "KP.TXT", 1, &adj_kp, OVER_WRITE);
 800876c:	2300      	movs	r3, #0
 800876e:	9300      	str	r3, [sp, #0]
 8008770:	4bb7      	ldr	r3, [pc, #732]	; (8008a50 <cppLoop+0xea8>)
 8008772:	2201      	movs	r2, #1
 8008774:	49b7      	ldr	r1, [pc, #732]	; (8008a54 <cppLoop+0xeac>)
 8008776:	48b8      	ldr	r0, [pc, #736]	; (8008a58 <cppLoop+0xeb0>)
 8008778:	f7f9 f870 	bl	800185c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KI.TXT", 1, &adj_ki, OVER_WRITE);
 800877c:	2300      	movs	r3, #0
 800877e:	9300      	str	r3, [sp, #0]
 8008780:	4bb6      	ldr	r3, [pc, #728]	; (8008a5c <cppLoop+0xeb4>)
 8008782:	2201      	movs	r2, #1
 8008784:	49b6      	ldr	r1, [pc, #728]	; (8008a60 <cppLoop+0xeb8>)
 8008786:	48b4      	ldr	r0, [pc, #720]	; (8008a58 <cppLoop+0xeb0>)
 8008788:	f7f9 f868 	bl	800185c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
 800878c:	2300      	movs	r3, #0
 800878e:	9300      	str	r3, [sp, #0]
 8008790:	4bb4      	ldr	r3, [pc, #720]	; (8008a64 <cppLoop+0xebc>)
 8008792:	2201      	movs	r2, #1
 8008794:	49b4      	ldr	r1, [pc, #720]	; (8008a68 <cppLoop+0xec0>)
 8008796:	48b0      	ldr	r0, [pc, #704]	; (8008a58 <cppLoop+0xeb0>)
 8008798:	f7f9 f860 	bl	800185c <sd_write_array_float>
			line_trace.setGain(adj_kp, adj_ki, adj_kd);
 800879c:	4bac      	ldr	r3, [pc, #688]	; (8008a50 <cppLoop+0xea8>)
 800879e:	edd3 7a00 	vldr	s15, [r3]
 80087a2:	4bae      	ldr	r3, [pc, #696]	; (8008a5c <cppLoop+0xeb4>)
 80087a4:	ed93 7a00 	vldr	s14, [r3]
 80087a8:	4bae      	ldr	r3, [pc, #696]	; (8008a64 <cppLoop+0xebc>)
 80087aa:	edd3 6a00 	vldr	s13, [r3]
 80087ae:	eeb0 1a66 	vmov.f32	s2, s13
 80087b2:	eef0 0a47 	vmov.f32	s1, s14
 80087b6:	eeb0 0a67 	vmov.f32	s0, s15
 80087ba:	48ac      	ldr	r0, [pc, #688]	; (8008a6c <cppLoop+0xec4>)
 80087bc:	f7fb fa08 	bl	8003bd0 <_ZN9LineTrace7setGainEfff>
			led.LR(-1, 0);
 80087c0:	2200      	movs	r2, #0
 80087c2:	f04f 31ff 	mov.w	r1, #4294967295
 80087c6:	48a1      	ldr	r0, [pc, #644]	; (8008a4c <cppLoop+0xea4>)
 80087c8:	f7f9 fd80 	bl	80022cc <_ZN3LED2LREaa>
		break;
 80087cc:	f001 ba57 	b.w	8009c7e <cppLoop+0x20d6>

	/*-------------------------------------------------------------------------*/
	/*----------------------------------- First running -----------------------*/
	/*-------------------------------------------------------------------------*/
	case 2:
		led.fullColor('C');
 80087d0:	2143      	movs	r1, #67	; 0x43
 80087d2:	489e      	ldr	r0, [pc, #632]	; (8008a4c <cppLoop+0xea4>)
 80087d4:	f7f9 fcbe 	bl	8002154 <_ZN3LED9fullColorEc>

		if(joy_stick.getValue() == JOY_D){
 80087d8:	489b      	ldr	r0, [pc, #620]	; (8008a48 <cppLoop+0xea0>)
 80087da:	f7f9 fc57 	bl	800208c <_ZN8JoyStick8getValueEv>
 80087de:	4603      	mov	r3, r0
 80087e0:	2b04      	cmp	r3, #4
 80087e2:	bf0c      	ite	eq
 80087e4:	2301      	moveq	r3, #1
 80087e6:	2300      	movne	r3, #0
 80087e8:	b2db      	uxtb	r3, r3
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d020      	beq.n	8008830 <cppLoop+0xc88>
			led.LR(-1, 1);
 80087ee:	2201      	movs	r2, #1
 80087f0:	f04f 31ff 	mov.w	r1, #4294967295
 80087f4:	4895      	ldr	r0, [pc, #596]	; (8008a4c <cppLoop+0xea4>)
 80087f6:	f7f9 fd69 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 80087fa:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80087fe:	f001 fb87 	bl	8009f10 <HAL_Delay>

			selector_run++;
 8008802:	4b9b      	ldr	r3, [pc, #620]	; (8008a70 <cppLoop+0xec8>)
 8008804:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008808:	b29b      	uxth	r3, r3
 800880a:	3301      	adds	r3, #1
 800880c:	b29b      	uxth	r3, r3
 800880e:	b21a      	sxth	r2, r3
 8008810:	4b97      	ldr	r3, [pc, #604]	; (8008a70 <cppLoop+0xec8>)
 8008812:	801a      	strh	r2, [r3, #0]
			if(selector_run >= 2) selector_run = 0;
 8008814:	4b96      	ldr	r3, [pc, #600]	; (8008a70 <cppLoop+0xec8>)
 8008816:	f9b3 3000 	ldrsh.w	r3, [r3]
 800881a:	2b01      	cmp	r3, #1
 800881c:	dd02      	ble.n	8008824 <cppLoop+0xc7c>
 800881e:	4b94      	ldr	r3, [pc, #592]	; (8008a70 <cppLoop+0xec8>)
 8008820:	2200      	movs	r2, #0
 8008822:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008824:	2200      	movs	r2, #0
 8008826:	f04f 31ff 	mov.w	r1, #4294967295
 800882a:	4888      	ldr	r0, [pc, #544]	; (8008a4c <cppLoop+0xea4>)
 800882c:	f7f9 fd4e 	bl	80022cc <_ZN3LED2LREaa>
		}

		if(selector_run == 0){
 8008830:	4b8f      	ldr	r3, [pc, #572]	; (8008a70 <cppLoop+0xec8>)
 8008832:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d15c      	bne.n	80088f4 <cppLoop+0xd4c>
			lcd_clear();
 800883a:	f7f8 fc31 	bl	80010a0 <lcd_clear>
			lcd_locate(0,0);
 800883e:	2100      	movs	r1, #0
 8008840:	2000      	movs	r0, #0
 8008842:	f7f8 fc3d 	bl	80010c0 <lcd_locate>
			lcd_printf("1:   ");
 8008846:	488b      	ldr	r0, [pc, #556]	; (8008a74 <cppLoop+0xecc>)
 8008848:	f7f8 fc64 	bl	8001114 <lcd_printf>
			lcd_locate(0,1);
 800884c:	2101      	movs	r1, #1
 800884e:	2000      	movs	r0, #0
 8008850:	f7f8 fc36 	bl	80010c0 <lcd_locate>
			lcd_printf("Start%3.1f", adj_velocity);
 8008854:	4b88      	ldr	r3, [pc, #544]	; (8008a78 <cppLoop+0xed0>)
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4618      	mov	r0, r3
 800885a:	f7f7 fe8d 	bl	8000578 <__aeabi_f2d>
 800885e:	4603      	mov	r3, r0
 8008860:	460c      	mov	r4, r1
 8008862:	461a      	mov	r2, r3
 8008864:	4623      	mov	r3, r4
 8008866:	4885      	ldr	r0, [pc, #532]	; (8008a7c <cppLoop+0xed4>)
 8008868:	f7f8 fc54 	bl	8001114 <lcd_printf>

			if(joy_stick.getValue() == JOY_C){
 800886c:	4876      	ldr	r0, [pc, #472]	; (8008a48 <cppLoop+0xea0>)
 800886e:	f7f9 fc0d 	bl	800208c <_ZN8JoyStick8getValueEv>
 8008872:	4603      	mov	r3, r0
 8008874:	2b02      	cmp	r3, #2
 8008876:	bf0c      	ite	eq
 8008878:	2301      	moveq	r3, #1
 800887a:	2300      	movne	r3, #0
 800887c:	b2db      	uxtb	r3, r3
 800887e:	2b00      	cmp	r3, #0
 8008880:	f001 81ff 	beq.w	8009c82 <cppLoop+0x20da>
				HAL_Delay(500);
 8008884:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008888:	f001 fb42 	bl	8009f10 <HAL_Delay>

				line_trace.setTargetVelocity(adj_velocity);
 800888c:	4b7a      	ldr	r3, [pc, #488]	; (8008a78 <cppLoop+0xed0>)
 800888e:	edd3 7a00 	vldr	s15, [r3]
 8008892:	eeb0 0a67 	vmov.f32	s0, s15
 8008896:	4875      	ldr	r0, [pc, #468]	; (8008a6c <cppLoop+0xec4>)
 8008898:	f7fb fa35 	bl	8003d06 <_ZN9LineTrace17setTargetVelocityEf>
				led.LR(1, -1);
 800889c:	f04f 32ff 	mov.w	r2, #4294967295
 80088a0:	2101      	movs	r1, #1
 80088a2:	486a      	ldr	r0, [pc, #424]	; (8008a4c <cppLoop+0xea4>)
 80088a4:	f7f9 fd12 	bl	80022cc <_ZN3LED2LREaa>

				// Record start
				HAL_Delay(1000);
 80088a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80088ac:	f001 fb30 	bl	8009f10 <HAL_Delay>

				// Run
				line_trace.setMode(FIRST_RUNNING);
 80088b0:	2100      	movs	r1, #0
 80088b2:	486e      	ldr	r0, [pc, #440]	; (8008a6c <cppLoop+0xec4>)
 80088b4:	f7fb fc0a 	bl	80040cc <_ZN9LineTrace7setModeEs>

				logger.resetLogsTim1();
 80088b8:	4871      	ldr	r0, [pc, #452]	; (8008a80 <cppLoop+0xed8>)
 80088ba:	f7fc fa58 	bl	8004d6e <_ZN6Logger13resetLogsTim1Ev>
				logger.resetLogsTim2();
 80088be:	4870      	ldr	r0, [pc, #448]	; (8008a80 <cppLoop+0xed8>)
 80088c0:	f7fc fa7d 	bl	8004dbe <_ZN6Logger13resetLogsTim2Ev>

				line_trace.running();
 80088c4:	4869      	ldr	r0, [pc, #420]	; (8008a6c <cppLoop+0xec4>)
 80088c6:	f7fb fc45 	bl	8004154 <_ZN9LineTrace7runningEv>

				logger.stop();
 80088ca:	486d      	ldr	r0, [pc, #436]	; (8008a80 <cppLoop+0xed8>)
 80088cc:	f7fc fae0 	bl	8004e90 <_ZN6Logger4stopEv>
				logger.saveLogs("STATELOG", "TARVEL.txt");
 80088d0:	4a6c      	ldr	r2, [pc, #432]	; (8008a84 <cppLoop+0xedc>)
 80088d2:	496d      	ldr	r1, [pc, #436]	; (8008a88 <cppLoop+0xee0>)
 80088d4:	486a      	ldr	r0, [pc, #424]	; (8008a80 <cppLoop+0xed8>)
 80088d6:	f7fc f974 	bl	8004bc2 <_ZN6Logger8saveLogsEPKcS1_>
				logger.saveLogs2("STATELOG", "CURVEL.txt");
 80088da:	4a6c      	ldr	r2, [pc, #432]	; (8008a8c <cppLoop+0xee4>)
 80088dc:	496a      	ldr	r1, [pc, #424]	; (8008a88 <cppLoop+0xee0>)
 80088de:	4868      	ldr	r0, [pc, #416]	; (8008a80 <cppLoop+0xed8>)
 80088e0:	f7fc f983 	bl	8004bea <_ZN6Logger9saveLogs2EPKcS1_>


				led.LR(0, -1);
 80088e4:	f04f 32ff 	mov.w	r2, #4294967295
 80088e8:	2100      	movs	r1, #0
 80088ea:	4858      	ldr	r0, [pc, #352]	; (8008a4c <cppLoop+0xea4>)
 80088ec:	f7f9 fcee 	bl	80022cc <_ZN3LED2LREaa>

				led.LR(-1, 0);
			}
		}

		break;
 80088f0:	f001 b9c7 	b.w	8009c82 <cppLoop+0x20da>
			lcd_clear();
 80088f4:	f7f8 fbd4 	bl	80010a0 <lcd_clear>
			lcd_locate(0,0);
 80088f8:	2100      	movs	r1, #0
 80088fa:	2000      	movs	r0, #0
 80088fc:	f7f8 fbe0 	bl	80010c0 <lcd_locate>
			lcd_printf("1: ");
 8008900:	4863      	ldr	r0, [pc, #396]	; (8008a90 <cppLoop+0xee8>)
 8008902:	f7f8 fc07 	bl	8001114 <lcd_printf>
			lcd_locate(0,1);
 8008906:	2101      	movs	r1, #1
 8008908:	2000      	movs	r0, #0
 800890a:	f7f8 fbd9 	bl	80010c0 <lcd_locate>
			lcd_printf("%Vel: %3.1f", adj_velocity);
 800890e:	4b5a      	ldr	r3, [pc, #360]	; (8008a78 <cppLoop+0xed0>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	4618      	mov	r0, r3
 8008914:	f7f7 fe30 	bl	8000578 <__aeabi_f2d>
 8008918:	4603      	mov	r3, r0
 800891a:	460c      	mov	r4, r1
 800891c:	461a      	mov	r2, r3
 800891e:	4623      	mov	r3, r4
 8008920:	485c      	ldr	r0, [pc, #368]	; (8008a94 <cppLoop+0xeec>)
 8008922:	f7f8 fbf7 	bl	8001114 <lcd_printf>
			if(joy_stick.getValue() == JOY_R){
 8008926:	4848      	ldr	r0, [pc, #288]	; (8008a48 <cppLoop+0xea0>)
 8008928:	f7f9 fbb0 	bl	800208c <_ZN8JoyStick8getValueEv>
 800892c:	4603      	mov	r3, r0
 800892e:	2b10      	cmp	r3, #16
 8008930:	bf0c      	ite	eq
 8008932:	2301      	moveq	r3, #1
 8008934:	2300      	movne	r3, #0
 8008936:	b2db      	uxtb	r3, r3
 8008938:	2b00      	cmp	r3, #0
 800893a:	d023      	beq.n	8008984 <cppLoop+0xddc>
				led.LR(-1, 1);
 800893c:	2201      	movs	r2, #1
 800893e:	f04f 31ff 	mov.w	r1, #4294967295
 8008942:	4842      	ldr	r0, [pc, #264]	; (8008a4c <cppLoop+0xea4>)
 8008944:	f7f9 fcc2 	bl	80022cc <_ZN3LED2LREaa>
				HAL_Delay(100);
 8008948:	2064      	movs	r0, #100	; 0x64
 800894a:	f001 fae1 	bl	8009f10 <HAL_Delay>
				adj_velocity = adj_velocity + 0.1;
 800894e:	4b4a      	ldr	r3, [pc, #296]	; (8008a78 <cppLoop+0xed0>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	4618      	mov	r0, r3
 8008954:	f7f7 fe10 	bl	8000578 <__aeabi_f2d>
 8008958:	a339      	add	r3, pc, #228	; (adr r3, 8008a40 <cppLoop+0xe98>)
 800895a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800895e:	f7f7 fcad 	bl	80002bc <__adddf3>
 8008962:	4603      	mov	r3, r0
 8008964:	460c      	mov	r4, r1
 8008966:	4618      	mov	r0, r3
 8008968:	4621      	mov	r1, r4
 800896a:	f7f8 f955 	bl	8000c18 <__aeabi_d2f>
 800896e:	4602      	mov	r2, r0
 8008970:	4b41      	ldr	r3, [pc, #260]	; (8008a78 <cppLoop+0xed0>)
 8008972:	601a      	str	r2, [r3, #0]
				led.LR(-1, 0);
 8008974:	2200      	movs	r2, #0
 8008976:	f04f 31ff 	mov.w	r1, #4294967295
 800897a:	4834      	ldr	r0, [pc, #208]	; (8008a4c <cppLoop+0xea4>)
 800897c:	f7f9 fca6 	bl	80022cc <_ZN3LED2LREaa>
		break;
 8008980:	f001 b97f 	b.w	8009c82 <cppLoop+0x20da>
			else if(joy_stick.getValue() == JOY_L){
 8008984:	4830      	ldr	r0, [pc, #192]	; (8008a48 <cppLoop+0xea0>)
 8008986:	f7f9 fb81 	bl	800208c <_ZN8JoyStick8getValueEv>
 800898a:	4603      	mov	r3, r0
 800898c:	2b01      	cmp	r3, #1
 800898e:	bf0c      	ite	eq
 8008990:	2301      	moveq	r3, #1
 8008992:	2300      	movne	r3, #0
 8008994:	b2db      	uxtb	r3, r3
 8008996:	2b00      	cmp	r3, #0
 8008998:	d023      	beq.n	80089e2 <cppLoop+0xe3a>
				led.LR(-1, 1);
 800899a:	2201      	movs	r2, #1
 800899c:	f04f 31ff 	mov.w	r1, #4294967295
 80089a0:	482a      	ldr	r0, [pc, #168]	; (8008a4c <cppLoop+0xea4>)
 80089a2:	f7f9 fc93 	bl	80022cc <_ZN3LED2LREaa>
				HAL_Delay(100);
 80089a6:	2064      	movs	r0, #100	; 0x64
 80089a8:	f001 fab2 	bl	8009f10 <HAL_Delay>
				adj_velocity = adj_velocity - 0.1;
 80089ac:	4b32      	ldr	r3, [pc, #200]	; (8008a78 <cppLoop+0xed0>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	4618      	mov	r0, r3
 80089b2:	f7f7 fde1 	bl	8000578 <__aeabi_f2d>
 80089b6:	a322      	add	r3, pc, #136	; (adr r3, 8008a40 <cppLoop+0xe98>)
 80089b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089bc:	f7f7 fc7c 	bl	80002b8 <__aeabi_dsub>
 80089c0:	4603      	mov	r3, r0
 80089c2:	460c      	mov	r4, r1
 80089c4:	4618      	mov	r0, r3
 80089c6:	4621      	mov	r1, r4
 80089c8:	f7f8 f926 	bl	8000c18 <__aeabi_d2f>
 80089cc:	4602      	mov	r2, r0
 80089ce:	4b2a      	ldr	r3, [pc, #168]	; (8008a78 <cppLoop+0xed0>)
 80089d0:	601a      	str	r2, [r3, #0]
				led.LR(-1, 0);
 80089d2:	2200      	movs	r2, #0
 80089d4:	f04f 31ff 	mov.w	r1, #4294967295
 80089d8:	481c      	ldr	r0, [pc, #112]	; (8008a4c <cppLoop+0xea4>)
 80089da:	f7f9 fc77 	bl	80022cc <_ZN3LED2LREaa>
		break;
 80089de:	f001 b950 	b.w	8009c82 <cppLoop+0x20da>
			else if(joy_stick.getValue() == JOY_C){
 80089e2:	4819      	ldr	r0, [pc, #100]	; (8008a48 <cppLoop+0xea0>)
 80089e4:	f7f9 fb52 	bl	800208c <_ZN8JoyStick8getValueEv>
 80089e8:	4603      	mov	r3, r0
 80089ea:	2b02      	cmp	r3, #2
 80089ec:	bf0c      	ite	eq
 80089ee:	2301      	moveq	r3, #1
 80089f0:	2300      	movne	r3, #0
 80089f2:	b2db      	uxtb	r3, r3
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	f001 8144 	beq.w	8009c82 <cppLoop+0x20da>
				led.LR(-1, 1);
 80089fa:	2201      	movs	r2, #1
 80089fc:	f04f 31ff 	mov.w	r1, #4294967295
 8008a00:	4812      	ldr	r0, [pc, #72]	; (8008a4c <cppLoop+0xea4>)
 8008a02:	f7f9 fc63 	bl	80022cc <_ZN3LED2LREaa>
				HAL_Delay(300);
 8008a06:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008a0a:	f001 fa81 	bl	8009f10 <HAL_Delay>
				sd_write_array_float("PARAMS", "TARVEL1.TXT", 1, &adj_velocity, OVER_WRITE);
 8008a0e:	2300      	movs	r3, #0
 8008a10:	9300      	str	r3, [sp, #0]
 8008a12:	4b19      	ldr	r3, [pc, #100]	; (8008a78 <cppLoop+0xed0>)
 8008a14:	2201      	movs	r2, #1
 8008a16:	4920      	ldr	r1, [pc, #128]	; (8008a98 <cppLoop+0xef0>)
 8008a18:	480f      	ldr	r0, [pc, #60]	; (8008a58 <cppLoop+0xeb0>)
 8008a1a:	f7f8 ff1f 	bl	800185c <sd_write_array_float>
				line_trace.setTargetVelocity(adj_velocity);
 8008a1e:	4b16      	ldr	r3, [pc, #88]	; (8008a78 <cppLoop+0xed0>)
 8008a20:	edd3 7a00 	vldr	s15, [r3]
 8008a24:	eeb0 0a67 	vmov.f32	s0, s15
 8008a28:	4810      	ldr	r0, [pc, #64]	; (8008a6c <cppLoop+0xec4>)
 8008a2a:	f7fb f96c 	bl	8003d06 <_ZN9LineTrace17setTargetVelocityEf>
				led.LR(-1, 0);
 8008a2e:	2200      	movs	r2, #0
 8008a30:	f04f 31ff 	mov.w	r1, #4294967295
 8008a34:	4805      	ldr	r0, [pc, #20]	; (8008a4c <cppLoop+0xea4>)
 8008a36:	f7f9 fc49 	bl	80022cc <_ZN3LED2LREaa>
		break;
 8008a3a:	f001 b922 	b.w	8009c82 <cppLoop+0x20da>
 8008a3e:	bf00      	nop
 8008a40:	9999999a 	.word	0x9999999a
 8008a44:	3fb99999 	.word	0x3fb99999
 8008a48:	2000054c 	.word	0x2000054c
 8008a4c:	20000558 	.word	0x20000558
 8008a50:	20045254 	.word	0x20045254
 8008a54:	08018fd4 	.word	0x08018fd4
 8008a58:	08018fa8 	.word	0x08018fa8
 8008a5c:	2004525c 	.word	0x2004525c
 8008a60:	08018fdc 	.word	0x08018fdc
 8008a64:	20045264 	.word	0x20045264
 8008a68:	08018fe4 	.word	0x08018fe4
 8008a6c:	200209d4 	.word	0x200209d4
 8008a70:	2004524a 	.word	0x2004524a
 8008a74:	08018fec 	.word	0x08018fec
 8008a78:	20045284 	.word	0x20045284
 8008a7c:	08018ff4 	.word	0x08018ff4
 8008a80:	2000057c 	.word	0x2000057c
 8008a84:	08019000 	.word	0x08019000
 8008a88:	0801900c 	.word	0x0801900c
 8008a8c:	08019018 	.word	0x08019018
 8008a90:	08019024 	.word	0x08019024
 8008a94:	08019028 	.word	0x08019028
 8008a98:	08019034 	.word	0x08019034

	/*-------------------------------------------------------------------------*/
	/*-----------------------------------Second running -----------------------*/
	/*-------------------------------------------------------------------------*/
	case 3:
		led.fullColor('Y');
 8008a9c:	2159      	movs	r1, #89	; 0x59
 8008a9e:	48be      	ldr	r0, [pc, #760]	; (8008d98 <cppLoop+0x11f0>)
 8008aa0:	f7f9 fb58 	bl	8002154 <_ZN3LED9fullColorEc>

		if(joy_stick.getValue() == JOY_D){
 8008aa4:	48bd      	ldr	r0, [pc, #756]	; (8008d9c <cppLoop+0x11f4>)
 8008aa6:	f7f9 faf1 	bl	800208c <_ZN8JoyStick8getValueEv>
 8008aaa:	4603      	mov	r3, r0
 8008aac:	2b04      	cmp	r3, #4
 8008aae:	bf0c      	ite	eq
 8008ab0:	2301      	moveq	r3, #1
 8008ab2:	2300      	movne	r3, #0
 8008ab4:	b2db      	uxtb	r3, r3
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d020      	beq.n	8008afc <cppLoop+0xf54>
			led.LR(-1, 1);
 8008aba:	2201      	movs	r2, #1
 8008abc:	f04f 31ff 	mov.w	r1, #4294967295
 8008ac0:	48b5      	ldr	r0, [pc, #724]	; (8008d98 <cppLoop+0x11f0>)
 8008ac2:	f7f9 fc03 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008ac6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008aca:	f001 fa21 	bl	8009f10 <HAL_Delay>

			selector_run++;
 8008ace:	4bb4      	ldr	r3, [pc, #720]	; (8008da0 <cppLoop+0x11f8>)
 8008ad0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008ad4:	b29b      	uxth	r3, r3
 8008ad6:	3301      	adds	r3, #1
 8008ad8:	b29b      	uxth	r3, r3
 8008ada:	b21a      	sxth	r2, r3
 8008adc:	4bb0      	ldr	r3, [pc, #704]	; (8008da0 <cppLoop+0x11f8>)
 8008ade:	801a      	strh	r2, [r3, #0]
			if(selector_run >= 2) selector_run = 0;
 8008ae0:	4baf      	ldr	r3, [pc, #700]	; (8008da0 <cppLoop+0x11f8>)
 8008ae2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008ae6:	2b01      	cmp	r3, #1
 8008ae8:	dd02      	ble.n	8008af0 <cppLoop+0xf48>
 8008aea:	4bad      	ldr	r3, [pc, #692]	; (8008da0 <cppLoop+0x11f8>)
 8008aec:	2200      	movs	r2, #0
 8008aee:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008af0:	2200      	movs	r2, #0
 8008af2:	f04f 31ff 	mov.w	r1, #4294967295
 8008af6:	48a8      	ldr	r0, [pc, #672]	; (8008d98 <cppLoop+0x11f0>)
 8008af8:	f7f9 fbe8 	bl	80022cc <_ZN3LED2LREaa>
		}

		if(selector_run == 0){
 8008afc:	4ba8      	ldr	r3, [pc, #672]	; (8008da0 <cppLoop+0x11f8>)
 8008afe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d178      	bne.n	8008bf8 <cppLoop+0x1050>
			lcd_clear();
 8008b06:	f7f8 facb 	bl	80010a0 <lcd_clear>
			lcd_locate(0,0);
 8008b0a:	2100      	movs	r1, #0
 8008b0c:	2000      	movs	r0, #0
 8008b0e:	f7f8 fad7 	bl	80010c0 <lcd_locate>
			lcd_printf("2:   %3.1f", adj_max_velocity);
 8008b12:	4ba4      	ldr	r3, [pc, #656]	; (8008da4 <cppLoop+0x11fc>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	4618      	mov	r0, r3
 8008b18:	f7f7 fd2e 	bl	8000578 <__aeabi_f2d>
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	460c      	mov	r4, r1
 8008b20:	461a      	mov	r2, r3
 8008b22:	4623      	mov	r3, r4
 8008b24:	48a0      	ldr	r0, [pc, #640]	; (8008da8 <cppLoop+0x1200>)
 8008b26:	f7f8 faf5 	bl	8001114 <lcd_printf>
			lcd_locate(0,1);
 8008b2a:	2101      	movs	r1, #1
 8008b2c:	2000      	movs	r0, #0
 8008b2e:	f7f8 fac7 	bl	80010c0 <lcd_locate>
			lcd_printf("Start%3.1f", adj_min_velocity);
 8008b32:	4b9e      	ldr	r3, [pc, #632]	; (8008dac <cppLoop+0x1204>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	4618      	mov	r0, r3
 8008b38:	f7f7 fd1e 	bl	8000578 <__aeabi_f2d>
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	460c      	mov	r4, r1
 8008b40:	461a      	mov	r2, r3
 8008b42:	4623      	mov	r3, r4
 8008b44:	489a      	ldr	r0, [pc, #616]	; (8008db0 <cppLoop+0x1208>)
 8008b46:	f7f8 fae5 	bl	8001114 <lcd_printf>
			if(joy_stick.getValue() == JOY_C){
 8008b4a:	4894      	ldr	r0, [pc, #592]	; (8008d9c <cppLoop+0x11f4>)
 8008b4c:	f7f9 fa9e 	bl	800208c <_ZN8JoyStick8getValueEv>
 8008b50:	4603      	mov	r3, r0
 8008b52:	2b02      	cmp	r3, #2
 8008b54:	bf0c      	ite	eq
 8008b56:	2301      	moveq	r3, #1
 8008b58:	2300      	movne	r3, #0
 8008b5a:	b2db      	uxtb	r3, r3
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	f001 8092 	beq.w	8009c86 <cppLoop+0x20de>
				HAL_Delay(500);
 8008b62:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008b66:	f001 f9d3 	bl	8009f10 <HAL_Delay>

				led.LR(1, -1);
 8008b6a:	f04f 32ff 	mov.w	r2, #4294967295
 8008b6e:	2101      	movs	r1, #1
 8008b70:	4889      	ldr	r0, [pc, #548]	; (8008d98 <cppLoop+0x11f0>)
 8008b72:	f7f9 fbab 	bl	80022cc <_ZN3LED2LREaa>
				line_trace.setMode(SECOND_RUNNING);
 8008b76:	2101      	movs	r1, #1
 8008b78:	488e      	ldr	r0, [pc, #568]	; (8008db4 <cppLoop+0x120c>)
 8008b7a:	f7fb faa7 	bl	80040cc <_ZN9LineTrace7setModeEs>
				line_trace.setTargetVelocity(adj_min_velocity);
 8008b7e:	4b8b      	ldr	r3, [pc, #556]	; (8008dac <cppLoop+0x1204>)
 8008b80:	edd3 7a00 	vldr	s15, [r3]
 8008b84:	eeb0 0a67 	vmov.f32	s0, s15
 8008b88:	488a      	ldr	r0, [pc, #552]	; (8008db4 <cppLoop+0x120c>)
 8008b8a:	f7fb f8bc 	bl	8003d06 <_ZN9LineTrace17setTargetVelocityEf>
				line_trace.setMaxVelocity(adj_max_velocity);
 8008b8e:	4b85      	ldr	r3, [pc, #532]	; (8008da4 <cppLoop+0x11fc>)
 8008b90:	edd3 7a00 	vldr	s15, [r3]
 8008b94:	eeb0 0a67 	vmov.f32	s0, s15
 8008b98:	4886      	ldr	r0, [pc, #536]	; (8008db4 <cppLoop+0x120c>)
 8008b9a:	f7fb f8c4 	bl	8003d26 <_ZN9LineTrace14setMaxVelocityEf>
				line_trace.setMinVelocity(adj_min_velocity);
 8008b9e:	4b83      	ldr	r3, [pc, #524]	; (8008dac <cppLoop+0x1204>)
 8008ba0:	edd3 7a00 	vldr	s15, [r3]
 8008ba4:	eeb0 0a67 	vmov.f32	s0, s15
 8008ba8:	4882      	ldr	r0, [pc, #520]	; (8008db4 <cppLoop+0x120c>)
 8008baa:	f7fb f8dc 	bl	8003d66 <_ZN9LineTrace14setMinVelocityEf>
				line_trace.createVelocityTabele();
 8008bae:	4881      	ldr	r0, [pc, #516]	; (8008db4 <cppLoop+0x120c>)
 8008bb0:	f7fb fcc8 	bl	8004544 <_ZN9LineTrace20createVelocityTabeleEv>

				HAL_Delay(1000);
 8008bb4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008bb8:	f001 f9aa 	bl	8009f10 <HAL_Delay>

				logger.resetLogsTim1();
 8008bbc:	487e      	ldr	r0, [pc, #504]	; (8008db8 <cppLoop+0x1210>)
 8008bbe:	f7fc f8d6 	bl	8004d6e <_ZN6Logger13resetLogsTim1Ev>
				logger.resetLogsTim2();
 8008bc2:	487d      	ldr	r0, [pc, #500]	; (8008db8 <cppLoop+0x1210>)
 8008bc4:	f7fc f8fb 	bl	8004dbe <_ZN6Logger13resetLogsTim2Ev>
				//logger.start();

				line_trace.running();
 8008bc8:	487a      	ldr	r0, [pc, #488]	; (8008db4 <cppLoop+0x120c>)
 8008bca:	f7fb fac3 	bl	8004154 <_ZN9LineTrace7runningEv>

				logger.stop();
 8008bce:	487a      	ldr	r0, [pc, #488]	; (8008db8 <cppLoop+0x1210>)
 8008bd0:	f7fc f95e 	bl	8004e90 <_ZN6Logger4stopEv>
				logger.saveLogs("STATELOG", "TARVEL.txt");
 8008bd4:	4a79      	ldr	r2, [pc, #484]	; (8008dbc <cppLoop+0x1214>)
 8008bd6:	497a      	ldr	r1, [pc, #488]	; (8008dc0 <cppLoop+0x1218>)
 8008bd8:	4877      	ldr	r0, [pc, #476]	; (8008db8 <cppLoop+0x1210>)
 8008bda:	f7fb fff2 	bl	8004bc2 <_ZN6Logger8saveLogsEPKcS1_>
				logger.saveLogs2("STATELOG", "CURVEL.txt");
 8008bde:	4a79      	ldr	r2, [pc, #484]	; (8008dc4 <cppLoop+0x121c>)
 8008be0:	4977      	ldr	r1, [pc, #476]	; (8008dc0 <cppLoop+0x1218>)
 8008be2:	4875      	ldr	r0, [pc, #468]	; (8008db8 <cppLoop+0x1210>)
 8008be4:	f7fc f801 	bl	8004bea <_ZN6Logger9saveLogs2EPKcS1_>

				led.LR(0, -1);
 8008be8:	f04f 32ff 	mov.w	r2, #4294967295
 8008bec:	2100      	movs	r1, #0
 8008bee:	486a      	ldr	r0, [pc, #424]	; (8008d98 <cppLoop+0x11f0>)
 8008bf0:	f7f9 fb6c 	bl	80022cc <_ZN3LED2LREaa>
				line_trace.setMinVelocity(adj_min_velocity);

				led.LR(-1, 0);
			}
		}
		break;
 8008bf4:	f001 b847 	b.w	8009c86 <cppLoop+0x20de>
			lcd_clear();
 8008bf8:	f7f8 fa52 	bl	80010a0 <lcd_clear>
			lcd_locate(0,0);
 8008bfc:	2100      	movs	r1, #0
 8008bfe:	2000      	movs	r0, #0
 8008c00:	f7f8 fa5e 	bl	80010c0 <lcd_locate>
			lcd_printf("2:   %3.1f", line_trace.getMaxVelocity());
 8008c04:	486b      	ldr	r0, [pc, #428]	; (8008db4 <cppLoop+0x120c>)
 8008c06:	f7fb f8de 	bl	8003dc6 <_ZN9LineTrace14getMaxVelocityEv>
 8008c0a:	ee10 3a10 	vmov	r3, s0
 8008c0e:	4618      	mov	r0, r3
 8008c10:	f7f7 fcb2 	bl	8000578 <__aeabi_f2d>
 8008c14:	4603      	mov	r3, r0
 8008c16:	460c      	mov	r4, r1
 8008c18:	461a      	mov	r2, r3
 8008c1a:	4623      	mov	r3, r4
 8008c1c:	4862      	ldr	r0, [pc, #392]	; (8008da8 <cppLoop+0x1200>)
 8008c1e:	f7f8 fa79 	bl	8001114 <lcd_printf>
			lcd_locate(0,1);
 8008c22:	2101      	movs	r1, #1
 8008c24:	2000      	movs	r0, #0
 8008c26:	f7f8 fa4b 	bl	80010c0 <lcd_locate>
			lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity());
 8008c2a:	4862      	ldr	r0, [pc, #392]	; (8008db4 <cppLoop+0x120c>)
 8008c2c:	f7fb f8eb 	bl	8003e06 <_ZN9LineTrace14getMinVelocityEv>
 8008c30:	ee10 3a10 	vmov	r3, s0
 8008c34:	4618      	mov	r0, r3
 8008c36:	f7f7 fc9f 	bl	8000578 <__aeabi_f2d>
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	460c      	mov	r4, r1
 8008c3e:	461a      	mov	r2, r3
 8008c40:	4623      	mov	r3, r4
 8008c42:	4861      	ldr	r0, [pc, #388]	; (8008dc8 <cppLoop+0x1220>)
 8008c44:	f7f8 fa66 	bl	8001114 <lcd_printf>
			if(joy_stick.getValue() == JOY_U){
 8008c48:	4854      	ldr	r0, [pc, #336]	; (8008d9c <cppLoop+0x11f4>)
 8008c4a:	f7f9 fa1f 	bl	800208c <_ZN8JoyStick8getValueEv>
 8008c4e:	4603      	mov	r3, r0
 8008c50:	2b08      	cmp	r3, #8
 8008c52:	bf0c      	ite	eq
 8008c54:	2301      	moveq	r3, #1
 8008c56:	2300      	movne	r3, #0
 8008c58:	b2db      	uxtb	r3, r3
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d022      	beq.n	8008ca4 <cppLoop+0x10fc>
				led.LR(-1, 1);
 8008c5e:	2201      	movs	r2, #1
 8008c60:	f04f 31ff 	mov.w	r1, #4294967295
 8008c64:	484c      	ldr	r0, [pc, #304]	; (8008d98 <cppLoop+0x11f0>)
 8008c66:	f7f9 fb31 	bl	80022cc <_ZN3LED2LREaa>
				HAL_Delay(300);
 8008c6a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008c6e:	f001 f94f 	bl	8009f10 <HAL_Delay>
				selector_vel++;
 8008c72:	4b56      	ldr	r3, [pc, #344]	; (8008dcc <cppLoop+0x1224>)
 8008c74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008c78:	b29b      	uxth	r3, r3
 8008c7a:	3301      	adds	r3, #1
 8008c7c:	b29b      	uxth	r3, r3
 8008c7e:	b21a      	sxth	r2, r3
 8008c80:	4b52      	ldr	r3, [pc, #328]	; (8008dcc <cppLoop+0x1224>)
 8008c82:	801a      	strh	r2, [r3, #0]
				if(selector_vel >= 2) selector_vel = 0;
 8008c84:	4b51      	ldr	r3, [pc, #324]	; (8008dcc <cppLoop+0x1224>)
 8008c86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008c8a:	2b01      	cmp	r3, #1
 8008c8c:	dd02      	ble.n	8008c94 <cppLoop+0x10ec>
 8008c8e:	4b4f      	ldr	r3, [pc, #316]	; (8008dcc <cppLoop+0x1224>)
 8008c90:	2200      	movs	r2, #0
 8008c92:	801a      	strh	r2, [r3, #0]
				led.LR(-1, 0);
 8008c94:	2200      	movs	r2, #0
 8008c96:	f04f 31ff 	mov.w	r1, #4294967295
 8008c9a:	483f      	ldr	r0, [pc, #252]	; (8008d98 <cppLoop+0x11f0>)
 8008c9c:	f7f9 fb16 	bl	80022cc <_ZN3LED2LREaa>
		break;
 8008ca0:	f000 bff1 	b.w	8009c86 <cppLoop+0x20de>
			else if(joy_stick.getValue() == JOY_R){
 8008ca4:	483d      	ldr	r0, [pc, #244]	; (8008d9c <cppLoop+0x11f4>)
 8008ca6:	f7f9 f9f1 	bl	800208c <_ZN8JoyStick8getValueEv>
 8008caa:	4603      	mov	r3, r0
 8008cac:	2b10      	cmp	r3, #16
 8008cae:	bf0c      	ite	eq
 8008cb0:	2301      	moveq	r3, #1
 8008cb2:	2300      	movne	r3, #0
 8008cb4:	b2db      	uxtb	r3, r3
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d03c      	beq.n	8008d34 <cppLoop+0x118c>
				led.LR(-1, 1);
 8008cba:	2201      	movs	r2, #1
 8008cbc:	f04f 31ff 	mov.w	r1, #4294967295
 8008cc0:	4835      	ldr	r0, [pc, #212]	; (8008d98 <cppLoop+0x11f0>)
 8008cc2:	f7f9 fb03 	bl	80022cc <_ZN3LED2LREaa>
				HAL_Delay(100);
 8008cc6:	2064      	movs	r0, #100	; 0x64
 8008cc8:	f001 f922 	bl	8009f10 <HAL_Delay>
				if(selector_vel == 0)
 8008ccc:	4b3f      	ldr	r3, [pc, #252]	; (8008dcc <cppLoop+0x1224>)
 8008cce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d113      	bne.n	8008cfe <cppLoop+0x1156>
					adj_max_velocity = adj_max_velocity + 0.1;
 8008cd6:	4b33      	ldr	r3, [pc, #204]	; (8008da4 <cppLoop+0x11fc>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	4618      	mov	r0, r3
 8008cdc:	f7f7 fc4c 	bl	8000578 <__aeabi_f2d>
 8008ce0:	a32b      	add	r3, pc, #172	; (adr r3, 8008d90 <cppLoop+0x11e8>)
 8008ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce6:	f7f7 fae9 	bl	80002bc <__adddf3>
 8008cea:	4603      	mov	r3, r0
 8008cec:	460c      	mov	r4, r1
 8008cee:	4618      	mov	r0, r3
 8008cf0:	4621      	mov	r1, r4
 8008cf2:	f7f7 ff91 	bl	8000c18 <__aeabi_d2f>
 8008cf6:	4602      	mov	r2, r0
 8008cf8:	4b2a      	ldr	r3, [pc, #168]	; (8008da4 <cppLoop+0x11fc>)
 8008cfa:	601a      	str	r2, [r3, #0]
 8008cfc:	e012      	b.n	8008d24 <cppLoop+0x117c>
					adj_min_velocity = adj_min_velocity + 0.1;
 8008cfe:	4b2b      	ldr	r3, [pc, #172]	; (8008dac <cppLoop+0x1204>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	4618      	mov	r0, r3
 8008d04:	f7f7 fc38 	bl	8000578 <__aeabi_f2d>
 8008d08:	a321      	add	r3, pc, #132	; (adr r3, 8008d90 <cppLoop+0x11e8>)
 8008d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d0e:	f7f7 fad5 	bl	80002bc <__adddf3>
 8008d12:	4603      	mov	r3, r0
 8008d14:	460c      	mov	r4, r1
 8008d16:	4618      	mov	r0, r3
 8008d18:	4621      	mov	r1, r4
 8008d1a:	f7f7 ff7d 	bl	8000c18 <__aeabi_d2f>
 8008d1e:	4602      	mov	r2, r0
 8008d20:	4b22      	ldr	r3, [pc, #136]	; (8008dac <cppLoop+0x1204>)
 8008d22:	601a      	str	r2, [r3, #0]
				led.LR(-1, 0);
 8008d24:	2200      	movs	r2, #0
 8008d26:	f04f 31ff 	mov.w	r1, #4294967295
 8008d2a:	481b      	ldr	r0, [pc, #108]	; (8008d98 <cppLoop+0x11f0>)
 8008d2c:	f7f9 face 	bl	80022cc <_ZN3LED2LREaa>
		break;
 8008d30:	f000 bfa9 	b.w	8009c86 <cppLoop+0x20de>
			else if(joy_stick.getValue() == JOY_L){
 8008d34:	4819      	ldr	r0, [pc, #100]	; (8008d9c <cppLoop+0x11f4>)
 8008d36:	f7f9 f9a9 	bl	800208c <_ZN8JoyStick8getValueEv>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	2b01      	cmp	r3, #1
 8008d3e:	bf0c      	ite	eq
 8008d40:	2301      	moveq	r3, #1
 8008d42:	2300      	movne	r3, #0
 8008d44:	b2db      	uxtb	r3, r3
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d05d      	beq.n	8008e06 <cppLoop+0x125e>
				led.LR(-1, 1);
 8008d4a:	2201      	movs	r2, #1
 8008d4c:	f04f 31ff 	mov.w	r1, #4294967295
 8008d50:	4811      	ldr	r0, [pc, #68]	; (8008d98 <cppLoop+0x11f0>)
 8008d52:	f7f9 fabb 	bl	80022cc <_ZN3LED2LREaa>
				HAL_Delay(100);
 8008d56:	2064      	movs	r0, #100	; 0x64
 8008d58:	f001 f8da 	bl	8009f10 <HAL_Delay>
				if(selector_vel == 0)
 8008d5c:	4b1b      	ldr	r3, [pc, #108]	; (8008dcc <cppLoop+0x1224>)
 8008d5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d134      	bne.n	8008dd0 <cppLoop+0x1228>
					adj_max_velocity = adj_max_velocity - 0.1;
 8008d66:	4b0f      	ldr	r3, [pc, #60]	; (8008da4 <cppLoop+0x11fc>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f7f7 fc04 	bl	8000578 <__aeabi_f2d>
 8008d70:	a307      	add	r3, pc, #28	; (adr r3, 8008d90 <cppLoop+0x11e8>)
 8008d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d76:	f7f7 fa9f 	bl	80002b8 <__aeabi_dsub>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	460c      	mov	r4, r1
 8008d7e:	4618      	mov	r0, r3
 8008d80:	4621      	mov	r1, r4
 8008d82:	f7f7 ff49 	bl	8000c18 <__aeabi_d2f>
 8008d86:	4602      	mov	r2, r0
 8008d88:	4b06      	ldr	r3, [pc, #24]	; (8008da4 <cppLoop+0x11fc>)
 8008d8a:	601a      	str	r2, [r3, #0]
 8008d8c:	e033      	b.n	8008df6 <cppLoop+0x124e>
 8008d8e:	bf00      	nop
 8008d90:	9999999a 	.word	0x9999999a
 8008d94:	3fb99999 	.word	0x3fb99999
 8008d98:	20000558 	.word	0x20000558
 8008d9c:	2000054c 	.word	0x2000054c
 8008da0:	2004524a 	.word	0x2004524a
 8008da4:	2004528c 	.word	0x2004528c
 8008da8:	08019040 	.word	0x08019040
 8008dac:	2004529c 	.word	0x2004529c
 8008db0:	08018ff4 	.word	0x08018ff4
 8008db4:	200209d4 	.word	0x200209d4
 8008db8:	2000057c 	.word	0x2000057c
 8008dbc:	08019000 	.word	0x08019000
 8008dc0:	0801900c 	.word	0x0801900c
 8008dc4:	08019018 	.word	0x08019018
 8008dc8:	08019028 	.word	0x08019028
 8008dcc:	20045250 	.word	0x20045250
					adj_min_velocity = adj_min_velocity - 0.1;
 8008dd0:	4bb5      	ldr	r3, [pc, #724]	; (80090a8 <cppLoop+0x1500>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	f7f7 fbcf 	bl	8000578 <__aeabi_f2d>
 8008dda:	a3b1      	add	r3, pc, #708	; (adr r3, 80090a0 <cppLoop+0x14f8>)
 8008ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008de0:	f7f7 fa6a 	bl	80002b8 <__aeabi_dsub>
 8008de4:	4603      	mov	r3, r0
 8008de6:	460c      	mov	r4, r1
 8008de8:	4618      	mov	r0, r3
 8008dea:	4621      	mov	r1, r4
 8008dec:	f7f7 ff14 	bl	8000c18 <__aeabi_d2f>
 8008df0:	4602      	mov	r2, r0
 8008df2:	4bad      	ldr	r3, [pc, #692]	; (80090a8 <cppLoop+0x1500>)
 8008df4:	601a      	str	r2, [r3, #0]
				led.LR(-1, 0);
 8008df6:	2200      	movs	r2, #0
 8008df8:	f04f 31ff 	mov.w	r1, #4294967295
 8008dfc:	48ab      	ldr	r0, [pc, #684]	; (80090ac <cppLoop+0x1504>)
 8008dfe:	f7f9 fa65 	bl	80022cc <_ZN3LED2LREaa>
		break;
 8008e02:	f000 bf40 	b.w	8009c86 <cppLoop+0x20de>
			else if(joy_stick.getValue() == JOY_C){
 8008e06:	48aa      	ldr	r0, [pc, #680]	; (80090b0 <cppLoop+0x1508>)
 8008e08:	f7f9 f940 	bl	800208c <_ZN8JoyStick8getValueEv>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	2b02      	cmp	r3, #2
 8008e10:	bf0c      	ite	eq
 8008e12:	2301      	moveq	r3, #1
 8008e14:	2300      	movne	r3, #0
 8008e16:	b2db      	uxtb	r3, r3
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	f000 8734 	beq.w	8009c86 <cppLoop+0x20de>
				led.LR(-1, 1);
 8008e1e:	2201      	movs	r2, #1
 8008e20:	f04f 31ff 	mov.w	r1, #4294967295
 8008e24:	48a1      	ldr	r0, [pc, #644]	; (80090ac <cppLoop+0x1504>)
 8008e26:	f7f9 fa51 	bl	80022cc <_ZN3LED2LREaa>
				HAL_Delay(300);
 8008e2a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008e2e:	f001 f86f 	bl	8009f10 <HAL_Delay>
				sd_write_array_float("PARAMS", "TARVEL2.TXT", 1, &adj_max_velocity, OVER_WRITE);
 8008e32:	2300      	movs	r3, #0
 8008e34:	9300      	str	r3, [sp, #0]
 8008e36:	4b9f      	ldr	r3, [pc, #636]	; (80090b4 <cppLoop+0x150c>)
 8008e38:	2201      	movs	r2, #1
 8008e3a:	499f      	ldr	r1, [pc, #636]	; (80090b8 <cppLoop+0x1510>)
 8008e3c:	489f      	ldr	r0, [pc, #636]	; (80090bc <cppLoop+0x1514>)
 8008e3e:	f7f8 fd0d 	bl	800185c <sd_write_array_float>
				sd_write_array_float("PARAMS", "MINVEL.TXT", 1, &adj_min_velocity, OVER_WRITE);
 8008e42:	2300      	movs	r3, #0
 8008e44:	9300      	str	r3, [sp, #0]
 8008e46:	4b98      	ldr	r3, [pc, #608]	; (80090a8 <cppLoop+0x1500>)
 8008e48:	2201      	movs	r2, #1
 8008e4a:	499d      	ldr	r1, [pc, #628]	; (80090c0 <cppLoop+0x1518>)
 8008e4c:	489b      	ldr	r0, [pc, #620]	; (80090bc <cppLoop+0x1514>)
 8008e4e:	f7f8 fd05 	bl	800185c <sd_write_array_float>
				line_trace.setMaxVelocity(adj_max_velocity);
 8008e52:	4b98      	ldr	r3, [pc, #608]	; (80090b4 <cppLoop+0x150c>)
 8008e54:	edd3 7a00 	vldr	s15, [r3]
 8008e58:	eeb0 0a67 	vmov.f32	s0, s15
 8008e5c:	4899      	ldr	r0, [pc, #612]	; (80090c4 <cppLoop+0x151c>)
 8008e5e:	f7fa ff62 	bl	8003d26 <_ZN9LineTrace14setMaxVelocityEf>
				line_trace.setMinVelocity(adj_min_velocity);
 8008e62:	4b91      	ldr	r3, [pc, #580]	; (80090a8 <cppLoop+0x1500>)
 8008e64:	edd3 7a00 	vldr	s15, [r3]
 8008e68:	eeb0 0a67 	vmov.f32	s0, s15
 8008e6c:	4895      	ldr	r0, [pc, #596]	; (80090c4 <cppLoop+0x151c>)
 8008e6e:	f7fa ff7a 	bl	8003d66 <_ZN9LineTrace14setMinVelocityEf>
				led.LR(-1, 0);
 8008e72:	2200      	movs	r2, #0
 8008e74:	f04f 31ff 	mov.w	r1, #4294967295
 8008e78:	488c      	ldr	r0, [pc, #560]	; (80090ac <cppLoop+0x1504>)
 8008e7a:	f7f9 fa27 	bl	80022cc <_ZN3LED2LREaa>
		break;
 8008e7e:	f000 bf02 	b.w	8009c86 <cppLoop+0x20de>

	/*-------------------------------------------------------------------------*/
	/*-----------------------------------Third running-----------------------*/
	/*-------------------------------------------------------------------------*/
	case 4:
		led.fullColor('M');
 8008e82:	214d      	movs	r1, #77	; 0x4d
 8008e84:	4889      	ldr	r0, [pc, #548]	; (80090ac <cppLoop+0x1504>)
 8008e86:	f7f9 f965 	bl	8002154 <_ZN3LED9fullColorEc>

		if(joy_stick.getValue() == JOY_D){
 8008e8a:	4889      	ldr	r0, [pc, #548]	; (80090b0 <cppLoop+0x1508>)
 8008e8c:	f7f9 f8fe 	bl	800208c <_ZN8JoyStick8getValueEv>
 8008e90:	4603      	mov	r3, r0
 8008e92:	2b04      	cmp	r3, #4
 8008e94:	bf0c      	ite	eq
 8008e96:	2301      	moveq	r3, #1
 8008e98:	2300      	movne	r3, #0
 8008e9a:	b2db      	uxtb	r3, r3
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d020      	beq.n	8008ee2 <cppLoop+0x133a>
			led.LR(-1, 1);
 8008ea0:	2201      	movs	r2, #1
 8008ea2:	f04f 31ff 	mov.w	r1, #4294967295
 8008ea6:	4881      	ldr	r0, [pc, #516]	; (80090ac <cppLoop+0x1504>)
 8008ea8:	f7f9 fa10 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008eac:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008eb0:	f001 f82e 	bl	8009f10 <HAL_Delay>

			selector_run++;
 8008eb4:	4b84      	ldr	r3, [pc, #528]	; (80090c8 <cppLoop+0x1520>)
 8008eb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008eba:	b29b      	uxth	r3, r3
 8008ebc:	3301      	adds	r3, #1
 8008ebe:	b29b      	uxth	r3, r3
 8008ec0:	b21a      	sxth	r2, r3
 8008ec2:	4b81      	ldr	r3, [pc, #516]	; (80090c8 <cppLoop+0x1520>)
 8008ec4:	801a      	strh	r2, [r3, #0]
			if(selector_run >= 2) selector_run = 0;
 8008ec6:	4b80      	ldr	r3, [pc, #512]	; (80090c8 <cppLoop+0x1520>)
 8008ec8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008ecc:	2b01      	cmp	r3, #1
 8008ece:	dd02      	ble.n	8008ed6 <cppLoop+0x132e>
 8008ed0:	4b7d      	ldr	r3, [pc, #500]	; (80090c8 <cppLoop+0x1520>)
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	f04f 31ff 	mov.w	r1, #4294967295
 8008edc:	4873      	ldr	r0, [pc, #460]	; (80090ac <cppLoop+0x1504>)
 8008ede:	f7f9 f9f5 	bl	80022cc <_ZN3LED2LREaa>
		}

		if(selector_run == 0){
 8008ee2:	4b79      	ldr	r3, [pc, #484]	; (80090c8 <cppLoop+0x1520>)
 8008ee4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	f040 8081 	bne.w	8008ff0 <cppLoop+0x1448>
			lcd_clear();
 8008eee:	f7f8 f8d7 	bl	80010a0 <lcd_clear>
			lcd_locate(0,0);
 8008ef2:	2100      	movs	r1, #0
 8008ef4:	2000      	movs	r0, #0
 8008ef6:	f7f8 f8e3 	bl	80010c0 <lcd_locate>
			lcd_printf("3:   %3.1f", adj_max_velocity2);
 8008efa:	4b74      	ldr	r3, [pc, #464]	; (80090cc <cppLoop+0x1524>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	4618      	mov	r0, r3
 8008f00:	f7f7 fb3a 	bl	8000578 <__aeabi_f2d>
 8008f04:	4603      	mov	r3, r0
 8008f06:	460c      	mov	r4, r1
 8008f08:	461a      	mov	r2, r3
 8008f0a:	4623      	mov	r3, r4
 8008f0c:	4870      	ldr	r0, [pc, #448]	; (80090d0 <cppLoop+0x1528>)
 8008f0e:	f7f8 f901 	bl	8001114 <lcd_printf>
			lcd_locate(0,1);
 8008f12:	2101      	movs	r1, #1
 8008f14:	2000      	movs	r0, #0
 8008f16:	f7f8 f8d3 	bl	80010c0 <lcd_locate>
			lcd_printf("Start%3.1f", adj_min_velocity2);
 8008f1a:	4b6e      	ldr	r3, [pc, #440]	; (80090d4 <cppLoop+0x152c>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f7f7 fb2a 	bl	8000578 <__aeabi_f2d>
 8008f24:	4603      	mov	r3, r0
 8008f26:	460c      	mov	r4, r1
 8008f28:	461a      	mov	r2, r3
 8008f2a:	4623      	mov	r3, r4
 8008f2c:	486a      	ldr	r0, [pc, #424]	; (80090d8 <cppLoop+0x1530>)
 8008f2e:	f7f8 f8f1 	bl	8001114 <lcd_printf>

			if(joy_stick.getValue() == JOY_C){
 8008f32:	485f      	ldr	r0, [pc, #380]	; (80090b0 <cppLoop+0x1508>)
 8008f34:	f7f9 f8aa 	bl	800208c <_ZN8JoyStick8getValueEv>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	2b02      	cmp	r3, #2
 8008f3c:	bf0c      	ite	eq
 8008f3e:	2301      	moveq	r3, #1
 8008f40:	2300      	movne	r3, #0
 8008f42:	b2db      	uxtb	r3, r3
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	f000 86a0 	beq.w	8009c8a <cppLoop+0x20e2>
				HAL_Delay(500);
 8008f4a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008f4e:	f000 ffdf 	bl	8009f10 <HAL_Delay>

				led.LR(1, -1);
 8008f52:	f04f 32ff 	mov.w	r2, #4294967295
 8008f56:	2101      	movs	r1, #1
 8008f58:	4854      	ldr	r0, [pc, #336]	; (80090ac <cppLoop+0x1504>)
 8008f5a:	f7f9 f9b7 	bl	80022cc <_ZN3LED2LREaa>
				line_trace.setGain(adj_kp, adj_ki, adj_kd);
 8008f5e:	4b5f      	ldr	r3, [pc, #380]	; (80090dc <cppLoop+0x1534>)
 8008f60:	edd3 7a00 	vldr	s15, [r3]
 8008f64:	4b5e      	ldr	r3, [pc, #376]	; (80090e0 <cppLoop+0x1538>)
 8008f66:	ed93 7a00 	vldr	s14, [r3]
 8008f6a:	4b5e      	ldr	r3, [pc, #376]	; (80090e4 <cppLoop+0x153c>)
 8008f6c:	edd3 6a00 	vldr	s13, [r3]
 8008f70:	eeb0 1a66 	vmov.f32	s2, s13
 8008f74:	eef0 0a47 	vmov.f32	s1, s14
 8008f78:	eeb0 0a67 	vmov.f32	s0, s15
 8008f7c:	4851      	ldr	r0, [pc, #324]	; (80090c4 <cppLoop+0x151c>)
 8008f7e:	f7fa fe27 	bl	8003bd0 <_ZN9LineTrace7setGainEfff>
				line_trace.setMode(THIRD_RUNNING);
 8008f82:	2102      	movs	r1, #2
 8008f84:	484f      	ldr	r0, [pc, #316]	; (80090c4 <cppLoop+0x151c>)
 8008f86:	f7fb f8a1 	bl	80040cc <_ZN9LineTrace7setModeEs>
				line_trace.setTargetVelocity(adj_min_velocity2);
 8008f8a:	4b52      	ldr	r3, [pc, #328]	; (80090d4 <cppLoop+0x152c>)
 8008f8c:	edd3 7a00 	vldr	s15, [r3]
 8008f90:	eeb0 0a67 	vmov.f32	s0, s15
 8008f94:	484b      	ldr	r0, [pc, #300]	; (80090c4 <cppLoop+0x151c>)
 8008f96:	f7fa feb6 	bl	8003d06 <_ZN9LineTrace17setTargetVelocityEf>
				line_trace.setMaxVelocity2(adj_max_velocity2);
 8008f9a:	4b4c      	ldr	r3, [pc, #304]	; (80090cc <cppLoop+0x1524>)
 8008f9c:	edd3 7a00 	vldr	s15, [r3]
 8008fa0:	eeb0 0a67 	vmov.f32	s0, s15
 8008fa4:	4847      	ldr	r0, [pc, #284]	; (80090c4 <cppLoop+0x151c>)
 8008fa6:	f7fa fece 	bl	8003d46 <_ZN9LineTrace15setMaxVelocity2Ef>
				line_trace.setMinVelocity2(adj_min_velocity2);
 8008faa:	4b4a      	ldr	r3, [pc, #296]	; (80090d4 <cppLoop+0x152c>)
 8008fac:	edd3 7a00 	vldr	s15, [r3]
 8008fb0:	eeb0 0a67 	vmov.f32	s0, s15
 8008fb4:	4843      	ldr	r0, [pc, #268]	; (80090c4 <cppLoop+0x151c>)
 8008fb6:	f7fa fee6 	bl	8003d86 <_ZN9LineTrace15setMinVelocity2Ef>
				line_trace.createVelocityTabele();
 8008fba:	4842      	ldr	r0, [pc, #264]	; (80090c4 <cppLoop+0x151c>)
 8008fbc:	f7fb fac2 	bl	8004544 <_ZN9LineTrace20createVelocityTabeleEv>

				//logger.start();

				line_trace.running();
 8008fc0:	4840      	ldr	r0, [pc, #256]	; (80090c4 <cppLoop+0x151c>)
 8008fc2:	f7fb f8c7 	bl	8004154 <_ZN9LineTrace7runningEv>

				logger.stop();
 8008fc6:	4848      	ldr	r0, [pc, #288]	; (80090e8 <cppLoop+0x1540>)
 8008fc8:	f7fb ff62 	bl	8004e90 <_ZN6Logger4stopEv>
				logger.saveLogs("STATELOG", "TARVEL.txt");
 8008fcc:	4a47      	ldr	r2, [pc, #284]	; (80090ec <cppLoop+0x1544>)
 8008fce:	4948      	ldr	r1, [pc, #288]	; (80090f0 <cppLoop+0x1548>)
 8008fd0:	4845      	ldr	r0, [pc, #276]	; (80090e8 <cppLoop+0x1540>)
 8008fd2:	f7fb fdf6 	bl	8004bc2 <_ZN6Logger8saveLogsEPKcS1_>
				logger.saveLogs2("STATELOG", "CURVEL.txt");
 8008fd6:	4a47      	ldr	r2, [pc, #284]	; (80090f4 <cppLoop+0x154c>)
 8008fd8:	4945      	ldr	r1, [pc, #276]	; (80090f0 <cppLoop+0x1548>)
 8008fda:	4843      	ldr	r0, [pc, #268]	; (80090e8 <cppLoop+0x1540>)
 8008fdc:	f7fb fe05 	bl	8004bea <_ZN6Logger9saveLogs2EPKcS1_>

				led.LR(0, -1);
 8008fe0:	f04f 32ff 	mov.w	r2, #4294967295
 8008fe4:	2100      	movs	r1, #0
 8008fe6:	4831      	ldr	r0, [pc, #196]	; (80090ac <cppLoop+0x1504>)
 8008fe8:	f7f9 f970 	bl	80022cc <_ZN3LED2LREaa>

				led.LR(-1, 0);
			}

		}
		break;
 8008fec:	f000 be4d 	b.w	8009c8a <cppLoop+0x20e2>
			lcd_clear();
 8008ff0:	f7f8 f856 	bl	80010a0 <lcd_clear>
			lcd_locate(0,0);
 8008ff4:	2100      	movs	r1, #0
 8008ff6:	2000      	movs	r0, #0
 8008ff8:	f7f8 f862 	bl	80010c0 <lcd_locate>
			lcd_printf("3:   %3.1f", line_trace.getMaxVelocity2());
 8008ffc:	4831      	ldr	r0, [pc, #196]	; (80090c4 <cppLoop+0x151c>)
 8008ffe:	f7fa fef2 	bl	8003de6 <_ZN9LineTrace15getMaxVelocity2Ev>
 8009002:	ee10 3a10 	vmov	r3, s0
 8009006:	4618      	mov	r0, r3
 8009008:	f7f7 fab6 	bl	8000578 <__aeabi_f2d>
 800900c:	4603      	mov	r3, r0
 800900e:	460c      	mov	r4, r1
 8009010:	461a      	mov	r2, r3
 8009012:	4623      	mov	r3, r4
 8009014:	482e      	ldr	r0, [pc, #184]	; (80090d0 <cppLoop+0x1528>)
 8009016:	f7f8 f87d 	bl	8001114 <lcd_printf>
			lcd_locate(0,1);
 800901a:	2101      	movs	r1, #1
 800901c:	2000      	movs	r0, #0
 800901e:	f7f8 f84f 	bl	80010c0 <lcd_locate>
			lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity2());
 8009022:	4828      	ldr	r0, [pc, #160]	; (80090c4 <cppLoop+0x151c>)
 8009024:	f7fa feff 	bl	8003e26 <_ZN9LineTrace15getMinVelocity2Ev>
 8009028:	ee10 3a10 	vmov	r3, s0
 800902c:	4618      	mov	r0, r3
 800902e:	f7f7 faa3 	bl	8000578 <__aeabi_f2d>
 8009032:	4603      	mov	r3, r0
 8009034:	460c      	mov	r4, r1
 8009036:	461a      	mov	r2, r3
 8009038:	4623      	mov	r3, r4
 800903a:	482f      	ldr	r0, [pc, #188]	; (80090f8 <cppLoop+0x1550>)
 800903c:	f7f8 f86a 	bl	8001114 <lcd_printf>
			if(joy_stick.getValue() == JOY_U){
 8009040:	481b      	ldr	r0, [pc, #108]	; (80090b0 <cppLoop+0x1508>)
 8009042:	f7f9 f823 	bl	800208c <_ZN8JoyStick8getValueEv>
 8009046:	4603      	mov	r3, r0
 8009048:	2b08      	cmp	r3, #8
 800904a:	bf0c      	ite	eq
 800904c:	2301      	moveq	r3, #1
 800904e:	2300      	movne	r3, #0
 8009050:	b2db      	uxtb	r3, r3
 8009052:	2b00      	cmp	r3, #0
 8009054:	d054      	beq.n	8009100 <cppLoop+0x1558>
				led.LR(-1, 1);
 8009056:	2201      	movs	r2, #1
 8009058:	f04f 31ff 	mov.w	r1, #4294967295
 800905c:	4813      	ldr	r0, [pc, #76]	; (80090ac <cppLoop+0x1504>)
 800905e:	f7f9 f935 	bl	80022cc <_ZN3LED2LREaa>
				HAL_Delay(300);
 8009062:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009066:	f000 ff53 	bl	8009f10 <HAL_Delay>
				selector_vel2++;
 800906a:	4b24      	ldr	r3, [pc, #144]	; (80090fc <cppLoop+0x1554>)
 800906c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009070:	b29b      	uxth	r3, r3
 8009072:	3301      	adds	r3, #1
 8009074:	b29b      	uxth	r3, r3
 8009076:	b21a      	sxth	r2, r3
 8009078:	4b20      	ldr	r3, [pc, #128]	; (80090fc <cppLoop+0x1554>)
 800907a:	801a      	strh	r2, [r3, #0]
				if(selector_vel2 >= 2) selector_vel2 = 0;
 800907c:	4b1f      	ldr	r3, [pc, #124]	; (80090fc <cppLoop+0x1554>)
 800907e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009082:	2b01      	cmp	r3, #1
 8009084:	dd02      	ble.n	800908c <cppLoop+0x14e4>
 8009086:	4b1d      	ldr	r3, [pc, #116]	; (80090fc <cppLoop+0x1554>)
 8009088:	2200      	movs	r2, #0
 800908a:	801a      	strh	r2, [r3, #0]
				led.LR(-1, 0);
 800908c:	2200      	movs	r2, #0
 800908e:	f04f 31ff 	mov.w	r1, #4294967295
 8009092:	4806      	ldr	r0, [pc, #24]	; (80090ac <cppLoop+0x1504>)
 8009094:	f7f9 f91a 	bl	80022cc <_ZN3LED2LREaa>
		break;
 8009098:	f000 bdf7 	b.w	8009c8a <cppLoop+0x20e2>
 800909c:	f3af 8000 	nop.w
 80090a0:	9999999a 	.word	0x9999999a
 80090a4:	3fb99999 	.word	0x3fb99999
 80090a8:	2004529c 	.word	0x2004529c
 80090ac:	20000558 	.word	0x20000558
 80090b0:	2000054c 	.word	0x2000054c
 80090b4:	2004528c 	.word	0x2004528c
 80090b8:	0801904c 	.word	0x0801904c
 80090bc:	08018fa8 	.word	0x08018fa8
 80090c0:	08019058 	.word	0x08019058
 80090c4:	200209d4 	.word	0x200209d4
 80090c8:	2004524a 	.word	0x2004524a
 80090cc:	20045294 	.word	0x20045294
 80090d0:	08019064 	.word	0x08019064
 80090d4:	200452a4 	.word	0x200452a4
 80090d8:	08018ff4 	.word	0x08018ff4
 80090dc:	20045254 	.word	0x20045254
 80090e0:	2004525c 	.word	0x2004525c
 80090e4:	20045264 	.word	0x20045264
 80090e8:	2000057c 	.word	0x2000057c
 80090ec:	08019000 	.word	0x08019000
 80090f0:	0801900c 	.word	0x0801900c
 80090f4:	08019018 	.word	0x08019018
 80090f8:	08019028 	.word	0x08019028
 80090fc:	20045252 	.word	0x20045252
			else if(joy_stick.getValue() == JOY_R){
 8009100:	48b9      	ldr	r0, [pc, #740]	; (80093e8 <cppLoop+0x1840>)
 8009102:	f7f8 ffc3 	bl	800208c <_ZN8JoyStick8getValueEv>
 8009106:	4603      	mov	r3, r0
 8009108:	2b10      	cmp	r3, #16
 800910a:	bf0c      	ite	eq
 800910c:	2301      	moveq	r3, #1
 800910e:	2300      	movne	r3, #0
 8009110:	b2db      	uxtb	r3, r3
 8009112:	2b00      	cmp	r3, #0
 8009114:	d03c      	beq.n	8009190 <cppLoop+0x15e8>
				led.LR(-1, 1);
 8009116:	2201      	movs	r2, #1
 8009118:	f04f 31ff 	mov.w	r1, #4294967295
 800911c:	48b3      	ldr	r0, [pc, #716]	; (80093ec <cppLoop+0x1844>)
 800911e:	f7f9 f8d5 	bl	80022cc <_ZN3LED2LREaa>
				HAL_Delay(100);
 8009122:	2064      	movs	r0, #100	; 0x64
 8009124:	f000 fef4 	bl	8009f10 <HAL_Delay>
				if(selector_vel2 == 0)
 8009128:	4bb1      	ldr	r3, [pc, #708]	; (80093f0 <cppLoop+0x1848>)
 800912a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d113      	bne.n	800915a <cppLoop+0x15b2>
					adj_max_velocity2 = adj_max_velocity2 + 0.1;
 8009132:	4bb0      	ldr	r3, [pc, #704]	; (80093f4 <cppLoop+0x184c>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	4618      	mov	r0, r3
 8009138:	f7f7 fa1e 	bl	8000578 <__aeabi_f2d>
 800913c:	a3a8      	add	r3, pc, #672	; (adr r3, 80093e0 <cppLoop+0x1838>)
 800913e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009142:	f7f7 f8bb 	bl	80002bc <__adddf3>
 8009146:	4603      	mov	r3, r0
 8009148:	460c      	mov	r4, r1
 800914a:	4618      	mov	r0, r3
 800914c:	4621      	mov	r1, r4
 800914e:	f7f7 fd63 	bl	8000c18 <__aeabi_d2f>
 8009152:	4602      	mov	r2, r0
 8009154:	4ba7      	ldr	r3, [pc, #668]	; (80093f4 <cppLoop+0x184c>)
 8009156:	601a      	str	r2, [r3, #0]
 8009158:	e012      	b.n	8009180 <cppLoop+0x15d8>
					adj_min_velocity2 = adj_min_velocity2 + 0.1;
 800915a:	4ba7      	ldr	r3, [pc, #668]	; (80093f8 <cppLoop+0x1850>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	4618      	mov	r0, r3
 8009160:	f7f7 fa0a 	bl	8000578 <__aeabi_f2d>
 8009164:	a39e      	add	r3, pc, #632	; (adr r3, 80093e0 <cppLoop+0x1838>)
 8009166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800916a:	f7f7 f8a7 	bl	80002bc <__adddf3>
 800916e:	4603      	mov	r3, r0
 8009170:	460c      	mov	r4, r1
 8009172:	4618      	mov	r0, r3
 8009174:	4621      	mov	r1, r4
 8009176:	f7f7 fd4f 	bl	8000c18 <__aeabi_d2f>
 800917a:	4602      	mov	r2, r0
 800917c:	4b9e      	ldr	r3, [pc, #632]	; (80093f8 <cppLoop+0x1850>)
 800917e:	601a      	str	r2, [r3, #0]
				led.LR(-1, 0);
 8009180:	2200      	movs	r2, #0
 8009182:	f04f 31ff 	mov.w	r1, #4294967295
 8009186:	4899      	ldr	r0, [pc, #612]	; (80093ec <cppLoop+0x1844>)
 8009188:	f7f9 f8a0 	bl	80022cc <_ZN3LED2LREaa>
		break;
 800918c:	f000 bd7d 	b.w	8009c8a <cppLoop+0x20e2>
			else if(joy_stick.getValue() == JOY_L){
 8009190:	4895      	ldr	r0, [pc, #596]	; (80093e8 <cppLoop+0x1840>)
 8009192:	f7f8 ff7b 	bl	800208c <_ZN8JoyStick8getValueEv>
 8009196:	4603      	mov	r3, r0
 8009198:	2b01      	cmp	r3, #1
 800919a:	bf0c      	ite	eq
 800919c:	2301      	moveq	r3, #1
 800919e:	2300      	movne	r3, #0
 80091a0:	b2db      	uxtb	r3, r3
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d03c      	beq.n	8009220 <cppLoop+0x1678>
				led.LR(-1, 1);
 80091a6:	2201      	movs	r2, #1
 80091a8:	f04f 31ff 	mov.w	r1, #4294967295
 80091ac:	488f      	ldr	r0, [pc, #572]	; (80093ec <cppLoop+0x1844>)
 80091ae:	f7f9 f88d 	bl	80022cc <_ZN3LED2LREaa>
				HAL_Delay(100);
 80091b2:	2064      	movs	r0, #100	; 0x64
 80091b4:	f000 feac 	bl	8009f10 <HAL_Delay>
				if(selector_vel2 == 0)
 80091b8:	4b8d      	ldr	r3, [pc, #564]	; (80093f0 <cppLoop+0x1848>)
 80091ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d113      	bne.n	80091ea <cppLoop+0x1642>
					adj_max_velocity2 = adj_max_velocity2 - 0.1;
 80091c2:	4b8c      	ldr	r3, [pc, #560]	; (80093f4 <cppLoop+0x184c>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	4618      	mov	r0, r3
 80091c8:	f7f7 f9d6 	bl	8000578 <__aeabi_f2d>
 80091cc:	a384      	add	r3, pc, #528	; (adr r3, 80093e0 <cppLoop+0x1838>)
 80091ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091d2:	f7f7 f871 	bl	80002b8 <__aeabi_dsub>
 80091d6:	4603      	mov	r3, r0
 80091d8:	460c      	mov	r4, r1
 80091da:	4618      	mov	r0, r3
 80091dc:	4621      	mov	r1, r4
 80091de:	f7f7 fd1b 	bl	8000c18 <__aeabi_d2f>
 80091e2:	4602      	mov	r2, r0
 80091e4:	4b83      	ldr	r3, [pc, #524]	; (80093f4 <cppLoop+0x184c>)
 80091e6:	601a      	str	r2, [r3, #0]
 80091e8:	e012      	b.n	8009210 <cppLoop+0x1668>
					adj_min_velocity2 = adj_min_velocity2 - 0.1;
 80091ea:	4b83      	ldr	r3, [pc, #524]	; (80093f8 <cppLoop+0x1850>)
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	4618      	mov	r0, r3
 80091f0:	f7f7 f9c2 	bl	8000578 <__aeabi_f2d>
 80091f4:	a37a      	add	r3, pc, #488	; (adr r3, 80093e0 <cppLoop+0x1838>)
 80091f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091fa:	f7f7 f85d 	bl	80002b8 <__aeabi_dsub>
 80091fe:	4603      	mov	r3, r0
 8009200:	460c      	mov	r4, r1
 8009202:	4618      	mov	r0, r3
 8009204:	4621      	mov	r1, r4
 8009206:	f7f7 fd07 	bl	8000c18 <__aeabi_d2f>
 800920a:	4602      	mov	r2, r0
 800920c:	4b7a      	ldr	r3, [pc, #488]	; (80093f8 <cppLoop+0x1850>)
 800920e:	601a      	str	r2, [r3, #0]
				led.LR(-1, 0);
 8009210:	2200      	movs	r2, #0
 8009212:	f04f 31ff 	mov.w	r1, #4294967295
 8009216:	4875      	ldr	r0, [pc, #468]	; (80093ec <cppLoop+0x1844>)
 8009218:	f7f9 f858 	bl	80022cc <_ZN3LED2LREaa>
		break;
 800921c:	f000 bd35 	b.w	8009c8a <cppLoop+0x20e2>
			else if(joy_stick.getValue() == JOY_C){
 8009220:	4871      	ldr	r0, [pc, #452]	; (80093e8 <cppLoop+0x1840>)
 8009222:	f7f8 ff33 	bl	800208c <_ZN8JoyStick8getValueEv>
 8009226:	4603      	mov	r3, r0
 8009228:	2b02      	cmp	r3, #2
 800922a:	bf0c      	ite	eq
 800922c:	2301      	moveq	r3, #1
 800922e:	2300      	movne	r3, #0
 8009230:	b2db      	uxtb	r3, r3
 8009232:	2b00      	cmp	r3, #0
 8009234:	f000 8529 	beq.w	8009c8a <cppLoop+0x20e2>
				led.LR(-1, 1);
 8009238:	2201      	movs	r2, #1
 800923a:	f04f 31ff 	mov.w	r1, #4294967295
 800923e:	486b      	ldr	r0, [pc, #428]	; (80093ec <cppLoop+0x1844>)
 8009240:	f7f9 f844 	bl	80022cc <_ZN3LED2LREaa>
				HAL_Delay(300);
 8009244:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009248:	f000 fe62 	bl	8009f10 <HAL_Delay>
				sd_write_array_float("PARAMS", "TARVEL3.TXT", 1, &adj_max_velocity2, OVER_WRITE);
 800924c:	2300      	movs	r3, #0
 800924e:	9300      	str	r3, [sp, #0]
 8009250:	4b68      	ldr	r3, [pc, #416]	; (80093f4 <cppLoop+0x184c>)
 8009252:	2201      	movs	r2, #1
 8009254:	4969      	ldr	r1, [pc, #420]	; (80093fc <cppLoop+0x1854>)
 8009256:	486a      	ldr	r0, [pc, #424]	; (8009400 <cppLoop+0x1858>)
 8009258:	f7f8 fb00 	bl	800185c <sd_write_array_float>
				sd_write_array_float("PARAMS", "MINVEL2.TXT", 1, &adj_min_velocity2, OVER_WRITE);
 800925c:	2300      	movs	r3, #0
 800925e:	9300      	str	r3, [sp, #0]
 8009260:	4b65      	ldr	r3, [pc, #404]	; (80093f8 <cppLoop+0x1850>)
 8009262:	2201      	movs	r2, #1
 8009264:	4967      	ldr	r1, [pc, #412]	; (8009404 <cppLoop+0x185c>)
 8009266:	4866      	ldr	r0, [pc, #408]	; (8009400 <cppLoop+0x1858>)
 8009268:	f7f8 faf8 	bl	800185c <sd_write_array_float>
				line_trace.setMaxVelocity2(adj_max_velocity2);
 800926c:	4b61      	ldr	r3, [pc, #388]	; (80093f4 <cppLoop+0x184c>)
 800926e:	edd3 7a00 	vldr	s15, [r3]
 8009272:	eeb0 0a67 	vmov.f32	s0, s15
 8009276:	4864      	ldr	r0, [pc, #400]	; (8009408 <cppLoop+0x1860>)
 8009278:	f7fa fd65 	bl	8003d46 <_ZN9LineTrace15setMaxVelocity2Ef>
				line_trace.setMinVelocity2(adj_min_velocity2);
 800927c:	4b5e      	ldr	r3, [pc, #376]	; (80093f8 <cppLoop+0x1850>)
 800927e:	edd3 7a00 	vldr	s15, [r3]
 8009282:	eeb0 0a67 	vmov.f32	s0, s15
 8009286:	4860      	ldr	r0, [pc, #384]	; (8009408 <cppLoop+0x1860>)
 8009288:	f7fa fd7d 	bl	8003d86 <_ZN9LineTrace15setMinVelocity2Ef>
				led.LR(-1, 0);
 800928c:	2200      	movs	r2, #0
 800928e:	f04f 31ff 	mov.w	r1, #4294967295
 8009292:	4856      	ldr	r0, [pc, #344]	; (80093ec <cppLoop+0x1844>)
 8009294:	f7f9 f81a 	bl	80022cc <_ZN3LED2LREaa>
		break;
 8009298:	f000 bcf7 	b.w	8009c8a <cppLoop+0x20e2>

	case 5:
		led.fullColor('W');
 800929c:	2157      	movs	r1, #87	; 0x57
 800929e:	4853      	ldr	r0, [pc, #332]	; (80093ec <cppLoop+0x1844>)
 80092a0:	f7f8 ff58 	bl	8002154 <_ZN3LED9fullColorEc>

		lcd_clear();
 80092a4:	f7f7 fefc 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80092a8:	2100      	movs	r1, #0
 80092aa:	2000      	movs	r0, #0
 80092ac:	f7f7 ff08 	bl	80010c0 <lcd_locate>
		lcd_printf("ACC:%4.1f", line_trace.getMaxAcc());
 80092b0:	4855      	ldr	r0, [pc, #340]	; (8009408 <cppLoop+0x1860>)
 80092b2:	f7fa fdfc 	bl	8003eae <_ZN9LineTrace9getMaxAccEv>
 80092b6:	ee10 3a10 	vmov	r3, s0
 80092ba:	4618      	mov	r0, r3
 80092bc:	f7f7 f95c 	bl	8000578 <__aeabi_f2d>
 80092c0:	4603      	mov	r3, r0
 80092c2:	460c      	mov	r4, r1
 80092c4:	461a      	mov	r2, r3
 80092c6:	4623      	mov	r3, r4
 80092c8:	4850      	ldr	r0, [pc, #320]	; (800940c <cppLoop+0x1864>)
 80092ca:	f7f7 ff23 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80092ce:	2101      	movs	r1, #1
 80092d0:	2000      	movs	r0, #0
 80092d2:	f7f7 fef5 	bl	80010c0 <lcd_locate>
		lcd_printf("DEC:%4.1f", line_trace.getMaxDec());
 80092d6:	484c      	ldr	r0, [pc, #304]	; (8009408 <cppLoop+0x1860>)
 80092d8:	f7fa fe1f 	bl	8003f1a <_ZN9LineTrace9getMaxDecEv>
 80092dc:	ee10 3a10 	vmov	r3, s0
 80092e0:	4618      	mov	r0, r3
 80092e2:	f7f7 f949 	bl	8000578 <__aeabi_f2d>
 80092e6:	4603      	mov	r3, r0
 80092e8:	460c      	mov	r4, r1
 80092ea:	461a      	mov	r2, r3
 80092ec:	4623      	mov	r3, r4
 80092ee:	4848      	ldr	r0, [pc, #288]	; (8009410 <cppLoop+0x1868>)
 80092f0:	f7f7 ff10 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_D){
 80092f4:	483c      	ldr	r0, [pc, #240]	; (80093e8 <cppLoop+0x1840>)
 80092f6:	f7f8 fec9 	bl	800208c <_ZN8JoyStick8getValueEv>
 80092fa:	4603      	mov	r3, r0
 80092fc:	2b04      	cmp	r3, #4
 80092fe:	bf0c      	ite	eq
 8009300:	2301      	moveq	r3, #1
 8009302:	2300      	movne	r3, #0
 8009304:	b2db      	uxtb	r3, r3
 8009306:	2b00      	cmp	r3, #0
 8009308:	d022      	beq.n	8009350 <cppLoop+0x17a8>
			led.LR(-1, 1);
 800930a:	2201      	movs	r2, #1
 800930c:	f04f 31ff 	mov.w	r1, #4294967295
 8009310:	4836      	ldr	r0, [pc, #216]	; (80093ec <cppLoop+0x1844>)
 8009312:	f7f8 ffdb 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 8009316:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800931a:	f000 fdf9 	bl	8009f10 <HAL_Delay>

			selector_acc++;
 800931e:	4b3d      	ldr	r3, [pc, #244]	; (8009414 <cppLoop+0x186c>)
 8009320:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009324:	b29b      	uxth	r3, r3
 8009326:	3301      	adds	r3, #1
 8009328:	b29b      	uxth	r3, r3
 800932a:	b21a      	sxth	r2, r3
 800932c:	4b39      	ldr	r3, [pc, #228]	; (8009414 <cppLoop+0x186c>)
 800932e:	801a      	strh	r2, [r3, #0]
			if(selector_acc >= 2) selector_acc = 0;
 8009330:	4b38      	ldr	r3, [pc, #224]	; (8009414 <cppLoop+0x186c>)
 8009332:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009336:	2b01      	cmp	r3, #1
 8009338:	dd02      	ble.n	8009340 <cppLoop+0x1798>
 800933a:	4b36      	ldr	r3, [pc, #216]	; (8009414 <cppLoop+0x186c>)
 800933c:	2200      	movs	r2, #0
 800933e:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8009340:	2200      	movs	r2, #0
 8009342:	f04f 31ff 	mov.w	r1, #4294967295
 8009346:	4829      	ldr	r0, [pc, #164]	; (80093ec <cppLoop+0x1844>)
 8009348:	f7f8 ffc0 	bl	80022cc <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "DEC.TXT", 1, &adj_dec, OVER_WRITE);
			line_trace.setMaxAccDec(adj_acc, adj_dec);

			led.LR(-1, 0);
		}
		break;
 800934c:	f000 bc9f 	b.w	8009c8e <cppLoop+0x20e6>
		else if(joy_stick.getValue() == JOY_R){
 8009350:	4825      	ldr	r0, [pc, #148]	; (80093e8 <cppLoop+0x1840>)
 8009352:	f7f8 fe9b 	bl	800208c <_ZN8JoyStick8getValueEv>
 8009356:	4603      	mov	r3, r0
 8009358:	2b10      	cmp	r3, #16
 800935a:	bf0c      	ite	eq
 800935c:	2301      	moveq	r3, #1
 800935e:	2300      	movne	r3, #0
 8009360:	b2db      	uxtb	r3, r3
 8009362:	2b00      	cmp	r3, #0
 8009364:	d05c      	beq.n	8009420 <cppLoop+0x1878>
			led.LR(-1, 1);
 8009366:	2201      	movs	r2, #1
 8009368:	f04f 31ff 	mov.w	r1, #4294967295
 800936c:	481f      	ldr	r0, [pc, #124]	; (80093ec <cppLoop+0x1844>)
 800936e:	f7f8 ffad 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 8009372:	2064      	movs	r0, #100	; 0x64
 8009374:	f000 fdcc 	bl	8009f10 <HAL_Delay>
			if(selector_acc == 0){
 8009378:	4b26      	ldr	r3, [pc, #152]	; (8009414 <cppLoop+0x186c>)
 800937a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d113      	bne.n	80093aa <cppLoop+0x1802>
				adj_acc = adj_acc + 0.1;
 8009382:	4b25      	ldr	r3, [pc, #148]	; (8009418 <cppLoop+0x1870>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	4618      	mov	r0, r3
 8009388:	f7f7 f8f6 	bl	8000578 <__aeabi_f2d>
 800938c:	a314      	add	r3, pc, #80	; (adr r3, 80093e0 <cppLoop+0x1838>)
 800938e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009392:	f7f6 ff93 	bl	80002bc <__adddf3>
 8009396:	4603      	mov	r3, r0
 8009398:	460c      	mov	r4, r1
 800939a:	4618      	mov	r0, r3
 800939c:	4621      	mov	r1, r4
 800939e:	f7f7 fc3b 	bl	8000c18 <__aeabi_d2f>
 80093a2:	4602      	mov	r2, r0
 80093a4:	4b1c      	ldr	r3, [pc, #112]	; (8009418 <cppLoop+0x1870>)
 80093a6:	601a      	str	r2, [r3, #0]
 80093a8:	e012      	b.n	80093d0 <cppLoop+0x1828>
				adj_dec = adj_dec + 0.1;
 80093aa:	4b1c      	ldr	r3, [pc, #112]	; (800941c <cppLoop+0x1874>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	4618      	mov	r0, r3
 80093b0:	f7f7 f8e2 	bl	8000578 <__aeabi_f2d>
 80093b4:	a30a      	add	r3, pc, #40	; (adr r3, 80093e0 <cppLoop+0x1838>)
 80093b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ba:	f7f6 ff7f 	bl	80002bc <__adddf3>
 80093be:	4603      	mov	r3, r0
 80093c0:	460c      	mov	r4, r1
 80093c2:	4618      	mov	r0, r3
 80093c4:	4621      	mov	r1, r4
 80093c6:	f7f7 fc27 	bl	8000c18 <__aeabi_d2f>
 80093ca:	4602      	mov	r2, r0
 80093cc:	4b13      	ldr	r3, [pc, #76]	; (800941c <cppLoop+0x1874>)
 80093ce:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 80093d0:	2200      	movs	r2, #0
 80093d2:	f04f 31ff 	mov.w	r1, #4294967295
 80093d6:	4805      	ldr	r0, [pc, #20]	; (80093ec <cppLoop+0x1844>)
 80093d8:	f7f8 ff78 	bl	80022cc <_ZN3LED2LREaa>
		break;
 80093dc:	f000 bc57 	b.w	8009c8e <cppLoop+0x20e6>
 80093e0:	9999999a 	.word	0x9999999a
 80093e4:	3fb99999 	.word	0x3fb99999
 80093e8:	2000054c 	.word	0x2000054c
 80093ec:	20000558 	.word	0x20000558
 80093f0:	20045252 	.word	0x20045252
 80093f4:	20045294 	.word	0x20045294
 80093f8:	200452a4 	.word	0x200452a4
 80093fc:	08019070 	.word	0x08019070
 8009400:	08018fa8 	.word	0x08018fa8
 8009404:	0801907c 	.word	0x0801907c
 8009408:	200209d4 	.word	0x200209d4
 800940c:	08019088 	.word	0x08019088
 8009410:	08019094 	.word	0x08019094
 8009414:	2004524c 	.word	0x2004524c
 8009418:	200452ac 	.word	0x200452ac
 800941c:	200452b4 	.word	0x200452b4
		else if(joy_stick.getValue() == JOY_L){
 8009420:	48b5      	ldr	r0, [pc, #724]	; (80096f8 <cppLoop+0x1b50>)
 8009422:	f7f8 fe33 	bl	800208c <_ZN8JoyStick8getValueEv>
 8009426:	4603      	mov	r3, r0
 8009428:	2b01      	cmp	r3, #1
 800942a:	bf0c      	ite	eq
 800942c:	2301      	moveq	r3, #1
 800942e:	2300      	movne	r3, #0
 8009430:	b2db      	uxtb	r3, r3
 8009432:	2b00      	cmp	r3, #0
 8009434:	d03b      	beq.n	80094ae <cppLoop+0x1906>
			led.LR(-1, 1);
 8009436:	2201      	movs	r2, #1
 8009438:	f04f 31ff 	mov.w	r1, #4294967295
 800943c:	48af      	ldr	r0, [pc, #700]	; (80096fc <cppLoop+0x1b54>)
 800943e:	f7f8 ff45 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 8009442:	2064      	movs	r0, #100	; 0x64
 8009444:	f000 fd64 	bl	8009f10 <HAL_Delay>
			if(selector_acc == 0){
 8009448:	4bad      	ldr	r3, [pc, #692]	; (8009700 <cppLoop+0x1b58>)
 800944a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d113      	bne.n	800947a <cppLoop+0x18d2>
				adj_acc = adj_acc - 0.1;
 8009452:	4bac      	ldr	r3, [pc, #688]	; (8009704 <cppLoop+0x1b5c>)
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	4618      	mov	r0, r3
 8009458:	f7f7 f88e 	bl	8000578 <__aeabi_f2d>
 800945c:	a3a4      	add	r3, pc, #656	; (adr r3, 80096f0 <cppLoop+0x1b48>)
 800945e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009462:	f7f6 ff29 	bl	80002b8 <__aeabi_dsub>
 8009466:	4603      	mov	r3, r0
 8009468:	460c      	mov	r4, r1
 800946a:	4618      	mov	r0, r3
 800946c:	4621      	mov	r1, r4
 800946e:	f7f7 fbd3 	bl	8000c18 <__aeabi_d2f>
 8009472:	4602      	mov	r2, r0
 8009474:	4ba3      	ldr	r3, [pc, #652]	; (8009704 <cppLoop+0x1b5c>)
 8009476:	601a      	str	r2, [r3, #0]
 8009478:	e012      	b.n	80094a0 <cppLoop+0x18f8>
				adj_dec = adj_dec - 0.1;
 800947a:	4ba3      	ldr	r3, [pc, #652]	; (8009708 <cppLoop+0x1b60>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	4618      	mov	r0, r3
 8009480:	f7f7 f87a 	bl	8000578 <__aeabi_f2d>
 8009484:	a39a      	add	r3, pc, #616	; (adr r3, 80096f0 <cppLoop+0x1b48>)
 8009486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800948a:	f7f6 ff15 	bl	80002b8 <__aeabi_dsub>
 800948e:	4603      	mov	r3, r0
 8009490:	460c      	mov	r4, r1
 8009492:	4618      	mov	r0, r3
 8009494:	4621      	mov	r1, r4
 8009496:	f7f7 fbbf 	bl	8000c18 <__aeabi_d2f>
 800949a:	4602      	mov	r2, r0
 800949c:	4b9a      	ldr	r3, [pc, #616]	; (8009708 <cppLoop+0x1b60>)
 800949e:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 80094a0:	2200      	movs	r2, #0
 80094a2:	f04f 31ff 	mov.w	r1, #4294967295
 80094a6:	4895      	ldr	r0, [pc, #596]	; (80096fc <cppLoop+0x1b54>)
 80094a8:	f7f8 ff10 	bl	80022cc <_ZN3LED2LREaa>
		break;
 80094ac:	e3ef      	b.n	8009c8e <cppLoop+0x20e6>
		else if(joy_stick.getValue() == JOY_C){
 80094ae:	4892      	ldr	r0, [pc, #584]	; (80096f8 <cppLoop+0x1b50>)
 80094b0:	f7f8 fdec 	bl	800208c <_ZN8JoyStick8getValueEv>
 80094b4:	4603      	mov	r3, r0
 80094b6:	2b02      	cmp	r3, #2
 80094b8:	bf0c      	ite	eq
 80094ba:	2301      	moveq	r3, #1
 80094bc:	2300      	movne	r3, #0
 80094be:	b2db      	uxtb	r3, r3
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	f000 83e4 	beq.w	8009c8e <cppLoop+0x20e6>
			led.LR(-1, 1);
 80094c6:	2201      	movs	r2, #1
 80094c8:	f04f 31ff 	mov.w	r1, #4294967295
 80094cc:	488b      	ldr	r0, [pc, #556]	; (80096fc <cppLoop+0x1b54>)
 80094ce:	f7f8 fefd 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 80094d2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80094d6:	f000 fd1b 	bl	8009f10 <HAL_Delay>
			sd_write_array_float("PARAMS", "ACC.TXT", 1, &adj_acc, OVER_WRITE);
 80094da:	2300      	movs	r3, #0
 80094dc:	9300      	str	r3, [sp, #0]
 80094de:	4b89      	ldr	r3, [pc, #548]	; (8009704 <cppLoop+0x1b5c>)
 80094e0:	2201      	movs	r2, #1
 80094e2:	498a      	ldr	r1, [pc, #552]	; (800970c <cppLoop+0x1b64>)
 80094e4:	488a      	ldr	r0, [pc, #552]	; (8009710 <cppLoop+0x1b68>)
 80094e6:	f7f8 f9b9 	bl	800185c <sd_write_array_float>
			sd_write_array_float("PARAMS", "DEC.TXT", 1, &adj_dec, OVER_WRITE);
 80094ea:	2300      	movs	r3, #0
 80094ec:	9300      	str	r3, [sp, #0]
 80094ee:	4b86      	ldr	r3, [pc, #536]	; (8009708 <cppLoop+0x1b60>)
 80094f0:	2201      	movs	r2, #1
 80094f2:	4988      	ldr	r1, [pc, #544]	; (8009714 <cppLoop+0x1b6c>)
 80094f4:	4886      	ldr	r0, [pc, #536]	; (8009710 <cppLoop+0x1b68>)
 80094f6:	f7f8 f9b1 	bl	800185c <sd_write_array_float>
			line_trace.setMaxAccDec(adj_acc, adj_dec);
 80094fa:	4b82      	ldr	r3, [pc, #520]	; (8009704 <cppLoop+0x1b5c>)
 80094fc:	edd3 7a00 	vldr	s15, [r3]
 8009500:	4b81      	ldr	r3, [pc, #516]	; (8009708 <cppLoop+0x1b60>)
 8009502:	ed93 7a00 	vldr	s14, [r3]
 8009506:	eef0 0a47 	vmov.f32	s1, s14
 800950a:	eeb0 0a67 	vmov.f32	s0, s15
 800950e:	4882      	ldr	r0, [pc, #520]	; (8009718 <cppLoop+0x1b70>)
 8009510:	f7fa fc99 	bl	8003e46 <_ZN9LineTrace12setMaxAccDecEff>
			led.LR(-1, 0);
 8009514:	2200      	movs	r2, #0
 8009516:	f04f 31ff 	mov.w	r1, #4294967295
 800951a:	4878      	ldr	r0, [pc, #480]	; (80096fc <cppLoop+0x1b54>)
 800951c:	f7f8 fed6 	bl	80022cc <_ZN3LED2LREaa>
		break;
 8009520:	e3b5      	b.n	8009c8e <cppLoop+0x20e6>

	case 6:
		led.fullColor('W');
 8009522:	2157      	movs	r1, #87	; 0x57
 8009524:	4875      	ldr	r0, [pc, #468]	; (80096fc <cppLoop+0x1b54>)
 8009526:	f7f8 fe15 	bl	8002154 <_ZN3LED9fullColorEc>

		lcd_clear();
 800952a:	f7f7 fdb9 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800952e:	2100      	movs	r1, #0
 8009530:	2000      	movs	r0, #0
 8009532:	f7f7 fdc5 	bl	80010c0 <lcd_locate>
		lcd_printf("ACC2:%3.1f", line_trace.getMaxAcc2());
 8009536:	4878      	ldr	r0, [pc, #480]	; (8009718 <cppLoop+0x1b70>)
 8009538:	f7fa fcdd 	bl	8003ef6 <_ZN9LineTrace10getMaxAcc2Ev>
 800953c:	ee10 3a10 	vmov	r3, s0
 8009540:	4618      	mov	r0, r3
 8009542:	f7f7 f819 	bl	8000578 <__aeabi_f2d>
 8009546:	4603      	mov	r3, r0
 8009548:	460c      	mov	r4, r1
 800954a:	461a      	mov	r2, r3
 800954c:	4623      	mov	r3, r4
 800954e:	4873      	ldr	r0, [pc, #460]	; (800971c <cppLoop+0x1b74>)
 8009550:	f7f7 fde0 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009554:	2101      	movs	r1, #1
 8009556:	2000      	movs	r0, #0
 8009558:	f7f7 fdb2 	bl	80010c0 <lcd_locate>
		lcd_printf("DEC2:%3.1f", line_trace.getMaxDec2());
 800955c:	486e      	ldr	r0, [pc, #440]	; (8009718 <cppLoop+0x1b70>)
 800955e:	f7fa fcb8 	bl	8003ed2 <_ZN9LineTrace10getMaxDec2Ev>
 8009562:	ee10 3a10 	vmov	r3, s0
 8009566:	4618      	mov	r0, r3
 8009568:	f7f7 f806 	bl	8000578 <__aeabi_f2d>
 800956c:	4603      	mov	r3, r0
 800956e:	460c      	mov	r4, r1
 8009570:	461a      	mov	r2, r3
 8009572:	4623      	mov	r3, r4
 8009574:	486a      	ldr	r0, [pc, #424]	; (8009720 <cppLoop+0x1b78>)
 8009576:	f7f7 fdcd 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_D){
 800957a:	485f      	ldr	r0, [pc, #380]	; (80096f8 <cppLoop+0x1b50>)
 800957c:	f7f8 fd86 	bl	800208c <_ZN8JoyStick8getValueEv>
 8009580:	4603      	mov	r3, r0
 8009582:	2b04      	cmp	r3, #4
 8009584:	bf0c      	ite	eq
 8009586:	2301      	moveq	r3, #1
 8009588:	2300      	movne	r3, #0
 800958a:	b2db      	uxtb	r3, r3
 800958c:	2b00      	cmp	r3, #0
 800958e:	d021      	beq.n	80095d4 <cppLoop+0x1a2c>
			led.LR(-1, 1);
 8009590:	2201      	movs	r2, #1
 8009592:	f04f 31ff 	mov.w	r1, #4294967295
 8009596:	4859      	ldr	r0, [pc, #356]	; (80096fc <cppLoop+0x1b54>)
 8009598:	f7f8 fe98 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 800959c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80095a0:	f000 fcb6 	bl	8009f10 <HAL_Delay>

			selector_acc2++;
 80095a4:	4b5f      	ldr	r3, [pc, #380]	; (8009724 <cppLoop+0x1b7c>)
 80095a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80095aa:	b29b      	uxth	r3, r3
 80095ac:	3301      	adds	r3, #1
 80095ae:	b29b      	uxth	r3, r3
 80095b0:	b21a      	sxth	r2, r3
 80095b2:	4b5c      	ldr	r3, [pc, #368]	; (8009724 <cppLoop+0x1b7c>)
 80095b4:	801a      	strh	r2, [r3, #0]
			if(selector_acc2 >= 2) selector_acc2 = 0;
 80095b6:	4b5b      	ldr	r3, [pc, #364]	; (8009724 <cppLoop+0x1b7c>)
 80095b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80095bc:	2b01      	cmp	r3, #1
 80095be:	dd02      	ble.n	80095c6 <cppLoop+0x1a1e>
 80095c0:	4b58      	ldr	r3, [pc, #352]	; (8009724 <cppLoop+0x1b7c>)
 80095c2:	2200      	movs	r2, #0
 80095c4:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 80095c6:	2200      	movs	r2, #0
 80095c8:	f04f 31ff 	mov.w	r1, #4294967295
 80095cc:	484b      	ldr	r0, [pc, #300]	; (80096fc <cppLoop+0x1b54>)
 80095ce:	f7f8 fe7d 	bl	80022cc <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "DEC2.TXT", 1, &adj_dec2, OVER_WRITE);
			line_trace.setMaxAccDec2(adj_acc2, adj_dec2);

			led.LR(-1, 0);
		}
		break;
 80095d2:	e35e      	b.n	8009c92 <cppLoop+0x20ea>
		else if(joy_stick.getValue() == JOY_R){
 80095d4:	4848      	ldr	r0, [pc, #288]	; (80096f8 <cppLoop+0x1b50>)
 80095d6:	f7f8 fd59 	bl	800208c <_ZN8JoyStick8getValueEv>
 80095da:	4603      	mov	r3, r0
 80095dc:	2b10      	cmp	r3, #16
 80095de:	bf0c      	ite	eq
 80095e0:	2301      	moveq	r3, #1
 80095e2:	2300      	movne	r3, #0
 80095e4:	b2db      	uxtb	r3, r3
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d03b      	beq.n	8009662 <cppLoop+0x1aba>
			led.LR(-1, 1);
 80095ea:	2201      	movs	r2, #1
 80095ec:	f04f 31ff 	mov.w	r1, #4294967295
 80095f0:	4842      	ldr	r0, [pc, #264]	; (80096fc <cppLoop+0x1b54>)
 80095f2:	f7f8 fe6b 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 80095f6:	2064      	movs	r0, #100	; 0x64
 80095f8:	f000 fc8a 	bl	8009f10 <HAL_Delay>
			if(selector_acc2 == 0){
 80095fc:	4b49      	ldr	r3, [pc, #292]	; (8009724 <cppLoop+0x1b7c>)
 80095fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d113      	bne.n	800962e <cppLoop+0x1a86>
				adj_acc2 = adj_acc2 + 0.1;
 8009606:	4b48      	ldr	r3, [pc, #288]	; (8009728 <cppLoop+0x1b80>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	4618      	mov	r0, r3
 800960c:	f7f6 ffb4 	bl	8000578 <__aeabi_f2d>
 8009610:	a337      	add	r3, pc, #220	; (adr r3, 80096f0 <cppLoop+0x1b48>)
 8009612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009616:	f7f6 fe51 	bl	80002bc <__adddf3>
 800961a:	4603      	mov	r3, r0
 800961c:	460c      	mov	r4, r1
 800961e:	4618      	mov	r0, r3
 8009620:	4621      	mov	r1, r4
 8009622:	f7f7 faf9 	bl	8000c18 <__aeabi_d2f>
 8009626:	4602      	mov	r2, r0
 8009628:	4b3f      	ldr	r3, [pc, #252]	; (8009728 <cppLoop+0x1b80>)
 800962a:	601a      	str	r2, [r3, #0]
 800962c:	e012      	b.n	8009654 <cppLoop+0x1aac>
				adj_dec2 = adj_dec2 + 0.1;
 800962e:	4b3f      	ldr	r3, [pc, #252]	; (800972c <cppLoop+0x1b84>)
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	4618      	mov	r0, r3
 8009634:	f7f6 ffa0 	bl	8000578 <__aeabi_f2d>
 8009638:	a32d      	add	r3, pc, #180	; (adr r3, 80096f0 <cppLoop+0x1b48>)
 800963a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800963e:	f7f6 fe3d 	bl	80002bc <__adddf3>
 8009642:	4603      	mov	r3, r0
 8009644:	460c      	mov	r4, r1
 8009646:	4618      	mov	r0, r3
 8009648:	4621      	mov	r1, r4
 800964a:	f7f7 fae5 	bl	8000c18 <__aeabi_d2f>
 800964e:	4602      	mov	r2, r0
 8009650:	4b36      	ldr	r3, [pc, #216]	; (800972c <cppLoop+0x1b84>)
 8009652:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8009654:	2200      	movs	r2, #0
 8009656:	f04f 31ff 	mov.w	r1, #4294967295
 800965a:	4828      	ldr	r0, [pc, #160]	; (80096fc <cppLoop+0x1b54>)
 800965c:	f7f8 fe36 	bl	80022cc <_ZN3LED2LREaa>
		break;
 8009660:	e317      	b.n	8009c92 <cppLoop+0x20ea>
		else if(joy_stick.getValue() == JOY_L){
 8009662:	4825      	ldr	r0, [pc, #148]	; (80096f8 <cppLoop+0x1b50>)
 8009664:	f7f8 fd12 	bl	800208c <_ZN8JoyStick8getValueEv>
 8009668:	4603      	mov	r3, r0
 800966a:	2b01      	cmp	r3, #1
 800966c:	bf0c      	ite	eq
 800966e:	2301      	moveq	r3, #1
 8009670:	2300      	movne	r3, #0
 8009672:	b2db      	uxtb	r3, r3
 8009674:	2b00      	cmp	r3, #0
 8009676:	d05b      	beq.n	8009730 <cppLoop+0x1b88>
			led.LR(-1, 1);
 8009678:	2201      	movs	r2, #1
 800967a:	f04f 31ff 	mov.w	r1, #4294967295
 800967e:	481f      	ldr	r0, [pc, #124]	; (80096fc <cppLoop+0x1b54>)
 8009680:	f7f8 fe24 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 8009684:	2064      	movs	r0, #100	; 0x64
 8009686:	f000 fc43 	bl	8009f10 <HAL_Delay>
			if(selector_acc2 == 0){
 800968a:	4b26      	ldr	r3, [pc, #152]	; (8009724 <cppLoop+0x1b7c>)
 800968c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d113      	bne.n	80096bc <cppLoop+0x1b14>
				adj_acc2 = adj_acc2 - 0.1;
 8009694:	4b24      	ldr	r3, [pc, #144]	; (8009728 <cppLoop+0x1b80>)
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	4618      	mov	r0, r3
 800969a:	f7f6 ff6d 	bl	8000578 <__aeabi_f2d>
 800969e:	a314      	add	r3, pc, #80	; (adr r3, 80096f0 <cppLoop+0x1b48>)
 80096a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096a4:	f7f6 fe08 	bl	80002b8 <__aeabi_dsub>
 80096a8:	4603      	mov	r3, r0
 80096aa:	460c      	mov	r4, r1
 80096ac:	4618      	mov	r0, r3
 80096ae:	4621      	mov	r1, r4
 80096b0:	f7f7 fab2 	bl	8000c18 <__aeabi_d2f>
 80096b4:	4602      	mov	r2, r0
 80096b6:	4b1c      	ldr	r3, [pc, #112]	; (8009728 <cppLoop+0x1b80>)
 80096b8:	601a      	str	r2, [r3, #0]
 80096ba:	e012      	b.n	80096e2 <cppLoop+0x1b3a>
				adj_dec2 = adj_dec2 - 0.1;
 80096bc:	4b1b      	ldr	r3, [pc, #108]	; (800972c <cppLoop+0x1b84>)
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	4618      	mov	r0, r3
 80096c2:	f7f6 ff59 	bl	8000578 <__aeabi_f2d>
 80096c6:	a30a      	add	r3, pc, #40	; (adr r3, 80096f0 <cppLoop+0x1b48>)
 80096c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096cc:	f7f6 fdf4 	bl	80002b8 <__aeabi_dsub>
 80096d0:	4603      	mov	r3, r0
 80096d2:	460c      	mov	r4, r1
 80096d4:	4618      	mov	r0, r3
 80096d6:	4621      	mov	r1, r4
 80096d8:	f7f7 fa9e 	bl	8000c18 <__aeabi_d2f>
 80096dc:	4602      	mov	r2, r0
 80096de:	4b13      	ldr	r3, [pc, #76]	; (800972c <cppLoop+0x1b84>)
 80096e0:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 80096e2:	2200      	movs	r2, #0
 80096e4:	f04f 31ff 	mov.w	r1, #4294967295
 80096e8:	4804      	ldr	r0, [pc, #16]	; (80096fc <cppLoop+0x1b54>)
 80096ea:	f7f8 fdef 	bl	80022cc <_ZN3LED2LREaa>
		break;
 80096ee:	e2d0      	b.n	8009c92 <cppLoop+0x20ea>
 80096f0:	9999999a 	.word	0x9999999a
 80096f4:	3fb99999 	.word	0x3fb99999
 80096f8:	2000054c 	.word	0x2000054c
 80096fc:	20000558 	.word	0x20000558
 8009700:	2004524c 	.word	0x2004524c
 8009704:	200452ac 	.word	0x200452ac
 8009708:	200452b4 	.word	0x200452b4
 800970c:	080190a0 	.word	0x080190a0
 8009710:	08018fa8 	.word	0x08018fa8
 8009714:	080190a8 	.word	0x080190a8
 8009718:	200209d4 	.word	0x200209d4
 800971c:	080190b0 	.word	0x080190b0
 8009720:	080190bc 	.word	0x080190bc
 8009724:	2004524e 	.word	0x2004524e
 8009728:	200452bc 	.word	0x200452bc
 800972c:	200452c4 	.word	0x200452c4
		else if(joy_stick.getValue() == JOY_C){
 8009730:	48c6      	ldr	r0, [pc, #792]	; (8009a4c <cppLoop+0x1ea4>)
 8009732:	f7f8 fcab 	bl	800208c <_ZN8JoyStick8getValueEv>
 8009736:	4603      	mov	r3, r0
 8009738:	2b02      	cmp	r3, #2
 800973a:	bf0c      	ite	eq
 800973c:	2301      	moveq	r3, #1
 800973e:	2300      	movne	r3, #0
 8009740:	b2db      	uxtb	r3, r3
 8009742:	2b00      	cmp	r3, #0
 8009744:	f000 82a5 	beq.w	8009c92 <cppLoop+0x20ea>
			led.LR(-1, 1);
 8009748:	2201      	movs	r2, #1
 800974a:	f04f 31ff 	mov.w	r1, #4294967295
 800974e:	48c0      	ldr	r0, [pc, #768]	; (8009a50 <cppLoop+0x1ea8>)
 8009750:	f7f8 fdbc 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 8009754:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009758:	f000 fbda 	bl	8009f10 <HAL_Delay>
			sd_write_array_float("PARAMS", "ACC2.TXT", 1, &adj_acc2, OVER_WRITE);
 800975c:	2300      	movs	r3, #0
 800975e:	9300      	str	r3, [sp, #0]
 8009760:	4bbc      	ldr	r3, [pc, #752]	; (8009a54 <cppLoop+0x1eac>)
 8009762:	2201      	movs	r2, #1
 8009764:	49bc      	ldr	r1, [pc, #752]	; (8009a58 <cppLoop+0x1eb0>)
 8009766:	48bd      	ldr	r0, [pc, #756]	; (8009a5c <cppLoop+0x1eb4>)
 8009768:	f7f8 f878 	bl	800185c <sd_write_array_float>
			sd_write_array_float("PARAMS", "DEC2.TXT", 1, &adj_dec2, OVER_WRITE);
 800976c:	2300      	movs	r3, #0
 800976e:	9300      	str	r3, [sp, #0]
 8009770:	4bbb      	ldr	r3, [pc, #748]	; (8009a60 <cppLoop+0x1eb8>)
 8009772:	2201      	movs	r2, #1
 8009774:	49bb      	ldr	r1, [pc, #748]	; (8009a64 <cppLoop+0x1ebc>)
 8009776:	48b9      	ldr	r0, [pc, #740]	; (8009a5c <cppLoop+0x1eb4>)
 8009778:	f7f8 f870 	bl	800185c <sd_write_array_float>
			line_trace.setMaxAccDec2(adj_acc2, adj_dec2);
 800977c:	4bb5      	ldr	r3, [pc, #724]	; (8009a54 <cppLoop+0x1eac>)
 800977e:	edd3 7a00 	vldr	s15, [r3]
 8009782:	4bb7      	ldr	r3, [pc, #732]	; (8009a60 <cppLoop+0x1eb8>)
 8009784:	ed93 7a00 	vldr	s14, [r3]
 8009788:	eef0 0a47 	vmov.f32	s1, s14
 800978c:	eeb0 0a67 	vmov.f32	s0, s15
 8009790:	48b5      	ldr	r0, [pc, #724]	; (8009a68 <cppLoop+0x1ec0>)
 8009792:	f7fa fb72 	bl	8003e7a <_ZN9LineTrace13setMaxAccDec2Eff>
			led.LR(-1, 0);
 8009796:	2200      	movs	r2, #0
 8009798:	f04f 31ff 	mov.w	r1, #4294967295
 800979c:	48ac      	ldr	r0, [pc, #688]	; (8009a50 <cppLoop+0x1ea8>)
 800979e:	f7f8 fd95 	bl	80022cc <_ZN3LED2LREaa>
		break;
 80097a2:	e276      	b.n	8009c92 <cppLoop+0x20ea>

	case 9:
		break;

	case 10:
		led.fullColor('~');
 80097a4:	217e      	movs	r1, #126	; 0x7e
 80097a6:	48aa      	ldr	r0, [pc, #680]	; (8009a50 <cppLoop+0x1ea8>)
 80097a8:	f7f8 fcd4 	bl	8002154 <_ZN3LED9fullColorEc>

		lcd_clear();
 80097ac:	f7f7 fc78 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80097b0:	2100      	movs	r1, #0
 80097b2:	2000      	movs	r0, #0
 80097b4:	f7f7 fc84 	bl	80010c0 <lcd_locate>
		lcd_printf("Teoshi");
 80097b8:	48ac      	ldr	r0, [pc, #688]	; (8009a6c <cppLoop+0x1ec4>)
 80097ba:	f7f7 fcab 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80097be:	2101      	movs	r1, #1
 80097c0:	2000      	movs	r0, #0
 80097c2:	f7f7 fc7d 	bl	80010c0 <lcd_locate>
		lcd_printf("Following");
 80097c6:	48aa      	ldr	r0, [pc, #680]	; (8009a70 <cppLoop+0x1ec8>)
 80097c8:	f7f7 fca4 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80097cc:	489f      	ldr	r0, [pc, #636]	; (8009a4c <cppLoop+0x1ea4>)
 80097ce:	f7f8 fc5d 	bl	800208c <_ZN8JoyStick8getValueEv>
 80097d2:	4603      	mov	r3, r0
 80097d4:	2b02      	cmp	r3, #2
 80097d6:	bf0c      	ite	eq
 80097d8:	2301      	moveq	r3, #1
 80097da:	2300      	movne	r3, #0
 80097dc:	b2db      	uxtb	r3, r3
 80097de:	2b00      	cmp	r3, #0
 80097e0:	f000 8259 	beq.w	8009c96 <cppLoop+0x20ee>
			led.LR(-1, 1);
 80097e4:	2201      	movs	r2, #1
 80097e6:	f04f 31ff 	mov.w	r1, #4294967295
 80097ea:	4899      	ldr	r0, [pc, #612]	; (8009a50 <cppLoop+0x1ea8>)
 80097ec:	f7f8 fd6e 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(500);
 80097f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80097f4:	f000 fb8c 	bl	8009f10 <HAL_Delay>

			line_trace.setNormalRatio(0.0);
 80097f8:	ed9f 0a9e 	vldr	s0, [pc, #632]	; 8009a74 <cppLoop+0x1ecc>
 80097fc:	489a      	ldr	r0, [pc, #616]	; (8009a68 <cppLoop+0x1ec0>)
 80097fe:	f7fa fa73 	bl	8003ce8 <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 8009802:	4899      	ldr	r0, [pc, #612]	; (8009a68 <cppLoop+0x1ec0>)
 8009804:	f7fa fc74 	bl	80040f0 <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 8009808:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800980c:	f000 fb80 	bl	8009f10 <HAL_Delay>

			led.fullColor('R');
 8009810:	2152      	movs	r1, #82	; 0x52
 8009812:	488f      	ldr	r0, [pc, #572]	; (8009a50 <cppLoop+0x1ea8>)
 8009814:	f7f8 fc9e 	bl	8002154 <_ZN3LED9fullColorEc>
			encoder.clearDistance10mm();
 8009818:	4897      	ldr	r0, [pc, #604]	; (8009a78 <cppLoop+0x1ed0>)
 800981a:	f7f7 ff37 	bl	800168c <_ZN7Encoder17clearDistance10mmEv>
			//encoder.clearDistance();

			HAL_Delay(10000);
 800981e:	f242 7010 	movw	r0, #10000	; 0x2710
 8009822:	f000 fb75 	bl	8009f10 <HAL_Delay>

			line_trace.stop();
 8009826:	4890      	ldr	r0, [pc, #576]	; (8009a68 <cppLoop+0x1ec0>)
 8009828:	f7fa fe0e 	bl	8004448 <_ZN9LineTrace4stopEv>
			//long total = encoder.getTotalCnt();

			//user_fopen("total_cnts", "cnts.txt");
			user_fopen("distance", "1m.txt");
 800982c:	4993      	ldr	r1, [pc, #588]	; (8009a7c <cppLoop+0x1ed4>)
 800982e:	4894      	ldr	r0, [pc, #592]	; (8009a80 <cppLoop+0x1ed8>)
 8009830:	f7f7 ff9f 	bl	8001772 <user_fopen>
			float d = encoder.getDistance();
 8009834:	4890      	ldr	r0, [pc, #576]	; (8009a78 <cppLoop+0x1ed0>)
 8009836:	f7f7 feed 	bl	8001614 <_ZN7Encoder11getDistanceEv>
 800983a:	eef0 7a40 	vmov.f32	s15, s0
 800983e:	edc7 7a01 	vstr	s15, [r7, #4]
			sd_write_float(1, &d, ADD_WRITE);
 8009842:	1d3b      	adds	r3, r7, #4
 8009844:	2201      	movs	r2, #1
 8009846:	4619      	mov	r1, r3
 8009848:	2001      	movs	r0, #1
 800984a:	f7f7 ffb5 	bl	80017b8 <sd_write_float>
			user_fclose();
 800984e:	f7f7 ffa3 	bl	8001798 <user_fclose>

			led.LR(-1, 0);
 8009852:	2200      	movs	r2, #0
 8009854:	f04f 31ff 	mov.w	r1, #4294967295
 8009858:	487d      	ldr	r0, [pc, #500]	; (8009a50 <cppLoop+0x1ea8>)
 800985a:	f7f8 fd37 	bl	80022cc <_ZN3LED2LREaa>
		}
		break;
 800985e:	e21a      	b.n	8009c96 <cppLoop+0x20ee>

	case 11:
		led.fullColor('~');
 8009860:	217e      	movs	r1, #126	; 0x7e
 8009862:	487b      	ldr	r0, [pc, #492]	; (8009a50 <cppLoop+0x1ea8>)
 8009864:	f7f8 fc76 	bl	8002154 <_ZN3LED9fullColorEc>

		lcd_clear();
 8009868:	f7f7 fc1a 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800986c:	2100      	movs	r1, #0
 800986e:	2000      	movs	r0, #0
 8009870:	f7f7 fc26 	bl	80010c0 <lcd_locate>
		lcd_printf("Create  ");
 8009874:	4883      	ldr	r0, [pc, #524]	; (8009a84 <cppLoop+0x1edc>)
 8009876:	f7f7 fc4d 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800987a:	2101      	movs	r1, #1
 800987c:	2000      	movs	r0, #0
 800987e:	f7f7 fc1f 	bl	80010c0 <lcd_locate>
		lcd_printf("VelTable");
 8009882:	4881      	ldr	r0, [pc, #516]	; (8009a88 <cppLoop+0x1ee0>)
 8009884:	f7f7 fc46 	bl	8001114 <lcd_printf>
		if(joy_stick.getValue() == JOY_C){
 8009888:	4870      	ldr	r0, [pc, #448]	; (8009a4c <cppLoop+0x1ea4>)
 800988a:	f7f8 fbff 	bl	800208c <_ZN8JoyStick8getValueEv>
 800988e:	4603      	mov	r3, r0
 8009890:	2b02      	cmp	r3, #2
 8009892:	bf0c      	ite	eq
 8009894:	2301      	moveq	r3, #1
 8009896:	2300      	movne	r3, #0
 8009898:	b2db      	uxtb	r3, r3
 800989a:	2b00      	cmp	r3, #0
 800989c:	f000 81fd 	beq.w	8009c9a <cppLoop+0x20f2>
			HAL_Delay(500);
 80098a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80098a4:	f000 fb34 	bl	8009f10 <HAL_Delay>
			led.LR(-1, 1);
 80098a8:	2201      	movs	r2, #1
 80098aa:	f04f 31ff 	mov.w	r1, #4294967295
 80098ae:	4868      	ldr	r0, [pc, #416]	; (8009a50 <cppLoop+0x1ea8>)
 80098b0:	f7f8 fd0c 	bl	80022cc <_ZN3LED2LREaa>

			line_trace.setMode(THIRD_RUNNING);
 80098b4:	2102      	movs	r1, #2
 80098b6:	486c      	ldr	r0, [pc, #432]	; (8009a68 <cppLoop+0x1ec0>)
 80098b8:	f7fa fc08 	bl	80040cc <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_max_velocity2);
 80098bc:	4b73      	ldr	r3, [pc, #460]	; (8009a8c <cppLoop+0x1ee4>)
 80098be:	edd3 7a00 	vldr	s15, [r3]
 80098c2:	eeb0 0a67 	vmov.f32	s0, s15
 80098c6:	4868      	ldr	r0, [pc, #416]	; (8009a68 <cppLoop+0x1ec0>)
 80098c8:	f7fa fa1d 	bl	8003d06 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity2);
 80098cc:	4b6f      	ldr	r3, [pc, #444]	; (8009a8c <cppLoop+0x1ee4>)
 80098ce:	edd3 7a00 	vldr	s15, [r3]
 80098d2:	eeb0 0a67 	vmov.f32	s0, s15
 80098d6:	4864      	ldr	r0, [pc, #400]	; (8009a68 <cppLoop+0x1ec0>)
 80098d8:	f7fa fa25 	bl	8003d26 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_max_velocity2);
 80098dc:	4b6b      	ldr	r3, [pc, #428]	; (8009a8c <cppLoop+0x1ee4>)
 80098de:	edd3 7a00 	vldr	s15, [r3]
 80098e2:	eeb0 0a67 	vmov.f32	s0, s15
 80098e6:	4860      	ldr	r0, [pc, #384]	; (8009a68 <cppLoop+0x1ec0>)
 80098e8:	f7fa fa3d 	bl	8003d66 <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 80098ec:	485e      	ldr	r0, [pc, #376]	; (8009a68 <cppLoop+0x1ec0>)
 80098ee:	f7fa fef7 	bl	80046e0 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			led.LR(-1, 0);
 80098f2:	2200      	movs	r2, #0
 80098f4:	f04f 31ff 	mov.w	r1, #4294967295
 80098f8:	4855      	ldr	r0, [pc, #340]	; (8009a50 <cppLoop+0x1ea8>)
 80098fa:	f7f8 fce7 	bl	80022cc <_ZN3LED2LREaa>
		}

		break;
 80098fe:	e1cc      	b.n	8009c9a <cppLoop+0x20f2>

	case 12:
		led.fullColor('~');
 8009900:	217e      	movs	r1, #126	; 0x7e
 8009902:	4853      	ldr	r0, [pc, #332]	; (8009a50 <cppLoop+0x1ea8>)
 8009904:	f7f8 fc26 	bl	8002154 <_ZN3LED9fullColorEc>

			led.LR(-1, 0);
		}
		*/

		lcd_clear();
 8009908:	f7f7 fbca 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800990c:	2100      	movs	r1, #0
 800990e:	2000      	movs	r0, #0
 8009910:	f7f7 fbd6 	bl	80010c0 <lcd_locate>
		lcd_printf("LOG");
 8009914:	485e      	ldr	r0, [pc, #376]	; (8009a90 <cppLoop+0x1ee8>)
 8009916:	f7f7 fbfd 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800991a:	2101      	movs	r1, #1
 800991c:	2000      	movs	r0, #0
 800991e:	f7f7 fbcf 	bl	80010c0 <lcd_locate>
		lcd_printf("TEST");
 8009922:	485c      	ldr	r0, [pc, #368]	; (8009a94 <cppLoop+0x1eec>)
 8009924:	f7f7 fbf6 	bl	8001114 <lcd_printf>
		if(joy_stick.getValue() == JOY_C){
 8009928:	4848      	ldr	r0, [pc, #288]	; (8009a4c <cppLoop+0x1ea4>)
 800992a:	f7f8 fbaf 	bl	800208c <_ZN8JoyStick8getValueEv>
 800992e:	4603      	mov	r3, r0
 8009930:	2b02      	cmp	r3, #2
 8009932:	bf0c      	ite	eq
 8009934:	2301      	moveq	r3, #1
 8009936:	2300      	movne	r3, #0
 8009938:	b2db      	uxtb	r3, r3
 800993a:	2b00      	cmp	r3, #0
 800993c:	f000 81af 	beq.w	8009c9e <cppLoop+0x20f6>
			led.fullColor('R');
 8009940:	2152      	movs	r1, #82	; 0x52
 8009942:	4843      	ldr	r0, [pc, #268]	; (8009a50 <cppLoop+0x1ea8>)
 8009944:	f7f8 fc06 	bl	8002154 <_ZN3LED9fullColorEc>
			logger.resetLogsTim1();
 8009948:	4853      	ldr	r0, [pc, #332]	; (8009a98 <cppLoop+0x1ef0>)
 800994a:	f7fb fa10 	bl	8004d6e <_ZN6Logger13resetLogsTim1Ev>
			logger.resetLogsTim2();
 800994e:	4852      	ldr	r0, [pc, #328]	; (8009a98 <cppLoop+0x1ef0>)
 8009950:	f7fb fa35 	bl	8004dbe <_ZN6Logger13resetLogsTim2Ev>
			logger.start();
 8009954:	4850      	ldr	r0, [pc, #320]	; (8009a98 <cppLoop+0x1ef0>)
 8009956:	f7fb fa7c 	bl	8004e52 <_ZN6Logger5startEv>

			HAL_Delay(1000);
 800995a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800995e:	f000 fad7 	bl	8009f10 <HAL_Delay>

			logger.stop();
 8009962:	484d      	ldr	r0, [pc, #308]	; (8009a98 <cppLoop+0x1ef0>)
 8009964:	f7fb fa94 	bl	8004e90 <_ZN6Logger4stopEv>
			logger.saveLogs("STATELOG", "TARVEL.txt");
 8009968:	4a4c      	ldr	r2, [pc, #304]	; (8009a9c <cppLoop+0x1ef4>)
 800996a:	494d      	ldr	r1, [pc, #308]	; (8009aa0 <cppLoop+0x1ef8>)
 800996c:	484a      	ldr	r0, [pc, #296]	; (8009a98 <cppLoop+0x1ef0>)
 800996e:	f7fb f928 	bl	8004bc2 <_ZN6Logger8saveLogsEPKcS1_>
			logger.saveLogs2("STATELOG", "CURVEL.txt");
 8009972:	4a4c      	ldr	r2, [pc, #304]	; (8009aa4 <cppLoop+0x1efc>)
 8009974:	494a      	ldr	r1, [pc, #296]	; (8009aa0 <cppLoop+0x1ef8>)
 8009976:	4848      	ldr	r0, [pc, #288]	; (8009a98 <cppLoop+0x1ef0>)
 8009978:	f7fb f937 	bl	8004bea <_ZN6Logger9saveLogs2EPKcS1_>
			led.fullColor('~');
 800997c:	217e      	movs	r1, #126	; 0x7e
 800997e:	4834      	ldr	r0, [pc, #208]	; (8009a50 <cppLoop+0x1ea8>)
 8009980:	f7f8 fbe8 	bl	8002154 <_ZN3LED9fullColorEc>

			led.LR(-1, 0);
		}
		*/

		break;
 8009984:	e18b      	b.n	8009c9e <cppLoop+0x20f6>

	case 13:
		led.fullColor('~');
 8009986:	217e      	movs	r1, #126	; 0x7e
 8009988:	4831      	ldr	r0, [pc, #196]	; (8009a50 <cppLoop+0x1ea8>)
 800998a:	f7f8 fbe3 	bl	8002154 <_ZN3LED9fullColorEc>

		lcd_clear();
 800998e:	f7f7 fb87 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8009992:	2100      	movs	r1, #0
 8009994:	2000      	movs	r0, #0
 8009996:	f7f7 fb93 	bl	80010c0 <lcd_locate>
		lcd_printf("PID");
 800999a:	4843      	ldr	r0, [pc, #268]	; (8009aa8 <cppLoop+0x1f00>)
 800999c:	f7f7 fbba 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80099a0:	2101      	movs	r1, #1
 80099a2:	2000      	movs	r0, #0
 80099a4:	f7f7 fb8c 	bl	80010c0 <lcd_locate>
		lcd_printf("Response");
 80099a8:	4840      	ldr	r0, [pc, #256]	; (8009aac <cppLoop+0x1f04>)
 80099aa:	f7f7 fbb3 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80099ae:	4827      	ldr	r0, [pc, #156]	; (8009a4c <cppLoop+0x1ea4>)
 80099b0:	f7f8 fb6c 	bl	800208c <_ZN8JoyStick8getValueEv>
 80099b4:	4603      	mov	r3, r0
 80099b6:	2b02      	cmp	r3, #2
 80099b8:	bf0c      	ite	eq
 80099ba:	2301      	moveq	r3, #1
 80099bc:	2300      	movne	r3, #0
 80099be:	b2db      	uxtb	r3, r3
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	f000 816e 	beq.w	8009ca2 <cppLoop+0x20fa>
			HAL_Delay(1500);
 80099c6:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80099ca:	f000 faa1 	bl	8009f10 <HAL_Delay>
			led.LR(-1, 1);
 80099ce:	2201      	movs	r2, #1
 80099d0:	f04f 31ff 	mov.w	r1, #4294967295
 80099d4:	481e      	ldr	r0, [pc, #120]	; (8009a50 <cppLoop+0x1ea8>)
 80099d6:	f7f8 fc79 	bl	80022cc <_ZN3LED2LREaa>

			HAL_Delay(3000);
 80099da:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80099de:	f000 fa97 	bl	8009f10 <HAL_Delay>
			esc.on(BLDC_POWER, BLDC_POWER, BLDC_POWER, BLDC_POWER);
 80099e2:	eddf 1a33 	vldr	s3, [pc, #204]	; 8009ab0 <cppLoop+0x1f08>
 80099e6:	ed9f 1a32 	vldr	s2, [pc, #200]	; 8009ab0 <cppLoop+0x1f08>
 80099ea:	eddf 0a31 	vldr	s1, [pc, #196]	; 8009ab0 <cppLoop+0x1f08>
 80099ee:	ed9f 0a30 	vldr	s0, [pc, #192]	; 8009ab0 <cppLoop+0x1f08>
 80099f2:	4830      	ldr	r0, [pc, #192]	; (8009ab4 <cppLoop+0x1f0c>)
 80099f4:	f7f7 fc2c 	bl	8001250 <_ZN3ESC2onEffff>
			HAL_Delay(1000);
 80099f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80099fc:	f000 fa88 	bl	8009f10 <HAL_Delay>

			logger.start();
 8009a00:	4825      	ldr	r0, [pc, #148]	; (8009a98 <cppLoop+0x1ef0>)
 8009a02:	f7fb fa26 	bl	8004e52 <_ZN6Logger5startEv>
			velocity_ctrl.start();
 8009a06:	482c      	ldr	r0, [pc, #176]	; (8009ab8 <cppLoop+0x1f10>)
 8009a08:	f7fc fa03 	bl	8005e12 <_ZN12VelocityCtrl5startEv>
			velocity_ctrl.setVelocity(1, 0);
 8009a0c:	eddf 0a19 	vldr	s1, [pc, #100]	; 8009a74 <cppLoop+0x1ecc>
 8009a10:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8009a14:	4828      	ldr	r0, [pc, #160]	; (8009ab8 <cppLoop+0x1f10>)
 8009a16:	f7fc f98f 	bl	8005d38 <_ZN12VelocityCtrl11setVelocityEff>

			HAL_Delay(1000);
 8009a1a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009a1e:	f000 fa77 	bl	8009f10 <HAL_Delay>

			logger.stop();
 8009a22:	481d      	ldr	r0, [pc, #116]	; (8009a98 <cppLoop+0x1ef0>)
 8009a24:	f7fb fa34 	bl	8004e90 <_ZN6Logger4stopEv>
			velocity_ctrl.stop();
 8009a28:	4823      	ldr	r0, [pc, #140]	; (8009ab8 <cppLoop+0x1f10>)
 8009a2a:	f7fc fa05 	bl	8005e38 <_ZN12VelocityCtrl4stopEv>
			esc.off();
 8009a2e:	4821      	ldr	r0, [pc, #132]	; (8009ab4 <cppLoop+0x1f0c>)
 8009a30:	f7f7 fca8 	bl	8001384 <_ZN3ESC3offEv>

			logger.saveLogs("SYSIDENT", "PIDRES.txt");
 8009a34:	4a21      	ldr	r2, [pc, #132]	; (8009abc <cppLoop+0x1f14>)
 8009a36:	4922      	ldr	r1, [pc, #136]	; (8009ac0 <cppLoop+0x1f18>)
 8009a38:	4817      	ldr	r0, [pc, #92]	; (8009a98 <cppLoop+0x1ef0>)
 8009a3a:	f7fb f8c2 	bl	8004bc2 <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 8009a3e:	2200      	movs	r2, #0
 8009a40:	f04f 31ff 	mov.w	r1, #4294967295
 8009a44:	4802      	ldr	r0, [pc, #8]	; (8009a50 <cppLoop+0x1ea8>)
 8009a46:	f7f8 fc41 	bl	80022cc <_ZN3LED2LREaa>
		}
		break;
 8009a4a:	e12a      	b.n	8009ca2 <cppLoop+0x20fa>
 8009a4c:	2000054c 	.word	0x2000054c
 8009a50:	20000558 	.word	0x20000558
 8009a54:	200452bc 	.word	0x200452bc
 8009a58:	080190c8 	.word	0x080190c8
 8009a5c:	08018fa8 	.word	0x08018fa8
 8009a60:	200452c4 	.word	0x200452c4
 8009a64:	080190d4 	.word	0x080190d4
 8009a68:	200209d4 	.word	0x200209d4
 8009a6c:	080190e0 	.word	0x080190e0
 8009a70:	080190e8 	.word	0x080190e8
 8009a74:	00000000 	.word	0x00000000
 8009a78:	20020928 	.word	0x20020928
 8009a7c:	080190f4 	.word	0x080190f4
 8009a80:	080190fc 	.word	0x080190fc
 8009a84:	08019108 	.word	0x08019108
 8009a88:	08019114 	.word	0x08019114
 8009a8c:	20045294 	.word	0x20045294
 8009a90:	08019120 	.word	0x08019120
 8009a94:	08019124 	.word	0x08019124
 8009a98:	2000057c 	.word	0x2000057c
 8009a9c:	08019000 	.word	0x08019000
 8009aa0:	0801900c 	.word	0x0801900c
 8009aa4:	08019018 	.word	0x08019018
 8009aa8:	0801912c 	.word	0x0801912c
 8009aac:	08019130 	.word	0x08019130
 8009ab0:	3ea3d70a 	.word	0x3ea3d70a
 8009ab4:	200209d0 	.word	0x200209d0
 8009ab8:	20020950 	.word	0x20020950
 8009abc:	0801913c 	.word	0x0801913c
 8009ac0:	08019148 	.word	0x08019148

	case 14:

		led.fullColor('W');
 8009ac4:	2157      	movs	r1, #87	; 0x57
 8009ac6:	487d      	ldr	r0, [pc, #500]	; (8009cbc <cppLoop+0x2114>)
 8009ac8:	f7f8 fb44 	bl	8002154 <_ZN3LED9fullColorEc>

		lcd_clear();
 8009acc:	f7f7 fae8 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8009ad0:	2100      	movs	r1, #0
 8009ad2:	2000      	movs	r0, #0
 8009ad4:	f7f7 faf4 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun2    ");
 8009ad8:	4879      	ldr	r0, [pc, #484]	; (8009cc0 <cppLoop+0x2118>)
 8009ada:	f7f7 fb1b 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009ade:	2101      	movs	r1, #1
 8009ae0:	2000      	movs	r0, #0
 8009ae2:	f7f7 faed 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity2);
 8009ae6:	4b77      	ldr	r3, [pc, #476]	; (8009cc4 <cppLoop+0x211c>)
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	4618      	mov	r0, r3
 8009aec:	f7f6 fd44 	bl	8000578 <__aeabi_f2d>
 8009af0:	4603      	mov	r3, r0
 8009af2:	460c      	mov	r4, r1
 8009af4:	461a      	mov	r2, r3
 8009af6:	4623      	mov	r3, r4
 8009af8:	4873      	ldr	r0, [pc, #460]	; (8009cc8 <cppLoop+0x2120>)
 8009afa:	f7f7 fb0b 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8009afe:	4873      	ldr	r0, [pc, #460]	; (8009ccc <cppLoop+0x2124>)
 8009b00:	f7f8 fac4 	bl	800208c <_ZN8JoyStick8getValueEv>
 8009b04:	4603      	mov	r3, r0
 8009b06:	2b02      	cmp	r3, #2
 8009b08:	bf0c      	ite	eq
 8009b0a:	2301      	moveq	r3, #1
 8009b0c:	2300      	movne	r3, #0
 8009b0e:	b2db      	uxtb	r3, r3
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	f000 80c8 	beq.w	8009ca6 <cppLoop+0x20fe>
			HAL_Delay(500);
 8009b16:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009b1a:	f000 f9f9 	bl	8009f10 <HAL_Delay>

			led.LR(1, -1);
 8009b1e:	f04f 32ff 	mov.w	r2, #4294967295
 8009b22:	2101      	movs	r1, #1
 8009b24:	4865      	ldr	r0, [pc, #404]	; (8009cbc <cppLoop+0x2114>)
 8009b26:	f7f8 fbd1 	bl	80022cc <_ZN3LED2LREaa>
			line_trace.setMode(THIRD_RUNNING);
 8009b2a:	2102      	movs	r1, #2
 8009b2c:	4868      	ldr	r0, [pc, #416]	; (8009cd0 <cppLoop+0x2128>)
 8009b2e:	f7fa facd 	bl	80040cc <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity2);
 8009b32:	4b68      	ldr	r3, [pc, #416]	; (8009cd4 <cppLoop+0x212c>)
 8009b34:	edd3 7a00 	vldr	s15, [r3]
 8009b38:	eeb0 0a67 	vmov.f32	s0, s15
 8009b3c:	4864      	ldr	r0, [pc, #400]	; (8009cd0 <cppLoop+0x2128>)
 8009b3e:	f7fa f8e2 	bl	8003d06 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity2);
 8009b42:	4b60      	ldr	r3, [pc, #384]	; (8009cc4 <cppLoop+0x211c>)
 8009b44:	edd3 7a00 	vldr	s15, [r3]
 8009b48:	eeb0 0a67 	vmov.f32	s0, s15
 8009b4c:	4860      	ldr	r0, [pc, #384]	; (8009cd0 <cppLoop+0x2128>)
 8009b4e:	f7fa f8ea 	bl	8003d26 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_max_velocity2);
 8009b52:	4b5c      	ldr	r3, [pc, #368]	; (8009cc4 <cppLoop+0x211c>)
 8009b54:	edd3 7a00 	vldr	s15, [r3]
 8009b58:	eeb0 0a67 	vmov.f32	s0, s15
 8009b5c:	485c      	ldr	r0, [pc, #368]	; (8009cd0 <cppLoop+0x2128>)
 8009b5e:	f7fa f902 	bl	8003d66 <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 8009b62:	485b      	ldr	r0, [pc, #364]	; (8009cd0 <cppLoop+0x2128>)
 8009b64:	f7fa fdbc 	bl	80046e0 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			HAL_Delay(1000);
 8009b68:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009b6c:	f000 f9d0 	bl	8009f10 <HAL_Delay>

			line_trace.running();
 8009b70:	4857      	ldr	r0, [pc, #348]	; (8009cd0 <cppLoop+0x2128>)
 8009b72:	f7fa faef 	bl	8004154 <_ZN9LineTrace7runningEv>
			logger.stop();
 8009b76:	4858      	ldr	r0, [pc, #352]	; (8009cd8 <cppLoop+0x2130>)
 8009b78:	f7fb f98a 	bl	8004e90 <_ZN6Logger4stopEv>
			logger.saveLogs("STATELOG", "TARVEL.txt");
 8009b7c:	4a57      	ldr	r2, [pc, #348]	; (8009cdc <cppLoop+0x2134>)
 8009b7e:	4958      	ldr	r1, [pc, #352]	; (8009ce0 <cppLoop+0x2138>)
 8009b80:	4855      	ldr	r0, [pc, #340]	; (8009cd8 <cppLoop+0x2130>)
 8009b82:	f7fb f81e 	bl	8004bc2 <_ZN6Logger8saveLogsEPKcS1_>
			logger.saveLogs2("STATELOG", "CURVEL.txt");
 8009b86:	4a57      	ldr	r2, [pc, #348]	; (8009ce4 <cppLoop+0x213c>)
 8009b88:	4955      	ldr	r1, [pc, #340]	; (8009ce0 <cppLoop+0x2138>)
 8009b8a:	4853      	ldr	r0, [pc, #332]	; (8009cd8 <cppLoop+0x2130>)
 8009b8c:	f7fb f82d 	bl	8004bea <_ZN6Logger9saveLogs2EPKcS1_>

			led.LR(0, -1);
 8009b90:	f04f 32ff 	mov.w	r2, #4294967295
 8009b94:	2100      	movs	r1, #0
 8009b96:	4849      	ldr	r0, [pc, #292]	; (8009cbc <cppLoop+0x2114>)
 8009b98:	f7f8 fb98 	bl	80022cc <_ZN3LED2LREaa>
			sys_ident.inOutputSave();

			led.LR(-1, 0);
		}
		*/
		break;
 8009b9c:	e083      	b.n	8009ca6 <cppLoop+0x20fe>

	case 15:
		led.fullColor('W');
 8009b9e:	2157      	movs	r1, #87	; 0x57
 8009ba0:	4846      	ldr	r0, [pc, #280]	; (8009cbc <cppLoop+0x2114>)
 8009ba2:	f7f8 fad7 	bl	8002154 <_ZN3LED9fullColorEc>

		lcd_clear();
 8009ba6:	f7f7 fa7b 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8009baa:	2100      	movs	r1, #0
 8009bac:	2000      	movs	r0, #0
 8009bae:	f7f7 fa87 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun1    ");
 8009bb2:	484d      	ldr	r0, [pc, #308]	; (8009ce8 <cppLoop+0x2140>)
 8009bb4:	f7f7 faae 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009bb8:	2101      	movs	r1, #1
 8009bba:	2000      	movs	r0, #0
 8009bbc:	f7f7 fa80 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity);
 8009bc0:	4b4a      	ldr	r3, [pc, #296]	; (8009cec <cppLoop+0x2144>)
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	f7f6 fcd7 	bl	8000578 <__aeabi_f2d>
 8009bca:	4603      	mov	r3, r0
 8009bcc:	460c      	mov	r4, r1
 8009bce:	461a      	mov	r2, r3
 8009bd0:	4623      	mov	r3, r4
 8009bd2:	483d      	ldr	r0, [pc, #244]	; (8009cc8 <cppLoop+0x2120>)
 8009bd4:	f7f7 fa9e 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8009bd8:	483c      	ldr	r0, [pc, #240]	; (8009ccc <cppLoop+0x2124>)
 8009bda:	f7f8 fa57 	bl	800208c <_ZN8JoyStick8getValueEv>
 8009bde:	4603      	mov	r3, r0
 8009be0:	2b02      	cmp	r3, #2
 8009be2:	bf0c      	ite	eq
 8009be4:	2301      	moveq	r3, #1
 8009be6:	2300      	movne	r3, #0
 8009be8:	b2db      	uxtb	r3, r3
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d05d      	beq.n	8009caa <cppLoop+0x2102>
			HAL_Delay(500);
 8009bee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009bf2:	f000 f98d 	bl	8009f10 <HAL_Delay>

			led.LR(1, -1);
 8009bf6:	f04f 32ff 	mov.w	r2, #4294967295
 8009bfa:	2101      	movs	r1, #1
 8009bfc:	482f      	ldr	r0, [pc, #188]	; (8009cbc <cppLoop+0x2114>)
 8009bfe:	f7f8 fb65 	bl	80022cc <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 8009c02:	2101      	movs	r1, #1
 8009c04:	4832      	ldr	r0, [pc, #200]	; (8009cd0 <cppLoop+0x2128>)
 8009c06:	f7fa fa61 	bl	80040cc <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity);
 8009c0a:	4b39      	ldr	r3, [pc, #228]	; (8009cf0 <cppLoop+0x2148>)
 8009c0c:	edd3 7a00 	vldr	s15, [r3]
 8009c10:	eeb0 0a67 	vmov.f32	s0, s15
 8009c14:	482e      	ldr	r0, [pc, #184]	; (8009cd0 <cppLoop+0x2128>)
 8009c16:	f7fa f876 	bl	8003d06 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 8009c1a:	4b34      	ldr	r3, [pc, #208]	; (8009cec <cppLoop+0x2144>)
 8009c1c:	edd3 7a00 	vldr	s15, [r3]
 8009c20:	eeb0 0a67 	vmov.f32	s0, s15
 8009c24:	482a      	ldr	r0, [pc, #168]	; (8009cd0 <cppLoop+0x2128>)
 8009c26:	f7fa f87e 	bl	8003d26 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 8009c2a:	4b31      	ldr	r3, [pc, #196]	; (8009cf0 <cppLoop+0x2148>)
 8009c2c:	edd3 7a00 	vldr	s15, [r3]
 8009c30:	eeb0 0a67 	vmov.f32	s0, s15
 8009c34:	4826      	ldr	r0, [pc, #152]	; (8009cd0 <cppLoop+0x2128>)
 8009c36:	f7fa f896 	bl	8003d66 <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 8009c3a:	4825      	ldr	r0, [pc, #148]	; (8009cd0 <cppLoop+0x2128>)
 8009c3c:	f7fa fd50 	bl	80046e0 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			HAL_Delay(1000);
 8009c40:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009c44:	f000 f964 	bl	8009f10 <HAL_Delay>

			line_trace.running();
 8009c48:	4821      	ldr	r0, [pc, #132]	; (8009cd0 <cppLoop+0x2128>)
 8009c4a:	f7fa fa83 	bl	8004154 <_ZN9LineTrace7runningEv>

			logger.stop();
 8009c4e:	4822      	ldr	r0, [pc, #136]	; (8009cd8 <cppLoop+0x2130>)
 8009c50:	f7fb f91e 	bl	8004e90 <_ZN6Logger4stopEv>
			logger.saveLogs("STATELOG", "TARVEL.txt");
 8009c54:	4a21      	ldr	r2, [pc, #132]	; (8009cdc <cppLoop+0x2134>)
 8009c56:	4922      	ldr	r1, [pc, #136]	; (8009ce0 <cppLoop+0x2138>)
 8009c58:	481f      	ldr	r0, [pc, #124]	; (8009cd8 <cppLoop+0x2130>)
 8009c5a:	f7fa ffb2 	bl	8004bc2 <_ZN6Logger8saveLogsEPKcS1_>
			logger.saveLogs2("STATELOG", "CURVEL.txt");
 8009c5e:	4a21      	ldr	r2, [pc, #132]	; (8009ce4 <cppLoop+0x213c>)
 8009c60:	491f      	ldr	r1, [pc, #124]	; (8009ce0 <cppLoop+0x2138>)
 8009c62:	481d      	ldr	r0, [pc, #116]	; (8009cd8 <cppLoop+0x2130>)
 8009c64:	f7fa ffc1 	bl	8004bea <_ZN6Logger9saveLogs2EPKcS1_>
;

			led.LR(0, -1);
 8009c68:	f04f 32ff 	mov.w	r2, #4294967295
 8009c6c:	2100      	movs	r1, #0
 8009c6e:	4813      	ldr	r0, [pc, #76]	; (8009cbc <cppLoop+0x2114>)
 8009c70:	f7f8 fb2c 	bl	80022cc <_ZN3LED2LREaa>
		}

		break;
 8009c74:	e019      	b.n	8009caa <cppLoop+0x2102>


	default:
		break;
 8009c76:	bf00      	nop
 8009c78:	e018      	b.n	8009cac <cppLoop+0x2104>
		break;
 8009c7a:	bf00      	nop
 8009c7c:	e016      	b.n	8009cac <cppLoop+0x2104>
		break;
 8009c7e:	bf00      	nop
 8009c80:	e014      	b.n	8009cac <cppLoop+0x2104>
		break;
 8009c82:	bf00      	nop
 8009c84:	e012      	b.n	8009cac <cppLoop+0x2104>
		break;
 8009c86:	bf00      	nop
 8009c88:	e010      	b.n	8009cac <cppLoop+0x2104>
		break;
 8009c8a:	bf00      	nop
 8009c8c:	e00e      	b.n	8009cac <cppLoop+0x2104>
		break;
 8009c8e:	bf00      	nop
 8009c90:	e00c      	b.n	8009cac <cppLoop+0x2104>
		break;
 8009c92:	bf00      	nop
 8009c94:	e00a      	b.n	8009cac <cppLoop+0x2104>
		break;
 8009c96:	bf00      	nop
 8009c98:	e008      	b.n	8009cac <cppLoop+0x2104>
		break;
 8009c9a:	bf00      	nop
 8009c9c:	e006      	b.n	8009cac <cppLoop+0x2104>
		break;
 8009c9e:	bf00      	nop
 8009ca0:	e004      	b.n	8009cac <cppLoop+0x2104>
		break;
 8009ca2:	bf00      	nop
 8009ca4:	e002      	b.n	8009cac <cppLoop+0x2104>
		break;
 8009ca6:	bf00      	nop
 8009ca8:	e000      	b.n	8009cac <cppLoop+0x2104>
		break;
 8009caa:	bf00      	nop

	}

	HAL_Delay(30);
 8009cac:	201e      	movs	r0, #30
 8009cae:	f000 f92f 	bl	8009f10 <HAL_Delay>

}
 8009cb2:	bf00      	nop
 8009cb4:	370c      	adds	r7, #12
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009cba:	bf00      	nop
 8009cbc:	20000558 	.word	0x20000558
 8009cc0:	08019154 	.word	0x08019154
 8009cc4:	20045294 	.word	0x20045294
 8009cc8:	08018ff4 	.word	0x08018ff4
 8009ccc:	2000054c 	.word	0x2000054c
 8009cd0:	200209d4 	.word	0x200209d4
 8009cd4:	200452a4 	.word	0x200452a4
 8009cd8:	2000057c 	.word	0x2000057c
 8009cdc:	08019000 	.word	0x08019000
 8009ce0:	0801900c 	.word	0x0801900c
 8009ce4:	08019018 	.word	0x08019018
 8009ce8:	08019160 	.word	0x08019160
 8009cec:	2004528c 	.word	0x2004528c
 8009cf0:	2004529c 	.word	0x2004529c

08009cf4 <_Z41__static_initialization_and_destruction_0ii>:

void prameterSttingMode()
{

}
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b088      	sub	sp, #32
 8009cf8:	af06      	add	r7, sp, #24
 8009cfa:	6078      	str	r0, [r7, #4]
 8009cfc:	6039      	str	r1, [r7, #0]
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	2b01      	cmp	r3, #1
 8009d02:	d142      	bne.n	8009d8a <_Z41__static_initialization_and_destruction_0ii+0x96>
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009d0a:	4293      	cmp	r3, r2
 8009d0c:	d13d      	bne.n	8009d8a <_Z41__static_initialization_and_destruction_0ii+0x96>
LineSensor line_sensor;
 8009d0e:	4821      	ldr	r0, [pc, #132]	; (8009d94 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8009d10:	f7f8 fb14 	bl	800233c <_ZN10LineSensorC1Ev>
SideSensor side_sensor;
 8009d14:	4820      	ldr	r0, [pc, #128]	; (8009d98 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8009d16:	f7fb fbdf 	bl	80054d8 <_ZN10SideSensorC1Ev>
JoyStick joy_stick;
 8009d1a:	4820      	ldr	r0, [pc, #128]	; (8009d9c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8009d1c:	f7f8 f9aa 	bl	8002074 <_ZN8JoyStickC1Ev>
Motor motor;
 8009d20:	481f      	ldr	r0, [pc, #124]	; (8009da0 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009d22:	f7fb f8c6 	bl	8004eb2 <_ZN5MotorC1Ev>
IMU imu;
 8009d26:	481f      	ldr	r0, [pc, #124]	; (8009da4 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009d28:	f7f7 ffb0 	bl	8001c8c <_ZN3IMUC1Ev>
Logger logger;
 8009d2c:	481e      	ldr	r0, [pc, #120]	; (8009da8 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8009d2e:	f7fa fdc7 	bl	80048c0 <_ZN6LoggerC1Ev>
Encoder encoder;
 8009d32:	481e      	ldr	r0, [pc, #120]	; (8009dac <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009d34:	f7f7 fb4a 	bl	80013cc <_ZN7EncoderC1Ev>
VelocityCtrl velocity_ctrl(&motor, &encoder, &imu);
 8009d38:	4b1a      	ldr	r3, [pc, #104]	; (8009da4 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009d3a:	4a1c      	ldr	r2, [pc, #112]	; (8009dac <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009d3c:	4918      	ldr	r1, [pc, #96]	; (8009da0 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009d3e:	481c      	ldr	r0, [pc, #112]	; (8009db0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8009d40:	f7fb fec4 	bl	8005acc <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>
Odometry odometry(&encoder, &imu, &velocity_ctrl);
 8009d44:	4b1a      	ldr	r3, [pc, #104]	; (8009db0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8009d46:	4a17      	ldr	r2, [pc, #92]	; (8009da4 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009d48:	4918      	ldr	r1, [pc, #96]	; (8009dac <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009d4a:	481a      	ldr	r0, [pc, #104]	; (8009db4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8009d4c:	f7fb f996 	bl	800507c <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>
ESC esc;
 8009d50:	4819      	ldr	r0, [pc, #100]	; (8009db8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8009d52:	f7f7 fa3f 	bl	80011d4 <_ZN3ESCC1Ev>
LineTrace line_trace(&motor, &line_sensor, &velocity_ctrl, &side_sensor, &encoder, &odometry, &logger, &imu, &esc);
 8009d56:	4b18      	ldr	r3, [pc, #96]	; (8009db8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8009d58:	9305      	str	r3, [sp, #20]
 8009d5a:	4b12      	ldr	r3, [pc, #72]	; (8009da4 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009d5c:	9304      	str	r3, [sp, #16]
 8009d5e:	4b12      	ldr	r3, [pc, #72]	; (8009da8 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8009d60:	9303      	str	r3, [sp, #12]
 8009d62:	4b14      	ldr	r3, [pc, #80]	; (8009db4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8009d64:	9302      	str	r3, [sp, #8]
 8009d66:	4b11      	ldr	r3, [pc, #68]	; (8009dac <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009d68:	9301      	str	r3, [sp, #4]
 8009d6a:	4b0b      	ldr	r3, [pc, #44]	; (8009d98 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8009d6c:	9300      	str	r3, [sp, #0]
 8009d6e:	4b10      	ldr	r3, [pc, #64]	; (8009db0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8009d70:	4a08      	ldr	r2, [pc, #32]	; (8009d94 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8009d72:	490b      	ldr	r1, [pc, #44]	; (8009da0 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009d74:	4811      	ldr	r0, [pc, #68]	; (8009dbc <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8009d76:	f7f8 fdbf 	bl	80028f8 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC>
SystemIdentification sys_ident(&logger, &motor);
 8009d7a:	4a09      	ldr	r2, [pc, #36]	; (8009da0 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009d7c:	490a      	ldr	r1, [pc, #40]	; (8009da8 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8009d7e:	4810      	ldr	r0, [pc, #64]	; (8009dc0 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8009d80:	f7fb fcdc 	bl	800573c <_ZN20SystemIdentificationC1EP6LoggerP5Motor>
PathFollowing path_following;
 8009d84:	480f      	ldr	r0, [pc, #60]	; (8009dc4 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8009d86:	f7fb fa37 	bl	80051f8 <_ZN13PathFollowingC1Ev>
}
 8009d8a:	bf00      	nop
 8009d8c:	3708      	adds	r7, #8
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bd80      	pop	{r7, pc}
 8009d92:	bf00      	nop
 8009d94:	20000244 	.word	0x20000244
 8009d98:	2000053c 	.word	0x2000053c
 8009d9c:	2000054c 	.word	0x2000054c
 8009da0:	20000554 	.word	0x20000554
 8009da4:	20000568 	.word	0x20000568
 8009da8:	2000057c 	.word	0x2000057c
 8009dac:	20020928 	.word	0x20020928
 8009db0:	20020950 	.word	0x20020950
 8009db4:	20020990 	.word	0x20020990
 8009db8:	200209d0 	.word	0x200209d0
 8009dbc:	200209d4 	.word	0x200209d4
 8009dc0:	2002d914 	.word	0x2002d914
 8009dc4:	2002db20 	.word	0x2002db20

08009dc8 <_GLOBAL__sub_I_line_sensor>:
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	af00      	add	r7, sp, #0
 8009dcc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009dd0:	2001      	movs	r0, #1
 8009dd2:	f7ff ff8f 	bl	8009cf4 <_Z41__static_initialization_and_destruction_0ii>
 8009dd6:	bd80      	pop	{r7, pc}

08009dd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8009dd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009e10 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8009ddc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8009dde:	e003      	b.n	8009de8 <LoopCopyDataInit>

08009de0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8009de0:	4b0c      	ldr	r3, [pc, #48]	; (8009e14 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8009de2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8009de4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8009de6:	3104      	adds	r1, #4

08009de8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8009de8:	480b      	ldr	r0, [pc, #44]	; (8009e18 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8009dea:	4b0c      	ldr	r3, [pc, #48]	; (8009e1c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8009dec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8009dee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009df0:	d3f6      	bcc.n	8009de0 <CopyDataInit>
  ldr  r2, =_sbss
 8009df2:	4a0b      	ldr	r2, [pc, #44]	; (8009e20 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8009df4:	e002      	b.n	8009dfc <LoopFillZerobss>

08009df6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8009df6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8009df8:	f842 3b04 	str.w	r3, [r2], #4

08009dfc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8009dfc:	4b09      	ldr	r3, [pc, #36]	; (8009e24 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8009dfe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009e00:	d3f9      	bcc.n	8009df6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8009e02:	f7fd fda5 	bl	8007950 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009e06:	f00a fd95 	bl	8014934 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009e0a:	f7fc f8bd 	bl	8005f88 <main>
  bx  lr    
 8009e0e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8009e10:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8009e14:	08019580 	.word	0x08019580
  ldr  r0, =_sdata
 8009e18:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8009e1c:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8009e20:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8009e24:	20049ca8 	.word	0x20049ca8

08009e28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009e28:	e7fe      	b.n	8009e28 <ADC_IRQHandler>
	...

08009e2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009e30:	4b0e      	ldr	r3, [pc, #56]	; (8009e6c <HAL_Init+0x40>)
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	4a0d      	ldr	r2, [pc, #52]	; (8009e6c <HAL_Init+0x40>)
 8009e36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009e3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8009e3c:	4b0b      	ldr	r3, [pc, #44]	; (8009e6c <HAL_Init+0x40>)
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	4a0a      	ldr	r2, [pc, #40]	; (8009e6c <HAL_Init+0x40>)
 8009e42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009e46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009e48:	4b08      	ldr	r3, [pc, #32]	; (8009e6c <HAL_Init+0x40>)
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	4a07      	ldr	r2, [pc, #28]	; (8009e6c <HAL_Init+0x40>)
 8009e4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009e54:	2003      	movs	r0, #3
 8009e56:	f000 fd51 	bl	800a8fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009e5a:	2000      	movs	r0, #0
 8009e5c:	f000 f808 	bl	8009e70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009e60:	f7fc ffb6 	bl	8006dd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009e64:	2300      	movs	r3, #0
}
 8009e66:	4618      	mov	r0, r3
 8009e68:	bd80      	pop	{r7, pc}
 8009e6a:	bf00      	nop
 8009e6c:	40023c00 	.word	0x40023c00

08009e70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b082      	sub	sp, #8
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009e78:	4b12      	ldr	r3, [pc, #72]	; (8009ec4 <HAL_InitTick+0x54>)
 8009e7a:	681a      	ldr	r2, [r3, #0]
 8009e7c:	4b12      	ldr	r3, [pc, #72]	; (8009ec8 <HAL_InitTick+0x58>)
 8009e7e:	781b      	ldrb	r3, [r3, #0]
 8009e80:	4619      	mov	r1, r3
 8009e82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009e86:	fbb3 f3f1 	udiv	r3, r3, r1
 8009e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e8e:	4618      	mov	r0, r3
 8009e90:	f000 fd69 	bl	800a966 <HAL_SYSTICK_Config>
 8009e94:	4603      	mov	r3, r0
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d001      	beq.n	8009e9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8009e9a:	2301      	movs	r3, #1
 8009e9c:	e00e      	b.n	8009ebc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2b0f      	cmp	r3, #15
 8009ea2:	d80a      	bhi.n	8009eba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	6879      	ldr	r1, [r7, #4]
 8009ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8009eac:	f000 fd31 	bl	800a912 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009eb0:	4a06      	ldr	r2, [pc, #24]	; (8009ecc <HAL_InitTick+0x5c>)
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	e000      	b.n	8009ebc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8009eba:	2301      	movs	r3, #1
}
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	3708      	adds	r7, #8
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	bd80      	pop	{r7, pc}
 8009ec4:	20000000 	.word	0x20000000
 8009ec8:	20000008 	.word	0x20000008
 8009ecc:	20000004 	.word	0x20000004

08009ed0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009ed0:	b480      	push	{r7}
 8009ed2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009ed4:	4b06      	ldr	r3, [pc, #24]	; (8009ef0 <HAL_IncTick+0x20>)
 8009ed6:	781b      	ldrb	r3, [r3, #0]
 8009ed8:	461a      	mov	r2, r3
 8009eda:	4b06      	ldr	r3, [pc, #24]	; (8009ef4 <HAL_IncTick+0x24>)
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	4413      	add	r3, r2
 8009ee0:	4a04      	ldr	r2, [pc, #16]	; (8009ef4 <HAL_IncTick+0x24>)
 8009ee2:	6013      	str	r3, [r2, #0]
}
 8009ee4:	bf00      	nop
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eec:	4770      	bx	lr
 8009eee:	bf00      	nop
 8009ef0:	20000008 	.word	0x20000008
 8009ef4:	20047c30 	.word	0x20047c30

08009ef8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009ef8:	b480      	push	{r7}
 8009efa:	af00      	add	r7, sp, #0
  return uwTick;
 8009efc:	4b03      	ldr	r3, [pc, #12]	; (8009f0c <HAL_GetTick+0x14>)
 8009efe:	681b      	ldr	r3, [r3, #0]
}
 8009f00:	4618      	mov	r0, r3
 8009f02:	46bd      	mov	sp, r7
 8009f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f08:	4770      	bx	lr
 8009f0a:	bf00      	nop
 8009f0c:	20047c30 	.word	0x20047c30

08009f10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b084      	sub	sp, #16
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009f18:	f7ff ffee 	bl	8009ef8 <HAL_GetTick>
 8009f1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f28:	d005      	beq.n	8009f36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009f2a:	4b09      	ldr	r3, [pc, #36]	; (8009f50 <HAL_Delay+0x40>)
 8009f2c:	781b      	ldrb	r3, [r3, #0]
 8009f2e:	461a      	mov	r2, r3
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	4413      	add	r3, r2
 8009f34:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8009f36:	bf00      	nop
 8009f38:	f7ff ffde 	bl	8009ef8 <HAL_GetTick>
 8009f3c:	4602      	mov	r2, r0
 8009f3e:	68bb      	ldr	r3, [r7, #8]
 8009f40:	1ad3      	subs	r3, r2, r3
 8009f42:	68fa      	ldr	r2, [r7, #12]
 8009f44:	429a      	cmp	r2, r3
 8009f46:	d8f7      	bhi.n	8009f38 <HAL_Delay+0x28>
  {
  }
}
 8009f48:	bf00      	nop
 8009f4a:	3710      	adds	r7, #16
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bd80      	pop	{r7, pc}
 8009f50:	20000008 	.word	0x20000008

08009f54 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b084      	sub	sp, #16
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d101      	bne.n	8009f6a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8009f66:	2301      	movs	r3, #1
 8009f68:	e033      	b.n	8009fd2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d109      	bne.n	8009f86 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	f7fc ff54 	bl	8006e20 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	2200      	movs	r2, #0
 8009f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f8a:	f003 0310 	and.w	r3, r3, #16
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d118      	bne.n	8009fc4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f96:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8009f9a:	f023 0302 	bic.w	r3, r3, #2
 8009f9e:	f043 0202 	orr.w	r2, r3, #2
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8009fa6:	6878      	ldr	r0, [r7, #4]
 8009fa8:	f000 fa5a 	bl	800a460 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2200      	movs	r2, #0
 8009fb0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fb6:	f023 0303 	bic.w	r3, r3, #3
 8009fba:	f043 0201 	orr.w	r2, r3, #1
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	641a      	str	r2, [r3, #64]	; 0x40
 8009fc2:	e001      	b.n	8009fc8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8009fc4:	2301      	movs	r3, #1
 8009fc6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2200      	movs	r2, #0
 8009fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8009fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	3710      	adds	r7, #16
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bd80      	pop	{r7, pc}
	...

08009fdc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b086      	sub	sp, #24
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	60f8      	str	r0, [r7, #12]
 8009fe4:	60b9      	str	r1, [r7, #8]
 8009fe6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8009fe8:	2300      	movs	r3, #0
 8009fea:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ff2:	2b01      	cmp	r3, #1
 8009ff4:	d101      	bne.n	8009ffa <HAL_ADC_Start_DMA+0x1e>
 8009ff6:	2302      	movs	r3, #2
 8009ff8:	e0cc      	b.n	800a194 <HAL_ADC_Start_DMA+0x1b8>
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	2201      	movs	r2, #1
 8009ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	689b      	ldr	r3, [r3, #8]
 800a008:	f003 0301 	and.w	r3, r3, #1
 800a00c:	2b01      	cmp	r3, #1
 800a00e:	d018      	beq.n	800a042 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	689a      	ldr	r2, [r3, #8]
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	f042 0201 	orr.w	r2, r2, #1
 800a01e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800a020:	4b5e      	ldr	r3, [pc, #376]	; (800a19c <HAL_ADC_Start_DMA+0x1c0>)
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	4a5e      	ldr	r2, [pc, #376]	; (800a1a0 <HAL_ADC_Start_DMA+0x1c4>)
 800a026:	fba2 2303 	umull	r2, r3, r2, r3
 800a02a:	0c9a      	lsrs	r2, r3, #18
 800a02c:	4613      	mov	r3, r2
 800a02e:	005b      	lsls	r3, r3, #1
 800a030:	4413      	add	r3, r2
 800a032:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800a034:	e002      	b.n	800a03c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800a036:	693b      	ldr	r3, [r7, #16]
 800a038:	3b01      	subs	r3, #1
 800a03a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800a03c:	693b      	ldr	r3, [r7, #16]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d1f9      	bne.n	800a036 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	689b      	ldr	r3, [r3, #8]
 800a048:	f003 0301 	and.w	r3, r3, #1
 800a04c:	2b01      	cmp	r3, #1
 800a04e:	f040 80a0 	bne.w	800a192 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a056:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800a05a:	f023 0301 	bic.w	r3, r3, #1
 800a05e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	685b      	ldr	r3, [r3, #4]
 800a06c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a070:	2b00      	cmp	r3, #0
 800a072:	d007      	beq.n	800a084 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a078:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800a07c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a088:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a08c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a090:	d106      	bne.n	800a0a0 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a096:	f023 0206 	bic.w	r2, r3, #6
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	645a      	str	r2, [r3, #68]	; 0x44
 800a09e:	e002      	b.n	800a0a6 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a0ae:	4b3d      	ldr	r3, [pc, #244]	; (800a1a4 <HAL_ADC_Start_DMA+0x1c8>)
 800a0b0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0b6:	4a3c      	ldr	r2, [pc, #240]	; (800a1a8 <HAL_ADC_Start_DMA+0x1cc>)
 800a0b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0be:	4a3b      	ldr	r2, [pc, #236]	; (800a1ac <HAL_ADC_Start_DMA+0x1d0>)
 800a0c0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0c6:	4a3a      	ldr	r2, [pc, #232]	; (800a1b0 <HAL_ADC_Start_DMA+0x1d4>)
 800a0c8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800a0d2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	685a      	ldr	r2, [r3, #4]
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800a0e2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	689a      	ldr	r2, [r3, #8]
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a0f2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	334c      	adds	r3, #76	; 0x4c
 800a0fe:	4619      	mov	r1, r3
 800a100:	68ba      	ldr	r2, [r7, #8]
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	f000 fcea 	bl	800aadc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800a108:	697b      	ldr	r3, [r7, #20]
 800a10a:	685b      	ldr	r3, [r3, #4]
 800a10c:	f003 031f 	and.w	r3, r3, #31
 800a110:	2b00      	cmp	r3, #0
 800a112:	d12a      	bne.n	800a16a <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	4a26      	ldr	r2, [pc, #152]	; (800a1b4 <HAL_ADC_Start_DMA+0x1d8>)
 800a11a:	4293      	cmp	r3, r2
 800a11c:	d015      	beq.n	800a14a <HAL_ADC_Start_DMA+0x16e>
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	4a25      	ldr	r2, [pc, #148]	; (800a1b8 <HAL_ADC_Start_DMA+0x1dc>)
 800a124:	4293      	cmp	r3, r2
 800a126:	d105      	bne.n	800a134 <HAL_ADC_Start_DMA+0x158>
 800a128:	4b1e      	ldr	r3, [pc, #120]	; (800a1a4 <HAL_ADC_Start_DMA+0x1c8>)
 800a12a:	685b      	ldr	r3, [r3, #4]
 800a12c:	f003 031f 	and.w	r3, r3, #31
 800a130:	2b00      	cmp	r3, #0
 800a132:	d00a      	beq.n	800a14a <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	4a20      	ldr	r2, [pc, #128]	; (800a1bc <HAL_ADC_Start_DMA+0x1e0>)
 800a13a:	4293      	cmp	r3, r2
 800a13c:	d129      	bne.n	800a192 <HAL_ADC_Start_DMA+0x1b6>
 800a13e:	4b19      	ldr	r3, [pc, #100]	; (800a1a4 <HAL_ADC_Start_DMA+0x1c8>)
 800a140:	685b      	ldr	r3, [r3, #4]
 800a142:	f003 031f 	and.w	r3, r3, #31
 800a146:	2b0f      	cmp	r3, #15
 800a148:	d823      	bhi.n	800a192 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	689b      	ldr	r3, [r3, #8]
 800a150:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a154:	2b00      	cmp	r3, #0
 800a156:	d11c      	bne.n	800a192 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	689a      	ldr	r2, [r3, #8]
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800a166:	609a      	str	r2, [r3, #8]
 800a168:	e013      	b.n	800a192 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	4a11      	ldr	r2, [pc, #68]	; (800a1b4 <HAL_ADC_Start_DMA+0x1d8>)
 800a170:	4293      	cmp	r3, r2
 800a172:	d10e      	bne.n	800a192 <HAL_ADC_Start_DMA+0x1b6>
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	689b      	ldr	r3, [r3, #8]
 800a17a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d107      	bne.n	800a192 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	689a      	ldr	r2, [r3, #8]
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800a190:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800a192:	2300      	movs	r3, #0
}
 800a194:	4618      	mov	r0, r3
 800a196:	3718      	adds	r7, #24
 800a198:	46bd      	mov	sp, r7
 800a19a:	bd80      	pop	{r7, pc}
 800a19c:	20000000 	.word	0x20000000
 800a1a0:	431bde83 	.word	0x431bde83
 800a1a4:	40012300 	.word	0x40012300
 800a1a8:	0800a659 	.word	0x0800a659
 800a1ac:	0800a713 	.word	0x0800a713
 800a1b0:	0800a72f 	.word	0x0800a72f
 800a1b4:	40012000 	.word	0x40012000
 800a1b8:	40012100 	.word	0x40012100
 800a1bc:	40012200 	.word	0x40012200

0800a1c0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800a1c0:	b480      	push	{r7}
 800a1c2:	b083      	sub	sp, #12
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800a1c8:	bf00      	nop
 800a1ca:	370c      	adds	r7, #12
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d2:	4770      	bx	lr

0800a1d4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800a1d4:	b480      	push	{r7}
 800a1d6:	b083      	sub	sp, #12
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800a1dc:	bf00      	nop
 800a1de:	370c      	adds	r7, #12
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e6:	4770      	bx	lr

0800a1e8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800a1e8:	b480      	push	{r7}
 800a1ea:	b083      	sub	sp, #12
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800a1f0:	bf00      	nop
 800a1f2:	370c      	adds	r7, #12
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fa:	4770      	bx	lr

0800a1fc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800a1fc:	b480      	push	{r7}
 800a1fe:	b085      	sub	sp, #20
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
 800a204:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800a206:	2300      	movs	r3, #0
 800a208:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a210:	2b01      	cmp	r3, #1
 800a212:	d101      	bne.n	800a218 <HAL_ADC_ConfigChannel+0x1c>
 800a214:	2302      	movs	r3, #2
 800a216:	e113      	b.n	800a440 <HAL_ADC_ConfigChannel+0x244>
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2201      	movs	r2, #1
 800a21c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800a220:	683b      	ldr	r3, [r7, #0]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	2b09      	cmp	r3, #9
 800a226:	d925      	bls.n	800a274 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	68d9      	ldr	r1, [r3, #12]
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	b29b      	uxth	r3, r3
 800a234:	461a      	mov	r2, r3
 800a236:	4613      	mov	r3, r2
 800a238:	005b      	lsls	r3, r3, #1
 800a23a:	4413      	add	r3, r2
 800a23c:	3b1e      	subs	r3, #30
 800a23e:	2207      	movs	r2, #7
 800a240:	fa02 f303 	lsl.w	r3, r2, r3
 800a244:	43da      	mvns	r2, r3
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	400a      	ands	r2, r1
 800a24c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	68d9      	ldr	r1, [r3, #12]
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	689a      	ldr	r2, [r3, #8]
 800a258:	683b      	ldr	r3, [r7, #0]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	b29b      	uxth	r3, r3
 800a25e:	4618      	mov	r0, r3
 800a260:	4603      	mov	r3, r0
 800a262:	005b      	lsls	r3, r3, #1
 800a264:	4403      	add	r3, r0
 800a266:	3b1e      	subs	r3, #30
 800a268:	409a      	lsls	r2, r3
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	430a      	orrs	r2, r1
 800a270:	60da      	str	r2, [r3, #12]
 800a272:	e022      	b.n	800a2ba <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	6919      	ldr	r1, [r3, #16]
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	b29b      	uxth	r3, r3
 800a280:	461a      	mov	r2, r3
 800a282:	4613      	mov	r3, r2
 800a284:	005b      	lsls	r3, r3, #1
 800a286:	4413      	add	r3, r2
 800a288:	2207      	movs	r2, #7
 800a28a:	fa02 f303 	lsl.w	r3, r2, r3
 800a28e:	43da      	mvns	r2, r3
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	400a      	ands	r2, r1
 800a296:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	6919      	ldr	r1, [r3, #16]
 800a29e:	683b      	ldr	r3, [r7, #0]
 800a2a0:	689a      	ldr	r2, [r3, #8]
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	b29b      	uxth	r3, r3
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	005b      	lsls	r3, r3, #1
 800a2ae:	4403      	add	r3, r0
 800a2b0:	409a      	lsls	r2, r3
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	430a      	orrs	r2, r1
 800a2b8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	685b      	ldr	r3, [r3, #4]
 800a2be:	2b06      	cmp	r3, #6
 800a2c0:	d824      	bhi.n	800a30c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	685a      	ldr	r2, [r3, #4]
 800a2cc:	4613      	mov	r3, r2
 800a2ce:	009b      	lsls	r3, r3, #2
 800a2d0:	4413      	add	r3, r2
 800a2d2:	3b05      	subs	r3, #5
 800a2d4:	221f      	movs	r2, #31
 800a2d6:	fa02 f303 	lsl.w	r3, r2, r3
 800a2da:	43da      	mvns	r2, r3
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	400a      	ands	r2, r1
 800a2e2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	b29b      	uxth	r3, r3
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	685a      	ldr	r2, [r3, #4]
 800a2f6:	4613      	mov	r3, r2
 800a2f8:	009b      	lsls	r3, r3, #2
 800a2fa:	4413      	add	r3, r2
 800a2fc:	3b05      	subs	r3, #5
 800a2fe:	fa00 f203 	lsl.w	r2, r0, r3
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	430a      	orrs	r2, r1
 800a308:	635a      	str	r2, [r3, #52]	; 0x34
 800a30a:	e04c      	b.n	800a3a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	685b      	ldr	r3, [r3, #4]
 800a310:	2b0c      	cmp	r3, #12
 800a312:	d824      	bhi.n	800a35e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	685a      	ldr	r2, [r3, #4]
 800a31e:	4613      	mov	r3, r2
 800a320:	009b      	lsls	r3, r3, #2
 800a322:	4413      	add	r3, r2
 800a324:	3b23      	subs	r3, #35	; 0x23
 800a326:	221f      	movs	r2, #31
 800a328:	fa02 f303 	lsl.w	r3, r2, r3
 800a32c:	43da      	mvns	r2, r3
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	400a      	ands	r2, r1
 800a334:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	b29b      	uxth	r3, r3
 800a342:	4618      	mov	r0, r3
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	685a      	ldr	r2, [r3, #4]
 800a348:	4613      	mov	r3, r2
 800a34a:	009b      	lsls	r3, r3, #2
 800a34c:	4413      	add	r3, r2
 800a34e:	3b23      	subs	r3, #35	; 0x23
 800a350:	fa00 f203 	lsl.w	r2, r0, r3
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	430a      	orrs	r2, r1
 800a35a:	631a      	str	r2, [r3, #48]	; 0x30
 800a35c:	e023      	b.n	800a3a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	685a      	ldr	r2, [r3, #4]
 800a368:	4613      	mov	r3, r2
 800a36a:	009b      	lsls	r3, r3, #2
 800a36c:	4413      	add	r3, r2
 800a36e:	3b41      	subs	r3, #65	; 0x41
 800a370:	221f      	movs	r2, #31
 800a372:	fa02 f303 	lsl.w	r3, r2, r3
 800a376:	43da      	mvns	r2, r3
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	400a      	ands	r2, r1
 800a37e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	b29b      	uxth	r3, r3
 800a38c:	4618      	mov	r0, r3
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	685a      	ldr	r2, [r3, #4]
 800a392:	4613      	mov	r3, r2
 800a394:	009b      	lsls	r3, r3, #2
 800a396:	4413      	add	r3, r2
 800a398:	3b41      	subs	r3, #65	; 0x41
 800a39a:	fa00 f203 	lsl.w	r2, r0, r3
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	430a      	orrs	r2, r1
 800a3a4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a3a6:	4b29      	ldr	r3, [pc, #164]	; (800a44c <HAL_ADC_ConfigChannel+0x250>)
 800a3a8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	4a28      	ldr	r2, [pc, #160]	; (800a450 <HAL_ADC_ConfigChannel+0x254>)
 800a3b0:	4293      	cmp	r3, r2
 800a3b2:	d10f      	bne.n	800a3d4 <HAL_ADC_ConfigChannel+0x1d8>
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	2b12      	cmp	r3, #18
 800a3ba:	d10b      	bne.n	800a3d4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	685b      	ldr	r3, [r3, #4]
 800a3c0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	685b      	ldr	r3, [r3, #4]
 800a3cc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	4a1d      	ldr	r2, [pc, #116]	; (800a450 <HAL_ADC_ConfigChannel+0x254>)
 800a3da:	4293      	cmp	r3, r2
 800a3dc:	d12b      	bne.n	800a436 <HAL_ADC_ConfigChannel+0x23a>
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	4a1c      	ldr	r2, [pc, #112]	; (800a454 <HAL_ADC_ConfigChannel+0x258>)
 800a3e4:	4293      	cmp	r3, r2
 800a3e6:	d003      	beq.n	800a3f0 <HAL_ADC_ConfigChannel+0x1f4>
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	2b11      	cmp	r3, #17
 800a3ee:	d122      	bne.n	800a436 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	685b      	ldr	r3, [r3, #4]
 800a3f4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	685b      	ldr	r3, [r3, #4]
 800a400:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	4a11      	ldr	r2, [pc, #68]	; (800a454 <HAL_ADC_ConfigChannel+0x258>)
 800a40e:	4293      	cmp	r3, r2
 800a410:	d111      	bne.n	800a436 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800a412:	4b11      	ldr	r3, [pc, #68]	; (800a458 <HAL_ADC_ConfigChannel+0x25c>)
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	4a11      	ldr	r2, [pc, #68]	; (800a45c <HAL_ADC_ConfigChannel+0x260>)
 800a418:	fba2 2303 	umull	r2, r3, r2, r3
 800a41c:	0c9a      	lsrs	r2, r3, #18
 800a41e:	4613      	mov	r3, r2
 800a420:	009b      	lsls	r3, r3, #2
 800a422:	4413      	add	r3, r2
 800a424:	005b      	lsls	r3, r3, #1
 800a426:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800a428:	e002      	b.n	800a430 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800a42a:	68bb      	ldr	r3, [r7, #8]
 800a42c:	3b01      	subs	r3, #1
 800a42e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800a430:	68bb      	ldr	r3, [r7, #8]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d1f9      	bne.n	800a42a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	2200      	movs	r2, #0
 800a43a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800a43e:	2300      	movs	r3, #0
}
 800a440:	4618      	mov	r0, r3
 800a442:	3714      	adds	r7, #20
 800a444:	46bd      	mov	sp, r7
 800a446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44a:	4770      	bx	lr
 800a44c:	40012300 	.word	0x40012300
 800a450:	40012000 	.word	0x40012000
 800a454:	10000012 	.word	0x10000012
 800a458:	20000000 	.word	0x20000000
 800a45c:	431bde83 	.word	0x431bde83

0800a460 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800a460:	b480      	push	{r7}
 800a462:	b085      	sub	sp, #20
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a468:	4b79      	ldr	r3, [pc, #484]	; (800a650 <ADC_Init+0x1f0>)
 800a46a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	685b      	ldr	r3, [r3, #4]
 800a470:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	685a      	ldr	r2, [r3, #4]
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	685b      	ldr	r3, [r3, #4]
 800a480:	431a      	orrs	r2, r3
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	685a      	ldr	r2, [r3, #4]
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a494:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	6859      	ldr	r1, [r3, #4]
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	691b      	ldr	r3, [r3, #16]
 800a4a0:	021a      	lsls	r2, r3, #8
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	430a      	orrs	r2, r1
 800a4a8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	685a      	ldr	r2, [r3, #4]
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800a4b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	6859      	ldr	r1, [r3, #4]
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	689a      	ldr	r2, [r3, #8]
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	430a      	orrs	r2, r1
 800a4ca:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	689a      	ldr	r2, [r3, #8]
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a4da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	6899      	ldr	r1, [r3, #8]
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	68da      	ldr	r2, [r3, #12]
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	430a      	orrs	r2, r1
 800a4ec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4f2:	4a58      	ldr	r2, [pc, #352]	; (800a654 <ADC_Init+0x1f4>)
 800a4f4:	4293      	cmp	r3, r2
 800a4f6:	d022      	beq.n	800a53e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	689a      	ldr	r2, [r3, #8]
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a506:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	6899      	ldr	r1, [r3, #8]
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	430a      	orrs	r2, r1
 800a518:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	689a      	ldr	r2, [r3, #8]
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a528:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	6899      	ldr	r1, [r3, #8]
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	430a      	orrs	r2, r1
 800a53a:	609a      	str	r2, [r3, #8]
 800a53c:	e00f      	b.n	800a55e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	689a      	ldr	r2, [r3, #8]
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a54c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	689a      	ldr	r2, [r3, #8]
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a55c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	689a      	ldr	r2, [r3, #8]
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	f022 0202 	bic.w	r2, r2, #2
 800a56c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	6899      	ldr	r1, [r3, #8]
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	7e1b      	ldrb	r3, [r3, #24]
 800a578:	005a      	lsls	r2, r3, #1
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	430a      	orrs	r2, r1
 800a580:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d01b      	beq.n	800a5c4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	685a      	ldr	r2, [r3, #4]
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a59a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	685a      	ldr	r2, [r3, #4]
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800a5aa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	6859      	ldr	r1, [r3, #4]
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5b6:	3b01      	subs	r3, #1
 800a5b8:	035a      	lsls	r2, r3, #13
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	430a      	orrs	r2, r1
 800a5c0:	605a      	str	r2, [r3, #4]
 800a5c2:	e007      	b.n	800a5d4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	685a      	ldr	r2, [r3, #4]
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a5d2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800a5e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	69db      	ldr	r3, [r3, #28]
 800a5ee:	3b01      	subs	r3, #1
 800a5f0:	051a      	lsls	r2, r3, #20
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	430a      	orrs	r2, r1
 800a5f8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	689a      	ldr	r2, [r3, #8]
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a608:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	6899      	ldr	r1, [r3, #8]
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a616:	025a      	lsls	r2, r3, #9
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	430a      	orrs	r2, r1
 800a61e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	689a      	ldr	r2, [r3, #8]
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a62e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	6899      	ldr	r1, [r3, #8]
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	695b      	ldr	r3, [r3, #20]
 800a63a:	029a      	lsls	r2, r3, #10
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	430a      	orrs	r2, r1
 800a642:	609a      	str	r2, [r3, #8]
}
 800a644:	bf00      	nop
 800a646:	3714      	adds	r7, #20
 800a648:	46bd      	mov	sp, r7
 800a64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64e:	4770      	bx	lr
 800a650:	40012300 	.word	0x40012300
 800a654:	0f000001 	.word	0x0f000001

0800a658 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b084      	sub	sp, #16
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a664:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a66a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d13c      	bne.n	800a6ec <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a676:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	689b      	ldr	r3, [r3, #8]
 800a684:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d12b      	bne.n	800a6e4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a690:	2b00      	cmp	r3, #0
 800a692:	d127      	bne.n	800a6e4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a69a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d006      	beq.n	800a6b0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	689b      	ldr	r3, [r3, #8]
 800a6a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d119      	bne.n	800a6e4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	685a      	ldr	r2, [r3, #4]
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	f022 0220 	bic.w	r2, r2, #32
 800a6be:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6c4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d105      	bne.n	800a6e4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6dc:	f043 0201 	orr.w	r2, r3, #1
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800a6e4:	68f8      	ldr	r0, [r7, #12]
 800a6e6:	f7ff fd6b 	bl	800a1c0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800a6ea:	e00e      	b.n	800a70a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6f0:	f003 0310 	and.w	r3, r3, #16
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d003      	beq.n	800a700 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800a6f8:	68f8      	ldr	r0, [r7, #12]
 800a6fa:	f7ff fd75 	bl	800a1e8 <HAL_ADC_ErrorCallback>
}
 800a6fe:	e004      	b.n	800a70a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a706:	6878      	ldr	r0, [r7, #4]
 800a708:	4798      	blx	r3
}
 800a70a:	bf00      	nop
 800a70c:	3710      	adds	r7, #16
 800a70e:	46bd      	mov	sp, r7
 800a710:	bd80      	pop	{r7, pc}

0800a712 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800a712:	b580      	push	{r7, lr}
 800a714:	b084      	sub	sp, #16
 800a716:	af00      	add	r7, sp, #0
 800a718:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a71e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800a720:	68f8      	ldr	r0, [r7, #12]
 800a722:	f7ff fd57 	bl	800a1d4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a726:	bf00      	nop
 800a728:	3710      	adds	r7, #16
 800a72a:	46bd      	mov	sp, r7
 800a72c:	bd80      	pop	{r7, pc}

0800a72e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800a72e:	b580      	push	{r7, lr}
 800a730:	b084      	sub	sp, #16
 800a732:	af00      	add	r7, sp, #0
 800a734:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a73a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	2240      	movs	r2, #64	; 0x40
 800a740:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a746:	f043 0204 	orr.w	r2, r3, #4
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800a74e:	68f8      	ldr	r0, [r7, #12]
 800a750:	f7ff fd4a 	bl	800a1e8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a754:	bf00      	nop
 800a756:	3710      	adds	r7, #16
 800a758:	46bd      	mov	sp, r7
 800a75a:	bd80      	pop	{r7, pc}

0800a75c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a75c:	b480      	push	{r7}
 800a75e:	b085      	sub	sp, #20
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	f003 0307 	and.w	r3, r3, #7
 800a76a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a76c:	4b0c      	ldr	r3, [pc, #48]	; (800a7a0 <__NVIC_SetPriorityGrouping+0x44>)
 800a76e:	68db      	ldr	r3, [r3, #12]
 800a770:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a772:	68ba      	ldr	r2, [r7, #8]
 800a774:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a778:	4013      	ands	r3, r2
 800a77a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a780:	68bb      	ldr	r3, [r7, #8]
 800a782:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a784:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800a788:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a78c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a78e:	4a04      	ldr	r2, [pc, #16]	; (800a7a0 <__NVIC_SetPriorityGrouping+0x44>)
 800a790:	68bb      	ldr	r3, [r7, #8]
 800a792:	60d3      	str	r3, [r2, #12]
}
 800a794:	bf00      	nop
 800a796:	3714      	adds	r7, #20
 800a798:	46bd      	mov	sp, r7
 800a79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79e:	4770      	bx	lr
 800a7a0:	e000ed00 	.word	0xe000ed00

0800a7a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a7a4:	b480      	push	{r7}
 800a7a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a7a8:	4b04      	ldr	r3, [pc, #16]	; (800a7bc <__NVIC_GetPriorityGrouping+0x18>)
 800a7aa:	68db      	ldr	r3, [r3, #12]
 800a7ac:	0a1b      	lsrs	r3, r3, #8
 800a7ae:	f003 0307 	and.w	r3, r3, #7
}
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ba:	4770      	bx	lr
 800a7bc:	e000ed00 	.word	0xe000ed00

0800a7c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a7c0:	b480      	push	{r7}
 800a7c2:	b083      	sub	sp, #12
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a7ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	db0b      	blt.n	800a7ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a7d2:	79fb      	ldrb	r3, [r7, #7]
 800a7d4:	f003 021f 	and.w	r2, r3, #31
 800a7d8:	4907      	ldr	r1, [pc, #28]	; (800a7f8 <__NVIC_EnableIRQ+0x38>)
 800a7da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a7de:	095b      	lsrs	r3, r3, #5
 800a7e0:	2001      	movs	r0, #1
 800a7e2:	fa00 f202 	lsl.w	r2, r0, r2
 800a7e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800a7ea:	bf00      	nop
 800a7ec:	370c      	adds	r7, #12
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f4:	4770      	bx	lr
 800a7f6:	bf00      	nop
 800a7f8:	e000e100 	.word	0xe000e100

0800a7fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a7fc:	b480      	push	{r7}
 800a7fe:	b083      	sub	sp, #12
 800a800:	af00      	add	r7, sp, #0
 800a802:	4603      	mov	r3, r0
 800a804:	6039      	str	r1, [r7, #0]
 800a806:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	db0a      	blt.n	800a826 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	b2da      	uxtb	r2, r3
 800a814:	490c      	ldr	r1, [pc, #48]	; (800a848 <__NVIC_SetPriority+0x4c>)
 800a816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a81a:	0112      	lsls	r2, r2, #4
 800a81c:	b2d2      	uxtb	r2, r2
 800a81e:	440b      	add	r3, r1
 800a820:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a824:	e00a      	b.n	800a83c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a826:	683b      	ldr	r3, [r7, #0]
 800a828:	b2da      	uxtb	r2, r3
 800a82a:	4908      	ldr	r1, [pc, #32]	; (800a84c <__NVIC_SetPriority+0x50>)
 800a82c:	79fb      	ldrb	r3, [r7, #7]
 800a82e:	f003 030f 	and.w	r3, r3, #15
 800a832:	3b04      	subs	r3, #4
 800a834:	0112      	lsls	r2, r2, #4
 800a836:	b2d2      	uxtb	r2, r2
 800a838:	440b      	add	r3, r1
 800a83a:	761a      	strb	r2, [r3, #24]
}
 800a83c:	bf00      	nop
 800a83e:	370c      	adds	r7, #12
 800a840:	46bd      	mov	sp, r7
 800a842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a846:	4770      	bx	lr
 800a848:	e000e100 	.word	0xe000e100
 800a84c:	e000ed00 	.word	0xe000ed00

0800a850 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a850:	b480      	push	{r7}
 800a852:	b089      	sub	sp, #36	; 0x24
 800a854:	af00      	add	r7, sp, #0
 800a856:	60f8      	str	r0, [r7, #12]
 800a858:	60b9      	str	r1, [r7, #8]
 800a85a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	f003 0307 	and.w	r3, r3, #7
 800a862:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a864:	69fb      	ldr	r3, [r7, #28]
 800a866:	f1c3 0307 	rsb	r3, r3, #7
 800a86a:	2b04      	cmp	r3, #4
 800a86c:	bf28      	it	cs
 800a86e:	2304      	movcs	r3, #4
 800a870:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a872:	69fb      	ldr	r3, [r7, #28]
 800a874:	3304      	adds	r3, #4
 800a876:	2b06      	cmp	r3, #6
 800a878:	d902      	bls.n	800a880 <NVIC_EncodePriority+0x30>
 800a87a:	69fb      	ldr	r3, [r7, #28]
 800a87c:	3b03      	subs	r3, #3
 800a87e:	e000      	b.n	800a882 <NVIC_EncodePriority+0x32>
 800a880:	2300      	movs	r3, #0
 800a882:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a884:	f04f 32ff 	mov.w	r2, #4294967295
 800a888:	69bb      	ldr	r3, [r7, #24]
 800a88a:	fa02 f303 	lsl.w	r3, r2, r3
 800a88e:	43da      	mvns	r2, r3
 800a890:	68bb      	ldr	r3, [r7, #8]
 800a892:	401a      	ands	r2, r3
 800a894:	697b      	ldr	r3, [r7, #20]
 800a896:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a898:	f04f 31ff 	mov.w	r1, #4294967295
 800a89c:	697b      	ldr	r3, [r7, #20]
 800a89e:	fa01 f303 	lsl.w	r3, r1, r3
 800a8a2:	43d9      	mvns	r1, r3
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a8a8:	4313      	orrs	r3, r2
         );
}
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	3724      	adds	r7, #36	; 0x24
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b4:	4770      	bx	lr
	...

0800a8b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b082      	sub	sp, #8
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	3b01      	subs	r3, #1
 800a8c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a8c8:	d301      	bcc.n	800a8ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a8ca:	2301      	movs	r3, #1
 800a8cc:	e00f      	b.n	800a8ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a8ce:	4a0a      	ldr	r2, [pc, #40]	; (800a8f8 <SysTick_Config+0x40>)
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	3b01      	subs	r3, #1
 800a8d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a8d6:	210f      	movs	r1, #15
 800a8d8:	f04f 30ff 	mov.w	r0, #4294967295
 800a8dc:	f7ff ff8e 	bl	800a7fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a8e0:	4b05      	ldr	r3, [pc, #20]	; (800a8f8 <SysTick_Config+0x40>)
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a8e6:	4b04      	ldr	r3, [pc, #16]	; (800a8f8 <SysTick_Config+0x40>)
 800a8e8:	2207      	movs	r2, #7
 800a8ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a8ec:	2300      	movs	r3, #0
}
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	3708      	adds	r7, #8
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	bd80      	pop	{r7, pc}
 800a8f6:	bf00      	nop
 800a8f8:	e000e010 	.word	0xe000e010

0800a8fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b082      	sub	sp, #8
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a904:	6878      	ldr	r0, [r7, #4]
 800a906:	f7ff ff29 	bl	800a75c <__NVIC_SetPriorityGrouping>
}
 800a90a:	bf00      	nop
 800a90c:	3708      	adds	r7, #8
 800a90e:	46bd      	mov	sp, r7
 800a910:	bd80      	pop	{r7, pc}

0800a912 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a912:	b580      	push	{r7, lr}
 800a914:	b086      	sub	sp, #24
 800a916:	af00      	add	r7, sp, #0
 800a918:	4603      	mov	r3, r0
 800a91a:	60b9      	str	r1, [r7, #8]
 800a91c:	607a      	str	r2, [r7, #4]
 800a91e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a920:	2300      	movs	r3, #0
 800a922:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a924:	f7ff ff3e 	bl	800a7a4 <__NVIC_GetPriorityGrouping>
 800a928:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a92a:	687a      	ldr	r2, [r7, #4]
 800a92c:	68b9      	ldr	r1, [r7, #8]
 800a92e:	6978      	ldr	r0, [r7, #20]
 800a930:	f7ff ff8e 	bl	800a850 <NVIC_EncodePriority>
 800a934:	4602      	mov	r2, r0
 800a936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a93a:	4611      	mov	r1, r2
 800a93c:	4618      	mov	r0, r3
 800a93e:	f7ff ff5d 	bl	800a7fc <__NVIC_SetPriority>
}
 800a942:	bf00      	nop
 800a944:	3718      	adds	r7, #24
 800a946:	46bd      	mov	sp, r7
 800a948:	bd80      	pop	{r7, pc}

0800a94a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a94a:	b580      	push	{r7, lr}
 800a94c:	b082      	sub	sp, #8
 800a94e:	af00      	add	r7, sp, #0
 800a950:	4603      	mov	r3, r0
 800a952:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a958:	4618      	mov	r0, r3
 800a95a:	f7ff ff31 	bl	800a7c0 <__NVIC_EnableIRQ>
}
 800a95e:	bf00      	nop
 800a960:	3708      	adds	r7, #8
 800a962:	46bd      	mov	sp, r7
 800a964:	bd80      	pop	{r7, pc}

0800a966 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a966:	b580      	push	{r7, lr}
 800a968:	b082      	sub	sp, #8
 800a96a:	af00      	add	r7, sp, #0
 800a96c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f7ff ffa2 	bl	800a8b8 <SysTick_Config>
 800a974:	4603      	mov	r3, r0
}
 800a976:	4618      	mov	r0, r3
 800a978:	3708      	adds	r7, #8
 800a97a:	46bd      	mov	sp, r7
 800a97c:	bd80      	pop	{r7, pc}
	...

0800a980 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b086      	sub	sp, #24
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800a988:	2300      	movs	r3, #0
 800a98a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800a98c:	f7ff fab4 	bl	8009ef8 <HAL_GetTick>
 800a990:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d101      	bne.n	800a99c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800a998:	2301      	movs	r3, #1
 800a99a:	e099      	b.n	800aad0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2200      	movs	r2, #0
 800a9a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	2202      	movs	r2, #2
 800a9a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	681a      	ldr	r2, [r3, #0]
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	f022 0201 	bic.w	r2, r2, #1
 800a9ba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a9bc:	e00f      	b.n	800a9de <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a9be:	f7ff fa9b 	bl	8009ef8 <HAL_GetTick>
 800a9c2:	4602      	mov	r2, r0
 800a9c4:	693b      	ldr	r3, [r7, #16]
 800a9c6:	1ad3      	subs	r3, r2, r3
 800a9c8:	2b05      	cmp	r3, #5
 800a9ca:	d908      	bls.n	800a9de <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	2220      	movs	r2, #32
 800a9d0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	2203      	movs	r2, #3
 800a9d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800a9da:	2303      	movs	r3, #3
 800a9dc:	e078      	b.n	800aad0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	f003 0301 	and.w	r3, r3, #1
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d1e8      	bne.n	800a9be <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a9f4:	697a      	ldr	r2, [r7, #20]
 800a9f6:	4b38      	ldr	r3, [pc, #224]	; (800aad8 <HAL_DMA_Init+0x158>)
 800a9f8:	4013      	ands	r3, r2
 800a9fa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	685a      	ldr	r2, [r3, #4]
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	689b      	ldr	r3, [r3, #8]
 800aa04:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800aa0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	691b      	ldr	r3, [r3, #16]
 800aa10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800aa16:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	699b      	ldr	r3, [r3, #24]
 800aa1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800aa22:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	6a1b      	ldr	r3, [r3, #32]
 800aa28:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800aa2a:	697a      	ldr	r2, [r7, #20]
 800aa2c:	4313      	orrs	r3, r2
 800aa2e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa34:	2b04      	cmp	r3, #4
 800aa36:	d107      	bne.n	800aa48 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa40:	4313      	orrs	r3, r2
 800aa42:	697a      	ldr	r2, [r7, #20]
 800aa44:	4313      	orrs	r3, r2
 800aa46:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	697a      	ldr	r2, [r7, #20]
 800aa4e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	695b      	ldr	r3, [r3, #20]
 800aa56:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800aa58:	697b      	ldr	r3, [r7, #20]
 800aa5a:	f023 0307 	bic.w	r3, r3, #7
 800aa5e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa64:	697a      	ldr	r2, [r7, #20]
 800aa66:	4313      	orrs	r3, r2
 800aa68:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa6e:	2b04      	cmp	r3, #4
 800aa70:	d117      	bne.n	800aaa2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa76:	697a      	ldr	r2, [r7, #20]
 800aa78:	4313      	orrs	r3, r2
 800aa7a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d00e      	beq.n	800aaa2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800aa84:	6878      	ldr	r0, [r7, #4]
 800aa86:	f000 fa9d 	bl	800afc4 <DMA_CheckFifoParam>
 800aa8a:	4603      	mov	r3, r0
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d008      	beq.n	800aaa2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2240      	movs	r2, #64	; 0x40
 800aa94:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	2201      	movs	r2, #1
 800aa9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800aa9e:	2301      	movs	r3, #1
 800aaa0:	e016      	b.n	800aad0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	697a      	ldr	r2, [r7, #20]
 800aaa8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800aaaa:	6878      	ldr	r0, [r7, #4]
 800aaac:	f000 fa54 	bl	800af58 <DMA_CalcBaseAndBitshift>
 800aab0:	4603      	mov	r3, r0
 800aab2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aab8:	223f      	movs	r2, #63	; 0x3f
 800aaba:	409a      	lsls	r2, r3
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2200      	movs	r2, #0
 800aac4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	2201      	movs	r2, #1
 800aaca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800aace:	2300      	movs	r3, #0
}
 800aad0:	4618      	mov	r0, r3
 800aad2:	3718      	adds	r7, #24
 800aad4:	46bd      	mov	sp, r7
 800aad6:	bd80      	pop	{r7, pc}
 800aad8:	f010803f 	.word	0xf010803f

0800aadc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b086      	sub	sp, #24
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	60f8      	str	r0, [r7, #12]
 800aae4:	60b9      	str	r1, [r7, #8]
 800aae6:	607a      	str	r2, [r7, #4]
 800aae8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800aaea:	2300      	movs	r3, #0
 800aaec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aaf2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800aafa:	2b01      	cmp	r3, #1
 800aafc:	d101      	bne.n	800ab02 <HAL_DMA_Start_IT+0x26>
 800aafe:	2302      	movs	r3, #2
 800ab00:	e040      	b.n	800ab84 <HAL_DMA_Start_IT+0xa8>
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	2201      	movs	r2, #1
 800ab06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ab10:	b2db      	uxtb	r3, r3
 800ab12:	2b01      	cmp	r3, #1
 800ab14:	d12f      	bne.n	800ab76 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	2202      	movs	r2, #2
 800ab1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	2200      	movs	r2, #0
 800ab22:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	687a      	ldr	r2, [r7, #4]
 800ab28:	68b9      	ldr	r1, [r7, #8]
 800ab2a:	68f8      	ldr	r0, [r7, #12]
 800ab2c:	f000 f9e6 	bl	800aefc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab34:	223f      	movs	r2, #63	; 0x3f
 800ab36:	409a      	lsls	r2, r3
 800ab38:	693b      	ldr	r3, [r7, #16]
 800ab3a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	681a      	ldr	r2, [r3, #0]
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	f042 0216 	orr.w	r2, r2, #22
 800ab4a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d007      	beq.n	800ab64 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	681a      	ldr	r2, [r3, #0]
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	f042 0208 	orr.w	r2, r2, #8
 800ab62:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	681a      	ldr	r2, [r3, #0]
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	f042 0201 	orr.w	r2, r2, #1
 800ab72:	601a      	str	r2, [r3, #0]
 800ab74:	e005      	b.n	800ab82 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	2200      	movs	r2, #0
 800ab7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800ab7e:	2302      	movs	r3, #2
 800ab80:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800ab82:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab84:	4618      	mov	r0, r3
 800ab86:	3718      	adds	r7, #24
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	bd80      	pop	{r7, pc}

0800ab8c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800ab8c:	b480      	push	{r7}
 800ab8e:	b083      	sub	sp, #12
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ab9a:	b2db      	uxtb	r3, r3
 800ab9c:	2b02      	cmp	r3, #2
 800ab9e:	d004      	beq.n	800abaa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	2280      	movs	r2, #128	; 0x80
 800aba4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800aba6:	2301      	movs	r3, #1
 800aba8:	e00c      	b.n	800abc4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	2205      	movs	r2, #5
 800abae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	681a      	ldr	r2, [r3, #0]
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	f022 0201 	bic.w	r2, r2, #1
 800abc0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800abc2:	2300      	movs	r3, #0
}
 800abc4:	4618      	mov	r0, r3
 800abc6:	370c      	adds	r7, #12
 800abc8:	46bd      	mov	sp, r7
 800abca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abce:	4770      	bx	lr

0800abd0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b086      	sub	sp, #24
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800abd8:	2300      	movs	r3, #0
 800abda:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800abdc:	4b92      	ldr	r3, [pc, #584]	; (800ae28 <HAL_DMA_IRQHandler+0x258>)
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	4a92      	ldr	r2, [pc, #584]	; (800ae2c <HAL_DMA_IRQHandler+0x25c>)
 800abe2:	fba2 2303 	umull	r2, r3, r2, r3
 800abe6:	0a9b      	lsrs	r3, r3, #10
 800abe8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800abee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800abf0:	693b      	ldr	r3, [r7, #16]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800abfa:	2208      	movs	r2, #8
 800abfc:	409a      	lsls	r2, r3
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	4013      	ands	r3, r2
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d01a      	beq.n	800ac3c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	f003 0304 	and.w	r3, r3, #4
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d013      	beq.n	800ac3c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	681a      	ldr	r2, [r3, #0]
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	f022 0204 	bic.w	r2, r2, #4
 800ac22:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac28:	2208      	movs	r2, #8
 800ac2a:	409a      	lsls	r2, r3
 800ac2c:	693b      	ldr	r3, [r7, #16]
 800ac2e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac34:	f043 0201 	orr.w	r2, r3, #1
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac40:	2201      	movs	r2, #1
 800ac42:	409a      	lsls	r2, r3
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	4013      	ands	r3, r2
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d012      	beq.n	800ac72 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	695b      	ldr	r3, [r3, #20]
 800ac52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d00b      	beq.n	800ac72 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac5e:	2201      	movs	r2, #1
 800ac60:	409a      	lsls	r2, r3
 800ac62:	693b      	ldr	r3, [r7, #16]
 800ac64:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac6a:	f043 0202 	orr.w	r2, r3, #2
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac76:	2204      	movs	r2, #4
 800ac78:	409a      	lsls	r2, r3
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	4013      	ands	r3, r2
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d012      	beq.n	800aca8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	f003 0302 	and.w	r3, r3, #2
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d00b      	beq.n	800aca8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac94:	2204      	movs	r2, #4
 800ac96:	409a      	lsls	r2, r3
 800ac98:	693b      	ldr	r3, [r7, #16]
 800ac9a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aca0:	f043 0204 	orr.w	r2, r3, #4
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800acac:	2210      	movs	r2, #16
 800acae:	409a      	lsls	r2, r3
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	4013      	ands	r3, r2
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d043      	beq.n	800ad40 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	f003 0308 	and.w	r3, r3, #8
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d03c      	beq.n	800ad40 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800acca:	2210      	movs	r2, #16
 800accc:	409a      	lsls	r2, r3
 800acce:	693b      	ldr	r3, [r7, #16]
 800acd0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d018      	beq.n	800ad12 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800acea:	2b00      	cmp	r3, #0
 800acec:	d108      	bne.n	800ad00 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d024      	beq.n	800ad40 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acfa:	6878      	ldr	r0, [r7, #4]
 800acfc:	4798      	blx	r3
 800acfe:	e01f      	b.n	800ad40 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d01b      	beq.n	800ad40 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad0c:	6878      	ldr	r0, [r7, #4]
 800ad0e:	4798      	blx	r3
 800ad10:	e016      	b.n	800ad40 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d107      	bne.n	800ad30 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	681a      	ldr	r2, [r3, #0]
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	f022 0208 	bic.w	r2, r2, #8
 800ad2e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d003      	beq.n	800ad40 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad3c:	6878      	ldr	r0, [r7, #4]
 800ad3e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad44:	2220      	movs	r2, #32
 800ad46:	409a      	lsls	r2, r3
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	4013      	ands	r3, r2
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	f000 808e 	beq.w	800ae6e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	f003 0310 	and.w	r3, r3, #16
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	f000 8086 	beq.w	800ae6e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad66:	2220      	movs	r2, #32
 800ad68:	409a      	lsls	r2, r3
 800ad6a:	693b      	ldr	r3, [r7, #16]
 800ad6c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ad74:	b2db      	uxtb	r3, r3
 800ad76:	2b05      	cmp	r3, #5
 800ad78:	d136      	bne.n	800ade8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	681a      	ldr	r2, [r3, #0]
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	f022 0216 	bic.w	r2, r2, #22
 800ad88:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	695a      	ldr	r2, [r3, #20]
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ad98:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d103      	bne.n	800adaa <HAL_DMA_IRQHandler+0x1da>
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d007      	beq.n	800adba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	681a      	ldr	r2, [r3, #0]
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	f022 0208 	bic.w	r2, r2, #8
 800adb8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800adbe:	223f      	movs	r2, #63	; 0x3f
 800adc0:	409a      	lsls	r2, r3
 800adc2:	693b      	ldr	r3, [r7, #16]
 800adc4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	2200      	movs	r2, #0
 800adca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	2201      	movs	r2, #1
 800add2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800adda:	2b00      	cmp	r3, #0
 800addc:	d07d      	beq.n	800aeda <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ade2:	6878      	ldr	r0, [r7, #4]
 800ade4:	4798      	blx	r3
        }
        return;
 800ade6:	e078      	b.n	800aeda <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d01c      	beq.n	800ae30 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d108      	bne.n	800ae16 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d030      	beq.n	800ae6e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae10:	6878      	ldr	r0, [r7, #4]
 800ae12:	4798      	blx	r3
 800ae14:	e02b      	b.n	800ae6e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d027      	beq.n	800ae6e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae22:	6878      	ldr	r0, [r7, #4]
 800ae24:	4798      	blx	r3
 800ae26:	e022      	b.n	800ae6e <HAL_DMA_IRQHandler+0x29e>
 800ae28:	20000000 	.word	0x20000000
 800ae2c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d10f      	bne.n	800ae5e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	681a      	ldr	r2, [r3, #0]
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	f022 0210 	bic.w	r2, r2, #16
 800ae4c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	2200      	movs	r2, #0
 800ae52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	2201      	movs	r2, #1
 800ae5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d003      	beq.n	800ae6e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae6a:	6878      	ldr	r0, [r7, #4]
 800ae6c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d032      	beq.n	800aedc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae7a:	f003 0301 	and.w	r3, r3, #1
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d022      	beq.n	800aec8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	2205      	movs	r2, #5
 800ae86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	681a      	ldr	r2, [r3, #0]
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	f022 0201 	bic.w	r2, r2, #1
 800ae98:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800ae9a:	68bb      	ldr	r3, [r7, #8]
 800ae9c:	3301      	adds	r3, #1
 800ae9e:	60bb      	str	r3, [r7, #8]
 800aea0:	697a      	ldr	r2, [r7, #20]
 800aea2:	429a      	cmp	r2, r3
 800aea4:	d307      	bcc.n	800aeb6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	f003 0301 	and.w	r3, r3, #1
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d1f2      	bne.n	800ae9a <HAL_DMA_IRQHandler+0x2ca>
 800aeb4:	e000      	b.n	800aeb8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800aeb6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	2200      	movs	r2, #0
 800aebc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	2201      	movs	r2, #1
 800aec4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d005      	beq.n	800aedc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aed4:	6878      	ldr	r0, [r7, #4]
 800aed6:	4798      	blx	r3
 800aed8:	e000      	b.n	800aedc <HAL_DMA_IRQHandler+0x30c>
        return;
 800aeda:	bf00      	nop
    }
  }
}
 800aedc:	3718      	adds	r7, #24
 800aede:	46bd      	mov	sp, r7
 800aee0:	bd80      	pop	{r7, pc}
 800aee2:	bf00      	nop

0800aee4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800aee4:	b480      	push	{r7}
 800aee6:	b083      	sub	sp, #12
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800aef0:	4618      	mov	r0, r3
 800aef2:	370c      	adds	r7, #12
 800aef4:	46bd      	mov	sp, r7
 800aef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefa:	4770      	bx	lr

0800aefc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800aefc:	b480      	push	{r7}
 800aefe:	b085      	sub	sp, #20
 800af00:	af00      	add	r7, sp, #0
 800af02:	60f8      	str	r0, [r7, #12]
 800af04:	60b9      	str	r1, [r7, #8]
 800af06:	607a      	str	r2, [r7, #4]
 800af08:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	681a      	ldr	r2, [r3, #0]
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800af18:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	683a      	ldr	r2, [r7, #0]
 800af20:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	689b      	ldr	r3, [r3, #8]
 800af26:	2b40      	cmp	r3, #64	; 0x40
 800af28:	d108      	bne.n	800af3c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	687a      	ldr	r2, [r7, #4]
 800af30:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	68ba      	ldr	r2, [r7, #8]
 800af38:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800af3a:	e007      	b.n	800af4c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	68ba      	ldr	r2, [r7, #8]
 800af42:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	687a      	ldr	r2, [r7, #4]
 800af4a:	60da      	str	r2, [r3, #12]
}
 800af4c:	bf00      	nop
 800af4e:	3714      	adds	r7, #20
 800af50:	46bd      	mov	sp, r7
 800af52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af56:	4770      	bx	lr

0800af58 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800af58:	b480      	push	{r7}
 800af5a:	b085      	sub	sp, #20
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	b2db      	uxtb	r3, r3
 800af66:	3b10      	subs	r3, #16
 800af68:	4a14      	ldr	r2, [pc, #80]	; (800afbc <DMA_CalcBaseAndBitshift+0x64>)
 800af6a:	fba2 2303 	umull	r2, r3, r2, r3
 800af6e:	091b      	lsrs	r3, r3, #4
 800af70:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800af72:	4a13      	ldr	r2, [pc, #76]	; (800afc0 <DMA_CalcBaseAndBitshift+0x68>)
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	4413      	add	r3, r2
 800af78:	781b      	ldrb	r3, [r3, #0]
 800af7a:	461a      	mov	r2, r3
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	2b03      	cmp	r3, #3
 800af84:	d909      	bls.n	800af9a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800af8e:	f023 0303 	bic.w	r3, r3, #3
 800af92:	1d1a      	adds	r2, r3, #4
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	659a      	str	r2, [r3, #88]	; 0x58
 800af98:	e007      	b.n	800afaa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800afa2:	f023 0303 	bic.w	r3, r3, #3
 800afa6:	687a      	ldr	r2, [r7, #4]
 800afa8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800afae:	4618      	mov	r0, r3
 800afb0:	3714      	adds	r7, #20
 800afb2:	46bd      	mov	sp, r7
 800afb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb8:	4770      	bx	lr
 800afba:	bf00      	nop
 800afbc:	aaaaaaab 	.word	0xaaaaaaab
 800afc0:	080191a0 	.word	0x080191a0

0800afc4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800afc4:	b480      	push	{r7}
 800afc6:	b085      	sub	sp, #20
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800afcc:	2300      	movs	r3, #0
 800afce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afd4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	699b      	ldr	r3, [r3, #24]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d11f      	bne.n	800b01e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800afde:	68bb      	ldr	r3, [r7, #8]
 800afe0:	2b03      	cmp	r3, #3
 800afe2:	d855      	bhi.n	800b090 <DMA_CheckFifoParam+0xcc>
 800afe4:	a201      	add	r2, pc, #4	; (adr r2, 800afec <DMA_CheckFifoParam+0x28>)
 800afe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afea:	bf00      	nop
 800afec:	0800affd 	.word	0x0800affd
 800aff0:	0800b00f 	.word	0x0800b00f
 800aff4:	0800affd 	.word	0x0800affd
 800aff8:	0800b091 	.word	0x0800b091
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b000:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b004:	2b00      	cmp	r3, #0
 800b006:	d045      	beq.n	800b094 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800b008:	2301      	movs	r3, #1
 800b00a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b00c:	e042      	b.n	800b094 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b012:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800b016:	d13f      	bne.n	800b098 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800b018:	2301      	movs	r3, #1
 800b01a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b01c:	e03c      	b.n	800b098 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	699b      	ldr	r3, [r3, #24]
 800b022:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b026:	d121      	bne.n	800b06c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800b028:	68bb      	ldr	r3, [r7, #8]
 800b02a:	2b03      	cmp	r3, #3
 800b02c:	d836      	bhi.n	800b09c <DMA_CheckFifoParam+0xd8>
 800b02e:	a201      	add	r2, pc, #4	; (adr r2, 800b034 <DMA_CheckFifoParam+0x70>)
 800b030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b034:	0800b045 	.word	0x0800b045
 800b038:	0800b04b 	.word	0x0800b04b
 800b03c:	0800b045 	.word	0x0800b045
 800b040:	0800b05d 	.word	0x0800b05d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800b044:	2301      	movs	r3, #1
 800b046:	73fb      	strb	r3, [r7, #15]
      break;
 800b048:	e02f      	b.n	800b0aa <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b04e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b052:	2b00      	cmp	r3, #0
 800b054:	d024      	beq.n	800b0a0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800b056:	2301      	movs	r3, #1
 800b058:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b05a:	e021      	b.n	800b0a0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b060:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800b064:	d11e      	bne.n	800b0a4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800b066:	2301      	movs	r3, #1
 800b068:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800b06a:	e01b      	b.n	800b0a4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800b06c:	68bb      	ldr	r3, [r7, #8]
 800b06e:	2b02      	cmp	r3, #2
 800b070:	d902      	bls.n	800b078 <DMA_CheckFifoParam+0xb4>
 800b072:	2b03      	cmp	r3, #3
 800b074:	d003      	beq.n	800b07e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800b076:	e018      	b.n	800b0aa <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800b078:	2301      	movs	r3, #1
 800b07a:	73fb      	strb	r3, [r7, #15]
      break;
 800b07c:	e015      	b.n	800b0aa <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b082:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b086:	2b00      	cmp	r3, #0
 800b088:	d00e      	beq.n	800b0a8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800b08a:	2301      	movs	r3, #1
 800b08c:	73fb      	strb	r3, [r7, #15]
      break;
 800b08e:	e00b      	b.n	800b0a8 <DMA_CheckFifoParam+0xe4>
      break;
 800b090:	bf00      	nop
 800b092:	e00a      	b.n	800b0aa <DMA_CheckFifoParam+0xe6>
      break;
 800b094:	bf00      	nop
 800b096:	e008      	b.n	800b0aa <DMA_CheckFifoParam+0xe6>
      break;
 800b098:	bf00      	nop
 800b09a:	e006      	b.n	800b0aa <DMA_CheckFifoParam+0xe6>
      break;
 800b09c:	bf00      	nop
 800b09e:	e004      	b.n	800b0aa <DMA_CheckFifoParam+0xe6>
      break;
 800b0a0:	bf00      	nop
 800b0a2:	e002      	b.n	800b0aa <DMA_CheckFifoParam+0xe6>
      break;   
 800b0a4:	bf00      	nop
 800b0a6:	e000      	b.n	800b0aa <DMA_CheckFifoParam+0xe6>
      break;
 800b0a8:	bf00      	nop
    }
  } 
  
  return status; 
 800b0aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	3714      	adds	r7, #20
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b6:	4770      	bx	lr

0800b0b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b0b8:	b480      	push	{r7}
 800b0ba:	b089      	sub	sp, #36	; 0x24
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
 800b0c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	61fb      	str	r3, [r7, #28]
 800b0d2:	e177      	b.n	800b3c4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800b0d4:	2201      	movs	r2, #1
 800b0d6:	69fb      	ldr	r3, [r7, #28]
 800b0d8:	fa02 f303 	lsl.w	r3, r2, r3
 800b0dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800b0de:	683b      	ldr	r3, [r7, #0]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	697a      	ldr	r2, [r7, #20]
 800b0e4:	4013      	ands	r3, r2
 800b0e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800b0e8:	693a      	ldr	r2, [r7, #16]
 800b0ea:	697b      	ldr	r3, [r7, #20]
 800b0ec:	429a      	cmp	r2, r3
 800b0ee:	f040 8166 	bne.w	800b3be <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b0f2:	683b      	ldr	r3, [r7, #0]
 800b0f4:	685b      	ldr	r3, [r3, #4]
 800b0f6:	2b01      	cmp	r3, #1
 800b0f8:	d00b      	beq.n	800b112 <HAL_GPIO_Init+0x5a>
 800b0fa:	683b      	ldr	r3, [r7, #0]
 800b0fc:	685b      	ldr	r3, [r3, #4]
 800b0fe:	2b02      	cmp	r3, #2
 800b100:	d007      	beq.n	800b112 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b106:	2b11      	cmp	r3, #17
 800b108:	d003      	beq.n	800b112 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b10a:	683b      	ldr	r3, [r7, #0]
 800b10c:	685b      	ldr	r3, [r3, #4]
 800b10e:	2b12      	cmp	r3, #18
 800b110:	d130      	bne.n	800b174 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	689b      	ldr	r3, [r3, #8]
 800b116:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800b118:	69fb      	ldr	r3, [r7, #28]
 800b11a:	005b      	lsls	r3, r3, #1
 800b11c:	2203      	movs	r2, #3
 800b11e:	fa02 f303 	lsl.w	r3, r2, r3
 800b122:	43db      	mvns	r3, r3
 800b124:	69ba      	ldr	r2, [r7, #24]
 800b126:	4013      	ands	r3, r2
 800b128:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	68da      	ldr	r2, [r3, #12]
 800b12e:	69fb      	ldr	r3, [r7, #28]
 800b130:	005b      	lsls	r3, r3, #1
 800b132:	fa02 f303 	lsl.w	r3, r2, r3
 800b136:	69ba      	ldr	r2, [r7, #24]
 800b138:	4313      	orrs	r3, r2
 800b13a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	69ba      	ldr	r2, [r7, #24]
 800b140:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	685b      	ldr	r3, [r3, #4]
 800b146:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b148:	2201      	movs	r2, #1
 800b14a:	69fb      	ldr	r3, [r7, #28]
 800b14c:	fa02 f303 	lsl.w	r3, r2, r3
 800b150:	43db      	mvns	r3, r3
 800b152:	69ba      	ldr	r2, [r7, #24]
 800b154:	4013      	ands	r3, r2
 800b156:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800b158:	683b      	ldr	r3, [r7, #0]
 800b15a:	685b      	ldr	r3, [r3, #4]
 800b15c:	091b      	lsrs	r3, r3, #4
 800b15e:	f003 0201 	and.w	r2, r3, #1
 800b162:	69fb      	ldr	r3, [r7, #28]
 800b164:	fa02 f303 	lsl.w	r3, r2, r3
 800b168:	69ba      	ldr	r2, [r7, #24]
 800b16a:	4313      	orrs	r3, r2
 800b16c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	69ba      	ldr	r2, [r7, #24]
 800b172:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	68db      	ldr	r3, [r3, #12]
 800b178:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800b17a:	69fb      	ldr	r3, [r7, #28]
 800b17c:	005b      	lsls	r3, r3, #1
 800b17e:	2203      	movs	r2, #3
 800b180:	fa02 f303 	lsl.w	r3, r2, r3
 800b184:	43db      	mvns	r3, r3
 800b186:	69ba      	ldr	r2, [r7, #24]
 800b188:	4013      	ands	r3, r2
 800b18a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b18c:	683b      	ldr	r3, [r7, #0]
 800b18e:	689a      	ldr	r2, [r3, #8]
 800b190:	69fb      	ldr	r3, [r7, #28]
 800b192:	005b      	lsls	r3, r3, #1
 800b194:	fa02 f303 	lsl.w	r3, r2, r3
 800b198:	69ba      	ldr	r2, [r7, #24]
 800b19a:	4313      	orrs	r3, r2
 800b19c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	69ba      	ldr	r2, [r7, #24]
 800b1a2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b1a4:	683b      	ldr	r3, [r7, #0]
 800b1a6:	685b      	ldr	r3, [r3, #4]
 800b1a8:	2b02      	cmp	r3, #2
 800b1aa:	d003      	beq.n	800b1b4 <HAL_GPIO_Init+0xfc>
 800b1ac:	683b      	ldr	r3, [r7, #0]
 800b1ae:	685b      	ldr	r3, [r3, #4]
 800b1b0:	2b12      	cmp	r3, #18
 800b1b2:	d123      	bne.n	800b1fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b1b4:	69fb      	ldr	r3, [r7, #28]
 800b1b6:	08da      	lsrs	r2, r3, #3
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	3208      	adds	r2, #8
 800b1bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800b1c2:	69fb      	ldr	r3, [r7, #28]
 800b1c4:	f003 0307 	and.w	r3, r3, #7
 800b1c8:	009b      	lsls	r3, r3, #2
 800b1ca:	220f      	movs	r2, #15
 800b1cc:	fa02 f303 	lsl.w	r3, r2, r3
 800b1d0:	43db      	mvns	r3, r3
 800b1d2:	69ba      	ldr	r2, [r7, #24]
 800b1d4:	4013      	ands	r3, r2
 800b1d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800b1d8:	683b      	ldr	r3, [r7, #0]
 800b1da:	691a      	ldr	r2, [r3, #16]
 800b1dc:	69fb      	ldr	r3, [r7, #28]
 800b1de:	f003 0307 	and.w	r3, r3, #7
 800b1e2:	009b      	lsls	r3, r3, #2
 800b1e4:	fa02 f303 	lsl.w	r3, r2, r3
 800b1e8:	69ba      	ldr	r2, [r7, #24]
 800b1ea:	4313      	orrs	r3, r2
 800b1ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b1ee:	69fb      	ldr	r3, [r7, #28]
 800b1f0:	08da      	lsrs	r2, r3, #3
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	3208      	adds	r2, #8
 800b1f6:	69b9      	ldr	r1, [r7, #24]
 800b1f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800b202:	69fb      	ldr	r3, [r7, #28]
 800b204:	005b      	lsls	r3, r3, #1
 800b206:	2203      	movs	r2, #3
 800b208:	fa02 f303 	lsl.w	r3, r2, r3
 800b20c:	43db      	mvns	r3, r3
 800b20e:	69ba      	ldr	r2, [r7, #24]
 800b210:	4013      	ands	r3, r2
 800b212:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b214:	683b      	ldr	r3, [r7, #0]
 800b216:	685b      	ldr	r3, [r3, #4]
 800b218:	f003 0203 	and.w	r2, r3, #3
 800b21c:	69fb      	ldr	r3, [r7, #28]
 800b21e:	005b      	lsls	r3, r3, #1
 800b220:	fa02 f303 	lsl.w	r3, r2, r3
 800b224:	69ba      	ldr	r2, [r7, #24]
 800b226:	4313      	orrs	r3, r2
 800b228:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	69ba      	ldr	r2, [r7, #24]
 800b22e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800b230:	683b      	ldr	r3, [r7, #0]
 800b232:	685b      	ldr	r3, [r3, #4]
 800b234:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b238:	2b00      	cmp	r3, #0
 800b23a:	f000 80c0 	beq.w	800b3be <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b23e:	2300      	movs	r3, #0
 800b240:	60fb      	str	r3, [r7, #12]
 800b242:	4b65      	ldr	r3, [pc, #404]	; (800b3d8 <HAL_GPIO_Init+0x320>)
 800b244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b246:	4a64      	ldr	r2, [pc, #400]	; (800b3d8 <HAL_GPIO_Init+0x320>)
 800b248:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b24c:	6453      	str	r3, [r2, #68]	; 0x44
 800b24e:	4b62      	ldr	r3, [pc, #392]	; (800b3d8 <HAL_GPIO_Init+0x320>)
 800b250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b252:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b256:	60fb      	str	r3, [r7, #12]
 800b258:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b25a:	4a60      	ldr	r2, [pc, #384]	; (800b3dc <HAL_GPIO_Init+0x324>)
 800b25c:	69fb      	ldr	r3, [r7, #28]
 800b25e:	089b      	lsrs	r3, r3, #2
 800b260:	3302      	adds	r3, #2
 800b262:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b266:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800b268:	69fb      	ldr	r3, [r7, #28]
 800b26a:	f003 0303 	and.w	r3, r3, #3
 800b26e:	009b      	lsls	r3, r3, #2
 800b270:	220f      	movs	r2, #15
 800b272:	fa02 f303 	lsl.w	r3, r2, r3
 800b276:	43db      	mvns	r3, r3
 800b278:	69ba      	ldr	r2, [r7, #24]
 800b27a:	4013      	ands	r3, r2
 800b27c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	4a57      	ldr	r2, [pc, #348]	; (800b3e0 <HAL_GPIO_Init+0x328>)
 800b282:	4293      	cmp	r3, r2
 800b284:	d037      	beq.n	800b2f6 <HAL_GPIO_Init+0x23e>
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	4a56      	ldr	r2, [pc, #344]	; (800b3e4 <HAL_GPIO_Init+0x32c>)
 800b28a:	4293      	cmp	r3, r2
 800b28c:	d031      	beq.n	800b2f2 <HAL_GPIO_Init+0x23a>
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	4a55      	ldr	r2, [pc, #340]	; (800b3e8 <HAL_GPIO_Init+0x330>)
 800b292:	4293      	cmp	r3, r2
 800b294:	d02b      	beq.n	800b2ee <HAL_GPIO_Init+0x236>
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	4a54      	ldr	r2, [pc, #336]	; (800b3ec <HAL_GPIO_Init+0x334>)
 800b29a:	4293      	cmp	r3, r2
 800b29c:	d025      	beq.n	800b2ea <HAL_GPIO_Init+0x232>
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	4a53      	ldr	r2, [pc, #332]	; (800b3f0 <HAL_GPIO_Init+0x338>)
 800b2a2:	4293      	cmp	r3, r2
 800b2a4:	d01f      	beq.n	800b2e6 <HAL_GPIO_Init+0x22e>
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	4a52      	ldr	r2, [pc, #328]	; (800b3f4 <HAL_GPIO_Init+0x33c>)
 800b2aa:	4293      	cmp	r3, r2
 800b2ac:	d019      	beq.n	800b2e2 <HAL_GPIO_Init+0x22a>
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	4a51      	ldr	r2, [pc, #324]	; (800b3f8 <HAL_GPIO_Init+0x340>)
 800b2b2:	4293      	cmp	r3, r2
 800b2b4:	d013      	beq.n	800b2de <HAL_GPIO_Init+0x226>
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	4a50      	ldr	r2, [pc, #320]	; (800b3fc <HAL_GPIO_Init+0x344>)
 800b2ba:	4293      	cmp	r3, r2
 800b2bc:	d00d      	beq.n	800b2da <HAL_GPIO_Init+0x222>
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	4a4f      	ldr	r2, [pc, #316]	; (800b400 <HAL_GPIO_Init+0x348>)
 800b2c2:	4293      	cmp	r3, r2
 800b2c4:	d007      	beq.n	800b2d6 <HAL_GPIO_Init+0x21e>
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	4a4e      	ldr	r2, [pc, #312]	; (800b404 <HAL_GPIO_Init+0x34c>)
 800b2ca:	4293      	cmp	r3, r2
 800b2cc:	d101      	bne.n	800b2d2 <HAL_GPIO_Init+0x21a>
 800b2ce:	2309      	movs	r3, #9
 800b2d0:	e012      	b.n	800b2f8 <HAL_GPIO_Init+0x240>
 800b2d2:	230a      	movs	r3, #10
 800b2d4:	e010      	b.n	800b2f8 <HAL_GPIO_Init+0x240>
 800b2d6:	2308      	movs	r3, #8
 800b2d8:	e00e      	b.n	800b2f8 <HAL_GPIO_Init+0x240>
 800b2da:	2307      	movs	r3, #7
 800b2dc:	e00c      	b.n	800b2f8 <HAL_GPIO_Init+0x240>
 800b2de:	2306      	movs	r3, #6
 800b2e0:	e00a      	b.n	800b2f8 <HAL_GPIO_Init+0x240>
 800b2e2:	2305      	movs	r3, #5
 800b2e4:	e008      	b.n	800b2f8 <HAL_GPIO_Init+0x240>
 800b2e6:	2304      	movs	r3, #4
 800b2e8:	e006      	b.n	800b2f8 <HAL_GPIO_Init+0x240>
 800b2ea:	2303      	movs	r3, #3
 800b2ec:	e004      	b.n	800b2f8 <HAL_GPIO_Init+0x240>
 800b2ee:	2302      	movs	r3, #2
 800b2f0:	e002      	b.n	800b2f8 <HAL_GPIO_Init+0x240>
 800b2f2:	2301      	movs	r3, #1
 800b2f4:	e000      	b.n	800b2f8 <HAL_GPIO_Init+0x240>
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	69fa      	ldr	r2, [r7, #28]
 800b2fa:	f002 0203 	and.w	r2, r2, #3
 800b2fe:	0092      	lsls	r2, r2, #2
 800b300:	4093      	lsls	r3, r2
 800b302:	69ba      	ldr	r2, [r7, #24]
 800b304:	4313      	orrs	r3, r2
 800b306:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b308:	4934      	ldr	r1, [pc, #208]	; (800b3dc <HAL_GPIO_Init+0x324>)
 800b30a:	69fb      	ldr	r3, [r7, #28]
 800b30c:	089b      	lsrs	r3, r3, #2
 800b30e:	3302      	adds	r3, #2
 800b310:	69ba      	ldr	r2, [r7, #24]
 800b312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b316:	4b3c      	ldr	r3, [pc, #240]	; (800b408 <HAL_GPIO_Init+0x350>)
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b31c:	693b      	ldr	r3, [r7, #16]
 800b31e:	43db      	mvns	r3, r3
 800b320:	69ba      	ldr	r2, [r7, #24]
 800b322:	4013      	ands	r3, r2
 800b324:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800b326:	683b      	ldr	r3, [r7, #0]
 800b328:	685b      	ldr	r3, [r3, #4]
 800b32a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d003      	beq.n	800b33a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800b332:	69ba      	ldr	r2, [r7, #24]
 800b334:	693b      	ldr	r3, [r7, #16]
 800b336:	4313      	orrs	r3, r2
 800b338:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800b33a:	4a33      	ldr	r2, [pc, #204]	; (800b408 <HAL_GPIO_Init+0x350>)
 800b33c:	69bb      	ldr	r3, [r7, #24]
 800b33e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800b340:	4b31      	ldr	r3, [pc, #196]	; (800b408 <HAL_GPIO_Init+0x350>)
 800b342:	685b      	ldr	r3, [r3, #4]
 800b344:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b346:	693b      	ldr	r3, [r7, #16]
 800b348:	43db      	mvns	r3, r3
 800b34a:	69ba      	ldr	r2, [r7, #24]
 800b34c:	4013      	ands	r3, r2
 800b34e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800b350:	683b      	ldr	r3, [r7, #0]
 800b352:	685b      	ldr	r3, [r3, #4]
 800b354:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d003      	beq.n	800b364 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800b35c:	69ba      	ldr	r2, [r7, #24]
 800b35e:	693b      	ldr	r3, [r7, #16]
 800b360:	4313      	orrs	r3, r2
 800b362:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800b364:	4a28      	ldr	r2, [pc, #160]	; (800b408 <HAL_GPIO_Init+0x350>)
 800b366:	69bb      	ldr	r3, [r7, #24]
 800b368:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b36a:	4b27      	ldr	r3, [pc, #156]	; (800b408 <HAL_GPIO_Init+0x350>)
 800b36c:	689b      	ldr	r3, [r3, #8]
 800b36e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b370:	693b      	ldr	r3, [r7, #16]
 800b372:	43db      	mvns	r3, r3
 800b374:	69ba      	ldr	r2, [r7, #24]
 800b376:	4013      	ands	r3, r2
 800b378:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800b37a:	683b      	ldr	r3, [r7, #0]
 800b37c:	685b      	ldr	r3, [r3, #4]
 800b37e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b382:	2b00      	cmp	r3, #0
 800b384:	d003      	beq.n	800b38e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800b386:	69ba      	ldr	r2, [r7, #24]
 800b388:	693b      	ldr	r3, [r7, #16]
 800b38a:	4313      	orrs	r3, r2
 800b38c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800b38e:	4a1e      	ldr	r2, [pc, #120]	; (800b408 <HAL_GPIO_Init+0x350>)
 800b390:	69bb      	ldr	r3, [r7, #24]
 800b392:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800b394:	4b1c      	ldr	r3, [pc, #112]	; (800b408 <HAL_GPIO_Init+0x350>)
 800b396:	68db      	ldr	r3, [r3, #12]
 800b398:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b39a:	693b      	ldr	r3, [r7, #16]
 800b39c:	43db      	mvns	r3, r3
 800b39e:	69ba      	ldr	r2, [r7, #24]
 800b3a0:	4013      	ands	r3, r2
 800b3a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800b3a4:	683b      	ldr	r3, [r7, #0]
 800b3a6:	685b      	ldr	r3, [r3, #4]
 800b3a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d003      	beq.n	800b3b8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800b3b0:	69ba      	ldr	r2, [r7, #24]
 800b3b2:	693b      	ldr	r3, [r7, #16]
 800b3b4:	4313      	orrs	r3, r2
 800b3b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800b3b8:	4a13      	ldr	r2, [pc, #76]	; (800b408 <HAL_GPIO_Init+0x350>)
 800b3ba:	69bb      	ldr	r3, [r7, #24]
 800b3bc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b3be:	69fb      	ldr	r3, [r7, #28]
 800b3c0:	3301      	adds	r3, #1
 800b3c2:	61fb      	str	r3, [r7, #28]
 800b3c4:	69fb      	ldr	r3, [r7, #28]
 800b3c6:	2b0f      	cmp	r3, #15
 800b3c8:	f67f ae84 	bls.w	800b0d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800b3cc:	bf00      	nop
 800b3ce:	3724      	adds	r7, #36	; 0x24
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d6:	4770      	bx	lr
 800b3d8:	40023800 	.word	0x40023800
 800b3dc:	40013800 	.word	0x40013800
 800b3e0:	40020000 	.word	0x40020000
 800b3e4:	40020400 	.word	0x40020400
 800b3e8:	40020800 	.word	0x40020800
 800b3ec:	40020c00 	.word	0x40020c00
 800b3f0:	40021000 	.word	0x40021000
 800b3f4:	40021400 	.word	0x40021400
 800b3f8:	40021800 	.word	0x40021800
 800b3fc:	40021c00 	.word	0x40021c00
 800b400:	40022000 	.word	0x40022000
 800b404:	40022400 	.word	0x40022400
 800b408:	40013c00 	.word	0x40013c00

0800b40c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b40c:	b480      	push	{r7}
 800b40e:	b085      	sub	sp, #20
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
 800b414:	460b      	mov	r3, r1
 800b416:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	691a      	ldr	r2, [r3, #16]
 800b41c:	887b      	ldrh	r3, [r7, #2]
 800b41e:	4013      	ands	r3, r2
 800b420:	2b00      	cmp	r3, #0
 800b422:	d002      	beq.n	800b42a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800b424:	2301      	movs	r3, #1
 800b426:	73fb      	strb	r3, [r7, #15]
 800b428:	e001      	b.n	800b42e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b42a:	2300      	movs	r3, #0
 800b42c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b42e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b430:	4618      	mov	r0, r3
 800b432:	3714      	adds	r7, #20
 800b434:	46bd      	mov	sp, r7
 800b436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43a:	4770      	bx	lr

0800b43c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b43c:	b480      	push	{r7}
 800b43e:	b083      	sub	sp, #12
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
 800b444:	460b      	mov	r3, r1
 800b446:	807b      	strh	r3, [r7, #2]
 800b448:	4613      	mov	r3, r2
 800b44a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b44c:	787b      	ldrb	r3, [r7, #1]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d003      	beq.n	800b45a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b452:	887a      	ldrh	r2, [r7, #2]
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800b458:	e003      	b.n	800b462 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800b45a:	887b      	ldrh	r3, [r7, #2]
 800b45c:	041a      	lsls	r2, r3, #16
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	619a      	str	r2, [r3, #24]
}
 800b462:	bf00      	nop
 800b464:	370c      	adds	r7, #12
 800b466:	46bd      	mov	sp, r7
 800b468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46c:	4770      	bx	lr
	...

0800b470 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800b470:	b580      	push	{r7, lr}
 800b472:	b082      	sub	sp, #8
 800b474:	af00      	add	r7, sp, #0
 800b476:	4603      	mov	r3, r0
 800b478:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800b47a:	4b08      	ldr	r3, [pc, #32]	; (800b49c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800b47c:	695a      	ldr	r2, [r3, #20]
 800b47e:	88fb      	ldrh	r3, [r7, #6]
 800b480:	4013      	ands	r3, r2
 800b482:	2b00      	cmp	r3, #0
 800b484:	d006      	beq.n	800b494 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800b486:	4a05      	ldr	r2, [pc, #20]	; (800b49c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800b488:	88fb      	ldrh	r3, [r7, #6]
 800b48a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800b48c:	88fb      	ldrh	r3, [r7, #6]
 800b48e:	4618      	mov	r0, r3
 800b490:	f7fa fcfd 	bl	8005e8e <HAL_GPIO_EXTI_Callback>
  }
}
 800b494:	bf00      	nop
 800b496:	3708      	adds	r7, #8
 800b498:	46bd      	mov	sp, r7
 800b49a:	bd80      	pop	{r7, pc}
 800b49c:	40013c00 	.word	0x40013c00

0800b4a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b084      	sub	sp, #16
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d101      	bne.n	800b4b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b4ae:	2301      	movs	r3, #1
 800b4b0:	e11f      	b.n	800b6f2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b4b8:	b2db      	uxtb	r3, r3
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d106      	bne.n	800b4cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800b4c6:	6878      	ldr	r0, [r7, #4]
 800b4c8:	f7fb fd5c 	bl	8006f84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	2224      	movs	r2, #36	; 0x24
 800b4d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	681a      	ldr	r2, [r3, #0]
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	f022 0201 	bic.w	r2, r2, #1
 800b4e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	681a      	ldr	r2, [r3, #0]
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b4f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	681a      	ldr	r2, [r3, #0]
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b502:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800b504:	f001 f96e 	bl	800c7e4 <HAL_RCC_GetPCLK1Freq>
 800b508:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	685b      	ldr	r3, [r3, #4]
 800b50e:	4a7b      	ldr	r2, [pc, #492]	; (800b6fc <HAL_I2C_Init+0x25c>)
 800b510:	4293      	cmp	r3, r2
 800b512:	d807      	bhi.n	800b524 <HAL_I2C_Init+0x84>
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	4a7a      	ldr	r2, [pc, #488]	; (800b700 <HAL_I2C_Init+0x260>)
 800b518:	4293      	cmp	r3, r2
 800b51a:	bf94      	ite	ls
 800b51c:	2301      	movls	r3, #1
 800b51e:	2300      	movhi	r3, #0
 800b520:	b2db      	uxtb	r3, r3
 800b522:	e006      	b.n	800b532 <HAL_I2C_Init+0x92>
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	4a77      	ldr	r2, [pc, #476]	; (800b704 <HAL_I2C_Init+0x264>)
 800b528:	4293      	cmp	r3, r2
 800b52a:	bf94      	ite	ls
 800b52c:	2301      	movls	r3, #1
 800b52e:	2300      	movhi	r3, #0
 800b530:	b2db      	uxtb	r3, r3
 800b532:	2b00      	cmp	r3, #0
 800b534:	d001      	beq.n	800b53a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800b536:	2301      	movs	r3, #1
 800b538:	e0db      	b.n	800b6f2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	4a72      	ldr	r2, [pc, #456]	; (800b708 <HAL_I2C_Init+0x268>)
 800b53e:	fba2 2303 	umull	r2, r3, r2, r3
 800b542:	0c9b      	lsrs	r3, r3, #18
 800b544:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	685b      	ldr	r3, [r3, #4]
 800b54c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	68ba      	ldr	r2, [r7, #8]
 800b556:	430a      	orrs	r2, r1
 800b558:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	6a1b      	ldr	r3, [r3, #32]
 800b560:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	685b      	ldr	r3, [r3, #4]
 800b568:	4a64      	ldr	r2, [pc, #400]	; (800b6fc <HAL_I2C_Init+0x25c>)
 800b56a:	4293      	cmp	r3, r2
 800b56c:	d802      	bhi.n	800b574 <HAL_I2C_Init+0xd4>
 800b56e:	68bb      	ldr	r3, [r7, #8]
 800b570:	3301      	adds	r3, #1
 800b572:	e009      	b.n	800b588 <HAL_I2C_Init+0xe8>
 800b574:	68bb      	ldr	r3, [r7, #8]
 800b576:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800b57a:	fb02 f303 	mul.w	r3, r2, r3
 800b57e:	4a63      	ldr	r2, [pc, #396]	; (800b70c <HAL_I2C_Init+0x26c>)
 800b580:	fba2 2303 	umull	r2, r3, r2, r3
 800b584:	099b      	lsrs	r3, r3, #6
 800b586:	3301      	adds	r3, #1
 800b588:	687a      	ldr	r2, [r7, #4]
 800b58a:	6812      	ldr	r2, [r2, #0]
 800b58c:	430b      	orrs	r3, r1
 800b58e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	69db      	ldr	r3, [r3, #28]
 800b596:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800b59a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	685b      	ldr	r3, [r3, #4]
 800b5a2:	4956      	ldr	r1, [pc, #344]	; (800b6fc <HAL_I2C_Init+0x25c>)
 800b5a4:	428b      	cmp	r3, r1
 800b5a6:	d80d      	bhi.n	800b5c4 <HAL_I2C_Init+0x124>
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	1e59      	subs	r1, r3, #1
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	685b      	ldr	r3, [r3, #4]
 800b5b0:	005b      	lsls	r3, r3, #1
 800b5b2:	fbb1 f3f3 	udiv	r3, r1, r3
 800b5b6:	3301      	adds	r3, #1
 800b5b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b5bc:	2b04      	cmp	r3, #4
 800b5be:	bf38      	it	cc
 800b5c0:	2304      	movcc	r3, #4
 800b5c2:	e04f      	b.n	800b664 <HAL_I2C_Init+0x1c4>
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	689b      	ldr	r3, [r3, #8]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d111      	bne.n	800b5f0 <HAL_I2C_Init+0x150>
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	1e58      	subs	r0, r3, #1
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	6859      	ldr	r1, [r3, #4]
 800b5d4:	460b      	mov	r3, r1
 800b5d6:	005b      	lsls	r3, r3, #1
 800b5d8:	440b      	add	r3, r1
 800b5da:	fbb0 f3f3 	udiv	r3, r0, r3
 800b5de:	3301      	adds	r3, #1
 800b5e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	bf0c      	ite	eq
 800b5e8:	2301      	moveq	r3, #1
 800b5ea:	2300      	movne	r3, #0
 800b5ec:	b2db      	uxtb	r3, r3
 800b5ee:	e012      	b.n	800b616 <HAL_I2C_Init+0x176>
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	1e58      	subs	r0, r3, #1
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	6859      	ldr	r1, [r3, #4]
 800b5f8:	460b      	mov	r3, r1
 800b5fa:	009b      	lsls	r3, r3, #2
 800b5fc:	440b      	add	r3, r1
 800b5fe:	0099      	lsls	r1, r3, #2
 800b600:	440b      	add	r3, r1
 800b602:	fbb0 f3f3 	udiv	r3, r0, r3
 800b606:	3301      	adds	r3, #1
 800b608:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	bf0c      	ite	eq
 800b610:	2301      	moveq	r3, #1
 800b612:	2300      	movne	r3, #0
 800b614:	b2db      	uxtb	r3, r3
 800b616:	2b00      	cmp	r3, #0
 800b618:	d001      	beq.n	800b61e <HAL_I2C_Init+0x17e>
 800b61a:	2301      	movs	r3, #1
 800b61c:	e022      	b.n	800b664 <HAL_I2C_Init+0x1c4>
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	689b      	ldr	r3, [r3, #8]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d10e      	bne.n	800b644 <HAL_I2C_Init+0x1a4>
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	1e58      	subs	r0, r3, #1
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	6859      	ldr	r1, [r3, #4]
 800b62e:	460b      	mov	r3, r1
 800b630:	005b      	lsls	r3, r3, #1
 800b632:	440b      	add	r3, r1
 800b634:	fbb0 f3f3 	udiv	r3, r0, r3
 800b638:	3301      	adds	r3, #1
 800b63a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b63e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b642:	e00f      	b.n	800b664 <HAL_I2C_Init+0x1c4>
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	1e58      	subs	r0, r3, #1
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	6859      	ldr	r1, [r3, #4]
 800b64c:	460b      	mov	r3, r1
 800b64e:	009b      	lsls	r3, r3, #2
 800b650:	440b      	add	r3, r1
 800b652:	0099      	lsls	r1, r3, #2
 800b654:	440b      	add	r3, r1
 800b656:	fbb0 f3f3 	udiv	r3, r0, r3
 800b65a:	3301      	adds	r3, #1
 800b65c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b660:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b664:	6879      	ldr	r1, [r7, #4]
 800b666:	6809      	ldr	r1, [r1, #0]
 800b668:	4313      	orrs	r3, r2
 800b66a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	69da      	ldr	r2, [r3, #28]
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	6a1b      	ldr	r3, [r3, #32]
 800b67e:	431a      	orrs	r2, r3
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	430a      	orrs	r2, r1
 800b686:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	689b      	ldr	r3, [r3, #8]
 800b68e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800b692:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b696:	687a      	ldr	r2, [r7, #4]
 800b698:	6911      	ldr	r1, [r2, #16]
 800b69a:	687a      	ldr	r2, [r7, #4]
 800b69c:	68d2      	ldr	r2, [r2, #12]
 800b69e:	4311      	orrs	r1, r2
 800b6a0:	687a      	ldr	r2, [r7, #4]
 800b6a2:	6812      	ldr	r2, [r2, #0]
 800b6a4:	430b      	orrs	r3, r1
 800b6a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	68db      	ldr	r3, [r3, #12]
 800b6ae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	695a      	ldr	r2, [r3, #20]
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	699b      	ldr	r3, [r3, #24]
 800b6ba:	431a      	orrs	r2, r3
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	430a      	orrs	r2, r1
 800b6c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	681a      	ldr	r2, [r3, #0]
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	f042 0201 	orr.w	r2, r2, #1
 800b6d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	2220      	movs	r2, #32
 800b6de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	2200      	movs	r2, #0
 800b6e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b6f0:	2300      	movs	r3, #0
}
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	3710      	adds	r7, #16
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	bd80      	pop	{r7, pc}
 800b6fa:	bf00      	nop
 800b6fc:	000186a0 	.word	0x000186a0
 800b700:	001e847f 	.word	0x001e847f
 800b704:	003d08ff 	.word	0x003d08ff
 800b708:	431bde83 	.word	0x431bde83
 800b70c:	10624dd3 	.word	0x10624dd3

0800b710 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b088      	sub	sp, #32
 800b714:	af02      	add	r7, sp, #8
 800b716:	60f8      	str	r0, [r7, #12]
 800b718:	607a      	str	r2, [r7, #4]
 800b71a:	461a      	mov	r2, r3
 800b71c:	460b      	mov	r3, r1
 800b71e:	817b      	strh	r3, [r7, #10]
 800b720:	4613      	mov	r3, r2
 800b722:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b724:	f7fe fbe8 	bl	8009ef8 <HAL_GetTick>
 800b728:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b730:	b2db      	uxtb	r3, r3
 800b732:	2b20      	cmp	r3, #32
 800b734:	f040 80e0 	bne.w	800b8f8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b738:	697b      	ldr	r3, [r7, #20]
 800b73a:	9300      	str	r3, [sp, #0]
 800b73c:	2319      	movs	r3, #25
 800b73e:	2201      	movs	r2, #1
 800b740:	4970      	ldr	r1, [pc, #448]	; (800b904 <HAL_I2C_Master_Transmit+0x1f4>)
 800b742:	68f8      	ldr	r0, [r7, #12]
 800b744:	f000 fc58 	bl	800bff8 <I2C_WaitOnFlagUntilTimeout>
 800b748:	4603      	mov	r3, r0
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d001      	beq.n	800b752 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800b74e:	2302      	movs	r3, #2
 800b750:	e0d3      	b.n	800b8fa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b758:	2b01      	cmp	r3, #1
 800b75a:	d101      	bne.n	800b760 <HAL_I2C_Master_Transmit+0x50>
 800b75c:	2302      	movs	r3, #2
 800b75e:	e0cc      	b.n	800b8fa <HAL_I2C_Master_Transmit+0x1ea>
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	2201      	movs	r2, #1
 800b764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	f003 0301 	and.w	r3, r3, #1
 800b772:	2b01      	cmp	r3, #1
 800b774:	d007      	beq.n	800b786 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	681a      	ldr	r2, [r3, #0]
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	f042 0201 	orr.w	r2, r2, #1
 800b784:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	681a      	ldr	r2, [r3, #0]
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b794:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	2221      	movs	r2, #33	; 0x21
 800b79a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	2210      	movs	r2, #16
 800b7a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	2200      	movs	r2, #0
 800b7aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	687a      	ldr	r2, [r7, #4]
 800b7b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	893a      	ldrh	r2, [r7, #8]
 800b7b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b7bc:	b29a      	uxth	r2, r3
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	4a50      	ldr	r2, [pc, #320]	; (800b908 <HAL_I2C_Master_Transmit+0x1f8>)
 800b7c6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b7c8:	8979      	ldrh	r1, [r7, #10]
 800b7ca:	697b      	ldr	r3, [r7, #20]
 800b7cc:	6a3a      	ldr	r2, [r7, #32]
 800b7ce:	68f8      	ldr	r0, [r7, #12]
 800b7d0:	f000 fac2 	bl	800bd58 <I2C_MasterRequestWrite>
 800b7d4:	4603      	mov	r3, r0
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d001      	beq.n	800b7de <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800b7da:	2301      	movs	r3, #1
 800b7dc:	e08d      	b.n	800b8fa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b7de:	2300      	movs	r3, #0
 800b7e0:	613b      	str	r3, [r7, #16]
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	695b      	ldr	r3, [r3, #20]
 800b7e8:	613b      	str	r3, [r7, #16]
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	699b      	ldr	r3, [r3, #24]
 800b7f0:	613b      	str	r3, [r7, #16]
 800b7f2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800b7f4:	e066      	b.n	800b8c4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b7f6:	697a      	ldr	r2, [r7, #20]
 800b7f8:	6a39      	ldr	r1, [r7, #32]
 800b7fa:	68f8      	ldr	r0, [r7, #12]
 800b7fc:	f000 fcd2 	bl	800c1a4 <I2C_WaitOnTXEFlagUntilTimeout>
 800b800:	4603      	mov	r3, r0
 800b802:	2b00      	cmp	r3, #0
 800b804:	d00d      	beq.n	800b822 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b80a:	2b04      	cmp	r3, #4
 800b80c:	d107      	bne.n	800b81e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	681a      	ldr	r2, [r3, #0]
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b81c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b81e:	2301      	movs	r3, #1
 800b820:	e06b      	b.n	800b8fa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b826:	781a      	ldrb	r2, [r3, #0]
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b832:	1c5a      	adds	r2, r3, #1
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b83c:	b29b      	uxth	r3, r3
 800b83e:	3b01      	subs	r3, #1
 800b840:	b29a      	uxth	r2, r3
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b84a:	3b01      	subs	r3, #1
 800b84c:	b29a      	uxth	r2, r3
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	695b      	ldr	r3, [r3, #20]
 800b858:	f003 0304 	and.w	r3, r3, #4
 800b85c:	2b04      	cmp	r3, #4
 800b85e:	d11b      	bne.n	800b898 <HAL_I2C_Master_Transmit+0x188>
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b864:	2b00      	cmp	r3, #0
 800b866:	d017      	beq.n	800b898 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b86c:	781a      	ldrb	r2, [r3, #0]
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b878:	1c5a      	adds	r2, r3, #1
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b882:	b29b      	uxth	r3, r3
 800b884:	3b01      	subs	r3, #1
 800b886:	b29a      	uxth	r2, r3
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b890:	3b01      	subs	r3, #1
 800b892:	b29a      	uxth	r2, r3
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b898:	697a      	ldr	r2, [r7, #20]
 800b89a:	6a39      	ldr	r1, [r7, #32]
 800b89c:	68f8      	ldr	r0, [r7, #12]
 800b89e:	f000 fcc2 	bl	800c226 <I2C_WaitOnBTFFlagUntilTimeout>
 800b8a2:	4603      	mov	r3, r0
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d00d      	beq.n	800b8c4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8ac:	2b04      	cmp	r3, #4
 800b8ae:	d107      	bne.n	800b8c0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	681a      	ldr	r2, [r3, #0]
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b8be:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b8c0:	2301      	movs	r3, #1
 800b8c2:	e01a      	b.n	800b8fa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d194      	bne.n	800b7f6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	681a      	ldr	r2, [r3, #0]
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b8da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	2220      	movs	r2, #32
 800b8e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	2200      	movs	r2, #0
 800b8e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	e000      	b.n	800b8fa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800b8f8:	2302      	movs	r3, #2
  }
}
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	3718      	adds	r7, #24
 800b8fe:	46bd      	mov	sp, r7
 800b900:	bd80      	pop	{r7, pc}
 800b902:	bf00      	nop
 800b904:	00100002 	.word	0x00100002
 800b908:	ffff0000 	.word	0xffff0000

0800b90c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b08c      	sub	sp, #48	; 0x30
 800b910:	af02      	add	r7, sp, #8
 800b912:	60f8      	str	r0, [r7, #12]
 800b914:	607a      	str	r2, [r7, #4]
 800b916:	461a      	mov	r2, r3
 800b918:	460b      	mov	r3, r1
 800b91a:	817b      	strh	r3, [r7, #10]
 800b91c:	4613      	mov	r3, r2
 800b91e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b920:	f7fe faea 	bl	8009ef8 <HAL_GetTick>
 800b924:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b92c:	b2db      	uxtb	r3, r3
 800b92e:	2b20      	cmp	r3, #32
 800b930:	f040 820b 	bne.w	800bd4a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b936:	9300      	str	r3, [sp, #0]
 800b938:	2319      	movs	r3, #25
 800b93a:	2201      	movs	r2, #1
 800b93c:	497c      	ldr	r1, [pc, #496]	; (800bb30 <HAL_I2C_Master_Receive+0x224>)
 800b93e:	68f8      	ldr	r0, [r7, #12]
 800b940:	f000 fb5a 	bl	800bff8 <I2C_WaitOnFlagUntilTimeout>
 800b944:	4603      	mov	r3, r0
 800b946:	2b00      	cmp	r3, #0
 800b948:	d001      	beq.n	800b94e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800b94a:	2302      	movs	r3, #2
 800b94c:	e1fe      	b.n	800bd4c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b954:	2b01      	cmp	r3, #1
 800b956:	d101      	bne.n	800b95c <HAL_I2C_Master_Receive+0x50>
 800b958:	2302      	movs	r3, #2
 800b95a:	e1f7      	b.n	800bd4c <HAL_I2C_Master_Receive+0x440>
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	2201      	movs	r2, #1
 800b960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	f003 0301 	and.w	r3, r3, #1
 800b96e:	2b01      	cmp	r3, #1
 800b970:	d007      	beq.n	800b982 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	681a      	ldr	r2, [r3, #0]
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	f042 0201 	orr.w	r2, r2, #1
 800b980:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	681a      	ldr	r2, [r3, #0]
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b990:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	2222      	movs	r2, #34	; 0x22
 800b996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	2210      	movs	r2, #16
 800b99e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	2200      	movs	r2, #0
 800b9a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	687a      	ldr	r2, [r7, #4]
 800b9ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	893a      	ldrh	r2, [r7, #8]
 800b9b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b9b8:	b29a      	uxth	r2, r3
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	4a5c      	ldr	r2, [pc, #368]	; (800bb34 <HAL_I2C_Master_Receive+0x228>)
 800b9c2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b9c4:	8979      	ldrh	r1, [r7, #10]
 800b9c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b9ca:	68f8      	ldr	r0, [r7, #12]
 800b9cc:	f000 fa46 	bl	800be5c <I2C_MasterRequestRead>
 800b9d0:	4603      	mov	r3, r0
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d001      	beq.n	800b9da <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800b9d6:	2301      	movs	r3, #1
 800b9d8:	e1b8      	b.n	800bd4c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d113      	bne.n	800ba0a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	623b      	str	r3, [r7, #32]
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	695b      	ldr	r3, [r3, #20]
 800b9ec:	623b      	str	r3, [r7, #32]
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	699b      	ldr	r3, [r3, #24]
 800b9f4:	623b      	str	r3, [r7, #32]
 800b9f6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	681a      	ldr	r2, [r3, #0]
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ba06:	601a      	str	r2, [r3, #0]
 800ba08:	e18c      	b.n	800bd24 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba0e:	2b01      	cmp	r3, #1
 800ba10:	d11b      	bne.n	800ba4a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	681a      	ldr	r2, [r3, #0]
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ba20:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ba22:	2300      	movs	r3, #0
 800ba24:	61fb      	str	r3, [r7, #28]
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	695b      	ldr	r3, [r3, #20]
 800ba2c:	61fb      	str	r3, [r7, #28]
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	699b      	ldr	r3, [r3, #24]
 800ba34:	61fb      	str	r3, [r7, #28]
 800ba36:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	681a      	ldr	r2, [r3, #0]
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ba46:	601a      	str	r2, [r3, #0]
 800ba48:	e16c      	b.n	800bd24 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba4e:	2b02      	cmp	r3, #2
 800ba50:	d11b      	bne.n	800ba8a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	681a      	ldr	r2, [r3, #0]
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ba60:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	681a      	ldr	r2, [r3, #0]
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ba70:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ba72:	2300      	movs	r3, #0
 800ba74:	61bb      	str	r3, [r7, #24]
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	695b      	ldr	r3, [r3, #20]
 800ba7c:	61bb      	str	r3, [r7, #24]
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	699b      	ldr	r3, [r3, #24]
 800ba84:	61bb      	str	r3, [r7, #24]
 800ba86:	69bb      	ldr	r3, [r7, #24]
 800ba88:	e14c      	b.n	800bd24 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	681a      	ldr	r2, [r3, #0]
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ba98:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	617b      	str	r3, [r7, #20]
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	695b      	ldr	r3, [r3, #20]
 800baa4:	617b      	str	r3, [r7, #20]
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	699b      	ldr	r3, [r3, #24]
 800baac:	617b      	str	r3, [r7, #20]
 800baae:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800bab0:	e138      	b.n	800bd24 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bab6:	2b03      	cmp	r3, #3
 800bab8:	f200 80f1 	bhi.w	800bc9e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bac0:	2b01      	cmp	r3, #1
 800bac2:	d123      	bne.n	800bb0c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bac4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bac6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bac8:	68f8      	ldr	r0, [r7, #12]
 800baca:	f000 fbed 	bl	800c2a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800bace:	4603      	mov	r3, r0
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d001      	beq.n	800bad8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800bad4:	2301      	movs	r3, #1
 800bad6:	e139      	b.n	800bd4c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	691a      	ldr	r2, [r3, #16]
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bae2:	b2d2      	uxtb	r2, r2
 800bae4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baea:	1c5a      	adds	r2, r3, #1
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800baf4:	3b01      	subs	r3, #1
 800baf6:	b29a      	uxth	r2, r3
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb00:	b29b      	uxth	r3, r3
 800bb02:	3b01      	subs	r3, #1
 800bb04:	b29a      	uxth	r2, r3
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bb0a:	e10b      	b.n	800bd24 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb10:	2b02      	cmp	r3, #2
 800bb12:	d14e      	bne.n	800bbb2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800bb14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb16:	9300      	str	r3, [sp, #0]
 800bb18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb1a:	2200      	movs	r2, #0
 800bb1c:	4906      	ldr	r1, [pc, #24]	; (800bb38 <HAL_I2C_Master_Receive+0x22c>)
 800bb1e:	68f8      	ldr	r0, [r7, #12]
 800bb20:	f000 fa6a 	bl	800bff8 <I2C_WaitOnFlagUntilTimeout>
 800bb24:	4603      	mov	r3, r0
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d008      	beq.n	800bb3c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800bb2a:	2301      	movs	r3, #1
 800bb2c:	e10e      	b.n	800bd4c <HAL_I2C_Master_Receive+0x440>
 800bb2e:	bf00      	nop
 800bb30:	00100002 	.word	0x00100002
 800bb34:	ffff0000 	.word	0xffff0000
 800bb38:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	681a      	ldr	r2, [r3, #0]
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bb4a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	691a      	ldr	r2, [r3, #16]
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb56:	b2d2      	uxtb	r2, r2
 800bb58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb5e:	1c5a      	adds	r2, r3, #1
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb68:	3b01      	subs	r3, #1
 800bb6a:	b29a      	uxth	r2, r3
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb74:	b29b      	uxth	r3, r3
 800bb76:	3b01      	subs	r3, #1
 800bb78:	b29a      	uxth	r2, r3
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	691a      	ldr	r2, [r3, #16]
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb88:	b2d2      	uxtb	r2, r2
 800bb8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb90:	1c5a      	adds	r2, r3, #1
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb9a:	3b01      	subs	r3, #1
 800bb9c:	b29a      	uxth	r2, r3
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bba6:	b29b      	uxth	r3, r3
 800bba8:	3b01      	subs	r3, #1
 800bbaa:	b29a      	uxth	r2, r3
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bbb0:	e0b8      	b.n	800bd24 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800bbb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbb4:	9300      	str	r3, [sp, #0]
 800bbb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbb8:	2200      	movs	r2, #0
 800bbba:	4966      	ldr	r1, [pc, #408]	; (800bd54 <HAL_I2C_Master_Receive+0x448>)
 800bbbc:	68f8      	ldr	r0, [r7, #12]
 800bbbe:	f000 fa1b 	bl	800bff8 <I2C_WaitOnFlagUntilTimeout>
 800bbc2:	4603      	mov	r3, r0
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d001      	beq.n	800bbcc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800bbc8:	2301      	movs	r3, #1
 800bbca:	e0bf      	b.n	800bd4c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	681a      	ldr	r2, [r3, #0]
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bbda:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	691a      	ldr	r2, [r3, #16]
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbe6:	b2d2      	uxtb	r2, r2
 800bbe8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbee:	1c5a      	adds	r2, r3, #1
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bbf8:	3b01      	subs	r3, #1
 800bbfa:	b29a      	uxth	r2, r3
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc04:	b29b      	uxth	r3, r3
 800bc06:	3b01      	subs	r3, #1
 800bc08:	b29a      	uxth	r2, r3
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800bc0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc10:	9300      	str	r3, [sp, #0]
 800bc12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc14:	2200      	movs	r2, #0
 800bc16:	494f      	ldr	r1, [pc, #316]	; (800bd54 <HAL_I2C_Master_Receive+0x448>)
 800bc18:	68f8      	ldr	r0, [r7, #12]
 800bc1a:	f000 f9ed 	bl	800bff8 <I2C_WaitOnFlagUntilTimeout>
 800bc1e:	4603      	mov	r3, r0
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d001      	beq.n	800bc28 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800bc24:	2301      	movs	r3, #1
 800bc26:	e091      	b.n	800bd4c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	681a      	ldr	r2, [r3, #0]
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bc36:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	691a      	ldr	r2, [r3, #16]
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc42:	b2d2      	uxtb	r2, r2
 800bc44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc4a:	1c5a      	adds	r2, r3, #1
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc54:	3b01      	subs	r3, #1
 800bc56:	b29a      	uxth	r2, r3
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc60:	b29b      	uxth	r3, r3
 800bc62:	3b01      	subs	r3, #1
 800bc64:	b29a      	uxth	r2, r3
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	691a      	ldr	r2, [r3, #16]
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc74:	b2d2      	uxtb	r2, r2
 800bc76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc7c:	1c5a      	adds	r2, r3, #1
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc86:	3b01      	subs	r3, #1
 800bc88:	b29a      	uxth	r2, r3
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc92:	b29b      	uxth	r3, r3
 800bc94:	3b01      	subs	r3, #1
 800bc96:	b29a      	uxth	r2, r3
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bc9c:	e042      	b.n	800bd24 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bc9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bca0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bca2:	68f8      	ldr	r0, [r7, #12]
 800bca4:	f000 fb00 	bl	800c2a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800bca8:	4603      	mov	r3, r0
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d001      	beq.n	800bcb2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800bcae:	2301      	movs	r3, #1
 800bcb0:	e04c      	b.n	800bd4c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	691a      	ldr	r2, [r3, #16]
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcbc:	b2d2      	uxtb	r2, r2
 800bcbe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcc4:	1c5a      	adds	r2, r3, #1
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bcce:	3b01      	subs	r3, #1
 800bcd0:	b29a      	uxth	r2, r3
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bcda:	b29b      	uxth	r3, r3
 800bcdc:	3b01      	subs	r3, #1
 800bcde:	b29a      	uxth	r2, r3
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	695b      	ldr	r3, [r3, #20]
 800bcea:	f003 0304 	and.w	r3, r3, #4
 800bcee:	2b04      	cmp	r3, #4
 800bcf0:	d118      	bne.n	800bd24 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	691a      	ldr	r2, [r3, #16]
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcfc:	b2d2      	uxtb	r2, r2
 800bcfe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd04:	1c5a      	adds	r2, r3, #1
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bd0e:	3b01      	subs	r3, #1
 800bd10:	b29a      	uxth	r2, r3
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd1a:	b29b      	uxth	r3, r3
 800bd1c:	3b01      	subs	r3, #1
 800bd1e:	b29a      	uxth	r2, r3
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	f47f aec2 	bne.w	800bab2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	2220      	movs	r2, #32
 800bd32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	2200      	movs	r2, #0
 800bd3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	2200      	movs	r2, #0
 800bd42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800bd46:	2300      	movs	r3, #0
 800bd48:	e000      	b.n	800bd4c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800bd4a:	2302      	movs	r3, #2
  }
}
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	3728      	adds	r7, #40	; 0x28
 800bd50:	46bd      	mov	sp, r7
 800bd52:	bd80      	pop	{r7, pc}
 800bd54:	00010004 	.word	0x00010004

0800bd58 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	b088      	sub	sp, #32
 800bd5c:	af02      	add	r7, sp, #8
 800bd5e:	60f8      	str	r0, [r7, #12]
 800bd60:	607a      	str	r2, [r7, #4]
 800bd62:	603b      	str	r3, [r7, #0]
 800bd64:	460b      	mov	r3, r1
 800bd66:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd6c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800bd6e:	697b      	ldr	r3, [r7, #20]
 800bd70:	2b08      	cmp	r3, #8
 800bd72:	d006      	beq.n	800bd82 <I2C_MasterRequestWrite+0x2a>
 800bd74:	697b      	ldr	r3, [r7, #20]
 800bd76:	2b01      	cmp	r3, #1
 800bd78:	d003      	beq.n	800bd82 <I2C_MasterRequestWrite+0x2a>
 800bd7a:	697b      	ldr	r3, [r7, #20]
 800bd7c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bd80:	d108      	bne.n	800bd94 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	681a      	ldr	r2, [r3, #0]
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bd90:	601a      	str	r2, [r3, #0]
 800bd92:	e00b      	b.n	800bdac <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd98:	2b12      	cmp	r3, #18
 800bd9a:	d107      	bne.n	800bdac <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	681a      	ldr	r2, [r3, #0]
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bdaa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800bdac:	683b      	ldr	r3, [r7, #0]
 800bdae:	9300      	str	r3, [sp, #0]
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800bdb8:	68f8      	ldr	r0, [r7, #12]
 800bdba:	f000 f91d 	bl	800bff8 <I2C_WaitOnFlagUntilTimeout>
 800bdbe:	4603      	mov	r3, r0
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d00d      	beq.n	800bde0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bdce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bdd2:	d103      	bne.n	800bddc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bdda:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800bddc:	2303      	movs	r3, #3
 800bdde:	e035      	b.n	800be4c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	691b      	ldr	r3, [r3, #16]
 800bde4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bde8:	d108      	bne.n	800bdfc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800bdea:	897b      	ldrh	r3, [r7, #10]
 800bdec:	b2db      	uxtb	r3, r3
 800bdee:	461a      	mov	r2, r3
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800bdf8:	611a      	str	r2, [r3, #16]
 800bdfa:	e01b      	b.n	800be34 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800bdfc:	897b      	ldrh	r3, [r7, #10]
 800bdfe:	11db      	asrs	r3, r3, #7
 800be00:	b2db      	uxtb	r3, r3
 800be02:	f003 0306 	and.w	r3, r3, #6
 800be06:	b2db      	uxtb	r3, r3
 800be08:	f063 030f 	orn	r3, r3, #15
 800be0c:	b2da      	uxtb	r2, r3
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800be14:	683b      	ldr	r3, [r7, #0]
 800be16:	687a      	ldr	r2, [r7, #4]
 800be18:	490e      	ldr	r1, [pc, #56]	; (800be54 <I2C_MasterRequestWrite+0xfc>)
 800be1a:	68f8      	ldr	r0, [r7, #12]
 800be1c:	f000 f943 	bl	800c0a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800be20:	4603      	mov	r3, r0
 800be22:	2b00      	cmp	r3, #0
 800be24:	d001      	beq.n	800be2a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800be26:	2301      	movs	r3, #1
 800be28:	e010      	b.n	800be4c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800be2a:	897b      	ldrh	r3, [r7, #10]
 800be2c:	b2da      	uxtb	r2, r3
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800be34:	683b      	ldr	r3, [r7, #0]
 800be36:	687a      	ldr	r2, [r7, #4]
 800be38:	4907      	ldr	r1, [pc, #28]	; (800be58 <I2C_MasterRequestWrite+0x100>)
 800be3a:	68f8      	ldr	r0, [r7, #12]
 800be3c:	f000 f933 	bl	800c0a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800be40:	4603      	mov	r3, r0
 800be42:	2b00      	cmp	r3, #0
 800be44:	d001      	beq.n	800be4a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800be46:	2301      	movs	r3, #1
 800be48:	e000      	b.n	800be4c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800be4a:	2300      	movs	r3, #0
}
 800be4c:	4618      	mov	r0, r3
 800be4e:	3718      	adds	r7, #24
 800be50:	46bd      	mov	sp, r7
 800be52:	bd80      	pop	{r7, pc}
 800be54:	00010008 	.word	0x00010008
 800be58:	00010002 	.word	0x00010002

0800be5c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800be5c:	b580      	push	{r7, lr}
 800be5e:	b088      	sub	sp, #32
 800be60:	af02      	add	r7, sp, #8
 800be62:	60f8      	str	r0, [r7, #12]
 800be64:	607a      	str	r2, [r7, #4]
 800be66:	603b      	str	r3, [r7, #0]
 800be68:	460b      	mov	r3, r1
 800be6a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be70:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	681a      	ldr	r2, [r3, #0]
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800be80:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800be82:	697b      	ldr	r3, [r7, #20]
 800be84:	2b08      	cmp	r3, #8
 800be86:	d006      	beq.n	800be96 <I2C_MasterRequestRead+0x3a>
 800be88:	697b      	ldr	r3, [r7, #20]
 800be8a:	2b01      	cmp	r3, #1
 800be8c:	d003      	beq.n	800be96 <I2C_MasterRequestRead+0x3a>
 800be8e:	697b      	ldr	r3, [r7, #20]
 800be90:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800be94:	d108      	bne.n	800bea8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	681a      	ldr	r2, [r3, #0]
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bea4:	601a      	str	r2, [r3, #0]
 800bea6:	e00b      	b.n	800bec0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800beac:	2b11      	cmp	r3, #17
 800beae:	d107      	bne.n	800bec0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	681a      	ldr	r2, [r3, #0]
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bebe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800bec0:	683b      	ldr	r3, [r7, #0]
 800bec2:	9300      	str	r3, [sp, #0]
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	2200      	movs	r2, #0
 800bec8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800becc:	68f8      	ldr	r0, [r7, #12]
 800bece:	f000 f893 	bl	800bff8 <I2C_WaitOnFlagUntilTimeout>
 800bed2:	4603      	mov	r3, r0
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d00d      	beq.n	800bef4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bee2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bee6:	d103      	bne.n	800bef0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	f44f 7200 	mov.w	r2, #512	; 0x200
 800beee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800bef0:	2303      	movs	r3, #3
 800bef2:	e079      	b.n	800bfe8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	691b      	ldr	r3, [r3, #16]
 800bef8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800befc:	d108      	bne.n	800bf10 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800befe:	897b      	ldrh	r3, [r7, #10]
 800bf00:	b2db      	uxtb	r3, r3
 800bf02:	f043 0301 	orr.w	r3, r3, #1
 800bf06:	b2da      	uxtb	r2, r3
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	611a      	str	r2, [r3, #16]
 800bf0e:	e05f      	b.n	800bfd0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800bf10:	897b      	ldrh	r3, [r7, #10]
 800bf12:	11db      	asrs	r3, r3, #7
 800bf14:	b2db      	uxtb	r3, r3
 800bf16:	f003 0306 	and.w	r3, r3, #6
 800bf1a:	b2db      	uxtb	r3, r3
 800bf1c:	f063 030f 	orn	r3, r3, #15
 800bf20:	b2da      	uxtb	r2, r3
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800bf28:	683b      	ldr	r3, [r7, #0]
 800bf2a:	687a      	ldr	r2, [r7, #4]
 800bf2c:	4930      	ldr	r1, [pc, #192]	; (800bff0 <I2C_MasterRequestRead+0x194>)
 800bf2e:	68f8      	ldr	r0, [r7, #12]
 800bf30:	f000 f8b9 	bl	800c0a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bf34:	4603      	mov	r3, r0
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d001      	beq.n	800bf3e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800bf3a:	2301      	movs	r3, #1
 800bf3c:	e054      	b.n	800bfe8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800bf3e:	897b      	ldrh	r3, [r7, #10]
 800bf40:	b2da      	uxtb	r2, r3
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800bf48:	683b      	ldr	r3, [r7, #0]
 800bf4a:	687a      	ldr	r2, [r7, #4]
 800bf4c:	4929      	ldr	r1, [pc, #164]	; (800bff4 <I2C_MasterRequestRead+0x198>)
 800bf4e:	68f8      	ldr	r0, [r7, #12]
 800bf50:	f000 f8a9 	bl	800c0a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bf54:	4603      	mov	r3, r0
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d001      	beq.n	800bf5e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800bf5a:	2301      	movs	r3, #1
 800bf5c:	e044      	b.n	800bfe8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bf5e:	2300      	movs	r3, #0
 800bf60:	613b      	str	r3, [r7, #16]
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	695b      	ldr	r3, [r3, #20]
 800bf68:	613b      	str	r3, [r7, #16]
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	699b      	ldr	r3, [r3, #24]
 800bf70:	613b      	str	r3, [r7, #16]
 800bf72:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	681a      	ldr	r2, [r3, #0]
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bf82:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800bf84:	683b      	ldr	r3, [r7, #0]
 800bf86:	9300      	str	r3, [sp, #0]
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800bf90:	68f8      	ldr	r0, [r7, #12]
 800bf92:	f000 f831 	bl	800bff8 <I2C_WaitOnFlagUntilTimeout>
 800bf96:	4603      	mov	r3, r0
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d00d      	beq.n	800bfb8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bfa6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bfaa:	d103      	bne.n	800bfb4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bfb2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800bfb4:	2303      	movs	r3, #3
 800bfb6:	e017      	b.n	800bfe8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800bfb8:	897b      	ldrh	r3, [r7, #10]
 800bfba:	11db      	asrs	r3, r3, #7
 800bfbc:	b2db      	uxtb	r3, r3
 800bfbe:	f003 0306 	and.w	r3, r3, #6
 800bfc2:	b2db      	uxtb	r3, r3
 800bfc4:	f063 030e 	orn	r3, r3, #14
 800bfc8:	b2da      	uxtb	r2, r3
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800bfd0:	683b      	ldr	r3, [r7, #0]
 800bfd2:	687a      	ldr	r2, [r7, #4]
 800bfd4:	4907      	ldr	r1, [pc, #28]	; (800bff4 <I2C_MasterRequestRead+0x198>)
 800bfd6:	68f8      	ldr	r0, [r7, #12]
 800bfd8:	f000 f865 	bl	800c0a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bfdc:	4603      	mov	r3, r0
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d001      	beq.n	800bfe6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800bfe2:	2301      	movs	r3, #1
 800bfe4:	e000      	b.n	800bfe8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800bfe6:	2300      	movs	r3, #0
}
 800bfe8:	4618      	mov	r0, r3
 800bfea:	3718      	adds	r7, #24
 800bfec:	46bd      	mov	sp, r7
 800bfee:	bd80      	pop	{r7, pc}
 800bff0:	00010008 	.word	0x00010008
 800bff4:	00010002 	.word	0x00010002

0800bff8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800bff8:	b580      	push	{r7, lr}
 800bffa:	b084      	sub	sp, #16
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	60f8      	str	r0, [r7, #12]
 800c000:	60b9      	str	r1, [r7, #8]
 800c002:	603b      	str	r3, [r7, #0]
 800c004:	4613      	mov	r3, r2
 800c006:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c008:	e025      	b.n	800c056 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c00a:	683b      	ldr	r3, [r7, #0]
 800c00c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c010:	d021      	beq.n	800c056 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c012:	f7fd ff71 	bl	8009ef8 <HAL_GetTick>
 800c016:	4602      	mov	r2, r0
 800c018:	69bb      	ldr	r3, [r7, #24]
 800c01a:	1ad3      	subs	r3, r2, r3
 800c01c:	683a      	ldr	r2, [r7, #0]
 800c01e:	429a      	cmp	r2, r3
 800c020:	d302      	bcc.n	800c028 <I2C_WaitOnFlagUntilTimeout+0x30>
 800c022:	683b      	ldr	r3, [r7, #0]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d116      	bne.n	800c056 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	2200      	movs	r2, #0
 800c02c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	2220      	movs	r2, #32
 800c032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	2200      	movs	r2, #0
 800c03a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c042:	f043 0220 	orr.w	r2, r3, #32
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	2200      	movs	r2, #0
 800c04e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c052:	2301      	movs	r3, #1
 800c054:	e023      	b.n	800c09e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c056:	68bb      	ldr	r3, [r7, #8]
 800c058:	0c1b      	lsrs	r3, r3, #16
 800c05a:	b2db      	uxtb	r3, r3
 800c05c:	2b01      	cmp	r3, #1
 800c05e:	d10d      	bne.n	800c07c <I2C_WaitOnFlagUntilTimeout+0x84>
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	695b      	ldr	r3, [r3, #20]
 800c066:	43da      	mvns	r2, r3
 800c068:	68bb      	ldr	r3, [r7, #8]
 800c06a:	4013      	ands	r3, r2
 800c06c:	b29b      	uxth	r3, r3
 800c06e:	2b00      	cmp	r3, #0
 800c070:	bf0c      	ite	eq
 800c072:	2301      	moveq	r3, #1
 800c074:	2300      	movne	r3, #0
 800c076:	b2db      	uxtb	r3, r3
 800c078:	461a      	mov	r2, r3
 800c07a:	e00c      	b.n	800c096 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	699b      	ldr	r3, [r3, #24]
 800c082:	43da      	mvns	r2, r3
 800c084:	68bb      	ldr	r3, [r7, #8]
 800c086:	4013      	ands	r3, r2
 800c088:	b29b      	uxth	r3, r3
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	bf0c      	ite	eq
 800c08e:	2301      	moveq	r3, #1
 800c090:	2300      	movne	r3, #0
 800c092:	b2db      	uxtb	r3, r3
 800c094:	461a      	mov	r2, r3
 800c096:	79fb      	ldrb	r3, [r7, #7]
 800c098:	429a      	cmp	r2, r3
 800c09a:	d0b6      	beq.n	800c00a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c09c:	2300      	movs	r3, #0
}
 800c09e:	4618      	mov	r0, r3
 800c0a0:	3710      	adds	r7, #16
 800c0a2:	46bd      	mov	sp, r7
 800c0a4:	bd80      	pop	{r7, pc}

0800c0a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800c0a6:	b580      	push	{r7, lr}
 800c0a8:	b084      	sub	sp, #16
 800c0aa:	af00      	add	r7, sp, #0
 800c0ac:	60f8      	str	r0, [r7, #12]
 800c0ae:	60b9      	str	r1, [r7, #8]
 800c0b0:	607a      	str	r2, [r7, #4]
 800c0b2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800c0b4:	e051      	b.n	800c15a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	695b      	ldr	r3, [r3, #20]
 800c0bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c0c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c0c4:	d123      	bne.n	800c10e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	681a      	ldr	r2, [r3, #0]
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c0d4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800c0de:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	2220      	movs	r2, #32
 800c0ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	2200      	movs	r2, #0
 800c0f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0fa:	f043 0204 	orr.w	r2, r3, #4
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	2200      	movs	r2, #0
 800c106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c10a:	2301      	movs	r3, #1
 800c10c:	e046      	b.n	800c19c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c114:	d021      	beq.n	800c15a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c116:	f7fd feef 	bl	8009ef8 <HAL_GetTick>
 800c11a:	4602      	mov	r2, r0
 800c11c:	683b      	ldr	r3, [r7, #0]
 800c11e:	1ad3      	subs	r3, r2, r3
 800c120:	687a      	ldr	r2, [r7, #4]
 800c122:	429a      	cmp	r2, r3
 800c124:	d302      	bcc.n	800c12c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d116      	bne.n	800c15a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	2200      	movs	r2, #0
 800c130:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	2220      	movs	r2, #32
 800c136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	2200      	movs	r2, #0
 800c13e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c146:	f043 0220 	orr.w	r2, r3, #32
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	2200      	movs	r2, #0
 800c152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c156:	2301      	movs	r3, #1
 800c158:	e020      	b.n	800c19c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800c15a:	68bb      	ldr	r3, [r7, #8]
 800c15c:	0c1b      	lsrs	r3, r3, #16
 800c15e:	b2db      	uxtb	r3, r3
 800c160:	2b01      	cmp	r3, #1
 800c162:	d10c      	bne.n	800c17e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	695b      	ldr	r3, [r3, #20]
 800c16a:	43da      	mvns	r2, r3
 800c16c:	68bb      	ldr	r3, [r7, #8]
 800c16e:	4013      	ands	r3, r2
 800c170:	b29b      	uxth	r3, r3
 800c172:	2b00      	cmp	r3, #0
 800c174:	bf14      	ite	ne
 800c176:	2301      	movne	r3, #1
 800c178:	2300      	moveq	r3, #0
 800c17a:	b2db      	uxtb	r3, r3
 800c17c:	e00b      	b.n	800c196 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	699b      	ldr	r3, [r3, #24]
 800c184:	43da      	mvns	r2, r3
 800c186:	68bb      	ldr	r3, [r7, #8]
 800c188:	4013      	ands	r3, r2
 800c18a:	b29b      	uxth	r3, r3
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	bf14      	ite	ne
 800c190:	2301      	movne	r3, #1
 800c192:	2300      	moveq	r3, #0
 800c194:	b2db      	uxtb	r3, r3
 800c196:	2b00      	cmp	r3, #0
 800c198:	d18d      	bne.n	800c0b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800c19a:	2300      	movs	r3, #0
}
 800c19c:	4618      	mov	r0, r3
 800c19e:	3710      	adds	r7, #16
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	bd80      	pop	{r7, pc}

0800c1a4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b084      	sub	sp, #16
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	60f8      	str	r0, [r7, #12]
 800c1ac:	60b9      	str	r1, [r7, #8]
 800c1ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c1b0:	e02d      	b.n	800c20e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800c1b2:	68f8      	ldr	r0, [r7, #12]
 800c1b4:	f000 f8ce 	bl	800c354 <I2C_IsAcknowledgeFailed>
 800c1b8:	4603      	mov	r3, r0
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d001      	beq.n	800c1c2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800c1be:	2301      	movs	r3, #1
 800c1c0:	e02d      	b.n	800c21e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c1c2:	68bb      	ldr	r3, [r7, #8]
 800c1c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1c8:	d021      	beq.n	800c20e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c1ca:	f7fd fe95 	bl	8009ef8 <HAL_GetTick>
 800c1ce:	4602      	mov	r2, r0
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	1ad3      	subs	r3, r2, r3
 800c1d4:	68ba      	ldr	r2, [r7, #8]
 800c1d6:	429a      	cmp	r2, r3
 800c1d8:	d302      	bcc.n	800c1e0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800c1da:	68bb      	ldr	r3, [r7, #8]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d116      	bne.n	800c20e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	2220      	movs	r2, #32
 800c1ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	2200      	movs	r2, #0
 800c1f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1fa:	f043 0220 	orr.w	r2, r3, #32
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	2200      	movs	r2, #0
 800c206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c20a:	2301      	movs	r3, #1
 800c20c:	e007      	b.n	800c21e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	695b      	ldr	r3, [r3, #20]
 800c214:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c218:	2b80      	cmp	r3, #128	; 0x80
 800c21a:	d1ca      	bne.n	800c1b2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c21c:	2300      	movs	r3, #0
}
 800c21e:	4618      	mov	r0, r3
 800c220:	3710      	adds	r7, #16
 800c222:	46bd      	mov	sp, r7
 800c224:	bd80      	pop	{r7, pc}

0800c226 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c226:	b580      	push	{r7, lr}
 800c228:	b084      	sub	sp, #16
 800c22a:	af00      	add	r7, sp, #0
 800c22c:	60f8      	str	r0, [r7, #12]
 800c22e:	60b9      	str	r1, [r7, #8]
 800c230:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800c232:	e02d      	b.n	800c290 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800c234:	68f8      	ldr	r0, [r7, #12]
 800c236:	f000 f88d 	bl	800c354 <I2C_IsAcknowledgeFailed>
 800c23a:	4603      	mov	r3, r0
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d001      	beq.n	800c244 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800c240:	2301      	movs	r3, #1
 800c242:	e02d      	b.n	800c2a0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c244:	68bb      	ldr	r3, [r7, #8]
 800c246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c24a:	d021      	beq.n	800c290 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c24c:	f7fd fe54 	bl	8009ef8 <HAL_GetTick>
 800c250:	4602      	mov	r2, r0
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	1ad3      	subs	r3, r2, r3
 800c256:	68ba      	ldr	r2, [r7, #8]
 800c258:	429a      	cmp	r2, r3
 800c25a:	d302      	bcc.n	800c262 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800c25c:	68bb      	ldr	r3, [r7, #8]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d116      	bne.n	800c290 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	2200      	movs	r2, #0
 800c266:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	2220      	movs	r2, #32
 800c26c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	2200      	movs	r2, #0
 800c274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c27c:	f043 0220 	orr.w	r2, r3, #32
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	2200      	movs	r2, #0
 800c288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c28c:	2301      	movs	r3, #1
 800c28e:	e007      	b.n	800c2a0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	695b      	ldr	r3, [r3, #20]
 800c296:	f003 0304 	and.w	r3, r3, #4
 800c29a:	2b04      	cmp	r3, #4
 800c29c:	d1ca      	bne.n	800c234 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c29e:	2300      	movs	r3, #0
}
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	3710      	adds	r7, #16
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	bd80      	pop	{r7, pc}

0800c2a8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c2a8:	b580      	push	{r7, lr}
 800c2aa:	b084      	sub	sp, #16
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	60f8      	str	r0, [r7, #12]
 800c2b0:	60b9      	str	r1, [r7, #8]
 800c2b2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c2b4:	e042      	b.n	800c33c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	695b      	ldr	r3, [r3, #20]
 800c2bc:	f003 0310 	and.w	r3, r3, #16
 800c2c0:	2b10      	cmp	r3, #16
 800c2c2:	d119      	bne.n	800c2f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	f06f 0210 	mvn.w	r2, #16
 800c2cc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	2200      	movs	r2, #0
 800c2d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	2220      	movs	r2, #32
 800c2d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	2200      	movs	r2, #0
 800c2e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	2200      	movs	r2, #0
 800c2f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c2f4:	2301      	movs	r3, #1
 800c2f6:	e029      	b.n	800c34c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c2f8:	f7fd fdfe 	bl	8009ef8 <HAL_GetTick>
 800c2fc:	4602      	mov	r2, r0
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	1ad3      	subs	r3, r2, r3
 800c302:	68ba      	ldr	r2, [r7, #8]
 800c304:	429a      	cmp	r2, r3
 800c306:	d302      	bcc.n	800c30e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800c308:	68bb      	ldr	r3, [r7, #8]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d116      	bne.n	800c33c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	2200      	movs	r2, #0
 800c312:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	2220      	movs	r2, #32
 800c318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	2200      	movs	r2, #0
 800c320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c328:	f043 0220 	orr.w	r2, r3, #32
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	2200      	movs	r2, #0
 800c334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c338:	2301      	movs	r3, #1
 800c33a:	e007      	b.n	800c34c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	695b      	ldr	r3, [r3, #20]
 800c342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c346:	2b40      	cmp	r3, #64	; 0x40
 800c348:	d1b5      	bne.n	800c2b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800c34a:	2300      	movs	r3, #0
}
 800c34c:	4618      	mov	r0, r3
 800c34e:	3710      	adds	r7, #16
 800c350:	46bd      	mov	sp, r7
 800c352:	bd80      	pop	{r7, pc}

0800c354 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800c354:	b480      	push	{r7}
 800c356:	b083      	sub	sp, #12
 800c358:	af00      	add	r7, sp, #0
 800c35a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	695b      	ldr	r3, [r3, #20]
 800c362:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c366:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c36a:	d11b      	bne.n	800c3a4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800c374:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	2200      	movs	r2, #0
 800c37a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	2220      	movs	r2, #32
 800c380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	2200      	movs	r2, #0
 800c388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c390:	f043 0204 	orr.w	r2, r3, #4
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	2200      	movs	r2, #0
 800c39c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800c3a0:	2301      	movs	r3, #1
 800c3a2:	e000      	b.n	800c3a6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800c3a4:	2300      	movs	r3, #0
}
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	370c      	adds	r7, #12
 800c3aa:	46bd      	mov	sp, r7
 800c3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b0:	4770      	bx	lr
	...

0800c3b4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	b082      	sub	sp, #8
 800c3b8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800c3be:	2300      	movs	r3, #0
 800c3c0:	603b      	str	r3, [r7, #0]
 800c3c2:	4b20      	ldr	r3, [pc, #128]	; (800c444 <HAL_PWREx_EnableOverDrive+0x90>)
 800c3c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3c6:	4a1f      	ldr	r2, [pc, #124]	; (800c444 <HAL_PWREx_EnableOverDrive+0x90>)
 800c3c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c3cc:	6413      	str	r3, [r2, #64]	; 0x40
 800c3ce:	4b1d      	ldr	r3, [pc, #116]	; (800c444 <HAL_PWREx_EnableOverDrive+0x90>)
 800c3d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c3d6:	603b      	str	r3, [r7, #0]
 800c3d8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800c3da:	4b1b      	ldr	r3, [pc, #108]	; (800c448 <HAL_PWREx_EnableOverDrive+0x94>)
 800c3dc:	2201      	movs	r2, #1
 800c3de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c3e0:	f7fd fd8a 	bl	8009ef8 <HAL_GetTick>
 800c3e4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800c3e6:	e009      	b.n	800c3fc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800c3e8:	f7fd fd86 	bl	8009ef8 <HAL_GetTick>
 800c3ec:	4602      	mov	r2, r0
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	1ad3      	subs	r3, r2, r3
 800c3f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c3f6:	d901      	bls.n	800c3fc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800c3f8:	2303      	movs	r3, #3
 800c3fa:	e01f      	b.n	800c43c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800c3fc:	4b13      	ldr	r3, [pc, #76]	; (800c44c <HAL_PWREx_EnableOverDrive+0x98>)
 800c3fe:	685b      	ldr	r3, [r3, #4]
 800c400:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c404:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c408:	d1ee      	bne.n	800c3e8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800c40a:	4b11      	ldr	r3, [pc, #68]	; (800c450 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c40c:	2201      	movs	r2, #1
 800c40e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c410:	f7fd fd72 	bl	8009ef8 <HAL_GetTick>
 800c414:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800c416:	e009      	b.n	800c42c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800c418:	f7fd fd6e 	bl	8009ef8 <HAL_GetTick>
 800c41c:	4602      	mov	r2, r0
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	1ad3      	subs	r3, r2, r3
 800c422:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c426:	d901      	bls.n	800c42c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800c428:	2303      	movs	r3, #3
 800c42a:	e007      	b.n	800c43c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800c42c:	4b07      	ldr	r3, [pc, #28]	; (800c44c <HAL_PWREx_EnableOverDrive+0x98>)
 800c42e:	685b      	ldr	r3, [r3, #4]
 800c430:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c434:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c438:	d1ee      	bne.n	800c418 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800c43a:	2300      	movs	r3, #0
}
 800c43c:	4618      	mov	r0, r3
 800c43e:	3708      	adds	r7, #8
 800c440:	46bd      	mov	sp, r7
 800c442:	bd80      	pop	{r7, pc}
 800c444:	40023800 	.word	0x40023800
 800c448:	420e0040 	.word	0x420e0040
 800c44c:	40007000 	.word	0x40007000
 800c450:	420e0044 	.word	0x420e0044

0800c454 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c454:	b580      	push	{r7, lr}
 800c456:	b084      	sub	sp, #16
 800c458:	af00      	add	r7, sp, #0
 800c45a:	6078      	str	r0, [r7, #4]
 800c45c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	2b00      	cmp	r3, #0
 800c462:	d101      	bne.n	800c468 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c464:	2301      	movs	r3, #1
 800c466:	e0cc      	b.n	800c602 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c468:	4b68      	ldr	r3, [pc, #416]	; (800c60c <HAL_RCC_ClockConfig+0x1b8>)
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	f003 030f 	and.w	r3, r3, #15
 800c470:	683a      	ldr	r2, [r7, #0]
 800c472:	429a      	cmp	r2, r3
 800c474:	d90c      	bls.n	800c490 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c476:	4b65      	ldr	r3, [pc, #404]	; (800c60c <HAL_RCC_ClockConfig+0x1b8>)
 800c478:	683a      	ldr	r2, [r7, #0]
 800c47a:	b2d2      	uxtb	r2, r2
 800c47c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c47e:	4b63      	ldr	r3, [pc, #396]	; (800c60c <HAL_RCC_ClockConfig+0x1b8>)
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	f003 030f 	and.w	r3, r3, #15
 800c486:	683a      	ldr	r2, [r7, #0]
 800c488:	429a      	cmp	r2, r3
 800c48a:	d001      	beq.n	800c490 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800c48c:	2301      	movs	r3, #1
 800c48e:	e0b8      	b.n	800c602 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	f003 0302 	and.w	r3, r3, #2
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d020      	beq.n	800c4de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	f003 0304 	and.w	r3, r3, #4
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d005      	beq.n	800c4b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c4a8:	4b59      	ldr	r3, [pc, #356]	; (800c610 <HAL_RCC_ClockConfig+0x1bc>)
 800c4aa:	689b      	ldr	r3, [r3, #8]
 800c4ac:	4a58      	ldr	r2, [pc, #352]	; (800c610 <HAL_RCC_ClockConfig+0x1bc>)
 800c4ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800c4b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	f003 0308 	and.w	r3, r3, #8
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d005      	beq.n	800c4cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c4c0:	4b53      	ldr	r3, [pc, #332]	; (800c610 <HAL_RCC_ClockConfig+0x1bc>)
 800c4c2:	689b      	ldr	r3, [r3, #8]
 800c4c4:	4a52      	ldr	r2, [pc, #328]	; (800c610 <HAL_RCC_ClockConfig+0x1bc>)
 800c4c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800c4ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c4cc:	4b50      	ldr	r3, [pc, #320]	; (800c610 <HAL_RCC_ClockConfig+0x1bc>)
 800c4ce:	689b      	ldr	r3, [r3, #8]
 800c4d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	689b      	ldr	r3, [r3, #8]
 800c4d8:	494d      	ldr	r1, [pc, #308]	; (800c610 <HAL_RCC_ClockConfig+0x1bc>)
 800c4da:	4313      	orrs	r3, r2
 800c4dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	f003 0301 	and.w	r3, r3, #1
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d044      	beq.n	800c574 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	685b      	ldr	r3, [r3, #4]
 800c4ee:	2b01      	cmp	r3, #1
 800c4f0:	d107      	bne.n	800c502 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c4f2:	4b47      	ldr	r3, [pc, #284]	; (800c610 <HAL_RCC_ClockConfig+0x1bc>)
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d119      	bne.n	800c532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c4fe:	2301      	movs	r3, #1
 800c500:	e07f      	b.n	800c602 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	685b      	ldr	r3, [r3, #4]
 800c506:	2b02      	cmp	r3, #2
 800c508:	d003      	beq.n	800c512 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c50e:	2b03      	cmp	r3, #3
 800c510:	d107      	bne.n	800c522 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c512:	4b3f      	ldr	r3, [pc, #252]	; (800c610 <HAL_RCC_ClockConfig+0x1bc>)
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d109      	bne.n	800c532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c51e:	2301      	movs	r3, #1
 800c520:	e06f      	b.n	800c602 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c522:	4b3b      	ldr	r3, [pc, #236]	; (800c610 <HAL_RCC_ClockConfig+0x1bc>)
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	f003 0302 	and.w	r3, r3, #2
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d101      	bne.n	800c532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c52e:	2301      	movs	r3, #1
 800c530:	e067      	b.n	800c602 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c532:	4b37      	ldr	r3, [pc, #220]	; (800c610 <HAL_RCC_ClockConfig+0x1bc>)
 800c534:	689b      	ldr	r3, [r3, #8]
 800c536:	f023 0203 	bic.w	r2, r3, #3
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	685b      	ldr	r3, [r3, #4]
 800c53e:	4934      	ldr	r1, [pc, #208]	; (800c610 <HAL_RCC_ClockConfig+0x1bc>)
 800c540:	4313      	orrs	r3, r2
 800c542:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c544:	f7fd fcd8 	bl	8009ef8 <HAL_GetTick>
 800c548:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c54a:	e00a      	b.n	800c562 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c54c:	f7fd fcd4 	bl	8009ef8 <HAL_GetTick>
 800c550:	4602      	mov	r2, r0
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	1ad3      	subs	r3, r2, r3
 800c556:	f241 3288 	movw	r2, #5000	; 0x1388
 800c55a:	4293      	cmp	r3, r2
 800c55c:	d901      	bls.n	800c562 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800c55e:	2303      	movs	r3, #3
 800c560:	e04f      	b.n	800c602 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c562:	4b2b      	ldr	r3, [pc, #172]	; (800c610 <HAL_RCC_ClockConfig+0x1bc>)
 800c564:	689b      	ldr	r3, [r3, #8]
 800c566:	f003 020c 	and.w	r2, r3, #12
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	685b      	ldr	r3, [r3, #4]
 800c56e:	009b      	lsls	r3, r3, #2
 800c570:	429a      	cmp	r2, r3
 800c572:	d1eb      	bne.n	800c54c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c574:	4b25      	ldr	r3, [pc, #148]	; (800c60c <HAL_RCC_ClockConfig+0x1b8>)
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	f003 030f 	and.w	r3, r3, #15
 800c57c:	683a      	ldr	r2, [r7, #0]
 800c57e:	429a      	cmp	r2, r3
 800c580:	d20c      	bcs.n	800c59c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c582:	4b22      	ldr	r3, [pc, #136]	; (800c60c <HAL_RCC_ClockConfig+0x1b8>)
 800c584:	683a      	ldr	r2, [r7, #0]
 800c586:	b2d2      	uxtb	r2, r2
 800c588:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c58a:	4b20      	ldr	r3, [pc, #128]	; (800c60c <HAL_RCC_ClockConfig+0x1b8>)
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	f003 030f 	and.w	r3, r3, #15
 800c592:	683a      	ldr	r2, [r7, #0]
 800c594:	429a      	cmp	r2, r3
 800c596:	d001      	beq.n	800c59c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800c598:	2301      	movs	r3, #1
 800c59a:	e032      	b.n	800c602 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	f003 0304 	and.w	r3, r3, #4
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d008      	beq.n	800c5ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c5a8:	4b19      	ldr	r3, [pc, #100]	; (800c610 <HAL_RCC_ClockConfig+0x1bc>)
 800c5aa:	689b      	ldr	r3, [r3, #8]
 800c5ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	68db      	ldr	r3, [r3, #12]
 800c5b4:	4916      	ldr	r1, [pc, #88]	; (800c610 <HAL_RCC_ClockConfig+0x1bc>)
 800c5b6:	4313      	orrs	r3, r2
 800c5b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	f003 0308 	and.w	r3, r3, #8
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d009      	beq.n	800c5da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c5c6:	4b12      	ldr	r3, [pc, #72]	; (800c610 <HAL_RCC_ClockConfig+0x1bc>)
 800c5c8:	689b      	ldr	r3, [r3, #8]
 800c5ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	691b      	ldr	r3, [r3, #16]
 800c5d2:	00db      	lsls	r3, r3, #3
 800c5d4:	490e      	ldr	r1, [pc, #56]	; (800c610 <HAL_RCC_ClockConfig+0x1bc>)
 800c5d6:	4313      	orrs	r3, r2
 800c5d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800c5da:	f000 f821 	bl	800c620 <HAL_RCC_GetSysClockFreq>
 800c5de:	4601      	mov	r1, r0
 800c5e0:	4b0b      	ldr	r3, [pc, #44]	; (800c610 <HAL_RCC_ClockConfig+0x1bc>)
 800c5e2:	689b      	ldr	r3, [r3, #8]
 800c5e4:	091b      	lsrs	r3, r3, #4
 800c5e6:	f003 030f 	and.w	r3, r3, #15
 800c5ea:	4a0a      	ldr	r2, [pc, #40]	; (800c614 <HAL_RCC_ClockConfig+0x1c0>)
 800c5ec:	5cd3      	ldrb	r3, [r2, r3]
 800c5ee:	fa21 f303 	lsr.w	r3, r1, r3
 800c5f2:	4a09      	ldr	r2, [pc, #36]	; (800c618 <HAL_RCC_ClockConfig+0x1c4>)
 800c5f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800c5f6:	4b09      	ldr	r3, [pc, #36]	; (800c61c <HAL_RCC_ClockConfig+0x1c8>)
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	f7fd fc38 	bl	8009e70 <HAL_InitTick>

  return HAL_OK;
 800c600:	2300      	movs	r3, #0
}
 800c602:	4618      	mov	r0, r3
 800c604:	3710      	adds	r7, #16
 800c606:	46bd      	mov	sp, r7
 800c608:	bd80      	pop	{r7, pc}
 800c60a:	bf00      	nop
 800c60c:	40023c00 	.word	0x40023c00
 800c610:	40023800 	.word	0x40023800
 800c614:	08019188 	.word	0x08019188
 800c618:	20000000 	.word	0x20000000
 800c61c:	20000004 	.word	0x20000004

0800c620 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c620:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c622:	b085      	sub	sp, #20
 800c624:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800c626:	2300      	movs	r3, #0
 800c628:	607b      	str	r3, [r7, #4]
 800c62a:	2300      	movs	r3, #0
 800c62c:	60fb      	str	r3, [r7, #12]
 800c62e:	2300      	movs	r3, #0
 800c630:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800c632:	2300      	movs	r3, #0
 800c634:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c636:	4b63      	ldr	r3, [pc, #396]	; (800c7c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c638:	689b      	ldr	r3, [r3, #8]
 800c63a:	f003 030c 	and.w	r3, r3, #12
 800c63e:	2b04      	cmp	r3, #4
 800c640:	d007      	beq.n	800c652 <HAL_RCC_GetSysClockFreq+0x32>
 800c642:	2b08      	cmp	r3, #8
 800c644:	d008      	beq.n	800c658 <HAL_RCC_GetSysClockFreq+0x38>
 800c646:	2b00      	cmp	r3, #0
 800c648:	f040 80b4 	bne.w	800c7b4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c64c:	4b5e      	ldr	r3, [pc, #376]	; (800c7c8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800c64e:	60bb      	str	r3, [r7, #8]
       break;
 800c650:	e0b3      	b.n	800c7ba <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c652:	4b5d      	ldr	r3, [pc, #372]	; (800c7c8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800c654:	60bb      	str	r3, [r7, #8]
      break;
 800c656:	e0b0      	b.n	800c7ba <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c658:	4b5a      	ldr	r3, [pc, #360]	; (800c7c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c65a:	685b      	ldr	r3, [r3, #4]
 800c65c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c660:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c662:	4b58      	ldr	r3, [pc, #352]	; (800c7c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c664:	685b      	ldr	r3, [r3, #4]
 800c666:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d04a      	beq.n	800c704 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c66e:	4b55      	ldr	r3, [pc, #340]	; (800c7c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c670:	685b      	ldr	r3, [r3, #4]
 800c672:	099b      	lsrs	r3, r3, #6
 800c674:	f04f 0400 	mov.w	r4, #0
 800c678:	f240 11ff 	movw	r1, #511	; 0x1ff
 800c67c:	f04f 0200 	mov.w	r2, #0
 800c680:	ea03 0501 	and.w	r5, r3, r1
 800c684:	ea04 0602 	and.w	r6, r4, r2
 800c688:	4629      	mov	r1, r5
 800c68a:	4632      	mov	r2, r6
 800c68c:	f04f 0300 	mov.w	r3, #0
 800c690:	f04f 0400 	mov.w	r4, #0
 800c694:	0154      	lsls	r4, r2, #5
 800c696:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800c69a:	014b      	lsls	r3, r1, #5
 800c69c:	4619      	mov	r1, r3
 800c69e:	4622      	mov	r2, r4
 800c6a0:	1b49      	subs	r1, r1, r5
 800c6a2:	eb62 0206 	sbc.w	r2, r2, r6
 800c6a6:	f04f 0300 	mov.w	r3, #0
 800c6aa:	f04f 0400 	mov.w	r4, #0
 800c6ae:	0194      	lsls	r4, r2, #6
 800c6b0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800c6b4:	018b      	lsls	r3, r1, #6
 800c6b6:	1a5b      	subs	r3, r3, r1
 800c6b8:	eb64 0402 	sbc.w	r4, r4, r2
 800c6bc:	f04f 0100 	mov.w	r1, #0
 800c6c0:	f04f 0200 	mov.w	r2, #0
 800c6c4:	00e2      	lsls	r2, r4, #3
 800c6c6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800c6ca:	00d9      	lsls	r1, r3, #3
 800c6cc:	460b      	mov	r3, r1
 800c6ce:	4614      	mov	r4, r2
 800c6d0:	195b      	adds	r3, r3, r5
 800c6d2:	eb44 0406 	adc.w	r4, r4, r6
 800c6d6:	f04f 0100 	mov.w	r1, #0
 800c6da:	f04f 0200 	mov.w	r2, #0
 800c6de:	02a2      	lsls	r2, r4, #10
 800c6e0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800c6e4:	0299      	lsls	r1, r3, #10
 800c6e6:	460b      	mov	r3, r1
 800c6e8:	4614      	mov	r4, r2
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	4621      	mov	r1, r4
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	f04f 0400 	mov.w	r4, #0
 800c6f4:	461a      	mov	r2, r3
 800c6f6:	4623      	mov	r3, r4
 800c6f8:	f7f4 fade 	bl	8000cb8 <__aeabi_uldivmod>
 800c6fc:	4603      	mov	r3, r0
 800c6fe:	460c      	mov	r4, r1
 800c700:	60fb      	str	r3, [r7, #12]
 800c702:	e049      	b.n	800c798 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c704:	4b2f      	ldr	r3, [pc, #188]	; (800c7c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c706:	685b      	ldr	r3, [r3, #4]
 800c708:	099b      	lsrs	r3, r3, #6
 800c70a:	f04f 0400 	mov.w	r4, #0
 800c70e:	f240 11ff 	movw	r1, #511	; 0x1ff
 800c712:	f04f 0200 	mov.w	r2, #0
 800c716:	ea03 0501 	and.w	r5, r3, r1
 800c71a:	ea04 0602 	and.w	r6, r4, r2
 800c71e:	4629      	mov	r1, r5
 800c720:	4632      	mov	r2, r6
 800c722:	f04f 0300 	mov.w	r3, #0
 800c726:	f04f 0400 	mov.w	r4, #0
 800c72a:	0154      	lsls	r4, r2, #5
 800c72c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800c730:	014b      	lsls	r3, r1, #5
 800c732:	4619      	mov	r1, r3
 800c734:	4622      	mov	r2, r4
 800c736:	1b49      	subs	r1, r1, r5
 800c738:	eb62 0206 	sbc.w	r2, r2, r6
 800c73c:	f04f 0300 	mov.w	r3, #0
 800c740:	f04f 0400 	mov.w	r4, #0
 800c744:	0194      	lsls	r4, r2, #6
 800c746:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800c74a:	018b      	lsls	r3, r1, #6
 800c74c:	1a5b      	subs	r3, r3, r1
 800c74e:	eb64 0402 	sbc.w	r4, r4, r2
 800c752:	f04f 0100 	mov.w	r1, #0
 800c756:	f04f 0200 	mov.w	r2, #0
 800c75a:	00e2      	lsls	r2, r4, #3
 800c75c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800c760:	00d9      	lsls	r1, r3, #3
 800c762:	460b      	mov	r3, r1
 800c764:	4614      	mov	r4, r2
 800c766:	195b      	adds	r3, r3, r5
 800c768:	eb44 0406 	adc.w	r4, r4, r6
 800c76c:	f04f 0100 	mov.w	r1, #0
 800c770:	f04f 0200 	mov.w	r2, #0
 800c774:	02a2      	lsls	r2, r4, #10
 800c776:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800c77a:	0299      	lsls	r1, r3, #10
 800c77c:	460b      	mov	r3, r1
 800c77e:	4614      	mov	r4, r2
 800c780:	4618      	mov	r0, r3
 800c782:	4621      	mov	r1, r4
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	f04f 0400 	mov.w	r4, #0
 800c78a:	461a      	mov	r2, r3
 800c78c:	4623      	mov	r3, r4
 800c78e:	f7f4 fa93 	bl	8000cb8 <__aeabi_uldivmod>
 800c792:	4603      	mov	r3, r0
 800c794:	460c      	mov	r4, r1
 800c796:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800c798:	4b0a      	ldr	r3, [pc, #40]	; (800c7c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c79a:	685b      	ldr	r3, [r3, #4]
 800c79c:	0c1b      	lsrs	r3, r3, #16
 800c79e:	f003 0303 	and.w	r3, r3, #3
 800c7a2:	3301      	adds	r3, #1
 800c7a4:	005b      	lsls	r3, r3, #1
 800c7a6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800c7a8:	68fa      	ldr	r2, [r7, #12]
 800c7aa:	683b      	ldr	r3, [r7, #0]
 800c7ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800c7b0:	60bb      	str	r3, [r7, #8]
      break;
 800c7b2:	e002      	b.n	800c7ba <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c7b4:	4b04      	ldr	r3, [pc, #16]	; (800c7c8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800c7b6:	60bb      	str	r3, [r7, #8]
      break;
 800c7b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c7ba:	68bb      	ldr	r3, [r7, #8]
}
 800c7bc:	4618      	mov	r0, r3
 800c7be:	3714      	adds	r7, #20
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c7c4:	40023800 	.word	0x40023800
 800c7c8:	00f42400 	.word	0x00f42400

0800c7cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c7cc:	b480      	push	{r7}
 800c7ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c7d0:	4b03      	ldr	r3, [pc, #12]	; (800c7e0 <HAL_RCC_GetHCLKFreq+0x14>)
 800c7d2:	681b      	ldr	r3, [r3, #0]
}
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	46bd      	mov	sp, r7
 800c7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7dc:	4770      	bx	lr
 800c7de:	bf00      	nop
 800c7e0:	20000000 	.word	0x20000000

0800c7e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c7e4:	b580      	push	{r7, lr}
 800c7e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800c7e8:	f7ff fff0 	bl	800c7cc <HAL_RCC_GetHCLKFreq>
 800c7ec:	4601      	mov	r1, r0
 800c7ee:	4b05      	ldr	r3, [pc, #20]	; (800c804 <HAL_RCC_GetPCLK1Freq+0x20>)
 800c7f0:	689b      	ldr	r3, [r3, #8]
 800c7f2:	0a9b      	lsrs	r3, r3, #10
 800c7f4:	f003 0307 	and.w	r3, r3, #7
 800c7f8:	4a03      	ldr	r2, [pc, #12]	; (800c808 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c7fa:	5cd3      	ldrb	r3, [r2, r3]
 800c7fc:	fa21 f303 	lsr.w	r3, r1, r3
}
 800c800:	4618      	mov	r0, r3
 800c802:	bd80      	pop	{r7, pc}
 800c804:	40023800 	.word	0x40023800
 800c808:	08019198 	.word	0x08019198

0800c80c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c80c:	b580      	push	{r7, lr}
 800c80e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800c810:	f7ff ffdc 	bl	800c7cc <HAL_RCC_GetHCLKFreq>
 800c814:	4601      	mov	r1, r0
 800c816:	4b05      	ldr	r3, [pc, #20]	; (800c82c <HAL_RCC_GetPCLK2Freq+0x20>)
 800c818:	689b      	ldr	r3, [r3, #8]
 800c81a:	0b5b      	lsrs	r3, r3, #13
 800c81c:	f003 0307 	and.w	r3, r3, #7
 800c820:	4a03      	ldr	r2, [pc, #12]	; (800c830 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c822:	5cd3      	ldrb	r3, [r2, r3]
 800c824:	fa21 f303 	lsr.w	r3, r1, r3
}
 800c828:	4618      	mov	r0, r3
 800c82a:	bd80      	pop	{r7, pc}
 800c82c:	40023800 	.word	0x40023800
 800c830:	08019198 	.word	0x08019198

0800c834 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c834:	b580      	push	{r7, lr}
 800c836:	b088      	sub	sp, #32
 800c838:	af00      	add	r7, sp, #0
 800c83a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c83c:	2300      	movs	r3, #0
 800c83e:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 800c840:	2300      	movs	r3, #0
 800c842:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 800c844:	2300      	movs	r3, #0
 800c846:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 800c848:	2300      	movs	r3, #0
 800c84a:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 800c84c:	2300      	movs	r3, #0
 800c84e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d00a      	beq.n	800c872 <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800c85c:	4b66      	ldr	r3, [pc, #408]	; (800c9f8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c85e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c862:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c86a:	4963      	ldr	r1, [pc, #396]	; (800c9f8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c86c:	4313      	orrs	r3, r2
 800c86e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d00a      	beq.n	800c894 <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800c87e:	4b5e      	ldr	r3, [pc, #376]	; (800c9f8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c880:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c884:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c88c:	495a      	ldr	r1, [pc, #360]	; (800c9f8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c88e:	4313      	orrs	r3, r2
 800c890:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	f003 0301 	and.w	r3, r3, #1
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d10b      	bne.n	800c8b8 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d105      	bne.n	800c8b8 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d075      	beq.n	800c9a4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800c8b8:	4b50      	ldr	r3, [pc, #320]	; (800c9fc <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c8be:	f7fd fb1b 	bl	8009ef8 <HAL_GetTick>
 800c8c2:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c8c4:	e008      	b.n	800c8d8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c8c6:	f7fd fb17 	bl	8009ef8 <HAL_GetTick>
 800c8ca:	4602      	mov	r2, r0
 800c8cc:	69fb      	ldr	r3, [r7, #28]
 800c8ce:	1ad3      	subs	r3, r2, r3
 800c8d0:	2b02      	cmp	r3, #2
 800c8d2:	d901      	bls.n	800c8d8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c8d4:	2303      	movs	r3, #3
 800c8d6:	e1dc      	b.n	800cc92 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c8d8:	4b47      	ldr	r3, [pc, #284]	; (800c9f8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d1f0      	bne.n	800c8c6 <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	f003 0301 	and.w	r3, r3, #1
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d009      	beq.n	800c904 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	685b      	ldr	r3, [r3, #4]
 800c8f4:	019a      	lsls	r2, r3, #6
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	689b      	ldr	r3, [r3, #8]
 800c8fa:	071b      	lsls	r3, r3, #28
 800c8fc:	493e      	ldr	r1, [pc, #248]	; (800c9f8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c8fe:	4313      	orrs	r3, r2
 800c900:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	f003 0302 	and.w	r3, r3, #2
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d01f      	beq.n	800c950 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c910:	4b39      	ldr	r3, [pc, #228]	; (800c9f8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c912:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c916:	0f1b      	lsrs	r3, r3, #28
 800c918:	f003 0307 	and.w	r3, r3, #7
 800c91c:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	685b      	ldr	r3, [r3, #4]
 800c922:	019a      	lsls	r2, r3, #6
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	68db      	ldr	r3, [r3, #12]
 800c928:	061b      	lsls	r3, r3, #24
 800c92a:	431a      	orrs	r2, r3
 800c92c:	69bb      	ldr	r3, [r7, #24]
 800c92e:	071b      	lsls	r3, r3, #28
 800c930:	4931      	ldr	r1, [pc, #196]	; (800c9f8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c932:	4313      	orrs	r3, r2
 800c934:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800c938:	4b2f      	ldr	r3, [pc, #188]	; (800c9f8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c93a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c93e:	f023 021f 	bic.w	r2, r3, #31
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	6a1b      	ldr	r3, [r3, #32]
 800c946:	3b01      	subs	r3, #1
 800c948:	492b      	ldr	r1, [pc, #172]	; (800c9f8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c94a:	4313      	orrs	r3, r2
 800c94c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d00d      	beq.n	800c978 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	685b      	ldr	r3, [r3, #4]
 800c960:	019a      	lsls	r2, r3, #6
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	68db      	ldr	r3, [r3, #12]
 800c966:	061b      	lsls	r3, r3, #24
 800c968:	431a      	orrs	r2, r3
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	689b      	ldr	r3, [r3, #8]
 800c96e:	071b      	lsls	r3, r3, #28
 800c970:	4921      	ldr	r1, [pc, #132]	; (800c9f8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c972:	4313      	orrs	r3, r2
 800c974:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800c978:	4b20      	ldr	r3, [pc, #128]	; (800c9fc <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800c97a:	2201      	movs	r2, #1
 800c97c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c97e:	f7fd fabb 	bl	8009ef8 <HAL_GetTick>
 800c982:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c984:	e008      	b.n	800c998 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c986:	f7fd fab7 	bl	8009ef8 <HAL_GetTick>
 800c98a:	4602      	mov	r2, r0
 800c98c:	69fb      	ldr	r3, [r7, #28]
 800c98e:	1ad3      	subs	r3, r2, r3
 800c990:	2b02      	cmp	r3, #2
 800c992:	d901      	bls.n	800c998 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c994:	2303      	movs	r3, #3
 800c996:	e17c      	b.n	800cc92 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c998:	4b17      	ldr	r3, [pc, #92]	; (800c9f8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d0f0      	beq.n	800c986 <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	f003 0304 	and.w	r3, r3, #4
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d112      	bne.n	800c9d6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d10c      	bne.n	800c9d6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	f000 80ce 	beq.w	800cb66 <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800c9ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c9d2:	f040 80c8 	bne.w	800cb66 <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800c9d6:	4b0a      	ldr	r3, [pc, #40]	; (800ca00 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800c9d8:	2200      	movs	r2, #0
 800c9da:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c9dc:	f7fd fa8c 	bl	8009ef8 <HAL_GetTick>
 800c9e0:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c9e2:	e00f      	b.n	800ca04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800c9e4:	f7fd fa88 	bl	8009ef8 <HAL_GetTick>
 800c9e8:	4602      	mov	r2, r0
 800c9ea:	69fb      	ldr	r3, [r7, #28]
 800c9ec:	1ad3      	subs	r3, r2, r3
 800c9ee:	2b02      	cmp	r3, #2
 800c9f0:	d908      	bls.n	800ca04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c9f2:	2303      	movs	r3, #3
 800c9f4:	e14d      	b.n	800cc92 <HAL_RCCEx_PeriphCLKConfig+0x45e>
 800c9f6:	bf00      	nop
 800c9f8:	40023800 	.word	0x40023800
 800c9fc:	42470068 	.word	0x42470068
 800ca00:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800ca04:	4ba5      	ldr	r3, [pc, #660]	; (800cc9c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ca0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ca10:	d0e8      	beq.n	800c9e4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	f003 0304 	and.w	r3, r3, #4
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d02e      	beq.n	800ca7c <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800ca1e:	4b9f      	ldr	r3, [pc, #636]	; (800cc9c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ca20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca24:	0c1b      	lsrs	r3, r3, #16
 800ca26:	f003 0303 	and.w	r3, r3, #3
 800ca2a:	3301      	adds	r3, #1
 800ca2c:	005b      	lsls	r3, r3, #1
 800ca2e:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800ca30:	4b9a      	ldr	r3, [pc, #616]	; (800cc9c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ca32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca36:	0f1b      	lsrs	r3, r3, #28
 800ca38:	f003 0307 	and.w	r3, r3, #7
 800ca3c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	691b      	ldr	r3, [r3, #16]
 800ca42:	019a      	lsls	r2, r3, #6
 800ca44:	697b      	ldr	r3, [r7, #20]
 800ca46:	085b      	lsrs	r3, r3, #1
 800ca48:	3b01      	subs	r3, #1
 800ca4a:	041b      	lsls	r3, r3, #16
 800ca4c:	431a      	orrs	r2, r3
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	699b      	ldr	r3, [r3, #24]
 800ca52:	061b      	lsls	r3, r3, #24
 800ca54:	431a      	orrs	r2, r3
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	071b      	lsls	r3, r3, #28
 800ca5a:	4990      	ldr	r1, [pc, #576]	; (800cc9c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ca5c:	4313      	orrs	r3, r2
 800ca5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800ca62:	4b8e      	ldr	r3, [pc, #568]	; (800cc9c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ca64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ca68:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca70:	3b01      	subs	r3, #1
 800ca72:	021b      	lsls	r3, r3, #8
 800ca74:	4989      	ldr	r1, [pc, #548]	; (800cc9c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ca76:	4313      	orrs	r3, r2
 800ca78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	f003 0308 	and.w	r3, r3, #8
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d02c      	beq.n	800cae2 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800ca88:	4b84      	ldr	r3, [pc, #528]	; (800cc9c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ca8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca8e:	0c1b      	lsrs	r3, r3, #16
 800ca90:	f003 0303 	and.w	r3, r3, #3
 800ca94:	3301      	adds	r3, #1
 800ca96:	005b      	lsls	r3, r3, #1
 800ca98:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800ca9a:	4b80      	ldr	r3, [pc, #512]	; (800cc9c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ca9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800caa0:	0e1b      	lsrs	r3, r3, #24
 800caa2:	f003 030f 	and.w	r3, r3, #15
 800caa6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	691b      	ldr	r3, [r3, #16]
 800caac:	019a      	lsls	r2, r3, #6
 800caae:	697b      	ldr	r3, [r7, #20]
 800cab0:	085b      	lsrs	r3, r3, #1
 800cab2:	3b01      	subs	r3, #1
 800cab4:	041b      	lsls	r3, r3, #16
 800cab6:	431a      	orrs	r2, r3
 800cab8:	693b      	ldr	r3, [r7, #16]
 800caba:	061b      	lsls	r3, r3, #24
 800cabc:	431a      	orrs	r2, r3
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	69db      	ldr	r3, [r3, #28]
 800cac2:	071b      	lsls	r3, r3, #28
 800cac4:	4975      	ldr	r1, [pc, #468]	; (800cc9c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cac6:	4313      	orrs	r3, r2
 800cac8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800cacc:	4b73      	ldr	r3, [pc, #460]	; (800cc9c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cace:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cad2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cada:	4970      	ldr	r1, [pc, #448]	; (800cc9c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cadc:	4313      	orrs	r3, r2
 800cade:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800caea:	2b00      	cmp	r3, #0
 800caec:	d024      	beq.n	800cb38 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800caf2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800caf6:	d11f      	bne.n	800cb38 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800caf8:	4b68      	ldr	r3, [pc, #416]	; (800cc9c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cafa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cafe:	0e1b      	lsrs	r3, r3, #24
 800cb00:	f003 030f 	and.w	r3, r3, #15
 800cb04:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800cb06:	4b65      	ldr	r3, [pc, #404]	; (800cc9c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cb08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cb0c:	0f1b      	lsrs	r3, r3, #28
 800cb0e:	f003 0307 	and.w	r3, r3, #7
 800cb12:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	691b      	ldr	r3, [r3, #16]
 800cb18:	019a      	lsls	r2, r3, #6
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	695b      	ldr	r3, [r3, #20]
 800cb1e:	085b      	lsrs	r3, r3, #1
 800cb20:	3b01      	subs	r3, #1
 800cb22:	041b      	lsls	r3, r3, #16
 800cb24:	431a      	orrs	r2, r3
 800cb26:	693b      	ldr	r3, [r7, #16]
 800cb28:	061b      	lsls	r3, r3, #24
 800cb2a:	431a      	orrs	r2, r3
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	071b      	lsls	r3, r3, #28
 800cb30:	495a      	ldr	r1, [pc, #360]	; (800cc9c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cb32:	4313      	orrs	r3, r2
 800cb34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800cb38:	4b59      	ldr	r3, [pc, #356]	; (800cca0 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800cb3a:	2201      	movs	r2, #1
 800cb3c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800cb3e:	f7fd f9db 	bl	8009ef8 <HAL_GetTick>
 800cb42:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800cb44:	e008      	b.n	800cb58 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800cb46:	f7fd f9d7 	bl	8009ef8 <HAL_GetTick>
 800cb4a:	4602      	mov	r2, r0
 800cb4c:	69fb      	ldr	r3, [r7, #28]
 800cb4e:	1ad3      	subs	r3, r2, r3
 800cb50:	2b02      	cmp	r3, #2
 800cb52:	d901      	bls.n	800cb58 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800cb54:	2303      	movs	r3, #3
 800cb56:	e09c      	b.n	800cc92 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800cb58:	4b50      	ldr	r3, [pc, #320]	; (800cc9c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cb60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cb64:	d1ef      	bne.n	800cb46 <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	f003 0320 	and.w	r3, r3, #32
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	f000 8083 	beq.w	800cc7a <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800cb74:	2300      	movs	r3, #0
 800cb76:	60bb      	str	r3, [r7, #8]
 800cb78:	4b48      	ldr	r3, [pc, #288]	; (800cc9c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cb7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb7c:	4a47      	ldr	r2, [pc, #284]	; (800cc9c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cb7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cb82:	6413      	str	r3, [r2, #64]	; 0x40
 800cb84:	4b45      	ldr	r3, [pc, #276]	; (800cc9c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cb86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cb8c:	60bb      	str	r3, [r7, #8]
 800cb8e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800cb90:	4b44      	ldr	r3, [pc, #272]	; (800cca4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	4a43      	ldr	r2, [pc, #268]	; (800cca4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800cb96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cb9a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800cb9c:	f7fd f9ac 	bl	8009ef8 <HAL_GetTick>
 800cba0:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800cba2:	e008      	b.n	800cbb6 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800cba4:	f7fd f9a8 	bl	8009ef8 <HAL_GetTick>
 800cba8:	4602      	mov	r2, r0
 800cbaa:	69fb      	ldr	r3, [r7, #28]
 800cbac:	1ad3      	subs	r3, r2, r3
 800cbae:	2b02      	cmp	r3, #2
 800cbb0:	d901      	bls.n	800cbb6 <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 800cbb2:	2303      	movs	r3, #3
 800cbb4:	e06d      	b.n	800cc92 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800cbb6:	4b3b      	ldr	r3, [pc, #236]	; (800cca4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d0f0      	beq.n	800cba4 <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800cbc2:	4b36      	ldr	r3, [pc, #216]	; (800cc9c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cbc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cbca:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800cbcc:	69bb      	ldr	r3, [r7, #24]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d02f      	beq.n	800cc32 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cbda:	69ba      	ldr	r2, [r7, #24]
 800cbdc:	429a      	cmp	r2, r3
 800cbde:	d028      	beq.n	800cc32 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800cbe0:	4b2e      	ldr	r3, [pc, #184]	; (800cc9c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cbe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbe4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cbe8:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800cbea:	4b2f      	ldr	r3, [pc, #188]	; (800cca8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800cbec:	2201      	movs	r2, #1
 800cbee:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800cbf0:	4b2d      	ldr	r3, [pc, #180]	; (800cca8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800cbf2:	2200      	movs	r2, #0
 800cbf4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800cbf6:	4a29      	ldr	r2, [pc, #164]	; (800cc9c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cbf8:	69bb      	ldr	r3, [r7, #24]
 800cbfa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800cbfc:	4b27      	ldr	r3, [pc, #156]	; (800cc9c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cbfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc00:	f003 0301 	and.w	r3, r3, #1
 800cc04:	2b01      	cmp	r3, #1
 800cc06:	d114      	bne.n	800cc32 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800cc08:	f7fd f976 	bl	8009ef8 <HAL_GetTick>
 800cc0c:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cc0e:	e00a      	b.n	800cc26 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cc10:	f7fd f972 	bl	8009ef8 <HAL_GetTick>
 800cc14:	4602      	mov	r2, r0
 800cc16:	69fb      	ldr	r3, [r7, #28]
 800cc18:	1ad3      	subs	r3, r2, r3
 800cc1a:	f241 3288 	movw	r2, #5000	; 0x1388
 800cc1e:	4293      	cmp	r3, r2
 800cc20:	d901      	bls.n	800cc26 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 800cc22:	2303      	movs	r3, #3
 800cc24:	e035      	b.n	800cc92 <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cc26:	4b1d      	ldr	r3, [pc, #116]	; (800cc9c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cc28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc2a:	f003 0302 	and.w	r3, r3, #2
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d0ee      	beq.n	800cc10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cc3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cc3e:	d10d      	bne.n	800cc5c <HAL_RCCEx_PeriphCLKConfig+0x428>
 800cc40:	4b16      	ldr	r3, [pc, #88]	; (800cc9c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cc42:	689b      	ldr	r3, [r3, #8]
 800cc44:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc4c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800cc50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cc54:	4911      	ldr	r1, [pc, #68]	; (800cc9c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cc56:	4313      	orrs	r3, r2
 800cc58:	608b      	str	r3, [r1, #8]
 800cc5a:	e005      	b.n	800cc68 <HAL_RCCEx_PeriphCLKConfig+0x434>
 800cc5c:	4b0f      	ldr	r3, [pc, #60]	; (800cc9c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cc5e:	689b      	ldr	r3, [r3, #8]
 800cc60:	4a0e      	ldr	r2, [pc, #56]	; (800cc9c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cc62:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800cc66:	6093      	str	r3, [r2, #8]
 800cc68:	4b0c      	ldr	r3, [pc, #48]	; (800cc9c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cc6a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cc74:	4909      	ldr	r1, [pc, #36]	; (800cc9c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cc76:	4313      	orrs	r3, r2
 800cc78:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	f003 0310 	and.w	r3, r3, #16
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d004      	beq.n	800cc90 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800cc8c:	4b07      	ldr	r3, [pc, #28]	; (800ccac <HAL_RCCEx_PeriphCLKConfig+0x478>)
 800cc8e:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800cc90:	2300      	movs	r3, #0
}
 800cc92:	4618      	mov	r0, r3
 800cc94:	3720      	adds	r7, #32
 800cc96:	46bd      	mov	sp, r7
 800cc98:	bd80      	pop	{r7, pc}
 800cc9a:	bf00      	nop
 800cc9c:	40023800 	.word	0x40023800
 800cca0:	42470070 	.word	0x42470070
 800cca4:	40007000 	.word	0x40007000
 800cca8:	42470e40 	.word	0x42470e40
 800ccac:	424711e0 	.word	0x424711e0

0800ccb0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ccb0:	b580      	push	{r7, lr}
 800ccb2:	b086      	sub	sp, #24
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800ccb8:	2300      	movs	r3, #0
 800ccba:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	f003 0301 	and.w	r3, r3, #1
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d075      	beq.n	800cdb4 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800ccc8:	4ba2      	ldr	r3, [pc, #648]	; (800cf54 <HAL_RCC_OscConfig+0x2a4>)
 800ccca:	689b      	ldr	r3, [r3, #8]
 800cccc:	f003 030c 	and.w	r3, r3, #12
 800ccd0:	2b04      	cmp	r3, #4
 800ccd2:	d00c      	beq.n	800ccee <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ccd4:	4b9f      	ldr	r3, [pc, #636]	; (800cf54 <HAL_RCC_OscConfig+0x2a4>)
 800ccd6:	689b      	ldr	r3, [r3, #8]
 800ccd8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800ccdc:	2b08      	cmp	r3, #8
 800ccde:	d112      	bne.n	800cd06 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800cce0:	4b9c      	ldr	r3, [pc, #624]	; (800cf54 <HAL_RCC_OscConfig+0x2a4>)
 800cce2:	685b      	ldr	r3, [r3, #4]
 800cce4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cce8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ccec:	d10b      	bne.n	800cd06 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ccee:	4b99      	ldr	r3, [pc, #612]	; (800cf54 <HAL_RCC_OscConfig+0x2a4>)
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d05b      	beq.n	800cdb2 <HAL_RCC_OscConfig+0x102>
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	685b      	ldr	r3, [r3, #4]
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d157      	bne.n	800cdb2 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800cd02:	2301      	movs	r3, #1
 800cd04:	e20b      	b.n	800d11e <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	685b      	ldr	r3, [r3, #4]
 800cd0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cd0e:	d106      	bne.n	800cd1e <HAL_RCC_OscConfig+0x6e>
 800cd10:	4b90      	ldr	r3, [pc, #576]	; (800cf54 <HAL_RCC_OscConfig+0x2a4>)
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	4a8f      	ldr	r2, [pc, #572]	; (800cf54 <HAL_RCC_OscConfig+0x2a4>)
 800cd16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cd1a:	6013      	str	r3, [r2, #0]
 800cd1c:	e01d      	b.n	800cd5a <HAL_RCC_OscConfig+0xaa>
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	685b      	ldr	r3, [r3, #4]
 800cd22:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cd26:	d10c      	bne.n	800cd42 <HAL_RCC_OscConfig+0x92>
 800cd28:	4b8a      	ldr	r3, [pc, #552]	; (800cf54 <HAL_RCC_OscConfig+0x2a4>)
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	4a89      	ldr	r2, [pc, #548]	; (800cf54 <HAL_RCC_OscConfig+0x2a4>)
 800cd2e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800cd32:	6013      	str	r3, [r2, #0]
 800cd34:	4b87      	ldr	r3, [pc, #540]	; (800cf54 <HAL_RCC_OscConfig+0x2a4>)
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	4a86      	ldr	r2, [pc, #536]	; (800cf54 <HAL_RCC_OscConfig+0x2a4>)
 800cd3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cd3e:	6013      	str	r3, [r2, #0]
 800cd40:	e00b      	b.n	800cd5a <HAL_RCC_OscConfig+0xaa>
 800cd42:	4b84      	ldr	r3, [pc, #528]	; (800cf54 <HAL_RCC_OscConfig+0x2a4>)
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	4a83      	ldr	r2, [pc, #524]	; (800cf54 <HAL_RCC_OscConfig+0x2a4>)
 800cd48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cd4c:	6013      	str	r3, [r2, #0]
 800cd4e:	4b81      	ldr	r3, [pc, #516]	; (800cf54 <HAL_RCC_OscConfig+0x2a4>)
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	4a80      	ldr	r2, [pc, #512]	; (800cf54 <HAL_RCC_OscConfig+0x2a4>)
 800cd54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cd58:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	685b      	ldr	r3, [r3, #4]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d013      	beq.n	800cd8a <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cd62:	f7fd f8c9 	bl	8009ef8 <HAL_GetTick>
 800cd66:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cd68:	e008      	b.n	800cd7c <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800cd6a:	f7fd f8c5 	bl	8009ef8 <HAL_GetTick>
 800cd6e:	4602      	mov	r2, r0
 800cd70:	693b      	ldr	r3, [r7, #16]
 800cd72:	1ad3      	subs	r3, r2, r3
 800cd74:	2b64      	cmp	r3, #100	; 0x64
 800cd76:	d901      	bls.n	800cd7c <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 800cd78:	2303      	movs	r3, #3
 800cd7a:	e1d0      	b.n	800d11e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cd7c:	4b75      	ldr	r3, [pc, #468]	; (800cf54 <HAL_RCC_OscConfig+0x2a4>)
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d0f0      	beq.n	800cd6a <HAL_RCC_OscConfig+0xba>
 800cd88:	e014      	b.n	800cdb4 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cd8a:	f7fd f8b5 	bl	8009ef8 <HAL_GetTick>
 800cd8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800cd90:	e008      	b.n	800cda4 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800cd92:	f7fd f8b1 	bl	8009ef8 <HAL_GetTick>
 800cd96:	4602      	mov	r2, r0
 800cd98:	693b      	ldr	r3, [r7, #16]
 800cd9a:	1ad3      	subs	r3, r2, r3
 800cd9c:	2b64      	cmp	r3, #100	; 0x64
 800cd9e:	d901      	bls.n	800cda4 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 800cda0:	2303      	movs	r3, #3
 800cda2:	e1bc      	b.n	800d11e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800cda4:	4b6b      	ldr	r3, [pc, #428]	; (800cf54 <HAL_RCC_OscConfig+0x2a4>)
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d1f0      	bne.n	800cd92 <HAL_RCC_OscConfig+0xe2>
 800cdb0:	e000      	b.n	800cdb4 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cdb2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	f003 0302 	and.w	r3, r3, #2
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d063      	beq.n	800ce88 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800cdc0:	4b64      	ldr	r3, [pc, #400]	; (800cf54 <HAL_RCC_OscConfig+0x2a4>)
 800cdc2:	689b      	ldr	r3, [r3, #8]
 800cdc4:	f003 030c 	and.w	r3, r3, #12
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d00b      	beq.n	800cde4 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800cdcc:	4b61      	ldr	r3, [pc, #388]	; (800cf54 <HAL_RCC_OscConfig+0x2a4>)
 800cdce:	689b      	ldr	r3, [r3, #8]
 800cdd0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800cdd4:	2b08      	cmp	r3, #8
 800cdd6:	d11c      	bne.n	800ce12 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800cdd8:	4b5e      	ldr	r3, [pc, #376]	; (800cf54 <HAL_RCC_OscConfig+0x2a4>)
 800cdda:	685b      	ldr	r3, [r3, #4]
 800cddc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d116      	bne.n	800ce12 <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800cde4:	4b5b      	ldr	r3, [pc, #364]	; (800cf54 <HAL_RCC_OscConfig+0x2a4>)
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	f003 0302 	and.w	r3, r3, #2
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d005      	beq.n	800cdfc <HAL_RCC_OscConfig+0x14c>
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	68db      	ldr	r3, [r3, #12]
 800cdf4:	2b01      	cmp	r3, #1
 800cdf6:	d001      	beq.n	800cdfc <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 800cdf8:	2301      	movs	r3, #1
 800cdfa:	e190      	b.n	800d11e <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cdfc:	4b55      	ldr	r3, [pc, #340]	; (800cf54 <HAL_RCC_OscConfig+0x2a4>)
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	691b      	ldr	r3, [r3, #16]
 800ce08:	00db      	lsls	r3, r3, #3
 800ce0a:	4952      	ldr	r1, [pc, #328]	; (800cf54 <HAL_RCC_OscConfig+0x2a4>)
 800ce0c:	4313      	orrs	r3, r2
 800ce0e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ce10:	e03a      	b.n	800ce88 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	68db      	ldr	r3, [r3, #12]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d020      	beq.n	800ce5c <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ce1a:	4b4f      	ldr	r3, [pc, #316]	; (800cf58 <HAL_RCC_OscConfig+0x2a8>)
 800ce1c:	2201      	movs	r2, #1
 800ce1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ce20:	f7fd f86a 	bl	8009ef8 <HAL_GetTick>
 800ce24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ce26:	e008      	b.n	800ce3a <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ce28:	f7fd f866 	bl	8009ef8 <HAL_GetTick>
 800ce2c:	4602      	mov	r2, r0
 800ce2e:	693b      	ldr	r3, [r7, #16]
 800ce30:	1ad3      	subs	r3, r2, r3
 800ce32:	2b02      	cmp	r3, #2
 800ce34:	d901      	bls.n	800ce3a <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800ce36:	2303      	movs	r3, #3
 800ce38:	e171      	b.n	800d11e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ce3a:	4b46      	ldr	r3, [pc, #280]	; (800cf54 <HAL_RCC_OscConfig+0x2a4>)
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	f003 0302 	and.w	r3, r3, #2
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d0f0      	beq.n	800ce28 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ce46:	4b43      	ldr	r3, [pc, #268]	; (800cf54 <HAL_RCC_OscConfig+0x2a4>)
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	691b      	ldr	r3, [r3, #16]
 800ce52:	00db      	lsls	r3, r3, #3
 800ce54:	493f      	ldr	r1, [pc, #252]	; (800cf54 <HAL_RCC_OscConfig+0x2a4>)
 800ce56:	4313      	orrs	r3, r2
 800ce58:	600b      	str	r3, [r1, #0]
 800ce5a:	e015      	b.n	800ce88 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ce5c:	4b3e      	ldr	r3, [pc, #248]	; (800cf58 <HAL_RCC_OscConfig+0x2a8>)
 800ce5e:	2200      	movs	r2, #0
 800ce60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ce62:	f7fd f849 	bl	8009ef8 <HAL_GetTick>
 800ce66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ce68:	e008      	b.n	800ce7c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ce6a:	f7fd f845 	bl	8009ef8 <HAL_GetTick>
 800ce6e:	4602      	mov	r2, r0
 800ce70:	693b      	ldr	r3, [r7, #16]
 800ce72:	1ad3      	subs	r3, r2, r3
 800ce74:	2b02      	cmp	r3, #2
 800ce76:	d901      	bls.n	800ce7c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800ce78:	2303      	movs	r3, #3
 800ce7a:	e150      	b.n	800d11e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ce7c:	4b35      	ldr	r3, [pc, #212]	; (800cf54 <HAL_RCC_OscConfig+0x2a4>)
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	f003 0302 	and.w	r3, r3, #2
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d1f0      	bne.n	800ce6a <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	f003 0308 	and.w	r3, r3, #8
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d030      	beq.n	800cef6 <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	695b      	ldr	r3, [r3, #20]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d016      	beq.n	800ceca <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ce9c:	4b2f      	ldr	r3, [pc, #188]	; (800cf5c <HAL_RCC_OscConfig+0x2ac>)
 800ce9e:	2201      	movs	r2, #1
 800cea0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cea2:	f7fd f829 	bl	8009ef8 <HAL_GetTick>
 800cea6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800cea8:	e008      	b.n	800cebc <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ceaa:	f7fd f825 	bl	8009ef8 <HAL_GetTick>
 800ceae:	4602      	mov	r2, r0
 800ceb0:	693b      	ldr	r3, [r7, #16]
 800ceb2:	1ad3      	subs	r3, r2, r3
 800ceb4:	2b02      	cmp	r3, #2
 800ceb6:	d901      	bls.n	800cebc <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 800ceb8:	2303      	movs	r3, #3
 800ceba:	e130      	b.n	800d11e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800cebc:	4b25      	ldr	r3, [pc, #148]	; (800cf54 <HAL_RCC_OscConfig+0x2a4>)
 800cebe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cec0:	f003 0302 	and.w	r3, r3, #2
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d0f0      	beq.n	800ceaa <HAL_RCC_OscConfig+0x1fa>
 800cec8:	e015      	b.n	800cef6 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ceca:	4b24      	ldr	r3, [pc, #144]	; (800cf5c <HAL_RCC_OscConfig+0x2ac>)
 800cecc:	2200      	movs	r2, #0
 800cece:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ced0:	f7fd f812 	bl	8009ef8 <HAL_GetTick>
 800ced4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ced6:	e008      	b.n	800ceea <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ced8:	f7fd f80e 	bl	8009ef8 <HAL_GetTick>
 800cedc:	4602      	mov	r2, r0
 800cede:	693b      	ldr	r3, [r7, #16]
 800cee0:	1ad3      	subs	r3, r2, r3
 800cee2:	2b02      	cmp	r3, #2
 800cee4:	d901      	bls.n	800ceea <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800cee6:	2303      	movs	r3, #3
 800cee8:	e119      	b.n	800d11e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ceea:	4b1a      	ldr	r3, [pc, #104]	; (800cf54 <HAL_RCC_OscConfig+0x2a4>)
 800ceec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ceee:	f003 0302 	and.w	r3, r3, #2
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d1f0      	bne.n	800ced8 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	f003 0304 	and.w	r3, r3, #4
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	f000 809f 	beq.w	800d042 <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 800cf04:	2300      	movs	r3, #0
 800cf06:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800cf08:	4b12      	ldr	r3, [pc, #72]	; (800cf54 <HAL_RCC_OscConfig+0x2a4>)
 800cf0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d10f      	bne.n	800cf34 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800cf14:	2300      	movs	r3, #0
 800cf16:	60fb      	str	r3, [r7, #12]
 800cf18:	4b0e      	ldr	r3, [pc, #56]	; (800cf54 <HAL_RCC_OscConfig+0x2a4>)
 800cf1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf1c:	4a0d      	ldr	r2, [pc, #52]	; (800cf54 <HAL_RCC_OscConfig+0x2a4>)
 800cf1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cf22:	6413      	str	r3, [r2, #64]	; 0x40
 800cf24:	4b0b      	ldr	r3, [pc, #44]	; (800cf54 <HAL_RCC_OscConfig+0x2a4>)
 800cf26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cf2c:	60fb      	str	r3, [r7, #12]
 800cf2e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800cf30:	2301      	movs	r3, #1
 800cf32:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cf34:	4b0a      	ldr	r3, [pc, #40]	; (800cf60 <HAL_RCC_OscConfig+0x2b0>)
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d120      	bne.n	800cf82 <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800cf40:	4b07      	ldr	r3, [pc, #28]	; (800cf60 <HAL_RCC_OscConfig+0x2b0>)
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	4a06      	ldr	r2, [pc, #24]	; (800cf60 <HAL_RCC_OscConfig+0x2b0>)
 800cf46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cf4a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800cf4c:	f7fc ffd4 	bl	8009ef8 <HAL_GetTick>
 800cf50:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cf52:	e010      	b.n	800cf76 <HAL_RCC_OscConfig+0x2c6>
 800cf54:	40023800 	.word	0x40023800
 800cf58:	42470000 	.word	0x42470000
 800cf5c:	42470e80 	.word	0x42470e80
 800cf60:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cf64:	f7fc ffc8 	bl	8009ef8 <HAL_GetTick>
 800cf68:	4602      	mov	r2, r0
 800cf6a:	693b      	ldr	r3, [r7, #16]
 800cf6c:	1ad3      	subs	r3, r2, r3
 800cf6e:	2b02      	cmp	r3, #2
 800cf70:	d901      	bls.n	800cf76 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800cf72:	2303      	movs	r3, #3
 800cf74:	e0d3      	b.n	800d11e <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cf76:	4b6c      	ldr	r3, [pc, #432]	; (800d128 <HAL_RCC_OscConfig+0x478>)
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d0f0      	beq.n	800cf64 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	689b      	ldr	r3, [r3, #8]
 800cf86:	2b01      	cmp	r3, #1
 800cf88:	d106      	bne.n	800cf98 <HAL_RCC_OscConfig+0x2e8>
 800cf8a:	4b68      	ldr	r3, [pc, #416]	; (800d12c <HAL_RCC_OscConfig+0x47c>)
 800cf8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf8e:	4a67      	ldr	r2, [pc, #412]	; (800d12c <HAL_RCC_OscConfig+0x47c>)
 800cf90:	f043 0301 	orr.w	r3, r3, #1
 800cf94:	6713      	str	r3, [r2, #112]	; 0x70
 800cf96:	e01c      	b.n	800cfd2 <HAL_RCC_OscConfig+0x322>
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	689b      	ldr	r3, [r3, #8]
 800cf9c:	2b05      	cmp	r3, #5
 800cf9e:	d10c      	bne.n	800cfba <HAL_RCC_OscConfig+0x30a>
 800cfa0:	4b62      	ldr	r3, [pc, #392]	; (800d12c <HAL_RCC_OscConfig+0x47c>)
 800cfa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cfa4:	4a61      	ldr	r2, [pc, #388]	; (800d12c <HAL_RCC_OscConfig+0x47c>)
 800cfa6:	f043 0304 	orr.w	r3, r3, #4
 800cfaa:	6713      	str	r3, [r2, #112]	; 0x70
 800cfac:	4b5f      	ldr	r3, [pc, #380]	; (800d12c <HAL_RCC_OscConfig+0x47c>)
 800cfae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cfb0:	4a5e      	ldr	r2, [pc, #376]	; (800d12c <HAL_RCC_OscConfig+0x47c>)
 800cfb2:	f043 0301 	orr.w	r3, r3, #1
 800cfb6:	6713      	str	r3, [r2, #112]	; 0x70
 800cfb8:	e00b      	b.n	800cfd2 <HAL_RCC_OscConfig+0x322>
 800cfba:	4b5c      	ldr	r3, [pc, #368]	; (800d12c <HAL_RCC_OscConfig+0x47c>)
 800cfbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cfbe:	4a5b      	ldr	r2, [pc, #364]	; (800d12c <HAL_RCC_OscConfig+0x47c>)
 800cfc0:	f023 0301 	bic.w	r3, r3, #1
 800cfc4:	6713      	str	r3, [r2, #112]	; 0x70
 800cfc6:	4b59      	ldr	r3, [pc, #356]	; (800d12c <HAL_RCC_OscConfig+0x47c>)
 800cfc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cfca:	4a58      	ldr	r2, [pc, #352]	; (800d12c <HAL_RCC_OscConfig+0x47c>)
 800cfcc:	f023 0304 	bic.w	r3, r3, #4
 800cfd0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	689b      	ldr	r3, [r3, #8]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d015      	beq.n	800d006 <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cfda:	f7fc ff8d 	bl	8009ef8 <HAL_GetTick>
 800cfde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cfe0:	e00a      	b.n	800cff8 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cfe2:	f7fc ff89 	bl	8009ef8 <HAL_GetTick>
 800cfe6:	4602      	mov	r2, r0
 800cfe8:	693b      	ldr	r3, [r7, #16]
 800cfea:	1ad3      	subs	r3, r2, r3
 800cfec:	f241 3288 	movw	r2, #5000	; 0x1388
 800cff0:	4293      	cmp	r3, r2
 800cff2:	d901      	bls.n	800cff8 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 800cff4:	2303      	movs	r3, #3
 800cff6:	e092      	b.n	800d11e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cff8:	4b4c      	ldr	r3, [pc, #304]	; (800d12c <HAL_RCC_OscConfig+0x47c>)
 800cffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cffc:	f003 0302 	and.w	r3, r3, #2
 800d000:	2b00      	cmp	r3, #0
 800d002:	d0ee      	beq.n	800cfe2 <HAL_RCC_OscConfig+0x332>
 800d004:	e014      	b.n	800d030 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d006:	f7fc ff77 	bl	8009ef8 <HAL_GetTick>
 800d00a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d00c:	e00a      	b.n	800d024 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d00e:	f7fc ff73 	bl	8009ef8 <HAL_GetTick>
 800d012:	4602      	mov	r2, r0
 800d014:	693b      	ldr	r3, [r7, #16]
 800d016:	1ad3      	subs	r3, r2, r3
 800d018:	f241 3288 	movw	r2, #5000	; 0x1388
 800d01c:	4293      	cmp	r3, r2
 800d01e:	d901      	bls.n	800d024 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 800d020:	2303      	movs	r3, #3
 800d022:	e07c      	b.n	800d11e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d024:	4b41      	ldr	r3, [pc, #260]	; (800d12c <HAL_RCC_OscConfig+0x47c>)
 800d026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d028:	f003 0302 	and.w	r3, r3, #2
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d1ee      	bne.n	800d00e <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800d030:	7dfb      	ldrb	r3, [r7, #23]
 800d032:	2b01      	cmp	r3, #1
 800d034:	d105      	bne.n	800d042 <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d036:	4b3d      	ldr	r3, [pc, #244]	; (800d12c <HAL_RCC_OscConfig+0x47c>)
 800d038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d03a:	4a3c      	ldr	r2, [pc, #240]	; (800d12c <HAL_RCC_OscConfig+0x47c>)
 800d03c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d040:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	699b      	ldr	r3, [r3, #24]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d068      	beq.n	800d11c <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800d04a:	4b38      	ldr	r3, [pc, #224]	; (800d12c <HAL_RCC_OscConfig+0x47c>)
 800d04c:	689b      	ldr	r3, [r3, #8]
 800d04e:	f003 030c 	and.w	r3, r3, #12
 800d052:	2b08      	cmp	r3, #8
 800d054:	d060      	beq.n	800d118 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	699b      	ldr	r3, [r3, #24]
 800d05a:	2b02      	cmp	r3, #2
 800d05c:	d145      	bne.n	800d0ea <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d05e:	4b34      	ldr	r3, [pc, #208]	; (800d130 <HAL_RCC_OscConfig+0x480>)
 800d060:	2200      	movs	r2, #0
 800d062:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d064:	f7fc ff48 	bl	8009ef8 <HAL_GetTick>
 800d068:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d06a:	e008      	b.n	800d07e <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d06c:	f7fc ff44 	bl	8009ef8 <HAL_GetTick>
 800d070:	4602      	mov	r2, r0
 800d072:	693b      	ldr	r3, [r7, #16]
 800d074:	1ad3      	subs	r3, r2, r3
 800d076:	2b02      	cmp	r3, #2
 800d078:	d901      	bls.n	800d07e <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 800d07a:	2303      	movs	r3, #3
 800d07c:	e04f      	b.n	800d11e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d07e:	4b2b      	ldr	r3, [pc, #172]	; (800d12c <HAL_RCC_OscConfig+0x47c>)
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d086:	2b00      	cmp	r3, #0
 800d088:	d1f0      	bne.n	800d06c <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	69da      	ldr	r2, [r3, #28]
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	6a1b      	ldr	r3, [r3, #32]
 800d092:	431a      	orrs	r2, r3
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d098:	019b      	lsls	r3, r3, #6
 800d09a:	431a      	orrs	r2, r3
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0a0:	085b      	lsrs	r3, r3, #1
 800d0a2:	3b01      	subs	r3, #1
 800d0a4:	041b      	lsls	r3, r3, #16
 800d0a6:	431a      	orrs	r2, r3
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0ac:	061b      	lsls	r3, r3, #24
 800d0ae:	431a      	orrs	r2, r3
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0b4:	071b      	lsls	r3, r3, #28
 800d0b6:	491d      	ldr	r1, [pc, #116]	; (800d12c <HAL_RCC_OscConfig+0x47c>)
 800d0b8:	4313      	orrs	r3, r2
 800d0ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d0bc:	4b1c      	ldr	r3, [pc, #112]	; (800d130 <HAL_RCC_OscConfig+0x480>)
 800d0be:	2201      	movs	r2, #1
 800d0c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d0c2:	f7fc ff19 	bl	8009ef8 <HAL_GetTick>
 800d0c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d0c8:	e008      	b.n	800d0dc <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d0ca:	f7fc ff15 	bl	8009ef8 <HAL_GetTick>
 800d0ce:	4602      	mov	r2, r0
 800d0d0:	693b      	ldr	r3, [r7, #16]
 800d0d2:	1ad3      	subs	r3, r2, r3
 800d0d4:	2b02      	cmp	r3, #2
 800d0d6:	d901      	bls.n	800d0dc <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800d0d8:	2303      	movs	r3, #3
 800d0da:	e020      	b.n	800d11e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d0dc:	4b13      	ldr	r3, [pc, #76]	; (800d12c <HAL_RCC_OscConfig+0x47c>)
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d0f0      	beq.n	800d0ca <HAL_RCC_OscConfig+0x41a>
 800d0e8:	e018      	b.n	800d11c <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d0ea:	4b11      	ldr	r3, [pc, #68]	; (800d130 <HAL_RCC_OscConfig+0x480>)
 800d0ec:	2200      	movs	r2, #0
 800d0ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d0f0:	f7fc ff02 	bl	8009ef8 <HAL_GetTick>
 800d0f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d0f6:	e008      	b.n	800d10a <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d0f8:	f7fc fefe 	bl	8009ef8 <HAL_GetTick>
 800d0fc:	4602      	mov	r2, r0
 800d0fe:	693b      	ldr	r3, [r7, #16]
 800d100:	1ad3      	subs	r3, r2, r3
 800d102:	2b02      	cmp	r3, #2
 800d104:	d901      	bls.n	800d10a <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800d106:	2303      	movs	r3, #3
 800d108:	e009      	b.n	800d11e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d10a:	4b08      	ldr	r3, [pc, #32]	; (800d12c <HAL_RCC_OscConfig+0x47c>)
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d112:	2b00      	cmp	r3, #0
 800d114:	d1f0      	bne.n	800d0f8 <HAL_RCC_OscConfig+0x448>
 800d116:	e001      	b.n	800d11c <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800d118:	2301      	movs	r3, #1
 800d11a:	e000      	b.n	800d11e <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800d11c:	2300      	movs	r3, #0
}
 800d11e:	4618      	mov	r0, r3
 800d120:	3718      	adds	r7, #24
 800d122:	46bd      	mov	sp, r7
 800d124:	bd80      	pop	{r7, pc}
 800d126:	bf00      	nop
 800d128:	40007000 	.word	0x40007000
 800d12c:	40023800 	.word	0x40023800
 800d130:	42470060 	.word	0x42470060

0800d134 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800d134:	b580      	push	{r7, lr}
 800d136:	b082      	sub	sp, #8
 800d138:	af00      	add	r7, sp, #0
 800d13a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d101      	bne.n	800d146 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800d142:	2301      	movs	r3, #1
 800d144:	e022      	b.n	800d18c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d14c:	b2db      	uxtb	r3, r3
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d105      	bne.n	800d15e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	2200      	movs	r2, #0
 800d156:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800d158:	6878      	ldr	r0, [r7, #4]
 800d15a:	f7f9 ff8f 	bl	800707c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	2203      	movs	r2, #3
 800d162:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800d166:	6878      	ldr	r0, [r7, #4]
 800d168:	f000 f814 	bl	800d194 <HAL_SD_InitCard>
 800d16c:	4603      	mov	r3, r0
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d001      	beq.n	800d176 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800d172:	2301      	movs	r3, #1
 800d174:	e00a      	b.n	800d18c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	2200      	movs	r2, #0
 800d17a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	2200      	movs	r2, #0
 800d180:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	2201      	movs	r2, #1
 800d186:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800d18a:	2300      	movs	r3, #0
}
 800d18c:	4618      	mov	r0, r3
 800d18e:	3708      	adds	r7, #8
 800d190:	46bd      	mov	sp, r7
 800d192:	bd80      	pop	{r7, pc}

0800d194 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d194:	b5b0      	push	{r4, r5, r7, lr}
 800d196:	b08e      	sub	sp, #56	; 0x38
 800d198:	af04      	add	r7, sp, #16
 800d19a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800d19c:	2300      	movs	r3, #0
 800d19e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800d1a8:	2300      	movs	r3, #0
 800d1aa:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800d1b0:	2376      	movs	r3, #118	; 0x76
 800d1b2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	681d      	ldr	r5, [r3, #0]
 800d1b8:	466c      	mov	r4, sp
 800d1ba:	f107 0314 	add.w	r3, r7, #20
 800d1be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d1c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d1c6:	f107 0308 	add.w	r3, r7, #8
 800d1ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d1cc:	4628      	mov	r0, r5
 800d1ce:	f003 fa87 	bl	80106e0 <SDIO_Init>
 800d1d2:	4603      	mov	r3, r0
 800d1d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800d1d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d001      	beq.n	800d1e4 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800d1e0:	2301      	movs	r3, #1
 800d1e2:	e031      	b.n	800d248 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800d1e4:	4b1a      	ldr	r3, [pc, #104]	; (800d250 <HAL_SD_InitCard+0xbc>)
 800d1e6:	2200      	movs	r2, #0
 800d1e8:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	f003 fabf 	bl	8010772 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800d1f4:	4b16      	ldr	r3, [pc, #88]	; (800d250 <HAL_SD_InitCard+0xbc>)
 800d1f6:	2201      	movs	r2, #1
 800d1f8:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800d1fa:	6878      	ldr	r0, [r7, #4]
 800d1fc:	f000 ffc6 	bl	800e18c <SD_PowerON>
 800d200:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d202:	6a3b      	ldr	r3, [r7, #32]
 800d204:	2b00      	cmp	r3, #0
 800d206:	d00b      	beq.n	800d220 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	2201      	movs	r2, #1
 800d20c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d214:	6a3b      	ldr	r3, [r7, #32]
 800d216:	431a      	orrs	r2, r3
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d21c:	2301      	movs	r3, #1
 800d21e:	e013      	b.n	800d248 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800d220:	6878      	ldr	r0, [r7, #4]
 800d222:	f000 fee5 	bl	800dff0 <SD_InitCard>
 800d226:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d228:	6a3b      	ldr	r3, [r7, #32]
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d00b      	beq.n	800d246 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	2201      	movs	r2, #1
 800d232:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d23a:	6a3b      	ldr	r3, [r7, #32]
 800d23c:	431a      	orrs	r2, r3
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d242:	2301      	movs	r3, #1
 800d244:	e000      	b.n	800d248 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800d246:	2300      	movs	r3, #0
}
 800d248:	4618      	mov	r0, r3
 800d24a:	3728      	adds	r7, #40	; 0x28
 800d24c:	46bd      	mov	sp, r7
 800d24e:	bdb0      	pop	{r4, r5, r7, pc}
 800d250:	422580a0 	.word	0x422580a0

0800d254 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800d254:	b580      	push	{r7, lr}
 800d256:	b08c      	sub	sp, #48	; 0x30
 800d258:	af00      	add	r7, sp, #0
 800d25a:	60f8      	str	r0, [r7, #12]
 800d25c:	60b9      	str	r1, [r7, #8]
 800d25e:	607a      	str	r2, [r7, #4]
 800d260:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800d266:	68bb      	ldr	r3, [r7, #8]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d107      	bne.n	800d27c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d270:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d278:	2301      	movs	r3, #1
 800d27a:	e0c7      	b.n	800d40c <HAL_SD_ReadBlocks_DMA+0x1b8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d282:	b2db      	uxtb	r3, r3
 800d284:	2b01      	cmp	r3, #1
 800d286:	f040 80c0 	bne.w	800d40a <HAL_SD_ReadBlocks_DMA+0x1b6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	2200      	movs	r2, #0
 800d28e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d290:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d292:	683b      	ldr	r3, [r7, #0]
 800d294:	441a      	add	r2, r3
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d29a:	429a      	cmp	r2, r3
 800d29c:	d907      	bls.n	800d2ae <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2a2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d2aa:	2301      	movs	r3, #1
 800d2ac:	e0ae      	b.n	800d40c <HAL_SD_ReadBlocks_DMA+0x1b8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	2203      	movs	r2, #3
 800d2b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	2200      	movs	r2, #0
 800d2bc:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800d2cc:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2d2:	4a50      	ldr	r2, [pc, #320]	; (800d414 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800d2d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2da:	4a4f      	ldr	r2, [pc, #316]	; (800d418 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 800d2dc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2e2:	2200      	movs	r2, #0
 800d2e4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	3380      	adds	r3, #128	; 0x80
 800d2f0:	4619      	mov	r1, r3
 800d2f2:	68ba      	ldr	r2, [r7, #8]
 800d2f4:	683b      	ldr	r3, [r7, #0]
 800d2f6:	025b      	lsls	r3, r3, #9
 800d2f8:	089b      	lsrs	r3, r3, #2
 800d2fa:	f7fd fbef 	bl	800aadc <HAL_DMA_Start_IT>
 800d2fe:	4603      	mov	r3, r0
 800d300:	2b00      	cmp	r3, #0
 800d302:	d017      	beq.n	800d334 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800d312:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	4a40      	ldr	r2, [pc, #256]	; (800d41c <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800d31a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d320:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	2201      	movs	r2, #1
 800d32c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d330:	2301      	movs	r3, #1
 800d332:	e06b      	b.n	800d40c <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800d334:	4b3a      	ldr	r3, [pc, #232]	; (800d420 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800d336:	2201      	movs	r2, #1
 800d338:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d33e:	2b01      	cmp	r3, #1
 800d340:	d002      	beq.n	800d348 <HAL_SD_ReadBlocks_DMA+0xf4>
      {
        add *= 512U;
 800d342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d344:	025b      	lsls	r3, r3, #9
 800d346:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d350:	4618      	mov	r0, r3
 800d352:	f003 faa1 	bl	8010898 <SDMMC_CmdBlockLength>
 800d356:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800d358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d00f      	beq.n	800d37e <HAL_SD_ReadBlocks_DMA+0x12a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	4a2e      	ldr	r2, [pc, #184]	; (800d41c <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800d364:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d36a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d36c:	431a      	orrs	r2, r3
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	2201      	movs	r2, #1
 800d376:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800d37a:	2301      	movs	r3, #1
 800d37c:	e046      	b.n	800d40c <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d37e:	f04f 33ff 	mov.w	r3, #4294967295
 800d382:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d384:	683b      	ldr	r3, [r7, #0]
 800d386:	025b      	lsls	r3, r3, #9
 800d388:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800d38a:	2390      	movs	r3, #144	; 0x90
 800d38c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800d38e:	2302      	movs	r3, #2
 800d390:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800d392:	2300      	movs	r3, #0
 800d394:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800d396:	2301      	movs	r3, #1
 800d398:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	f107 0210 	add.w	r2, r7, #16
 800d3a2:	4611      	mov	r1, r2
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	f003 fa4b 	bl	8010840 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800d3aa:	683b      	ldr	r3, [r7, #0]
 800d3ac:	2b01      	cmp	r3, #1
 800d3ae:	d90a      	bls.n	800d3c6 <HAL_SD_ReadBlocks_DMA+0x172>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	2282      	movs	r2, #130	; 0x82
 800d3b4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d3bc:	4618      	mov	r0, r3
 800d3be:	f003 faaf 	bl	8010920 <SDMMC_CmdReadMultiBlock>
 800d3c2:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d3c4:	e009      	b.n	800d3da <HAL_SD_ReadBlocks_DMA+0x186>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	2281      	movs	r2, #129	; 0x81
 800d3ca:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	f003 fa82 	bl	80108dc <SDMMC_CmdReadSingleBlock>
 800d3d8:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800d3da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d012      	beq.n	800d406 <HAL_SD_ReadBlocks_DMA+0x1b2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	4a0d      	ldr	r2, [pc, #52]	; (800d41c <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800d3e6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d3ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3ee:	431a      	orrs	r2, r3
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	2201      	movs	r2, #1
 800d3f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	2200      	movs	r2, #0
 800d400:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800d402:	2301      	movs	r3, #1
 800d404:	e002      	b.n	800d40c <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      return HAL_OK;
 800d406:	2300      	movs	r3, #0
 800d408:	e000      	b.n	800d40c <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
  }
  else
  {
    return HAL_BUSY;
 800d40a:	2302      	movs	r3, #2
  }
}
 800d40c:	4618      	mov	r0, r3
 800d40e:	3730      	adds	r7, #48	; 0x30
 800d410:	46bd      	mov	sp, r7
 800d412:	bd80      	pop	{r7, pc}
 800d414:	0800ddff 	.word	0x0800ddff
 800d418:	0800de71 	.word	0x0800de71
 800d41c:	004005ff 	.word	0x004005ff
 800d420:	4225858c 	.word	0x4225858c

0800d424 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800d424:	b580      	push	{r7, lr}
 800d426:	b08c      	sub	sp, #48	; 0x30
 800d428:	af00      	add	r7, sp, #0
 800d42a:	60f8      	str	r0, [r7, #12]
 800d42c:	60b9      	str	r1, [r7, #8]
 800d42e:	607a      	str	r2, [r7, #4]
 800d430:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800d436:	68bb      	ldr	r3, [r7, #8]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d107      	bne.n	800d44c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d440:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d448:	2301      	movs	r3, #1
 800d44a:	e0ca      	b.n	800d5e2 <HAL_SD_WriteBlocks_DMA+0x1be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d452:	b2db      	uxtb	r3, r3
 800d454:	2b01      	cmp	r3, #1
 800d456:	f040 80c3 	bne.w	800d5e0 <HAL_SD_WriteBlocks_DMA+0x1bc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	2200      	movs	r2, #0
 800d45e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d460:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d462:	683b      	ldr	r3, [r7, #0]
 800d464:	441a      	add	r2, r3
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d46a:	429a      	cmp	r2, r3
 800d46c:	d907      	bls.n	800d47e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d472:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d47a:	2301      	movs	r3, #1
 800d47c:	e0b1      	b.n	800d5e2 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	2203      	movs	r2, #3
 800d482:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	2200      	movs	r2, #0
 800d48c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	f042 021a 	orr.w	r2, r2, #26
 800d49c:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4a2:	4a52      	ldr	r2, [pc, #328]	; (800d5ec <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800d4a4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4aa:	4a51      	ldr	r2, [pc, #324]	; (800d5f0 <HAL_SD_WriteBlocks_DMA+0x1cc>)
 800d4ac:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4b2:	2200      	movs	r2, #0
 800d4b4:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d4ba:	2b01      	cmp	r3, #1
 800d4bc:	d002      	beq.n	800d4c4 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800d4be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4c0:	025b      	lsls	r3, r3, #9
 800d4c2:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d4cc:	4618      	mov	r0, r3
 800d4ce:	f003 f9e3 	bl	8010898 <SDMMC_CmdBlockLength>
 800d4d2:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d4d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d00f      	beq.n	800d4fa <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	4a45      	ldr	r2, [pc, #276]	; (800d5f4 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800d4e0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d4e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4e8:	431a      	orrs	r2, r3
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	2201      	movs	r2, #1
 800d4f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d4f6:	2301      	movs	r3, #1
 800d4f8:	e073      	b.n	800d5e2 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800d4fa:	683b      	ldr	r3, [r7, #0]
 800d4fc:	2b01      	cmp	r3, #1
 800d4fe:	d90a      	bls.n	800d516 <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	22a0      	movs	r2, #160	; 0xa0
 800d504:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d50c:	4618      	mov	r0, r3
 800d50e:	f003 fa4b 	bl	80109a8 <SDMMC_CmdWriteMultiBlock>
 800d512:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d514:	e009      	b.n	800d52a <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	2290      	movs	r2, #144	; 0x90
 800d51a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d522:	4618      	mov	r0, r3
 800d524:	f003 fa1e 	bl	8010964 <SDMMC_CmdWriteSingleBlock>
 800d528:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800d52a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d012      	beq.n	800d556 <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	4a2f      	ldr	r2, [pc, #188]	; (800d5f4 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800d536:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d53c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d53e:	431a      	orrs	r2, r3
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	2201      	movs	r2, #1
 800d548:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	2200      	movs	r2, #0
 800d550:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d552:	2301      	movs	r3, #1
 800d554:	e045      	b.n	800d5e2 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800d556:	4b28      	ldr	r3, [pc, #160]	; (800d5f8 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800d558:	2201      	movs	r2, #1
 800d55a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800d560:	68b9      	ldr	r1, [r7, #8]
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	3380      	adds	r3, #128	; 0x80
 800d568:	461a      	mov	r2, r3
 800d56a:	683b      	ldr	r3, [r7, #0]
 800d56c:	025b      	lsls	r3, r3, #9
 800d56e:	089b      	lsrs	r3, r3, #2
 800d570:	f7fd fab4 	bl	800aadc <HAL_DMA_Start_IT>
 800d574:	4603      	mov	r3, r0
 800d576:	2b00      	cmp	r3, #0
 800d578:	d01a      	beq.n	800d5b0 <HAL_SD_WriteBlocks_DMA+0x18c>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	f022 021a 	bic.w	r2, r2, #26
 800d588:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	4a19      	ldr	r2, [pc, #100]	; (800d5f4 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800d590:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d596:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	2201      	movs	r2, #1
 800d5a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	2200      	movs	r2, #0
 800d5aa:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d5ac:	2301      	movs	r3, #1
 800d5ae:	e018      	b.n	800d5e2 <HAL_SD_WriteBlocks_DMA+0x1be>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d5b0:	f04f 33ff 	mov.w	r3, #4294967295
 800d5b4:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d5b6:	683b      	ldr	r3, [r7, #0]
 800d5b8:	025b      	lsls	r3, r3, #9
 800d5ba:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800d5bc:	2390      	movs	r3, #144	; 0x90
 800d5be:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800d5c0:	2300      	movs	r3, #0
 800d5c2:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800d5c4:	2300      	movs	r3, #0
 800d5c6:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800d5c8:	2301      	movs	r3, #1
 800d5ca:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	f107 0210 	add.w	r2, r7, #16
 800d5d4:	4611      	mov	r1, r2
 800d5d6:	4618      	mov	r0, r3
 800d5d8:	f003 f932 	bl	8010840 <SDIO_ConfigData>

      return HAL_OK;
 800d5dc:	2300      	movs	r3, #0
 800d5de:	e000      	b.n	800d5e2 <HAL_SD_WriteBlocks_DMA+0x1be>
    }
  }
  else
  {
    return HAL_BUSY;
 800d5e0:	2302      	movs	r3, #2
  }
}
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	3730      	adds	r7, #48	; 0x30
 800d5e6:	46bd      	mov	sp, r7
 800d5e8:	bd80      	pop	{r7, pc}
 800d5ea:	bf00      	nop
 800d5ec:	0800ddd5 	.word	0x0800ddd5
 800d5f0:	0800de71 	.word	0x0800de71
 800d5f4:	004005ff 	.word	0x004005ff
 800d5f8:	4225858c 	.word	0x4225858c

0800d5fc <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800d5fc:	b580      	push	{r7, lr}
 800d5fe:	b084      	sub	sp, #16
 800d600:	af00      	add	r7, sp, #0
 800d602:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d608:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d610:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d614:	2b00      	cmp	r3, #0
 800d616:	d008      	beq.n	800d62a <HAL_SD_IRQHandler+0x2e>
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	f003 0308 	and.w	r3, r3, #8
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d003      	beq.n	800d62a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800d622:	6878      	ldr	r0, [r7, #4]
 800d624:	f000 ffc8 	bl	800e5b8 <SD_Read_IT>
 800d628:	e155      	b.n	800d8d6 <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d634:	2b00      	cmp	r3, #0
 800d636:	f000 808f 	beq.w	800d758 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d642:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d64a:	687a      	ldr	r2, [r7, #4]
 800d64c:	6812      	ldr	r2, [r2, #0]
 800d64e:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800d652:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800d656:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	f022 0201 	bic.w	r2, r2, #1
 800d666:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	f003 0308 	and.w	r3, r3, #8
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d039      	beq.n	800d6e6 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	f003 0302 	and.w	r3, r3, #2
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d104      	bne.n	800d686 <HAL_SD_IRQHandler+0x8a>
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	f003 0320 	and.w	r3, r3, #32
 800d682:	2b00      	cmp	r3, #0
 800d684:	d011      	beq.n	800d6aa <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	4618      	mov	r0, r3
 800d68c:	f003 f9ae 	bl	80109ec <SDMMC_CmdStopTransfer>
 800d690:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d692:	68bb      	ldr	r3, [r7, #8]
 800d694:	2b00      	cmp	r3, #0
 800d696:	d008      	beq.n	800d6aa <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d69c:	68bb      	ldr	r3, [r7, #8]
 800d69e:	431a      	orrs	r2, r3
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800d6a4:	6878      	ldr	r0, [r7, #4]
 800d6a6:	f000 f91f 	bl	800d8e8 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	f240 523a 	movw	r2, #1338	; 0x53a
 800d6b2:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	2201      	movs	r2, #1
 800d6b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	2200      	movs	r2, #0
 800d6c0:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	f003 0301 	and.w	r3, r3, #1
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d104      	bne.n	800d6d6 <HAL_SD_IRQHandler+0xda>
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	f003 0302 	and.w	r3, r3, #2
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d003      	beq.n	800d6de <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800d6d6:	6878      	ldr	r0, [r7, #4]
 800d6d8:	f003 fe04 	bl	80112e4 <HAL_SD_RxCpltCallback>
 800d6dc:	e0fb      	b.n	800d8d6 <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800d6de:	6878      	ldr	r0, [r7, #4]
 800d6e0:	f003 fdf6 	bl	80112d0 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800d6e4:	e0f7      	b.n	800d8d6 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	f000 80f2 	beq.w	800d8d6 <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	f003 0320 	and.w	r3, r3, #32
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d011      	beq.n	800d720 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	4618      	mov	r0, r3
 800d702:	f003 f973 	bl	80109ec <SDMMC_CmdStopTransfer>
 800d706:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d708:	68bb      	ldr	r3, [r7, #8]
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d008      	beq.n	800d720 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d712:	68bb      	ldr	r3, [r7, #8]
 800d714:	431a      	orrs	r2, r3
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800d71a:	6878      	ldr	r0, [r7, #4]
 800d71c:	f000 f8e4 	bl	800d8e8 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	f003 0301 	and.w	r3, r3, #1
 800d726:	2b00      	cmp	r3, #0
 800d728:	f040 80d5 	bne.w	800d8d6 <HAL_SD_IRQHandler+0x2da>
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	f003 0302 	and.w	r3, r3, #2
 800d732:	2b00      	cmp	r3, #0
 800d734:	f040 80cf 	bne.w	800d8d6 <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	f022 0208 	bic.w	r2, r2, #8
 800d746:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	2201      	movs	r2, #1
 800d74c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800d750:	6878      	ldr	r0, [r7, #4]
 800d752:	f003 fdbd 	bl	80112d0 <HAL_SD_TxCpltCallback>
}
 800d756:	e0be      	b.n	800d8d6 <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d75e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d762:	2b00      	cmp	r3, #0
 800d764:	d008      	beq.n	800d778 <HAL_SD_IRQHandler+0x17c>
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	f003 0308 	and.w	r3, r3, #8
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d003      	beq.n	800d778 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800d770:	6878      	ldr	r0, [r7, #4]
 800d772:	f000 ff72 	bl	800e65a <SD_Write_IT>
 800d776:	e0ae      	b.n	800d8d6 <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d77e:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800d782:	2b00      	cmp	r3, #0
 800d784:	f000 80a7 	beq.w	800d8d6 <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d78e:	f003 0302 	and.w	r3, r3, #2
 800d792:	2b00      	cmp	r3, #0
 800d794:	d005      	beq.n	800d7a2 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d79a:	f043 0202 	orr.w	r2, r3, #2
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7a8:	f003 0308 	and.w	r3, r3, #8
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d005      	beq.n	800d7bc <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7b4:	f043 0208 	orr.w	r2, r3, #8
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7c2:	f003 0320 	and.w	r3, r3, #32
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d005      	beq.n	800d7d6 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7ce:	f043 0220 	orr.w	r2, r3, #32
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7dc:	f003 0310 	and.w	r3, r3, #16
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d005      	beq.n	800d7f0 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7e8:	f043 0210 	orr.w	r2, r3, #16
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	f240 523a 	movw	r2, #1338	; 0x53a
 800d7f8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800d808:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	4618      	mov	r0, r3
 800d810:	f003 f8ec 	bl	80109ec <SDMMC_CmdStopTransfer>
 800d814:	4602      	mov	r2, r0
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d81a:	431a      	orrs	r2, r3
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	f003 0308 	and.w	r3, r3, #8
 800d826:	2b00      	cmp	r3, #0
 800d828:	d00a      	beq.n	800d840 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	2201      	movs	r2, #1
 800d82e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	2200      	movs	r2, #0
 800d836:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800d838:	6878      	ldr	r0, [r7, #4]
 800d83a:	f000 f855 	bl	800d8e8 <HAL_SD_ErrorCallback>
}
 800d83e:	e04a      	b.n	800d8d6 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d846:	2b00      	cmp	r3, #0
 800d848:	d045      	beq.n	800d8d6 <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	f003 0310 	and.w	r3, r3, #16
 800d850:	2b00      	cmp	r3, #0
 800d852:	d104      	bne.n	800d85e <HAL_SD_IRQHandler+0x262>
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	f003 0320 	and.w	r3, r3, #32
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d011      	beq.n	800d882 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d862:	4a1f      	ldr	r2, [pc, #124]	; (800d8e0 <HAL_SD_IRQHandler+0x2e4>)
 800d864:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d86a:	4618      	mov	r0, r3
 800d86c:	f7fd f98e 	bl	800ab8c <HAL_DMA_Abort_IT>
 800d870:	4603      	mov	r3, r0
 800d872:	2b00      	cmp	r3, #0
 800d874:	d02f      	beq.n	800d8d6 <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d87a:	4618      	mov	r0, r3
 800d87c:	f000 fb4a 	bl	800df14 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800d880:	e029      	b.n	800d8d6 <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	f003 0301 	and.w	r3, r3, #1
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d104      	bne.n	800d896 <HAL_SD_IRQHandler+0x29a>
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	f003 0302 	and.w	r3, r3, #2
 800d892:	2b00      	cmp	r3, #0
 800d894:	d011      	beq.n	800d8ba <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d89a:	4a12      	ldr	r2, [pc, #72]	; (800d8e4 <HAL_SD_IRQHandler+0x2e8>)
 800d89c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	f7fd f972 	bl	800ab8c <HAL_DMA_Abort_IT>
 800d8a8:	4603      	mov	r3, r0
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d013      	beq.n	800d8d6 <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	f000 fb65 	bl	800df82 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800d8b8:	e00d      	b.n	800d8d6 <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	2200      	movs	r2, #0
 800d8be:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	2201      	movs	r2, #1
 800d8c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	2200      	movs	r2, #0
 800d8cc:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800d8ce:	6878      	ldr	r0, [r7, #4]
 800d8d0:	f003 fcf4 	bl	80112bc <HAL_SD_AbortCallback>
}
 800d8d4:	e7ff      	b.n	800d8d6 <HAL_SD_IRQHandler+0x2da>
 800d8d6:	bf00      	nop
 800d8d8:	3710      	adds	r7, #16
 800d8da:	46bd      	mov	sp, r7
 800d8dc:	bd80      	pop	{r7, pc}
 800d8de:	bf00      	nop
 800d8e0:	0800df15 	.word	0x0800df15
 800d8e4:	0800df83 	.word	0x0800df83

0800d8e8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800d8e8:	b480      	push	{r7}
 800d8ea:	b083      	sub	sp, #12
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800d8f0:	bf00      	nop
 800d8f2:	370c      	adds	r7, #12
 800d8f4:	46bd      	mov	sp, r7
 800d8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8fa:	4770      	bx	lr

0800d8fc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800d8fc:	b480      	push	{r7}
 800d8fe:	b083      	sub	sp, #12
 800d900:	af00      	add	r7, sp, #0
 800d902:	6078      	str	r0, [r7, #4]
 800d904:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d90a:	0f9b      	lsrs	r3, r3, #30
 800d90c:	b2da      	uxtb	r2, r3
 800d90e:	683b      	ldr	r3, [r7, #0]
 800d910:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d916:	0e9b      	lsrs	r3, r3, #26
 800d918:	b2db      	uxtb	r3, r3
 800d91a:	f003 030f 	and.w	r3, r3, #15
 800d91e:	b2da      	uxtb	r2, r3
 800d920:	683b      	ldr	r3, [r7, #0]
 800d922:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d928:	0e1b      	lsrs	r3, r3, #24
 800d92a:	b2db      	uxtb	r3, r3
 800d92c:	f003 0303 	and.w	r3, r3, #3
 800d930:	b2da      	uxtb	r2, r3
 800d932:	683b      	ldr	r3, [r7, #0]
 800d934:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d93a:	0c1b      	lsrs	r3, r3, #16
 800d93c:	b2da      	uxtb	r2, r3
 800d93e:	683b      	ldr	r3, [r7, #0]
 800d940:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d946:	0a1b      	lsrs	r3, r3, #8
 800d948:	b2da      	uxtb	r2, r3
 800d94a:	683b      	ldr	r3, [r7, #0]
 800d94c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d952:	b2da      	uxtb	r2, r3
 800d954:	683b      	ldr	r3, [r7, #0]
 800d956:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d95c:	0d1b      	lsrs	r3, r3, #20
 800d95e:	b29a      	uxth	r2, r3
 800d960:	683b      	ldr	r3, [r7, #0]
 800d962:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d968:	0c1b      	lsrs	r3, r3, #16
 800d96a:	b2db      	uxtb	r3, r3
 800d96c:	f003 030f 	and.w	r3, r3, #15
 800d970:	b2da      	uxtb	r2, r3
 800d972:	683b      	ldr	r3, [r7, #0]
 800d974:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d97a:	0bdb      	lsrs	r3, r3, #15
 800d97c:	b2db      	uxtb	r3, r3
 800d97e:	f003 0301 	and.w	r3, r3, #1
 800d982:	b2da      	uxtb	r2, r3
 800d984:	683b      	ldr	r3, [r7, #0]
 800d986:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d98c:	0b9b      	lsrs	r3, r3, #14
 800d98e:	b2db      	uxtb	r3, r3
 800d990:	f003 0301 	and.w	r3, r3, #1
 800d994:	b2da      	uxtb	r2, r3
 800d996:	683b      	ldr	r3, [r7, #0]
 800d998:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d99e:	0b5b      	lsrs	r3, r3, #13
 800d9a0:	b2db      	uxtb	r3, r3
 800d9a2:	f003 0301 	and.w	r3, r3, #1
 800d9a6:	b2da      	uxtb	r2, r3
 800d9a8:	683b      	ldr	r3, [r7, #0]
 800d9aa:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d9b0:	0b1b      	lsrs	r3, r3, #12
 800d9b2:	b2db      	uxtb	r3, r3
 800d9b4:	f003 0301 	and.w	r3, r3, #1
 800d9b8:	b2da      	uxtb	r2, r3
 800d9ba:	683b      	ldr	r3, [r7, #0]
 800d9bc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800d9be:	683b      	ldr	r3, [r7, #0]
 800d9c0:	2200      	movs	r2, #0
 800d9c2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d163      	bne.n	800da94 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d9d0:	009a      	lsls	r2, r3, #2
 800d9d2:	f640 73fc 	movw	r3, #4092	; 0xffc
 800d9d6:	4013      	ands	r3, r2
 800d9d8:	687a      	ldr	r2, [r7, #4]
 800d9da:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800d9dc:	0f92      	lsrs	r2, r2, #30
 800d9de:	431a      	orrs	r2, r3
 800d9e0:	683b      	ldr	r3, [r7, #0]
 800d9e2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9e8:	0edb      	lsrs	r3, r3, #27
 800d9ea:	b2db      	uxtb	r3, r3
 800d9ec:	f003 0307 	and.w	r3, r3, #7
 800d9f0:	b2da      	uxtb	r2, r3
 800d9f2:	683b      	ldr	r3, [r7, #0]
 800d9f4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9fa:	0e1b      	lsrs	r3, r3, #24
 800d9fc:	b2db      	uxtb	r3, r3
 800d9fe:	f003 0307 	and.w	r3, r3, #7
 800da02:	b2da      	uxtb	r2, r3
 800da04:	683b      	ldr	r3, [r7, #0]
 800da06:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da0c:	0d5b      	lsrs	r3, r3, #21
 800da0e:	b2db      	uxtb	r3, r3
 800da10:	f003 0307 	and.w	r3, r3, #7
 800da14:	b2da      	uxtb	r2, r3
 800da16:	683b      	ldr	r3, [r7, #0]
 800da18:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da1e:	0c9b      	lsrs	r3, r3, #18
 800da20:	b2db      	uxtb	r3, r3
 800da22:	f003 0307 	and.w	r3, r3, #7
 800da26:	b2da      	uxtb	r2, r3
 800da28:	683b      	ldr	r3, [r7, #0]
 800da2a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da30:	0bdb      	lsrs	r3, r3, #15
 800da32:	b2db      	uxtb	r3, r3
 800da34:	f003 0307 	and.w	r3, r3, #7
 800da38:	b2da      	uxtb	r2, r3
 800da3a:	683b      	ldr	r3, [r7, #0]
 800da3c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800da3e:	683b      	ldr	r3, [r7, #0]
 800da40:	691b      	ldr	r3, [r3, #16]
 800da42:	1c5a      	adds	r2, r3, #1
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800da48:	683b      	ldr	r3, [r7, #0]
 800da4a:	7e1b      	ldrb	r3, [r3, #24]
 800da4c:	b2db      	uxtb	r3, r3
 800da4e:	f003 0307 	and.w	r3, r3, #7
 800da52:	3302      	adds	r3, #2
 800da54:	2201      	movs	r2, #1
 800da56:	fa02 f303 	lsl.w	r3, r2, r3
 800da5a:	687a      	ldr	r2, [r7, #4]
 800da5c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800da5e:	fb02 f203 	mul.w	r2, r2, r3
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800da66:	683b      	ldr	r3, [r7, #0]
 800da68:	7a1b      	ldrb	r3, [r3, #8]
 800da6a:	b2db      	uxtb	r3, r3
 800da6c:	f003 030f 	and.w	r3, r3, #15
 800da70:	2201      	movs	r2, #1
 800da72:	409a      	lsls	r2, r3
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da7c:	687a      	ldr	r2, [r7, #4]
 800da7e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800da80:	0a52      	lsrs	r2, r2, #9
 800da82:	fb02 f203 	mul.w	r2, r2, r3
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800da90:	661a      	str	r2, [r3, #96]	; 0x60
 800da92:	e031      	b.n	800daf8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da98:	2b01      	cmp	r3, #1
 800da9a:	d11d      	bne.n	800dad8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800daa0:	041b      	lsls	r3, r3, #16
 800daa2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800daaa:	0c1b      	lsrs	r3, r3, #16
 800daac:	431a      	orrs	r2, r3
 800daae:	683b      	ldr	r3, [r7, #0]
 800dab0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800dab2:	683b      	ldr	r3, [r7, #0]
 800dab4:	691b      	ldr	r3, [r3, #16]
 800dab6:	3301      	adds	r3, #1
 800dab8:	029a      	lsls	r2, r3, #10
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dacc:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	661a      	str	r2, [r3, #96]	; 0x60
 800dad6:	e00f      	b.n	800daf8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	4a58      	ldr	r2, [pc, #352]	; (800dc40 <HAL_SD_GetCardCSD+0x344>)
 800dade:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dae4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	2201      	movs	r2, #1
 800daf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800daf4:	2301      	movs	r3, #1
 800daf6:	e09d      	b.n	800dc34 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dafc:	0b9b      	lsrs	r3, r3, #14
 800dafe:	b2db      	uxtb	r3, r3
 800db00:	f003 0301 	and.w	r3, r3, #1
 800db04:	b2da      	uxtb	r2, r3
 800db06:	683b      	ldr	r3, [r7, #0]
 800db08:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db0e:	09db      	lsrs	r3, r3, #7
 800db10:	b2db      	uxtb	r3, r3
 800db12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db16:	b2da      	uxtb	r2, r3
 800db18:	683b      	ldr	r3, [r7, #0]
 800db1a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db20:	b2db      	uxtb	r3, r3
 800db22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db26:	b2da      	uxtb	r2, r3
 800db28:	683b      	ldr	r3, [r7, #0]
 800db2a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db30:	0fdb      	lsrs	r3, r3, #31
 800db32:	b2da      	uxtb	r2, r3
 800db34:	683b      	ldr	r3, [r7, #0]
 800db36:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db3c:	0f5b      	lsrs	r3, r3, #29
 800db3e:	b2db      	uxtb	r3, r3
 800db40:	f003 0303 	and.w	r3, r3, #3
 800db44:	b2da      	uxtb	r2, r3
 800db46:	683b      	ldr	r3, [r7, #0]
 800db48:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db4e:	0e9b      	lsrs	r3, r3, #26
 800db50:	b2db      	uxtb	r3, r3
 800db52:	f003 0307 	and.w	r3, r3, #7
 800db56:	b2da      	uxtb	r2, r3
 800db58:	683b      	ldr	r3, [r7, #0]
 800db5a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db60:	0d9b      	lsrs	r3, r3, #22
 800db62:	b2db      	uxtb	r3, r3
 800db64:	f003 030f 	and.w	r3, r3, #15
 800db68:	b2da      	uxtb	r2, r3
 800db6a:	683b      	ldr	r3, [r7, #0]
 800db6c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db72:	0d5b      	lsrs	r3, r3, #21
 800db74:	b2db      	uxtb	r3, r3
 800db76:	f003 0301 	and.w	r3, r3, #1
 800db7a:	b2da      	uxtb	r2, r3
 800db7c:	683b      	ldr	r3, [r7, #0]
 800db7e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800db82:	683b      	ldr	r3, [r7, #0]
 800db84:	2200      	movs	r2, #0
 800db86:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db8e:	0c1b      	lsrs	r3, r3, #16
 800db90:	b2db      	uxtb	r3, r3
 800db92:	f003 0301 	and.w	r3, r3, #1
 800db96:	b2da      	uxtb	r2, r3
 800db98:	683b      	ldr	r3, [r7, #0]
 800db9a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dba2:	0bdb      	lsrs	r3, r3, #15
 800dba4:	b2db      	uxtb	r3, r3
 800dba6:	f003 0301 	and.w	r3, r3, #1
 800dbaa:	b2da      	uxtb	r2, r3
 800dbac:	683b      	ldr	r3, [r7, #0]
 800dbae:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbb6:	0b9b      	lsrs	r3, r3, #14
 800dbb8:	b2db      	uxtb	r3, r3
 800dbba:	f003 0301 	and.w	r3, r3, #1
 800dbbe:	b2da      	uxtb	r2, r3
 800dbc0:	683b      	ldr	r3, [r7, #0]
 800dbc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbca:	0b5b      	lsrs	r3, r3, #13
 800dbcc:	b2db      	uxtb	r3, r3
 800dbce:	f003 0301 	and.w	r3, r3, #1
 800dbd2:	b2da      	uxtb	r2, r3
 800dbd4:	683b      	ldr	r3, [r7, #0]
 800dbd6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbde:	0b1b      	lsrs	r3, r3, #12
 800dbe0:	b2db      	uxtb	r3, r3
 800dbe2:	f003 0301 	and.w	r3, r3, #1
 800dbe6:	b2da      	uxtb	r2, r3
 800dbe8:	683b      	ldr	r3, [r7, #0]
 800dbea:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbf2:	0a9b      	lsrs	r3, r3, #10
 800dbf4:	b2db      	uxtb	r3, r3
 800dbf6:	f003 0303 	and.w	r3, r3, #3
 800dbfa:	b2da      	uxtb	r2, r3
 800dbfc:	683b      	ldr	r3, [r7, #0]
 800dbfe:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc06:	0a1b      	lsrs	r3, r3, #8
 800dc08:	b2db      	uxtb	r3, r3
 800dc0a:	f003 0303 	and.w	r3, r3, #3
 800dc0e:	b2da      	uxtb	r2, r3
 800dc10:	683b      	ldr	r3, [r7, #0]
 800dc12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc1a:	085b      	lsrs	r3, r3, #1
 800dc1c:	b2db      	uxtb	r3, r3
 800dc1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dc22:	b2da      	uxtb	r2, r3
 800dc24:	683b      	ldr	r3, [r7, #0]
 800dc26:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800dc2a:	683b      	ldr	r3, [r7, #0]
 800dc2c:	2201      	movs	r2, #1
 800dc2e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800dc32:	2300      	movs	r3, #0
}
 800dc34:	4618      	mov	r0, r3
 800dc36:	370c      	adds	r7, #12
 800dc38:	46bd      	mov	sp, r7
 800dc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc3e:	4770      	bx	lr
 800dc40:	004005ff 	.word	0x004005ff

0800dc44 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800dc44:	b480      	push	{r7}
 800dc46:	b083      	sub	sp, #12
 800dc48:	af00      	add	r7, sp, #0
 800dc4a:	6078      	str	r0, [r7, #4]
 800dc4c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dc52:	683b      	ldr	r3, [r7, #0]
 800dc54:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800dc5a:	683b      	ldr	r3, [r7, #0]
 800dc5c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dc62:	683b      	ldr	r3, [r7, #0]
 800dc64:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dc6a:	683b      	ldr	r3, [r7, #0]
 800dc6c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dc72:	683b      	ldr	r3, [r7, #0]
 800dc74:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800dc7a:	683b      	ldr	r3, [r7, #0]
 800dc7c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800dc82:	683b      	ldr	r3, [r7, #0]
 800dc84:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800dc8a:	683b      	ldr	r3, [r7, #0]
 800dc8c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800dc8e:	2300      	movs	r3, #0
}
 800dc90:	4618      	mov	r0, r3
 800dc92:	370c      	adds	r7, #12
 800dc94:	46bd      	mov	sp, r7
 800dc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc9a:	4770      	bx	lr

0800dc9c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800dc9c:	b5b0      	push	{r4, r5, r7, lr}
 800dc9e:	b08e      	sub	sp, #56	; 0x38
 800dca0:	af04      	add	r7, sp, #16
 800dca2:	6078      	str	r0, [r7, #4]
 800dca4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	2203      	movs	r2, #3
 800dcaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dcb2:	2b03      	cmp	r3, #3
 800dcb4:	d02e      	beq.n	800dd14 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800dcb6:	683b      	ldr	r3, [r7, #0]
 800dcb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dcbc:	d106      	bne.n	800dccc <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcc2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	639a      	str	r2, [r3, #56]	; 0x38
 800dcca:	e029      	b.n	800dd20 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800dccc:	683b      	ldr	r3, [r7, #0]
 800dcce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dcd2:	d10a      	bne.n	800dcea <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800dcd4:	6878      	ldr	r0, [r7, #4]
 800dcd6:	f000 fb0f 	bl	800e2f8 <SD_WideBus_Enable>
 800dcda:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dce2:	431a      	orrs	r2, r3
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	639a      	str	r2, [r3, #56]	; 0x38
 800dce8:	e01a      	b.n	800dd20 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800dcea:	683b      	ldr	r3, [r7, #0]
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d10a      	bne.n	800dd06 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800dcf0:	6878      	ldr	r0, [r7, #4]
 800dcf2:	f000 fb4c 	bl	800e38e <SD_WideBus_Disable>
 800dcf6:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dcfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcfe:	431a      	orrs	r2, r3
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	639a      	str	r2, [r3, #56]	; 0x38
 800dd04:	e00c      	b.n	800dd20 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd0a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	639a      	str	r2, [r3, #56]	; 0x38
 800dd12:	e005      	b.n	800dd20 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd18:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d009      	beq.n	800dd3c <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	4a18      	ldr	r2, [pc, #96]	; (800dd90 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800dd2e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	2201      	movs	r2, #1
 800dd34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800dd38:	2301      	movs	r3, #1
 800dd3a:	e024      	b.n	800dd86 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	685b      	ldr	r3, [r3, #4]
 800dd40:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	689b      	ldr	r3, [r3, #8]
 800dd46:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	68db      	ldr	r3, [r3, #12]
 800dd4c:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800dd4e:	683b      	ldr	r3, [r7, #0]
 800dd50:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	695b      	ldr	r3, [r3, #20]
 800dd56:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	699b      	ldr	r3, [r3, #24]
 800dd5c:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	681d      	ldr	r5, [r3, #0]
 800dd62:	466c      	mov	r4, sp
 800dd64:	f107 0318 	add.w	r3, r7, #24
 800dd68:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800dd6c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800dd70:	f107 030c 	add.w	r3, r7, #12
 800dd74:	cb0e      	ldmia	r3, {r1, r2, r3}
 800dd76:	4628      	mov	r0, r5
 800dd78:	f002 fcb2 	bl	80106e0 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	2201      	movs	r2, #1
 800dd80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800dd84:	2300      	movs	r3, #0
}
 800dd86:	4618      	mov	r0, r3
 800dd88:	3728      	adds	r7, #40	; 0x28
 800dd8a:	46bd      	mov	sp, r7
 800dd8c:	bdb0      	pop	{r4, r5, r7, pc}
 800dd8e:	bf00      	nop
 800dd90:	004005ff 	.word	0x004005ff

0800dd94 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800dd94:	b580      	push	{r7, lr}
 800dd96:	b086      	sub	sp, #24
 800dd98:	af00      	add	r7, sp, #0
 800dd9a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800dd9c:	2300      	movs	r3, #0
 800dd9e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800dda0:	f107 030c 	add.w	r3, r7, #12
 800dda4:	4619      	mov	r1, r3
 800dda6:	6878      	ldr	r0, [r7, #4]
 800dda8:	f000 fa7e 	bl	800e2a8 <SD_SendStatus>
 800ddac:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ddae:	697b      	ldr	r3, [r7, #20]
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d005      	beq.n	800ddc0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ddb8:	697b      	ldr	r3, [r7, #20]
 800ddba:	431a      	orrs	r2, r3
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	0a5b      	lsrs	r3, r3, #9
 800ddc4:	f003 030f 	and.w	r3, r3, #15
 800ddc8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800ddca:	693b      	ldr	r3, [r7, #16]
}
 800ddcc:	4618      	mov	r0, r3
 800ddce:	3718      	adds	r7, #24
 800ddd0:	46bd      	mov	sp, r7
 800ddd2:	bd80      	pop	{r7, pc}

0800ddd4 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ddd4:	b480      	push	{r7}
 800ddd6:	b085      	sub	sp, #20
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dde0:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ddf0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800ddf2:	bf00      	nop
 800ddf4:	3714      	adds	r7, #20
 800ddf6:	46bd      	mov	sp, r7
 800ddf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddfc:	4770      	bx	lr

0800ddfe <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ddfe:	b580      	push	{r7, lr}
 800de00:	b084      	sub	sp, #16
 800de02:	af00      	add	r7, sp, #0
 800de04:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de0a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de10:	2b82      	cmp	r3, #130	; 0x82
 800de12:	d111      	bne.n	800de38 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	4618      	mov	r0, r3
 800de1a:	f002 fde7 	bl	80109ec <SDMMC_CmdStopTransfer>
 800de1e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800de20:	68bb      	ldr	r3, [r7, #8]
 800de22:	2b00      	cmp	r3, #0
 800de24:	d008      	beq.n	800de38 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800de2a:	68bb      	ldr	r3, [r7, #8]
 800de2c:	431a      	orrs	r2, r3
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800de32:	68f8      	ldr	r0, [r7, #12]
 800de34:	f7ff fd58 	bl	800d8e8 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	f022 0208 	bic.w	r2, r2, #8
 800de46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	f240 523a 	movw	r2, #1338	; 0x53a
 800de50:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	2201      	movs	r2, #1
 800de56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	2200      	movs	r2, #0
 800de5e:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800de60:	68f8      	ldr	r0, [r7, #12]
 800de62:	f003 fa3f 	bl	80112e4 <HAL_SD_RxCpltCallback>
#endif
}
 800de66:	bf00      	nop
 800de68:	3710      	adds	r7, #16
 800de6a:	46bd      	mov	sp, r7
 800de6c:	bd80      	pop	{r7, pc}
	...

0800de70 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800de70:	b580      	push	{r7, lr}
 800de72:	b086      	sub	sp, #24
 800de74:	af00      	add	r7, sp, #0
 800de76:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de7c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800de7e:	6878      	ldr	r0, [r7, #4]
 800de80:	f7fd f830 	bl	800aee4 <HAL_DMA_GetError>
 800de84:	4603      	mov	r3, r0
 800de86:	2b02      	cmp	r3, #2
 800de88:	d03e      	beq.n	800df08 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800de8a:	697b      	ldr	r3, [r7, #20]
 800de8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de90:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800de92:	697b      	ldr	r3, [r7, #20]
 800de94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de98:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800de9a:	693b      	ldr	r3, [r7, #16]
 800de9c:	2b01      	cmp	r3, #1
 800de9e:	d002      	beq.n	800dea6 <SD_DMAError+0x36>
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	2b01      	cmp	r3, #1
 800dea4:	d12d      	bne.n	800df02 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800dea6:	697b      	ldr	r3, [r7, #20]
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	4a19      	ldr	r2, [pc, #100]	; (800df10 <SD_DMAError+0xa0>)
 800deac:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800deae:	697b      	ldr	r3, [r7, #20]
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800deb4:	697b      	ldr	r3, [r7, #20]
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800debc:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800debe:	697b      	ldr	r3, [r7, #20]
 800dec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dec2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800dec6:	697b      	ldr	r3, [r7, #20]
 800dec8:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800deca:	6978      	ldr	r0, [r7, #20]
 800decc:	f7ff ff62 	bl	800dd94 <HAL_SD_GetCardState>
 800ded0:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800ded2:	68bb      	ldr	r3, [r7, #8]
 800ded4:	2b06      	cmp	r3, #6
 800ded6:	d002      	beq.n	800dede <SD_DMAError+0x6e>
 800ded8:	68bb      	ldr	r3, [r7, #8]
 800deda:	2b05      	cmp	r3, #5
 800dedc:	d10a      	bne.n	800def4 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800dede:	697b      	ldr	r3, [r7, #20]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	4618      	mov	r0, r3
 800dee4:	f002 fd82 	bl	80109ec <SDMMC_CmdStopTransfer>
 800dee8:	4602      	mov	r2, r0
 800deea:	697b      	ldr	r3, [r7, #20]
 800deec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800deee:	431a      	orrs	r2, r3
 800def0:	697b      	ldr	r3, [r7, #20]
 800def2:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800def4:	697b      	ldr	r3, [r7, #20]
 800def6:	2201      	movs	r2, #1
 800def8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800defc:	697b      	ldr	r3, [r7, #20]
 800defe:	2200      	movs	r2, #0
 800df00:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800df02:	6978      	ldr	r0, [r7, #20]
 800df04:	f7ff fcf0 	bl	800d8e8 <HAL_SD_ErrorCallback>
#endif
  }
}
 800df08:	bf00      	nop
 800df0a:	3718      	adds	r7, #24
 800df0c:	46bd      	mov	sp, r7
 800df0e:	bd80      	pop	{r7, pc}
 800df10:	004005ff 	.word	0x004005ff

0800df14 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800df14:	b580      	push	{r7, lr}
 800df16:	b084      	sub	sp, #16
 800df18:	af00      	add	r7, sp, #0
 800df1a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df20:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	f240 523a 	movw	r2, #1338	; 0x53a
 800df2a:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800df2c:	68f8      	ldr	r0, [r7, #12]
 800df2e:	f7ff ff31 	bl	800dd94 <HAL_SD_GetCardState>
 800df32:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	2201      	movs	r2, #1
 800df38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	2200      	movs	r2, #0
 800df40:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800df42:	68bb      	ldr	r3, [r7, #8]
 800df44:	2b06      	cmp	r3, #6
 800df46:	d002      	beq.n	800df4e <SD_DMATxAbort+0x3a>
 800df48:	68bb      	ldr	r3, [r7, #8]
 800df4a:	2b05      	cmp	r3, #5
 800df4c:	d10a      	bne.n	800df64 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	4618      	mov	r0, r3
 800df54:	f002 fd4a 	bl	80109ec <SDMMC_CmdStopTransfer>
 800df58:	4602      	mov	r2, r0
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df5e:	431a      	orrs	r2, r3
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d103      	bne.n	800df74 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800df6c:	68f8      	ldr	r0, [r7, #12]
 800df6e:	f003 f9a5 	bl	80112bc <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800df72:	e002      	b.n	800df7a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800df74:	68f8      	ldr	r0, [r7, #12]
 800df76:	f7ff fcb7 	bl	800d8e8 <HAL_SD_ErrorCallback>
}
 800df7a:	bf00      	nop
 800df7c:	3710      	adds	r7, #16
 800df7e:	46bd      	mov	sp, r7
 800df80:	bd80      	pop	{r7, pc}

0800df82 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800df82:	b580      	push	{r7, lr}
 800df84:	b084      	sub	sp, #16
 800df86:	af00      	add	r7, sp, #0
 800df88:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df8e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	f240 523a 	movw	r2, #1338	; 0x53a
 800df98:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800df9a:	68f8      	ldr	r0, [r7, #12]
 800df9c:	f7ff fefa 	bl	800dd94 <HAL_SD_GetCardState>
 800dfa0:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	2201      	movs	r2, #1
 800dfa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	2200      	movs	r2, #0
 800dfae:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800dfb0:	68bb      	ldr	r3, [r7, #8]
 800dfb2:	2b06      	cmp	r3, #6
 800dfb4:	d002      	beq.n	800dfbc <SD_DMARxAbort+0x3a>
 800dfb6:	68bb      	ldr	r3, [r7, #8]
 800dfb8:	2b05      	cmp	r3, #5
 800dfba:	d10a      	bne.n	800dfd2 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	4618      	mov	r0, r3
 800dfc2:	f002 fd13 	bl	80109ec <SDMMC_CmdStopTransfer>
 800dfc6:	4602      	mov	r2, r0
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfcc:	431a      	orrs	r2, r3
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d103      	bne.n	800dfe2 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800dfda:	68f8      	ldr	r0, [r7, #12]
 800dfdc:	f003 f96e 	bl	80112bc <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800dfe0:	e002      	b.n	800dfe8 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800dfe2:	68f8      	ldr	r0, [r7, #12]
 800dfe4:	f7ff fc80 	bl	800d8e8 <HAL_SD_ErrorCallback>
}
 800dfe8:	bf00      	nop
 800dfea:	3710      	adds	r7, #16
 800dfec:	46bd      	mov	sp, r7
 800dfee:	bd80      	pop	{r7, pc}

0800dff0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800dff0:	b5b0      	push	{r4, r5, r7, lr}
 800dff2:	b094      	sub	sp, #80	; 0x50
 800dff4:	af04      	add	r7, sp, #16
 800dff6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800dff8:	2301      	movs	r3, #1
 800dffa:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	4618      	mov	r0, r3
 800e002:	f002 fbc5 	bl	8010790 <SDIO_GetPowerState>
 800e006:	4603      	mov	r3, r0
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d102      	bne.n	800e012 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e00c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800e010:	e0b7      	b.n	800e182 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e016:	2b03      	cmp	r3, #3
 800e018:	d02f      	beq.n	800e07a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	4618      	mov	r0, r3
 800e020:	f002 fdee 	bl	8010c00 <SDMMC_CmdSendCID>
 800e024:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e026:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d001      	beq.n	800e030 <SD_InitCard+0x40>
    {
      return errorstate;
 800e02c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e02e:	e0a8      	b.n	800e182 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	2100      	movs	r1, #0
 800e036:	4618      	mov	r0, r3
 800e038:	f002 fbef 	bl	801081a <SDIO_GetResponse>
 800e03c:	4602      	mov	r2, r0
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	2104      	movs	r1, #4
 800e048:	4618      	mov	r0, r3
 800e04a:	f002 fbe6 	bl	801081a <SDIO_GetResponse>
 800e04e:	4602      	mov	r2, r0
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	2108      	movs	r1, #8
 800e05a:	4618      	mov	r0, r3
 800e05c:	f002 fbdd 	bl	801081a <SDIO_GetResponse>
 800e060:	4602      	mov	r2, r0
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	210c      	movs	r1, #12
 800e06c:	4618      	mov	r0, r3
 800e06e:	f002 fbd4 	bl	801081a <SDIO_GetResponse>
 800e072:	4602      	mov	r2, r0
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e07e:	2b03      	cmp	r3, #3
 800e080:	d00d      	beq.n	800e09e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	f107 020e 	add.w	r2, r7, #14
 800e08a:	4611      	mov	r1, r2
 800e08c:	4618      	mov	r0, r3
 800e08e:	f002 fdf4 	bl	8010c7a <SDMMC_CmdSetRelAdd>
 800e092:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e094:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e096:	2b00      	cmp	r3, #0
 800e098:	d001      	beq.n	800e09e <SD_InitCard+0xae>
    {
      return errorstate;
 800e09a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e09c:	e071      	b.n	800e182 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e0a2:	2b03      	cmp	r3, #3
 800e0a4:	d036      	beq.n	800e114 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800e0a6:	89fb      	ldrh	r3, [r7, #14]
 800e0a8:	461a      	mov	r2, r3
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	681a      	ldr	r2, [r3, #0]
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e0b6:	041b      	lsls	r3, r3, #16
 800e0b8:	4619      	mov	r1, r3
 800e0ba:	4610      	mov	r0, r2
 800e0bc:	f002 fdbe 	bl	8010c3c <SDMMC_CmdSendCSD>
 800e0c0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e0c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d001      	beq.n	800e0cc <SD_InitCard+0xdc>
    {
      return errorstate;
 800e0c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0ca:	e05a      	b.n	800e182 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	2100      	movs	r1, #0
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	f002 fba1 	bl	801081a <SDIO_GetResponse>
 800e0d8:	4602      	mov	r2, r0
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	2104      	movs	r1, #4
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	f002 fb98 	bl	801081a <SDIO_GetResponse>
 800e0ea:	4602      	mov	r2, r0
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	2108      	movs	r1, #8
 800e0f6:	4618      	mov	r0, r3
 800e0f8:	f002 fb8f 	bl	801081a <SDIO_GetResponse>
 800e0fc:	4602      	mov	r2, r0
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	210c      	movs	r1, #12
 800e108:	4618      	mov	r0, r3
 800e10a:	f002 fb86 	bl	801081a <SDIO_GetResponse>
 800e10e:	4602      	mov	r2, r0
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	2104      	movs	r1, #4
 800e11a:	4618      	mov	r0, r3
 800e11c:	f002 fb7d 	bl	801081a <SDIO_GetResponse>
 800e120:	4603      	mov	r3, r0
 800e122:	0d1a      	lsrs	r2, r3, #20
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800e128:	f107 0310 	add.w	r3, r7, #16
 800e12c:	4619      	mov	r1, r3
 800e12e:	6878      	ldr	r0, [r7, #4]
 800e130:	f7ff fbe4 	bl	800d8fc <HAL_SD_GetCardCSD>
 800e134:	4603      	mov	r3, r0
 800e136:	2b00      	cmp	r3, #0
 800e138:	d002      	beq.n	800e140 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e13a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e13e:	e020      	b.n	800e182 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	6819      	ldr	r1, [r3, #0]
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e148:	041b      	lsls	r3, r3, #16
 800e14a:	f04f 0400 	mov.w	r4, #0
 800e14e:	461a      	mov	r2, r3
 800e150:	4623      	mov	r3, r4
 800e152:	4608      	mov	r0, r1
 800e154:	f002 fc6c 	bl	8010a30 <SDMMC_CmdSelDesel>
 800e158:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800e15a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d001      	beq.n	800e164 <SD_InitCard+0x174>
  {
    return errorstate;
 800e160:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e162:	e00e      	b.n	800e182 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	681d      	ldr	r5, [r3, #0]
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	466c      	mov	r4, sp
 800e16c:	f103 0210 	add.w	r2, r3, #16
 800e170:	ca07      	ldmia	r2, {r0, r1, r2}
 800e172:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e176:	3304      	adds	r3, #4
 800e178:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e17a:	4628      	mov	r0, r5
 800e17c:	f002 fab0 	bl	80106e0 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800e180:	2300      	movs	r3, #0
}
 800e182:	4618      	mov	r0, r3
 800e184:	3740      	adds	r7, #64	; 0x40
 800e186:	46bd      	mov	sp, r7
 800e188:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800e18c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800e18c:	b580      	push	{r7, lr}
 800e18e:	b086      	sub	sp, #24
 800e190:	af00      	add	r7, sp, #0
 800e192:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e194:	2300      	movs	r3, #0
 800e196:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800e198:	2300      	movs	r3, #0
 800e19a:	617b      	str	r3, [r7, #20]
 800e19c:	2300      	movs	r3, #0
 800e19e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	4618      	mov	r0, r3
 800e1a6:	f002 fc66 	bl	8010a76 <SDMMC_CmdGoIdleState>
 800e1aa:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d001      	beq.n	800e1b6 <SD_PowerON+0x2a>
  {
    return errorstate;
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	e072      	b.n	800e29c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	4618      	mov	r0, r3
 800e1bc:	f002 fc79 	bl	8010ab2 <SDMMC_CmdOperCond>
 800e1c0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d00d      	beq.n	800e1e4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	2200      	movs	r2, #0
 800e1cc:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	4618      	mov	r0, r3
 800e1d4:	f002 fc4f 	bl	8010a76 <SDMMC_CmdGoIdleState>
 800e1d8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d004      	beq.n	800e1ea <SD_PowerON+0x5e>
    {
      return errorstate;
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	e05b      	b.n	800e29c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	2201      	movs	r2, #1
 800e1e8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e1ee:	2b01      	cmp	r3, #1
 800e1f0:	d137      	bne.n	800e262 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	2100      	movs	r1, #0
 800e1f8:	4618      	mov	r0, r3
 800e1fa:	f002 fc79 	bl	8010af0 <SDMMC_CmdAppCommand>
 800e1fe:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	2b00      	cmp	r3, #0
 800e204:	d02d      	beq.n	800e262 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e206:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e20a:	e047      	b.n	800e29c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	2100      	movs	r1, #0
 800e212:	4618      	mov	r0, r3
 800e214:	f002 fc6c 	bl	8010af0 <SDMMC_CmdAppCommand>
 800e218:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d001      	beq.n	800e224 <SD_PowerON+0x98>
    {
      return errorstate;
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	e03b      	b.n	800e29c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	491e      	ldr	r1, [pc, #120]	; (800e2a4 <SD_PowerON+0x118>)
 800e22a:	4618      	mov	r0, r3
 800e22c:	f002 fc82 	bl	8010b34 <SDMMC_CmdAppOperCommand>
 800e230:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	2b00      	cmp	r3, #0
 800e236:	d002      	beq.n	800e23e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e238:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e23c:	e02e      	b.n	800e29c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	2100      	movs	r1, #0
 800e244:	4618      	mov	r0, r3
 800e246:	f002 fae8 	bl	801081a <SDIO_GetResponse>
 800e24a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800e24c:	697b      	ldr	r3, [r7, #20]
 800e24e:	0fdb      	lsrs	r3, r3, #31
 800e250:	2b01      	cmp	r3, #1
 800e252:	d101      	bne.n	800e258 <SD_PowerON+0xcc>
 800e254:	2301      	movs	r3, #1
 800e256:	e000      	b.n	800e25a <SD_PowerON+0xce>
 800e258:	2300      	movs	r3, #0
 800e25a:	613b      	str	r3, [r7, #16]

    count++;
 800e25c:	68bb      	ldr	r3, [r7, #8]
 800e25e:	3301      	adds	r3, #1
 800e260:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800e262:	68bb      	ldr	r3, [r7, #8]
 800e264:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e268:	4293      	cmp	r3, r2
 800e26a:	d802      	bhi.n	800e272 <SD_PowerON+0xe6>
 800e26c:	693b      	ldr	r3, [r7, #16]
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d0cc      	beq.n	800e20c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800e272:	68bb      	ldr	r3, [r7, #8]
 800e274:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e278:	4293      	cmp	r3, r2
 800e27a:	d902      	bls.n	800e282 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e27c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e280:	e00c      	b.n	800e29c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800e282:	697b      	ldr	r3, [r7, #20]
 800e284:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d003      	beq.n	800e294 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	2201      	movs	r2, #1
 800e290:	645a      	str	r2, [r3, #68]	; 0x44
 800e292:	e002      	b.n	800e29a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	2200      	movs	r2, #0
 800e298:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800e29a:	2300      	movs	r3, #0
}
 800e29c:	4618      	mov	r0, r3
 800e29e:	3718      	adds	r7, #24
 800e2a0:	46bd      	mov	sp, r7
 800e2a2:	bd80      	pop	{r7, pc}
 800e2a4:	c1100000 	.word	0xc1100000

0800e2a8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800e2a8:	b580      	push	{r7, lr}
 800e2aa:	b084      	sub	sp, #16
 800e2ac:	af00      	add	r7, sp, #0
 800e2ae:	6078      	str	r0, [r7, #4]
 800e2b0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800e2b2:	683b      	ldr	r3, [r7, #0]
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d102      	bne.n	800e2be <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800e2b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e2bc:	e018      	b.n	800e2f0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	681a      	ldr	r2, [r3, #0]
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e2c6:	041b      	lsls	r3, r3, #16
 800e2c8:	4619      	mov	r1, r3
 800e2ca:	4610      	mov	r0, r2
 800e2cc:	f002 fcf6 	bl	8010cbc <SDMMC_CmdSendStatus>
 800e2d0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d001      	beq.n	800e2dc <SD_SendStatus+0x34>
  {
    return errorstate;
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	e009      	b.n	800e2f0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	2100      	movs	r1, #0
 800e2e2:	4618      	mov	r0, r3
 800e2e4:	f002 fa99 	bl	801081a <SDIO_GetResponse>
 800e2e8:	4602      	mov	r2, r0
 800e2ea:	683b      	ldr	r3, [r7, #0]
 800e2ec:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800e2ee:	2300      	movs	r3, #0
}
 800e2f0:	4618      	mov	r0, r3
 800e2f2:	3710      	adds	r7, #16
 800e2f4:	46bd      	mov	sp, r7
 800e2f6:	bd80      	pop	{r7, pc}

0800e2f8 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800e2f8:	b580      	push	{r7, lr}
 800e2fa:	b086      	sub	sp, #24
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800e300:	2300      	movs	r3, #0
 800e302:	60fb      	str	r3, [r7, #12]
 800e304:	2300      	movs	r3, #0
 800e306:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	2100      	movs	r1, #0
 800e30e:	4618      	mov	r0, r3
 800e310:	f002 fa83 	bl	801081a <SDIO_GetResponse>
 800e314:	4603      	mov	r3, r0
 800e316:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e31a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e31e:	d102      	bne.n	800e326 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e320:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e324:	e02f      	b.n	800e386 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e326:	f107 030c 	add.w	r3, r7, #12
 800e32a:	4619      	mov	r1, r3
 800e32c:	6878      	ldr	r0, [r7, #4]
 800e32e:	f000 f879 	bl	800e424 <SD_FindSCR>
 800e332:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e334:	697b      	ldr	r3, [r7, #20]
 800e336:	2b00      	cmp	r3, #0
 800e338:	d001      	beq.n	800e33e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800e33a:	697b      	ldr	r3, [r7, #20]
 800e33c:	e023      	b.n	800e386 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e33e:	693b      	ldr	r3, [r7, #16]
 800e340:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e344:	2b00      	cmp	r3, #0
 800e346:	d01c      	beq.n	800e382 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	681a      	ldr	r2, [r3, #0]
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e350:	041b      	lsls	r3, r3, #16
 800e352:	4619      	mov	r1, r3
 800e354:	4610      	mov	r0, r2
 800e356:	f002 fbcb 	bl	8010af0 <SDMMC_CmdAppCommand>
 800e35a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e35c:	697b      	ldr	r3, [r7, #20]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d001      	beq.n	800e366 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800e362:	697b      	ldr	r3, [r7, #20]
 800e364:	e00f      	b.n	800e386 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	2102      	movs	r1, #2
 800e36c:	4618      	mov	r0, r3
 800e36e:	f002 fc04 	bl	8010b7a <SDMMC_CmdBusWidth>
 800e372:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e374:	697b      	ldr	r3, [r7, #20]
 800e376:	2b00      	cmp	r3, #0
 800e378:	d001      	beq.n	800e37e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800e37a:	697b      	ldr	r3, [r7, #20]
 800e37c:	e003      	b.n	800e386 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e37e:	2300      	movs	r3, #0
 800e380:	e001      	b.n	800e386 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e382:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e386:	4618      	mov	r0, r3
 800e388:	3718      	adds	r7, #24
 800e38a:	46bd      	mov	sp, r7
 800e38c:	bd80      	pop	{r7, pc}

0800e38e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800e38e:	b580      	push	{r7, lr}
 800e390:	b086      	sub	sp, #24
 800e392:	af00      	add	r7, sp, #0
 800e394:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800e396:	2300      	movs	r3, #0
 800e398:	60fb      	str	r3, [r7, #12]
 800e39a:	2300      	movs	r3, #0
 800e39c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	2100      	movs	r1, #0
 800e3a4:	4618      	mov	r0, r3
 800e3a6:	f002 fa38 	bl	801081a <SDIO_GetResponse>
 800e3aa:	4603      	mov	r3, r0
 800e3ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e3b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e3b4:	d102      	bne.n	800e3bc <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e3b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e3ba:	e02f      	b.n	800e41c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e3bc:	f107 030c 	add.w	r3, r7, #12
 800e3c0:	4619      	mov	r1, r3
 800e3c2:	6878      	ldr	r0, [r7, #4]
 800e3c4:	f000 f82e 	bl	800e424 <SD_FindSCR>
 800e3c8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e3ca:	697b      	ldr	r3, [r7, #20]
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d001      	beq.n	800e3d4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800e3d0:	697b      	ldr	r3, [r7, #20]
 800e3d2:	e023      	b.n	800e41c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e3d4:	693b      	ldr	r3, [r7, #16]
 800e3d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d01c      	beq.n	800e418 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	681a      	ldr	r2, [r3, #0]
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e3e6:	041b      	lsls	r3, r3, #16
 800e3e8:	4619      	mov	r1, r3
 800e3ea:	4610      	mov	r0, r2
 800e3ec:	f002 fb80 	bl	8010af0 <SDMMC_CmdAppCommand>
 800e3f0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e3f2:	697b      	ldr	r3, [r7, #20]
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d001      	beq.n	800e3fc <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800e3f8:	697b      	ldr	r3, [r7, #20]
 800e3fa:	e00f      	b.n	800e41c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	2100      	movs	r1, #0
 800e402:	4618      	mov	r0, r3
 800e404:	f002 fbb9 	bl	8010b7a <SDMMC_CmdBusWidth>
 800e408:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e40a:	697b      	ldr	r3, [r7, #20]
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d001      	beq.n	800e414 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800e410:	697b      	ldr	r3, [r7, #20]
 800e412:	e003      	b.n	800e41c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e414:	2300      	movs	r3, #0
 800e416:	e001      	b.n	800e41c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e418:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e41c:	4618      	mov	r0, r3
 800e41e:	3718      	adds	r7, #24
 800e420:	46bd      	mov	sp, r7
 800e422:	bd80      	pop	{r7, pc}

0800e424 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800e424:	b590      	push	{r4, r7, lr}
 800e426:	b08f      	sub	sp, #60	; 0x3c
 800e428:	af00      	add	r7, sp, #0
 800e42a:	6078      	str	r0, [r7, #4]
 800e42c:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e42e:	f7fb fd63 	bl	8009ef8 <HAL_GetTick>
 800e432:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800e434:	2300      	movs	r3, #0
 800e436:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800e438:	2300      	movs	r3, #0
 800e43a:	60bb      	str	r3, [r7, #8]
 800e43c:	2300      	movs	r3, #0
 800e43e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800e440:	683b      	ldr	r3, [r7, #0]
 800e442:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	2108      	movs	r1, #8
 800e44a:	4618      	mov	r0, r3
 800e44c:	f002 fa24 	bl	8010898 <SDMMC_CmdBlockLength>
 800e450:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e454:	2b00      	cmp	r3, #0
 800e456:	d001      	beq.n	800e45c <SD_FindSCR+0x38>
  {
    return errorstate;
 800e458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e45a:	e0a9      	b.n	800e5b0 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	681a      	ldr	r2, [r3, #0]
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e464:	041b      	lsls	r3, r3, #16
 800e466:	4619      	mov	r1, r3
 800e468:	4610      	mov	r0, r2
 800e46a:	f002 fb41 	bl	8010af0 <SDMMC_CmdAppCommand>
 800e46e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e472:	2b00      	cmp	r3, #0
 800e474:	d001      	beq.n	800e47a <SD_FindSCR+0x56>
  {
    return errorstate;
 800e476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e478:	e09a      	b.n	800e5b0 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e47a:	f04f 33ff 	mov.w	r3, #4294967295
 800e47e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800e480:	2308      	movs	r3, #8
 800e482:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800e484:	2330      	movs	r3, #48	; 0x30
 800e486:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800e488:	2302      	movs	r3, #2
 800e48a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800e48c:	2300      	movs	r3, #0
 800e48e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800e490:	2301      	movs	r3, #1
 800e492:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	f107 0210 	add.w	r2, r7, #16
 800e49c:	4611      	mov	r1, r2
 800e49e:	4618      	mov	r0, r3
 800e4a0:	f002 f9ce 	bl	8010840 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	4618      	mov	r0, r3
 800e4aa:	f002 fb88 	bl	8010bbe <SDMMC_CmdSendSCR>
 800e4ae:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e4b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d022      	beq.n	800e4fc <SD_FindSCR+0xd8>
  {
    return errorstate;
 800e4b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4b8:	e07a      	b.n	800e5b0 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d00e      	beq.n	800e4e6 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	6819      	ldr	r1, [r3, #0]
 800e4cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4ce:	009b      	lsls	r3, r3, #2
 800e4d0:	f107 0208 	add.w	r2, r7, #8
 800e4d4:	18d4      	adds	r4, r2, r3
 800e4d6:	4608      	mov	r0, r1
 800e4d8:	f002 f92d 	bl	8010736 <SDIO_ReadFIFO>
 800e4dc:	4603      	mov	r3, r0
 800e4de:	6023      	str	r3, [r4, #0]
      index++;
 800e4e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4e2:	3301      	adds	r3, #1
 800e4e4:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e4e6:	f7fb fd07 	bl	8009ef8 <HAL_GetTick>
 800e4ea:	4602      	mov	r2, r0
 800e4ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4ee:	1ad3      	subs	r3, r2, r3
 800e4f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4f4:	d102      	bne.n	800e4fc <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e4f6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e4fa:	e059      	b.n	800e5b0 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e502:	f240 432a 	movw	r3, #1066	; 0x42a
 800e506:	4013      	ands	r3, r2
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d0d6      	beq.n	800e4ba <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e512:	f003 0308 	and.w	r3, r3, #8
 800e516:	2b00      	cmp	r3, #0
 800e518:	d005      	beq.n	800e526 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	2208      	movs	r2, #8
 800e520:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e522:	2308      	movs	r3, #8
 800e524:	e044      	b.n	800e5b0 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e52c:	f003 0302 	and.w	r3, r3, #2
 800e530:	2b00      	cmp	r3, #0
 800e532:	d005      	beq.n	800e540 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	2202      	movs	r2, #2
 800e53a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e53c:	2302      	movs	r3, #2
 800e53e:	e037      	b.n	800e5b0 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e546:	f003 0320 	and.w	r3, r3, #32
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d005      	beq.n	800e55a <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	2220      	movs	r2, #32
 800e554:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800e556:	2320      	movs	r3, #32
 800e558:	e02a      	b.n	800e5b0 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	f240 523a 	movw	r2, #1338	; 0x53a
 800e562:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	061a      	lsls	r2, r3, #24
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	021b      	lsls	r3, r3, #8
 800e56c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e570:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	0a1b      	lsrs	r3, r3, #8
 800e576:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e57a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	0e1b      	lsrs	r3, r3, #24
 800e580:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e584:	601a      	str	r2, [r3, #0]
    scr++;
 800e586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e588:	3304      	adds	r3, #4
 800e58a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e58c:	68bb      	ldr	r3, [r7, #8]
 800e58e:	061a      	lsls	r2, r3, #24
 800e590:	68bb      	ldr	r3, [r7, #8]
 800e592:	021b      	lsls	r3, r3, #8
 800e594:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e598:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e59a:	68bb      	ldr	r3, [r7, #8]
 800e59c:	0a1b      	lsrs	r3, r3, #8
 800e59e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e5a2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e5a4:	68bb      	ldr	r3, [r7, #8]
 800e5a6:	0e1b      	lsrs	r3, r3, #24
 800e5a8:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e5aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5ac:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800e5ae:	2300      	movs	r3, #0
}
 800e5b0:	4618      	mov	r0, r3
 800e5b2:	373c      	adds	r7, #60	; 0x3c
 800e5b4:	46bd      	mov	sp, r7
 800e5b6:	bd90      	pop	{r4, r7, pc}

0800e5b8 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800e5b8:	b580      	push	{r7, lr}
 800e5ba:	b086      	sub	sp, #24
 800e5bc:	af00      	add	r7, sp, #0
 800e5be:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5c4:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5ca:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800e5cc:	693b      	ldr	r3, [r7, #16]
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d03f      	beq.n	800e652 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800e5d2:	2300      	movs	r3, #0
 800e5d4:	617b      	str	r3, [r7, #20]
 800e5d6:	e033      	b.n	800e640 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	4618      	mov	r0, r3
 800e5de:	f002 f8aa 	bl	8010736 <SDIO_ReadFIFO>
 800e5e2:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800e5e4:	68bb      	ldr	r3, [r7, #8]
 800e5e6:	b2da      	uxtb	r2, r3
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	3301      	adds	r3, #1
 800e5f0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e5f2:	693b      	ldr	r3, [r7, #16]
 800e5f4:	3b01      	subs	r3, #1
 800e5f6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800e5f8:	68bb      	ldr	r3, [r7, #8]
 800e5fa:	0a1b      	lsrs	r3, r3, #8
 800e5fc:	b2da      	uxtb	r2, r3
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	3301      	adds	r3, #1
 800e606:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e608:	693b      	ldr	r3, [r7, #16]
 800e60a:	3b01      	subs	r3, #1
 800e60c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800e60e:	68bb      	ldr	r3, [r7, #8]
 800e610:	0c1b      	lsrs	r3, r3, #16
 800e612:	b2da      	uxtb	r2, r3
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	3301      	adds	r3, #1
 800e61c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e61e:	693b      	ldr	r3, [r7, #16]
 800e620:	3b01      	subs	r3, #1
 800e622:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800e624:	68bb      	ldr	r3, [r7, #8]
 800e626:	0e1b      	lsrs	r3, r3, #24
 800e628:	b2da      	uxtb	r2, r3
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	3301      	adds	r3, #1
 800e632:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e634:	693b      	ldr	r3, [r7, #16]
 800e636:	3b01      	subs	r3, #1
 800e638:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800e63a:	697b      	ldr	r3, [r7, #20]
 800e63c:	3301      	adds	r3, #1
 800e63e:	617b      	str	r3, [r7, #20]
 800e640:	697b      	ldr	r3, [r7, #20]
 800e642:	2b07      	cmp	r3, #7
 800e644:	d9c8      	bls.n	800e5d8 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	68fa      	ldr	r2, [r7, #12]
 800e64a:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	693a      	ldr	r2, [r7, #16]
 800e650:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800e652:	bf00      	nop
 800e654:	3718      	adds	r7, #24
 800e656:	46bd      	mov	sp, r7
 800e658:	bd80      	pop	{r7, pc}

0800e65a <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800e65a:	b580      	push	{r7, lr}
 800e65c:	b086      	sub	sp, #24
 800e65e:	af00      	add	r7, sp, #0
 800e660:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	6a1b      	ldr	r3, [r3, #32]
 800e666:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e66c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800e66e:	693b      	ldr	r3, [r7, #16]
 800e670:	2b00      	cmp	r3, #0
 800e672:	d043      	beq.n	800e6fc <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800e674:	2300      	movs	r3, #0
 800e676:	617b      	str	r3, [r7, #20]
 800e678:	e037      	b.n	800e6ea <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	781b      	ldrb	r3, [r3, #0]
 800e67e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	3301      	adds	r3, #1
 800e684:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e686:	693b      	ldr	r3, [r7, #16]
 800e688:	3b01      	subs	r3, #1
 800e68a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	781b      	ldrb	r3, [r3, #0]
 800e690:	021a      	lsls	r2, r3, #8
 800e692:	68bb      	ldr	r3, [r7, #8]
 800e694:	4313      	orrs	r3, r2
 800e696:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	3301      	adds	r3, #1
 800e69c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e69e:	693b      	ldr	r3, [r7, #16]
 800e6a0:	3b01      	subs	r3, #1
 800e6a2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	781b      	ldrb	r3, [r3, #0]
 800e6a8:	041a      	lsls	r2, r3, #16
 800e6aa:	68bb      	ldr	r3, [r7, #8]
 800e6ac:	4313      	orrs	r3, r2
 800e6ae:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	3301      	adds	r3, #1
 800e6b4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e6b6:	693b      	ldr	r3, [r7, #16]
 800e6b8:	3b01      	subs	r3, #1
 800e6ba:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	781b      	ldrb	r3, [r3, #0]
 800e6c0:	061a      	lsls	r2, r3, #24
 800e6c2:	68bb      	ldr	r3, [r7, #8]
 800e6c4:	4313      	orrs	r3, r2
 800e6c6:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	3301      	adds	r3, #1
 800e6cc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e6ce:	693b      	ldr	r3, [r7, #16]
 800e6d0:	3b01      	subs	r3, #1
 800e6d2:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	f107 0208 	add.w	r2, r7, #8
 800e6dc:	4611      	mov	r1, r2
 800e6de:	4618      	mov	r0, r3
 800e6e0:	f002 f836 	bl	8010750 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800e6e4:	697b      	ldr	r3, [r7, #20]
 800e6e6:	3301      	adds	r3, #1
 800e6e8:	617b      	str	r3, [r7, #20]
 800e6ea:	697b      	ldr	r3, [r7, #20]
 800e6ec:	2b07      	cmp	r3, #7
 800e6ee:	d9c4      	bls.n	800e67a <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	68fa      	ldr	r2, [r7, #12]
 800e6f4:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	693a      	ldr	r2, [r7, #16]
 800e6fa:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800e6fc:	bf00      	nop
 800e6fe:	3718      	adds	r7, #24
 800e700:	46bd      	mov	sp, r7
 800e702:	bd80      	pop	{r7, pc}

0800e704 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e704:	b580      	push	{r7, lr}
 800e706:	b082      	sub	sp, #8
 800e708:	af00      	add	r7, sp, #0
 800e70a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d101      	bne.n	800e716 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e712:	2301      	movs	r3, #1
 800e714:	e056      	b.n	800e7c4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	2200      	movs	r2, #0
 800e71a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e722:	b2db      	uxtb	r3, r3
 800e724:	2b00      	cmp	r3, #0
 800e726:	d106      	bne.n	800e736 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	2200      	movs	r2, #0
 800e72c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e730:	6878      	ldr	r0, [r7, #4]
 800e732:	f7f8 fd95 	bl	8007260 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	2202      	movs	r2, #2
 800e73a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	681a      	ldr	r2, [r3, #0]
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e74c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	685a      	ldr	r2, [r3, #4]
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	689b      	ldr	r3, [r3, #8]
 800e756:	431a      	orrs	r2, r3
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	68db      	ldr	r3, [r3, #12]
 800e75c:	431a      	orrs	r2, r3
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	691b      	ldr	r3, [r3, #16]
 800e762:	431a      	orrs	r2, r3
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	695b      	ldr	r3, [r3, #20]
 800e768:	431a      	orrs	r2, r3
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	699b      	ldr	r3, [r3, #24]
 800e76e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e772:	431a      	orrs	r2, r3
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	69db      	ldr	r3, [r3, #28]
 800e778:	431a      	orrs	r2, r3
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	6a1b      	ldr	r3, [r3, #32]
 800e77e:	ea42 0103 	orr.w	r1, r2, r3
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	430a      	orrs	r2, r1
 800e78c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	699b      	ldr	r3, [r3, #24]
 800e792:	0c1b      	lsrs	r3, r3, #16
 800e794:	f003 0104 	and.w	r1, r3, #4
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	430a      	orrs	r2, r1
 800e7a2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	69da      	ldr	r2, [r3, #28]
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e7b2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	2200      	movs	r2, #0
 800e7b8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	2201      	movs	r2, #1
 800e7be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800e7c2:	2300      	movs	r3, #0
}
 800e7c4:	4618      	mov	r0, r3
 800e7c6:	3708      	adds	r7, #8
 800e7c8:	46bd      	mov	sp, r7
 800e7ca:	bd80      	pop	{r7, pc}

0800e7cc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e7cc:	b580      	push	{r7, lr}
 800e7ce:	b088      	sub	sp, #32
 800e7d0:	af00      	add	r7, sp, #0
 800e7d2:	60f8      	str	r0, [r7, #12]
 800e7d4:	60b9      	str	r1, [r7, #8]
 800e7d6:	603b      	str	r3, [r7, #0]
 800e7d8:	4613      	mov	r3, r2
 800e7da:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e7dc:	2300      	movs	r3, #0
 800e7de:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e7e6:	2b01      	cmp	r3, #1
 800e7e8:	d101      	bne.n	800e7ee <HAL_SPI_Transmit+0x22>
 800e7ea:	2302      	movs	r3, #2
 800e7ec:	e11e      	b.n	800ea2c <HAL_SPI_Transmit+0x260>
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	2201      	movs	r2, #1
 800e7f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e7f6:	f7fb fb7f 	bl	8009ef8 <HAL_GetTick>
 800e7fa:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800e7fc:	88fb      	ldrh	r3, [r7, #6]
 800e7fe:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e806:	b2db      	uxtb	r3, r3
 800e808:	2b01      	cmp	r3, #1
 800e80a:	d002      	beq.n	800e812 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800e80c:	2302      	movs	r3, #2
 800e80e:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e810:	e103      	b.n	800ea1a <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800e812:	68bb      	ldr	r3, [r7, #8]
 800e814:	2b00      	cmp	r3, #0
 800e816:	d002      	beq.n	800e81e <HAL_SPI_Transmit+0x52>
 800e818:	88fb      	ldrh	r3, [r7, #6]
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d102      	bne.n	800e824 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800e81e:	2301      	movs	r3, #1
 800e820:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e822:	e0fa      	b.n	800ea1a <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	2203      	movs	r2, #3
 800e828:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	2200      	movs	r2, #0
 800e830:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	68ba      	ldr	r2, [r7, #8]
 800e836:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	88fa      	ldrh	r2, [r7, #6]
 800e83c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	88fa      	ldrh	r2, [r7, #6]
 800e842:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	2200      	movs	r2, #0
 800e848:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	2200      	movs	r2, #0
 800e84e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	2200      	movs	r2, #0
 800e854:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	2200      	movs	r2, #0
 800e85a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	2200      	movs	r2, #0
 800e860:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	689b      	ldr	r3, [r3, #8]
 800e866:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e86a:	d107      	bne.n	800e87c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	681a      	ldr	r2, [r3, #0]
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e87a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e886:	2b40      	cmp	r3, #64	; 0x40
 800e888:	d007      	beq.n	800e89a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	681a      	ldr	r2, [r3, #0]
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e898:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	68db      	ldr	r3, [r3, #12]
 800e89e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e8a2:	d14b      	bne.n	800e93c <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	685b      	ldr	r3, [r3, #4]
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d002      	beq.n	800e8b2 <HAL_SPI_Transmit+0xe6>
 800e8ac:	8afb      	ldrh	r3, [r7, #22]
 800e8ae:	2b01      	cmp	r3, #1
 800e8b0:	d13e      	bne.n	800e930 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8b6:	881a      	ldrh	r2, [r3, #0]
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8c2:	1c9a      	adds	r2, r3, #2
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e8cc:	b29b      	uxth	r3, r3
 800e8ce:	3b01      	subs	r3, #1
 800e8d0:	b29a      	uxth	r2, r3
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800e8d6:	e02b      	b.n	800e930 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	689b      	ldr	r3, [r3, #8]
 800e8de:	f003 0302 	and.w	r3, r3, #2
 800e8e2:	2b02      	cmp	r3, #2
 800e8e4:	d112      	bne.n	800e90c <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8ea:	881a      	ldrh	r2, [r3, #0]
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8f6:	1c9a      	adds	r2, r3, #2
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e900:	b29b      	uxth	r3, r3
 800e902:	3b01      	subs	r3, #1
 800e904:	b29a      	uxth	r2, r3
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	86da      	strh	r2, [r3, #54]	; 0x36
 800e90a:	e011      	b.n	800e930 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e90c:	f7fb faf4 	bl	8009ef8 <HAL_GetTick>
 800e910:	4602      	mov	r2, r0
 800e912:	69bb      	ldr	r3, [r7, #24]
 800e914:	1ad3      	subs	r3, r2, r3
 800e916:	683a      	ldr	r2, [r7, #0]
 800e918:	429a      	cmp	r2, r3
 800e91a:	d803      	bhi.n	800e924 <HAL_SPI_Transmit+0x158>
 800e91c:	683b      	ldr	r3, [r7, #0]
 800e91e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e922:	d102      	bne.n	800e92a <HAL_SPI_Transmit+0x15e>
 800e924:	683b      	ldr	r3, [r7, #0]
 800e926:	2b00      	cmp	r3, #0
 800e928:	d102      	bne.n	800e930 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800e92a:	2303      	movs	r3, #3
 800e92c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e92e:	e074      	b.n	800ea1a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e934:	b29b      	uxth	r3, r3
 800e936:	2b00      	cmp	r3, #0
 800e938:	d1ce      	bne.n	800e8d8 <HAL_SPI_Transmit+0x10c>
 800e93a:	e04c      	b.n	800e9d6 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	685b      	ldr	r3, [r3, #4]
 800e940:	2b00      	cmp	r3, #0
 800e942:	d002      	beq.n	800e94a <HAL_SPI_Transmit+0x17e>
 800e944:	8afb      	ldrh	r3, [r7, #22]
 800e946:	2b01      	cmp	r3, #1
 800e948:	d140      	bne.n	800e9cc <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	330c      	adds	r3, #12
 800e954:	7812      	ldrb	r2, [r2, #0]
 800e956:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e95c:	1c5a      	adds	r2, r3, #1
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e966:	b29b      	uxth	r3, r3
 800e968:	3b01      	subs	r3, #1
 800e96a:	b29a      	uxth	r2, r3
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800e970:	e02c      	b.n	800e9cc <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	689b      	ldr	r3, [r3, #8]
 800e978:	f003 0302 	and.w	r3, r3, #2
 800e97c:	2b02      	cmp	r3, #2
 800e97e:	d113      	bne.n	800e9a8 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	330c      	adds	r3, #12
 800e98a:	7812      	ldrb	r2, [r2, #0]
 800e98c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e992:	1c5a      	adds	r2, r3, #1
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e99c:	b29b      	uxth	r3, r3
 800e99e:	3b01      	subs	r3, #1
 800e9a0:	b29a      	uxth	r2, r3
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	86da      	strh	r2, [r3, #54]	; 0x36
 800e9a6:	e011      	b.n	800e9cc <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e9a8:	f7fb faa6 	bl	8009ef8 <HAL_GetTick>
 800e9ac:	4602      	mov	r2, r0
 800e9ae:	69bb      	ldr	r3, [r7, #24]
 800e9b0:	1ad3      	subs	r3, r2, r3
 800e9b2:	683a      	ldr	r2, [r7, #0]
 800e9b4:	429a      	cmp	r2, r3
 800e9b6:	d803      	bhi.n	800e9c0 <HAL_SPI_Transmit+0x1f4>
 800e9b8:	683b      	ldr	r3, [r7, #0]
 800e9ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9be:	d102      	bne.n	800e9c6 <HAL_SPI_Transmit+0x1fa>
 800e9c0:	683b      	ldr	r3, [r7, #0]
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d102      	bne.n	800e9cc <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800e9c6:	2303      	movs	r3, #3
 800e9c8:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e9ca:	e026      	b.n	800ea1a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e9d0:	b29b      	uxth	r3, r3
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d1cd      	bne.n	800e972 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e9d6:	69ba      	ldr	r2, [r7, #24]
 800e9d8:	6839      	ldr	r1, [r7, #0]
 800e9da:	68f8      	ldr	r0, [r7, #12]
 800e9dc:	f000 fba4 	bl	800f128 <SPI_EndRxTxTransaction>
 800e9e0:	4603      	mov	r3, r0
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d002      	beq.n	800e9ec <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	2220      	movs	r2, #32
 800e9ea:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	689b      	ldr	r3, [r3, #8]
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d10a      	bne.n	800ea0a <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e9f4:	2300      	movs	r3, #0
 800e9f6:	613b      	str	r3, [r7, #16]
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	68db      	ldr	r3, [r3, #12]
 800e9fe:	613b      	str	r3, [r7, #16]
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	689b      	ldr	r3, [r3, #8]
 800ea06:	613b      	str	r3, [r7, #16]
 800ea08:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d002      	beq.n	800ea18 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800ea12:	2301      	movs	r3, #1
 800ea14:	77fb      	strb	r3, [r7, #31]
 800ea16:	e000      	b.n	800ea1a <HAL_SPI_Transmit+0x24e>
  }

error:
 800ea18:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	2201      	movs	r2, #1
 800ea1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	2200      	movs	r2, #0
 800ea26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ea2a:	7ffb      	ldrb	r3, [r7, #31]
}
 800ea2c:	4618      	mov	r0, r3
 800ea2e:	3720      	adds	r7, #32
 800ea30:	46bd      	mov	sp, r7
 800ea32:	bd80      	pop	{r7, pc}

0800ea34 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ea34:	b580      	push	{r7, lr}
 800ea36:	b088      	sub	sp, #32
 800ea38:	af02      	add	r7, sp, #8
 800ea3a:	60f8      	str	r0, [r7, #12]
 800ea3c:	60b9      	str	r1, [r7, #8]
 800ea3e:	603b      	str	r3, [r7, #0]
 800ea40:	4613      	mov	r3, r2
 800ea42:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ea44:	2300      	movs	r3, #0
 800ea46:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	685b      	ldr	r3, [r3, #4]
 800ea4c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ea50:	d112      	bne.n	800ea78 <HAL_SPI_Receive+0x44>
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	689b      	ldr	r3, [r3, #8]
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d10e      	bne.n	800ea78 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	2204      	movs	r2, #4
 800ea5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800ea62:	88fa      	ldrh	r2, [r7, #6]
 800ea64:	683b      	ldr	r3, [r7, #0]
 800ea66:	9300      	str	r3, [sp, #0]
 800ea68:	4613      	mov	r3, r2
 800ea6a:	68ba      	ldr	r2, [r7, #8]
 800ea6c:	68b9      	ldr	r1, [r7, #8]
 800ea6e:	68f8      	ldr	r0, [r7, #12]
 800ea70:	f000 f8e9 	bl	800ec46 <HAL_SPI_TransmitReceive>
 800ea74:	4603      	mov	r3, r0
 800ea76:	e0e2      	b.n	800ec3e <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ea7e:	2b01      	cmp	r3, #1
 800ea80:	d101      	bne.n	800ea86 <HAL_SPI_Receive+0x52>
 800ea82:	2302      	movs	r3, #2
 800ea84:	e0db      	b.n	800ec3e <HAL_SPI_Receive+0x20a>
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	2201      	movs	r2, #1
 800ea8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ea8e:	f7fb fa33 	bl	8009ef8 <HAL_GetTick>
 800ea92:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ea9a:	b2db      	uxtb	r3, r3
 800ea9c:	2b01      	cmp	r3, #1
 800ea9e:	d002      	beq.n	800eaa6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800eaa0:	2302      	movs	r3, #2
 800eaa2:	75fb      	strb	r3, [r7, #23]
    goto error;
 800eaa4:	e0c2      	b.n	800ec2c <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800eaa6:	68bb      	ldr	r3, [r7, #8]
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d002      	beq.n	800eab2 <HAL_SPI_Receive+0x7e>
 800eaac:	88fb      	ldrh	r3, [r7, #6]
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d102      	bne.n	800eab8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800eab2:	2301      	movs	r3, #1
 800eab4:	75fb      	strb	r3, [r7, #23]
    goto error;
 800eab6:	e0b9      	b.n	800ec2c <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	2204      	movs	r2, #4
 800eabc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	2200      	movs	r2, #0
 800eac4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	68ba      	ldr	r2, [r7, #8]
 800eaca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	88fa      	ldrh	r2, [r7, #6]
 800ead0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	88fa      	ldrh	r2, [r7, #6]
 800ead6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	2200      	movs	r2, #0
 800eadc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	2200      	movs	r2, #0
 800eae2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	2200      	movs	r2, #0
 800eae8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	2200      	movs	r2, #0
 800eaee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	2200      	movs	r2, #0
 800eaf4:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	689b      	ldr	r3, [r3, #8]
 800eafa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eafe:	d107      	bne.n	800eb10 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	681a      	ldr	r2, [r3, #0]
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800eb0e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb1a:	2b40      	cmp	r3, #64	; 0x40
 800eb1c:	d007      	beq.n	800eb2e <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	681a      	ldr	r2, [r3, #0]
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800eb2c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	68db      	ldr	r3, [r3, #12]
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d162      	bne.n	800ebfc <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800eb36:	e02e      	b.n	800eb96 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	689b      	ldr	r3, [r3, #8]
 800eb3e:	f003 0301 	and.w	r3, r3, #1
 800eb42:	2b01      	cmp	r3, #1
 800eb44:	d115      	bne.n	800eb72 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	f103 020c 	add.w	r2, r3, #12
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb52:	7812      	ldrb	r2, [r2, #0]
 800eb54:	b2d2      	uxtb	r2, r2
 800eb56:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb5c:	1c5a      	adds	r2, r3, #1
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eb66:	b29b      	uxth	r3, r3
 800eb68:	3b01      	subs	r3, #1
 800eb6a:	b29a      	uxth	r2, r3
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800eb70:	e011      	b.n	800eb96 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800eb72:	f7fb f9c1 	bl	8009ef8 <HAL_GetTick>
 800eb76:	4602      	mov	r2, r0
 800eb78:	693b      	ldr	r3, [r7, #16]
 800eb7a:	1ad3      	subs	r3, r2, r3
 800eb7c:	683a      	ldr	r2, [r7, #0]
 800eb7e:	429a      	cmp	r2, r3
 800eb80:	d803      	bhi.n	800eb8a <HAL_SPI_Receive+0x156>
 800eb82:	683b      	ldr	r3, [r7, #0]
 800eb84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb88:	d102      	bne.n	800eb90 <HAL_SPI_Receive+0x15c>
 800eb8a:	683b      	ldr	r3, [r7, #0]
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d102      	bne.n	800eb96 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800eb90:	2303      	movs	r3, #3
 800eb92:	75fb      	strb	r3, [r7, #23]
          goto error;
 800eb94:	e04a      	b.n	800ec2c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eb9a:	b29b      	uxth	r3, r3
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d1cb      	bne.n	800eb38 <HAL_SPI_Receive+0x104>
 800eba0:	e031      	b.n	800ec06 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	689b      	ldr	r3, [r3, #8]
 800eba8:	f003 0301 	and.w	r3, r3, #1
 800ebac:	2b01      	cmp	r3, #1
 800ebae:	d113      	bne.n	800ebd8 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	68da      	ldr	r2, [r3, #12]
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebba:	b292      	uxth	r2, r2
 800ebbc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebc2:	1c9a      	adds	r2, r3, #2
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ebcc:	b29b      	uxth	r3, r3
 800ebce:	3b01      	subs	r3, #1
 800ebd0:	b29a      	uxth	r2, r3
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ebd6:	e011      	b.n	800ebfc <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ebd8:	f7fb f98e 	bl	8009ef8 <HAL_GetTick>
 800ebdc:	4602      	mov	r2, r0
 800ebde:	693b      	ldr	r3, [r7, #16]
 800ebe0:	1ad3      	subs	r3, r2, r3
 800ebe2:	683a      	ldr	r2, [r7, #0]
 800ebe4:	429a      	cmp	r2, r3
 800ebe6:	d803      	bhi.n	800ebf0 <HAL_SPI_Receive+0x1bc>
 800ebe8:	683b      	ldr	r3, [r7, #0]
 800ebea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebee:	d102      	bne.n	800ebf6 <HAL_SPI_Receive+0x1c2>
 800ebf0:	683b      	ldr	r3, [r7, #0]
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d102      	bne.n	800ebfc <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800ebf6:	2303      	movs	r3, #3
 800ebf8:	75fb      	strb	r3, [r7, #23]
          goto error;
 800ebfa:	e017      	b.n	800ec2c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ec00:	b29b      	uxth	r3, r3
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d1cd      	bne.n	800eba2 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ec06:	693a      	ldr	r2, [r7, #16]
 800ec08:	6839      	ldr	r1, [r7, #0]
 800ec0a:	68f8      	ldr	r0, [r7, #12]
 800ec0c:	f000 fa27 	bl	800f05e <SPI_EndRxTransaction>
 800ec10:	4603      	mov	r3, r0
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d002      	beq.n	800ec1c <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	2220      	movs	r2, #32
 800ec1a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d002      	beq.n	800ec2a <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800ec24:	2301      	movs	r3, #1
 800ec26:	75fb      	strb	r3, [r7, #23]
 800ec28:	e000      	b.n	800ec2c <HAL_SPI_Receive+0x1f8>
  }

error :
 800ec2a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	2201      	movs	r2, #1
 800ec30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	2200      	movs	r2, #0
 800ec38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ec3c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec3e:	4618      	mov	r0, r3
 800ec40:	3718      	adds	r7, #24
 800ec42:	46bd      	mov	sp, r7
 800ec44:	bd80      	pop	{r7, pc}

0800ec46 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800ec46:	b580      	push	{r7, lr}
 800ec48:	b08c      	sub	sp, #48	; 0x30
 800ec4a:	af00      	add	r7, sp, #0
 800ec4c:	60f8      	str	r0, [r7, #12]
 800ec4e:	60b9      	str	r1, [r7, #8]
 800ec50:	607a      	str	r2, [r7, #4]
 800ec52:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800ec54:	2301      	movs	r3, #1
 800ec56:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800ec58:	2300      	movs	r3, #0
 800ec5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ec64:	2b01      	cmp	r3, #1
 800ec66:	d101      	bne.n	800ec6c <HAL_SPI_TransmitReceive+0x26>
 800ec68:	2302      	movs	r3, #2
 800ec6a:	e18a      	b.n	800ef82 <HAL_SPI_TransmitReceive+0x33c>
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	2201      	movs	r2, #1
 800ec70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ec74:	f7fb f940 	bl	8009ef8 <HAL_GetTick>
 800ec78:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ec80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	685b      	ldr	r3, [r3, #4]
 800ec88:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800ec8a:	887b      	ldrh	r3, [r7, #2]
 800ec8c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800ec8e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ec92:	2b01      	cmp	r3, #1
 800ec94:	d00f      	beq.n	800ecb6 <HAL_SPI_TransmitReceive+0x70>
 800ec96:	69fb      	ldr	r3, [r7, #28]
 800ec98:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ec9c:	d107      	bne.n	800ecae <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	689b      	ldr	r3, [r3, #8]
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d103      	bne.n	800ecae <HAL_SPI_TransmitReceive+0x68>
 800eca6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ecaa:	2b04      	cmp	r3, #4
 800ecac:	d003      	beq.n	800ecb6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800ecae:	2302      	movs	r3, #2
 800ecb0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800ecb4:	e15b      	b.n	800ef6e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800ecb6:	68bb      	ldr	r3, [r7, #8]
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d005      	beq.n	800ecc8 <HAL_SPI_TransmitReceive+0x82>
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d002      	beq.n	800ecc8 <HAL_SPI_TransmitReceive+0x82>
 800ecc2:	887b      	ldrh	r3, [r7, #2]
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d103      	bne.n	800ecd0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800ecc8:	2301      	movs	r3, #1
 800ecca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800ecce:	e14e      	b.n	800ef6e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ecd6:	b2db      	uxtb	r3, r3
 800ecd8:	2b04      	cmp	r3, #4
 800ecda:	d003      	beq.n	800ece4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	2205      	movs	r2, #5
 800ece0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	2200      	movs	r2, #0
 800ece8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	687a      	ldr	r2, [r7, #4]
 800ecee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	887a      	ldrh	r2, [r7, #2]
 800ecf4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	887a      	ldrh	r2, [r7, #2]
 800ecfa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	68ba      	ldr	r2, [r7, #8]
 800ed00:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	887a      	ldrh	r2, [r7, #2]
 800ed06:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	887a      	ldrh	r2, [r7, #2]
 800ed0c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	2200      	movs	r2, #0
 800ed12:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	2200      	movs	r2, #0
 800ed18:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed24:	2b40      	cmp	r3, #64	; 0x40
 800ed26:	d007      	beq.n	800ed38 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	681a      	ldr	r2, [r3, #0]
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ed36:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	68db      	ldr	r3, [r3, #12]
 800ed3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ed40:	d178      	bne.n	800ee34 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	685b      	ldr	r3, [r3, #4]
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d002      	beq.n	800ed50 <HAL_SPI_TransmitReceive+0x10a>
 800ed4a:	8b7b      	ldrh	r3, [r7, #26]
 800ed4c:	2b01      	cmp	r3, #1
 800ed4e:	d166      	bne.n	800ee1e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed54:	881a      	ldrh	r2, [r3, #0]
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed60:	1c9a      	adds	r2, r3, #2
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ed6a:	b29b      	uxth	r3, r3
 800ed6c:	3b01      	subs	r3, #1
 800ed6e:	b29a      	uxth	r2, r3
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ed74:	e053      	b.n	800ee1e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	689b      	ldr	r3, [r3, #8]
 800ed7c:	f003 0302 	and.w	r3, r3, #2
 800ed80:	2b02      	cmp	r3, #2
 800ed82:	d11b      	bne.n	800edbc <HAL_SPI_TransmitReceive+0x176>
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ed88:	b29b      	uxth	r3, r3
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d016      	beq.n	800edbc <HAL_SPI_TransmitReceive+0x176>
 800ed8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed90:	2b01      	cmp	r3, #1
 800ed92:	d113      	bne.n	800edbc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed98:	881a      	ldrh	r2, [r3, #0]
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eda4:	1c9a      	adds	r2, r3, #2
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800edae:	b29b      	uxth	r3, r3
 800edb0:	3b01      	subs	r3, #1
 800edb2:	b29a      	uxth	r2, r3
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800edb8:	2300      	movs	r3, #0
 800edba:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	689b      	ldr	r3, [r3, #8]
 800edc2:	f003 0301 	and.w	r3, r3, #1
 800edc6:	2b01      	cmp	r3, #1
 800edc8:	d119      	bne.n	800edfe <HAL_SPI_TransmitReceive+0x1b8>
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800edce:	b29b      	uxth	r3, r3
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d014      	beq.n	800edfe <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	68da      	ldr	r2, [r3, #12]
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800edde:	b292      	uxth	r2, r2
 800ede0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ede6:	1c9a      	adds	r2, r3, #2
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800edf0:	b29b      	uxth	r3, r3
 800edf2:	3b01      	subs	r3, #1
 800edf4:	b29a      	uxth	r2, r3
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800edfa:	2301      	movs	r3, #1
 800edfc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800edfe:	f7fb f87b 	bl	8009ef8 <HAL_GetTick>
 800ee02:	4602      	mov	r2, r0
 800ee04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee06:	1ad3      	subs	r3, r2, r3
 800ee08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ee0a:	429a      	cmp	r2, r3
 800ee0c:	d807      	bhi.n	800ee1e <HAL_SPI_TransmitReceive+0x1d8>
 800ee0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee14:	d003      	beq.n	800ee1e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800ee16:	2303      	movs	r3, #3
 800ee18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800ee1c:	e0a7      	b.n	800ef6e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ee22:	b29b      	uxth	r3, r3
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d1a6      	bne.n	800ed76 <HAL_SPI_TransmitReceive+0x130>
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ee2c:	b29b      	uxth	r3, r3
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d1a1      	bne.n	800ed76 <HAL_SPI_TransmitReceive+0x130>
 800ee32:	e07c      	b.n	800ef2e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	685b      	ldr	r3, [r3, #4]
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d002      	beq.n	800ee42 <HAL_SPI_TransmitReceive+0x1fc>
 800ee3c:	8b7b      	ldrh	r3, [r7, #26]
 800ee3e:	2b01      	cmp	r3, #1
 800ee40:	d16b      	bne.n	800ef1a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	330c      	adds	r3, #12
 800ee4c:	7812      	ldrb	r2, [r2, #0]
 800ee4e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee54:	1c5a      	adds	r2, r3, #1
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ee5e:	b29b      	uxth	r3, r3
 800ee60:	3b01      	subs	r3, #1
 800ee62:	b29a      	uxth	r2, r3
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ee68:	e057      	b.n	800ef1a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	689b      	ldr	r3, [r3, #8]
 800ee70:	f003 0302 	and.w	r3, r3, #2
 800ee74:	2b02      	cmp	r3, #2
 800ee76:	d11c      	bne.n	800eeb2 <HAL_SPI_TransmitReceive+0x26c>
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ee7c:	b29b      	uxth	r3, r3
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d017      	beq.n	800eeb2 <HAL_SPI_TransmitReceive+0x26c>
 800ee82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee84:	2b01      	cmp	r3, #1
 800ee86:	d114      	bne.n	800eeb2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	330c      	adds	r3, #12
 800ee92:	7812      	ldrb	r2, [r2, #0]
 800ee94:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee9a:	1c5a      	adds	r2, r3, #1
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800eea4:	b29b      	uxth	r3, r3
 800eea6:	3b01      	subs	r3, #1
 800eea8:	b29a      	uxth	r2, r3
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800eeae:	2300      	movs	r3, #0
 800eeb0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800eeb2:	68fb      	ldr	r3, [r7, #12]
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	689b      	ldr	r3, [r3, #8]
 800eeb8:	f003 0301 	and.w	r3, r3, #1
 800eebc:	2b01      	cmp	r3, #1
 800eebe:	d119      	bne.n	800eef4 <HAL_SPI_TransmitReceive+0x2ae>
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eec4:	b29b      	uxth	r3, r3
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d014      	beq.n	800eef4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	68da      	ldr	r2, [r3, #12]
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eed4:	b2d2      	uxtb	r2, r2
 800eed6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eedc:	1c5a      	adds	r2, r3, #1
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eee6:	b29b      	uxth	r3, r3
 800eee8:	3b01      	subs	r3, #1
 800eeea:	b29a      	uxth	r2, r3
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800eef0:	2301      	movs	r3, #1
 800eef2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800eef4:	f7fb f800 	bl	8009ef8 <HAL_GetTick>
 800eef8:	4602      	mov	r2, r0
 800eefa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eefc:	1ad3      	subs	r3, r2, r3
 800eefe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ef00:	429a      	cmp	r2, r3
 800ef02:	d803      	bhi.n	800ef0c <HAL_SPI_TransmitReceive+0x2c6>
 800ef04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef0a:	d102      	bne.n	800ef12 <HAL_SPI_TransmitReceive+0x2cc>
 800ef0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d103      	bne.n	800ef1a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800ef12:	2303      	movs	r3, #3
 800ef14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800ef18:	e029      	b.n	800ef6e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ef1e:	b29b      	uxth	r3, r3
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d1a2      	bne.n	800ee6a <HAL_SPI_TransmitReceive+0x224>
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ef28:	b29b      	uxth	r3, r3
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d19d      	bne.n	800ee6a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ef2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef30:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ef32:	68f8      	ldr	r0, [r7, #12]
 800ef34:	f000 f8f8 	bl	800f128 <SPI_EndRxTxTransaction>
 800ef38:	4603      	mov	r3, r0
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d006      	beq.n	800ef4c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800ef3e:	2301      	movs	r3, #1
 800ef40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	2220      	movs	r2, #32
 800ef48:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800ef4a:	e010      	b.n	800ef6e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	689b      	ldr	r3, [r3, #8]
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d10b      	bne.n	800ef6c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ef54:	2300      	movs	r3, #0
 800ef56:	617b      	str	r3, [r7, #20]
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	68db      	ldr	r3, [r3, #12]
 800ef5e:	617b      	str	r3, [r7, #20]
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	689b      	ldr	r3, [r3, #8]
 800ef66:	617b      	str	r3, [r7, #20]
 800ef68:	697b      	ldr	r3, [r7, #20]
 800ef6a:	e000      	b.n	800ef6e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800ef6c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	2201      	movs	r2, #1
 800ef72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	2200      	movs	r2, #0
 800ef7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ef7e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800ef82:	4618      	mov	r0, r3
 800ef84:	3730      	adds	r7, #48	; 0x30
 800ef86:	46bd      	mov	sp, r7
 800ef88:	bd80      	pop	{r7, pc}

0800ef8a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ef8a:	b580      	push	{r7, lr}
 800ef8c:	b084      	sub	sp, #16
 800ef8e:	af00      	add	r7, sp, #0
 800ef90:	60f8      	str	r0, [r7, #12]
 800ef92:	60b9      	str	r1, [r7, #8]
 800ef94:	603b      	str	r3, [r7, #0]
 800ef96:	4613      	mov	r3, r2
 800ef98:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ef9a:	e04c      	b.n	800f036 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ef9c:	683b      	ldr	r3, [r7, #0]
 800ef9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efa2:	d048      	beq.n	800f036 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800efa4:	f7fa ffa8 	bl	8009ef8 <HAL_GetTick>
 800efa8:	4602      	mov	r2, r0
 800efaa:	69bb      	ldr	r3, [r7, #24]
 800efac:	1ad3      	subs	r3, r2, r3
 800efae:	683a      	ldr	r2, [r7, #0]
 800efb0:	429a      	cmp	r2, r3
 800efb2:	d902      	bls.n	800efba <SPI_WaitFlagStateUntilTimeout+0x30>
 800efb4:	683b      	ldr	r3, [r7, #0]
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d13d      	bne.n	800f036 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	685a      	ldr	r2, [r3, #4]
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800efc8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	685b      	ldr	r3, [r3, #4]
 800efce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800efd2:	d111      	bne.n	800eff8 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	689b      	ldr	r3, [r3, #8]
 800efd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800efdc:	d004      	beq.n	800efe8 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	689b      	ldr	r3, [r3, #8]
 800efe2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800efe6:	d107      	bne.n	800eff8 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	681a      	ldr	r2, [r3, #0]
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800eff6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800effc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f000:	d10f      	bne.n	800f022 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	681a      	ldr	r2, [r3, #0]
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f010:	601a      	str	r2, [r3, #0]
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	681a      	ldr	r2, [r3, #0]
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f020:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	2201      	movs	r2, #1
 800f026:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	2200      	movs	r2, #0
 800f02e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800f032:	2303      	movs	r3, #3
 800f034:	e00f      	b.n	800f056 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	689a      	ldr	r2, [r3, #8]
 800f03c:	68bb      	ldr	r3, [r7, #8]
 800f03e:	4013      	ands	r3, r2
 800f040:	68ba      	ldr	r2, [r7, #8]
 800f042:	429a      	cmp	r2, r3
 800f044:	bf0c      	ite	eq
 800f046:	2301      	moveq	r3, #1
 800f048:	2300      	movne	r3, #0
 800f04a:	b2db      	uxtb	r3, r3
 800f04c:	461a      	mov	r2, r3
 800f04e:	79fb      	ldrb	r3, [r7, #7]
 800f050:	429a      	cmp	r2, r3
 800f052:	d1a3      	bne.n	800ef9c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800f054:	2300      	movs	r3, #0
}
 800f056:	4618      	mov	r0, r3
 800f058:	3710      	adds	r7, #16
 800f05a:	46bd      	mov	sp, r7
 800f05c:	bd80      	pop	{r7, pc}

0800f05e <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800f05e:	b580      	push	{r7, lr}
 800f060:	b086      	sub	sp, #24
 800f062:	af02      	add	r7, sp, #8
 800f064:	60f8      	str	r0, [r7, #12]
 800f066:	60b9      	str	r1, [r7, #8]
 800f068:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	685b      	ldr	r3, [r3, #4]
 800f06e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f072:	d111      	bne.n	800f098 <SPI_EndRxTransaction+0x3a>
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	689b      	ldr	r3, [r3, #8]
 800f078:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f07c:	d004      	beq.n	800f088 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	689b      	ldr	r3, [r3, #8]
 800f082:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f086:	d107      	bne.n	800f098 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	681a      	ldr	r2, [r3, #0]
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f096:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	685b      	ldr	r3, [r3, #4]
 800f09c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f0a0:	d12a      	bne.n	800f0f8 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	689b      	ldr	r3, [r3, #8]
 800f0a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f0aa:	d012      	beq.n	800f0d2 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	9300      	str	r3, [sp, #0]
 800f0b0:	68bb      	ldr	r3, [r7, #8]
 800f0b2:	2200      	movs	r2, #0
 800f0b4:	2180      	movs	r1, #128	; 0x80
 800f0b6:	68f8      	ldr	r0, [r7, #12]
 800f0b8:	f7ff ff67 	bl	800ef8a <SPI_WaitFlagStateUntilTimeout>
 800f0bc:	4603      	mov	r3, r0
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d02d      	beq.n	800f11e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f0c6:	f043 0220 	orr.w	r2, r3, #32
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800f0ce:	2303      	movs	r3, #3
 800f0d0:	e026      	b.n	800f120 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	9300      	str	r3, [sp, #0]
 800f0d6:	68bb      	ldr	r3, [r7, #8]
 800f0d8:	2200      	movs	r2, #0
 800f0da:	2101      	movs	r1, #1
 800f0dc:	68f8      	ldr	r0, [r7, #12]
 800f0de:	f7ff ff54 	bl	800ef8a <SPI_WaitFlagStateUntilTimeout>
 800f0e2:	4603      	mov	r3, r0
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d01a      	beq.n	800f11e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f0ec:	f043 0220 	orr.w	r2, r3, #32
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800f0f4:	2303      	movs	r3, #3
 800f0f6:	e013      	b.n	800f120 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	9300      	str	r3, [sp, #0]
 800f0fc:	68bb      	ldr	r3, [r7, #8]
 800f0fe:	2200      	movs	r2, #0
 800f100:	2101      	movs	r1, #1
 800f102:	68f8      	ldr	r0, [r7, #12]
 800f104:	f7ff ff41 	bl	800ef8a <SPI_WaitFlagStateUntilTimeout>
 800f108:	4603      	mov	r3, r0
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d007      	beq.n	800f11e <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f112:	f043 0220 	orr.w	r2, r3, #32
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800f11a:	2303      	movs	r3, #3
 800f11c:	e000      	b.n	800f120 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800f11e:	2300      	movs	r3, #0
}
 800f120:	4618      	mov	r0, r3
 800f122:	3710      	adds	r7, #16
 800f124:	46bd      	mov	sp, r7
 800f126:	bd80      	pop	{r7, pc}

0800f128 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800f128:	b580      	push	{r7, lr}
 800f12a:	b088      	sub	sp, #32
 800f12c:	af02      	add	r7, sp, #8
 800f12e:	60f8      	str	r0, [r7, #12]
 800f130:	60b9      	str	r1, [r7, #8]
 800f132:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800f134:	4b1b      	ldr	r3, [pc, #108]	; (800f1a4 <SPI_EndRxTxTransaction+0x7c>)
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	4a1b      	ldr	r2, [pc, #108]	; (800f1a8 <SPI_EndRxTxTransaction+0x80>)
 800f13a:	fba2 2303 	umull	r2, r3, r2, r3
 800f13e:	0d5b      	lsrs	r3, r3, #21
 800f140:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f144:	fb02 f303 	mul.w	r3, r2, r3
 800f148:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	685b      	ldr	r3, [r3, #4]
 800f14e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f152:	d112      	bne.n	800f17a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	9300      	str	r3, [sp, #0]
 800f158:	68bb      	ldr	r3, [r7, #8]
 800f15a:	2200      	movs	r2, #0
 800f15c:	2180      	movs	r1, #128	; 0x80
 800f15e:	68f8      	ldr	r0, [r7, #12]
 800f160:	f7ff ff13 	bl	800ef8a <SPI_WaitFlagStateUntilTimeout>
 800f164:	4603      	mov	r3, r0
 800f166:	2b00      	cmp	r3, #0
 800f168:	d016      	beq.n	800f198 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f16e:	f043 0220 	orr.w	r2, r3, #32
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800f176:	2303      	movs	r3, #3
 800f178:	e00f      	b.n	800f19a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800f17a:	697b      	ldr	r3, [r7, #20]
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d00a      	beq.n	800f196 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800f180:	697b      	ldr	r3, [r7, #20]
 800f182:	3b01      	subs	r3, #1
 800f184:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	689b      	ldr	r3, [r3, #8]
 800f18c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f190:	2b80      	cmp	r3, #128	; 0x80
 800f192:	d0f2      	beq.n	800f17a <SPI_EndRxTxTransaction+0x52>
 800f194:	e000      	b.n	800f198 <SPI_EndRxTxTransaction+0x70>
        break;
 800f196:	bf00      	nop
  }

  return HAL_OK;
 800f198:	2300      	movs	r3, #0
}
 800f19a:	4618      	mov	r0, r3
 800f19c:	3718      	adds	r7, #24
 800f19e:	46bd      	mov	sp, r7
 800f1a0:	bd80      	pop	{r7, pc}
 800f1a2:	bf00      	nop
 800f1a4:	20000000 	.word	0x20000000
 800f1a8:	165e9f81 	.word	0x165e9f81

0800f1ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f1ac:	b580      	push	{r7, lr}
 800f1ae:	b082      	sub	sp, #8
 800f1b0:	af00      	add	r7, sp, #0
 800f1b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d101      	bne.n	800f1be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f1ba:	2301      	movs	r3, #1
 800f1bc:	e01d      	b.n	800f1fa <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f1c4:	b2db      	uxtb	r3, r3
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d106      	bne.n	800f1d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	2200      	movs	r2, #0
 800f1ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f1d2:	6878      	ldr	r0, [r7, #4]
 800f1d4:	f7f8 f900 	bl	80073d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	2202      	movs	r2, #2
 800f1dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	681a      	ldr	r2, [r3, #0]
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	3304      	adds	r3, #4
 800f1e8:	4619      	mov	r1, r3
 800f1ea:	4610      	mov	r0, r2
 800f1ec:	f000 fb56 	bl	800f89c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	2201      	movs	r2, #1
 800f1f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f1f8:	2300      	movs	r3, #0
}
 800f1fa:	4618      	mov	r0, r3
 800f1fc:	3708      	adds	r7, #8
 800f1fe:	46bd      	mov	sp, r7
 800f200:	bd80      	pop	{r7, pc}

0800f202 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800f202:	b480      	push	{r7}
 800f204:	b085      	sub	sp, #20
 800f206:	af00      	add	r7, sp, #0
 800f208:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	68da      	ldr	r2, [r3, #12]
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	f042 0201 	orr.w	r2, r2, #1
 800f218:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	689b      	ldr	r3, [r3, #8]
 800f220:	f003 0307 	and.w	r3, r3, #7
 800f224:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	2b06      	cmp	r3, #6
 800f22a:	d007      	beq.n	800f23c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	681a      	ldr	r2, [r3, #0]
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	f042 0201 	orr.w	r2, r2, #1
 800f23a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f23c:	2300      	movs	r3, #0
}
 800f23e:	4618      	mov	r0, r3
 800f240:	3714      	adds	r7, #20
 800f242:	46bd      	mov	sp, r7
 800f244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f248:	4770      	bx	lr

0800f24a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f24a:	b580      	push	{r7, lr}
 800f24c:	b082      	sub	sp, #8
 800f24e:	af00      	add	r7, sp, #0
 800f250:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	2b00      	cmp	r3, #0
 800f256:	d101      	bne.n	800f25c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f258:	2301      	movs	r3, #1
 800f25a:	e01d      	b.n	800f298 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f262:	b2db      	uxtb	r3, r3
 800f264:	2b00      	cmp	r3, #0
 800f266:	d106      	bne.n	800f276 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	2200      	movs	r2, #0
 800f26c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f270:	6878      	ldr	r0, [r7, #4]
 800f272:	f7f8 f83d 	bl	80072f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	2202      	movs	r2, #2
 800f27a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	681a      	ldr	r2, [r3, #0]
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	3304      	adds	r3, #4
 800f286:	4619      	mov	r1, r3
 800f288:	4610      	mov	r0, r2
 800f28a:	f000 fb07 	bl	800f89c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	2201      	movs	r2, #1
 800f292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f296:	2300      	movs	r3, #0
}
 800f298:	4618      	mov	r0, r3
 800f29a:	3708      	adds	r7, #8
 800f29c:	46bd      	mov	sp, r7
 800f29e:	bd80      	pop	{r7, pc}

0800f2a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f2a0:	b580      	push	{r7, lr}
 800f2a2:	b084      	sub	sp, #16
 800f2a4:	af00      	add	r7, sp, #0
 800f2a6:	6078      	str	r0, [r7, #4]
 800f2a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	2201      	movs	r2, #1
 800f2b0:	6839      	ldr	r1, [r7, #0]
 800f2b2:	4618      	mov	r0, r3
 800f2b4:	f000 fd42 	bl	800fd3c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	4a15      	ldr	r2, [pc, #84]	; (800f314 <HAL_TIM_PWM_Start+0x74>)
 800f2be:	4293      	cmp	r3, r2
 800f2c0:	d004      	beq.n	800f2cc <HAL_TIM_PWM_Start+0x2c>
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	4a14      	ldr	r2, [pc, #80]	; (800f318 <HAL_TIM_PWM_Start+0x78>)
 800f2c8:	4293      	cmp	r3, r2
 800f2ca:	d101      	bne.n	800f2d0 <HAL_TIM_PWM_Start+0x30>
 800f2cc:	2301      	movs	r3, #1
 800f2ce:	e000      	b.n	800f2d2 <HAL_TIM_PWM_Start+0x32>
 800f2d0:	2300      	movs	r3, #0
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d007      	beq.n	800f2e6 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f2e4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	689b      	ldr	r3, [r3, #8]
 800f2ec:	f003 0307 	and.w	r3, r3, #7
 800f2f0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	2b06      	cmp	r3, #6
 800f2f6:	d007      	beq.n	800f308 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	681a      	ldr	r2, [r3, #0]
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	f042 0201 	orr.w	r2, r2, #1
 800f306:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f308:	2300      	movs	r3, #0
}
 800f30a:	4618      	mov	r0, r3
 800f30c:	3710      	adds	r7, #16
 800f30e:	46bd      	mov	sp, r7
 800f310:	bd80      	pop	{r7, pc}
 800f312:	bf00      	nop
 800f314:	40010000 	.word	0x40010000
 800f318:	40010400 	.word	0x40010400

0800f31c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800f31c:	b580      	push	{r7, lr}
 800f31e:	b086      	sub	sp, #24
 800f320:	af00      	add	r7, sp, #0
 800f322:	6078      	str	r0, [r7, #4]
 800f324:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d101      	bne.n	800f330 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800f32c:	2301      	movs	r3, #1
 800f32e:	e083      	b.n	800f438 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f336:	b2db      	uxtb	r3, r3
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d106      	bne.n	800f34a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	2200      	movs	r2, #0
 800f340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800f344:	6878      	ldr	r0, [r7, #4]
 800f346:	f7f8 f8d7 	bl	80074f8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	2202      	movs	r2, #2
 800f34e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	689b      	ldr	r3, [r3, #8]
 800f358:	687a      	ldr	r2, [r7, #4]
 800f35a:	6812      	ldr	r2, [r2, #0]
 800f35c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f360:	f023 0307 	bic.w	r3, r3, #7
 800f364:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	681a      	ldr	r2, [r3, #0]
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	3304      	adds	r3, #4
 800f36e:	4619      	mov	r1, r3
 800f370:	4610      	mov	r0, r2
 800f372:	f000 fa93 	bl	800f89c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	689b      	ldr	r3, [r3, #8]
 800f37c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	699b      	ldr	r3, [r3, #24]
 800f384:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	6a1b      	ldr	r3, [r3, #32]
 800f38c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800f38e:	683b      	ldr	r3, [r7, #0]
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	697a      	ldr	r2, [r7, #20]
 800f394:	4313      	orrs	r3, r2
 800f396:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800f398:	693b      	ldr	r3, [r7, #16]
 800f39a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f39e:	f023 0303 	bic.w	r3, r3, #3
 800f3a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800f3a4:	683b      	ldr	r3, [r7, #0]
 800f3a6:	689a      	ldr	r2, [r3, #8]
 800f3a8:	683b      	ldr	r3, [r7, #0]
 800f3aa:	699b      	ldr	r3, [r3, #24]
 800f3ac:	021b      	lsls	r3, r3, #8
 800f3ae:	4313      	orrs	r3, r2
 800f3b0:	693a      	ldr	r2, [r7, #16]
 800f3b2:	4313      	orrs	r3, r2
 800f3b4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800f3b6:	693b      	ldr	r3, [r7, #16]
 800f3b8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800f3bc:	f023 030c 	bic.w	r3, r3, #12
 800f3c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800f3c2:	693b      	ldr	r3, [r7, #16]
 800f3c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f3c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f3cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800f3ce:	683b      	ldr	r3, [r7, #0]
 800f3d0:	68da      	ldr	r2, [r3, #12]
 800f3d2:	683b      	ldr	r3, [r7, #0]
 800f3d4:	69db      	ldr	r3, [r3, #28]
 800f3d6:	021b      	lsls	r3, r3, #8
 800f3d8:	4313      	orrs	r3, r2
 800f3da:	693a      	ldr	r2, [r7, #16]
 800f3dc:	4313      	orrs	r3, r2
 800f3de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800f3e0:	683b      	ldr	r3, [r7, #0]
 800f3e2:	691b      	ldr	r3, [r3, #16]
 800f3e4:	011a      	lsls	r2, r3, #4
 800f3e6:	683b      	ldr	r3, [r7, #0]
 800f3e8:	6a1b      	ldr	r3, [r3, #32]
 800f3ea:	031b      	lsls	r3, r3, #12
 800f3ec:	4313      	orrs	r3, r2
 800f3ee:	693a      	ldr	r2, [r7, #16]
 800f3f0:	4313      	orrs	r3, r2
 800f3f2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800f3fa:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800f402:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800f404:	683b      	ldr	r3, [r7, #0]
 800f406:	685a      	ldr	r2, [r3, #4]
 800f408:	683b      	ldr	r3, [r7, #0]
 800f40a:	695b      	ldr	r3, [r3, #20]
 800f40c:	011b      	lsls	r3, r3, #4
 800f40e:	4313      	orrs	r3, r2
 800f410:	68fa      	ldr	r2, [r7, #12]
 800f412:	4313      	orrs	r3, r2
 800f414:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	697a      	ldr	r2, [r7, #20]
 800f41c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	693a      	ldr	r2, [r7, #16]
 800f424:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	68fa      	ldr	r2, [r7, #12]
 800f42c:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	2201      	movs	r2, #1
 800f432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f436:	2300      	movs	r3, #0
}
 800f438:	4618      	mov	r0, r3
 800f43a:	3718      	adds	r7, #24
 800f43c:	46bd      	mov	sp, r7
 800f43e:	bd80      	pop	{r7, pc}

0800f440 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f440:	b580      	push	{r7, lr}
 800f442:	b082      	sub	sp, #8
 800f444:	af00      	add	r7, sp, #0
 800f446:	6078      	str	r0, [r7, #4]
 800f448:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800f44a:	683b      	ldr	r3, [r7, #0]
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d002      	beq.n	800f456 <HAL_TIM_Encoder_Start+0x16>
 800f450:	2b04      	cmp	r3, #4
 800f452:	d008      	beq.n	800f466 <HAL_TIM_Encoder_Start+0x26>
 800f454:	e00f      	b.n	800f476 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	2201      	movs	r2, #1
 800f45c:	2100      	movs	r1, #0
 800f45e:	4618      	mov	r0, r3
 800f460:	f000 fc6c 	bl	800fd3c <TIM_CCxChannelCmd>
      break;
 800f464:	e016      	b.n	800f494 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	2201      	movs	r2, #1
 800f46c:	2104      	movs	r1, #4
 800f46e:	4618      	mov	r0, r3
 800f470:	f000 fc64 	bl	800fd3c <TIM_CCxChannelCmd>
      break;
 800f474:	e00e      	b.n	800f494 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	2201      	movs	r2, #1
 800f47c:	2100      	movs	r1, #0
 800f47e:	4618      	mov	r0, r3
 800f480:	f000 fc5c 	bl	800fd3c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	2201      	movs	r2, #1
 800f48a:	2104      	movs	r1, #4
 800f48c:	4618      	mov	r0, r3
 800f48e:	f000 fc55 	bl	800fd3c <TIM_CCxChannelCmd>
      break;
 800f492:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	681a      	ldr	r2, [r3, #0]
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	f042 0201 	orr.w	r2, r2, #1
 800f4a2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800f4a4:	2300      	movs	r3, #0
}
 800f4a6:	4618      	mov	r0, r3
 800f4a8:	3708      	adds	r7, #8
 800f4aa:	46bd      	mov	sp, r7
 800f4ac:	bd80      	pop	{r7, pc}

0800f4ae <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f4ae:	b580      	push	{r7, lr}
 800f4b0:	b082      	sub	sp, #8
 800f4b2:	af00      	add	r7, sp, #0
 800f4b4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	691b      	ldr	r3, [r3, #16]
 800f4bc:	f003 0302 	and.w	r3, r3, #2
 800f4c0:	2b02      	cmp	r3, #2
 800f4c2:	d122      	bne.n	800f50a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	68db      	ldr	r3, [r3, #12]
 800f4ca:	f003 0302 	and.w	r3, r3, #2
 800f4ce:	2b02      	cmp	r3, #2
 800f4d0:	d11b      	bne.n	800f50a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	f06f 0202 	mvn.w	r2, #2
 800f4da:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	2201      	movs	r2, #1
 800f4e0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	699b      	ldr	r3, [r3, #24]
 800f4e8:	f003 0303 	and.w	r3, r3, #3
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d003      	beq.n	800f4f8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f4f0:	6878      	ldr	r0, [r7, #4]
 800f4f2:	f000 f9b5 	bl	800f860 <HAL_TIM_IC_CaptureCallback>
 800f4f6:	e005      	b.n	800f504 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f4f8:	6878      	ldr	r0, [r7, #4]
 800f4fa:	f000 f9a7 	bl	800f84c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f4fe:	6878      	ldr	r0, [r7, #4]
 800f500:	f000 f9b8 	bl	800f874 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	2200      	movs	r2, #0
 800f508:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	691b      	ldr	r3, [r3, #16]
 800f510:	f003 0304 	and.w	r3, r3, #4
 800f514:	2b04      	cmp	r3, #4
 800f516:	d122      	bne.n	800f55e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	68db      	ldr	r3, [r3, #12]
 800f51e:	f003 0304 	and.w	r3, r3, #4
 800f522:	2b04      	cmp	r3, #4
 800f524:	d11b      	bne.n	800f55e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	f06f 0204 	mvn.w	r2, #4
 800f52e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	2202      	movs	r2, #2
 800f534:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	699b      	ldr	r3, [r3, #24]
 800f53c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f540:	2b00      	cmp	r3, #0
 800f542:	d003      	beq.n	800f54c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f544:	6878      	ldr	r0, [r7, #4]
 800f546:	f000 f98b 	bl	800f860 <HAL_TIM_IC_CaptureCallback>
 800f54a:	e005      	b.n	800f558 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f54c:	6878      	ldr	r0, [r7, #4]
 800f54e:	f000 f97d 	bl	800f84c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f552:	6878      	ldr	r0, [r7, #4]
 800f554:	f000 f98e 	bl	800f874 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	2200      	movs	r2, #0
 800f55c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	691b      	ldr	r3, [r3, #16]
 800f564:	f003 0308 	and.w	r3, r3, #8
 800f568:	2b08      	cmp	r3, #8
 800f56a:	d122      	bne.n	800f5b2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	68db      	ldr	r3, [r3, #12]
 800f572:	f003 0308 	and.w	r3, r3, #8
 800f576:	2b08      	cmp	r3, #8
 800f578:	d11b      	bne.n	800f5b2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	f06f 0208 	mvn.w	r2, #8
 800f582:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	2204      	movs	r2, #4
 800f588:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	69db      	ldr	r3, [r3, #28]
 800f590:	f003 0303 	and.w	r3, r3, #3
 800f594:	2b00      	cmp	r3, #0
 800f596:	d003      	beq.n	800f5a0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f598:	6878      	ldr	r0, [r7, #4]
 800f59a:	f000 f961 	bl	800f860 <HAL_TIM_IC_CaptureCallback>
 800f59e:	e005      	b.n	800f5ac <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f5a0:	6878      	ldr	r0, [r7, #4]
 800f5a2:	f000 f953 	bl	800f84c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f5a6:	6878      	ldr	r0, [r7, #4]
 800f5a8:	f000 f964 	bl	800f874 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	2200      	movs	r2, #0
 800f5b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	691b      	ldr	r3, [r3, #16]
 800f5b8:	f003 0310 	and.w	r3, r3, #16
 800f5bc:	2b10      	cmp	r3, #16
 800f5be:	d122      	bne.n	800f606 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	68db      	ldr	r3, [r3, #12]
 800f5c6:	f003 0310 	and.w	r3, r3, #16
 800f5ca:	2b10      	cmp	r3, #16
 800f5cc:	d11b      	bne.n	800f606 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	f06f 0210 	mvn.w	r2, #16
 800f5d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	2208      	movs	r2, #8
 800f5dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	69db      	ldr	r3, [r3, #28]
 800f5e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d003      	beq.n	800f5f4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f5ec:	6878      	ldr	r0, [r7, #4]
 800f5ee:	f000 f937 	bl	800f860 <HAL_TIM_IC_CaptureCallback>
 800f5f2:	e005      	b.n	800f600 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f5f4:	6878      	ldr	r0, [r7, #4]
 800f5f6:	f000 f929 	bl	800f84c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f5fa:	6878      	ldr	r0, [r7, #4]
 800f5fc:	f000 f93a 	bl	800f874 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	2200      	movs	r2, #0
 800f604:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	681b      	ldr	r3, [r3, #0]
 800f60a:	691b      	ldr	r3, [r3, #16]
 800f60c:	f003 0301 	and.w	r3, r3, #1
 800f610:	2b01      	cmp	r3, #1
 800f612:	d10e      	bne.n	800f632 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	68db      	ldr	r3, [r3, #12]
 800f61a:	f003 0301 	and.w	r3, r3, #1
 800f61e:	2b01      	cmp	r3, #1
 800f620:	d107      	bne.n	800f632 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	f06f 0201 	mvn.w	r2, #1
 800f62a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f62c:	6878      	ldr	r0, [r7, #4]
 800f62e:	f7f6 fc3b 	bl	8005ea8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	691b      	ldr	r3, [r3, #16]
 800f638:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f63c:	2b80      	cmp	r3, #128	; 0x80
 800f63e:	d10e      	bne.n	800f65e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	68db      	ldr	r3, [r3, #12]
 800f646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f64a:	2b80      	cmp	r3, #128	; 0x80
 800f64c:	d107      	bne.n	800f65e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f656:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f658:	6878      	ldr	r0, [r7, #4]
 800f65a:	f000 fc6d 	bl	800ff38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	691b      	ldr	r3, [r3, #16]
 800f664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f668:	2b40      	cmp	r3, #64	; 0x40
 800f66a:	d10e      	bne.n	800f68a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	68db      	ldr	r3, [r3, #12]
 800f672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f676:	2b40      	cmp	r3, #64	; 0x40
 800f678:	d107      	bne.n	800f68a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f682:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f684:	6878      	ldr	r0, [r7, #4]
 800f686:	f000 f8ff 	bl	800f888 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	691b      	ldr	r3, [r3, #16]
 800f690:	f003 0320 	and.w	r3, r3, #32
 800f694:	2b20      	cmp	r3, #32
 800f696:	d10e      	bne.n	800f6b6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	68db      	ldr	r3, [r3, #12]
 800f69e:	f003 0320 	and.w	r3, r3, #32
 800f6a2:	2b20      	cmp	r3, #32
 800f6a4:	d107      	bne.n	800f6b6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	681b      	ldr	r3, [r3, #0]
 800f6aa:	f06f 0220 	mvn.w	r2, #32
 800f6ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f6b0:	6878      	ldr	r0, [r7, #4]
 800f6b2:	f000 fc37 	bl	800ff24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f6b6:	bf00      	nop
 800f6b8:	3708      	adds	r7, #8
 800f6ba:	46bd      	mov	sp, r7
 800f6bc:	bd80      	pop	{r7, pc}
	...

0800f6c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f6c0:	b580      	push	{r7, lr}
 800f6c2:	b084      	sub	sp, #16
 800f6c4:	af00      	add	r7, sp, #0
 800f6c6:	60f8      	str	r0, [r7, #12]
 800f6c8:	60b9      	str	r1, [r7, #8]
 800f6ca:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f6d2:	2b01      	cmp	r3, #1
 800f6d4:	d101      	bne.n	800f6da <HAL_TIM_PWM_ConfigChannel+0x1a>
 800f6d6:	2302      	movs	r3, #2
 800f6d8:	e0b4      	b.n	800f844 <HAL_TIM_PWM_ConfigChannel+0x184>
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	2201      	movs	r2, #1
 800f6de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	2202      	movs	r2, #2
 800f6e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	2b0c      	cmp	r3, #12
 800f6ee:	f200 809f 	bhi.w	800f830 <HAL_TIM_PWM_ConfigChannel+0x170>
 800f6f2:	a201      	add	r2, pc, #4	; (adr r2, 800f6f8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800f6f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6f8:	0800f72d 	.word	0x0800f72d
 800f6fc:	0800f831 	.word	0x0800f831
 800f700:	0800f831 	.word	0x0800f831
 800f704:	0800f831 	.word	0x0800f831
 800f708:	0800f76d 	.word	0x0800f76d
 800f70c:	0800f831 	.word	0x0800f831
 800f710:	0800f831 	.word	0x0800f831
 800f714:	0800f831 	.word	0x0800f831
 800f718:	0800f7af 	.word	0x0800f7af
 800f71c:	0800f831 	.word	0x0800f831
 800f720:	0800f831 	.word	0x0800f831
 800f724:	0800f831 	.word	0x0800f831
 800f728:	0800f7ef 	.word	0x0800f7ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	68b9      	ldr	r1, [r7, #8]
 800f732:	4618      	mov	r0, r3
 800f734:	f000 f952 	bl	800f9dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	699a      	ldr	r2, [r3, #24]
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	f042 0208 	orr.w	r2, r2, #8
 800f746:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	699a      	ldr	r2, [r3, #24]
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	f022 0204 	bic.w	r2, r2, #4
 800f756:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	6999      	ldr	r1, [r3, #24]
 800f75e:	68bb      	ldr	r3, [r7, #8]
 800f760:	691a      	ldr	r2, [r3, #16]
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	430a      	orrs	r2, r1
 800f768:	619a      	str	r2, [r3, #24]
      break;
 800f76a:	e062      	b.n	800f832 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	68b9      	ldr	r1, [r7, #8]
 800f772:	4618      	mov	r0, r3
 800f774:	f000 f9a2 	bl	800fabc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	699a      	ldr	r2, [r3, #24]
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	681b      	ldr	r3, [r3, #0]
 800f782:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f786:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f788:	68fb      	ldr	r3, [r7, #12]
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	699a      	ldr	r2, [r3, #24]
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f796:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	6999      	ldr	r1, [r3, #24]
 800f79e:	68bb      	ldr	r3, [r7, #8]
 800f7a0:	691b      	ldr	r3, [r3, #16]
 800f7a2:	021a      	lsls	r2, r3, #8
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	430a      	orrs	r2, r1
 800f7aa:	619a      	str	r2, [r3, #24]
      break;
 800f7ac:	e041      	b.n	800f832 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	68b9      	ldr	r1, [r7, #8]
 800f7b4:	4618      	mov	r0, r3
 800f7b6:	f000 f9f7 	bl	800fba8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	69da      	ldr	r2, [r3, #28]
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	f042 0208 	orr.w	r2, r2, #8
 800f7c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f7ca:	68fb      	ldr	r3, [r7, #12]
 800f7cc:	681b      	ldr	r3, [r3, #0]
 800f7ce:	69da      	ldr	r2, [r3, #28]
 800f7d0:	68fb      	ldr	r3, [r7, #12]
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	f022 0204 	bic.w	r2, r2, #4
 800f7d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f7da:	68fb      	ldr	r3, [r7, #12]
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	69d9      	ldr	r1, [r3, #28]
 800f7e0:	68bb      	ldr	r3, [r7, #8]
 800f7e2:	691a      	ldr	r2, [r3, #16]
 800f7e4:	68fb      	ldr	r3, [r7, #12]
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	430a      	orrs	r2, r1
 800f7ea:	61da      	str	r2, [r3, #28]
      break;
 800f7ec:	e021      	b.n	800f832 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	68b9      	ldr	r1, [r7, #8]
 800f7f4:	4618      	mov	r0, r3
 800f7f6:	f000 fa4b 	bl	800fc90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f7fa:	68fb      	ldr	r3, [r7, #12]
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	69da      	ldr	r2, [r3, #28]
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f808:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	69da      	ldr	r2, [r3, #28]
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f818:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f81a:	68fb      	ldr	r3, [r7, #12]
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	69d9      	ldr	r1, [r3, #28]
 800f820:	68bb      	ldr	r3, [r7, #8]
 800f822:	691b      	ldr	r3, [r3, #16]
 800f824:	021a      	lsls	r2, r3, #8
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	430a      	orrs	r2, r1
 800f82c:	61da      	str	r2, [r3, #28]
      break;
 800f82e:	e000      	b.n	800f832 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800f830:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	2201      	movs	r2, #1
 800f836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f83a:	68fb      	ldr	r3, [r7, #12]
 800f83c:	2200      	movs	r2, #0
 800f83e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f842:	2300      	movs	r3, #0
}
 800f844:	4618      	mov	r0, r3
 800f846:	3710      	adds	r7, #16
 800f848:	46bd      	mov	sp, r7
 800f84a:	bd80      	pop	{r7, pc}

0800f84c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f84c:	b480      	push	{r7}
 800f84e:	b083      	sub	sp, #12
 800f850:	af00      	add	r7, sp, #0
 800f852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f854:	bf00      	nop
 800f856:	370c      	adds	r7, #12
 800f858:	46bd      	mov	sp, r7
 800f85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f85e:	4770      	bx	lr

0800f860 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f860:	b480      	push	{r7}
 800f862:	b083      	sub	sp, #12
 800f864:	af00      	add	r7, sp, #0
 800f866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f868:	bf00      	nop
 800f86a:	370c      	adds	r7, #12
 800f86c:	46bd      	mov	sp, r7
 800f86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f872:	4770      	bx	lr

0800f874 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f874:	b480      	push	{r7}
 800f876:	b083      	sub	sp, #12
 800f878:	af00      	add	r7, sp, #0
 800f87a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f87c:	bf00      	nop
 800f87e:	370c      	adds	r7, #12
 800f880:	46bd      	mov	sp, r7
 800f882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f886:	4770      	bx	lr

0800f888 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f888:	b480      	push	{r7}
 800f88a:	b083      	sub	sp, #12
 800f88c:	af00      	add	r7, sp, #0
 800f88e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f890:	bf00      	nop
 800f892:	370c      	adds	r7, #12
 800f894:	46bd      	mov	sp, r7
 800f896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f89a:	4770      	bx	lr

0800f89c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800f89c:	b480      	push	{r7}
 800f89e:	b085      	sub	sp, #20
 800f8a0:	af00      	add	r7, sp, #0
 800f8a2:	6078      	str	r0, [r7, #4]
 800f8a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	681b      	ldr	r3, [r3, #0]
 800f8aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	4a40      	ldr	r2, [pc, #256]	; (800f9b0 <TIM_Base_SetConfig+0x114>)
 800f8b0:	4293      	cmp	r3, r2
 800f8b2:	d013      	beq.n	800f8dc <TIM_Base_SetConfig+0x40>
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f8ba:	d00f      	beq.n	800f8dc <TIM_Base_SetConfig+0x40>
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	4a3d      	ldr	r2, [pc, #244]	; (800f9b4 <TIM_Base_SetConfig+0x118>)
 800f8c0:	4293      	cmp	r3, r2
 800f8c2:	d00b      	beq.n	800f8dc <TIM_Base_SetConfig+0x40>
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	4a3c      	ldr	r2, [pc, #240]	; (800f9b8 <TIM_Base_SetConfig+0x11c>)
 800f8c8:	4293      	cmp	r3, r2
 800f8ca:	d007      	beq.n	800f8dc <TIM_Base_SetConfig+0x40>
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	4a3b      	ldr	r2, [pc, #236]	; (800f9bc <TIM_Base_SetConfig+0x120>)
 800f8d0:	4293      	cmp	r3, r2
 800f8d2:	d003      	beq.n	800f8dc <TIM_Base_SetConfig+0x40>
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	4a3a      	ldr	r2, [pc, #232]	; (800f9c0 <TIM_Base_SetConfig+0x124>)
 800f8d8:	4293      	cmp	r3, r2
 800f8da:	d108      	bne.n	800f8ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f8e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f8e4:	683b      	ldr	r3, [r7, #0]
 800f8e6:	685b      	ldr	r3, [r3, #4]
 800f8e8:	68fa      	ldr	r2, [r7, #12]
 800f8ea:	4313      	orrs	r3, r2
 800f8ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	4a2f      	ldr	r2, [pc, #188]	; (800f9b0 <TIM_Base_SetConfig+0x114>)
 800f8f2:	4293      	cmp	r3, r2
 800f8f4:	d02b      	beq.n	800f94e <TIM_Base_SetConfig+0xb2>
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f8fc:	d027      	beq.n	800f94e <TIM_Base_SetConfig+0xb2>
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	4a2c      	ldr	r2, [pc, #176]	; (800f9b4 <TIM_Base_SetConfig+0x118>)
 800f902:	4293      	cmp	r3, r2
 800f904:	d023      	beq.n	800f94e <TIM_Base_SetConfig+0xb2>
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	4a2b      	ldr	r2, [pc, #172]	; (800f9b8 <TIM_Base_SetConfig+0x11c>)
 800f90a:	4293      	cmp	r3, r2
 800f90c:	d01f      	beq.n	800f94e <TIM_Base_SetConfig+0xb2>
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	4a2a      	ldr	r2, [pc, #168]	; (800f9bc <TIM_Base_SetConfig+0x120>)
 800f912:	4293      	cmp	r3, r2
 800f914:	d01b      	beq.n	800f94e <TIM_Base_SetConfig+0xb2>
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	4a29      	ldr	r2, [pc, #164]	; (800f9c0 <TIM_Base_SetConfig+0x124>)
 800f91a:	4293      	cmp	r3, r2
 800f91c:	d017      	beq.n	800f94e <TIM_Base_SetConfig+0xb2>
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	4a28      	ldr	r2, [pc, #160]	; (800f9c4 <TIM_Base_SetConfig+0x128>)
 800f922:	4293      	cmp	r3, r2
 800f924:	d013      	beq.n	800f94e <TIM_Base_SetConfig+0xb2>
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	4a27      	ldr	r2, [pc, #156]	; (800f9c8 <TIM_Base_SetConfig+0x12c>)
 800f92a:	4293      	cmp	r3, r2
 800f92c:	d00f      	beq.n	800f94e <TIM_Base_SetConfig+0xb2>
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	4a26      	ldr	r2, [pc, #152]	; (800f9cc <TIM_Base_SetConfig+0x130>)
 800f932:	4293      	cmp	r3, r2
 800f934:	d00b      	beq.n	800f94e <TIM_Base_SetConfig+0xb2>
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	4a25      	ldr	r2, [pc, #148]	; (800f9d0 <TIM_Base_SetConfig+0x134>)
 800f93a:	4293      	cmp	r3, r2
 800f93c:	d007      	beq.n	800f94e <TIM_Base_SetConfig+0xb2>
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	4a24      	ldr	r2, [pc, #144]	; (800f9d4 <TIM_Base_SetConfig+0x138>)
 800f942:	4293      	cmp	r3, r2
 800f944:	d003      	beq.n	800f94e <TIM_Base_SetConfig+0xb2>
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	4a23      	ldr	r2, [pc, #140]	; (800f9d8 <TIM_Base_SetConfig+0x13c>)
 800f94a:	4293      	cmp	r3, r2
 800f94c:	d108      	bne.n	800f960 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f94e:	68fb      	ldr	r3, [r7, #12]
 800f950:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f954:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f956:	683b      	ldr	r3, [r7, #0]
 800f958:	68db      	ldr	r3, [r3, #12]
 800f95a:	68fa      	ldr	r2, [r7, #12]
 800f95c:	4313      	orrs	r3, r2
 800f95e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f966:	683b      	ldr	r3, [r7, #0]
 800f968:	695b      	ldr	r3, [r3, #20]
 800f96a:	4313      	orrs	r3, r2
 800f96c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	68fa      	ldr	r2, [r7, #12]
 800f972:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f974:	683b      	ldr	r3, [r7, #0]
 800f976:	689a      	ldr	r2, [r3, #8]
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f97c:	683b      	ldr	r3, [r7, #0]
 800f97e:	681a      	ldr	r2, [r3, #0]
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	4a0a      	ldr	r2, [pc, #40]	; (800f9b0 <TIM_Base_SetConfig+0x114>)
 800f988:	4293      	cmp	r3, r2
 800f98a:	d003      	beq.n	800f994 <TIM_Base_SetConfig+0xf8>
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	4a0c      	ldr	r2, [pc, #48]	; (800f9c0 <TIM_Base_SetConfig+0x124>)
 800f990:	4293      	cmp	r3, r2
 800f992:	d103      	bne.n	800f99c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f994:	683b      	ldr	r3, [r7, #0]
 800f996:	691a      	ldr	r2, [r3, #16]
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	2201      	movs	r2, #1
 800f9a0:	615a      	str	r2, [r3, #20]
}
 800f9a2:	bf00      	nop
 800f9a4:	3714      	adds	r7, #20
 800f9a6:	46bd      	mov	sp, r7
 800f9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ac:	4770      	bx	lr
 800f9ae:	bf00      	nop
 800f9b0:	40010000 	.word	0x40010000
 800f9b4:	40000400 	.word	0x40000400
 800f9b8:	40000800 	.word	0x40000800
 800f9bc:	40000c00 	.word	0x40000c00
 800f9c0:	40010400 	.word	0x40010400
 800f9c4:	40014000 	.word	0x40014000
 800f9c8:	40014400 	.word	0x40014400
 800f9cc:	40014800 	.word	0x40014800
 800f9d0:	40001800 	.word	0x40001800
 800f9d4:	40001c00 	.word	0x40001c00
 800f9d8:	40002000 	.word	0x40002000

0800f9dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f9dc:	b480      	push	{r7}
 800f9de:	b087      	sub	sp, #28
 800f9e0:	af00      	add	r7, sp, #0
 800f9e2:	6078      	str	r0, [r7, #4]
 800f9e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	6a1b      	ldr	r3, [r3, #32]
 800f9ea:	f023 0201 	bic.w	r2, r3, #1
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	6a1b      	ldr	r3, [r3, #32]
 800f9f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	685b      	ldr	r3, [r3, #4]
 800f9fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	699b      	ldr	r3, [r3, #24]
 800fa02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fa0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	f023 0303 	bic.w	r3, r3, #3
 800fa12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fa14:	683b      	ldr	r3, [r7, #0]
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	68fa      	ldr	r2, [r7, #12]
 800fa1a:	4313      	orrs	r3, r2
 800fa1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800fa1e:	697b      	ldr	r3, [r7, #20]
 800fa20:	f023 0302 	bic.w	r3, r3, #2
 800fa24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800fa26:	683b      	ldr	r3, [r7, #0]
 800fa28:	689b      	ldr	r3, [r3, #8]
 800fa2a:	697a      	ldr	r2, [r7, #20]
 800fa2c:	4313      	orrs	r3, r2
 800fa2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	4a20      	ldr	r2, [pc, #128]	; (800fab4 <TIM_OC1_SetConfig+0xd8>)
 800fa34:	4293      	cmp	r3, r2
 800fa36:	d003      	beq.n	800fa40 <TIM_OC1_SetConfig+0x64>
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	4a1f      	ldr	r2, [pc, #124]	; (800fab8 <TIM_OC1_SetConfig+0xdc>)
 800fa3c:	4293      	cmp	r3, r2
 800fa3e:	d10c      	bne.n	800fa5a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800fa40:	697b      	ldr	r3, [r7, #20]
 800fa42:	f023 0308 	bic.w	r3, r3, #8
 800fa46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800fa48:	683b      	ldr	r3, [r7, #0]
 800fa4a:	68db      	ldr	r3, [r3, #12]
 800fa4c:	697a      	ldr	r2, [r7, #20]
 800fa4e:	4313      	orrs	r3, r2
 800fa50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800fa52:	697b      	ldr	r3, [r7, #20]
 800fa54:	f023 0304 	bic.w	r3, r3, #4
 800fa58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	4a15      	ldr	r2, [pc, #84]	; (800fab4 <TIM_OC1_SetConfig+0xd8>)
 800fa5e:	4293      	cmp	r3, r2
 800fa60:	d003      	beq.n	800fa6a <TIM_OC1_SetConfig+0x8e>
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	4a14      	ldr	r2, [pc, #80]	; (800fab8 <TIM_OC1_SetConfig+0xdc>)
 800fa66:	4293      	cmp	r3, r2
 800fa68:	d111      	bne.n	800fa8e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800fa6a:	693b      	ldr	r3, [r7, #16]
 800fa6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fa70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800fa72:	693b      	ldr	r3, [r7, #16]
 800fa74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fa78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800fa7a:	683b      	ldr	r3, [r7, #0]
 800fa7c:	695b      	ldr	r3, [r3, #20]
 800fa7e:	693a      	ldr	r2, [r7, #16]
 800fa80:	4313      	orrs	r3, r2
 800fa82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800fa84:	683b      	ldr	r3, [r7, #0]
 800fa86:	699b      	ldr	r3, [r3, #24]
 800fa88:	693a      	ldr	r2, [r7, #16]
 800fa8a:	4313      	orrs	r3, r2
 800fa8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	693a      	ldr	r2, [r7, #16]
 800fa92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	68fa      	ldr	r2, [r7, #12]
 800fa98:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800fa9a:	683b      	ldr	r3, [r7, #0]
 800fa9c:	685a      	ldr	r2, [r3, #4]
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	697a      	ldr	r2, [r7, #20]
 800faa6:	621a      	str	r2, [r3, #32]
}
 800faa8:	bf00      	nop
 800faaa:	371c      	adds	r7, #28
 800faac:	46bd      	mov	sp, r7
 800faae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab2:	4770      	bx	lr
 800fab4:	40010000 	.word	0x40010000
 800fab8:	40010400 	.word	0x40010400

0800fabc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800fabc:	b480      	push	{r7}
 800fabe:	b087      	sub	sp, #28
 800fac0:	af00      	add	r7, sp, #0
 800fac2:	6078      	str	r0, [r7, #4]
 800fac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	6a1b      	ldr	r3, [r3, #32]
 800faca:	f023 0210 	bic.w	r2, r3, #16
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	6a1b      	ldr	r3, [r3, #32]
 800fad6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	685b      	ldr	r3, [r3, #4]
 800fadc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	699b      	ldr	r3, [r3, #24]
 800fae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800fae4:	68fb      	ldr	r3, [r7, #12]
 800fae6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800faea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800faec:	68fb      	ldr	r3, [r7, #12]
 800faee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800faf2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800faf4:	683b      	ldr	r3, [r7, #0]
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	021b      	lsls	r3, r3, #8
 800fafa:	68fa      	ldr	r2, [r7, #12]
 800fafc:	4313      	orrs	r3, r2
 800fafe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800fb00:	697b      	ldr	r3, [r7, #20]
 800fb02:	f023 0320 	bic.w	r3, r3, #32
 800fb06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800fb08:	683b      	ldr	r3, [r7, #0]
 800fb0a:	689b      	ldr	r3, [r3, #8]
 800fb0c:	011b      	lsls	r3, r3, #4
 800fb0e:	697a      	ldr	r2, [r7, #20]
 800fb10:	4313      	orrs	r3, r2
 800fb12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	4a22      	ldr	r2, [pc, #136]	; (800fba0 <TIM_OC2_SetConfig+0xe4>)
 800fb18:	4293      	cmp	r3, r2
 800fb1a:	d003      	beq.n	800fb24 <TIM_OC2_SetConfig+0x68>
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	4a21      	ldr	r2, [pc, #132]	; (800fba4 <TIM_OC2_SetConfig+0xe8>)
 800fb20:	4293      	cmp	r3, r2
 800fb22:	d10d      	bne.n	800fb40 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800fb24:	697b      	ldr	r3, [r7, #20]
 800fb26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fb2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800fb2c:	683b      	ldr	r3, [r7, #0]
 800fb2e:	68db      	ldr	r3, [r3, #12]
 800fb30:	011b      	lsls	r3, r3, #4
 800fb32:	697a      	ldr	r2, [r7, #20]
 800fb34:	4313      	orrs	r3, r2
 800fb36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800fb38:	697b      	ldr	r3, [r7, #20]
 800fb3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fb3e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	4a17      	ldr	r2, [pc, #92]	; (800fba0 <TIM_OC2_SetConfig+0xe4>)
 800fb44:	4293      	cmp	r3, r2
 800fb46:	d003      	beq.n	800fb50 <TIM_OC2_SetConfig+0x94>
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	4a16      	ldr	r2, [pc, #88]	; (800fba4 <TIM_OC2_SetConfig+0xe8>)
 800fb4c:	4293      	cmp	r3, r2
 800fb4e:	d113      	bne.n	800fb78 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800fb50:	693b      	ldr	r3, [r7, #16]
 800fb52:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fb56:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800fb58:	693b      	ldr	r3, [r7, #16]
 800fb5a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fb5e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800fb60:	683b      	ldr	r3, [r7, #0]
 800fb62:	695b      	ldr	r3, [r3, #20]
 800fb64:	009b      	lsls	r3, r3, #2
 800fb66:	693a      	ldr	r2, [r7, #16]
 800fb68:	4313      	orrs	r3, r2
 800fb6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800fb6c:	683b      	ldr	r3, [r7, #0]
 800fb6e:	699b      	ldr	r3, [r3, #24]
 800fb70:	009b      	lsls	r3, r3, #2
 800fb72:	693a      	ldr	r2, [r7, #16]
 800fb74:	4313      	orrs	r3, r2
 800fb76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	693a      	ldr	r2, [r7, #16]
 800fb7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	68fa      	ldr	r2, [r7, #12]
 800fb82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800fb84:	683b      	ldr	r3, [r7, #0]
 800fb86:	685a      	ldr	r2, [r3, #4]
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	697a      	ldr	r2, [r7, #20]
 800fb90:	621a      	str	r2, [r3, #32]
}
 800fb92:	bf00      	nop
 800fb94:	371c      	adds	r7, #28
 800fb96:	46bd      	mov	sp, r7
 800fb98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb9c:	4770      	bx	lr
 800fb9e:	bf00      	nop
 800fba0:	40010000 	.word	0x40010000
 800fba4:	40010400 	.word	0x40010400

0800fba8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800fba8:	b480      	push	{r7}
 800fbaa:	b087      	sub	sp, #28
 800fbac:	af00      	add	r7, sp, #0
 800fbae:	6078      	str	r0, [r7, #4]
 800fbb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	6a1b      	ldr	r3, [r3, #32]
 800fbb6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	6a1b      	ldr	r3, [r3, #32]
 800fbc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	685b      	ldr	r3, [r3, #4]
 800fbc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	69db      	ldr	r3, [r3, #28]
 800fbce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fbd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	f023 0303 	bic.w	r3, r3, #3
 800fbde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fbe0:	683b      	ldr	r3, [r7, #0]
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	68fa      	ldr	r2, [r7, #12]
 800fbe6:	4313      	orrs	r3, r2
 800fbe8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800fbea:	697b      	ldr	r3, [r7, #20]
 800fbec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fbf0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800fbf2:	683b      	ldr	r3, [r7, #0]
 800fbf4:	689b      	ldr	r3, [r3, #8]
 800fbf6:	021b      	lsls	r3, r3, #8
 800fbf8:	697a      	ldr	r2, [r7, #20]
 800fbfa:	4313      	orrs	r3, r2
 800fbfc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	4a21      	ldr	r2, [pc, #132]	; (800fc88 <TIM_OC3_SetConfig+0xe0>)
 800fc02:	4293      	cmp	r3, r2
 800fc04:	d003      	beq.n	800fc0e <TIM_OC3_SetConfig+0x66>
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	4a20      	ldr	r2, [pc, #128]	; (800fc8c <TIM_OC3_SetConfig+0xe4>)
 800fc0a:	4293      	cmp	r3, r2
 800fc0c:	d10d      	bne.n	800fc2a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800fc0e:	697b      	ldr	r3, [r7, #20]
 800fc10:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fc14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800fc16:	683b      	ldr	r3, [r7, #0]
 800fc18:	68db      	ldr	r3, [r3, #12]
 800fc1a:	021b      	lsls	r3, r3, #8
 800fc1c:	697a      	ldr	r2, [r7, #20]
 800fc1e:	4313      	orrs	r3, r2
 800fc20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800fc22:	697b      	ldr	r3, [r7, #20]
 800fc24:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fc28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	4a16      	ldr	r2, [pc, #88]	; (800fc88 <TIM_OC3_SetConfig+0xe0>)
 800fc2e:	4293      	cmp	r3, r2
 800fc30:	d003      	beq.n	800fc3a <TIM_OC3_SetConfig+0x92>
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	4a15      	ldr	r2, [pc, #84]	; (800fc8c <TIM_OC3_SetConfig+0xe4>)
 800fc36:	4293      	cmp	r3, r2
 800fc38:	d113      	bne.n	800fc62 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800fc3a:	693b      	ldr	r3, [r7, #16]
 800fc3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fc40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800fc42:	693b      	ldr	r3, [r7, #16]
 800fc44:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fc48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800fc4a:	683b      	ldr	r3, [r7, #0]
 800fc4c:	695b      	ldr	r3, [r3, #20]
 800fc4e:	011b      	lsls	r3, r3, #4
 800fc50:	693a      	ldr	r2, [r7, #16]
 800fc52:	4313      	orrs	r3, r2
 800fc54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800fc56:	683b      	ldr	r3, [r7, #0]
 800fc58:	699b      	ldr	r3, [r3, #24]
 800fc5a:	011b      	lsls	r3, r3, #4
 800fc5c:	693a      	ldr	r2, [r7, #16]
 800fc5e:	4313      	orrs	r3, r2
 800fc60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	693a      	ldr	r2, [r7, #16]
 800fc66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	68fa      	ldr	r2, [r7, #12]
 800fc6c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800fc6e:	683b      	ldr	r3, [r7, #0]
 800fc70:	685a      	ldr	r2, [r3, #4]
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	697a      	ldr	r2, [r7, #20]
 800fc7a:	621a      	str	r2, [r3, #32]
}
 800fc7c:	bf00      	nop
 800fc7e:	371c      	adds	r7, #28
 800fc80:	46bd      	mov	sp, r7
 800fc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc86:	4770      	bx	lr
 800fc88:	40010000 	.word	0x40010000
 800fc8c:	40010400 	.word	0x40010400

0800fc90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800fc90:	b480      	push	{r7}
 800fc92:	b087      	sub	sp, #28
 800fc94:	af00      	add	r7, sp, #0
 800fc96:	6078      	str	r0, [r7, #4]
 800fc98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	6a1b      	ldr	r3, [r3, #32]
 800fc9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	6a1b      	ldr	r3, [r3, #32]
 800fcaa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	685b      	ldr	r3, [r3, #4]
 800fcb0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	69db      	ldr	r3, [r3, #28]
 800fcb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800fcb8:	68fb      	ldr	r3, [r7, #12]
 800fcba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fcbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fcc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fcc8:	683b      	ldr	r3, [r7, #0]
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	021b      	lsls	r3, r3, #8
 800fcce:	68fa      	ldr	r2, [r7, #12]
 800fcd0:	4313      	orrs	r3, r2
 800fcd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800fcd4:	693b      	ldr	r3, [r7, #16]
 800fcd6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fcda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800fcdc:	683b      	ldr	r3, [r7, #0]
 800fcde:	689b      	ldr	r3, [r3, #8]
 800fce0:	031b      	lsls	r3, r3, #12
 800fce2:	693a      	ldr	r2, [r7, #16]
 800fce4:	4313      	orrs	r3, r2
 800fce6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	4a12      	ldr	r2, [pc, #72]	; (800fd34 <TIM_OC4_SetConfig+0xa4>)
 800fcec:	4293      	cmp	r3, r2
 800fcee:	d003      	beq.n	800fcf8 <TIM_OC4_SetConfig+0x68>
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	4a11      	ldr	r2, [pc, #68]	; (800fd38 <TIM_OC4_SetConfig+0xa8>)
 800fcf4:	4293      	cmp	r3, r2
 800fcf6:	d109      	bne.n	800fd0c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800fcf8:	697b      	ldr	r3, [r7, #20]
 800fcfa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fcfe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800fd00:	683b      	ldr	r3, [r7, #0]
 800fd02:	695b      	ldr	r3, [r3, #20]
 800fd04:	019b      	lsls	r3, r3, #6
 800fd06:	697a      	ldr	r2, [r7, #20]
 800fd08:	4313      	orrs	r3, r2
 800fd0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	697a      	ldr	r2, [r7, #20]
 800fd10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	68fa      	ldr	r2, [r7, #12]
 800fd16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800fd18:	683b      	ldr	r3, [r7, #0]
 800fd1a:	685a      	ldr	r2, [r3, #4]
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	693a      	ldr	r2, [r7, #16]
 800fd24:	621a      	str	r2, [r3, #32]
}
 800fd26:	bf00      	nop
 800fd28:	371c      	adds	r7, #28
 800fd2a:	46bd      	mov	sp, r7
 800fd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd30:	4770      	bx	lr
 800fd32:	bf00      	nop
 800fd34:	40010000 	.word	0x40010000
 800fd38:	40010400 	.word	0x40010400

0800fd3c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800fd3c:	b480      	push	{r7}
 800fd3e:	b087      	sub	sp, #28
 800fd40:	af00      	add	r7, sp, #0
 800fd42:	60f8      	str	r0, [r7, #12]
 800fd44:	60b9      	str	r1, [r7, #8]
 800fd46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800fd48:	68bb      	ldr	r3, [r7, #8]
 800fd4a:	f003 031f 	and.w	r3, r3, #31
 800fd4e:	2201      	movs	r2, #1
 800fd50:	fa02 f303 	lsl.w	r3, r2, r3
 800fd54:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	6a1a      	ldr	r2, [r3, #32]
 800fd5a:	697b      	ldr	r3, [r7, #20]
 800fd5c:	43db      	mvns	r3, r3
 800fd5e:	401a      	ands	r2, r3
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800fd64:	68fb      	ldr	r3, [r7, #12]
 800fd66:	6a1a      	ldr	r2, [r3, #32]
 800fd68:	68bb      	ldr	r3, [r7, #8]
 800fd6a:	f003 031f 	and.w	r3, r3, #31
 800fd6e:	6879      	ldr	r1, [r7, #4]
 800fd70:	fa01 f303 	lsl.w	r3, r1, r3
 800fd74:	431a      	orrs	r2, r3
 800fd76:	68fb      	ldr	r3, [r7, #12]
 800fd78:	621a      	str	r2, [r3, #32]
}
 800fd7a:	bf00      	nop
 800fd7c:	371c      	adds	r7, #28
 800fd7e:	46bd      	mov	sp, r7
 800fd80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd84:	4770      	bx	lr
	...

0800fd88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fd88:	b480      	push	{r7}
 800fd8a:	b085      	sub	sp, #20
 800fd8c:	af00      	add	r7, sp, #0
 800fd8e:	6078      	str	r0, [r7, #4]
 800fd90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fd98:	2b01      	cmp	r3, #1
 800fd9a:	d101      	bne.n	800fda0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fd9c:	2302      	movs	r3, #2
 800fd9e:	e05a      	b.n	800fe56 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	2201      	movs	r2, #1
 800fda4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	2202      	movs	r2, #2
 800fdac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	685b      	ldr	r3, [r3, #4]
 800fdb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	681b      	ldr	r3, [r3, #0]
 800fdbc:	689b      	ldr	r3, [r3, #8]
 800fdbe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fdc6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fdc8:	683b      	ldr	r3, [r7, #0]
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	68fa      	ldr	r2, [r7, #12]
 800fdce:	4313      	orrs	r3, r2
 800fdd0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	68fa      	ldr	r2, [r7, #12]
 800fdd8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	681b      	ldr	r3, [r3, #0]
 800fdde:	4a21      	ldr	r2, [pc, #132]	; (800fe64 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800fde0:	4293      	cmp	r3, r2
 800fde2:	d022      	beq.n	800fe2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fdec:	d01d      	beq.n	800fe2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	4a1d      	ldr	r2, [pc, #116]	; (800fe68 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800fdf4:	4293      	cmp	r3, r2
 800fdf6:	d018      	beq.n	800fe2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	4a1b      	ldr	r2, [pc, #108]	; (800fe6c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800fdfe:	4293      	cmp	r3, r2
 800fe00:	d013      	beq.n	800fe2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	4a1a      	ldr	r2, [pc, #104]	; (800fe70 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800fe08:	4293      	cmp	r3, r2
 800fe0a:	d00e      	beq.n	800fe2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	4a18      	ldr	r2, [pc, #96]	; (800fe74 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800fe12:	4293      	cmp	r3, r2
 800fe14:	d009      	beq.n	800fe2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	4a17      	ldr	r2, [pc, #92]	; (800fe78 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800fe1c:	4293      	cmp	r3, r2
 800fe1e:	d004      	beq.n	800fe2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	4a15      	ldr	r2, [pc, #84]	; (800fe7c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800fe26:	4293      	cmp	r3, r2
 800fe28:	d10c      	bne.n	800fe44 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800fe2a:	68bb      	ldr	r3, [r7, #8]
 800fe2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fe30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800fe32:	683b      	ldr	r3, [r7, #0]
 800fe34:	685b      	ldr	r3, [r3, #4]
 800fe36:	68ba      	ldr	r2, [r7, #8]
 800fe38:	4313      	orrs	r3, r2
 800fe3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	681b      	ldr	r3, [r3, #0]
 800fe40:	68ba      	ldr	r2, [r7, #8]
 800fe42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	2201      	movs	r2, #1
 800fe48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	2200      	movs	r2, #0
 800fe50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fe54:	2300      	movs	r3, #0
}
 800fe56:	4618      	mov	r0, r3
 800fe58:	3714      	adds	r7, #20
 800fe5a:	46bd      	mov	sp, r7
 800fe5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe60:	4770      	bx	lr
 800fe62:	bf00      	nop
 800fe64:	40010000 	.word	0x40010000
 800fe68:	40000400 	.word	0x40000400
 800fe6c:	40000800 	.word	0x40000800
 800fe70:	40000c00 	.word	0x40000c00
 800fe74:	40010400 	.word	0x40010400
 800fe78:	40014000 	.word	0x40014000
 800fe7c:	40001800 	.word	0x40001800

0800fe80 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800fe80:	b480      	push	{r7}
 800fe82:	b085      	sub	sp, #20
 800fe84:	af00      	add	r7, sp, #0
 800fe86:	6078      	str	r0, [r7, #4]
 800fe88:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800fe8a:	2300      	movs	r3, #0
 800fe8c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fe94:	2b01      	cmp	r3, #1
 800fe96:	d101      	bne.n	800fe9c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800fe98:	2302      	movs	r3, #2
 800fe9a:	e03d      	b.n	800ff18 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	2201      	movs	r2, #1
 800fea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800fea4:	68fb      	ldr	r3, [r7, #12]
 800fea6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800feaa:	683b      	ldr	r3, [r7, #0]
 800feac:	68db      	ldr	r3, [r3, #12]
 800feae:	4313      	orrs	r3, r2
 800feb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800feb8:	683b      	ldr	r3, [r7, #0]
 800feba:	689b      	ldr	r3, [r3, #8]
 800febc:	4313      	orrs	r3, r2
 800febe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800fec0:	68fb      	ldr	r3, [r7, #12]
 800fec2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800fec6:	683b      	ldr	r3, [r7, #0]
 800fec8:	685b      	ldr	r3, [r3, #4]
 800feca:	4313      	orrs	r3, r2
 800fecc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800fece:	68fb      	ldr	r3, [r7, #12]
 800fed0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800fed4:	683b      	ldr	r3, [r7, #0]
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	4313      	orrs	r3, r2
 800feda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800fedc:	68fb      	ldr	r3, [r7, #12]
 800fede:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fee2:	683b      	ldr	r3, [r7, #0]
 800fee4:	691b      	ldr	r3, [r3, #16]
 800fee6:	4313      	orrs	r3, r2
 800fee8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800feea:	68fb      	ldr	r3, [r7, #12]
 800feec:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800fef0:	683b      	ldr	r3, [r7, #0]
 800fef2:	695b      	ldr	r3, [r3, #20]
 800fef4:	4313      	orrs	r3, r2
 800fef6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800fef8:	68fb      	ldr	r3, [r7, #12]
 800fefa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800fefe:	683b      	ldr	r3, [r7, #0]
 800ff00:	69db      	ldr	r3, [r3, #28]
 800ff02:	4313      	orrs	r3, r2
 800ff04:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	68fa      	ldr	r2, [r7, #12]
 800ff0c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	2200      	movs	r2, #0
 800ff12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ff16:	2300      	movs	r3, #0
}
 800ff18:	4618      	mov	r0, r3
 800ff1a:	3714      	adds	r7, #20
 800ff1c:	46bd      	mov	sp, r7
 800ff1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff22:	4770      	bx	lr

0800ff24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ff24:	b480      	push	{r7}
 800ff26:	b083      	sub	sp, #12
 800ff28:	af00      	add	r7, sp, #0
 800ff2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ff2c:	bf00      	nop
 800ff2e:	370c      	adds	r7, #12
 800ff30:	46bd      	mov	sp, r7
 800ff32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff36:	4770      	bx	lr

0800ff38 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ff38:	b480      	push	{r7}
 800ff3a:	b083      	sub	sp, #12
 800ff3c:	af00      	add	r7, sp, #0
 800ff3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ff40:	bf00      	nop
 800ff42:	370c      	adds	r7, #12
 800ff44:	46bd      	mov	sp, r7
 800ff46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff4a:	4770      	bx	lr

0800ff4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ff4c:	b580      	push	{r7, lr}
 800ff4e:	b082      	sub	sp, #8
 800ff50:	af00      	add	r7, sp, #0
 800ff52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d101      	bne.n	800ff5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ff5a:	2301      	movs	r3, #1
 800ff5c:	e03f      	b.n	800ffde <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ff64:	b2db      	uxtb	r3, r3
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d106      	bne.n	800ff78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	2200      	movs	r2, #0
 800ff6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ff72:	6878      	ldr	r0, [r7, #4]
 800ff74:	f7f7 fbea 	bl	800774c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	2224      	movs	r2, #36	; 0x24
 800ff7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	68da      	ldr	r2, [r3, #12]
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ff8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ff90:	6878      	ldr	r0, [r7, #4]
 800ff92:	f000 f829 	bl	800ffe8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	691a      	ldr	r2, [r3, #16]
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ffa4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	695a      	ldr	r2, [r3, #20]
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ffb4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	68da      	ldr	r2, [r3, #12]
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ffc4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	2200      	movs	r2, #0
 800ffca:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	2220      	movs	r2, #32
 800ffd0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	2220      	movs	r2, #32
 800ffd8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800ffdc:	2300      	movs	r3, #0
}
 800ffde:	4618      	mov	r0, r3
 800ffe0:	3708      	adds	r7, #8
 800ffe2:	46bd      	mov	sp, r7
 800ffe4:	bd80      	pop	{r7, pc}
	...

0800ffe8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ffe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffec:	b085      	sub	sp, #20
 800ffee:	af00      	add	r7, sp, #0
 800fff0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	691b      	ldr	r3, [r3, #16]
 800fff8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	68da      	ldr	r2, [r3, #12]
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	681b      	ldr	r3, [r3, #0]
 8010004:	430a      	orrs	r2, r1
 8010006:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	689a      	ldr	r2, [r3, #8]
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	691b      	ldr	r3, [r3, #16]
 8010010:	431a      	orrs	r2, r3
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	695b      	ldr	r3, [r3, #20]
 8010016:	431a      	orrs	r2, r3
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	69db      	ldr	r3, [r3, #28]
 801001c:	4313      	orrs	r3, r2
 801001e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	68db      	ldr	r3, [r3, #12]
 8010026:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 801002a:	f023 030c 	bic.w	r3, r3, #12
 801002e:	687a      	ldr	r2, [r7, #4]
 8010030:	6812      	ldr	r2, [r2, #0]
 8010032:	68f9      	ldr	r1, [r7, #12]
 8010034:	430b      	orrs	r3, r1
 8010036:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	695b      	ldr	r3, [r3, #20]
 801003e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	699a      	ldr	r2, [r3, #24]
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	430a      	orrs	r2, r1
 801004c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	69db      	ldr	r3, [r3, #28]
 8010052:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010056:	f040 818b 	bne.w	8010370 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	4ac1      	ldr	r2, [pc, #772]	; (8010364 <UART_SetConfig+0x37c>)
 8010060:	4293      	cmp	r3, r2
 8010062:	d005      	beq.n	8010070 <UART_SetConfig+0x88>
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	681b      	ldr	r3, [r3, #0]
 8010068:	4abf      	ldr	r2, [pc, #764]	; (8010368 <UART_SetConfig+0x380>)
 801006a:	4293      	cmp	r3, r2
 801006c:	f040 80bd 	bne.w	80101ea <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8010070:	f7fc fbcc 	bl	800c80c <HAL_RCC_GetPCLK2Freq>
 8010074:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8010076:	68bb      	ldr	r3, [r7, #8]
 8010078:	461d      	mov	r5, r3
 801007a:	f04f 0600 	mov.w	r6, #0
 801007e:	46a8      	mov	r8, r5
 8010080:	46b1      	mov	r9, r6
 8010082:	eb18 0308 	adds.w	r3, r8, r8
 8010086:	eb49 0409 	adc.w	r4, r9, r9
 801008a:	4698      	mov	r8, r3
 801008c:	46a1      	mov	r9, r4
 801008e:	eb18 0805 	adds.w	r8, r8, r5
 8010092:	eb49 0906 	adc.w	r9, r9, r6
 8010096:	f04f 0100 	mov.w	r1, #0
 801009a:	f04f 0200 	mov.w	r2, #0
 801009e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80100a2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80100a6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80100aa:	4688      	mov	r8, r1
 80100ac:	4691      	mov	r9, r2
 80100ae:	eb18 0005 	adds.w	r0, r8, r5
 80100b2:	eb49 0106 	adc.w	r1, r9, r6
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	685b      	ldr	r3, [r3, #4]
 80100ba:	461d      	mov	r5, r3
 80100bc:	f04f 0600 	mov.w	r6, #0
 80100c0:	196b      	adds	r3, r5, r5
 80100c2:	eb46 0406 	adc.w	r4, r6, r6
 80100c6:	461a      	mov	r2, r3
 80100c8:	4623      	mov	r3, r4
 80100ca:	f7f0 fdf5 	bl	8000cb8 <__aeabi_uldivmod>
 80100ce:	4603      	mov	r3, r0
 80100d0:	460c      	mov	r4, r1
 80100d2:	461a      	mov	r2, r3
 80100d4:	4ba5      	ldr	r3, [pc, #660]	; (801036c <UART_SetConfig+0x384>)
 80100d6:	fba3 2302 	umull	r2, r3, r3, r2
 80100da:	095b      	lsrs	r3, r3, #5
 80100dc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80100e0:	68bb      	ldr	r3, [r7, #8]
 80100e2:	461d      	mov	r5, r3
 80100e4:	f04f 0600 	mov.w	r6, #0
 80100e8:	46a9      	mov	r9, r5
 80100ea:	46b2      	mov	sl, r6
 80100ec:	eb19 0309 	adds.w	r3, r9, r9
 80100f0:	eb4a 040a 	adc.w	r4, sl, sl
 80100f4:	4699      	mov	r9, r3
 80100f6:	46a2      	mov	sl, r4
 80100f8:	eb19 0905 	adds.w	r9, r9, r5
 80100fc:	eb4a 0a06 	adc.w	sl, sl, r6
 8010100:	f04f 0100 	mov.w	r1, #0
 8010104:	f04f 0200 	mov.w	r2, #0
 8010108:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801010c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8010110:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010114:	4689      	mov	r9, r1
 8010116:	4692      	mov	sl, r2
 8010118:	eb19 0005 	adds.w	r0, r9, r5
 801011c:	eb4a 0106 	adc.w	r1, sl, r6
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	685b      	ldr	r3, [r3, #4]
 8010124:	461d      	mov	r5, r3
 8010126:	f04f 0600 	mov.w	r6, #0
 801012a:	196b      	adds	r3, r5, r5
 801012c:	eb46 0406 	adc.w	r4, r6, r6
 8010130:	461a      	mov	r2, r3
 8010132:	4623      	mov	r3, r4
 8010134:	f7f0 fdc0 	bl	8000cb8 <__aeabi_uldivmod>
 8010138:	4603      	mov	r3, r0
 801013a:	460c      	mov	r4, r1
 801013c:	461a      	mov	r2, r3
 801013e:	4b8b      	ldr	r3, [pc, #556]	; (801036c <UART_SetConfig+0x384>)
 8010140:	fba3 1302 	umull	r1, r3, r3, r2
 8010144:	095b      	lsrs	r3, r3, #5
 8010146:	2164      	movs	r1, #100	; 0x64
 8010148:	fb01 f303 	mul.w	r3, r1, r3
 801014c:	1ad3      	subs	r3, r2, r3
 801014e:	00db      	lsls	r3, r3, #3
 8010150:	3332      	adds	r3, #50	; 0x32
 8010152:	4a86      	ldr	r2, [pc, #536]	; (801036c <UART_SetConfig+0x384>)
 8010154:	fba2 2303 	umull	r2, r3, r2, r3
 8010158:	095b      	lsrs	r3, r3, #5
 801015a:	005b      	lsls	r3, r3, #1
 801015c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8010160:	4498      	add	r8, r3
 8010162:	68bb      	ldr	r3, [r7, #8]
 8010164:	461d      	mov	r5, r3
 8010166:	f04f 0600 	mov.w	r6, #0
 801016a:	46a9      	mov	r9, r5
 801016c:	46b2      	mov	sl, r6
 801016e:	eb19 0309 	adds.w	r3, r9, r9
 8010172:	eb4a 040a 	adc.w	r4, sl, sl
 8010176:	4699      	mov	r9, r3
 8010178:	46a2      	mov	sl, r4
 801017a:	eb19 0905 	adds.w	r9, r9, r5
 801017e:	eb4a 0a06 	adc.w	sl, sl, r6
 8010182:	f04f 0100 	mov.w	r1, #0
 8010186:	f04f 0200 	mov.w	r2, #0
 801018a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801018e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8010192:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010196:	4689      	mov	r9, r1
 8010198:	4692      	mov	sl, r2
 801019a:	eb19 0005 	adds.w	r0, r9, r5
 801019e:	eb4a 0106 	adc.w	r1, sl, r6
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	685b      	ldr	r3, [r3, #4]
 80101a6:	461d      	mov	r5, r3
 80101a8:	f04f 0600 	mov.w	r6, #0
 80101ac:	196b      	adds	r3, r5, r5
 80101ae:	eb46 0406 	adc.w	r4, r6, r6
 80101b2:	461a      	mov	r2, r3
 80101b4:	4623      	mov	r3, r4
 80101b6:	f7f0 fd7f 	bl	8000cb8 <__aeabi_uldivmod>
 80101ba:	4603      	mov	r3, r0
 80101bc:	460c      	mov	r4, r1
 80101be:	461a      	mov	r2, r3
 80101c0:	4b6a      	ldr	r3, [pc, #424]	; (801036c <UART_SetConfig+0x384>)
 80101c2:	fba3 1302 	umull	r1, r3, r3, r2
 80101c6:	095b      	lsrs	r3, r3, #5
 80101c8:	2164      	movs	r1, #100	; 0x64
 80101ca:	fb01 f303 	mul.w	r3, r1, r3
 80101ce:	1ad3      	subs	r3, r2, r3
 80101d0:	00db      	lsls	r3, r3, #3
 80101d2:	3332      	adds	r3, #50	; 0x32
 80101d4:	4a65      	ldr	r2, [pc, #404]	; (801036c <UART_SetConfig+0x384>)
 80101d6:	fba2 2303 	umull	r2, r3, r2, r3
 80101da:	095b      	lsrs	r3, r3, #5
 80101dc:	f003 0207 	and.w	r2, r3, #7
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	4442      	add	r2, r8
 80101e6:	609a      	str	r2, [r3, #8]
 80101e8:	e26f      	b.n	80106ca <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80101ea:	f7fc fafb 	bl	800c7e4 <HAL_RCC_GetPCLK1Freq>
 80101ee:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80101f0:	68bb      	ldr	r3, [r7, #8]
 80101f2:	461d      	mov	r5, r3
 80101f4:	f04f 0600 	mov.w	r6, #0
 80101f8:	46a8      	mov	r8, r5
 80101fa:	46b1      	mov	r9, r6
 80101fc:	eb18 0308 	adds.w	r3, r8, r8
 8010200:	eb49 0409 	adc.w	r4, r9, r9
 8010204:	4698      	mov	r8, r3
 8010206:	46a1      	mov	r9, r4
 8010208:	eb18 0805 	adds.w	r8, r8, r5
 801020c:	eb49 0906 	adc.w	r9, r9, r6
 8010210:	f04f 0100 	mov.w	r1, #0
 8010214:	f04f 0200 	mov.w	r2, #0
 8010218:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 801021c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8010220:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8010224:	4688      	mov	r8, r1
 8010226:	4691      	mov	r9, r2
 8010228:	eb18 0005 	adds.w	r0, r8, r5
 801022c:	eb49 0106 	adc.w	r1, r9, r6
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	685b      	ldr	r3, [r3, #4]
 8010234:	461d      	mov	r5, r3
 8010236:	f04f 0600 	mov.w	r6, #0
 801023a:	196b      	adds	r3, r5, r5
 801023c:	eb46 0406 	adc.w	r4, r6, r6
 8010240:	461a      	mov	r2, r3
 8010242:	4623      	mov	r3, r4
 8010244:	f7f0 fd38 	bl	8000cb8 <__aeabi_uldivmod>
 8010248:	4603      	mov	r3, r0
 801024a:	460c      	mov	r4, r1
 801024c:	461a      	mov	r2, r3
 801024e:	4b47      	ldr	r3, [pc, #284]	; (801036c <UART_SetConfig+0x384>)
 8010250:	fba3 2302 	umull	r2, r3, r3, r2
 8010254:	095b      	lsrs	r3, r3, #5
 8010256:	ea4f 1803 	mov.w	r8, r3, lsl #4
 801025a:	68bb      	ldr	r3, [r7, #8]
 801025c:	461d      	mov	r5, r3
 801025e:	f04f 0600 	mov.w	r6, #0
 8010262:	46a9      	mov	r9, r5
 8010264:	46b2      	mov	sl, r6
 8010266:	eb19 0309 	adds.w	r3, r9, r9
 801026a:	eb4a 040a 	adc.w	r4, sl, sl
 801026e:	4699      	mov	r9, r3
 8010270:	46a2      	mov	sl, r4
 8010272:	eb19 0905 	adds.w	r9, r9, r5
 8010276:	eb4a 0a06 	adc.w	sl, sl, r6
 801027a:	f04f 0100 	mov.w	r1, #0
 801027e:	f04f 0200 	mov.w	r2, #0
 8010282:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010286:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801028a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801028e:	4689      	mov	r9, r1
 8010290:	4692      	mov	sl, r2
 8010292:	eb19 0005 	adds.w	r0, r9, r5
 8010296:	eb4a 0106 	adc.w	r1, sl, r6
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	685b      	ldr	r3, [r3, #4]
 801029e:	461d      	mov	r5, r3
 80102a0:	f04f 0600 	mov.w	r6, #0
 80102a4:	196b      	adds	r3, r5, r5
 80102a6:	eb46 0406 	adc.w	r4, r6, r6
 80102aa:	461a      	mov	r2, r3
 80102ac:	4623      	mov	r3, r4
 80102ae:	f7f0 fd03 	bl	8000cb8 <__aeabi_uldivmod>
 80102b2:	4603      	mov	r3, r0
 80102b4:	460c      	mov	r4, r1
 80102b6:	461a      	mov	r2, r3
 80102b8:	4b2c      	ldr	r3, [pc, #176]	; (801036c <UART_SetConfig+0x384>)
 80102ba:	fba3 1302 	umull	r1, r3, r3, r2
 80102be:	095b      	lsrs	r3, r3, #5
 80102c0:	2164      	movs	r1, #100	; 0x64
 80102c2:	fb01 f303 	mul.w	r3, r1, r3
 80102c6:	1ad3      	subs	r3, r2, r3
 80102c8:	00db      	lsls	r3, r3, #3
 80102ca:	3332      	adds	r3, #50	; 0x32
 80102cc:	4a27      	ldr	r2, [pc, #156]	; (801036c <UART_SetConfig+0x384>)
 80102ce:	fba2 2303 	umull	r2, r3, r2, r3
 80102d2:	095b      	lsrs	r3, r3, #5
 80102d4:	005b      	lsls	r3, r3, #1
 80102d6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80102da:	4498      	add	r8, r3
 80102dc:	68bb      	ldr	r3, [r7, #8]
 80102de:	461d      	mov	r5, r3
 80102e0:	f04f 0600 	mov.w	r6, #0
 80102e4:	46a9      	mov	r9, r5
 80102e6:	46b2      	mov	sl, r6
 80102e8:	eb19 0309 	adds.w	r3, r9, r9
 80102ec:	eb4a 040a 	adc.w	r4, sl, sl
 80102f0:	4699      	mov	r9, r3
 80102f2:	46a2      	mov	sl, r4
 80102f4:	eb19 0905 	adds.w	r9, r9, r5
 80102f8:	eb4a 0a06 	adc.w	sl, sl, r6
 80102fc:	f04f 0100 	mov.w	r1, #0
 8010300:	f04f 0200 	mov.w	r2, #0
 8010304:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010308:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801030c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010310:	4689      	mov	r9, r1
 8010312:	4692      	mov	sl, r2
 8010314:	eb19 0005 	adds.w	r0, r9, r5
 8010318:	eb4a 0106 	adc.w	r1, sl, r6
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	685b      	ldr	r3, [r3, #4]
 8010320:	461d      	mov	r5, r3
 8010322:	f04f 0600 	mov.w	r6, #0
 8010326:	196b      	adds	r3, r5, r5
 8010328:	eb46 0406 	adc.w	r4, r6, r6
 801032c:	461a      	mov	r2, r3
 801032e:	4623      	mov	r3, r4
 8010330:	f7f0 fcc2 	bl	8000cb8 <__aeabi_uldivmod>
 8010334:	4603      	mov	r3, r0
 8010336:	460c      	mov	r4, r1
 8010338:	461a      	mov	r2, r3
 801033a:	4b0c      	ldr	r3, [pc, #48]	; (801036c <UART_SetConfig+0x384>)
 801033c:	fba3 1302 	umull	r1, r3, r3, r2
 8010340:	095b      	lsrs	r3, r3, #5
 8010342:	2164      	movs	r1, #100	; 0x64
 8010344:	fb01 f303 	mul.w	r3, r1, r3
 8010348:	1ad3      	subs	r3, r2, r3
 801034a:	00db      	lsls	r3, r3, #3
 801034c:	3332      	adds	r3, #50	; 0x32
 801034e:	4a07      	ldr	r2, [pc, #28]	; (801036c <UART_SetConfig+0x384>)
 8010350:	fba2 2303 	umull	r2, r3, r2, r3
 8010354:	095b      	lsrs	r3, r3, #5
 8010356:	f003 0207 	and.w	r2, r3, #7
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	4442      	add	r2, r8
 8010360:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8010362:	e1b2      	b.n	80106ca <UART_SetConfig+0x6e2>
 8010364:	40011000 	.word	0x40011000
 8010368:	40011400 	.word	0x40011400
 801036c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	4ad7      	ldr	r2, [pc, #860]	; (80106d4 <UART_SetConfig+0x6ec>)
 8010376:	4293      	cmp	r3, r2
 8010378:	d005      	beq.n	8010386 <UART_SetConfig+0x39e>
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	681b      	ldr	r3, [r3, #0]
 801037e:	4ad6      	ldr	r2, [pc, #856]	; (80106d8 <UART_SetConfig+0x6f0>)
 8010380:	4293      	cmp	r3, r2
 8010382:	f040 80d1 	bne.w	8010528 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8010386:	f7fc fa41 	bl	800c80c <HAL_RCC_GetPCLK2Freq>
 801038a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 801038c:	68bb      	ldr	r3, [r7, #8]
 801038e:	469a      	mov	sl, r3
 8010390:	f04f 0b00 	mov.w	fp, #0
 8010394:	46d0      	mov	r8, sl
 8010396:	46d9      	mov	r9, fp
 8010398:	eb18 0308 	adds.w	r3, r8, r8
 801039c:	eb49 0409 	adc.w	r4, r9, r9
 80103a0:	4698      	mov	r8, r3
 80103a2:	46a1      	mov	r9, r4
 80103a4:	eb18 080a 	adds.w	r8, r8, sl
 80103a8:	eb49 090b 	adc.w	r9, r9, fp
 80103ac:	f04f 0100 	mov.w	r1, #0
 80103b0:	f04f 0200 	mov.w	r2, #0
 80103b4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80103b8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80103bc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80103c0:	4688      	mov	r8, r1
 80103c2:	4691      	mov	r9, r2
 80103c4:	eb1a 0508 	adds.w	r5, sl, r8
 80103c8:	eb4b 0609 	adc.w	r6, fp, r9
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	685b      	ldr	r3, [r3, #4]
 80103d0:	4619      	mov	r1, r3
 80103d2:	f04f 0200 	mov.w	r2, #0
 80103d6:	f04f 0300 	mov.w	r3, #0
 80103da:	f04f 0400 	mov.w	r4, #0
 80103de:	0094      	lsls	r4, r2, #2
 80103e0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80103e4:	008b      	lsls	r3, r1, #2
 80103e6:	461a      	mov	r2, r3
 80103e8:	4623      	mov	r3, r4
 80103ea:	4628      	mov	r0, r5
 80103ec:	4631      	mov	r1, r6
 80103ee:	f7f0 fc63 	bl	8000cb8 <__aeabi_uldivmod>
 80103f2:	4603      	mov	r3, r0
 80103f4:	460c      	mov	r4, r1
 80103f6:	461a      	mov	r2, r3
 80103f8:	4bb8      	ldr	r3, [pc, #736]	; (80106dc <UART_SetConfig+0x6f4>)
 80103fa:	fba3 2302 	umull	r2, r3, r3, r2
 80103fe:	095b      	lsrs	r3, r3, #5
 8010400:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8010404:	68bb      	ldr	r3, [r7, #8]
 8010406:	469b      	mov	fp, r3
 8010408:	f04f 0c00 	mov.w	ip, #0
 801040c:	46d9      	mov	r9, fp
 801040e:	46e2      	mov	sl, ip
 8010410:	eb19 0309 	adds.w	r3, r9, r9
 8010414:	eb4a 040a 	adc.w	r4, sl, sl
 8010418:	4699      	mov	r9, r3
 801041a:	46a2      	mov	sl, r4
 801041c:	eb19 090b 	adds.w	r9, r9, fp
 8010420:	eb4a 0a0c 	adc.w	sl, sl, ip
 8010424:	f04f 0100 	mov.w	r1, #0
 8010428:	f04f 0200 	mov.w	r2, #0
 801042c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010430:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8010434:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010438:	4689      	mov	r9, r1
 801043a:	4692      	mov	sl, r2
 801043c:	eb1b 0509 	adds.w	r5, fp, r9
 8010440:	eb4c 060a 	adc.w	r6, ip, sl
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	685b      	ldr	r3, [r3, #4]
 8010448:	4619      	mov	r1, r3
 801044a:	f04f 0200 	mov.w	r2, #0
 801044e:	f04f 0300 	mov.w	r3, #0
 8010452:	f04f 0400 	mov.w	r4, #0
 8010456:	0094      	lsls	r4, r2, #2
 8010458:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801045c:	008b      	lsls	r3, r1, #2
 801045e:	461a      	mov	r2, r3
 8010460:	4623      	mov	r3, r4
 8010462:	4628      	mov	r0, r5
 8010464:	4631      	mov	r1, r6
 8010466:	f7f0 fc27 	bl	8000cb8 <__aeabi_uldivmod>
 801046a:	4603      	mov	r3, r0
 801046c:	460c      	mov	r4, r1
 801046e:	461a      	mov	r2, r3
 8010470:	4b9a      	ldr	r3, [pc, #616]	; (80106dc <UART_SetConfig+0x6f4>)
 8010472:	fba3 1302 	umull	r1, r3, r3, r2
 8010476:	095b      	lsrs	r3, r3, #5
 8010478:	2164      	movs	r1, #100	; 0x64
 801047a:	fb01 f303 	mul.w	r3, r1, r3
 801047e:	1ad3      	subs	r3, r2, r3
 8010480:	011b      	lsls	r3, r3, #4
 8010482:	3332      	adds	r3, #50	; 0x32
 8010484:	4a95      	ldr	r2, [pc, #596]	; (80106dc <UART_SetConfig+0x6f4>)
 8010486:	fba2 2303 	umull	r2, r3, r2, r3
 801048a:	095b      	lsrs	r3, r3, #5
 801048c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010490:	4498      	add	r8, r3
 8010492:	68bb      	ldr	r3, [r7, #8]
 8010494:	469b      	mov	fp, r3
 8010496:	f04f 0c00 	mov.w	ip, #0
 801049a:	46d9      	mov	r9, fp
 801049c:	46e2      	mov	sl, ip
 801049e:	eb19 0309 	adds.w	r3, r9, r9
 80104a2:	eb4a 040a 	adc.w	r4, sl, sl
 80104a6:	4699      	mov	r9, r3
 80104a8:	46a2      	mov	sl, r4
 80104aa:	eb19 090b 	adds.w	r9, r9, fp
 80104ae:	eb4a 0a0c 	adc.w	sl, sl, ip
 80104b2:	f04f 0100 	mov.w	r1, #0
 80104b6:	f04f 0200 	mov.w	r2, #0
 80104ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80104be:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80104c2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80104c6:	4689      	mov	r9, r1
 80104c8:	4692      	mov	sl, r2
 80104ca:	eb1b 0509 	adds.w	r5, fp, r9
 80104ce:	eb4c 060a 	adc.w	r6, ip, sl
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	685b      	ldr	r3, [r3, #4]
 80104d6:	4619      	mov	r1, r3
 80104d8:	f04f 0200 	mov.w	r2, #0
 80104dc:	f04f 0300 	mov.w	r3, #0
 80104e0:	f04f 0400 	mov.w	r4, #0
 80104e4:	0094      	lsls	r4, r2, #2
 80104e6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80104ea:	008b      	lsls	r3, r1, #2
 80104ec:	461a      	mov	r2, r3
 80104ee:	4623      	mov	r3, r4
 80104f0:	4628      	mov	r0, r5
 80104f2:	4631      	mov	r1, r6
 80104f4:	f7f0 fbe0 	bl	8000cb8 <__aeabi_uldivmod>
 80104f8:	4603      	mov	r3, r0
 80104fa:	460c      	mov	r4, r1
 80104fc:	461a      	mov	r2, r3
 80104fe:	4b77      	ldr	r3, [pc, #476]	; (80106dc <UART_SetConfig+0x6f4>)
 8010500:	fba3 1302 	umull	r1, r3, r3, r2
 8010504:	095b      	lsrs	r3, r3, #5
 8010506:	2164      	movs	r1, #100	; 0x64
 8010508:	fb01 f303 	mul.w	r3, r1, r3
 801050c:	1ad3      	subs	r3, r2, r3
 801050e:	011b      	lsls	r3, r3, #4
 8010510:	3332      	adds	r3, #50	; 0x32
 8010512:	4a72      	ldr	r2, [pc, #456]	; (80106dc <UART_SetConfig+0x6f4>)
 8010514:	fba2 2303 	umull	r2, r3, r2, r3
 8010518:	095b      	lsrs	r3, r3, #5
 801051a:	f003 020f 	and.w	r2, r3, #15
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	681b      	ldr	r3, [r3, #0]
 8010522:	4442      	add	r2, r8
 8010524:	609a      	str	r2, [r3, #8]
 8010526:	e0d0      	b.n	80106ca <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8010528:	f7fc f95c 	bl	800c7e4 <HAL_RCC_GetPCLK1Freq>
 801052c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 801052e:	68bb      	ldr	r3, [r7, #8]
 8010530:	469a      	mov	sl, r3
 8010532:	f04f 0b00 	mov.w	fp, #0
 8010536:	46d0      	mov	r8, sl
 8010538:	46d9      	mov	r9, fp
 801053a:	eb18 0308 	adds.w	r3, r8, r8
 801053e:	eb49 0409 	adc.w	r4, r9, r9
 8010542:	4698      	mov	r8, r3
 8010544:	46a1      	mov	r9, r4
 8010546:	eb18 080a 	adds.w	r8, r8, sl
 801054a:	eb49 090b 	adc.w	r9, r9, fp
 801054e:	f04f 0100 	mov.w	r1, #0
 8010552:	f04f 0200 	mov.w	r2, #0
 8010556:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 801055a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 801055e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8010562:	4688      	mov	r8, r1
 8010564:	4691      	mov	r9, r2
 8010566:	eb1a 0508 	adds.w	r5, sl, r8
 801056a:	eb4b 0609 	adc.w	r6, fp, r9
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	685b      	ldr	r3, [r3, #4]
 8010572:	4619      	mov	r1, r3
 8010574:	f04f 0200 	mov.w	r2, #0
 8010578:	f04f 0300 	mov.w	r3, #0
 801057c:	f04f 0400 	mov.w	r4, #0
 8010580:	0094      	lsls	r4, r2, #2
 8010582:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8010586:	008b      	lsls	r3, r1, #2
 8010588:	461a      	mov	r2, r3
 801058a:	4623      	mov	r3, r4
 801058c:	4628      	mov	r0, r5
 801058e:	4631      	mov	r1, r6
 8010590:	f7f0 fb92 	bl	8000cb8 <__aeabi_uldivmod>
 8010594:	4603      	mov	r3, r0
 8010596:	460c      	mov	r4, r1
 8010598:	461a      	mov	r2, r3
 801059a:	4b50      	ldr	r3, [pc, #320]	; (80106dc <UART_SetConfig+0x6f4>)
 801059c:	fba3 2302 	umull	r2, r3, r3, r2
 80105a0:	095b      	lsrs	r3, r3, #5
 80105a2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80105a6:	68bb      	ldr	r3, [r7, #8]
 80105a8:	469b      	mov	fp, r3
 80105aa:	f04f 0c00 	mov.w	ip, #0
 80105ae:	46d9      	mov	r9, fp
 80105b0:	46e2      	mov	sl, ip
 80105b2:	eb19 0309 	adds.w	r3, r9, r9
 80105b6:	eb4a 040a 	adc.w	r4, sl, sl
 80105ba:	4699      	mov	r9, r3
 80105bc:	46a2      	mov	sl, r4
 80105be:	eb19 090b 	adds.w	r9, r9, fp
 80105c2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80105c6:	f04f 0100 	mov.w	r1, #0
 80105ca:	f04f 0200 	mov.w	r2, #0
 80105ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80105d2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80105d6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80105da:	4689      	mov	r9, r1
 80105dc:	4692      	mov	sl, r2
 80105de:	eb1b 0509 	adds.w	r5, fp, r9
 80105e2:	eb4c 060a 	adc.w	r6, ip, sl
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	685b      	ldr	r3, [r3, #4]
 80105ea:	4619      	mov	r1, r3
 80105ec:	f04f 0200 	mov.w	r2, #0
 80105f0:	f04f 0300 	mov.w	r3, #0
 80105f4:	f04f 0400 	mov.w	r4, #0
 80105f8:	0094      	lsls	r4, r2, #2
 80105fa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80105fe:	008b      	lsls	r3, r1, #2
 8010600:	461a      	mov	r2, r3
 8010602:	4623      	mov	r3, r4
 8010604:	4628      	mov	r0, r5
 8010606:	4631      	mov	r1, r6
 8010608:	f7f0 fb56 	bl	8000cb8 <__aeabi_uldivmod>
 801060c:	4603      	mov	r3, r0
 801060e:	460c      	mov	r4, r1
 8010610:	461a      	mov	r2, r3
 8010612:	4b32      	ldr	r3, [pc, #200]	; (80106dc <UART_SetConfig+0x6f4>)
 8010614:	fba3 1302 	umull	r1, r3, r3, r2
 8010618:	095b      	lsrs	r3, r3, #5
 801061a:	2164      	movs	r1, #100	; 0x64
 801061c:	fb01 f303 	mul.w	r3, r1, r3
 8010620:	1ad3      	subs	r3, r2, r3
 8010622:	011b      	lsls	r3, r3, #4
 8010624:	3332      	adds	r3, #50	; 0x32
 8010626:	4a2d      	ldr	r2, [pc, #180]	; (80106dc <UART_SetConfig+0x6f4>)
 8010628:	fba2 2303 	umull	r2, r3, r2, r3
 801062c:	095b      	lsrs	r3, r3, #5
 801062e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010632:	4498      	add	r8, r3
 8010634:	68bb      	ldr	r3, [r7, #8]
 8010636:	469b      	mov	fp, r3
 8010638:	f04f 0c00 	mov.w	ip, #0
 801063c:	46d9      	mov	r9, fp
 801063e:	46e2      	mov	sl, ip
 8010640:	eb19 0309 	adds.w	r3, r9, r9
 8010644:	eb4a 040a 	adc.w	r4, sl, sl
 8010648:	4699      	mov	r9, r3
 801064a:	46a2      	mov	sl, r4
 801064c:	eb19 090b 	adds.w	r9, r9, fp
 8010650:	eb4a 0a0c 	adc.w	sl, sl, ip
 8010654:	f04f 0100 	mov.w	r1, #0
 8010658:	f04f 0200 	mov.w	r2, #0
 801065c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010660:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8010664:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010668:	4689      	mov	r9, r1
 801066a:	4692      	mov	sl, r2
 801066c:	eb1b 0509 	adds.w	r5, fp, r9
 8010670:	eb4c 060a 	adc.w	r6, ip, sl
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	685b      	ldr	r3, [r3, #4]
 8010678:	4619      	mov	r1, r3
 801067a:	f04f 0200 	mov.w	r2, #0
 801067e:	f04f 0300 	mov.w	r3, #0
 8010682:	f04f 0400 	mov.w	r4, #0
 8010686:	0094      	lsls	r4, r2, #2
 8010688:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801068c:	008b      	lsls	r3, r1, #2
 801068e:	461a      	mov	r2, r3
 8010690:	4623      	mov	r3, r4
 8010692:	4628      	mov	r0, r5
 8010694:	4631      	mov	r1, r6
 8010696:	f7f0 fb0f 	bl	8000cb8 <__aeabi_uldivmod>
 801069a:	4603      	mov	r3, r0
 801069c:	460c      	mov	r4, r1
 801069e:	461a      	mov	r2, r3
 80106a0:	4b0e      	ldr	r3, [pc, #56]	; (80106dc <UART_SetConfig+0x6f4>)
 80106a2:	fba3 1302 	umull	r1, r3, r3, r2
 80106a6:	095b      	lsrs	r3, r3, #5
 80106a8:	2164      	movs	r1, #100	; 0x64
 80106aa:	fb01 f303 	mul.w	r3, r1, r3
 80106ae:	1ad3      	subs	r3, r2, r3
 80106b0:	011b      	lsls	r3, r3, #4
 80106b2:	3332      	adds	r3, #50	; 0x32
 80106b4:	4a09      	ldr	r2, [pc, #36]	; (80106dc <UART_SetConfig+0x6f4>)
 80106b6:	fba2 2303 	umull	r2, r3, r2, r3
 80106ba:	095b      	lsrs	r3, r3, #5
 80106bc:	f003 020f 	and.w	r2, r3, #15
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	681b      	ldr	r3, [r3, #0]
 80106c4:	4442      	add	r2, r8
 80106c6:	609a      	str	r2, [r3, #8]
}
 80106c8:	e7ff      	b.n	80106ca <UART_SetConfig+0x6e2>
 80106ca:	bf00      	nop
 80106cc:	3714      	adds	r7, #20
 80106ce:	46bd      	mov	sp, r7
 80106d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106d4:	40011000 	.word	0x40011000
 80106d8:	40011400 	.word	0x40011400
 80106dc:	51eb851f 	.word	0x51eb851f

080106e0 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80106e0:	b084      	sub	sp, #16
 80106e2:	b480      	push	{r7}
 80106e4:	b085      	sub	sp, #20
 80106e6:	af00      	add	r7, sp, #0
 80106e8:	6078      	str	r0, [r7, #4]
 80106ea:	f107 001c 	add.w	r0, r7, #28
 80106ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80106f2:	2300      	movs	r3, #0
 80106f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80106f6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80106f8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80106fa:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80106fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80106fe:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8010700:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8010702:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8010704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8010706:	431a      	orrs	r2, r3
             Init.ClockDiv
 8010708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 801070a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 801070c:	68fa      	ldr	r2, [r7, #12]
 801070e:	4313      	orrs	r3, r2
 8010710:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	685b      	ldr	r3, [r3, #4]
 8010716:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 801071a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801071e:	68fa      	ldr	r2, [r7, #12]
 8010720:	431a      	orrs	r2, r3
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8010726:	2300      	movs	r3, #0
}
 8010728:	4618      	mov	r0, r3
 801072a:	3714      	adds	r7, #20
 801072c:	46bd      	mov	sp, r7
 801072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010732:	b004      	add	sp, #16
 8010734:	4770      	bx	lr

08010736 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8010736:	b480      	push	{r7}
 8010738:	b083      	sub	sp, #12
 801073a:	af00      	add	r7, sp, #0
 801073c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8010744:	4618      	mov	r0, r3
 8010746:	370c      	adds	r7, #12
 8010748:	46bd      	mov	sp, r7
 801074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801074e:	4770      	bx	lr

08010750 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8010750:	b480      	push	{r7}
 8010752:	b083      	sub	sp, #12
 8010754:	af00      	add	r7, sp, #0
 8010756:	6078      	str	r0, [r7, #4]
 8010758:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 801075a:	683b      	ldr	r3, [r7, #0]
 801075c:	681a      	ldr	r2, [r3, #0]
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010764:	2300      	movs	r3, #0
}
 8010766:	4618      	mov	r0, r3
 8010768:	370c      	adds	r7, #12
 801076a:	46bd      	mov	sp, r7
 801076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010770:	4770      	bx	lr

08010772 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8010772:	b580      	push	{r7, lr}
 8010774:	b082      	sub	sp, #8
 8010776:	af00      	add	r7, sp, #0
 8010778:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	2203      	movs	r2, #3
 801077e:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8010780:	2002      	movs	r0, #2
 8010782:	f7f9 fbc5 	bl	8009f10 <HAL_Delay>
  
  return HAL_OK;
 8010786:	2300      	movs	r3, #0
}
 8010788:	4618      	mov	r0, r3
 801078a:	3708      	adds	r7, #8
 801078c:	46bd      	mov	sp, r7
 801078e:	bd80      	pop	{r7, pc}

08010790 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8010790:	b480      	push	{r7}
 8010792:	b083      	sub	sp, #12
 8010794:	af00      	add	r7, sp, #0
 8010796:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	681b      	ldr	r3, [r3, #0]
 801079c:	f003 0303 	and.w	r3, r3, #3
}
 80107a0:	4618      	mov	r0, r3
 80107a2:	370c      	adds	r7, #12
 80107a4:	46bd      	mov	sp, r7
 80107a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107aa:	4770      	bx	lr

080107ac <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80107ac:	b480      	push	{r7}
 80107ae:	b085      	sub	sp, #20
 80107b0:	af00      	add	r7, sp, #0
 80107b2:	6078      	str	r0, [r7, #4]
 80107b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80107b6:	2300      	movs	r3, #0
 80107b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80107ba:	683b      	ldr	r3, [r7, #0]
 80107bc:	681a      	ldr	r2, [r3, #0]
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80107c2:	683b      	ldr	r3, [r7, #0]
 80107c4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80107c6:	683b      	ldr	r3, [r7, #0]
 80107c8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80107ca:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80107cc:	683b      	ldr	r3, [r7, #0]
 80107ce:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80107d0:	431a      	orrs	r2, r3
                       Command->CPSM);
 80107d2:	683b      	ldr	r3, [r7, #0]
 80107d4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80107d6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80107d8:	68fa      	ldr	r2, [r7, #12]
 80107da:	4313      	orrs	r3, r2
 80107dc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	68db      	ldr	r3, [r3, #12]
 80107e2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80107e6:	f023 030f 	bic.w	r3, r3, #15
 80107ea:	68fa      	ldr	r2, [r7, #12]
 80107ec:	431a      	orrs	r2, r3
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80107f2:	2300      	movs	r3, #0
}
 80107f4:	4618      	mov	r0, r3
 80107f6:	3714      	adds	r7, #20
 80107f8:	46bd      	mov	sp, r7
 80107fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107fe:	4770      	bx	lr

08010800 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8010800:	b480      	push	{r7}
 8010802:	b083      	sub	sp, #12
 8010804:	af00      	add	r7, sp, #0
 8010806:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	691b      	ldr	r3, [r3, #16]
 801080c:	b2db      	uxtb	r3, r3
}
 801080e:	4618      	mov	r0, r3
 8010810:	370c      	adds	r7, #12
 8010812:	46bd      	mov	sp, r7
 8010814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010818:	4770      	bx	lr

0801081a <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 801081a:	b480      	push	{r7}
 801081c:	b085      	sub	sp, #20
 801081e:	af00      	add	r7, sp, #0
 8010820:	6078      	str	r0, [r7, #4]
 8010822:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	3314      	adds	r3, #20
 8010828:	461a      	mov	r2, r3
 801082a:	683b      	ldr	r3, [r7, #0]
 801082c:	4413      	add	r3, r2
 801082e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8010830:	68fb      	ldr	r3, [r7, #12]
 8010832:	681b      	ldr	r3, [r3, #0]
}  
 8010834:	4618      	mov	r0, r3
 8010836:	3714      	adds	r7, #20
 8010838:	46bd      	mov	sp, r7
 801083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801083e:	4770      	bx	lr

08010840 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8010840:	b480      	push	{r7}
 8010842:	b085      	sub	sp, #20
 8010844:	af00      	add	r7, sp, #0
 8010846:	6078      	str	r0, [r7, #4]
 8010848:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801084a:	2300      	movs	r3, #0
 801084c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 801084e:	683b      	ldr	r3, [r7, #0]
 8010850:	681a      	ldr	r2, [r3, #0]
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8010856:	683b      	ldr	r3, [r7, #0]
 8010858:	685a      	ldr	r2, [r3, #4]
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 801085e:	683b      	ldr	r3, [r7, #0]
 8010860:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8010862:	683b      	ldr	r3, [r7, #0]
 8010864:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010866:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8010868:	683b      	ldr	r3, [r7, #0]
 801086a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 801086c:	431a      	orrs	r2, r3
                       Data->DPSM);
 801086e:	683b      	ldr	r3, [r7, #0]
 8010870:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8010872:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010874:	68fa      	ldr	r2, [r7, #12]
 8010876:	4313      	orrs	r3, r2
 8010878:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801087e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8010882:	68fb      	ldr	r3, [r7, #12]
 8010884:	431a      	orrs	r2, r3
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 801088a:	2300      	movs	r3, #0

}
 801088c:	4618      	mov	r0, r3
 801088e:	3714      	adds	r7, #20
 8010890:	46bd      	mov	sp, r7
 8010892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010896:	4770      	bx	lr

08010898 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8010898:	b580      	push	{r7, lr}
 801089a:	b088      	sub	sp, #32
 801089c:	af00      	add	r7, sp, #0
 801089e:	6078      	str	r0, [r7, #4]
 80108a0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80108a2:	683b      	ldr	r3, [r7, #0]
 80108a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80108a6:	2310      	movs	r3, #16
 80108a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80108aa:	2340      	movs	r3, #64	; 0x40
 80108ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80108ae:	2300      	movs	r3, #0
 80108b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80108b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80108b6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80108b8:	f107 0308 	add.w	r3, r7, #8
 80108bc:	4619      	mov	r1, r3
 80108be:	6878      	ldr	r0, [r7, #4]
 80108c0:	f7ff ff74 	bl	80107ac <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80108c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80108c8:	2110      	movs	r1, #16
 80108ca:	6878      	ldr	r0, [r7, #4]
 80108cc:	f000 fa40 	bl	8010d50 <SDMMC_GetCmdResp1>
 80108d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80108d2:	69fb      	ldr	r3, [r7, #28]
}
 80108d4:	4618      	mov	r0, r3
 80108d6:	3720      	adds	r7, #32
 80108d8:	46bd      	mov	sp, r7
 80108da:	bd80      	pop	{r7, pc}

080108dc <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80108dc:	b580      	push	{r7, lr}
 80108de:	b088      	sub	sp, #32
 80108e0:	af00      	add	r7, sp, #0
 80108e2:	6078      	str	r0, [r7, #4]
 80108e4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80108e6:	683b      	ldr	r3, [r7, #0]
 80108e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80108ea:	2311      	movs	r3, #17
 80108ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80108ee:	2340      	movs	r3, #64	; 0x40
 80108f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80108f2:	2300      	movs	r3, #0
 80108f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80108f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80108fa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80108fc:	f107 0308 	add.w	r3, r7, #8
 8010900:	4619      	mov	r1, r3
 8010902:	6878      	ldr	r0, [r7, #4]
 8010904:	f7ff ff52 	bl	80107ac <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8010908:	f241 3288 	movw	r2, #5000	; 0x1388
 801090c:	2111      	movs	r1, #17
 801090e:	6878      	ldr	r0, [r7, #4]
 8010910:	f000 fa1e 	bl	8010d50 <SDMMC_GetCmdResp1>
 8010914:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010916:	69fb      	ldr	r3, [r7, #28]
}
 8010918:	4618      	mov	r0, r3
 801091a:	3720      	adds	r7, #32
 801091c:	46bd      	mov	sp, r7
 801091e:	bd80      	pop	{r7, pc}

08010920 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8010920:	b580      	push	{r7, lr}
 8010922:	b088      	sub	sp, #32
 8010924:	af00      	add	r7, sp, #0
 8010926:	6078      	str	r0, [r7, #4]
 8010928:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801092a:	683b      	ldr	r3, [r7, #0]
 801092c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 801092e:	2312      	movs	r3, #18
 8010930:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010932:	2340      	movs	r3, #64	; 0x40
 8010934:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010936:	2300      	movs	r3, #0
 8010938:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801093a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801093e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010940:	f107 0308 	add.w	r3, r7, #8
 8010944:	4619      	mov	r1, r3
 8010946:	6878      	ldr	r0, [r7, #4]
 8010948:	f7ff ff30 	bl	80107ac <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 801094c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010950:	2112      	movs	r1, #18
 8010952:	6878      	ldr	r0, [r7, #4]
 8010954:	f000 f9fc 	bl	8010d50 <SDMMC_GetCmdResp1>
 8010958:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801095a:	69fb      	ldr	r3, [r7, #28]
}
 801095c:	4618      	mov	r0, r3
 801095e:	3720      	adds	r7, #32
 8010960:	46bd      	mov	sp, r7
 8010962:	bd80      	pop	{r7, pc}

08010964 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8010964:	b580      	push	{r7, lr}
 8010966:	b088      	sub	sp, #32
 8010968:	af00      	add	r7, sp, #0
 801096a:	6078      	str	r0, [r7, #4]
 801096c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801096e:	683b      	ldr	r3, [r7, #0]
 8010970:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8010972:	2318      	movs	r3, #24
 8010974:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010976:	2340      	movs	r3, #64	; 0x40
 8010978:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801097a:	2300      	movs	r3, #0
 801097c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801097e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010982:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010984:	f107 0308 	add.w	r3, r7, #8
 8010988:	4619      	mov	r1, r3
 801098a:	6878      	ldr	r0, [r7, #4]
 801098c:	f7ff ff0e 	bl	80107ac <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8010990:	f241 3288 	movw	r2, #5000	; 0x1388
 8010994:	2118      	movs	r1, #24
 8010996:	6878      	ldr	r0, [r7, #4]
 8010998:	f000 f9da 	bl	8010d50 <SDMMC_GetCmdResp1>
 801099c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801099e:	69fb      	ldr	r3, [r7, #28]
}
 80109a0:	4618      	mov	r0, r3
 80109a2:	3720      	adds	r7, #32
 80109a4:	46bd      	mov	sp, r7
 80109a6:	bd80      	pop	{r7, pc}

080109a8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80109a8:	b580      	push	{r7, lr}
 80109aa:	b088      	sub	sp, #32
 80109ac:	af00      	add	r7, sp, #0
 80109ae:	6078      	str	r0, [r7, #4]
 80109b0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80109b2:	683b      	ldr	r3, [r7, #0]
 80109b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80109b6:	2319      	movs	r3, #25
 80109b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80109ba:	2340      	movs	r3, #64	; 0x40
 80109bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80109be:	2300      	movs	r3, #0
 80109c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80109c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80109c6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80109c8:	f107 0308 	add.w	r3, r7, #8
 80109cc:	4619      	mov	r1, r3
 80109ce:	6878      	ldr	r0, [r7, #4]
 80109d0:	f7ff feec 	bl	80107ac <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80109d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80109d8:	2119      	movs	r1, #25
 80109da:	6878      	ldr	r0, [r7, #4]
 80109dc:	f000 f9b8 	bl	8010d50 <SDMMC_GetCmdResp1>
 80109e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80109e2:	69fb      	ldr	r3, [r7, #28]
}
 80109e4:	4618      	mov	r0, r3
 80109e6:	3720      	adds	r7, #32
 80109e8:	46bd      	mov	sp, r7
 80109ea:	bd80      	pop	{r7, pc}

080109ec <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80109ec:	b580      	push	{r7, lr}
 80109ee:	b088      	sub	sp, #32
 80109f0:	af00      	add	r7, sp, #0
 80109f2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80109f4:	2300      	movs	r3, #0
 80109f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80109f8:	230c      	movs	r3, #12
 80109fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80109fc:	2340      	movs	r3, #64	; 0x40
 80109fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010a00:	2300      	movs	r3, #0
 8010a02:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010a04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010a08:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010a0a:	f107 0308 	add.w	r3, r7, #8
 8010a0e:	4619      	mov	r1, r3
 8010a10:	6878      	ldr	r0, [r7, #4]
 8010a12:	f7ff fecb 	bl	80107ac <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8010a16:	4a05      	ldr	r2, [pc, #20]	; (8010a2c <SDMMC_CmdStopTransfer+0x40>)
 8010a18:	210c      	movs	r1, #12
 8010a1a:	6878      	ldr	r0, [r7, #4]
 8010a1c:	f000 f998 	bl	8010d50 <SDMMC_GetCmdResp1>
 8010a20:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010a22:	69fb      	ldr	r3, [r7, #28]
}
 8010a24:	4618      	mov	r0, r3
 8010a26:	3720      	adds	r7, #32
 8010a28:	46bd      	mov	sp, r7
 8010a2a:	bd80      	pop	{r7, pc}
 8010a2c:	05f5e100 	.word	0x05f5e100

08010a30 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8010a30:	b580      	push	{r7, lr}
 8010a32:	b08a      	sub	sp, #40	; 0x28
 8010a34:	af00      	add	r7, sp, #0
 8010a36:	60f8      	str	r0, [r7, #12]
 8010a38:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8010a3c:	683b      	ldr	r3, [r7, #0]
 8010a3e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8010a40:	2307      	movs	r3, #7
 8010a42:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010a44:	2340      	movs	r3, #64	; 0x40
 8010a46:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010a48:	2300      	movs	r3, #0
 8010a4a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010a4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010a50:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010a52:	f107 0310 	add.w	r3, r7, #16
 8010a56:	4619      	mov	r1, r3
 8010a58:	68f8      	ldr	r0, [r7, #12]
 8010a5a:	f7ff fea7 	bl	80107ac <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8010a5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8010a62:	2107      	movs	r1, #7
 8010a64:	68f8      	ldr	r0, [r7, #12]
 8010a66:	f000 f973 	bl	8010d50 <SDMMC_GetCmdResp1>
 8010a6a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8010a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010a6e:	4618      	mov	r0, r3
 8010a70:	3728      	adds	r7, #40	; 0x28
 8010a72:	46bd      	mov	sp, r7
 8010a74:	bd80      	pop	{r7, pc}

08010a76 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8010a76:	b580      	push	{r7, lr}
 8010a78:	b088      	sub	sp, #32
 8010a7a:	af00      	add	r7, sp, #0
 8010a7c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8010a7e:	2300      	movs	r3, #0
 8010a80:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8010a82:	2300      	movs	r3, #0
 8010a84:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8010a86:	2300      	movs	r3, #0
 8010a88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010a8a:	2300      	movs	r3, #0
 8010a8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010a8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010a92:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010a94:	f107 0308 	add.w	r3, r7, #8
 8010a98:	4619      	mov	r1, r3
 8010a9a:	6878      	ldr	r0, [r7, #4]
 8010a9c:	f7ff fe86 	bl	80107ac <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8010aa0:	6878      	ldr	r0, [r7, #4]
 8010aa2:	f000 f92d 	bl	8010d00 <SDMMC_GetCmdError>
 8010aa6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010aa8:	69fb      	ldr	r3, [r7, #28]
}
 8010aaa:	4618      	mov	r0, r3
 8010aac:	3720      	adds	r7, #32
 8010aae:	46bd      	mov	sp, r7
 8010ab0:	bd80      	pop	{r7, pc}

08010ab2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8010ab2:	b580      	push	{r7, lr}
 8010ab4:	b088      	sub	sp, #32
 8010ab6:	af00      	add	r7, sp, #0
 8010ab8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8010aba:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8010abe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8010ac0:	2308      	movs	r3, #8
 8010ac2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010ac4:	2340      	movs	r3, #64	; 0x40
 8010ac6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010ac8:	2300      	movs	r3, #0
 8010aca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010acc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010ad0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010ad2:	f107 0308 	add.w	r3, r7, #8
 8010ad6:	4619      	mov	r1, r3
 8010ad8:	6878      	ldr	r0, [r7, #4]
 8010ada:	f7ff fe67 	bl	80107ac <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8010ade:	6878      	ldr	r0, [r7, #4]
 8010ae0:	f000 fb16 	bl	8011110 <SDMMC_GetCmdResp7>
 8010ae4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010ae6:	69fb      	ldr	r3, [r7, #28]
}
 8010ae8:	4618      	mov	r0, r3
 8010aea:	3720      	adds	r7, #32
 8010aec:	46bd      	mov	sp, r7
 8010aee:	bd80      	pop	{r7, pc}

08010af0 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010af0:	b580      	push	{r7, lr}
 8010af2:	b088      	sub	sp, #32
 8010af4:	af00      	add	r7, sp, #0
 8010af6:	6078      	str	r0, [r7, #4]
 8010af8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8010afa:	683b      	ldr	r3, [r7, #0]
 8010afc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8010afe:	2337      	movs	r3, #55	; 0x37
 8010b00:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010b02:	2340      	movs	r3, #64	; 0x40
 8010b04:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010b06:	2300      	movs	r3, #0
 8010b08:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010b0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010b0e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010b10:	f107 0308 	add.w	r3, r7, #8
 8010b14:	4619      	mov	r1, r3
 8010b16:	6878      	ldr	r0, [r7, #4]
 8010b18:	f7ff fe48 	bl	80107ac <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8010b1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010b20:	2137      	movs	r1, #55	; 0x37
 8010b22:	6878      	ldr	r0, [r7, #4]
 8010b24:	f000 f914 	bl	8010d50 <SDMMC_GetCmdResp1>
 8010b28:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010b2a:	69fb      	ldr	r3, [r7, #28]
}
 8010b2c:	4618      	mov	r0, r3
 8010b2e:	3720      	adds	r7, #32
 8010b30:	46bd      	mov	sp, r7
 8010b32:	bd80      	pop	{r7, pc}

08010b34 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010b34:	b580      	push	{r7, lr}
 8010b36:	b088      	sub	sp, #32
 8010b38:	af00      	add	r7, sp, #0
 8010b3a:	6078      	str	r0, [r7, #4]
 8010b3c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8010b3e:	683b      	ldr	r3, [r7, #0]
 8010b40:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8010b44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010b48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8010b4a:	2329      	movs	r3, #41	; 0x29
 8010b4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010b4e:	2340      	movs	r3, #64	; 0x40
 8010b50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010b52:	2300      	movs	r3, #0
 8010b54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010b56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010b5a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010b5c:	f107 0308 	add.w	r3, r7, #8
 8010b60:	4619      	mov	r1, r3
 8010b62:	6878      	ldr	r0, [r7, #4]
 8010b64:	f7ff fe22 	bl	80107ac <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8010b68:	6878      	ldr	r0, [r7, #4]
 8010b6a:	f000 fa23 	bl	8010fb4 <SDMMC_GetCmdResp3>
 8010b6e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010b70:	69fb      	ldr	r3, [r7, #28]
}
 8010b72:	4618      	mov	r0, r3
 8010b74:	3720      	adds	r7, #32
 8010b76:	46bd      	mov	sp, r7
 8010b78:	bd80      	pop	{r7, pc}

08010b7a <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8010b7a:	b580      	push	{r7, lr}
 8010b7c:	b088      	sub	sp, #32
 8010b7e:	af00      	add	r7, sp, #0
 8010b80:	6078      	str	r0, [r7, #4]
 8010b82:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8010b84:	683b      	ldr	r3, [r7, #0]
 8010b86:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8010b88:	2306      	movs	r3, #6
 8010b8a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010b8c:	2340      	movs	r3, #64	; 0x40
 8010b8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010b90:	2300      	movs	r3, #0
 8010b92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010b94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010b98:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010b9a:	f107 0308 	add.w	r3, r7, #8
 8010b9e:	4619      	mov	r1, r3
 8010ba0:	6878      	ldr	r0, [r7, #4]
 8010ba2:	f7ff fe03 	bl	80107ac <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8010ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8010baa:	2106      	movs	r1, #6
 8010bac:	6878      	ldr	r0, [r7, #4]
 8010bae:	f000 f8cf 	bl	8010d50 <SDMMC_GetCmdResp1>
 8010bb2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010bb4:	69fb      	ldr	r3, [r7, #28]
}
 8010bb6:	4618      	mov	r0, r3
 8010bb8:	3720      	adds	r7, #32
 8010bba:	46bd      	mov	sp, r7
 8010bbc:	bd80      	pop	{r7, pc}

08010bbe <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8010bbe:	b580      	push	{r7, lr}
 8010bc0:	b088      	sub	sp, #32
 8010bc2:	af00      	add	r7, sp, #0
 8010bc4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8010bc6:	2300      	movs	r3, #0
 8010bc8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8010bca:	2333      	movs	r3, #51	; 0x33
 8010bcc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010bce:	2340      	movs	r3, #64	; 0x40
 8010bd0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010bd2:	2300      	movs	r3, #0
 8010bd4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010bd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010bda:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010bdc:	f107 0308 	add.w	r3, r7, #8
 8010be0:	4619      	mov	r1, r3
 8010be2:	6878      	ldr	r0, [r7, #4]
 8010be4:	f7ff fde2 	bl	80107ac <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8010be8:	f241 3288 	movw	r2, #5000	; 0x1388
 8010bec:	2133      	movs	r1, #51	; 0x33
 8010bee:	6878      	ldr	r0, [r7, #4]
 8010bf0:	f000 f8ae 	bl	8010d50 <SDMMC_GetCmdResp1>
 8010bf4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010bf6:	69fb      	ldr	r3, [r7, #28]
}
 8010bf8:	4618      	mov	r0, r3
 8010bfa:	3720      	adds	r7, #32
 8010bfc:	46bd      	mov	sp, r7
 8010bfe:	bd80      	pop	{r7, pc}

08010c00 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8010c00:	b580      	push	{r7, lr}
 8010c02:	b088      	sub	sp, #32
 8010c04:	af00      	add	r7, sp, #0
 8010c06:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8010c08:	2300      	movs	r3, #0
 8010c0a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8010c0c:	2302      	movs	r3, #2
 8010c0e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8010c10:	23c0      	movs	r3, #192	; 0xc0
 8010c12:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010c14:	2300      	movs	r3, #0
 8010c16:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010c18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010c1c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010c1e:	f107 0308 	add.w	r3, r7, #8
 8010c22:	4619      	mov	r1, r3
 8010c24:	6878      	ldr	r0, [r7, #4]
 8010c26:	f7ff fdc1 	bl	80107ac <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8010c2a:	6878      	ldr	r0, [r7, #4]
 8010c2c:	f000 f97c 	bl	8010f28 <SDMMC_GetCmdResp2>
 8010c30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010c32:	69fb      	ldr	r3, [r7, #28]
}
 8010c34:	4618      	mov	r0, r3
 8010c36:	3720      	adds	r7, #32
 8010c38:	46bd      	mov	sp, r7
 8010c3a:	bd80      	pop	{r7, pc}

08010c3c <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010c3c:	b580      	push	{r7, lr}
 8010c3e:	b088      	sub	sp, #32
 8010c40:	af00      	add	r7, sp, #0
 8010c42:	6078      	str	r0, [r7, #4]
 8010c44:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8010c46:	683b      	ldr	r3, [r7, #0]
 8010c48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8010c4a:	2309      	movs	r3, #9
 8010c4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8010c4e:	23c0      	movs	r3, #192	; 0xc0
 8010c50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010c52:	2300      	movs	r3, #0
 8010c54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010c56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010c5a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010c5c:	f107 0308 	add.w	r3, r7, #8
 8010c60:	4619      	mov	r1, r3
 8010c62:	6878      	ldr	r0, [r7, #4]
 8010c64:	f7ff fda2 	bl	80107ac <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8010c68:	6878      	ldr	r0, [r7, #4]
 8010c6a:	f000 f95d 	bl	8010f28 <SDMMC_GetCmdResp2>
 8010c6e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010c70:	69fb      	ldr	r3, [r7, #28]
}
 8010c72:	4618      	mov	r0, r3
 8010c74:	3720      	adds	r7, #32
 8010c76:	46bd      	mov	sp, r7
 8010c78:	bd80      	pop	{r7, pc}

08010c7a <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8010c7a:	b580      	push	{r7, lr}
 8010c7c:	b088      	sub	sp, #32
 8010c7e:	af00      	add	r7, sp, #0
 8010c80:	6078      	str	r0, [r7, #4]
 8010c82:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8010c84:	2300      	movs	r3, #0
 8010c86:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8010c88:	2303      	movs	r3, #3
 8010c8a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010c8c:	2340      	movs	r3, #64	; 0x40
 8010c8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010c90:	2300      	movs	r3, #0
 8010c92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010c94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010c98:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010c9a:	f107 0308 	add.w	r3, r7, #8
 8010c9e:	4619      	mov	r1, r3
 8010ca0:	6878      	ldr	r0, [r7, #4]
 8010ca2:	f7ff fd83 	bl	80107ac <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8010ca6:	683a      	ldr	r2, [r7, #0]
 8010ca8:	2103      	movs	r1, #3
 8010caa:	6878      	ldr	r0, [r7, #4]
 8010cac:	f000 f9bc 	bl	8011028 <SDMMC_GetCmdResp6>
 8010cb0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010cb2:	69fb      	ldr	r3, [r7, #28]
}
 8010cb4:	4618      	mov	r0, r3
 8010cb6:	3720      	adds	r7, #32
 8010cb8:	46bd      	mov	sp, r7
 8010cba:	bd80      	pop	{r7, pc}

08010cbc <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010cbc:	b580      	push	{r7, lr}
 8010cbe:	b088      	sub	sp, #32
 8010cc0:	af00      	add	r7, sp, #0
 8010cc2:	6078      	str	r0, [r7, #4]
 8010cc4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8010cc6:	683b      	ldr	r3, [r7, #0]
 8010cc8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8010cca:	230d      	movs	r3, #13
 8010ccc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010cce:	2340      	movs	r3, #64	; 0x40
 8010cd0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010cd2:	2300      	movs	r3, #0
 8010cd4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010cd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010cda:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010cdc:	f107 0308 	add.w	r3, r7, #8
 8010ce0:	4619      	mov	r1, r3
 8010ce2:	6878      	ldr	r0, [r7, #4]
 8010ce4:	f7ff fd62 	bl	80107ac <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8010ce8:	f241 3288 	movw	r2, #5000	; 0x1388
 8010cec:	210d      	movs	r1, #13
 8010cee:	6878      	ldr	r0, [r7, #4]
 8010cf0:	f000 f82e 	bl	8010d50 <SDMMC_GetCmdResp1>
 8010cf4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010cf6:	69fb      	ldr	r3, [r7, #28]
}
 8010cf8:	4618      	mov	r0, r3
 8010cfa:	3720      	adds	r7, #32
 8010cfc:	46bd      	mov	sp, r7
 8010cfe:	bd80      	pop	{r7, pc}

08010d00 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8010d00:	b490      	push	{r4, r7}
 8010d02:	b082      	sub	sp, #8
 8010d04:	af00      	add	r7, sp, #0
 8010d06:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010d08:	4b0f      	ldr	r3, [pc, #60]	; (8010d48 <SDMMC_GetCmdError+0x48>)
 8010d0a:	681b      	ldr	r3, [r3, #0]
 8010d0c:	4a0f      	ldr	r2, [pc, #60]	; (8010d4c <SDMMC_GetCmdError+0x4c>)
 8010d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8010d12:	0a5b      	lsrs	r3, r3, #9
 8010d14:	f241 3288 	movw	r2, #5000	; 0x1388
 8010d18:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010d1c:	4623      	mov	r3, r4
 8010d1e:	1e5c      	subs	r4, r3, #1
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d102      	bne.n	8010d2a <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010d24:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010d28:	e009      	b.n	8010d3e <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d0f2      	beq.n	8010d1c <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	22c5      	movs	r2, #197	; 0xc5
 8010d3a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8010d3c:	2300      	movs	r3, #0
}
 8010d3e:	4618      	mov	r0, r3
 8010d40:	3708      	adds	r7, #8
 8010d42:	46bd      	mov	sp, r7
 8010d44:	bc90      	pop	{r4, r7}
 8010d46:	4770      	bx	lr
 8010d48:	20000000 	.word	0x20000000
 8010d4c:	10624dd3 	.word	0x10624dd3

08010d50 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8010d50:	b590      	push	{r4, r7, lr}
 8010d52:	b087      	sub	sp, #28
 8010d54:	af00      	add	r7, sp, #0
 8010d56:	60f8      	str	r0, [r7, #12]
 8010d58:	460b      	mov	r3, r1
 8010d5a:	607a      	str	r2, [r7, #4]
 8010d5c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8010d5e:	4b6f      	ldr	r3, [pc, #444]	; (8010f1c <SDMMC_GetCmdResp1+0x1cc>)
 8010d60:	681b      	ldr	r3, [r3, #0]
 8010d62:	4a6f      	ldr	r2, [pc, #444]	; (8010f20 <SDMMC_GetCmdResp1+0x1d0>)
 8010d64:	fba2 2303 	umull	r2, r3, r2, r3
 8010d68:	0a5b      	lsrs	r3, r3, #9
 8010d6a:	687a      	ldr	r2, [r7, #4]
 8010d6c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010d70:	4623      	mov	r3, r4
 8010d72:	1e5c      	subs	r4, r3, #1
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d102      	bne.n	8010d7e <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010d78:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010d7c:	e0c9      	b.n	8010f12 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8010d7e:	68fb      	ldr	r3, [r7, #12]
 8010d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d82:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010d84:	697b      	ldr	r3, [r7, #20]
 8010d86:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	d0f0      	beq.n	8010d70 <SDMMC_GetCmdResp1+0x20>
 8010d8e:	697b      	ldr	r3, [r7, #20]
 8010d90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d1eb      	bne.n	8010d70 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010d98:	68fb      	ldr	r3, [r7, #12]
 8010d9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d9c:	f003 0304 	and.w	r3, r3, #4
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	d004      	beq.n	8010dae <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010da4:	68fb      	ldr	r3, [r7, #12]
 8010da6:	2204      	movs	r2, #4
 8010da8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010daa:	2304      	movs	r3, #4
 8010dac:	e0b1      	b.n	8010f12 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010dae:	68fb      	ldr	r3, [r7, #12]
 8010db0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010db2:	f003 0301 	and.w	r3, r3, #1
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d004      	beq.n	8010dc4 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010dba:	68fb      	ldr	r3, [r7, #12]
 8010dbc:	2201      	movs	r2, #1
 8010dbe:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010dc0:	2301      	movs	r3, #1
 8010dc2:	e0a6      	b.n	8010f12 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010dc4:	68fb      	ldr	r3, [r7, #12]
 8010dc6:	22c5      	movs	r2, #197	; 0xc5
 8010dc8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8010dca:	68f8      	ldr	r0, [r7, #12]
 8010dcc:	f7ff fd18 	bl	8010800 <SDIO_GetCommandResponse>
 8010dd0:	4603      	mov	r3, r0
 8010dd2:	461a      	mov	r2, r3
 8010dd4:	7afb      	ldrb	r3, [r7, #11]
 8010dd6:	4293      	cmp	r3, r2
 8010dd8:	d001      	beq.n	8010dde <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010dda:	2301      	movs	r3, #1
 8010ddc:	e099      	b.n	8010f12 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8010dde:	2100      	movs	r1, #0
 8010de0:	68f8      	ldr	r0, [r7, #12]
 8010de2:	f7ff fd1a 	bl	801081a <SDIO_GetResponse>
 8010de6:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8010de8:	693a      	ldr	r2, [r7, #16]
 8010dea:	4b4e      	ldr	r3, [pc, #312]	; (8010f24 <SDMMC_GetCmdResp1+0x1d4>)
 8010dec:	4013      	ands	r3, r2
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d101      	bne.n	8010df6 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8010df2:	2300      	movs	r3, #0
 8010df4:	e08d      	b.n	8010f12 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8010df6:	693b      	ldr	r3, [r7, #16]
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	da02      	bge.n	8010e02 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8010dfc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8010e00:	e087      	b.n	8010f12 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8010e02:	693b      	ldr	r3, [r7, #16]
 8010e04:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d001      	beq.n	8010e10 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8010e0c:	2340      	movs	r3, #64	; 0x40
 8010e0e:	e080      	b.n	8010f12 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8010e10:	693b      	ldr	r3, [r7, #16]
 8010e12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d001      	beq.n	8010e1e <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8010e1a:	2380      	movs	r3, #128	; 0x80
 8010e1c:	e079      	b.n	8010f12 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8010e1e:	693b      	ldr	r3, [r7, #16]
 8010e20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d002      	beq.n	8010e2e <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8010e28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010e2c:	e071      	b.n	8010f12 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8010e2e:	693b      	ldr	r3, [r7, #16]
 8010e30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d002      	beq.n	8010e3e <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8010e38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010e3c:	e069      	b.n	8010f12 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8010e3e:	693b      	ldr	r3, [r7, #16]
 8010e40:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d002      	beq.n	8010e4e <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8010e48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010e4c:	e061      	b.n	8010f12 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8010e4e:	693b      	ldr	r3, [r7, #16]
 8010e50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d002      	beq.n	8010e5e <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8010e58:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010e5c:	e059      	b.n	8010f12 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8010e5e:	693b      	ldr	r3, [r7, #16]
 8010e60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d002      	beq.n	8010e6e <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010e68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010e6c:	e051      	b.n	8010f12 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8010e6e:	693b      	ldr	r3, [r7, #16]
 8010e70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	d002      	beq.n	8010e7e <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010e78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010e7c:	e049      	b.n	8010f12 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8010e7e:	693b      	ldr	r3, [r7, #16]
 8010e80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	d002      	beq.n	8010e8e <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8010e88:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010e8c:	e041      	b.n	8010f12 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8010e8e:	693b      	ldr	r3, [r7, #16]
 8010e90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d002      	beq.n	8010e9e <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8010e98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010e9c:	e039      	b.n	8010f12 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8010e9e:	693b      	ldr	r3, [r7, #16]
 8010ea0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d002      	beq.n	8010eae <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8010ea8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8010eac:	e031      	b.n	8010f12 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8010eae:	693b      	ldr	r3, [r7, #16]
 8010eb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	d002      	beq.n	8010ebe <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8010eb8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8010ebc:	e029      	b.n	8010f12 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8010ebe:	693b      	ldr	r3, [r7, #16]
 8010ec0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d002      	beq.n	8010ece <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8010ec8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8010ecc:	e021      	b.n	8010f12 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8010ece:	693b      	ldr	r3, [r7, #16]
 8010ed0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d002      	beq.n	8010ede <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8010ed8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8010edc:	e019      	b.n	8010f12 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8010ede:	693b      	ldr	r3, [r7, #16]
 8010ee0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d002      	beq.n	8010eee <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8010ee8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8010eec:	e011      	b.n	8010f12 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8010eee:	693b      	ldr	r3, [r7, #16]
 8010ef0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010ef4:	2b00      	cmp	r3, #0
 8010ef6:	d002      	beq.n	8010efe <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8010ef8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8010efc:	e009      	b.n	8010f12 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8010efe:	693b      	ldr	r3, [r7, #16]
 8010f00:	f003 0308 	and.w	r3, r3, #8
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d002      	beq.n	8010f0e <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8010f08:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8010f0c:	e001      	b.n	8010f12 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010f0e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8010f12:	4618      	mov	r0, r3
 8010f14:	371c      	adds	r7, #28
 8010f16:	46bd      	mov	sp, r7
 8010f18:	bd90      	pop	{r4, r7, pc}
 8010f1a:	bf00      	nop
 8010f1c:	20000000 	.word	0x20000000
 8010f20:	10624dd3 	.word	0x10624dd3
 8010f24:	fdffe008 	.word	0xfdffe008

08010f28 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8010f28:	b490      	push	{r4, r7}
 8010f2a:	b084      	sub	sp, #16
 8010f2c:	af00      	add	r7, sp, #0
 8010f2e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010f30:	4b1e      	ldr	r3, [pc, #120]	; (8010fac <SDMMC_GetCmdResp2+0x84>)
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	4a1e      	ldr	r2, [pc, #120]	; (8010fb0 <SDMMC_GetCmdResp2+0x88>)
 8010f36:	fba2 2303 	umull	r2, r3, r2, r3
 8010f3a:	0a5b      	lsrs	r3, r3, #9
 8010f3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010f40:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010f44:	4623      	mov	r3, r4
 8010f46:	1e5c      	subs	r4, r3, #1
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	d102      	bne.n	8010f52 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010f4c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010f50:	e026      	b.n	8010fa0 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f56:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010f58:	68fb      	ldr	r3, [r7, #12]
 8010f5a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	d0f0      	beq.n	8010f44 <SDMMC_GetCmdResp2+0x1c>
 8010f62:	68fb      	ldr	r3, [r7, #12]
 8010f64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	d1eb      	bne.n	8010f44 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f70:	f003 0304 	and.w	r3, r3, #4
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d004      	beq.n	8010f82 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	2204      	movs	r2, #4
 8010f7c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010f7e:	2304      	movs	r3, #4
 8010f80:	e00e      	b.n	8010fa0 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f86:	f003 0301 	and.w	r3, r3, #1
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d004      	beq.n	8010f98 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	2201      	movs	r2, #1
 8010f92:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010f94:	2301      	movs	r3, #1
 8010f96:	e003      	b.n	8010fa0 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	22c5      	movs	r2, #197	; 0xc5
 8010f9c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8010f9e:	2300      	movs	r3, #0
}
 8010fa0:	4618      	mov	r0, r3
 8010fa2:	3710      	adds	r7, #16
 8010fa4:	46bd      	mov	sp, r7
 8010fa6:	bc90      	pop	{r4, r7}
 8010fa8:	4770      	bx	lr
 8010faa:	bf00      	nop
 8010fac:	20000000 	.word	0x20000000
 8010fb0:	10624dd3 	.word	0x10624dd3

08010fb4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8010fb4:	b490      	push	{r4, r7}
 8010fb6:	b084      	sub	sp, #16
 8010fb8:	af00      	add	r7, sp, #0
 8010fba:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010fbc:	4b18      	ldr	r3, [pc, #96]	; (8011020 <SDMMC_GetCmdResp3+0x6c>)
 8010fbe:	681b      	ldr	r3, [r3, #0]
 8010fc0:	4a18      	ldr	r2, [pc, #96]	; (8011024 <SDMMC_GetCmdResp3+0x70>)
 8010fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8010fc6:	0a5b      	lsrs	r3, r3, #9
 8010fc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8010fcc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010fd0:	4623      	mov	r3, r4
 8010fd2:	1e5c      	subs	r4, r3, #1
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	d102      	bne.n	8010fde <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010fd8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010fdc:	e01b      	b.n	8011016 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010fe2:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010fe4:	68fb      	ldr	r3, [r7, #12]
 8010fe6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d0f0      	beq.n	8010fd0 <SDMMC_GetCmdResp3+0x1c>
 8010fee:	68fb      	ldr	r3, [r7, #12]
 8010ff0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	d1eb      	bne.n	8010fd0 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ffc:	f003 0304 	and.w	r3, r3, #4
 8011000:	2b00      	cmp	r3, #0
 8011002:	d004      	beq.n	801100e <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	2204      	movs	r2, #4
 8011008:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801100a:	2304      	movs	r3, #4
 801100c:	e003      	b.n	8011016 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	22c5      	movs	r2, #197	; 0xc5
 8011012:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8011014:	2300      	movs	r3, #0
}
 8011016:	4618      	mov	r0, r3
 8011018:	3710      	adds	r7, #16
 801101a:	46bd      	mov	sp, r7
 801101c:	bc90      	pop	{r4, r7}
 801101e:	4770      	bx	lr
 8011020:	20000000 	.word	0x20000000
 8011024:	10624dd3 	.word	0x10624dd3

08011028 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8011028:	b590      	push	{r4, r7, lr}
 801102a:	b087      	sub	sp, #28
 801102c:	af00      	add	r7, sp, #0
 801102e:	60f8      	str	r0, [r7, #12]
 8011030:	460b      	mov	r3, r1
 8011032:	607a      	str	r2, [r7, #4]
 8011034:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011036:	4b34      	ldr	r3, [pc, #208]	; (8011108 <SDMMC_GetCmdResp6+0xe0>)
 8011038:	681b      	ldr	r3, [r3, #0]
 801103a:	4a34      	ldr	r2, [pc, #208]	; (801110c <SDMMC_GetCmdResp6+0xe4>)
 801103c:	fba2 2303 	umull	r2, r3, r2, r3
 8011040:	0a5b      	lsrs	r3, r3, #9
 8011042:	f241 3288 	movw	r2, #5000	; 0x1388
 8011046:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 801104a:	4623      	mov	r3, r4
 801104c:	1e5c      	subs	r4, r3, #1
 801104e:	2b00      	cmp	r3, #0
 8011050:	d102      	bne.n	8011058 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011052:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011056:	e052      	b.n	80110fe <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8011058:	68fb      	ldr	r3, [r7, #12]
 801105a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801105c:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801105e:	697b      	ldr	r3, [r7, #20]
 8011060:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8011064:	2b00      	cmp	r3, #0
 8011066:	d0f0      	beq.n	801104a <SDMMC_GetCmdResp6+0x22>
 8011068:	697b      	ldr	r3, [r7, #20]
 801106a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801106e:	2b00      	cmp	r3, #0
 8011070:	d1eb      	bne.n	801104a <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8011072:	68fb      	ldr	r3, [r7, #12]
 8011074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011076:	f003 0304 	and.w	r3, r3, #4
 801107a:	2b00      	cmp	r3, #0
 801107c:	d004      	beq.n	8011088 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 801107e:	68fb      	ldr	r3, [r7, #12]
 8011080:	2204      	movs	r2, #4
 8011082:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011084:	2304      	movs	r3, #4
 8011086:	e03a      	b.n	80110fe <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8011088:	68fb      	ldr	r3, [r7, #12]
 801108a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801108c:	f003 0301 	and.w	r3, r3, #1
 8011090:	2b00      	cmp	r3, #0
 8011092:	d004      	beq.n	801109e <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8011094:	68fb      	ldr	r3, [r7, #12]
 8011096:	2201      	movs	r2, #1
 8011098:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801109a:	2301      	movs	r3, #1
 801109c:	e02f      	b.n	80110fe <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 801109e:	68f8      	ldr	r0, [r7, #12]
 80110a0:	f7ff fbae 	bl	8010800 <SDIO_GetCommandResponse>
 80110a4:	4603      	mov	r3, r0
 80110a6:	461a      	mov	r2, r3
 80110a8:	7afb      	ldrb	r3, [r7, #11]
 80110aa:	4293      	cmp	r3, r2
 80110ac:	d001      	beq.n	80110b2 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80110ae:	2301      	movs	r3, #1
 80110b0:	e025      	b.n	80110fe <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80110b2:	68fb      	ldr	r3, [r7, #12]
 80110b4:	22c5      	movs	r2, #197	; 0xc5
 80110b6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80110b8:	2100      	movs	r1, #0
 80110ba:	68f8      	ldr	r0, [r7, #12]
 80110bc:	f7ff fbad 	bl	801081a <SDIO_GetResponse>
 80110c0:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80110c2:	693b      	ldr	r3, [r7, #16]
 80110c4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	d106      	bne.n	80110da <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80110cc:	693b      	ldr	r3, [r7, #16]
 80110ce:	0c1b      	lsrs	r3, r3, #16
 80110d0:	b29a      	uxth	r2, r3
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80110d6:	2300      	movs	r3, #0
 80110d8:	e011      	b.n	80110fe <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80110da:	693b      	ldr	r3, [r7, #16]
 80110dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	d002      	beq.n	80110ea <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80110e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80110e8:	e009      	b.n	80110fe <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80110ea:	693b      	ldr	r3, [r7, #16]
 80110ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d002      	beq.n	80110fa <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80110f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80110f8:	e001      	b.n	80110fe <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80110fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80110fe:	4618      	mov	r0, r3
 8011100:	371c      	adds	r7, #28
 8011102:	46bd      	mov	sp, r7
 8011104:	bd90      	pop	{r4, r7, pc}
 8011106:	bf00      	nop
 8011108:	20000000 	.word	0x20000000
 801110c:	10624dd3 	.word	0x10624dd3

08011110 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8011110:	b490      	push	{r4, r7}
 8011112:	b084      	sub	sp, #16
 8011114:	af00      	add	r7, sp, #0
 8011116:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011118:	4b21      	ldr	r3, [pc, #132]	; (80111a0 <SDMMC_GetCmdResp7+0x90>)
 801111a:	681b      	ldr	r3, [r3, #0]
 801111c:	4a21      	ldr	r2, [pc, #132]	; (80111a4 <SDMMC_GetCmdResp7+0x94>)
 801111e:	fba2 2303 	umull	r2, r3, r2, r3
 8011122:	0a5b      	lsrs	r3, r3, #9
 8011124:	f241 3288 	movw	r2, #5000	; 0x1388
 8011128:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 801112c:	4623      	mov	r3, r4
 801112e:	1e5c      	subs	r4, r3, #1
 8011130:	2b00      	cmp	r3, #0
 8011132:	d102      	bne.n	801113a <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011134:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011138:	e02c      	b.n	8011194 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801113e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8011140:	68fb      	ldr	r3, [r7, #12]
 8011142:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8011146:	2b00      	cmp	r3, #0
 8011148:	d0f0      	beq.n	801112c <SDMMC_GetCmdResp7+0x1c>
 801114a:	68fb      	ldr	r3, [r7, #12]
 801114c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8011150:	2b00      	cmp	r3, #0
 8011152:	d1eb      	bne.n	801112c <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011158:	f003 0304 	and.w	r3, r3, #4
 801115c:	2b00      	cmp	r3, #0
 801115e:	d004      	beq.n	801116a <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	2204      	movs	r2, #4
 8011164:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011166:	2304      	movs	r3, #4
 8011168:	e014      	b.n	8011194 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801116e:	f003 0301 	and.w	r3, r3, #1
 8011172:	2b00      	cmp	r3, #0
 8011174:	d004      	beq.n	8011180 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	2201      	movs	r2, #1
 801117a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801117c:	2301      	movs	r3, #1
 801117e:	e009      	b.n	8011194 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011188:	2b00      	cmp	r3, #0
 801118a:	d002      	beq.n	8011192 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	2240      	movs	r2, #64	; 0x40
 8011190:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8011192:	2300      	movs	r3, #0
  
}
 8011194:	4618      	mov	r0, r3
 8011196:	3710      	adds	r7, #16
 8011198:	46bd      	mov	sp, r7
 801119a:	bc90      	pop	{r4, r7}
 801119c:	4770      	bx	lr
 801119e:	bf00      	nop
 80111a0:	20000000 	.word	0x20000000
 80111a4:	10624dd3 	.word	0x10624dd3

080111a8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80111a8:	b580      	push	{r7, lr}
 80111aa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80111ac:	4904      	ldr	r1, [pc, #16]	; (80111c0 <MX_FATFS_Init+0x18>)
 80111ae:	4805      	ldr	r0, [pc, #20]	; (80111c4 <MX_FATFS_Init+0x1c>)
 80111b0:	f003 fb9c 	bl	80148ec <FATFS_LinkDriver>
 80111b4:	4603      	mov	r3, r0
 80111b6:	461a      	mov	r2, r3
 80111b8:	4b03      	ldr	r3, [pc, #12]	; (80111c8 <MX_FATFS_Init+0x20>)
 80111ba:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80111bc:	bf00      	nop
 80111be:	bd80      	pop	{r7, pc}
 80111c0:	20047c38 	.word	0x20047c38
 80111c4:	080191a8 	.word	0x080191a8
 80111c8:	20047c34 	.word	0x20047c34

080111cc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80111cc:	b580      	push	{r7, lr}
 80111ce:	b082      	sub	sp, #8
 80111d0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80111d2:	2300      	movs	r3, #0
 80111d4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80111d6:	f000 f896 	bl	8011306 <BSP_SD_IsDetected>
 80111da:	4603      	mov	r3, r0
 80111dc:	2b01      	cmp	r3, #1
 80111de:	d001      	beq.n	80111e4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80111e0:	2301      	movs	r3, #1
 80111e2:	e012      	b.n	801120a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80111e4:	480b      	ldr	r0, [pc, #44]	; (8011214 <BSP_SD_Init+0x48>)
 80111e6:	f7fb ffa5 	bl	800d134 <HAL_SD_Init>
 80111ea:	4603      	mov	r3, r0
 80111ec:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80111ee:	79fb      	ldrb	r3, [r7, #7]
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d109      	bne.n	8011208 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80111f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80111f8:	4806      	ldr	r0, [pc, #24]	; (8011214 <BSP_SD_Init+0x48>)
 80111fa:	f7fc fd4f 	bl	800dc9c <HAL_SD_ConfigWideBusOperation>
 80111fe:	4603      	mov	r3, r0
 8011200:	2b00      	cmp	r3, #0
 8011202:	d001      	beq.n	8011208 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8011204:	2301      	movs	r3, #1
 8011206:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8011208:	79fb      	ldrb	r3, [r7, #7]
}
 801120a:	4618      	mov	r0, r3
 801120c:	3708      	adds	r7, #8
 801120e:	46bd      	mov	sp, r7
 8011210:	bd80      	pop	{r7, pc}
 8011212:	bf00      	nop
 8011214:	20047a34 	.word	0x20047a34

08011218 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8011218:	b580      	push	{r7, lr}
 801121a:	b086      	sub	sp, #24
 801121c:	af00      	add	r7, sp, #0
 801121e:	60f8      	str	r0, [r7, #12]
 8011220:	60b9      	str	r1, [r7, #8]
 8011222:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8011224:	2300      	movs	r3, #0
 8011226:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	68ba      	ldr	r2, [r7, #8]
 801122c:	68f9      	ldr	r1, [r7, #12]
 801122e:	4806      	ldr	r0, [pc, #24]	; (8011248 <BSP_SD_ReadBlocks_DMA+0x30>)
 8011230:	f7fc f810 	bl	800d254 <HAL_SD_ReadBlocks_DMA>
 8011234:	4603      	mov	r3, r0
 8011236:	2b00      	cmp	r3, #0
 8011238:	d001      	beq.n	801123e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801123a:	2301      	movs	r3, #1
 801123c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801123e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011240:	4618      	mov	r0, r3
 8011242:	3718      	adds	r7, #24
 8011244:	46bd      	mov	sp, r7
 8011246:	bd80      	pop	{r7, pc}
 8011248:	20047a34 	.word	0x20047a34

0801124c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 801124c:	b580      	push	{r7, lr}
 801124e:	b086      	sub	sp, #24
 8011250:	af00      	add	r7, sp, #0
 8011252:	60f8      	str	r0, [r7, #12]
 8011254:	60b9      	str	r1, [r7, #8]
 8011256:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8011258:	2300      	movs	r3, #0
 801125a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	68ba      	ldr	r2, [r7, #8]
 8011260:	68f9      	ldr	r1, [r7, #12]
 8011262:	4806      	ldr	r0, [pc, #24]	; (801127c <BSP_SD_WriteBlocks_DMA+0x30>)
 8011264:	f7fc f8de 	bl	800d424 <HAL_SD_WriteBlocks_DMA>
 8011268:	4603      	mov	r3, r0
 801126a:	2b00      	cmp	r3, #0
 801126c:	d001      	beq.n	8011272 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801126e:	2301      	movs	r3, #1
 8011270:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8011272:	7dfb      	ldrb	r3, [r7, #23]
}
 8011274:	4618      	mov	r0, r3
 8011276:	3718      	adds	r7, #24
 8011278:	46bd      	mov	sp, r7
 801127a:	bd80      	pop	{r7, pc}
 801127c:	20047a34 	.word	0x20047a34

08011280 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8011280:	b580      	push	{r7, lr}
 8011282:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8011284:	4805      	ldr	r0, [pc, #20]	; (801129c <BSP_SD_GetCardState+0x1c>)
 8011286:	f7fc fd85 	bl	800dd94 <HAL_SD_GetCardState>
 801128a:	4603      	mov	r3, r0
 801128c:	2b04      	cmp	r3, #4
 801128e:	bf14      	ite	ne
 8011290:	2301      	movne	r3, #1
 8011292:	2300      	moveq	r3, #0
 8011294:	b2db      	uxtb	r3, r3
}
 8011296:	4618      	mov	r0, r3
 8011298:	bd80      	pop	{r7, pc}
 801129a:	bf00      	nop
 801129c:	20047a34 	.word	0x20047a34

080112a0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80112a0:	b580      	push	{r7, lr}
 80112a2:	b082      	sub	sp, #8
 80112a4:	af00      	add	r7, sp, #0
 80112a6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80112a8:	6879      	ldr	r1, [r7, #4]
 80112aa:	4803      	ldr	r0, [pc, #12]	; (80112b8 <BSP_SD_GetCardInfo+0x18>)
 80112ac:	f7fc fcca 	bl	800dc44 <HAL_SD_GetCardInfo>
}
 80112b0:	bf00      	nop
 80112b2:	3708      	adds	r7, #8
 80112b4:	46bd      	mov	sp, r7
 80112b6:	bd80      	pop	{r7, pc}
 80112b8:	20047a34 	.word	0x20047a34

080112bc <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80112bc:	b580      	push	{r7, lr}
 80112be:	b082      	sub	sp, #8
 80112c0:	af00      	add	r7, sp, #0
 80112c2:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80112c4:	f000 f818 	bl	80112f8 <BSP_SD_AbortCallback>
}
 80112c8:	bf00      	nop
 80112ca:	3708      	adds	r7, #8
 80112cc:	46bd      	mov	sp, r7
 80112ce:	bd80      	pop	{r7, pc}

080112d0 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80112d0:	b580      	push	{r7, lr}
 80112d2:	b082      	sub	sp, #8
 80112d4:	af00      	add	r7, sp, #0
 80112d6:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80112d8:	f000 f9a8 	bl	801162c <BSP_SD_WriteCpltCallback>
}
 80112dc:	bf00      	nop
 80112de:	3708      	adds	r7, #8
 80112e0:	46bd      	mov	sp, r7
 80112e2:	bd80      	pop	{r7, pc}

080112e4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80112e4:	b580      	push	{r7, lr}
 80112e6:	b082      	sub	sp, #8
 80112e8:	af00      	add	r7, sp, #0
 80112ea:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80112ec:	f000 f9aa 	bl	8011644 <BSP_SD_ReadCpltCallback>
}
 80112f0:	bf00      	nop
 80112f2:	3708      	adds	r7, #8
 80112f4:	46bd      	mov	sp, r7
 80112f6:	bd80      	pop	{r7, pc}

080112f8 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 80112f8:	b480      	push	{r7}
 80112fa:	af00      	add	r7, sp, #0

}
 80112fc:	bf00      	nop
 80112fe:	46bd      	mov	sp, r7
 8011300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011304:	4770      	bx	lr

08011306 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8011306:	b580      	push	{r7, lr}
 8011308:	b082      	sub	sp, #8
 801130a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 801130c:	2301      	movs	r3, #1
 801130e:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8011310:	f000 f80c 	bl	801132c <BSP_PlatformIsDetected>
 8011314:	4603      	mov	r3, r0
 8011316:	2b00      	cmp	r3, #0
 8011318:	d101      	bne.n	801131e <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 801131a:	2300      	movs	r3, #0
 801131c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 801131e:	79fb      	ldrb	r3, [r7, #7]
 8011320:	b2db      	uxtb	r3, r3
}
 8011322:	4618      	mov	r0, r3
 8011324:	3708      	adds	r7, #8
 8011326:	46bd      	mov	sp, r7
 8011328:	bd80      	pop	{r7, pc}
	...

0801132c <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 801132c:	b580      	push	{r7, lr}
 801132e:	b082      	sub	sp, #8
 8011330:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8011332:	2301      	movs	r3, #1
 8011334:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8011336:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801133a:	4806      	ldr	r0, [pc, #24]	; (8011354 <BSP_PlatformIsDetected+0x28>)
 801133c:	f7fa f866 	bl	800b40c <HAL_GPIO_ReadPin>
 8011340:	4603      	mov	r3, r0
 8011342:	2b00      	cmp	r3, #0
 8011344:	d001      	beq.n	801134a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8011346:	2300      	movs	r3, #0
 8011348:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 801134a:	79fb      	ldrb	r3, [r7, #7]
}
 801134c:	4618      	mov	r0, r3
 801134e:	3708      	adds	r7, #8
 8011350:	46bd      	mov	sp, r7
 8011352:	bd80      	pop	{r7, pc}
 8011354:	40020000 	.word	0x40020000

08011358 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8011358:	b580      	push	{r7, lr}
 801135a:	b084      	sub	sp, #16
 801135c:	af00      	add	r7, sp, #0
 801135e:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8011360:	f7f8 fdca 	bl	8009ef8 <HAL_GetTick>
 8011364:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8011366:	e006      	b.n	8011376 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011368:	f7ff ff8a 	bl	8011280 <BSP_SD_GetCardState>
 801136c:	4603      	mov	r3, r0
 801136e:	2b00      	cmp	r3, #0
 8011370:	d101      	bne.n	8011376 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8011372:	2300      	movs	r3, #0
 8011374:	e009      	b.n	801138a <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8011376:	f7f8 fdbf 	bl	8009ef8 <HAL_GetTick>
 801137a:	4602      	mov	r2, r0
 801137c:	68fb      	ldr	r3, [r7, #12]
 801137e:	1ad3      	subs	r3, r2, r3
 8011380:	687a      	ldr	r2, [r7, #4]
 8011382:	429a      	cmp	r2, r3
 8011384:	d8f0      	bhi.n	8011368 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8011386:	f04f 33ff 	mov.w	r3, #4294967295
}
 801138a:	4618      	mov	r0, r3
 801138c:	3710      	adds	r7, #16
 801138e:	46bd      	mov	sp, r7
 8011390:	bd80      	pop	{r7, pc}
	...

08011394 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8011394:	b580      	push	{r7, lr}
 8011396:	b082      	sub	sp, #8
 8011398:	af00      	add	r7, sp, #0
 801139a:	4603      	mov	r3, r0
 801139c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 801139e:	4b0b      	ldr	r3, [pc, #44]	; (80113cc <SD_CheckStatus+0x38>)
 80113a0:	2201      	movs	r2, #1
 80113a2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80113a4:	f7ff ff6c 	bl	8011280 <BSP_SD_GetCardState>
 80113a8:	4603      	mov	r3, r0
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d107      	bne.n	80113be <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80113ae:	4b07      	ldr	r3, [pc, #28]	; (80113cc <SD_CheckStatus+0x38>)
 80113b0:	781b      	ldrb	r3, [r3, #0]
 80113b2:	b2db      	uxtb	r3, r3
 80113b4:	f023 0301 	bic.w	r3, r3, #1
 80113b8:	b2da      	uxtb	r2, r3
 80113ba:	4b04      	ldr	r3, [pc, #16]	; (80113cc <SD_CheckStatus+0x38>)
 80113bc:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80113be:	4b03      	ldr	r3, [pc, #12]	; (80113cc <SD_CheckStatus+0x38>)
 80113c0:	781b      	ldrb	r3, [r3, #0]
 80113c2:	b2db      	uxtb	r3, r3
}
 80113c4:	4618      	mov	r0, r3
 80113c6:	3708      	adds	r7, #8
 80113c8:	46bd      	mov	sp, r7
 80113ca:	bd80      	pop	{r7, pc}
 80113cc:	20000009 	.word	0x20000009

080113d0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80113d0:	b580      	push	{r7, lr}
 80113d2:	b082      	sub	sp, #8
 80113d4:	af00      	add	r7, sp, #0
 80113d6:	4603      	mov	r3, r0
 80113d8:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80113da:	f7ff fef7 	bl	80111cc <BSP_SD_Init>
 80113de:	4603      	mov	r3, r0
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d107      	bne.n	80113f4 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 80113e4:	79fb      	ldrb	r3, [r7, #7]
 80113e6:	4618      	mov	r0, r3
 80113e8:	f7ff ffd4 	bl	8011394 <SD_CheckStatus>
 80113ec:	4603      	mov	r3, r0
 80113ee:	461a      	mov	r2, r3
 80113f0:	4b04      	ldr	r3, [pc, #16]	; (8011404 <SD_initialize+0x34>)
 80113f2:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80113f4:	4b03      	ldr	r3, [pc, #12]	; (8011404 <SD_initialize+0x34>)
 80113f6:	781b      	ldrb	r3, [r3, #0]
 80113f8:	b2db      	uxtb	r3, r3
}
 80113fa:	4618      	mov	r0, r3
 80113fc:	3708      	adds	r7, #8
 80113fe:	46bd      	mov	sp, r7
 8011400:	bd80      	pop	{r7, pc}
 8011402:	bf00      	nop
 8011404:	20000009 	.word	0x20000009

08011408 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8011408:	b580      	push	{r7, lr}
 801140a:	b082      	sub	sp, #8
 801140c:	af00      	add	r7, sp, #0
 801140e:	4603      	mov	r3, r0
 8011410:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8011412:	79fb      	ldrb	r3, [r7, #7]
 8011414:	4618      	mov	r0, r3
 8011416:	f7ff ffbd 	bl	8011394 <SD_CheckStatus>
 801141a:	4603      	mov	r3, r0
}
 801141c:	4618      	mov	r0, r3
 801141e:	3708      	adds	r7, #8
 8011420:	46bd      	mov	sp, r7
 8011422:	bd80      	pop	{r7, pc}

08011424 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8011424:	b580      	push	{r7, lr}
 8011426:	b086      	sub	sp, #24
 8011428:	af00      	add	r7, sp, #0
 801142a:	60b9      	str	r1, [r7, #8]
 801142c:	607a      	str	r2, [r7, #4]
 801142e:	603b      	str	r3, [r7, #0]
 8011430:	4603      	mov	r3, r0
 8011432:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8011434:	2301      	movs	r3, #1
 8011436:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8011438:	f247 5030 	movw	r0, #30000	; 0x7530
 801143c:	f7ff ff8c 	bl	8011358 <SD_CheckStatusWithTimeout>
 8011440:	4603      	mov	r3, r0
 8011442:	2b00      	cmp	r3, #0
 8011444:	da01      	bge.n	801144a <SD_read+0x26>
  {
    return res;
 8011446:	7dfb      	ldrb	r3, [r7, #23]
 8011448:	e03b      	b.n	80114c2 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 801144a:	683a      	ldr	r2, [r7, #0]
 801144c:	6879      	ldr	r1, [r7, #4]
 801144e:	68b8      	ldr	r0, [r7, #8]
 8011450:	f7ff fee2 	bl	8011218 <BSP_SD_ReadBlocks_DMA>
 8011454:	4603      	mov	r3, r0
 8011456:	2b00      	cmp	r3, #0
 8011458:	d132      	bne.n	80114c0 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 801145a:	4b1c      	ldr	r3, [pc, #112]	; (80114cc <SD_read+0xa8>)
 801145c:	2200      	movs	r2, #0
 801145e:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8011460:	f7f8 fd4a 	bl	8009ef8 <HAL_GetTick>
 8011464:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8011466:	bf00      	nop
 8011468:	4b18      	ldr	r3, [pc, #96]	; (80114cc <SD_read+0xa8>)
 801146a:	681b      	ldr	r3, [r3, #0]
 801146c:	2b00      	cmp	r3, #0
 801146e:	d108      	bne.n	8011482 <SD_read+0x5e>
 8011470:	f7f8 fd42 	bl	8009ef8 <HAL_GetTick>
 8011474:	4602      	mov	r2, r0
 8011476:	693b      	ldr	r3, [r7, #16]
 8011478:	1ad3      	subs	r3, r2, r3
 801147a:	f247 522f 	movw	r2, #29999	; 0x752f
 801147e:	4293      	cmp	r3, r2
 8011480:	d9f2      	bls.n	8011468 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 8011482:	4b12      	ldr	r3, [pc, #72]	; (80114cc <SD_read+0xa8>)
 8011484:	681b      	ldr	r3, [r3, #0]
 8011486:	2b00      	cmp	r3, #0
 8011488:	d102      	bne.n	8011490 <SD_read+0x6c>
      {
        res = RES_ERROR;
 801148a:	2301      	movs	r3, #1
 801148c:	75fb      	strb	r3, [r7, #23]
 801148e:	e017      	b.n	80114c0 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8011490:	4b0e      	ldr	r3, [pc, #56]	; (80114cc <SD_read+0xa8>)
 8011492:	2200      	movs	r2, #0
 8011494:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8011496:	f7f8 fd2f 	bl	8009ef8 <HAL_GetTick>
 801149a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801149c:	e007      	b.n	80114ae <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801149e:	f7ff feef 	bl	8011280 <BSP_SD_GetCardState>
 80114a2:	4603      	mov	r3, r0
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d102      	bne.n	80114ae <SD_read+0x8a>
          {
            res = RES_OK;
 80114a8:	2300      	movs	r3, #0
 80114aa:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 80114ac:	e008      	b.n	80114c0 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80114ae:	f7f8 fd23 	bl	8009ef8 <HAL_GetTick>
 80114b2:	4602      	mov	r2, r0
 80114b4:	693b      	ldr	r3, [r7, #16]
 80114b6:	1ad3      	subs	r3, r2, r3
 80114b8:	f247 522f 	movw	r2, #29999	; 0x752f
 80114bc:	4293      	cmp	r3, r2
 80114be:	d9ee      	bls.n	801149e <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 80114c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80114c2:	4618      	mov	r0, r3
 80114c4:	3718      	adds	r7, #24
 80114c6:	46bd      	mov	sp, r7
 80114c8:	bd80      	pop	{r7, pc}
 80114ca:	bf00      	nop
 80114cc:	200452d0 	.word	0x200452d0

080114d0 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80114d0:	b580      	push	{r7, lr}
 80114d2:	b086      	sub	sp, #24
 80114d4:	af00      	add	r7, sp, #0
 80114d6:	60b9      	str	r1, [r7, #8]
 80114d8:	607a      	str	r2, [r7, #4]
 80114da:	603b      	str	r3, [r7, #0]
 80114dc:	4603      	mov	r3, r0
 80114de:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80114e0:	2301      	movs	r3, #1
 80114e2:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 80114e4:	4b24      	ldr	r3, [pc, #144]	; (8011578 <SD_write+0xa8>)
 80114e6:	2200      	movs	r2, #0
 80114e8:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80114ea:	f247 5030 	movw	r0, #30000	; 0x7530
 80114ee:	f7ff ff33 	bl	8011358 <SD_CheckStatusWithTimeout>
 80114f2:	4603      	mov	r3, r0
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	da01      	bge.n	80114fc <SD_write+0x2c>
  {
    return res;
 80114f8:	7dfb      	ldrb	r3, [r7, #23]
 80114fa:	e038      	b.n	801156e <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80114fc:	683a      	ldr	r2, [r7, #0]
 80114fe:	6879      	ldr	r1, [r7, #4]
 8011500:	68b8      	ldr	r0, [r7, #8]
 8011502:	f7ff fea3 	bl	801124c <BSP_SD_WriteBlocks_DMA>
 8011506:	4603      	mov	r3, r0
 8011508:	2b00      	cmp	r3, #0
 801150a:	d12f      	bne.n	801156c <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 801150c:	f7f8 fcf4 	bl	8009ef8 <HAL_GetTick>
 8011510:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8011512:	bf00      	nop
 8011514:	4b18      	ldr	r3, [pc, #96]	; (8011578 <SD_write+0xa8>)
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	2b00      	cmp	r3, #0
 801151a:	d108      	bne.n	801152e <SD_write+0x5e>
 801151c:	f7f8 fcec 	bl	8009ef8 <HAL_GetTick>
 8011520:	4602      	mov	r2, r0
 8011522:	693b      	ldr	r3, [r7, #16]
 8011524:	1ad3      	subs	r3, r2, r3
 8011526:	f247 522f 	movw	r2, #29999	; 0x752f
 801152a:	4293      	cmp	r3, r2
 801152c:	d9f2      	bls.n	8011514 <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 801152e:	4b12      	ldr	r3, [pc, #72]	; (8011578 <SD_write+0xa8>)
 8011530:	681b      	ldr	r3, [r3, #0]
 8011532:	2b00      	cmp	r3, #0
 8011534:	d102      	bne.n	801153c <SD_write+0x6c>
      {
        res = RES_ERROR;
 8011536:	2301      	movs	r3, #1
 8011538:	75fb      	strb	r3, [r7, #23]
 801153a:	e017      	b.n	801156c <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 801153c:	4b0e      	ldr	r3, [pc, #56]	; (8011578 <SD_write+0xa8>)
 801153e:	2200      	movs	r2, #0
 8011540:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8011542:	f7f8 fcd9 	bl	8009ef8 <HAL_GetTick>
 8011546:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8011548:	e007      	b.n	801155a <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801154a:	f7ff fe99 	bl	8011280 <BSP_SD_GetCardState>
 801154e:	4603      	mov	r3, r0
 8011550:	2b00      	cmp	r3, #0
 8011552:	d102      	bne.n	801155a <SD_write+0x8a>
          {
            res = RES_OK;
 8011554:	2300      	movs	r3, #0
 8011556:	75fb      	strb	r3, [r7, #23]
            break;
 8011558:	e008      	b.n	801156c <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801155a:	f7f8 fccd 	bl	8009ef8 <HAL_GetTick>
 801155e:	4602      	mov	r2, r0
 8011560:	693b      	ldr	r3, [r7, #16]
 8011562:	1ad3      	subs	r3, r2, r3
 8011564:	f247 522f 	movw	r2, #29999	; 0x752f
 8011568:	4293      	cmp	r3, r2
 801156a:	d9ee      	bls.n	801154a <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 801156c:	7dfb      	ldrb	r3, [r7, #23]
}
 801156e:	4618      	mov	r0, r3
 8011570:	3718      	adds	r7, #24
 8011572:	46bd      	mov	sp, r7
 8011574:	bd80      	pop	{r7, pc}
 8011576:	bf00      	nop
 8011578:	200452cc 	.word	0x200452cc

0801157c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 801157c:	b580      	push	{r7, lr}
 801157e:	b08c      	sub	sp, #48	; 0x30
 8011580:	af00      	add	r7, sp, #0
 8011582:	4603      	mov	r3, r0
 8011584:	603a      	str	r2, [r7, #0]
 8011586:	71fb      	strb	r3, [r7, #7]
 8011588:	460b      	mov	r3, r1
 801158a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 801158c:	2301      	movs	r3, #1
 801158e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8011592:	4b25      	ldr	r3, [pc, #148]	; (8011628 <SD_ioctl+0xac>)
 8011594:	781b      	ldrb	r3, [r3, #0]
 8011596:	b2db      	uxtb	r3, r3
 8011598:	f003 0301 	and.w	r3, r3, #1
 801159c:	2b00      	cmp	r3, #0
 801159e:	d001      	beq.n	80115a4 <SD_ioctl+0x28>
 80115a0:	2303      	movs	r3, #3
 80115a2:	e03c      	b.n	801161e <SD_ioctl+0xa2>

  switch (cmd)
 80115a4:	79bb      	ldrb	r3, [r7, #6]
 80115a6:	2b03      	cmp	r3, #3
 80115a8:	d834      	bhi.n	8011614 <SD_ioctl+0x98>
 80115aa:	a201      	add	r2, pc, #4	; (adr r2, 80115b0 <SD_ioctl+0x34>)
 80115ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80115b0:	080115c1 	.word	0x080115c1
 80115b4:	080115c9 	.word	0x080115c9
 80115b8:	080115e1 	.word	0x080115e1
 80115bc:	080115fb 	.word	0x080115fb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80115c0:	2300      	movs	r3, #0
 80115c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80115c6:	e028      	b.n	801161a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80115c8:	f107 030c 	add.w	r3, r7, #12
 80115cc:	4618      	mov	r0, r3
 80115ce:	f7ff fe67 	bl	80112a0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80115d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80115d4:	683b      	ldr	r3, [r7, #0]
 80115d6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80115d8:	2300      	movs	r3, #0
 80115da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80115de:	e01c      	b.n	801161a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80115e0:	f107 030c 	add.w	r3, r7, #12
 80115e4:	4618      	mov	r0, r3
 80115e6:	f7ff fe5b 	bl	80112a0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80115ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115ec:	b29a      	uxth	r2, r3
 80115ee:	683b      	ldr	r3, [r7, #0]
 80115f0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80115f2:	2300      	movs	r3, #0
 80115f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80115f8:	e00f      	b.n	801161a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80115fa:	f107 030c 	add.w	r3, r7, #12
 80115fe:	4618      	mov	r0, r3
 8011600:	f7ff fe4e 	bl	80112a0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8011604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011606:	0a5a      	lsrs	r2, r3, #9
 8011608:	683b      	ldr	r3, [r7, #0]
 801160a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 801160c:	2300      	movs	r3, #0
 801160e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011612:	e002      	b.n	801161a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8011614:	2304      	movs	r3, #4
 8011616:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 801161a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801161e:	4618      	mov	r0, r3
 8011620:	3730      	adds	r7, #48	; 0x30
 8011622:	46bd      	mov	sp, r7
 8011624:	bd80      	pop	{r7, pc}
 8011626:	bf00      	nop
 8011628:	20000009 	.word	0x20000009

0801162c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 801162c:	b480      	push	{r7}
 801162e:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8011630:	4b03      	ldr	r3, [pc, #12]	; (8011640 <BSP_SD_WriteCpltCallback+0x14>)
 8011632:	2201      	movs	r2, #1
 8011634:	601a      	str	r2, [r3, #0]
}
 8011636:	bf00      	nop
 8011638:	46bd      	mov	sp, r7
 801163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801163e:	4770      	bx	lr
 8011640:	200452cc 	.word	0x200452cc

08011644 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8011644:	b480      	push	{r7}
 8011646:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8011648:	4b03      	ldr	r3, [pc, #12]	; (8011658 <BSP_SD_ReadCpltCallback+0x14>)
 801164a:	2201      	movs	r2, #1
 801164c:	601a      	str	r2, [r3, #0]
}
 801164e:	bf00      	nop
 8011650:	46bd      	mov	sp, r7
 8011652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011656:	4770      	bx	lr
 8011658:	200452d0 	.word	0x200452d0

0801165c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 801165c:	b580      	push	{r7, lr}
 801165e:	b084      	sub	sp, #16
 8011660:	af00      	add	r7, sp, #0
 8011662:	4603      	mov	r3, r0
 8011664:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8011666:	79fb      	ldrb	r3, [r7, #7]
 8011668:	4a08      	ldr	r2, [pc, #32]	; (801168c <disk_status+0x30>)
 801166a:	009b      	lsls	r3, r3, #2
 801166c:	4413      	add	r3, r2
 801166e:	685b      	ldr	r3, [r3, #4]
 8011670:	685b      	ldr	r3, [r3, #4]
 8011672:	79fa      	ldrb	r2, [r7, #7]
 8011674:	4905      	ldr	r1, [pc, #20]	; (801168c <disk_status+0x30>)
 8011676:	440a      	add	r2, r1
 8011678:	7a12      	ldrb	r2, [r2, #8]
 801167a:	4610      	mov	r0, r2
 801167c:	4798      	blx	r3
 801167e:	4603      	mov	r3, r0
 8011680:	73fb      	strb	r3, [r7, #15]
  return stat;
 8011682:	7bfb      	ldrb	r3, [r7, #15]
}
 8011684:	4618      	mov	r0, r3
 8011686:	3710      	adds	r7, #16
 8011688:	46bd      	mov	sp, r7
 801168a:	bd80      	pop	{r7, pc}
 801168c:	200452fc 	.word	0x200452fc

08011690 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8011690:	b580      	push	{r7, lr}
 8011692:	b084      	sub	sp, #16
 8011694:	af00      	add	r7, sp, #0
 8011696:	4603      	mov	r3, r0
 8011698:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801169a:	2300      	movs	r3, #0
 801169c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801169e:	79fb      	ldrb	r3, [r7, #7]
 80116a0:	4a0d      	ldr	r2, [pc, #52]	; (80116d8 <disk_initialize+0x48>)
 80116a2:	5cd3      	ldrb	r3, [r2, r3]
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d111      	bne.n	80116cc <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80116a8:	79fb      	ldrb	r3, [r7, #7]
 80116aa:	4a0b      	ldr	r2, [pc, #44]	; (80116d8 <disk_initialize+0x48>)
 80116ac:	2101      	movs	r1, #1
 80116ae:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80116b0:	79fb      	ldrb	r3, [r7, #7]
 80116b2:	4a09      	ldr	r2, [pc, #36]	; (80116d8 <disk_initialize+0x48>)
 80116b4:	009b      	lsls	r3, r3, #2
 80116b6:	4413      	add	r3, r2
 80116b8:	685b      	ldr	r3, [r3, #4]
 80116ba:	681b      	ldr	r3, [r3, #0]
 80116bc:	79fa      	ldrb	r2, [r7, #7]
 80116be:	4906      	ldr	r1, [pc, #24]	; (80116d8 <disk_initialize+0x48>)
 80116c0:	440a      	add	r2, r1
 80116c2:	7a12      	ldrb	r2, [r2, #8]
 80116c4:	4610      	mov	r0, r2
 80116c6:	4798      	blx	r3
 80116c8:	4603      	mov	r3, r0
 80116ca:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80116cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80116ce:	4618      	mov	r0, r3
 80116d0:	3710      	adds	r7, #16
 80116d2:	46bd      	mov	sp, r7
 80116d4:	bd80      	pop	{r7, pc}
 80116d6:	bf00      	nop
 80116d8:	200452fc 	.word	0x200452fc

080116dc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80116dc:	b590      	push	{r4, r7, lr}
 80116de:	b087      	sub	sp, #28
 80116e0:	af00      	add	r7, sp, #0
 80116e2:	60b9      	str	r1, [r7, #8]
 80116e4:	607a      	str	r2, [r7, #4]
 80116e6:	603b      	str	r3, [r7, #0]
 80116e8:	4603      	mov	r3, r0
 80116ea:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80116ec:	7bfb      	ldrb	r3, [r7, #15]
 80116ee:	4a0a      	ldr	r2, [pc, #40]	; (8011718 <disk_read+0x3c>)
 80116f0:	009b      	lsls	r3, r3, #2
 80116f2:	4413      	add	r3, r2
 80116f4:	685b      	ldr	r3, [r3, #4]
 80116f6:	689c      	ldr	r4, [r3, #8]
 80116f8:	7bfb      	ldrb	r3, [r7, #15]
 80116fa:	4a07      	ldr	r2, [pc, #28]	; (8011718 <disk_read+0x3c>)
 80116fc:	4413      	add	r3, r2
 80116fe:	7a18      	ldrb	r0, [r3, #8]
 8011700:	683b      	ldr	r3, [r7, #0]
 8011702:	687a      	ldr	r2, [r7, #4]
 8011704:	68b9      	ldr	r1, [r7, #8]
 8011706:	47a0      	blx	r4
 8011708:	4603      	mov	r3, r0
 801170a:	75fb      	strb	r3, [r7, #23]
  return res;
 801170c:	7dfb      	ldrb	r3, [r7, #23]
}
 801170e:	4618      	mov	r0, r3
 8011710:	371c      	adds	r7, #28
 8011712:	46bd      	mov	sp, r7
 8011714:	bd90      	pop	{r4, r7, pc}
 8011716:	bf00      	nop
 8011718:	200452fc 	.word	0x200452fc

0801171c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 801171c:	b590      	push	{r4, r7, lr}
 801171e:	b087      	sub	sp, #28
 8011720:	af00      	add	r7, sp, #0
 8011722:	60b9      	str	r1, [r7, #8]
 8011724:	607a      	str	r2, [r7, #4]
 8011726:	603b      	str	r3, [r7, #0]
 8011728:	4603      	mov	r3, r0
 801172a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 801172c:	7bfb      	ldrb	r3, [r7, #15]
 801172e:	4a0a      	ldr	r2, [pc, #40]	; (8011758 <disk_write+0x3c>)
 8011730:	009b      	lsls	r3, r3, #2
 8011732:	4413      	add	r3, r2
 8011734:	685b      	ldr	r3, [r3, #4]
 8011736:	68dc      	ldr	r4, [r3, #12]
 8011738:	7bfb      	ldrb	r3, [r7, #15]
 801173a:	4a07      	ldr	r2, [pc, #28]	; (8011758 <disk_write+0x3c>)
 801173c:	4413      	add	r3, r2
 801173e:	7a18      	ldrb	r0, [r3, #8]
 8011740:	683b      	ldr	r3, [r7, #0]
 8011742:	687a      	ldr	r2, [r7, #4]
 8011744:	68b9      	ldr	r1, [r7, #8]
 8011746:	47a0      	blx	r4
 8011748:	4603      	mov	r3, r0
 801174a:	75fb      	strb	r3, [r7, #23]
  return res;
 801174c:	7dfb      	ldrb	r3, [r7, #23]
}
 801174e:	4618      	mov	r0, r3
 8011750:	371c      	adds	r7, #28
 8011752:	46bd      	mov	sp, r7
 8011754:	bd90      	pop	{r4, r7, pc}
 8011756:	bf00      	nop
 8011758:	200452fc 	.word	0x200452fc

0801175c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 801175c:	b580      	push	{r7, lr}
 801175e:	b084      	sub	sp, #16
 8011760:	af00      	add	r7, sp, #0
 8011762:	4603      	mov	r3, r0
 8011764:	603a      	str	r2, [r7, #0]
 8011766:	71fb      	strb	r3, [r7, #7]
 8011768:	460b      	mov	r3, r1
 801176a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 801176c:	79fb      	ldrb	r3, [r7, #7]
 801176e:	4a09      	ldr	r2, [pc, #36]	; (8011794 <disk_ioctl+0x38>)
 8011770:	009b      	lsls	r3, r3, #2
 8011772:	4413      	add	r3, r2
 8011774:	685b      	ldr	r3, [r3, #4]
 8011776:	691b      	ldr	r3, [r3, #16]
 8011778:	79fa      	ldrb	r2, [r7, #7]
 801177a:	4906      	ldr	r1, [pc, #24]	; (8011794 <disk_ioctl+0x38>)
 801177c:	440a      	add	r2, r1
 801177e:	7a10      	ldrb	r0, [r2, #8]
 8011780:	79b9      	ldrb	r1, [r7, #6]
 8011782:	683a      	ldr	r2, [r7, #0]
 8011784:	4798      	blx	r3
 8011786:	4603      	mov	r3, r0
 8011788:	73fb      	strb	r3, [r7, #15]
  return res;
 801178a:	7bfb      	ldrb	r3, [r7, #15]
}
 801178c:	4618      	mov	r0, r3
 801178e:	3710      	adds	r7, #16
 8011790:	46bd      	mov	sp, r7
 8011792:	bd80      	pop	{r7, pc}
 8011794:	200452fc 	.word	0x200452fc

08011798 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8011798:	b480      	push	{r7}
 801179a:	b085      	sub	sp, #20
 801179c:	af00      	add	r7, sp, #0
 801179e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	3301      	adds	r3, #1
 80117a4:	781b      	ldrb	r3, [r3, #0]
 80117a6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80117a8:	89fb      	ldrh	r3, [r7, #14]
 80117aa:	021b      	lsls	r3, r3, #8
 80117ac:	b21a      	sxth	r2, r3
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	781b      	ldrb	r3, [r3, #0]
 80117b2:	b21b      	sxth	r3, r3
 80117b4:	4313      	orrs	r3, r2
 80117b6:	b21b      	sxth	r3, r3
 80117b8:	81fb      	strh	r3, [r7, #14]
	return rv;
 80117ba:	89fb      	ldrh	r3, [r7, #14]
}
 80117bc:	4618      	mov	r0, r3
 80117be:	3714      	adds	r7, #20
 80117c0:	46bd      	mov	sp, r7
 80117c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117c6:	4770      	bx	lr

080117c8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80117c8:	b480      	push	{r7}
 80117ca:	b085      	sub	sp, #20
 80117cc:	af00      	add	r7, sp, #0
 80117ce:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	3303      	adds	r3, #3
 80117d4:	781b      	ldrb	r3, [r3, #0]
 80117d6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80117d8:	68fb      	ldr	r3, [r7, #12]
 80117da:	021b      	lsls	r3, r3, #8
 80117dc:	687a      	ldr	r2, [r7, #4]
 80117de:	3202      	adds	r2, #2
 80117e0:	7812      	ldrb	r2, [r2, #0]
 80117e2:	4313      	orrs	r3, r2
 80117e4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80117e6:	68fb      	ldr	r3, [r7, #12]
 80117e8:	021b      	lsls	r3, r3, #8
 80117ea:	687a      	ldr	r2, [r7, #4]
 80117ec:	3201      	adds	r2, #1
 80117ee:	7812      	ldrb	r2, [r2, #0]
 80117f0:	4313      	orrs	r3, r2
 80117f2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80117f4:	68fb      	ldr	r3, [r7, #12]
 80117f6:	021b      	lsls	r3, r3, #8
 80117f8:	687a      	ldr	r2, [r7, #4]
 80117fa:	7812      	ldrb	r2, [r2, #0]
 80117fc:	4313      	orrs	r3, r2
 80117fe:	60fb      	str	r3, [r7, #12]
	return rv;
 8011800:	68fb      	ldr	r3, [r7, #12]
}
 8011802:	4618      	mov	r0, r3
 8011804:	3714      	adds	r7, #20
 8011806:	46bd      	mov	sp, r7
 8011808:	f85d 7b04 	ldr.w	r7, [sp], #4
 801180c:	4770      	bx	lr

0801180e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801180e:	b480      	push	{r7}
 8011810:	b083      	sub	sp, #12
 8011812:	af00      	add	r7, sp, #0
 8011814:	6078      	str	r0, [r7, #4]
 8011816:	460b      	mov	r3, r1
 8011818:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	1c5a      	adds	r2, r3, #1
 801181e:	607a      	str	r2, [r7, #4]
 8011820:	887a      	ldrh	r2, [r7, #2]
 8011822:	b2d2      	uxtb	r2, r2
 8011824:	701a      	strb	r2, [r3, #0]
 8011826:	887b      	ldrh	r3, [r7, #2]
 8011828:	0a1b      	lsrs	r3, r3, #8
 801182a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	1c5a      	adds	r2, r3, #1
 8011830:	607a      	str	r2, [r7, #4]
 8011832:	887a      	ldrh	r2, [r7, #2]
 8011834:	b2d2      	uxtb	r2, r2
 8011836:	701a      	strb	r2, [r3, #0]
}
 8011838:	bf00      	nop
 801183a:	370c      	adds	r7, #12
 801183c:	46bd      	mov	sp, r7
 801183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011842:	4770      	bx	lr

08011844 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8011844:	b480      	push	{r7}
 8011846:	b083      	sub	sp, #12
 8011848:	af00      	add	r7, sp, #0
 801184a:	6078      	str	r0, [r7, #4]
 801184c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	1c5a      	adds	r2, r3, #1
 8011852:	607a      	str	r2, [r7, #4]
 8011854:	683a      	ldr	r2, [r7, #0]
 8011856:	b2d2      	uxtb	r2, r2
 8011858:	701a      	strb	r2, [r3, #0]
 801185a:	683b      	ldr	r3, [r7, #0]
 801185c:	0a1b      	lsrs	r3, r3, #8
 801185e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	1c5a      	adds	r2, r3, #1
 8011864:	607a      	str	r2, [r7, #4]
 8011866:	683a      	ldr	r2, [r7, #0]
 8011868:	b2d2      	uxtb	r2, r2
 801186a:	701a      	strb	r2, [r3, #0]
 801186c:	683b      	ldr	r3, [r7, #0]
 801186e:	0a1b      	lsrs	r3, r3, #8
 8011870:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	1c5a      	adds	r2, r3, #1
 8011876:	607a      	str	r2, [r7, #4]
 8011878:	683a      	ldr	r2, [r7, #0]
 801187a:	b2d2      	uxtb	r2, r2
 801187c:	701a      	strb	r2, [r3, #0]
 801187e:	683b      	ldr	r3, [r7, #0]
 8011880:	0a1b      	lsrs	r3, r3, #8
 8011882:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	1c5a      	adds	r2, r3, #1
 8011888:	607a      	str	r2, [r7, #4]
 801188a:	683a      	ldr	r2, [r7, #0]
 801188c:	b2d2      	uxtb	r2, r2
 801188e:	701a      	strb	r2, [r3, #0]
}
 8011890:	bf00      	nop
 8011892:	370c      	adds	r7, #12
 8011894:	46bd      	mov	sp, r7
 8011896:	f85d 7b04 	ldr.w	r7, [sp], #4
 801189a:	4770      	bx	lr

0801189c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 801189c:	b480      	push	{r7}
 801189e:	b087      	sub	sp, #28
 80118a0:	af00      	add	r7, sp, #0
 80118a2:	60f8      	str	r0, [r7, #12]
 80118a4:	60b9      	str	r1, [r7, #8]
 80118a6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80118a8:	68fb      	ldr	r3, [r7, #12]
 80118aa:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80118ac:	68bb      	ldr	r3, [r7, #8]
 80118ae:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d00d      	beq.n	80118d2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80118b6:	693a      	ldr	r2, [r7, #16]
 80118b8:	1c53      	adds	r3, r2, #1
 80118ba:	613b      	str	r3, [r7, #16]
 80118bc:	697b      	ldr	r3, [r7, #20]
 80118be:	1c59      	adds	r1, r3, #1
 80118c0:	6179      	str	r1, [r7, #20]
 80118c2:	7812      	ldrb	r2, [r2, #0]
 80118c4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	3b01      	subs	r3, #1
 80118ca:	607b      	str	r3, [r7, #4]
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	d1f1      	bne.n	80118b6 <mem_cpy+0x1a>
	}
}
 80118d2:	bf00      	nop
 80118d4:	371c      	adds	r7, #28
 80118d6:	46bd      	mov	sp, r7
 80118d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118dc:	4770      	bx	lr

080118de <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80118de:	b480      	push	{r7}
 80118e0:	b087      	sub	sp, #28
 80118e2:	af00      	add	r7, sp, #0
 80118e4:	60f8      	str	r0, [r7, #12]
 80118e6:	60b9      	str	r1, [r7, #8]
 80118e8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80118ea:	68fb      	ldr	r3, [r7, #12]
 80118ec:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80118ee:	697b      	ldr	r3, [r7, #20]
 80118f0:	1c5a      	adds	r2, r3, #1
 80118f2:	617a      	str	r2, [r7, #20]
 80118f4:	68ba      	ldr	r2, [r7, #8]
 80118f6:	b2d2      	uxtb	r2, r2
 80118f8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	3b01      	subs	r3, #1
 80118fe:	607b      	str	r3, [r7, #4]
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	2b00      	cmp	r3, #0
 8011904:	d1f3      	bne.n	80118ee <mem_set+0x10>
}
 8011906:	bf00      	nop
 8011908:	371c      	adds	r7, #28
 801190a:	46bd      	mov	sp, r7
 801190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011910:	4770      	bx	lr

08011912 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8011912:	b480      	push	{r7}
 8011914:	b089      	sub	sp, #36	; 0x24
 8011916:	af00      	add	r7, sp, #0
 8011918:	60f8      	str	r0, [r7, #12]
 801191a:	60b9      	str	r1, [r7, #8]
 801191c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 801191e:	68fb      	ldr	r3, [r7, #12]
 8011920:	61fb      	str	r3, [r7, #28]
 8011922:	68bb      	ldr	r3, [r7, #8]
 8011924:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8011926:	2300      	movs	r3, #0
 8011928:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 801192a:	69fb      	ldr	r3, [r7, #28]
 801192c:	1c5a      	adds	r2, r3, #1
 801192e:	61fa      	str	r2, [r7, #28]
 8011930:	781b      	ldrb	r3, [r3, #0]
 8011932:	4619      	mov	r1, r3
 8011934:	69bb      	ldr	r3, [r7, #24]
 8011936:	1c5a      	adds	r2, r3, #1
 8011938:	61ba      	str	r2, [r7, #24]
 801193a:	781b      	ldrb	r3, [r3, #0]
 801193c:	1acb      	subs	r3, r1, r3
 801193e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	3b01      	subs	r3, #1
 8011944:	607b      	str	r3, [r7, #4]
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	2b00      	cmp	r3, #0
 801194a:	d002      	beq.n	8011952 <mem_cmp+0x40>
 801194c:	697b      	ldr	r3, [r7, #20]
 801194e:	2b00      	cmp	r3, #0
 8011950:	d0eb      	beq.n	801192a <mem_cmp+0x18>

	return r;
 8011952:	697b      	ldr	r3, [r7, #20]
}
 8011954:	4618      	mov	r0, r3
 8011956:	3724      	adds	r7, #36	; 0x24
 8011958:	46bd      	mov	sp, r7
 801195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801195e:	4770      	bx	lr

08011960 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8011960:	b480      	push	{r7}
 8011962:	b083      	sub	sp, #12
 8011964:	af00      	add	r7, sp, #0
 8011966:	6078      	str	r0, [r7, #4]
 8011968:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 801196a:	e002      	b.n	8011972 <chk_chr+0x12>
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	3301      	adds	r3, #1
 8011970:	607b      	str	r3, [r7, #4]
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	781b      	ldrb	r3, [r3, #0]
 8011976:	2b00      	cmp	r3, #0
 8011978:	d005      	beq.n	8011986 <chk_chr+0x26>
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	781b      	ldrb	r3, [r3, #0]
 801197e:	461a      	mov	r2, r3
 8011980:	683b      	ldr	r3, [r7, #0]
 8011982:	4293      	cmp	r3, r2
 8011984:	d1f2      	bne.n	801196c <chk_chr+0xc>
	return *str;
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	781b      	ldrb	r3, [r3, #0]
}
 801198a:	4618      	mov	r0, r3
 801198c:	370c      	adds	r7, #12
 801198e:	46bd      	mov	sp, r7
 8011990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011994:	4770      	bx	lr
	...

08011998 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011998:	b480      	push	{r7}
 801199a:	b085      	sub	sp, #20
 801199c:	af00      	add	r7, sp, #0
 801199e:	6078      	str	r0, [r7, #4]
 80119a0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80119a2:	2300      	movs	r3, #0
 80119a4:	60bb      	str	r3, [r7, #8]
 80119a6:	68bb      	ldr	r3, [r7, #8]
 80119a8:	60fb      	str	r3, [r7, #12]
 80119aa:	e029      	b.n	8011a00 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80119ac:	4a27      	ldr	r2, [pc, #156]	; (8011a4c <chk_lock+0xb4>)
 80119ae:	68fb      	ldr	r3, [r7, #12]
 80119b0:	011b      	lsls	r3, r3, #4
 80119b2:	4413      	add	r3, r2
 80119b4:	681b      	ldr	r3, [r3, #0]
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	d01d      	beq.n	80119f6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80119ba:	4a24      	ldr	r2, [pc, #144]	; (8011a4c <chk_lock+0xb4>)
 80119bc:	68fb      	ldr	r3, [r7, #12]
 80119be:	011b      	lsls	r3, r3, #4
 80119c0:	4413      	add	r3, r2
 80119c2:	681a      	ldr	r2, [r3, #0]
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	681b      	ldr	r3, [r3, #0]
 80119c8:	429a      	cmp	r2, r3
 80119ca:	d116      	bne.n	80119fa <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80119cc:	4a1f      	ldr	r2, [pc, #124]	; (8011a4c <chk_lock+0xb4>)
 80119ce:	68fb      	ldr	r3, [r7, #12]
 80119d0:	011b      	lsls	r3, r3, #4
 80119d2:	4413      	add	r3, r2
 80119d4:	3304      	adds	r3, #4
 80119d6:	681a      	ldr	r2, [r3, #0]
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80119dc:	429a      	cmp	r2, r3
 80119de:	d10c      	bne.n	80119fa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80119e0:	4a1a      	ldr	r2, [pc, #104]	; (8011a4c <chk_lock+0xb4>)
 80119e2:	68fb      	ldr	r3, [r7, #12]
 80119e4:	011b      	lsls	r3, r3, #4
 80119e6:	4413      	add	r3, r2
 80119e8:	3308      	adds	r3, #8
 80119ea:	681a      	ldr	r2, [r3, #0]
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80119f0:	429a      	cmp	r2, r3
 80119f2:	d102      	bne.n	80119fa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80119f4:	e007      	b.n	8011a06 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80119f6:	2301      	movs	r3, #1
 80119f8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80119fa:	68fb      	ldr	r3, [r7, #12]
 80119fc:	3301      	adds	r3, #1
 80119fe:	60fb      	str	r3, [r7, #12]
 8011a00:	68fb      	ldr	r3, [r7, #12]
 8011a02:	2b01      	cmp	r3, #1
 8011a04:	d9d2      	bls.n	80119ac <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8011a06:	68fb      	ldr	r3, [r7, #12]
 8011a08:	2b02      	cmp	r3, #2
 8011a0a:	d109      	bne.n	8011a20 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8011a0c:	68bb      	ldr	r3, [r7, #8]
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d102      	bne.n	8011a18 <chk_lock+0x80>
 8011a12:	683b      	ldr	r3, [r7, #0]
 8011a14:	2b02      	cmp	r3, #2
 8011a16:	d101      	bne.n	8011a1c <chk_lock+0x84>
 8011a18:	2300      	movs	r3, #0
 8011a1a:	e010      	b.n	8011a3e <chk_lock+0xa6>
 8011a1c:	2312      	movs	r3, #18
 8011a1e:	e00e      	b.n	8011a3e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8011a20:	683b      	ldr	r3, [r7, #0]
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d108      	bne.n	8011a38 <chk_lock+0xa0>
 8011a26:	4a09      	ldr	r2, [pc, #36]	; (8011a4c <chk_lock+0xb4>)
 8011a28:	68fb      	ldr	r3, [r7, #12]
 8011a2a:	011b      	lsls	r3, r3, #4
 8011a2c:	4413      	add	r3, r2
 8011a2e:	330c      	adds	r3, #12
 8011a30:	881b      	ldrh	r3, [r3, #0]
 8011a32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011a36:	d101      	bne.n	8011a3c <chk_lock+0xa4>
 8011a38:	2310      	movs	r3, #16
 8011a3a:	e000      	b.n	8011a3e <chk_lock+0xa6>
 8011a3c:	2300      	movs	r3, #0
}
 8011a3e:	4618      	mov	r0, r3
 8011a40:	3714      	adds	r7, #20
 8011a42:	46bd      	mov	sp, r7
 8011a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a48:	4770      	bx	lr
 8011a4a:	bf00      	nop
 8011a4c:	200452dc 	.word	0x200452dc

08011a50 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8011a50:	b480      	push	{r7}
 8011a52:	b083      	sub	sp, #12
 8011a54:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011a56:	2300      	movs	r3, #0
 8011a58:	607b      	str	r3, [r7, #4]
 8011a5a:	e002      	b.n	8011a62 <enq_lock+0x12>
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	3301      	adds	r3, #1
 8011a60:	607b      	str	r3, [r7, #4]
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	2b01      	cmp	r3, #1
 8011a66:	d806      	bhi.n	8011a76 <enq_lock+0x26>
 8011a68:	4a09      	ldr	r2, [pc, #36]	; (8011a90 <enq_lock+0x40>)
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	011b      	lsls	r3, r3, #4
 8011a6e:	4413      	add	r3, r2
 8011a70:	681b      	ldr	r3, [r3, #0]
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d1f2      	bne.n	8011a5c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	2b02      	cmp	r3, #2
 8011a7a:	bf14      	ite	ne
 8011a7c:	2301      	movne	r3, #1
 8011a7e:	2300      	moveq	r3, #0
 8011a80:	b2db      	uxtb	r3, r3
}
 8011a82:	4618      	mov	r0, r3
 8011a84:	370c      	adds	r7, #12
 8011a86:	46bd      	mov	sp, r7
 8011a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a8c:	4770      	bx	lr
 8011a8e:	bf00      	nop
 8011a90:	200452dc 	.word	0x200452dc

08011a94 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011a94:	b480      	push	{r7}
 8011a96:	b085      	sub	sp, #20
 8011a98:	af00      	add	r7, sp, #0
 8011a9a:	6078      	str	r0, [r7, #4]
 8011a9c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8011a9e:	2300      	movs	r3, #0
 8011aa0:	60fb      	str	r3, [r7, #12]
 8011aa2:	e01f      	b.n	8011ae4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8011aa4:	4a41      	ldr	r2, [pc, #260]	; (8011bac <inc_lock+0x118>)
 8011aa6:	68fb      	ldr	r3, [r7, #12]
 8011aa8:	011b      	lsls	r3, r3, #4
 8011aaa:	4413      	add	r3, r2
 8011aac:	681a      	ldr	r2, [r3, #0]
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	681b      	ldr	r3, [r3, #0]
 8011ab2:	429a      	cmp	r2, r3
 8011ab4:	d113      	bne.n	8011ade <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8011ab6:	4a3d      	ldr	r2, [pc, #244]	; (8011bac <inc_lock+0x118>)
 8011ab8:	68fb      	ldr	r3, [r7, #12]
 8011aba:	011b      	lsls	r3, r3, #4
 8011abc:	4413      	add	r3, r2
 8011abe:	3304      	adds	r3, #4
 8011ac0:	681a      	ldr	r2, [r3, #0]
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8011ac6:	429a      	cmp	r2, r3
 8011ac8:	d109      	bne.n	8011ade <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8011aca:	4a38      	ldr	r2, [pc, #224]	; (8011bac <inc_lock+0x118>)
 8011acc:	68fb      	ldr	r3, [r7, #12]
 8011ace:	011b      	lsls	r3, r3, #4
 8011ad0:	4413      	add	r3, r2
 8011ad2:	3308      	adds	r3, #8
 8011ad4:	681a      	ldr	r2, [r3, #0]
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8011ada:	429a      	cmp	r2, r3
 8011adc:	d006      	beq.n	8011aec <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8011ade:	68fb      	ldr	r3, [r7, #12]
 8011ae0:	3301      	adds	r3, #1
 8011ae2:	60fb      	str	r3, [r7, #12]
 8011ae4:	68fb      	ldr	r3, [r7, #12]
 8011ae6:	2b01      	cmp	r3, #1
 8011ae8:	d9dc      	bls.n	8011aa4 <inc_lock+0x10>
 8011aea:	e000      	b.n	8011aee <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8011aec:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8011aee:	68fb      	ldr	r3, [r7, #12]
 8011af0:	2b02      	cmp	r3, #2
 8011af2:	d132      	bne.n	8011b5a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011af4:	2300      	movs	r3, #0
 8011af6:	60fb      	str	r3, [r7, #12]
 8011af8:	e002      	b.n	8011b00 <inc_lock+0x6c>
 8011afa:	68fb      	ldr	r3, [r7, #12]
 8011afc:	3301      	adds	r3, #1
 8011afe:	60fb      	str	r3, [r7, #12]
 8011b00:	68fb      	ldr	r3, [r7, #12]
 8011b02:	2b01      	cmp	r3, #1
 8011b04:	d806      	bhi.n	8011b14 <inc_lock+0x80>
 8011b06:	4a29      	ldr	r2, [pc, #164]	; (8011bac <inc_lock+0x118>)
 8011b08:	68fb      	ldr	r3, [r7, #12]
 8011b0a:	011b      	lsls	r3, r3, #4
 8011b0c:	4413      	add	r3, r2
 8011b0e:	681b      	ldr	r3, [r3, #0]
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d1f2      	bne.n	8011afa <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8011b14:	68fb      	ldr	r3, [r7, #12]
 8011b16:	2b02      	cmp	r3, #2
 8011b18:	d101      	bne.n	8011b1e <inc_lock+0x8a>
 8011b1a:	2300      	movs	r3, #0
 8011b1c:	e040      	b.n	8011ba0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	681a      	ldr	r2, [r3, #0]
 8011b22:	4922      	ldr	r1, [pc, #136]	; (8011bac <inc_lock+0x118>)
 8011b24:	68fb      	ldr	r3, [r7, #12]
 8011b26:	011b      	lsls	r3, r3, #4
 8011b28:	440b      	add	r3, r1
 8011b2a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	689a      	ldr	r2, [r3, #8]
 8011b30:	491e      	ldr	r1, [pc, #120]	; (8011bac <inc_lock+0x118>)
 8011b32:	68fb      	ldr	r3, [r7, #12]
 8011b34:	011b      	lsls	r3, r3, #4
 8011b36:	440b      	add	r3, r1
 8011b38:	3304      	adds	r3, #4
 8011b3a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	695a      	ldr	r2, [r3, #20]
 8011b40:	491a      	ldr	r1, [pc, #104]	; (8011bac <inc_lock+0x118>)
 8011b42:	68fb      	ldr	r3, [r7, #12]
 8011b44:	011b      	lsls	r3, r3, #4
 8011b46:	440b      	add	r3, r1
 8011b48:	3308      	adds	r3, #8
 8011b4a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8011b4c:	4a17      	ldr	r2, [pc, #92]	; (8011bac <inc_lock+0x118>)
 8011b4e:	68fb      	ldr	r3, [r7, #12]
 8011b50:	011b      	lsls	r3, r3, #4
 8011b52:	4413      	add	r3, r2
 8011b54:	330c      	adds	r3, #12
 8011b56:	2200      	movs	r2, #0
 8011b58:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8011b5a:	683b      	ldr	r3, [r7, #0]
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	d009      	beq.n	8011b74 <inc_lock+0xe0>
 8011b60:	4a12      	ldr	r2, [pc, #72]	; (8011bac <inc_lock+0x118>)
 8011b62:	68fb      	ldr	r3, [r7, #12]
 8011b64:	011b      	lsls	r3, r3, #4
 8011b66:	4413      	add	r3, r2
 8011b68:	330c      	adds	r3, #12
 8011b6a:	881b      	ldrh	r3, [r3, #0]
 8011b6c:	2b00      	cmp	r3, #0
 8011b6e:	d001      	beq.n	8011b74 <inc_lock+0xe0>
 8011b70:	2300      	movs	r3, #0
 8011b72:	e015      	b.n	8011ba0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8011b74:	683b      	ldr	r3, [r7, #0]
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	d108      	bne.n	8011b8c <inc_lock+0xf8>
 8011b7a:	4a0c      	ldr	r2, [pc, #48]	; (8011bac <inc_lock+0x118>)
 8011b7c:	68fb      	ldr	r3, [r7, #12]
 8011b7e:	011b      	lsls	r3, r3, #4
 8011b80:	4413      	add	r3, r2
 8011b82:	330c      	adds	r3, #12
 8011b84:	881b      	ldrh	r3, [r3, #0]
 8011b86:	3301      	adds	r3, #1
 8011b88:	b29a      	uxth	r2, r3
 8011b8a:	e001      	b.n	8011b90 <inc_lock+0xfc>
 8011b8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011b90:	4906      	ldr	r1, [pc, #24]	; (8011bac <inc_lock+0x118>)
 8011b92:	68fb      	ldr	r3, [r7, #12]
 8011b94:	011b      	lsls	r3, r3, #4
 8011b96:	440b      	add	r3, r1
 8011b98:	330c      	adds	r3, #12
 8011b9a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8011b9c:	68fb      	ldr	r3, [r7, #12]
 8011b9e:	3301      	adds	r3, #1
}
 8011ba0:	4618      	mov	r0, r3
 8011ba2:	3714      	adds	r7, #20
 8011ba4:	46bd      	mov	sp, r7
 8011ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011baa:	4770      	bx	lr
 8011bac:	200452dc 	.word	0x200452dc

08011bb0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8011bb0:	b480      	push	{r7}
 8011bb2:	b085      	sub	sp, #20
 8011bb4:	af00      	add	r7, sp, #0
 8011bb6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	3b01      	subs	r3, #1
 8011bbc:	607b      	str	r3, [r7, #4]
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	2b01      	cmp	r3, #1
 8011bc2:	d825      	bhi.n	8011c10 <dec_lock+0x60>
		n = Files[i].ctr;
 8011bc4:	4a17      	ldr	r2, [pc, #92]	; (8011c24 <dec_lock+0x74>)
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	011b      	lsls	r3, r3, #4
 8011bca:	4413      	add	r3, r2
 8011bcc:	330c      	adds	r3, #12
 8011bce:	881b      	ldrh	r3, [r3, #0]
 8011bd0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8011bd2:	89fb      	ldrh	r3, [r7, #14]
 8011bd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011bd8:	d101      	bne.n	8011bde <dec_lock+0x2e>
 8011bda:	2300      	movs	r3, #0
 8011bdc:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8011bde:	89fb      	ldrh	r3, [r7, #14]
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	d002      	beq.n	8011bea <dec_lock+0x3a>
 8011be4:	89fb      	ldrh	r3, [r7, #14]
 8011be6:	3b01      	subs	r3, #1
 8011be8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8011bea:	4a0e      	ldr	r2, [pc, #56]	; (8011c24 <dec_lock+0x74>)
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	011b      	lsls	r3, r3, #4
 8011bf0:	4413      	add	r3, r2
 8011bf2:	330c      	adds	r3, #12
 8011bf4:	89fa      	ldrh	r2, [r7, #14]
 8011bf6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8011bf8:	89fb      	ldrh	r3, [r7, #14]
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	d105      	bne.n	8011c0a <dec_lock+0x5a>
 8011bfe:	4a09      	ldr	r2, [pc, #36]	; (8011c24 <dec_lock+0x74>)
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	011b      	lsls	r3, r3, #4
 8011c04:	4413      	add	r3, r2
 8011c06:	2200      	movs	r2, #0
 8011c08:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8011c0a:	2300      	movs	r3, #0
 8011c0c:	737b      	strb	r3, [r7, #13]
 8011c0e:	e001      	b.n	8011c14 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8011c10:	2302      	movs	r3, #2
 8011c12:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8011c14:	7b7b      	ldrb	r3, [r7, #13]
}
 8011c16:	4618      	mov	r0, r3
 8011c18:	3714      	adds	r7, #20
 8011c1a:	46bd      	mov	sp, r7
 8011c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c20:	4770      	bx	lr
 8011c22:	bf00      	nop
 8011c24:	200452dc 	.word	0x200452dc

08011c28 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8011c28:	b480      	push	{r7}
 8011c2a:	b085      	sub	sp, #20
 8011c2c:	af00      	add	r7, sp, #0
 8011c2e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8011c30:	2300      	movs	r3, #0
 8011c32:	60fb      	str	r3, [r7, #12]
 8011c34:	e010      	b.n	8011c58 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8011c36:	4a0d      	ldr	r2, [pc, #52]	; (8011c6c <clear_lock+0x44>)
 8011c38:	68fb      	ldr	r3, [r7, #12]
 8011c3a:	011b      	lsls	r3, r3, #4
 8011c3c:	4413      	add	r3, r2
 8011c3e:	681b      	ldr	r3, [r3, #0]
 8011c40:	687a      	ldr	r2, [r7, #4]
 8011c42:	429a      	cmp	r2, r3
 8011c44:	d105      	bne.n	8011c52 <clear_lock+0x2a>
 8011c46:	4a09      	ldr	r2, [pc, #36]	; (8011c6c <clear_lock+0x44>)
 8011c48:	68fb      	ldr	r3, [r7, #12]
 8011c4a:	011b      	lsls	r3, r3, #4
 8011c4c:	4413      	add	r3, r2
 8011c4e:	2200      	movs	r2, #0
 8011c50:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8011c52:	68fb      	ldr	r3, [r7, #12]
 8011c54:	3301      	adds	r3, #1
 8011c56:	60fb      	str	r3, [r7, #12]
 8011c58:	68fb      	ldr	r3, [r7, #12]
 8011c5a:	2b01      	cmp	r3, #1
 8011c5c:	d9eb      	bls.n	8011c36 <clear_lock+0xe>
	}
}
 8011c5e:	bf00      	nop
 8011c60:	3714      	adds	r7, #20
 8011c62:	46bd      	mov	sp, r7
 8011c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c68:	4770      	bx	lr
 8011c6a:	bf00      	nop
 8011c6c:	200452dc 	.word	0x200452dc

08011c70 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8011c70:	b580      	push	{r7, lr}
 8011c72:	b086      	sub	sp, #24
 8011c74:	af00      	add	r7, sp, #0
 8011c76:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8011c78:	2300      	movs	r3, #0
 8011c7a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	78db      	ldrb	r3, [r3, #3]
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d034      	beq.n	8011cee <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011c88:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	7858      	ldrb	r0, [r3, #1]
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011c94:	2301      	movs	r3, #1
 8011c96:	697a      	ldr	r2, [r7, #20]
 8011c98:	f7ff fd40 	bl	801171c <disk_write>
 8011c9c:	4603      	mov	r3, r0
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d002      	beq.n	8011ca8 <sync_window+0x38>
			res = FR_DISK_ERR;
 8011ca2:	2301      	movs	r3, #1
 8011ca4:	73fb      	strb	r3, [r7, #15]
 8011ca6:	e022      	b.n	8011cee <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	2200      	movs	r2, #0
 8011cac:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011cb2:	697a      	ldr	r2, [r7, #20]
 8011cb4:	1ad2      	subs	r2, r2, r3
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	6a1b      	ldr	r3, [r3, #32]
 8011cba:	429a      	cmp	r2, r3
 8011cbc:	d217      	bcs.n	8011cee <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	789b      	ldrb	r3, [r3, #2]
 8011cc2:	613b      	str	r3, [r7, #16]
 8011cc4:	e010      	b.n	8011ce8 <sync_window+0x78>
					wsect += fs->fsize;
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	6a1b      	ldr	r3, [r3, #32]
 8011cca:	697a      	ldr	r2, [r7, #20]
 8011ccc:	4413      	add	r3, r2
 8011cce:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	7858      	ldrb	r0, [r3, #1]
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011cda:	2301      	movs	r3, #1
 8011cdc:	697a      	ldr	r2, [r7, #20]
 8011cde:	f7ff fd1d 	bl	801171c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011ce2:	693b      	ldr	r3, [r7, #16]
 8011ce4:	3b01      	subs	r3, #1
 8011ce6:	613b      	str	r3, [r7, #16]
 8011ce8:	693b      	ldr	r3, [r7, #16]
 8011cea:	2b01      	cmp	r3, #1
 8011cec:	d8eb      	bhi.n	8011cc6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8011cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8011cf0:	4618      	mov	r0, r3
 8011cf2:	3718      	adds	r7, #24
 8011cf4:	46bd      	mov	sp, r7
 8011cf6:	bd80      	pop	{r7, pc}

08011cf8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8011cf8:	b580      	push	{r7, lr}
 8011cfa:	b084      	sub	sp, #16
 8011cfc:	af00      	add	r7, sp, #0
 8011cfe:	6078      	str	r0, [r7, #4]
 8011d00:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8011d02:	2300      	movs	r3, #0
 8011d04:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011d0a:	683a      	ldr	r2, [r7, #0]
 8011d0c:	429a      	cmp	r2, r3
 8011d0e:	d01b      	beq.n	8011d48 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8011d10:	6878      	ldr	r0, [r7, #4]
 8011d12:	f7ff ffad 	bl	8011c70 <sync_window>
 8011d16:	4603      	mov	r3, r0
 8011d18:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8011d1a:	7bfb      	ldrb	r3, [r7, #15]
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	d113      	bne.n	8011d48 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	7858      	ldrb	r0, [r3, #1]
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011d2a:	2301      	movs	r3, #1
 8011d2c:	683a      	ldr	r2, [r7, #0]
 8011d2e:	f7ff fcd5 	bl	80116dc <disk_read>
 8011d32:	4603      	mov	r3, r0
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	d004      	beq.n	8011d42 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8011d38:	f04f 33ff 	mov.w	r3, #4294967295
 8011d3c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8011d3e:	2301      	movs	r3, #1
 8011d40:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	683a      	ldr	r2, [r7, #0]
 8011d46:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8011d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d4a:	4618      	mov	r0, r3
 8011d4c:	3710      	adds	r7, #16
 8011d4e:	46bd      	mov	sp, r7
 8011d50:	bd80      	pop	{r7, pc}
	...

08011d54 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8011d54:	b580      	push	{r7, lr}
 8011d56:	b084      	sub	sp, #16
 8011d58:	af00      	add	r7, sp, #0
 8011d5a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8011d5c:	6878      	ldr	r0, [r7, #4]
 8011d5e:	f7ff ff87 	bl	8011c70 <sync_window>
 8011d62:	4603      	mov	r3, r0
 8011d64:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8011d66:	7bfb      	ldrb	r3, [r7, #15]
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	d159      	bne.n	8011e20 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	781b      	ldrb	r3, [r3, #0]
 8011d70:	2b03      	cmp	r3, #3
 8011d72:	d149      	bne.n	8011e08 <sync_fs+0xb4>
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	791b      	ldrb	r3, [r3, #4]
 8011d78:	2b01      	cmp	r3, #1
 8011d7a:	d145      	bne.n	8011e08 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	899b      	ldrh	r3, [r3, #12]
 8011d86:	461a      	mov	r2, r3
 8011d88:	2100      	movs	r1, #0
 8011d8a:	f7ff fda8 	bl	80118de <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	3338      	adds	r3, #56	; 0x38
 8011d92:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011d96:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8011d9a:	4618      	mov	r0, r3
 8011d9c:	f7ff fd37 	bl	801180e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	3338      	adds	r3, #56	; 0x38
 8011da4:	4921      	ldr	r1, [pc, #132]	; (8011e2c <sync_fs+0xd8>)
 8011da6:	4618      	mov	r0, r3
 8011da8:	f7ff fd4c 	bl	8011844 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	3338      	adds	r3, #56	; 0x38
 8011db0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8011db4:	491e      	ldr	r1, [pc, #120]	; (8011e30 <sync_fs+0xdc>)
 8011db6:	4618      	mov	r0, r3
 8011db8:	f7ff fd44 	bl	8011844 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	3338      	adds	r3, #56	; 0x38
 8011dc0:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	695b      	ldr	r3, [r3, #20]
 8011dc8:	4619      	mov	r1, r3
 8011dca:	4610      	mov	r0, r2
 8011dcc:	f7ff fd3a 	bl	8011844 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	3338      	adds	r3, #56	; 0x38
 8011dd4:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	691b      	ldr	r3, [r3, #16]
 8011ddc:	4619      	mov	r1, r3
 8011dde:	4610      	mov	r0, r2
 8011de0:	f7ff fd30 	bl	8011844 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011de8:	1c5a      	adds	r2, r3, #1
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	7858      	ldrb	r0, [r3, #1]
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011dfc:	2301      	movs	r3, #1
 8011dfe:	f7ff fc8d 	bl	801171c <disk_write>
			fs->fsi_flag = 0;
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	2200      	movs	r2, #0
 8011e06:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	785b      	ldrb	r3, [r3, #1]
 8011e0c:	2200      	movs	r2, #0
 8011e0e:	2100      	movs	r1, #0
 8011e10:	4618      	mov	r0, r3
 8011e12:	f7ff fca3 	bl	801175c <disk_ioctl>
 8011e16:	4603      	mov	r3, r0
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d001      	beq.n	8011e20 <sync_fs+0xcc>
 8011e1c:	2301      	movs	r3, #1
 8011e1e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8011e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e22:	4618      	mov	r0, r3
 8011e24:	3710      	adds	r7, #16
 8011e26:	46bd      	mov	sp, r7
 8011e28:	bd80      	pop	{r7, pc}
 8011e2a:	bf00      	nop
 8011e2c:	41615252 	.word	0x41615252
 8011e30:	61417272 	.word	0x61417272

08011e34 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8011e34:	b480      	push	{r7}
 8011e36:	b083      	sub	sp, #12
 8011e38:	af00      	add	r7, sp, #0
 8011e3a:	6078      	str	r0, [r7, #4]
 8011e3c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8011e3e:	683b      	ldr	r3, [r7, #0]
 8011e40:	3b02      	subs	r3, #2
 8011e42:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	69db      	ldr	r3, [r3, #28]
 8011e48:	3b02      	subs	r3, #2
 8011e4a:	683a      	ldr	r2, [r7, #0]
 8011e4c:	429a      	cmp	r2, r3
 8011e4e:	d301      	bcc.n	8011e54 <clust2sect+0x20>
 8011e50:	2300      	movs	r3, #0
 8011e52:	e008      	b.n	8011e66 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	895b      	ldrh	r3, [r3, #10]
 8011e58:	461a      	mov	r2, r3
 8011e5a:	683b      	ldr	r3, [r7, #0]
 8011e5c:	fb03 f202 	mul.w	r2, r3, r2
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011e64:	4413      	add	r3, r2
}
 8011e66:	4618      	mov	r0, r3
 8011e68:	370c      	adds	r7, #12
 8011e6a:	46bd      	mov	sp, r7
 8011e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e70:	4770      	bx	lr

08011e72 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8011e72:	b580      	push	{r7, lr}
 8011e74:	b086      	sub	sp, #24
 8011e76:	af00      	add	r7, sp, #0
 8011e78:	6078      	str	r0, [r7, #4]
 8011e7a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	681b      	ldr	r3, [r3, #0]
 8011e80:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8011e82:	683b      	ldr	r3, [r7, #0]
 8011e84:	2b01      	cmp	r3, #1
 8011e86:	d904      	bls.n	8011e92 <get_fat+0x20>
 8011e88:	693b      	ldr	r3, [r7, #16]
 8011e8a:	69db      	ldr	r3, [r3, #28]
 8011e8c:	683a      	ldr	r2, [r7, #0]
 8011e8e:	429a      	cmp	r2, r3
 8011e90:	d302      	bcc.n	8011e98 <get_fat+0x26>
		val = 1;	/* Internal error */
 8011e92:	2301      	movs	r3, #1
 8011e94:	617b      	str	r3, [r7, #20]
 8011e96:	e0b7      	b.n	8012008 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8011e98:	f04f 33ff 	mov.w	r3, #4294967295
 8011e9c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8011e9e:	693b      	ldr	r3, [r7, #16]
 8011ea0:	781b      	ldrb	r3, [r3, #0]
 8011ea2:	2b02      	cmp	r3, #2
 8011ea4:	d05a      	beq.n	8011f5c <get_fat+0xea>
 8011ea6:	2b03      	cmp	r3, #3
 8011ea8:	d07d      	beq.n	8011fa6 <get_fat+0x134>
 8011eaa:	2b01      	cmp	r3, #1
 8011eac:	f040 80a2 	bne.w	8011ff4 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8011eb0:	683b      	ldr	r3, [r7, #0]
 8011eb2:	60fb      	str	r3, [r7, #12]
 8011eb4:	68fb      	ldr	r3, [r7, #12]
 8011eb6:	085b      	lsrs	r3, r3, #1
 8011eb8:	68fa      	ldr	r2, [r7, #12]
 8011eba:	4413      	add	r3, r2
 8011ebc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011ebe:	693b      	ldr	r3, [r7, #16]
 8011ec0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011ec2:	693b      	ldr	r3, [r7, #16]
 8011ec4:	899b      	ldrh	r3, [r3, #12]
 8011ec6:	4619      	mov	r1, r3
 8011ec8:	68fb      	ldr	r3, [r7, #12]
 8011eca:	fbb3 f3f1 	udiv	r3, r3, r1
 8011ece:	4413      	add	r3, r2
 8011ed0:	4619      	mov	r1, r3
 8011ed2:	6938      	ldr	r0, [r7, #16]
 8011ed4:	f7ff ff10 	bl	8011cf8 <move_window>
 8011ed8:	4603      	mov	r3, r0
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	f040 808d 	bne.w	8011ffa <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 8011ee0:	68fb      	ldr	r3, [r7, #12]
 8011ee2:	1c5a      	adds	r2, r3, #1
 8011ee4:	60fa      	str	r2, [r7, #12]
 8011ee6:	693a      	ldr	r2, [r7, #16]
 8011ee8:	8992      	ldrh	r2, [r2, #12]
 8011eea:	fbb3 f1f2 	udiv	r1, r3, r2
 8011eee:	fb02 f201 	mul.w	r2, r2, r1
 8011ef2:	1a9b      	subs	r3, r3, r2
 8011ef4:	693a      	ldr	r2, [r7, #16]
 8011ef6:	4413      	add	r3, r2
 8011ef8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011efc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011efe:	693b      	ldr	r3, [r7, #16]
 8011f00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011f02:	693b      	ldr	r3, [r7, #16]
 8011f04:	899b      	ldrh	r3, [r3, #12]
 8011f06:	4619      	mov	r1, r3
 8011f08:	68fb      	ldr	r3, [r7, #12]
 8011f0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8011f0e:	4413      	add	r3, r2
 8011f10:	4619      	mov	r1, r3
 8011f12:	6938      	ldr	r0, [r7, #16]
 8011f14:	f7ff fef0 	bl	8011cf8 <move_window>
 8011f18:	4603      	mov	r3, r0
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	d16f      	bne.n	8011ffe <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8011f1e:	693b      	ldr	r3, [r7, #16]
 8011f20:	899b      	ldrh	r3, [r3, #12]
 8011f22:	461a      	mov	r2, r3
 8011f24:	68fb      	ldr	r3, [r7, #12]
 8011f26:	fbb3 f1f2 	udiv	r1, r3, r2
 8011f2a:	fb02 f201 	mul.w	r2, r2, r1
 8011f2e:	1a9b      	subs	r3, r3, r2
 8011f30:	693a      	ldr	r2, [r7, #16]
 8011f32:	4413      	add	r3, r2
 8011f34:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011f38:	021b      	lsls	r3, r3, #8
 8011f3a:	461a      	mov	r2, r3
 8011f3c:	68bb      	ldr	r3, [r7, #8]
 8011f3e:	4313      	orrs	r3, r2
 8011f40:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8011f42:	683b      	ldr	r3, [r7, #0]
 8011f44:	f003 0301 	and.w	r3, r3, #1
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d002      	beq.n	8011f52 <get_fat+0xe0>
 8011f4c:	68bb      	ldr	r3, [r7, #8]
 8011f4e:	091b      	lsrs	r3, r3, #4
 8011f50:	e002      	b.n	8011f58 <get_fat+0xe6>
 8011f52:	68bb      	ldr	r3, [r7, #8]
 8011f54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011f58:	617b      	str	r3, [r7, #20]
			break;
 8011f5a:	e055      	b.n	8012008 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011f5c:	693b      	ldr	r3, [r7, #16]
 8011f5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011f60:	693b      	ldr	r3, [r7, #16]
 8011f62:	899b      	ldrh	r3, [r3, #12]
 8011f64:	085b      	lsrs	r3, r3, #1
 8011f66:	b29b      	uxth	r3, r3
 8011f68:	4619      	mov	r1, r3
 8011f6a:	683b      	ldr	r3, [r7, #0]
 8011f6c:	fbb3 f3f1 	udiv	r3, r3, r1
 8011f70:	4413      	add	r3, r2
 8011f72:	4619      	mov	r1, r3
 8011f74:	6938      	ldr	r0, [r7, #16]
 8011f76:	f7ff febf 	bl	8011cf8 <move_window>
 8011f7a:	4603      	mov	r3, r0
 8011f7c:	2b00      	cmp	r3, #0
 8011f7e:	d140      	bne.n	8012002 <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8011f80:	693b      	ldr	r3, [r7, #16]
 8011f82:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011f86:	683b      	ldr	r3, [r7, #0]
 8011f88:	005b      	lsls	r3, r3, #1
 8011f8a:	693a      	ldr	r2, [r7, #16]
 8011f8c:	8992      	ldrh	r2, [r2, #12]
 8011f8e:	fbb3 f0f2 	udiv	r0, r3, r2
 8011f92:	fb02 f200 	mul.w	r2, r2, r0
 8011f96:	1a9b      	subs	r3, r3, r2
 8011f98:	440b      	add	r3, r1
 8011f9a:	4618      	mov	r0, r3
 8011f9c:	f7ff fbfc 	bl	8011798 <ld_word>
 8011fa0:	4603      	mov	r3, r0
 8011fa2:	617b      	str	r3, [r7, #20]
			break;
 8011fa4:	e030      	b.n	8012008 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011fa6:	693b      	ldr	r3, [r7, #16]
 8011fa8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011faa:	693b      	ldr	r3, [r7, #16]
 8011fac:	899b      	ldrh	r3, [r3, #12]
 8011fae:	089b      	lsrs	r3, r3, #2
 8011fb0:	b29b      	uxth	r3, r3
 8011fb2:	4619      	mov	r1, r3
 8011fb4:	683b      	ldr	r3, [r7, #0]
 8011fb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8011fba:	4413      	add	r3, r2
 8011fbc:	4619      	mov	r1, r3
 8011fbe:	6938      	ldr	r0, [r7, #16]
 8011fc0:	f7ff fe9a 	bl	8011cf8 <move_window>
 8011fc4:	4603      	mov	r3, r0
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	d11d      	bne.n	8012006 <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8011fca:	693b      	ldr	r3, [r7, #16]
 8011fcc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011fd0:	683b      	ldr	r3, [r7, #0]
 8011fd2:	009b      	lsls	r3, r3, #2
 8011fd4:	693a      	ldr	r2, [r7, #16]
 8011fd6:	8992      	ldrh	r2, [r2, #12]
 8011fd8:	fbb3 f0f2 	udiv	r0, r3, r2
 8011fdc:	fb02 f200 	mul.w	r2, r2, r0
 8011fe0:	1a9b      	subs	r3, r3, r2
 8011fe2:	440b      	add	r3, r1
 8011fe4:	4618      	mov	r0, r3
 8011fe6:	f7ff fbef 	bl	80117c8 <ld_dword>
 8011fea:	4603      	mov	r3, r0
 8011fec:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8011ff0:	617b      	str	r3, [r7, #20]
			break;
 8011ff2:	e009      	b.n	8012008 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8011ff4:	2301      	movs	r3, #1
 8011ff6:	617b      	str	r3, [r7, #20]
 8011ff8:	e006      	b.n	8012008 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011ffa:	bf00      	nop
 8011ffc:	e004      	b.n	8012008 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011ffe:	bf00      	nop
 8012000:	e002      	b.n	8012008 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8012002:	bf00      	nop
 8012004:	e000      	b.n	8012008 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8012006:	bf00      	nop
		}
	}

	return val;
 8012008:	697b      	ldr	r3, [r7, #20]
}
 801200a:	4618      	mov	r0, r3
 801200c:	3718      	adds	r7, #24
 801200e:	46bd      	mov	sp, r7
 8012010:	bd80      	pop	{r7, pc}

08012012 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8012012:	b590      	push	{r4, r7, lr}
 8012014:	b089      	sub	sp, #36	; 0x24
 8012016:	af00      	add	r7, sp, #0
 8012018:	60f8      	str	r0, [r7, #12]
 801201a:	60b9      	str	r1, [r7, #8]
 801201c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 801201e:	2302      	movs	r3, #2
 8012020:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8012022:	68bb      	ldr	r3, [r7, #8]
 8012024:	2b01      	cmp	r3, #1
 8012026:	f240 8106 	bls.w	8012236 <put_fat+0x224>
 801202a:	68fb      	ldr	r3, [r7, #12]
 801202c:	69db      	ldr	r3, [r3, #28]
 801202e:	68ba      	ldr	r2, [r7, #8]
 8012030:	429a      	cmp	r2, r3
 8012032:	f080 8100 	bcs.w	8012236 <put_fat+0x224>
		switch (fs->fs_type) {
 8012036:	68fb      	ldr	r3, [r7, #12]
 8012038:	781b      	ldrb	r3, [r3, #0]
 801203a:	2b02      	cmp	r3, #2
 801203c:	f000 8088 	beq.w	8012150 <put_fat+0x13e>
 8012040:	2b03      	cmp	r3, #3
 8012042:	f000 80b0 	beq.w	80121a6 <put_fat+0x194>
 8012046:	2b01      	cmp	r3, #1
 8012048:	f040 80f5 	bne.w	8012236 <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 801204c:	68bb      	ldr	r3, [r7, #8]
 801204e:	61bb      	str	r3, [r7, #24]
 8012050:	69bb      	ldr	r3, [r7, #24]
 8012052:	085b      	lsrs	r3, r3, #1
 8012054:	69ba      	ldr	r2, [r7, #24]
 8012056:	4413      	add	r3, r2
 8012058:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801205a:	68fb      	ldr	r3, [r7, #12]
 801205c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801205e:	68fb      	ldr	r3, [r7, #12]
 8012060:	899b      	ldrh	r3, [r3, #12]
 8012062:	4619      	mov	r1, r3
 8012064:	69bb      	ldr	r3, [r7, #24]
 8012066:	fbb3 f3f1 	udiv	r3, r3, r1
 801206a:	4413      	add	r3, r2
 801206c:	4619      	mov	r1, r3
 801206e:	68f8      	ldr	r0, [r7, #12]
 8012070:	f7ff fe42 	bl	8011cf8 <move_window>
 8012074:	4603      	mov	r3, r0
 8012076:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012078:	7ffb      	ldrb	r3, [r7, #31]
 801207a:	2b00      	cmp	r3, #0
 801207c:	f040 80d4 	bne.w	8012228 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 8012080:	68fb      	ldr	r3, [r7, #12]
 8012082:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8012086:	69bb      	ldr	r3, [r7, #24]
 8012088:	1c5a      	adds	r2, r3, #1
 801208a:	61ba      	str	r2, [r7, #24]
 801208c:	68fa      	ldr	r2, [r7, #12]
 801208e:	8992      	ldrh	r2, [r2, #12]
 8012090:	fbb3 f0f2 	udiv	r0, r3, r2
 8012094:	fb02 f200 	mul.w	r2, r2, r0
 8012098:	1a9b      	subs	r3, r3, r2
 801209a:	440b      	add	r3, r1
 801209c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801209e:	68bb      	ldr	r3, [r7, #8]
 80120a0:	f003 0301 	and.w	r3, r3, #1
 80120a4:	2b00      	cmp	r3, #0
 80120a6:	d00d      	beq.n	80120c4 <put_fat+0xb2>
 80120a8:	697b      	ldr	r3, [r7, #20]
 80120aa:	781b      	ldrb	r3, [r3, #0]
 80120ac:	b25b      	sxtb	r3, r3
 80120ae:	f003 030f 	and.w	r3, r3, #15
 80120b2:	b25a      	sxtb	r2, r3
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	b2db      	uxtb	r3, r3
 80120b8:	011b      	lsls	r3, r3, #4
 80120ba:	b25b      	sxtb	r3, r3
 80120bc:	4313      	orrs	r3, r2
 80120be:	b25b      	sxtb	r3, r3
 80120c0:	b2db      	uxtb	r3, r3
 80120c2:	e001      	b.n	80120c8 <put_fat+0xb6>
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	b2db      	uxtb	r3, r3
 80120c8:	697a      	ldr	r2, [r7, #20]
 80120ca:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80120cc:	68fb      	ldr	r3, [r7, #12]
 80120ce:	2201      	movs	r2, #1
 80120d0:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80120d2:	68fb      	ldr	r3, [r7, #12]
 80120d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80120d6:	68fb      	ldr	r3, [r7, #12]
 80120d8:	899b      	ldrh	r3, [r3, #12]
 80120da:	4619      	mov	r1, r3
 80120dc:	69bb      	ldr	r3, [r7, #24]
 80120de:	fbb3 f3f1 	udiv	r3, r3, r1
 80120e2:	4413      	add	r3, r2
 80120e4:	4619      	mov	r1, r3
 80120e6:	68f8      	ldr	r0, [r7, #12]
 80120e8:	f7ff fe06 	bl	8011cf8 <move_window>
 80120ec:	4603      	mov	r3, r0
 80120ee:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80120f0:	7ffb      	ldrb	r3, [r7, #31]
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	f040 809a 	bne.w	801222c <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 80120f8:	68fb      	ldr	r3, [r7, #12]
 80120fa:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80120fe:	68fb      	ldr	r3, [r7, #12]
 8012100:	899b      	ldrh	r3, [r3, #12]
 8012102:	461a      	mov	r2, r3
 8012104:	69bb      	ldr	r3, [r7, #24]
 8012106:	fbb3 f0f2 	udiv	r0, r3, r2
 801210a:	fb02 f200 	mul.w	r2, r2, r0
 801210e:	1a9b      	subs	r3, r3, r2
 8012110:	440b      	add	r3, r1
 8012112:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8012114:	68bb      	ldr	r3, [r7, #8]
 8012116:	f003 0301 	and.w	r3, r3, #1
 801211a:	2b00      	cmp	r3, #0
 801211c:	d003      	beq.n	8012126 <put_fat+0x114>
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	091b      	lsrs	r3, r3, #4
 8012122:	b2db      	uxtb	r3, r3
 8012124:	e00e      	b.n	8012144 <put_fat+0x132>
 8012126:	697b      	ldr	r3, [r7, #20]
 8012128:	781b      	ldrb	r3, [r3, #0]
 801212a:	b25b      	sxtb	r3, r3
 801212c:	f023 030f 	bic.w	r3, r3, #15
 8012130:	b25a      	sxtb	r2, r3
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	0a1b      	lsrs	r3, r3, #8
 8012136:	b25b      	sxtb	r3, r3
 8012138:	f003 030f 	and.w	r3, r3, #15
 801213c:	b25b      	sxtb	r3, r3
 801213e:	4313      	orrs	r3, r2
 8012140:	b25b      	sxtb	r3, r3
 8012142:	b2db      	uxtb	r3, r3
 8012144:	697a      	ldr	r2, [r7, #20]
 8012146:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8012148:	68fb      	ldr	r3, [r7, #12]
 801214a:	2201      	movs	r2, #1
 801214c:	70da      	strb	r2, [r3, #3]
			break;
 801214e:	e072      	b.n	8012236 <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8012150:	68fb      	ldr	r3, [r7, #12]
 8012152:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012154:	68fb      	ldr	r3, [r7, #12]
 8012156:	899b      	ldrh	r3, [r3, #12]
 8012158:	085b      	lsrs	r3, r3, #1
 801215a:	b29b      	uxth	r3, r3
 801215c:	4619      	mov	r1, r3
 801215e:	68bb      	ldr	r3, [r7, #8]
 8012160:	fbb3 f3f1 	udiv	r3, r3, r1
 8012164:	4413      	add	r3, r2
 8012166:	4619      	mov	r1, r3
 8012168:	68f8      	ldr	r0, [r7, #12]
 801216a:	f7ff fdc5 	bl	8011cf8 <move_window>
 801216e:	4603      	mov	r3, r0
 8012170:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012172:	7ffb      	ldrb	r3, [r7, #31]
 8012174:	2b00      	cmp	r3, #0
 8012176:	d15b      	bne.n	8012230 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8012178:	68fb      	ldr	r3, [r7, #12]
 801217a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801217e:	68bb      	ldr	r3, [r7, #8]
 8012180:	005b      	lsls	r3, r3, #1
 8012182:	68fa      	ldr	r2, [r7, #12]
 8012184:	8992      	ldrh	r2, [r2, #12]
 8012186:	fbb3 f0f2 	udiv	r0, r3, r2
 801218a:	fb02 f200 	mul.w	r2, r2, r0
 801218e:	1a9b      	subs	r3, r3, r2
 8012190:	440b      	add	r3, r1
 8012192:	687a      	ldr	r2, [r7, #4]
 8012194:	b292      	uxth	r2, r2
 8012196:	4611      	mov	r1, r2
 8012198:	4618      	mov	r0, r3
 801219a:	f7ff fb38 	bl	801180e <st_word>
			fs->wflag = 1;
 801219e:	68fb      	ldr	r3, [r7, #12]
 80121a0:	2201      	movs	r2, #1
 80121a2:	70da      	strb	r2, [r3, #3]
			break;
 80121a4:	e047      	b.n	8012236 <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80121a6:	68fb      	ldr	r3, [r7, #12]
 80121a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80121aa:	68fb      	ldr	r3, [r7, #12]
 80121ac:	899b      	ldrh	r3, [r3, #12]
 80121ae:	089b      	lsrs	r3, r3, #2
 80121b0:	b29b      	uxth	r3, r3
 80121b2:	4619      	mov	r1, r3
 80121b4:	68bb      	ldr	r3, [r7, #8]
 80121b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80121ba:	4413      	add	r3, r2
 80121bc:	4619      	mov	r1, r3
 80121be:	68f8      	ldr	r0, [r7, #12]
 80121c0:	f7ff fd9a 	bl	8011cf8 <move_window>
 80121c4:	4603      	mov	r3, r0
 80121c6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80121c8:	7ffb      	ldrb	r3, [r7, #31]
 80121ca:	2b00      	cmp	r3, #0
 80121cc:	d132      	bne.n	8012234 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80121d4:	68fb      	ldr	r3, [r7, #12]
 80121d6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80121da:	68bb      	ldr	r3, [r7, #8]
 80121dc:	009b      	lsls	r3, r3, #2
 80121de:	68fa      	ldr	r2, [r7, #12]
 80121e0:	8992      	ldrh	r2, [r2, #12]
 80121e2:	fbb3 f0f2 	udiv	r0, r3, r2
 80121e6:	fb02 f200 	mul.w	r2, r2, r0
 80121ea:	1a9b      	subs	r3, r3, r2
 80121ec:	440b      	add	r3, r1
 80121ee:	4618      	mov	r0, r3
 80121f0:	f7ff faea 	bl	80117c8 <ld_dword>
 80121f4:	4603      	mov	r3, r0
 80121f6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80121fa:	4323      	orrs	r3, r4
 80121fc:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80121fe:	68fb      	ldr	r3, [r7, #12]
 8012200:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8012204:	68bb      	ldr	r3, [r7, #8]
 8012206:	009b      	lsls	r3, r3, #2
 8012208:	68fa      	ldr	r2, [r7, #12]
 801220a:	8992      	ldrh	r2, [r2, #12]
 801220c:	fbb3 f0f2 	udiv	r0, r3, r2
 8012210:	fb02 f200 	mul.w	r2, r2, r0
 8012214:	1a9b      	subs	r3, r3, r2
 8012216:	440b      	add	r3, r1
 8012218:	6879      	ldr	r1, [r7, #4]
 801221a:	4618      	mov	r0, r3
 801221c:	f7ff fb12 	bl	8011844 <st_dword>
			fs->wflag = 1;
 8012220:	68fb      	ldr	r3, [r7, #12]
 8012222:	2201      	movs	r2, #1
 8012224:	70da      	strb	r2, [r3, #3]
			break;
 8012226:	e006      	b.n	8012236 <put_fat+0x224>
			if (res != FR_OK) break;
 8012228:	bf00      	nop
 801222a:	e004      	b.n	8012236 <put_fat+0x224>
			if (res != FR_OK) break;
 801222c:	bf00      	nop
 801222e:	e002      	b.n	8012236 <put_fat+0x224>
			if (res != FR_OK) break;
 8012230:	bf00      	nop
 8012232:	e000      	b.n	8012236 <put_fat+0x224>
			if (res != FR_OK) break;
 8012234:	bf00      	nop
		}
	}
	return res;
 8012236:	7ffb      	ldrb	r3, [r7, #31]
}
 8012238:	4618      	mov	r0, r3
 801223a:	3724      	adds	r7, #36	; 0x24
 801223c:	46bd      	mov	sp, r7
 801223e:	bd90      	pop	{r4, r7, pc}

08012240 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8012240:	b580      	push	{r7, lr}
 8012242:	b088      	sub	sp, #32
 8012244:	af00      	add	r7, sp, #0
 8012246:	60f8      	str	r0, [r7, #12]
 8012248:	60b9      	str	r1, [r7, #8]
 801224a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801224c:	2300      	movs	r3, #0
 801224e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8012250:	68fb      	ldr	r3, [r7, #12]
 8012252:	681b      	ldr	r3, [r3, #0]
 8012254:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8012256:	68bb      	ldr	r3, [r7, #8]
 8012258:	2b01      	cmp	r3, #1
 801225a:	d904      	bls.n	8012266 <remove_chain+0x26>
 801225c:	69bb      	ldr	r3, [r7, #24]
 801225e:	69db      	ldr	r3, [r3, #28]
 8012260:	68ba      	ldr	r2, [r7, #8]
 8012262:	429a      	cmp	r2, r3
 8012264:	d301      	bcc.n	801226a <remove_chain+0x2a>
 8012266:	2302      	movs	r3, #2
 8012268:	e04b      	b.n	8012302 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	2b00      	cmp	r3, #0
 801226e:	d00c      	beq.n	801228a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8012270:	f04f 32ff 	mov.w	r2, #4294967295
 8012274:	6879      	ldr	r1, [r7, #4]
 8012276:	69b8      	ldr	r0, [r7, #24]
 8012278:	f7ff fecb 	bl	8012012 <put_fat>
 801227c:	4603      	mov	r3, r0
 801227e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8012280:	7ffb      	ldrb	r3, [r7, #31]
 8012282:	2b00      	cmp	r3, #0
 8012284:	d001      	beq.n	801228a <remove_chain+0x4a>
 8012286:	7ffb      	ldrb	r3, [r7, #31]
 8012288:	e03b      	b.n	8012302 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801228a:	68b9      	ldr	r1, [r7, #8]
 801228c:	68f8      	ldr	r0, [r7, #12]
 801228e:	f7ff fdf0 	bl	8011e72 <get_fat>
 8012292:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8012294:	697b      	ldr	r3, [r7, #20]
 8012296:	2b00      	cmp	r3, #0
 8012298:	d031      	beq.n	80122fe <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801229a:	697b      	ldr	r3, [r7, #20]
 801229c:	2b01      	cmp	r3, #1
 801229e:	d101      	bne.n	80122a4 <remove_chain+0x64>
 80122a0:	2302      	movs	r3, #2
 80122a2:	e02e      	b.n	8012302 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80122a4:	697b      	ldr	r3, [r7, #20]
 80122a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80122aa:	d101      	bne.n	80122b0 <remove_chain+0x70>
 80122ac:	2301      	movs	r3, #1
 80122ae:	e028      	b.n	8012302 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80122b0:	2200      	movs	r2, #0
 80122b2:	68b9      	ldr	r1, [r7, #8]
 80122b4:	69b8      	ldr	r0, [r7, #24]
 80122b6:	f7ff feac 	bl	8012012 <put_fat>
 80122ba:	4603      	mov	r3, r0
 80122bc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80122be:	7ffb      	ldrb	r3, [r7, #31]
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	d001      	beq.n	80122c8 <remove_chain+0x88>
 80122c4:	7ffb      	ldrb	r3, [r7, #31]
 80122c6:	e01c      	b.n	8012302 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80122c8:	69bb      	ldr	r3, [r7, #24]
 80122ca:	695a      	ldr	r2, [r3, #20]
 80122cc:	69bb      	ldr	r3, [r7, #24]
 80122ce:	69db      	ldr	r3, [r3, #28]
 80122d0:	3b02      	subs	r3, #2
 80122d2:	429a      	cmp	r2, r3
 80122d4:	d20b      	bcs.n	80122ee <remove_chain+0xae>
			fs->free_clst++;
 80122d6:	69bb      	ldr	r3, [r7, #24]
 80122d8:	695b      	ldr	r3, [r3, #20]
 80122da:	1c5a      	adds	r2, r3, #1
 80122dc:	69bb      	ldr	r3, [r7, #24]
 80122de:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80122e0:	69bb      	ldr	r3, [r7, #24]
 80122e2:	791b      	ldrb	r3, [r3, #4]
 80122e4:	f043 0301 	orr.w	r3, r3, #1
 80122e8:	b2da      	uxtb	r2, r3
 80122ea:	69bb      	ldr	r3, [r7, #24]
 80122ec:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80122ee:	697b      	ldr	r3, [r7, #20]
 80122f0:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80122f2:	69bb      	ldr	r3, [r7, #24]
 80122f4:	69db      	ldr	r3, [r3, #28]
 80122f6:	68ba      	ldr	r2, [r7, #8]
 80122f8:	429a      	cmp	r2, r3
 80122fa:	d3c6      	bcc.n	801228a <remove_chain+0x4a>
 80122fc:	e000      	b.n	8012300 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80122fe:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8012300:	2300      	movs	r3, #0
}
 8012302:	4618      	mov	r0, r3
 8012304:	3720      	adds	r7, #32
 8012306:	46bd      	mov	sp, r7
 8012308:	bd80      	pop	{r7, pc}

0801230a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 801230a:	b580      	push	{r7, lr}
 801230c:	b088      	sub	sp, #32
 801230e:	af00      	add	r7, sp, #0
 8012310:	6078      	str	r0, [r7, #4]
 8012312:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	681b      	ldr	r3, [r3, #0]
 8012318:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 801231a:	683b      	ldr	r3, [r7, #0]
 801231c:	2b00      	cmp	r3, #0
 801231e:	d10d      	bne.n	801233c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8012320:	693b      	ldr	r3, [r7, #16]
 8012322:	691b      	ldr	r3, [r3, #16]
 8012324:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8012326:	69bb      	ldr	r3, [r7, #24]
 8012328:	2b00      	cmp	r3, #0
 801232a:	d004      	beq.n	8012336 <create_chain+0x2c>
 801232c:	693b      	ldr	r3, [r7, #16]
 801232e:	69db      	ldr	r3, [r3, #28]
 8012330:	69ba      	ldr	r2, [r7, #24]
 8012332:	429a      	cmp	r2, r3
 8012334:	d31b      	bcc.n	801236e <create_chain+0x64>
 8012336:	2301      	movs	r3, #1
 8012338:	61bb      	str	r3, [r7, #24]
 801233a:	e018      	b.n	801236e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801233c:	6839      	ldr	r1, [r7, #0]
 801233e:	6878      	ldr	r0, [r7, #4]
 8012340:	f7ff fd97 	bl	8011e72 <get_fat>
 8012344:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8012346:	68fb      	ldr	r3, [r7, #12]
 8012348:	2b01      	cmp	r3, #1
 801234a:	d801      	bhi.n	8012350 <create_chain+0x46>
 801234c:	2301      	movs	r3, #1
 801234e:	e070      	b.n	8012432 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8012350:	68fb      	ldr	r3, [r7, #12]
 8012352:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012356:	d101      	bne.n	801235c <create_chain+0x52>
 8012358:	68fb      	ldr	r3, [r7, #12]
 801235a:	e06a      	b.n	8012432 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801235c:	693b      	ldr	r3, [r7, #16]
 801235e:	69db      	ldr	r3, [r3, #28]
 8012360:	68fa      	ldr	r2, [r7, #12]
 8012362:	429a      	cmp	r2, r3
 8012364:	d201      	bcs.n	801236a <create_chain+0x60>
 8012366:	68fb      	ldr	r3, [r7, #12]
 8012368:	e063      	b.n	8012432 <create_chain+0x128>
		scl = clst;
 801236a:	683b      	ldr	r3, [r7, #0]
 801236c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 801236e:	69bb      	ldr	r3, [r7, #24]
 8012370:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8012372:	69fb      	ldr	r3, [r7, #28]
 8012374:	3301      	adds	r3, #1
 8012376:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8012378:	693b      	ldr	r3, [r7, #16]
 801237a:	69db      	ldr	r3, [r3, #28]
 801237c:	69fa      	ldr	r2, [r7, #28]
 801237e:	429a      	cmp	r2, r3
 8012380:	d307      	bcc.n	8012392 <create_chain+0x88>
				ncl = 2;
 8012382:	2302      	movs	r3, #2
 8012384:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8012386:	69fa      	ldr	r2, [r7, #28]
 8012388:	69bb      	ldr	r3, [r7, #24]
 801238a:	429a      	cmp	r2, r3
 801238c:	d901      	bls.n	8012392 <create_chain+0x88>
 801238e:	2300      	movs	r3, #0
 8012390:	e04f      	b.n	8012432 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8012392:	69f9      	ldr	r1, [r7, #28]
 8012394:	6878      	ldr	r0, [r7, #4]
 8012396:	f7ff fd6c 	bl	8011e72 <get_fat>
 801239a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801239c:	68fb      	ldr	r3, [r7, #12]
 801239e:	2b00      	cmp	r3, #0
 80123a0:	d00e      	beq.n	80123c0 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80123a2:	68fb      	ldr	r3, [r7, #12]
 80123a4:	2b01      	cmp	r3, #1
 80123a6:	d003      	beq.n	80123b0 <create_chain+0xa6>
 80123a8:	68fb      	ldr	r3, [r7, #12]
 80123aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80123ae:	d101      	bne.n	80123b4 <create_chain+0xaa>
 80123b0:	68fb      	ldr	r3, [r7, #12]
 80123b2:	e03e      	b.n	8012432 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80123b4:	69fa      	ldr	r2, [r7, #28]
 80123b6:	69bb      	ldr	r3, [r7, #24]
 80123b8:	429a      	cmp	r2, r3
 80123ba:	d1da      	bne.n	8012372 <create_chain+0x68>
 80123bc:	2300      	movs	r3, #0
 80123be:	e038      	b.n	8012432 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80123c0:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80123c2:	f04f 32ff 	mov.w	r2, #4294967295
 80123c6:	69f9      	ldr	r1, [r7, #28]
 80123c8:	6938      	ldr	r0, [r7, #16]
 80123ca:	f7ff fe22 	bl	8012012 <put_fat>
 80123ce:	4603      	mov	r3, r0
 80123d0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80123d2:	7dfb      	ldrb	r3, [r7, #23]
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	d109      	bne.n	80123ec <create_chain+0xe2>
 80123d8:	683b      	ldr	r3, [r7, #0]
 80123da:	2b00      	cmp	r3, #0
 80123dc:	d006      	beq.n	80123ec <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80123de:	69fa      	ldr	r2, [r7, #28]
 80123e0:	6839      	ldr	r1, [r7, #0]
 80123e2:	6938      	ldr	r0, [r7, #16]
 80123e4:	f7ff fe15 	bl	8012012 <put_fat>
 80123e8:	4603      	mov	r3, r0
 80123ea:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80123ec:	7dfb      	ldrb	r3, [r7, #23]
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	d116      	bne.n	8012420 <create_chain+0x116>
		fs->last_clst = ncl;
 80123f2:	693b      	ldr	r3, [r7, #16]
 80123f4:	69fa      	ldr	r2, [r7, #28]
 80123f6:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80123f8:	693b      	ldr	r3, [r7, #16]
 80123fa:	695a      	ldr	r2, [r3, #20]
 80123fc:	693b      	ldr	r3, [r7, #16]
 80123fe:	69db      	ldr	r3, [r3, #28]
 8012400:	3b02      	subs	r3, #2
 8012402:	429a      	cmp	r2, r3
 8012404:	d804      	bhi.n	8012410 <create_chain+0x106>
 8012406:	693b      	ldr	r3, [r7, #16]
 8012408:	695b      	ldr	r3, [r3, #20]
 801240a:	1e5a      	subs	r2, r3, #1
 801240c:	693b      	ldr	r3, [r7, #16]
 801240e:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8012410:	693b      	ldr	r3, [r7, #16]
 8012412:	791b      	ldrb	r3, [r3, #4]
 8012414:	f043 0301 	orr.w	r3, r3, #1
 8012418:	b2da      	uxtb	r2, r3
 801241a:	693b      	ldr	r3, [r7, #16]
 801241c:	711a      	strb	r2, [r3, #4]
 801241e:	e007      	b.n	8012430 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8012420:	7dfb      	ldrb	r3, [r7, #23]
 8012422:	2b01      	cmp	r3, #1
 8012424:	d102      	bne.n	801242c <create_chain+0x122>
 8012426:	f04f 33ff 	mov.w	r3, #4294967295
 801242a:	e000      	b.n	801242e <create_chain+0x124>
 801242c:	2301      	movs	r3, #1
 801242e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8012430:	69fb      	ldr	r3, [r7, #28]
}
 8012432:	4618      	mov	r0, r3
 8012434:	3720      	adds	r7, #32
 8012436:	46bd      	mov	sp, r7
 8012438:	bd80      	pop	{r7, pc}

0801243a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801243a:	b480      	push	{r7}
 801243c:	b087      	sub	sp, #28
 801243e:	af00      	add	r7, sp, #0
 8012440:	6078      	str	r0, [r7, #4]
 8012442:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	681b      	ldr	r3, [r3, #0]
 8012448:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801244e:	3304      	adds	r3, #4
 8012450:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8012452:	68fb      	ldr	r3, [r7, #12]
 8012454:	899b      	ldrh	r3, [r3, #12]
 8012456:	461a      	mov	r2, r3
 8012458:	683b      	ldr	r3, [r7, #0]
 801245a:	fbb3 f3f2 	udiv	r3, r3, r2
 801245e:	68fa      	ldr	r2, [r7, #12]
 8012460:	8952      	ldrh	r2, [r2, #10]
 8012462:	fbb3 f3f2 	udiv	r3, r3, r2
 8012466:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012468:	693b      	ldr	r3, [r7, #16]
 801246a:	1d1a      	adds	r2, r3, #4
 801246c:	613a      	str	r2, [r7, #16]
 801246e:	681b      	ldr	r3, [r3, #0]
 8012470:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8012472:	68bb      	ldr	r3, [r7, #8]
 8012474:	2b00      	cmp	r3, #0
 8012476:	d101      	bne.n	801247c <clmt_clust+0x42>
 8012478:	2300      	movs	r3, #0
 801247a:	e010      	b.n	801249e <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 801247c:	697a      	ldr	r2, [r7, #20]
 801247e:	68bb      	ldr	r3, [r7, #8]
 8012480:	429a      	cmp	r2, r3
 8012482:	d307      	bcc.n	8012494 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8012484:	697a      	ldr	r2, [r7, #20]
 8012486:	68bb      	ldr	r3, [r7, #8]
 8012488:	1ad3      	subs	r3, r2, r3
 801248a:	617b      	str	r3, [r7, #20]
 801248c:	693b      	ldr	r3, [r7, #16]
 801248e:	3304      	adds	r3, #4
 8012490:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012492:	e7e9      	b.n	8012468 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8012494:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8012496:	693b      	ldr	r3, [r7, #16]
 8012498:	681a      	ldr	r2, [r3, #0]
 801249a:	697b      	ldr	r3, [r7, #20]
 801249c:	4413      	add	r3, r2
}
 801249e:	4618      	mov	r0, r3
 80124a0:	371c      	adds	r7, #28
 80124a2:	46bd      	mov	sp, r7
 80124a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124a8:	4770      	bx	lr

080124aa <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80124aa:	b580      	push	{r7, lr}
 80124ac:	b086      	sub	sp, #24
 80124ae:	af00      	add	r7, sp, #0
 80124b0:	6078      	str	r0, [r7, #4]
 80124b2:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	681b      	ldr	r3, [r3, #0]
 80124b8:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80124ba:	683b      	ldr	r3, [r7, #0]
 80124bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80124c0:	d204      	bcs.n	80124cc <dir_sdi+0x22>
 80124c2:	683b      	ldr	r3, [r7, #0]
 80124c4:	f003 031f 	and.w	r3, r3, #31
 80124c8:	2b00      	cmp	r3, #0
 80124ca:	d001      	beq.n	80124d0 <dir_sdi+0x26>
		return FR_INT_ERR;
 80124cc:	2302      	movs	r3, #2
 80124ce:	e071      	b.n	80125b4 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	683a      	ldr	r2, [r7, #0]
 80124d4:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	689b      	ldr	r3, [r3, #8]
 80124da:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80124dc:	697b      	ldr	r3, [r7, #20]
 80124de:	2b00      	cmp	r3, #0
 80124e0:	d106      	bne.n	80124f0 <dir_sdi+0x46>
 80124e2:	693b      	ldr	r3, [r7, #16]
 80124e4:	781b      	ldrb	r3, [r3, #0]
 80124e6:	2b02      	cmp	r3, #2
 80124e8:	d902      	bls.n	80124f0 <dir_sdi+0x46>
		clst = fs->dirbase;
 80124ea:	693b      	ldr	r3, [r7, #16]
 80124ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124ee:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80124f0:	697b      	ldr	r3, [r7, #20]
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	d10c      	bne.n	8012510 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80124f6:	683b      	ldr	r3, [r7, #0]
 80124f8:	095b      	lsrs	r3, r3, #5
 80124fa:	693a      	ldr	r2, [r7, #16]
 80124fc:	8912      	ldrh	r2, [r2, #8]
 80124fe:	4293      	cmp	r3, r2
 8012500:	d301      	bcc.n	8012506 <dir_sdi+0x5c>
 8012502:	2302      	movs	r3, #2
 8012504:	e056      	b.n	80125b4 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8012506:	693b      	ldr	r3, [r7, #16]
 8012508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	61da      	str	r2, [r3, #28]
 801250e:	e02d      	b.n	801256c <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8012510:	693b      	ldr	r3, [r7, #16]
 8012512:	895b      	ldrh	r3, [r3, #10]
 8012514:	461a      	mov	r2, r3
 8012516:	693b      	ldr	r3, [r7, #16]
 8012518:	899b      	ldrh	r3, [r3, #12]
 801251a:	fb03 f302 	mul.w	r3, r3, r2
 801251e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8012520:	e019      	b.n	8012556 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	6979      	ldr	r1, [r7, #20]
 8012526:	4618      	mov	r0, r3
 8012528:	f7ff fca3 	bl	8011e72 <get_fat>
 801252c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801252e:	697b      	ldr	r3, [r7, #20]
 8012530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012534:	d101      	bne.n	801253a <dir_sdi+0x90>
 8012536:	2301      	movs	r3, #1
 8012538:	e03c      	b.n	80125b4 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801253a:	697b      	ldr	r3, [r7, #20]
 801253c:	2b01      	cmp	r3, #1
 801253e:	d904      	bls.n	801254a <dir_sdi+0xa0>
 8012540:	693b      	ldr	r3, [r7, #16]
 8012542:	69db      	ldr	r3, [r3, #28]
 8012544:	697a      	ldr	r2, [r7, #20]
 8012546:	429a      	cmp	r2, r3
 8012548:	d301      	bcc.n	801254e <dir_sdi+0xa4>
 801254a:	2302      	movs	r3, #2
 801254c:	e032      	b.n	80125b4 <dir_sdi+0x10a>
			ofs -= csz;
 801254e:	683a      	ldr	r2, [r7, #0]
 8012550:	68fb      	ldr	r3, [r7, #12]
 8012552:	1ad3      	subs	r3, r2, r3
 8012554:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8012556:	683a      	ldr	r2, [r7, #0]
 8012558:	68fb      	ldr	r3, [r7, #12]
 801255a:	429a      	cmp	r2, r3
 801255c:	d2e1      	bcs.n	8012522 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 801255e:	6979      	ldr	r1, [r7, #20]
 8012560:	6938      	ldr	r0, [r7, #16]
 8012562:	f7ff fc67 	bl	8011e34 <clust2sect>
 8012566:	4602      	mov	r2, r0
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	697a      	ldr	r2, [r7, #20]
 8012570:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	69db      	ldr	r3, [r3, #28]
 8012576:	2b00      	cmp	r3, #0
 8012578:	d101      	bne.n	801257e <dir_sdi+0xd4>
 801257a:	2302      	movs	r3, #2
 801257c:	e01a      	b.n	80125b4 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	69da      	ldr	r2, [r3, #28]
 8012582:	693b      	ldr	r3, [r7, #16]
 8012584:	899b      	ldrh	r3, [r3, #12]
 8012586:	4619      	mov	r1, r3
 8012588:	683b      	ldr	r3, [r7, #0]
 801258a:	fbb3 f3f1 	udiv	r3, r3, r1
 801258e:	441a      	add	r2, r3
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8012594:	693b      	ldr	r3, [r7, #16]
 8012596:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801259a:	693b      	ldr	r3, [r7, #16]
 801259c:	899b      	ldrh	r3, [r3, #12]
 801259e:	461a      	mov	r2, r3
 80125a0:	683b      	ldr	r3, [r7, #0]
 80125a2:	fbb3 f0f2 	udiv	r0, r3, r2
 80125a6:	fb02 f200 	mul.w	r2, r2, r0
 80125aa:	1a9b      	subs	r3, r3, r2
 80125ac:	18ca      	adds	r2, r1, r3
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80125b2:	2300      	movs	r3, #0
}
 80125b4:	4618      	mov	r0, r3
 80125b6:	3718      	adds	r7, #24
 80125b8:	46bd      	mov	sp, r7
 80125ba:	bd80      	pop	{r7, pc}

080125bc <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80125bc:	b580      	push	{r7, lr}
 80125be:	b086      	sub	sp, #24
 80125c0:	af00      	add	r7, sp, #0
 80125c2:	6078      	str	r0, [r7, #4]
 80125c4:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	681b      	ldr	r3, [r3, #0]
 80125ca:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	695b      	ldr	r3, [r3, #20]
 80125d0:	3320      	adds	r3, #32
 80125d2:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	69db      	ldr	r3, [r3, #28]
 80125d8:	2b00      	cmp	r3, #0
 80125da:	d003      	beq.n	80125e4 <dir_next+0x28>
 80125dc:	68bb      	ldr	r3, [r7, #8]
 80125de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80125e2:	d301      	bcc.n	80125e8 <dir_next+0x2c>
 80125e4:	2304      	movs	r3, #4
 80125e6:	e0bb      	b.n	8012760 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80125e8:	68fb      	ldr	r3, [r7, #12]
 80125ea:	899b      	ldrh	r3, [r3, #12]
 80125ec:	461a      	mov	r2, r3
 80125ee:	68bb      	ldr	r3, [r7, #8]
 80125f0:	fbb3 f1f2 	udiv	r1, r3, r2
 80125f4:	fb02 f201 	mul.w	r2, r2, r1
 80125f8:	1a9b      	subs	r3, r3, r2
 80125fa:	2b00      	cmp	r3, #0
 80125fc:	f040 809d 	bne.w	801273a <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	69db      	ldr	r3, [r3, #28]
 8012604:	1c5a      	adds	r2, r3, #1
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	699b      	ldr	r3, [r3, #24]
 801260e:	2b00      	cmp	r3, #0
 8012610:	d10b      	bne.n	801262a <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8012612:	68bb      	ldr	r3, [r7, #8]
 8012614:	095b      	lsrs	r3, r3, #5
 8012616:	68fa      	ldr	r2, [r7, #12]
 8012618:	8912      	ldrh	r2, [r2, #8]
 801261a:	4293      	cmp	r3, r2
 801261c:	f0c0 808d 	bcc.w	801273a <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	2200      	movs	r2, #0
 8012624:	61da      	str	r2, [r3, #28]
 8012626:	2304      	movs	r3, #4
 8012628:	e09a      	b.n	8012760 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801262a:	68fb      	ldr	r3, [r7, #12]
 801262c:	899b      	ldrh	r3, [r3, #12]
 801262e:	461a      	mov	r2, r3
 8012630:	68bb      	ldr	r3, [r7, #8]
 8012632:	fbb3 f3f2 	udiv	r3, r3, r2
 8012636:	68fa      	ldr	r2, [r7, #12]
 8012638:	8952      	ldrh	r2, [r2, #10]
 801263a:	3a01      	subs	r2, #1
 801263c:	4013      	ands	r3, r2
 801263e:	2b00      	cmp	r3, #0
 8012640:	d17b      	bne.n	801273a <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8012642:	687a      	ldr	r2, [r7, #4]
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	699b      	ldr	r3, [r3, #24]
 8012648:	4619      	mov	r1, r3
 801264a:	4610      	mov	r0, r2
 801264c:	f7ff fc11 	bl	8011e72 <get_fat>
 8012650:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8012652:	697b      	ldr	r3, [r7, #20]
 8012654:	2b01      	cmp	r3, #1
 8012656:	d801      	bhi.n	801265c <dir_next+0xa0>
 8012658:	2302      	movs	r3, #2
 801265a:	e081      	b.n	8012760 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801265c:	697b      	ldr	r3, [r7, #20]
 801265e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012662:	d101      	bne.n	8012668 <dir_next+0xac>
 8012664:	2301      	movs	r3, #1
 8012666:	e07b      	b.n	8012760 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8012668:	68fb      	ldr	r3, [r7, #12]
 801266a:	69db      	ldr	r3, [r3, #28]
 801266c:	697a      	ldr	r2, [r7, #20]
 801266e:	429a      	cmp	r2, r3
 8012670:	d359      	bcc.n	8012726 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8012672:	683b      	ldr	r3, [r7, #0]
 8012674:	2b00      	cmp	r3, #0
 8012676:	d104      	bne.n	8012682 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	2200      	movs	r2, #0
 801267c:	61da      	str	r2, [r3, #28]
 801267e:	2304      	movs	r3, #4
 8012680:	e06e      	b.n	8012760 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8012682:	687a      	ldr	r2, [r7, #4]
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	699b      	ldr	r3, [r3, #24]
 8012688:	4619      	mov	r1, r3
 801268a:	4610      	mov	r0, r2
 801268c:	f7ff fe3d 	bl	801230a <create_chain>
 8012690:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8012692:	697b      	ldr	r3, [r7, #20]
 8012694:	2b00      	cmp	r3, #0
 8012696:	d101      	bne.n	801269c <dir_next+0xe0>
 8012698:	2307      	movs	r3, #7
 801269a:	e061      	b.n	8012760 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801269c:	697b      	ldr	r3, [r7, #20]
 801269e:	2b01      	cmp	r3, #1
 80126a0:	d101      	bne.n	80126a6 <dir_next+0xea>
 80126a2:	2302      	movs	r3, #2
 80126a4:	e05c      	b.n	8012760 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80126a6:	697b      	ldr	r3, [r7, #20]
 80126a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80126ac:	d101      	bne.n	80126b2 <dir_next+0xf6>
 80126ae:	2301      	movs	r3, #1
 80126b0:	e056      	b.n	8012760 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80126b2:	68f8      	ldr	r0, [r7, #12]
 80126b4:	f7ff fadc 	bl	8011c70 <sync_window>
 80126b8:	4603      	mov	r3, r0
 80126ba:	2b00      	cmp	r3, #0
 80126bc:	d001      	beq.n	80126c2 <dir_next+0x106>
 80126be:	2301      	movs	r3, #1
 80126c0:	e04e      	b.n	8012760 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80126c2:	68fb      	ldr	r3, [r7, #12]
 80126c4:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80126c8:	68fb      	ldr	r3, [r7, #12]
 80126ca:	899b      	ldrh	r3, [r3, #12]
 80126cc:	461a      	mov	r2, r3
 80126ce:	2100      	movs	r1, #0
 80126d0:	f7ff f905 	bl	80118de <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80126d4:	2300      	movs	r3, #0
 80126d6:	613b      	str	r3, [r7, #16]
 80126d8:	6979      	ldr	r1, [r7, #20]
 80126da:	68f8      	ldr	r0, [r7, #12]
 80126dc:	f7ff fbaa 	bl	8011e34 <clust2sect>
 80126e0:	4602      	mov	r2, r0
 80126e2:	68fb      	ldr	r3, [r7, #12]
 80126e4:	635a      	str	r2, [r3, #52]	; 0x34
 80126e6:	e012      	b.n	801270e <dir_next+0x152>
						fs->wflag = 1;
 80126e8:	68fb      	ldr	r3, [r7, #12]
 80126ea:	2201      	movs	r2, #1
 80126ec:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80126ee:	68f8      	ldr	r0, [r7, #12]
 80126f0:	f7ff fabe 	bl	8011c70 <sync_window>
 80126f4:	4603      	mov	r3, r0
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	d001      	beq.n	80126fe <dir_next+0x142>
 80126fa:	2301      	movs	r3, #1
 80126fc:	e030      	b.n	8012760 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80126fe:	693b      	ldr	r3, [r7, #16]
 8012700:	3301      	adds	r3, #1
 8012702:	613b      	str	r3, [r7, #16]
 8012704:	68fb      	ldr	r3, [r7, #12]
 8012706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012708:	1c5a      	adds	r2, r3, #1
 801270a:	68fb      	ldr	r3, [r7, #12]
 801270c:	635a      	str	r2, [r3, #52]	; 0x34
 801270e:	68fb      	ldr	r3, [r7, #12]
 8012710:	895b      	ldrh	r3, [r3, #10]
 8012712:	461a      	mov	r2, r3
 8012714:	693b      	ldr	r3, [r7, #16]
 8012716:	4293      	cmp	r3, r2
 8012718:	d3e6      	bcc.n	80126e8 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 801271a:	68fb      	ldr	r3, [r7, #12]
 801271c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801271e:	693b      	ldr	r3, [r7, #16]
 8012720:	1ad2      	subs	r2, r2, r3
 8012722:	68fb      	ldr	r3, [r7, #12]
 8012724:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	697a      	ldr	r2, [r7, #20]
 801272a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 801272c:	6979      	ldr	r1, [r7, #20]
 801272e:	68f8      	ldr	r0, [r7, #12]
 8012730:	f7ff fb80 	bl	8011e34 <clust2sect>
 8012734:	4602      	mov	r2, r0
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	68ba      	ldr	r2, [r7, #8]
 801273e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8012740:	68fb      	ldr	r3, [r7, #12]
 8012742:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8012746:	68fb      	ldr	r3, [r7, #12]
 8012748:	899b      	ldrh	r3, [r3, #12]
 801274a:	461a      	mov	r2, r3
 801274c:	68bb      	ldr	r3, [r7, #8]
 801274e:	fbb3 f0f2 	udiv	r0, r3, r2
 8012752:	fb02 f200 	mul.w	r2, r2, r0
 8012756:	1a9b      	subs	r3, r3, r2
 8012758:	18ca      	adds	r2, r1, r3
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801275e:	2300      	movs	r3, #0
}
 8012760:	4618      	mov	r0, r3
 8012762:	3718      	adds	r7, #24
 8012764:	46bd      	mov	sp, r7
 8012766:	bd80      	pop	{r7, pc}

08012768 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8012768:	b580      	push	{r7, lr}
 801276a:	b086      	sub	sp, #24
 801276c:	af00      	add	r7, sp, #0
 801276e:	6078      	str	r0, [r7, #4]
 8012770:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	681b      	ldr	r3, [r3, #0]
 8012776:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8012778:	2100      	movs	r1, #0
 801277a:	6878      	ldr	r0, [r7, #4]
 801277c:	f7ff fe95 	bl	80124aa <dir_sdi>
 8012780:	4603      	mov	r3, r0
 8012782:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012784:	7dfb      	ldrb	r3, [r7, #23]
 8012786:	2b00      	cmp	r3, #0
 8012788:	d12b      	bne.n	80127e2 <dir_alloc+0x7a>
		n = 0;
 801278a:	2300      	movs	r3, #0
 801278c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	69db      	ldr	r3, [r3, #28]
 8012792:	4619      	mov	r1, r3
 8012794:	68f8      	ldr	r0, [r7, #12]
 8012796:	f7ff faaf 	bl	8011cf8 <move_window>
 801279a:	4603      	mov	r3, r0
 801279c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801279e:	7dfb      	ldrb	r3, [r7, #23]
 80127a0:	2b00      	cmp	r3, #0
 80127a2:	d11d      	bne.n	80127e0 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	6a1b      	ldr	r3, [r3, #32]
 80127a8:	781b      	ldrb	r3, [r3, #0]
 80127aa:	2be5      	cmp	r3, #229	; 0xe5
 80127ac:	d004      	beq.n	80127b8 <dir_alloc+0x50>
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	6a1b      	ldr	r3, [r3, #32]
 80127b2:	781b      	ldrb	r3, [r3, #0]
 80127b4:	2b00      	cmp	r3, #0
 80127b6:	d107      	bne.n	80127c8 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80127b8:	693b      	ldr	r3, [r7, #16]
 80127ba:	3301      	adds	r3, #1
 80127bc:	613b      	str	r3, [r7, #16]
 80127be:	693a      	ldr	r2, [r7, #16]
 80127c0:	683b      	ldr	r3, [r7, #0]
 80127c2:	429a      	cmp	r2, r3
 80127c4:	d102      	bne.n	80127cc <dir_alloc+0x64>
 80127c6:	e00c      	b.n	80127e2 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80127c8:	2300      	movs	r3, #0
 80127ca:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80127cc:	2101      	movs	r1, #1
 80127ce:	6878      	ldr	r0, [r7, #4]
 80127d0:	f7ff fef4 	bl	80125bc <dir_next>
 80127d4:	4603      	mov	r3, r0
 80127d6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80127d8:	7dfb      	ldrb	r3, [r7, #23]
 80127da:	2b00      	cmp	r3, #0
 80127dc:	d0d7      	beq.n	801278e <dir_alloc+0x26>
 80127de:	e000      	b.n	80127e2 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80127e0:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80127e2:	7dfb      	ldrb	r3, [r7, #23]
 80127e4:	2b04      	cmp	r3, #4
 80127e6:	d101      	bne.n	80127ec <dir_alloc+0x84>
 80127e8:	2307      	movs	r3, #7
 80127ea:	75fb      	strb	r3, [r7, #23]
	return res;
 80127ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80127ee:	4618      	mov	r0, r3
 80127f0:	3718      	adds	r7, #24
 80127f2:	46bd      	mov	sp, r7
 80127f4:	bd80      	pop	{r7, pc}

080127f6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80127f6:	b580      	push	{r7, lr}
 80127f8:	b084      	sub	sp, #16
 80127fa:	af00      	add	r7, sp, #0
 80127fc:	6078      	str	r0, [r7, #4]
 80127fe:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8012800:	683b      	ldr	r3, [r7, #0]
 8012802:	331a      	adds	r3, #26
 8012804:	4618      	mov	r0, r3
 8012806:	f7fe ffc7 	bl	8011798 <ld_word>
 801280a:	4603      	mov	r3, r0
 801280c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	781b      	ldrb	r3, [r3, #0]
 8012812:	2b03      	cmp	r3, #3
 8012814:	d109      	bne.n	801282a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8012816:	683b      	ldr	r3, [r7, #0]
 8012818:	3314      	adds	r3, #20
 801281a:	4618      	mov	r0, r3
 801281c:	f7fe ffbc 	bl	8011798 <ld_word>
 8012820:	4603      	mov	r3, r0
 8012822:	041b      	lsls	r3, r3, #16
 8012824:	68fa      	ldr	r2, [r7, #12]
 8012826:	4313      	orrs	r3, r2
 8012828:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801282a:	68fb      	ldr	r3, [r7, #12]
}
 801282c:	4618      	mov	r0, r3
 801282e:	3710      	adds	r7, #16
 8012830:	46bd      	mov	sp, r7
 8012832:	bd80      	pop	{r7, pc}

08012834 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8012834:	b580      	push	{r7, lr}
 8012836:	b084      	sub	sp, #16
 8012838:	af00      	add	r7, sp, #0
 801283a:	60f8      	str	r0, [r7, #12]
 801283c:	60b9      	str	r1, [r7, #8]
 801283e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8012840:	68bb      	ldr	r3, [r7, #8]
 8012842:	331a      	adds	r3, #26
 8012844:	687a      	ldr	r2, [r7, #4]
 8012846:	b292      	uxth	r2, r2
 8012848:	4611      	mov	r1, r2
 801284a:	4618      	mov	r0, r3
 801284c:	f7fe ffdf 	bl	801180e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8012850:	68fb      	ldr	r3, [r7, #12]
 8012852:	781b      	ldrb	r3, [r3, #0]
 8012854:	2b03      	cmp	r3, #3
 8012856:	d109      	bne.n	801286c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8012858:	68bb      	ldr	r3, [r7, #8]
 801285a:	f103 0214 	add.w	r2, r3, #20
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	0c1b      	lsrs	r3, r3, #16
 8012862:	b29b      	uxth	r3, r3
 8012864:	4619      	mov	r1, r3
 8012866:	4610      	mov	r0, r2
 8012868:	f7fe ffd1 	bl	801180e <st_word>
	}
}
 801286c:	bf00      	nop
 801286e:	3710      	adds	r7, #16
 8012870:	46bd      	mov	sp, r7
 8012872:	bd80      	pop	{r7, pc}

08012874 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8012874:	b580      	push	{r7, lr}
 8012876:	b086      	sub	sp, #24
 8012878:	af00      	add	r7, sp, #0
 801287a:	6078      	str	r0, [r7, #4]
 801287c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 801287e:	2304      	movs	r3, #4
 8012880:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	681b      	ldr	r3, [r3, #0]
 8012886:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8012888:	e03c      	b.n	8012904 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	69db      	ldr	r3, [r3, #28]
 801288e:	4619      	mov	r1, r3
 8012890:	6938      	ldr	r0, [r7, #16]
 8012892:	f7ff fa31 	bl	8011cf8 <move_window>
 8012896:	4603      	mov	r3, r0
 8012898:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801289a:	7dfb      	ldrb	r3, [r7, #23]
 801289c:	2b00      	cmp	r3, #0
 801289e:	d136      	bne.n	801290e <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	6a1b      	ldr	r3, [r3, #32]
 80128a4:	781b      	ldrb	r3, [r3, #0]
 80128a6:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 80128a8:	7bfb      	ldrb	r3, [r7, #15]
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	d102      	bne.n	80128b4 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80128ae:	2304      	movs	r3, #4
 80128b0:	75fb      	strb	r3, [r7, #23]
 80128b2:	e031      	b.n	8012918 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	6a1b      	ldr	r3, [r3, #32]
 80128b8:	330b      	adds	r3, #11
 80128ba:	781b      	ldrb	r3, [r3, #0]
 80128bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80128c0:	73bb      	strb	r3, [r7, #14]
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	7bba      	ldrb	r2, [r7, #14]
 80128c6:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 80128c8:	7bfb      	ldrb	r3, [r7, #15]
 80128ca:	2be5      	cmp	r3, #229	; 0xe5
 80128cc:	d011      	beq.n	80128f2 <dir_read+0x7e>
 80128ce:	7bfb      	ldrb	r3, [r7, #15]
 80128d0:	2b2e      	cmp	r3, #46	; 0x2e
 80128d2:	d00e      	beq.n	80128f2 <dir_read+0x7e>
 80128d4:	7bbb      	ldrb	r3, [r7, #14]
 80128d6:	2b0f      	cmp	r3, #15
 80128d8:	d00b      	beq.n	80128f2 <dir_read+0x7e>
 80128da:	7bbb      	ldrb	r3, [r7, #14]
 80128dc:	f023 0320 	bic.w	r3, r3, #32
 80128e0:	2b08      	cmp	r3, #8
 80128e2:	bf0c      	ite	eq
 80128e4:	2301      	moveq	r3, #1
 80128e6:	2300      	movne	r3, #0
 80128e8:	b2db      	uxtb	r3, r3
 80128ea:	461a      	mov	r2, r3
 80128ec:	683b      	ldr	r3, [r7, #0]
 80128ee:	4293      	cmp	r3, r2
 80128f0:	d00f      	beq.n	8012912 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80128f2:	2100      	movs	r1, #0
 80128f4:	6878      	ldr	r0, [r7, #4]
 80128f6:	f7ff fe61 	bl	80125bc <dir_next>
 80128fa:	4603      	mov	r3, r0
 80128fc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80128fe:	7dfb      	ldrb	r3, [r7, #23]
 8012900:	2b00      	cmp	r3, #0
 8012902:	d108      	bne.n	8012916 <dir_read+0xa2>
	while (dp->sect) {
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	69db      	ldr	r3, [r3, #28]
 8012908:	2b00      	cmp	r3, #0
 801290a:	d1be      	bne.n	801288a <dir_read+0x16>
 801290c:	e004      	b.n	8012918 <dir_read+0xa4>
		if (res != FR_OK) break;
 801290e:	bf00      	nop
 8012910:	e002      	b.n	8012918 <dir_read+0xa4>
				break;
 8012912:	bf00      	nop
 8012914:	e000      	b.n	8012918 <dir_read+0xa4>
		if (res != FR_OK) break;
 8012916:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8012918:	7dfb      	ldrb	r3, [r7, #23]
 801291a:	2b00      	cmp	r3, #0
 801291c:	d002      	beq.n	8012924 <dir_read+0xb0>
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	2200      	movs	r2, #0
 8012922:	61da      	str	r2, [r3, #28]
	return res;
 8012924:	7dfb      	ldrb	r3, [r7, #23]
}
 8012926:	4618      	mov	r0, r3
 8012928:	3718      	adds	r7, #24
 801292a:	46bd      	mov	sp, r7
 801292c:	bd80      	pop	{r7, pc}

0801292e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801292e:	b580      	push	{r7, lr}
 8012930:	b086      	sub	sp, #24
 8012932:	af00      	add	r7, sp, #0
 8012934:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	681b      	ldr	r3, [r3, #0]
 801293a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801293c:	2100      	movs	r1, #0
 801293e:	6878      	ldr	r0, [r7, #4]
 8012940:	f7ff fdb3 	bl	80124aa <dir_sdi>
 8012944:	4603      	mov	r3, r0
 8012946:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8012948:	7dfb      	ldrb	r3, [r7, #23]
 801294a:	2b00      	cmp	r3, #0
 801294c:	d001      	beq.n	8012952 <dir_find+0x24>
 801294e:	7dfb      	ldrb	r3, [r7, #23]
 8012950:	e03e      	b.n	80129d0 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	69db      	ldr	r3, [r3, #28]
 8012956:	4619      	mov	r1, r3
 8012958:	6938      	ldr	r0, [r7, #16]
 801295a:	f7ff f9cd 	bl	8011cf8 <move_window>
 801295e:	4603      	mov	r3, r0
 8012960:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012962:	7dfb      	ldrb	r3, [r7, #23]
 8012964:	2b00      	cmp	r3, #0
 8012966:	d12f      	bne.n	80129c8 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	6a1b      	ldr	r3, [r3, #32]
 801296c:	781b      	ldrb	r3, [r3, #0]
 801296e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8012970:	7bfb      	ldrb	r3, [r7, #15]
 8012972:	2b00      	cmp	r3, #0
 8012974:	d102      	bne.n	801297c <dir_find+0x4e>
 8012976:	2304      	movs	r3, #4
 8012978:	75fb      	strb	r3, [r7, #23]
 801297a:	e028      	b.n	80129ce <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	6a1b      	ldr	r3, [r3, #32]
 8012980:	330b      	adds	r3, #11
 8012982:	781b      	ldrb	r3, [r3, #0]
 8012984:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012988:	b2da      	uxtb	r2, r3
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	6a1b      	ldr	r3, [r3, #32]
 8012992:	330b      	adds	r3, #11
 8012994:	781b      	ldrb	r3, [r3, #0]
 8012996:	f003 0308 	and.w	r3, r3, #8
 801299a:	2b00      	cmp	r3, #0
 801299c:	d10a      	bne.n	80129b4 <dir_find+0x86>
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	6a18      	ldr	r0, [r3, #32]
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	3324      	adds	r3, #36	; 0x24
 80129a6:	220b      	movs	r2, #11
 80129a8:	4619      	mov	r1, r3
 80129aa:	f7fe ffb2 	bl	8011912 <mem_cmp>
 80129ae:	4603      	mov	r3, r0
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	d00b      	beq.n	80129cc <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80129b4:	2100      	movs	r1, #0
 80129b6:	6878      	ldr	r0, [r7, #4]
 80129b8:	f7ff fe00 	bl	80125bc <dir_next>
 80129bc:	4603      	mov	r3, r0
 80129be:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80129c0:	7dfb      	ldrb	r3, [r7, #23]
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	d0c5      	beq.n	8012952 <dir_find+0x24>
 80129c6:	e002      	b.n	80129ce <dir_find+0xa0>
		if (res != FR_OK) break;
 80129c8:	bf00      	nop
 80129ca:	e000      	b.n	80129ce <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80129cc:	bf00      	nop

	return res;
 80129ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80129d0:	4618      	mov	r0, r3
 80129d2:	3718      	adds	r7, #24
 80129d4:	46bd      	mov	sp, r7
 80129d6:	bd80      	pop	{r7, pc}

080129d8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80129d8:	b580      	push	{r7, lr}
 80129da:	b084      	sub	sp, #16
 80129dc:	af00      	add	r7, sp, #0
 80129de:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	681b      	ldr	r3, [r3, #0]
 80129e4:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80129e6:	2101      	movs	r1, #1
 80129e8:	6878      	ldr	r0, [r7, #4]
 80129ea:	f7ff febd 	bl	8012768 <dir_alloc>
 80129ee:	4603      	mov	r3, r0
 80129f0:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80129f2:	7bfb      	ldrb	r3, [r7, #15]
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	d11c      	bne.n	8012a32 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	69db      	ldr	r3, [r3, #28]
 80129fc:	4619      	mov	r1, r3
 80129fe:	68b8      	ldr	r0, [r7, #8]
 8012a00:	f7ff f97a 	bl	8011cf8 <move_window>
 8012a04:	4603      	mov	r3, r0
 8012a06:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8012a08:	7bfb      	ldrb	r3, [r7, #15]
 8012a0a:	2b00      	cmp	r3, #0
 8012a0c:	d111      	bne.n	8012a32 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	6a1b      	ldr	r3, [r3, #32]
 8012a12:	2220      	movs	r2, #32
 8012a14:	2100      	movs	r1, #0
 8012a16:	4618      	mov	r0, r3
 8012a18:	f7fe ff61 	bl	80118de <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	6a18      	ldr	r0, [r3, #32]
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	3324      	adds	r3, #36	; 0x24
 8012a24:	220b      	movs	r2, #11
 8012a26:	4619      	mov	r1, r3
 8012a28:	f7fe ff38 	bl	801189c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8012a2c:	68bb      	ldr	r3, [r7, #8]
 8012a2e:	2201      	movs	r2, #1
 8012a30:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8012a32:	7bfb      	ldrb	r3, [r7, #15]
}
 8012a34:	4618      	mov	r0, r3
 8012a36:	3710      	adds	r7, #16
 8012a38:	46bd      	mov	sp, r7
 8012a3a:	bd80      	pop	{r7, pc}

08012a3c <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8012a3c:	b580      	push	{r7, lr}
 8012a3e:	b084      	sub	sp, #16
 8012a40:	af00      	add	r7, sp, #0
 8012a42:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	681b      	ldr	r3, [r3, #0]
 8012a48:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	69db      	ldr	r3, [r3, #28]
 8012a4e:	4619      	mov	r1, r3
 8012a50:	68f8      	ldr	r0, [r7, #12]
 8012a52:	f7ff f951 	bl	8011cf8 <move_window>
 8012a56:	4603      	mov	r3, r0
 8012a58:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 8012a5a:	7afb      	ldrb	r3, [r7, #11]
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	d106      	bne.n	8012a6e <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	6a1b      	ldr	r3, [r3, #32]
 8012a64:	22e5      	movs	r2, #229	; 0xe5
 8012a66:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8012a68:	68fb      	ldr	r3, [r7, #12]
 8012a6a:	2201      	movs	r2, #1
 8012a6c:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 8012a6e:	7afb      	ldrb	r3, [r7, #11]
}
 8012a70:	4618      	mov	r0, r3
 8012a72:	3710      	adds	r7, #16
 8012a74:	46bd      	mov	sp, r7
 8012a76:	bd80      	pop	{r7, pc}

08012a78 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8012a78:	b580      	push	{r7, lr}
 8012a7a:	b088      	sub	sp, #32
 8012a7c:	af00      	add	r7, sp, #0
 8012a7e:	6078      	str	r0, [r7, #4]
 8012a80:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8012a82:	683b      	ldr	r3, [r7, #0]
 8012a84:	681b      	ldr	r3, [r3, #0]
 8012a86:	60fb      	str	r3, [r7, #12]
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	3324      	adds	r3, #36	; 0x24
 8012a8c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8012a8e:	220b      	movs	r2, #11
 8012a90:	2120      	movs	r1, #32
 8012a92:	68b8      	ldr	r0, [r7, #8]
 8012a94:	f7fe ff23 	bl	80118de <mem_set>
	si = i = 0; ni = 8;
 8012a98:	2300      	movs	r3, #0
 8012a9a:	613b      	str	r3, [r7, #16]
 8012a9c:	693b      	ldr	r3, [r7, #16]
 8012a9e:	617b      	str	r3, [r7, #20]
 8012aa0:	2308      	movs	r3, #8
 8012aa2:	61bb      	str	r3, [r7, #24]
#if _FS_RPATH != 0
	if (p[si] == '.') { /* Is this a dot entry? */
 8012aa4:	68fa      	ldr	r2, [r7, #12]
 8012aa6:	697b      	ldr	r3, [r7, #20]
 8012aa8:	4413      	add	r3, r2
 8012aaa:	781b      	ldrb	r3, [r3, #0]
 8012aac:	2b2e      	cmp	r3, #46	; 0x2e
 8012aae:	d12f      	bne.n	8012b10 <create_name+0x98>
		for (;;) {
			c = (BYTE)p[si++];
 8012ab0:	697b      	ldr	r3, [r7, #20]
 8012ab2:	1c5a      	adds	r2, r3, #1
 8012ab4:	617a      	str	r2, [r7, #20]
 8012ab6:	68fa      	ldr	r2, [r7, #12]
 8012ab8:	4413      	add	r3, r2
 8012aba:	781b      	ldrb	r3, [r3, #0]
 8012abc:	77fb      	strb	r3, [r7, #31]
			if (c != '.' || si >= 3) break;
 8012abe:	7ffb      	ldrb	r3, [r7, #31]
 8012ac0:	2b2e      	cmp	r3, #46	; 0x2e
 8012ac2:	d10a      	bne.n	8012ada <create_name+0x62>
 8012ac4:	697b      	ldr	r3, [r7, #20]
 8012ac6:	2b02      	cmp	r3, #2
 8012ac8:	d807      	bhi.n	8012ada <create_name+0x62>
			sfn[i++] = c;
 8012aca:	693b      	ldr	r3, [r7, #16]
 8012acc:	1c5a      	adds	r2, r3, #1
 8012ace:	613a      	str	r2, [r7, #16]
 8012ad0:	68ba      	ldr	r2, [r7, #8]
 8012ad2:	4413      	add	r3, r2
 8012ad4:	7ffa      	ldrb	r2, [r7, #31]
 8012ad6:	701a      	strb	r2, [r3, #0]
			c = (BYTE)p[si++];
 8012ad8:	e7ea      	b.n	8012ab0 <create_name+0x38>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 8012ada:	7ffb      	ldrb	r3, [r7, #31]
 8012adc:	2b2f      	cmp	r3, #47	; 0x2f
 8012ade:	d007      	beq.n	8012af0 <create_name+0x78>
 8012ae0:	7ffb      	ldrb	r3, [r7, #31]
 8012ae2:	2b5c      	cmp	r3, #92	; 0x5c
 8012ae4:	d004      	beq.n	8012af0 <create_name+0x78>
 8012ae6:	7ffb      	ldrb	r3, [r7, #31]
 8012ae8:	2b20      	cmp	r3, #32
 8012aea:	d901      	bls.n	8012af0 <create_name+0x78>
 8012aec:	2306      	movs	r3, #6
 8012aee:	e084      	b.n	8012bfa <create_name+0x182>
		*path = p + si;								/* Return pointer to the next segment */
 8012af0:	68fa      	ldr	r2, [r7, #12]
 8012af2:	697b      	ldr	r3, [r7, #20]
 8012af4:	441a      	add	r2, r3
 8012af6:	683b      	ldr	r3, [r7, #0]
 8012af8:	601a      	str	r2, [r3, #0]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
 8012afa:	7ffb      	ldrb	r3, [r7, #31]
 8012afc:	2b20      	cmp	r3, #32
 8012afe:	d801      	bhi.n	8012b04 <create_name+0x8c>
 8012b00:	2224      	movs	r2, #36	; 0x24
 8012b02:	e000      	b.n	8012b06 <create_name+0x8e>
 8012b04:	2220      	movs	r2, #32
 8012b06:	68bb      	ldr	r3, [r7, #8]
 8012b08:	330b      	adds	r3, #11
 8012b0a:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 8012b0c:	2300      	movs	r3, #0
 8012b0e:	e074      	b.n	8012bfa <create_name+0x182>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8012b10:	697b      	ldr	r3, [r7, #20]
 8012b12:	1c5a      	adds	r2, r3, #1
 8012b14:	617a      	str	r2, [r7, #20]
 8012b16:	68fa      	ldr	r2, [r7, #12]
 8012b18:	4413      	add	r3, r2
 8012b1a:	781b      	ldrb	r3, [r3, #0]
 8012b1c:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8012b1e:	7ffb      	ldrb	r3, [r7, #31]
 8012b20:	2b20      	cmp	r3, #32
 8012b22:	d94e      	bls.n	8012bc2 <create_name+0x14a>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8012b24:	7ffb      	ldrb	r3, [r7, #31]
 8012b26:	2b2f      	cmp	r3, #47	; 0x2f
 8012b28:	d006      	beq.n	8012b38 <create_name+0xc0>
 8012b2a:	7ffb      	ldrb	r3, [r7, #31]
 8012b2c:	2b5c      	cmp	r3, #92	; 0x5c
 8012b2e:	d110      	bne.n	8012b52 <create_name+0xda>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8012b30:	e002      	b.n	8012b38 <create_name+0xc0>
 8012b32:	697b      	ldr	r3, [r7, #20]
 8012b34:	3301      	adds	r3, #1
 8012b36:	617b      	str	r3, [r7, #20]
 8012b38:	68fa      	ldr	r2, [r7, #12]
 8012b3a:	697b      	ldr	r3, [r7, #20]
 8012b3c:	4413      	add	r3, r2
 8012b3e:	781b      	ldrb	r3, [r3, #0]
 8012b40:	2b2f      	cmp	r3, #47	; 0x2f
 8012b42:	d0f6      	beq.n	8012b32 <create_name+0xba>
 8012b44:	68fa      	ldr	r2, [r7, #12]
 8012b46:	697b      	ldr	r3, [r7, #20]
 8012b48:	4413      	add	r3, r2
 8012b4a:	781b      	ldrb	r3, [r3, #0]
 8012b4c:	2b5c      	cmp	r3, #92	; 0x5c
 8012b4e:	d0f0      	beq.n	8012b32 <create_name+0xba>
			break;
 8012b50:	e038      	b.n	8012bc4 <create_name+0x14c>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8012b52:	7ffb      	ldrb	r3, [r7, #31]
 8012b54:	2b2e      	cmp	r3, #46	; 0x2e
 8012b56:	d003      	beq.n	8012b60 <create_name+0xe8>
 8012b58:	693a      	ldr	r2, [r7, #16]
 8012b5a:	69bb      	ldr	r3, [r7, #24]
 8012b5c:	429a      	cmp	r2, r3
 8012b5e:	d30c      	bcc.n	8012b7a <create_name+0x102>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8012b60:	69bb      	ldr	r3, [r7, #24]
 8012b62:	2b0b      	cmp	r3, #11
 8012b64:	d002      	beq.n	8012b6c <create_name+0xf4>
 8012b66:	7ffb      	ldrb	r3, [r7, #31]
 8012b68:	2b2e      	cmp	r3, #46	; 0x2e
 8012b6a:	d001      	beq.n	8012b70 <create_name+0xf8>
 8012b6c:	2306      	movs	r3, #6
 8012b6e:	e044      	b.n	8012bfa <create_name+0x182>
			i = 8; ni = 11;				/* Goto extension */
 8012b70:	2308      	movs	r3, #8
 8012b72:	613b      	str	r3, [r7, #16]
 8012b74:	230b      	movs	r3, #11
 8012b76:	61bb      	str	r3, [r7, #24]
			continue;
 8012b78:	e022      	b.n	8012bc0 <create_name+0x148>
		}
		if (c >= 0x80) {				/* Extended character? */
 8012b7a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012b7e:	2b00      	cmp	r3, #0
 8012b80:	da04      	bge.n	8012b8c <create_name+0x114>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8012b82:	7ffb      	ldrb	r3, [r7, #31]
 8012b84:	3b80      	subs	r3, #128	; 0x80
 8012b86:	4a1f      	ldr	r2, [pc, #124]	; (8012c04 <create_name+0x18c>)
 8012b88:	5cd3      	ldrb	r3, [r2, r3]
 8012b8a:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8012b8c:	7ffb      	ldrb	r3, [r7, #31]
 8012b8e:	4619      	mov	r1, r3
 8012b90:	481d      	ldr	r0, [pc, #116]	; (8012c08 <create_name+0x190>)
 8012b92:	f7fe fee5 	bl	8011960 <chk_chr>
 8012b96:	4603      	mov	r3, r0
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	d001      	beq.n	8012ba0 <create_name+0x128>
 8012b9c:	2306      	movs	r3, #6
 8012b9e:	e02c      	b.n	8012bfa <create_name+0x182>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8012ba0:	7ffb      	ldrb	r3, [r7, #31]
 8012ba2:	2b60      	cmp	r3, #96	; 0x60
 8012ba4:	d905      	bls.n	8012bb2 <create_name+0x13a>
 8012ba6:	7ffb      	ldrb	r3, [r7, #31]
 8012ba8:	2b7a      	cmp	r3, #122	; 0x7a
 8012baa:	d802      	bhi.n	8012bb2 <create_name+0x13a>
 8012bac:	7ffb      	ldrb	r3, [r7, #31]
 8012bae:	3b20      	subs	r3, #32
 8012bb0:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8012bb2:	693b      	ldr	r3, [r7, #16]
 8012bb4:	1c5a      	adds	r2, r3, #1
 8012bb6:	613a      	str	r2, [r7, #16]
 8012bb8:	68ba      	ldr	r2, [r7, #8]
 8012bba:	4413      	add	r3, r2
 8012bbc:	7ffa      	ldrb	r2, [r7, #31]
 8012bbe:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8012bc0:	e7a6      	b.n	8012b10 <create_name+0x98>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8012bc2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8012bc4:	68fa      	ldr	r2, [r7, #12]
 8012bc6:	697b      	ldr	r3, [r7, #20]
 8012bc8:	441a      	add	r2, r3
 8012bca:	683b      	ldr	r3, [r7, #0]
 8012bcc:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8012bce:	693b      	ldr	r3, [r7, #16]
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	d101      	bne.n	8012bd8 <create_name+0x160>
 8012bd4:	2306      	movs	r3, #6
 8012bd6:	e010      	b.n	8012bfa <create_name+0x182>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8012bd8:	68bb      	ldr	r3, [r7, #8]
 8012bda:	781b      	ldrb	r3, [r3, #0]
 8012bdc:	2be5      	cmp	r3, #229	; 0xe5
 8012bde:	d102      	bne.n	8012be6 <create_name+0x16e>
 8012be0:	68bb      	ldr	r3, [r7, #8]
 8012be2:	2205      	movs	r2, #5
 8012be4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8012be6:	7ffb      	ldrb	r3, [r7, #31]
 8012be8:	2b20      	cmp	r3, #32
 8012bea:	d801      	bhi.n	8012bf0 <create_name+0x178>
 8012bec:	2204      	movs	r2, #4
 8012bee:	e000      	b.n	8012bf2 <create_name+0x17a>
 8012bf0:	2200      	movs	r2, #0
 8012bf2:	68bb      	ldr	r3, [r7, #8]
 8012bf4:	330b      	adds	r3, #11
 8012bf6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8012bf8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8012bfa:	4618      	mov	r0, r3
 8012bfc:	3720      	adds	r7, #32
 8012bfe:	46bd      	mov	sp, r7
 8012c00:	bd80      	pop	{r7, pc}
 8012c02:	bf00      	nop
 8012c04:	080191bc 	.word	0x080191bc
 8012c08:	0801916c 	.word	0x0801916c

08012c0c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8012c0c:	b580      	push	{r7, lr}
 8012c0e:	b086      	sub	sp, #24
 8012c10:	af00      	add	r7, sp, #0
 8012c12:	6078      	str	r0, [r7, #4]
 8012c14:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8012c1a:	693b      	ldr	r3, [r7, #16]
 8012c1c:	681b      	ldr	r3, [r3, #0]
 8012c1e:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 8012c20:	683b      	ldr	r3, [r7, #0]
 8012c22:	781b      	ldrb	r3, [r3, #0]
 8012c24:	2b2f      	cmp	r3, #47	; 0x2f
 8012c26:	d00b      	beq.n	8012c40 <follow_path+0x34>
 8012c28:	683b      	ldr	r3, [r7, #0]
 8012c2a:	781b      	ldrb	r3, [r3, #0]
 8012c2c:	2b5c      	cmp	r3, #92	; 0x5c
 8012c2e:	d007      	beq.n	8012c40 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 8012c30:	68fb      	ldr	r3, [r7, #12]
 8012c32:	699a      	ldr	r2, [r3, #24]
 8012c34:	693b      	ldr	r3, [r7, #16]
 8012c36:	609a      	str	r2, [r3, #8]
 8012c38:	e00d      	b.n	8012c56 <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8012c3a:	683b      	ldr	r3, [r7, #0]
 8012c3c:	3301      	adds	r3, #1
 8012c3e:	603b      	str	r3, [r7, #0]
 8012c40:	683b      	ldr	r3, [r7, #0]
 8012c42:	781b      	ldrb	r3, [r3, #0]
 8012c44:	2b2f      	cmp	r3, #47	; 0x2f
 8012c46:	d0f8      	beq.n	8012c3a <follow_path+0x2e>
 8012c48:	683b      	ldr	r3, [r7, #0]
 8012c4a:	781b      	ldrb	r3, [r3, #0]
 8012c4c:	2b5c      	cmp	r3, #92	; 0x5c
 8012c4e:	d0f4      	beq.n	8012c3a <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 8012c50:	693b      	ldr	r3, [r7, #16]
 8012c52:	2200      	movs	r2, #0
 8012c54:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8012c56:	683b      	ldr	r3, [r7, #0]
 8012c58:	781b      	ldrb	r3, [r3, #0]
 8012c5a:	2b1f      	cmp	r3, #31
 8012c5c:	d80a      	bhi.n	8012c74 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	2280      	movs	r2, #128	; 0x80
 8012c62:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8012c66:	2100      	movs	r1, #0
 8012c68:	6878      	ldr	r0, [r7, #4]
 8012c6a:	f7ff fc1e 	bl	80124aa <dir_sdi>
 8012c6e:	4603      	mov	r3, r0
 8012c70:	75fb      	strb	r3, [r7, #23]
 8012c72:	e05b      	b.n	8012d2c <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012c74:	463b      	mov	r3, r7
 8012c76:	4619      	mov	r1, r3
 8012c78:	6878      	ldr	r0, [r7, #4]
 8012c7a:	f7ff fefd 	bl	8012a78 <create_name>
 8012c7e:	4603      	mov	r3, r0
 8012c80:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8012c82:	7dfb      	ldrb	r3, [r7, #23]
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	d14c      	bne.n	8012d22 <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 8012c88:	6878      	ldr	r0, [r7, #4]
 8012c8a:	f7ff fe50 	bl	801292e <dir_find>
 8012c8e:	4603      	mov	r3, r0
 8012c90:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012c98:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8012c9a:	7dfb      	ldrb	r3, [r7, #23]
 8012c9c:	2b00      	cmp	r3, #0
 8012c9e:	d01b      	beq.n	8012cd8 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8012ca0:	7dfb      	ldrb	r3, [r7, #23]
 8012ca2:	2b04      	cmp	r3, #4
 8012ca4:	d13f      	bne.n	8012d26 <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 8012ca6:	7afb      	ldrb	r3, [r7, #11]
 8012ca8:	f003 0320 	and.w	r3, r3, #32
 8012cac:	2b00      	cmp	r3, #0
 8012cae:	d00b      	beq.n	8012cc8 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8012cb0:	7afb      	ldrb	r3, [r7, #11]
 8012cb2:	f003 0304 	and.w	r3, r3, #4
 8012cb6:	2b00      	cmp	r3, #0
 8012cb8:	d031      	beq.n	8012d1e <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	2280      	movs	r2, #128	; 0x80
 8012cbe:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 8012cc2:	2300      	movs	r3, #0
 8012cc4:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 8012cc6:	e02e      	b.n	8012d26 <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8012cc8:	7afb      	ldrb	r3, [r7, #11]
 8012cca:	f003 0304 	and.w	r3, r3, #4
 8012cce:	2b00      	cmp	r3, #0
 8012cd0:	d129      	bne.n	8012d26 <follow_path+0x11a>
 8012cd2:	2305      	movs	r3, #5
 8012cd4:	75fb      	strb	r3, [r7, #23]
				break;
 8012cd6:	e026      	b.n	8012d26 <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012cd8:	7afb      	ldrb	r3, [r7, #11]
 8012cda:	f003 0304 	and.w	r3, r3, #4
 8012cde:	2b00      	cmp	r3, #0
 8012ce0:	d123      	bne.n	8012d2a <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8012ce2:	693b      	ldr	r3, [r7, #16]
 8012ce4:	799b      	ldrb	r3, [r3, #6]
 8012ce6:	f003 0310 	and.w	r3, r3, #16
 8012cea:	2b00      	cmp	r3, #0
 8012cec:	d102      	bne.n	8012cf4 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 8012cee:	2305      	movs	r3, #5
 8012cf0:	75fb      	strb	r3, [r7, #23]
 8012cf2:	e01b      	b.n	8012d2c <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8012cf4:	68fb      	ldr	r3, [r7, #12]
 8012cf6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	695b      	ldr	r3, [r3, #20]
 8012cfe:	68fa      	ldr	r2, [r7, #12]
 8012d00:	8992      	ldrh	r2, [r2, #12]
 8012d02:	fbb3 f0f2 	udiv	r0, r3, r2
 8012d06:	fb02 f200 	mul.w	r2, r2, r0
 8012d0a:	1a9b      	subs	r3, r3, r2
 8012d0c:	440b      	add	r3, r1
 8012d0e:	4619      	mov	r1, r3
 8012d10:	68f8      	ldr	r0, [r7, #12]
 8012d12:	f7ff fd70 	bl	80127f6 <ld_clust>
 8012d16:	4602      	mov	r2, r0
 8012d18:	693b      	ldr	r3, [r7, #16]
 8012d1a:	609a      	str	r2, [r3, #8]
 8012d1c:	e7aa      	b.n	8012c74 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8012d1e:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012d20:	e7a8      	b.n	8012c74 <follow_path+0x68>
			if (res != FR_OK) break;
 8012d22:	bf00      	nop
 8012d24:	e002      	b.n	8012d2c <follow_path+0x120>
				break;
 8012d26:	bf00      	nop
 8012d28:	e000      	b.n	8012d2c <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012d2a:	bf00      	nop
			}
		}
	}

	return res;
 8012d2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8012d2e:	4618      	mov	r0, r3
 8012d30:	3718      	adds	r7, #24
 8012d32:	46bd      	mov	sp, r7
 8012d34:	bd80      	pop	{r7, pc}

08012d36 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8012d36:	b480      	push	{r7}
 8012d38:	b087      	sub	sp, #28
 8012d3a:	af00      	add	r7, sp, #0
 8012d3c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8012d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8012d42:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	681b      	ldr	r3, [r3, #0]
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	d031      	beq.n	8012db0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	681b      	ldr	r3, [r3, #0]
 8012d50:	617b      	str	r3, [r7, #20]
 8012d52:	e002      	b.n	8012d5a <get_ldnumber+0x24>
 8012d54:	697b      	ldr	r3, [r7, #20]
 8012d56:	3301      	adds	r3, #1
 8012d58:	617b      	str	r3, [r7, #20]
 8012d5a:	697b      	ldr	r3, [r7, #20]
 8012d5c:	781b      	ldrb	r3, [r3, #0]
 8012d5e:	2b20      	cmp	r3, #32
 8012d60:	d903      	bls.n	8012d6a <get_ldnumber+0x34>
 8012d62:	697b      	ldr	r3, [r7, #20]
 8012d64:	781b      	ldrb	r3, [r3, #0]
 8012d66:	2b3a      	cmp	r3, #58	; 0x3a
 8012d68:	d1f4      	bne.n	8012d54 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8012d6a:	697b      	ldr	r3, [r7, #20]
 8012d6c:	781b      	ldrb	r3, [r3, #0]
 8012d6e:	2b3a      	cmp	r3, #58	; 0x3a
 8012d70:	d11c      	bne.n	8012dac <get_ldnumber+0x76>
			tp = *path;
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	681b      	ldr	r3, [r3, #0]
 8012d76:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8012d78:	68fb      	ldr	r3, [r7, #12]
 8012d7a:	1c5a      	adds	r2, r3, #1
 8012d7c:	60fa      	str	r2, [r7, #12]
 8012d7e:	781b      	ldrb	r3, [r3, #0]
 8012d80:	3b30      	subs	r3, #48	; 0x30
 8012d82:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8012d84:	68bb      	ldr	r3, [r7, #8]
 8012d86:	2b09      	cmp	r3, #9
 8012d88:	d80e      	bhi.n	8012da8 <get_ldnumber+0x72>
 8012d8a:	68fa      	ldr	r2, [r7, #12]
 8012d8c:	697b      	ldr	r3, [r7, #20]
 8012d8e:	429a      	cmp	r2, r3
 8012d90:	d10a      	bne.n	8012da8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8012d92:	68bb      	ldr	r3, [r7, #8]
 8012d94:	2b00      	cmp	r3, #0
 8012d96:	d107      	bne.n	8012da8 <get_ldnumber+0x72>
					vol = (int)i;
 8012d98:	68bb      	ldr	r3, [r7, #8]
 8012d9a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8012d9c:	697b      	ldr	r3, [r7, #20]
 8012d9e:	3301      	adds	r3, #1
 8012da0:	617b      	str	r3, [r7, #20]
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	697a      	ldr	r2, [r7, #20]
 8012da6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8012da8:	693b      	ldr	r3, [r7, #16]
 8012daa:	e002      	b.n	8012db2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8012dac:	2300      	movs	r3, #0
 8012dae:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8012db0:	693b      	ldr	r3, [r7, #16]
}
 8012db2:	4618      	mov	r0, r3
 8012db4:	371c      	adds	r7, #28
 8012db6:	46bd      	mov	sp, r7
 8012db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dbc:	4770      	bx	lr
	...

08012dc0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8012dc0:	b580      	push	{r7, lr}
 8012dc2:	b082      	sub	sp, #8
 8012dc4:	af00      	add	r7, sp, #0
 8012dc6:	6078      	str	r0, [r7, #4]
 8012dc8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	2200      	movs	r2, #0
 8012dce:	70da      	strb	r2, [r3, #3]
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	f04f 32ff 	mov.w	r2, #4294967295
 8012dd6:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8012dd8:	6839      	ldr	r1, [r7, #0]
 8012dda:	6878      	ldr	r0, [r7, #4]
 8012ddc:	f7fe ff8c 	bl	8011cf8 <move_window>
 8012de0:	4603      	mov	r3, r0
 8012de2:	2b00      	cmp	r3, #0
 8012de4:	d001      	beq.n	8012dea <check_fs+0x2a>
 8012de6:	2304      	movs	r3, #4
 8012de8:	e038      	b.n	8012e5c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	3338      	adds	r3, #56	; 0x38
 8012dee:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012df2:	4618      	mov	r0, r3
 8012df4:	f7fe fcd0 	bl	8011798 <ld_word>
 8012df8:	4603      	mov	r3, r0
 8012dfa:	461a      	mov	r2, r3
 8012dfc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8012e00:	429a      	cmp	r2, r3
 8012e02:	d001      	beq.n	8012e08 <check_fs+0x48>
 8012e04:	2303      	movs	r3, #3
 8012e06:	e029      	b.n	8012e5c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012e0e:	2be9      	cmp	r3, #233	; 0xe9
 8012e10:	d009      	beq.n	8012e26 <check_fs+0x66>
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012e18:	2beb      	cmp	r3, #235	; 0xeb
 8012e1a:	d11e      	bne.n	8012e5a <check_fs+0x9a>
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8012e22:	2b90      	cmp	r3, #144	; 0x90
 8012e24:	d119      	bne.n	8012e5a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8012e26:	687b      	ldr	r3, [r7, #4]
 8012e28:	3338      	adds	r3, #56	; 0x38
 8012e2a:	3336      	adds	r3, #54	; 0x36
 8012e2c:	4618      	mov	r0, r3
 8012e2e:	f7fe fccb 	bl	80117c8 <ld_dword>
 8012e32:	4603      	mov	r3, r0
 8012e34:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8012e38:	4a0a      	ldr	r2, [pc, #40]	; (8012e64 <check_fs+0xa4>)
 8012e3a:	4293      	cmp	r3, r2
 8012e3c:	d101      	bne.n	8012e42 <check_fs+0x82>
 8012e3e:	2300      	movs	r3, #0
 8012e40:	e00c      	b.n	8012e5c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	3338      	adds	r3, #56	; 0x38
 8012e46:	3352      	adds	r3, #82	; 0x52
 8012e48:	4618      	mov	r0, r3
 8012e4a:	f7fe fcbd 	bl	80117c8 <ld_dword>
 8012e4e:	4602      	mov	r2, r0
 8012e50:	4b05      	ldr	r3, [pc, #20]	; (8012e68 <check_fs+0xa8>)
 8012e52:	429a      	cmp	r2, r3
 8012e54:	d101      	bne.n	8012e5a <check_fs+0x9a>
 8012e56:	2300      	movs	r3, #0
 8012e58:	e000      	b.n	8012e5c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8012e5a:	2302      	movs	r3, #2
}
 8012e5c:	4618      	mov	r0, r3
 8012e5e:	3708      	adds	r7, #8
 8012e60:	46bd      	mov	sp, r7
 8012e62:	bd80      	pop	{r7, pc}
 8012e64:	00544146 	.word	0x00544146
 8012e68:	33544146 	.word	0x33544146

08012e6c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8012e6c:	b580      	push	{r7, lr}
 8012e6e:	b096      	sub	sp, #88	; 0x58
 8012e70:	af00      	add	r7, sp, #0
 8012e72:	60f8      	str	r0, [r7, #12]
 8012e74:	60b9      	str	r1, [r7, #8]
 8012e76:	4613      	mov	r3, r2
 8012e78:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8012e7a:	68bb      	ldr	r3, [r7, #8]
 8012e7c:	2200      	movs	r2, #0
 8012e7e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8012e80:	68f8      	ldr	r0, [r7, #12]
 8012e82:	f7ff ff58 	bl	8012d36 <get_ldnumber>
 8012e86:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8012e88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012e8a:	2b00      	cmp	r3, #0
 8012e8c:	da01      	bge.n	8012e92 <find_volume+0x26>
 8012e8e:	230b      	movs	r3, #11
 8012e90:	e268      	b.n	8013364 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8012e92:	4ab0      	ldr	r2, [pc, #704]	; (8013154 <find_volume+0x2e8>)
 8012e94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012e96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012e9a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8012e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e9e:	2b00      	cmp	r3, #0
 8012ea0:	d101      	bne.n	8012ea6 <find_volume+0x3a>
 8012ea2:	230c      	movs	r3, #12
 8012ea4:	e25e      	b.n	8013364 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8012ea6:	68bb      	ldr	r3, [r7, #8]
 8012ea8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012eaa:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8012eac:	79fb      	ldrb	r3, [r7, #7]
 8012eae:	f023 0301 	bic.w	r3, r3, #1
 8012eb2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8012eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012eb6:	781b      	ldrb	r3, [r3, #0]
 8012eb8:	2b00      	cmp	r3, #0
 8012eba:	d01a      	beq.n	8012ef2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8012ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ebe:	785b      	ldrb	r3, [r3, #1]
 8012ec0:	4618      	mov	r0, r3
 8012ec2:	f7fe fbcb 	bl	801165c <disk_status>
 8012ec6:	4603      	mov	r3, r0
 8012ec8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8012ecc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012ed0:	f003 0301 	and.w	r3, r3, #1
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	d10c      	bne.n	8012ef2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8012ed8:	79fb      	ldrb	r3, [r7, #7]
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	d007      	beq.n	8012eee <find_volume+0x82>
 8012ede:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012ee2:	f003 0304 	and.w	r3, r3, #4
 8012ee6:	2b00      	cmp	r3, #0
 8012ee8:	d001      	beq.n	8012eee <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8012eea:	230a      	movs	r3, #10
 8012eec:	e23a      	b.n	8013364 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 8012eee:	2300      	movs	r3, #0
 8012ef0:	e238      	b.n	8013364 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8012ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ef4:	2200      	movs	r2, #0
 8012ef6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8012ef8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012efa:	b2da      	uxtb	r2, r3
 8012efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012efe:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8012f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f02:	785b      	ldrb	r3, [r3, #1]
 8012f04:	4618      	mov	r0, r3
 8012f06:	f7fe fbc3 	bl	8011690 <disk_initialize>
 8012f0a:	4603      	mov	r3, r0
 8012f0c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8012f10:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012f14:	f003 0301 	and.w	r3, r3, #1
 8012f18:	2b00      	cmp	r3, #0
 8012f1a:	d001      	beq.n	8012f20 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8012f1c:	2303      	movs	r3, #3
 8012f1e:	e221      	b.n	8013364 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8012f20:	79fb      	ldrb	r3, [r7, #7]
 8012f22:	2b00      	cmp	r3, #0
 8012f24:	d007      	beq.n	8012f36 <find_volume+0xca>
 8012f26:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012f2a:	f003 0304 	and.w	r3, r3, #4
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	d001      	beq.n	8012f36 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8012f32:	230a      	movs	r3, #10
 8012f34:	e216      	b.n	8013364 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8012f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f38:	7858      	ldrb	r0, [r3, #1]
 8012f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f3c:	330c      	adds	r3, #12
 8012f3e:	461a      	mov	r2, r3
 8012f40:	2102      	movs	r1, #2
 8012f42:	f7fe fc0b 	bl	801175c <disk_ioctl>
 8012f46:	4603      	mov	r3, r0
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	d001      	beq.n	8012f50 <find_volume+0xe4>
 8012f4c:	2301      	movs	r3, #1
 8012f4e:	e209      	b.n	8013364 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8012f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f52:	899b      	ldrh	r3, [r3, #12]
 8012f54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012f58:	d80d      	bhi.n	8012f76 <find_volume+0x10a>
 8012f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f5c:	899b      	ldrh	r3, [r3, #12]
 8012f5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012f62:	d308      	bcc.n	8012f76 <find_volume+0x10a>
 8012f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f66:	899b      	ldrh	r3, [r3, #12]
 8012f68:	461a      	mov	r2, r3
 8012f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f6c:	899b      	ldrh	r3, [r3, #12]
 8012f6e:	3b01      	subs	r3, #1
 8012f70:	4013      	ands	r3, r2
 8012f72:	2b00      	cmp	r3, #0
 8012f74:	d001      	beq.n	8012f7a <find_volume+0x10e>
 8012f76:	2301      	movs	r3, #1
 8012f78:	e1f4      	b.n	8013364 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8012f7a:	2300      	movs	r3, #0
 8012f7c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8012f7e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012f80:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012f82:	f7ff ff1d 	bl	8012dc0 <check_fs>
 8012f86:	4603      	mov	r3, r0
 8012f88:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8012f8c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012f90:	2b02      	cmp	r3, #2
 8012f92:	d14b      	bne.n	801302c <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012f94:	2300      	movs	r3, #0
 8012f96:	643b      	str	r3, [r7, #64]	; 0x40
 8012f98:	e01f      	b.n	8012fda <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8012f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f9c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8012fa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012fa2:	011b      	lsls	r3, r3, #4
 8012fa4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8012fa8:	4413      	add	r3, r2
 8012faa:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8012fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fae:	3304      	adds	r3, #4
 8012fb0:	781b      	ldrb	r3, [r3, #0]
 8012fb2:	2b00      	cmp	r3, #0
 8012fb4:	d006      	beq.n	8012fc4 <find_volume+0x158>
 8012fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fb8:	3308      	adds	r3, #8
 8012fba:	4618      	mov	r0, r3
 8012fbc:	f7fe fc04 	bl	80117c8 <ld_dword>
 8012fc0:	4602      	mov	r2, r0
 8012fc2:	e000      	b.n	8012fc6 <find_volume+0x15a>
 8012fc4:	2200      	movs	r2, #0
 8012fc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012fc8:	009b      	lsls	r3, r3, #2
 8012fca:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8012fce:	440b      	add	r3, r1
 8012fd0:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012fd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012fd6:	3301      	adds	r3, #1
 8012fd8:	643b      	str	r3, [r7, #64]	; 0x40
 8012fda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012fdc:	2b03      	cmp	r3, #3
 8012fde:	d9dc      	bls.n	8012f9a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8012fe0:	2300      	movs	r3, #0
 8012fe2:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8012fe4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012fe6:	2b00      	cmp	r3, #0
 8012fe8:	d002      	beq.n	8012ff0 <find_volume+0x184>
 8012fea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012fec:	3b01      	subs	r3, #1
 8012fee:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8012ff0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012ff2:	009b      	lsls	r3, r3, #2
 8012ff4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8012ff8:	4413      	add	r3, r2
 8012ffa:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8012ffe:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8013000:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013002:	2b00      	cmp	r3, #0
 8013004:	d005      	beq.n	8013012 <find_volume+0x1a6>
 8013006:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013008:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801300a:	f7ff fed9 	bl	8012dc0 <check_fs>
 801300e:	4603      	mov	r3, r0
 8013010:	e000      	b.n	8013014 <find_volume+0x1a8>
 8013012:	2303      	movs	r3, #3
 8013014:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8013018:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801301c:	2b01      	cmp	r3, #1
 801301e:	d905      	bls.n	801302c <find_volume+0x1c0>
 8013020:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013022:	3301      	adds	r3, #1
 8013024:	643b      	str	r3, [r7, #64]	; 0x40
 8013026:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013028:	2b03      	cmp	r3, #3
 801302a:	d9e1      	bls.n	8012ff0 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801302c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013030:	2b04      	cmp	r3, #4
 8013032:	d101      	bne.n	8013038 <find_volume+0x1cc>
 8013034:	2301      	movs	r3, #1
 8013036:	e195      	b.n	8013364 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8013038:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801303c:	2b01      	cmp	r3, #1
 801303e:	d901      	bls.n	8013044 <find_volume+0x1d8>
 8013040:	230d      	movs	r3, #13
 8013042:	e18f      	b.n	8013364 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8013044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013046:	3338      	adds	r3, #56	; 0x38
 8013048:	330b      	adds	r3, #11
 801304a:	4618      	mov	r0, r3
 801304c:	f7fe fba4 	bl	8011798 <ld_word>
 8013050:	4603      	mov	r3, r0
 8013052:	461a      	mov	r2, r3
 8013054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013056:	899b      	ldrh	r3, [r3, #12]
 8013058:	429a      	cmp	r2, r3
 801305a:	d001      	beq.n	8013060 <find_volume+0x1f4>
 801305c:	230d      	movs	r3, #13
 801305e:	e181      	b.n	8013364 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8013060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013062:	3338      	adds	r3, #56	; 0x38
 8013064:	3316      	adds	r3, #22
 8013066:	4618      	mov	r0, r3
 8013068:	f7fe fb96 	bl	8011798 <ld_word>
 801306c:	4603      	mov	r3, r0
 801306e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8013070:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013072:	2b00      	cmp	r3, #0
 8013074:	d106      	bne.n	8013084 <find_volume+0x218>
 8013076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013078:	3338      	adds	r3, #56	; 0x38
 801307a:	3324      	adds	r3, #36	; 0x24
 801307c:	4618      	mov	r0, r3
 801307e:	f7fe fba3 	bl	80117c8 <ld_dword>
 8013082:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8013084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013086:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013088:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801308a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801308c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8013090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013092:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8013094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013096:	789b      	ldrb	r3, [r3, #2]
 8013098:	2b01      	cmp	r3, #1
 801309a:	d005      	beq.n	80130a8 <find_volume+0x23c>
 801309c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801309e:	789b      	ldrb	r3, [r3, #2]
 80130a0:	2b02      	cmp	r3, #2
 80130a2:	d001      	beq.n	80130a8 <find_volume+0x23c>
 80130a4:	230d      	movs	r3, #13
 80130a6:	e15d      	b.n	8013364 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80130a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130aa:	789b      	ldrb	r3, [r3, #2]
 80130ac:	461a      	mov	r2, r3
 80130ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80130b0:	fb02 f303 	mul.w	r3, r2, r3
 80130b4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80130b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80130bc:	b29a      	uxth	r2, r3
 80130be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130c0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80130c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130c4:	895b      	ldrh	r3, [r3, #10]
 80130c6:	2b00      	cmp	r3, #0
 80130c8:	d008      	beq.n	80130dc <find_volume+0x270>
 80130ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130cc:	895b      	ldrh	r3, [r3, #10]
 80130ce:	461a      	mov	r2, r3
 80130d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130d2:	895b      	ldrh	r3, [r3, #10]
 80130d4:	3b01      	subs	r3, #1
 80130d6:	4013      	ands	r3, r2
 80130d8:	2b00      	cmp	r3, #0
 80130da:	d001      	beq.n	80130e0 <find_volume+0x274>
 80130dc:	230d      	movs	r3, #13
 80130de:	e141      	b.n	8013364 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80130e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130e2:	3338      	adds	r3, #56	; 0x38
 80130e4:	3311      	adds	r3, #17
 80130e6:	4618      	mov	r0, r3
 80130e8:	f7fe fb56 	bl	8011798 <ld_word>
 80130ec:	4603      	mov	r3, r0
 80130ee:	461a      	mov	r2, r3
 80130f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130f2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80130f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130f6:	891b      	ldrh	r3, [r3, #8]
 80130f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80130fa:	8992      	ldrh	r2, [r2, #12]
 80130fc:	0952      	lsrs	r2, r2, #5
 80130fe:	b292      	uxth	r2, r2
 8013100:	fbb3 f1f2 	udiv	r1, r3, r2
 8013104:	fb02 f201 	mul.w	r2, r2, r1
 8013108:	1a9b      	subs	r3, r3, r2
 801310a:	b29b      	uxth	r3, r3
 801310c:	2b00      	cmp	r3, #0
 801310e:	d001      	beq.n	8013114 <find_volume+0x2a8>
 8013110:	230d      	movs	r3, #13
 8013112:	e127      	b.n	8013364 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8013114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013116:	3338      	adds	r3, #56	; 0x38
 8013118:	3313      	adds	r3, #19
 801311a:	4618      	mov	r0, r3
 801311c:	f7fe fb3c 	bl	8011798 <ld_word>
 8013120:	4603      	mov	r3, r0
 8013122:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8013124:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013126:	2b00      	cmp	r3, #0
 8013128:	d106      	bne.n	8013138 <find_volume+0x2cc>
 801312a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801312c:	3338      	adds	r3, #56	; 0x38
 801312e:	3320      	adds	r3, #32
 8013130:	4618      	mov	r0, r3
 8013132:	f7fe fb49 	bl	80117c8 <ld_dword>
 8013136:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8013138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801313a:	3338      	adds	r3, #56	; 0x38
 801313c:	330e      	adds	r3, #14
 801313e:	4618      	mov	r0, r3
 8013140:	f7fe fb2a 	bl	8011798 <ld_word>
 8013144:	4603      	mov	r3, r0
 8013146:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8013148:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801314a:	2b00      	cmp	r3, #0
 801314c:	d104      	bne.n	8013158 <find_volume+0x2ec>
 801314e:	230d      	movs	r3, #13
 8013150:	e108      	b.n	8013364 <find_volume+0x4f8>
 8013152:	bf00      	nop
 8013154:	200452d4 	.word	0x200452d4

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8013158:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801315a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801315c:	4413      	add	r3, r2
 801315e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013160:	8911      	ldrh	r1, [r2, #8]
 8013162:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013164:	8992      	ldrh	r2, [r2, #12]
 8013166:	0952      	lsrs	r2, r2, #5
 8013168:	b292      	uxth	r2, r2
 801316a:	fbb1 f2f2 	udiv	r2, r1, r2
 801316e:	b292      	uxth	r2, r2
 8013170:	4413      	add	r3, r2
 8013172:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8013174:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013178:	429a      	cmp	r2, r3
 801317a:	d201      	bcs.n	8013180 <find_volume+0x314>
 801317c:	230d      	movs	r3, #13
 801317e:	e0f1      	b.n	8013364 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8013180:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013184:	1ad3      	subs	r3, r2, r3
 8013186:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013188:	8952      	ldrh	r2, [r2, #10]
 801318a:	fbb3 f3f2 	udiv	r3, r3, r2
 801318e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8013190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013192:	2b00      	cmp	r3, #0
 8013194:	d101      	bne.n	801319a <find_volume+0x32e>
 8013196:	230d      	movs	r3, #13
 8013198:	e0e4      	b.n	8013364 <find_volume+0x4f8>
		fmt = FS_FAT32;
 801319a:	2303      	movs	r3, #3
 801319c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80131a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131a2:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80131a6:	4293      	cmp	r3, r2
 80131a8:	d802      	bhi.n	80131b0 <find_volume+0x344>
 80131aa:	2302      	movs	r3, #2
 80131ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80131b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131b2:	f640 72f5 	movw	r2, #4085	; 0xff5
 80131b6:	4293      	cmp	r3, r2
 80131b8:	d802      	bhi.n	80131c0 <find_volume+0x354>
 80131ba:	2301      	movs	r3, #1
 80131bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80131c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131c2:	1c9a      	adds	r2, r3, #2
 80131c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131c6:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80131c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131ca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80131cc:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80131ce:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80131d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80131d2:	441a      	add	r2, r3
 80131d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131d6:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80131d8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80131da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131dc:	441a      	add	r2, r3
 80131de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131e0:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 80131e2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80131e6:	2b03      	cmp	r3, #3
 80131e8:	d11e      	bne.n	8013228 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80131ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131ec:	3338      	adds	r3, #56	; 0x38
 80131ee:	332a      	adds	r3, #42	; 0x2a
 80131f0:	4618      	mov	r0, r3
 80131f2:	f7fe fad1 	bl	8011798 <ld_word>
 80131f6:	4603      	mov	r3, r0
 80131f8:	2b00      	cmp	r3, #0
 80131fa:	d001      	beq.n	8013200 <find_volume+0x394>
 80131fc:	230d      	movs	r3, #13
 80131fe:	e0b1      	b.n	8013364 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8013200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013202:	891b      	ldrh	r3, [r3, #8]
 8013204:	2b00      	cmp	r3, #0
 8013206:	d001      	beq.n	801320c <find_volume+0x3a0>
 8013208:	230d      	movs	r3, #13
 801320a:	e0ab      	b.n	8013364 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801320c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801320e:	3338      	adds	r3, #56	; 0x38
 8013210:	332c      	adds	r3, #44	; 0x2c
 8013212:	4618      	mov	r0, r3
 8013214:	f7fe fad8 	bl	80117c8 <ld_dword>
 8013218:	4602      	mov	r2, r0
 801321a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801321c:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801321e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013220:	69db      	ldr	r3, [r3, #28]
 8013222:	009b      	lsls	r3, r3, #2
 8013224:	647b      	str	r3, [r7, #68]	; 0x44
 8013226:	e01f      	b.n	8013268 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8013228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801322a:	891b      	ldrh	r3, [r3, #8]
 801322c:	2b00      	cmp	r3, #0
 801322e:	d101      	bne.n	8013234 <find_volume+0x3c8>
 8013230:	230d      	movs	r3, #13
 8013232:	e097      	b.n	8013364 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8013234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013236:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013238:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801323a:	441a      	add	r2, r3
 801323c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801323e:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8013240:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013244:	2b02      	cmp	r3, #2
 8013246:	d103      	bne.n	8013250 <find_volume+0x3e4>
 8013248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801324a:	69db      	ldr	r3, [r3, #28]
 801324c:	005b      	lsls	r3, r3, #1
 801324e:	e00a      	b.n	8013266 <find_volume+0x3fa>
 8013250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013252:	69da      	ldr	r2, [r3, #28]
 8013254:	4613      	mov	r3, r2
 8013256:	005b      	lsls	r3, r3, #1
 8013258:	4413      	add	r3, r2
 801325a:	085a      	lsrs	r2, r3, #1
 801325c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801325e:	69db      	ldr	r3, [r3, #28]
 8013260:	f003 0301 	and.w	r3, r3, #1
 8013264:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8013266:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8013268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801326a:	6a1a      	ldr	r2, [r3, #32]
 801326c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801326e:	899b      	ldrh	r3, [r3, #12]
 8013270:	4619      	mov	r1, r3
 8013272:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013274:	440b      	add	r3, r1
 8013276:	3b01      	subs	r3, #1
 8013278:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801327a:	8989      	ldrh	r1, [r1, #12]
 801327c:	fbb3 f3f1 	udiv	r3, r3, r1
 8013280:	429a      	cmp	r2, r3
 8013282:	d201      	bcs.n	8013288 <find_volume+0x41c>
 8013284:	230d      	movs	r3, #13
 8013286:	e06d      	b.n	8013364 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8013288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801328a:	f04f 32ff 	mov.w	r2, #4294967295
 801328e:	615a      	str	r2, [r3, #20]
 8013290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013292:	695a      	ldr	r2, [r3, #20]
 8013294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013296:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8013298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801329a:	2280      	movs	r2, #128	; 0x80
 801329c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801329e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80132a2:	2b03      	cmp	r3, #3
 80132a4:	d149      	bne.n	801333a <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80132a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132a8:	3338      	adds	r3, #56	; 0x38
 80132aa:	3330      	adds	r3, #48	; 0x30
 80132ac:	4618      	mov	r0, r3
 80132ae:	f7fe fa73 	bl	8011798 <ld_word>
 80132b2:	4603      	mov	r3, r0
 80132b4:	2b01      	cmp	r3, #1
 80132b6:	d140      	bne.n	801333a <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 80132b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80132ba:	3301      	adds	r3, #1
 80132bc:	4619      	mov	r1, r3
 80132be:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80132c0:	f7fe fd1a 	bl	8011cf8 <move_window>
 80132c4:	4603      	mov	r3, r0
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	d137      	bne.n	801333a <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 80132ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132cc:	2200      	movs	r2, #0
 80132ce:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80132d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132d2:	3338      	adds	r3, #56	; 0x38
 80132d4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80132d8:	4618      	mov	r0, r3
 80132da:	f7fe fa5d 	bl	8011798 <ld_word>
 80132de:	4603      	mov	r3, r0
 80132e0:	461a      	mov	r2, r3
 80132e2:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80132e6:	429a      	cmp	r2, r3
 80132e8:	d127      	bne.n	801333a <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80132ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132ec:	3338      	adds	r3, #56	; 0x38
 80132ee:	4618      	mov	r0, r3
 80132f0:	f7fe fa6a 	bl	80117c8 <ld_dword>
 80132f4:	4602      	mov	r2, r0
 80132f6:	4b1d      	ldr	r3, [pc, #116]	; (801336c <find_volume+0x500>)
 80132f8:	429a      	cmp	r2, r3
 80132fa:	d11e      	bne.n	801333a <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80132fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132fe:	3338      	adds	r3, #56	; 0x38
 8013300:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8013304:	4618      	mov	r0, r3
 8013306:	f7fe fa5f 	bl	80117c8 <ld_dword>
 801330a:	4602      	mov	r2, r0
 801330c:	4b18      	ldr	r3, [pc, #96]	; (8013370 <find_volume+0x504>)
 801330e:	429a      	cmp	r2, r3
 8013310:	d113      	bne.n	801333a <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8013312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013314:	3338      	adds	r3, #56	; 0x38
 8013316:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 801331a:	4618      	mov	r0, r3
 801331c:	f7fe fa54 	bl	80117c8 <ld_dword>
 8013320:	4602      	mov	r2, r0
 8013322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013324:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8013326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013328:	3338      	adds	r3, #56	; 0x38
 801332a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 801332e:	4618      	mov	r0, r3
 8013330:	f7fe fa4a 	bl	80117c8 <ld_dword>
 8013334:	4602      	mov	r2, r0
 8013336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013338:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801333a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801333c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8013340:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8013342:	4b0c      	ldr	r3, [pc, #48]	; (8013374 <find_volume+0x508>)
 8013344:	881b      	ldrh	r3, [r3, #0]
 8013346:	3301      	adds	r3, #1
 8013348:	b29a      	uxth	r2, r3
 801334a:	4b0a      	ldr	r3, [pc, #40]	; (8013374 <find_volume+0x508>)
 801334c:	801a      	strh	r2, [r3, #0]
 801334e:	4b09      	ldr	r3, [pc, #36]	; (8013374 <find_volume+0x508>)
 8013350:	881a      	ldrh	r2, [r3, #0]
 8013352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013354:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 8013356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013358:	2200      	movs	r2, #0
 801335a:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801335c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801335e:	f7fe fc63 	bl	8011c28 <clear_lock>
#endif
	return FR_OK;
 8013362:	2300      	movs	r3, #0
}
 8013364:	4618      	mov	r0, r3
 8013366:	3758      	adds	r7, #88	; 0x58
 8013368:	46bd      	mov	sp, r7
 801336a:	bd80      	pop	{r7, pc}
 801336c:	41615252 	.word	0x41615252
 8013370:	61417272 	.word	0x61417272
 8013374:	200452d8 	.word	0x200452d8

08013378 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8013378:	b580      	push	{r7, lr}
 801337a:	b084      	sub	sp, #16
 801337c:	af00      	add	r7, sp, #0
 801337e:	6078      	str	r0, [r7, #4]
 8013380:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8013382:	2309      	movs	r3, #9
 8013384:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8013386:	687b      	ldr	r3, [r7, #4]
 8013388:	2b00      	cmp	r3, #0
 801338a:	d01c      	beq.n	80133c6 <validate+0x4e>
 801338c:	687b      	ldr	r3, [r7, #4]
 801338e:	681b      	ldr	r3, [r3, #0]
 8013390:	2b00      	cmp	r3, #0
 8013392:	d018      	beq.n	80133c6 <validate+0x4e>
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	681b      	ldr	r3, [r3, #0]
 8013398:	781b      	ldrb	r3, [r3, #0]
 801339a:	2b00      	cmp	r3, #0
 801339c:	d013      	beq.n	80133c6 <validate+0x4e>
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	889a      	ldrh	r2, [r3, #4]
 80133a2:	687b      	ldr	r3, [r7, #4]
 80133a4:	681b      	ldr	r3, [r3, #0]
 80133a6:	88db      	ldrh	r3, [r3, #6]
 80133a8:	429a      	cmp	r2, r3
 80133aa:	d10c      	bne.n	80133c6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	681b      	ldr	r3, [r3, #0]
 80133b0:	785b      	ldrb	r3, [r3, #1]
 80133b2:	4618      	mov	r0, r3
 80133b4:	f7fe f952 	bl	801165c <disk_status>
 80133b8:	4603      	mov	r3, r0
 80133ba:	f003 0301 	and.w	r3, r3, #1
 80133be:	2b00      	cmp	r3, #0
 80133c0:	d101      	bne.n	80133c6 <validate+0x4e>
			res = FR_OK;
 80133c2:	2300      	movs	r3, #0
 80133c4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80133c6:	7bfb      	ldrb	r3, [r7, #15]
 80133c8:	2b00      	cmp	r3, #0
 80133ca:	d102      	bne.n	80133d2 <validate+0x5a>
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	681b      	ldr	r3, [r3, #0]
 80133d0:	e000      	b.n	80133d4 <validate+0x5c>
 80133d2:	2300      	movs	r3, #0
 80133d4:	683a      	ldr	r2, [r7, #0]
 80133d6:	6013      	str	r3, [r2, #0]
	return res;
 80133d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80133da:	4618      	mov	r0, r3
 80133dc:	3710      	adds	r7, #16
 80133de:	46bd      	mov	sp, r7
 80133e0:	bd80      	pop	{r7, pc}
	...

080133e4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80133e4:	b580      	push	{r7, lr}
 80133e6:	b088      	sub	sp, #32
 80133e8:	af00      	add	r7, sp, #0
 80133ea:	60f8      	str	r0, [r7, #12]
 80133ec:	60b9      	str	r1, [r7, #8]
 80133ee:	4613      	mov	r3, r2
 80133f0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80133f2:	68bb      	ldr	r3, [r7, #8]
 80133f4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80133f6:	f107 0310 	add.w	r3, r7, #16
 80133fa:	4618      	mov	r0, r3
 80133fc:	f7ff fc9b 	bl	8012d36 <get_ldnumber>
 8013400:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8013402:	69fb      	ldr	r3, [r7, #28]
 8013404:	2b00      	cmp	r3, #0
 8013406:	da01      	bge.n	801340c <f_mount+0x28>
 8013408:	230b      	movs	r3, #11
 801340a:	e02b      	b.n	8013464 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801340c:	4a17      	ldr	r2, [pc, #92]	; (801346c <f_mount+0x88>)
 801340e:	69fb      	ldr	r3, [r7, #28]
 8013410:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013414:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8013416:	69bb      	ldr	r3, [r7, #24]
 8013418:	2b00      	cmp	r3, #0
 801341a:	d005      	beq.n	8013428 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 801341c:	69b8      	ldr	r0, [r7, #24]
 801341e:	f7fe fc03 	bl	8011c28 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8013422:	69bb      	ldr	r3, [r7, #24]
 8013424:	2200      	movs	r2, #0
 8013426:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8013428:	68fb      	ldr	r3, [r7, #12]
 801342a:	2b00      	cmp	r3, #0
 801342c:	d002      	beq.n	8013434 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801342e:	68fb      	ldr	r3, [r7, #12]
 8013430:	2200      	movs	r2, #0
 8013432:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8013434:	68fa      	ldr	r2, [r7, #12]
 8013436:	490d      	ldr	r1, [pc, #52]	; (801346c <f_mount+0x88>)
 8013438:	69fb      	ldr	r3, [r7, #28]
 801343a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801343e:	68fb      	ldr	r3, [r7, #12]
 8013440:	2b00      	cmp	r3, #0
 8013442:	d002      	beq.n	801344a <f_mount+0x66>
 8013444:	79fb      	ldrb	r3, [r7, #7]
 8013446:	2b01      	cmp	r3, #1
 8013448:	d001      	beq.n	801344e <f_mount+0x6a>
 801344a:	2300      	movs	r3, #0
 801344c:	e00a      	b.n	8013464 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801344e:	f107 010c 	add.w	r1, r7, #12
 8013452:	f107 0308 	add.w	r3, r7, #8
 8013456:	2200      	movs	r2, #0
 8013458:	4618      	mov	r0, r3
 801345a:	f7ff fd07 	bl	8012e6c <find_volume>
 801345e:	4603      	mov	r3, r0
 8013460:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8013462:	7dfb      	ldrb	r3, [r7, #23]
}
 8013464:	4618      	mov	r0, r3
 8013466:	3720      	adds	r7, #32
 8013468:	46bd      	mov	sp, r7
 801346a:	bd80      	pop	{r7, pc}
 801346c:	200452d4 	.word	0x200452d4

08013470 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8013470:	b580      	push	{r7, lr}
 8013472:	b098      	sub	sp, #96	; 0x60
 8013474:	af00      	add	r7, sp, #0
 8013476:	60f8      	str	r0, [r7, #12]
 8013478:	60b9      	str	r1, [r7, #8]
 801347a:	4613      	mov	r3, r2
 801347c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801347e:	68fb      	ldr	r3, [r7, #12]
 8013480:	2b00      	cmp	r3, #0
 8013482:	d101      	bne.n	8013488 <f_open+0x18>
 8013484:	2309      	movs	r3, #9
 8013486:	e1ba      	b.n	80137fe <f_open+0x38e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8013488:	79fb      	ldrb	r3, [r7, #7]
 801348a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801348e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8013490:	79fa      	ldrb	r2, [r7, #7]
 8013492:	f107 0110 	add.w	r1, r7, #16
 8013496:	f107 0308 	add.w	r3, r7, #8
 801349a:	4618      	mov	r0, r3
 801349c:	f7ff fce6 	bl	8012e6c <find_volume>
 80134a0:	4603      	mov	r3, r0
 80134a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80134a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80134aa:	2b00      	cmp	r3, #0
 80134ac:	f040 819e 	bne.w	80137ec <f_open+0x37c>
		dj.obj.fs = fs;
 80134b0:	693b      	ldr	r3, [r7, #16]
 80134b2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80134b4:	68ba      	ldr	r2, [r7, #8]
 80134b6:	f107 0314 	add.w	r3, r7, #20
 80134ba:	4611      	mov	r1, r2
 80134bc:	4618      	mov	r0, r3
 80134be:	f7ff fba5 	bl	8012c0c <follow_path>
 80134c2:	4603      	mov	r3, r0
 80134c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80134c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80134cc:	2b00      	cmp	r3, #0
 80134ce:	d11a      	bne.n	8013506 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80134d0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80134d4:	b25b      	sxtb	r3, r3
 80134d6:	2b00      	cmp	r3, #0
 80134d8:	da03      	bge.n	80134e2 <f_open+0x72>
				res = FR_INVALID_NAME;
 80134da:	2306      	movs	r3, #6
 80134dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80134e0:	e011      	b.n	8013506 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80134e2:	79fb      	ldrb	r3, [r7, #7]
 80134e4:	f023 0301 	bic.w	r3, r3, #1
 80134e8:	2b00      	cmp	r3, #0
 80134ea:	bf14      	ite	ne
 80134ec:	2301      	movne	r3, #1
 80134ee:	2300      	moveq	r3, #0
 80134f0:	b2db      	uxtb	r3, r3
 80134f2:	461a      	mov	r2, r3
 80134f4:	f107 0314 	add.w	r3, r7, #20
 80134f8:	4611      	mov	r1, r2
 80134fa:	4618      	mov	r0, r3
 80134fc:	f7fe fa4c 	bl	8011998 <chk_lock>
 8013500:	4603      	mov	r3, r0
 8013502:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8013506:	79fb      	ldrb	r3, [r7, #7]
 8013508:	f003 031c 	and.w	r3, r3, #28
 801350c:	2b00      	cmp	r3, #0
 801350e:	d07e      	beq.n	801360e <f_open+0x19e>
			if (res != FR_OK) {					/* No file, create new */
 8013510:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013514:	2b00      	cmp	r3, #0
 8013516:	d017      	beq.n	8013548 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8013518:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801351c:	2b04      	cmp	r3, #4
 801351e:	d10e      	bne.n	801353e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8013520:	f7fe fa96 	bl	8011a50 <enq_lock>
 8013524:	4603      	mov	r3, r0
 8013526:	2b00      	cmp	r3, #0
 8013528:	d006      	beq.n	8013538 <f_open+0xc8>
 801352a:	f107 0314 	add.w	r3, r7, #20
 801352e:	4618      	mov	r0, r3
 8013530:	f7ff fa52 	bl	80129d8 <dir_register>
 8013534:	4603      	mov	r3, r0
 8013536:	e000      	b.n	801353a <f_open+0xca>
 8013538:	2312      	movs	r3, #18
 801353a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801353e:	79fb      	ldrb	r3, [r7, #7]
 8013540:	f043 0308 	orr.w	r3, r3, #8
 8013544:	71fb      	strb	r3, [r7, #7]
 8013546:	e010      	b.n	801356a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8013548:	7ebb      	ldrb	r3, [r7, #26]
 801354a:	f003 0311 	and.w	r3, r3, #17
 801354e:	2b00      	cmp	r3, #0
 8013550:	d003      	beq.n	801355a <f_open+0xea>
					res = FR_DENIED;
 8013552:	2307      	movs	r3, #7
 8013554:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013558:	e007      	b.n	801356a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801355a:	79fb      	ldrb	r3, [r7, #7]
 801355c:	f003 0304 	and.w	r3, r3, #4
 8013560:	2b00      	cmp	r3, #0
 8013562:	d002      	beq.n	801356a <f_open+0xfa>
 8013564:	2308      	movs	r3, #8
 8013566:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801356a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801356e:	2b00      	cmp	r3, #0
 8013570:	d167      	bne.n	8013642 <f_open+0x1d2>
 8013572:	79fb      	ldrb	r3, [r7, #7]
 8013574:	f003 0308 	and.w	r3, r3, #8
 8013578:	2b00      	cmp	r3, #0
 801357a:	d062      	beq.n	8013642 <f_open+0x1d2>
				dw = GET_FATTIME();
 801357c:	4ba2      	ldr	r3, [pc, #648]	; (8013808 <f_open+0x398>)
 801357e:	653b      	str	r3, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8013580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013582:	330e      	adds	r3, #14
 8013584:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013586:	4618      	mov	r0, r3
 8013588:	f7fe f95c 	bl	8011844 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801358c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801358e:	3316      	adds	r3, #22
 8013590:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013592:	4618      	mov	r0, r3
 8013594:	f7fe f956 	bl	8011844 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8013598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801359a:	330b      	adds	r3, #11
 801359c:	2220      	movs	r2, #32
 801359e:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80135a0:	693b      	ldr	r3, [r7, #16]
 80135a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80135a4:	4611      	mov	r1, r2
 80135a6:	4618      	mov	r0, r3
 80135a8:	f7ff f925 	bl	80127f6 <ld_clust>
 80135ac:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80135ae:	693b      	ldr	r3, [r7, #16]
 80135b0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80135b2:	2200      	movs	r2, #0
 80135b4:	4618      	mov	r0, r3
 80135b6:	f7ff f93d 	bl	8012834 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80135ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80135bc:	331c      	adds	r3, #28
 80135be:	2100      	movs	r1, #0
 80135c0:	4618      	mov	r0, r3
 80135c2:	f7fe f93f 	bl	8011844 <st_dword>
					fs->wflag = 1;
 80135c6:	693b      	ldr	r3, [r7, #16]
 80135c8:	2201      	movs	r2, #1
 80135ca:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80135cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80135ce:	2b00      	cmp	r3, #0
 80135d0:	d037      	beq.n	8013642 <f_open+0x1d2>
						dw = fs->winsect;
 80135d2:	693b      	ldr	r3, [r7, #16]
 80135d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80135d6:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80135d8:	f107 0314 	add.w	r3, r7, #20
 80135dc:	2200      	movs	r2, #0
 80135de:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80135e0:	4618      	mov	r0, r3
 80135e2:	f7fe fe2d 	bl	8012240 <remove_chain>
 80135e6:	4603      	mov	r3, r0
 80135e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80135ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	d126      	bne.n	8013642 <f_open+0x1d2>
							res = move_window(fs, dw);
 80135f4:	693b      	ldr	r3, [r7, #16]
 80135f6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80135f8:	4618      	mov	r0, r3
 80135fa:	f7fe fb7d 	bl	8011cf8 <move_window>
 80135fe:	4603      	mov	r3, r0
 8013600:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8013604:	693b      	ldr	r3, [r7, #16]
 8013606:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013608:	3a01      	subs	r2, #1
 801360a:	611a      	str	r2, [r3, #16]
 801360c:	e019      	b.n	8013642 <f_open+0x1d2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801360e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013612:	2b00      	cmp	r3, #0
 8013614:	d115      	bne.n	8013642 <f_open+0x1d2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8013616:	7ebb      	ldrb	r3, [r7, #26]
 8013618:	f003 0310 	and.w	r3, r3, #16
 801361c:	2b00      	cmp	r3, #0
 801361e:	d003      	beq.n	8013628 <f_open+0x1b8>
					res = FR_NO_FILE;
 8013620:	2304      	movs	r3, #4
 8013622:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013626:	e00c      	b.n	8013642 <f_open+0x1d2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8013628:	79fb      	ldrb	r3, [r7, #7]
 801362a:	f003 0302 	and.w	r3, r3, #2
 801362e:	2b00      	cmp	r3, #0
 8013630:	d007      	beq.n	8013642 <f_open+0x1d2>
 8013632:	7ebb      	ldrb	r3, [r7, #26]
 8013634:	f003 0301 	and.w	r3, r3, #1
 8013638:	2b00      	cmp	r3, #0
 801363a:	d002      	beq.n	8013642 <f_open+0x1d2>
						res = FR_DENIED;
 801363c:	2307      	movs	r3, #7
 801363e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8013642:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013646:	2b00      	cmp	r3, #0
 8013648:	d128      	bne.n	801369c <f_open+0x22c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801364a:	79fb      	ldrb	r3, [r7, #7]
 801364c:	f003 0308 	and.w	r3, r3, #8
 8013650:	2b00      	cmp	r3, #0
 8013652:	d003      	beq.n	801365c <f_open+0x1ec>
				mode |= FA_MODIFIED;
 8013654:	79fb      	ldrb	r3, [r7, #7]
 8013656:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801365a:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801365c:	693b      	ldr	r3, [r7, #16]
 801365e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013660:	68fb      	ldr	r3, [r7, #12]
 8013662:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8013664:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013666:	68fb      	ldr	r3, [r7, #12]
 8013668:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801366a:	79fb      	ldrb	r3, [r7, #7]
 801366c:	f023 0301 	bic.w	r3, r3, #1
 8013670:	2b00      	cmp	r3, #0
 8013672:	bf14      	ite	ne
 8013674:	2301      	movne	r3, #1
 8013676:	2300      	moveq	r3, #0
 8013678:	b2db      	uxtb	r3, r3
 801367a:	461a      	mov	r2, r3
 801367c:	f107 0314 	add.w	r3, r7, #20
 8013680:	4611      	mov	r1, r2
 8013682:	4618      	mov	r0, r3
 8013684:	f7fe fa06 	bl	8011a94 <inc_lock>
 8013688:	4602      	mov	r2, r0
 801368a:	68fb      	ldr	r3, [r7, #12]
 801368c:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801368e:	68fb      	ldr	r3, [r7, #12]
 8013690:	691b      	ldr	r3, [r3, #16]
 8013692:	2b00      	cmp	r3, #0
 8013694:	d102      	bne.n	801369c <f_open+0x22c>
 8013696:	2302      	movs	r3, #2
 8013698:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 801369c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80136a0:	2b00      	cmp	r3, #0
 80136a2:	f040 80a3 	bne.w	80137ec <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80136a6:	693b      	ldr	r3, [r7, #16]
 80136a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80136aa:	4611      	mov	r1, r2
 80136ac:	4618      	mov	r0, r3
 80136ae:	f7ff f8a2 	bl	80127f6 <ld_clust>
 80136b2:	4602      	mov	r2, r0
 80136b4:	68fb      	ldr	r3, [r7, #12]
 80136b6:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80136b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80136ba:	331c      	adds	r3, #28
 80136bc:	4618      	mov	r0, r3
 80136be:	f7fe f883 	bl	80117c8 <ld_dword>
 80136c2:	4602      	mov	r2, r0
 80136c4:	68fb      	ldr	r3, [r7, #12]
 80136c6:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80136c8:	68fb      	ldr	r3, [r7, #12]
 80136ca:	2200      	movs	r2, #0
 80136cc:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80136ce:	693a      	ldr	r2, [r7, #16]
 80136d0:	68fb      	ldr	r3, [r7, #12]
 80136d2:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80136d4:	693b      	ldr	r3, [r7, #16]
 80136d6:	88da      	ldrh	r2, [r3, #6]
 80136d8:	68fb      	ldr	r3, [r7, #12]
 80136da:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80136dc:	68fb      	ldr	r3, [r7, #12]
 80136de:	79fa      	ldrb	r2, [r7, #7]
 80136e0:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80136e2:	68fb      	ldr	r3, [r7, #12]
 80136e4:	2200      	movs	r2, #0
 80136e6:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80136e8:	68fb      	ldr	r3, [r7, #12]
 80136ea:	2200      	movs	r2, #0
 80136ec:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80136ee:	68fb      	ldr	r3, [r7, #12]
 80136f0:	2200      	movs	r2, #0
 80136f2:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80136f4:	68fb      	ldr	r3, [r7, #12]
 80136f6:	3330      	adds	r3, #48	; 0x30
 80136f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80136fc:	2100      	movs	r1, #0
 80136fe:	4618      	mov	r0, r3
 8013700:	f7fe f8ed 	bl	80118de <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8013704:	79fb      	ldrb	r3, [r7, #7]
 8013706:	f003 0320 	and.w	r3, r3, #32
 801370a:	2b00      	cmp	r3, #0
 801370c:	d06e      	beq.n	80137ec <f_open+0x37c>
 801370e:	68fb      	ldr	r3, [r7, #12]
 8013710:	68db      	ldr	r3, [r3, #12]
 8013712:	2b00      	cmp	r3, #0
 8013714:	d06a      	beq.n	80137ec <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8013716:	68fb      	ldr	r3, [r7, #12]
 8013718:	68da      	ldr	r2, [r3, #12]
 801371a:	68fb      	ldr	r3, [r7, #12]
 801371c:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801371e:	693b      	ldr	r3, [r7, #16]
 8013720:	895b      	ldrh	r3, [r3, #10]
 8013722:	461a      	mov	r2, r3
 8013724:	693b      	ldr	r3, [r7, #16]
 8013726:	899b      	ldrh	r3, [r3, #12]
 8013728:	fb03 f302 	mul.w	r3, r3, r2
 801372c:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801372e:	68fb      	ldr	r3, [r7, #12]
 8013730:	689b      	ldr	r3, [r3, #8]
 8013732:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8013734:	68fb      	ldr	r3, [r7, #12]
 8013736:	68db      	ldr	r3, [r3, #12]
 8013738:	657b      	str	r3, [r7, #84]	; 0x54
 801373a:	e016      	b.n	801376a <f_open+0x2fa>
					clst = get_fat(&fp->obj, clst);
 801373c:	68fb      	ldr	r3, [r7, #12]
 801373e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013740:	4618      	mov	r0, r3
 8013742:	f7fe fb96 	bl	8011e72 <get_fat>
 8013746:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8013748:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801374a:	2b01      	cmp	r3, #1
 801374c:	d802      	bhi.n	8013754 <f_open+0x2e4>
 801374e:	2302      	movs	r3, #2
 8013750:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8013754:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013756:	f1b3 3fff 	cmp.w	r3, #4294967295
 801375a:	d102      	bne.n	8013762 <f_open+0x2f2>
 801375c:	2301      	movs	r3, #1
 801375e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8013762:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013764:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013766:	1ad3      	subs	r3, r2, r3
 8013768:	657b      	str	r3, [r7, #84]	; 0x54
 801376a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801376e:	2b00      	cmp	r3, #0
 8013770:	d103      	bne.n	801377a <f_open+0x30a>
 8013772:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013774:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013776:	429a      	cmp	r2, r3
 8013778:	d8e0      	bhi.n	801373c <f_open+0x2cc>
				}
				fp->clust = clst;
 801377a:	68fb      	ldr	r3, [r7, #12]
 801377c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801377e:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8013780:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013784:	2b00      	cmp	r3, #0
 8013786:	d131      	bne.n	80137ec <f_open+0x37c>
 8013788:	693b      	ldr	r3, [r7, #16]
 801378a:	899b      	ldrh	r3, [r3, #12]
 801378c:	461a      	mov	r2, r3
 801378e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013790:	fbb3 f1f2 	udiv	r1, r3, r2
 8013794:	fb02 f201 	mul.w	r2, r2, r1
 8013798:	1a9b      	subs	r3, r3, r2
 801379a:	2b00      	cmp	r3, #0
 801379c:	d026      	beq.n	80137ec <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801379e:	693b      	ldr	r3, [r7, #16]
 80137a0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80137a2:	4618      	mov	r0, r3
 80137a4:	f7fe fb46 	bl	8011e34 <clust2sect>
 80137a8:	6478      	str	r0, [r7, #68]	; 0x44
 80137aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80137ac:	2b00      	cmp	r3, #0
 80137ae:	d103      	bne.n	80137b8 <f_open+0x348>
						res = FR_INT_ERR;
 80137b0:	2302      	movs	r3, #2
 80137b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80137b6:	e019      	b.n	80137ec <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80137b8:	693b      	ldr	r3, [r7, #16]
 80137ba:	899b      	ldrh	r3, [r3, #12]
 80137bc:	461a      	mov	r2, r3
 80137be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80137c0:	fbb3 f2f2 	udiv	r2, r3, r2
 80137c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80137c6:	441a      	add	r2, r3
 80137c8:	68fb      	ldr	r3, [r7, #12]
 80137ca:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80137cc:	693b      	ldr	r3, [r7, #16]
 80137ce:	7858      	ldrb	r0, [r3, #1]
 80137d0:	68fb      	ldr	r3, [r7, #12]
 80137d2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80137d6:	68fb      	ldr	r3, [r7, #12]
 80137d8:	6a1a      	ldr	r2, [r3, #32]
 80137da:	2301      	movs	r3, #1
 80137dc:	f7fd ff7e 	bl	80116dc <disk_read>
 80137e0:	4603      	mov	r3, r0
 80137e2:	2b00      	cmp	r3, #0
 80137e4:	d002      	beq.n	80137ec <f_open+0x37c>
 80137e6:	2301      	movs	r3, #1
 80137e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80137ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80137f0:	2b00      	cmp	r3, #0
 80137f2:	d002      	beq.n	80137fa <f_open+0x38a>
 80137f4:	68fb      	ldr	r3, [r7, #12]
 80137f6:	2200      	movs	r2, #0
 80137f8:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80137fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80137fe:	4618      	mov	r0, r3
 8013800:	3760      	adds	r7, #96	; 0x60
 8013802:	46bd      	mov	sp, r7
 8013804:	bd80      	pop	{r7, pc}
 8013806:	bf00      	nop
 8013808:	274a0000 	.word	0x274a0000

0801380c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 801380c:	b580      	push	{r7, lr}
 801380e:	b08e      	sub	sp, #56	; 0x38
 8013810:	af00      	add	r7, sp, #0
 8013812:	60f8      	str	r0, [r7, #12]
 8013814:	60b9      	str	r1, [r7, #8]
 8013816:	607a      	str	r2, [r7, #4]
 8013818:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 801381a:	68bb      	ldr	r3, [r7, #8]
 801381c:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 801381e:	683b      	ldr	r3, [r7, #0]
 8013820:	2200      	movs	r2, #0
 8013822:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8013824:	68fb      	ldr	r3, [r7, #12]
 8013826:	f107 0214 	add.w	r2, r7, #20
 801382a:	4611      	mov	r1, r2
 801382c:	4618      	mov	r0, r3
 801382e:	f7ff fda3 	bl	8013378 <validate>
 8013832:	4603      	mov	r3, r0
 8013834:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8013838:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801383c:	2b00      	cmp	r3, #0
 801383e:	d107      	bne.n	8013850 <f_read+0x44>
 8013840:	68fb      	ldr	r3, [r7, #12]
 8013842:	7d5b      	ldrb	r3, [r3, #21]
 8013844:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013848:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801384c:	2b00      	cmp	r3, #0
 801384e:	d002      	beq.n	8013856 <f_read+0x4a>
 8013850:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013854:	e135      	b.n	8013ac2 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8013856:	68fb      	ldr	r3, [r7, #12]
 8013858:	7d1b      	ldrb	r3, [r3, #20]
 801385a:	f003 0301 	and.w	r3, r3, #1
 801385e:	2b00      	cmp	r3, #0
 8013860:	d101      	bne.n	8013866 <f_read+0x5a>
 8013862:	2307      	movs	r3, #7
 8013864:	e12d      	b.n	8013ac2 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8013866:	68fb      	ldr	r3, [r7, #12]
 8013868:	68da      	ldr	r2, [r3, #12]
 801386a:	68fb      	ldr	r3, [r7, #12]
 801386c:	699b      	ldr	r3, [r3, #24]
 801386e:	1ad3      	subs	r3, r2, r3
 8013870:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8013872:	687a      	ldr	r2, [r7, #4]
 8013874:	6a3b      	ldr	r3, [r7, #32]
 8013876:	429a      	cmp	r2, r3
 8013878:	f240 811e 	bls.w	8013ab8 <f_read+0x2ac>
 801387c:	6a3b      	ldr	r3, [r7, #32]
 801387e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8013880:	e11a      	b.n	8013ab8 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8013882:	68fb      	ldr	r3, [r7, #12]
 8013884:	699b      	ldr	r3, [r3, #24]
 8013886:	697a      	ldr	r2, [r7, #20]
 8013888:	8992      	ldrh	r2, [r2, #12]
 801388a:	fbb3 f1f2 	udiv	r1, r3, r2
 801388e:	fb02 f201 	mul.w	r2, r2, r1
 8013892:	1a9b      	subs	r3, r3, r2
 8013894:	2b00      	cmp	r3, #0
 8013896:	f040 80d5 	bne.w	8013a44 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 801389a:	68fb      	ldr	r3, [r7, #12]
 801389c:	699b      	ldr	r3, [r3, #24]
 801389e:	697a      	ldr	r2, [r7, #20]
 80138a0:	8992      	ldrh	r2, [r2, #12]
 80138a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80138a6:	697a      	ldr	r2, [r7, #20]
 80138a8:	8952      	ldrh	r2, [r2, #10]
 80138aa:	3a01      	subs	r2, #1
 80138ac:	4013      	ands	r3, r2
 80138ae:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80138b0:	69fb      	ldr	r3, [r7, #28]
 80138b2:	2b00      	cmp	r3, #0
 80138b4:	d12f      	bne.n	8013916 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80138b6:	68fb      	ldr	r3, [r7, #12]
 80138b8:	699b      	ldr	r3, [r3, #24]
 80138ba:	2b00      	cmp	r3, #0
 80138bc:	d103      	bne.n	80138c6 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80138be:	68fb      	ldr	r3, [r7, #12]
 80138c0:	689b      	ldr	r3, [r3, #8]
 80138c2:	633b      	str	r3, [r7, #48]	; 0x30
 80138c4:	e013      	b.n	80138ee <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80138c6:	68fb      	ldr	r3, [r7, #12]
 80138c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80138ca:	2b00      	cmp	r3, #0
 80138cc:	d007      	beq.n	80138de <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80138ce:	68fb      	ldr	r3, [r7, #12]
 80138d0:	699b      	ldr	r3, [r3, #24]
 80138d2:	4619      	mov	r1, r3
 80138d4:	68f8      	ldr	r0, [r7, #12]
 80138d6:	f7fe fdb0 	bl	801243a <clmt_clust>
 80138da:	6338      	str	r0, [r7, #48]	; 0x30
 80138dc:	e007      	b.n	80138ee <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80138de:	68fa      	ldr	r2, [r7, #12]
 80138e0:	68fb      	ldr	r3, [r7, #12]
 80138e2:	69db      	ldr	r3, [r3, #28]
 80138e4:	4619      	mov	r1, r3
 80138e6:	4610      	mov	r0, r2
 80138e8:	f7fe fac3 	bl	8011e72 <get_fat>
 80138ec:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80138ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138f0:	2b01      	cmp	r3, #1
 80138f2:	d804      	bhi.n	80138fe <f_read+0xf2>
 80138f4:	68fb      	ldr	r3, [r7, #12]
 80138f6:	2202      	movs	r2, #2
 80138f8:	755a      	strb	r2, [r3, #21]
 80138fa:	2302      	movs	r3, #2
 80138fc:	e0e1      	b.n	8013ac2 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80138fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013904:	d104      	bne.n	8013910 <f_read+0x104>
 8013906:	68fb      	ldr	r3, [r7, #12]
 8013908:	2201      	movs	r2, #1
 801390a:	755a      	strb	r2, [r3, #21]
 801390c:	2301      	movs	r3, #1
 801390e:	e0d8      	b.n	8013ac2 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8013910:	68fb      	ldr	r3, [r7, #12]
 8013912:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013914:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8013916:	697a      	ldr	r2, [r7, #20]
 8013918:	68fb      	ldr	r3, [r7, #12]
 801391a:	69db      	ldr	r3, [r3, #28]
 801391c:	4619      	mov	r1, r3
 801391e:	4610      	mov	r0, r2
 8013920:	f7fe fa88 	bl	8011e34 <clust2sect>
 8013924:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8013926:	69bb      	ldr	r3, [r7, #24]
 8013928:	2b00      	cmp	r3, #0
 801392a:	d104      	bne.n	8013936 <f_read+0x12a>
 801392c:	68fb      	ldr	r3, [r7, #12]
 801392e:	2202      	movs	r2, #2
 8013930:	755a      	strb	r2, [r3, #21]
 8013932:	2302      	movs	r3, #2
 8013934:	e0c5      	b.n	8013ac2 <f_read+0x2b6>
			sect += csect;
 8013936:	69ba      	ldr	r2, [r7, #24]
 8013938:	69fb      	ldr	r3, [r7, #28]
 801393a:	4413      	add	r3, r2
 801393c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 801393e:	697b      	ldr	r3, [r7, #20]
 8013940:	899b      	ldrh	r3, [r3, #12]
 8013942:	461a      	mov	r2, r3
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	fbb3 f3f2 	udiv	r3, r3, r2
 801394a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 801394c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801394e:	2b00      	cmp	r3, #0
 8013950:	d041      	beq.n	80139d6 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8013952:	69fa      	ldr	r2, [r7, #28]
 8013954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013956:	4413      	add	r3, r2
 8013958:	697a      	ldr	r2, [r7, #20]
 801395a:	8952      	ldrh	r2, [r2, #10]
 801395c:	4293      	cmp	r3, r2
 801395e:	d905      	bls.n	801396c <f_read+0x160>
					cc = fs->csize - csect;
 8013960:	697b      	ldr	r3, [r7, #20]
 8013962:	895b      	ldrh	r3, [r3, #10]
 8013964:	461a      	mov	r2, r3
 8013966:	69fb      	ldr	r3, [r7, #28]
 8013968:	1ad3      	subs	r3, r2, r3
 801396a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801396c:	697b      	ldr	r3, [r7, #20]
 801396e:	7858      	ldrb	r0, [r3, #1]
 8013970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013972:	69ba      	ldr	r2, [r7, #24]
 8013974:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013976:	f7fd feb1 	bl	80116dc <disk_read>
 801397a:	4603      	mov	r3, r0
 801397c:	2b00      	cmp	r3, #0
 801397e:	d004      	beq.n	801398a <f_read+0x17e>
 8013980:	68fb      	ldr	r3, [r7, #12]
 8013982:	2201      	movs	r2, #1
 8013984:	755a      	strb	r2, [r3, #21]
 8013986:	2301      	movs	r3, #1
 8013988:	e09b      	b.n	8013ac2 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 801398a:	68fb      	ldr	r3, [r7, #12]
 801398c:	7d1b      	ldrb	r3, [r3, #20]
 801398e:	b25b      	sxtb	r3, r3
 8013990:	2b00      	cmp	r3, #0
 8013992:	da18      	bge.n	80139c6 <f_read+0x1ba>
 8013994:	68fb      	ldr	r3, [r7, #12]
 8013996:	6a1a      	ldr	r2, [r3, #32]
 8013998:	69bb      	ldr	r3, [r7, #24]
 801399a:	1ad3      	subs	r3, r2, r3
 801399c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801399e:	429a      	cmp	r2, r3
 80139a0:	d911      	bls.n	80139c6 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80139a2:	68fb      	ldr	r3, [r7, #12]
 80139a4:	6a1a      	ldr	r2, [r3, #32]
 80139a6:	69bb      	ldr	r3, [r7, #24]
 80139a8:	1ad3      	subs	r3, r2, r3
 80139aa:	697a      	ldr	r2, [r7, #20]
 80139ac:	8992      	ldrh	r2, [r2, #12]
 80139ae:	fb02 f303 	mul.w	r3, r2, r3
 80139b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80139b4:	18d0      	adds	r0, r2, r3
 80139b6:	68fb      	ldr	r3, [r7, #12]
 80139b8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80139bc:	697b      	ldr	r3, [r7, #20]
 80139be:	899b      	ldrh	r3, [r3, #12]
 80139c0:	461a      	mov	r2, r3
 80139c2:	f7fd ff6b 	bl	801189c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80139c6:	697b      	ldr	r3, [r7, #20]
 80139c8:	899b      	ldrh	r3, [r3, #12]
 80139ca:	461a      	mov	r2, r3
 80139cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139ce:	fb02 f303 	mul.w	r3, r2, r3
 80139d2:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80139d4:	e05c      	b.n	8013a90 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80139d6:	68fb      	ldr	r3, [r7, #12]
 80139d8:	6a1b      	ldr	r3, [r3, #32]
 80139da:	69ba      	ldr	r2, [r7, #24]
 80139dc:	429a      	cmp	r2, r3
 80139de:	d02e      	beq.n	8013a3e <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80139e0:	68fb      	ldr	r3, [r7, #12]
 80139e2:	7d1b      	ldrb	r3, [r3, #20]
 80139e4:	b25b      	sxtb	r3, r3
 80139e6:	2b00      	cmp	r3, #0
 80139e8:	da18      	bge.n	8013a1c <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80139ea:	697b      	ldr	r3, [r7, #20]
 80139ec:	7858      	ldrb	r0, [r3, #1]
 80139ee:	68fb      	ldr	r3, [r7, #12]
 80139f0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80139f4:	68fb      	ldr	r3, [r7, #12]
 80139f6:	6a1a      	ldr	r2, [r3, #32]
 80139f8:	2301      	movs	r3, #1
 80139fa:	f7fd fe8f 	bl	801171c <disk_write>
 80139fe:	4603      	mov	r3, r0
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	d004      	beq.n	8013a0e <f_read+0x202>
 8013a04:	68fb      	ldr	r3, [r7, #12]
 8013a06:	2201      	movs	r2, #1
 8013a08:	755a      	strb	r2, [r3, #21]
 8013a0a:	2301      	movs	r3, #1
 8013a0c:	e059      	b.n	8013ac2 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8013a0e:	68fb      	ldr	r3, [r7, #12]
 8013a10:	7d1b      	ldrb	r3, [r3, #20]
 8013a12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013a16:	b2da      	uxtb	r2, r3
 8013a18:	68fb      	ldr	r3, [r7, #12]
 8013a1a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8013a1c:	697b      	ldr	r3, [r7, #20]
 8013a1e:	7858      	ldrb	r0, [r3, #1]
 8013a20:	68fb      	ldr	r3, [r7, #12]
 8013a22:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013a26:	2301      	movs	r3, #1
 8013a28:	69ba      	ldr	r2, [r7, #24]
 8013a2a:	f7fd fe57 	bl	80116dc <disk_read>
 8013a2e:	4603      	mov	r3, r0
 8013a30:	2b00      	cmp	r3, #0
 8013a32:	d004      	beq.n	8013a3e <f_read+0x232>
 8013a34:	68fb      	ldr	r3, [r7, #12]
 8013a36:	2201      	movs	r2, #1
 8013a38:	755a      	strb	r2, [r3, #21]
 8013a3a:	2301      	movs	r3, #1
 8013a3c:	e041      	b.n	8013ac2 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8013a3e:	68fb      	ldr	r3, [r7, #12]
 8013a40:	69ba      	ldr	r2, [r7, #24]
 8013a42:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013a44:	697b      	ldr	r3, [r7, #20]
 8013a46:	899b      	ldrh	r3, [r3, #12]
 8013a48:	4618      	mov	r0, r3
 8013a4a:	68fb      	ldr	r3, [r7, #12]
 8013a4c:	699b      	ldr	r3, [r3, #24]
 8013a4e:	697a      	ldr	r2, [r7, #20]
 8013a50:	8992      	ldrh	r2, [r2, #12]
 8013a52:	fbb3 f1f2 	udiv	r1, r3, r2
 8013a56:	fb02 f201 	mul.w	r2, r2, r1
 8013a5a:	1a9b      	subs	r3, r3, r2
 8013a5c:	1ac3      	subs	r3, r0, r3
 8013a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8013a60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	429a      	cmp	r2, r3
 8013a66:	d901      	bls.n	8013a6c <f_read+0x260>
 8013a68:	687b      	ldr	r3, [r7, #4]
 8013a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8013a6c:	68fb      	ldr	r3, [r7, #12]
 8013a6e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013a72:	68fb      	ldr	r3, [r7, #12]
 8013a74:	699b      	ldr	r3, [r3, #24]
 8013a76:	697a      	ldr	r2, [r7, #20]
 8013a78:	8992      	ldrh	r2, [r2, #12]
 8013a7a:	fbb3 f0f2 	udiv	r0, r3, r2
 8013a7e:	fb02 f200 	mul.w	r2, r2, r0
 8013a82:	1a9b      	subs	r3, r3, r2
 8013a84:	440b      	add	r3, r1
 8013a86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013a88:	4619      	mov	r1, r3
 8013a8a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013a8c:	f7fd ff06 	bl	801189c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8013a90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a94:	4413      	add	r3, r2
 8013a96:	627b      	str	r3, [r7, #36]	; 0x24
 8013a98:	68fb      	ldr	r3, [r7, #12]
 8013a9a:	699a      	ldr	r2, [r3, #24]
 8013a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a9e:	441a      	add	r2, r3
 8013aa0:	68fb      	ldr	r3, [r7, #12]
 8013aa2:	619a      	str	r2, [r3, #24]
 8013aa4:	683b      	ldr	r3, [r7, #0]
 8013aa6:	681a      	ldr	r2, [r3, #0]
 8013aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013aaa:	441a      	add	r2, r3
 8013aac:	683b      	ldr	r3, [r7, #0]
 8013aae:	601a      	str	r2, [r3, #0]
 8013ab0:	687a      	ldr	r2, [r7, #4]
 8013ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ab4:	1ad3      	subs	r3, r2, r3
 8013ab6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8013ab8:	687b      	ldr	r3, [r7, #4]
 8013aba:	2b00      	cmp	r3, #0
 8013abc:	f47f aee1 	bne.w	8013882 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8013ac0:	2300      	movs	r3, #0
}
 8013ac2:	4618      	mov	r0, r3
 8013ac4:	3738      	adds	r7, #56	; 0x38
 8013ac6:	46bd      	mov	sp, r7
 8013ac8:	bd80      	pop	{r7, pc}

08013aca <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8013aca:	b580      	push	{r7, lr}
 8013acc:	b08c      	sub	sp, #48	; 0x30
 8013ace:	af00      	add	r7, sp, #0
 8013ad0:	60f8      	str	r0, [r7, #12]
 8013ad2:	60b9      	str	r1, [r7, #8]
 8013ad4:	607a      	str	r2, [r7, #4]
 8013ad6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8013ad8:	68bb      	ldr	r3, [r7, #8]
 8013ada:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8013adc:	683b      	ldr	r3, [r7, #0]
 8013ade:	2200      	movs	r2, #0
 8013ae0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8013ae2:	68fb      	ldr	r3, [r7, #12]
 8013ae4:	f107 0210 	add.w	r2, r7, #16
 8013ae8:	4611      	mov	r1, r2
 8013aea:	4618      	mov	r0, r3
 8013aec:	f7ff fc44 	bl	8013378 <validate>
 8013af0:	4603      	mov	r3, r0
 8013af2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8013af6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013afa:	2b00      	cmp	r3, #0
 8013afc:	d107      	bne.n	8013b0e <f_write+0x44>
 8013afe:	68fb      	ldr	r3, [r7, #12]
 8013b00:	7d5b      	ldrb	r3, [r3, #21]
 8013b02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8013b06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013b0a:	2b00      	cmp	r3, #0
 8013b0c:	d002      	beq.n	8013b14 <f_write+0x4a>
 8013b0e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013b12:	e16a      	b.n	8013dea <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8013b14:	68fb      	ldr	r3, [r7, #12]
 8013b16:	7d1b      	ldrb	r3, [r3, #20]
 8013b18:	f003 0302 	and.w	r3, r3, #2
 8013b1c:	2b00      	cmp	r3, #0
 8013b1e:	d101      	bne.n	8013b24 <f_write+0x5a>
 8013b20:	2307      	movs	r3, #7
 8013b22:	e162      	b.n	8013dea <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8013b24:	68fb      	ldr	r3, [r7, #12]
 8013b26:	699a      	ldr	r2, [r3, #24]
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	441a      	add	r2, r3
 8013b2c:	68fb      	ldr	r3, [r7, #12]
 8013b2e:	699b      	ldr	r3, [r3, #24]
 8013b30:	429a      	cmp	r2, r3
 8013b32:	f080 814c 	bcs.w	8013dce <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8013b36:	68fb      	ldr	r3, [r7, #12]
 8013b38:	699b      	ldr	r3, [r3, #24]
 8013b3a:	43db      	mvns	r3, r3
 8013b3c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8013b3e:	e146      	b.n	8013dce <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8013b40:	68fb      	ldr	r3, [r7, #12]
 8013b42:	699b      	ldr	r3, [r3, #24]
 8013b44:	693a      	ldr	r2, [r7, #16]
 8013b46:	8992      	ldrh	r2, [r2, #12]
 8013b48:	fbb3 f1f2 	udiv	r1, r3, r2
 8013b4c:	fb02 f201 	mul.w	r2, r2, r1
 8013b50:	1a9b      	subs	r3, r3, r2
 8013b52:	2b00      	cmp	r3, #0
 8013b54:	f040 80f1 	bne.w	8013d3a <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8013b58:	68fb      	ldr	r3, [r7, #12]
 8013b5a:	699b      	ldr	r3, [r3, #24]
 8013b5c:	693a      	ldr	r2, [r7, #16]
 8013b5e:	8992      	ldrh	r2, [r2, #12]
 8013b60:	fbb3 f3f2 	udiv	r3, r3, r2
 8013b64:	693a      	ldr	r2, [r7, #16]
 8013b66:	8952      	ldrh	r2, [r2, #10]
 8013b68:	3a01      	subs	r2, #1
 8013b6a:	4013      	ands	r3, r2
 8013b6c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8013b6e:	69bb      	ldr	r3, [r7, #24]
 8013b70:	2b00      	cmp	r3, #0
 8013b72:	d143      	bne.n	8013bfc <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8013b74:	68fb      	ldr	r3, [r7, #12]
 8013b76:	699b      	ldr	r3, [r3, #24]
 8013b78:	2b00      	cmp	r3, #0
 8013b7a:	d10c      	bne.n	8013b96 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8013b7c:	68fb      	ldr	r3, [r7, #12]
 8013b7e:	689b      	ldr	r3, [r3, #8]
 8013b80:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8013b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b84:	2b00      	cmp	r3, #0
 8013b86:	d11a      	bne.n	8013bbe <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8013b88:	68fb      	ldr	r3, [r7, #12]
 8013b8a:	2100      	movs	r1, #0
 8013b8c:	4618      	mov	r0, r3
 8013b8e:	f7fe fbbc 	bl	801230a <create_chain>
 8013b92:	62b8      	str	r0, [r7, #40]	; 0x28
 8013b94:	e013      	b.n	8013bbe <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8013b96:	68fb      	ldr	r3, [r7, #12]
 8013b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b9a:	2b00      	cmp	r3, #0
 8013b9c:	d007      	beq.n	8013bae <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8013b9e:	68fb      	ldr	r3, [r7, #12]
 8013ba0:	699b      	ldr	r3, [r3, #24]
 8013ba2:	4619      	mov	r1, r3
 8013ba4:	68f8      	ldr	r0, [r7, #12]
 8013ba6:	f7fe fc48 	bl	801243a <clmt_clust>
 8013baa:	62b8      	str	r0, [r7, #40]	; 0x28
 8013bac:	e007      	b.n	8013bbe <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8013bae:	68fa      	ldr	r2, [r7, #12]
 8013bb0:	68fb      	ldr	r3, [r7, #12]
 8013bb2:	69db      	ldr	r3, [r3, #28]
 8013bb4:	4619      	mov	r1, r3
 8013bb6:	4610      	mov	r0, r2
 8013bb8:	f7fe fba7 	bl	801230a <create_chain>
 8013bbc:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bc0:	2b00      	cmp	r3, #0
 8013bc2:	f000 8109 	beq.w	8013dd8 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8013bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bc8:	2b01      	cmp	r3, #1
 8013bca:	d104      	bne.n	8013bd6 <f_write+0x10c>
 8013bcc:	68fb      	ldr	r3, [r7, #12]
 8013bce:	2202      	movs	r2, #2
 8013bd0:	755a      	strb	r2, [r3, #21]
 8013bd2:	2302      	movs	r3, #2
 8013bd4:	e109      	b.n	8013dea <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013bdc:	d104      	bne.n	8013be8 <f_write+0x11e>
 8013bde:	68fb      	ldr	r3, [r7, #12]
 8013be0:	2201      	movs	r2, #1
 8013be2:	755a      	strb	r2, [r3, #21]
 8013be4:	2301      	movs	r3, #1
 8013be6:	e100      	b.n	8013dea <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8013be8:	68fb      	ldr	r3, [r7, #12]
 8013bea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013bec:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8013bee:	68fb      	ldr	r3, [r7, #12]
 8013bf0:	689b      	ldr	r3, [r3, #8]
 8013bf2:	2b00      	cmp	r3, #0
 8013bf4:	d102      	bne.n	8013bfc <f_write+0x132>
 8013bf6:	68fb      	ldr	r3, [r7, #12]
 8013bf8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013bfa:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8013bfc:	68fb      	ldr	r3, [r7, #12]
 8013bfe:	7d1b      	ldrb	r3, [r3, #20]
 8013c00:	b25b      	sxtb	r3, r3
 8013c02:	2b00      	cmp	r3, #0
 8013c04:	da18      	bge.n	8013c38 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013c06:	693b      	ldr	r3, [r7, #16]
 8013c08:	7858      	ldrb	r0, [r3, #1]
 8013c0a:	68fb      	ldr	r3, [r7, #12]
 8013c0c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013c10:	68fb      	ldr	r3, [r7, #12]
 8013c12:	6a1a      	ldr	r2, [r3, #32]
 8013c14:	2301      	movs	r3, #1
 8013c16:	f7fd fd81 	bl	801171c <disk_write>
 8013c1a:	4603      	mov	r3, r0
 8013c1c:	2b00      	cmp	r3, #0
 8013c1e:	d004      	beq.n	8013c2a <f_write+0x160>
 8013c20:	68fb      	ldr	r3, [r7, #12]
 8013c22:	2201      	movs	r2, #1
 8013c24:	755a      	strb	r2, [r3, #21]
 8013c26:	2301      	movs	r3, #1
 8013c28:	e0df      	b.n	8013dea <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013c2a:	68fb      	ldr	r3, [r7, #12]
 8013c2c:	7d1b      	ldrb	r3, [r3, #20]
 8013c2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013c32:	b2da      	uxtb	r2, r3
 8013c34:	68fb      	ldr	r3, [r7, #12]
 8013c36:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8013c38:	693a      	ldr	r2, [r7, #16]
 8013c3a:	68fb      	ldr	r3, [r7, #12]
 8013c3c:	69db      	ldr	r3, [r3, #28]
 8013c3e:	4619      	mov	r1, r3
 8013c40:	4610      	mov	r0, r2
 8013c42:	f7fe f8f7 	bl	8011e34 <clust2sect>
 8013c46:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8013c48:	697b      	ldr	r3, [r7, #20]
 8013c4a:	2b00      	cmp	r3, #0
 8013c4c:	d104      	bne.n	8013c58 <f_write+0x18e>
 8013c4e:	68fb      	ldr	r3, [r7, #12]
 8013c50:	2202      	movs	r2, #2
 8013c52:	755a      	strb	r2, [r3, #21]
 8013c54:	2302      	movs	r3, #2
 8013c56:	e0c8      	b.n	8013dea <f_write+0x320>
			sect += csect;
 8013c58:	697a      	ldr	r2, [r7, #20]
 8013c5a:	69bb      	ldr	r3, [r7, #24]
 8013c5c:	4413      	add	r3, r2
 8013c5e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8013c60:	693b      	ldr	r3, [r7, #16]
 8013c62:	899b      	ldrh	r3, [r3, #12]
 8013c64:	461a      	mov	r2, r3
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	fbb3 f3f2 	udiv	r3, r3, r2
 8013c6c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8013c6e:	6a3b      	ldr	r3, [r7, #32]
 8013c70:	2b00      	cmp	r3, #0
 8013c72:	d043      	beq.n	8013cfc <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8013c74:	69ba      	ldr	r2, [r7, #24]
 8013c76:	6a3b      	ldr	r3, [r7, #32]
 8013c78:	4413      	add	r3, r2
 8013c7a:	693a      	ldr	r2, [r7, #16]
 8013c7c:	8952      	ldrh	r2, [r2, #10]
 8013c7e:	4293      	cmp	r3, r2
 8013c80:	d905      	bls.n	8013c8e <f_write+0x1c4>
					cc = fs->csize - csect;
 8013c82:	693b      	ldr	r3, [r7, #16]
 8013c84:	895b      	ldrh	r3, [r3, #10]
 8013c86:	461a      	mov	r2, r3
 8013c88:	69bb      	ldr	r3, [r7, #24]
 8013c8a:	1ad3      	subs	r3, r2, r3
 8013c8c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013c8e:	693b      	ldr	r3, [r7, #16]
 8013c90:	7858      	ldrb	r0, [r3, #1]
 8013c92:	6a3b      	ldr	r3, [r7, #32]
 8013c94:	697a      	ldr	r2, [r7, #20]
 8013c96:	69f9      	ldr	r1, [r7, #28]
 8013c98:	f7fd fd40 	bl	801171c <disk_write>
 8013c9c:	4603      	mov	r3, r0
 8013c9e:	2b00      	cmp	r3, #0
 8013ca0:	d004      	beq.n	8013cac <f_write+0x1e2>
 8013ca2:	68fb      	ldr	r3, [r7, #12]
 8013ca4:	2201      	movs	r2, #1
 8013ca6:	755a      	strb	r2, [r3, #21]
 8013ca8:	2301      	movs	r3, #1
 8013caa:	e09e      	b.n	8013dea <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8013cac:	68fb      	ldr	r3, [r7, #12]
 8013cae:	6a1a      	ldr	r2, [r3, #32]
 8013cb0:	697b      	ldr	r3, [r7, #20]
 8013cb2:	1ad3      	subs	r3, r2, r3
 8013cb4:	6a3a      	ldr	r2, [r7, #32]
 8013cb6:	429a      	cmp	r2, r3
 8013cb8:	d918      	bls.n	8013cec <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8013cba:	68fb      	ldr	r3, [r7, #12]
 8013cbc:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8013cc0:	68fb      	ldr	r3, [r7, #12]
 8013cc2:	6a1a      	ldr	r2, [r3, #32]
 8013cc4:	697b      	ldr	r3, [r7, #20]
 8013cc6:	1ad3      	subs	r3, r2, r3
 8013cc8:	693a      	ldr	r2, [r7, #16]
 8013cca:	8992      	ldrh	r2, [r2, #12]
 8013ccc:	fb02 f303 	mul.w	r3, r2, r3
 8013cd0:	69fa      	ldr	r2, [r7, #28]
 8013cd2:	18d1      	adds	r1, r2, r3
 8013cd4:	693b      	ldr	r3, [r7, #16]
 8013cd6:	899b      	ldrh	r3, [r3, #12]
 8013cd8:	461a      	mov	r2, r3
 8013cda:	f7fd fddf 	bl	801189c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8013cde:	68fb      	ldr	r3, [r7, #12]
 8013ce0:	7d1b      	ldrb	r3, [r3, #20]
 8013ce2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013ce6:	b2da      	uxtb	r2, r3
 8013ce8:	68fb      	ldr	r3, [r7, #12]
 8013cea:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8013cec:	693b      	ldr	r3, [r7, #16]
 8013cee:	899b      	ldrh	r3, [r3, #12]
 8013cf0:	461a      	mov	r2, r3
 8013cf2:	6a3b      	ldr	r3, [r7, #32]
 8013cf4:	fb02 f303 	mul.w	r3, r2, r3
 8013cf8:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8013cfa:	e04b      	b.n	8013d94 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013cfc:	68fb      	ldr	r3, [r7, #12]
 8013cfe:	6a1b      	ldr	r3, [r3, #32]
 8013d00:	697a      	ldr	r2, [r7, #20]
 8013d02:	429a      	cmp	r2, r3
 8013d04:	d016      	beq.n	8013d34 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8013d06:	68fb      	ldr	r3, [r7, #12]
 8013d08:	699a      	ldr	r2, [r3, #24]
 8013d0a:	68fb      	ldr	r3, [r7, #12]
 8013d0c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013d0e:	429a      	cmp	r2, r3
 8013d10:	d210      	bcs.n	8013d34 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8013d12:	693b      	ldr	r3, [r7, #16]
 8013d14:	7858      	ldrb	r0, [r3, #1]
 8013d16:	68fb      	ldr	r3, [r7, #12]
 8013d18:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013d1c:	2301      	movs	r3, #1
 8013d1e:	697a      	ldr	r2, [r7, #20]
 8013d20:	f7fd fcdc 	bl	80116dc <disk_read>
 8013d24:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8013d26:	2b00      	cmp	r3, #0
 8013d28:	d004      	beq.n	8013d34 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8013d2a:	68fb      	ldr	r3, [r7, #12]
 8013d2c:	2201      	movs	r2, #1
 8013d2e:	755a      	strb	r2, [r3, #21]
 8013d30:	2301      	movs	r3, #1
 8013d32:	e05a      	b.n	8013dea <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8013d34:	68fb      	ldr	r3, [r7, #12]
 8013d36:	697a      	ldr	r2, [r7, #20]
 8013d38:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013d3a:	693b      	ldr	r3, [r7, #16]
 8013d3c:	899b      	ldrh	r3, [r3, #12]
 8013d3e:	4618      	mov	r0, r3
 8013d40:	68fb      	ldr	r3, [r7, #12]
 8013d42:	699b      	ldr	r3, [r3, #24]
 8013d44:	693a      	ldr	r2, [r7, #16]
 8013d46:	8992      	ldrh	r2, [r2, #12]
 8013d48:	fbb3 f1f2 	udiv	r1, r3, r2
 8013d4c:	fb02 f201 	mul.w	r2, r2, r1
 8013d50:	1a9b      	subs	r3, r3, r2
 8013d52:	1ac3      	subs	r3, r0, r3
 8013d54:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8013d56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	429a      	cmp	r2, r3
 8013d5c:	d901      	bls.n	8013d62 <f_write+0x298>
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8013d62:	68fb      	ldr	r3, [r7, #12]
 8013d64:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013d68:	68fb      	ldr	r3, [r7, #12]
 8013d6a:	699b      	ldr	r3, [r3, #24]
 8013d6c:	693a      	ldr	r2, [r7, #16]
 8013d6e:	8992      	ldrh	r2, [r2, #12]
 8013d70:	fbb3 f0f2 	udiv	r0, r3, r2
 8013d74:	fb02 f200 	mul.w	r2, r2, r0
 8013d78:	1a9b      	subs	r3, r3, r2
 8013d7a:	440b      	add	r3, r1
 8013d7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013d7e:	69f9      	ldr	r1, [r7, #28]
 8013d80:	4618      	mov	r0, r3
 8013d82:	f7fd fd8b 	bl	801189c <mem_cpy>
		fp->flag |= FA_DIRTY;
 8013d86:	68fb      	ldr	r3, [r7, #12]
 8013d88:	7d1b      	ldrb	r3, [r3, #20]
 8013d8a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8013d8e:	b2da      	uxtb	r2, r3
 8013d90:	68fb      	ldr	r3, [r7, #12]
 8013d92:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8013d94:	69fa      	ldr	r2, [r7, #28]
 8013d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d98:	4413      	add	r3, r2
 8013d9a:	61fb      	str	r3, [r7, #28]
 8013d9c:	68fb      	ldr	r3, [r7, #12]
 8013d9e:	699a      	ldr	r2, [r3, #24]
 8013da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013da2:	441a      	add	r2, r3
 8013da4:	68fb      	ldr	r3, [r7, #12]
 8013da6:	619a      	str	r2, [r3, #24]
 8013da8:	68fb      	ldr	r3, [r7, #12]
 8013daa:	68da      	ldr	r2, [r3, #12]
 8013dac:	68fb      	ldr	r3, [r7, #12]
 8013dae:	699b      	ldr	r3, [r3, #24]
 8013db0:	429a      	cmp	r2, r3
 8013db2:	bf38      	it	cc
 8013db4:	461a      	movcc	r2, r3
 8013db6:	68fb      	ldr	r3, [r7, #12]
 8013db8:	60da      	str	r2, [r3, #12]
 8013dba:	683b      	ldr	r3, [r7, #0]
 8013dbc:	681a      	ldr	r2, [r3, #0]
 8013dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dc0:	441a      	add	r2, r3
 8013dc2:	683b      	ldr	r3, [r7, #0]
 8013dc4:	601a      	str	r2, [r3, #0]
 8013dc6:	687a      	ldr	r2, [r7, #4]
 8013dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dca:	1ad3      	subs	r3, r2, r3
 8013dcc:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	2b00      	cmp	r3, #0
 8013dd2:	f47f aeb5 	bne.w	8013b40 <f_write+0x76>
 8013dd6:	e000      	b.n	8013dda <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013dd8:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8013dda:	68fb      	ldr	r3, [r7, #12]
 8013ddc:	7d1b      	ldrb	r3, [r3, #20]
 8013dde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013de2:	b2da      	uxtb	r2, r3
 8013de4:	68fb      	ldr	r3, [r7, #12]
 8013de6:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8013de8:	2300      	movs	r3, #0
}
 8013dea:	4618      	mov	r0, r3
 8013dec:	3730      	adds	r7, #48	; 0x30
 8013dee:	46bd      	mov	sp, r7
 8013df0:	bd80      	pop	{r7, pc}
	...

08013df4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8013df4:	b580      	push	{r7, lr}
 8013df6:	b086      	sub	sp, #24
 8013df8:	af00      	add	r7, sp, #0
 8013dfa:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	f107 0208 	add.w	r2, r7, #8
 8013e02:	4611      	mov	r1, r2
 8013e04:	4618      	mov	r0, r3
 8013e06:	f7ff fab7 	bl	8013378 <validate>
 8013e0a:	4603      	mov	r3, r0
 8013e0c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013e0e:	7dfb      	ldrb	r3, [r7, #23]
 8013e10:	2b00      	cmp	r3, #0
 8013e12:	d167      	bne.n	8013ee4 <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	7d1b      	ldrb	r3, [r3, #20]
 8013e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013e1c:	2b00      	cmp	r3, #0
 8013e1e:	d061      	beq.n	8013ee4 <f_sync+0xf0>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8013e20:	687b      	ldr	r3, [r7, #4]
 8013e22:	7d1b      	ldrb	r3, [r3, #20]
 8013e24:	b25b      	sxtb	r3, r3
 8013e26:	2b00      	cmp	r3, #0
 8013e28:	da15      	bge.n	8013e56 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8013e2a:	68bb      	ldr	r3, [r7, #8]
 8013e2c:	7858      	ldrb	r0, [r3, #1]
 8013e2e:	687b      	ldr	r3, [r7, #4]
 8013e30:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013e34:	687b      	ldr	r3, [r7, #4]
 8013e36:	6a1a      	ldr	r2, [r3, #32]
 8013e38:	2301      	movs	r3, #1
 8013e3a:	f7fd fc6f 	bl	801171c <disk_write>
 8013e3e:	4603      	mov	r3, r0
 8013e40:	2b00      	cmp	r3, #0
 8013e42:	d001      	beq.n	8013e48 <f_sync+0x54>
 8013e44:	2301      	movs	r3, #1
 8013e46:	e04e      	b.n	8013ee6 <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	7d1b      	ldrb	r3, [r3, #20]
 8013e4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013e50:	b2da      	uxtb	r2, r3
 8013e52:	687b      	ldr	r3, [r7, #4]
 8013e54:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8013e56:	4b26      	ldr	r3, [pc, #152]	; (8013ef0 <f_sync+0xfc>)
 8013e58:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8013e5a:	68ba      	ldr	r2, [r7, #8]
 8013e5c:	687b      	ldr	r3, [r7, #4]
 8013e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e60:	4619      	mov	r1, r3
 8013e62:	4610      	mov	r0, r2
 8013e64:	f7fd ff48 	bl	8011cf8 <move_window>
 8013e68:	4603      	mov	r3, r0
 8013e6a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8013e6c:	7dfb      	ldrb	r3, [r7, #23]
 8013e6e:	2b00      	cmp	r3, #0
 8013e70:	d138      	bne.n	8013ee4 <f_sync+0xf0>
					dir = fp->dir_ptr;
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013e76:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8013e78:	68fb      	ldr	r3, [r7, #12]
 8013e7a:	330b      	adds	r3, #11
 8013e7c:	781a      	ldrb	r2, [r3, #0]
 8013e7e:	68fb      	ldr	r3, [r7, #12]
 8013e80:	330b      	adds	r3, #11
 8013e82:	f042 0220 	orr.w	r2, r2, #32
 8013e86:	b2d2      	uxtb	r2, r2
 8013e88:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	6818      	ldr	r0, [r3, #0]
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	689b      	ldr	r3, [r3, #8]
 8013e92:	461a      	mov	r2, r3
 8013e94:	68f9      	ldr	r1, [r7, #12]
 8013e96:	f7fe fccd 	bl	8012834 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8013e9a:	68fb      	ldr	r3, [r7, #12]
 8013e9c:	f103 021c 	add.w	r2, r3, #28
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	68db      	ldr	r3, [r3, #12]
 8013ea4:	4619      	mov	r1, r3
 8013ea6:	4610      	mov	r0, r2
 8013ea8:	f7fd fccc 	bl	8011844 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8013eac:	68fb      	ldr	r3, [r7, #12]
 8013eae:	3316      	adds	r3, #22
 8013eb0:	6939      	ldr	r1, [r7, #16]
 8013eb2:	4618      	mov	r0, r3
 8013eb4:	f7fd fcc6 	bl	8011844 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8013eb8:	68fb      	ldr	r3, [r7, #12]
 8013eba:	3312      	adds	r3, #18
 8013ebc:	2100      	movs	r1, #0
 8013ebe:	4618      	mov	r0, r3
 8013ec0:	f7fd fca5 	bl	801180e <st_word>
					fs->wflag = 1;
 8013ec4:	68bb      	ldr	r3, [r7, #8]
 8013ec6:	2201      	movs	r2, #1
 8013ec8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8013eca:	68bb      	ldr	r3, [r7, #8]
 8013ecc:	4618      	mov	r0, r3
 8013ece:	f7fd ff41 	bl	8011d54 <sync_fs>
 8013ed2:	4603      	mov	r3, r0
 8013ed4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	7d1b      	ldrb	r3, [r3, #20]
 8013eda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013ede:	b2da      	uxtb	r2, r3
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8013ee4:	7dfb      	ldrb	r3, [r7, #23]
}
 8013ee6:	4618      	mov	r0, r3
 8013ee8:	3718      	adds	r7, #24
 8013eea:	46bd      	mov	sp, r7
 8013eec:	bd80      	pop	{r7, pc}
 8013eee:	bf00      	nop
 8013ef0:	274a0000 	.word	0x274a0000

08013ef4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8013ef4:	b580      	push	{r7, lr}
 8013ef6:	b084      	sub	sp, #16
 8013ef8:	af00      	add	r7, sp, #0
 8013efa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8013efc:	6878      	ldr	r0, [r7, #4]
 8013efe:	f7ff ff79 	bl	8013df4 <f_sync>
 8013f02:	4603      	mov	r3, r0
 8013f04:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8013f06:	7bfb      	ldrb	r3, [r7, #15]
 8013f08:	2b00      	cmp	r3, #0
 8013f0a:	d118      	bne.n	8013f3e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	f107 0208 	add.w	r2, r7, #8
 8013f12:	4611      	mov	r1, r2
 8013f14:	4618      	mov	r0, r3
 8013f16:	f7ff fa2f 	bl	8013378 <validate>
 8013f1a:	4603      	mov	r3, r0
 8013f1c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8013f1e:	7bfb      	ldrb	r3, [r7, #15]
 8013f20:	2b00      	cmp	r3, #0
 8013f22:	d10c      	bne.n	8013f3e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	691b      	ldr	r3, [r3, #16]
 8013f28:	4618      	mov	r0, r3
 8013f2a:	f7fd fe41 	bl	8011bb0 <dec_lock>
 8013f2e:	4603      	mov	r3, r0
 8013f30:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8013f32:	7bfb      	ldrb	r3, [r7, #15]
 8013f34:	2b00      	cmp	r3, #0
 8013f36:	d102      	bne.n	8013f3e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	2200      	movs	r2, #0
 8013f3c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8013f3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013f40:	4618      	mov	r0, r3
 8013f42:	3710      	adds	r7, #16
 8013f44:	46bd      	mov	sp, r7
 8013f46:	bd80      	pop	{r7, pc}

08013f48 <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8013f48:	b590      	push	{r4, r7, lr}
 8013f4a:	b091      	sub	sp, #68	; 0x44
 8013f4c:	af00      	add	r7, sp, #0
 8013f4e:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8013f50:	f107 0108 	add.w	r1, r7, #8
 8013f54:	1d3b      	adds	r3, r7, #4
 8013f56:	2200      	movs	r2, #0
 8013f58:	4618      	mov	r0, r3
 8013f5a:	f7fe ff87 	bl	8012e6c <find_volume>
 8013f5e:	4603      	mov	r3, r0
 8013f60:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8013f64:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013f68:	2b00      	cmp	r3, #0
 8013f6a:	d131      	bne.n	8013fd0 <f_chdir+0x88>
		dj.obj.fs = fs;
 8013f6c:	68bb      	ldr	r3, [r7, #8]
 8013f6e:	60fb      	str	r3, [r7, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 8013f70:	687a      	ldr	r2, [r7, #4]
 8013f72:	f107 030c 	add.w	r3, r7, #12
 8013f76:	4611      	mov	r1, r2
 8013f78:	4618      	mov	r0, r3
 8013f7a:	f7fe fe47 	bl	8012c0c <follow_path>
 8013f7e:	4603      	mov	r3, r0
 8013f80:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {					/* Follow completed */
 8013f84:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013f88:	2b00      	cmp	r3, #0
 8013f8a:	d11a      	bne.n	8013fc2 <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8013f8c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8013f90:	b25b      	sxtb	r3, r3
 8013f92:	2b00      	cmp	r3, #0
 8013f94:	da03      	bge.n	8013f9e <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 8013f96:	68bb      	ldr	r3, [r7, #8]
 8013f98:	697a      	ldr	r2, [r7, #20]
 8013f9a:	619a      	str	r2, [r3, #24]
 8013f9c:	e011      	b.n	8013fc2 <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 8013f9e:	7cbb      	ldrb	r3, [r7, #18]
 8013fa0:	f003 0310 	and.w	r3, r3, #16
 8013fa4:	2b00      	cmp	r3, #0
 8013fa6:	d009      	beq.n	8013fbc <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 8013fa8:	68bb      	ldr	r3, [r7, #8]
 8013faa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013fac:	68bc      	ldr	r4, [r7, #8]
 8013fae:	4611      	mov	r1, r2
 8013fb0:	4618      	mov	r0, r3
 8013fb2:	f7fe fc20 	bl	80127f6 <ld_clust>
 8013fb6:	4603      	mov	r3, r0
 8013fb8:	61a3      	str	r3, [r4, #24]
 8013fba:	e002      	b.n	8013fc2 <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 8013fbc:	2305      	movs	r3, #5
 8013fbe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8013fc2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013fc6:	2b04      	cmp	r3, #4
 8013fc8:	d102      	bne.n	8013fd0 <f_chdir+0x88>
 8013fca:	2305      	movs	r3, #5
 8013fcc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	LEAVE_FF(fs, res);
 8013fd0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8013fd4:	4618      	mov	r0, r3
 8013fd6:	3744      	adds	r7, #68	; 0x44
 8013fd8:	46bd      	mov	sp, r7
 8013fda:	bd90      	pop	{r4, r7, pc}

08013fdc <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8013fdc:	b580      	push	{r7, lr}
 8013fde:	b090      	sub	sp, #64	; 0x40
 8013fe0:	af00      	add	r7, sp, #0
 8013fe2:	6078      	str	r0, [r7, #4]
 8013fe4:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8013fe6:	687b      	ldr	r3, [r7, #4]
 8013fe8:	f107 0208 	add.w	r2, r7, #8
 8013fec:	4611      	mov	r1, r2
 8013fee:	4618      	mov	r0, r3
 8013ff0:	f7ff f9c2 	bl	8013378 <validate>
 8013ff4:	4603      	mov	r3, r0
 8013ff6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8013ffa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013ffe:	2b00      	cmp	r3, #0
 8014000:	d103      	bne.n	801400a <f_lseek+0x2e>
 8014002:	687b      	ldr	r3, [r7, #4]
 8014004:	7d5b      	ldrb	r3, [r3, #21]
 8014006:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 801400a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801400e:	2b00      	cmp	r3, #0
 8014010:	d002      	beq.n	8014018 <f_lseek+0x3c>
 8014012:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8014016:	e201      	b.n	801441c <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801401c:	2b00      	cmp	r3, #0
 801401e:	f000 80d9 	beq.w	80141d4 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8014022:	683b      	ldr	r3, [r7, #0]
 8014024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014028:	d15a      	bne.n	80140e0 <f_lseek+0x104>
			tbl = fp->cltbl;
 801402a:	687b      	ldr	r3, [r7, #4]
 801402c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801402e:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8014030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014032:	1d1a      	adds	r2, r3, #4
 8014034:	627a      	str	r2, [r7, #36]	; 0x24
 8014036:	681b      	ldr	r3, [r3, #0]
 8014038:	617b      	str	r3, [r7, #20]
 801403a:	2302      	movs	r3, #2
 801403c:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 801403e:	687b      	ldr	r3, [r7, #4]
 8014040:	689b      	ldr	r3, [r3, #8]
 8014042:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8014044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014046:	2b00      	cmp	r3, #0
 8014048:	d03a      	beq.n	80140c0 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 801404a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801404c:	613b      	str	r3, [r7, #16]
 801404e:	2300      	movs	r3, #0
 8014050:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014054:	3302      	adds	r3, #2
 8014056:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8014058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801405a:	60fb      	str	r3, [r7, #12]
 801405c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801405e:	3301      	adds	r3, #1
 8014060:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8014062:	687b      	ldr	r3, [r7, #4]
 8014064:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014066:	4618      	mov	r0, r3
 8014068:	f7fd ff03 	bl	8011e72 <get_fat>
 801406c:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 801406e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014070:	2b01      	cmp	r3, #1
 8014072:	d804      	bhi.n	801407e <f_lseek+0xa2>
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	2202      	movs	r2, #2
 8014078:	755a      	strb	r2, [r3, #21]
 801407a:	2302      	movs	r3, #2
 801407c:	e1ce      	b.n	801441c <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801407e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014084:	d104      	bne.n	8014090 <f_lseek+0xb4>
 8014086:	687b      	ldr	r3, [r7, #4]
 8014088:	2201      	movs	r2, #1
 801408a:	755a      	strb	r2, [r3, #21]
 801408c:	2301      	movs	r3, #1
 801408e:	e1c5      	b.n	801441c <f_lseek+0x440>
					} while (cl == pcl + 1);
 8014090:	68fb      	ldr	r3, [r7, #12]
 8014092:	3301      	adds	r3, #1
 8014094:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014096:	429a      	cmp	r2, r3
 8014098:	d0de      	beq.n	8014058 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 801409a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801409c:	697b      	ldr	r3, [r7, #20]
 801409e:	429a      	cmp	r2, r3
 80140a0:	d809      	bhi.n	80140b6 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 80140a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140a4:	1d1a      	adds	r2, r3, #4
 80140a6:	627a      	str	r2, [r7, #36]	; 0x24
 80140a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80140aa:	601a      	str	r2, [r3, #0]
 80140ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140ae:	1d1a      	adds	r2, r3, #4
 80140b0:	627a      	str	r2, [r7, #36]	; 0x24
 80140b2:	693a      	ldr	r2, [r7, #16]
 80140b4:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80140b6:	68bb      	ldr	r3, [r7, #8]
 80140b8:	69db      	ldr	r3, [r3, #28]
 80140ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80140bc:	429a      	cmp	r2, r3
 80140be:	d3c4      	bcc.n	801404a <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80140c0:	687b      	ldr	r3, [r7, #4]
 80140c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80140c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80140c6:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 80140c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80140ca:	697b      	ldr	r3, [r7, #20]
 80140cc:	429a      	cmp	r2, r3
 80140ce:	d803      	bhi.n	80140d8 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 80140d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140d2:	2200      	movs	r2, #0
 80140d4:	601a      	str	r2, [r3, #0]
 80140d6:	e19f      	b.n	8014418 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80140d8:	2311      	movs	r3, #17
 80140da:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80140de:	e19b      	b.n	8014418 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 80140e0:	687b      	ldr	r3, [r7, #4]
 80140e2:	68db      	ldr	r3, [r3, #12]
 80140e4:	683a      	ldr	r2, [r7, #0]
 80140e6:	429a      	cmp	r2, r3
 80140e8:	d902      	bls.n	80140f0 <f_lseek+0x114>
 80140ea:	687b      	ldr	r3, [r7, #4]
 80140ec:	68db      	ldr	r3, [r3, #12]
 80140ee:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	683a      	ldr	r2, [r7, #0]
 80140f4:	619a      	str	r2, [r3, #24]
			if (ofs) {
 80140f6:	683b      	ldr	r3, [r7, #0]
 80140f8:	2b00      	cmp	r3, #0
 80140fa:	f000 818d 	beq.w	8014418 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 80140fe:	683b      	ldr	r3, [r7, #0]
 8014100:	3b01      	subs	r3, #1
 8014102:	4619      	mov	r1, r3
 8014104:	6878      	ldr	r0, [r7, #4]
 8014106:	f7fe f998 	bl	801243a <clmt_clust>
 801410a:	4602      	mov	r2, r0
 801410c:	687b      	ldr	r3, [r7, #4]
 801410e:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8014110:	68ba      	ldr	r2, [r7, #8]
 8014112:	687b      	ldr	r3, [r7, #4]
 8014114:	69db      	ldr	r3, [r3, #28]
 8014116:	4619      	mov	r1, r3
 8014118:	4610      	mov	r0, r2
 801411a:	f7fd fe8b 	bl	8011e34 <clust2sect>
 801411e:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8014120:	69bb      	ldr	r3, [r7, #24]
 8014122:	2b00      	cmp	r3, #0
 8014124:	d104      	bne.n	8014130 <f_lseek+0x154>
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	2202      	movs	r2, #2
 801412a:	755a      	strb	r2, [r3, #21]
 801412c:	2302      	movs	r3, #2
 801412e:	e175      	b.n	801441c <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8014130:	683b      	ldr	r3, [r7, #0]
 8014132:	3b01      	subs	r3, #1
 8014134:	68ba      	ldr	r2, [r7, #8]
 8014136:	8992      	ldrh	r2, [r2, #12]
 8014138:	fbb3 f3f2 	udiv	r3, r3, r2
 801413c:	68ba      	ldr	r2, [r7, #8]
 801413e:	8952      	ldrh	r2, [r2, #10]
 8014140:	3a01      	subs	r2, #1
 8014142:	4013      	ands	r3, r2
 8014144:	69ba      	ldr	r2, [r7, #24]
 8014146:	4413      	add	r3, r2
 8014148:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	699b      	ldr	r3, [r3, #24]
 801414e:	68ba      	ldr	r2, [r7, #8]
 8014150:	8992      	ldrh	r2, [r2, #12]
 8014152:	fbb3 f1f2 	udiv	r1, r3, r2
 8014156:	fb02 f201 	mul.w	r2, r2, r1
 801415a:	1a9b      	subs	r3, r3, r2
 801415c:	2b00      	cmp	r3, #0
 801415e:	f000 815b 	beq.w	8014418 <f_lseek+0x43c>
 8014162:	687b      	ldr	r3, [r7, #4]
 8014164:	6a1b      	ldr	r3, [r3, #32]
 8014166:	69ba      	ldr	r2, [r7, #24]
 8014168:	429a      	cmp	r2, r3
 801416a:	f000 8155 	beq.w	8014418 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801416e:	687b      	ldr	r3, [r7, #4]
 8014170:	7d1b      	ldrb	r3, [r3, #20]
 8014172:	b25b      	sxtb	r3, r3
 8014174:	2b00      	cmp	r3, #0
 8014176:	da18      	bge.n	80141aa <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014178:	68bb      	ldr	r3, [r7, #8]
 801417a:	7858      	ldrb	r0, [r3, #1]
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	6a1a      	ldr	r2, [r3, #32]
 8014186:	2301      	movs	r3, #1
 8014188:	f7fd fac8 	bl	801171c <disk_write>
 801418c:	4603      	mov	r3, r0
 801418e:	2b00      	cmp	r3, #0
 8014190:	d004      	beq.n	801419c <f_lseek+0x1c0>
 8014192:	687b      	ldr	r3, [r7, #4]
 8014194:	2201      	movs	r2, #1
 8014196:	755a      	strb	r2, [r3, #21]
 8014198:	2301      	movs	r3, #1
 801419a:	e13f      	b.n	801441c <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 801419c:	687b      	ldr	r3, [r7, #4]
 801419e:	7d1b      	ldrb	r3, [r3, #20]
 80141a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80141a4:	b2da      	uxtb	r2, r3
 80141a6:	687b      	ldr	r3, [r7, #4]
 80141a8:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80141aa:	68bb      	ldr	r3, [r7, #8]
 80141ac:	7858      	ldrb	r0, [r3, #1]
 80141ae:	687b      	ldr	r3, [r7, #4]
 80141b0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80141b4:	2301      	movs	r3, #1
 80141b6:	69ba      	ldr	r2, [r7, #24]
 80141b8:	f7fd fa90 	bl	80116dc <disk_read>
 80141bc:	4603      	mov	r3, r0
 80141be:	2b00      	cmp	r3, #0
 80141c0:	d004      	beq.n	80141cc <f_lseek+0x1f0>
 80141c2:	687b      	ldr	r3, [r7, #4]
 80141c4:	2201      	movs	r2, #1
 80141c6:	755a      	strb	r2, [r3, #21]
 80141c8:	2301      	movs	r3, #1
 80141ca:	e127      	b.n	801441c <f_lseek+0x440>
#endif
					fp->sect = dsc;
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	69ba      	ldr	r2, [r7, #24]
 80141d0:	621a      	str	r2, [r3, #32]
 80141d2:	e121      	b.n	8014418 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80141d4:	687b      	ldr	r3, [r7, #4]
 80141d6:	68db      	ldr	r3, [r3, #12]
 80141d8:	683a      	ldr	r2, [r7, #0]
 80141da:	429a      	cmp	r2, r3
 80141dc:	d908      	bls.n	80141f0 <f_lseek+0x214>
 80141de:	687b      	ldr	r3, [r7, #4]
 80141e0:	7d1b      	ldrb	r3, [r3, #20]
 80141e2:	f003 0302 	and.w	r3, r3, #2
 80141e6:	2b00      	cmp	r3, #0
 80141e8:	d102      	bne.n	80141f0 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 80141ea:	687b      	ldr	r3, [r7, #4]
 80141ec:	68db      	ldr	r3, [r3, #12]
 80141ee:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 80141f0:	687b      	ldr	r3, [r7, #4]
 80141f2:	699b      	ldr	r3, [r3, #24]
 80141f4:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80141f6:	2300      	movs	r3, #0
 80141f8:	637b      	str	r3, [r7, #52]	; 0x34
 80141fa:	687b      	ldr	r3, [r7, #4]
 80141fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80141fe:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8014200:	683b      	ldr	r3, [r7, #0]
 8014202:	2b00      	cmp	r3, #0
 8014204:	f000 80b5 	beq.w	8014372 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8014208:	68bb      	ldr	r3, [r7, #8]
 801420a:	895b      	ldrh	r3, [r3, #10]
 801420c:	461a      	mov	r2, r3
 801420e:	68bb      	ldr	r3, [r7, #8]
 8014210:	899b      	ldrh	r3, [r3, #12]
 8014212:	fb03 f302 	mul.w	r3, r3, r2
 8014216:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8014218:	6a3b      	ldr	r3, [r7, #32]
 801421a:	2b00      	cmp	r3, #0
 801421c:	d01b      	beq.n	8014256 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 801421e:	683b      	ldr	r3, [r7, #0]
 8014220:	1e5a      	subs	r2, r3, #1
 8014222:	69fb      	ldr	r3, [r7, #28]
 8014224:	fbb2 f2f3 	udiv	r2, r2, r3
 8014228:	6a3b      	ldr	r3, [r7, #32]
 801422a:	1e59      	subs	r1, r3, #1
 801422c:	69fb      	ldr	r3, [r7, #28]
 801422e:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8014232:	429a      	cmp	r2, r3
 8014234:	d30f      	bcc.n	8014256 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8014236:	6a3b      	ldr	r3, [r7, #32]
 8014238:	1e5a      	subs	r2, r3, #1
 801423a:	69fb      	ldr	r3, [r7, #28]
 801423c:	425b      	negs	r3, r3
 801423e:	401a      	ands	r2, r3
 8014240:	687b      	ldr	r3, [r7, #4]
 8014242:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	699b      	ldr	r3, [r3, #24]
 8014248:	683a      	ldr	r2, [r7, #0]
 801424a:	1ad3      	subs	r3, r2, r3
 801424c:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	69db      	ldr	r3, [r3, #28]
 8014252:	63bb      	str	r3, [r7, #56]	; 0x38
 8014254:	e022      	b.n	801429c <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	689b      	ldr	r3, [r3, #8]
 801425a:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 801425c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801425e:	2b00      	cmp	r3, #0
 8014260:	d119      	bne.n	8014296 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8014262:	687b      	ldr	r3, [r7, #4]
 8014264:	2100      	movs	r1, #0
 8014266:	4618      	mov	r0, r3
 8014268:	f7fe f84f 	bl	801230a <create_chain>
 801426c:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 801426e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014270:	2b01      	cmp	r3, #1
 8014272:	d104      	bne.n	801427e <f_lseek+0x2a2>
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	2202      	movs	r2, #2
 8014278:	755a      	strb	r2, [r3, #21]
 801427a:	2302      	movs	r3, #2
 801427c:	e0ce      	b.n	801441c <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801427e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014284:	d104      	bne.n	8014290 <f_lseek+0x2b4>
 8014286:	687b      	ldr	r3, [r7, #4]
 8014288:	2201      	movs	r2, #1
 801428a:	755a      	strb	r2, [r3, #21]
 801428c:	2301      	movs	r3, #1
 801428e:	e0c5      	b.n	801441c <f_lseek+0x440>
					fp->obj.sclust = clst;
 8014290:	687b      	ldr	r3, [r7, #4]
 8014292:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014294:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8014296:	687b      	ldr	r3, [r7, #4]
 8014298:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801429a:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 801429c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801429e:	2b00      	cmp	r3, #0
 80142a0:	d067      	beq.n	8014372 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 80142a2:	e03a      	b.n	801431a <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 80142a4:	683a      	ldr	r2, [r7, #0]
 80142a6:	69fb      	ldr	r3, [r7, #28]
 80142a8:	1ad3      	subs	r3, r2, r3
 80142aa:	603b      	str	r3, [r7, #0]
 80142ac:	687b      	ldr	r3, [r7, #4]
 80142ae:	699a      	ldr	r2, [r3, #24]
 80142b0:	69fb      	ldr	r3, [r7, #28]
 80142b2:	441a      	add	r2, r3
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	7d1b      	ldrb	r3, [r3, #20]
 80142bc:	f003 0302 	and.w	r3, r3, #2
 80142c0:	2b00      	cmp	r3, #0
 80142c2:	d00b      	beq.n	80142dc <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80142c8:	4618      	mov	r0, r3
 80142ca:	f7fe f81e 	bl	801230a <create_chain>
 80142ce:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80142d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142d2:	2b00      	cmp	r3, #0
 80142d4:	d108      	bne.n	80142e8 <f_lseek+0x30c>
							ofs = 0; break;
 80142d6:	2300      	movs	r3, #0
 80142d8:	603b      	str	r3, [r7, #0]
 80142da:	e022      	b.n	8014322 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80142dc:	687b      	ldr	r3, [r7, #4]
 80142de:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80142e0:	4618      	mov	r0, r3
 80142e2:	f7fd fdc6 	bl	8011e72 <get_fat>
 80142e6:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80142e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80142ee:	d104      	bne.n	80142fa <f_lseek+0x31e>
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	2201      	movs	r2, #1
 80142f4:	755a      	strb	r2, [r3, #21]
 80142f6:	2301      	movs	r3, #1
 80142f8:	e090      	b.n	801441c <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80142fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142fc:	2b01      	cmp	r3, #1
 80142fe:	d904      	bls.n	801430a <f_lseek+0x32e>
 8014300:	68bb      	ldr	r3, [r7, #8]
 8014302:	69db      	ldr	r3, [r3, #28]
 8014304:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014306:	429a      	cmp	r2, r3
 8014308:	d304      	bcc.n	8014314 <f_lseek+0x338>
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	2202      	movs	r2, #2
 801430e:	755a      	strb	r2, [r3, #21]
 8014310:	2302      	movs	r3, #2
 8014312:	e083      	b.n	801441c <f_lseek+0x440>
					fp->clust = clst;
 8014314:	687b      	ldr	r3, [r7, #4]
 8014316:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014318:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 801431a:	683a      	ldr	r2, [r7, #0]
 801431c:	69fb      	ldr	r3, [r7, #28]
 801431e:	429a      	cmp	r2, r3
 8014320:	d8c0      	bhi.n	80142a4 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8014322:	687b      	ldr	r3, [r7, #4]
 8014324:	699a      	ldr	r2, [r3, #24]
 8014326:	683b      	ldr	r3, [r7, #0]
 8014328:	441a      	add	r2, r3
 801432a:	687b      	ldr	r3, [r7, #4]
 801432c:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 801432e:	68bb      	ldr	r3, [r7, #8]
 8014330:	899b      	ldrh	r3, [r3, #12]
 8014332:	461a      	mov	r2, r3
 8014334:	683b      	ldr	r3, [r7, #0]
 8014336:	fbb3 f1f2 	udiv	r1, r3, r2
 801433a:	fb02 f201 	mul.w	r2, r2, r1
 801433e:	1a9b      	subs	r3, r3, r2
 8014340:	2b00      	cmp	r3, #0
 8014342:	d016      	beq.n	8014372 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8014344:	68bb      	ldr	r3, [r7, #8]
 8014346:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014348:	4618      	mov	r0, r3
 801434a:	f7fd fd73 	bl	8011e34 <clust2sect>
 801434e:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8014350:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014352:	2b00      	cmp	r3, #0
 8014354:	d104      	bne.n	8014360 <f_lseek+0x384>
 8014356:	687b      	ldr	r3, [r7, #4]
 8014358:	2202      	movs	r2, #2
 801435a:	755a      	strb	r2, [r3, #21]
 801435c:	2302      	movs	r3, #2
 801435e:	e05d      	b.n	801441c <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8014360:	68bb      	ldr	r3, [r7, #8]
 8014362:	899b      	ldrh	r3, [r3, #12]
 8014364:	461a      	mov	r2, r3
 8014366:	683b      	ldr	r3, [r7, #0]
 8014368:	fbb3 f3f2 	udiv	r3, r3, r2
 801436c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801436e:	4413      	add	r3, r2
 8014370:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8014372:	687b      	ldr	r3, [r7, #4]
 8014374:	699a      	ldr	r2, [r3, #24]
 8014376:	687b      	ldr	r3, [r7, #4]
 8014378:	68db      	ldr	r3, [r3, #12]
 801437a:	429a      	cmp	r2, r3
 801437c:	d90a      	bls.n	8014394 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	699a      	ldr	r2, [r3, #24]
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8014386:	687b      	ldr	r3, [r7, #4]
 8014388:	7d1b      	ldrb	r3, [r3, #20]
 801438a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801438e:	b2da      	uxtb	r2, r3
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	699b      	ldr	r3, [r3, #24]
 8014398:	68ba      	ldr	r2, [r7, #8]
 801439a:	8992      	ldrh	r2, [r2, #12]
 801439c:	fbb3 f1f2 	udiv	r1, r3, r2
 80143a0:	fb02 f201 	mul.w	r2, r2, r1
 80143a4:	1a9b      	subs	r3, r3, r2
 80143a6:	2b00      	cmp	r3, #0
 80143a8:	d036      	beq.n	8014418 <f_lseek+0x43c>
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	6a1b      	ldr	r3, [r3, #32]
 80143ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80143b0:	429a      	cmp	r2, r3
 80143b2:	d031      	beq.n	8014418 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	7d1b      	ldrb	r3, [r3, #20]
 80143b8:	b25b      	sxtb	r3, r3
 80143ba:	2b00      	cmp	r3, #0
 80143bc:	da18      	bge.n	80143f0 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80143be:	68bb      	ldr	r3, [r7, #8]
 80143c0:	7858      	ldrb	r0, [r3, #1]
 80143c2:	687b      	ldr	r3, [r7, #4]
 80143c4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80143c8:	687b      	ldr	r3, [r7, #4]
 80143ca:	6a1a      	ldr	r2, [r3, #32]
 80143cc:	2301      	movs	r3, #1
 80143ce:	f7fd f9a5 	bl	801171c <disk_write>
 80143d2:	4603      	mov	r3, r0
 80143d4:	2b00      	cmp	r3, #0
 80143d6:	d004      	beq.n	80143e2 <f_lseek+0x406>
 80143d8:	687b      	ldr	r3, [r7, #4]
 80143da:	2201      	movs	r2, #1
 80143dc:	755a      	strb	r2, [r3, #21]
 80143de:	2301      	movs	r3, #1
 80143e0:	e01c      	b.n	801441c <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 80143e2:	687b      	ldr	r3, [r7, #4]
 80143e4:	7d1b      	ldrb	r3, [r3, #20]
 80143e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80143ea:	b2da      	uxtb	r2, r3
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80143f0:	68bb      	ldr	r3, [r7, #8]
 80143f2:	7858      	ldrb	r0, [r3, #1]
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80143fa:	2301      	movs	r3, #1
 80143fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80143fe:	f7fd f96d 	bl	80116dc <disk_read>
 8014402:	4603      	mov	r3, r0
 8014404:	2b00      	cmp	r3, #0
 8014406:	d004      	beq.n	8014412 <f_lseek+0x436>
 8014408:	687b      	ldr	r3, [r7, #4]
 801440a:	2201      	movs	r2, #1
 801440c:	755a      	strb	r2, [r3, #21]
 801440e:	2301      	movs	r3, #1
 8014410:	e004      	b.n	801441c <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8014412:	687b      	ldr	r3, [r7, #4]
 8014414:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014416:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8014418:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 801441c:	4618      	mov	r0, r3
 801441e:	3740      	adds	r7, #64	; 0x40
 8014420:	46bd      	mov	sp, r7
 8014422:	bd80      	pop	{r7, pc}

08014424 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8014424:	b580      	push	{r7, lr}
 8014426:	b09e      	sub	sp, #120	; 0x78
 8014428:	af00      	add	r7, sp, #0
 801442a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 801442c:	2300      	movs	r3, #0
 801442e:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8014430:	f107 010c 	add.w	r1, r7, #12
 8014434:	1d3b      	adds	r3, r7, #4
 8014436:	2202      	movs	r2, #2
 8014438:	4618      	mov	r0, r3
 801443a:	f7fe fd17 	bl	8012e6c <find_volume>
 801443e:	4603      	mov	r3, r0
 8014440:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 8014444:	68fb      	ldr	r3, [r7, #12]
 8014446:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 8014448:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801444c:	2b00      	cmp	r3, #0
 801444e:	f040 80a4 	bne.w	801459a <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8014452:	687a      	ldr	r2, [r7, #4]
 8014454:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014458:	4611      	mov	r1, r2
 801445a:	4618      	mov	r0, r3
 801445c:	f7fe fbd6 	bl	8012c0c <follow_path>
 8014460:	4603      	mov	r3, r0
 8014462:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 8014466:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801446a:	2b00      	cmp	r3, #0
 801446c:	d108      	bne.n	8014480 <f_unlink+0x5c>
 801446e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8014472:	f003 0320 	and.w	r3, r3, #32
 8014476:	2b00      	cmp	r3, #0
 8014478:	d002      	beq.n	8014480 <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 801447a:	2306      	movs	r3, #6
 801447c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8014480:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014484:	2b00      	cmp	r3, #0
 8014486:	d108      	bne.n	801449a <f_unlink+0x76>
 8014488:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801448c:	2102      	movs	r1, #2
 801448e:	4618      	mov	r0, r3
 8014490:	f7fd fa82 	bl	8011998 <chk_lock>
 8014494:	4603      	mov	r3, r0
 8014496:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 801449a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801449e:	2b00      	cmp	r3, #0
 80144a0:	d17b      	bne.n	801459a <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 80144a2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80144a6:	b25b      	sxtb	r3, r3
 80144a8:	2b00      	cmp	r3, #0
 80144aa:	da03      	bge.n	80144b4 <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 80144ac:	2306      	movs	r3, #6
 80144ae:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80144b2:	e008      	b.n	80144c6 <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 80144b4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80144b8:	f003 0301 	and.w	r3, r3, #1
 80144bc:	2b00      	cmp	r3, #0
 80144be:	d002      	beq.n	80144c6 <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 80144c0:	2307      	movs	r3, #7
 80144c2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 80144c6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80144ca:	2b00      	cmp	r3, #0
 80144cc:	d13d      	bne.n	801454a <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 80144ce:	68fb      	ldr	r3, [r7, #12]
 80144d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80144d2:	4611      	mov	r1, r2
 80144d4:	4618      	mov	r0, r3
 80144d6:	f7fe f98e 	bl	80127f6 <ld_clust>
 80144da:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 80144dc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80144e0:	f003 0310 	and.w	r3, r3, #16
 80144e4:	2b00      	cmp	r3, #0
 80144e6:	d030      	beq.n	801454a <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 80144e8:	68fb      	ldr	r3, [r7, #12]
 80144ea:	699b      	ldr	r3, [r3, #24]
 80144ec:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80144ee:	429a      	cmp	r2, r3
 80144f0:	d103      	bne.n	80144fa <f_unlink+0xd6>
						res = FR_DENIED;
 80144f2:	2307      	movs	r3, #7
 80144f4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80144f8:	e027      	b.n	801454a <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 80144fa:	68fb      	ldr	r3, [r7, #12]
 80144fc:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 80144fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014500:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8014502:	f107 0310 	add.w	r3, r7, #16
 8014506:	2100      	movs	r1, #0
 8014508:	4618      	mov	r0, r3
 801450a:	f7fd ffce 	bl	80124aa <dir_sdi>
 801450e:	4603      	mov	r3, r0
 8014510:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 8014514:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014518:	2b00      	cmp	r3, #0
 801451a:	d116      	bne.n	801454a <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 801451c:	f107 0310 	add.w	r3, r7, #16
 8014520:	2100      	movs	r1, #0
 8014522:	4618      	mov	r0, r3
 8014524:	f7fe f9a6 	bl	8012874 <dir_read>
 8014528:	4603      	mov	r3, r0
 801452a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 801452e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014532:	2b00      	cmp	r3, #0
 8014534:	d102      	bne.n	801453c <f_unlink+0x118>
 8014536:	2307      	movs	r3, #7
 8014538:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 801453c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014540:	2b04      	cmp	r3, #4
 8014542:	d102      	bne.n	801454a <f_unlink+0x126>
 8014544:	2300      	movs	r3, #0
 8014546:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 801454a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801454e:	2b00      	cmp	r3, #0
 8014550:	d123      	bne.n	801459a <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8014552:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014556:	4618      	mov	r0, r3
 8014558:	f7fe fa70 	bl	8012a3c <dir_remove>
 801455c:	4603      	mov	r3, r0
 801455e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8014562:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014566:	2b00      	cmp	r3, #0
 8014568:	d10c      	bne.n	8014584 <f_unlink+0x160>
 801456a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801456c:	2b00      	cmp	r3, #0
 801456e:	d009      	beq.n	8014584 <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8014570:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014574:	2200      	movs	r2, #0
 8014576:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8014578:	4618      	mov	r0, r3
 801457a:	f7fd fe61 	bl	8012240 <remove_chain>
 801457e:	4603      	mov	r3, r0
 8014580:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8014584:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014588:	2b00      	cmp	r3, #0
 801458a:	d106      	bne.n	801459a <f_unlink+0x176>
 801458c:	68fb      	ldr	r3, [r7, #12]
 801458e:	4618      	mov	r0, r3
 8014590:	f7fd fbe0 	bl	8011d54 <sync_fs>
 8014594:	4603      	mov	r3, r0
 8014596:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 801459a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 801459e:	4618      	mov	r0, r3
 80145a0:	3778      	adds	r7, #120	; 0x78
 80145a2:	46bd      	mov	sp, r7
 80145a4:	bd80      	pop	{r7, pc}
	...

080145a8 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 80145a8:	b580      	push	{r7, lr}
 80145aa:	b096      	sub	sp, #88	; 0x58
 80145ac:	af00      	add	r7, sp, #0
 80145ae:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 80145b0:	f107 0108 	add.w	r1, r7, #8
 80145b4:	1d3b      	adds	r3, r7, #4
 80145b6:	2202      	movs	r2, #2
 80145b8:	4618      	mov	r0, r3
 80145ba:	f7fe fc57 	bl	8012e6c <find_volume>
 80145be:	4603      	mov	r3, r0
 80145c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 80145c4:	68bb      	ldr	r3, [r7, #8]
 80145c6:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 80145c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80145cc:	2b00      	cmp	r3, #0
 80145ce:	f040 80fe 	bne.w	80147ce <f_mkdir+0x226>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 80145d2:	687a      	ldr	r2, [r7, #4]
 80145d4:	f107 030c 	add.w	r3, r7, #12
 80145d8:	4611      	mov	r1, r2
 80145da:	4618      	mov	r0, r3
 80145dc:	f7fe fb16 	bl	8012c0c <follow_path>
 80145e0:	4603      	mov	r3, r0
 80145e2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 80145e6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80145ea:	2b00      	cmp	r3, #0
 80145ec:	d102      	bne.n	80145f4 <f_mkdir+0x4c>
 80145ee:	2308      	movs	r3, #8
 80145f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 80145f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80145f8:	2b04      	cmp	r3, #4
 80145fa:	d108      	bne.n	801460e <f_mkdir+0x66>
 80145fc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8014600:	f003 0320 	and.w	r3, r3, #32
 8014604:	2b00      	cmp	r3, #0
 8014606:	d002      	beq.n	801460e <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 8014608:	2306      	movs	r3, #6
 801460a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 801460e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014612:	2b04      	cmp	r3, #4
 8014614:	f040 80db 	bne.w	80147ce <f_mkdir+0x226>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8014618:	f107 030c 	add.w	r3, r7, #12
 801461c:	2100      	movs	r1, #0
 801461e:	4618      	mov	r0, r3
 8014620:	f7fd fe73 	bl	801230a <create_chain>
 8014624:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8014626:	68bb      	ldr	r3, [r7, #8]
 8014628:	895b      	ldrh	r3, [r3, #10]
 801462a:	461a      	mov	r2, r3
 801462c:	68bb      	ldr	r3, [r7, #8]
 801462e:	899b      	ldrh	r3, [r3, #12]
 8014630:	fb03 f302 	mul.w	r3, r3, r2
 8014634:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 8014636:	2300      	movs	r3, #0
 8014638:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 801463c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801463e:	2b00      	cmp	r3, #0
 8014640:	d102      	bne.n	8014648 <f_mkdir+0xa0>
 8014642:	2307      	movs	r3, #7
 8014644:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8014648:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801464a:	2b01      	cmp	r3, #1
 801464c:	d102      	bne.n	8014654 <f_mkdir+0xac>
 801464e:	2302      	movs	r3, #2
 8014650:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8014654:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014656:	f1b3 3fff 	cmp.w	r3, #4294967295
 801465a:	d102      	bne.n	8014662 <f_mkdir+0xba>
 801465c:	2301      	movs	r3, #1
 801465e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8014662:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014666:	2b00      	cmp	r3, #0
 8014668:	d106      	bne.n	8014678 <f_mkdir+0xd0>
 801466a:	68bb      	ldr	r3, [r7, #8]
 801466c:	4618      	mov	r0, r3
 801466e:	f7fd faff 	bl	8011c70 <sync_window>
 8014672:	4603      	mov	r3, r0
 8014674:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 8014678:	4b58      	ldr	r3, [pc, #352]	; (80147dc <f_mkdir+0x234>)
 801467a:	643b      	str	r3, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 801467c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014680:	2b00      	cmp	r3, #0
 8014682:	d16c      	bne.n	801475e <f_mkdir+0x1b6>
				dsc = clust2sect(fs, dcl);
 8014684:	68bb      	ldr	r3, [r7, #8]
 8014686:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014688:	4618      	mov	r0, r3
 801468a:	f7fd fbd3 	bl	8011e34 <clust2sect>
 801468e:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 8014690:	68bb      	ldr	r3, [r7, #8]
 8014692:	3338      	adds	r3, #56	; 0x38
 8014694:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 8014696:	68bb      	ldr	r3, [r7, #8]
 8014698:	899b      	ldrh	r3, [r3, #12]
 801469a:	461a      	mov	r2, r3
 801469c:	2100      	movs	r1, #0
 801469e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80146a0:	f7fd f91d 	bl	80118de <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 80146a4:	220b      	movs	r2, #11
 80146a6:	2120      	movs	r1, #32
 80146a8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80146aa:	f7fd f918 	bl	80118de <mem_set>
					dir[DIR_Name] = '.';
 80146ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80146b0:	222e      	movs	r2, #46	; 0x2e
 80146b2:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 80146b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80146b6:	330b      	adds	r3, #11
 80146b8:	2210      	movs	r2, #16
 80146ba:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 80146bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80146be:	3316      	adds	r3, #22
 80146c0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80146c2:	4618      	mov	r0, r3
 80146c4:	f7fd f8be 	bl	8011844 <st_dword>
					st_clust(fs, dir, dcl);
 80146c8:	68bb      	ldr	r3, [r7, #8]
 80146ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80146cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80146ce:	4618      	mov	r0, r3
 80146d0:	f7fe f8b0 	bl	8012834 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 80146d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80146d6:	3320      	adds	r3, #32
 80146d8:	2220      	movs	r2, #32
 80146da:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80146dc:	4618      	mov	r0, r3
 80146de:	f7fd f8dd 	bl	801189c <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 80146e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80146e4:	3321      	adds	r3, #33	; 0x21
 80146e6:	222e      	movs	r2, #46	; 0x2e
 80146e8:	701a      	strb	r2, [r3, #0]
 80146ea:	697b      	ldr	r3, [r7, #20]
 80146ec:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 80146ee:	68bb      	ldr	r3, [r7, #8]
 80146f0:	781b      	ldrb	r3, [r3, #0]
 80146f2:	2b03      	cmp	r3, #3
 80146f4:	d106      	bne.n	8014704 <f_mkdir+0x15c>
 80146f6:	68bb      	ldr	r3, [r7, #8]
 80146f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80146fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80146fc:	429a      	cmp	r2, r3
 80146fe:	d101      	bne.n	8014704 <f_mkdir+0x15c>
 8014700:	2300      	movs	r3, #0
 8014702:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 8014704:	68b8      	ldr	r0, [r7, #8]
 8014706:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014708:	3320      	adds	r3, #32
 801470a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801470c:	4619      	mov	r1, r3
 801470e:	f7fe f891 	bl	8012834 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8014712:	68bb      	ldr	r3, [r7, #8]
 8014714:	895b      	ldrh	r3, [r3, #10]
 8014716:	653b      	str	r3, [r7, #80]	; 0x50
 8014718:	e01c      	b.n	8014754 <f_mkdir+0x1ac>
					fs->winsect = dsc++;
 801471a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801471c:	1c5a      	adds	r2, r3, #1
 801471e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8014720:	68ba      	ldr	r2, [r7, #8]
 8014722:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 8014724:	68bb      	ldr	r3, [r7, #8]
 8014726:	2201      	movs	r2, #1
 8014728:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 801472a:	68bb      	ldr	r3, [r7, #8]
 801472c:	4618      	mov	r0, r3
 801472e:	f7fd fa9f 	bl	8011c70 <sync_window>
 8014732:	4603      	mov	r3, r0
 8014734:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 8014738:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801473c:	2b00      	cmp	r3, #0
 801473e:	d10d      	bne.n	801475c <f_mkdir+0x1b4>
					mem_set(dir, 0, SS(fs));
 8014740:	68bb      	ldr	r3, [r7, #8]
 8014742:	899b      	ldrh	r3, [r3, #12]
 8014744:	461a      	mov	r2, r3
 8014746:	2100      	movs	r1, #0
 8014748:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801474a:	f7fd f8c8 	bl	80118de <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 801474e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014750:	3b01      	subs	r3, #1
 8014752:	653b      	str	r3, [r7, #80]	; 0x50
 8014754:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014756:	2b00      	cmp	r3, #0
 8014758:	d1df      	bne.n	801471a <f_mkdir+0x172>
 801475a:	e000      	b.n	801475e <f_mkdir+0x1b6>
					if (res != FR_OK) break;
 801475c:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 801475e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014762:	2b00      	cmp	r3, #0
 8014764:	d107      	bne.n	8014776 <f_mkdir+0x1ce>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8014766:	f107 030c 	add.w	r3, r7, #12
 801476a:	4618      	mov	r0, r3
 801476c:	f7fe f934 	bl	80129d8 <dir_register>
 8014770:	4603      	mov	r3, r0
 8014772:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 8014776:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801477a:	2b00      	cmp	r3, #0
 801477c:	d120      	bne.n	80147c0 <f_mkdir+0x218>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 801477e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014780:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8014782:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014784:	3316      	adds	r3, #22
 8014786:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8014788:	4618      	mov	r0, r3
 801478a:	f7fd f85b 	bl	8011844 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 801478e:	68bb      	ldr	r3, [r7, #8]
 8014790:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014792:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014794:	4618      	mov	r0, r3
 8014796:	f7fe f84d 	bl	8012834 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 801479a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801479c:	330b      	adds	r3, #11
 801479e:	2210      	movs	r2, #16
 80147a0:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 80147a2:	68bb      	ldr	r3, [r7, #8]
 80147a4:	2201      	movs	r2, #1
 80147a6:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 80147a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80147ac:	2b00      	cmp	r3, #0
 80147ae:	d10e      	bne.n	80147ce <f_mkdir+0x226>
					res = sync_fs(fs);
 80147b0:	68bb      	ldr	r3, [r7, #8]
 80147b2:	4618      	mov	r0, r3
 80147b4:	f7fd face 	bl	8011d54 <sync_fs>
 80147b8:	4603      	mov	r3, r0
 80147ba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80147be:	e006      	b.n	80147ce <f_mkdir+0x226>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 80147c0:	f107 030c 	add.w	r3, r7, #12
 80147c4:	2200      	movs	r2, #0
 80147c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80147c8:	4618      	mov	r0, r3
 80147ca:	f7fd fd39 	bl	8012240 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 80147ce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 80147d2:	4618      	mov	r0, r3
 80147d4:	3758      	adds	r7, #88	; 0x58
 80147d6:	46bd      	mov	sp, r7
 80147d8:	bd80      	pop	{r7, pc}
 80147da:	bf00      	nop
 80147dc:	274a0000 	.word	0x274a0000

080147e0 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 80147e0:	b580      	push	{r7, lr}
 80147e2:	b088      	sub	sp, #32
 80147e4:	af00      	add	r7, sp, #0
 80147e6:	60f8      	str	r0, [r7, #12]
 80147e8:	60b9      	str	r1, [r7, #8]
 80147ea:	607a      	str	r2, [r7, #4]
	int n = 0;
 80147ec:	2300      	movs	r3, #0
 80147ee:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 80147f0:	68fb      	ldr	r3, [r7, #12]
 80147f2:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80147f4:	e017      	b.n	8014826 <f_gets+0x46>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 80147f6:	f107 0310 	add.w	r3, r7, #16
 80147fa:	f107 0114 	add.w	r1, r7, #20
 80147fe:	2201      	movs	r2, #1
 8014800:	6878      	ldr	r0, [r7, #4]
 8014802:	f7ff f803 	bl	801380c <f_read>
		if (rc != 1) break;
 8014806:	693b      	ldr	r3, [r7, #16]
 8014808:	2b01      	cmp	r3, #1
 801480a:	d112      	bne.n	8014832 <f_gets+0x52>
		c = s[0];
 801480c:	7d3b      	ldrb	r3, [r7, #20]
 801480e:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
		*p++ = c;
 8014810:	69bb      	ldr	r3, [r7, #24]
 8014812:	1c5a      	adds	r2, r3, #1
 8014814:	61ba      	str	r2, [r7, #24]
 8014816:	7dfa      	ldrb	r2, [r7, #23]
 8014818:	701a      	strb	r2, [r3, #0]
		n++;
 801481a:	69fb      	ldr	r3, [r7, #28]
 801481c:	3301      	adds	r3, #1
 801481e:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8014820:	7dfb      	ldrb	r3, [r7, #23]
 8014822:	2b0a      	cmp	r3, #10
 8014824:	d007      	beq.n	8014836 <f_gets+0x56>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8014826:	68bb      	ldr	r3, [r7, #8]
 8014828:	3b01      	subs	r3, #1
 801482a:	69fa      	ldr	r2, [r7, #28]
 801482c:	429a      	cmp	r2, r3
 801482e:	dbe2      	blt.n	80147f6 <f_gets+0x16>
 8014830:	e002      	b.n	8014838 <f_gets+0x58>
		if (rc != 1) break;
 8014832:	bf00      	nop
 8014834:	e000      	b.n	8014838 <f_gets+0x58>
		if (c == '\n') break;		/* Break on EOL */
 8014836:	bf00      	nop
	}
	*p = 0;
 8014838:	69bb      	ldr	r3, [r7, #24]
 801483a:	2200      	movs	r2, #0
 801483c:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 801483e:	69fb      	ldr	r3, [r7, #28]
 8014840:	2b00      	cmp	r3, #0
 8014842:	d001      	beq.n	8014848 <f_gets+0x68>
 8014844:	68fb      	ldr	r3, [r7, #12]
 8014846:	e000      	b.n	801484a <f_gets+0x6a>
 8014848:	2300      	movs	r3, #0
}
 801484a:	4618      	mov	r0, r3
 801484c:	3720      	adds	r7, #32
 801484e:	46bd      	mov	sp, r7
 8014850:	bd80      	pop	{r7, pc}
	...

08014854 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8014854:	b480      	push	{r7}
 8014856:	b087      	sub	sp, #28
 8014858:	af00      	add	r7, sp, #0
 801485a:	60f8      	str	r0, [r7, #12]
 801485c:	60b9      	str	r1, [r7, #8]
 801485e:	4613      	mov	r3, r2
 8014860:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8014862:	2301      	movs	r3, #1
 8014864:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8014866:	2300      	movs	r3, #0
 8014868:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801486a:	4b1f      	ldr	r3, [pc, #124]	; (80148e8 <FATFS_LinkDriverEx+0x94>)
 801486c:	7a5b      	ldrb	r3, [r3, #9]
 801486e:	b2db      	uxtb	r3, r3
 8014870:	2b00      	cmp	r3, #0
 8014872:	d131      	bne.n	80148d8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8014874:	4b1c      	ldr	r3, [pc, #112]	; (80148e8 <FATFS_LinkDriverEx+0x94>)
 8014876:	7a5b      	ldrb	r3, [r3, #9]
 8014878:	b2db      	uxtb	r3, r3
 801487a:	461a      	mov	r2, r3
 801487c:	4b1a      	ldr	r3, [pc, #104]	; (80148e8 <FATFS_LinkDriverEx+0x94>)
 801487e:	2100      	movs	r1, #0
 8014880:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8014882:	4b19      	ldr	r3, [pc, #100]	; (80148e8 <FATFS_LinkDriverEx+0x94>)
 8014884:	7a5b      	ldrb	r3, [r3, #9]
 8014886:	b2db      	uxtb	r3, r3
 8014888:	4a17      	ldr	r2, [pc, #92]	; (80148e8 <FATFS_LinkDriverEx+0x94>)
 801488a:	009b      	lsls	r3, r3, #2
 801488c:	4413      	add	r3, r2
 801488e:	68fa      	ldr	r2, [r7, #12]
 8014890:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8014892:	4b15      	ldr	r3, [pc, #84]	; (80148e8 <FATFS_LinkDriverEx+0x94>)
 8014894:	7a5b      	ldrb	r3, [r3, #9]
 8014896:	b2db      	uxtb	r3, r3
 8014898:	461a      	mov	r2, r3
 801489a:	4b13      	ldr	r3, [pc, #76]	; (80148e8 <FATFS_LinkDriverEx+0x94>)
 801489c:	4413      	add	r3, r2
 801489e:	79fa      	ldrb	r2, [r7, #7]
 80148a0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80148a2:	4b11      	ldr	r3, [pc, #68]	; (80148e8 <FATFS_LinkDriverEx+0x94>)
 80148a4:	7a5b      	ldrb	r3, [r3, #9]
 80148a6:	b2db      	uxtb	r3, r3
 80148a8:	1c5a      	adds	r2, r3, #1
 80148aa:	b2d1      	uxtb	r1, r2
 80148ac:	4a0e      	ldr	r2, [pc, #56]	; (80148e8 <FATFS_LinkDriverEx+0x94>)
 80148ae:	7251      	strb	r1, [r2, #9]
 80148b0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80148b2:	7dbb      	ldrb	r3, [r7, #22]
 80148b4:	3330      	adds	r3, #48	; 0x30
 80148b6:	b2da      	uxtb	r2, r3
 80148b8:	68bb      	ldr	r3, [r7, #8]
 80148ba:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80148bc:	68bb      	ldr	r3, [r7, #8]
 80148be:	3301      	adds	r3, #1
 80148c0:	223a      	movs	r2, #58	; 0x3a
 80148c2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80148c4:	68bb      	ldr	r3, [r7, #8]
 80148c6:	3302      	adds	r3, #2
 80148c8:	222f      	movs	r2, #47	; 0x2f
 80148ca:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80148cc:	68bb      	ldr	r3, [r7, #8]
 80148ce:	3303      	adds	r3, #3
 80148d0:	2200      	movs	r2, #0
 80148d2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80148d4:	2300      	movs	r3, #0
 80148d6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80148d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80148da:	4618      	mov	r0, r3
 80148dc:	371c      	adds	r7, #28
 80148de:	46bd      	mov	sp, r7
 80148e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148e4:	4770      	bx	lr
 80148e6:	bf00      	nop
 80148e8:	200452fc 	.word	0x200452fc

080148ec <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80148ec:	b580      	push	{r7, lr}
 80148ee:	b082      	sub	sp, #8
 80148f0:	af00      	add	r7, sp, #0
 80148f2:	6078      	str	r0, [r7, #4]
 80148f4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80148f6:	2200      	movs	r2, #0
 80148f8:	6839      	ldr	r1, [r7, #0]
 80148fa:	6878      	ldr	r0, [r7, #4]
 80148fc:	f7ff ffaa 	bl	8014854 <FATFS_LinkDriverEx>
 8014900:	4603      	mov	r3, r0
}
 8014902:	4618      	mov	r0, r3
 8014904:	3708      	adds	r7, #8
 8014906:	46bd      	mov	sp, r7
 8014908:	bd80      	pop	{r7, pc}

0801490a <__cxa_guard_acquire>:
 801490a:	6803      	ldr	r3, [r0, #0]
 801490c:	07db      	lsls	r3, r3, #31
 801490e:	d406      	bmi.n	801491e <__cxa_guard_acquire+0x14>
 8014910:	7843      	ldrb	r3, [r0, #1]
 8014912:	b103      	cbz	r3, 8014916 <__cxa_guard_acquire+0xc>
 8014914:	deff      	udf	#255	; 0xff
 8014916:	2301      	movs	r3, #1
 8014918:	7043      	strb	r3, [r0, #1]
 801491a:	4618      	mov	r0, r3
 801491c:	4770      	bx	lr
 801491e:	2000      	movs	r0, #0
 8014920:	4770      	bx	lr

08014922 <__cxa_guard_release>:
 8014922:	2301      	movs	r3, #1
 8014924:	6003      	str	r3, [r0, #0]
 8014926:	4770      	bx	lr

08014928 <__errno>:
 8014928:	4b01      	ldr	r3, [pc, #4]	; (8014930 <__errno+0x8>)
 801492a:	6818      	ldr	r0, [r3, #0]
 801492c:	4770      	bx	lr
 801492e:	bf00      	nop
 8014930:	2000000c 	.word	0x2000000c

08014934 <__libc_init_array>:
 8014934:	b570      	push	{r4, r5, r6, lr}
 8014936:	4e0d      	ldr	r6, [pc, #52]	; (801496c <__libc_init_array+0x38>)
 8014938:	4c0d      	ldr	r4, [pc, #52]	; (8014970 <__libc_init_array+0x3c>)
 801493a:	1ba4      	subs	r4, r4, r6
 801493c:	10a4      	asrs	r4, r4, #2
 801493e:	2500      	movs	r5, #0
 8014940:	42a5      	cmp	r5, r4
 8014942:	d109      	bne.n	8014958 <__libc_init_array+0x24>
 8014944:	4e0b      	ldr	r6, [pc, #44]	; (8014974 <__libc_init_array+0x40>)
 8014946:	4c0c      	ldr	r4, [pc, #48]	; (8014978 <__libc_init_array+0x44>)
 8014948:	f004 f9e8 	bl	8018d1c <_init>
 801494c:	1ba4      	subs	r4, r4, r6
 801494e:	10a4      	asrs	r4, r4, #2
 8014950:	2500      	movs	r5, #0
 8014952:	42a5      	cmp	r5, r4
 8014954:	d105      	bne.n	8014962 <__libc_init_array+0x2e>
 8014956:	bd70      	pop	{r4, r5, r6, pc}
 8014958:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801495c:	4798      	blx	r3
 801495e:	3501      	adds	r5, #1
 8014960:	e7ee      	b.n	8014940 <__libc_init_array+0xc>
 8014962:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8014966:	4798      	blx	r3
 8014968:	3501      	adds	r5, #1
 801496a:	e7f2      	b.n	8014952 <__libc_init_array+0x1e>
 801496c:	08019574 	.word	0x08019574
 8014970:	08019574 	.word	0x08019574
 8014974:	08019574 	.word	0x08019574
 8014978:	0801957c 	.word	0x0801957c

0801497c <memset>:
 801497c:	4402      	add	r2, r0
 801497e:	4603      	mov	r3, r0
 8014980:	4293      	cmp	r3, r2
 8014982:	d100      	bne.n	8014986 <memset+0xa>
 8014984:	4770      	bx	lr
 8014986:	f803 1b01 	strb.w	r1, [r3], #1
 801498a:	e7f9      	b.n	8014980 <memset+0x4>

0801498c <__cvt>:
 801498c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014990:	ec55 4b10 	vmov	r4, r5, d0
 8014994:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8014996:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801499a:	2d00      	cmp	r5, #0
 801499c:	460e      	mov	r6, r1
 801499e:	4691      	mov	r9, r2
 80149a0:	4619      	mov	r1, r3
 80149a2:	bfb8      	it	lt
 80149a4:	4622      	movlt	r2, r4
 80149a6:	462b      	mov	r3, r5
 80149a8:	f027 0720 	bic.w	r7, r7, #32
 80149ac:	bfbb      	ittet	lt
 80149ae:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80149b2:	461d      	movlt	r5, r3
 80149b4:	2300      	movge	r3, #0
 80149b6:	232d      	movlt	r3, #45	; 0x2d
 80149b8:	bfb8      	it	lt
 80149ba:	4614      	movlt	r4, r2
 80149bc:	2f46      	cmp	r7, #70	; 0x46
 80149be:	700b      	strb	r3, [r1, #0]
 80149c0:	d004      	beq.n	80149cc <__cvt+0x40>
 80149c2:	2f45      	cmp	r7, #69	; 0x45
 80149c4:	d100      	bne.n	80149c8 <__cvt+0x3c>
 80149c6:	3601      	adds	r6, #1
 80149c8:	2102      	movs	r1, #2
 80149ca:	e000      	b.n	80149ce <__cvt+0x42>
 80149cc:	2103      	movs	r1, #3
 80149ce:	ab03      	add	r3, sp, #12
 80149d0:	9301      	str	r3, [sp, #4]
 80149d2:	ab02      	add	r3, sp, #8
 80149d4:	9300      	str	r3, [sp, #0]
 80149d6:	4632      	mov	r2, r6
 80149d8:	4653      	mov	r3, sl
 80149da:	ec45 4b10 	vmov	d0, r4, r5
 80149de:	f001 fdff 	bl	80165e0 <_dtoa_r>
 80149e2:	2f47      	cmp	r7, #71	; 0x47
 80149e4:	4680      	mov	r8, r0
 80149e6:	d102      	bne.n	80149ee <__cvt+0x62>
 80149e8:	f019 0f01 	tst.w	r9, #1
 80149ec:	d026      	beq.n	8014a3c <__cvt+0xb0>
 80149ee:	2f46      	cmp	r7, #70	; 0x46
 80149f0:	eb08 0906 	add.w	r9, r8, r6
 80149f4:	d111      	bne.n	8014a1a <__cvt+0x8e>
 80149f6:	f898 3000 	ldrb.w	r3, [r8]
 80149fa:	2b30      	cmp	r3, #48	; 0x30
 80149fc:	d10a      	bne.n	8014a14 <__cvt+0x88>
 80149fe:	2200      	movs	r2, #0
 8014a00:	2300      	movs	r3, #0
 8014a02:	4620      	mov	r0, r4
 8014a04:	4629      	mov	r1, r5
 8014a06:	f7ec f877 	bl	8000af8 <__aeabi_dcmpeq>
 8014a0a:	b918      	cbnz	r0, 8014a14 <__cvt+0x88>
 8014a0c:	f1c6 0601 	rsb	r6, r6, #1
 8014a10:	f8ca 6000 	str.w	r6, [sl]
 8014a14:	f8da 3000 	ldr.w	r3, [sl]
 8014a18:	4499      	add	r9, r3
 8014a1a:	2200      	movs	r2, #0
 8014a1c:	2300      	movs	r3, #0
 8014a1e:	4620      	mov	r0, r4
 8014a20:	4629      	mov	r1, r5
 8014a22:	f7ec f869 	bl	8000af8 <__aeabi_dcmpeq>
 8014a26:	b938      	cbnz	r0, 8014a38 <__cvt+0xac>
 8014a28:	2230      	movs	r2, #48	; 0x30
 8014a2a:	9b03      	ldr	r3, [sp, #12]
 8014a2c:	454b      	cmp	r3, r9
 8014a2e:	d205      	bcs.n	8014a3c <__cvt+0xb0>
 8014a30:	1c59      	adds	r1, r3, #1
 8014a32:	9103      	str	r1, [sp, #12]
 8014a34:	701a      	strb	r2, [r3, #0]
 8014a36:	e7f8      	b.n	8014a2a <__cvt+0x9e>
 8014a38:	f8cd 900c 	str.w	r9, [sp, #12]
 8014a3c:	9b03      	ldr	r3, [sp, #12]
 8014a3e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014a40:	eba3 0308 	sub.w	r3, r3, r8
 8014a44:	4640      	mov	r0, r8
 8014a46:	6013      	str	r3, [r2, #0]
 8014a48:	b004      	add	sp, #16
 8014a4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08014a4e <__exponent>:
 8014a4e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014a50:	2900      	cmp	r1, #0
 8014a52:	4604      	mov	r4, r0
 8014a54:	bfba      	itte	lt
 8014a56:	4249      	neglt	r1, r1
 8014a58:	232d      	movlt	r3, #45	; 0x2d
 8014a5a:	232b      	movge	r3, #43	; 0x2b
 8014a5c:	2909      	cmp	r1, #9
 8014a5e:	f804 2b02 	strb.w	r2, [r4], #2
 8014a62:	7043      	strb	r3, [r0, #1]
 8014a64:	dd20      	ble.n	8014aa8 <__exponent+0x5a>
 8014a66:	f10d 0307 	add.w	r3, sp, #7
 8014a6a:	461f      	mov	r7, r3
 8014a6c:	260a      	movs	r6, #10
 8014a6e:	fb91 f5f6 	sdiv	r5, r1, r6
 8014a72:	fb06 1115 	mls	r1, r6, r5, r1
 8014a76:	3130      	adds	r1, #48	; 0x30
 8014a78:	2d09      	cmp	r5, #9
 8014a7a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8014a7e:	f103 32ff 	add.w	r2, r3, #4294967295
 8014a82:	4629      	mov	r1, r5
 8014a84:	dc09      	bgt.n	8014a9a <__exponent+0x4c>
 8014a86:	3130      	adds	r1, #48	; 0x30
 8014a88:	3b02      	subs	r3, #2
 8014a8a:	f802 1c01 	strb.w	r1, [r2, #-1]
 8014a8e:	42bb      	cmp	r3, r7
 8014a90:	4622      	mov	r2, r4
 8014a92:	d304      	bcc.n	8014a9e <__exponent+0x50>
 8014a94:	1a10      	subs	r0, r2, r0
 8014a96:	b003      	add	sp, #12
 8014a98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014a9a:	4613      	mov	r3, r2
 8014a9c:	e7e7      	b.n	8014a6e <__exponent+0x20>
 8014a9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014aa2:	f804 2b01 	strb.w	r2, [r4], #1
 8014aa6:	e7f2      	b.n	8014a8e <__exponent+0x40>
 8014aa8:	2330      	movs	r3, #48	; 0x30
 8014aaa:	4419      	add	r1, r3
 8014aac:	7083      	strb	r3, [r0, #2]
 8014aae:	1d02      	adds	r2, r0, #4
 8014ab0:	70c1      	strb	r1, [r0, #3]
 8014ab2:	e7ef      	b.n	8014a94 <__exponent+0x46>

08014ab4 <_printf_float>:
 8014ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ab8:	b08d      	sub	sp, #52	; 0x34
 8014aba:	460c      	mov	r4, r1
 8014abc:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8014ac0:	4616      	mov	r6, r2
 8014ac2:	461f      	mov	r7, r3
 8014ac4:	4605      	mov	r5, r0
 8014ac6:	f002 fe7d 	bl	80177c4 <_localeconv_r>
 8014aca:	6803      	ldr	r3, [r0, #0]
 8014acc:	9304      	str	r3, [sp, #16]
 8014ace:	4618      	mov	r0, r3
 8014ad0:	f7eb fb96 	bl	8000200 <strlen>
 8014ad4:	2300      	movs	r3, #0
 8014ad6:	930a      	str	r3, [sp, #40]	; 0x28
 8014ad8:	f8d8 3000 	ldr.w	r3, [r8]
 8014adc:	9005      	str	r0, [sp, #20]
 8014ade:	3307      	adds	r3, #7
 8014ae0:	f023 0307 	bic.w	r3, r3, #7
 8014ae4:	f103 0208 	add.w	r2, r3, #8
 8014ae8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8014aec:	f8d4 b000 	ldr.w	fp, [r4]
 8014af0:	f8c8 2000 	str.w	r2, [r8]
 8014af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014af8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8014afc:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8014b00:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8014b04:	9307      	str	r3, [sp, #28]
 8014b06:	f8cd 8018 	str.w	r8, [sp, #24]
 8014b0a:	f04f 32ff 	mov.w	r2, #4294967295
 8014b0e:	4ba7      	ldr	r3, [pc, #668]	; (8014dac <_printf_float+0x2f8>)
 8014b10:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014b14:	f7ec f822 	bl	8000b5c <__aeabi_dcmpun>
 8014b18:	bb70      	cbnz	r0, 8014b78 <_printf_float+0xc4>
 8014b1a:	f04f 32ff 	mov.w	r2, #4294967295
 8014b1e:	4ba3      	ldr	r3, [pc, #652]	; (8014dac <_printf_float+0x2f8>)
 8014b20:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014b24:	f7eb fffc 	bl	8000b20 <__aeabi_dcmple>
 8014b28:	bb30      	cbnz	r0, 8014b78 <_printf_float+0xc4>
 8014b2a:	2200      	movs	r2, #0
 8014b2c:	2300      	movs	r3, #0
 8014b2e:	4640      	mov	r0, r8
 8014b30:	4649      	mov	r1, r9
 8014b32:	f7eb ffeb 	bl	8000b0c <__aeabi_dcmplt>
 8014b36:	b110      	cbz	r0, 8014b3e <_printf_float+0x8a>
 8014b38:	232d      	movs	r3, #45	; 0x2d
 8014b3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014b3e:	4a9c      	ldr	r2, [pc, #624]	; (8014db0 <_printf_float+0x2fc>)
 8014b40:	4b9c      	ldr	r3, [pc, #624]	; (8014db4 <_printf_float+0x300>)
 8014b42:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8014b46:	bf8c      	ite	hi
 8014b48:	4690      	movhi	r8, r2
 8014b4a:	4698      	movls	r8, r3
 8014b4c:	2303      	movs	r3, #3
 8014b4e:	f02b 0204 	bic.w	r2, fp, #4
 8014b52:	6123      	str	r3, [r4, #16]
 8014b54:	6022      	str	r2, [r4, #0]
 8014b56:	f04f 0900 	mov.w	r9, #0
 8014b5a:	9700      	str	r7, [sp, #0]
 8014b5c:	4633      	mov	r3, r6
 8014b5e:	aa0b      	add	r2, sp, #44	; 0x2c
 8014b60:	4621      	mov	r1, r4
 8014b62:	4628      	mov	r0, r5
 8014b64:	f000 f9e6 	bl	8014f34 <_printf_common>
 8014b68:	3001      	adds	r0, #1
 8014b6a:	f040 808d 	bne.w	8014c88 <_printf_float+0x1d4>
 8014b6e:	f04f 30ff 	mov.w	r0, #4294967295
 8014b72:	b00d      	add	sp, #52	; 0x34
 8014b74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b78:	4642      	mov	r2, r8
 8014b7a:	464b      	mov	r3, r9
 8014b7c:	4640      	mov	r0, r8
 8014b7e:	4649      	mov	r1, r9
 8014b80:	f7eb ffec 	bl	8000b5c <__aeabi_dcmpun>
 8014b84:	b110      	cbz	r0, 8014b8c <_printf_float+0xd8>
 8014b86:	4a8c      	ldr	r2, [pc, #560]	; (8014db8 <_printf_float+0x304>)
 8014b88:	4b8c      	ldr	r3, [pc, #560]	; (8014dbc <_printf_float+0x308>)
 8014b8a:	e7da      	b.n	8014b42 <_printf_float+0x8e>
 8014b8c:	6861      	ldr	r1, [r4, #4]
 8014b8e:	1c4b      	adds	r3, r1, #1
 8014b90:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8014b94:	a80a      	add	r0, sp, #40	; 0x28
 8014b96:	d13e      	bne.n	8014c16 <_printf_float+0x162>
 8014b98:	2306      	movs	r3, #6
 8014b9a:	6063      	str	r3, [r4, #4]
 8014b9c:	2300      	movs	r3, #0
 8014b9e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8014ba2:	ab09      	add	r3, sp, #36	; 0x24
 8014ba4:	9300      	str	r3, [sp, #0]
 8014ba6:	ec49 8b10 	vmov	d0, r8, r9
 8014baa:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8014bae:	6022      	str	r2, [r4, #0]
 8014bb0:	f8cd a004 	str.w	sl, [sp, #4]
 8014bb4:	6861      	ldr	r1, [r4, #4]
 8014bb6:	4628      	mov	r0, r5
 8014bb8:	f7ff fee8 	bl	801498c <__cvt>
 8014bbc:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8014bc0:	2b47      	cmp	r3, #71	; 0x47
 8014bc2:	4680      	mov	r8, r0
 8014bc4:	d109      	bne.n	8014bda <_printf_float+0x126>
 8014bc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014bc8:	1cd8      	adds	r0, r3, #3
 8014bca:	db02      	blt.n	8014bd2 <_printf_float+0x11e>
 8014bcc:	6862      	ldr	r2, [r4, #4]
 8014bce:	4293      	cmp	r3, r2
 8014bd0:	dd47      	ble.n	8014c62 <_printf_float+0x1ae>
 8014bd2:	f1aa 0a02 	sub.w	sl, sl, #2
 8014bd6:	fa5f fa8a 	uxtb.w	sl, sl
 8014bda:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8014bde:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014be0:	d824      	bhi.n	8014c2c <_printf_float+0x178>
 8014be2:	3901      	subs	r1, #1
 8014be4:	4652      	mov	r2, sl
 8014be6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8014bea:	9109      	str	r1, [sp, #36]	; 0x24
 8014bec:	f7ff ff2f 	bl	8014a4e <__exponent>
 8014bf0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014bf2:	1813      	adds	r3, r2, r0
 8014bf4:	2a01      	cmp	r2, #1
 8014bf6:	4681      	mov	r9, r0
 8014bf8:	6123      	str	r3, [r4, #16]
 8014bfa:	dc02      	bgt.n	8014c02 <_printf_float+0x14e>
 8014bfc:	6822      	ldr	r2, [r4, #0]
 8014bfe:	07d1      	lsls	r1, r2, #31
 8014c00:	d501      	bpl.n	8014c06 <_printf_float+0x152>
 8014c02:	3301      	adds	r3, #1
 8014c04:	6123      	str	r3, [r4, #16]
 8014c06:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8014c0a:	2b00      	cmp	r3, #0
 8014c0c:	d0a5      	beq.n	8014b5a <_printf_float+0xa6>
 8014c0e:	232d      	movs	r3, #45	; 0x2d
 8014c10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014c14:	e7a1      	b.n	8014b5a <_printf_float+0xa6>
 8014c16:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8014c1a:	f000 8177 	beq.w	8014f0c <_printf_float+0x458>
 8014c1e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8014c22:	d1bb      	bne.n	8014b9c <_printf_float+0xe8>
 8014c24:	2900      	cmp	r1, #0
 8014c26:	d1b9      	bne.n	8014b9c <_printf_float+0xe8>
 8014c28:	2301      	movs	r3, #1
 8014c2a:	e7b6      	b.n	8014b9a <_printf_float+0xe6>
 8014c2c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8014c30:	d119      	bne.n	8014c66 <_printf_float+0x1b2>
 8014c32:	2900      	cmp	r1, #0
 8014c34:	6863      	ldr	r3, [r4, #4]
 8014c36:	dd0c      	ble.n	8014c52 <_printf_float+0x19e>
 8014c38:	6121      	str	r1, [r4, #16]
 8014c3a:	b913      	cbnz	r3, 8014c42 <_printf_float+0x18e>
 8014c3c:	6822      	ldr	r2, [r4, #0]
 8014c3e:	07d2      	lsls	r2, r2, #31
 8014c40:	d502      	bpl.n	8014c48 <_printf_float+0x194>
 8014c42:	3301      	adds	r3, #1
 8014c44:	440b      	add	r3, r1
 8014c46:	6123      	str	r3, [r4, #16]
 8014c48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014c4a:	65a3      	str	r3, [r4, #88]	; 0x58
 8014c4c:	f04f 0900 	mov.w	r9, #0
 8014c50:	e7d9      	b.n	8014c06 <_printf_float+0x152>
 8014c52:	b913      	cbnz	r3, 8014c5a <_printf_float+0x1a6>
 8014c54:	6822      	ldr	r2, [r4, #0]
 8014c56:	07d0      	lsls	r0, r2, #31
 8014c58:	d501      	bpl.n	8014c5e <_printf_float+0x1aa>
 8014c5a:	3302      	adds	r3, #2
 8014c5c:	e7f3      	b.n	8014c46 <_printf_float+0x192>
 8014c5e:	2301      	movs	r3, #1
 8014c60:	e7f1      	b.n	8014c46 <_printf_float+0x192>
 8014c62:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8014c66:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8014c6a:	4293      	cmp	r3, r2
 8014c6c:	db05      	blt.n	8014c7a <_printf_float+0x1c6>
 8014c6e:	6822      	ldr	r2, [r4, #0]
 8014c70:	6123      	str	r3, [r4, #16]
 8014c72:	07d1      	lsls	r1, r2, #31
 8014c74:	d5e8      	bpl.n	8014c48 <_printf_float+0x194>
 8014c76:	3301      	adds	r3, #1
 8014c78:	e7e5      	b.n	8014c46 <_printf_float+0x192>
 8014c7a:	2b00      	cmp	r3, #0
 8014c7c:	bfd4      	ite	le
 8014c7e:	f1c3 0302 	rsble	r3, r3, #2
 8014c82:	2301      	movgt	r3, #1
 8014c84:	4413      	add	r3, r2
 8014c86:	e7de      	b.n	8014c46 <_printf_float+0x192>
 8014c88:	6823      	ldr	r3, [r4, #0]
 8014c8a:	055a      	lsls	r2, r3, #21
 8014c8c:	d407      	bmi.n	8014c9e <_printf_float+0x1ea>
 8014c8e:	6923      	ldr	r3, [r4, #16]
 8014c90:	4642      	mov	r2, r8
 8014c92:	4631      	mov	r1, r6
 8014c94:	4628      	mov	r0, r5
 8014c96:	47b8      	blx	r7
 8014c98:	3001      	adds	r0, #1
 8014c9a:	d12b      	bne.n	8014cf4 <_printf_float+0x240>
 8014c9c:	e767      	b.n	8014b6e <_printf_float+0xba>
 8014c9e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8014ca2:	f240 80dc 	bls.w	8014e5e <_printf_float+0x3aa>
 8014ca6:	2200      	movs	r2, #0
 8014ca8:	2300      	movs	r3, #0
 8014caa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014cae:	f7eb ff23 	bl	8000af8 <__aeabi_dcmpeq>
 8014cb2:	2800      	cmp	r0, #0
 8014cb4:	d033      	beq.n	8014d1e <_printf_float+0x26a>
 8014cb6:	2301      	movs	r3, #1
 8014cb8:	4a41      	ldr	r2, [pc, #260]	; (8014dc0 <_printf_float+0x30c>)
 8014cba:	4631      	mov	r1, r6
 8014cbc:	4628      	mov	r0, r5
 8014cbe:	47b8      	blx	r7
 8014cc0:	3001      	adds	r0, #1
 8014cc2:	f43f af54 	beq.w	8014b6e <_printf_float+0xba>
 8014cc6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014cca:	429a      	cmp	r2, r3
 8014ccc:	db02      	blt.n	8014cd4 <_printf_float+0x220>
 8014cce:	6823      	ldr	r3, [r4, #0]
 8014cd0:	07d8      	lsls	r0, r3, #31
 8014cd2:	d50f      	bpl.n	8014cf4 <_printf_float+0x240>
 8014cd4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014cd8:	4631      	mov	r1, r6
 8014cda:	4628      	mov	r0, r5
 8014cdc:	47b8      	blx	r7
 8014cde:	3001      	adds	r0, #1
 8014ce0:	f43f af45 	beq.w	8014b6e <_printf_float+0xba>
 8014ce4:	f04f 0800 	mov.w	r8, #0
 8014ce8:	f104 091a 	add.w	r9, r4, #26
 8014cec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014cee:	3b01      	subs	r3, #1
 8014cf0:	4543      	cmp	r3, r8
 8014cf2:	dc09      	bgt.n	8014d08 <_printf_float+0x254>
 8014cf4:	6823      	ldr	r3, [r4, #0]
 8014cf6:	079b      	lsls	r3, r3, #30
 8014cf8:	f100 8103 	bmi.w	8014f02 <_printf_float+0x44e>
 8014cfc:	68e0      	ldr	r0, [r4, #12]
 8014cfe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014d00:	4298      	cmp	r0, r3
 8014d02:	bfb8      	it	lt
 8014d04:	4618      	movlt	r0, r3
 8014d06:	e734      	b.n	8014b72 <_printf_float+0xbe>
 8014d08:	2301      	movs	r3, #1
 8014d0a:	464a      	mov	r2, r9
 8014d0c:	4631      	mov	r1, r6
 8014d0e:	4628      	mov	r0, r5
 8014d10:	47b8      	blx	r7
 8014d12:	3001      	adds	r0, #1
 8014d14:	f43f af2b 	beq.w	8014b6e <_printf_float+0xba>
 8014d18:	f108 0801 	add.w	r8, r8, #1
 8014d1c:	e7e6      	b.n	8014cec <_printf_float+0x238>
 8014d1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014d20:	2b00      	cmp	r3, #0
 8014d22:	dc2b      	bgt.n	8014d7c <_printf_float+0x2c8>
 8014d24:	2301      	movs	r3, #1
 8014d26:	4a26      	ldr	r2, [pc, #152]	; (8014dc0 <_printf_float+0x30c>)
 8014d28:	4631      	mov	r1, r6
 8014d2a:	4628      	mov	r0, r5
 8014d2c:	47b8      	blx	r7
 8014d2e:	3001      	adds	r0, #1
 8014d30:	f43f af1d 	beq.w	8014b6e <_printf_float+0xba>
 8014d34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014d36:	b923      	cbnz	r3, 8014d42 <_printf_float+0x28e>
 8014d38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014d3a:	b913      	cbnz	r3, 8014d42 <_printf_float+0x28e>
 8014d3c:	6823      	ldr	r3, [r4, #0]
 8014d3e:	07d9      	lsls	r1, r3, #31
 8014d40:	d5d8      	bpl.n	8014cf4 <_printf_float+0x240>
 8014d42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014d46:	4631      	mov	r1, r6
 8014d48:	4628      	mov	r0, r5
 8014d4a:	47b8      	blx	r7
 8014d4c:	3001      	adds	r0, #1
 8014d4e:	f43f af0e 	beq.w	8014b6e <_printf_float+0xba>
 8014d52:	f04f 0900 	mov.w	r9, #0
 8014d56:	f104 0a1a 	add.w	sl, r4, #26
 8014d5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014d5c:	425b      	negs	r3, r3
 8014d5e:	454b      	cmp	r3, r9
 8014d60:	dc01      	bgt.n	8014d66 <_printf_float+0x2b2>
 8014d62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014d64:	e794      	b.n	8014c90 <_printf_float+0x1dc>
 8014d66:	2301      	movs	r3, #1
 8014d68:	4652      	mov	r2, sl
 8014d6a:	4631      	mov	r1, r6
 8014d6c:	4628      	mov	r0, r5
 8014d6e:	47b8      	blx	r7
 8014d70:	3001      	adds	r0, #1
 8014d72:	f43f aefc 	beq.w	8014b6e <_printf_float+0xba>
 8014d76:	f109 0901 	add.w	r9, r9, #1
 8014d7a:	e7ee      	b.n	8014d5a <_printf_float+0x2a6>
 8014d7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014d7e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014d80:	429a      	cmp	r2, r3
 8014d82:	bfa8      	it	ge
 8014d84:	461a      	movge	r2, r3
 8014d86:	2a00      	cmp	r2, #0
 8014d88:	4691      	mov	r9, r2
 8014d8a:	dd07      	ble.n	8014d9c <_printf_float+0x2e8>
 8014d8c:	4613      	mov	r3, r2
 8014d8e:	4631      	mov	r1, r6
 8014d90:	4642      	mov	r2, r8
 8014d92:	4628      	mov	r0, r5
 8014d94:	47b8      	blx	r7
 8014d96:	3001      	adds	r0, #1
 8014d98:	f43f aee9 	beq.w	8014b6e <_printf_float+0xba>
 8014d9c:	f104 031a 	add.w	r3, r4, #26
 8014da0:	f04f 0b00 	mov.w	fp, #0
 8014da4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014da8:	9306      	str	r3, [sp, #24]
 8014daa:	e015      	b.n	8014dd8 <_printf_float+0x324>
 8014dac:	7fefffff 	.word	0x7fefffff
 8014db0:	08019240 	.word	0x08019240
 8014db4:	0801923c 	.word	0x0801923c
 8014db8:	08019248 	.word	0x08019248
 8014dbc:	08019244 	.word	0x08019244
 8014dc0:	08019403 	.word	0x08019403
 8014dc4:	2301      	movs	r3, #1
 8014dc6:	9a06      	ldr	r2, [sp, #24]
 8014dc8:	4631      	mov	r1, r6
 8014dca:	4628      	mov	r0, r5
 8014dcc:	47b8      	blx	r7
 8014dce:	3001      	adds	r0, #1
 8014dd0:	f43f aecd 	beq.w	8014b6e <_printf_float+0xba>
 8014dd4:	f10b 0b01 	add.w	fp, fp, #1
 8014dd8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8014ddc:	ebaa 0309 	sub.w	r3, sl, r9
 8014de0:	455b      	cmp	r3, fp
 8014de2:	dcef      	bgt.n	8014dc4 <_printf_float+0x310>
 8014de4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014de8:	429a      	cmp	r2, r3
 8014dea:	44d0      	add	r8, sl
 8014dec:	db15      	blt.n	8014e1a <_printf_float+0x366>
 8014dee:	6823      	ldr	r3, [r4, #0]
 8014df0:	07da      	lsls	r2, r3, #31
 8014df2:	d412      	bmi.n	8014e1a <_printf_float+0x366>
 8014df4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014df6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014df8:	eba3 020a 	sub.w	r2, r3, sl
 8014dfc:	eba3 0a01 	sub.w	sl, r3, r1
 8014e00:	4592      	cmp	sl, r2
 8014e02:	bfa8      	it	ge
 8014e04:	4692      	movge	sl, r2
 8014e06:	f1ba 0f00 	cmp.w	sl, #0
 8014e0a:	dc0e      	bgt.n	8014e2a <_printf_float+0x376>
 8014e0c:	f04f 0800 	mov.w	r8, #0
 8014e10:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014e14:	f104 091a 	add.w	r9, r4, #26
 8014e18:	e019      	b.n	8014e4e <_printf_float+0x39a>
 8014e1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014e1e:	4631      	mov	r1, r6
 8014e20:	4628      	mov	r0, r5
 8014e22:	47b8      	blx	r7
 8014e24:	3001      	adds	r0, #1
 8014e26:	d1e5      	bne.n	8014df4 <_printf_float+0x340>
 8014e28:	e6a1      	b.n	8014b6e <_printf_float+0xba>
 8014e2a:	4653      	mov	r3, sl
 8014e2c:	4642      	mov	r2, r8
 8014e2e:	4631      	mov	r1, r6
 8014e30:	4628      	mov	r0, r5
 8014e32:	47b8      	blx	r7
 8014e34:	3001      	adds	r0, #1
 8014e36:	d1e9      	bne.n	8014e0c <_printf_float+0x358>
 8014e38:	e699      	b.n	8014b6e <_printf_float+0xba>
 8014e3a:	2301      	movs	r3, #1
 8014e3c:	464a      	mov	r2, r9
 8014e3e:	4631      	mov	r1, r6
 8014e40:	4628      	mov	r0, r5
 8014e42:	47b8      	blx	r7
 8014e44:	3001      	adds	r0, #1
 8014e46:	f43f ae92 	beq.w	8014b6e <_printf_float+0xba>
 8014e4a:	f108 0801 	add.w	r8, r8, #1
 8014e4e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014e52:	1a9b      	subs	r3, r3, r2
 8014e54:	eba3 030a 	sub.w	r3, r3, sl
 8014e58:	4543      	cmp	r3, r8
 8014e5a:	dcee      	bgt.n	8014e3a <_printf_float+0x386>
 8014e5c:	e74a      	b.n	8014cf4 <_printf_float+0x240>
 8014e5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014e60:	2a01      	cmp	r2, #1
 8014e62:	dc01      	bgt.n	8014e68 <_printf_float+0x3b4>
 8014e64:	07db      	lsls	r3, r3, #31
 8014e66:	d53a      	bpl.n	8014ede <_printf_float+0x42a>
 8014e68:	2301      	movs	r3, #1
 8014e6a:	4642      	mov	r2, r8
 8014e6c:	4631      	mov	r1, r6
 8014e6e:	4628      	mov	r0, r5
 8014e70:	47b8      	blx	r7
 8014e72:	3001      	adds	r0, #1
 8014e74:	f43f ae7b 	beq.w	8014b6e <_printf_float+0xba>
 8014e78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014e7c:	4631      	mov	r1, r6
 8014e7e:	4628      	mov	r0, r5
 8014e80:	47b8      	blx	r7
 8014e82:	3001      	adds	r0, #1
 8014e84:	f108 0801 	add.w	r8, r8, #1
 8014e88:	f43f ae71 	beq.w	8014b6e <_printf_float+0xba>
 8014e8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014e8e:	2200      	movs	r2, #0
 8014e90:	f103 3aff 	add.w	sl, r3, #4294967295
 8014e94:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014e98:	2300      	movs	r3, #0
 8014e9a:	f7eb fe2d 	bl	8000af8 <__aeabi_dcmpeq>
 8014e9e:	b9c8      	cbnz	r0, 8014ed4 <_printf_float+0x420>
 8014ea0:	4653      	mov	r3, sl
 8014ea2:	4642      	mov	r2, r8
 8014ea4:	4631      	mov	r1, r6
 8014ea6:	4628      	mov	r0, r5
 8014ea8:	47b8      	blx	r7
 8014eaa:	3001      	adds	r0, #1
 8014eac:	d10e      	bne.n	8014ecc <_printf_float+0x418>
 8014eae:	e65e      	b.n	8014b6e <_printf_float+0xba>
 8014eb0:	2301      	movs	r3, #1
 8014eb2:	4652      	mov	r2, sl
 8014eb4:	4631      	mov	r1, r6
 8014eb6:	4628      	mov	r0, r5
 8014eb8:	47b8      	blx	r7
 8014eba:	3001      	adds	r0, #1
 8014ebc:	f43f ae57 	beq.w	8014b6e <_printf_float+0xba>
 8014ec0:	f108 0801 	add.w	r8, r8, #1
 8014ec4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014ec6:	3b01      	subs	r3, #1
 8014ec8:	4543      	cmp	r3, r8
 8014eca:	dcf1      	bgt.n	8014eb0 <_printf_float+0x3fc>
 8014ecc:	464b      	mov	r3, r9
 8014ece:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8014ed2:	e6de      	b.n	8014c92 <_printf_float+0x1de>
 8014ed4:	f04f 0800 	mov.w	r8, #0
 8014ed8:	f104 0a1a 	add.w	sl, r4, #26
 8014edc:	e7f2      	b.n	8014ec4 <_printf_float+0x410>
 8014ede:	2301      	movs	r3, #1
 8014ee0:	e7df      	b.n	8014ea2 <_printf_float+0x3ee>
 8014ee2:	2301      	movs	r3, #1
 8014ee4:	464a      	mov	r2, r9
 8014ee6:	4631      	mov	r1, r6
 8014ee8:	4628      	mov	r0, r5
 8014eea:	47b8      	blx	r7
 8014eec:	3001      	adds	r0, #1
 8014eee:	f43f ae3e 	beq.w	8014b6e <_printf_float+0xba>
 8014ef2:	f108 0801 	add.w	r8, r8, #1
 8014ef6:	68e3      	ldr	r3, [r4, #12]
 8014ef8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014efa:	1a9b      	subs	r3, r3, r2
 8014efc:	4543      	cmp	r3, r8
 8014efe:	dcf0      	bgt.n	8014ee2 <_printf_float+0x42e>
 8014f00:	e6fc      	b.n	8014cfc <_printf_float+0x248>
 8014f02:	f04f 0800 	mov.w	r8, #0
 8014f06:	f104 0919 	add.w	r9, r4, #25
 8014f0a:	e7f4      	b.n	8014ef6 <_printf_float+0x442>
 8014f0c:	2900      	cmp	r1, #0
 8014f0e:	f43f ae8b 	beq.w	8014c28 <_printf_float+0x174>
 8014f12:	2300      	movs	r3, #0
 8014f14:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8014f18:	ab09      	add	r3, sp, #36	; 0x24
 8014f1a:	9300      	str	r3, [sp, #0]
 8014f1c:	ec49 8b10 	vmov	d0, r8, r9
 8014f20:	6022      	str	r2, [r4, #0]
 8014f22:	f8cd a004 	str.w	sl, [sp, #4]
 8014f26:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8014f2a:	4628      	mov	r0, r5
 8014f2c:	f7ff fd2e 	bl	801498c <__cvt>
 8014f30:	4680      	mov	r8, r0
 8014f32:	e648      	b.n	8014bc6 <_printf_float+0x112>

08014f34 <_printf_common>:
 8014f34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014f38:	4691      	mov	r9, r2
 8014f3a:	461f      	mov	r7, r3
 8014f3c:	688a      	ldr	r2, [r1, #8]
 8014f3e:	690b      	ldr	r3, [r1, #16]
 8014f40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014f44:	4293      	cmp	r3, r2
 8014f46:	bfb8      	it	lt
 8014f48:	4613      	movlt	r3, r2
 8014f4a:	f8c9 3000 	str.w	r3, [r9]
 8014f4e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014f52:	4606      	mov	r6, r0
 8014f54:	460c      	mov	r4, r1
 8014f56:	b112      	cbz	r2, 8014f5e <_printf_common+0x2a>
 8014f58:	3301      	adds	r3, #1
 8014f5a:	f8c9 3000 	str.w	r3, [r9]
 8014f5e:	6823      	ldr	r3, [r4, #0]
 8014f60:	0699      	lsls	r1, r3, #26
 8014f62:	bf42      	ittt	mi
 8014f64:	f8d9 3000 	ldrmi.w	r3, [r9]
 8014f68:	3302      	addmi	r3, #2
 8014f6a:	f8c9 3000 	strmi.w	r3, [r9]
 8014f6e:	6825      	ldr	r5, [r4, #0]
 8014f70:	f015 0506 	ands.w	r5, r5, #6
 8014f74:	d107      	bne.n	8014f86 <_printf_common+0x52>
 8014f76:	f104 0a19 	add.w	sl, r4, #25
 8014f7a:	68e3      	ldr	r3, [r4, #12]
 8014f7c:	f8d9 2000 	ldr.w	r2, [r9]
 8014f80:	1a9b      	subs	r3, r3, r2
 8014f82:	42ab      	cmp	r3, r5
 8014f84:	dc28      	bgt.n	8014fd8 <_printf_common+0xa4>
 8014f86:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8014f8a:	6822      	ldr	r2, [r4, #0]
 8014f8c:	3300      	adds	r3, #0
 8014f8e:	bf18      	it	ne
 8014f90:	2301      	movne	r3, #1
 8014f92:	0692      	lsls	r2, r2, #26
 8014f94:	d42d      	bmi.n	8014ff2 <_printf_common+0xbe>
 8014f96:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014f9a:	4639      	mov	r1, r7
 8014f9c:	4630      	mov	r0, r6
 8014f9e:	47c0      	blx	r8
 8014fa0:	3001      	adds	r0, #1
 8014fa2:	d020      	beq.n	8014fe6 <_printf_common+0xb2>
 8014fa4:	6823      	ldr	r3, [r4, #0]
 8014fa6:	68e5      	ldr	r5, [r4, #12]
 8014fa8:	f8d9 2000 	ldr.w	r2, [r9]
 8014fac:	f003 0306 	and.w	r3, r3, #6
 8014fb0:	2b04      	cmp	r3, #4
 8014fb2:	bf08      	it	eq
 8014fb4:	1aad      	subeq	r5, r5, r2
 8014fb6:	68a3      	ldr	r3, [r4, #8]
 8014fb8:	6922      	ldr	r2, [r4, #16]
 8014fba:	bf0c      	ite	eq
 8014fbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014fc0:	2500      	movne	r5, #0
 8014fc2:	4293      	cmp	r3, r2
 8014fc4:	bfc4      	itt	gt
 8014fc6:	1a9b      	subgt	r3, r3, r2
 8014fc8:	18ed      	addgt	r5, r5, r3
 8014fca:	f04f 0900 	mov.w	r9, #0
 8014fce:	341a      	adds	r4, #26
 8014fd0:	454d      	cmp	r5, r9
 8014fd2:	d11a      	bne.n	801500a <_printf_common+0xd6>
 8014fd4:	2000      	movs	r0, #0
 8014fd6:	e008      	b.n	8014fea <_printf_common+0xb6>
 8014fd8:	2301      	movs	r3, #1
 8014fda:	4652      	mov	r2, sl
 8014fdc:	4639      	mov	r1, r7
 8014fde:	4630      	mov	r0, r6
 8014fe0:	47c0      	blx	r8
 8014fe2:	3001      	adds	r0, #1
 8014fe4:	d103      	bne.n	8014fee <_printf_common+0xba>
 8014fe6:	f04f 30ff 	mov.w	r0, #4294967295
 8014fea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014fee:	3501      	adds	r5, #1
 8014ff0:	e7c3      	b.n	8014f7a <_printf_common+0x46>
 8014ff2:	18e1      	adds	r1, r4, r3
 8014ff4:	1c5a      	adds	r2, r3, #1
 8014ff6:	2030      	movs	r0, #48	; 0x30
 8014ff8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014ffc:	4422      	add	r2, r4
 8014ffe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015002:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015006:	3302      	adds	r3, #2
 8015008:	e7c5      	b.n	8014f96 <_printf_common+0x62>
 801500a:	2301      	movs	r3, #1
 801500c:	4622      	mov	r2, r4
 801500e:	4639      	mov	r1, r7
 8015010:	4630      	mov	r0, r6
 8015012:	47c0      	blx	r8
 8015014:	3001      	adds	r0, #1
 8015016:	d0e6      	beq.n	8014fe6 <_printf_common+0xb2>
 8015018:	f109 0901 	add.w	r9, r9, #1
 801501c:	e7d8      	b.n	8014fd0 <_printf_common+0x9c>
	...

08015020 <_printf_i>:
 8015020:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015024:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8015028:	460c      	mov	r4, r1
 801502a:	7e09      	ldrb	r1, [r1, #24]
 801502c:	b085      	sub	sp, #20
 801502e:	296e      	cmp	r1, #110	; 0x6e
 8015030:	4617      	mov	r7, r2
 8015032:	4606      	mov	r6, r0
 8015034:	4698      	mov	r8, r3
 8015036:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015038:	f000 80b3 	beq.w	80151a2 <_printf_i+0x182>
 801503c:	d822      	bhi.n	8015084 <_printf_i+0x64>
 801503e:	2963      	cmp	r1, #99	; 0x63
 8015040:	d036      	beq.n	80150b0 <_printf_i+0x90>
 8015042:	d80a      	bhi.n	801505a <_printf_i+0x3a>
 8015044:	2900      	cmp	r1, #0
 8015046:	f000 80b9 	beq.w	80151bc <_printf_i+0x19c>
 801504a:	2958      	cmp	r1, #88	; 0x58
 801504c:	f000 8083 	beq.w	8015156 <_printf_i+0x136>
 8015050:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015054:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8015058:	e032      	b.n	80150c0 <_printf_i+0xa0>
 801505a:	2964      	cmp	r1, #100	; 0x64
 801505c:	d001      	beq.n	8015062 <_printf_i+0x42>
 801505e:	2969      	cmp	r1, #105	; 0x69
 8015060:	d1f6      	bne.n	8015050 <_printf_i+0x30>
 8015062:	6820      	ldr	r0, [r4, #0]
 8015064:	6813      	ldr	r3, [r2, #0]
 8015066:	0605      	lsls	r5, r0, #24
 8015068:	f103 0104 	add.w	r1, r3, #4
 801506c:	d52a      	bpl.n	80150c4 <_printf_i+0xa4>
 801506e:	681b      	ldr	r3, [r3, #0]
 8015070:	6011      	str	r1, [r2, #0]
 8015072:	2b00      	cmp	r3, #0
 8015074:	da03      	bge.n	801507e <_printf_i+0x5e>
 8015076:	222d      	movs	r2, #45	; 0x2d
 8015078:	425b      	negs	r3, r3
 801507a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801507e:	486f      	ldr	r0, [pc, #444]	; (801523c <_printf_i+0x21c>)
 8015080:	220a      	movs	r2, #10
 8015082:	e039      	b.n	80150f8 <_printf_i+0xd8>
 8015084:	2973      	cmp	r1, #115	; 0x73
 8015086:	f000 809d 	beq.w	80151c4 <_printf_i+0x1a4>
 801508a:	d808      	bhi.n	801509e <_printf_i+0x7e>
 801508c:	296f      	cmp	r1, #111	; 0x6f
 801508e:	d020      	beq.n	80150d2 <_printf_i+0xb2>
 8015090:	2970      	cmp	r1, #112	; 0x70
 8015092:	d1dd      	bne.n	8015050 <_printf_i+0x30>
 8015094:	6823      	ldr	r3, [r4, #0]
 8015096:	f043 0320 	orr.w	r3, r3, #32
 801509a:	6023      	str	r3, [r4, #0]
 801509c:	e003      	b.n	80150a6 <_printf_i+0x86>
 801509e:	2975      	cmp	r1, #117	; 0x75
 80150a0:	d017      	beq.n	80150d2 <_printf_i+0xb2>
 80150a2:	2978      	cmp	r1, #120	; 0x78
 80150a4:	d1d4      	bne.n	8015050 <_printf_i+0x30>
 80150a6:	2378      	movs	r3, #120	; 0x78
 80150a8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80150ac:	4864      	ldr	r0, [pc, #400]	; (8015240 <_printf_i+0x220>)
 80150ae:	e055      	b.n	801515c <_printf_i+0x13c>
 80150b0:	6813      	ldr	r3, [r2, #0]
 80150b2:	1d19      	adds	r1, r3, #4
 80150b4:	681b      	ldr	r3, [r3, #0]
 80150b6:	6011      	str	r1, [r2, #0]
 80150b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80150bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80150c0:	2301      	movs	r3, #1
 80150c2:	e08c      	b.n	80151de <_printf_i+0x1be>
 80150c4:	681b      	ldr	r3, [r3, #0]
 80150c6:	6011      	str	r1, [r2, #0]
 80150c8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80150cc:	bf18      	it	ne
 80150ce:	b21b      	sxthne	r3, r3
 80150d0:	e7cf      	b.n	8015072 <_printf_i+0x52>
 80150d2:	6813      	ldr	r3, [r2, #0]
 80150d4:	6825      	ldr	r5, [r4, #0]
 80150d6:	1d18      	adds	r0, r3, #4
 80150d8:	6010      	str	r0, [r2, #0]
 80150da:	0628      	lsls	r0, r5, #24
 80150dc:	d501      	bpl.n	80150e2 <_printf_i+0xc2>
 80150de:	681b      	ldr	r3, [r3, #0]
 80150e0:	e002      	b.n	80150e8 <_printf_i+0xc8>
 80150e2:	0668      	lsls	r0, r5, #25
 80150e4:	d5fb      	bpl.n	80150de <_printf_i+0xbe>
 80150e6:	881b      	ldrh	r3, [r3, #0]
 80150e8:	4854      	ldr	r0, [pc, #336]	; (801523c <_printf_i+0x21c>)
 80150ea:	296f      	cmp	r1, #111	; 0x6f
 80150ec:	bf14      	ite	ne
 80150ee:	220a      	movne	r2, #10
 80150f0:	2208      	moveq	r2, #8
 80150f2:	2100      	movs	r1, #0
 80150f4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80150f8:	6865      	ldr	r5, [r4, #4]
 80150fa:	60a5      	str	r5, [r4, #8]
 80150fc:	2d00      	cmp	r5, #0
 80150fe:	f2c0 8095 	blt.w	801522c <_printf_i+0x20c>
 8015102:	6821      	ldr	r1, [r4, #0]
 8015104:	f021 0104 	bic.w	r1, r1, #4
 8015108:	6021      	str	r1, [r4, #0]
 801510a:	2b00      	cmp	r3, #0
 801510c:	d13d      	bne.n	801518a <_printf_i+0x16a>
 801510e:	2d00      	cmp	r5, #0
 8015110:	f040 808e 	bne.w	8015230 <_printf_i+0x210>
 8015114:	4665      	mov	r5, ip
 8015116:	2a08      	cmp	r2, #8
 8015118:	d10b      	bne.n	8015132 <_printf_i+0x112>
 801511a:	6823      	ldr	r3, [r4, #0]
 801511c:	07db      	lsls	r3, r3, #31
 801511e:	d508      	bpl.n	8015132 <_printf_i+0x112>
 8015120:	6923      	ldr	r3, [r4, #16]
 8015122:	6862      	ldr	r2, [r4, #4]
 8015124:	429a      	cmp	r2, r3
 8015126:	bfde      	ittt	le
 8015128:	2330      	movle	r3, #48	; 0x30
 801512a:	f805 3c01 	strble.w	r3, [r5, #-1]
 801512e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8015132:	ebac 0305 	sub.w	r3, ip, r5
 8015136:	6123      	str	r3, [r4, #16]
 8015138:	f8cd 8000 	str.w	r8, [sp]
 801513c:	463b      	mov	r3, r7
 801513e:	aa03      	add	r2, sp, #12
 8015140:	4621      	mov	r1, r4
 8015142:	4630      	mov	r0, r6
 8015144:	f7ff fef6 	bl	8014f34 <_printf_common>
 8015148:	3001      	adds	r0, #1
 801514a:	d14d      	bne.n	80151e8 <_printf_i+0x1c8>
 801514c:	f04f 30ff 	mov.w	r0, #4294967295
 8015150:	b005      	add	sp, #20
 8015152:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015156:	4839      	ldr	r0, [pc, #228]	; (801523c <_printf_i+0x21c>)
 8015158:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801515c:	6813      	ldr	r3, [r2, #0]
 801515e:	6821      	ldr	r1, [r4, #0]
 8015160:	1d1d      	adds	r5, r3, #4
 8015162:	681b      	ldr	r3, [r3, #0]
 8015164:	6015      	str	r5, [r2, #0]
 8015166:	060a      	lsls	r2, r1, #24
 8015168:	d50b      	bpl.n	8015182 <_printf_i+0x162>
 801516a:	07ca      	lsls	r2, r1, #31
 801516c:	bf44      	itt	mi
 801516e:	f041 0120 	orrmi.w	r1, r1, #32
 8015172:	6021      	strmi	r1, [r4, #0]
 8015174:	b91b      	cbnz	r3, 801517e <_printf_i+0x15e>
 8015176:	6822      	ldr	r2, [r4, #0]
 8015178:	f022 0220 	bic.w	r2, r2, #32
 801517c:	6022      	str	r2, [r4, #0]
 801517e:	2210      	movs	r2, #16
 8015180:	e7b7      	b.n	80150f2 <_printf_i+0xd2>
 8015182:	064d      	lsls	r5, r1, #25
 8015184:	bf48      	it	mi
 8015186:	b29b      	uxthmi	r3, r3
 8015188:	e7ef      	b.n	801516a <_printf_i+0x14a>
 801518a:	4665      	mov	r5, ip
 801518c:	fbb3 f1f2 	udiv	r1, r3, r2
 8015190:	fb02 3311 	mls	r3, r2, r1, r3
 8015194:	5cc3      	ldrb	r3, [r0, r3]
 8015196:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801519a:	460b      	mov	r3, r1
 801519c:	2900      	cmp	r1, #0
 801519e:	d1f5      	bne.n	801518c <_printf_i+0x16c>
 80151a0:	e7b9      	b.n	8015116 <_printf_i+0xf6>
 80151a2:	6813      	ldr	r3, [r2, #0]
 80151a4:	6825      	ldr	r5, [r4, #0]
 80151a6:	6961      	ldr	r1, [r4, #20]
 80151a8:	1d18      	adds	r0, r3, #4
 80151aa:	6010      	str	r0, [r2, #0]
 80151ac:	0628      	lsls	r0, r5, #24
 80151ae:	681b      	ldr	r3, [r3, #0]
 80151b0:	d501      	bpl.n	80151b6 <_printf_i+0x196>
 80151b2:	6019      	str	r1, [r3, #0]
 80151b4:	e002      	b.n	80151bc <_printf_i+0x19c>
 80151b6:	066a      	lsls	r2, r5, #25
 80151b8:	d5fb      	bpl.n	80151b2 <_printf_i+0x192>
 80151ba:	8019      	strh	r1, [r3, #0]
 80151bc:	2300      	movs	r3, #0
 80151be:	6123      	str	r3, [r4, #16]
 80151c0:	4665      	mov	r5, ip
 80151c2:	e7b9      	b.n	8015138 <_printf_i+0x118>
 80151c4:	6813      	ldr	r3, [r2, #0]
 80151c6:	1d19      	adds	r1, r3, #4
 80151c8:	6011      	str	r1, [r2, #0]
 80151ca:	681d      	ldr	r5, [r3, #0]
 80151cc:	6862      	ldr	r2, [r4, #4]
 80151ce:	2100      	movs	r1, #0
 80151d0:	4628      	mov	r0, r5
 80151d2:	f7eb f81d 	bl	8000210 <memchr>
 80151d6:	b108      	cbz	r0, 80151dc <_printf_i+0x1bc>
 80151d8:	1b40      	subs	r0, r0, r5
 80151da:	6060      	str	r0, [r4, #4]
 80151dc:	6863      	ldr	r3, [r4, #4]
 80151de:	6123      	str	r3, [r4, #16]
 80151e0:	2300      	movs	r3, #0
 80151e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80151e6:	e7a7      	b.n	8015138 <_printf_i+0x118>
 80151e8:	6923      	ldr	r3, [r4, #16]
 80151ea:	462a      	mov	r2, r5
 80151ec:	4639      	mov	r1, r7
 80151ee:	4630      	mov	r0, r6
 80151f0:	47c0      	blx	r8
 80151f2:	3001      	adds	r0, #1
 80151f4:	d0aa      	beq.n	801514c <_printf_i+0x12c>
 80151f6:	6823      	ldr	r3, [r4, #0]
 80151f8:	079b      	lsls	r3, r3, #30
 80151fa:	d413      	bmi.n	8015224 <_printf_i+0x204>
 80151fc:	68e0      	ldr	r0, [r4, #12]
 80151fe:	9b03      	ldr	r3, [sp, #12]
 8015200:	4298      	cmp	r0, r3
 8015202:	bfb8      	it	lt
 8015204:	4618      	movlt	r0, r3
 8015206:	e7a3      	b.n	8015150 <_printf_i+0x130>
 8015208:	2301      	movs	r3, #1
 801520a:	464a      	mov	r2, r9
 801520c:	4639      	mov	r1, r7
 801520e:	4630      	mov	r0, r6
 8015210:	47c0      	blx	r8
 8015212:	3001      	adds	r0, #1
 8015214:	d09a      	beq.n	801514c <_printf_i+0x12c>
 8015216:	3501      	adds	r5, #1
 8015218:	68e3      	ldr	r3, [r4, #12]
 801521a:	9a03      	ldr	r2, [sp, #12]
 801521c:	1a9b      	subs	r3, r3, r2
 801521e:	42ab      	cmp	r3, r5
 8015220:	dcf2      	bgt.n	8015208 <_printf_i+0x1e8>
 8015222:	e7eb      	b.n	80151fc <_printf_i+0x1dc>
 8015224:	2500      	movs	r5, #0
 8015226:	f104 0919 	add.w	r9, r4, #25
 801522a:	e7f5      	b.n	8015218 <_printf_i+0x1f8>
 801522c:	2b00      	cmp	r3, #0
 801522e:	d1ac      	bne.n	801518a <_printf_i+0x16a>
 8015230:	7803      	ldrb	r3, [r0, #0]
 8015232:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015236:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801523a:	e76c      	b.n	8015116 <_printf_i+0xf6>
 801523c:	0801924c 	.word	0x0801924c
 8015240:	0801925d 	.word	0x0801925d

08015244 <_scanf_float>:
 8015244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015248:	469a      	mov	sl, r3
 801524a:	688b      	ldr	r3, [r1, #8]
 801524c:	4616      	mov	r6, r2
 801524e:	1e5a      	subs	r2, r3, #1
 8015250:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8015254:	b087      	sub	sp, #28
 8015256:	bf83      	ittte	hi
 8015258:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 801525c:	189b      	addhi	r3, r3, r2
 801525e:	9301      	strhi	r3, [sp, #4]
 8015260:	2300      	movls	r3, #0
 8015262:	bf86      	itte	hi
 8015264:	f240 135d 	movwhi	r3, #349	; 0x15d
 8015268:	608b      	strhi	r3, [r1, #8]
 801526a:	9301      	strls	r3, [sp, #4]
 801526c:	680b      	ldr	r3, [r1, #0]
 801526e:	4688      	mov	r8, r1
 8015270:	f04f 0b00 	mov.w	fp, #0
 8015274:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8015278:	f848 3b1c 	str.w	r3, [r8], #28
 801527c:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8015280:	4607      	mov	r7, r0
 8015282:	460c      	mov	r4, r1
 8015284:	4645      	mov	r5, r8
 8015286:	465a      	mov	r2, fp
 8015288:	46d9      	mov	r9, fp
 801528a:	f8cd b008 	str.w	fp, [sp, #8]
 801528e:	68a1      	ldr	r1, [r4, #8]
 8015290:	b181      	cbz	r1, 80152b4 <_scanf_float+0x70>
 8015292:	6833      	ldr	r3, [r6, #0]
 8015294:	781b      	ldrb	r3, [r3, #0]
 8015296:	2b49      	cmp	r3, #73	; 0x49
 8015298:	d071      	beq.n	801537e <_scanf_float+0x13a>
 801529a:	d84d      	bhi.n	8015338 <_scanf_float+0xf4>
 801529c:	2b39      	cmp	r3, #57	; 0x39
 801529e:	d840      	bhi.n	8015322 <_scanf_float+0xde>
 80152a0:	2b31      	cmp	r3, #49	; 0x31
 80152a2:	f080 8088 	bcs.w	80153b6 <_scanf_float+0x172>
 80152a6:	2b2d      	cmp	r3, #45	; 0x2d
 80152a8:	f000 8090 	beq.w	80153cc <_scanf_float+0x188>
 80152ac:	d815      	bhi.n	80152da <_scanf_float+0x96>
 80152ae:	2b2b      	cmp	r3, #43	; 0x2b
 80152b0:	f000 808c 	beq.w	80153cc <_scanf_float+0x188>
 80152b4:	f1b9 0f00 	cmp.w	r9, #0
 80152b8:	d003      	beq.n	80152c2 <_scanf_float+0x7e>
 80152ba:	6823      	ldr	r3, [r4, #0]
 80152bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80152c0:	6023      	str	r3, [r4, #0]
 80152c2:	3a01      	subs	r2, #1
 80152c4:	2a01      	cmp	r2, #1
 80152c6:	f200 80ea 	bhi.w	801549e <_scanf_float+0x25a>
 80152ca:	4545      	cmp	r5, r8
 80152cc:	f200 80dc 	bhi.w	8015488 <_scanf_float+0x244>
 80152d0:	2601      	movs	r6, #1
 80152d2:	4630      	mov	r0, r6
 80152d4:	b007      	add	sp, #28
 80152d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80152da:	2b2e      	cmp	r3, #46	; 0x2e
 80152dc:	f000 809f 	beq.w	801541e <_scanf_float+0x1da>
 80152e0:	2b30      	cmp	r3, #48	; 0x30
 80152e2:	d1e7      	bne.n	80152b4 <_scanf_float+0x70>
 80152e4:	6820      	ldr	r0, [r4, #0]
 80152e6:	f410 7f80 	tst.w	r0, #256	; 0x100
 80152ea:	d064      	beq.n	80153b6 <_scanf_float+0x172>
 80152ec:	9b01      	ldr	r3, [sp, #4]
 80152ee:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 80152f2:	6020      	str	r0, [r4, #0]
 80152f4:	f109 0901 	add.w	r9, r9, #1
 80152f8:	b11b      	cbz	r3, 8015302 <_scanf_float+0xbe>
 80152fa:	3b01      	subs	r3, #1
 80152fc:	3101      	adds	r1, #1
 80152fe:	9301      	str	r3, [sp, #4]
 8015300:	60a1      	str	r1, [r4, #8]
 8015302:	68a3      	ldr	r3, [r4, #8]
 8015304:	3b01      	subs	r3, #1
 8015306:	60a3      	str	r3, [r4, #8]
 8015308:	6923      	ldr	r3, [r4, #16]
 801530a:	3301      	adds	r3, #1
 801530c:	6123      	str	r3, [r4, #16]
 801530e:	6873      	ldr	r3, [r6, #4]
 8015310:	3b01      	subs	r3, #1
 8015312:	2b00      	cmp	r3, #0
 8015314:	6073      	str	r3, [r6, #4]
 8015316:	f340 80ac 	ble.w	8015472 <_scanf_float+0x22e>
 801531a:	6833      	ldr	r3, [r6, #0]
 801531c:	3301      	adds	r3, #1
 801531e:	6033      	str	r3, [r6, #0]
 8015320:	e7b5      	b.n	801528e <_scanf_float+0x4a>
 8015322:	2b45      	cmp	r3, #69	; 0x45
 8015324:	f000 8085 	beq.w	8015432 <_scanf_float+0x1ee>
 8015328:	2b46      	cmp	r3, #70	; 0x46
 801532a:	d06a      	beq.n	8015402 <_scanf_float+0x1be>
 801532c:	2b41      	cmp	r3, #65	; 0x41
 801532e:	d1c1      	bne.n	80152b4 <_scanf_float+0x70>
 8015330:	2a01      	cmp	r2, #1
 8015332:	d1bf      	bne.n	80152b4 <_scanf_float+0x70>
 8015334:	2202      	movs	r2, #2
 8015336:	e046      	b.n	80153c6 <_scanf_float+0x182>
 8015338:	2b65      	cmp	r3, #101	; 0x65
 801533a:	d07a      	beq.n	8015432 <_scanf_float+0x1ee>
 801533c:	d818      	bhi.n	8015370 <_scanf_float+0x12c>
 801533e:	2b54      	cmp	r3, #84	; 0x54
 8015340:	d066      	beq.n	8015410 <_scanf_float+0x1cc>
 8015342:	d811      	bhi.n	8015368 <_scanf_float+0x124>
 8015344:	2b4e      	cmp	r3, #78	; 0x4e
 8015346:	d1b5      	bne.n	80152b4 <_scanf_float+0x70>
 8015348:	2a00      	cmp	r2, #0
 801534a:	d146      	bne.n	80153da <_scanf_float+0x196>
 801534c:	f1b9 0f00 	cmp.w	r9, #0
 8015350:	d145      	bne.n	80153de <_scanf_float+0x19a>
 8015352:	6821      	ldr	r1, [r4, #0]
 8015354:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8015358:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 801535c:	d13f      	bne.n	80153de <_scanf_float+0x19a>
 801535e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8015362:	6021      	str	r1, [r4, #0]
 8015364:	2201      	movs	r2, #1
 8015366:	e02e      	b.n	80153c6 <_scanf_float+0x182>
 8015368:	2b59      	cmp	r3, #89	; 0x59
 801536a:	d01e      	beq.n	80153aa <_scanf_float+0x166>
 801536c:	2b61      	cmp	r3, #97	; 0x61
 801536e:	e7de      	b.n	801532e <_scanf_float+0xea>
 8015370:	2b6e      	cmp	r3, #110	; 0x6e
 8015372:	d0e9      	beq.n	8015348 <_scanf_float+0x104>
 8015374:	d815      	bhi.n	80153a2 <_scanf_float+0x15e>
 8015376:	2b66      	cmp	r3, #102	; 0x66
 8015378:	d043      	beq.n	8015402 <_scanf_float+0x1be>
 801537a:	2b69      	cmp	r3, #105	; 0x69
 801537c:	d19a      	bne.n	80152b4 <_scanf_float+0x70>
 801537e:	f1bb 0f00 	cmp.w	fp, #0
 8015382:	d138      	bne.n	80153f6 <_scanf_float+0x1b2>
 8015384:	f1b9 0f00 	cmp.w	r9, #0
 8015388:	d197      	bne.n	80152ba <_scanf_float+0x76>
 801538a:	6821      	ldr	r1, [r4, #0]
 801538c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8015390:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8015394:	d195      	bne.n	80152c2 <_scanf_float+0x7e>
 8015396:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801539a:	6021      	str	r1, [r4, #0]
 801539c:	f04f 0b01 	mov.w	fp, #1
 80153a0:	e011      	b.n	80153c6 <_scanf_float+0x182>
 80153a2:	2b74      	cmp	r3, #116	; 0x74
 80153a4:	d034      	beq.n	8015410 <_scanf_float+0x1cc>
 80153a6:	2b79      	cmp	r3, #121	; 0x79
 80153a8:	d184      	bne.n	80152b4 <_scanf_float+0x70>
 80153aa:	f1bb 0f07 	cmp.w	fp, #7
 80153ae:	d181      	bne.n	80152b4 <_scanf_float+0x70>
 80153b0:	f04f 0b08 	mov.w	fp, #8
 80153b4:	e007      	b.n	80153c6 <_scanf_float+0x182>
 80153b6:	eb12 0f0b 	cmn.w	r2, fp
 80153ba:	f47f af7b 	bne.w	80152b4 <_scanf_float+0x70>
 80153be:	6821      	ldr	r1, [r4, #0]
 80153c0:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 80153c4:	6021      	str	r1, [r4, #0]
 80153c6:	702b      	strb	r3, [r5, #0]
 80153c8:	3501      	adds	r5, #1
 80153ca:	e79a      	b.n	8015302 <_scanf_float+0xbe>
 80153cc:	6821      	ldr	r1, [r4, #0]
 80153ce:	0608      	lsls	r0, r1, #24
 80153d0:	f57f af70 	bpl.w	80152b4 <_scanf_float+0x70>
 80153d4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80153d8:	e7f4      	b.n	80153c4 <_scanf_float+0x180>
 80153da:	2a02      	cmp	r2, #2
 80153dc:	d047      	beq.n	801546e <_scanf_float+0x22a>
 80153de:	f1bb 0f01 	cmp.w	fp, #1
 80153e2:	d003      	beq.n	80153ec <_scanf_float+0x1a8>
 80153e4:	f1bb 0f04 	cmp.w	fp, #4
 80153e8:	f47f af64 	bne.w	80152b4 <_scanf_float+0x70>
 80153ec:	f10b 0b01 	add.w	fp, fp, #1
 80153f0:	fa5f fb8b 	uxtb.w	fp, fp
 80153f4:	e7e7      	b.n	80153c6 <_scanf_float+0x182>
 80153f6:	f1bb 0f03 	cmp.w	fp, #3
 80153fa:	d0f7      	beq.n	80153ec <_scanf_float+0x1a8>
 80153fc:	f1bb 0f05 	cmp.w	fp, #5
 8015400:	e7f2      	b.n	80153e8 <_scanf_float+0x1a4>
 8015402:	f1bb 0f02 	cmp.w	fp, #2
 8015406:	f47f af55 	bne.w	80152b4 <_scanf_float+0x70>
 801540a:	f04f 0b03 	mov.w	fp, #3
 801540e:	e7da      	b.n	80153c6 <_scanf_float+0x182>
 8015410:	f1bb 0f06 	cmp.w	fp, #6
 8015414:	f47f af4e 	bne.w	80152b4 <_scanf_float+0x70>
 8015418:	f04f 0b07 	mov.w	fp, #7
 801541c:	e7d3      	b.n	80153c6 <_scanf_float+0x182>
 801541e:	6821      	ldr	r1, [r4, #0]
 8015420:	0588      	lsls	r0, r1, #22
 8015422:	f57f af47 	bpl.w	80152b4 <_scanf_float+0x70>
 8015426:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 801542a:	6021      	str	r1, [r4, #0]
 801542c:	f8cd 9008 	str.w	r9, [sp, #8]
 8015430:	e7c9      	b.n	80153c6 <_scanf_float+0x182>
 8015432:	6821      	ldr	r1, [r4, #0]
 8015434:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8015438:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 801543c:	d006      	beq.n	801544c <_scanf_float+0x208>
 801543e:	0548      	lsls	r0, r1, #21
 8015440:	f57f af38 	bpl.w	80152b4 <_scanf_float+0x70>
 8015444:	f1b9 0f00 	cmp.w	r9, #0
 8015448:	f43f af3b 	beq.w	80152c2 <_scanf_float+0x7e>
 801544c:	0588      	lsls	r0, r1, #22
 801544e:	bf58      	it	pl
 8015450:	9802      	ldrpl	r0, [sp, #8]
 8015452:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8015456:	bf58      	it	pl
 8015458:	eba9 0000 	subpl.w	r0, r9, r0
 801545c:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8015460:	bf58      	it	pl
 8015462:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8015466:	6021      	str	r1, [r4, #0]
 8015468:	f04f 0900 	mov.w	r9, #0
 801546c:	e7ab      	b.n	80153c6 <_scanf_float+0x182>
 801546e:	2203      	movs	r2, #3
 8015470:	e7a9      	b.n	80153c6 <_scanf_float+0x182>
 8015472:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8015476:	9205      	str	r2, [sp, #20]
 8015478:	4631      	mov	r1, r6
 801547a:	4638      	mov	r0, r7
 801547c:	4798      	blx	r3
 801547e:	9a05      	ldr	r2, [sp, #20]
 8015480:	2800      	cmp	r0, #0
 8015482:	f43f af04 	beq.w	801528e <_scanf_float+0x4a>
 8015486:	e715      	b.n	80152b4 <_scanf_float+0x70>
 8015488:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801548c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8015490:	4632      	mov	r2, r6
 8015492:	4638      	mov	r0, r7
 8015494:	4798      	blx	r3
 8015496:	6923      	ldr	r3, [r4, #16]
 8015498:	3b01      	subs	r3, #1
 801549a:	6123      	str	r3, [r4, #16]
 801549c:	e715      	b.n	80152ca <_scanf_float+0x86>
 801549e:	f10b 33ff 	add.w	r3, fp, #4294967295
 80154a2:	2b06      	cmp	r3, #6
 80154a4:	d80a      	bhi.n	80154bc <_scanf_float+0x278>
 80154a6:	f1bb 0f02 	cmp.w	fp, #2
 80154aa:	d968      	bls.n	801557e <_scanf_float+0x33a>
 80154ac:	f1ab 0b03 	sub.w	fp, fp, #3
 80154b0:	fa5f fb8b 	uxtb.w	fp, fp
 80154b4:	eba5 0b0b 	sub.w	fp, r5, fp
 80154b8:	455d      	cmp	r5, fp
 80154ba:	d14b      	bne.n	8015554 <_scanf_float+0x310>
 80154bc:	6823      	ldr	r3, [r4, #0]
 80154be:	05da      	lsls	r2, r3, #23
 80154c0:	d51f      	bpl.n	8015502 <_scanf_float+0x2be>
 80154c2:	055b      	lsls	r3, r3, #21
 80154c4:	d468      	bmi.n	8015598 <_scanf_float+0x354>
 80154c6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80154ca:	6923      	ldr	r3, [r4, #16]
 80154cc:	2965      	cmp	r1, #101	; 0x65
 80154ce:	f103 33ff 	add.w	r3, r3, #4294967295
 80154d2:	f105 3bff 	add.w	fp, r5, #4294967295
 80154d6:	6123      	str	r3, [r4, #16]
 80154d8:	d00d      	beq.n	80154f6 <_scanf_float+0x2b2>
 80154da:	2945      	cmp	r1, #69	; 0x45
 80154dc:	d00b      	beq.n	80154f6 <_scanf_float+0x2b2>
 80154de:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80154e2:	4632      	mov	r2, r6
 80154e4:	4638      	mov	r0, r7
 80154e6:	4798      	blx	r3
 80154e8:	6923      	ldr	r3, [r4, #16]
 80154ea:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 80154ee:	3b01      	subs	r3, #1
 80154f0:	f1a5 0b02 	sub.w	fp, r5, #2
 80154f4:	6123      	str	r3, [r4, #16]
 80154f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80154fa:	4632      	mov	r2, r6
 80154fc:	4638      	mov	r0, r7
 80154fe:	4798      	blx	r3
 8015500:	465d      	mov	r5, fp
 8015502:	6826      	ldr	r6, [r4, #0]
 8015504:	f016 0610 	ands.w	r6, r6, #16
 8015508:	d17a      	bne.n	8015600 <_scanf_float+0x3bc>
 801550a:	702e      	strb	r6, [r5, #0]
 801550c:	6823      	ldr	r3, [r4, #0]
 801550e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8015512:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015516:	d142      	bne.n	801559e <_scanf_float+0x35a>
 8015518:	9b02      	ldr	r3, [sp, #8]
 801551a:	eba9 0303 	sub.w	r3, r9, r3
 801551e:	425a      	negs	r2, r3
 8015520:	2b00      	cmp	r3, #0
 8015522:	d149      	bne.n	80155b8 <_scanf_float+0x374>
 8015524:	2200      	movs	r2, #0
 8015526:	4641      	mov	r1, r8
 8015528:	4638      	mov	r0, r7
 801552a:	f000 ff0d 	bl	8016348 <_strtod_r>
 801552e:	6825      	ldr	r5, [r4, #0]
 8015530:	f8da 3000 	ldr.w	r3, [sl]
 8015534:	f015 0f02 	tst.w	r5, #2
 8015538:	f103 0204 	add.w	r2, r3, #4
 801553c:	ec59 8b10 	vmov	r8, r9, d0
 8015540:	f8ca 2000 	str.w	r2, [sl]
 8015544:	d043      	beq.n	80155ce <_scanf_float+0x38a>
 8015546:	681b      	ldr	r3, [r3, #0]
 8015548:	e9c3 8900 	strd	r8, r9, [r3]
 801554c:	68e3      	ldr	r3, [r4, #12]
 801554e:	3301      	adds	r3, #1
 8015550:	60e3      	str	r3, [r4, #12]
 8015552:	e6be      	b.n	80152d2 <_scanf_float+0x8e>
 8015554:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015558:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801555c:	4632      	mov	r2, r6
 801555e:	4638      	mov	r0, r7
 8015560:	4798      	blx	r3
 8015562:	6923      	ldr	r3, [r4, #16]
 8015564:	3b01      	subs	r3, #1
 8015566:	6123      	str	r3, [r4, #16]
 8015568:	e7a6      	b.n	80154b8 <_scanf_float+0x274>
 801556a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801556e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8015572:	4632      	mov	r2, r6
 8015574:	4638      	mov	r0, r7
 8015576:	4798      	blx	r3
 8015578:	6923      	ldr	r3, [r4, #16]
 801557a:	3b01      	subs	r3, #1
 801557c:	6123      	str	r3, [r4, #16]
 801557e:	4545      	cmp	r5, r8
 8015580:	d8f3      	bhi.n	801556a <_scanf_float+0x326>
 8015582:	e6a5      	b.n	80152d0 <_scanf_float+0x8c>
 8015584:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015588:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801558c:	4632      	mov	r2, r6
 801558e:	4638      	mov	r0, r7
 8015590:	4798      	blx	r3
 8015592:	6923      	ldr	r3, [r4, #16]
 8015594:	3b01      	subs	r3, #1
 8015596:	6123      	str	r3, [r4, #16]
 8015598:	4545      	cmp	r5, r8
 801559a:	d8f3      	bhi.n	8015584 <_scanf_float+0x340>
 801559c:	e698      	b.n	80152d0 <_scanf_float+0x8c>
 801559e:	9b03      	ldr	r3, [sp, #12]
 80155a0:	2b00      	cmp	r3, #0
 80155a2:	d0bf      	beq.n	8015524 <_scanf_float+0x2e0>
 80155a4:	9904      	ldr	r1, [sp, #16]
 80155a6:	230a      	movs	r3, #10
 80155a8:	4632      	mov	r2, r6
 80155aa:	3101      	adds	r1, #1
 80155ac:	4638      	mov	r0, r7
 80155ae:	f000 ff57 	bl	8016460 <_strtol_r>
 80155b2:	9b03      	ldr	r3, [sp, #12]
 80155b4:	9d04      	ldr	r5, [sp, #16]
 80155b6:	1ac2      	subs	r2, r0, r3
 80155b8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80155bc:	429d      	cmp	r5, r3
 80155be:	bf28      	it	cs
 80155c0:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 80155c4:	490f      	ldr	r1, [pc, #60]	; (8015604 <_scanf_float+0x3c0>)
 80155c6:	4628      	mov	r0, r5
 80155c8:	f000 f858 	bl	801567c <siprintf>
 80155cc:	e7aa      	b.n	8015524 <_scanf_float+0x2e0>
 80155ce:	f015 0504 	ands.w	r5, r5, #4
 80155d2:	d1b8      	bne.n	8015546 <_scanf_float+0x302>
 80155d4:	681f      	ldr	r7, [r3, #0]
 80155d6:	ee10 2a10 	vmov	r2, s0
 80155da:	464b      	mov	r3, r9
 80155dc:	ee10 0a10 	vmov	r0, s0
 80155e0:	4649      	mov	r1, r9
 80155e2:	f7eb fabb 	bl	8000b5c <__aeabi_dcmpun>
 80155e6:	b128      	cbz	r0, 80155f4 <_scanf_float+0x3b0>
 80155e8:	4628      	mov	r0, r5
 80155ea:	f000 f80d 	bl	8015608 <nanf>
 80155ee:	ed87 0a00 	vstr	s0, [r7]
 80155f2:	e7ab      	b.n	801554c <_scanf_float+0x308>
 80155f4:	4640      	mov	r0, r8
 80155f6:	4649      	mov	r1, r9
 80155f8:	f7eb fb0e 	bl	8000c18 <__aeabi_d2f>
 80155fc:	6038      	str	r0, [r7, #0]
 80155fe:	e7a5      	b.n	801554c <_scanf_float+0x308>
 8015600:	2600      	movs	r6, #0
 8015602:	e666      	b.n	80152d2 <_scanf_float+0x8e>
 8015604:	0801926e 	.word	0x0801926e

08015608 <nanf>:
 8015608:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8015610 <nanf+0x8>
 801560c:	4770      	bx	lr
 801560e:	bf00      	nop
 8015610:	7fc00000 	.word	0x7fc00000

08015614 <sniprintf>:
 8015614:	b40c      	push	{r2, r3}
 8015616:	b530      	push	{r4, r5, lr}
 8015618:	4b17      	ldr	r3, [pc, #92]	; (8015678 <sniprintf+0x64>)
 801561a:	1e0c      	subs	r4, r1, #0
 801561c:	b09d      	sub	sp, #116	; 0x74
 801561e:	681d      	ldr	r5, [r3, #0]
 8015620:	da08      	bge.n	8015634 <sniprintf+0x20>
 8015622:	238b      	movs	r3, #139	; 0x8b
 8015624:	602b      	str	r3, [r5, #0]
 8015626:	f04f 30ff 	mov.w	r0, #4294967295
 801562a:	b01d      	add	sp, #116	; 0x74
 801562c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015630:	b002      	add	sp, #8
 8015632:	4770      	bx	lr
 8015634:	f44f 7302 	mov.w	r3, #520	; 0x208
 8015638:	f8ad 3014 	strh.w	r3, [sp, #20]
 801563c:	bf14      	ite	ne
 801563e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8015642:	4623      	moveq	r3, r4
 8015644:	9304      	str	r3, [sp, #16]
 8015646:	9307      	str	r3, [sp, #28]
 8015648:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801564c:	9002      	str	r0, [sp, #8]
 801564e:	9006      	str	r0, [sp, #24]
 8015650:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015654:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8015656:	ab21      	add	r3, sp, #132	; 0x84
 8015658:	a902      	add	r1, sp, #8
 801565a:	4628      	mov	r0, r5
 801565c:	9301      	str	r3, [sp, #4]
 801565e:	f002 fdf3 	bl	8018248 <_svfiprintf_r>
 8015662:	1c43      	adds	r3, r0, #1
 8015664:	bfbc      	itt	lt
 8015666:	238b      	movlt	r3, #139	; 0x8b
 8015668:	602b      	strlt	r3, [r5, #0]
 801566a:	2c00      	cmp	r4, #0
 801566c:	d0dd      	beq.n	801562a <sniprintf+0x16>
 801566e:	9b02      	ldr	r3, [sp, #8]
 8015670:	2200      	movs	r2, #0
 8015672:	701a      	strb	r2, [r3, #0]
 8015674:	e7d9      	b.n	801562a <sniprintf+0x16>
 8015676:	bf00      	nop
 8015678:	2000000c 	.word	0x2000000c

0801567c <siprintf>:
 801567c:	b40e      	push	{r1, r2, r3}
 801567e:	b500      	push	{lr}
 8015680:	b09c      	sub	sp, #112	; 0x70
 8015682:	ab1d      	add	r3, sp, #116	; 0x74
 8015684:	9002      	str	r0, [sp, #8]
 8015686:	9006      	str	r0, [sp, #24]
 8015688:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801568c:	4809      	ldr	r0, [pc, #36]	; (80156b4 <siprintf+0x38>)
 801568e:	9107      	str	r1, [sp, #28]
 8015690:	9104      	str	r1, [sp, #16]
 8015692:	4909      	ldr	r1, [pc, #36]	; (80156b8 <siprintf+0x3c>)
 8015694:	f853 2b04 	ldr.w	r2, [r3], #4
 8015698:	9105      	str	r1, [sp, #20]
 801569a:	6800      	ldr	r0, [r0, #0]
 801569c:	9301      	str	r3, [sp, #4]
 801569e:	a902      	add	r1, sp, #8
 80156a0:	f002 fdd2 	bl	8018248 <_svfiprintf_r>
 80156a4:	9b02      	ldr	r3, [sp, #8]
 80156a6:	2200      	movs	r2, #0
 80156a8:	701a      	strb	r2, [r3, #0]
 80156aa:	b01c      	add	sp, #112	; 0x70
 80156ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80156b0:	b003      	add	sp, #12
 80156b2:	4770      	bx	lr
 80156b4:	2000000c 	.word	0x2000000c
 80156b8:	ffff0208 	.word	0xffff0208

080156bc <siscanf>:
 80156bc:	b40e      	push	{r1, r2, r3}
 80156be:	b530      	push	{r4, r5, lr}
 80156c0:	b09c      	sub	sp, #112	; 0x70
 80156c2:	ac1f      	add	r4, sp, #124	; 0x7c
 80156c4:	f44f 7201 	mov.w	r2, #516	; 0x204
 80156c8:	f854 5b04 	ldr.w	r5, [r4], #4
 80156cc:	f8ad 2014 	strh.w	r2, [sp, #20]
 80156d0:	9002      	str	r0, [sp, #8]
 80156d2:	9006      	str	r0, [sp, #24]
 80156d4:	f7ea fd94 	bl	8000200 <strlen>
 80156d8:	4b0b      	ldr	r3, [pc, #44]	; (8015708 <siscanf+0x4c>)
 80156da:	9003      	str	r0, [sp, #12]
 80156dc:	9007      	str	r0, [sp, #28]
 80156de:	930b      	str	r3, [sp, #44]	; 0x2c
 80156e0:	480a      	ldr	r0, [pc, #40]	; (801570c <siscanf+0x50>)
 80156e2:	9401      	str	r4, [sp, #4]
 80156e4:	2300      	movs	r3, #0
 80156e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80156e8:	9314      	str	r3, [sp, #80]	; 0x50
 80156ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80156ee:	f8ad 3016 	strh.w	r3, [sp, #22]
 80156f2:	462a      	mov	r2, r5
 80156f4:	4623      	mov	r3, r4
 80156f6:	a902      	add	r1, sp, #8
 80156f8:	6800      	ldr	r0, [r0, #0]
 80156fa:	f002 fef7 	bl	80184ec <__ssvfiscanf_r>
 80156fe:	b01c      	add	sp, #112	; 0x70
 8015700:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015704:	b003      	add	sp, #12
 8015706:	4770      	bx	lr
 8015708:	08015711 	.word	0x08015711
 801570c:	2000000c 	.word	0x2000000c

08015710 <__seofread>:
 8015710:	2000      	movs	r0, #0
 8015712:	4770      	bx	lr

08015714 <strcpy>:
 8015714:	4603      	mov	r3, r0
 8015716:	f811 2b01 	ldrb.w	r2, [r1], #1
 801571a:	f803 2b01 	strb.w	r2, [r3], #1
 801571e:	2a00      	cmp	r2, #0
 8015720:	d1f9      	bne.n	8015716 <strcpy+0x2>
 8015722:	4770      	bx	lr

08015724 <sulp>:
 8015724:	b570      	push	{r4, r5, r6, lr}
 8015726:	4604      	mov	r4, r0
 8015728:	460d      	mov	r5, r1
 801572a:	ec45 4b10 	vmov	d0, r4, r5
 801572e:	4616      	mov	r6, r2
 8015730:	f002 fb46 	bl	8017dc0 <__ulp>
 8015734:	ec51 0b10 	vmov	r0, r1, d0
 8015738:	b17e      	cbz	r6, 801575a <sulp+0x36>
 801573a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801573e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8015742:	2b00      	cmp	r3, #0
 8015744:	dd09      	ble.n	801575a <sulp+0x36>
 8015746:	051b      	lsls	r3, r3, #20
 8015748:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801574c:	2400      	movs	r4, #0
 801574e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8015752:	4622      	mov	r2, r4
 8015754:	462b      	mov	r3, r5
 8015756:	f7ea ff67 	bl	8000628 <__aeabi_dmul>
 801575a:	bd70      	pop	{r4, r5, r6, pc}
 801575c:	0000      	movs	r0, r0
	...

08015760 <_strtod_l>:
 8015760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015764:	461f      	mov	r7, r3
 8015766:	b0a1      	sub	sp, #132	; 0x84
 8015768:	2300      	movs	r3, #0
 801576a:	4681      	mov	r9, r0
 801576c:	4638      	mov	r0, r7
 801576e:	460e      	mov	r6, r1
 8015770:	9217      	str	r2, [sp, #92]	; 0x5c
 8015772:	931c      	str	r3, [sp, #112]	; 0x70
 8015774:	f002 f824 	bl	80177c0 <__localeconv_l>
 8015778:	4680      	mov	r8, r0
 801577a:	6800      	ldr	r0, [r0, #0]
 801577c:	f7ea fd40 	bl	8000200 <strlen>
 8015780:	f04f 0a00 	mov.w	sl, #0
 8015784:	4604      	mov	r4, r0
 8015786:	f04f 0b00 	mov.w	fp, #0
 801578a:	961b      	str	r6, [sp, #108]	; 0x6c
 801578c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801578e:	781a      	ldrb	r2, [r3, #0]
 8015790:	2a0d      	cmp	r2, #13
 8015792:	d832      	bhi.n	80157fa <_strtod_l+0x9a>
 8015794:	2a09      	cmp	r2, #9
 8015796:	d236      	bcs.n	8015806 <_strtod_l+0xa6>
 8015798:	2a00      	cmp	r2, #0
 801579a:	d03e      	beq.n	801581a <_strtod_l+0xba>
 801579c:	2300      	movs	r3, #0
 801579e:	930d      	str	r3, [sp, #52]	; 0x34
 80157a0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80157a2:	782b      	ldrb	r3, [r5, #0]
 80157a4:	2b30      	cmp	r3, #48	; 0x30
 80157a6:	f040 80ac 	bne.w	8015902 <_strtod_l+0x1a2>
 80157aa:	786b      	ldrb	r3, [r5, #1]
 80157ac:	2b58      	cmp	r3, #88	; 0x58
 80157ae:	d001      	beq.n	80157b4 <_strtod_l+0x54>
 80157b0:	2b78      	cmp	r3, #120	; 0x78
 80157b2:	d167      	bne.n	8015884 <_strtod_l+0x124>
 80157b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80157b6:	9301      	str	r3, [sp, #4]
 80157b8:	ab1c      	add	r3, sp, #112	; 0x70
 80157ba:	9300      	str	r3, [sp, #0]
 80157bc:	9702      	str	r7, [sp, #8]
 80157be:	ab1d      	add	r3, sp, #116	; 0x74
 80157c0:	4a88      	ldr	r2, [pc, #544]	; (80159e4 <_strtod_l+0x284>)
 80157c2:	a91b      	add	r1, sp, #108	; 0x6c
 80157c4:	4648      	mov	r0, r9
 80157c6:	f001 fd12 	bl	80171ee <__gethex>
 80157ca:	f010 0407 	ands.w	r4, r0, #7
 80157ce:	4606      	mov	r6, r0
 80157d0:	d005      	beq.n	80157de <_strtod_l+0x7e>
 80157d2:	2c06      	cmp	r4, #6
 80157d4:	d12b      	bne.n	801582e <_strtod_l+0xce>
 80157d6:	3501      	adds	r5, #1
 80157d8:	2300      	movs	r3, #0
 80157da:	951b      	str	r5, [sp, #108]	; 0x6c
 80157dc:	930d      	str	r3, [sp, #52]	; 0x34
 80157de:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80157e0:	2b00      	cmp	r3, #0
 80157e2:	f040 859a 	bne.w	801631a <_strtod_l+0xbba>
 80157e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80157e8:	b1e3      	cbz	r3, 8015824 <_strtod_l+0xc4>
 80157ea:	4652      	mov	r2, sl
 80157ec:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80157f0:	ec43 2b10 	vmov	d0, r2, r3
 80157f4:	b021      	add	sp, #132	; 0x84
 80157f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80157fa:	2a2b      	cmp	r2, #43	; 0x2b
 80157fc:	d015      	beq.n	801582a <_strtod_l+0xca>
 80157fe:	2a2d      	cmp	r2, #45	; 0x2d
 8015800:	d004      	beq.n	801580c <_strtod_l+0xac>
 8015802:	2a20      	cmp	r2, #32
 8015804:	d1ca      	bne.n	801579c <_strtod_l+0x3c>
 8015806:	3301      	adds	r3, #1
 8015808:	931b      	str	r3, [sp, #108]	; 0x6c
 801580a:	e7bf      	b.n	801578c <_strtod_l+0x2c>
 801580c:	2201      	movs	r2, #1
 801580e:	920d      	str	r2, [sp, #52]	; 0x34
 8015810:	1c5a      	adds	r2, r3, #1
 8015812:	921b      	str	r2, [sp, #108]	; 0x6c
 8015814:	785b      	ldrb	r3, [r3, #1]
 8015816:	2b00      	cmp	r3, #0
 8015818:	d1c2      	bne.n	80157a0 <_strtod_l+0x40>
 801581a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801581c:	961b      	str	r6, [sp, #108]	; 0x6c
 801581e:	2b00      	cmp	r3, #0
 8015820:	f040 8579 	bne.w	8016316 <_strtod_l+0xbb6>
 8015824:	4652      	mov	r2, sl
 8015826:	465b      	mov	r3, fp
 8015828:	e7e2      	b.n	80157f0 <_strtod_l+0x90>
 801582a:	2200      	movs	r2, #0
 801582c:	e7ef      	b.n	801580e <_strtod_l+0xae>
 801582e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8015830:	b13a      	cbz	r2, 8015842 <_strtod_l+0xe2>
 8015832:	2135      	movs	r1, #53	; 0x35
 8015834:	a81e      	add	r0, sp, #120	; 0x78
 8015836:	f002 fbbb 	bl	8017fb0 <__copybits>
 801583a:	991c      	ldr	r1, [sp, #112]	; 0x70
 801583c:	4648      	mov	r0, r9
 801583e:	f002 f828 	bl	8017892 <_Bfree>
 8015842:	3c01      	subs	r4, #1
 8015844:	2c04      	cmp	r4, #4
 8015846:	d806      	bhi.n	8015856 <_strtod_l+0xf6>
 8015848:	e8df f004 	tbb	[pc, r4]
 801584c:	1714030a 	.word	0x1714030a
 8015850:	0a          	.byte	0x0a
 8015851:	00          	.byte	0x00
 8015852:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8015856:	0730      	lsls	r0, r6, #28
 8015858:	d5c1      	bpl.n	80157de <_strtod_l+0x7e>
 801585a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801585e:	e7be      	b.n	80157de <_strtod_l+0x7e>
 8015860:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8015864:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8015866:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801586a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801586e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8015872:	e7f0      	b.n	8015856 <_strtod_l+0xf6>
 8015874:	f8df b170 	ldr.w	fp, [pc, #368]	; 80159e8 <_strtod_l+0x288>
 8015878:	e7ed      	b.n	8015856 <_strtod_l+0xf6>
 801587a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801587e:	f04f 3aff 	mov.w	sl, #4294967295
 8015882:	e7e8      	b.n	8015856 <_strtod_l+0xf6>
 8015884:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015886:	1c5a      	adds	r2, r3, #1
 8015888:	921b      	str	r2, [sp, #108]	; 0x6c
 801588a:	785b      	ldrb	r3, [r3, #1]
 801588c:	2b30      	cmp	r3, #48	; 0x30
 801588e:	d0f9      	beq.n	8015884 <_strtod_l+0x124>
 8015890:	2b00      	cmp	r3, #0
 8015892:	d0a4      	beq.n	80157de <_strtod_l+0x7e>
 8015894:	2301      	movs	r3, #1
 8015896:	2500      	movs	r5, #0
 8015898:	9306      	str	r3, [sp, #24]
 801589a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801589c:	9308      	str	r3, [sp, #32]
 801589e:	9507      	str	r5, [sp, #28]
 80158a0:	9505      	str	r5, [sp, #20]
 80158a2:	220a      	movs	r2, #10
 80158a4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80158a6:	7807      	ldrb	r7, [r0, #0]
 80158a8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80158ac:	b2d9      	uxtb	r1, r3
 80158ae:	2909      	cmp	r1, #9
 80158b0:	d929      	bls.n	8015906 <_strtod_l+0x1a6>
 80158b2:	4622      	mov	r2, r4
 80158b4:	f8d8 1000 	ldr.w	r1, [r8]
 80158b8:	f003 f902 	bl	8018ac0 <strncmp>
 80158bc:	2800      	cmp	r0, #0
 80158be:	d031      	beq.n	8015924 <_strtod_l+0x1c4>
 80158c0:	2000      	movs	r0, #0
 80158c2:	9c05      	ldr	r4, [sp, #20]
 80158c4:	9004      	str	r0, [sp, #16]
 80158c6:	463b      	mov	r3, r7
 80158c8:	4602      	mov	r2, r0
 80158ca:	2b65      	cmp	r3, #101	; 0x65
 80158cc:	d001      	beq.n	80158d2 <_strtod_l+0x172>
 80158ce:	2b45      	cmp	r3, #69	; 0x45
 80158d0:	d114      	bne.n	80158fc <_strtod_l+0x19c>
 80158d2:	b924      	cbnz	r4, 80158de <_strtod_l+0x17e>
 80158d4:	b910      	cbnz	r0, 80158dc <_strtod_l+0x17c>
 80158d6:	9b06      	ldr	r3, [sp, #24]
 80158d8:	2b00      	cmp	r3, #0
 80158da:	d09e      	beq.n	801581a <_strtod_l+0xba>
 80158dc:	2400      	movs	r4, #0
 80158de:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80158e0:	1c73      	adds	r3, r6, #1
 80158e2:	931b      	str	r3, [sp, #108]	; 0x6c
 80158e4:	7873      	ldrb	r3, [r6, #1]
 80158e6:	2b2b      	cmp	r3, #43	; 0x2b
 80158e8:	d078      	beq.n	80159dc <_strtod_l+0x27c>
 80158ea:	2b2d      	cmp	r3, #45	; 0x2d
 80158ec:	d070      	beq.n	80159d0 <_strtod_l+0x270>
 80158ee:	f04f 0c00 	mov.w	ip, #0
 80158f2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80158f6:	2f09      	cmp	r7, #9
 80158f8:	d97c      	bls.n	80159f4 <_strtod_l+0x294>
 80158fa:	961b      	str	r6, [sp, #108]	; 0x6c
 80158fc:	f04f 0e00 	mov.w	lr, #0
 8015900:	e09a      	b.n	8015a38 <_strtod_l+0x2d8>
 8015902:	2300      	movs	r3, #0
 8015904:	e7c7      	b.n	8015896 <_strtod_l+0x136>
 8015906:	9905      	ldr	r1, [sp, #20]
 8015908:	2908      	cmp	r1, #8
 801590a:	bfdd      	ittte	le
 801590c:	9907      	ldrle	r1, [sp, #28]
 801590e:	fb02 3301 	mlale	r3, r2, r1, r3
 8015912:	9307      	strle	r3, [sp, #28]
 8015914:	fb02 3505 	mlagt	r5, r2, r5, r3
 8015918:	9b05      	ldr	r3, [sp, #20]
 801591a:	3001      	adds	r0, #1
 801591c:	3301      	adds	r3, #1
 801591e:	9305      	str	r3, [sp, #20]
 8015920:	901b      	str	r0, [sp, #108]	; 0x6c
 8015922:	e7bf      	b.n	80158a4 <_strtod_l+0x144>
 8015924:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015926:	191a      	adds	r2, r3, r4
 8015928:	921b      	str	r2, [sp, #108]	; 0x6c
 801592a:	9a05      	ldr	r2, [sp, #20]
 801592c:	5d1b      	ldrb	r3, [r3, r4]
 801592e:	2a00      	cmp	r2, #0
 8015930:	d037      	beq.n	80159a2 <_strtod_l+0x242>
 8015932:	9c05      	ldr	r4, [sp, #20]
 8015934:	4602      	mov	r2, r0
 8015936:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801593a:	2909      	cmp	r1, #9
 801593c:	d913      	bls.n	8015966 <_strtod_l+0x206>
 801593e:	2101      	movs	r1, #1
 8015940:	9104      	str	r1, [sp, #16]
 8015942:	e7c2      	b.n	80158ca <_strtod_l+0x16a>
 8015944:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015946:	1c5a      	adds	r2, r3, #1
 8015948:	921b      	str	r2, [sp, #108]	; 0x6c
 801594a:	785b      	ldrb	r3, [r3, #1]
 801594c:	3001      	adds	r0, #1
 801594e:	2b30      	cmp	r3, #48	; 0x30
 8015950:	d0f8      	beq.n	8015944 <_strtod_l+0x1e4>
 8015952:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8015956:	2a08      	cmp	r2, #8
 8015958:	f200 84e4 	bhi.w	8016324 <_strtod_l+0xbc4>
 801595c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801595e:	9208      	str	r2, [sp, #32]
 8015960:	4602      	mov	r2, r0
 8015962:	2000      	movs	r0, #0
 8015964:	4604      	mov	r4, r0
 8015966:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 801596a:	f100 0101 	add.w	r1, r0, #1
 801596e:	d012      	beq.n	8015996 <_strtod_l+0x236>
 8015970:	440a      	add	r2, r1
 8015972:	eb00 0c04 	add.w	ip, r0, r4
 8015976:	4621      	mov	r1, r4
 8015978:	270a      	movs	r7, #10
 801597a:	458c      	cmp	ip, r1
 801597c:	d113      	bne.n	80159a6 <_strtod_l+0x246>
 801597e:	1821      	adds	r1, r4, r0
 8015980:	2908      	cmp	r1, #8
 8015982:	f104 0401 	add.w	r4, r4, #1
 8015986:	4404      	add	r4, r0
 8015988:	dc19      	bgt.n	80159be <_strtod_l+0x25e>
 801598a:	9b07      	ldr	r3, [sp, #28]
 801598c:	210a      	movs	r1, #10
 801598e:	fb01 e303 	mla	r3, r1, r3, lr
 8015992:	9307      	str	r3, [sp, #28]
 8015994:	2100      	movs	r1, #0
 8015996:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015998:	1c58      	adds	r0, r3, #1
 801599a:	901b      	str	r0, [sp, #108]	; 0x6c
 801599c:	785b      	ldrb	r3, [r3, #1]
 801599e:	4608      	mov	r0, r1
 80159a0:	e7c9      	b.n	8015936 <_strtod_l+0x1d6>
 80159a2:	9805      	ldr	r0, [sp, #20]
 80159a4:	e7d3      	b.n	801594e <_strtod_l+0x1ee>
 80159a6:	2908      	cmp	r1, #8
 80159a8:	f101 0101 	add.w	r1, r1, #1
 80159ac:	dc03      	bgt.n	80159b6 <_strtod_l+0x256>
 80159ae:	9b07      	ldr	r3, [sp, #28]
 80159b0:	437b      	muls	r3, r7
 80159b2:	9307      	str	r3, [sp, #28]
 80159b4:	e7e1      	b.n	801597a <_strtod_l+0x21a>
 80159b6:	2910      	cmp	r1, #16
 80159b8:	bfd8      	it	le
 80159ba:	437d      	mulle	r5, r7
 80159bc:	e7dd      	b.n	801597a <_strtod_l+0x21a>
 80159be:	2c10      	cmp	r4, #16
 80159c0:	bfdc      	itt	le
 80159c2:	210a      	movle	r1, #10
 80159c4:	fb01 e505 	mlale	r5, r1, r5, lr
 80159c8:	e7e4      	b.n	8015994 <_strtod_l+0x234>
 80159ca:	2301      	movs	r3, #1
 80159cc:	9304      	str	r3, [sp, #16]
 80159ce:	e781      	b.n	80158d4 <_strtod_l+0x174>
 80159d0:	f04f 0c01 	mov.w	ip, #1
 80159d4:	1cb3      	adds	r3, r6, #2
 80159d6:	931b      	str	r3, [sp, #108]	; 0x6c
 80159d8:	78b3      	ldrb	r3, [r6, #2]
 80159da:	e78a      	b.n	80158f2 <_strtod_l+0x192>
 80159dc:	f04f 0c00 	mov.w	ip, #0
 80159e0:	e7f8      	b.n	80159d4 <_strtod_l+0x274>
 80159e2:	bf00      	nop
 80159e4:	08019274 	.word	0x08019274
 80159e8:	7ff00000 	.word	0x7ff00000
 80159ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80159ee:	1c5f      	adds	r7, r3, #1
 80159f0:	971b      	str	r7, [sp, #108]	; 0x6c
 80159f2:	785b      	ldrb	r3, [r3, #1]
 80159f4:	2b30      	cmp	r3, #48	; 0x30
 80159f6:	d0f9      	beq.n	80159ec <_strtod_l+0x28c>
 80159f8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80159fc:	2f08      	cmp	r7, #8
 80159fe:	f63f af7d 	bhi.w	80158fc <_strtod_l+0x19c>
 8015a02:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8015a06:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015a08:	930a      	str	r3, [sp, #40]	; 0x28
 8015a0a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015a0c:	1c5f      	adds	r7, r3, #1
 8015a0e:	971b      	str	r7, [sp, #108]	; 0x6c
 8015a10:	785b      	ldrb	r3, [r3, #1]
 8015a12:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8015a16:	f1b8 0f09 	cmp.w	r8, #9
 8015a1a:	d937      	bls.n	8015a8c <_strtod_l+0x32c>
 8015a1c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8015a1e:	1a7f      	subs	r7, r7, r1
 8015a20:	2f08      	cmp	r7, #8
 8015a22:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8015a26:	dc37      	bgt.n	8015a98 <_strtod_l+0x338>
 8015a28:	45be      	cmp	lr, r7
 8015a2a:	bfa8      	it	ge
 8015a2c:	46be      	movge	lr, r7
 8015a2e:	f1bc 0f00 	cmp.w	ip, #0
 8015a32:	d001      	beq.n	8015a38 <_strtod_l+0x2d8>
 8015a34:	f1ce 0e00 	rsb	lr, lr, #0
 8015a38:	2c00      	cmp	r4, #0
 8015a3a:	d151      	bne.n	8015ae0 <_strtod_l+0x380>
 8015a3c:	2800      	cmp	r0, #0
 8015a3e:	f47f aece 	bne.w	80157de <_strtod_l+0x7e>
 8015a42:	9a06      	ldr	r2, [sp, #24]
 8015a44:	2a00      	cmp	r2, #0
 8015a46:	f47f aeca 	bne.w	80157de <_strtod_l+0x7e>
 8015a4a:	9a04      	ldr	r2, [sp, #16]
 8015a4c:	2a00      	cmp	r2, #0
 8015a4e:	f47f aee4 	bne.w	801581a <_strtod_l+0xba>
 8015a52:	2b4e      	cmp	r3, #78	; 0x4e
 8015a54:	d027      	beq.n	8015aa6 <_strtod_l+0x346>
 8015a56:	dc21      	bgt.n	8015a9c <_strtod_l+0x33c>
 8015a58:	2b49      	cmp	r3, #73	; 0x49
 8015a5a:	f47f aede 	bne.w	801581a <_strtod_l+0xba>
 8015a5e:	49a0      	ldr	r1, [pc, #640]	; (8015ce0 <_strtod_l+0x580>)
 8015a60:	a81b      	add	r0, sp, #108	; 0x6c
 8015a62:	f001 fdf7 	bl	8017654 <__match>
 8015a66:	2800      	cmp	r0, #0
 8015a68:	f43f aed7 	beq.w	801581a <_strtod_l+0xba>
 8015a6c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015a6e:	499d      	ldr	r1, [pc, #628]	; (8015ce4 <_strtod_l+0x584>)
 8015a70:	3b01      	subs	r3, #1
 8015a72:	a81b      	add	r0, sp, #108	; 0x6c
 8015a74:	931b      	str	r3, [sp, #108]	; 0x6c
 8015a76:	f001 fded 	bl	8017654 <__match>
 8015a7a:	b910      	cbnz	r0, 8015a82 <_strtod_l+0x322>
 8015a7c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015a7e:	3301      	adds	r3, #1
 8015a80:	931b      	str	r3, [sp, #108]	; 0x6c
 8015a82:	f8df b274 	ldr.w	fp, [pc, #628]	; 8015cf8 <_strtod_l+0x598>
 8015a86:	f04f 0a00 	mov.w	sl, #0
 8015a8a:	e6a8      	b.n	80157de <_strtod_l+0x7e>
 8015a8c:	210a      	movs	r1, #10
 8015a8e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8015a92:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8015a96:	e7b8      	b.n	8015a0a <_strtod_l+0x2aa>
 8015a98:	46be      	mov	lr, r7
 8015a9a:	e7c8      	b.n	8015a2e <_strtod_l+0x2ce>
 8015a9c:	2b69      	cmp	r3, #105	; 0x69
 8015a9e:	d0de      	beq.n	8015a5e <_strtod_l+0x2fe>
 8015aa0:	2b6e      	cmp	r3, #110	; 0x6e
 8015aa2:	f47f aeba 	bne.w	801581a <_strtod_l+0xba>
 8015aa6:	4990      	ldr	r1, [pc, #576]	; (8015ce8 <_strtod_l+0x588>)
 8015aa8:	a81b      	add	r0, sp, #108	; 0x6c
 8015aaa:	f001 fdd3 	bl	8017654 <__match>
 8015aae:	2800      	cmp	r0, #0
 8015ab0:	f43f aeb3 	beq.w	801581a <_strtod_l+0xba>
 8015ab4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015ab6:	781b      	ldrb	r3, [r3, #0]
 8015ab8:	2b28      	cmp	r3, #40	; 0x28
 8015aba:	d10e      	bne.n	8015ada <_strtod_l+0x37a>
 8015abc:	aa1e      	add	r2, sp, #120	; 0x78
 8015abe:	498b      	ldr	r1, [pc, #556]	; (8015cec <_strtod_l+0x58c>)
 8015ac0:	a81b      	add	r0, sp, #108	; 0x6c
 8015ac2:	f001 fddb 	bl	801767c <__hexnan>
 8015ac6:	2805      	cmp	r0, #5
 8015ac8:	d107      	bne.n	8015ada <_strtod_l+0x37a>
 8015aca:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8015acc:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8015ad0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8015ad4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8015ad8:	e681      	b.n	80157de <_strtod_l+0x7e>
 8015ada:	f8df b224 	ldr.w	fp, [pc, #548]	; 8015d00 <_strtod_l+0x5a0>
 8015ade:	e7d2      	b.n	8015a86 <_strtod_l+0x326>
 8015ae0:	ebae 0302 	sub.w	r3, lr, r2
 8015ae4:	9306      	str	r3, [sp, #24]
 8015ae6:	9b05      	ldr	r3, [sp, #20]
 8015ae8:	9807      	ldr	r0, [sp, #28]
 8015aea:	2b00      	cmp	r3, #0
 8015aec:	bf08      	it	eq
 8015aee:	4623      	moveq	r3, r4
 8015af0:	2c10      	cmp	r4, #16
 8015af2:	9305      	str	r3, [sp, #20]
 8015af4:	46a0      	mov	r8, r4
 8015af6:	bfa8      	it	ge
 8015af8:	f04f 0810 	movge.w	r8, #16
 8015afc:	f7ea fd1a 	bl	8000534 <__aeabi_ui2d>
 8015b00:	2c09      	cmp	r4, #9
 8015b02:	4682      	mov	sl, r0
 8015b04:	468b      	mov	fp, r1
 8015b06:	dc13      	bgt.n	8015b30 <_strtod_l+0x3d0>
 8015b08:	9b06      	ldr	r3, [sp, #24]
 8015b0a:	2b00      	cmp	r3, #0
 8015b0c:	f43f ae67 	beq.w	80157de <_strtod_l+0x7e>
 8015b10:	9b06      	ldr	r3, [sp, #24]
 8015b12:	dd7a      	ble.n	8015c0a <_strtod_l+0x4aa>
 8015b14:	2b16      	cmp	r3, #22
 8015b16:	dc61      	bgt.n	8015bdc <_strtod_l+0x47c>
 8015b18:	4a75      	ldr	r2, [pc, #468]	; (8015cf0 <_strtod_l+0x590>)
 8015b1a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8015b1e:	e9de 0100 	ldrd	r0, r1, [lr]
 8015b22:	4652      	mov	r2, sl
 8015b24:	465b      	mov	r3, fp
 8015b26:	f7ea fd7f 	bl	8000628 <__aeabi_dmul>
 8015b2a:	4682      	mov	sl, r0
 8015b2c:	468b      	mov	fp, r1
 8015b2e:	e656      	b.n	80157de <_strtod_l+0x7e>
 8015b30:	4b6f      	ldr	r3, [pc, #444]	; (8015cf0 <_strtod_l+0x590>)
 8015b32:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8015b36:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8015b3a:	f7ea fd75 	bl	8000628 <__aeabi_dmul>
 8015b3e:	4606      	mov	r6, r0
 8015b40:	4628      	mov	r0, r5
 8015b42:	460f      	mov	r7, r1
 8015b44:	f7ea fcf6 	bl	8000534 <__aeabi_ui2d>
 8015b48:	4602      	mov	r2, r0
 8015b4a:	460b      	mov	r3, r1
 8015b4c:	4630      	mov	r0, r6
 8015b4e:	4639      	mov	r1, r7
 8015b50:	f7ea fbb4 	bl	80002bc <__adddf3>
 8015b54:	2c0f      	cmp	r4, #15
 8015b56:	4682      	mov	sl, r0
 8015b58:	468b      	mov	fp, r1
 8015b5a:	ddd5      	ble.n	8015b08 <_strtod_l+0x3a8>
 8015b5c:	9b06      	ldr	r3, [sp, #24]
 8015b5e:	eba4 0808 	sub.w	r8, r4, r8
 8015b62:	4498      	add	r8, r3
 8015b64:	f1b8 0f00 	cmp.w	r8, #0
 8015b68:	f340 8096 	ble.w	8015c98 <_strtod_l+0x538>
 8015b6c:	f018 030f 	ands.w	r3, r8, #15
 8015b70:	d00a      	beq.n	8015b88 <_strtod_l+0x428>
 8015b72:	495f      	ldr	r1, [pc, #380]	; (8015cf0 <_strtod_l+0x590>)
 8015b74:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8015b78:	4652      	mov	r2, sl
 8015b7a:	465b      	mov	r3, fp
 8015b7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015b80:	f7ea fd52 	bl	8000628 <__aeabi_dmul>
 8015b84:	4682      	mov	sl, r0
 8015b86:	468b      	mov	fp, r1
 8015b88:	f038 080f 	bics.w	r8, r8, #15
 8015b8c:	d073      	beq.n	8015c76 <_strtod_l+0x516>
 8015b8e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8015b92:	dd47      	ble.n	8015c24 <_strtod_l+0x4c4>
 8015b94:	2400      	movs	r4, #0
 8015b96:	46a0      	mov	r8, r4
 8015b98:	9407      	str	r4, [sp, #28]
 8015b9a:	9405      	str	r4, [sp, #20]
 8015b9c:	2322      	movs	r3, #34	; 0x22
 8015b9e:	f8df b158 	ldr.w	fp, [pc, #344]	; 8015cf8 <_strtod_l+0x598>
 8015ba2:	f8c9 3000 	str.w	r3, [r9]
 8015ba6:	f04f 0a00 	mov.w	sl, #0
 8015baa:	9b07      	ldr	r3, [sp, #28]
 8015bac:	2b00      	cmp	r3, #0
 8015bae:	f43f ae16 	beq.w	80157de <_strtod_l+0x7e>
 8015bb2:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015bb4:	4648      	mov	r0, r9
 8015bb6:	f001 fe6c 	bl	8017892 <_Bfree>
 8015bba:	9905      	ldr	r1, [sp, #20]
 8015bbc:	4648      	mov	r0, r9
 8015bbe:	f001 fe68 	bl	8017892 <_Bfree>
 8015bc2:	4641      	mov	r1, r8
 8015bc4:	4648      	mov	r0, r9
 8015bc6:	f001 fe64 	bl	8017892 <_Bfree>
 8015bca:	9907      	ldr	r1, [sp, #28]
 8015bcc:	4648      	mov	r0, r9
 8015bce:	f001 fe60 	bl	8017892 <_Bfree>
 8015bd2:	4621      	mov	r1, r4
 8015bd4:	4648      	mov	r0, r9
 8015bd6:	f001 fe5c 	bl	8017892 <_Bfree>
 8015bda:	e600      	b.n	80157de <_strtod_l+0x7e>
 8015bdc:	9a06      	ldr	r2, [sp, #24]
 8015bde:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8015be2:	4293      	cmp	r3, r2
 8015be4:	dbba      	blt.n	8015b5c <_strtod_l+0x3fc>
 8015be6:	4d42      	ldr	r5, [pc, #264]	; (8015cf0 <_strtod_l+0x590>)
 8015be8:	f1c4 040f 	rsb	r4, r4, #15
 8015bec:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8015bf0:	4652      	mov	r2, sl
 8015bf2:	465b      	mov	r3, fp
 8015bf4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015bf8:	f7ea fd16 	bl	8000628 <__aeabi_dmul>
 8015bfc:	9b06      	ldr	r3, [sp, #24]
 8015bfe:	1b1c      	subs	r4, r3, r4
 8015c00:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8015c04:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015c08:	e78d      	b.n	8015b26 <_strtod_l+0x3c6>
 8015c0a:	f113 0f16 	cmn.w	r3, #22
 8015c0e:	dba5      	blt.n	8015b5c <_strtod_l+0x3fc>
 8015c10:	4a37      	ldr	r2, [pc, #220]	; (8015cf0 <_strtod_l+0x590>)
 8015c12:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8015c16:	e9d2 2300 	ldrd	r2, r3, [r2]
 8015c1a:	4650      	mov	r0, sl
 8015c1c:	4659      	mov	r1, fp
 8015c1e:	f7ea fe2d 	bl	800087c <__aeabi_ddiv>
 8015c22:	e782      	b.n	8015b2a <_strtod_l+0x3ca>
 8015c24:	2300      	movs	r3, #0
 8015c26:	4e33      	ldr	r6, [pc, #204]	; (8015cf4 <_strtod_l+0x594>)
 8015c28:	ea4f 1828 	mov.w	r8, r8, asr #4
 8015c2c:	4650      	mov	r0, sl
 8015c2e:	4659      	mov	r1, fp
 8015c30:	461d      	mov	r5, r3
 8015c32:	f1b8 0f01 	cmp.w	r8, #1
 8015c36:	dc21      	bgt.n	8015c7c <_strtod_l+0x51c>
 8015c38:	b10b      	cbz	r3, 8015c3e <_strtod_l+0x4de>
 8015c3a:	4682      	mov	sl, r0
 8015c3c:	468b      	mov	fp, r1
 8015c3e:	4b2d      	ldr	r3, [pc, #180]	; (8015cf4 <_strtod_l+0x594>)
 8015c40:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8015c44:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8015c48:	4652      	mov	r2, sl
 8015c4a:	465b      	mov	r3, fp
 8015c4c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8015c50:	f7ea fcea 	bl	8000628 <__aeabi_dmul>
 8015c54:	4b28      	ldr	r3, [pc, #160]	; (8015cf8 <_strtod_l+0x598>)
 8015c56:	460a      	mov	r2, r1
 8015c58:	400b      	ands	r3, r1
 8015c5a:	4928      	ldr	r1, [pc, #160]	; (8015cfc <_strtod_l+0x59c>)
 8015c5c:	428b      	cmp	r3, r1
 8015c5e:	4682      	mov	sl, r0
 8015c60:	d898      	bhi.n	8015b94 <_strtod_l+0x434>
 8015c62:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8015c66:	428b      	cmp	r3, r1
 8015c68:	bf86      	itte	hi
 8015c6a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8015d04 <_strtod_l+0x5a4>
 8015c6e:	f04f 3aff 	movhi.w	sl, #4294967295
 8015c72:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8015c76:	2300      	movs	r3, #0
 8015c78:	9304      	str	r3, [sp, #16]
 8015c7a:	e077      	b.n	8015d6c <_strtod_l+0x60c>
 8015c7c:	f018 0f01 	tst.w	r8, #1
 8015c80:	d006      	beq.n	8015c90 <_strtod_l+0x530>
 8015c82:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8015c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c8a:	f7ea fccd 	bl	8000628 <__aeabi_dmul>
 8015c8e:	2301      	movs	r3, #1
 8015c90:	3501      	adds	r5, #1
 8015c92:	ea4f 0868 	mov.w	r8, r8, asr #1
 8015c96:	e7cc      	b.n	8015c32 <_strtod_l+0x4d2>
 8015c98:	d0ed      	beq.n	8015c76 <_strtod_l+0x516>
 8015c9a:	f1c8 0800 	rsb	r8, r8, #0
 8015c9e:	f018 020f 	ands.w	r2, r8, #15
 8015ca2:	d00a      	beq.n	8015cba <_strtod_l+0x55a>
 8015ca4:	4b12      	ldr	r3, [pc, #72]	; (8015cf0 <_strtod_l+0x590>)
 8015ca6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015caa:	4650      	mov	r0, sl
 8015cac:	4659      	mov	r1, fp
 8015cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015cb2:	f7ea fde3 	bl	800087c <__aeabi_ddiv>
 8015cb6:	4682      	mov	sl, r0
 8015cb8:	468b      	mov	fp, r1
 8015cba:	ea5f 1828 	movs.w	r8, r8, asr #4
 8015cbe:	d0da      	beq.n	8015c76 <_strtod_l+0x516>
 8015cc0:	f1b8 0f1f 	cmp.w	r8, #31
 8015cc4:	dd20      	ble.n	8015d08 <_strtod_l+0x5a8>
 8015cc6:	2400      	movs	r4, #0
 8015cc8:	46a0      	mov	r8, r4
 8015cca:	9407      	str	r4, [sp, #28]
 8015ccc:	9405      	str	r4, [sp, #20]
 8015cce:	2322      	movs	r3, #34	; 0x22
 8015cd0:	f04f 0a00 	mov.w	sl, #0
 8015cd4:	f04f 0b00 	mov.w	fp, #0
 8015cd8:	f8c9 3000 	str.w	r3, [r9]
 8015cdc:	e765      	b.n	8015baa <_strtod_l+0x44a>
 8015cde:	bf00      	nop
 8015ce0:	08019241 	.word	0x08019241
 8015ce4:	080192cb 	.word	0x080192cb
 8015ce8:	08019249 	.word	0x08019249
 8015cec:	08019288 	.word	0x08019288
 8015cf0:	08019308 	.word	0x08019308
 8015cf4:	080192e0 	.word	0x080192e0
 8015cf8:	7ff00000 	.word	0x7ff00000
 8015cfc:	7ca00000 	.word	0x7ca00000
 8015d00:	fff80000 	.word	0xfff80000
 8015d04:	7fefffff 	.word	0x7fefffff
 8015d08:	f018 0310 	ands.w	r3, r8, #16
 8015d0c:	bf18      	it	ne
 8015d0e:	236a      	movne	r3, #106	; 0x6a
 8015d10:	4da0      	ldr	r5, [pc, #640]	; (8015f94 <_strtod_l+0x834>)
 8015d12:	9304      	str	r3, [sp, #16]
 8015d14:	4650      	mov	r0, sl
 8015d16:	4659      	mov	r1, fp
 8015d18:	2300      	movs	r3, #0
 8015d1a:	f1b8 0f00 	cmp.w	r8, #0
 8015d1e:	f300 810a 	bgt.w	8015f36 <_strtod_l+0x7d6>
 8015d22:	b10b      	cbz	r3, 8015d28 <_strtod_l+0x5c8>
 8015d24:	4682      	mov	sl, r0
 8015d26:	468b      	mov	fp, r1
 8015d28:	9b04      	ldr	r3, [sp, #16]
 8015d2a:	b1bb      	cbz	r3, 8015d5c <_strtod_l+0x5fc>
 8015d2c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8015d30:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8015d34:	2b00      	cmp	r3, #0
 8015d36:	4659      	mov	r1, fp
 8015d38:	dd10      	ble.n	8015d5c <_strtod_l+0x5fc>
 8015d3a:	2b1f      	cmp	r3, #31
 8015d3c:	f340 8107 	ble.w	8015f4e <_strtod_l+0x7ee>
 8015d40:	2b34      	cmp	r3, #52	; 0x34
 8015d42:	bfde      	ittt	le
 8015d44:	3b20      	suble	r3, #32
 8015d46:	f04f 32ff 	movle.w	r2, #4294967295
 8015d4a:	fa02 f303 	lslle.w	r3, r2, r3
 8015d4e:	f04f 0a00 	mov.w	sl, #0
 8015d52:	bfcc      	ite	gt
 8015d54:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8015d58:	ea03 0b01 	andle.w	fp, r3, r1
 8015d5c:	2200      	movs	r2, #0
 8015d5e:	2300      	movs	r3, #0
 8015d60:	4650      	mov	r0, sl
 8015d62:	4659      	mov	r1, fp
 8015d64:	f7ea fec8 	bl	8000af8 <__aeabi_dcmpeq>
 8015d68:	2800      	cmp	r0, #0
 8015d6a:	d1ac      	bne.n	8015cc6 <_strtod_l+0x566>
 8015d6c:	9b07      	ldr	r3, [sp, #28]
 8015d6e:	9300      	str	r3, [sp, #0]
 8015d70:	9a05      	ldr	r2, [sp, #20]
 8015d72:	9908      	ldr	r1, [sp, #32]
 8015d74:	4623      	mov	r3, r4
 8015d76:	4648      	mov	r0, r9
 8015d78:	f001 fddd 	bl	8017936 <__s2b>
 8015d7c:	9007      	str	r0, [sp, #28]
 8015d7e:	2800      	cmp	r0, #0
 8015d80:	f43f af08 	beq.w	8015b94 <_strtod_l+0x434>
 8015d84:	9a06      	ldr	r2, [sp, #24]
 8015d86:	9b06      	ldr	r3, [sp, #24]
 8015d88:	2a00      	cmp	r2, #0
 8015d8a:	f1c3 0300 	rsb	r3, r3, #0
 8015d8e:	bfa8      	it	ge
 8015d90:	2300      	movge	r3, #0
 8015d92:	930e      	str	r3, [sp, #56]	; 0x38
 8015d94:	2400      	movs	r4, #0
 8015d96:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8015d9a:	9316      	str	r3, [sp, #88]	; 0x58
 8015d9c:	46a0      	mov	r8, r4
 8015d9e:	9b07      	ldr	r3, [sp, #28]
 8015da0:	4648      	mov	r0, r9
 8015da2:	6859      	ldr	r1, [r3, #4]
 8015da4:	f001 fd41 	bl	801782a <_Balloc>
 8015da8:	9005      	str	r0, [sp, #20]
 8015daa:	2800      	cmp	r0, #0
 8015dac:	f43f aef6 	beq.w	8015b9c <_strtod_l+0x43c>
 8015db0:	9b07      	ldr	r3, [sp, #28]
 8015db2:	691a      	ldr	r2, [r3, #16]
 8015db4:	3202      	adds	r2, #2
 8015db6:	f103 010c 	add.w	r1, r3, #12
 8015dba:	0092      	lsls	r2, r2, #2
 8015dbc:	300c      	adds	r0, #12
 8015dbe:	f001 fd29 	bl	8017814 <memcpy>
 8015dc2:	aa1e      	add	r2, sp, #120	; 0x78
 8015dc4:	a91d      	add	r1, sp, #116	; 0x74
 8015dc6:	ec4b ab10 	vmov	d0, sl, fp
 8015dca:	4648      	mov	r0, r9
 8015dcc:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8015dd0:	f002 f86c 	bl	8017eac <__d2b>
 8015dd4:	901c      	str	r0, [sp, #112]	; 0x70
 8015dd6:	2800      	cmp	r0, #0
 8015dd8:	f43f aee0 	beq.w	8015b9c <_strtod_l+0x43c>
 8015ddc:	2101      	movs	r1, #1
 8015dde:	4648      	mov	r0, r9
 8015de0:	f001 fe35 	bl	8017a4e <__i2b>
 8015de4:	4680      	mov	r8, r0
 8015de6:	2800      	cmp	r0, #0
 8015de8:	f43f aed8 	beq.w	8015b9c <_strtod_l+0x43c>
 8015dec:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8015dee:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8015df0:	2e00      	cmp	r6, #0
 8015df2:	bfab      	itete	ge
 8015df4:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8015df6:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8015df8:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8015dfa:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8015dfc:	bfac      	ite	ge
 8015dfe:	18f7      	addge	r7, r6, r3
 8015e00:	1b9d      	sublt	r5, r3, r6
 8015e02:	9b04      	ldr	r3, [sp, #16]
 8015e04:	1af6      	subs	r6, r6, r3
 8015e06:	4416      	add	r6, r2
 8015e08:	4b63      	ldr	r3, [pc, #396]	; (8015f98 <_strtod_l+0x838>)
 8015e0a:	3e01      	subs	r6, #1
 8015e0c:	429e      	cmp	r6, r3
 8015e0e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8015e12:	f280 80af 	bge.w	8015f74 <_strtod_l+0x814>
 8015e16:	1b9b      	subs	r3, r3, r6
 8015e18:	2b1f      	cmp	r3, #31
 8015e1a:	eba2 0203 	sub.w	r2, r2, r3
 8015e1e:	f04f 0101 	mov.w	r1, #1
 8015e22:	f300 809b 	bgt.w	8015f5c <_strtod_l+0x7fc>
 8015e26:	fa01 f303 	lsl.w	r3, r1, r3
 8015e2a:	930f      	str	r3, [sp, #60]	; 0x3c
 8015e2c:	2300      	movs	r3, #0
 8015e2e:	930a      	str	r3, [sp, #40]	; 0x28
 8015e30:	18be      	adds	r6, r7, r2
 8015e32:	9b04      	ldr	r3, [sp, #16]
 8015e34:	42b7      	cmp	r7, r6
 8015e36:	4415      	add	r5, r2
 8015e38:	441d      	add	r5, r3
 8015e3a:	463b      	mov	r3, r7
 8015e3c:	bfa8      	it	ge
 8015e3e:	4633      	movge	r3, r6
 8015e40:	42ab      	cmp	r3, r5
 8015e42:	bfa8      	it	ge
 8015e44:	462b      	movge	r3, r5
 8015e46:	2b00      	cmp	r3, #0
 8015e48:	bfc2      	ittt	gt
 8015e4a:	1af6      	subgt	r6, r6, r3
 8015e4c:	1aed      	subgt	r5, r5, r3
 8015e4e:	1aff      	subgt	r7, r7, r3
 8015e50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015e52:	b1bb      	cbz	r3, 8015e84 <_strtod_l+0x724>
 8015e54:	4641      	mov	r1, r8
 8015e56:	461a      	mov	r2, r3
 8015e58:	4648      	mov	r0, r9
 8015e5a:	f001 fe97 	bl	8017b8c <__pow5mult>
 8015e5e:	4680      	mov	r8, r0
 8015e60:	2800      	cmp	r0, #0
 8015e62:	f43f ae9b 	beq.w	8015b9c <_strtod_l+0x43c>
 8015e66:	4601      	mov	r1, r0
 8015e68:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8015e6a:	4648      	mov	r0, r9
 8015e6c:	f001 fdf8 	bl	8017a60 <__multiply>
 8015e70:	900c      	str	r0, [sp, #48]	; 0x30
 8015e72:	2800      	cmp	r0, #0
 8015e74:	f43f ae92 	beq.w	8015b9c <_strtod_l+0x43c>
 8015e78:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015e7a:	4648      	mov	r0, r9
 8015e7c:	f001 fd09 	bl	8017892 <_Bfree>
 8015e80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015e82:	931c      	str	r3, [sp, #112]	; 0x70
 8015e84:	2e00      	cmp	r6, #0
 8015e86:	dc7a      	bgt.n	8015f7e <_strtod_l+0x81e>
 8015e88:	9b06      	ldr	r3, [sp, #24]
 8015e8a:	2b00      	cmp	r3, #0
 8015e8c:	dd08      	ble.n	8015ea0 <_strtod_l+0x740>
 8015e8e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015e90:	9905      	ldr	r1, [sp, #20]
 8015e92:	4648      	mov	r0, r9
 8015e94:	f001 fe7a 	bl	8017b8c <__pow5mult>
 8015e98:	9005      	str	r0, [sp, #20]
 8015e9a:	2800      	cmp	r0, #0
 8015e9c:	f43f ae7e 	beq.w	8015b9c <_strtod_l+0x43c>
 8015ea0:	2d00      	cmp	r5, #0
 8015ea2:	dd08      	ble.n	8015eb6 <_strtod_l+0x756>
 8015ea4:	462a      	mov	r2, r5
 8015ea6:	9905      	ldr	r1, [sp, #20]
 8015ea8:	4648      	mov	r0, r9
 8015eaa:	f001 febd 	bl	8017c28 <__lshift>
 8015eae:	9005      	str	r0, [sp, #20]
 8015eb0:	2800      	cmp	r0, #0
 8015eb2:	f43f ae73 	beq.w	8015b9c <_strtod_l+0x43c>
 8015eb6:	2f00      	cmp	r7, #0
 8015eb8:	dd08      	ble.n	8015ecc <_strtod_l+0x76c>
 8015eba:	4641      	mov	r1, r8
 8015ebc:	463a      	mov	r2, r7
 8015ebe:	4648      	mov	r0, r9
 8015ec0:	f001 feb2 	bl	8017c28 <__lshift>
 8015ec4:	4680      	mov	r8, r0
 8015ec6:	2800      	cmp	r0, #0
 8015ec8:	f43f ae68 	beq.w	8015b9c <_strtod_l+0x43c>
 8015ecc:	9a05      	ldr	r2, [sp, #20]
 8015ece:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015ed0:	4648      	mov	r0, r9
 8015ed2:	f001 ff17 	bl	8017d04 <__mdiff>
 8015ed6:	4604      	mov	r4, r0
 8015ed8:	2800      	cmp	r0, #0
 8015eda:	f43f ae5f 	beq.w	8015b9c <_strtod_l+0x43c>
 8015ede:	68c3      	ldr	r3, [r0, #12]
 8015ee0:	930c      	str	r3, [sp, #48]	; 0x30
 8015ee2:	2300      	movs	r3, #0
 8015ee4:	60c3      	str	r3, [r0, #12]
 8015ee6:	4641      	mov	r1, r8
 8015ee8:	f001 fef2 	bl	8017cd0 <__mcmp>
 8015eec:	2800      	cmp	r0, #0
 8015eee:	da55      	bge.n	8015f9c <_strtod_l+0x83c>
 8015ef0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015ef2:	b9e3      	cbnz	r3, 8015f2e <_strtod_l+0x7ce>
 8015ef4:	f1ba 0f00 	cmp.w	sl, #0
 8015ef8:	d119      	bne.n	8015f2e <_strtod_l+0x7ce>
 8015efa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015efe:	b9b3      	cbnz	r3, 8015f2e <_strtod_l+0x7ce>
 8015f00:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8015f04:	0d1b      	lsrs	r3, r3, #20
 8015f06:	051b      	lsls	r3, r3, #20
 8015f08:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8015f0c:	d90f      	bls.n	8015f2e <_strtod_l+0x7ce>
 8015f0e:	6963      	ldr	r3, [r4, #20]
 8015f10:	b913      	cbnz	r3, 8015f18 <_strtod_l+0x7b8>
 8015f12:	6923      	ldr	r3, [r4, #16]
 8015f14:	2b01      	cmp	r3, #1
 8015f16:	dd0a      	ble.n	8015f2e <_strtod_l+0x7ce>
 8015f18:	4621      	mov	r1, r4
 8015f1a:	2201      	movs	r2, #1
 8015f1c:	4648      	mov	r0, r9
 8015f1e:	f001 fe83 	bl	8017c28 <__lshift>
 8015f22:	4641      	mov	r1, r8
 8015f24:	4604      	mov	r4, r0
 8015f26:	f001 fed3 	bl	8017cd0 <__mcmp>
 8015f2a:	2800      	cmp	r0, #0
 8015f2c:	dc67      	bgt.n	8015ffe <_strtod_l+0x89e>
 8015f2e:	9b04      	ldr	r3, [sp, #16]
 8015f30:	2b00      	cmp	r3, #0
 8015f32:	d171      	bne.n	8016018 <_strtod_l+0x8b8>
 8015f34:	e63d      	b.n	8015bb2 <_strtod_l+0x452>
 8015f36:	f018 0f01 	tst.w	r8, #1
 8015f3a:	d004      	beq.n	8015f46 <_strtod_l+0x7e6>
 8015f3c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015f40:	f7ea fb72 	bl	8000628 <__aeabi_dmul>
 8015f44:	2301      	movs	r3, #1
 8015f46:	ea4f 0868 	mov.w	r8, r8, asr #1
 8015f4a:	3508      	adds	r5, #8
 8015f4c:	e6e5      	b.n	8015d1a <_strtod_l+0x5ba>
 8015f4e:	f04f 32ff 	mov.w	r2, #4294967295
 8015f52:	fa02 f303 	lsl.w	r3, r2, r3
 8015f56:	ea03 0a0a 	and.w	sl, r3, sl
 8015f5a:	e6ff      	b.n	8015d5c <_strtod_l+0x5fc>
 8015f5c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8015f60:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8015f64:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8015f68:	36e2      	adds	r6, #226	; 0xe2
 8015f6a:	fa01 f306 	lsl.w	r3, r1, r6
 8015f6e:	930a      	str	r3, [sp, #40]	; 0x28
 8015f70:	910f      	str	r1, [sp, #60]	; 0x3c
 8015f72:	e75d      	b.n	8015e30 <_strtod_l+0x6d0>
 8015f74:	2300      	movs	r3, #0
 8015f76:	930a      	str	r3, [sp, #40]	; 0x28
 8015f78:	2301      	movs	r3, #1
 8015f7a:	930f      	str	r3, [sp, #60]	; 0x3c
 8015f7c:	e758      	b.n	8015e30 <_strtod_l+0x6d0>
 8015f7e:	4632      	mov	r2, r6
 8015f80:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015f82:	4648      	mov	r0, r9
 8015f84:	f001 fe50 	bl	8017c28 <__lshift>
 8015f88:	901c      	str	r0, [sp, #112]	; 0x70
 8015f8a:	2800      	cmp	r0, #0
 8015f8c:	f47f af7c 	bne.w	8015e88 <_strtod_l+0x728>
 8015f90:	e604      	b.n	8015b9c <_strtod_l+0x43c>
 8015f92:	bf00      	nop
 8015f94:	080192a0 	.word	0x080192a0
 8015f98:	fffffc02 	.word	0xfffffc02
 8015f9c:	465d      	mov	r5, fp
 8015f9e:	f040 8086 	bne.w	80160ae <_strtod_l+0x94e>
 8015fa2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015fa4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015fa8:	b32a      	cbz	r2, 8015ff6 <_strtod_l+0x896>
 8015faa:	4aaf      	ldr	r2, [pc, #700]	; (8016268 <_strtod_l+0xb08>)
 8015fac:	4293      	cmp	r3, r2
 8015fae:	d153      	bne.n	8016058 <_strtod_l+0x8f8>
 8015fb0:	9b04      	ldr	r3, [sp, #16]
 8015fb2:	4650      	mov	r0, sl
 8015fb4:	b1d3      	cbz	r3, 8015fec <_strtod_l+0x88c>
 8015fb6:	4aad      	ldr	r2, [pc, #692]	; (801626c <_strtod_l+0xb0c>)
 8015fb8:	402a      	ands	r2, r5
 8015fba:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8015fbe:	f04f 31ff 	mov.w	r1, #4294967295
 8015fc2:	d816      	bhi.n	8015ff2 <_strtod_l+0x892>
 8015fc4:	0d12      	lsrs	r2, r2, #20
 8015fc6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8015fca:	fa01 f303 	lsl.w	r3, r1, r3
 8015fce:	4298      	cmp	r0, r3
 8015fd0:	d142      	bne.n	8016058 <_strtod_l+0x8f8>
 8015fd2:	4ba7      	ldr	r3, [pc, #668]	; (8016270 <_strtod_l+0xb10>)
 8015fd4:	429d      	cmp	r5, r3
 8015fd6:	d102      	bne.n	8015fde <_strtod_l+0x87e>
 8015fd8:	3001      	adds	r0, #1
 8015fda:	f43f addf 	beq.w	8015b9c <_strtod_l+0x43c>
 8015fde:	4ba3      	ldr	r3, [pc, #652]	; (801626c <_strtod_l+0xb0c>)
 8015fe0:	402b      	ands	r3, r5
 8015fe2:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8015fe6:	f04f 0a00 	mov.w	sl, #0
 8015fea:	e7a0      	b.n	8015f2e <_strtod_l+0x7ce>
 8015fec:	f04f 33ff 	mov.w	r3, #4294967295
 8015ff0:	e7ed      	b.n	8015fce <_strtod_l+0x86e>
 8015ff2:	460b      	mov	r3, r1
 8015ff4:	e7eb      	b.n	8015fce <_strtod_l+0x86e>
 8015ff6:	bb7b      	cbnz	r3, 8016058 <_strtod_l+0x8f8>
 8015ff8:	f1ba 0f00 	cmp.w	sl, #0
 8015ffc:	d12c      	bne.n	8016058 <_strtod_l+0x8f8>
 8015ffe:	9904      	ldr	r1, [sp, #16]
 8016000:	4a9a      	ldr	r2, [pc, #616]	; (801626c <_strtod_l+0xb0c>)
 8016002:	465b      	mov	r3, fp
 8016004:	b1f1      	cbz	r1, 8016044 <_strtod_l+0x8e4>
 8016006:	ea02 010b 	and.w	r1, r2, fp
 801600a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801600e:	dc19      	bgt.n	8016044 <_strtod_l+0x8e4>
 8016010:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8016014:	f77f ae5b 	ble.w	8015cce <_strtod_l+0x56e>
 8016018:	4a96      	ldr	r2, [pc, #600]	; (8016274 <_strtod_l+0xb14>)
 801601a:	2300      	movs	r3, #0
 801601c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8016020:	4650      	mov	r0, sl
 8016022:	4659      	mov	r1, fp
 8016024:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8016028:	f7ea fafe 	bl	8000628 <__aeabi_dmul>
 801602c:	4682      	mov	sl, r0
 801602e:	468b      	mov	fp, r1
 8016030:	2900      	cmp	r1, #0
 8016032:	f47f adbe 	bne.w	8015bb2 <_strtod_l+0x452>
 8016036:	2800      	cmp	r0, #0
 8016038:	f47f adbb 	bne.w	8015bb2 <_strtod_l+0x452>
 801603c:	2322      	movs	r3, #34	; 0x22
 801603e:	f8c9 3000 	str.w	r3, [r9]
 8016042:	e5b6      	b.n	8015bb2 <_strtod_l+0x452>
 8016044:	4013      	ands	r3, r2
 8016046:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801604a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801604e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8016052:	f04f 3aff 	mov.w	sl, #4294967295
 8016056:	e76a      	b.n	8015f2e <_strtod_l+0x7ce>
 8016058:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801605a:	b193      	cbz	r3, 8016082 <_strtod_l+0x922>
 801605c:	422b      	tst	r3, r5
 801605e:	f43f af66 	beq.w	8015f2e <_strtod_l+0x7ce>
 8016062:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016064:	9a04      	ldr	r2, [sp, #16]
 8016066:	4650      	mov	r0, sl
 8016068:	4659      	mov	r1, fp
 801606a:	b173      	cbz	r3, 801608a <_strtod_l+0x92a>
 801606c:	f7ff fb5a 	bl	8015724 <sulp>
 8016070:	4602      	mov	r2, r0
 8016072:	460b      	mov	r3, r1
 8016074:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016078:	f7ea f920 	bl	80002bc <__adddf3>
 801607c:	4682      	mov	sl, r0
 801607e:	468b      	mov	fp, r1
 8016080:	e755      	b.n	8015f2e <_strtod_l+0x7ce>
 8016082:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016084:	ea13 0f0a 	tst.w	r3, sl
 8016088:	e7e9      	b.n	801605e <_strtod_l+0x8fe>
 801608a:	f7ff fb4b 	bl	8015724 <sulp>
 801608e:	4602      	mov	r2, r0
 8016090:	460b      	mov	r3, r1
 8016092:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016096:	f7ea f90f 	bl	80002b8 <__aeabi_dsub>
 801609a:	2200      	movs	r2, #0
 801609c:	2300      	movs	r3, #0
 801609e:	4682      	mov	sl, r0
 80160a0:	468b      	mov	fp, r1
 80160a2:	f7ea fd29 	bl	8000af8 <__aeabi_dcmpeq>
 80160a6:	2800      	cmp	r0, #0
 80160a8:	f47f ae11 	bne.w	8015cce <_strtod_l+0x56e>
 80160ac:	e73f      	b.n	8015f2e <_strtod_l+0x7ce>
 80160ae:	4641      	mov	r1, r8
 80160b0:	4620      	mov	r0, r4
 80160b2:	f001 ff4a 	bl	8017f4a <__ratio>
 80160b6:	ec57 6b10 	vmov	r6, r7, d0
 80160ba:	2200      	movs	r2, #0
 80160bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80160c0:	ee10 0a10 	vmov	r0, s0
 80160c4:	4639      	mov	r1, r7
 80160c6:	f7ea fd2b 	bl	8000b20 <__aeabi_dcmple>
 80160ca:	2800      	cmp	r0, #0
 80160cc:	d077      	beq.n	80161be <_strtod_l+0xa5e>
 80160ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80160d0:	2b00      	cmp	r3, #0
 80160d2:	d04a      	beq.n	801616a <_strtod_l+0xa0a>
 80160d4:	4b68      	ldr	r3, [pc, #416]	; (8016278 <_strtod_l+0xb18>)
 80160d6:	2200      	movs	r2, #0
 80160d8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80160dc:	4f66      	ldr	r7, [pc, #408]	; (8016278 <_strtod_l+0xb18>)
 80160de:	2600      	movs	r6, #0
 80160e0:	4b62      	ldr	r3, [pc, #392]	; (801626c <_strtod_l+0xb0c>)
 80160e2:	402b      	ands	r3, r5
 80160e4:	930f      	str	r3, [sp, #60]	; 0x3c
 80160e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80160e8:	4b64      	ldr	r3, [pc, #400]	; (801627c <_strtod_l+0xb1c>)
 80160ea:	429a      	cmp	r2, r3
 80160ec:	f040 80ce 	bne.w	801628c <_strtod_l+0xb2c>
 80160f0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80160f4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80160f8:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 80160fc:	ec4b ab10 	vmov	d0, sl, fp
 8016100:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8016104:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8016108:	f001 fe5a 	bl	8017dc0 <__ulp>
 801610c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016110:	ec53 2b10 	vmov	r2, r3, d0
 8016114:	f7ea fa88 	bl	8000628 <__aeabi_dmul>
 8016118:	4652      	mov	r2, sl
 801611a:	465b      	mov	r3, fp
 801611c:	f7ea f8ce 	bl	80002bc <__adddf3>
 8016120:	460b      	mov	r3, r1
 8016122:	4952      	ldr	r1, [pc, #328]	; (801626c <_strtod_l+0xb0c>)
 8016124:	4a56      	ldr	r2, [pc, #344]	; (8016280 <_strtod_l+0xb20>)
 8016126:	4019      	ands	r1, r3
 8016128:	4291      	cmp	r1, r2
 801612a:	4682      	mov	sl, r0
 801612c:	d95b      	bls.n	80161e6 <_strtod_l+0xa86>
 801612e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016130:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8016134:	4293      	cmp	r3, r2
 8016136:	d103      	bne.n	8016140 <_strtod_l+0x9e0>
 8016138:	9b08      	ldr	r3, [sp, #32]
 801613a:	3301      	adds	r3, #1
 801613c:	f43f ad2e 	beq.w	8015b9c <_strtod_l+0x43c>
 8016140:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8016270 <_strtod_l+0xb10>
 8016144:	f04f 3aff 	mov.w	sl, #4294967295
 8016148:	991c      	ldr	r1, [sp, #112]	; 0x70
 801614a:	4648      	mov	r0, r9
 801614c:	f001 fba1 	bl	8017892 <_Bfree>
 8016150:	9905      	ldr	r1, [sp, #20]
 8016152:	4648      	mov	r0, r9
 8016154:	f001 fb9d 	bl	8017892 <_Bfree>
 8016158:	4641      	mov	r1, r8
 801615a:	4648      	mov	r0, r9
 801615c:	f001 fb99 	bl	8017892 <_Bfree>
 8016160:	4621      	mov	r1, r4
 8016162:	4648      	mov	r0, r9
 8016164:	f001 fb95 	bl	8017892 <_Bfree>
 8016168:	e619      	b.n	8015d9e <_strtod_l+0x63e>
 801616a:	f1ba 0f00 	cmp.w	sl, #0
 801616e:	d11a      	bne.n	80161a6 <_strtod_l+0xa46>
 8016170:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016174:	b9eb      	cbnz	r3, 80161b2 <_strtod_l+0xa52>
 8016176:	2200      	movs	r2, #0
 8016178:	4b3f      	ldr	r3, [pc, #252]	; (8016278 <_strtod_l+0xb18>)
 801617a:	4630      	mov	r0, r6
 801617c:	4639      	mov	r1, r7
 801617e:	f7ea fcc5 	bl	8000b0c <__aeabi_dcmplt>
 8016182:	b9c8      	cbnz	r0, 80161b8 <_strtod_l+0xa58>
 8016184:	4630      	mov	r0, r6
 8016186:	4639      	mov	r1, r7
 8016188:	2200      	movs	r2, #0
 801618a:	4b3e      	ldr	r3, [pc, #248]	; (8016284 <_strtod_l+0xb24>)
 801618c:	f7ea fa4c 	bl	8000628 <__aeabi_dmul>
 8016190:	4606      	mov	r6, r0
 8016192:	460f      	mov	r7, r1
 8016194:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8016198:	9618      	str	r6, [sp, #96]	; 0x60
 801619a:	9319      	str	r3, [sp, #100]	; 0x64
 801619c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 80161a0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80161a4:	e79c      	b.n	80160e0 <_strtod_l+0x980>
 80161a6:	f1ba 0f01 	cmp.w	sl, #1
 80161aa:	d102      	bne.n	80161b2 <_strtod_l+0xa52>
 80161ac:	2d00      	cmp	r5, #0
 80161ae:	f43f ad8e 	beq.w	8015cce <_strtod_l+0x56e>
 80161b2:	2200      	movs	r2, #0
 80161b4:	4b34      	ldr	r3, [pc, #208]	; (8016288 <_strtod_l+0xb28>)
 80161b6:	e78f      	b.n	80160d8 <_strtod_l+0x978>
 80161b8:	2600      	movs	r6, #0
 80161ba:	4f32      	ldr	r7, [pc, #200]	; (8016284 <_strtod_l+0xb24>)
 80161bc:	e7ea      	b.n	8016194 <_strtod_l+0xa34>
 80161be:	4b31      	ldr	r3, [pc, #196]	; (8016284 <_strtod_l+0xb24>)
 80161c0:	4630      	mov	r0, r6
 80161c2:	4639      	mov	r1, r7
 80161c4:	2200      	movs	r2, #0
 80161c6:	f7ea fa2f 	bl	8000628 <__aeabi_dmul>
 80161ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80161cc:	4606      	mov	r6, r0
 80161ce:	460f      	mov	r7, r1
 80161d0:	b933      	cbnz	r3, 80161e0 <_strtod_l+0xa80>
 80161d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80161d6:	9010      	str	r0, [sp, #64]	; 0x40
 80161d8:	9311      	str	r3, [sp, #68]	; 0x44
 80161da:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80161de:	e7df      	b.n	80161a0 <_strtod_l+0xa40>
 80161e0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80161e4:	e7f9      	b.n	80161da <_strtod_l+0xa7a>
 80161e6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80161ea:	9b04      	ldr	r3, [sp, #16]
 80161ec:	2b00      	cmp	r3, #0
 80161ee:	d1ab      	bne.n	8016148 <_strtod_l+0x9e8>
 80161f0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80161f4:	0d1b      	lsrs	r3, r3, #20
 80161f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80161f8:	051b      	lsls	r3, r3, #20
 80161fa:	429a      	cmp	r2, r3
 80161fc:	465d      	mov	r5, fp
 80161fe:	d1a3      	bne.n	8016148 <_strtod_l+0x9e8>
 8016200:	4639      	mov	r1, r7
 8016202:	4630      	mov	r0, r6
 8016204:	f7ea fcc0 	bl	8000b88 <__aeabi_d2iz>
 8016208:	f7ea f9a4 	bl	8000554 <__aeabi_i2d>
 801620c:	460b      	mov	r3, r1
 801620e:	4602      	mov	r2, r0
 8016210:	4639      	mov	r1, r7
 8016212:	4630      	mov	r0, r6
 8016214:	f7ea f850 	bl	80002b8 <__aeabi_dsub>
 8016218:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801621a:	4606      	mov	r6, r0
 801621c:	460f      	mov	r7, r1
 801621e:	b933      	cbnz	r3, 801622e <_strtod_l+0xace>
 8016220:	f1ba 0f00 	cmp.w	sl, #0
 8016224:	d103      	bne.n	801622e <_strtod_l+0xace>
 8016226:	f3cb 0513 	ubfx	r5, fp, #0, #20
 801622a:	2d00      	cmp	r5, #0
 801622c:	d06d      	beq.n	801630a <_strtod_l+0xbaa>
 801622e:	a30a      	add	r3, pc, #40	; (adr r3, 8016258 <_strtod_l+0xaf8>)
 8016230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016234:	4630      	mov	r0, r6
 8016236:	4639      	mov	r1, r7
 8016238:	f7ea fc68 	bl	8000b0c <__aeabi_dcmplt>
 801623c:	2800      	cmp	r0, #0
 801623e:	f47f acb8 	bne.w	8015bb2 <_strtod_l+0x452>
 8016242:	a307      	add	r3, pc, #28	; (adr r3, 8016260 <_strtod_l+0xb00>)
 8016244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016248:	4630      	mov	r0, r6
 801624a:	4639      	mov	r1, r7
 801624c:	f7ea fc7c 	bl	8000b48 <__aeabi_dcmpgt>
 8016250:	2800      	cmp	r0, #0
 8016252:	f43f af79 	beq.w	8016148 <_strtod_l+0x9e8>
 8016256:	e4ac      	b.n	8015bb2 <_strtod_l+0x452>
 8016258:	94a03595 	.word	0x94a03595
 801625c:	3fdfffff 	.word	0x3fdfffff
 8016260:	35afe535 	.word	0x35afe535
 8016264:	3fe00000 	.word	0x3fe00000
 8016268:	000fffff 	.word	0x000fffff
 801626c:	7ff00000 	.word	0x7ff00000
 8016270:	7fefffff 	.word	0x7fefffff
 8016274:	39500000 	.word	0x39500000
 8016278:	3ff00000 	.word	0x3ff00000
 801627c:	7fe00000 	.word	0x7fe00000
 8016280:	7c9fffff 	.word	0x7c9fffff
 8016284:	3fe00000 	.word	0x3fe00000
 8016288:	bff00000 	.word	0xbff00000
 801628c:	9b04      	ldr	r3, [sp, #16]
 801628e:	b333      	cbz	r3, 80162de <_strtod_l+0xb7e>
 8016290:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016292:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8016296:	d822      	bhi.n	80162de <_strtod_l+0xb7e>
 8016298:	a327      	add	r3, pc, #156	; (adr r3, 8016338 <_strtod_l+0xbd8>)
 801629a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801629e:	4630      	mov	r0, r6
 80162a0:	4639      	mov	r1, r7
 80162a2:	f7ea fc3d 	bl	8000b20 <__aeabi_dcmple>
 80162a6:	b1a0      	cbz	r0, 80162d2 <_strtod_l+0xb72>
 80162a8:	4639      	mov	r1, r7
 80162aa:	4630      	mov	r0, r6
 80162ac:	f7ea fc94 	bl	8000bd8 <__aeabi_d2uiz>
 80162b0:	2800      	cmp	r0, #0
 80162b2:	bf08      	it	eq
 80162b4:	2001      	moveq	r0, #1
 80162b6:	f7ea f93d 	bl	8000534 <__aeabi_ui2d>
 80162ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80162bc:	4606      	mov	r6, r0
 80162be:	460f      	mov	r7, r1
 80162c0:	bb03      	cbnz	r3, 8016304 <_strtod_l+0xba4>
 80162c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80162c6:	9012      	str	r0, [sp, #72]	; 0x48
 80162c8:	9313      	str	r3, [sp, #76]	; 0x4c
 80162ca:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80162ce:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80162d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80162d4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80162d6:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80162da:	1a9b      	subs	r3, r3, r2
 80162dc:	930b      	str	r3, [sp, #44]	; 0x2c
 80162de:	ed9d 0b08 	vldr	d0, [sp, #32]
 80162e2:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 80162e6:	f001 fd6b 	bl	8017dc0 <__ulp>
 80162ea:	4650      	mov	r0, sl
 80162ec:	ec53 2b10 	vmov	r2, r3, d0
 80162f0:	4659      	mov	r1, fp
 80162f2:	f7ea f999 	bl	8000628 <__aeabi_dmul>
 80162f6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80162fa:	f7e9 ffdf 	bl	80002bc <__adddf3>
 80162fe:	4682      	mov	sl, r0
 8016300:	468b      	mov	fp, r1
 8016302:	e772      	b.n	80161ea <_strtod_l+0xa8a>
 8016304:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8016308:	e7df      	b.n	80162ca <_strtod_l+0xb6a>
 801630a:	a30d      	add	r3, pc, #52	; (adr r3, 8016340 <_strtod_l+0xbe0>)
 801630c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016310:	f7ea fbfc 	bl	8000b0c <__aeabi_dcmplt>
 8016314:	e79c      	b.n	8016250 <_strtod_l+0xaf0>
 8016316:	2300      	movs	r3, #0
 8016318:	930d      	str	r3, [sp, #52]	; 0x34
 801631a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801631c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801631e:	6013      	str	r3, [r2, #0]
 8016320:	f7ff ba61 	b.w	80157e6 <_strtod_l+0x86>
 8016324:	2b65      	cmp	r3, #101	; 0x65
 8016326:	f04f 0200 	mov.w	r2, #0
 801632a:	f43f ab4e 	beq.w	80159ca <_strtod_l+0x26a>
 801632e:	2101      	movs	r1, #1
 8016330:	4614      	mov	r4, r2
 8016332:	9104      	str	r1, [sp, #16]
 8016334:	f7ff bacb 	b.w	80158ce <_strtod_l+0x16e>
 8016338:	ffc00000 	.word	0xffc00000
 801633c:	41dfffff 	.word	0x41dfffff
 8016340:	94a03595 	.word	0x94a03595
 8016344:	3fcfffff 	.word	0x3fcfffff

08016348 <_strtod_r>:
 8016348:	4b05      	ldr	r3, [pc, #20]	; (8016360 <_strtod_r+0x18>)
 801634a:	681b      	ldr	r3, [r3, #0]
 801634c:	b410      	push	{r4}
 801634e:	6a1b      	ldr	r3, [r3, #32]
 8016350:	4c04      	ldr	r4, [pc, #16]	; (8016364 <_strtod_r+0x1c>)
 8016352:	2b00      	cmp	r3, #0
 8016354:	bf08      	it	eq
 8016356:	4623      	moveq	r3, r4
 8016358:	f85d 4b04 	ldr.w	r4, [sp], #4
 801635c:	f7ff ba00 	b.w	8015760 <_strtod_l>
 8016360:	2000000c 	.word	0x2000000c
 8016364:	20000070 	.word	0x20000070

08016368 <_strtol_l.isra.0>:
 8016368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801636c:	4680      	mov	r8, r0
 801636e:	4689      	mov	r9, r1
 8016370:	4692      	mov	sl, r2
 8016372:	461e      	mov	r6, r3
 8016374:	460f      	mov	r7, r1
 8016376:	463d      	mov	r5, r7
 8016378:	9808      	ldr	r0, [sp, #32]
 801637a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801637e:	f001 fa0d 	bl	801779c <__locale_ctype_ptr_l>
 8016382:	4420      	add	r0, r4
 8016384:	7843      	ldrb	r3, [r0, #1]
 8016386:	f013 0308 	ands.w	r3, r3, #8
 801638a:	d132      	bne.n	80163f2 <_strtol_l.isra.0+0x8a>
 801638c:	2c2d      	cmp	r4, #45	; 0x2d
 801638e:	d132      	bne.n	80163f6 <_strtol_l.isra.0+0x8e>
 8016390:	787c      	ldrb	r4, [r7, #1]
 8016392:	1cbd      	adds	r5, r7, #2
 8016394:	2201      	movs	r2, #1
 8016396:	2e00      	cmp	r6, #0
 8016398:	d05d      	beq.n	8016456 <_strtol_l.isra.0+0xee>
 801639a:	2e10      	cmp	r6, #16
 801639c:	d109      	bne.n	80163b2 <_strtol_l.isra.0+0x4a>
 801639e:	2c30      	cmp	r4, #48	; 0x30
 80163a0:	d107      	bne.n	80163b2 <_strtol_l.isra.0+0x4a>
 80163a2:	782b      	ldrb	r3, [r5, #0]
 80163a4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80163a8:	2b58      	cmp	r3, #88	; 0x58
 80163aa:	d14f      	bne.n	801644c <_strtol_l.isra.0+0xe4>
 80163ac:	786c      	ldrb	r4, [r5, #1]
 80163ae:	2610      	movs	r6, #16
 80163b0:	3502      	adds	r5, #2
 80163b2:	2a00      	cmp	r2, #0
 80163b4:	bf14      	ite	ne
 80163b6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80163ba:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80163be:	2700      	movs	r7, #0
 80163c0:	fbb1 fcf6 	udiv	ip, r1, r6
 80163c4:	4638      	mov	r0, r7
 80163c6:	fb06 1e1c 	mls	lr, r6, ip, r1
 80163ca:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80163ce:	2b09      	cmp	r3, #9
 80163d0:	d817      	bhi.n	8016402 <_strtol_l.isra.0+0x9a>
 80163d2:	461c      	mov	r4, r3
 80163d4:	42a6      	cmp	r6, r4
 80163d6:	dd23      	ble.n	8016420 <_strtol_l.isra.0+0xb8>
 80163d8:	1c7b      	adds	r3, r7, #1
 80163da:	d007      	beq.n	80163ec <_strtol_l.isra.0+0x84>
 80163dc:	4584      	cmp	ip, r0
 80163de:	d31c      	bcc.n	801641a <_strtol_l.isra.0+0xb2>
 80163e0:	d101      	bne.n	80163e6 <_strtol_l.isra.0+0x7e>
 80163e2:	45a6      	cmp	lr, r4
 80163e4:	db19      	blt.n	801641a <_strtol_l.isra.0+0xb2>
 80163e6:	fb00 4006 	mla	r0, r0, r6, r4
 80163ea:	2701      	movs	r7, #1
 80163ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 80163f0:	e7eb      	b.n	80163ca <_strtol_l.isra.0+0x62>
 80163f2:	462f      	mov	r7, r5
 80163f4:	e7bf      	b.n	8016376 <_strtol_l.isra.0+0xe>
 80163f6:	2c2b      	cmp	r4, #43	; 0x2b
 80163f8:	bf04      	itt	eq
 80163fa:	1cbd      	addeq	r5, r7, #2
 80163fc:	787c      	ldrbeq	r4, [r7, #1]
 80163fe:	461a      	mov	r2, r3
 8016400:	e7c9      	b.n	8016396 <_strtol_l.isra.0+0x2e>
 8016402:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8016406:	2b19      	cmp	r3, #25
 8016408:	d801      	bhi.n	801640e <_strtol_l.isra.0+0xa6>
 801640a:	3c37      	subs	r4, #55	; 0x37
 801640c:	e7e2      	b.n	80163d4 <_strtol_l.isra.0+0x6c>
 801640e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8016412:	2b19      	cmp	r3, #25
 8016414:	d804      	bhi.n	8016420 <_strtol_l.isra.0+0xb8>
 8016416:	3c57      	subs	r4, #87	; 0x57
 8016418:	e7dc      	b.n	80163d4 <_strtol_l.isra.0+0x6c>
 801641a:	f04f 37ff 	mov.w	r7, #4294967295
 801641e:	e7e5      	b.n	80163ec <_strtol_l.isra.0+0x84>
 8016420:	1c7b      	adds	r3, r7, #1
 8016422:	d108      	bne.n	8016436 <_strtol_l.isra.0+0xce>
 8016424:	2322      	movs	r3, #34	; 0x22
 8016426:	f8c8 3000 	str.w	r3, [r8]
 801642a:	4608      	mov	r0, r1
 801642c:	f1ba 0f00 	cmp.w	sl, #0
 8016430:	d107      	bne.n	8016442 <_strtol_l.isra.0+0xda>
 8016432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016436:	b102      	cbz	r2, 801643a <_strtol_l.isra.0+0xd2>
 8016438:	4240      	negs	r0, r0
 801643a:	f1ba 0f00 	cmp.w	sl, #0
 801643e:	d0f8      	beq.n	8016432 <_strtol_l.isra.0+0xca>
 8016440:	b10f      	cbz	r7, 8016446 <_strtol_l.isra.0+0xde>
 8016442:	f105 39ff 	add.w	r9, r5, #4294967295
 8016446:	f8ca 9000 	str.w	r9, [sl]
 801644a:	e7f2      	b.n	8016432 <_strtol_l.isra.0+0xca>
 801644c:	2430      	movs	r4, #48	; 0x30
 801644e:	2e00      	cmp	r6, #0
 8016450:	d1af      	bne.n	80163b2 <_strtol_l.isra.0+0x4a>
 8016452:	2608      	movs	r6, #8
 8016454:	e7ad      	b.n	80163b2 <_strtol_l.isra.0+0x4a>
 8016456:	2c30      	cmp	r4, #48	; 0x30
 8016458:	d0a3      	beq.n	80163a2 <_strtol_l.isra.0+0x3a>
 801645a:	260a      	movs	r6, #10
 801645c:	e7a9      	b.n	80163b2 <_strtol_l.isra.0+0x4a>
	...

08016460 <_strtol_r>:
 8016460:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016462:	4c06      	ldr	r4, [pc, #24]	; (801647c <_strtol_r+0x1c>)
 8016464:	4d06      	ldr	r5, [pc, #24]	; (8016480 <_strtol_r+0x20>)
 8016466:	6824      	ldr	r4, [r4, #0]
 8016468:	6a24      	ldr	r4, [r4, #32]
 801646a:	2c00      	cmp	r4, #0
 801646c:	bf08      	it	eq
 801646e:	462c      	moveq	r4, r5
 8016470:	9400      	str	r4, [sp, #0]
 8016472:	f7ff ff79 	bl	8016368 <_strtol_l.isra.0>
 8016476:	b003      	add	sp, #12
 8016478:	bd30      	pop	{r4, r5, pc}
 801647a:	bf00      	nop
 801647c:	2000000c 	.word	0x2000000c
 8016480:	20000070 	.word	0x20000070

08016484 <_vsiprintf_r>:
 8016484:	b500      	push	{lr}
 8016486:	b09b      	sub	sp, #108	; 0x6c
 8016488:	9100      	str	r1, [sp, #0]
 801648a:	9104      	str	r1, [sp, #16]
 801648c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016490:	9105      	str	r1, [sp, #20]
 8016492:	9102      	str	r1, [sp, #8]
 8016494:	4905      	ldr	r1, [pc, #20]	; (80164ac <_vsiprintf_r+0x28>)
 8016496:	9103      	str	r1, [sp, #12]
 8016498:	4669      	mov	r1, sp
 801649a:	f001 fed5 	bl	8018248 <_svfiprintf_r>
 801649e:	9b00      	ldr	r3, [sp, #0]
 80164a0:	2200      	movs	r2, #0
 80164a2:	701a      	strb	r2, [r3, #0]
 80164a4:	b01b      	add	sp, #108	; 0x6c
 80164a6:	f85d fb04 	ldr.w	pc, [sp], #4
 80164aa:	bf00      	nop
 80164ac:	ffff0208 	.word	0xffff0208

080164b0 <vsiprintf>:
 80164b0:	4613      	mov	r3, r2
 80164b2:	460a      	mov	r2, r1
 80164b4:	4601      	mov	r1, r0
 80164b6:	4802      	ldr	r0, [pc, #8]	; (80164c0 <vsiprintf+0x10>)
 80164b8:	6800      	ldr	r0, [r0, #0]
 80164ba:	f7ff bfe3 	b.w	8016484 <_vsiprintf_r>
 80164be:	bf00      	nop
 80164c0:	2000000c 	.word	0x2000000c

080164c4 <quorem>:
 80164c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80164c8:	6903      	ldr	r3, [r0, #16]
 80164ca:	690c      	ldr	r4, [r1, #16]
 80164cc:	42a3      	cmp	r3, r4
 80164ce:	4680      	mov	r8, r0
 80164d0:	f2c0 8082 	blt.w	80165d8 <quorem+0x114>
 80164d4:	3c01      	subs	r4, #1
 80164d6:	f101 0714 	add.w	r7, r1, #20
 80164da:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80164de:	f100 0614 	add.w	r6, r0, #20
 80164e2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80164e6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80164ea:	eb06 030c 	add.w	r3, r6, ip
 80164ee:	3501      	adds	r5, #1
 80164f0:	eb07 090c 	add.w	r9, r7, ip
 80164f4:	9301      	str	r3, [sp, #4]
 80164f6:	fbb0 f5f5 	udiv	r5, r0, r5
 80164fa:	b395      	cbz	r5, 8016562 <quorem+0x9e>
 80164fc:	f04f 0a00 	mov.w	sl, #0
 8016500:	4638      	mov	r0, r7
 8016502:	46b6      	mov	lr, r6
 8016504:	46d3      	mov	fp, sl
 8016506:	f850 2b04 	ldr.w	r2, [r0], #4
 801650a:	b293      	uxth	r3, r2
 801650c:	fb05 a303 	mla	r3, r5, r3, sl
 8016510:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016514:	b29b      	uxth	r3, r3
 8016516:	ebab 0303 	sub.w	r3, fp, r3
 801651a:	0c12      	lsrs	r2, r2, #16
 801651c:	f8de b000 	ldr.w	fp, [lr]
 8016520:	fb05 a202 	mla	r2, r5, r2, sl
 8016524:	fa13 f38b 	uxtah	r3, r3, fp
 8016528:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 801652c:	fa1f fb82 	uxth.w	fp, r2
 8016530:	f8de 2000 	ldr.w	r2, [lr]
 8016534:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8016538:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801653c:	b29b      	uxth	r3, r3
 801653e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016542:	4581      	cmp	r9, r0
 8016544:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8016548:	f84e 3b04 	str.w	r3, [lr], #4
 801654c:	d2db      	bcs.n	8016506 <quorem+0x42>
 801654e:	f856 300c 	ldr.w	r3, [r6, ip]
 8016552:	b933      	cbnz	r3, 8016562 <quorem+0x9e>
 8016554:	9b01      	ldr	r3, [sp, #4]
 8016556:	3b04      	subs	r3, #4
 8016558:	429e      	cmp	r6, r3
 801655a:	461a      	mov	r2, r3
 801655c:	d330      	bcc.n	80165c0 <quorem+0xfc>
 801655e:	f8c8 4010 	str.w	r4, [r8, #16]
 8016562:	4640      	mov	r0, r8
 8016564:	f001 fbb4 	bl	8017cd0 <__mcmp>
 8016568:	2800      	cmp	r0, #0
 801656a:	db25      	blt.n	80165b8 <quorem+0xf4>
 801656c:	3501      	adds	r5, #1
 801656e:	4630      	mov	r0, r6
 8016570:	f04f 0c00 	mov.w	ip, #0
 8016574:	f857 2b04 	ldr.w	r2, [r7], #4
 8016578:	f8d0 e000 	ldr.w	lr, [r0]
 801657c:	b293      	uxth	r3, r2
 801657e:	ebac 0303 	sub.w	r3, ip, r3
 8016582:	0c12      	lsrs	r2, r2, #16
 8016584:	fa13 f38e 	uxtah	r3, r3, lr
 8016588:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801658c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016590:	b29b      	uxth	r3, r3
 8016592:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016596:	45b9      	cmp	r9, r7
 8016598:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801659c:	f840 3b04 	str.w	r3, [r0], #4
 80165a0:	d2e8      	bcs.n	8016574 <quorem+0xb0>
 80165a2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80165a6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80165aa:	b92a      	cbnz	r2, 80165b8 <quorem+0xf4>
 80165ac:	3b04      	subs	r3, #4
 80165ae:	429e      	cmp	r6, r3
 80165b0:	461a      	mov	r2, r3
 80165b2:	d30b      	bcc.n	80165cc <quorem+0x108>
 80165b4:	f8c8 4010 	str.w	r4, [r8, #16]
 80165b8:	4628      	mov	r0, r5
 80165ba:	b003      	add	sp, #12
 80165bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80165c0:	6812      	ldr	r2, [r2, #0]
 80165c2:	3b04      	subs	r3, #4
 80165c4:	2a00      	cmp	r2, #0
 80165c6:	d1ca      	bne.n	801655e <quorem+0x9a>
 80165c8:	3c01      	subs	r4, #1
 80165ca:	e7c5      	b.n	8016558 <quorem+0x94>
 80165cc:	6812      	ldr	r2, [r2, #0]
 80165ce:	3b04      	subs	r3, #4
 80165d0:	2a00      	cmp	r2, #0
 80165d2:	d1ef      	bne.n	80165b4 <quorem+0xf0>
 80165d4:	3c01      	subs	r4, #1
 80165d6:	e7ea      	b.n	80165ae <quorem+0xea>
 80165d8:	2000      	movs	r0, #0
 80165da:	e7ee      	b.n	80165ba <quorem+0xf6>
 80165dc:	0000      	movs	r0, r0
	...

080165e0 <_dtoa_r>:
 80165e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80165e4:	ec57 6b10 	vmov	r6, r7, d0
 80165e8:	b097      	sub	sp, #92	; 0x5c
 80165ea:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80165ec:	9106      	str	r1, [sp, #24]
 80165ee:	4604      	mov	r4, r0
 80165f0:	920b      	str	r2, [sp, #44]	; 0x2c
 80165f2:	9312      	str	r3, [sp, #72]	; 0x48
 80165f4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80165f8:	e9cd 6700 	strd	r6, r7, [sp]
 80165fc:	b93d      	cbnz	r5, 801660e <_dtoa_r+0x2e>
 80165fe:	2010      	movs	r0, #16
 8016600:	f001 f8ee 	bl	80177e0 <malloc>
 8016604:	6260      	str	r0, [r4, #36]	; 0x24
 8016606:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801660a:	6005      	str	r5, [r0, #0]
 801660c:	60c5      	str	r5, [r0, #12]
 801660e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016610:	6819      	ldr	r1, [r3, #0]
 8016612:	b151      	cbz	r1, 801662a <_dtoa_r+0x4a>
 8016614:	685a      	ldr	r2, [r3, #4]
 8016616:	604a      	str	r2, [r1, #4]
 8016618:	2301      	movs	r3, #1
 801661a:	4093      	lsls	r3, r2
 801661c:	608b      	str	r3, [r1, #8]
 801661e:	4620      	mov	r0, r4
 8016620:	f001 f937 	bl	8017892 <_Bfree>
 8016624:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016626:	2200      	movs	r2, #0
 8016628:	601a      	str	r2, [r3, #0]
 801662a:	1e3b      	subs	r3, r7, #0
 801662c:	bfbb      	ittet	lt
 801662e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8016632:	9301      	strlt	r3, [sp, #4]
 8016634:	2300      	movge	r3, #0
 8016636:	2201      	movlt	r2, #1
 8016638:	bfac      	ite	ge
 801663a:	f8c8 3000 	strge.w	r3, [r8]
 801663e:	f8c8 2000 	strlt.w	r2, [r8]
 8016642:	4baf      	ldr	r3, [pc, #700]	; (8016900 <_dtoa_r+0x320>)
 8016644:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8016648:	ea33 0308 	bics.w	r3, r3, r8
 801664c:	d114      	bne.n	8016678 <_dtoa_r+0x98>
 801664e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016650:	f242 730f 	movw	r3, #9999	; 0x270f
 8016654:	6013      	str	r3, [r2, #0]
 8016656:	9b00      	ldr	r3, [sp, #0]
 8016658:	b923      	cbnz	r3, 8016664 <_dtoa_r+0x84>
 801665a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 801665e:	2800      	cmp	r0, #0
 8016660:	f000 8542 	beq.w	80170e8 <_dtoa_r+0xb08>
 8016664:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016666:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8016914 <_dtoa_r+0x334>
 801666a:	2b00      	cmp	r3, #0
 801666c:	f000 8544 	beq.w	80170f8 <_dtoa_r+0xb18>
 8016670:	f10b 0303 	add.w	r3, fp, #3
 8016674:	f000 bd3e 	b.w	80170f4 <_dtoa_r+0xb14>
 8016678:	e9dd 6700 	ldrd	r6, r7, [sp]
 801667c:	2200      	movs	r2, #0
 801667e:	2300      	movs	r3, #0
 8016680:	4630      	mov	r0, r6
 8016682:	4639      	mov	r1, r7
 8016684:	f7ea fa38 	bl	8000af8 <__aeabi_dcmpeq>
 8016688:	4681      	mov	r9, r0
 801668a:	b168      	cbz	r0, 80166a8 <_dtoa_r+0xc8>
 801668c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801668e:	2301      	movs	r3, #1
 8016690:	6013      	str	r3, [r2, #0]
 8016692:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016694:	2b00      	cmp	r3, #0
 8016696:	f000 8524 	beq.w	80170e2 <_dtoa_r+0xb02>
 801669a:	4b9a      	ldr	r3, [pc, #616]	; (8016904 <_dtoa_r+0x324>)
 801669c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801669e:	f103 3bff 	add.w	fp, r3, #4294967295
 80166a2:	6013      	str	r3, [r2, #0]
 80166a4:	f000 bd28 	b.w	80170f8 <_dtoa_r+0xb18>
 80166a8:	aa14      	add	r2, sp, #80	; 0x50
 80166aa:	a915      	add	r1, sp, #84	; 0x54
 80166ac:	ec47 6b10 	vmov	d0, r6, r7
 80166b0:	4620      	mov	r0, r4
 80166b2:	f001 fbfb 	bl	8017eac <__d2b>
 80166b6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80166ba:	9004      	str	r0, [sp, #16]
 80166bc:	2d00      	cmp	r5, #0
 80166be:	d07c      	beq.n	80167ba <_dtoa_r+0x1da>
 80166c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80166c4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80166c8:	46b2      	mov	sl, r6
 80166ca:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80166ce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80166d2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80166d6:	2200      	movs	r2, #0
 80166d8:	4b8b      	ldr	r3, [pc, #556]	; (8016908 <_dtoa_r+0x328>)
 80166da:	4650      	mov	r0, sl
 80166dc:	4659      	mov	r1, fp
 80166de:	f7e9 fdeb 	bl	80002b8 <__aeabi_dsub>
 80166e2:	a381      	add	r3, pc, #516	; (adr r3, 80168e8 <_dtoa_r+0x308>)
 80166e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166e8:	f7e9 ff9e 	bl	8000628 <__aeabi_dmul>
 80166ec:	a380      	add	r3, pc, #512	; (adr r3, 80168f0 <_dtoa_r+0x310>)
 80166ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166f2:	f7e9 fde3 	bl	80002bc <__adddf3>
 80166f6:	4606      	mov	r6, r0
 80166f8:	4628      	mov	r0, r5
 80166fa:	460f      	mov	r7, r1
 80166fc:	f7e9 ff2a 	bl	8000554 <__aeabi_i2d>
 8016700:	a37d      	add	r3, pc, #500	; (adr r3, 80168f8 <_dtoa_r+0x318>)
 8016702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016706:	f7e9 ff8f 	bl	8000628 <__aeabi_dmul>
 801670a:	4602      	mov	r2, r0
 801670c:	460b      	mov	r3, r1
 801670e:	4630      	mov	r0, r6
 8016710:	4639      	mov	r1, r7
 8016712:	f7e9 fdd3 	bl	80002bc <__adddf3>
 8016716:	4606      	mov	r6, r0
 8016718:	460f      	mov	r7, r1
 801671a:	f7ea fa35 	bl	8000b88 <__aeabi_d2iz>
 801671e:	2200      	movs	r2, #0
 8016720:	4682      	mov	sl, r0
 8016722:	2300      	movs	r3, #0
 8016724:	4630      	mov	r0, r6
 8016726:	4639      	mov	r1, r7
 8016728:	f7ea f9f0 	bl	8000b0c <__aeabi_dcmplt>
 801672c:	b148      	cbz	r0, 8016742 <_dtoa_r+0x162>
 801672e:	4650      	mov	r0, sl
 8016730:	f7e9 ff10 	bl	8000554 <__aeabi_i2d>
 8016734:	4632      	mov	r2, r6
 8016736:	463b      	mov	r3, r7
 8016738:	f7ea f9de 	bl	8000af8 <__aeabi_dcmpeq>
 801673c:	b908      	cbnz	r0, 8016742 <_dtoa_r+0x162>
 801673e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016742:	f1ba 0f16 	cmp.w	sl, #22
 8016746:	d859      	bhi.n	80167fc <_dtoa_r+0x21c>
 8016748:	4970      	ldr	r1, [pc, #448]	; (801690c <_dtoa_r+0x32c>)
 801674a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 801674e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016752:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016756:	f7ea f9f7 	bl	8000b48 <__aeabi_dcmpgt>
 801675a:	2800      	cmp	r0, #0
 801675c:	d050      	beq.n	8016800 <_dtoa_r+0x220>
 801675e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016762:	2300      	movs	r3, #0
 8016764:	930f      	str	r3, [sp, #60]	; 0x3c
 8016766:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016768:	1b5d      	subs	r5, r3, r5
 801676a:	f1b5 0801 	subs.w	r8, r5, #1
 801676e:	bf49      	itett	mi
 8016770:	f1c5 0301 	rsbmi	r3, r5, #1
 8016774:	2300      	movpl	r3, #0
 8016776:	9305      	strmi	r3, [sp, #20]
 8016778:	f04f 0800 	movmi.w	r8, #0
 801677c:	bf58      	it	pl
 801677e:	9305      	strpl	r3, [sp, #20]
 8016780:	f1ba 0f00 	cmp.w	sl, #0
 8016784:	db3e      	blt.n	8016804 <_dtoa_r+0x224>
 8016786:	2300      	movs	r3, #0
 8016788:	44d0      	add	r8, sl
 801678a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 801678e:	9307      	str	r3, [sp, #28]
 8016790:	9b06      	ldr	r3, [sp, #24]
 8016792:	2b09      	cmp	r3, #9
 8016794:	f200 8090 	bhi.w	80168b8 <_dtoa_r+0x2d8>
 8016798:	2b05      	cmp	r3, #5
 801679a:	bfc4      	itt	gt
 801679c:	3b04      	subgt	r3, #4
 801679e:	9306      	strgt	r3, [sp, #24]
 80167a0:	9b06      	ldr	r3, [sp, #24]
 80167a2:	f1a3 0302 	sub.w	r3, r3, #2
 80167a6:	bfcc      	ite	gt
 80167a8:	2500      	movgt	r5, #0
 80167aa:	2501      	movle	r5, #1
 80167ac:	2b03      	cmp	r3, #3
 80167ae:	f200 808f 	bhi.w	80168d0 <_dtoa_r+0x2f0>
 80167b2:	e8df f003 	tbb	[pc, r3]
 80167b6:	7f7d      	.short	0x7f7d
 80167b8:	7131      	.short	0x7131
 80167ba:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80167be:	441d      	add	r5, r3
 80167c0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80167c4:	2820      	cmp	r0, #32
 80167c6:	dd13      	ble.n	80167f0 <_dtoa_r+0x210>
 80167c8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80167cc:	9b00      	ldr	r3, [sp, #0]
 80167ce:	fa08 f800 	lsl.w	r8, r8, r0
 80167d2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80167d6:	fa23 f000 	lsr.w	r0, r3, r0
 80167da:	ea48 0000 	orr.w	r0, r8, r0
 80167de:	f7e9 fea9 	bl	8000534 <__aeabi_ui2d>
 80167e2:	2301      	movs	r3, #1
 80167e4:	4682      	mov	sl, r0
 80167e6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80167ea:	3d01      	subs	r5, #1
 80167ec:	9313      	str	r3, [sp, #76]	; 0x4c
 80167ee:	e772      	b.n	80166d6 <_dtoa_r+0xf6>
 80167f0:	9b00      	ldr	r3, [sp, #0]
 80167f2:	f1c0 0020 	rsb	r0, r0, #32
 80167f6:	fa03 f000 	lsl.w	r0, r3, r0
 80167fa:	e7f0      	b.n	80167de <_dtoa_r+0x1fe>
 80167fc:	2301      	movs	r3, #1
 80167fe:	e7b1      	b.n	8016764 <_dtoa_r+0x184>
 8016800:	900f      	str	r0, [sp, #60]	; 0x3c
 8016802:	e7b0      	b.n	8016766 <_dtoa_r+0x186>
 8016804:	9b05      	ldr	r3, [sp, #20]
 8016806:	eba3 030a 	sub.w	r3, r3, sl
 801680a:	9305      	str	r3, [sp, #20]
 801680c:	f1ca 0300 	rsb	r3, sl, #0
 8016810:	9307      	str	r3, [sp, #28]
 8016812:	2300      	movs	r3, #0
 8016814:	930e      	str	r3, [sp, #56]	; 0x38
 8016816:	e7bb      	b.n	8016790 <_dtoa_r+0x1b0>
 8016818:	2301      	movs	r3, #1
 801681a:	930a      	str	r3, [sp, #40]	; 0x28
 801681c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801681e:	2b00      	cmp	r3, #0
 8016820:	dd59      	ble.n	80168d6 <_dtoa_r+0x2f6>
 8016822:	9302      	str	r3, [sp, #8]
 8016824:	4699      	mov	r9, r3
 8016826:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8016828:	2200      	movs	r2, #0
 801682a:	6072      	str	r2, [r6, #4]
 801682c:	2204      	movs	r2, #4
 801682e:	f102 0014 	add.w	r0, r2, #20
 8016832:	4298      	cmp	r0, r3
 8016834:	6871      	ldr	r1, [r6, #4]
 8016836:	d953      	bls.n	80168e0 <_dtoa_r+0x300>
 8016838:	4620      	mov	r0, r4
 801683a:	f000 fff6 	bl	801782a <_Balloc>
 801683e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016840:	6030      	str	r0, [r6, #0]
 8016842:	f1b9 0f0e 	cmp.w	r9, #14
 8016846:	f8d3 b000 	ldr.w	fp, [r3]
 801684a:	f200 80e6 	bhi.w	8016a1a <_dtoa_r+0x43a>
 801684e:	2d00      	cmp	r5, #0
 8016850:	f000 80e3 	beq.w	8016a1a <_dtoa_r+0x43a>
 8016854:	ed9d 7b00 	vldr	d7, [sp]
 8016858:	f1ba 0f00 	cmp.w	sl, #0
 801685c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8016860:	dd74      	ble.n	801694c <_dtoa_r+0x36c>
 8016862:	4a2a      	ldr	r2, [pc, #168]	; (801690c <_dtoa_r+0x32c>)
 8016864:	f00a 030f 	and.w	r3, sl, #15
 8016868:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801686c:	ed93 7b00 	vldr	d7, [r3]
 8016870:	ea4f 162a 	mov.w	r6, sl, asr #4
 8016874:	06f0      	lsls	r0, r6, #27
 8016876:	ed8d 7b08 	vstr	d7, [sp, #32]
 801687a:	d565      	bpl.n	8016948 <_dtoa_r+0x368>
 801687c:	4b24      	ldr	r3, [pc, #144]	; (8016910 <_dtoa_r+0x330>)
 801687e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8016882:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8016886:	f7e9 fff9 	bl	800087c <__aeabi_ddiv>
 801688a:	e9cd 0100 	strd	r0, r1, [sp]
 801688e:	f006 060f 	and.w	r6, r6, #15
 8016892:	2503      	movs	r5, #3
 8016894:	4f1e      	ldr	r7, [pc, #120]	; (8016910 <_dtoa_r+0x330>)
 8016896:	e04c      	b.n	8016932 <_dtoa_r+0x352>
 8016898:	2301      	movs	r3, #1
 801689a:	930a      	str	r3, [sp, #40]	; 0x28
 801689c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801689e:	4453      	add	r3, sl
 80168a0:	f103 0901 	add.w	r9, r3, #1
 80168a4:	9302      	str	r3, [sp, #8]
 80168a6:	464b      	mov	r3, r9
 80168a8:	2b01      	cmp	r3, #1
 80168aa:	bfb8      	it	lt
 80168ac:	2301      	movlt	r3, #1
 80168ae:	e7ba      	b.n	8016826 <_dtoa_r+0x246>
 80168b0:	2300      	movs	r3, #0
 80168b2:	e7b2      	b.n	801681a <_dtoa_r+0x23a>
 80168b4:	2300      	movs	r3, #0
 80168b6:	e7f0      	b.n	801689a <_dtoa_r+0x2ba>
 80168b8:	2501      	movs	r5, #1
 80168ba:	2300      	movs	r3, #0
 80168bc:	9306      	str	r3, [sp, #24]
 80168be:	950a      	str	r5, [sp, #40]	; 0x28
 80168c0:	f04f 33ff 	mov.w	r3, #4294967295
 80168c4:	9302      	str	r3, [sp, #8]
 80168c6:	4699      	mov	r9, r3
 80168c8:	2200      	movs	r2, #0
 80168ca:	2312      	movs	r3, #18
 80168cc:	920b      	str	r2, [sp, #44]	; 0x2c
 80168ce:	e7aa      	b.n	8016826 <_dtoa_r+0x246>
 80168d0:	2301      	movs	r3, #1
 80168d2:	930a      	str	r3, [sp, #40]	; 0x28
 80168d4:	e7f4      	b.n	80168c0 <_dtoa_r+0x2e0>
 80168d6:	2301      	movs	r3, #1
 80168d8:	9302      	str	r3, [sp, #8]
 80168da:	4699      	mov	r9, r3
 80168dc:	461a      	mov	r2, r3
 80168de:	e7f5      	b.n	80168cc <_dtoa_r+0x2ec>
 80168e0:	3101      	adds	r1, #1
 80168e2:	6071      	str	r1, [r6, #4]
 80168e4:	0052      	lsls	r2, r2, #1
 80168e6:	e7a2      	b.n	801682e <_dtoa_r+0x24e>
 80168e8:	636f4361 	.word	0x636f4361
 80168ec:	3fd287a7 	.word	0x3fd287a7
 80168f0:	8b60c8b3 	.word	0x8b60c8b3
 80168f4:	3fc68a28 	.word	0x3fc68a28
 80168f8:	509f79fb 	.word	0x509f79fb
 80168fc:	3fd34413 	.word	0x3fd34413
 8016900:	7ff00000 	.word	0x7ff00000
 8016904:	08019404 	.word	0x08019404
 8016908:	3ff80000 	.word	0x3ff80000
 801690c:	08019308 	.word	0x08019308
 8016910:	080192e0 	.word	0x080192e0
 8016914:	080192d1 	.word	0x080192d1
 8016918:	07f1      	lsls	r1, r6, #31
 801691a:	d508      	bpl.n	801692e <_dtoa_r+0x34e>
 801691c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016920:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016924:	f7e9 fe80 	bl	8000628 <__aeabi_dmul>
 8016928:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801692c:	3501      	adds	r5, #1
 801692e:	1076      	asrs	r6, r6, #1
 8016930:	3708      	adds	r7, #8
 8016932:	2e00      	cmp	r6, #0
 8016934:	d1f0      	bne.n	8016918 <_dtoa_r+0x338>
 8016936:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801693a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801693e:	f7e9 ff9d 	bl	800087c <__aeabi_ddiv>
 8016942:	e9cd 0100 	strd	r0, r1, [sp]
 8016946:	e01a      	b.n	801697e <_dtoa_r+0x39e>
 8016948:	2502      	movs	r5, #2
 801694a:	e7a3      	b.n	8016894 <_dtoa_r+0x2b4>
 801694c:	f000 80a0 	beq.w	8016a90 <_dtoa_r+0x4b0>
 8016950:	f1ca 0600 	rsb	r6, sl, #0
 8016954:	4b9f      	ldr	r3, [pc, #636]	; (8016bd4 <_dtoa_r+0x5f4>)
 8016956:	4fa0      	ldr	r7, [pc, #640]	; (8016bd8 <_dtoa_r+0x5f8>)
 8016958:	f006 020f 	and.w	r2, r6, #15
 801695c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016964:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8016968:	f7e9 fe5e 	bl	8000628 <__aeabi_dmul>
 801696c:	e9cd 0100 	strd	r0, r1, [sp]
 8016970:	1136      	asrs	r6, r6, #4
 8016972:	2300      	movs	r3, #0
 8016974:	2502      	movs	r5, #2
 8016976:	2e00      	cmp	r6, #0
 8016978:	d17f      	bne.n	8016a7a <_dtoa_r+0x49a>
 801697a:	2b00      	cmp	r3, #0
 801697c:	d1e1      	bne.n	8016942 <_dtoa_r+0x362>
 801697e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016980:	2b00      	cmp	r3, #0
 8016982:	f000 8087 	beq.w	8016a94 <_dtoa_r+0x4b4>
 8016986:	e9dd 6700 	ldrd	r6, r7, [sp]
 801698a:	2200      	movs	r2, #0
 801698c:	4b93      	ldr	r3, [pc, #588]	; (8016bdc <_dtoa_r+0x5fc>)
 801698e:	4630      	mov	r0, r6
 8016990:	4639      	mov	r1, r7
 8016992:	f7ea f8bb 	bl	8000b0c <__aeabi_dcmplt>
 8016996:	2800      	cmp	r0, #0
 8016998:	d07c      	beq.n	8016a94 <_dtoa_r+0x4b4>
 801699a:	f1b9 0f00 	cmp.w	r9, #0
 801699e:	d079      	beq.n	8016a94 <_dtoa_r+0x4b4>
 80169a0:	9b02      	ldr	r3, [sp, #8]
 80169a2:	2b00      	cmp	r3, #0
 80169a4:	dd35      	ble.n	8016a12 <_dtoa_r+0x432>
 80169a6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80169aa:	9308      	str	r3, [sp, #32]
 80169ac:	4639      	mov	r1, r7
 80169ae:	2200      	movs	r2, #0
 80169b0:	4b8b      	ldr	r3, [pc, #556]	; (8016be0 <_dtoa_r+0x600>)
 80169b2:	4630      	mov	r0, r6
 80169b4:	f7e9 fe38 	bl	8000628 <__aeabi_dmul>
 80169b8:	e9cd 0100 	strd	r0, r1, [sp]
 80169bc:	9f02      	ldr	r7, [sp, #8]
 80169be:	3501      	adds	r5, #1
 80169c0:	4628      	mov	r0, r5
 80169c2:	f7e9 fdc7 	bl	8000554 <__aeabi_i2d>
 80169c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80169ca:	f7e9 fe2d 	bl	8000628 <__aeabi_dmul>
 80169ce:	2200      	movs	r2, #0
 80169d0:	4b84      	ldr	r3, [pc, #528]	; (8016be4 <_dtoa_r+0x604>)
 80169d2:	f7e9 fc73 	bl	80002bc <__adddf3>
 80169d6:	4605      	mov	r5, r0
 80169d8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80169dc:	2f00      	cmp	r7, #0
 80169de:	d15d      	bne.n	8016a9c <_dtoa_r+0x4bc>
 80169e0:	2200      	movs	r2, #0
 80169e2:	4b81      	ldr	r3, [pc, #516]	; (8016be8 <_dtoa_r+0x608>)
 80169e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80169e8:	f7e9 fc66 	bl	80002b8 <__aeabi_dsub>
 80169ec:	462a      	mov	r2, r5
 80169ee:	4633      	mov	r3, r6
 80169f0:	e9cd 0100 	strd	r0, r1, [sp]
 80169f4:	f7ea f8a8 	bl	8000b48 <__aeabi_dcmpgt>
 80169f8:	2800      	cmp	r0, #0
 80169fa:	f040 8288 	bne.w	8016f0e <_dtoa_r+0x92e>
 80169fe:	462a      	mov	r2, r5
 8016a00:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8016a04:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016a08:	f7ea f880 	bl	8000b0c <__aeabi_dcmplt>
 8016a0c:	2800      	cmp	r0, #0
 8016a0e:	f040 827c 	bne.w	8016f0a <_dtoa_r+0x92a>
 8016a12:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8016a16:	e9cd 2300 	strd	r2, r3, [sp]
 8016a1a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016a1c:	2b00      	cmp	r3, #0
 8016a1e:	f2c0 8150 	blt.w	8016cc2 <_dtoa_r+0x6e2>
 8016a22:	f1ba 0f0e 	cmp.w	sl, #14
 8016a26:	f300 814c 	bgt.w	8016cc2 <_dtoa_r+0x6e2>
 8016a2a:	4b6a      	ldr	r3, [pc, #424]	; (8016bd4 <_dtoa_r+0x5f4>)
 8016a2c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8016a30:	ed93 7b00 	vldr	d7, [r3]
 8016a34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016a36:	2b00      	cmp	r3, #0
 8016a38:	ed8d 7b02 	vstr	d7, [sp, #8]
 8016a3c:	f280 80d8 	bge.w	8016bf0 <_dtoa_r+0x610>
 8016a40:	f1b9 0f00 	cmp.w	r9, #0
 8016a44:	f300 80d4 	bgt.w	8016bf0 <_dtoa_r+0x610>
 8016a48:	f040 825e 	bne.w	8016f08 <_dtoa_r+0x928>
 8016a4c:	2200      	movs	r2, #0
 8016a4e:	4b66      	ldr	r3, [pc, #408]	; (8016be8 <_dtoa_r+0x608>)
 8016a50:	ec51 0b17 	vmov	r0, r1, d7
 8016a54:	f7e9 fde8 	bl	8000628 <__aeabi_dmul>
 8016a58:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016a5c:	f7ea f86a 	bl	8000b34 <__aeabi_dcmpge>
 8016a60:	464f      	mov	r7, r9
 8016a62:	464e      	mov	r6, r9
 8016a64:	2800      	cmp	r0, #0
 8016a66:	f040 8234 	bne.w	8016ed2 <_dtoa_r+0x8f2>
 8016a6a:	2331      	movs	r3, #49	; 0x31
 8016a6c:	f10b 0501 	add.w	r5, fp, #1
 8016a70:	f88b 3000 	strb.w	r3, [fp]
 8016a74:	f10a 0a01 	add.w	sl, sl, #1
 8016a78:	e22f      	b.n	8016eda <_dtoa_r+0x8fa>
 8016a7a:	07f2      	lsls	r2, r6, #31
 8016a7c:	d505      	bpl.n	8016a8a <_dtoa_r+0x4aa>
 8016a7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016a82:	f7e9 fdd1 	bl	8000628 <__aeabi_dmul>
 8016a86:	3501      	adds	r5, #1
 8016a88:	2301      	movs	r3, #1
 8016a8a:	1076      	asrs	r6, r6, #1
 8016a8c:	3708      	adds	r7, #8
 8016a8e:	e772      	b.n	8016976 <_dtoa_r+0x396>
 8016a90:	2502      	movs	r5, #2
 8016a92:	e774      	b.n	801697e <_dtoa_r+0x39e>
 8016a94:	f8cd a020 	str.w	sl, [sp, #32]
 8016a98:	464f      	mov	r7, r9
 8016a9a:	e791      	b.n	80169c0 <_dtoa_r+0x3e0>
 8016a9c:	4b4d      	ldr	r3, [pc, #308]	; (8016bd4 <_dtoa_r+0x5f4>)
 8016a9e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8016aa2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8016aa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016aa8:	2b00      	cmp	r3, #0
 8016aaa:	d047      	beq.n	8016b3c <_dtoa_r+0x55c>
 8016aac:	4602      	mov	r2, r0
 8016aae:	460b      	mov	r3, r1
 8016ab0:	2000      	movs	r0, #0
 8016ab2:	494e      	ldr	r1, [pc, #312]	; (8016bec <_dtoa_r+0x60c>)
 8016ab4:	f7e9 fee2 	bl	800087c <__aeabi_ddiv>
 8016ab8:	462a      	mov	r2, r5
 8016aba:	4633      	mov	r3, r6
 8016abc:	f7e9 fbfc 	bl	80002b8 <__aeabi_dsub>
 8016ac0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8016ac4:	465d      	mov	r5, fp
 8016ac6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016aca:	f7ea f85d 	bl	8000b88 <__aeabi_d2iz>
 8016ace:	4606      	mov	r6, r0
 8016ad0:	f7e9 fd40 	bl	8000554 <__aeabi_i2d>
 8016ad4:	4602      	mov	r2, r0
 8016ad6:	460b      	mov	r3, r1
 8016ad8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016adc:	f7e9 fbec 	bl	80002b8 <__aeabi_dsub>
 8016ae0:	3630      	adds	r6, #48	; 0x30
 8016ae2:	f805 6b01 	strb.w	r6, [r5], #1
 8016ae6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8016aea:	e9cd 0100 	strd	r0, r1, [sp]
 8016aee:	f7ea f80d 	bl	8000b0c <__aeabi_dcmplt>
 8016af2:	2800      	cmp	r0, #0
 8016af4:	d163      	bne.n	8016bbe <_dtoa_r+0x5de>
 8016af6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016afa:	2000      	movs	r0, #0
 8016afc:	4937      	ldr	r1, [pc, #220]	; (8016bdc <_dtoa_r+0x5fc>)
 8016afe:	f7e9 fbdb 	bl	80002b8 <__aeabi_dsub>
 8016b02:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8016b06:	f7ea f801 	bl	8000b0c <__aeabi_dcmplt>
 8016b0a:	2800      	cmp	r0, #0
 8016b0c:	f040 80b7 	bne.w	8016c7e <_dtoa_r+0x69e>
 8016b10:	eba5 030b 	sub.w	r3, r5, fp
 8016b14:	429f      	cmp	r7, r3
 8016b16:	f77f af7c 	ble.w	8016a12 <_dtoa_r+0x432>
 8016b1a:	2200      	movs	r2, #0
 8016b1c:	4b30      	ldr	r3, [pc, #192]	; (8016be0 <_dtoa_r+0x600>)
 8016b1e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016b22:	f7e9 fd81 	bl	8000628 <__aeabi_dmul>
 8016b26:	2200      	movs	r2, #0
 8016b28:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8016b2c:	4b2c      	ldr	r3, [pc, #176]	; (8016be0 <_dtoa_r+0x600>)
 8016b2e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016b32:	f7e9 fd79 	bl	8000628 <__aeabi_dmul>
 8016b36:	e9cd 0100 	strd	r0, r1, [sp]
 8016b3a:	e7c4      	b.n	8016ac6 <_dtoa_r+0x4e6>
 8016b3c:	462a      	mov	r2, r5
 8016b3e:	4633      	mov	r3, r6
 8016b40:	f7e9 fd72 	bl	8000628 <__aeabi_dmul>
 8016b44:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8016b48:	eb0b 0507 	add.w	r5, fp, r7
 8016b4c:	465e      	mov	r6, fp
 8016b4e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016b52:	f7ea f819 	bl	8000b88 <__aeabi_d2iz>
 8016b56:	4607      	mov	r7, r0
 8016b58:	f7e9 fcfc 	bl	8000554 <__aeabi_i2d>
 8016b5c:	3730      	adds	r7, #48	; 0x30
 8016b5e:	4602      	mov	r2, r0
 8016b60:	460b      	mov	r3, r1
 8016b62:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016b66:	f7e9 fba7 	bl	80002b8 <__aeabi_dsub>
 8016b6a:	f806 7b01 	strb.w	r7, [r6], #1
 8016b6e:	42ae      	cmp	r6, r5
 8016b70:	e9cd 0100 	strd	r0, r1, [sp]
 8016b74:	f04f 0200 	mov.w	r2, #0
 8016b78:	d126      	bne.n	8016bc8 <_dtoa_r+0x5e8>
 8016b7a:	4b1c      	ldr	r3, [pc, #112]	; (8016bec <_dtoa_r+0x60c>)
 8016b7c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016b80:	f7e9 fb9c 	bl	80002bc <__adddf3>
 8016b84:	4602      	mov	r2, r0
 8016b86:	460b      	mov	r3, r1
 8016b88:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016b8c:	f7e9 ffdc 	bl	8000b48 <__aeabi_dcmpgt>
 8016b90:	2800      	cmp	r0, #0
 8016b92:	d174      	bne.n	8016c7e <_dtoa_r+0x69e>
 8016b94:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8016b98:	2000      	movs	r0, #0
 8016b9a:	4914      	ldr	r1, [pc, #80]	; (8016bec <_dtoa_r+0x60c>)
 8016b9c:	f7e9 fb8c 	bl	80002b8 <__aeabi_dsub>
 8016ba0:	4602      	mov	r2, r0
 8016ba2:	460b      	mov	r3, r1
 8016ba4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016ba8:	f7e9 ffb0 	bl	8000b0c <__aeabi_dcmplt>
 8016bac:	2800      	cmp	r0, #0
 8016bae:	f43f af30 	beq.w	8016a12 <_dtoa_r+0x432>
 8016bb2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8016bb6:	2b30      	cmp	r3, #48	; 0x30
 8016bb8:	f105 32ff 	add.w	r2, r5, #4294967295
 8016bbc:	d002      	beq.n	8016bc4 <_dtoa_r+0x5e4>
 8016bbe:	f8dd a020 	ldr.w	sl, [sp, #32]
 8016bc2:	e04a      	b.n	8016c5a <_dtoa_r+0x67a>
 8016bc4:	4615      	mov	r5, r2
 8016bc6:	e7f4      	b.n	8016bb2 <_dtoa_r+0x5d2>
 8016bc8:	4b05      	ldr	r3, [pc, #20]	; (8016be0 <_dtoa_r+0x600>)
 8016bca:	f7e9 fd2d 	bl	8000628 <__aeabi_dmul>
 8016bce:	e9cd 0100 	strd	r0, r1, [sp]
 8016bd2:	e7bc      	b.n	8016b4e <_dtoa_r+0x56e>
 8016bd4:	08019308 	.word	0x08019308
 8016bd8:	080192e0 	.word	0x080192e0
 8016bdc:	3ff00000 	.word	0x3ff00000
 8016be0:	40240000 	.word	0x40240000
 8016be4:	401c0000 	.word	0x401c0000
 8016be8:	40140000 	.word	0x40140000
 8016bec:	3fe00000 	.word	0x3fe00000
 8016bf0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8016bf4:	465d      	mov	r5, fp
 8016bf6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016bfa:	4630      	mov	r0, r6
 8016bfc:	4639      	mov	r1, r7
 8016bfe:	f7e9 fe3d 	bl	800087c <__aeabi_ddiv>
 8016c02:	f7e9 ffc1 	bl	8000b88 <__aeabi_d2iz>
 8016c06:	4680      	mov	r8, r0
 8016c08:	f7e9 fca4 	bl	8000554 <__aeabi_i2d>
 8016c0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016c10:	f7e9 fd0a 	bl	8000628 <__aeabi_dmul>
 8016c14:	4602      	mov	r2, r0
 8016c16:	460b      	mov	r3, r1
 8016c18:	4630      	mov	r0, r6
 8016c1a:	4639      	mov	r1, r7
 8016c1c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8016c20:	f7e9 fb4a 	bl	80002b8 <__aeabi_dsub>
 8016c24:	f805 6b01 	strb.w	r6, [r5], #1
 8016c28:	eba5 060b 	sub.w	r6, r5, fp
 8016c2c:	45b1      	cmp	r9, r6
 8016c2e:	4602      	mov	r2, r0
 8016c30:	460b      	mov	r3, r1
 8016c32:	d139      	bne.n	8016ca8 <_dtoa_r+0x6c8>
 8016c34:	f7e9 fb42 	bl	80002bc <__adddf3>
 8016c38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016c3c:	4606      	mov	r6, r0
 8016c3e:	460f      	mov	r7, r1
 8016c40:	f7e9 ff82 	bl	8000b48 <__aeabi_dcmpgt>
 8016c44:	b9c8      	cbnz	r0, 8016c7a <_dtoa_r+0x69a>
 8016c46:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016c4a:	4630      	mov	r0, r6
 8016c4c:	4639      	mov	r1, r7
 8016c4e:	f7e9 ff53 	bl	8000af8 <__aeabi_dcmpeq>
 8016c52:	b110      	cbz	r0, 8016c5a <_dtoa_r+0x67a>
 8016c54:	f018 0f01 	tst.w	r8, #1
 8016c58:	d10f      	bne.n	8016c7a <_dtoa_r+0x69a>
 8016c5a:	9904      	ldr	r1, [sp, #16]
 8016c5c:	4620      	mov	r0, r4
 8016c5e:	f000 fe18 	bl	8017892 <_Bfree>
 8016c62:	2300      	movs	r3, #0
 8016c64:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016c66:	702b      	strb	r3, [r5, #0]
 8016c68:	f10a 0301 	add.w	r3, sl, #1
 8016c6c:	6013      	str	r3, [r2, #0]
 8016c6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016c70:	2b00      	cmp	r3, #0
 8016c72:	f000 8241 	beq.w	80170f8 <_dtoa_r+0xb18>
 8016c76:	601d      	str	r5, [r3, #0]
 8016c78:	e23e      	b.n	80170f8 <_dtoa_r+0xb18>
 8016c7a:	f8cd a020 	str.w	sl, [sp, #32]
 8016c7e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8016c82:	2a39      	cmp	r2, #57	; 0x39
 8016c84:	f105 33ff 	add.w	r3, r5, #4294967295
 8016c88:	d108      	bne.n	8016c9c <_dtoa_r+0x6bc>
 8016c8a:	459b      	cmp	fp, r3
 8016c8c:	d10a      	bne.n	8016ca4 <_dtoa_r+0x6c4>
 8016c8e:	9b08      	ldr	r3, [sp, #32]
 8016c90:	3301      	adds	r3, #1
 8016c92:	9308      	str	r3, [sp, #32]
 8016c94:	2330      	movs	r3, #48	; 0x30
 8016c96:	f88b 3000 	strb.w	r3, [fp]
 8016c9a:	465b      	mov	r3, fp
 8016c9c:	781a      	ldrb	r2, [r3, #0]
 8016c9e:	3201      	adds	r2, #1
 8016ca0:	701a      	strb	r2, [r3, #0]
 8016ca2:	e78c      	b.n	8016bbe <_dtoa_r+0x5de>
 8016ca4:	461d      	mov	r5, r3
 8016ca6:	e7ea      	b.n	8016c7e <_dtoa_r+0x69e>
 8016ca8:	2200      	movs	r2, #0
 8016caa:	4b9b      	ldr	r3, [pc, #620]	; (8016f18 <_dtoa_r+0x938>)
 8016cac:	f7e9 fcbc 	bl	8000628 <__aeabi_dmul>
 8016cb0:	2200      	movs	r2, #0
 8016cb2:	2300      	movs	r3, #0
 8016cb4:	4606      	mov	r6, r0
 8016cb6:	460f      	mov	r7, r1
 8016cb8:	f7e9 ff1e 	bl	8000af8 <__aeabi_dcmpeq>
 8016cbc:	2800      	cmp	r0, #0
 8016cbe:	d09a      	beq.n	8016bf6 <_dtoa_r+0x616>
 8016cc0:	e7cb      	b.n	8016c5a <_dtoa_r+0x67a>
 8016cc2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016cc4:	2a00      	cmp	r2, #0
 8016cc6:	f000 808b 	beq.w	8016de0 <_dtoa_r+0x800>
 8016cca:	9a06      	ldr	r2, [sp, #24]
 8016ccc:	2a01      	cmp	r2, #1
 8016cce:	dc6e      	bgt.n	8016dae <_dtoa_r+0x7ce>
 8016cd0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016cd2:	2a00      	cmp	r2, #0
 8016cd4:	d067      	beq.n	8016da6 <_dtoa_r+0x7c6>
 8016cd6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8016cda:	9f07      	ldr	r7, [sp, #28]
 8016cdc:	9d05      	ldr	r5, [sp, #20]
 8016cde:	9a05      	ldr	r2, [sp, #20]
 8016ce0:	2101      	movs	r1, #1
 8016ce2:	441a      	add	r2, r3
 8016ce4:	4620      	mov	r0, r4
 8016ce6:	9205      	str	r2, [sp, #20]
 8016ce8:	4498      	add	r8, r3
 8016cea:	f000 feb0 	bl	8017a4e <__i2b>
 8016cee:	4606      	mov	r6, r0
 8016cf0:	2d00      	cmp	r5, #0
 8016cf2:	dd0c      	ble.n	8016d0e <_dtoa_r+0x72e>
 8016cf4:	f1b8 0f00 	cmp.w	r8, #0
 8016cf8:	dd09      	ble.n	8016d0e <_dtoa_r+0x72e>
 8016cfa:	4545      	cmp	r5, r8
 8016cfc:	9a05      	ldr	r2, [sp, #20]
 8016cfe:	462b      	mov	r3, r5
 8016d00:	bfa8      	it	ge
 8016d02:	4643      	movge	r3, r8
 8016d04:	1ad2      	subs	r2, r2, r3
 8016d06:	9205      	str	r2, [sp, #20]
 8016d08:	1aed      	subs	r5, r5, r3
 8016d0a:	eba8 0803 	sub.w	r8, r8, r3
 8016d0e:	9b07      	ldr	r3, [sp, #28]
 8016d10:	b1eb      	cbz	r3, 8016d4e <_dtoa_r+0x76e>
 8016d12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016d14:	2b00      	cmp	r3, #0
 8016d16:	d067      	beq.n	8016de8 <_dtoa_r+0x808>
 8016d18:	b18f      	cbz	r7, 8016d3e <_dtoa_r+0x75e>
 8016d1a:	4631      	mov	r1, r6
 8016d1c:	463a      	mov	r2, r7
 8016d1e:	4620      	mov	r0, r4
 8016d20:	f000 ff34 	bl	8017b8c <__pow5mult>
 8016d24:	9a04      	ldr	r2, [sp, #16]
 8016d26:	4601      	mov	r1, r0
 8016d28:	4606      	mov	r6, r0
 8016d2a:	4620      	mov	r0, r4
 8016d2c:	f000 fe98 	bl	8017a60 <__multiply>
 8016d30:	9904      	ldr	r1, [sp, #16]
 8016d32:	9008      	str	r0, [sp, #32]
 8016d34:	4620      	mov	r0, r4
 8016d36:	f000 fdac 	bl	8017892 <_Bfree>
 8016d3a:	9b08      	ldr	r3, [sp, #32]
 8016d3c:	9304      	str	r3, [sp, #16]
 8016d3e:	9b07      	ldr	r3, [sp, #28]
 8016d40:	1bda      	subs	r2, r3, r7
 8016d42:	d004      	beq.n	8016d4e <_dtoa_r+0x76e>
 8016d44:	9904      	ldr	r1, [sp, #16]
 8016d46:	4620      	mov	r0, r4
 8016d48:	f000 ff20 	bl	8017b8c <__pow5mult>
 8016d4c:	9004      	str	r0, [sp, #16]
 8016d4e:	2101      	movs	r1, #1
 8016d50:	4620      	mov	r0, r4
 8016d52:	f000 fe7c 	bl	8017a4e <__i2b>
 8016d56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016d58:	4607      	mov	r7, r0
 8016d5a:	2b00      	cmp	r3, #0
 8016d5c:	f000 81d0 	beq.w	8017100 <_dtoa_r+0xb20>
 8016d60:	461a      	mov	r2, r3
 8016d62:	4601      	mov	r1, r0
 8016d64:	4620      	mov	r0, r4
 8016d66:	f000 ff11 	bl	8017b8c <__pow5mult>
 8016d6a:	9b06      	ldr	r3, [sp, #24]
 8016d6c:	2b01      	cmp	r3, #1
 8016d6e:	4607      	mov	r7, r0
 8016d70:	dc40      	bgt.n	8016df4 <_dtoa_r+0x814>
 8016d72:	9b00      	ldr	r3, [sp, #0]
 8016d74:	2b00      	cmp	r3, #0
 8016d76:	d139      	bne.n	8016dec <_dtoa_r+0x80c>
 8016d78:	9b01      	ldr	r3, [sp, #4]
 8016d7a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016d7e:	2b00      	cmp	r3, #0
 8016d80:	d136      	bne.n	8016df0 <_dtoa_r+0x810>
 8016d82:	9b01      	ldr	r3, [sp, #4]
 8016d84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016d88:	0d1b      	lsrs	r3, r3, #20
 8016d8a:	051b      	lsls	r3, r3, #20
 8016d8c:	b12b      	cbz	r3, 8016d9a <_dtoa_r+0x7ba>
 8016d8e:	9b05      	ldr	r3, [sp, #20]
 8016d90:	3301      	adds	r3, #1
 8016d92:	9305      	str	r3, [sp, #20]
 8016d94:	f108 0801 	add.w	r8, r8, #1
 8016d98:	2301      	movs	r3, #1
 8016d9a:	9307      	str	r3, [sp, #28]
 8016d9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016d9e:	2b00      	cmp	r3, #0
 8016da0:	d12a      	bne.n	8016df8 <_dtoa_r+0x818>
 8016da2:	2001      	movs	r0, #1
 8016da4:	e030      	b.n	8016e08 <_dtoa_r+0x828>
 8016da6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016da8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8016dac:	e795      	b.n	8016cda <_dtoa_r+0x6fa>
 8016dae:	9b07      	ldr	r3, [sp, #28]
 8016db0:	f109 37ff 	add.w	r7, r9, #4294967295
 8016db4:	42bb      	cmp	r3, r7
 8016db6:	bfbf      	itttt	lt
 8016db8:	9b07      	ldrlt	r3, [sp, #28]
 8016dba:	9707      	strlt	r7, [sp, #28]
 8016dbc:	1afa      	sublt	r2, r7, r3
 8016dbe:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8016dc0:	bfbb      	ittet	lt
 8016dc2:	189b      	addlt	r3, r3, r2
 8016dc4:	930e      	strlt	r3, [sp, #56]	; 0x38
 8016dc6:	1bdf      	subge	r7, r3, r7
 8016dc8:	2700      	movlt	r7, #0
 8016dca:	f1b9 0f00 	cmp.w	r9, #0
 8016dce:	bfb5      	itete	lt
 8016dd0:	9b05      	ldrlt	r3, [sp, #20]
 8016dd2:	9d05      	ldrge	r5, [sp, #20]
 8016dd4:	eba3 0509 	sublt.w	r5, r3, r9
 8016dd8:	464b      	movge	r3, r9
 8016dda:	bfb8      	it	lt
 8016ddc:	2300      	movlt	r3, #0
 8016dde:	e77e      	b.n	8016cde <_dtoa_r+0x6fe>
 8016de0:	9f07      	ldr	r7, [sp, #28]
 8016de2:	9d05      	ldr	r5, [sp, #20]
 8016de4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8016de6:	e783      	b.n	8016cf0 <_dtoa_r+0x710>
 8016de8:	9a07      	ldr	r2, [sp, #28]
 8016dea:	e7ab      	b.n	8016d44 <_dtoa_r+0x764>
 8016dec:	2300      	movs	r3, #0
 8016dee:	e7d4      	b.n	8016d9a <_dtoa_r+0x7ba>
 8016df0:	9b00      	ldr	r3, [sp, #0]
 8016df2:	e7d2      	b.n	8016d9a <_dtoa_r+0x7ba>
 8016df4:	2300      	movs	r3, #0
 8016df6:	9307      	str	r3, [sp, #28]
 8016df8:	693b      	ldr	r3, [r7, #16]
 8016dfa:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8016dfe:	6918      	ldr	r0, [r3, #16]
 8016e00:	f000 fdd7 	bl	80179b2 <__hi0bits>
 8016e04:	f1c0 0020 	rsb	r0, r0, #32
 8016e08:	4440      	add	r0, r8
 8016e0a:	f010 001f 	ands.w	r0, r0, #31
 8016e0e:	d047      	beq.n	8016ea0 <_dtoa_r+0x8c0>
 8016e10:	f1c0 0320 	rsb	r3, r0, #32
 8016e14:	2b04      	cmp	r3, #4
 8016e16:	dd3b      	ble.n	8016e90 <_dtoa_r+0x8b0>
 8016e18:	9b05      	ldr	r3, [sp, #20]
 8016e1a:	f1c0 001c 	rsb	r0, r0, #28
 8016e1e:	4403      	add	r3, r0
 8016e20:	9305      	str	r3, [sp, #20]
 8016e22:	4405      	add	r5, r0
 8016e24:	4480      	add	r8, r0
 8016e26:	9b05      	ldr	r3, [sp, #20]
 8016e28:	2b00      	cmp	r3, #0
 8016e2a:	dd05      	ble.n	8016e38 <_dtoa_r+0x858>
 8016e2c:	461a      	mov	r2, r3
 8016e2e:	9904      	ldr	r1, [sp, #16]
 8016e30:	4620      	mov	r0, r4
 8016e32:	f000 fef9 	bl	8017c28 <__lshift>
 8016e36:	9004      	str	r0, [sp, #16]
 8016e38:	f1b8 0f00 	cmp.w	r8, #0
 8016e3c:	dd05      	ble.n	8016e4a <_dtoa_r+0x86a>
 8016e3e:	4639      	mov	r1, r7
 8016e40:	4642      	mov	r2, r8
 8016e42:	4620      	mov	r0, r4
 8016e44:	f000 fef0 	bl	8017c28 <__lshift>
 8016e48:	4607      	mov	r7, r0
 8016e4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016e4c:	b353      	cbz	r3, 8016ea4 <_dtoa_r+0x8c4>
 8016e4e:	4639      	mov	r1, r7
 8016e50:	9804      	ldr	r0, [sp, #16]
 8016e52:	f000 ff3d 	bl	8017cd0 <__mcmp>
 8016e56:	2800      	cmp	r0, #0
 8016e58:	da24      	bge.n	8016ea4 <_dtoa_r+0x8c4>
 8016e5a:	2300      	movs	r3, #0
 8016e5c:	220a      	movs	r2, #10
 8016e5e:	9904      	ldr	r1, [sp, #16]
 8016e60:	4620      	mov	r0, r4
 8016e62:	f000 fd2d 	bl	80178c0 <__multadd>
 8016e66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016e68:	9004      	str	r0, [sp, #16]
 8016e6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016e6e:	2b00      	cmp	r3, #0
 8016e70:	f000 814d 	beq.w	801710e <_dtoa_r+0xb2e>
 8016e74:	2300      	movs	r3, #0
 8016e76:	4631      	mov	r1, r6
 8016e78:	220a      	movs	r2, #10
 8016e7a:	4620      	mov	r0, r4
 8016e7c:	f000 fd20 	bl	80178c0 <__multadd>
 8016e80:	9b02      	ldr	r3, [sp, #8]
 8016e82:	2b00      	cmp	r3, #0
 8016e84:	4606      	mov	r6, r0
 8016e86:	dc4f      	bgt.n	8016f28 <_dtoa_r+0x948>
 8016e88:	9b06      	ldr	r3, [sp, #24]
 8016e8a:	2b02      	cmp	r3, #2
 8016e8c:	dd4c      	ble.n	8016f28 <_dtoa_r+0x948>
 8016e8e:	e011      	b.n	8016eb4 <_dtoa_r+0x8d4>
 8016e90:	d0c9      	beq.n	8016e26 <_dtoa_r+0x846>
 8016e92:	9a05      	ldr	r2, [sp, #20]
 8016e94:	331c      	adds	r3, #28
 8016e96:	441a      	add	r2, r3
 8016e98:	9205      	str	r2, [sp, #20]
 8016e9a:	441d      	add	r5, r3
 8016e9c:	4498      	add	r8, r3
 8016e9e:	e7c2      	b.n	8016e26 <_dtoa_r+0x846>
 8016ea0:	4603      	mov	r3, r0
 8016ea2:	e7f6      	b.n	8016e92 <_dtoa_r+0x8b2>
 8016ea4:	f1b9 0f00 	cmp.w	r9, #0
 8016ea8:	dc38      	bgt.n	8016f1c <_dtoa_r+0x93c>
 8016eaa:	9b06      	ldr	r3, [sp, #24]
 8016eac:	2b02      	cmp	r3, #2
 8016eae:	dd35      	ble.n	8016f1c <_dtoa_r+0x93c>
 8016eb0:	f8cd 9008 	str.w	r9, [sp, #8]
 8016eb4:	9b02      	ldr	r3, [sp, #8]
 8016eb6:	b963      	cbnz	r3, 8016ed2 <_dtoa_r+0x8f2>
 8016eb8:	4639      	mov	r1, r7
 8016eba:	2205      	movs	r2, #5
 8016ebc:	4620      	mov	r0, r4
 8016ebe:	f000 fcff 	bl	80178c0 <__multadd>
 8016ec2:	4601      	mov	r1, r0
 8016ec4:	4607      	mov	r7, r0
 8016ec6:	9804      	ldr	r0, [sp, #16]
 8016ec8:	f000 ff02 	bl	8017cd0 <__mcmp>
 8016ecc:	2800      	cmp	r0, #0
 8016ece:	f73f adcc 	bgt.w	8016a6a <_dtoa_r+0x48a>
 8016ed2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016ed4:	465d      	mov	r5, fp
 8016ed6:	ea6f 0a03 	mvn.w	sl, r3
 8016eda:	f04f 0900 	mov.w	r9, #0
 8016ede:	4639      	mov	r1, r7
 8016ee0:	4620      	mov	r0, r4
 8016ee2:	f000 fcd6 	bl	8017892 <_Bfree>
 8016ee6:	2e00      	cmp	r6, #0
 8016ee8:	f43f aeb7 	beq.w	8016c5a <_dtoa_r+0x67a>
 8016eec:	f1b9 0f00 	cmp.w	r9, #0
 8016ef0:	d005      	beq.n	8016efe <_dtoa_r+0x91e>
 8016ef2:	45b1      	cmp	r9, r6
 8016ef4:	d003      	beq.n	8016efe <_dtoa_r+0x91e>
 8016ef6:	4649      	mov	r1, r9
 8016ef8:	4620      	mov	r0, r4
 8016efa:	f000 fcca 	bl	8017892 <_Bfree>
 8016efe:	4631      	mov	r1, r6
 8016f00:	4620      	mov	r0, r4
 8016f02:	f000 fcc6 	bl	8017892 <_Bfree>
 8016f06:	e6a8      	b.n	8016c5a <_dtoa_r+0x67a>
 8016f08:	2700      	movs	r7, #0
 8016f0a:	463e      	mov	r6, r7
 8016f0c:	e7e1      	b.n	8016ed2 <_dtoa_r+0x8f2>
 8016f0e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8016f12:	463e      	mov	r6, r7
 8016f14:	e5a9      	b.n	8016a6a <_dtoa_r+0x48a>
 8016f16:	bf00      	nop
 8016f18:	40240000 	.word	0x40240000
 8016f1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016f1e:	f8cd 9008 	str.w	r9, [sp, #8]
 8016f22:	2b00      	cmp	r3, #0
 8016f24:	f000 80fa 	beq.w	801711c <_dtoa_r+0xb3c>
 8016f28:	2d00      	cmp	r5, #0
 8016f2a:	dd05      	ble.n	8016f38 <_dtoa_r+0x958>
 8016f2c:	4631      	mov	r1, r6
 8016f2e:	462a      	mov	r2, r5
 8016f30:	4620      	mov	r0, r4
 8016f32:	f000 fe79 	bl	8017c28 <__lshift>
 8016f36:	4606      	mov	r6, r0
 8016f38:	9b07      	ldr	r3, [sp, #28]
 8016f3a:	2b00      	cmp	r3, #0
 8016f3c:	d04c      	beq.n	8016fd8 <_dtoa_r+0x9f8>
 8016f3e:	6871      	ldr	r1, [r6, #4]
 8016f40:	4620      	mov	r0, r4
 8016f42:	f000 fc72 	bl	801782a <_Balloc>
 8016f46:	6932      	ldr	r2, [r6, #16]
 8016f48:	3202      	adds	r2, #2
 8016f4a:	4605      	mov	r5, r0
 8016f4c:	0092      	lsls	r2, r2, #2
 8016f4e:	f106 010c 	add.w	r1, r6, #12
 8016f52:	300c      	adds	r0, #12
 8016f54:	f000 fc5e 	bl	8017814 <memcpy>
 8016f58:	2201      	movs	r2, #1
 8016f5a:	4629      	mov	r1, r5
 8016f5c:	4620      	mov	r0, r4
 8016f5e:	f000 fe63 	bl	8017c28 <__lshift>
 8016f62:	9b00      	ldr	r3, [sp, #0]
 8016f64:	f8cd b014 	str.w	fp, [sp, #20]
 8016f68:	f003 0301 	and.w	r3, r3, #1
 8016f6c:	46b1      	mov	r9, r6
 8016f6e:	9307      	str	r3, [sp, #28]
 8016f70:	4606      	mov	r6, r0
 8016f72:	4639      	mov	r1, r7
 8016f74:	9804      	ldr	r0, [sp, #16]
 8016f76:	f7ff faa5 	bl	80164c4 <quorem>
 8016f7a:	4649      	mov	r1, r9
 8016f7c:	4605      	mov	r5, r0
 8016f7e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8016f82:	9804      	ldr	r0, [sp, #16]
 8016f84:	f000 fea4 	bl	8017cd0 <__mcmp>
 8016f88:	4632      	mov	r2, r6
 8016f8a:	9000      	str	r0, [sp, #0]
 8016f8c:	4639      	mov	r1, r7
 8016f8e:	4620      	mov	r0, r4
 8016f90:	f000 feb8 	bl	8017d04 <__mdiff>
 8016f94:	68c3      	ldr	r3, [r0, #12]
 8016f96:	4602      	mov	r2, r0
 8016f98:	bb03      	cbnz	r3, 8016fdc <_dtoa_r+0x9fc>
 8016f9a:	4601      	mov	r1, r0
 8016f9c:	9008      	str	r0, [sp, #32]
 8016f9e:	9804      	ldr	r0, [sp, #16]
 8016fa0:	f000 fe96 	bl	8017cd0 <__mcmp>
 8016fa4:	9a08      	ldr	r2, [sp, #32]
 8016fa6:	4603      	mov	r3, r0
 8016fa8:	4611      	mov	r1, r2
 8016faa:	4620      	mov	r0, r4
 8016fac:	9308      	str	r3, [sp, #32]
 8016fae:	f000 fc70 	bl	8017892 <_Bfree>
 8016fb2:	9b08      	ldr	r3, [sp, #32]
 8016fb4:	b9a3      	cbnz	r3, 8016fe0 <_dtoa_r+0xa00>
 8016fb6:	9a06      	ldr	r2, [sp, #24]
 8016fb8:	b992      	cbnz	r2, 8016fe0 <_dtoa_r+0xa00>
 8016fba:	9a07      	ldr	r2, [sp, #28]
 8016fbc:	b982      	cbnz	r2, 8016fe0 <_dtoa_r+0xa00>
 8016fbe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8016fc2:	d029      	beq.n	8017018 <_dtoa_r+0xa38>
 8016fc4:	9b00      	ldr	r3, [sp, #0]
 8016fc6:	2b00      	cmp	r3, #0
 8016fc8:	dd01      	ble.n	8016fce <_dtoa_r+0x9ee>
 8016fca:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8016fce:	9b05      	ldr	r3, [sp, #20]
 8016fd0:	1c5d      	adds	r5, r3, #1
 8016fd2:	f883 8000 	strb.w	r8, [r3]
 8016fd6:	e782      	b.n	8016ede <_dtoa_r+0x8fe>
 8016fd8:	4630      	mov	r0, r6
 8016fda:	e7c2      	b.n	8016f62 <_dtoa_r+0x982>
 8016fdc:	2301      	movs	r3, #1
 8016fde:	e7e3      	b.n	8016fa8 <_dtoa_r+0x9c8>
 8016fe0:	9a00      	ldr	r2, [sp, #0]
 8016fe2:	2a00      	cmp	r2, #0
 8016fe4:	db04      	blt.n	8016ff0 <_dtoa_r+0xa10>
 8016fe6:	d125      	bne.n	8017034 <_dtoa_r+0xa54>
 8016fe8:	9a06      	ldr	r2, [sp, #24]
 8016fea:	bb1a      	cbnz	r2, 8017034 <_dtoa_r+0xa54>
 8016fec:	9a07      	ldr	r2, [sp, #28]
 8016fee:	bb0a      	cbnz	r2, 8017034 <_dtoa_r+0xa54>
 8016ff0:	2b00      	cmp	r3, #0
 8016ff2:	ddec      	ble.n	8016fce <_dtoa_r+0x9ee>
 8016ff4:	2201      	movs	r2, #1
 8016ff6:	9904      	ldr	r1, [sp, #16]
 8016ff8:	4620      	mov	r0, r4
 8016ffa:	f000 fe15 	bl	8017c28 <__lshift>
 8016ffe:	4639      	mov	r1, r7
 8017000:	9004      	str	r0, [sp, #16]
 8017002:	f000 fe65 	bl	8017cd0 <__mcmp>
 8017006:	2800      	cmp	r0, #0
 8017008:	dc03      	bgt.n	8017012 <_dtoa_r+0xa32>
 801700a:	d1e0      	bne.n	8016fce <_dtoa_r+0x9ee>
 801700c:	f018 0f01 	tst.w	r8, #1
 8017010:	d0dd      	beq.n	8016fce <_dtoa_r+0x9ee>
 8017012:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8017016:	d1d8      	bne.n	8016fca <_dtoa_r+0x9ea>
 8017018:	9b05      	ldr	r3, [sp, #20]
 801701a:	9a05      	ldr	r2, [sp, #20]
 801701c:	1c5d      	adds	r5, r3, #1
 801701e:	2339      	movs	r3, #57	; 0x39
 8017020:	7013      	strb	r3, [r2, #0]
 8017022:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017026:	2b39      	cmp	r3, #57	; 0x39
 8017028:	f105 32ff 	add.w	r2, r5, #4294967295
 801702c:	d04f      	beq.n	80170ce <_dtoa_r+0xaee>
 801702e:	3301      	adds	r3, #1
 8017030:	7013      	strb	r3, [r2, #0]
 8017032:	e754      	b.n	8016ede <_dtoa_r+0x8fe>
 8017034:	9a05      	ldr	r2, [sp, #20]
 8017036:	2b00      	cmp	r3, #0
 8017038:	f102 0501 	add.w	r5, r2, #1
 801703c:	dd06      	ble.n	801704c <_dtoa_r+0xa6c>
 801703e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8017042:	d0e9      	beq.n	8017018 <_dtoa_r+0xa38>
 8017044:	f108 0801 	add.w	r8, r8, #1
 8017048:	9b05      	ldr	r3, [sp, #20]
 801704a:	e7c2      	b.n	8016fd2 <_dtoa_r+0x9f2>
 801704c:	9a02      	ldr	r2, [sp, #8]
 801704e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8017052:	eba5 030b 	sub.w	r3, r5, fp
 8017056:	4293      	cmp	r3, r2
 8017058:	d021      	beq.n	801709e <_dtoa_r+0xabe>
 801705a:	2300      	movs	r3, #0
 801705c:	220a      	movs	r2, #10
 801705e:	9904      	ldr	r1, [sp, #16]
 8017060:	4620      	mov	r0, r4
 8017062:	f000 fc2d 	bl	80178c0 <__multadd>
 8017066:	45b1      	cmp	r9, r6
 8017068:	9004      	str	r0, [sp, #16]
 801706a:	f04f 0300 	mov.w	r3, #0
 801706e:	f04f 020a 	mov.w	r2, #10
 8017072:	4649      	mov	r1, r9
 8017074:	4620      	mov	r0, r4
 8017076:	d105      	bne.n	8017084 <_dtoa_r+0xaa4>
 8017078:	f000 fc22 	bl	80178c0 <__multadd>
 801707c:	4681      	mov	r9, r0
 801707e:	4606      	mov	r6, r0
 8017080:	9505      	str	r5, [sp, #20]
 8017082:	e776      	b.n	8016f72 <_dtoa_r+0x992>
 8017084:	f000 fc1c 	bl	80178c0 <__multadd>
 8017088:	4631      	mov	r1, r6
 801708a:	4681      	mov	r9, r0
 801708c:	2300      	movs	r3, #0
 801708e:	220a      	movs	r2, #10
 8017090:	4620      	mov	r0, r4
 8017092:	f000 fc15 	bl	80178c0 <__multadd>
 8017096:	4606      	mov	r6, r0
 8017098:	e7f2      	b.n	8017080 <_dtoa_r+0xaa0>
 801709a:	f04f 0900 	mov.w	r9, #0
 801709e:	2201      	movs	r2, #1
 80170a0:	9904      	ldr	r1, [sp, #16]
 80170a2:	4620      	mov	r0, r4
 80170a4:	f000 fdc0 	bl	8017c28 <__lshift>
 80170a8:	4639      	mov	r1, r7
 80170aa:	9004      	str	r0, [sp, #16]
 80170ac:	f000 fe10 	bl	8017cd0 <__mcmp>
 80170b0:	2800      	cmp	r0, #0
 80170b2:	dcb6      	bgt.n	8017022 <_dtoa_r+0xa42>
 80170b4:	d102      	bne.n	80170bc <_dtoa_r+0xadc>
 80170b6:	f018 0f01 	tst.w	r8, #1
 80170ba:	d1b2      	bne.n	8017022 <_dtoa_r+0xa42>
 80170bc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80170c0:	2b30      	cmp	r3, #48	; 0x30
 80170c2:	f105 32ff 	add.w	r2, r5, #4294967295
 80170c6:	f47f af0a 	bne.w	8016ede <_dtoa_r+0x8fe>
 80170ca:	4615      	mov	r5, r2
 80170cc:	e7f6      	b.n	80170bc <_dtoa_r+0xadc>
 80170ce:	4593      	cmp	fp, r2
 80170d0:	d105      	bne.n	80170de <_dtoa_r+0xafe>
 80170d2:	2331      	movs	r3, #49	; 0x31
 80170d4:	f10a 0a01 	add.w	sl, sl, #1
 80170d8:	f88b 3000 	strb.w	r3, [fp]
 80170dc:	e6ff      	b.n	8016ede <_dtoa_r+0x8fe>
 80170de:	4615      	mov	r5, r2
 80170e0:	e79f      	b.n	8017022 <_dtoa_r+0xa42>
 80170e2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8017148 <_dtoa_r+0xb68>
 80170e6:	e007      	b.n	80170f8 <_dtoa_r+0xb18>
 80170e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80170ea:	f8df b060 	ldr.w	fp, [pc, #96]	; 801714c <_dtoa_r+0xb6c>
 80170ee:	b11b      	cbz	r3, 80170f8 <_dtoa_r+0xb18>
 80170f0:	f10b 0308 	add.w	r3, fp, #8
 80170f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80170f6:	6013      	str	r3, [r2, #0]
 80170f8:	4658      	mov	r0, fp
 80170fa:	b017      	add	sp, #92	; 0x5c
 80170fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017100:	9b06      	ldr	r3, [sp, #24]
 8017102:	2b01      	cmp	r3, #1
 8017104:	f77f ae35 	ble.w	8016d72 <_dtoa_r+0x792>
 8017108:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801710a:	9307      	str	r3, [sp, #28]
 801710c:	e649      	b.n	8016da2 <_dtoa_r+0x7c2>
 801710e:	9b02      	ldr	r3, [sp, #8]
 8017110:	2b00      	cmp	r3, #0
 8017112:	dc03      	bgt.n	801711c <_dtoa_r+0xb3c>
 8017114:	9b06      	ldr	r3, [sp, #24]
 8017116:	2b02      	cmp	r3, #2
 8017118:	f73f aecc 	bgt.w	8016eb4 <_dtoa_r+0x8d4>
 801711c:	465d      	mov	r5, fp
 801711e:	4639      	mov	r1, r7
 8017120:	9804      	ldr	r0, [sp, #16]
 8017122:	f7ff f9cf 	bl	80164c4 <quorem>
 8017126:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801712a:	f805 8b01 	strb.w	r8, [r5], #1
 801712e:	9a02      	ldr	r2, [sp, #8]
 8017130:	eba5 030b 	sub.w	r3, r5, fp
 8017134:	429a      	cmp	r2, r3
 8017136:	ddb0      	ble.n	801709a <_dtoa_r+0xaba>
 8017138:	2300      	movs	r3, #0
 801713a:	220a      	movs	r2, #10
 801713c:	9904      	ldr	r1, [sp, #16]
 801713e:	4620      	mov	r0, r4
 8017140:	f000 fbbe 	bl	80178c0 <__multadd>
 8017144:	9004      	str	r0, [sp, #16]
 8017146:	e7ea      	b.n	801711e <_dtoa_r+0xb3e>
 8017148:	08019403 	.word	0x08019403
 801714c:	080192c8 	.word	0x080192c8

08017150 <rshift>:
 8017150:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017152:	6906      	ldr	r6, [r0, #16]
 8017154:	114b      	asrs	r3, r1, #5
 8017156:	429e      	cmp	r6, r3
 8017158:	f100 0414 	add.w	r4, r0, #20
 801715c:	dd30      	ble.n	80171c0 <rshift+0x70>
 801715e:	f011 011f 	ands.w	r1, r1, #31
 8017162:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8017166:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 801716a:	d108      	bne.n	801717e <rshift+0x2e>
 801716c:	4621      	mov	r1, r4
 801716e:	42b2      	cmp	r2, r6
 8017170:	460b      	mov	r3, r1
 8017172:	d211      	bcs.n	8017198 <rshift+0x48>
 8017174:	f852 3b04 	ldr.w	r3, [r2], #4
 8017178:	f841 3b04 	str.w	r3, [r1], #4
 801717c:	e7f7      	b.n	801716e <rshift+0x1e>
 801717e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8017182:	f1c1 0c20 	rsb	ip, r1, #32
 8017186:	40cd      	lsrs	r5, r1
 8017188:	3204      	adds	r2, #4
 801718a:	4623      	mov	r3, r4
 801718c:	42b2      	cmp	r2, r6
 801718e:	4617      	mov	r7, r2
 8017190:	d30c      	bcc.n	80171ac <rshift+0x5c>
 8017192:	601d      	str	r5, [r3, #0]
 8017194:	b105      	cbz	r5, 8017198 <rshift+0x48>
 8017196:	3304      	adds	r3, #4
 8017198:	1b1a      	subs	r2, r3, r4
 801719a:	42a3      	cmp	r3, r4
 801719c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80171a0:	bf08      	it	eq
 80171a2:	2300      	moveq	r3, #0
 80171a4:	6102      	str	r2, [r0, #16]
 80171a6:	bf08      	it	eq
 80171a8:	6143      	streq	r3, [r0, #20]
 80171aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80171ac:	683f      	ldr	r7, [r7, #0]
 80171ae:	fa07 f70c 	lsl.w	r7, r7, ip
 80171b2:	433d      	orrs	r5, r7
 80171b4:	f843 5b04 	str.w	r5, [r3], #4
 80171b8:	f852 5b04 	ldr.w	r5, [r2], #4
 80171bc:	40cd      	lsrs	r5, r1
 80171be:	e7e5      	b.n	801718c <rshift+0x3c>
 80171c0:	4623      	mov	r3, r4
 80171c2:	e7e9      	b.n	8017198 <rshift+0x48>

080171c4 <__hexdig_fun>:
 80171c4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80171c8:	2b09      	cmp	r3, #9
 80171ca:	d802      	bhi.n	80171d2 <__hexdig_fun+0xe>
 80171cc:	3820      	subs	r0, #32
 80171ce:	b2c0      	uxtb	r0, r0
 80171d0:	4770      	bx	lr
 80171d2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80171d6:	2b05      	cmp	r3, #5
 80171d8:	d801      	bhi.n	80171de <__hexdig_fun+0x1a>
 80171da:	3847      	subs	r0, #71	; 0x47
 80171dc:	e7f7      	b.n	80171ce <__hexdig_fun+0xa>
 80171de:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80171e2:	2b05      	cmp	r3, #5
 80171e4:	d801      	bhi.n	80171ea <__hexdig_fun+0x26>
 80171e6:	3827      	subs	r0, #39	; 0x27
 80171e8:	e7f1      	b.n	80171ce <__hexdig_fun+0xa>
 80171ea:	2000      	movs	r0, #0
 80171ec:	4770      	bx	lr

080171ee <__gethex>:
 80171ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80171f2:	b08b      	sub	sp, #44	; 0x2c
 80171f4:	468a      	mov	sl, r1
 80171f6:	9002      	str	r0, [sp, #8]
 80171f8:	9816      	ldr	r0, [sp, #88]	; 0x58
 80171fa:	9306      	str	r3, [sp, #24]
 80171fc:	4690      	mov	r8, r2
 80171fe:	f000 fadf 	bl	80177c0 <__localeconv_l>
 8017202:	6803      	ldr	r3, [r0, #0]
 8017204:	9303      	str	r3, [sp, #12]
 8017206:	4618      	mov	r0, r3
 8017208:	f7e8 fffa 	bl	8000200 <strlen>
 801720c:	9b03      	ldr	r3, [sp, #12]
 801720e:	9001      	str	r0, [sp, #4]
 8017210:	4403      	add	r3, r0
 8017212:	f04f 0b00 	mov.w	fp, #0
 8017216:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801721a:	9307      	str	r3, [sp, #28]
 801721c:	f8da 3000 	ldr.w	r3, [sl]
 8017220:	3302      	adds	r3, #2
 8017222:	461f      	mov	r7, r3
 8017224:	f813 0b01 	ldrb.w	r0, [r3], #1
 8017228:	2830      	cmp	r0, #48	; 0x30
 801722a:	d06c      	beq.n	8017306 <__gethex+0x118>
 801722c:	f7ff ffca 	bl	80171c4 <__hexdig_fun>
 8017230:	4604      	mov	r4, r0
 8017232:	2800      	cmp	r0, #0
 8017234:	d16a      	bne.n	801730c <__gethex+0x11e>
 8017236:	9a01      	ldr	r2, [sp, #4]
 8017238:	9903      	ldr	r1, [sp, #12]
 801723a:	4638      	mov	r0, r7
 801723c:	f001 fc40 	bl	8018ac0 <strncmp>
 8017240:	2800      	cmp	r0, #0
 8017242:	d166      	bne.n	8017312 <__gethex+0x124>
 8017244:	9b01      	ldr	r3, [sp, #4]
 8017246:	5cf8      	ldrb	r0, [r7, r3]
 8017248:	18fe      	adds	r6, r7, r3
 801724a:	f7ff ffbb 	bl	80171c4 <__hexdig_fun>
 801724e:	2800      	cmp	r0, #0
 8017250:	d062      	beq.n	8017318 <__gethex+0x12a>
 8017252:	4633      	mov	r3, r6
 8017254:	7818      	ldrb	r0, [r3, #0]
 8017256:	2830      	cmp	r0, #48	; 0x30
 8017258:	461f      	mov	r7, r3
 801725a:	f103 0301 	add.w	r3, r3, #1
 801725e:	d0f9      	beq.n	8017254 <__gethex+0x66>
 8017260:	f7ff ffb0 	bl	80171c4 <__hexdig_fun>
 8017264:	fab0 f580 	clz	r5, r0
 8017268:	096d      	lsrs	r5, r5, #5
 801726a:	4634      	mov	r4, r6
 801726c:	f04f 0b01 	mov.w	fp, #1
 8017270:	463a      	mov	r2, r7
 8017272:	4616      	mov	r6, r2
 8017274:	3201      	adds	r2, #1
 8017276:	7830      	ldrb	r0, [r6, #0]
 8017278:	f7ff ffa4 	bl	80171c4 <__hexdig_fun>
 801727c:	2800      	cmp	r0, #0
 801727e:	d1f8      	bne.n	8017272 <__gethex+0x84>
 8017280:	9a01      	ldr	r2, [sp, #4]
 8017282:	9903      	ldr	r1, [sp, #12]
 8017284:	4630      	mov	r0, r6
 8017286:	f001 fc1b 	bl	8018ac0 <strncmp>
 801728a:	b950      	cbnz	r0, 80172a2 <__gethex+0xb4>
 801728c:	b954      	cbnz	r4, 80172a4 <__gethex+0xb6>
 801728e:	9b01      	ldr	r3, [sp, #4]
 8017290:	18f4      	adds	r4, r6, r3
 8017292:	4622      	mov	r2, r4
 8017294:	4616      	mov	r6, r2
 8017296:	3201      	adds	r2, #1
 8017298:	7830      	ldrb	r0, [r6, #0]
 801729a:	f7ff ff93 	bl	80171c4 <__hexdig_fun>
 801729e:	2800      	cmp	r0, #0
 80172a0:	d1f8      	bne.n	8017294 <__gethex+0xa6>
 80172a2:	b10c      	cbz	r4, 80172a8 <__gethex+0xba>
 80172a4:	1ba4      	subs	r4, r4, r6
 80172a6:	00a4      	lsls	r4, r4, #2
 80172a8:	7833      	ldrb	r3, [r6, #0]
 80172aa:	2b50      	cmp	r3, #80	; 0x50
 80172ac:	d001      	beq.n	80172b2 <__gethex+0xc4>
 80172ae:	2b70      	cmp	r3, #112	; 0x70
 80172b0:	d140      	bne.n	8017334 <__gethex+0x146>
 80172b2:	7873      	ldrb	r3, [r6, #1]
 80172b4:	2b2b      	cmp	r3, #43	; 0x2b
 80172b6:	d031      	beq.n	801731c <__gethex+0x12e>
 80172b8:	2b2d      	cmp	r3, #45	; 0x2d
 80172ba:	d033      	beq.n	8017324 <__gethex+0x136>
 80172bc:	1c71      	adds	r1, r6, #1
 80172be:	f04f 0900 	mov.w	r9, #0
 80172c2:	7808      	ldrb	r0, [r1, #0]
 80172c4:	f7ff ff7e 	bl	80171c4 <__hexdig_fun>
 80172c8:	1e43      	subs	r3, r0, #1
 80172ca:	b2db      	uxtb	r3, r3
 80172cc:	2b18      	cmp	r3, #24
 80172ce:	d831      	bhi.n	8017334 <__gethex+0x146>
 80172d0:	f1a0 0210 	sub.w	r2, r0, #16
 80172d4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80172d8:	f7ff ff74 	bl	80171c4 <__hexdig_fun>
 80172dc:	1e43      	subs	r3, r0, #1
 80172de:	b2db      	uxtb	r3, r3
 80172e0:	2b18      	cmp	r3, #24
 80172e2:	d922      	bls.n	801732a <__gethex+0x13c>
 80172e4:	f1b9 0f00 	cmp.w	r9, #0
 80172e8:	d000      	beq.n	80172ec <__gethex+0xfe>
 80172ea:	4252      	negs	r2, r2
 80172ec:	4414      	add	r4, r2
 80172ee:	f8ca 1000 	str.w	r1, [sl]
 80172f2:	b30d      	cbz	r5, 8017338 <__gethex+0x14a>
 80172f4:	f1bb 0f00 	cmp.w	fp, #0
 80172f8:	bf0c      	ite	eq
 80172fa:	2706      	moveq	r7, #6
 80172fc:	2700      	movne	r7, #0
 80172fe:	4638      	mov	r0, r7
 8017300:	b00b      	add	sp, #44	; 0x2c
 8017302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017306:	f10b 0b01 	add.w	fp, fp, #1
 801730a:	e78a      	b.n	8017222 <__gethex+0x34>
 801730c:	2500      	movs	r5, #0
 801730e:	462c      	mov	r4, r5
 8017310:	e7ae      	b.n	8017270 <__gethex+0x82>
 8017312:	463e      	mov	r6, r7
 8017314:	2501      	movs	r5, #1
 8017316:	e7c7      	b.n	80172a8 <__gethex+0xba>
 8017318:	4604      	mov	r4, r0
 801731a:	e7fb      	b.n	8017314 <__gethex+0x126>
 801731c:	f04f 0900 	mov.w	r9, #0
 8017320:	1cb1      	adds	r1, r6, #2
 8017322:	e7ce      	b.n	80172c2 <__gethex+0xd4>
 8017324:	f04f 0901 	mov.w	r9, #1
 8017328:	e7fa      	b.n	8017320 <__gethex+0x132>
 801732a:	230a      	movs	r3, #10
 801732c:	fb03 0202 	mla	r2, r3, r2, r0
 8017330:	3a10      	subs	r2, #16
 8017332:	e7cf      	b.n	80172d4 <__gethex+0xe6>
 8017334:	4631      	mov	r1, r6
 8017336:	e7da      	b.n	80172ee <__gethex+0x100>
 8017338:	1bf3      	subs	r3, r6, r7
 801733a:	3b01      	subs	r3, #1
 801733c:	4629      	mov	r1, r5
 801733e:	2b07      	cmp	r3, #7
 8017340:	dc49      	bgt.n	80173d6 <__gethex+0x1e8>
 8017342:	9802      	ldr	r0, [sp, #8]
 8017344:	f000 fa71 	bl	801782a <_Balloc>
 8017348:	9b01      	ldr	r3, [sp, #4]
 801734a:	f100 0914 	add.w	r9, r0, #20
 801734e:	f04f 0b00 	mov.w	fp, #0
 8017352:	f1c3 0301 	rsb	r3, r3, #1
 8017356:	4605      	mov	r5, r0
 8017358:	f8cd 9010 	str.w	r9, [sp, #16]
 801735c:	46da      	mov	sl, fp
 801735e:	9308      	str	r3, [sp, #32]
 8017360:	42b7      	cmp	r7, r6
 8017362:	d33b      	bcc.n	80173dc <__gethex+0x1ee>
 8017364:	9804      	ldr	r0, [sp, #16]
 8017366:	f840 ab04 	str.w	sl, [r0], #4
 801736a:	eba0 0009 	sub.w	r0, r0, r9
 801736e:	1080      	asrs	r0, r0, #2
 8017370:	6128      	str	r0, [r5, #16]
 8017372:	0147      	lsls	r7, r0, #5
 8017374:	4650      	mov	r0, sl
 8017376:	f000 fb1c 	bl	80179b2 <__hi0bits>
 801737a:	f8d8 6000 	ldr.w	r6, [r8]
 801737e:	1a3f      	subs	r7, r7, r0
 8017380:	42b7      	cmp	r7, r6
 8017382:	dd64      	ble.n	801744e <__gethex+0x260>
 8017384:	1bbf      	subs	r7, r7, r6
 8017386:	4639      	mov	r1, r7
 8017388:	4628      	mov	r0, r5
 801738a:	f000 fe2b 	bl	8017fe4 <__any_on>
 801738e:	4682      	mov	sl, r0
 8017390:	b178      	cbz	r0, 80173b2 <__gethex+0x1c4>
 8017392:	1e7b      	subs	r3, r7, #1
 8017394:	1159      	asrs	r1, r3, #5
 8017396:	f003 021f 	and.w	r2, r3, #31
 801739a:	f04f 0a01 	mov.w	sl, #1
 801739e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80173a2:	fa0a f202 	lsl.w	r2, sl, r2
 80173a6:	420a      	tst	r2, r1
 80173a8:	d003      	beq.n	80173b2 <__gethex+0x1c4>
 80173aa:	4553      	cmp	r3, sl
 80173ac:	dc46      	bgt.n	801743c <__gethex+0x24e>
 80173ae:	f04f 0a02 	mov.w	sl, #2
 80173b2:	4639      	mov	r1, r7
 80173b4:	4628      	mov	r0, r5
 80173b6:	f7ff fecb 	bl	8017150 <rshift>
 80173ba:	443c      	add	r4, r7
 80173bc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80173c0:	42a3      	cmp	r3, r4
 80173c2:	da52      	bge.n	801746a <__gethex+0x27c>
 80173c4:	4629      	mov	r1, r5
 80173c6:	9802      	ldr	r0, [sp, #8]
 80173c8:	f000 fa63 	bl	8017892 <_Bfree>
 80173cc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80173ce:	2300      	movs	r3, #0
 80173d0:	6013      	str	r3, [r2, #0]
 80173d2:	27a3      	movs	r7, #163	; 0xa3
 80173d4:	e793      	b.n	80172fe <__gethex+0x110>
 80173d6:	3101      	adds	r1, #1
 80173d8:	105b      	asrs	r3, r3, #1
 80173da:	e7b0      	b.n	801733e <__gethex+0x150>
 80173dc:	1e73      	subs	r3, r6, #1
 80173de:	9305      	str	r3, [sp, #20]
 80173e0:	9a07      	ldr	r2, [sp, #28]
 80173e2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80173e6:	4293      	cmp	r3, r2
 80173e8:	d018      	beq.n	801741c <__gethex+0x22e>
 80173ea:	f1bb 0f20 	cmp.w	fp, #32
 80173ee:	d107      	bne.n	8017400 <__gethex+0x212>
 80173f0:	9b04      	ldr	r3, [sp, #16]
 80173f2:	f8c3 a000 	str.w	sl, [r3]
 80173f6:	3304      	adds	r3, #4
 80173f8:	f04f 0a00 	mov.w	sl, #0
 80173fc:	9304      	str	r3, [sp, #16]
 80173fe:	46d3      	mov	fp, sl
 8017400:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8017404:	f7ff fede 	bl	80171c4 <__hexdig_fun>
 8017408:	f000 000f 	and.w	r0, r0, #15
 801740c:	fa00 f00b 	lsl.w	r0, r0, fp
 8017410:	ea4a 0a00 	orr.w	sl, sl, r0
 8017414:	f10b 0b04 	add.w	fp, fp, #4
 8017418:	9b05      	ldr	r3, [sp, #20]
 801741a:	e00d      	b.n	8017438 <__gethex+0x24a>
 801741c:	9b05      	ldr	r3, [sp, #20]
 801741e:	9a08      	ldr	r2, [sp, #32]
 8017420:	4413      	add	r3, r2
 8017422:	42bb      	cmp	r3, r7
 8017424:	d3e1      	bcc.n	80173ea <__gethex+0x1fc>
 8017426:	4618      	mov	r0, r3
 8017428:	9a01      	ldr	r2, [sp, #4]
 801742a:	9903      	ldr	r1, [sp, #12]
 801742c:	9309      	str	r3, [sp, #36]	; 0x24
 801742e:	f001 fb47 	bl	8018ac0 <strncmp>
 8017432:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017434:	2800      	cmp	r0, #0
 8017436:	d1d8      	bne.n	80173ea <__gethex+0x1fc>
 8017438:	461e      	mov	r6, r3
 801743a:	e791      	b.n	8017360 <__gethex+0x172>
 801743c:	1eb9      	subs	r1, r7, #2
 801743e:	4628      	mov	r0, r5
 8017440:	f000 fdd0 	bl	8017fe4 <__any_on>
 8017444:	2800      	cmp	r0, #0
 8017446:	d0b2      	beq.n	80173ae <__gethex+0x1c0>
 8017448:	f04f 0a03 	mov.w	sl, #3
 801744c:	e7b1      	b.n	80173b2 <__gethex+0x1c4>
 801744e:	da09      	bge.n	8017464 <__gethex+0x276>
 8017450:	1bf7      	subs	r7, r6, r7
 8017452:	4629      	mov	r1, r5
 8017454:	463a      	mov	r2, r7
 8017456:	9802      	ldr	r0, [sp, #8]
 8017458:	f000 fbe6 	bl	8017c28 <__lshift>
 801745c:	1be4      	subs	r4, r4, r7
 801745e:	4605      	mov	r5, r0
 8017460:	f100 0914 	add.w	r9, r0, #20
 8017464:	f04f 0a00 	mov.w	sl, #0
 8017468:	e7a8      	b.n	80173bc <__gethex+0x1ce>
 801746a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801746e:	42a0      	cmp	r0, r4
 8017470:	dd6a      	ble.n	8017548 <__gethex+0x35a>
 8017472:	1b04      	subs	r4, r0, r4
 8017474:	42a6      	cmp	r6, r4
 8017476:	dc2e      	bgt.n	80174d6 <__gethex+0x2e8>
 8017478:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801747c:	2b02      	cmp	r3, #2
 801747e:	d022      	beq.n	80174c6 <__gethex+0x2d8>
 8017480:	2b03      	cmp	r3, #3
 8017482:	d024      	beq.n	80174ce <__gethex+0x2e0>
 8017484:	2b01      	cmp	r3, #1
 8017486:	d115      	bne.n	80174b4 <__gethex+0x2c6>
 8017488:	42a6      	cmp	r6, r4
 801748a:	d113      	bne.n	80174b4 <__gethex+0x2c6>
 801748c:	2e01      	cmp	r6, #1
 801748e:	dc0b      	bgt.n	80174a8 <__gethex+0x2ba>
 8017490:	9a06      	ldr	r2, [sp, #24]
 8017492:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8017496:	6013      	str	r3, [r2, #0]
 8017498:	2301      	movs	r3, #1
 801749a:	612b      	str	r3, [r5, #16]
 801749c:	f8c9 3000 	str.w	r3, [r9]
 80174a0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80174a2:	2762      	movs	r7, #98	; 0x62
 80174a4:	601d      	str	r5, [r3, #0]
 80174a6:	e72a      	b.n	80172fe <__gethex+0x110>
 80174a8:	1e71      	subs	r1, r6, #1
 80174aa:	4628      	mov	r0, r5
 80174ac:	f000 fd9a 	bl	8017fe4 <__any_on>
 80174b0:	2800      	cmp	r0, #0
 80174b2:	d1ed      	bne.n	8017490 <__gethex+0x2a2>
 80174b4:	4629      	mov	r1, r5
 80174b6:	9802      	ldr	r0, [sp, #8]
 80174b8:	f000 f9eb 	bl	8017892 <_Bfree>
 80174bc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80174be:	2300      	movs	r3, #0
 80174c0:	6013      	str	r3, [r2, #0]
 80174c2:	2750      	movs	r7, #80	; 0x50
 80174c4:	e71b      	b.n	80172fe <__gethex+0x110>
 80174c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80174c8:	2b00      	cmp	r3, #0
 80174ca:	d0e1      	beq.n	8017490 <__gethex+0x2a2>
 80174cc:	e7f2      	b.n	80174b4 <__gethex+0x2c6>
 80174ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80174d0:	2b00      	cmp	r3, #0
 80174d2:	d1dd      	bne.n	8017490 <__gethex+0x2a2>
 80174d4:	e7ee      	b.n	80174b4 <__gethex+0x2c6>
 80174d6:	1e67      	subs	r7, r4, #1
 80174d8:	f1ba 0f00 	cmp.w	sl, #0
 80174dc:	d131      	bne.n	8017542 <__gethex+0x354>
 80174de:	b127      	cbz	r7, 80174ea <__gethex+0x2fc>
 80174e0:	4639      	mov	r1, r7
 80174e2:	4628      	mov	r0, r5
 80174e4:	f000 fd7e 	bl	8017fe4 <__any_on>
 80174e8:	4682      	mov	sl, r0
 80174ea:	117a      	asrs	r2, r7, #5
 80174ec:	2301      	movs	r3, #1
 80174ee:	f007 071f 	and.w	r7, r7, #31
 80174f2:	fa03 f707 	lsl.w	r7, r3, r7
 80174f6:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80174fa:	4621      	mov	r1, r4
 80174fc:	421f      	tst	r7, r3
 80174fe:	4628      	mov	r0, r5
 8017500:	bf18      	it	ne
 8017502:	f04a 0a02 	orrne.w	sl, sl, #2
 8017506:	1b36      	subs	r6, r6, r4
 8017508:	f7ff fe22 	bl	8017150 <rshift>
 801750c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8017510:	2702      	movs	r7, #2
 8017512:	f1ba 0f00 	cmp.w	sl, #0
 8017516:	d048      	beq.n	80175aa <__gethex+0x3bc>
 8017518:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801751c:	2b02      	cmp	r3, #2
 801751e:	d015      	beq.n	801754c <__gethex+0x35e>
 8017520:	2b03      	cmp	r3, #3
 8017522:	d017      	beq.n	8017554 <__gethex+0x366>
 8017524:	2b01      	cmp	r3, #1
 8017526:	d109      	bne.n	801753c <__gethex+0x34e>
 8017528:	f01a 0f02 	tst.w	sl, #2
 801752c:	d006      	beq.n	801753c <__gethex+0x34e>
 801752e:	f8d9 3000 	ldr.w	r3, [r9]
 8017532:	ea4a 0a03 	orr.w	sl, sl, r3
 8017536:	f01a 0f01 	tst.w	sl, #1
 801753a:	d10e      	bne.n	801755a <__gethex+0x36c>
 801753c:	f047 0710 	orr.w	r7, r7, #16
 8017540:	e033      	b.n	80175aa <__gethex+0x3bc>
 8017542:	f04f 0a01 	mov.w	sl, #1
 8017546:	e7d0      	b.n	80174ea <__gethex+0x2fc>
 8017548:	2701      	movs	r7, #1
 801754a:	e7e2      	b.n	8017512 <__gethex+0x324>
 801754c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801754e:	f1c3 0301 	rsb	r3, r3, #1
 8017552:	9315      	str	r3, [sp, #84]	; 0x54
 8017554:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017556:	2b00      	cmp	r3, #0
 8017558:	d0f0      	beq.n	801753c <__gethex+0x34e>
 801755a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 801755e:	f105 0314 	add.w	r3, r5, #20
 8017562:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8017566:	eb03 010a 	add.w	r1, r3, sl
 801756a:	f04f 0c00 	mov.w	ip, #0
 801756e:	4618      	mov	r0, r3
 8017570:	f853 2b04 	ldr.w	r2, [r3], #4
 8017574:	f1b2 3fff 	cmp.w	r2, #4294967295
 8017578:	d01c      	beq.n	80175b4 <__gethex+0x3c6>
 801757a:	3201      	adds	r2, #1
 801757c:	6002      	str	r2, [r0, #0]
 801757e:	2f02      	cmp	r7, #2
 8017580:	f105 0314 	add.w	r3, r5, #20
 8017584:	d138      	bne.n	80175f8 <__gethex+0x40a>
 8017586:	f8d8 2000 	ldr.w	r2, [r8]
 801758a:	3a01      	subs	r2, #1
 801758c:	42b2      	cmp	r2, r6
 801758e:	d10a      	bne.n	80175a6 <__gethex+0x3b8>
 8017590:	1171      	asrs	r1, r6, #5
 8017592:	2201      	movs	r2, #1
 8017594:	f006 061f 	and.w	r6, r6, #31
 8017598:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801759c:	fa02 f606 	lsl.w	r6, r2, r6
 80175a0:	421e      	tst	r6, r3
 80175a2:	bf18      	it	ne
 80175a4:	4617      	movne	r7, r2
 80175a6:	f047 0720 	orr.w	r7, r7, #32
 80175aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80175ac:	601d      	str	r5, [r3, #0]
 80175ae:	9b06      	ldr	r3, [sp, #24]
 80175b0:	601c      	str	r4, [r3, #0]
 80175b2:	e6a4      	b.n	80172fe <__gethex+0x110>
 80175b4:	4299      	cmp	r1, r3
 80175b6:	f843 cc04 	str.w	ip, [r3, #-4]
 80175ba:	d8d8      	bhi.n	801756e <__gethex+0x380>
 80175bc:	68ab      	ldr	r3, [r5, #8]
 80175be:	4599      	cmp	r9, r3
 80175c0:	db12      	blt.n	80175e8 <__gethex+0x3fa>
 80175c2:	6869      	ldr	r1, [r5, #4]
 80175c4:	9802      	ldr	r0, [sp, #8]
 80175c6:	3101      	adds	r1, #1
 80175c8:	f000 f92f 	bl	801782a <_Balloc>
 80175cc:	692a      	ldr	r2, [r5, #16]
 80175ce:	3202      	adds	r2, #2
 80175d0:	f105 010c 	add.w	r1, r5, #12
 80175d4:	4683      	mov	fp, r0
 80175d6:	0092      	lsls	r2, r2, #2
 80175d8:	300c      	adds	r0, #12
 80175da:	f000 f91b 	bl	8017814 <memcpy>
 80175de:	4629      	mov	r1, r5
 80175e0:	9802      	ldr	r0, [sp, #8]
 80175e2:	f000 f956 	bl	8017892 <_Bfree>
 80175e6:	465d      	mov	r5, fp
 80175e8:	692b      	ldr	r3, [r5, #16]
 80175ea:	1c5a      	adds	r2, r3, #1
 80175ec:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80175f0:	612a      	str	r2, [r5, #16]
 80175f2:	2201      	movs	r2, #1
 80175f4:	615a      	str	r2, [r3, #20]
 80175f6:	e7c2      	b.n	801757e <__gethex+0x390>
 80175f8:	692a      	ldr	r2, [r5, #16]
 80175fa:	454a      	cmp	r2, r9
 80175fc:	dd0b      	ble.n	8017616 <__gethex+0x428>
 80175fe:	2101      	movs	r1, #1
 8017600:	4628      	mov	r0, r5
 8017602:	f7ff fda5 	bl	8017150 <rshift>
 8017606:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801760a:	3401      	adds	r4, #1
 801760c:	42a3      	cmp	r3, r4
 801760e:	f6ff aed9 	blt.w	80173c4 <__gethex+0x1d6>
 8017612:	2701      	movs	r7, #1
 8017614:	e7c7      	b.n	80175a6 <__gethex+0x3b8>
 8017616:	f016 061f 	ands.w	r6, r6, #31
 801761a:	d0fa      	beq.n	8017612 <__gethex+0x424>
 801761c:	449a      	add	sl, r3
 801761e:	f1c6 0620 	rsb	r6, r6, #32
 8017622:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8017626:	f000 f9c4 	bl	80179b2 <__hi0bits>
 801762a:	42b0      	cmp	r0, r6
 801762c:	dbe7      	blt.n	80175fe <__gethex+0x410>
 801762e:	e7f0      	b.n	8017612 <__gethex+0x424>

08017630 <L_shift>:
 8017630:	f1c2 0208 	rsb	r2, r2, #8
 8017634:	0092      	lsls	r2, r2, #2
 8017636:	b570      	push	{r4, r5, r6, lr}
 8017638:	f1c2 0620 	rsb	r6, r2, #32
 801763c:	6843      	ldr	r3, [r0, #4]
 801763e:	6804      	ldr	r4, [r0, #0]
 8017640:	fa03 f506 	lsl.w	r5, r3, r6
 8017644:	432c      	orrs	r4, r5
 8017646:	40d3      	lsrs	r3, r2
 8017648:	6004      	str	r4, [r0, #0]
 801764a:	f840 3f04 	str.w	r3, [r0, #4]!
 801764e:	4288      	cmp	r0, r1
 8017650:	d3f4      	bcc.n	801763c <L_shift+0xc>
 8017652:	bd70      	pop	{r4, r5, r6, pc}

08017654 <__match>:
 8017654:	b530      	push	{r4, r5, lr}
 8017656:	6803      	ldr	r3, [r0, #0]
 8017658:	3301      	adds	r3, #1
 801765a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801765e:	b914      	cbnz	r4, 8017666 <__match+0x12>
 8017660:	6003      	str	r3, [r0, #0]
 8017662:	2001      	movs	r0, #1
 8017664:	bd30      	pop	{r4, r5, pc}
 8017666:	f813 2b01 	ldrb.w	r2, [r3], #1
 801766a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801766e:	2d19      	cmp	r5, #25
 8017670:	bf98      	it	ls
 8017672:	3220      	addls	r2, #32
 8017674:	42a2      	cmp	r2, r4
 8017676:	d0f0      	beq.n	801765a <__match+0x6>
 8017678:	2000      	movs	r0, #0
 801767a:	e7f3      	b.n	8017664 <__match+0x10>

0801767c <__hexnan>:
 801767c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017680:	680b      	ldr	r3, [r1, #0]
 8017682:	6801      	ldr	r1, [r0, #0]
 8017684:	115f      	asrs	r7, r3, #5
 8017686:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 801768a:	f013 031f 	ands.w	r3, r3, #31
 801768e:	b087      	sub	sp, #28
 8017690:	bf18      	it	ne
 8017692:	3704      	addne	r7, #4
 8017694:	2500      	movs	r5, #0
 8017696:	1f3e      	subs	r6, r7, #4
 8017698:	4682      	mov	sl, r0
 801769a:	4690      	mov	r8, r2
 801769c:	9301      	str	r3, [sp, #4]
 801769e:	f847 5c04 	str.w	r5, [r7, #-4]
 80176a2:	46b1      	mov	r9, r6
 80176a4:	4634      	mov	r4, r6
 80176a6:	9502      	str	r5, [sp, #8]
 80176a8:	46ab      	mov	fp, r5
 80176aa:	784a      	ldrb	r2, [r1, #1]
 80176ac:	1c4b      	adds	r3, r1, #1
 80176ae:	9303      	str	r3, [sp, #12]
 80176b0:	b342      	cbz	r2, 8017704 <__hexnan+0x88>
 80176b2:	4610      	mov	r0, r2
 80176b4:	9105      	str	r1, [sp, #20]
 80176b6:	9204      	str	r2, [sp, #16]
 80176b8:	f7ff fd84 	bl	80171c4 <__hexdig_fun>
 80176bc:	2800      	cmp	r0, #0
 80176be:	d143      	bne.n	8017748 <__hexnan+0xcc>
 80176c0:	9a04      	ldr	r2, [sp, #16]
 80176c2:	9905      	ldr	r1, [sp, #20]
 80176c4:	2a20      	cmp	r2, #32
 80176c6:	d818      	bhi.n	80176fa <__hexnan+0x7e>
 80176c8:	9b02      	ldr	r3, [sp, #8]
 80176ca:	459b      	cmp	fp, r3
 80176cc:	dd13      	ble.n	80176f6 <__hexnan+0x7a>
 80176ce:	454c      	cmp	r4, r9
 80176d0:	d206      	bcs.n	80176e0 <__hexnan+0x64>
 80176d2:	2d07      	cmp	r5, #7
 80176d4:	dc04      	bgt.n	80176e0 <__hexnan+0x64>
 80176d6:	462a      	mov	r2, r5
 80176d8:	4649      	mov	r1, r9
 80176da:	4620      	mov	r0, r4
 80176dc:	f7ff ffa8 	bl	8017630 <L_shift>
 80176e0:	4544      	cmp	r4, r8
 80176e2:	d944      	bls.n	801776e <__hexnan+0xf2>
 80176e4:	2300      	movs	r3, #0
 80176e6:	f1a4 0904 	sub.w	r9, r4, #4
 80176ea:	f844 3c04 	str.w	r3, [r4, #-4]
 80176ee:	f8cd b008 	str.w	fp, [sp, #8]
 80176f2:	464c      	mov	r4, r9
 80176f4:	461d      	mov	r5, r3
 80176f6:	9903      	ldr	r1, [sp, #12]
 80176f8:	e7d7      	b.n	80176aa <__hexnan+0x2e>
 80176fa:	2a29      	cmp	r2, #41	; 0x29
 80176fc:	d14a      	bne.n	8017794 <__hexnan+0x118>
 80176fe:	3102      	adds	r1, #2
 8017700:	f8ca 1000 	str.w	r1, [sl]
 8017704:	f1bb 0f00 	cmp.w	fp, #0
 8017708:	d044      	beq.n	8017794 <__hexnan+0x118>
 801770a:	454c      	cmp	r4, r9
 801770c:	d206      	bcs.n	801771c <__hexnan+0xa0>
 801770e:	2d07      	cmp	r5, #7
 8017710:	dc04      	bgt.n	801771c <__hexnan+0xa0>
 8017712:	462a      	mov	r2, r5
 8017714:	4649      	mov	r1, r9
 8017716:	4620      	mov	r0, r4
 8017718:	f7ff ff8a 	bl	8017630 <L_shift>
 801771c:	4544      	cmp	r4, r8
 801771e:	d928      	bls.n	8017772 <__hexnan+0xf6>
 8017720:	4643      	mov	r3, r8
 8017722:	f854 2b04 	ldr.w	r2, [r4], #4
 8017726:	f843 2b04 	str.w	r2, [r3], #4
 801772a:	42a6      	cmp	r6, r4
 801772c:	d2f9      	bcs.n	8017722 <__hexnan+0xa6>
 801772e:	2200      	movs	r2, #0
 8017730:	f843 2b04 	str.w	r2, [r3], #4
 8017734:	429e      	cmp	r6, r3
 8017736:	d2fb      	bcs.n	8017730 <__hexnan+0xb4>
 8017738:	6833      	ldr	r3, [r6, #0]
 801773a:	b91b      	cbnz	r3, 8017744 <__hexnan+0xc8>
 801773c:	4546      	cmp	r6, r8
 801773e:	d127      	bne.n	8017790 <__hexnan+0x114>
 8017740:	2301      	movs	r3, #1
 8017742:	6033      	str	r3, [r6, #0]
 8017744:	2005      	movs	r0, #5
 8017746:	e026      	b.n	8017796 <__hexnan+0x11a>
 8017748:	3501      	adds	r5, #1
 801774a:	2d08      	cmp	r5, #8
 801774c:	f10b 0b01 	add.w	fp, fp, #1
 8017750:	dd06      	ble.n	8017760 <__hexnan+0xe4>
 8017752:	4544      	cmp	r4, r8
 8017754:	d9cf      	bls.n	80176f6 <__hexnan+0x7a>
 8017756:	2300      	movs	r3, #0
 8017758:	f844 3c04 	str.w	r3, [r4, #-4]
 801775c:	2501      	movs	r5, #1
 801775e:	3c04      	subs	r4, #4
 8017760:	6822      	ldr	r2, [r4, #0]
 8017762:	f000 000f 	and.w	r0, r0, #15
 8017766:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801776a:	6020      	str	r0, [r4, #0]
 801776c:	e7c3      	b.n	80176f6 <__hexnan+0x7a>
 801776e:	2508      	movs	r5, #8
 8017770:	e7c1      	b.n	80176f6 <__hexnan+0x7a>
 8017772:	9b01      	ldr	r3, [sp, #4]
 8017774:	2b00      	cmp	r3, #0
 8017776:	d0df      	beq.n	8017738 <__hexnan+0xbc>
 8017778:	f04f 32ff 	mov.w	r2, #4294967295
 801777c:	f1c3 0320 	rsb	r3, r3, #32
 8017780:	fa22 f303 	lsr.w	r3, r2, r3
 8017784:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8017788:	401a      	ands	r2, r3
 801778a:	f847 2c04 	str.w	r2, [r7, #-4]
 801778e:	e7d3      	b.n	8017738 <__hexnan+0xbc>
 8017790:	3e04      	subs	r6, #4
 8017792:	e7d1      	b.n	8017738 <__hexnan+0xbc>
 8017794:	2004      	movs	r0, #4
 8017796:	b007      	add	sp, #28
 8017798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801779c <__locale_ctype_ptr_l>:
 801779c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80177a0:	4770      	bx	lr
	...

080177a4 <__locale_ctype_ptr>:
 80177a4:	4b04      	ldr	r3, [pc, #16]	; (80177b8 <__locale_ctype_ptr+0x14>)
 80177a6:	4a05      	ldr	r2, [pc, #20]	; (80177bc <__locale_ctype_ptr+0x18>)
 80177a8:	681b      	ldr	r3, [r3, #0]
 80177aa:	6a1b      	ldr	r3, [r3, #32]
 80177ac:	2b00      	cmp	r3, #0
 80177ae:	bf08      	it	eq
 80177b0:	4613      	moveq	r3, r2
 80177b2:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 80177b6:	4770      	bx	lr
 80177b8:	2000000c 	.word	0x2000000c
 80177bc:	20000070 	.word	0x20000070

080177c0 <__localeconv_l>:
 80177c0:	30f0      	adds	r0, #240	; 0xf0
 80177c2:	4770      	bx	lr

080177c4 <_localeconv_r>:
 80177c4:	4b04      	ldr	r3, [pc, #16]	; (80177d8 <_localeconv_r+0x14>)
 80177c6:	681b      	ldr	r3, [r3, #0]
 80177c8:	6a18      	ldr	r0, [r3, #32]
 80177ca:	4b04      	ldr	r3, [pc, #16]	; (80177dc <_localeconv_r+0x18>)
 80177cc:	2800      	cmp	r0, #0
 80177ce:	bf08      	it	eq
 80177d0:	4618      	moveq	r0, r3
 80177d2:	30f0      	adds	r0, #240	; 0xf0
 80177d4:	4770      	bx	lr
 80177d6:	bf00      	nop
 80177d8:	2000000c 	.word	0x2000000c
 80177dc:	20000070 	.word	0x20000070

080177e0 <malloc>:
 80177e0:	4b02      	ldr	r3, [pc, #8]	; (80177ec <malloc+0xc>)
 80177e2:	4601      	mov	r1, r0
 80177e4:	6818      	ldr	r0, [r3, #0]
 80177e6:	f000 bc7b 	b.w	80180e0 <_malloc_r>
 80177ea:	bf00      	nop
 80177ec:	2000000c 	.word	0x2000000c

080177f0 <__ascii_mbtowc>:
 80177f0:	b082      	sub	sp, #8
 80177f2:	b901      	cbnz	r1, 80177f6 <__ascii_mbtowc+0x6>
 80177f4:	a901      	add	r1, sp, #4
 80177f6:	b142      	cbz	r2, 801780a <__ascii_mbtowc+0x1a>
 80177f8:	b14b      	cbz	r3, 801780e <__ascii_mbtowc+0x1e>
 80177fa:	7813      	ldrb	r3, [r2, #0]
 80177fc:	600b      	str	r3, [r1, #0]
 80177fe:	7812      	ldrb	r2, [r2, #0]
 8017800:	1c10      	adds	r0, r2, #0
 8017802:	bf18      	it	ne
 8017804:	2001      	movne	r0, #1
 8017806:	b002      	add	sp, #8
 8017808:	4770      	bx	lr
 801780a:	4610      	mov	r0, r2
 801780c:	e7fb      	b.n	8017806 <__ascii_mbtowc+0x16>
 801780e:	f06f 0001 	mvn.w	r0, #1
 8017812:	e7f8      	b.n	8017806 <__ascii_mbtowc+0x16>

08017814 <memcpy>:
 8017814:	b510      	push	{r4, lr}
 8017816:	1e43      	subs	r3, r0, #1
 8017818:	440a      	add	r2, r1
 801781a:	4291      	cmp	r1, r2
 801781c:	d100      	bne.n	8017820 <memcpy+0xc>
 801781e:	bd10      	pop	{r4, pc}
 8017820:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017824:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017828:	e7f7      	b.n	801781a <memcpy+0x6>

0801782a <_Balloc>:
 801782a:	b570      	push	{r4, r5, r6, lr}
 801782c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801782e:	4604      	mov	r4, r0
 8017830:	460e      	mov	r6, r1
 8017832:	b93d      	cbnz	r5, 8017844 <_Balloc+0x1a>
 8017834:	2010      	movs	r0, #16
 8017836:	f7ff ffd3 	bl	80177e0 <malloc>
 801783a:	6260      	str	r0, [r4, #36]	; 0x24
 801783c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8017840:	6005      	str	r5, [r0, #0]
 8017842:	60c5      	str	r5, [r0, #12]
 8017844:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8017846:	68eb      	ldr	r3, [r5, #12]
 8017848:	b183      	cbz	r3, 801786c <_Balloc+0x42>
 801784a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801784c:	68db      	ldr	r3, [r3, #12]
 801784e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8017852:	b9b8      	cbnz	r0, 8017884 <_Balloc+0x5a>
 8017854:	2101      	movs	r1, #1
 8017856:	fa01 f506 	lsl.w	r5, r1, r6
 801785a:	1d6a      	adds	r2, r5, #5
 801785c:	0092      	lsls	r2, r2, #2
 801785e:	4620      	mov	r0, r4
 8017860:	f000 fbe1 	bl	8018026 <_calloc_r>
 8017864:	b160      	cbz	r0, 8017880 <_Balloc+0x56>
 8017866:	e9c0 6501 	strd	r6, r5, [r0, #4]
 801786a:	e00e      	b.n	801788a <_Balloc+0x60>
 801786c:	2221      	movs	r2, #33	; 0x21
 801786e:	2104      	movs	r1, #4
 8017870:	4620      	mov	r0, r4
 8017872:	f000 fbd8 	bl	8018026 <_calloc_r>
 8017876:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017878:	60e8      	str	r0, [r5, #12]
 801787a:	68db      	ldr	r3, [r3, #12]
 801787c:	2b00      	cmp	r3, #0
 801787e:	d1e4      	bne.n	801784a <_Balloc+0x20>
 8017880:	2000      	movs	r0, #0
 8017882:	bd70      	pop	{r4, r5, r6, pc}
 8017884:	6802      	ldr	r2, [r0, #0]
 8017886:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 801788a:	2300      	movs	r3, #0
 801788c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8017890:	e7f7      	b.n	8017882 <_Balloc+0x58>

08017892 <_Bfree>:
 8017892:	b570      	push	{r4, r5, r6, lr}
 8017894:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8017896:	4606      	mov	r6, r0
 8017898:	460d      	mov	r5, r1
 801789a:	b93c      	cbnz	r4, 80178ac <_Bfree+0x1a>
 801789c:	2010      	movs	r0, #16
 801789e:	f7ff ff9f 	bl	80177e0 <malloc>
 80178a2:	6270      	str	r0, [r6, #36]	; 0x24
 80178a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80178a8:	6004      	str	r4, [r0, #0]
 80178aa:	60c4      	str	r4, [r0, #12]
 80178ac:	b13d      	cbz	r5, 80178be <_Bfree+0x2c>
 80178ae:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80178b0:	686a      	ldr	r2, [r5, #4]
 80178b2:	68db      	ldr	r3, [r3, #12]
 80178b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80178b8:	6029      	str	r1, [r5, #0]
 80178ba:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80178be:	bd70      	pop	{r4, r5, r6, pc}

080178c0 <__multadd>:
 80178c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80178c4:	690d      	ldr	r5, [r1, #16]
 80178c6:	461f      	mov	r7, r3
 80178c8:	4606      	mov	r6, r0
 80178ca:	460c      	mov	r4, r1
 80178cc:	f101 0c14 	add.w	ip, r1, #20
 80178d0:	2300      	movs	r3, #0
 80178d2:	f8dc 0000 	ldr.w	r0, [ip]
 80178d6:	b281      	uxth	r1, r0
 80178d8:	fb02 7101 	mla	r1, r2, r1, r7
 80178dc:	0c0f      	lsrs	r7, r1, #16
 80178de:	0c00      	lsrs	r0, r0, #16
 80178e0:	fb02 7000 	mla	r0, r2, r0, r7
 80178e4:	b289      	uxth	r1, r1
 80178e6:	3301      	adds	r3, #1
 80178e8:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80178ec:	429d      	cmp	r5, r3
 80178ee:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80178f2:	f84c 1b04 	str.w	r1, [ip], #4
 80178f6:	dcec      	bgt.n	80178d2 <__multadd+0x12>
 80178f8:	b1d7      	cbz	r7, 8017930 <__multadd+0x70>
 80178fa:	68a3      	ldr	r3, [r4, #8]
 80178fc:	42ab      	cmp	r3, r5
 80178fe:	dc12      	bgt.n	8017926 <__multadd+0x66>
 8017900:	6861      	ldr	r1, [r4, #4]
 8017902:	4630      	mov	r0, r6
 8017904:	3101      	adds	r1, #1
 8017906:	f7ff ff90 	bl	801782a <_Balloc>
 801790a:	6922      	ldr	r2, [r4, #16]
 801790c:	3202      	adds	r2, #2
 801790e:	f104 010c 	add.w	r1, r4, #12
 8017912:	4680      	mov	r8, r0
 8017914:	0092      	lsls	r2, r2, #2
 8017916:	300c      	adds	r0, #12
 8017918:	f7ff ff7c 	bl	8017814 <memcpy>
 801791c:	4621      	mov	r1, r4
 801791e:	4630      	mov	r0, r6
 8017920:	f7ff ffb7 	bl	8017892 <_Bfree>
 8017924:	4644      	mov	r4, r8
 8017926:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801792a:	3501      	adds	r5, #1
 801792c:	615f      	str	r7, [r3, #20]
 801792e:	6125      	str	r5, [r4, #16]
 8017930:	4620      	mov	r0, r4
 8017932:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017936 <__s2b>:
 8017936:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801793a:	460c      	mov	r4, r1
 801793c:	4615      	mov	r5, r2
 801793e:	461f      	mov	r7, r3
 8017940:	2209      	movs	r2, #9
 8017942:	3308      	adds	r3, #8
 8017944:	4606      	mov	r6, r0
 8017946:	fb93 f3f2 	sdiv	r3, r3, r2
 801794a:	2100      	movs	r1, #0
 801794c:	2201      	movs	r2, #1
 801794e:	429a      	cmp	r2, r3
 8017950:	db20      	blt.n	8017994 <__s2b+0x5e>
 8017952:	4630      	mov	r0, r6
 8017954:	f7ff ff69 	bl	801782a <_Balloc>
 8017958:	9b08      	ldr	r3, [sp, #32]
 801795a:	6143      	str	r3, [r0, #20]
 801795c:	2d09      	cmp	r5, #9
 801795e:	f04f 0301 	mov.w	r3, #1
 8017962:	6103      	str	r3, [r0, #16]
 8017964:	dd19      	ble.n	801799a <__s2b+0x64>
 8017966:	f104 0809 	add.w	r8, r4, #9
 801796a:	46c1      	mov	r9, r8
 801796c:	442c      	add	r4, r5
 801796e:	f819 3b01 	ldrb.w	r3, [r9], #1
 8017972:	4601      	mov	r1, r0
 8017974:	3b30      	subs	r3, #48	; 0x30
 8017976:	220a      	movs	r2, #10
 8017978:	4630      	mov	r0, r6
 801797a:	f7ff ffa1 	bl	80178c0 <__multadd>
 801797e:	45a1      	cmp	r9, r4
 8017980:	d1f5      	bne.n	801796e <__s2b+0x38>
 8017982:	eb08 0405 	add.w	r4, r8, r5
 8017986:	3c08      	subs	r4, #8
 8017988:	1b2d      	subs	r5, r5, r4
 801798a:	1963      	adds	r3, r4, r5
 801798c:	42bb      	cmp	r3, r7
 801798e:	db07      	blt.n	80179a0 <__s2b+0x6a>
 8017990:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017994:	0052      	lsls	r2, r2, #1
 8017996:	3101      	adds	r1, #1
 8017998:	e7d9      	b.n	801794e <__s2b+0x18>
 801799a:	340a      	adds	r4, #10
 801799c:	2509      	movs	r5, #9
 801799e:	e7f3      	b.n	8017988 <__s2b+0x52>
 80179a0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80179a4:	4601      	mov	r1, r0
 80179a6:	3b30      	subs	r3, #48	; 0x30
 80179a8:	220a      	movs	r2, #10
 80179aa:	4630      	mov	r0, r6
 80179ac:	f7ff ff88 	bl	80178c0 <__multadd>
 80179b0:	e7eb      	b.n	801798a <__s2b+0x54>

080179b2 <__hi0bits>:
 80179b2:	0c02      	lsrs	r2, r0, #16
 80179b4:	0412      	lsls	r2, r2, #16
 80179b6:	4603      	mov	r3, r0
 80179b8:	b9b2      	cbnz	r2, 80179e8 <__hi0bits+0x36>
 80179ba:	0403      	lsls	r3, r0, #16
 80179bc:	2010      	movs	r0, #16
 80179be:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80179c2:	bf04      	itt	eq
 80179c4:	021b      	lsleq	r3, r3, #8
 80179c6:	3008      	addeq	r0, #8
 80179c8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80179cc:	bf04      	itt	eq
 80179ce:	011b      	lsleq	r3, r3, #4
 80179d0:	3004      	addeq	r0, #4
 80179d2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80179d6:	bf04      	itt	eq
 80179d8:	009b      	lsleq	r3, r3, #2
 80179da:	3002      	addeq	r0, #2
 80179dc:	2b00      	cmp	r3, #0
 80179de:	db06      	blt.n	80179ee <__hi0bits+0x3c>
 80179e0:	005b      	lsls	r3, r3, #1
 80179e2:	d503      	bpl.n	80179ec <__hi0bits+0x3a>
 80179e4:	3001      	adds	r0, #1
 80179e6:	4770      	bx	lr
 80179e8:	2000      	movs	r0, #0
 80179ea:	e7e8      	b.n	80179be <__hi0bits+0xc>
 80179ec:	2020      	movs	r0, #32
 80179ee:	4770      	bx	lr

080179f0 <__lo0bits>:
 80179f0:	6803      	ldr	r3, [r0, #0]
 80179f2:	f013 0207 	ands.w	r2, r3, #7
 80179f6:	4601      	mov	r1, r0
 80179f8:	d00b      	beq.n	8017a12 <__lo0bits+0x22>
 80179fa:	07da      	lsls	r2, r3, #31
 80179fc:	d423      	bmi.n	8017a46 <__lo0bits+0x56>
 80179fe:	0798      	lsls	r0, r3, #30
 8017a00:	bf49      	itett	mi
 8017a02:	085b      	lsrmi	r3, r3, #1
 8017a04:	089b      	lsrpl	r3, r3, #2
 8017a06:	2001      	movmi	r0, #1
 8017a08:	600b      	strmi	r3, [r1, #0]
 8017a0a:	bf5c      	itt	pl
 8017a0c:	600b      	strpl	r3, [r1, #0]
 8017a0e:	2002      	movpl	r0, #2
 8017a10:	4770      	bx	lr
 8017a12:	b298      	uxth	r0, r3
 8017a14:	b9a8      	cbnz	r0, 8017a42 <__lo0bits+0x52>
 8017a16:	0c1b      	lsrs	r3, r3, #16
 8017a18:	2010      	movs	r0, #16
 8017a1a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8017a1e:	bf04      	itt	eq
 8017a20:	0a1b      	lsreq	r3, r3, #8
 8017a22:	3008      	addeq	r0, #8
 8017a24:	071a      	lsls	r2, r3, #28
 8017a26:	bf04      	itt	eq
 8017a28:	091b      	lsreq	r3, r3, #4
 8017a2a:	3004      	addeq	r0, #4
 8017a2c:	079a      	lsls	r2, r3, #30
 8017a2e:	bf04      	itt	eq
 8017a30:	089b      	lsreq	r3, r3, #2
 8017a32:	3002      	addeq	r0, #2
 8017a34:	07da      	lsls	r2, r3, #31
 8017a36:	d402      	bmi.n	8017a3e <__lo0bits+0x4e>
 8017a38:	085b      	lsrs	r3, r3, #1
 8017a3a:	d006      	beq.n	8017a4a <__lo0bits+0x5a>
 8017a3c:	3001      	adds	r0, #1
 8017a3e:	600b      	str	r3, [r1, #0]
 8017a40:	4770      	bx	lr
 8017a42:	4610      	mov	r0, r2
 8017a44:	e7e9      	b.n	8017a1a <__lo0bits+0x2a>
 8017a46:	2000      	movs	r0, #0
 8017a48:	4770      	bx	lr
 8017a4a:	2020      	movs	r0, #32
 8017a4c:	4770      	bx	lr

08017a4e <__i2b>:
 8017a4e:	b510      	push	{r4, lr}
 8017a50:	460c      	mov	r4, r1
 8017a52:	2101      	movs	r1, #1
 8017a54:	f7ff fee9 	bl	801782a <_Balloc>
 8017a58:	2201      	movs	r2, #1
 8017a5a:	6144      	str	r4, [r0, #20]
 8017a5c:	6102      	str	r2, [r0, #16]
 8017a5e:	bd10      	pop	{r4, pc}

08017a60 <__multiply>:
 8017a60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a64:	4614      	mov	r4, r2
 8017a66:	690a      	ldr	r2, [r1, #16]
 8017a68:	6923      	ldr	r3, [r4, #16]
 8017a6a:	429a      	cmp	r2, r3
 8017a6c:	bfb8      	it	lt
 8017a6e:	460b      	movlt	r3, r1
 8017a70:	4688      	mov	r8, r1
 8017a72:	bfbc      	itt	lt
 8017a74:	46a0      	movlt	r8, r4
 8017a76:	461c      	movlt	r4, r3
 8017a78:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8017a7c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8017a80:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017a84:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8017a88:	eb07 0609 	add.w	r6, r7, r9
 8017a8c:	42b3      	cmp	r3, r6
 8017a8e:	bfb8      	it	lt
 8017a90:	3101      	addlt	r1, #1
 8017a92:	f7ff feca 	bl	801782a <_Balloc>
 8017a96:	f100 0514 	add.w	r5, r0, #20
 8017a9a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8017a9e:	462b      	mov	r3, r5
 8017aa0:	2200      	movs	r2, #0
 8017aa2:	4573      	cmp	r3, lr
 8017aa4:	d316      	bcc.n	8017ad4 <__multiply+0x74>
 8017aa6:	f104 0214 	add.w	r2, r4, #20
 8017aaa:	f108 0114 	add.w	r1, r8, #20
 8017aae:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8017ab2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8017ab6:	9300      	str	r3, [sp, #0]
 8017ab8:	9b00      	ldr	r3, [sp, #0]
 8017aba:	9201      	str	r2, [sp, #4]
 8017abc:	4293      	cmp	r3, r2
 8017abe:	d80c      	bhi.n	8017ada <__multiply+0x7a>
 8017ac0:	2e00      	cmp	r6, #0
 8017ac2:	dd03      	ble.n	8017acc <__multiply+0x6c>
 8017ac4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8017ac8:	2b00      	cmp	r3, #0
 8017aca:	d05d      	beq.n	8017b88 <__multiply+0x128>
 8017acc:	6106      	str	r6, [r0, #16]
 8017ace:	b003      	add	sp, #12
 8017ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ad4:	f843 2b04 	str.w	r2, [r3], #4
 8017ad8:	e7e3      	b.n	8017aa2 <__multiply+0x42>
 8017ada:	f8b2 b000 	ldrh.w	fp, [r2]
 8017ade:	f1bb 0f00 	cmp.w	fp, #0
 8017ae2:	d023      	beq.n	8017b2c <__multiply+0xcc>
 8017ae4:	4689      	mov	r9, r1
 8017ae6:	46ac      	mov	ip, r5
 8017ae8:	f04f 0800 	mov.w	r8, #0
 8017aec:	f859 4b04 	ldr.w	r4, [r9], #4
 8017af0:	f8dc a000 	ldr.w	sl, [ip]
 8017af4:	b2a3      	uxth	r3, r4
 8017af6:	fa1f fa8a 	uxth.w	sl, sl
 8017afa:	fb0b a303 	mla	r3, fp, r3, sl
 8017afe:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8017b02:	f8dc 4000 	ldr.w	r4, [ip]
 8017b06:	4443      	add	r3, r8
 8017b08:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8017b0c:	fb0b 840a 	mla	r4, fp, sl, r8
 8017b10:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8017b14:	46e2      	mov	sl, ip
 8017b16:	b29b      	uxth	r3, r3
 8017b18:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8017b1c:	454f      	cmp	r7, r9
 8017b1e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8017b22:	f84a 3b04 	str.w	r3, [sl], #4
 8017b26:	d82b      	bhi.n	8017b80 <__multiply+0x120>
 8017b28:	f8cc 8004 	str.w	r8, [ip, #4]
 8017b2c:	9b01      	ldr	r3, [sp, #4]
 8017b2e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8017b32:	3204      	adds	r2, #4
 8017b34:	f1ba 0f00 	cmp.w	sl, #0
 8017b38:	d020      	beq.n	8017b7c <__multiply+0x11c>
 8017b3a:	682b      	ldr	r3, [r5, #0]
 8017b3c:	4689      	mov	r9, r1
 8017b3e:	46a8      	mov	r8, r5
 8017b40:	f04f 0b00 	mov.w	fp, #0
 8017b44:	f8b9 c000 	ldrh.w	ip, [r9]
 8017b48:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8017b4c:	fb0a 440c 	mla	r4, sl, ip, r4
 8017b50:	445c      	add	r4, fp
 8017b52:	46c4      	mov	ip, r8
 8017b54:	b29b      	uxth	r3, r3
 8017b56:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8017b5a:	f84c 3b04 	str.w	r3, [ip], #4
 8017b5e:	f859 3b04 	ldr.w	r3, [r9], #4
 8017b62:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8017b66:	0c1b      	lsrs	r3, r3, #16
 8017b68:	fb0a b303 	mla	r3, sl, r3, fp
 8017b6c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8017b70:	454f      	cmp	r7, r9
 8017b72:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8017b76:	d805      	bhi.n	8017b84 <__multiply+0x124>
 8017b78:	f8c8 3004 	str.w	r3, [r8, #4]
 8017b7c:	3504      	adds	r5, #4
 8017b7e:	e79b      	b.n	8017ab8 <__multiply+0x58>
 8017b80:	46d4      	mov	ip, sl
 8017b82:	e7b3      	b.n	8017aec <__multiply+0x8c>
 8017b84:	46e0      	mov	r8, ip
 8017b86:	e7dd      	b.n	8017b44 <__multiply+0xe4>
 8017b88:	3e01      	subs	r6, #1
 8017b8a:	e799      	b.n	8017ac0 <__multiply+0x60>

08017b8c <__pow5mult>:
 8017b8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017b90:	4615      	mov	r5, r2
 8017b92:	f012 0203 	ands.w	r2, r2, #3
 8017b96:	4606      	mov	r6, r0
 8017b98:	460f      	mov	r7, r1
 8017b9a:	d007      	beq.n	8017bac <__pow5mult+0x20>
 8017b9c:	3a01      	subs	r2, #1
 8017b9e:	4c21      	ldr	r4, [pc, #132]	; (8017c24 <__pow5mult+0x98>)
 8017ba0:	2300      	movs	r3, #0
 8017ba2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8017ba6:	f7ff fe8b 	bl	80178c0 <__multadd>
 8017baa:	4607      	mov	r7, r0
 8017bac:	10ad      	asrs	r5, r5, #2
 8017bae:	d035      	beq.n	8017c1c <__pow5mult+0x90>
 8017bb0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8017bb2:	b93c      	cbnz	r4, 8017bc4 <__pow5mult+0x38>
 8017bb4:	2010      	movs	r0, #16
 8017bb6:	f7ff fe13 	bl	80177e0 <malloc>
 8017bba:	6270      	str	r0, [r6, #36]	; 0x24
 8017bbc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017bc0:	6004      	str	r4, [r0, #0]
 8017bc2:	60c4      	str	r4, [r0, #12]
 8017bc4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8017bc8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8017bcc:	b94c      	cbnz	r4, 8017be2 <__pow5mult+0x56>
 8017bce:	f240 2171 	movw	r1, #625	; 0x271
 8017bd2:	4630      	mov	r0, r6
 8017bd4:	f7ff ff3b 	bl	8017a4e <__i2b>
 8017bd8:	2300      	movs	r3, #0
 8017bda:	f8c8 0008 	str.w	r0, [r8, #8]
 8017bde:	4604      	mov	r4, r0
 8017be0:	6003      	str	r3, [r0, #0]
 8017be2:	f04f 0800 	mov.w	r8, #0
 8017be6:	07eb      	lsls	r3, r5, #31
 8017be8:	d50a      	bpl.n	8017c00 <__pow5mult+0x74>
 8017bea:	4639      	mov	r1, r7
 8017bec:	4622      	mov	r2, r4
 8017bee:	4630      	mov	r0, r6
 8017bf0:	f7ff ff36 	bl	8017a60 <__multiply>
 8017bf4:	4639      	mov	r1, r7
 8017bf6:	4681      	mov	r9, r0
 8017bf8:	4630      	mov	r0, r6
 8017bfa:	f7ff fe4a 	bl	8017892 <_Bfree>
 8017bfe:	464f      	mov	r7, r9
 8017c00:	106d      	asrs	r5, r5, #1
 8017c02:	d00b      	beq.n	8017c1c <__pow5mult+0x90>
 8017c04:	6820      	ldr	r0, [r4, #0]
 8017c06:	b938      	cbnz	r0, 8017c18 <__pow5mult+0x8c>
 8017c08:	4622      	mov	r2, r4
 8017c0a:	4621      	mov	r1, r4
 8017c0c:	4630      	mov	r0, r6
 8017c0e:	f7ff ff27 	bl	8017a60 <__multiply>
 8017c12:	6020      	str	r0, [r4, #0]
 8017c14:	f8c0 8000 	str.w	r8, [r0]
 8017c18:	4604      	mov	r4, r0
 8017c1a:	e7e4      	b.n	8017be6 <__pow5mult+0x5a>
 8017c1c:	4638      	mov	r0, r7
 8017c1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017c22:	bf00      	nop
 8017c24:	080193d0 	.word	0x080193d0

08017c28 <__lshift>:
 8017c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017c2c:	460c      	mov	r4, r1
 8017c2e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8017c32:	6923      	ldr	r3, [r4, #16]
 8017c34:	6849      	ldr	r1, [r1, #4]
 8017c36:	eb0a 0903 	add.w	r9, sl, r3
 8017c3a:	68a3      	ldr	r3, [r4, #8]
 8017c3c:	4607      	mov	r7, r0
 8017c3e:	4616      	mov	r6, r2
 8017c40:	f109 0501 	add.w	r5, r9, #1
 8017c44:	42ab      	cmp	r3, r5
 8017c46:	db32      	blt.n	8017cae <__lshift+0x86>
 8017c48:	4638      	mov	r0, r7
 8017c4a:	f7ff fdee 	bl	801782a <_Balloc>
 8017c4e:	2300      	movs	r3, #0
 8017c50:	4680      	mov	r8, r0
 8017c52:	f100 0114 	add.w	r1, r0, #20
 8017c56:	461a      	mov	r2, r3
 8017c58:	4553      	cmp	r3, sl
 8017c5a:	db2b      	blt.n	8017cb4 <__lshift+0x8c>
 8017c5c:	6920      	ldr	r0, [r4, #16]
 8017c5e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8017c62:	f104 0314 	add.w	r3, r4, #20
 8017c66:	f016 021f 	ands.w	r2, r6, #31
 8017c6a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8017c6e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8017c72:	d025      	beq.n	8017cc0 <__lshift+0x98>
 8017c74:	f1c2 0e20 	rsb	lr, r2, #32
 8017c78:	2000      	movs	r0, #0
 8017c7a:	681e      	ldr	r6, [r3, #0]
 8017c7c:	468a      	mov	sl, r1
 8017c7e:	4096      	lsls	r6, r2
 8017c80:	4330      	orrs	r0, r6
 8017c82:	f84a 0b04 	str.w	r0, [sl], #4
 8017c86:	f853 0b04 	ldr.w	r0, [r3], #4
 8017c8a:	459c      	cmp	ip, r3
 8017c8c:	fa20 f00e 	lsr.w	r0, r0, lr
 8017c90:	d814      	bhi.n	8017cbc <__lshift+0x94>
 8017c92:	6048      	str	r0, [r1, #4]
 8017c94:	b108      	cbz	r0, 8017c9a <__lshift+0x72>
 8017c96:	f109 0502 	add.w	r5, r9, #2
 8017c9a:	3d01      	subs	r5, #1
 8017c9c:	4638      	mov	r0, r7
 8017c9e:	f8c8 5010 	str.w	r5, [r8, #16]
 8017ca2:	4621      	mov	r1, r4
 8017ca4:	f7ff fdf5 	bl	8017892 <_Bfree>
 8017ca8:	4640      	mov	r0, r8
 8017caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017cae:	3101      	adds	r1, #1
 8017cb0:	005b      	lsls	r3, r3, #1
 8017cb2:	e7c7      	b.n	8017c44 <__lshift+0x1c>
 8017cb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8017cb8:	3301      	adds	r3, #1
 8017cba:	e7cd      	b.n	8017c58 <__lshift+0x30>
 8017cbc:	4651      	mov	r1, sl
 8017cbe:	e7dc      	b.n	8017c7a <__lshift+0x52>
 8017cc0:	3904      	subs	r1, #4
 8017cc2:	f853 2b04 	ldr.w	r2, [r3], #4
 8017cc6:	f841 2f04 	str.w	r2, [r1, #4]!
 8017cca:	459c      	cmp	ip, r3
 8017ccc:	d8f9      	bhi.n	8017cc2 <__lshift+0x9a>
 8017cce:	e7e4      	b.n	8017c9a <__lshift+0x72>

08017cd0 <__mcmp>:
 8017cd0:	6903      	ldr	r3, [r0, #16]
 8017cd2:	690a      	ldr	r2, [r1, #16]
 8017cd4:	1a9b      	subs	r3, r3, r2
 8017cd6:	b530      	push	{r4, r5, lr}
 8017cd8:	d10c      	bne.n	8017cf4 <__mcmp+0x24>
 8017cda:	0092      	lsls	r2, r2, #2
 8017cdc:	3014      	adds	r0, #20
 8017cde:	3114      	adds	r1, #20
 8017ce0:	1884      	adds	r4, r0, r2
 8017ce2:	4411      	add	r1, r2
 8017ce4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8017ce8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8017cec:	4295      	cmp	r5, r2
 8017cee:	d003      	beq.n	8017cf8 <__mcmp+0x28>
 8017cf0:	d305      	bcc.n	8017cfe <__mcmp+0x2e>
 8017cf2:	2301      	movs	r3, #1
 8017cf4:	4618      	mov	r0, r3
 8017cf6:	bd30      	pop	{r4, r5, pc}
 8017cf8:	42a0      	cmp	r0, r4
 8017cfa:	d3f3      	bcc.n	8017ce4 <__mcmp+0x14>
 8017cfc:	e7fa      	b.n	8017cf4 <__mcmp+0x24>
 8017cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8017d02:	e7f7      	b.n	8017cf4 <__mcmp+0x24>

08017d04 <__mdiff>:
 8017d04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017d08:	460d      	mov	r5, r1
 8017d0a:	4607      	mov	r7, r0
 8017d0c:	4611      	mov	r1, r2
 8017d0e:	4628      	mov	r0, r5
 8017d10:	4614      	mov	r4, r2
 8017d12:	f7ff ffdd 	bl	8017cd0 <__mcmp>
 8017d16:	1e06      	subs	r6, r0, #0
 8017d18:	d108      	bne.n	8017d2c <__mdiff+0x28>
 8017d1a:	4631      	mov	r1, r6
 8017d1c:	4638      	mov	r0, r7
 8017d1e:	f7ff fd84 	bl	801782a <_Balloc>
 8017d22:	2301      	movs	r3, #1
 8017d24:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8017d28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017d2c:	bfa4      	itt	ge
 8017d2e:	4623      	movge	r3, r4
 8017d30:	462c      	movge	r4, r5
 8017d32:	4638      	mov	r0, r7
 8017d34:	6861      	ldr	r1, [r4, #4]
 8017d36:	bfa6      	itte	ge
 8017d38:	461d      	movge	r5, r3
 8017d3a:	2600      	movge	r6, #0
 8017d3c:	2601      	movlt	r6, #1
 8017d3e:	f7ff fd74 	bl	801782a <_Balloc>
 8017d42:	692b      	ldr	r3, [r5, #16]
 8017d44:	60c6      	str	r6, [r0, #12]
 8017d46:	6926      	ldr	r6, [r4, #16]
 8017d48:	f105 0914 	add.w	r9, r5, #20
 8017d4c:	f104 0214 	add.w	r2, r4, #20
 8017d50:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8017d54:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8017d58:	f100 0514 	add.w	r5, r0, #20
 8017d5c:	f04f 0e00 	mov.w	lr, #0
 8017d60:	f852 ab04 	ldr.w	sl, [r2], #4
 8017d64:	f859 4b04 	ldr.w	r4, [r9], #4
 8017d68:	fa1e f18a 	uxtah	r1, lr, sl
 8017d6c:	b2a3      	uxth	r3, r4
 8017d6e:	1ac9      	subs	r1, r1, r3
 8017d70:	0c23      	lsrs	r3, r4, #16
 8017d72:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8017d76:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8017d7a:	b289      	uxth	r1, r1
 8017d7c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8017d80:	45c8      	cmp	r8, r9
 8017d82:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8017d86:	4694      	mov	ip, r2
 8017d88:	f845 3b04 	str.w	r3, [r5], #4
 8017d8c:	d8e8      	bhi.n	8017d60 <__mdiff+0x5c>
 8017d8e:	45bc      	cmp	ip, r7
 8017d90:	d304      	bcc.n	8017d9c <__mdiff+0x98>
 8017d92:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8017d96:	b183      	cbz	r3, 8017dba <__mdiff+0xb6>
 8017d98:	6106      	str	r6, [r0, #16]
 8017d9a:	e7c5      	b.n	8017d28 <__mdiff+0x24>
 8017d9c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8017da0:	fa1e f381 	uxtah	r3, lr, r1
 8017da4:	141a      	asrs	r2, r3, #16
 8017da6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8017daa:	b29b      	uxth	r3, r3
 8017dac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017db0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8017db4:	f845 3b04 	str.w	r3, [r5], #4
 8017db8:	e7e9      	b.n	8017d8e <__mdiff+0x8a>
 8017dba:	3e01      	subs	r6, #1
 8017dbc:	e7e9      	b.n	8017d92 <__mdiff+0x8e>
	...

08017dc0 <__ulp>:
 8017dc0:	4b12      	ldr	r3, [pc, #72]	; (8017e0c <__ulp+0x4c>)
 8017dc2:	ee10 2a90 	vmov	r2, s1
 8017dc6:	401a      	ands	r2, r3
 8017dc8:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8017dcc:	2b00      	cmp	r3, #0
 8017dce:	dd04      	ble.n	8017dda <__ulp+0x1a>
 8017dd0:	2000      	movs	r0, #0
 8017dd2:	4619      	mov	r1, r3
 8017dd4:	ec41 0b10 	vmov	d0, r0, r1
 8017dd8:	4770      	bx	lr
 8017dda:	425b      	negs	r3, r3
 8017ddc:	151b      	asrs	r3, r3, #20
 8017dde:	2b13      	cmp	r3, #19
 8017de0:	f04f 0000 	mov.w	r0, #0
 8017de4:	f04f 0100 	mov.w	r1, #0
 8017de8:	dc04      	bgt.n	8017df4 <__ulp+0x34>
 8017dea:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8017dee:	fa42 f103 	asr.w	r1, r2, r3
 8017df2:	e7ef      	b.n	8017dd4 <__ulp+0x14>
 8017df4:	3b14      	subs	r3, #20
 8017df6:	2b1e      	cmp	r3, #30
 8017df8:	f04f 0201 	mov.w	r2, #1
 8017dfc:	bfda      	itte	le
 8017dfe:	f1c3 031f 	rsble	r3, r3, #31
 8017e02:	fa02 f303 	lslle.w	r3, r2, r3
 8017e06:	4613      	movgt	r3, r2
 8017e08:	4618      	mov	r0, r3
 8017e0a:	e7e3      	b.n	8017dd4 <__ulp+0x14>
 8017e0c:	7ff00000 	.word	0x7ff00000

08017e10 <__b2d>:
 8017e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017e12:	6905      	ldr	r5, [r0, #16]
 8017e14:	f100 0714 	add.w	r7, r0, #20
 8017e18:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8017e1c:	1f2e      	subs	r6, r5, #4
 8017e1e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8017e22:	4620      	mov	r0, r4
 8017e24:	f7ff fdc5 	bl	80179b2 <__hi0bits>
 8017e28:	f1c0 0320 	rsb	r3, r0, #32
 8017e2c:	280a      	cmp	r0, #10
 8017e2e:	600b      	str	r3, [r1, #0]
 8017e30:	f8df c074 	ldr.w	ip, [pc, #116]	; 8017ea8 <__b2d+0x98>
 8017e34:	dc14      	bgt.n	8017e60 <__b2d+0x50>
 8017e36:	f1c0 0e0b 	rsb	lr, r0, #11
 8017e3a:	fa24 f10e 	lsr.w	r1, r4, lr
 8017e3e:	42b7      	cmp	r7, r6
 8017e40:	ea41 030c 	orr.w	r3, r1, ip
 8017e44:	bf34      	ite	cc
 8017e46:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8017e4a:	2100      	movcs	r1, #0
 8017e4c:	3015      	adds	r0, #21
 8017e4e:	fa04 f000 	lsl.w	r0, r4, r0
 8017e52:	fa21 f10e 	lsr.w	r1, r1, lr
 8017e56:	ea40 0201 	orr.w	r2, r0, r1
 8017e5a:	ec43 2b10 	vmov	d0, r2, r3
 8017e5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017e60:	42b7      	cmp	r7, r6
 8017e62:	bf3a      	itte	cc
 8017e64:	f1a5 0608 	subcc.w	r6, r5, #8
 8017e68:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8017e6c:	2100      	movcs	r1, #0
 8017e6e:	380b      	subs	r0, #11
 8017e70:	d015      	beq.n	8017e9e <__b2d+0x8e>
 8017e72:	4084      	lsls	r4, r0
 8017e74:	f1c0 0520 	rsb	r5, r0, #32
 8017e78:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8017e7c:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8017e80:	42be      	cmp	r6, r7
 8017e82:	fa21 fc05 	lsr.w	ip, r1, r5
 8017e86:	ea44 030c 	orr.w	r3, r4, ip
 8017e8a:	bf8c      	ite	hi
 8017e8c:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8017e90:	2400      	movls	r4, #0
 8017e92:	fa01 f000 	lsl.w	r0, r1, r0
 8017e96:	40ec      	lsrs	r4, r5
 8017e98:	ea40 0204 	orr.w	r2, r0, r4
 8017e9c:	e7dd      	b.n	8017e5a <__b2d+0x4a>
 8017e9e:	ea44 030c 	orr.w	r3, r4, ip
 8017ea2:	460a      	mov	r2, r1
 8017ea4:	e7d9      	b.n	8017e5a <__b2d+0x4a>
 8017ea6:	bf00      	nop
 8017ea8:	3ff00000 	.word	0x3ff00000

08017eac <__d2b>:
 8017eac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017eb0:	460e      	mov	r6, r1
 8017eb2:	2101      	movs	r1, #1
 8017eb4:	ec59 8b10 	vmov	r8, r9, d0
 8017eb8:	4615      	mov	r5, r2
 8017eba:	f7ff fcb6 	bl	801782a <_Balloc>
 8017ebe:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8017ec2:	4607      	mov	r7, r0
 8017ec4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017ec8:	bb34      	cbnz	r4, 8017f18 <__d2b+0x6c>
 8017eca:	9301      	str	r3, [sp, #4]
 8017ecc:	f1b8 0300 	subs.w	r3, r8, #0
 8017ed0:	d027      	beq.n	8017f22 <__d2b+0x76>
 8017ed2:	a802      	add	r0, sp, #8
 8017ed4:	f840 3d08 	str.w	r3, [r0, #-8]!
 8017ed8:	f7ff fd8a 	bl	80179f0 <__lo0bits>
 8017edc:	9900      	ldr	r1, [sp, #0]
 8017ede:	b1f0      	cbz	r0, 8017f1e <__d2b+0x72>
 8017ee0:	9a01      	ldr	r2, [sp, #4]
 8017ee2:	f1c0 0320 	rsb	r3, r0, #32
 8017ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8017eea:	430b      	orrs	r3, r1
 8017eec:	40c2      	lsrs	r2, r0
 8017eee:	617b      	str	r3, [r7, #20]
 8017ef0:	9201      	str	r2, [sp, #4]
 8017ef2:	9b01      	ldr	r3, [sp, #4]
 8017ef4:	61bb      	str	r3, [r7, #24]
 8017ef6:	2b00      	cmp	r3, #0
 8017ef8:	bf14      	ite	ne
 8017efa:	2102      	movne	r1, #2
 8017efc:	2101      	moveq	r1, #1
 8017efe:	6139      	str	r1, [r7, #16]
 8017f00:	b1c4      	cbz	r4, 8017f34 <__d2b+0x88>
 8017f02:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8017f06:	4404      	add	r4, r0
 8017f08:	6034      	str	r4, [r6, #0]
 8017f0a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8017f0e:	6028      	str	r0, [r5, #0]
 8017f10:	4638      	mov	r0, r7
 8017f12:	b003      	add	sp, #12
 8017f14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017f18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8017f1c:	e7d5      	b.n	8017eca <__d2b+0x1e>
 8017f1e:	6179      	str	r1, [r7, #20]
 8017f20:	e7e7      	b.n	8017ef2 <__d2b+0x46>
 8017f22:	a801      	add	r0, sp, #4
 8017f24:	f7ff fd64 	bl	80179f0 <__lo0bits>
 8017f28:	9b01      	ldr	r3, [sp, #4]
 8017f2a:	617b      	str	r3, [r7, #20]
 8017f2c:	2101      	movs	r1, #1
 8017f2e:	6139      	str	r1, [r7, #16]
 8017f30:	3020      	adds	r0, #32
 8017f32:	e7e5      	b.n	8017f00 <__d2b+0x54>
 8017f34:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8017f38:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8017f3c:	6030      	str	r0, [r6, #0]
 8017f3e:	6918      	ldr	r0, [r3, #16]
 8017f40:	f7ff fd37 	bl	80179b2 <__hi0bits>
 8017f44:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8017f48:	e7e1      	b.n	8017f0e <__d2b+0x62>

08017f4a <__ratio>:
 8017f4a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f4e:	4688      	mov	r8, r1
 8017f50:	4669      	mov	r1, sp
 8017f52:	4681      	mov	r9, r0
 8017f54:	f7ff ff5c 	bl	8017e10 <__b2d>
 8017f58:	a901      	add	r1, sp, #4
 8017f5a:	4640      	mov	r0, r8
 8017f5c:	ec57 6b10 	vmov	r6, r7, d0
 8017f60:	f7ff ff56 	bl	8017e10 <__b2d>
 8017f64:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8017f68:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8017f6c:	eba3 0c02 	sub.w	ip, r3, r2
 8017f70:	e9dd 3200 	ldrd	r3, r2, [sp]
 8017f74:	1a9b      	subs	r3, r3, r2
 8017f76:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8017f7a:	ec5b ab10 	vmov	sl, fp, d0
 8017f7e:	2b00      	cmp	r3, #0
 8017f80:	bfce      	itee	gt
 8017f82:	463a      	movgt	r2, r7
 8017f84:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8017f88:	465a      	movle	r2, fp
 8017f8a:	4659      	mov	r1, fp
 8017f8c:	463d      	mov	r5, r7
 8017f8e:	bfd4      	ite	le
 8017f90:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8017f94:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8017f98:	4630      	mov	r0, r6
 8017f9a:	ee10 2a10 	vmov	r2, s0
 8017f9e:	460b      	mov	r3, r1
 8017fa0:	4629      	mov	r1, r5
 8017fa2:	f7e8 fc6b 	bl	800087c <__aeabi_ddiv>
 8017fa6:	ec41 0b10 	vmov	d0, r0, r1
 8017faa:	b003      	add	sp, #12
 8017fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017fb0 <__copybits>:
 8017fb0:	3901      	subs	r1, #1
 8017fb2:	b510      	push	{r4, lr}
 8017fb4:	1149      	asrs	r1, r1, #5
 8017fb6:	6914      	ldr	r4, [r2, #16]
 8017fb8:	3101      	adds	r1, #1
 8017fba:	f102 0314 	add.w	r3, r2, #20
 8017fbe:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8017fc2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8017fc6:	42a3      	cmp	r3, r4
 8017fc8:	4602      	mov	r2, r0
 8017fca:	d303      	bcc.n	8017fd4 <__copybits+0x24>
 8017fcc:	2300      	movs	r3, #0
 8017fce:	428a      	cmp	r2, r1
 8017fd0:	d305      	bcc.n	8017fde <__copybits+0x2e>
 8017fd2:	bd10      	pop	{r4, pc}
 8017fd4:	f853 2b04 	ldr.w	r2, [r3], #4
 8017fd8:	f840 2b04 	str.w	r2, [r0], #4
 8017fdc:	e7f3      	b.n	8017fc6 <__copybits+0x16>
 8017fde:	f842 3b04 	str.w	r3, [r2], #4
 8017fe2:	e7f4      	b.n	8017fce <__copybits+0x1e>

08017fe4 <__any_on>:
 8017fe4:	f100 0214 	add.w	r2, r0, #20
 8017fe8:	6900      	ldr	r0, [r0, #16]
 8017fea:	114b      	asrs	r3, r1, #5
 8017fec:	4298      	cmp	r0, r3
 8017fee:	b510      	push	{r4, lr}
 8017ff0:	db11      	blt.n	8018016 <__any_on+0x32>
 8017ff2:	dd0a      	ble.n	801800a <__any_on+0x26>
 8017ff4:	f011 011f 	ands.w	r1, r1, #31
 8017ff8:	d007      	beq.n	801800a <__any_on+0x26>
 8017ffa:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8017ffe:	fa24 f001 	lsr.w	r0, r4, r1
 8018002:	fa00 f101 	lsl.w	r1, r0, r1
 8018006:	428c      	cmp	r4, r1
 8018008:	d10b      	bne.n	8018022 <__any_on+0x3e>
 801800a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801800e:	4293      	cmp	r3, r2
 8018010:	d803      	bhi.n	801801a <__any_on+0x36>
 8018012:	2000      	movs	r0, #0
 8018014:	bd10      	pop	{r4, pc}
 8018016:	4603      	mov	r3, r0
 8018018:	e7f7      	b.n	801800a <__any_on+0x26>
 801801a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801801e:	2900      	cmp	r1, #0
 8018020:	d0f5      	beq.n	801800e <__any_on+0x2a>
 8018022:	2001      	movs	r0, #1
 8018024:	e7f6      	b.n	8018014 <__any_on+0x30>

08018026 <_calloc_r>:
 8018026:	b538      	push	{r3, r4, r5, lr}
 8018028:	fb02 f401 	mul.w	r4, r2, r1
 801802c:	4621      	mov	r1, r4
 801802e:	f000 f857 	bl	80180e0 <_malloc_r>
 8018032:	4605      	mov	r5, r0
 8018034:	b118      	cbz	r0, 801803e <_calloc_r+0x18>
 8018036:	4622      	mov	r2, r4
 8018038:	2100      	movs	r1, #0
 801803a:	f7fc fc9f 	bl	801497c <memset>
 801803e:	4628      	mov	r0, r5
 8018040:	bd38      	pop	{r3, r4, r5, pc}
	...

08018044 <_free_r>:
 8018044:	b538      	push	{r3, r4, r5, lr}
 8018046:	4605      	mov	r5, r0
 8018048:	2900      	cmp	r1, #0
 801804a:	d045      	beq.n	80180d8 <_free_r+0x94>
 801804c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018050:	1f0c      	subs	r4, r1, #4
 8018052:	2b00      	cmp	r3, #0
 8018054:	bfb8      	it	lt
 8018056:	18e4      	addlt	r4, r4, r3
 8018058:	f000 fe30 	bl	8018cbc <__malloc_lock>
 801805c:	4a1f      	ldr	r2, [pc, #124]	; (80180dc <_free_r+0x98>)
 801805e:	6813      	ldr	r3, [r2, #0]
 8018060:	4610      	mov	r0, r2
 8018062:	b933      	cbnz	r3, 8018072 <_free_r+0x2e>
 8018064:	6063      	str	r3, [r4, #4]
 8018066:	6014      	str	r4, [r2, #0]
 8018068:	4628      	mov	r0, r5
 801806a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801806e:	f000 be26 	b.w	8018cbe <__malloc_unlock>
 8018072:	42a3      	cmp	r3, r4
 8018074:	d90c      	bls.n	8018090 <_free_r+0x4c>
 8018076:	6821      	ldr	r1, [r4, #0]
 8018078:	1862      	adds	r2, r4, r1
 801807a:	4293      	cmp	r3, r2
 801807c:	bf04      	itt	eq
 801807e:	681a      	ldreq	r2, [r3, #0]
 8018080:	685b      	ldreq	r3, [r3, #4]
 8018082:	6063      	str	r3, [r4, #4]
 8018084:	bf04      	itt	eq
 8018086:	1852      	addeq	r2, r2, r1
 8018088:	6022      	streq	r2, [r4, #0]
 801808a:	6004      	str	r4, [r0, #0]
 801808c:	e7ec      	b.n	8018068 <_free_r+0x24>
 801808e:	4613      	mov	r3, r2
 8018090:	685a      	ldr	r2, [r3, #4]
 8018092:	b10a      	cbz	r2, 8018098 <_free_r+0x54>
 8018094:	42a2      	cmp	r2, r4
 8018096:	d9fa      	bls.n	801808e <_free_r+0x4a>
 8018098:	6819      	ldr	r1, [r3, #0]
 801809a:	1858      	adds	r0, r3, r1
 801809c:	42a0      	cmp	r0, r4
 801809e:	d10b      	bne.n	80180b8 <_free_r+0x74>
 80180a0:	6820      	ldr	r0, [r4, #0]
 80180a2:	4401      	add	r1, r0
 80180a4:	1858      	adds	r0, r3, r1
 80180a6:	4282      	cmp	r2, r0
 80180a8:	6019      	str	r1, [r3, #0]
 80180aa:	d1dd      	bne.n	8018068 <_free_r+0x24>
 80180ac:	6810      	ldr	r0, [r2, #0]
 80180ae:	6852      	ldr	r2, [r2, #4]
 80180b0:	605a      	str	r2, [r3, #4]
 80180b2:	4401      	add	r1, r0
 80180b4:	6019      	str	r1, [r3, #0]
 80180b6:	e7d7      	b.n	8018068 <_free_r+0x24>
 80180b8:	d902      	bls.n	80180c0 <_free_r+0x7c>
 80180ba:	230c      	movs	r3, #12
 80180bc:	602b      	str	r3, [r5, #0]
 80180be:	e7d3      	b.n	8018068 <_free_r+0x24>
 80180c0:	6820      	ldr	r0, [r4, #0]
 80180c2:	1821      	adds	r1, r4, r0
 80180c4:	428a      	cmp	r2, r1
 80180c6:	bf04      	itt	eq
 80180c8:	6811      	ldreq	r1, [r2, #0]
 80180ca:	6852      	ldreq	r2, [r2, #4]
 80180cc:	6062      	str	r2, [r4, #4]
 80180ce:	bf04      	itt	eq
 80180d0:	1809      	addeq	r1, r1, r0
 80180d2:	6021      	streq	r1, [r4, #0]
 80180d4:	605c      	str	r4, [r3, #4]
 80180d6:	e7c7      	b.n	8018068 <_free_r+0x24>
 80180d8:	bd38      	pop	{r3, r4, r5, pc}
 80180da:	bf00      	nop
 80180dc:	20045308 	.word	0x20045308

080180e0 <_malloc_r>:
 80180e0:	b570      	push	{r4, r5, r6, lr}
 80180e2:	1ccd      	adds	r5, r1, #3
 80180e4:	f025 0503 	bic.w	r5, r5, #3
 80180e8:	3508      	adds	r5, #8
 80180ea:	2d0c      	cmp	r5, #12
 80180ec:	bf38      	it	cc
 80180ee:	250c      	movcc	r5, #12
 80180f0:	2d00      	cmp	r5, #0
 80180f2:	4606      	mov	r6, r0
 80180f4:	db01      	blt.n	80180fa <_malloc_r+0x1a>
 80180f6:	42a9      	cmp	r1, r5
 80180f8:	d903      	bls.n	8018102 <_malloc_r+0x22>
 80180fa:	230c      	movs	r3, #12
 80180fc:	6033      	str	r3, [r6, #0]
 80180fe:	2000      	movs	r0, #0
 8018100:	bd70      	pop	{r4, r5, r6, pc}
 8018102:	f000 fddb 	bl	8018cbc <__malloc_lock>
 8018106:	4a21      	ldr	r2, [pc, #132]	; (801818c <_malloc_r+0xac>)
 8018108:	6814      	ldr	r4, [r2, #0]
 801810a:	4621      	mov	r1, r4
 801810c:	b991      	cbnz	r1, 8018134 <_malloc_r+0x54>
 801810e:	4c20      	ldr	r4, [pc, #128]	; (8018190 <_malloc_r+0xb0>)
 8018110:	6823      	ldr	r3, [r4, #0]
 8018112:	b91b      	cbnz	r3, 801811c <_malloc_r+0x3c>
 8018114:	4630      	mov	r0, r6
 8018116:	f000 fc91 	bl	8018a3c <_sbrk_r>
 801811a:	6020      	str	r0, [r4, #0]
 801811c:	4629      	mov	r1, r5
 801811e:	4630      	mov	r0, r6
 8018120:	f000 fc8c 	bl	8018a3c <_sbrk_r>
 8018124:	1c43      	adds	r3, r0, #1
 8018126:	d124      	bne.n	8018172 <_malloc_r+0x92>
 8018128:	230c      	movs	r3, #12
 801812a:	6033      	str	r3, [r6, #0]
 801812c:	4630      	mov	r0, r6
 801812e:	f000 fdc6 	bl	8018cbe <__malloc_unlock>
 8018132:	e7e4      	b.n	80180fe <_malloc_r+0x1e>
 8018134:	680b      	ldr	r3, [r1, #0]
 8018136:	1b5b      	subs	r3, r3, r5
 8018138:	d418      	bmi.n	801816c <_malloc_r+0x8c>
 801813a:	2b0b      	cmp	r3, #11
 801813c:	d90f      	bls.n	801815e <_malloc_r+0x7e>
 801813e:	600b      	str	r3, [r1, #0]
 8018140:	50cd      	str	r5, [r1, r3]
 8018142:	18cc      	adds	r4, r1, r3
 8018144:	4630      	mov	r0, r6
 8018146:	f000 fdba 	bl	8018cbe <__malloc_unlock>
 801814a:	f104 000b 	add.w	r0, r4, #11
 801814e:	1d23      	adds	r3, r4, #4
 8018150:	f020 0007 	bic.w	r0, r0, #7
 8018154:	1ac3      	subs	r3, r0, r3
 8018156:	d0d3      	beq.n	8018100 <_malloc_r+0x20>
 8018158:	425a      	negs	r2, r3
 801815a:	50e2      	str	r2, [r4, r3]
 801815c:	e7d0      	b.n	8018100 <_malloc_r+0x20>
 801815e:	428c      	cmp	r4, r1
 8018160:	684b      	ldr	r3, [r1, #4]
 8018162:	bf16      	itet	ne
 8018164:	6063      	strne	r3, [r4, #4]
 8018166:	6013      	streq	r3, [r2, #0]
 8018168:	460c      	movne	r4, r1
 801816a:	e7eb      	b.n	8018144 <_malloc_r+0x64>
 801816c:	460c      	mov	r4, r1
 801816e:	6849      	ldr	r1, [r1, #4]
 8018170:	e7cc      	b.n	801810c <_malloc_r+0x2c>
 8018172:	1cc4      	adds	r4, r0, #3
 8018174:	f024 0403 	bic.w	r4, r4, #3
 8018178:	42a0      	cmp	r0, r4
 801817a:	d005      	beq.n	8018188 <_malloc_r+0xa8>
 801817c:	1a21      	subs	r1, r4, r0
 801817e:	4630      	mov	r0, r6
 8018180:	f000 fc5c 	bl	8018a3c <_sbrk_r>
 8018184:	3001      	adds	r0, #1
 8018186:	d0cf      	beq.n	8018128 <_malloc_r+0x48>
 8018188:	6025      	str	r5, [r4, #0]
 801818a:	e7db      	b.n	8018144 <_malloc_r+0x64>
 801818c:	20045308 	.word	0x20045308
 8018190:	2004530c 	.word	0x2004530c

08018194 <__ssputs_r>:
 8018194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018198:	688e      	ldr	r6, [r1, #8]
 801819a:	429e      	cmp	r6, r3
 801819c:	4682      	mov	sl, r0
 801819e:	460c      	mov	r4, r1
 80181a0:	4690      	mov	r8, r2
 80181a2:	4699      	mov	r9, r3
 80181a4:	d837      	bhi.n	8018216 <__ssputs_r+0x82>
 80181a6:	898a      	ldrh	r2, [r1, #12]
 80181a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80181ac:	d031      	beq.n	8018212 <__ssputs_r+0x7e>
 80181ae:	6825      	ldr	r5, [r4, #0]
 80181b0:	6909      	ldr	r1, [r1, #16]
 80181b2:	1a6f      	subs	r7, r5, r1
 80181b4:	6965      	ldr	r5, [r4, #20]
 80181b6:	2302      	movs	r3, #2
 80181b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80181bc:	fb95 f5f3 	sdiv	r5, r5, r3
 80181c0:	f109 0301 	add.w	r3, r9, #1
 80181c4:	443b      	add	r3, r7
 80181c6:	429d      	cmp	r5, r3
 80181c8:	bf38      	it	cc
 80181ca:	461d      	movcc	r5, r3
 80181cc:	0553      	lsls	r3, r2, #21
 80181ce:	d530      	bpl.n	8018232 <__ssputs_r+0x9e>
 80181d0:	4629      	mov	r1, r5
 80181d2:	f7ff ff85 	bl	80180e0 <_malloc_r>
 80181d6:	4606      	mov	r6, r0
 80181d8:	b950      	cbnz	r0, 80181f0 <__ssputs_r+0x5c>
 80181da:	230c      	movs	r3, #12
 80181dc:	f8ca 3000 	str.w	r3, [sl]
 80181e0:	89a3      	ldrh	r3, [r4, #12]
 80181e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80181e6:	81a3      	strh	r3, [r4, #12]
 80181e8:	f04f 30ff 	mov.w	r0, #4294967295
 80181ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80181f0:	463a      	mov	r2, r7
 80181f2:	6921      	ldr	r1, [r4, #16]
 80181f4:	f7ff fb0e 	bl	8017814 <memcpy>
 80181f8:	89a3      	ldrh	r3, [r4, #12]
 80181fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80181fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018202:	81a3      	strh	r3, [r4, #12]
 8018204:	6126      	str	r6, [r4, #16]
 8018206:	6165      	str	r5, [r4, #20]
 8018208:	443e      	add	r6, r7
 801820a:	1bed      	subs	r5, r5, r7
 801820c:	6026      	str	r6, [r4, #0]
 801820e:	60a5      	str	r5, [r4, #8]
 8018210:	464e      	mov	r6, r9
 8018212:	454e      	cmp	r6, r9
 8018214:	d900      	bls.n	8018218 <__ssputs_r+0x84>
 8018216:	464e      	mov	r6, r9
 8018218:	4632      	mov	r2, r6
 801821a:	4641      	mov	r1, r8
 801821c:	6820      	ldr	r0, [r4, #0]
 801821e:	f000 fd34 	bl	8018c8a <memmove>
 8018222:	68a3      	ldr	r3, [r4, #8]
 8018224:	1b9b      	subs	r3, r3, r6
 8018226:	60a3      	str	r3, [r4, #8]
 8018228:	6823      	ldr	r3, [r4, #0]
 801822a:	441e      	add	r6, r3
 801822c:	6026      	str	r6, [r4, #0]
 801822e:	2000      	movs	r0, #0
 8018230:	e7dc      	b.n	80181ec <__ssputs_r+0x58>
 8018232:	462a      	mov	r2, r5
 8018234:	f000 fd44 	bl	8018cc0 <_realloc_r>
 8018238:	4606      	mov	r6, r0
 801823a:	2800      	cmp	r0, #0
 801823c:	d1e2      	bne.n	8018204 <__ssputs_r+0x70>
 801823e:	6921      	ldr	r1, [r4, #16]
 8018240:	4650      	mov	r0, sl
 8018242:	f7ff feff 	bl	8018044 <_free_r>
 8018246:	e7c8      	b.n	80181da <__ssputs_r+0x46>

08018248 <_svfiprintf_r>:
 8018248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801824c:	461d      	mov	r5, r3
 801824e:	898b      	ldrh	r3, [r1, #12]
 8018250:	061f      	lsls	r7, r3, #24
 8018252:	b09d      	sub	sp, #116	; 0x74
 8018254:	4680      	mov	r8, r0
 8018256:	460c      	mov	r4, r1
 8018258:	4616      	mov	r6, r2
 801825a:	d50f      	bpl.n	801827c <_svfiprintf_r+0x34>
 801825c:	690b      	ldr	r3, [r1, #16]
 801825e:	b96b      	cbnz	r3, 801827c <_svfiprintf_r+0x34>
 8018260:	2140      	movs	r1, #64	; 0x40
 8018262:	f7ff ff3d 	bl	80180e0 <_malloc_r>
 8018266:	6020      	str	r0, [r4, #0]
 8018268:	6120      	str	r0, [r4, #16]
 801826a:	b928      	cbnz	r0, 8018278 <_svfiprintf_r+0x30>
 801826c:	230c      	movs	r3, #12
 801826e:	f8c8 3000 	str.w	r3, [r8]
 8018272:	f04f 30ff 	mov.w	r0, #4294967295
 8018276:	e0c8      	b.n	801840a <_svfiprintf_r+0x1c2>
 8018278:	2340      	movs	r3, #64	; 0x40
 801827a:	6163      	str	r3, [r4, #20]
 801827c:	2300      	movs	r3, #0
 801827e:	9309      	str	r3, [sp, #36]	; 0x24
 8018280:	2320      	movs	r3, #32
 8018282:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018286:	2330      	movs	r3, #48	; 0x30
 8018288:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801828c:	9503      	str	r5, [sp, #12]
 801828e:	f04f 0b01 	mov.w	fp, #1
 8018292:	4637      	mov	r7, r6
 8018294:	463d      	mov	r5, r7
 8018296:	f815 3b01 	ldrb.w	r3, [r5], #1
 801829a:	b10b      	cbz	r3, 80182a0 <_svfiprintf_r+0x58>
 801829c:	2b25      	cmp	r3, #37	; 0x25
 801829e:	d13e      	bne.n	801831e <_svfiprintf_r+0xd6>
 80182a0:	ebb7 0a06 	subs.w	sl, r7, r6
 80182a4:	d00b      	beq.n	80182be <_svfiprintf_r+0x76>
 80182a6:	4653      	mov	r3, sl
 80182a8:	4632      	mov	r2, r6
 80182aa:	4621      	mov	r1, r4
 80182ac:	4640      	mov	r0, r8
 80182ae:	f7ff ff71 	bl	8018194 <__ssputs_r>
 80182b2:	3001      	adds	r0, #1
 80182b4:	f000 80a4 	beq.w	8018400 <_svfiprintf_r+0x1b8>
 80182b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80182ba:	4453      	add	r3, sl
 80182bc:	9309      	str	r3, [sp, #36]	; 0x24
 80182be:	783b      	ldrb	r3, [r7, #0]
 80182c0:	2b00      	cmp	r3, #0
 80182c2:	f000 809d 	beq.w	8018400 <_svfiprintf_r+0x1b8>
 80182c6:	2300      	movs	r3, #0
 80182c8:	f04f 32ff 	mov.w	r2, #4294967295
 80182cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80182d0:	9304      	str	r3, [sp, #16]
 80182d2:	9307      	str	r3, [sp, #28]
 80182d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80182d8:	931a      	str	r3, [sp, #104]	; 0x68
 80182da:	462f      	mov	r7, r5
 80182dc:	2205      	movs	r2, #5
 80182de:	f817 1b01 	ldrb.w	r1, [r7], #1
 80182e2:	4850      	ldr	r0, [pc, #320]	; (8018424 <_svfiprintf_r+0x1dc>)
 80182e4:	f7e7 ff94 	bl	8000210 <memchr>
 80182e8:	9b04      	ldr	r3, [sp, #16]
 80182ea:	b9d0      	cbnz	r0, 8018322 <_svfiprintf_r+0xda>
 80182ec:	06d9      	lsls	r1, r3, #27
 80182ee:	bf44      	itt	mi
 80182f0:	2220      	movmi	r2, #32
 80182f2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80182f6:	071a      	lsls	r2, r3, #28
 80182f8:	bf44      	itt	mi
 80182fa:	222b      	movmi	r2, #43	; 0x2b
 80182fc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8018300:	782a      	ldrb	r2, [r5, #0]
 8018302:	2a2a      	cmp	r2, #42	; 0x2a
 8018304:	d015      	beq.n	8018332 <_svfiprintf_r+0xea>
 8018306:	9a07      	ldr	r2, [sp, #28]
 8018308:	462f      	mov	r7, r5
 801830a:	2000      	movs	r0, #0
 801830c:	250a      	movs	r5, #10
 801830e:	4639      	mov	r1, r7
 8018310:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018314:	3b30      	subs	r3, #48	; 0x30
 8018316:	2b09      	cmp	r3, #9
 8018318:	d94d      	bls.n	80183b6 <_svfiprintf_r+0x16e>
 801831a:	b1b8      	cbz	r0, 801834c <_svfiprintf_r+0x104>
 801831c:	e00f      	b.n	801833e <_svfiprintf_r+0xf6>
 801831e:	462f      	mov	r7, r5
 8018320:	e7b8      	b.n	8018294 <_svfiprintf_r+0x4c>
 8018322:	4a40      	ldr	r2, [pc, #256]	; (8018424 <_svfiprintf_r+0x1dc>)
 8018324:	1a80      	subs	r0, r0, r2
 8018326:	fa0b f000 	lsl.w	r0, fp, r0
 801832a:	4318      	orrs	r0, r3
 801832c:	9004      	str	r0, [sp, #16]
 801832e:	463d      	mov	r5, r7
 8018330:	e7d3      	b.n	80182da <_svfiprintf_r+0x92>
 8018332:	9a03      	ldr	r2, [sp, #12]
 8018334:	1d11      	adds	r1, r2, #4
 8018336:	6812      	ldr	r2, [r2, #0]
 8018338:	9103      	str	r1, [sp, #12]
 801833a:	2a00      	cmp	r2, #0
 801833c:	db01      	blt.n	8018342 <_svfiprintf_r+0xfa>
 801833e:	9207      	str	r2, [sp, #28]
 8018340:	e004      	b.n	801834c <_svfiprintf_r+0x104>
 8018342:	4252      	negs	r2, r2
 8018344:	f043 0302 	orr.w	r3, r3, #2
 8018348:	9207      	str	r2, [sp, #28]
 801834a:	9304      	str	r3, [sp, #16]
 801834c:	783b      	ldrb	r3, [r7, #0]
 801834e:	2b2e      	cmp	r3, #46	; 0x2e
 8018350:	d10c      	bne.n	801836c <_svfiprintf_r+0x124>
 8018352:	787b      	ldrb	r3, [r7, #1]
 8018354:	2b2a      	cmp	r3, #42	; 0x2a
 8018356:	d133      	bne.n	80183c0 <_svfiprintf_r+0x178>
 8018358:	9b03      	ldr	r3, [sp, #12]
 801835a:	1d1a      	adds	r2, r3, #4
 801835c:	681b      	ldr	r3, [r3, #0]
 801835e:	9203      	str	r2, [sp, #12]
 8018360:	2b00      	cmp	r3, #0
 8018362:	bfb8      	it	lt
 8018364:	f04f 33ff 	movlt.w	r3, #4294967295
 8018368:	3702      	adds	r7, #2
 801836a:	9305      	str	r3, [sp, #20]
 801836c:	4d2e      	ldr	r5, [pc, #184]	; (8018428 <_svfiprintf_r+0x1e0>)
 801836e:	7839      	ldrb	r1, [r7, #0]
 8018370:	2203      	movs	r2, #3
 8018372:	4628      	mov	r0, r5
 8018374:	f7e7 ff4c 	bl	8000210 <memchr>
 8018378:	b138      	cbz	r0, 801838a <_svfiprintf_r+0x142>
 801837a:	2340      	movs	r3, #64	; 0x40
 801837c:	1b40      	subs	r0, r0, r5
 801837e:	fa03 f000 	lsl.w	r0, r3, r0
 8018382:	9b04      	ldr	r3, [sp, #16]
 8018384:	4303      	orrs	r3, r0
 8018386:	3701      	adds	r7, #1
 8018388:	9304      	str	r3, [sp, #16]
 801838a:	7839      	ldrb	r1, [r7, #0]
 801838c:	4827      	ldr	r0, [pc, #156]	; (801842c <_svfiprintf_r+0x1e4>)
 801838e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018392:	2206      	movs	r2, #6
 8018394:	1c7e      	adds	r6, r7, #1
 8018396:	f7e7 ff3b 	bl	8000210 <memchr>
 801839a:	2800      	cmp	r0, #0
 801839c:	d038      	beq.n	8018410 <_svfiprintf_r+0x1c8>
 801839e:	4b24      	ldr	r3, [pc, #144]	; (8018430 <_svfiprintf_r+0x1e8>)
 80183a0:	bb13      	cbnz	r3, 80183e8 <_svfiprintf_r+0x1a0>
 80183a2:	9b03      	ldr	r3, [sp, #12]
 80183a4:	3307      	adds	r3, #7
 80183a6:	f023 0307 	bic.w	r3, r3, #7
 80183aa:	3308      	adds	r3, #8
 80183ac:	9303      	str	r3, [sp, #12]
 80183ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80183b0:	444b      	add	r3, r9
 80183b2:	9309      	str	r3, [sp, #36]	; 0x24
 80183b4:	e76d      	b.n	8018292 <_svfiprintf_r+0x4a>
 80183b6:	fb05 3202 	mla	r2, r5, r2, r3
 80183ba:	2001      	movs	r0, #1
 80183bc:	460f      	mov	r7, r1
 80183be:	e7a6      	b.n	801830e <_svfiprintf_r+0xc6>
 80183c0:	2300      	movs	r3, #0
 80183c2:	3701      	adds	r7, #1
 80183c4:	9305      	str	r3, [sp, #20]
 80183c6:	4619      	mov	r1, r3
 80183c8:	250a      	movs	r5, #10
 80183ca:	4638      	mov	r0, r7
 80183cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80183d0:	3a30      	subs	r2, #48	; 0x30
 80183d2:	2a09      	cmp	r2, #9
 80183d4:	d903      	bls.n	80183de <_svfiprintf_r+0x196>
 80183d6:	2b00      	cmp	r3, #0
 80183d8:	d0c8      	beq.n	801836c <_svfiprintf_r+0x124>
 80183da:	9105      	str	r1, [sp, #20]
 80183dc:	e7c6      	b.n	801836c <_svfiprintf_r+0x124>
 80183de:	fb05 2101 	mla	r1, r5, r1, r2
 80183e2:	2301      	movs	r3, #1
 80183e4:	4607      	mov	r7, r0
 80183e6:	e7f0      	b.n	80183ca <_svfiprintf_r+0x182>
 80183e8:	ab03      	add	r3, sp, #12
 80183ea:	9300      	str	r3, [sp, #0]
 80183ec:	4622      	mov	r2, r4
 80183ee:	4b11      	ldr	r3, [pc, #68]	; (8018434 <_svfiprintf_r+0x1ec>)
 80183f0:	a904      	add	r1, sp, #16
 80183f2:	4640      	mov	r0, r8
 80183f4:	f7fc fb5e 	bl	8014ab4 <_printf_float>
 80183f8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80183fc:	4681      	mov	r9, r0
 80183fe:	d1d6      	bne.n	80183ae <_svfiprintf_r+0x166>
 8018400:	89a3      	ldrh	r3, [r4, #12]
 8018402:	065b      	lsls	r3, r3, #25
 8018404:	f53f af35 	bmi.w	8018272 <_svfiprintf_r+0x2a>
 8018408:	9809      	ldr	r0, [sp, #36]	; 0x24
 801840a:	b01d      	add	sp, #116	; 0x74
 801840c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018410:	ab03      	add	r3, sp, #12
 8018412:	9300      	str	r3, [sp, #0]
 8018414:	4622      	mov	r2, r4
 8018416:	4b07      	ldr	r3, [pc, #28]	; (8018434 <_svfiprintf_r+0x1ec>)
 8018418:	a904      	add	r1, sp, #16
 801841a:	4640      	mov	r0, r8
 801841c:	f7fc fe00 	bl	8015020 <_printf_i>
 8018420:	e7ea      	b.n	80183f8 <_svfiprintf_r+0x1b0>
 8018422:	bf00      	nop
 8018424:	080193dc 	.word	0x080193dc
 8018428:	080193e2 	.word	0x080193e2
 801842c:	080193e6 	.word	0x080193e6
 8018430:	08014ab5 	.word	0x08014ab5
 8018434:	08018195 	.word	0x08018195

08018438 <_sungetc_r>:
 8018438:	b538      	push	{r3, r4, r5, lr}
 801843a:	1c4b      	adds	r3, r1, #1
 801843c:	4614      	mov	r4, r2
 801843e:	d103      	bne.n	8018448 <_sungetc_r+0x10>
 8018440:	f04f 35ff 	mov.w	r5, #4294967295
 8018444:	4628      	mov	r0, r5
 8018446:	bd38      	pop	{r3, r4, r5, pc}
 8018448:	8993      	ldrh	r3, [r2, #12]
 801844a:	f023 0320 	bic.w	r3, r3, #32
 801844e:	8193      	strh	r3, [r2, #12]
 8018450:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018452:	6852      	ldr	r2, [r2, #4]
 8018454:	b2cd      	uxtb	r5, r1
 8018456:	b18b      	cbz	r3, 801847c <_sungetc_r+0x44>
 8018458:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801845a:	4293      	cmp	r3, r2
 801845c:	dd08      	ble.n	8018470 <_sungetc_r+0x38>
 801845e:	6823      	ldr	r3, [r4, #0]
 8018460:	1e5a      	subs	r2, r3, #1
 8018462:	6022      	str	r2, [r4, #0]
 8018464:	f803 5c01 	strb.w	r5, [r3, #-1]
 8018468:	6863      	ldr	r3, [r4, #4]
 801846a:	3301      	adds	r3, #1
 801846c:	6063      	str	r3, [r4, #4]
 801846e:	e7e9      	b.n	8018444 <_sungetc_r+0xc>
 8018470:	4621      	mov	r1, r4
 8018472:	f000 fbc3 	bl	8018bfc <__submore>
 8018476:	2800      	cmp	r0, #0
 8018478:	d0f1      	beq.n	801845e <_sungetc_r+0x26>
 801847a:	e7e1      	b.n	8018440 <_sungetc_r+0x8>
 801847c:	6921      	ldr	r1, [r4, #16]
 801847e:	6823      	ldr	r3, [r4, #0]
 8018480:	b151      	cbz	r1, 8018498 <_sungetc_r+0x60>
 8018482:	4299      	cmp	r1, r3
 8018484:	d208      	bcs.n	8018498 <_sungetc_r+0x60>
 8018486:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801848a:	42a9      	cmp	r1, r5
 801848c:	d104      	bne.n	8018498 <_sungetc_r+0x60>
 801848e:	3b01      	subs	r3, #1
 8018490:	3201      	adds	r2, #1
 8018492:	6023      	str	r3, [r4, #0]
 8018494:	6062      	str	r2, [r4, #4]
 8018496:	e7d5      	b.n	8018444 <_sungetc_r+0xc>
 8018498:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 801849c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80184a0:	6363      	str	r3, [r4, #52]	; 0x34
 80184a2:	2303      	movs	r3, #3
 80184a4:	63a3      	str	r3, [r4, #56]	; 0x38
 80184a6:	4623      	mov	r3, r4
 80184a8:	f803 5f46 	strb.w	r5, [r3, #70]!
 80184ac:	6023      	str	r3, [r4, #0]
 80184ae:	2301      	movs	r3, #1
 80184b0:	e7dc      	b.n	801846c <_sungetc_r+0x34>

080184b2 <__ssrefill_r>:
 80184b2:	b510      	push	{r4, lr}
 80184b4:	460c      	mov	r4, r1
 80184b6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80184b8:	b169      	cbz	r1, 80184d6 <__ssrefill_r+0x24>
 80184ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80184be:	4299      	cmp	r1, r3
 80184c0:	d001      	beq.n	80184c6 <__ssrefill_r+0x14>
 80184c2:	f7ff fdbf 	bl	8018044 <_free_r>
 80184c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80184c8:	6063      	str	r3, [r4, #4]
 80184ca:	2000      	movs	r0, #0
 80184cc:	6360      	str	r0, [r4, #52]	; 0x34
 80184ce:	b113      	cbz	r3, 80184d6 <__ssrefill_r+0x24>
 80184d0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80184d2:	6023      	str	r3, [r4, #0]
 80184d4:	bd10      	pop	{r4, pc}
 80184d6:	6923      	ldr	r3, [r4, #16]
 80184d8:	6023      	str	r3, [r4, #0]
 80184da:	2300      	movs	r3, #0
 80184dc:	6063      	str	r3, [r4, #4]
 80184de:	89a3      	ldrh	r3, [r4, #12]
 80184e0:	f043 0320 	orr.w	r3, r3, #32
 80184e4:	81a3      	strh	r3, [r4, #12]
 80184e6:	f04f 30ff 	mov.w	r0, #4294967295
 80184ea:	e7f3      	b.n	80184d4 <__ssrefill_r+0x22>

080184ec <__ssvfiscanf_r>:
 80184ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80184f0:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 80184f4:	460c      	mov	r4, r1
 80184f6:	2100      	movs	r1, #0
 80184f8:	9144      	str	r1, [sp, #272]	; 0x110
 80184fa:	9145      	str	r1, [sp, #276]	; 0x114
 80184fc:	499f      	ldr	r1, [pc, #636]	; (801877c <__ssvfiscanf_r+0x290>)
 80184fe:	91a0      	str	r1, [sp, #640]	; 0x280
 8018500:	f10d 0804 	add.w	r8, sp, #4
 8018504:	499e      	ldr	r1, [pc, #632]	; (8018780 <__ssvfiscanf_r+0x294>)
 8018506:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8018784 <__ssvfiscanf_r+0x298>
 801850a:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801850e:	4606      	mov	r6, r0
 8018510:	4692      	mov	sl, r2
 8018512:	91a1      	str	r1, [sp, #644]	; 0x284
 8018514:	9300      	str	r3, [sp, #0]
 8018516:	270a      	movs	r7, #10
 8018518:	f89a 3000 	ldrb.w	r3, [sl]
 801851c:	2b00      	cmp	r3, #0
 801851e:	f000 812a 	beq.w	8018776 <__ssvfiscanf_r+0x28a>
 8018522:	4655      	mov	r5, sl
 8018524:	f7ff f93e 	bl	80177a4 <__locale_ctype_ptr>
 8018528:	f815 bb01 	ldrb.w	fp, [r5], #1
 801852c:	4458      	add	r0, fp
 801852e:	7843      	ldrb	r3, [r0, #1]
 8018530:	f013 0308 	ands.w	r3, r3, #8
 8018534:	d01c      	beq.n	8018570 <__ssvfiscanf_r+0x84>
 8018536:	6863      	ldr	r3, [r4, #4]
 8018538:	2b00      	cmp	r3, #0
 801853a:	dd12      	ble.n	8018562 <__ssvfiscanf_r+0x76>
 801853c:	f7ff f932 	bl	80177a4 <__locale_ctype_ptr>
 8018540:	6823      	ldr	r3, [r4, #0]
 8018542:	781a      	ldrb	r2, [r3, #0]
 8018544:	4410      	add	r0, r2
 8018546:	7842      	ldrb	r2, [r0, #1]
 8018548:	0712      	lsls	r2, r2, #28
 801854a:	d401      	bmi.n	8018550 <__ssvfiscanf_r+0x64>
 801854c:	46aa      	mov	sl, r5
 801854e:	e7e3      	b.n	8018518 <__ssvfiscanf_r+0x2c>
 8018550:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8018552:	3201      	adds	r2, #1
 8018554:	9245      	str	r2, [sp, #276]	; 0x114
 8018556:	6862      	ldr	r2, [r4, #4]
 8018558:	3301      	adds	r3, #1
 801855a:	3a01      	subs	r2, #1
 801855c:	6062      	str	r2, [r4, #4]
 801855e:	6023      	str	r3, [r4, #0]
 8018560:	e7e9      	b.n	8018536 <__ssvfiscanf_r+0x4a>
 8018562:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8018564:	4621      	mov	r1, r4
 8018566:	4630      	mov	r0, r6
 8018568:	4798      	blx	r3
 801856a:	2800      	cmp	r0, #0
 801856c:	d0e6      	beq.n	801853c <__ssvfiscanf_r+0x50>
 801856e:	e7ed      	b.n	801854c <__ssvfiscanf_r+0x60>
 8018570:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8018574:	f040 8082 	bne.w	801867c <__ssvfiscanf_r+0x190>
 8018578:	9343      	str	r3, [sp, #268]	; 0x10c
 801857a:	9341      	str	r3, [sp, #260]	; 0x104
 801857c:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8018580:	2b2a      	cmp	r3, #42	; 0x2a
 8018582:	d103      	bne.n	801858c <__ssvfiscanf_r+0xa0>
 8018584:	2310      	movs	r3, #16
 8018586:	9341      	str	r3, [sp, #260]	; 0x104
 8018588:	f10a 0502 	add.w	r5, sl, #2
 801858c:	46aa      	mov	sl, r5
 801858e:	f815 1b01 	ldrb.w	r1, [r5], #1
 8018592:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8018596:	2a09      	cmp	r2, #9
 8018598:	d922      	bls.n	80185e0 <__ssvfiscanf_r+0xf4>
 801859a:	2203      	movs	r2, #3
 801859c:	4879      	ldr	r0, [pc, #484]	; (8018784 <__ssvfiscanf_r+0x298>)
 801859e:	f7e7 fe37 	bl	8000210 <memchr>
 80185a2:	b138      	cbz	r0, 80185b4 <__ssvfiscanf_r+0xc8>
 80185a4:	eba0 0309 	sub.w	r3, r0, r9
 80185a8:	2001      	movs	r0, #1
 80185aa:	4098      	lsls	r0, r3
 80185ac:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80185ae:	4318      	orrs	r0, r3
 80185b0:	9041      	str	r0, [sp, #260]	; 0x104
 80185b2:	46aa      	mov	sl, r5
 80185b4:	f89a 3000 	ldrb.w	r3, [sl]
 80185b8:	2b67      	cmp	r3, #103	; 0x67
 80185ba:	f10a 0501 	add.w	r5, sl, #1
 80185be:	d82b      	bhi.n	8018618 <__ssvfiscanf_r+0x12c>
 80185c0:	2b65      	cmp	r3, #101	; 0x65
 80185c2:	f080 809f 	bcs.w	8018704 <__ssvfiscanf_r+0x218>
 80185c6:	2b47      	cmp	r3, #71	; 0x47
 80185c8:	d810      	bhi.n	80185ec <__ssvfiscanf_r+0x100>
 80185ca:	2b45      	cmp	r3, #69	; 0x45
 80185cc:	f080 809a 	bcs.w	8018704 <__ssvfiscanf_r+0x218>
 80185d0:	2b00      	cmp	r3, #0
 80185d2:	d06c      	beq.n	80186ae <__ssvfiscanf_r+0x1c2>
 80185d4:	2b25      	cmp	r3, #37	; 0x25
 80185d6:	d051      	beq.n	801867c <__ssvfiscanf_r+0x190>
 80185d8:	2303      	movs	r3, #3
 80185da:	9347      	str	r3, [sp, #284]	; 0x11c
 80185dc:	9742      	str	r7, [sp, #264]	; 0x108
 80185de:	e027      	b.n	8018630 <__ssvfiscanf_r+0x144>
 80185e0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80185e2:	fb07 1303 	mla	r3, r7, r3, r1
 80185e6:	3b30      	subs	r3, #48	; 0x30
 80185e8:	9343      	str	r3, [sp, #268]	; 0x10c
 80185ea:	e7cf      	b.n	801858c <__ssvfiscanf_r+0xa0>
 80185ec:	2b5b      	cmp	r3, #91	; 0x5b
 80185ee:	d06a      	beq.n	80186c6 <__ssvfiscanf_r+0x1da>
 80185f0:	d80c      	bhi.n	801860c <__ssvfiscanf_r+0x120>
 80185f2:	2b58      	cmp	r3, #88	; 0x58
 80185f4:	d1f0      	bne.n	80185d8 <__ssvfiscanf_r+0xec>
 80185f6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80185f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80185fc:	9241      	str	r2, [sp, #260]	; 0x104
 80185fe:	2210      	movs	r2, #16
 8018600:	9242      	str	r2, [sp, #264]	; 0x108
 8018602:	2b6e      	cmp	r3, #110	; 0x6e
 8018604:	bf8c      	ite	hi
 8018606:	2304      	movhi	r3, #4
 8018608:	2303      	movls	r3, #3
 801860a:	e010      	b.n	801862e <__ssvfiscanf_r+0x142>
 801860c:	2b63      	cmp	r3, #99	; 0x63
 801860e:	d065      	beq.n	80186dc <__ssvfiscanf_r+0x1f0>
 8018610:	2b64      	cmp	r3, #100	; 0x64
 8018612:	d1e1      	bne.n	80185d8 <__ssvfiscanf_r+0xec>
 8018614:	9742      	str	r7, [sp, #264]	; 0x108
 8018616:	e7f4      	b.n	8018602 <__ssvfiscanf_r+0x116>
 8018618:	2b70      	cmp	r3, #112	; 0x70
 801861a:	d04b      	beq.n	80186b4 <__ssvfiscanf_r+0x1c8>
 801861c:	d826      	bhi.n	801866c <__ssvfiscanf_r+0x180>
 801861e:	2b6e      	cmp	r3, #110	; 0x6e
 8018620:	d062      	beq.n	80186e8 <__ssvfiscanf_r+0x1fc>
 8018622:	d84c      	bhi.n	80186be <__ssvfiscanf_r+0x1d2>
 8018624:	2b69      	cmp	r3, #105	; 0x69
 8018626:	d1d7      	bne.n	80185d8 <__ssvfiscanf_r+0xec>
 8018628:	2300      	movs	r3, #0
 801862a:	9342      	str	r3, [sp, #264]	; 0x108
 801862c:	2303      	movs	r3, #3
 801862e:	9347      	str	r3, [sp, #284]	; 0x11c
 8018630:	6863      	ldr	r3, [r4, #4]
 8018632:	2b00      	cmp	r3, #0
 8018634:	dd68      	ble.n	8018708 <__ssvfiscanf_r+0x21c>
 8018636:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018638:	0659      	lsls	r1, r3, #25
 801863a:	d407      	bmi.n	801864c <__ssvfiscanf_r+0x160>
 801863c:	f7ff f8b2 	bl	80177a4 <__locale_ctype_ptr>
 8018640:	6823      	ldr	r3, [r4, #0]
 8018642:	781a      	ldrb	r2, [r3, #0]
 8018644:	4410      	add	r0, r2
 8018646:	7842      	ldrb	r2, [r0, #1]
 8018648:	0712      	lsls	r2, r2, #28
 801864a:	d464      	bmi.n	8018716 <__ssvfiscanf_r+0x22a>
 801864c:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801864e:	2b02      	cmp	r3, #2
 8018650:	dc73      	bgt.n	801873a <__ssvfiscanf_r+0x24e>
 8018652:	466b      	mov	r3, sp
 8018654:	4622      	mov	r2, r4
 8018656:	a941      	add	r1, sp, #260	; 0x104
 8018658:	4630      	mov	r0, r6
 801865a:	f000 f897 	bl	801878c <_scanf_chars>
 801865e:	2801      	cmp	r0, #1
 8018660:	f000 8089 	beq.w	8018776 <__ssvfiscanf_r+0x28a>
 8018664:	2802      	cmp	r0, #2
 8018666:	f47f af71 	bne.w	801854c <__ssvfiscanf_r+0x60>
 801866a:	e01d      	b.n	80186a8 <__ssvfiscanf_r+0x1bc>
 801866c:	2b75      	cmp	r3, #117	; 0x75
 801866e:	d0d1      	beq.n	8018614 <__ssvfiscanf_r+0x128>
 8018670:	2b78      	cmp	r3, #120	; 0x78
 8018672:	d0c0      	beq.n	80185f6 <__ssvfiscanf_r+0x10a>
 8018674:	2b73      	cmp	r3, #115	; 0x73
 8018676:	d1af      	bne.n	80185d8 <__ssvfiscanf_r+0xec>
 8018678:	2302      	movs	r3, #2
 801867a:	e7d8      	b.n	801862e <__ssvfiscanf_r+0x142>
 801867c:	6863      	ldr	r3, [r4, #4]
 801867e:	2b00      	cmp	r3, #0
 8018680:	dd0c      	ble.n	801869c <__ssvfiscanf_r+0x1b0>
 8018682:	6823      	ldr	r3, [r4, #0]
 8018684:	781a      	ldrb	r2, [r3, #0]
 8018686:	455a      	cmp	r2, fp
 8018688:	d175      	bne.n	8018776 <__ssvfiscanf_r+0x28a>
 801868a:	3301      	adds	r3, #1
 801868c:	6862      	ldr	r2, [r4, #4]
 801868e:	6023      	str	r3, [r4, #0]
 8018690:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8018692:	3a01      	subs	r2, #1
 8018694:	3301      	adds	r3, #1
 8018696:	6062      	str	r2, [r4, #4]
 8018698:	9345      	str	r3, [sp, #276]	; 0x114
 801869a:	e757      	b.n	801854c <__ssvfiscanf_r+0x60>
 801869c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801869e:	4621      	mov	r1, r4
 80186a0:	4630      	mov	r0, r6
 80186a2:	4798      	blx	r3
 80186a4:	2800      	cmp	r0, #0
 80186a6:	d0ec      	beq.n	8018682 <__ssvfiscanf_r+0x196>
 80186a8:	9844      	ldr	r0, [sp, #272]	; 0x110
 80186aa:	2800      	cmp	r0, #0
 80186ac:	d159      	bne.n	8018762 <__ssvfiscanf_r+0x276>
 80186ae:	f04f 30ff 	mov.w	r0, #4294967295
 80186b2:	e05c      	b.n	801876e <__ssvfiscanf_r+0x282>
 80186b4:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80186b6:	f042 0220 	orr.w	r2, r2, #32
 80186ba:	9241      	str	r2, [sp, #260]	; 0x104
 80186bc:	e79b      	b.n	80185f6 <__ssvfiscanf_r+0x10a>
 80186be:	2308      	movs	r3, #8
 80186c0:	9342      	str	r3, [sp, #264]	; 0x108
 80186c2:	2304      	movs	r3, #4
 80186c4:	e7b3      	b.n	801862e <__ssvfiscanf_r+0x142>
 80186c6:	4629      	mov	r1, r5
 80186c8:	4640      	mov	r0, r8
 80186ca:	f000 f9c7 	bl	8018a5c <__sccl>
 80186ce:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80186d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80186d4:	9341      	str	r3, [sp, #260]	; 0x104
 80186d6:	4605      	mov	r5, r0
 80186d8:	2301      	movs	r3, #1
 80186da:	e7a8      	b.n	801862e <__ssvfiscanf_r+0x142>
 80186dc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80186de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80186e2:	9341      	str	r3, [sp, #260]	; 0x104
 80186e4:	2300      	movs	r3, #0
 80186e6:	e7a2      	b.n	801862e <__ssvfiscanf_r+0x142>
 80186e8:	9841      	ldr	r0, [sp, #260]	; 0x104
 80186ea:	06c3      	lsls	r3, r0, #27
 80186ec:	f53f af2e 	bmi.w	801854c <__ssvfiscanf_r+0x60>
 80186f0:	9b00      	ldr	r3, [sp, #0]
 80186f2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80186f4:	1d19      	adds	r1, r3, #4
 80186f6:	9100      	str	r1, [sp, #0]
 80186f8:	681b      	ldr	r3, [r3, #0]
 80186fa:	07c0      	lsls	r0, r0, #31
 80186fc:	bf4c      	ite	mi
 80186fe:	801a      	strhmi	r2, [r3, #0]
 8018700:	601a      	strpl	r2, [r3, #0]
 8018702:	e723      	b.n	801854c <__ssvfiscanf_r+0x60>
 8018704:	2305      	movs	r3, #5
 8018706:	e792      	b.n	801862e <__ssvfiscanf_r+0x142>
 8018708:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801870a:	4621      	mov	r1, r4
 801870c:	4630      	mov	r0, r6
 801870e:	4798      	blx	r3
 8018710:	2800      	cmp	r0, #0
 8018712:	d090      	beq.n	8018636 <__ssvfiscanf_r+0x14a>
 8018714:	e7c8      	b.n	80186a8 <__ssvfiscanf_r+0x1bc>
 8018716:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8018718:	3201      	adds	r2, #1
 801871a:	9245      	str	r2, [sp, #276]	; 0x114
 801871c:	6862      	ldr	r2, [r4, #4]
 801871e:	3a01      	subs	r2, #1
 8018720:	2a00      	cmp	r2, #0
 8018722:	6062      	str	r2, [r4, #4]
 8018724:	dd02      	ble.n	801872c <__ssvfiscanf_r+0x240>
 8018726:	3301      	adds	r3, #1
 8018728:	6023      	str	r3, [r4, #0]
 801872a:	e787      	b.n	801863c <__ssvfiscanf_r+0x150>
 801872c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801872e:	4621      	mov	r1, r4
 8018730:	4630      	mov	r0, r6
 8018732:	4798      	blx	r3
 8018734:	2800      	cmp	r0, #0
 8018736:	d081      	beq.n	801863c <__ssvfiscanf_r+0x150>
 8018738:	e7b6      	b.n	80186a8 <__ssvfiscanf_r+0x1bc>
 801873a:	2b04      	cmp	r3, #4
 801873c:	dc06      	bgt.n	801874c <__ssvfiscanf_r+0x260>
 801873e:	466b      	mov	r3, sp
 8018740:	4622      	mov	r2, r4
 8018742:	a941      	add	r1, sp, #260	; 0x104
 8018744:	4630      	mov	r0, r6
 8018746:	f000 f885 	bl	8018854 <_scanf_i>
 801874a:	e788      	b.n	801865e <__ssvfiscanf_r+0x172>
 801874c:	4b0e      	ldr	r3, [pc, #56]	; (8018788 <__ssvfiscanf_r+0x29c>)
 801874e:	2b00      	cmp	r3, #0
 8018750:	f43f aefc 	beq.w	801854c <__ssvfiscanf_r+0x60>
 8018754:	466b      	mov	r3, sp
 8018756:	4622      	mov	r2, r4
 8018758:	a941      	add	r1, sp, #260	; 0x104
 801875a:	4630      	mov	r0, r6
 801875c:	f7fc fd72 	bl	8015244 <_scanf_float>
 8018760:	e77d      	b.n	801865e <__ssvfiscanf_r+0x172>
 8018762:	89a3      	ldrh	r3, [r4, #12]
 8018764:	f013 0f40 	tst.w	r3, #64	; 0x40
 8018768:	bf18      	it	ne
 801876a:	f04f 30ff 	movne.w	r0, #4294967295
 801876e:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8018772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018776:	9844      	ldr	r0, [sp, #272]	; 0x110
 8018778:	e7f9      	b.n	801876e <__ssvfiscanf_r+0x282>
 801877a:	bf00      	nop
 801877c:	08018439 	.word	0x08018439
 8018780:	080184b3 	.word	0x080184b3
 8018784:	080193e2 	.word	0x080193e2
 8018788:	08015245 	.word	0x08015245

0801878c <_scanf_chars>:
 801878c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018790:	4615      	mov	r5, r2
 8018792:	688a      	ldr	r2, [r1, #8]
 8018794:	4680      	mov	r8, r0
 8018796:	460c      	mov	r4, r1
 8018798:	b932      	cbnz	r2, 80187a8 <_scanf_chars+0x1c>
 801879a:	698a      	ldr	r2, [r1, #24]
 801879c:	2a00      	cmp	r2, #0
 801879e:	bf14      	ite	ne
 80187a0:	f04f 32ff 	movne.w	r2, #4294967295
 80187a4:	2201      	moveq	r2, #1
 80187a6:	608a      	str	r2, [r1, #8]
 80187a8:	6822      	ldr	r2, [r4, #0]
 80187aa:	06d1      	lsls	r1, r2, #27
 80187ac:	bf5f      	itttt	pl
 80187ae:	681a      	ldrpl	r2, [r3, #0]
 80187b0:	1d11      	addpl	r1, r2, #4
 80187b2:	6019      	strpl	r1, [r3, #0]
 80187b4:	6817      	ldrpl	r7, [r2, #0]
 80187b6:	2600      	movs	r6, #0
 80187b8:	69a3      	ldr	r3, [r4, #24]
 80187ba:	b1db      	cbz	r3, 80187f4 <_scanf_chars+0x68>
 80187bc:	2b01      	cmp	r3, #1
 80187be:	d107      	bne.n	80187d0 <_scanf_chars+0x44>
 80187c0:	682b      	ldr	r3, [r5, #0]
 80187c2:	6962      	ldr	r2, [r4, #20]
 80187c4:	781b      	ldrb	r3, [r3, #0]
 80187c6:	5cd3      	ldrb	r3, [r2, r3]
 80187c8:	b9a3      	cbnz	r3, 80187f4 <_scanf_chars+0x68>
 80187ca:	2e00      	cmp	r6, #0
 80187cc:	d132      	bne.n	8018834 <_scanf_chars+0xa8>
 80187ce:	e006      	b.n	80187de <_scanf_chars+0x52>
 80187d0:	2b02      	cmp	r3, #2
 80187d2:	d007      	beq.n	80187e4 <_scanf_chars+0x58>
 80187d4:	2e00      	cmp	r6, #0
 80187d6:	d12d      	bne.n	8018834 <_scanf_chars+0xa8>
 80187d8:	69a3      	ldr	r3, [r4, #24]
 80187da:	2b01      	cmp	r3, #1
 80187dc:	d12a      	bne.n	8018834 <_scanf_chars+0xa8>
 80187de:	2001      	movs	r0, #1
 80187e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80187e4:	f7fe ffde 	bl	80177a4 <__locale_ctype_ptr>
 80187e8:	682b      	ldr	r3, [r5, #0]
 80187ea:	781b      	ldrb	r3, [r3, #0]
 80187ec:	4418      	add	r0, r3
 80187ee:	7843      	ldrb	r3, [r0, #1]
 80187f0:	071b      	lsls	r3, r3, #28
 80187f2:	d4ef      	bmi.n	80187d4 <_scanf_chars+0x48>
 80187f4:	6823      	ldr	r3, [r4, #0]
 80187f6:	06da      	lsls	r2, r3, #27
 80187f8:	bf5e      	ittt	pl
 80187fa:	682b      	ldrpl	r3, [r5, #0]
 80187fc:	781b      	ldrbpl	r3, [r3, #0]
 80187fe:	703b      	strbpl	r3, [r7, #0]
 8018800:	682a      	ldr	r2, [r5, #0]
 8018802:	686b      	ldr	r3, [r5, #4]
 8018804:	f102 0201 	add.w	r2, r2, #1
 8018808:	602a      	str	r2, [r5, #0]
 801880a:	68a2      	ldr	r2, [r4, #8]
 801880c:	f103 33ff 	add.w	r3, r3, #4294967295
 8018810:	f102 32ff 	add.w	r2, r2, #4294967295
 8018814:	606b      	str	r3, [r5, #4]
 8018816:	f106 0601 	add.w	r6, r6, #1
 801881a:	bf58      	it	pl
 801881c:	3701      	addpl	r7, #1
 801881e:	60a2      	str	r2, [r4, #8]
 8018820:	b142      	cbz	r2, 8018834 <_scanf_chars+0xa8>
 8018822:	2b00      	cmp	r3, #0
 8018824:	dcc8      	bgt.n	80187b8 <_scanf_chars+0x2c>
 8018826:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801882a:	4629      	mov	r1, r5
 801882c:	4640      	mov	r0, r8
 801882e:	4798      	blx	r3
 8018830:	2800      	cmp	r0, #0
 8018832:	d0c1      	beq.n	80187b8 <_scanf_chars+0x2c>
 8018834:	6823      	ldr	r3, [r4, #0]
 8018836:	f013 0310 	ands.w	r3, r3, #16
 801883a:	d105      	bne.n	8018848 <_scanf_chars+0xbc>
 801883c:	68e2      	ldr	r2, [r4, #12]
 801883e:	3201      	adds	r2, #1
 8018840:	60e2      	str	r2, [r4, #12]
 8018842:	69a2      	ldr	r2, [r4, #24]
 8018844:	b102      	cbz	r2, 8018848 <_scanf_chars+0xbc>
 8018846:	703b      	strb	r3, [r7, #0]
 8018848:	6923      	ldr	r3, [r4, #16]
 801884a:	441e      	add	r6, r3
 801884c:	6126      	str	r6, [r4, #16]
 801884e:	2000      	movs	r0, #0
 8018850:	e7c6      	b.n	80187e0 <_scanf_chars+0x54>
	...

08018854 <_scanf_i>:
 8018854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018858:	469a      	mov	sl, r3
 801885a:	4b74      	ldr	r3, [pc, #464]	; (8018a2c <_scanf_i+0x1d8>)
 801885c:	460c      	mov	r4, r1
 801885e:	4683      	mov	fp, r0
 8018860:	4616      	mov	r6, r2
 8018862:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8018866:	b087      	sub	sp, #28
 8018868:	ab03      	add	r3, sp, #12
 801886a:	68a7      	ldr	r7, [r4, #8]
 801886c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8018870:	4b6f      	ldr	r3, [pc, #444]	; (8018a30 <_scanf_i+0x1dc>)
 8018872:	69a1      	ldr	r1, [r4, #24]
 8018874:	4a6f      	ldr	r2, [pc, #444]	; (8018a34 <_scanf_i+0x1e0>)
 8018876:	2903      	cmp	r1, #3
 8018878:	bf08      	it	eq
 801887a:	461a      	moveq	r2, r3
 801887c:	1e7b      	subs	r3, r7, #1
 801887e:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8018882:	bf84      	itt	hi
 8018884:	f240 135d 	movwhi	r3, #349	; 0x15d
 8018888:	60a3      	strhi	r3, [r4, #8]
 801888a:	6823      	ldr	r3, [r4, #0]
 801888c:	9200      	str	r2, [sp, #0]
 801888e:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8018892:	bf88      	it	hi
 8018894:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8018898:	f104 091c 	add.w	r9, r4, #28
 801889c:	6023      	str	r3, [r4, #0]
 801889e:	bf8c      	ite	hi
 80188a0:	197f      	addhi	r7, r7, r5
 80188a2:	2700      	movls	r7, #0
 80188a4:	464b      	mov	r3, r9
 80188a6:	f04f 0800 	mov.w	r8, #0
 80188aa:	9301      	str	r3, [sp, #4]
 80188ac:	6831      	ldr	r1, [r6, #0]
 80188ae:	ab03      	add	r3, sp, #12
 80188b0:	2202      	movs	r2, #2
 80188b2:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80188b6:	7809      	ldrb	r1, [r1, #0]
 80188b8:	f7e7 fcaa 	bl	8000210 <memchr>
 80188bc:	9b01      	ldr	r3, [sp, #4]
 80188be:	b330      	cbz	r0, 801890e <_scanf_i+0xba>
 80188c0:	f1b8 0f01 	cmp.w	r8, #1
 80188c4:	d15a      	bne.n	801897c <_scanf_i+0x128>
 80188c6:	6862      	ldr	r2, [r4, #4]
 80188c8:	b92a      	cbnz	r2, 80188d6 <_scanf_i+0x82>
 80188ca:	6822      	ldr	r2, [r4, #0]
 80188cc:	2108      	movs	r1, #8
 80188ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80188d2:	6061      	str	r1, [r4, #4]
 80188d4:	6022      	str	r2, [r4, #0]
 80188d6:	6822      	ldr	r2, [r4, #0]
 80188d8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80188dc:	6022      	str	r2, [r4, #0]
 80188de:	68a2      	ldr	r2, [r4, #8]
 80188e0:	1e51      	subs	r1, r2, #1
 80188e2:	60a1      	str	r1, [r4, #8]
 80188e4:	b19a      	cbz	r2, 801890e <_scanf_i+0xba>
 80188e6:	6832      	ldr	r2, [r6, #0]
 80188e8:	1c51      	adds	r1, r2, #1
 80188ea:	6031      	str	r1, [r6, #0]
 80188ec:	7812      	ldrb	r2, [r2, #0]
 80188ee:	701a      	strb	r2, [r3, #0]
 80188f0:	1c5d      	adds	r5, r3, #1
 80188f2:	6873      	ldr	r3, [r6, #4]
 80188f4:	3b01      	subs	r3, #1
 80188f6:	2b00      	cmp	r3, #0
 80188f8:	6073      	str	r3, [r6, #4]
 80188fa:	dc07      	bgt.n	801890c <_scanf_i+0xb8>
 80188fc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8018900:	4631      	mov	r1, r6
 8018902:	4658      	mov	r0, fp
 8018904:	4798      	blx	r3
 8018906:	2800      	cmp	r0, #0
 8018908:	f040 8086 	bne.w	8018a18 <_scanf_i+0x1c4>
 801890c:	462b      	mov	r3, r5
 801890e:	f108 0801 	add.w	r8, r8, #1
 8018912:	f1b8 0f03 	cmp.w	r8, #3
 8018916:	d1c8      	bne.n	80188aa <_scanf_i+0x56>
 8018918:	6862      	ldr	r2, [r4, #4]
 801891a:	b90a      	cbnz	r2, 8018920 <_scanf_i+0xcc>
 801891c:	220a      	movs	r2, #10
 801891e:	6062      	str	r2, [r4, #4]
 8018920:	6862      	ldr	r2, [r4, #4]
 8018922:	4945      	ldr	r1, [pc, #276]	; (8018a38 <_scanf_i+0x1e4>)
 8018924:	6960      	ldr	r0, [r4, #20]
 8018926:	9301      	str	r3, [sp, #4]
 8018928:	1a89      	subs	r1, r1, r2
 801892a:	f000 f897 	bl	8018a5c <__sccl>
 801892e:	9b01      	ldr	r3, [sp, #4]
 8018930:	f04f 0800 	mov.w	r8, #0
 8018934:	461d      	mov	r5, r3
 8018936:	68a3      	ldr	r3, [r4, #8]
 8018938:	6822      	ldr	r2, [r4, #0]
 801893a:	2b00      	cmp	r3, #0
 801893c:	d03a      	beq.n	80189b4 <_scanf_i+0x160>
 801893e:	6831      	ldr	r1, [r6, #0]
 8018940:	6960      	ldr	r0, [r4, #20]
 8018942:	f891 c000 	ldrb.w	ip, [r1]
 8018946:	f810 000c 	ldrb.w	r0, [r0, ip]
 801894a:	2800      	cmp	r0, #0
 801894c:	d032      	beq.n	80189b4 <_scanf_i+0x160>
 801894e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8018952:	d121      	bne.n	8018998 <_scanf_i+0x144>
 8018954:	0510      	lsls	r0, r2, #20
 8018956:	d51f      	bpl.n	8018998 <_scanf_i+0x144>
 8018958:	f108 0801 	add.w	r8, r8, #1
 801895c:	b117      	cbz	r7, 8018964 <_scanf_i+0x110>
 801895e:	3301      	adds	r3, #1
 8018960:	3f01      	subs	r7, #1
 8018962:	60a3      	str	r3, [r4, #8]
 8018964:	6873      	ldr	r3, [r6, #4]
 8018966:	3b01      	subs	r3, #1
 8018968:	2b00      	cmp	r3, #0
 801896a:	6073      	str	r3, [r6, #4]
 801896c:	dd1b      	ble.n	80189a6 <_scanf_i+0x152>
 801896e:	6833      	ldr	r3, [r6, #0]
 8018970:	3301      	adds	r3, #1
 8018972:	6033      	str	r3, [r6, #0]
 8018974:	68a3      	ldr	r3, [r4, #8]
 8018976:	3b01      	subs	r3, #1
 8018978:	60a3      	str	r3, [r4, #8]
 801897a:	e7dc      	b.n	8018936 <_scanf_i+0xe2>
 801897c:	f1b8 0f02 	cmp.w	r8, #2
 8018980:	d1ad      	bne.n	80188de <_scanf_i+0x8a>
 8018982:	6822      	ldr	r2, [r4, #0]
 8018984:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8018988:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801898c:	d1bf      	bne.n	801890e <_scanf_i+0xba>
 801898e:	2110      	movs	r1, #16
 8018990:	6061      	str	r1, [r4, #4]
 8018992:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8018996:	e7a1      	b.n	80188dc <_scanf_i+0x88>
 8018998:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801899c:	6022      	str	r2, [r4, #0]
 801899e:	780b      	ldrb	r3, [r1, #0]
 80189a0:	702b      	strb	r3, [r5, #0]
 80189a2:	3501      	adds	r5, #1
 80189a4:	e7de      	b.n	8018964 <_scanf_i+0x110>
 80189a6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80189aa:	4631      	mov	r1, r6
 80189ac:	4658      	mov	r0, fp
 80189ae:	4798      	blx	r3
 80189b0:	2800      	cmp	r0, #0
 80189b2:	d0df      	beq.n	8018974 <_scanf_i+0x120>
 80189b4:	6823      	ldr	r3, [r4, #0]
 80189b6:	05d9      	lsls	r1, r3, #23
 80189b8:	d50c      	bpl.n	80189d4 <_scanf_i+0x180>
 80189ba:	454d      	cmp	r5, r9
 80189bc:	d908      	bls.n	80189d0 <_scanf_i+0x17c>
 80189be:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80189c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80189c6:	4632      	mov	r2, r6
 80189c8:	4658      	mov	r0, fp
 80189ca:	4798      	blx	r3
 80189cc:	1e6f      	subs	r7, r5, #1
 80189ce:	463d      	mov	r5, r7
 80189d0:	454d      	cmp	r5, r9
 80189d2:	d029      	beq.n	8018a28 <_scanf_i+0x1d4>
 80189d4:	6822      	ldr	r2, [r4, #0]
 80189d6:	f012 0210 	ands.w	r2, r2, #16
 80189da:	d113      	bne.n	8018a04 <_scanf_i+0x1b0>
 80189dc:	702a      	strb	r2, [r5, #0]
 80189de:	6863      	ldr	r3, [r4, #4]
 80189e0:	9e00      	ldr	r6, [sp, #0]
 80189e2:	4649      	mov	r1, r9
 80189e4:	4658      	mov	r0, fp
 80189e6:	47b0      	blx	r6
 80189e8:	f8da 3000 	ldr.w	r3, [sl]
 80189ec:	6821      	ldr	r1, [r4, #0]
 80189ee:	1d1a      	adds	r2, r3, #4
 80189f0:	f8ca 2000 	str.w	r2, [sl]
 80189f4:	f011 0f20 	tst.w	r1, #32
 80189f8:	681b      	ldr	r3, [r3, #0]
 80189fa:	d010      	beq.n	8018a1e <_scanf_i+0x1ca>
 80189fc:	6018      	str	r0, [r3, #0]
 80189fe:	68e3      	ldr	r3, [r4, #12]
 8018a00:	3301      	adds	r3, #1
 8018a02:	60e3      	str	r3, [r4, #12]
 8018a04:	eba5 0509 	sub.w	r5, r5, r9
 8018a08:	44a8      	add	r8, r5
 8018a0a:	6925      	ldr	r5, [r4, #16]
 8018a0c:	4445      	add	r5, r8
 8018a0e:	6125      	str	r5, [r4, #16]
 8018a10:	2000      	movs	r0, #0
 8018a12:	b007      	add	sp, #28
 8018a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a18:	f04f 0800 	mov.w	r8, #0
 8018a1c:	e7ca      	b.n	80189b4 <_scanf_i+0x160>
 8018a1e:	07ca      	lsls	r2, r1, #31
 8018a20:	bf4c      	ite	mi
 8018a22:	8018      	strhmi	r0, [r3, #0]
 8018a24:	6018      	strpl	r0, [r3, #0]
 8018a26:	e7ea      	b.n	80189fe <_scanf_i+0x1aa>
 8018a28:	2001      	movs	r0, #1
 8018a2a:	e7f2      	b.n	8018a12 <_scanf_i+0x1be>
 8018a2c:	0801917c 	.word	0x0801917c
 8018a30:	08016461 	.word	0x08016461
 8018a34:	08018bd9 	.word	0x08018bd9
 8018a38:	080193fd 	.word	0x080193fd

08018a3c <_sbrk_r>:
 8018a3c:	b538      	push	{r3, r4, r5, lr}
 8018a3e:	4c06      	ldr	r4, [pc, #24]	; (8018a58 <_sbrk_r+0x1c>)
 8018a40:	2300      	movs	r3, #0
 8018a42:	4605      	mov	r5, r0
 8018a44:	4608      	mov	r0, r1
 8018a46:	6023      	str	r3, [r4, #0]
 8018a48:	f7ee ff4c 	bl	80078e4 <_sbrk>
 8018a4c:	1c43      	adds	r3, r0, #1
 8018a4e:	d102      	bne.n	8018a56 <_sbrk_r+0x1a>
 8018a50:	6823      	ldr	r3, [r4, #0]
 8018a52:	b103      	cbz	r3, 8018a56 <_sbrk_r+0x1a>
 8018a54:	602b      	str	r3, [r5, #0]
 8018a56:	bd38      	pop	{r3, r4, r5, pc}
 8018a58:	20049ca4 	.word	0x20049ca4

08018a5c <__sccl>:
 8018a5c:	b570      	push	{r4, r5, r6, lr}
 8018a5e:	780b      	ldrb	r3, [r1, #0]
 8018a60:	2b5e      	cmp	r3, #94	; 0x5e
 8018a62:	bf13      	iteet	ne
 8018a64:	1c4a      	addne	r2, r1, #1
 8018a66:	1c8a      	addeq	r2, r1, #2
 8018a68:	784b      	ldrbeq	r3, [r1, #1]
 8018a6a:	2100      	movne	r1, #0
 8018a6c:	bf08      	it	eq
 8018a6e:	2101      	moveq	r1, #1
 8018a70:	1e44      	subs	r4, r0, #1
 8018a72:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8018a76:	f804 1f01 	strb.w	r1, [r4, #1]!
 8018a7a:	42ac      	cmp	r4, r5
 8018a7c:	d1fb      	bne.n	8018a76 <__sccl+0x1a>
 8018a7e:	b913      	cbnz	r3, 8018a86 <__sccl+0x2a>
 8018a80:	3a01      	subs	r2, #1
 8018a82:	4610      	mov	r0, r2
 8018a84:	bd70      	pop	{r4, r5, r6, pc}
 8018a86:	f081 0401 	eor.w	r4, r1, #1
 8018a8a:	54c4      	strb	r4, [r0, r3]
 8018a8c:	1c51      	adds	r1, r2, #1
 8018a8e:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8018a92:	2d2d      	cmp	r5, #45	; 0x2d
 8018a94:	f101 36ff 	add.w	r6, r1, #4294967295
 8018a98:	460a      	mov	r2, r1
 8018a9a:	d006      	beq.n	8018aaa <__sccl+0x4e>
 8018a9c:	2d5d      	cmp	r5, #93	; 0x5d
 8018a9e:	d0f0      	beq.n	8018a82 <__sccl+0x26>
 8018aa0:	b90d      	cbnz	r5, 8018aa6 <__sccl+0x4a>
 8018aa2:	4632      	mov	r2, r6
 8018aa4:	e7ed      	b.n	8018a82 <__sccl+0x26>
 8018aa6:	462b      	mov	r3, r5
 8018aa8:	e7ef      	b.n	8018a8a <__sccl+0x2e>
 8018aaa:	780e      	ldrb	r6, [r1, #0]
 8018aac:	2e5d      	cmp	r6, #93	; 0x5d
 8018aae:	d0fa      	beq.n	8018aa6 <__sccl+0x4a>
 8018ab0:	42b3      	cmp	r3, r6
 8018ab2:	dcf8      	bgt.n	8018aa6 <__sccl+0x4a>
 8018ab4:	3301      	adds	r3, #1
 8018ab6:	429e      	cmp	r6, r3
 8018ab8:	54c4      	strb	r4, [r0, r3]
 8018aba:	dcfb      	bgt.n	8018ab4 <__sccl+0x58>
 8018abc:	3102      	adds	r1, #2
 8018abe:	e7e6      	b.n	8018a8e <__sccl+0x32>

08018ac0 <strncmp>:
 8018ac0:	b510      	push	{r4, lr}
 8018ac2:	b16a      	cbz	r2, 8018ae0 <strncmp+0x20>
 8018ac4:	3901      	subs	r1, #1
 8018ac6:	1884      	adds	r4, r0, r2
 8018ac8:	f810 3b01 	ldrb.w	r3, [r0], #1
 8018acc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8018ad0:	4293      	cmp	r3, r2
 8018ad2:	d103      	bne.n	8018adc <strncmp+0x1c>
 8018ad4:	42a0      	cmp	r0, r4
 8018ad6:	d001      	beq.n	8018adc <strncmp+0x1c>
 8018ad8:	2b00      	cmp	r3, #0
 8018ada:	d1f5      	bne.n	8018ac8 <strncmp+0x8>
 8018adc:	1a98      	subs	r0, r3, r2
 8018ade:	bd10      	pop	{r4, pc}
 8018ae0:	4610      	mov	r0, r2
 8018ae2:	e7fc      	b.n	8018ade <strncmp+0x1e>

08018ae4 <_strtoul_l.isra.0>:
 8018ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018ae8:	4680      	mov	r8, r0
 8018aea:	4689      	mov	r9, r1
 8018aec:	4692      	mov	sl, r2
 8018aee:	461e      	mov	r6, r3
 8018af0:	460f      	mov	r7, r1
 8018af2:	463d      	mov	r5, r7
 8018af4:	9808      	ldr	r0, [sp, #32]
 8018af6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018afa:	f7fe fe4f 	bl	801779c <__locale_ctype_ptr_l>
 8018afe:	4420      	add	r0, r4
 8018b00:	7843      	ldrb	r3, [r0, #1]
 8018b02:	f013 0308 	ands.w	r3, r3, #8
 8018b06:	d130      	bne.n	8018b6a <_strtoul_l.isra.0+0x86>
 8018b08:	2c2d      	cmp	r4, #45	; 0x2d
 8018b0a:	d130      	bne.n	8018b6e <_strtoul_l.isra.0+0x8a>
 8018b0c:	787c      	ldrb	r4, [r7, #1]
 8018b0e:	1cbd      	adds	r5, r7, #2
 8018b10:	2101      	movs	r1, #1
 8018b12:	2e00      	cmp	r6, #0
 8018b14:	d05c      	beq.n	8018bd0 <_strtoul_l.isra.0+0xec>
 8018b16:	2e10      	cmp	r6, #16
 8018b18:	d109      	bne.n	8018b2e <_strtoul_l.isra.0+0x4a>
 8018b1a:	2c30      	cmp	r4, #48	; 0x30
 8018b1c:	d107      	bne.n	8018b2e <_strtoul_l.isra.0+0x4a>
 8018b1e:	782b      	ldrb	r3, [r5, #0]
 8018b20:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8018b24:	2b58      	cmp	r3, #88	; 0x58
 8018b26:	d14e      	bne.n	8018bc6 <_strtoul_l.isra.0+0xe2>
 8018b28:	786c      	ldrb	r4, [r5, #1]
 8018b2a:	2610      	movs	r6, #16
 8018b2c:	3502      	adds	r5, #2
 8018b2e:	f04f 32ff 	mov.w	r2, #4294967295
 8018b32:	2300      	movs	r3, #0
 8018b34:	fbb2 f2f6 	udiv	r2, r2, r6
 8018b38:	fb06 fc02 	mul.w	ip, r6, r2
 8018b3c:	ea6f 0c0c 	mvn.w	ip, ip
 8018b40:	4618      	mov	r0, r3
 8018b42:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8018b46:	2f09      	cmp	r7, #9
 8018b48:	d817      	bhi.n	8018b7a <_strtoul_l.isra.0+0x96>
 8018b4a:	463c      	mov	r4, r7
 8018b4c:	42a6      	cmp	r6, r4
 8018b4e:	dd23      	ble.n	8018b98 <_strtoul_l.isra.0+0xb4>
 8018b50:	2b00      	cmp	r3, #0
 8018b52:	db1e      	blt.n	8018b92 <_strtoul_l.isra.0+0xae>
 8018b54:	4282      	cmp	r2, r0
 8018b56:	d31c      	bcc.n	8018b92 <_strtoul_l.isra.0+0xae>
 8018b58:	d101      	bne.n	8018b5e <_strtoul_l.isra.0+0x7a>
 8018b5a:	45a4      	cmp	ip, r4
 8018b5c:	db19      	blt.n	8018b92 <_strtoul_l.isra.0+0xae>
 8018b5e:	fb00 4006 	mla	r0, r0, r6, r4
 8018b62:	2301      	movs	r3, #1
 8018b64:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018b68:	e7eb      	b.n	8018b42 <_strtoul_l.isra.0+0x5e>
 8018b6a:	462f      	mov	r7, r5
 8018b6c:	e7c1      	b.n	8018af2 <_strtoul_l.isra.0+0xe>
 8018b6e:	2c2b      	cmp	r4, #43	; 0x2b
 8018b70:	bf04      	itt	eq
 8018b72:	1cbd      	addeq	r5, r7, #2
 8018b74:	787c      	ldrbeq	r4, [r7, #1]
 8018b76:	4619      	mov	r1, r3
 8018b78:	e7cb      	b.n	8018b12 <_strtoul_l.isra.0+0x2e>
 8018b7a:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8018b7e:	2f19      	cmp	r7, #25
 8018b80:	d801      	bhi.n	8018b86 <_strtoul_l.isra.0+0xa2>
 8018b82:	3c37      	subs	r4, #55	; 0x37
 8018b84:	e7e2      	b.n	8018b4c <_strtoul_l.isra.0+0x68>
 8018b86:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8018b8a:	2f19      	cmp	r7, #25
 8018b8c:	d804      	bhi.n	8018b98 <_strtoul_l.isra.0+0xb4>
 8018b8e:	3c57      	subs	r4, #87	; 0x57
 8018b90:	e7dc      	b.n	8018b4c <_strtoul_l.isra.0+0x68>
 8018b92:	f04f 33ff 	mov.w	r3, #4294967295
 8018b96:	e7e5      	b.n	8018b64 <_strtoul_l.isra.0+0x80>
 8018b98:	2b00      	cmp	r3, #0
 8018b9a:	da09      	bge.n	8018bb0 <_strtoul_l.isra.0+0xcc>
 8018b9c:	2322      	movs	r3, #34	; 0x22
 8018b9e:	f8c8 3000 	str.w	r3, [r8]
 8018ba2:	f04f 30ff 	mov.w	r0, #4294967295
 8018ba6:	f1ba 0f00 	cmp.w	sl, #0
 8018baa:	d107      	bne.n	8018bbc <_strtoul_l.isra.0+0xd8>
 8018bac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018bb0:	b101      	cbz	r1, 8018bb4 <_strtoul_l.isra.0+0xd0>
 8018bb2:	4240      	negs	r0, r0
 8018bb4:	f1ba 0f00 	cmp.w	sl, #0
 8018bb8:	d0f8      	beq.n	8018bac <_strtoul_l.isra.0+0xc8>
 8018bba:	b10b      	cbz	r3, 8018bc0 <_strtoul_l.isra.0+0xdc>
 8018bbc:	f105 39ff 	add.w	r9, r5, #4294967295
 8018bc0:	f8ca 9000 	str.w	r9, [sl]
 8018bc4:	e7f2      	b.n	8018bac <_strtoul_l.isra.0+0xc8>
 8018bc6:	2430      	movs	r4, #48	; 0x30
 8018bc8:	2e00      	cmp	r6, #0
 8018bca:	d1b0      	bne.n	8018b2e <_strtoul_l.isra.0+0x4a>
 8018bcc:	2608      	movs	r6, #8
 8018bce:	e7ae      	b.n	8018b2e <_strtoul_l.isra.0+0x4a>
 8018bd0:	2c30      	cmp	r4, #48	; 0x30
 8018bd2:	d0a4      	beq.n	8018b1e <_strtoul_l.isra.0+0x3a>
 8018bd4:	260a      	movs	r6, #10
 8018bd6:	e7aa      	b.n	8018b2e <_strtoul_l.isra.0+0x4a>

08018bd8 <_strtoul_r>:
 8018bd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018bda:	4c06      	ldr	r4, [pc, #24]	; (8018bf4 <_strtoul_r+0x1c>)
 8018bdc:	4d06      	ldr	r5, [pc, #24]	; (8018bf8 <_strtoul_r+0x20>)
 8018bde:	6824      	ldr	r4, [r4, #0]
 8018be0:	6a24      	ldr	r4, [r4, #32]
 8018be2:	2c00      	cmp	r4, #0
 8018be4:	bf08      	it	eq
 8018be6:	462c      	moveq	r4, r5
 8018be8:	9400      	str	r4, [sp, #0]
 8018bea:	f7ff ff7b 	bl	8018ae4 <_strtoul_l.isra.0>
 8018bee:	b003      	add	sp, #12
 8018bf0:	bd30      	pop	{r4, r5, pc}
 8018bf2:	bf00      	nop
 8018bf4:	2000000c 	.word	0x2000000c
 8018bf8:	20000070 	.word	0x20000070

08018bfc <__submore>:
 8018bfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018c00:	460c      	mov	r4, r1
 8018c02:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8018c04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018c08:	4299      	cmp	r1, r3
 8018c0a:	d11d      	bne.n	8018c48 <__submore+0x4c>
 8018c0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8018c10:	f7ff fa66 	bl	80180e0 <_malloc_r>
 8018c14:	b918      	cbnz	r0, 8018c1e <__submore+0x22>
 8018c16:	f04f 30ff 	mov.w	r0, #4294967295
 8018c1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018c1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018c22:	63a3      	str	r3, [r4, #56]	; 0x38
 8018c24:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8018c28:	6360      	str	r0, [r4, #52]	; 0x34
 8018c2a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8018c2e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8018c32:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8018c36:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8018c3a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8018c3e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8018c42:	6020      	str	r0, [r4, #0]
 8018c44:	2000      	movs	r0, #0
 8018c46:	e7e8      	b.n	8018c1a <__submore+0x1e>
 8018c48:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8018c4a:	0077      	lsls	r7, r6, #1
 8018c4c:	463a      	mov	r2, r7
 8018c4e:	f000 f837 	bl	8018cc0 <_realloc_r>
 8018c52:	4605      	mov	r5, r0
 8018c54:	2800      	cmp	r0, #0
 8018c56:	d0de      	beq.n	8018c16 <__submore+0x1a>
 8018c58:	eb00 0806 	add.w	r8, r0, r6
 8018c5c:	4601      	mov	r1, r0
 8018c5e:	4632      	mov	r2, r6
 8018c60:	4640      	mov	r0, r8
 8018c62:	f7fe fdd7 	bl	8017814 <memcpy>
 8018c66:	f8c4 8000 	str.w	r8, [r4]
 8018c6a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8018c6e:	e7e9      	b.n	8018c44 <__submore+0x48>

08018c70 <__ascii_wctomb>:
 8018c70:	b149      	cbz	r1, 8018c86 <__ascii_wctomb+0x16>
 8018c72:	2aff      	cmp	r2, #255	; 0xff
 8018c74:	bf85      	ittet	hi
 8018c76:	238a      	movhi	r3, #138	; 0x8a
 8018c78:	6003      	strhi	r3, [r0, #0]
 8018c7a:	700a      	strbls	r2, [r1, #0]
 8018c7c:	f04f 30ff 	movhi.w	r0, #4294967295
 8018c80:	bf98      	it	ls
 8018c82:	2001      	movls	r0, #1
 8018c84:	4770      	bx	lr
 8018c86:	4608      	mov	r0, r1
 8018c88:	4770      	bx	lr

08018c8a <memmove>:
 8018c8a:	4288      	cmp	r0, r1
 8018c8c:	b510      	push	{r4, lr}
 8018c8e:	eb01 0302 	add.w	r3, r1, r2
 8018c92:	d807      	bhi.n	8018ca4 <memmove+0x1a>
 8018c94:	1e42      	subs	r2, r0, #1
 8018c96:	4299      	cmp	r1, r3
 8018c98:	d00a      	beq.n	8018cb0 <memmove+0x26>
 8018c9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018c9e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8018ca2:	e7f8      	b.n	8018c96 <memmove+0xc>
 8018ca4:	4283      	cmp	r3, r0
 8018ca6:	d9f5      	bls.n	8018c94 <memmove+0xa>
 8018ca8:	1881      	adds	r1, r0, r2
 8018caa:	1ad2      	subs	r2, r2, r3
 8018cac:	42d3      	cmn	r3, r2
 8018cae:	d100      	bne.n	8018cb2 <memmove+0x28>
 8018cb0:	bd10      	pop	{r4, pc}
 8018cb2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018cb6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8018cba:	e7f7      	b.n	8018cac <memmove+0x22>

08018cbc <__malloc_lock>:
 8018cbc:	4770      	bx	lr

08018cbe <__malloc_unlock>:
 8018cbe:	4770      	bx	lr

08018cc0 <_realloc_r>:
 8018cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018cc2:	4607      	mov	r7, r0
 8018cc4:	4614      	mov	r4, r2
 8018cc6:	460e      	mov	r6, r1
 8018cc8:	b921      	cbnz	r1, 8018cd4 <_realloc_r+0x14>
 8018cca:	4611      	mov	r1, r2
 8018ccc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8018cd0:	f7ff ba06 	b.w	80180e0 <_malloc_r>
 8018cd4:	b922      	cbnz	r2, 8018ce0 <_realloc_r+0x20>
 8018cd6:	f7ff f9b5 	bl	8018044 <_free_r>
 8018cda:	4625      	mov	r5, r4
 8018cdc:	4628      	mov	r0, r5
 8018cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018ce0:	f000 f814 	bl	8018d0c <_malloc_usable_size_r>
 8018ce4:	42a0      	cmp	r0, r4
 8018ce6:	d20f      	bcs.n	8018d08 <_realloc_r+0x48>
 8018ce8:	4621      	mov	r1, r4
 8018cea:	4638      	mov	r0, r7
 8018cec:	f7ff f9f8 	bl	80180e0 <_malloc_r>
 8018cf0:	4605      	mov	r5, r0
 8018cf2:	2800      	cmp	r0, #0
 8018cf4:	d0f2      	beq.n	8018cdc <_realloc_r+0x1c>
 8018cf6:	4631      	mov	r1, r6
 8018cf8:	4622      	mov	r2, r4
 8018cfa:	f7fe fd8b 	bl	8017814 <memcpy>
 8018cfe:	4631      	mov	r1, r6
 8018d00:	4638      	mov	r0, r7
 8018d02:	f7ff f99f 	bl	8018044 <_free_r>
 8018d06:	e7e9      	b.n	8018cdc <_realloc_r+0x1c>
 8018d08:	4635      	mov	r5, r6
 8018d0a:	e7e7      	b.n	8018cdc <_realloc_r+0x1c>

08018d0c <_malloc_usable_size_r>:
 8018d0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018d10:	1f18      	subs	r0, r3, #4
 8018d12:	2b00      	cmp	r3, #0
 8018d14:	bfbc      	itt	lt
 8018d16:	580b      	ldrlt	r3, [r1, r0]
 8018d18:	18c0      	addlt	r0, r0, r3
 8018d1a:	4770      	bx	lr

08018d1c <_init>:
 8018d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018d1e:	bf00      	nop
 8018d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018d22:	bc08      	pop	{r3}
 8018d24:	469e      	mov	lr, r3
 8018d26:	4770      	bx	lr

08018d28 <_fini>:
 8018d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018d2a:	bf00      	nop
 8018d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018d2e:	bc08      	pop	{r3}
 8018d30:	469e      	mov	lr, r3
 8018d32:	4770      	bx	lr
