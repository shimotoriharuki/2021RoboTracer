
2021RoboTrace_1.5.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000173f4  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000aac  080175b8  080175b8  000275b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018064  08018064  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  08018064  08018064  00028064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801806c  0801806c  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801806c  0801806c  0002806c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018074  08018074  00028074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08018078  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0003bbe0  200001e0  08018254  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  2003bdc0  08018254  0003bdc0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003739c  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007a32  00000000  00000000  000675a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000021b0  00000000  00000000  0006efe0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001ee0  00000000  00000000  00071190  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000376fc  00000000  00000000  00073070  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00025b1d  00000000  00000000  000aa76c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001106f4  00000000  00000000  000d0289  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e097d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a35c  00000000  00000000  001e09f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0801759c 	.word	0x0801759c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	0801759c 	.word	0x0801759c

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <lcd_cmd>:

extern I2C_HandleTypeDef hi2c1;

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	733b      	strb	r3, [r7, #12]
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txcmd,2,100);
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	217c      	movs	r1, #124	; 0x7c
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <lcd_cmd+0x2c>)
 8000fd8:	f007 fa7e 	bl	80084d8 <HAL_I2C_Master_Transmit>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	200398b8 	.word	0x200398b8

08000fe8 <lcd_data>:

void lcd_data(uint8_t data) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 8000ff2:	2340      	movs	r3, #64	; 0x40
 8000ff4:	733b      	strb	r3, [r7, #12]
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txdata,2,100);
 8000ffa:	f107 020c 	add.w	r2, r7, #12
 8000ffe:	2364      	movs	r3, #100	; 0x64
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2302      	movs	r3, #2
 8001004:	217c      	movs	r1, #124	; 0x7c
 8001006:	4803      	ldr	r0, [pc, #12]	; (8001014 <lcd_data+0x2c>)
 8001008:	f007 fa66 	bl	80084d8 <HAL_I2C_Master_Transmit>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	200398b8 	.word	0x200398b8

08001018 <lcd_init>:

void lcd_init(){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
 800101c:	2201      	movs	r2, #1
 800101e:	2110      	movs	r1, #16
 8001020:	481e      	ldr	r0, [pc, #120]	; (800109c <lcd_init+0x84>)
 8001022:	f007 f8ef 	bl	8008204 <HAL_GPIO_WritePin>
	HAL_Delay(40);
 8001026:	2028      	movs	r0, #40	; 0x28
 8001028:	f005 fe56 	bl	8006cd8 <HAL_Delay>
	lcd_cmd(0x38);
 800102c:	2038      	movs	r0, #56	; 0x38
 800102e:	f7ff ffc3 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f005 fe50 	bl	8006cd8 <HAL_Delay>
	lcd_cmd(0x39);
 8001038:	2039      	movs	r0, #57	; 0x39
 800103a:	f7ff ffbd 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800103e:	2001      	movs	r0, #1
 8001040:	f005 fe4a 	bl	8006cd8 <HAL_Delay>
	lcd_cmd(0x14);
 8001044:	2014      	movs	r0, #20
 8001046:	f7ff ffb7 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f005 fe44 	bl	8006cd8 <HAL_Delay>
	lcd_cmd(0x70);
 8001050:	2070      	movs	r0, #112	; 0x70
 8001052:	f7ff ffb1 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f005 fe3e 	bl	8006cd8 <HAL_Delay>
	lcd_cmd(0x56);
 800105c:	2056      	movs	r0, #86	; 0x56
 800105e:	f7ff ffab 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f005 fe38 	bl	8006cd8 <HAL_Delay>
	lcd_cmd(0x6C);
 8001068:	206c      	movs	r0, #108	; 0x6c
 800106a:	f7ff ffa5 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(200);
 800106e:	20c8      	movs	r0, #200	; 0xc8
 8001070:	f005 fe32 	bl	8006cd8 <HAL_Delay>
	lcd_cmd(0x38);
 8001074:	2038      	movs	r0, #56	; 0x38
 8001076:	f7ff ff9f 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800107a:	2001      	movs	r0, #1
 800107c:	f005 fe2c 	bl	8006cd8 <HAL_Delay>
	lcd_cmd(0x0C);
 8001080:	200c      	movs	r0, #12
 8001082:	f7ff ff99 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001086:	2001      	movs	r0, #1
 8001088:	f005 fe26 	bl	8006cd8 <HAL_Delay>
	lcd_cmd(0x01);
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff ff93 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001092:	2001      	movs	r0, #1
 8001094:	f005 fe20 	bl	8006cd8 <HAL_Delay>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020000 	.word	0x40020000

080010a0 <lcd_clear>:

void lcd_clear(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff87 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f005 fe14 	bl	8006cd8 <HAL_Delay>
	lcd_cmd(0x02);
 80010b0:	2002      	movs	r0, #2
 80010b2:	f7ff ff81 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f005 fe0e 	bl	8006cd8 <HAL_Delay>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <lcd_locate>:

void lcd_locate(int x, int y) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3302      	adds	r3, #2
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	019b      	lsls	r3, r3, #6
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4413      	add	r3, r2
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff6b 	bl	8000fb8 <lcd_cmd>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <lcd_print>:

void lcd_print(const char *str) {
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 80010f2:	e007      	b.n	8001104 <lcd_print+0x1a>
	{
			lcd_data(*str);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff75 	bl	8000fe8 <lcd_data>
			str++;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3301      	adds	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f3      	bne.n	80010f4 <lcd_print+0xa>
	}
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <lcd_printf>:

short lcd_printf(const char *format, ...) {
 8001114:	b40f      	push	{r0, r1, r2, r3}
 8001116:	b580      	push	{r7, lr}
 8001118:	b088      	sub	sp, #32
 800111a:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

  va_start(argptr, format);
 800111c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001120:	61bb      	str	r3, [r7, #24]
  ret = vsprintf(lcd_bff, format, argptr);
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001128:	4618      	mov	r0, r3
 800112a:	f013 f9c5 	bl	80144b8 <vsiprintf>
 800112e:	4603      	mov	r3, r0
 8001130:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 8001132:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001136:	2b00      	cmp	r3, #0
 8001138:	dd03      	ble.n	8001142 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ffd4 	bl	80010ea <lcd_print>
	}

	return ret;
 8001142:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001150:	b004      	add	sp, #16
 8001152:	4770      	bx	lr

08001154 <_ZN7EncoderC1Ev>:

float monitor_distance;
float monitor_cnt_l;
float monitor_cnt_l_lpf;

Encoder::Encoder() : cnt_l_(0), cnt_r_(0), distance_(0), total_cnt_l_(0), total_cnt_r_(0), total_distance_(0){}
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f04f 0200 	mov.w	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f04f 0200 	mov.w	r2, #0
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f04f 0200 	mov.w	r2, #0
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f04f 0200 	mov.w	r2, #0
 800117a:	60da      	str	r2, [r3, #12]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f04f 0200 	mov.w	r2, #0
 8001182:	611a      	str	r2, [r3, #16]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f04f 0200 	mov.w	r2, #0
 800118a:	615a      	str	r2, [r3, #20]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	4618      	mov	r0, r3
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
	...

0800119c <_ZN7Encoder4initEv>:

void Encoder::init()
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 80011a4:	213c      	movs	r1, #60	; 0x3c
 80011a6:	4809      	ldr	r0, [pc, #36]	; (80011cc <_ZN7Encoder4initEv+0x30>)
 80011a8:	f00b f82e 	bl	800c208 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 80011ac:	213c      	movs	r1, #60	; 0x3c
 80011ae:	4808      	ldr	r0, [pc, #32]	; (80011d0 <_ZN7Encoder4initEv+0x34>)
 80011b0:	f00b f82a 	bl	800c208 <HAL_TIM_Encoder_Start>
	TIM1 -> CNT = CNT_OFFSET;
 80011b4:	4b07      	ldr	r3, [pc, #28]	; (80011d4 <_ZN7Encoder4initEv+0x38>)
 80011b6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011ba:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 80011bc:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <_ZN7Encoder4initEv+0x3c>)
 80011be:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011c2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80011c4:	bf00      	nop
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20039b0c 	.word	0x20039b0c
 80011d0:	200397f0 	.word	0x200397f0
 80011d4:	40010000 	.word	0x40010000
 80011d8:	40010400 	.word	0x40010400
 80011dc:	00000000 	.word	0x00000000

080011e0 <_ZN7Encoder9updateCntEv>:

void Encoder::updateCnt()
{
 80011e0:	b5b0      	push	{r4, r5, r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
	static float pre_cnt_l, pre_cnt_r;
	float cnt_l = (float(CNT_OFFSET) - float(TIM1 -> CNT)) * CORRECTION_COEFFICIENT;
 80011e8:	4b69      	ldr	r3, [pc, #420]	; (8001390 <_ZN7Encoder9updateCntEv+0x1b0>)
 80011ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ec:	ee07 3a90 	vmov	s15, r3
 80011f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011f4:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8001394 <_ZN7Encoder9updateCntEv+0x1b4>
 80011f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011fc:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8001398 <_ZN7Encoder9updateCntEv+0x1b8>
 8001200:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001204:	edc7 7a03 	vstr	s15, [r7, #12]
	float cnt_r = (float(TIM8 -> CNT) - float(CNT_OFFSET)) * CORRECTION_COEFFICIENT;
 8001208:	4b64      	ldr	r3, [pc, #400]	; (800139c <_ZN7Encoder9updateCntEv+0x1bc>)
 800120a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800120c:	ee07 3a90 	vmov	s15, r3
 8001210:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001214:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8001394 <_ZN7Encoder9updateCntEv+0x1b4>
 8001218:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800121c:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8001398 <_ZN7Encoder9updateCntEv+0x1b8>
 8001220:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001224:	edc7 7a02 	vstr	s15, [r7, #8]
	monitor_cnt_l = cnt_l;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	4a5d      	ldr	r2, [pc, #372]	; (80013a0 <_ZN7Encoder9updateCntEv+0x1c0>)
 800122c:	6013      	str	r3, [r2, #0]

	cnt_l_ = ((R_ENC)*(cnt_l) + (1.0 - (R_ENC))* (pre_cnt_l)); // lowpath filter
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff f9a1 	bl	8000578 <__aeabi_f2d>
 8001236:	a350      	add	r3, pc, #320	; (adr r3, 8001378 <_ZN7Encoder9updateCntEv+0x198>)
 8001238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800123c:	f7ff f9f4 	bl	8000628 <__aeabi_dmul>
 8001240:	4603      	mov	r3, r0
 8001242:	460c      	mov	r4, r1
 8001244:	4625      	mov	r5, r4
 8001246:	461c      	mov	r4, r3
 8001248:	4b56      	ldr	r3, [pc, #344]	; (80013a4 <_ZN7Encoder9updateCntEv+0x1c4>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff f993 	bl	8000578 <__aeabi_f2d>
 8001252:	a34b      	add	r3, pc, #300	; (adr r3, 8001380 <_ZN7Encoder9updateCntEv+0x1a0>)
 8001254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001258:	f7ff f9e6 	bl	8000628 <__aeabi_dmul>
 800125c:	4602      	mov	r2, r0
 800125e:	460b      	mov	r3, r1
 8001260:	4620      	mov	r0, r4
 8001262:	4629      	mov	r1, r5
 8001264:	f7ff f82a 	bl	80002bc <__adddf3>
 8001268:	4603      	mov	r3, r0
 800126a:	460c      	mov	r4, r1
 800126c:	4618      	mov	r0, r3
 800126e:	4621      	mov	r1, r4
 8001270:	f7ff fcd2 	bl	8000c18 <__aeabi_d2f>
 8001274:	4602      	mov	r2, r0
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	601a      	str	r2, [r3, #0]
	cnt_r_ = ((R_ENC)*(cnt_r) + (1.0 - (R_ENC))* (pre_cnt_r)); // lowpath filter
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff f97b 	bl	8000578 <__aeabi_f2d>
 8001282:	a33d      	add	r3, pc, #244	; (adr r3, 8001378 <_ZN7Encoder9updateCntEv+0x198>)
 8001284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001288:	f7ff f9ce 	bl	8000628 <__aeabi_dmul>
 800128c:	4603      	mov	r3, r0
 800128e:	460c      	mov	r4, r1
 8001290:	4625      	mov	r5, r4
 8001292:	461c      	mov	r4, r3
 8001294:	4b44      	ldr	r3, [pc, #272]	; (80013a8 <_ZN7Encoder9updateCntEv+0x1c8>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff f96d 	bl	8000578 <__aeabi_f2d>
 800129e:	a338      	add	r3, pc, #224	; (adr r3, 8001380 <_ZN7Encoder9updateCntEv+0x1a0>)
 80012a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a4:	f7ff f9c0 	bl	8000628 <__aeabi_dmul>
 80012a8:	4602      	mov	r2, r0
 80012aa:	460b      	mov	r3, r1
 80012ac:	4620      	mov	r0, r4
 80012ae:	4629      	mov	r1, r5
 80012b0:	f7ff f804 	bl	80002bc <__adddf3>
 80012b4:	4603      	mov	r3, r0
 80012b6:	460c      	mov	r4, r1
 80012b8:	4618      	mov	r0, r3
 80012ba:	4621      	mov	r1, r4
 80012bc:	f7ff fcac 	bl	8000c18 <__aeabi_d2f>
 80012c0:	4602      	mov	r2, r0
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	605a      	str	r2, [r3, #4]
	monitor_cnt_l_lpf = cnt_l_;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a38      	ldr	r2, [pc, #224]	; (80013ac <_ZN7Encoder9updateCntEv+0x1cc>)
 80012cc:	6013      	str	r3, [r2, #0]

	pre_cnt_l = cnt_l_;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a34      	ldr	r2, [pc, #208]	; (80013a4 <_ZN7Encoder9updateCntEv+0x1c4>)
 80012d4:	6013      	str	r3, [r2, #0]
	pre_cnt_r = cnt_r_;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	4a33      	ldr	r2, [pc, #204]	; (80013a8 <_ZN7Encoder9updateCntEv+0x1c8>)
 80012dc:	6013      	str	r3, [r2, #0]


	total_cnt_l_ += cnt_l_;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	ed93 7a03 	vldr	s14, [r3, #12]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	edd3 7a00 	vldr	s15, [r3]
 80012ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	edc3 7a03 	vstr	s15, [r3, #12]
	total_cnt_r_ += cnt_r_;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	ed93 7a04 	vldr	s14, [r3, #16]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	edd3 7a01 	vldr	s15, [r3, #4]
 8001300:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	edc3 7a04 	vstr	s15, [r3, #16]

	//distance_ = distance_ + DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
	distance_ = DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	ed93 7a00 	vldr	s14, [r3]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	edd3 7a01 	vldr	s15, [r3, #4]
 8001316:	ee77 7a27 	vadd.f32	s15, s14, s15
 800131a:	ee17 0a90 	vmov	r0, s15
 800131e:	f7ff f92b 	bl	8000578 <__aeabi_f2d>
 8001322:	a319      	add	r3, pc, #100	; (adr r3, 8001388 <_ZN7Encoder9updateCntEv+0x1a8>)
 8001324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001328:	f7ff f97e 	bl	8000628 <__aeabi_dmul>
 800132c:	4603      	mov	r3, r0
 800132e:	460c      	mov	r4, r1
 8001330:	4618      	mov	r0, r3
 8001332:	4621      	mov	r1, r4
 8001334:	f04f 0200 	mov.w	r2, #0
 8001338:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800133c:	f7ff fa9e 	bl	800087c <__aeabi_ddiv>
 8001340:	4603      	mov	r3, r0
 8001342:	460c      	mov	r4, r1
 8001344:	4618      	mov	r0, r3
 8001346:	4621      	mov	r1, r4
 8001348:	f7ff fc66 	bl	8000c18 <__aeabi_d2f>
 800134c:	4602      	mov	r2, r0
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	609a      	str	r2, [r3, #8]
	total_distance_ += distance_;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	ed93 7a05 	vldr	s14, [r3, #20]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	edd3 7a02 	vldr	s15, [r3, #8]
 800135e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	edc3 7a05 	vstr	s15, [r3, #20]
	monitor_distance = distance_;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	4a10      	ldr	r2, [pc, #64]	; (80013b0 <_ZN7Encoder9updateCntEv+0x1d0>)
 800136e:	6013      	str	r3, [r2, #0]
}
 8001370:	bf00      	nop
 8001372:	3710      	adds	r7, #16
 8001374:	46bd      	mov	sp, r7
 8001376:	bdb0      	pop	{r4, r5, r7, pc}
 8001378:	9999999a 	.word	0x9999999a
 800137c:	3fa99999 	.word	0x3fa99999
 8001380:	66666666 	.word	0x66666666
 8001384:	3fee6666 	.word	0x3fee6666
 8001388:	1ab1d998 	.word	0x1ab1d998
 800138c:	3f7830b5 	.word	0x3f7830b5
 8001390:	40010000 	.word	0x40010000
 8001394:	47000000 	.word	0x47000000
 8001398:	3f912547 	.word	0x3f912547
 800139c:	40010400 	.word	0x40010400
 80013a0:	20000200 	.word	0x20000200
 80013a4:	20000208 	.word	0x20000208
 80013a8:	2000020c 	.word	0x2000020c
 80013ac:	20000204 	.word	0x20000204
 80013b0:	200001fc 	.word	0x200001fc

080013b4 <_ZN7Encoder6getCntERfS0_>:

void Encoder::getCnt(float &cnt_l, float &cnt_r)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]
	cnt_l = cnt_l_;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	601a      	str	r2, [r3, #0]
	cnt_r = cnt_r_;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	685a      	ldr	r2, [r3, #4]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	601a      	str	r2, [r3, #0]
}
 80013d0:	bf00      	nop
 80013d2:	3714      	adds	r7, #20
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <_ZN7Encoder11getDistanceEv>:

float Encoder::getDistance()
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
	return distance_;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	ee07 3a90 	vmov	s15, r3
}
 80013ec:	eeb0 0a67 	vmov.f32	s0, s15
 80013f0:	370c      	adds	r7, #12
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr

080013fa <_ZN7Encoder13clearDistanceEv>:
{
	return total_distance_;
}

void Encoder::clearDistance()
{
 80013fa:	b480      	push	{r7}
 80013fc:	b083      	sub	sp, #12
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
	distance_ = 0;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f04f 0200 	mov.w	r2, #0
 8001408:	609a      	str	r2, [r3, #8]
}
 800140a:	bf00      	nop
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
	...

08001418 <_ZN7Encoder8clearCntEv>:

void Encoder::clearCnt()
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
	cnt_l_ = 0;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f04f 0200 	mov.w	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
	cnt_r_ = 0;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f04f 0200 	mov.w	r2, #0
 800142e:	605a      	str	r2, [r3, #4]
	TIM1 -> CNT = CNT_OFFSET;
 8001430:	4b08      	ldr	r3, [pc, #32]	; (8001454 <_ZN7Encoder8clearCntEv+0x3c>)
 8001432:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001436:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 8001438:	4b07      	ldr	r3, [pc, #28]	; (8001458 <_ZN7Encoder8clearCntEv+0x40>)
 800143a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800143e:	625a      	str	r2, [r3, #36]	; 0x24
	distance_ = 0;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f04f 0200 	mov.w	r2, #0
 8001446:	609a      	str	r2, [r3, #8]
}
 8001448:	bf00      	nop
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr
 8001454:	40010000 	.word	0x40010000
 8001458:	40010400 	.word	0x40010400

0800145c <_ZN7Encoder13clearTotalCntEv>:
{
	return (total_cnt_l_ + total_cnt_r_) / 2;
}

void Encoder::clearTotalCnt()
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
	total_cnt_l_ = 0;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f04f 0200 	mov.w	r2, #0
 800146a:	60da      	str	r2, [r3, #12]
	total_cnt_r_ = 0;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	f04f 0200 	mov.w	r2, #0
 8001472:	611a      	str	r2, [r3, #16]
	total_distance_ = 0;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f04f 0200 	mov.w	r2, #0
 800147a:	615a      	str	r2, [r3, #20]
}
 800147c:	bf00      	nop
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <user_fopen>:
//* 役割　：　fopenする
//* 引数　：　char, float *: short　: フォルダ名、ファイル名
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fopen(const char *p_folder_name, const char *p_file_name){
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	6039      	str	r1, [r7, #0]

	FRESULT ret = 0;
 8001492:	2300      	movs	r3, #0
 8001494:	73fb      	strb	r3, [r7, #15]

	create_path(p_folder_name, p_file_name);
 8001496:	6839      	ldr	r1, [r7, #0]
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f000 f977 	bl	800178c <create_path>

	fopen_folder_and_file();	//書き込むファイルを選択
 800149e:	f000 f98b 	bl	80017b8 <fopen_folder_and_file>

	return ret;
 80014a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3710      	adds	r7, #16
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <user_fclose>:
//* 役割　：　fcloseする
//* 引数　：　void
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fclose(){
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 80014b2:	2300      	movs	r3, #0
 80014b4:	71fb      	strb	r3, [r7, #7]

	f_close(&fil);	//ファイル閉じる
 80014b6:	4804      	ldr	r0, [pc, #16]	; (80014c8 <user_fclose+0x1c>)
 80014b8:	f00f fc00 	bl	8010cbc <f_close>

	return ret;
 80014bc:	79fb      	ldrb	r3, [r7, #7]
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	200386fc 	.word	0x200386fc

080014cc <sd_write_float>:
//* 役割　：　SDに書き込む
//* 引数　：　short, float *, char : 変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_float(short size, float *data, char state){
 80014cc:	b590      	push	{r4, r7, lr}
 80014ce:	b087      	sub	sp, #28
 80014d0:	af02      	add	r7, sp, #8
 80014d2:	4603      	mov	r3, r0
 80014d4:	6039      	str	r1, [r7, #0]
 80014d6:	80fb      	strh	r3, [r7, #6]
 80014d8:	4613      	mov	r3, r2
 80014da:	717b      	strb	r3, [r7, #5]
	FRESULT ret = 0;
 80014dc:	2300      	movs	r3, #0
 80014de:	737b      	strb	r3, [r7, #13]

	for(short i = 0 ; i < size; i++){
 80014e0:	2300      	movs	r3, #0
 80014e2:	81fb      	strh	r3, [r7, #14]
 80014e4:	e030      	b.n	8001548 <sd_write_float+0x7c>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 80014e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	683a      	ldr	r2, [r7, #0]
 80014ee:	4413      	add	r3, r2
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff f840 	bl	8000578 <__aeabi_f2d>
 80014f8:	4603      	mov	r3, r0
 80014fa:	460c      	mov	r4, r1
 80014fc:	e9cd 3400 	strd	r3, r4, [sp]
 8001500:	4a17      	ldr	r2, [pc, #92]	; (8001560 <sd_write_float+0x94>)
 8001502:	2180      	movs	r1, #128	; 0x80
 8001504:	4817      	ldr	r0, [pc, #92]	; (8001564 <sd_write_float+0x98>)
 8001506:	f012 f847 	bl	8013598 <sniprintf>

		if(state == ADD_WRITE){
 800150a:	797b      	ldrb	r3, [r7, #5]
 800150c:	2b01      	cmp	r3, #1
 800150e:	d106      	bne.n	800151e <sd_write_float+0x52>
			f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 8001510:	4b15      	ldr	r3, [pc, #84]	; (8001568 <sd_write_float+0x9c>)
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	4619      	mov	r1, r3
 8001516:	4814      	ldr	r0, [pc, #80]	; (8001568 <sd_write_float+0x9c>)
 8001518:	f00f fc44 	bl	8010da4 <f_lseek>
 800151c:	e003      	b.n	8001526 <sd_write_float+0x5a>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
 800151e:	2100      	movs	r1, #0
 8001520:	4811      	ldr	r0, [pc, #68]	; (8001568 <sd_write_float+0x9c>)
 8001522:	f00f fc3f 	bl	8010da4 <f_lseek>
		}

		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 8001526:	480f      	ldr	r0, [pc, #60]	; (8001564 <sd_write_float+0x98>)
 8001528:	f7fe fe6a 	bl	8000200 <strlen>
 800152c:	4602      	mov	r2, r0
 800152e:	4b0f      	ldr	r3, [pc, #60]	; (800156c <sd_write_float+0xa0>)
 8001530:	490c      	ldr	r1, [pc, #48]	; (8001564 <sd_write_float+0x98>)
 8001532:	480d      	ldr	r0, [pc, #52]	; (8001568 <sd_write_float+0x9c>)
 8001534:	f00f f9ad 	bl	8010892 <f_write>

		bufclear();	//書き込み用のバッファをクリア
 8001538:	f000 f958 	bl	80017ec <bufclear>
	for(short i = 0 ; i < size; i++){
 800153c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001540:	b29b      	uxth	r3, r3
 8001542:	3301      	adds	r3, #1
 8001544:	b29b      	uxth	r3, r3
 8001546:	81fb      	strh	r3, [r7, #14]
 8001548:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800154c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001550:	429a      	cmp	r2, r3
 8001552:	dbc8      	blt.n	80014e6 <sd_write_float+0x1a>
	}
	return ret;
 8001554:	7b7b      	ldrb	r3, [r7, #13]
}
 8001556:	4618      	mov	r0, r3
 8001558:	3714      	adds	r7, #20
 800155a:	46bd      	mov	sp, r7
 800155c:	bd90      	pop	{r4, r7, pc}
 800155e:	bf00      	nop
 8001560:	080175b8 	.word	0x080175b8
 8001564:	2003866c 	.word	0x2003866c
 8001568:	200386fc 	.word	0x200386fc
 800156c:	200386ec 	.word	0x200386ec

08001570 <sd_write_array_float>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data, char state){
 8001570:	b590      	push	{r4, r7, lr}
 8001572:	b089      	sub	sp, #36	; 0x24
 8001574:	af02      	add	r7, sp, #8
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	603b      	str	r3, [r7, #0]
 800157c:	4613      	mov	r3, r2
 800157e:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001580:	2300      	movs	r3, #0
 8001582:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001584:	68b9      	ldr	r1, [r7, #8]
 8001586:	68f8      	ldr	r0, [r7, #12]
 8001588:	f000 f900 	bl	800178c <create_path>

	if(state == OVER_WRITE){
 800158c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001590:	2b00      	cmp	r3, #0
 8001592:	d108      	bne.n	80015a6 <sd_write_array_float+0x36>
		f_chdir(dirpath);
 8001594:	4822      	ldr	r0, [pc, #136]	; (8001620 <sd_write_array_float+0xb0>)
 8001596:	f00f fbbb 	bl	8010d10 <f_chdir>
		f_unlink(filepath);	//	一回消す
 800159a:	4822      	ldr	r0, [pc, #136]	; (8001624 <sd_write_array_float+0xb4>)
 800159c:	f00f fe26 	bl	80111ec <f_unlink>
		f_chdir("..");
 80015a0:	4821      	ldr	r0, [pc, #132]	; (8001628 <sd_write_array_float+0xb8>)
 80015a2:	f00f fbb5 	bl	8010d10 <f_chdir>
	}

	fopen_folder_and_file();	//	書き込むファイルを選択
 80015a6:	f000 f907 	bl	80017b8 <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 80015aa:	2300      	movs	r3, #0
 80015ac:	82fb      	strh	r3, [r7, #22]
 80015ae:	e028      	b.n	8001602 <sd_write_array_float+0x92>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 80015b0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	683a      	ldr	r2, [r7, #0]
 80015b8:	4413      	add	r3, r2
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4618      	mov	r0, r3
 80015be:	f7fe ffdb 	bl	8000578 <__aeabi_f2d>
 80015c2:	4603      	mov	r3, r0
 80015c4:	460c      	mov	r4, r1
 80015c6:	e9cd 3400 	strd	r3, r4, [sp]
 80015ca:	4a18      	ldr	r2, [pc, #96]	; (800162c <sd_write_array_float+0xbc>)
 80015cc:	2180      	movs	r1, #128	; 0x80
 80015ce:	4818      	ldr	r0, [pc, #96]	; (8001630 <sd_write_array_float+0xc0>)
 80015d0:	f011 ffe2 	bl	8013598 <sniprintf>

		f_lseek(&fil, f_size(&fil));	//	ファイルの最後に移動
 80015d4:	4b17      	ldr	r3, [pc, #92]	; (8001634 <sd_write_array_float+0xc4>)
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	4619      	mov	r1, r3
 80015da:	4816      	ldr	r0, [pc, #88]	; (8001634 <sd_write_array_float+0xc4>)
 80015dc:	f00f fbe2 	bl	8010da4 <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//	書き込む
 80015e0:	4813      	ldr	r0, [pc, #76]	; (8001630 <sd_write_array_float+0xc0>)
 80015e2:	f7fe fe0d 	bl	8000200 <strlen>
 80015e6:	4602      	mov	r2, r0
 80015e8:	4b13      	ldr	r3, [pc, #76]	; (8001638 <sd_write_array_float+0xc8>)
 80015ea:	4911      	ldr	r1, [pc, #68]	; (8001630 <sd_write_array_float+0xc0>)
 80015ec:	4811      	ldr	r0, [pc, #68]	; (8001634 <sd_write_array_float+0xc4>)
 80015ee:	f00f f950 	bl	8010892 <f_write>

		bufclear();	//	書き込み用のバッファをクリア
 80015f2:	f000 f8fb 	bl	80017ec <bufclear>
	for(short i = 0 ; i < size; i++){
 80015f6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	3301      	adds	r3, #1
 80015fe:	b29b      	uxth	r3, r3
 8001600:	82fb      	strh	r3, [r7, #22]
 8001602:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001606:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800160a:	429a      	cmp	r2, r3
 800160c:	dbd0      	blt.n	80015b0 <sd_write_array_float+0x40>
	}

	f_close(&fil);	//	ファイル閉じる
 800160e:	4809      	ldr	r0, [pc, #36]	; (8001634 <sd_write_array_float+0xc4>)
 8001610:	f00f fb54 	bl	8010cbc <f_close>

	return ret;
 8001614:	7d7b      	ldrb	r3, [r7, #21]
}
 8001616:	4618      	mov	r0, r3
 8001618:	371c      	adds	r7, #28
 800161a:	46bd      	mov	sp, r7
 800161c:	bd90      	pop	{r4, r7, pc}
 800161e:	bf00      	nop
 8001620:	2003856c 	.word	0x2003856c
 8001624:	2003742c 	.word	0x2003742c
 8001628:	080175d4 	.word	0x080175d4
 800162c:	080175b8 	.word	0x080175b8
 8001630:	2003866c 	.word	0x2003866c
 8001634:	200386fc 	.word	0x200386fc
 8001638:	200386ec 	.word	0x200386ec

0800163c <sd_read_array_float>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, float *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data){
 800163c:	b580      	push	{r7, lr}
 800163e:	b086      	sub	sp, #24
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	603b      	str	r3, [r7, #0]
 8001648:	4613      	mov	r3, r2
 800164a:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 800164c:	2300      	movs	r3, #0
 800164e:	757b      	strb	r3, [r7, #21]
	short i = 0;
 8001650:	2300      	movs	r3, #0
 8001652:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 8001654:	68b9      	ldr	r1, [r7, #8]
 8001656:	68f8      	ldr	r0, [r7, #12]
 8001658:	f000 f898 	bl	800178c <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 800165c:	f000 f8ac 	bl	80017b8 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001660:	e019      	b.n	8001696 <sd_read_array_float+0x5a>
		sscanf(buffer, "%f", data + i);
 8001662:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	683a      	ldr	r2, [r7, #0]
 800166a:	4413      	add	r3, r2
 800166c:	461a      	mov	r2, r3
 800166e:	4913      	ldr	r1, [pc, #76]	; (80016bc <sd_read_array_float+0x80>)
 8001670:	4813      	ldr	r0, [pc, #76]	; (80016c0 <sd_read_array_float+0x84>)
 8001672:	f011 ffe5 	bl	8013640 <siscanf>
		i++;
 8001676:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800167a:	b29b      	uxth	r3, r3
 800167c:	3301      	adds	r3, #1
 800167e:	b29b      	uxth	r3, r3
 8001680:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 8001682:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001686:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800168a:	429a      	cmp	r2, r3
 800168c:	db03      	blt.n	8001696 <sd_read_array_float+0x5a>
 800168e:	88fb      	ldrh	r3, [r7, #6]
 8001690:	3b01      	subs	r3, #1
 8001692:	b29b      	uxth	r3, r3
 8001694:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001696:	4a0b      	ldr	r2, [pc, #44]	; (80016c4 <sd_read_array_float+0x88>)
 8001698:	2180      	movs	r1, #128	; 0x80
 800169a:	4809      	ldr	r0, [pc, #36]	; (80016c0 <sd_read_array_float+0x84>)
 800169c:	f00f ff84 	bl	80115a8 <f_gets>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d1dd      	bne.n	8001662 <sd_read_array_float+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 80016a6:	f000 f8a1 	bl	80017ec <bufclear>

	f_close(&fil);	//ファイル閉じる
 80016aa:	4806      	ldr	r0, [pc, #24]	; (80016c4 <sd_read_array_float+0x88>)
 80016ac:	f00f fb06 	bl	8010cbc <f_close>

	return ret;
 80016b0:	7d7b      	ldrb	r3, [r7, #21]
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3718      	adds	r7, #24
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	080175c4 	.word	0x080175c4
 80016c0:	2003866c 	.word	0x2003866c
 80016c4:	200386fc 	.word	0x200386fc

080016c8 <sd_read_array_double>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, double *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_double(const char *p_folder_name, const char *p_file_name, short size, double *data){
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b086      	sub	sp, #24
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	60f8      	str	r0, [r7, #12]
 80016d0:	60b9      	str	r1, [r7, #8]
 80016d2:	603b      	str	r3, [r7, #0]
 80016d4:	4613      	mov	r3, r2
 80016d6:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 80016d8:	2300      	movs	r3, #0
 80016da:	757b      	strb	r3, [r7, #21]
	short i = 0;
 80016dc:	2300      	movs	r3, #0
 80016de:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 80016e0:	68b9      	ldr	r1, [r7, #8]
 80016e2:	68f8      	ldr	r0, [r7, #12]
 80016e4:	f000 f852 	bl	800178c <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 80016e8:	f000 f866 	bl	80017b8 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80016ec:	e019      	b.n	8001722 <sd_read_array_double+0x5a>
		sscanf(buffer, "%lf", data + i);
 80016ee:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80016f2:	00db      	lsls	r3, r3, #3
 80016f4:	683a      	ldr	r2, [r7, #0]
 80016f6:	4413      	add	r3, r2
 80016f8:	461a      	mov	r2, r3
 80016fa:	4913      	ldr	r1, [pc, #76]	; (8001748 <sd_read_array_double+0x80>)
 80016fc:	4813      	ldr	r0, [pc, #76]	; (800174c <sd_read_array_double+0x84>)
 80016fe:	f011 ff9f 	bl	8013640 <siscanf>
		i++;
 8001702:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001706:	b29b      	uxth	r3, r3
 8001708:	3301      	adds	r3, #1
 800170a:	b29b      	uxth	r3, r3
 800170c:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 800170e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001712:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001716:	429a      	cmp	r2, r3
 8001718:	db03      	blt.n	8001722 <sd_read_array_double+0x5a>
 800171a:	88fb      	ldrh	r3, [r7, #6]
 800171c:	3b01      	subs	r3, #1
 800171e:	b29b      	uxth	r3, r3
 8001720:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001722:	4a0b      	ldr	r2, [pc, #44]	; (8001750 <sd_read_array_double+0x88>)
 8001724:	2180      	movs	r1, #128	; 0x80
 8001726:	4809      	ldr	r0, [pc, #36]	; (800174c <sd_read_array_double+0x84>)
 8001728:	f00f ff3e 	bl	80115a8 <f_gets>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d1dd      	bne.n	80016ee <sd_read_array_double+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 8001732:	f000 f85b 	bl	80017ec <bufclear>

	f_close(&fil);	//ファイル閉じる
 8001736:	4806      	ldr	r0, [pc, #24]	; (8001750 <sd_read_array_double+0x88>)
 8001738:	f00f fac0 	bl	8010cbc <f_close>

	return ret;
 800173c:	7d7b      	ldrb	r3, [r7, #21]
}
 800173e:	4618      	mov	r0, r3
 8001740:	3718      	adds	r7, #24
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	080175d0 	.word	0x080175d0
 800174c:	2003866c 	.word	0x2003866c
 8001750:	200386fc 	.word	0x200386fc

08001754 <sd_mount>:
//* 役割　：　SDカードをマウント
//* 引数　：　void:
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_mount(){
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 800175a:	2300      	movs	r3, #0
 800175c:	71fb      	strb	r3, [r7, #7]

	if(f_mount(&fs, "", 1) == FR_OK) ret = 1;
 800175e:	2201      	movs	r2, #1
 8001760:	4908      	ldr	r1, [pc, #32]	; (8001784 <sd_mount+0x30>)
 8001762:	4809      	ldr	r0, [pc, #36]	; (8001788 <sd_mount+0x34>)
 8001764:	f00e fd22 	bl	80101ac <f_mount>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d102      	bne.n	8001774 <sd_mount+0x20>
 800176e:	2301      	movs	r3, #1
 8001770:	71fb      	strb	r3, [r7, #7]
 8001772:	e001      	b.n	8001778 <sd_mount+0x24>
	else ret = 0;
 8001774:	2300      	movs	r3, #0
 8001776:	71fb      	strb	r3, [r7, #7]

	return ret;
 8001778:	79fb      	ldrb	r3, [r7, #7]
}
 800177a:	4618      	mov	r0, r3
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	080175e0 	.word	0x080175e0
 8001788:	2003752c 	.word	0x2003752c

0800178c <create_path>:
//* 役割　：　操作するパスの文字列を作る
//* 引数　：　char, char: フォルダ名, ファイル名
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void create_path(char const *p_folder_name, char const *p_file_name){
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	6039      	str	r1, [r7, #0]

	sprintf(dirpath, "%s", p_folder_name);
 8001796:	6879      	ldr	r1, [r7, #4]
 8001798:	4805      	ldr	r0, [pc, #20]	; (80017b0 <create_path+0x24>)
 800179a:	f011 ffc0 	bl	801371e <strcpy>

	sprintf(filepath, "%s", p_file_name);
 800179e:	6839      	ldr	r1, [r7, #0]
 80017a0:	4804      	ldr	r0, [pc, #16]	; (80017b4 <create_path+0x28>)
 80017a2:	f011 ffbc 	bl	801371e <strcpy>

}
 80017a6:	bf00      	nop
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	2003856c 	.word	0x2003856c
 80017b4:	2003742c 	.word	0x2003742c

080017b8 <fopen_folder_and_file>:
//* 役割　：　操作するファイルを選択する_
//* 引数　：　char: ファイル選択
//* 戻り値：　char: 状態チェック	0(マウント失敗) or 1(成功)
//* 備考 : なし
//************************************************************************/
void fopen_folder_and_file(){	//mkdir
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0

	f_mkdir(dirpath);
 80017bc:	4807      	ldr	r0, [pc, #28]	; (80017dc <fopen_folder_and_file+0x24>)
 80017be:	f00f fdd7 	bl	8011370 <f_mkdir>

	f_chdir(dirpath);
 80017c2:	4806      	ldr	r0, [pc, #24]	; (80017dc <fopen_folder_and_file+0x24>)
 80017c4:	f00f faa4 	bl	8010d10 <f_chdir>

	f_open(&fil, filepath, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 80017c8:	2213      	movs	r2, #19
 80017ca:	4905      	ldr	r1, [pc, #20]	; (80017e0 <fopen_folder_and_file+0x28>)
 80017cc:	4805      	ldr	r0, [pc, #20]	; (80017e4 <fopen_folder_and_file+0x2c>)
 80017ce:	f00e fd33 	bl	8010238 <f_open>

	f_chdir("..");
 80017d2:	4805      	ldr	r0, [pc, #20]	; (80017e8 <fopen_folder_and_file+0x30>)
 80017d4:	f00f fa9c 	bl	8010d10 <f_chdir>


}
 80017d8:	bf00      	nop
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	2003856c 	.word	0x2003856c
 80017e0:	2003742c 	.word	0x2003742c
 80017e4:	200386fc 	.word	0x200386fc
 80017e8:	080175d4 	.word	0x080175d4

080017ec <bufclear>:
//* 役割　：　バッファをクリア
//* 引数　：　void:
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void bufclear(void){
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFF_SIZE; i++){
 80017f2:	2300      	movs	r3, #0
 80017f4:	607b      	str	r3, [r7, #4]
 80017f6:	e007      	b.n	8001808 <bufclear+0x1c>
		buffer[i] = '\0';
 80017f8:	4a08      	ldr	r2, [pc, #32]	; (800181c <bufclear+0x30>)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4413      	add	r3, r2
 80017fe:	2200      	movs	r2, #0
 8001800:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFF_SIZE; i++){
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	3301      	adds	r3, #1
 8001806:	607b      	str	r3, [r7, #4]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2b7f      	cmp	r3, #127	; 0x7f
 800180c:	ddf4      	ble.n	80017f8 <bufclear+0xc>
	}
}
 800180e:	bf00      	nop
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	2003866c 	.word	0x2003866c

08001820 <read_byte>:
#include "ICM_20648.h"

volatile int16_t xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	4603      	mov	r3, r0
 8001828:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 800182a:	79fb      	ldrb	r3, [r7, #7]
 800182c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001830:	b2db      	uxtb	r3, r3
 8001832:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8001834:	2200      	movs	r2, #0
 8001836:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800183a:	480e      	ldr	r0, [pc, #56]	; (8001874 <read_byte+0x54>)
 800183c:	f006 fce2 	bl	8008204 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001840:	f107 010f 	add.w	r1, r7, #15
 8001844:	2364      	movs	r3, #100	; 0x64
 8001846:	2201      	movs	r2, #1
 8001848:	480b      	ldr	r0, [pc, #44]	; (8001878 <read_byte+0x58>)
 800184a:	f009 fea3 	bl	800b594 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,&val,1,100);
 800184e:	f107 010e 	add.w	r1, r7, #14
 8001852:	2364      	movs	r3, #100	; 0x64
 8001854:	2201      	movs	r2, #1
 8001856:	4808      	ldr	r0, [pc, #32]	; (8001878 <read_byte+0x58>)
 8001858:	f009 ffd0 	bl	800b7fc <HAL_SPI_Receive>
	CS_SET;
 800185c:	2201      	movs	r2, #1
 800185e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001862:	4804      	ldr	r0, [pc, #16]	; (8001874 <read_byte+0x54>)
 8001864:	f006 fcce 	bl	8008204 <HAL_GPIO_WritePin>

	return val;
 8001868:	7bbb      	ldrb	r3, [r7, #14]
}
 800186a:	4618      	mov	r0, r3
 800186c:	3710      	adds	r7, #16
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	40020400 	.word	0x40020400
 8001878:	20039798 	.word	0x20039798

0800187c <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	460a      	mov	r2, r1
 8001886:	71fb      	strb	r3, [r7, #7]
 8001888:	4613      	mov	r3, r2
 800188a:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 800188c:	79fb      	ldrb	r3, [r7, #7]
 800188e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001892:	b2db      	uxtb	r3, r3
 8001894:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8001896:	2200      	movs	r2, #0
 8001898:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800189c:	480c      	ldr	r0, [pc, #48]	; (80018d0 <write_byte+0x54>)
 800189e:	f006 fcb1 	bl	8008204 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 80018a2:	f107 010f 	add.w	r1, r7, #15
 80018a6:	2364      	movs	r3, #100	; 0x64
 80018a8:	2201      	movs	r2, #1
 80018aa:	480a      	ldr	r0, [pc, #40]	; (80018d4 <write_byte+0x58>)
 80018ac:	f009 fe72 	bl	800b594 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&val,1,100);
 80018b0:	1db9      	adds	r1, r7, #6
 80018b2:	2364      	movs	r3, #100	; 0x64
 80018b4:	2201      	movs	r2, #1
 80018b6:	4807      	ldr	r0, [pc, #28]	; (80018d4 <write_byte+0x58>)
 80018b8:	f009 fe6c 	bl	800b594 <HAL_SPI_Transmit>
	CS_SET;
 80018bc:	2201      	movs	r2, #1
 80018be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018c2:	4803      	ldr	r0, [pc, #12]	; (80018d0 <write_byte+0x54>)
 80018c4:	f006 fc9e 	bl	8008204 <HAL_GPIO_WritePin>
}
 80018c8:	bf00      	nop
 80018ca:	3710      	adds	r7, #16
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	40020400 	.word	0x40020400
 80018d4:	20039798 	.word	0x20039798

080018d8 <IMU_init>:

uint16_t IMU_init() {
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
	uint8_t who_am_i;
	uint16_t ret = 0;
 80018de:	2300      	movs	r3, #0
 80018e0:	80fb      	strh	r3, [r7, #6]

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 80018e2:	2000      	movs	r0, #0
 80018e4:	f7ff ff9c 	bl	8001820 <read_byte>
 80018e8:	4603      	mov	r3, r0
 80018ea:	717b      	strb	r3, [r7, #5]
	if ( who_am_i == 0xE0 ) {
 80018ec:	797b      	ldrb	r3, [r7, #5]
 80018ee:	2be0      	cmp	r3, #224	; 0xe0
 80018f0:	d119      	bne.n	8001926 <IMU_init+0x4e>
		ret = 1;
 80018f2:	2301      	movs	r3, #1
 80018f4:	80fb      	strh	r3, [r7, #6]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 80018f6:	2101      	movs	r1, #1
 80018f8:	2006      	movs	r0, #6
 80018fa:	f7ff ffbf 	bl	800187c <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 80018fe:	2110      	movs	r1, #16
 8001900:	2003      	movs	r0, #3
 8001902:	f7ff ffbb 	bl	800187c <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 8001906:	2120      	movs	r1, #32
 8001908:	207f      	movs	r0, #127	; 0x7f
 800190a:	f7ff ffb7 	bl	800187c <write_byte>
		write_byte(0x01,0x06);	//レンジ±2000dps
 800190e:	2106      	movs	r1, #6
 8001910:	2001      	movs	r0, #1
 8001912:	f7ff ffb3 	bl	800187c <write_byte>
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//レンジ±16g
 8001916:	2106      	movs	r1, #6
 8001918:	2014      	movs	r0, #20
 800191a:	f7ff ffaf 	bl	800187c <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 800191e:	2100      	movs	r1, #0
 8001920:	207f      	movs	r0, #127	; 0x7f
 8001922:	f7ff ffab 	bl	800187c <write_byte>
	}
	return ret;
 8001926:	88fb      	ldrh	r3, [r7, #6]
}
 8001928:	4618      	mov	r0, r3
 800192a:	3708      	adds	r7, #8
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <read_gyro_data>:

void read_gyro_data() {
 8001930:	b598      	push	{r3, r4, r7, lr}
 8001932:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 8001934:	2033      	movs	r0, #51	; 0x33
 8001936:	f7ff ff73 	bl	8001820 <read_byte>
 800193a:	4603      	mov	r3, r0
 800193c:	021b      	lsls	r3, r3, #8
 800193e:	b21c      	sxth	r4, r3
 8001940:	2034      	movs	r0, #52	; 0x34
 8001942:	f7ff ff6d 	bl	8001820 <read_byte>
 8001946:	4603      	mov	r3, r0
 8001948:	b21b      	sxth	r3, r3
 800194a:	4323      	orrs	r3, r4
 800194c:	b21a      	sxth	r2, r3
 800194e:	4b11      	ldr	r3, [pc, #68]	; (8001994 <read_gyro_data+0x64>)
 8001950:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 8001952:	2035      	movs	r0, #53	; 0x35
 8001954:	f7ff ff64 	bl	8001820 <read_byte>
 8001958:	4603      	mov	r3, r0
 800195a:	021b      	lsls	r3, r3, #8
 800195c:	b21c      	sxth	r4, r3
 800195e:	2036      	movs	r0, #54	; 0x36
 8001960:	f7ff ff5e 	bl	8001820 <read_byte>
 8001964:	4603      	mov	r3, r0
 8001966:	b21b      	sxth	r3, r3
 8001968:	4323      	orrs	r3, r4
 800196a:	b21a      	sxth	r2, r3
 800196c:	4b0a      	ldr	r3, [pc, #40]	; (8001998 <read_gyro_data+0x68>)
 800196e:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 8001970:	2037      	movs	r0, #55	; 0x37
 8001972:	f7ff ff55 	bl	8001820 <read_byte>
 8001976:	4603      	mov	r3, r0
 8001978:	021b      	lsls	r3, r3, #8
 800197a:	b21c      	sxth	r4, r3
 800197c:	2038      	movs	r0, #56	; 0x38
 800197e:	f7ff ff4f 	bl	8001820 <read_byte>
 8001982:	4603      	mov	r3, r0
 8001984:	b21b      	sxth	r3, r3
 8001986:	4323      	orrs	r3, r4
 8001988:	b21a      	sxth	r2, r3
 800198a:	4b04      	ldr	r3, [pc, #16]	; (800199c <read_gyro_data+0x6c>)
 800198c:	801a      	strh	r2, [r3, #0]
}
 800198e:	bf00      	nop
 8001990:	bd98      	pop	{r3, r4, r7, pc}
 8001992:	bf00      	nop
 8001994:	20039734 	.word	0x20039734
 8001998:	20039732 	.word	0x20039732
 800199c:	2003972c 	.word	0x2003972c

080019a0 <_ZN3IMUC1Ev>:

#define PI 3.1415926535

//int16_t mon_zg_;

IMU::IMU() : xa_(0), ya_(0), za_(0), xg_(0), yg_(0), zg_(0), offset_(0)
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2200      	movs	r2, #0
 80019ac:	801a      	strh	r2, [r3, #0]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2200      	movs	r2, #0
 80019b2:	805a      	strh	r2, [r3, #2]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2200      	movs	r2, #0
 80019b8:	809a      	strh	r2, [r3, #4]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2200      	movs	r2, #0
 80019be:	80da      	strh	r2, [r3, #6]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2200      	movs	r2, #0
 80019c4:	811a      	strh	r2, [r3, #8]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	815a      	strh	r2, [r3, #10]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f04f 0200 	mov.w	r2, #0
 80019d2:	60da      	str	r2, [r3, #12]
{

}
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	4618      	mov	r0, r3
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
	...

080019e4 <_ZN3IMU4initEv>:

void IMU::init()
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
	uint16_t who_i_am;
	who_i_am = IMU_init();
 80019ec:	f7ff ff74 	bl	80018d8 <IMU_init>
 80019f0:	4603      	mov	r3, r0
 80019f2:	81fb      	strh	r3, [r7, #14]
	printf("who i am: %d\n", who_i_am);
 80019f4:	89fb      	ldrh	r3, [r7, #14]
 80019f6:	4619      	mov	r1, r3
 80019f8:	480e      	ldr	r0, [pc, #56]	; (8001a34 <_ZN3IMU4initEv+0x50>)
 80019fa:	f011 fd4b 	bl	8013494 <iprintf>

	lcd_clear();
 80019fe:	f7ff fb4f 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001a02:	2100      	movs	r1, #0
 8001a04:	2000      	movs	r0, #0
 8001a06:	f7ff fb5b 	bl	80010c0 <lcd_locate>
	lcd_printf("Who I am");
 8001a0a:	480b      	ldr	r0, [pc, #44]	; (8001a38 <_ZN3IMU4initEv+0x54>)
 8001a0c:	f7ff fb82 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001a10:	2101      	movs	r1, #1
 8001a12:	2000      	movs	r0, #0
 8001a14:	f7ff fb54 	bl	80010c0 <lcd_locate>
	lcd_printf("%d", who_i_am);
 8001a18:	89fb      	ldrh	r3, [r7, #14]
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4807      	ldr	r0, [pc, #28]	; (8001a3c <_ZN3IMU4initEv+0x58>)
 8001a1e:	f7ff fb79 	bl	8001114 <lcd_printf>

	HAL_Delay(1000);
 8001a22:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a26:	f005 f957 	bl	8006cd8 <HAL_Delay>

}
 8001a2a:	bf00      	nop
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	080175e4 	.word	0x080175e4
 8001a38:	080175f4 	.word	0x080175f4
 8001a3c:	08017600 	.word	0x08017600

08001a40 <_ZN3IMU12updateValuesEv>:
	if(array_idx >= STORE_NUM) array_idx = 0;

}
*/
void IMU::updateValues()
{
 8001a40:	b5b0      	push	{r4, r5, r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
	read_gyro_data();
 8001a48:	f7ff ff72 	bl	8001930 <read_gyro_data>
	//read_accel_data();

	//xa_ = xa;
	//ya_ = ya;
	//za_ = za;
	xg_ = xg;
 8001a4c:	4b24      	ldr	r3, [pc, #144]	; (8001ae0 <_ZN3IMU12updateValuesEv+0xa0>)
 8001a4e:	881b      	ldrh	r3, [r3, #0]
 8001a50:	b21a      	sxth	r2, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	80da      	strh	r2, [r3, #6]
	yg_ = yg;
 8001a56:	4b23      	ldr	r3, [pc, #140]	; (8001ae4 <_ZN3IMU12updateValuesEv+0xa4>)
 8001a58:	881b      	ldrh	r3, [r3, #0]
 8001a5a:	b21a      	sxth	r2, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	811a      	strh	r2, [r3, #8]
	zg_ = zg;
 8001a60:	4b21      	ldr	r3, [pc, #132]	; (8001ae8 <_ZN3IMU12updateValuesEv+0xa8>)
 8001a62:	881b      	ldrh	r3, [r3, #0]
 8001a64:	b21a      	sxth	r2, r3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	815a      	strh	r2, [r3, #10]

	static int16_t pre_zg;
	zg_ = ((R_IMU)*(zg_) + (1.0 - (R_IMU))* (pre_zg)); // lowpath filter
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7fe fd6f 	bl	8000554 <__aeabi_i2d>
 8001a76:	a316      	add	r3, pc, #88	; (adr r3, 8001ad0 <_ZN3IMU12updateValuesEv+0x90>)
 8001a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a7c:	f7fe fdd4 	bl	8000628 <__aeabi_dmul>
 8001a80:	4603      	mov	r3, r0
 8001a82:	460c      	mov	r4, r1
 8001a84:	4625      	mov	r5, r4
 8001a86:	461c      	mov	r4, r3
 8001a88:	4b18      	ldr	r3, [pc, #96]	; (8001aec <_ZN3IMU12updateValuesEv+0xac>)
 8001a8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7fe fd60 	bl	8000554 <__aeabi_i2d>
 8001a94:	a310      	add	r3, pc, #64	; (adr r3, 8001ad8 <_ZN3IMU12updateValuesEv+0x98>)
 8001a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a9a:	f7fe fdc5 	bl	8000628 <__aeabi_dmul>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	4620      	mov	r0, r4
 8001aa4:	4629      	mov	r1, r5
 8001aa6:	f7fe fc09 	bl	80002bc <__adddf3>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	460c      	mov	r4, r1
 8001aae:	4618      	mov	r0, r3
 8001ab0:	4621      	mov	r1, r4
 8001ab2:	f7ff f869 	bl	8000b88 <__aeabi_d2iz>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	b21a      	sxth	r2, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	815a      	strh	r2, [r3, #10]

	pre_zg = zg_;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001ac4:	4b09      	ldr	r3, [pc, #36]	; (8001aec <_ZN3IMU12updateValuesEv+0xac>)
 8001ac6:	801a      	strh	r2, [r3, #0]
	zg_ = temp_val[2];
	mon_zg_ = zg_;
	*/


}
 8001ac8:	bf00      	nop
 8001aca:	3708      	adds	r7, #8
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bdb0      	pop	{r4, r5, r7, pc}
 8001ad0:	eb851eb8 	.word	0xeb851eb8
 8001ad4:	3f9eb851 	.word	0x3f9eb851
 8001ad8:	70a3d70a 	.word	0x70a3d70a
 8001adc:	3fef0a3d 	.word	0x3fef0a3d
 8001ae0:	20039734 	.word	0x20039734
 8001ae4:	20039732 	.word	0x20039732
 8001ae8:	2003972c 	.word	0x2003972c
 8001aec:	20000210 	.word	0x20000210

08001af0 <_ZN3IMU8getOmegaEv>:

float IMU::getOmega()
{
 8001af0:	b5b0      	push	{r4, r5, r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
	float corrected_zg = float(zg_) - offset_;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001afe:	ee07 3a90 	vmov	s15, r3
 8001b02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b10:	edc7 7a03 	vstr	s15, [r7, #12]
	return -(corrected_zg / 16.4) * PI / 180;
 8001b14:	68f8      	ldr	r0, [r7, #12]
 8001b16:	f7fe fd2f 	bl	8000578 <__aeabi_f2d>
 8001b1a:	a316      	add	r3, pc, #88	; (adr r3, 8001b74 <_ZN3IMU8getOmegaEv+0x84>)
 8001b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b20:	f7fe feac 	bl	800087c <__aeabi_ddiv>
 8001b24:	4602      	mov	r2, r0
 8001b26:	460b      	mov	r3, r1
 8001b28:	4614      	mov	r4, r2
 8001b2a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001b2e:	a313      	add	r3, pc, #76	; (adr r3, 8001b7c <_ZN3IMU8getOmegaEv+0x8c>)
 8001b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b34:	4620      	mov	r0, r4
 8001b36:	4629      	mov	r1, r5
 8001b38:	f7fe fd76 	bl	8000628 <__aeabi_dmul>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	460c      	mov	r4, r1
 8001b40:	4618      	mov	r0, r3
 8001b42:	4621      	mov	r1, r4
 8001b44:	f04f 0200 	mov.w	r2, #0
 8001b48:	4b09      	ldr	r3, [pc, #36]	; (8001b70 <_ZN3IMU8getOmegaEv+0x80>)
 8001b4a:	f7fe fe97 	bl	800087c <__aeabi_ddiv>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	460c      	mov	r4, r1
 8001b52:	4618      	mov	r0, r3
 8001b54:	4621      	mov	r1, r4
 8001b56:	f7ff f85f 	bl	8000c18 <__aeabi_d2f>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	ee07 3a90 	vmov	s15, r3
}
 8001b60:	eeb0 0a67 	vmov.f32	s0, s15
 8001b64:	3710      	adds	r7, #16
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bdb0      	pop	{r4, r5, r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	f3af 8000 	nop.w
 8001b70:	40668000 	.word	0x40668000
 8001b74:	66666666 	.word	0x66666666
 8001b78:	40306666 	.word	0x40306666
 8001b7c:	54411744 	.word	0x54411744
 8001b80:	400921fb 	.word	0x400921fb

08001b84 <_ZN3IMU11calibrationEv>:

void IMU::calibration()
{
 8001b84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b86:	b08b      	sub	sp, #44	; 0x2c
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
	float sum;
	for(const auto &v : zg_vals){
		sum += v;
	}

	offset_ = sum / num;
 8001b8c:	466b      	mov	r3, sp
 8001b8e:	461e      	mov	r6, r3
	HAL_Delay(1000);
 8001b90:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b94:	f005 f8a0 	bl	8006cd8 <HAL_Delay>
	int16_t num = 2000;
 8001b98:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001b9c:	83bb      	strh	r3, [r7, #28]
	float zg_vals[num];
 8001b9e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001ba2:	1e5d      	subs	r5, r3, #1
 8001ba4:	61bd      	str	r5, [r7, #24]
 8001ba6:	462b      	mov	r3, r5
 8001ba8:	3301      	adds	r3, #1
 8001baa:	4619      	mov	r1, r3
 8001bac:	f04f 0200 	mov.w	r2, #0
 8001bb0:	f04f 0300 	mov.w	r3, #0
 8001bb4:	f04f 0400 	mov.w	r4, #0
 8001bb8:	0154      	lsls	r4, r2, #5
 8001bba:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001bbe:	014b      	lsls	r3, r1, #5
 8001bc0:	462b      	mov	r3, r5
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	f04f 0200 	mov.w	r2, #0
 8001bca:	f04f 0300 	mov.w	r3, #0
 8001bce:	f04f 0400 	mov.w	r4, #0
 8001bd2:	0154      	lsls	r4, r2, #5
 8001bd4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001bd8:	014b      	lsls	r3, r1, #5
 8001bda:	462b      	mov	r3, r5
 8001bdc:	3301      	adds	r3, #1
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	3303      	adds	r3, #3
 8001be2:	3307      	adds	r3, #7
 8001be4:	08db      	lsrs	r3, r3, #3
 8001be6:	00db      	lsls	r3, r3, #3
 8001be8:	ebad 0d03 	sub.w	sp, sp, r3
 8001bec:	466b      	mov	r3, sp
 8001bee:	3303      	adds	r3, #3
 8001bf0:	089b      	lsrs	r3, r3, #2
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	617b      	str	r3, [r7, #20]
	for(uint16_t i = 0; i < num; i++){
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	83fb      	strh	r3, [r7, #30]
 8001bfa:	8bfa      	ldrh	r2, [r7, #30]
 8001bfc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	da13      	bge.n	8001c2c <_ZN3IMU11calibrationEv+0xa8>
		zg_vals[i] = float(zg_);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001c0a:	8bfb      	ldrh	r3, [r7, #30]
 8001c0c:	ee07 2a90 	vmov	s15, r2
 8001c10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c14:	697a      	ldr	r2, [r7, #20]
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	4413      	add	r3, r2
 8001c1a:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(2);
 8001c1e:	2002      	movs	r0, #2
 8001c20:	f005 f85a 	bl	8006cd8 <HAL_Delay>
	for(uint16_t i = 0; i < num; i++){
 8001c24:	8bfb      	ldrh	r3, [r7, #30]
 8001c26:	3301      	adds	r3, #1
 8001c28:	83fb      	strh	r3, [r7, #30]
 8001c2a:	e7e6      	b.n	8001bfa <_ZN3IMU11calibrationEv+0x76>
	for(const auto &v : zg_vals){
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	627b      	str	r3, [r7, #36]	; 0x24
 8001c30:	697a      	ldr	r2, [r7, #20]
 8001c32:	462b      	mov	r3, r5
 8001c34:	3301      	adds	r3, #1
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	4413      	add	r3, r2
 8001c3a:	613b      	str	r3, [r7, #16]
 8001c3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d00e      	beq.n	8001c62 <_ZN3IMU11calibrationEv+0xde>
 8001c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c46:	60fb      	str	r3, [r7, #12]
		sum += v;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	edd3 7a00 	vldr	s15, [r3]
 8001c4e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001c52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c56:	edc7 7a08 	vstr	s15, [r7, #32]
	for(const auto &v : zg_vals){
 8001c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5c:	3304      	adds	r3, #4
 8001c5e:	627b      	str	r3, [r7, #36]	; 0x24
 8001c60:	e7ec      	b.n	8001c3c <_ZN3IMU11calibrationEv+0xb8>
	offset_ = sum / num;
 8001c62:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001c66:	ee07 3a90 	vmov	s15, r3
 8001c6a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c6e:	edd7 6a08 	vldr	s13, [r7, #32]
 8001c72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	edc3 7a03 	vstr	s15, [r3, #12]
 8001c7c:	46b5      	mov	sp, r6
}
 8001c7e:	bf00      	nop
 8001c80:	372c      	adds	r7, #44	; 0x2c
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001c86 <_ZN3IMU12getOffsetValEv>:

float IMU::getOffsetVal()
{
 8001c86:	b480      	push	{r7}
 8001c88:	b083      	sub	sp, #12
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
	return offset_;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	68db      	ldr	r3, [r3, #12]
 8001c92:	ee07 3a90 	vmov	s15, r3
}
 8001c96:	eeb0 0a67 	vmov.f32	s0, s15
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr

08001ca4 <INA260_read>:

#include "INA260.h"

//#define SLAVEADRESS1 (0x44<<1)

unsigned short INA260_read(uint8_t pointer_byte, uint8_t slave_adress) {
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b086      	sub	sp, #24
 8001ca8:	af02      	add	r7, sp, #8
 8001caa:	4603      	mov	r3, r0
 8001cac:	460a      	mov	r2, r1
 8001cae:	71fb      	strb	r3, [r7, #7]
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	71bb      	strb	r3, [r7, #6]
	uint8_t Rxdata[2];
	unsigned short val;
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, &pointer_byte, 1, 100);
 8001cb4:	79bb      	ldrb	r3, [r7, #6]
 8001cb6:	b299      	uxth	r1, r3
 8001cb8:	1dfa      	adds	r2, r7, #7
 8001cba:	2364      	movs	r3, #100	; 0x64
 8001cbc:	9300      	str	r3, [sp, #0]
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	480c      	ldr	r0, [pc, #48]	; (8001cf4 <INA260_read+0x50>)
 8001cc2:	f006 fc09 	bl	80084d8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, slave_adress, Rxdata, 2, 100);
 8001cc6:	79bb      	ldrb	r3, [r7, #6]
 8001cc8:	b299      	uxth	r1, r3
 8001cca:	f107 020c 	add.w	r2, r7, #12
 8001cce:	2364      	movs	r3, #100	; 0x64
 8001cd0:	9300      	str	r3, [sp, #0]
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	4807      	ldr	r0, [pc, #28]	; (8001cf4 <INA260_read+0x50>)
 8001cd6:	f006 fcfd 	bl	80086d4 <HAL_I2C_Master_Receive>
	val = ((unsigned short)Rxdata[0] << 8) | (unsigned short)Rxdata[1];
 8001cda:	7b3b      	ldrb	r3, [r7, #12]
 8001cdc:	021b      	lsls	r3, r3, #8
 8001cde:	b21a      	sxth	r2, r3
 8001ce0:	7b7b      	ldrb	r3, [r7, #13]
 8001ce2:	b21b      	sxth	r3, r3
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	b21b      	sxth	r3, r3
 8001ce8:	81fb      	strh	r3, [r7, #14]
	return val;
 8001cea:	89fb      	ldrh	r3, [r7, #14]
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3710      	adds	r7, #16
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	2003994c 	.word	0x2003994c

08001cf8 <INA260_write>:

void INA260_write(uint8_t pointer_byte , uint8_t data_msbyte , uint8_t data_lsbyte, uint8_t slave_adress) {
 8001cf8:	b590      	push	{r4, r7, lr}
 8001cfa:	b087      	sub	sp, #28
 8001cfc:	af02      	add	r7, sp, #8
 8001cfe:	4604      	mov	r4, r0
 8001d00:	4608      	mov	r0, r1
 8001d02:	4611      	mov	r1, r2
 8001d04:	461a      	mov	r2, r3
 8001d06:	4623      	mov	r3, r4
 8001d08:	71fb      	strb	r3, [r7, #7]
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	71bb      	strb	r3, [r7, #6]
 8001d0e:	460b      	mov	r3, r1
 8001d10:	717b      	strb	r3, [r7, #5]
 8001d12:	4613      	mov	r3, r2
 8001d14:	713b      	strb	r3, [r7, #4]
	uint8_t Txcmd[3] = { pointer_byte , data_msbyte , data_lsbyte };
 8001d16:	79fb      	ldrb	r3, [r7, #7]
 8001d18:	733b      	strb	r3, [r7, #12]
 8001d1a:	79bb      	ldrb	r3, [r7, #6]
 8001d1c:	737b      	strb	r3, [r7, #13]
 8001d1e:	797b      	ldrb	r3, [r7, #5]
 8001d20:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, Txcmd, 3, 100);
 8001d22:	793b      	ldrb	r3, [r7, #4]
 8001d24:	b299      	uxth	r1, r3
 8001d26:	f107 020c 	add.w	r2, r7, #12
 8001d2a:	2364      	movs	r3, #100	; 0x64
 8001d2c:	9300      	str	r3, [sp, #0]
 8001d2e:	2303      	movs	r3, #3
 8001d30:	4803      	ldr	r0, [pc, #12]	; (8001d40 <INA260_write+0x48>)
 8001d32:	f006 fbd1 	bl	80084d8 <HAL_I2C_Master_Transmit>
}
 8001d36:	bf00      	nop
 8001d38:	3714      	adds	r7, #20
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd90      	pop	{r4, r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	2003994c 	.word	0x2003994c

08001d44 <setConfig>:

void setConfig(uint8_t msbyte , uint8_t lsbyte, uint8_t slave_adress) {
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	71fb      	strb	r3, [r7, #7]
 8001d4e:	460b      	mov	r3, r1
 8001d50:	71bb      	strb	r3, [r7, #6]
 8001d52:	4613      	mov	r3, r2
 8001d54:	717b      	strb	r3, [r7, #5]
	INA260_write(0x00 , msbyte , lsbyte, slave_adress);
 8001d56:	797b      	ldrb	r3, [r7, #5]
 8001d58:	79ba      	ldrb	r2, [r7, #6]
 8001d5a:	79f9      	ldrb	r1, [r7, #7]
 8001d5c:	2000      	movs	r0, #0
 8001d5e:	f7ff ffcb 	bl	8001cf8 <INA260_write>
}
 8001d62:	bf00      	nop
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <INA260_init>:

void INA260_init(uint8_t slave_adress) {
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b082      	sub	sp, #8
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	4603      	mov	r3, r0
 8001d72:	71fb      	strb	r3, [r7, #7]
	setConfig(0x00,0xDF, slave_adress);//AVG=1,BusVoltageConversionTime=588u,ShuntCurrentConversionTime=588u,mode=BusVoltageContinuous
 8001d74:	79fb      	ldrb	r3, [r7, #7]
 8001d76:	461a      	mov	r2, r3
 8001d78:	21df      	movs	r1, #223	; 0xdf
 8001d7a:	2000      	movs	r0, #0
 8001d7c:	f7ff ffe2 	bl	8001d44 <setConfig>
}
 8001d80:	bf00      	nop
 8001d82:	3708      	adds	r7, #8
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <_ZN8JoyStickC1Ev>:
 */

#include "Joystick.hpp"
//#include "stm32f4xx_hal.h"

JoyStick::JoyStick()
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
{

}
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	4618      	mov	r0, r3
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
	...

08001da0 <_ZN8JoyStick8getValueEv>:

uint16_t JoyStick::getValue()
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8001da8:	2300      	movs	r3, #0
 8001daa:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10)) ret_value |= 0x01;
 8001dac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001db0:	482a      	ldr	r0, [pc, #168]	; (8001e5c <_ZN8JoyStick8getValueEv+0xbc>)
 8001db2:	f006 fa0f 	bl	80081d4 <HAL_GPIO_ReadPin>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	bf0c      	ite	eq
 8001dbc:	2301      	moveq	r3, #1
 8001dbe:	2300      	movne	r3, #0
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d003      	beq.n	8001dce <_ZN8JoyStick8getValueEv+0x2e>
 8001dc6:	89fb      	ldrh	r3, [r7, #14]
 8001dc8:	f043 0301 	orr.w	r3, r3, #1
 8001dcc:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_0)) ret_value |= 0x02;
 8001dce:	2101      	movs	r1, #1
 8001dd0:	4823      	ldr	r0, [pc, #140]	; (8001e60 <_ZN8JoyStick8getValueEv+0xc0>)
 8001dd2:	f006 f9ff 	bl	80081d4 <HAL_GPIO_ReadPin>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	bf0c      	ite	eq
 8001ddc:	2301      	moveq	r3, #1
 8001dde:	2300      	movne	r3, #0
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d003      	beq.n	8001dee <_ZN8JoyStick8getValueEv+0x4e>
 8001de6:	89fb      	ldrh	r3, [r7, #14]
 8001de8:	f043 0302 	orr.w	r3, r3, #2
 8001dec:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8)) ret_value |= 0x04;
 8001dee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001df2:	481a      	ldr	r0, [pc, #104]	; (8001e5c <_ZN8JoyStick8getValueEv+0xbc>)
 8001df4:	f006 f9ee 	bl	80081d4 <HAL_GPIO_ReadPin>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	bf0c      	ite	eq
 8001dfe:	2301      	moveq	r3, #1
 8001e00:	2300      	movne	r3, #0
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d003      	beq.n	8001e10 <_ZN8JoyStick8getValueEv+0x70>
 8001e08:	89fb      	ldrh	r3, [r7, #14]
 8001e0a:	f043 0304 	orr.w	r3, r3, #4
 8001e0e:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)) ret_value |= 0x08;
 8001e10:	2104      	movs	r1, #4
 8001e12:	4814      	ldr	r0, [pc, #80]	; (8001e64 <_ZN8JoyStick8getValueEv+0xc4>)
 8001e14:	f006 f9de 	bl	80081d4 <HAL_GPIO_ReadPin>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	bf0c      	ite	eq
 8001e1e:	2301      	moveq	r3, #1
 8001e20:	2300      	movne	r3, #0
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d003      	beq.n	8001e30 <_ZN8JoyStick8getValueEv+0x90>
 8001e28:	89fb      	ldrh	r3, [r7, #14]
 8001e2a:	f043 0308 	orr.w	r3, r3, #8
 8001e2e:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7)) ret_value |= 0x10;
 8001e30:	2180      	movs	r1, #128	; 0x80
 8001e32:	480a      	ldr	r0, [pc, #40]	; (8001e5c <_ZN8JoyStick8getValueEv+0xbc>)
 8001e34:	f006 f9ce 	bl	80081d4 <HAL_GPIO_ReadPin>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	bf0c      	ite	eq
 8001e3e:	2301      	moveq	r3, #1
 8001e40:	2300      	movne	r3, #0
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d003      	beq.n	8001e50 <_ZN8JoyStick8getValueEv+0xb0>
 8001e48:	89fb      	ldrh	r3, [r7, #14]
 8001e4a:	f043 0310 	orr.w	r3, r3, #16
 8001e4e:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8001e50:	89fb      	ldrh	r3, [r7, #14]
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3710      	adds	r7, #16
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	40021000 	.word	0x40021000
 8001e60:	40020c00 	.word	0x40020c00
 8001e64:	40020400 	.word	0x40020400

08001e68 <_ZN3LED9fullColorEc>:
 */

#include "LED.hpp"

void LED::fullColor(char color)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	460b      	mov	r3, r1
 8001e72:	70fb      	strb	r3, [r7, #3]
	if(color == 'R'){
 8001e74:	78fb      	ldrb	r3, [r7, #3]
 8001e76:	2b52      	cmp	r3, #82	; 0x52
 8001e78:	d112      	bne.n	8001ea0 <_ZN3LED9fullColorEc+0x38>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e80:	4856      	ldr	r0, [pc, #344]	; (8001fdc <_ZN3LED9fullColorEc+0x174>)
 8001e82:	f006 f9bf 	bl	8008204 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001e86:	2201      	movs	r2, #1
 8001e88:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e8c:	4853      	ldr	r0, [pc, #332]	; (8001fdc <_ZN3LED9fullColorEc+0x174>)
 8001e8e:	f006 f9b9 	bl	8008204 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001e92:	2201      	movs	r2, #1
 8001e94:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e98:	4850      	ldr	r0, [pc, #320]	; (8001fdc <_ZN3LED9fullColorEc+0x174>)
 8001e9a:	f006 f9b3 	bl	8008204 <HAL_GPIO_WritePin>
	else if(color == '~'){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
	}
}
 8001e9e:	e098      	b.n	8001fd2 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'G'){
 8001ea0:	78fb      	ldrb	r3, [r7, #3]
 8001ea2:	2b47      	cmp	r3, #71	; 0x47
 8001ea4:	d112      	bne.n	8001ecc <_ZN3LED9fullColorEc+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001eac:	484b      	ldr	r0, [pc, #300]	; (8001fdc <_ZN3LED9fullColorEc+0x174>)
 8001eae:	f006 f9a9 	bl	8008204 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001eb8:	4848      	ldr	r0, [pc, #288]	; (8001fdc <_ZN3LED9fullColorEc+0x174>)
 8001eba:	f006 f9a3 	bl	8008204 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ec4:	4845      	ldr	r0, [pc, #276]	; (8001fdc <_ZN3LED9fullColorEc+0x174>)
 8001ec6:	f006 f99d 	bl	8008204 <HAL_GPIO_WritePin>
}
 8001eca:	e082      	b.n	8001fd2 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'B'){
 8001ecc:	78fb      	ldrb	r3, [r7, #3]
 8001ece:	2b42      	cmp	r3, #66	; 0x42
 8001ed0:	d112      	bne.n	8001ef8 <_ZN3LED9fullColorEc+0x90>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ed8:	4840      	ldr	r0, [pc, #256]	; (8001fdc <_ZN3LED9fullColorEc+0x174>)
 8001eda:	f006 f993 	bl	8008204 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ee4:	483d      	ldr	r0, [pc, #244]	; (8001fdc <_ZN3LED9fullColorEc+0x174>)
 8001ee6:	f006 f98d 	bl	8008204 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001eea:	2200      	movs	r2, #0
 8001eec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ef0:	483a      	ldr	r0, [pc, #232]	; (8001fdc <_ZN3LED9fullColorEc+0x174>)
 8001ef2:	f006 f987 	bl	8008204 <HAL_GPIO_WritePin>
}
 8001ef6:	e06c      	b.n	8001fd2 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'C'){
 8001ef8:	78fb      	ldrb	r3, [r7, #3]
 8001efa:	2b43      	cmp	r3, #67	; 0x43
 8001efc:	d112      	bne.n	8001f24 <_ZN3LED9fullColorEc+0xbc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001efe:	2201      	movs	r2, #1
 8001f00:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f04:	4835      	ldr	r0, [pc, #212]	; (8001fdc <_ZN3LED9fullColorEc+0x174>)
 8001f06:	f006 f97d 	bl	8008204 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f10:	4832      	ldr	r0, [pc, #200]	; (8001fdc <_ZN3LED9fullColorEc+0x174>)
 8001f12:	f006 f977 	bl	8008204 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001f16:	2200      	movs	r2, #0
 8001f18:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f1c:	482f      	ldr	r0, [pc, #188]	; (8001fdc <_ZN3LED9fullColorEc+0x174>)
 8001f1e:	f006 f971 	bl	8008204 <HAL_GPIO_WritePin>
}
 8001f22:	e056      	b.n	8001fd2 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'M'){
 8001f24:	78fb      	ldrb	r3, [r7, #3]
 8001f26:	2b4d      	cmp	r3, #77	; 0x4d
 8001f28:	d112      	bne.n	8001f50 <_ZN3LED9fullColorEc+0xe8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f30:	482a      	ldr	r0, [pc, #168]	; (8001fdc <_ZN3LED9fullColorEc+0x174>)
 8001f32:	f006 f967 	bl	8008204 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001f36:	2201      	movs	r2, #1
 8001f38:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f3c:	4827      	ldr	r0, [pc, #156]	; (8001fdc <_ZN3LED9fullColorEc+0x174>)
 8001f3e:	f006 f961 	bl	8008204 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001f42:	2200      	movs	r2, #0
 8001f44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f48:	4824      	ldr	r0, [pc, #144]	; (8001fdc <_ZN3LED9fullColorEc+0x174>)
 8001f4a:	f006 f95b 	bl	8008204 <HAL_GPIO_WritePin>
}
 8001f4e:	e040      	b.n	8001fd2 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'Y'){
 8001f50:	78fb      	ldrb	r3, [r7, #3]
 8001f52:	2b59      	cmp	r3, #89	; 0x59
 8001f54:	d112      	bne.n	8001f7c <_ZN3LED9fullColorEc+0x114>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001f56:	2200      	movs	r2, #0
 8001f58:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f5c:	481f      	ldr	r0, [pc, #124]	; (8001fdc <_ZN3LED9fullColorEc+0x174>)
 8001f5e:	f006 f951 	bl	8008204 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001f62:	2200      	movs	r2, #0
 8001f64:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f68:	481c      	ldr	r0, [pc, #112]	; (8001fdc <_ZN3LED9fullColorEc+0x174>)
 8001f6a:	f006 f94b 	bl	8008204 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f74:	4819      	ldr	r0, [pc, #100]	; (8001fdc <_ZN3LED9fullColorEc+0x174>)
 8001f76:	f006 f945 	bl	8008204 <HAL_GPIO_WritePin>
}
 8001f7a:	e02a      	b.n	8001fd2 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'W'){
 8001f7c:	78fb      	ldrb	r3, [r7, #3]
 8001f7e:	2b57      	cmp	r3, #87	; 0x57
 8001f80:	d112      	bne.n	8001fa8 <_ZN3LED9fullColorEc+0x140>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001f82:	2200      	movs	r2, #0
 8001f84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f88:	4814      	ldr	r0, [pc, #80]	; (8001fdc <_ZN3LED9fullColorEc+0x174>)
 8001f8a:	f006 f93b 	bl	8008204 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f94:	4811      	ldr	r0, [pc, #68]	; (8001fdc <_ZN3LED9fullColorEc+0x174>)
 8001f96:	f006 f935 	bl	8008204 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fa0:	480e      	ldr	r0, [pc, #56]	; (8001fdc <_ZN3LED9fullColorEc+0x174>)
 8001fa2:	f006 f92f 	bl	8008204 <HAL_GPIO_WritePin>
}
 8001fa6:	e014      	b.n	8001fd2 <_ZN3LED9fullColorEc+0x16a>
	else if(color == '~'){
 8001fa8:	78fb      	ldrb	r3, [r7, #3]
 8001faa:	2b7e      	cmp	r3, #126	; 0x7e
 8001fac:	d111      	bne.n	8001fd2 <_ZN3LED9fullColorEc+0x16a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fb4:	4809      	ldr	r0, [pc, #36]	; (8001fdc <_ZN3LED9fullColorEc+0x174>)
 8001fb6:	f006 f925 	bl	8008204 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fc0:	4806      	ldr	r0, [pc, #24]	; (8001fdc <_ZN3LED9fullColorEc+0x174>)
 8001fc2:	f006 f91f 	bl	8008204 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fcc:	4803      	ldr	r0, [pc, #12]	; (8001fdc <_ZN3LED9fullColorEc+0x174>)
 8001fce:	f006 f919 	bl	8008204 <HAL_GPIO_WritePin>
}
 8001fd2:	bf00      	nop
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	40020000 	.word	0x40020000

08001fe0 <_ZN3LED2LREaa>:

void LED::LR(int8_t l_status, int8_t r_status)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	460b      	mov	r3, r1
 8001fea:	70fb      	strb	r3, [r7, #3]
 8001fec:	4613      	mov	r3, r2
 8001fee:	70bb      	strb	r3, [r7, #2]
	if(l_status == 1)
 8001ff0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d106      	bne.n	8002006 <_ZN3LED2LREaa+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ffe:	4813      	ldr	r0, [pc, #76]	; (800204c <_ZN3LED2LREaa+0x6c>)
 8002000:	f006 f900 	bl	8008204 <HAL_GPIO_WritePin>
 8002004:	e009      	b.n	800201a <_ZN3LED2LREaa+0x3a>
	else if(l_status == 0)
 8002006:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d105      	bne.n	800201a <_ZN3LED2LREaa+0x3a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800200e:	2200      	movs	r2, #0
 8002010:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002014:	480d      	ldr	r0, [pc, #52]	; (800204c <_ZN3LED2LREaa+0x6c>)
 8002016:	f006 f8f5 	bl	8008204 <HAL_GPIO_WritePin>

	if(r_status == 1)
 800201a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800201e:	2b01      	cmp	r3, #1
 8002020:	d106      	bne.n	8002030 <_ZN3LED2LREaa+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8002022:	2201      	movs	r2, #1
 8002024:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002028:	4808      	ldr	r0, [pc, #32]	; (800204c <_ZN3LED2LREaa+0x6c>)
 800202a:	f006 f8eb 	bl	8008204 <HAL_GPIO_WritePin>
	else if(r_status == 0)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);

}
 800202e:	e009      	b.n	8002044 <_ZN3LED2LREaa+0x64>
	else if(r_status == 0)
 8002030:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d105      	bne.n	8002044 <_ZN3LED2LREaa+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8002038:	2200      	movs	r2, #0
 800203a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800203e:	4803      	ldr	r0, [pc, #12]	; (800204c <_ZN3LED2LREaa+0x6c>)
 8002040:	f006 f8e0 	bl	8008204 <HAL_GPIO_WritePin>
}
 8002044:	bf00      	nop
 8002046:	3708      	adds	r7, #8
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	40020000 	.word	0x40020000

08002050 <_ZN10LineSensorC1Ev>:
#include <LineSensor.hpp>
#include <algorithm>
#include "G_variables.h"
#include "Macro.h"

LineSensor::LineSensor()
 8002050:	b580      	push	{r7, lr}
 8002052:	b092      	sub	sp, #72	; 0x48
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 800205e:	4618      	mov	r0, r3
 8002060:	f7ff fe92 	bl	8001d88 <_ZN8JoyStickC1Ev>
{
	for(auto &av : analog_val_){
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	637b      	str	r3, [r7, #52]	; 0x34
 8002068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800206a:	647b      	str	r3, [r7, #68]	; 0x44
 800206c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800206e:	331c      	adds	r3, #28
 8002070:	633b      	str	r3, [r7, #48]	; 0x30
 8002072:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002076:	429a      	cmp	r2, r3
 8002078:	d008      	beq.n	800208c <_ZN10LineSensorC1Ev+0x3c>
 800207a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800207c:	62fb      	str	r3, [r7, #44]	; 0x2c
		av = 0;
 800207e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002080:	2200      	movs	r2, #0
 8002082:	801a      	strh	r2, [r3, #0]
	for(auto &av : analog_val_){
 8002084:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002086:	3302      	adds	r3, #2
 8002088:	647b      	str	r3, [r7, #68]	; 0x44
 800208a:	e7f2      	b.n	8002072 <_ZN10LineSensorC1Ev+0x22>
	}

	for(auto &s : sensor){
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8002092:	62bb      	str	r3, [r7, #40]	; 0x28
 8002094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002096:	643b      	str	r3, [r7, #64]	; 0x40
 8002098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800209a:	3338      	adds	r3, #56	; 0x38
 800209c:	627b      	str	r3, [r7, #36]	; 0x24
 800209e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80020a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d009      	beq.n	80020ba <_ZN10LineSensorC1Ev+0x6a>
 80020a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020a8:	623b      	str	r3, [r7, #32]
		s = 0;
 80020aa:	6a3b      	ldr	r3, [r7, #32]
 80020ac:	f04f 0200 	mov.w	r2, #0
 80020b0:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor){
 80020b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020b4:	3304      	adds	r3, #4
 80020b6:	643b      	str	r3, [r7, #64]	; 0x40
 80020b8:	e7f1      	b.n	800209e <_ZN10LineSensorC1Ev+0x4e>
	}

	for(auto &m : offset_values_){
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80020c0:	61fb      	str	r3, [r7, #28]
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	3338      	adds	r3, #56	; 0x38
 80020ca:	61bb      	str	r3, [r7, #24]
 80020cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d009      	beq.n	80020e8 <_ZN10LineSensorC1Ev+0x98>
 80020d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020d6:	617b      	str	r3, [r7, #20]
		m = 0;
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	f04f 0200 	mov.w	r2, #0
 80020de:	601a      	str	r2, [r3, #0]
	for(auto &m : offset_values_){
 80020e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020e2:	3304      	adds	r3, #4
 80020e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020e6:	e7f1      	b.n	80020cc <_ZN10LineSensorC1Ev+0x7c>
	}
	for(auto &s : sensor_coefficient_){
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 80020ee:	613b      	str	r3, [r7, #16]
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	3338      	adds	r3, #56	; 0x38
 80020f8:	60fb      	str	r3, [r7, #12]
 80020fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d009      	beq.n	8002116 <_ZN10LineSensorC1Ev+0xc6>
 8002102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002104:	60bb      	str	r3, [r7, #8]
		s = 1;
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800210c:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor_coefficient_){
 800210e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002110:	3304      	adds	r3, #4
 8002112:	63bb      	str	r3, [r7, #56]	; 0x38
 8002114:	e7f1      	b.n	80020fa <_ZN10LineSensorC1Ev+0xaa>
	}

}
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4618      	mov	r0, r3
 800211a:	3748      	adds	r7, #72	; 0x48
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}

08002120 <_ZN10LineSensor8ADCStartEv>:

void LineSensor::ADCStart()
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog_val_, 14);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	220e      	movs	r2, #14
 800212c:	4619      	mov	r1, r3
 800212e:	4803      	ldr	r0, [pc, #12]	; (800213c <_ZN10LineSensor8ADCStartEv+0x1c>)
 8002130:	f004 fe38 	bl	8006da4 <HAL_ADC_Start_DMA>
}
 8002134:	bf00      	nop
 8002136:	3708      	adds	r7, #8
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	20039870 	.word	0x20039870

08002140 <_ZN10LineSensor17storeSensorValuesEv>:

void LineSensor::storeSensorValues()
{
 8002140:	b480      	push	{r7}
 8002142:	b085      	sub	sp, #20
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
	static uint8_t cnt = 0;

	for(int i = 0; i < AD_DATA_SIZE; i++){
 8002148:	2300      	movs	r3, #0
 800214a:	60fb      	str	r3, [r7, #12]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2b0d      	cmp	r3, #13
 8002150:	dc2f      	bgt.n	80021b2 <_ZN10LineSensor17storeSensorValuesEv+0x72>
		store_vals_[cnt][i] = sensor_coefficient_[i] * (analog_val_[i] - offset_values_[i]) ;
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	3392      	adds	r3, #146	; 0x92
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	4413      	add	r3, r2
 800215c:	3304      	adds	r3, #4
 800215e:	ed93 7a00 	vldr	s14, [r3]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	68fa      	ldr	r2, [r7, #12]
 8002166:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800216a:	ee07 3a90 	vmov	s15, r3
 800216e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	33a0      	adds	r3, #160	; 0xa0
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	4413      	add	r3, r2
 800217c:	3304      	adds	r3, #4
 800217e:	edd3 7a00 	vldr	s15, [r3]
 8002182:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002186:	4b14      	ldr	r3, [pc, #80]	; (80021d8 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	4619      	mov	r1, r3
 800218c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	460b      	mov	r3, r1
 8002194:	00db      	lsls	r3, r3, #3
 8002196:	1a5b      	subs	r3, r3, r1
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	68f9      	ldr	r1, [r7, #12]
 800219c:	440b      	add	r3, r1
 800219e:	3306      	adds	r3, #6
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	4413      	add	r3, r2
 80021a4:	3304      	adds	r3, #4
 80021a6:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < AD_DATA_SIZE; i++){
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	3301      	adds	r3, #1
 80021ae:	60fb      	str	r3, [r7, #12]
 80021b0:	e7cc      	b.n	800214c <_ZN10LineSensor17storeSensorValuesEv+0xc>
		//store_vals_[cnt][i] = float(analog_val_[i]) ;
	}

	cnt++;
 80021b2:	4b09      	ldr	r3, [pc, #36]	; (80021d8 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	3301      	adds	r3, #1
 80021b8:	b2da      	uxtb	r2, r3
 80021ba:	4b07      	ldr	r3, [pc, #28]	; (80021d8 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80021bc:	701a      	strb	r2, [r3, #0]
	if(cnt >= 10) cnt = 0;
 80021be:	4b06      	ldr	r3, [pc, #24]	; (80021d8 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	2b09      	cmp	r3, #9
 80021c4:	d902      	bls.n	80021cc <_ZN10LineSensor17storeSensorValuesEv+0x8c>
 80021c6:	4b04      	ldr	r3, [pc, #16]	; (80021d8 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	701a      	strb	r2, [r3, #0]


}
 80021cc:	bf00      	nop
 80021ce:	3714      	adds	r7, #20
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr
 80021d8:	20000212 	.word	0x20000212

080021dc <_ZN10LineSensor18updateSensorValuesEv>:
void LineSensor::updateSensorValues()
{
 80021dc:	b490      	push	{r4, r7}
 80021de:	b08e      	sub	sp, #56	; 0x38
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
	float temp_val[10];

	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 80021e4:	2300      	movs	r3, #0
 80021e6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80021ea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80021ee:	2b0d      	cmp	r3, #13
 80021f0:	f200 8087 	bhi.w	8002302 <_ZN10LineSensor18updateSensorValuesEv+0x126>
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 80021f4:	2300      	movs	r3, #0
 80021f6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80021fa:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80021fe:	2b09      	cmp	r3, #9
 8002200:	d81c      	bhi.n	800223c <_ZN10LineSensor18updateSensorValuesEv+0x60>
			temp_val[store_cnt] = store_vals_[store_cnt][ad_cnt];
 8002202:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8002206:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 800220a:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	4613      	mov	r3, r2
 8002212:	00db      	lsls	r3, r3, #3
 8002214:	1a9b      	subs	r3, r3, r2
 8002216:	005b      	lsls	r3, r3, #1
 8002218:	4423      	add	r3, r4
 800221a:	3306      	adds	r3, #6
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	4403      	add	r3, r0
 8002220:	3304      	adds	r3, #4
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	008b      	lsls	r3, r1, #2
 8002226:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800222a:	440b      	add	r3, r1
 800222c:	3b30      	subs	r3, #48	; 0x30
 800222e:	601a      	str	r2, [r3, #0]
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 8002230:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002234:	3301      	adds	r3, #1
 8002236:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800223a:	e7de      	b.n	80021fa <_ZN10LineSensor18updateSensorValuesEv+0x1e>
		}

		// sort
		for(uint8_t i = 0; i < 10; i++){
 800223c:	2300      	movs	r3, #0
 800223e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8002242:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002246:	2b09      	cmp	r3, #9
 8002248:	d84d      	bhi.n	80022e6 <_ZN10LineSensor18updateSensorValuesEv+0x10a>
			for (uint8_t j = i+1; j < 10; j++) {
 800224a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800224e:	3301      	adds	r3, #1
 8002250:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002254:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002258:	2b09      	cmp	r3, #9
 800225a:	d83e      	bhi.n	80022da <_ZN10LineSensor18updateSensorValuesEv+0xfe>
				if(temp_val[i] < temp_val[j]){
 800225c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002266:	4413      	add	r3, r2
 8002268:	3b30      	subs	r3, #48	; 0x30
 800226a:	ed93 7a00 	vldr	s14, [r3]
 800226e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002278:	4413      	add	r3, r2
 800227a:	3b30      	subs	r3, #48	; 0x30
 800227c:	edd3 7a00 	vldr	s15, [r3]
 8002280:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002288:	d521      	bpl.n	80022ce <_ZN10LineSensor18updateSensorValuesEv+0xf2>
					float tmp = temp_val[j];
 800228a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002294:	4413      	add	r3, r2
 8002296:	3b30      	subs	r3, #48	; 0x30
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	633b      	str	r3, [r7, #48]	; 0x30
					temp_val[j] = temp_val[i];
 800229c:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80022a0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80022a4:	0092      	lsls	r2, r2, #2
 80022a6:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80022aa:	440a      	add	r2, r1
 80022ac:	3a30      	subs	r2, #48	; 0x30
 80022ae:	6812      	ldr	r2, [r2, #0]
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80022b6:	440b      	add	r3, r1
 80022b8:	3b30      	subs	r3, #48	; 0x30
 80022ba:	601a      	str	r2, [r3, #0]
					temp_val[i] = tmp;
 80022bc:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80022c6:	4413      	add	r3, r2
 80022c8:	3b30      	subs	r3, #48	; 0x30
 80022ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022cc:	601a      	str	r2, [r3, #0]
			for (uint8_t j = i+1; j < 10; j++) {
 80022ce:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80022d2:	3301      	adds	r3, #1
 80022d4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80022d8:	e7bc      	b.n	8002254 <_ZN10LineSensor18updateSensorValuesEv+0x78>
		for(uint8_t i = 0; i < 10; i++){
 80022da:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80022de:	3301      	adds	r3, #1
 80022e0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80022e4:	e7ad      	b.n	8002242 <_ZN10LineSensor18updateSensorValuesEv+0x66>
				}
			}
		}

		sensor[ad_cnt] = temp_val[5];
 80022e6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80022ea:	69fa      	ldr	r2, [r7, #28]
 80022ec:	6879      	ldr	r1, [r7, #4]
 80022ee:	33b0      	adds	r3, #176	; 0xb0
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	440b      	add	r3, r1
 80022f4:	601a      	str	r2, [r3, #0]
	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 80022f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80022fa:	3301      	adds	r3, #1
 80022fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002300:	e773      	b.n	80021ea <_ZN10LineSensor18updateSensorValuesEv+0xe>
	}
}
 8002302:	bf00      	nop
 8002304:	3738      	adds	r7, #56	; 0x38
 8002306:	46bd      	mov	sp, r7
 8002308:	bc90      	pop	{r4, r7}
 800230a:	4770      	bx	lr

0800230c <_ZN10LineSensor13emergencyStopEv>:
{
	printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n", sensor[0], sensor[1], sensor[2], sensor[3], sensor[4], sensor[5], sensor[6], sensor[7], sensor[8], sensor[9], sensor[10], sensor[11], sensor[12], sensor[13]);
}

bool LineSensor::emergencyStop()
{
 800230c:	b480      	push	{r7}
 800230e:	b089      	sub	sp, #36	; 0x24
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
	uint8_t cnt = 0;
 8002314:	2300      	movs	r3, #0
 8002316:	77fb      	strb	r3, [r7, #31]

	for(const auto & s : sensor){
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 800231e:	613b      	str	r3, [r7, #16]
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	61bb      	str	r3, [r7, #24]
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	3338      	adds	r3, #56	; 0x38
 8002328:	60fb      	str	r3, [r7, #12]
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	429a      	cmp	r2, r3
 8002330:	d012      	beq.n	8002358 <_ZN10LineSensor13emergencyStopEv+0x4c>
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	60bb      	str	r3, [r7, #8]
		if(s >= 600) cnt++;
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	edd3 7a00 	vldr	s15, [r3]
 800233c:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002378 <_ZN10LineSensor13emergencyStopEv+0x6c>
 8002340:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002348:	db02      	blt.n	8002350 <_ZN10LineSensor13emergencyStopEv+0x44>
 800234a:	7ffb      	ldrb	r3, [r7, #31]
 800234c:	3301      	adds	r3, #1
 800234e:	77fb      	strb	r3, [r7, #31]
	for(const auto & s : sensor){
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	3304      	adds	r3, #4
 8002354:	61bb      	str	r3, [r7, #24]
 8002356:	e7e8      	b.n	800232a <_ZN10LineSensor13emergencyStopEv+0x1e>
	}

	bool flag;
	if(cnt >= AD_DATA_SIZE) flag = true;
 8002358:	7ffb      	ldrb	r3, [r7, #31]
 800235a:	2b0d      	cmp	r3, #13
 800235c:	d902      	bls.n	8002364 <_ZN10LineSensor13emergencyStopEv+0x58>
 800235e:	2301      	movs	r3, #1
 8002360:	75fb      	strb	r3, [r7, #23]
 8002362:	e001      	b.n	8002368 <_ZN10LineSensor13emergencyStopEv+0x5c>
	else flag = false;
 8002364:	2300      	movs	r3, #0
 8002366:	75fb      	strb	r3, [r7, #23]

	return flag;
 8002368:	7dfb      	ldrb	r3, [r7, #23]

}
 800236a:	4618      	mov	r0, r3
 800236c:	3724      	adds	r7, #36	; 0x24
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	44160000 	.word	0x44160000

0800237c <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrl>:
float monitor_delta_theta;
float monitor_steering_angle;
float monitor_target_omega;
float monitor_r;

LineTrace::LineTrace(Motor *motor, LineSensor *line_sensor, VelocityCtrl *velocity_ctrl) : kp_(0), kd_(0), ki_(0), excution_flag_(false), normal_ratio_(0){
 800237c:	b480      	push	{r7}
 800237e:	b085      	sub	sp, #20
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	607a      	str	r2, [r7, #4]
 8002388:	603b      	str	r3, [r7, #0]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	f04f 0200 	mov.w	r2, #0
 8002390:	611a      	str	r2, [r3, #16]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	f04f 0200 	mov.w	r2, #0
 8002398:	615a      	str	r2, [r3, #20]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	f04f 0200 	mov.w	r2, #0
 80023a0:	619a      	str	r2, [r3, #24]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2200      	movs	r2, #0
 80023a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	f04f 0200 	mov.w	r2, #0
 80023b0:	62da      	str	r2, [r3, #44]	; 0x2c
	motor_ = motor;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	68ba      	ldr	r2, [r7, #8]
 80023b6:	601a      	str	r2, [r3, #0]
	line_sensor_ = line_sensor;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	683a      	ldr	r2, [r7, #0]
 80023c2:	609a      	str	r2, [r3, #8]
}
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	4618      	mov	r0, r3
 80023c8:	3714      	adds	r7, #20
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr

080023d2 <_ZN9LineTrace9calcErrorEv>:

// --------private--------- //
float LineTrace::calcError()
{
 80023d2:	b480      	push	{r7}
 80023d4:	b085      	sub	sp, #20
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 80023ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 80023f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	edd3 7ab3 	vldr	s15, [r3, #716]	; 0x2cc
 8002402:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 800240e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	edd3 7ab5 	vldr	s15, [r3, #724]	; 0x2d4
 800241a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	edd3 7ab6 	vldr	s15, [r3, #728]	; 0x2d8
 8002426:	ee37 7a27 	vadd.f32	s14, s14, s15
			- (line_sensor_->sensor[7] + line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10] + line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	edd3 6ab7 	vldr	s13, [r3, #732]	; 0x2dc
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 800243a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	edd3 7ab9 	vldr	s15, [r3, #740]	; 0x2e4
 8002446:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 8002452:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	edd3 7abb 	vldr	s15, [r3, #748]	; 0x2ec
 800245e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 800246a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 8002476:	ee76 7aa7 	vadd.f32	s15, s13, s15
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 800247a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800247e:	edc7 7a03 	vstr	s15, [r7, #12]

	return diff;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	ee07 3a90 	vmov	s15, r3

}
 8002488:	eeb0 0a67 	vmov.f32	s0, s15
 800248c:	3714      	adds	r7, #20
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
	...

08002498 <_ZN9LineTrace23pidAngularVelocityTraceEv>:
	pre_diff = diff;

}

void LineTrace::pidAngularVelocityTrace()
{
 8002498:	b5b0      	push	{r4, r5, r7, lr}
 800249a:	b086      	sub	sp, #24
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
	float diff = calcError();
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f7ff ff96 	bl	80023d2 <_ZN9LineTrace9calcErrorEv>
 80024a6:	ed87 0a05 	vstr	s0, [r7, #20]
	static float pre_diff = 0;
	float p, d;
	static float i;
	float target_omega = 0;
 80024aa:	f04f 0300 	mov.w	r3, #0
 80024ae:	613b      	str	r3, [r7, #16]

	p = kp_velo_ * diff;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	edd3 7a07 	vldr	s15, [r3, #28]
 80024b6:	ed97 7a05 	vldr	s14, [r7, #20]
 80024ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024be:	edc7 7a03 	vstr	s15, [r7, #12]
	d = kd_velo_ * (diff - pre_diff) / DELTA_T;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	ed93 7a08 	vldr	s14, [r3, #32]
 80024c8:	4b31      	ldr	r3, [pc, #196]	; (8002590 <_ZN9LineTrace23pidAngularVelocityTraceEv+0xf8>)
 80024ca:	edd3 7a00 	vldr	s15, [r3]
 80024ce:	edd7 6a05 	vldr	s13, [r7, #20]
 80024d2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80024d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024da:	ee17 0a90 	vmov	r0, s15
 80024de:	f7fe f84b 	bl	8000578 <__aeabi_f2d>
 80024e2:	a329      	add	r3, pc, #164	; (adr r3, 8002588 <_ZN9LineTrace23pidAngularVelocityTraceEv+0xf0>)
 80024e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024e8:	f7fe f9c8 	bl	800087c <__aeabi_ddiv>
 80024ec:	4603      	mov	r3, r0
 80024ee:	460c      	mov	r4, r1
 80024f0:	4618      	mov	r0, r3
 80024f2:	4621      	mov	r1, r4
 80024f4:	f7fe fb90 	bl	8000c18 <__aeabi_d2f>
 80024f8:	4603      	mov	r3, r0
 80024fa:	60bb      	str	r3, [r7, #8]
	i += ki_velo_ * diff * DELTA_T;
 80024fc:	4b25      	ldr	r3, [pc, #148]	; (8002594 <_ZN9LineTrace23pidAngularVelocityTraceEv+0xfc>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4618      	mov	r0, r3
 8002502:	f7fe f839 	bl	8000578 <__aeabi_f2d>
 8002506:	4604      	mov	r4, r0
 8002508:	460d      	mov	r5, r1
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002510:	edd7 7a05 	vldr	s15, [r7, #20]
 8002514:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002518:	ee17 0a90 	vmov	r0, s15
 800251c:	f7fe f82c 	bl	8000578 <__aeabi_f2d>
 8002520:	a319      	add	r3, pc, #100	; (adr r3, 8002588 <_ZN9LineTrace23pidAngularVelocityTraceEv+0xf0>)
 8002522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002526:	f7fe f87f 	bl	8000628 <__aeabi_dmul>
 800252a:	4602      	mov	r2, r0
 800252c:	460b      	mov	r3, r1
 800252e:	4620      	mov	r0, r4
 8002530:	4629      	mov	r1, r5
 8002532:	f7fd fec3 	bl	80002bc <__adddf3>
 8002536:	4603      	mov	r3, r0
 8002538:	460c      	mov	r4, r1
 800253a:	4618      	mov	r0, r3
 800253c:	4621      	mov	r1, r4
 800253e:	f7fe fb6b 	bl	8000c18 <__aeabi_d2f>
 8002542:	4602      	mov	r2, r0
 8002544:	4b13      	ldr	r3, [pc, #76]	; (8002594 <_ZN9LineTrace23pidAngularVelocityTraceEv+0xfc>)
 8002546:	601a      	str	r2, [r3, #0]

	target_omega = p + d + i;
 8002548:	ed97 7a03 	vldr	s14, [r7, #12]
 800254c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002550:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002554:	4b0f      	ldr	r3, [pc, #60]	; (8002594 <_ZN9LineTrace23pidAngularVelocityTraceEv+0xfc>)
 8002556:	edd3 7a00 	vldr	s15, [r3]
 800255a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800255e:	edc7 7a04 	vstr	s15, [r7, #16]

	velocity_ctrl_->setVelocity(target_velocity_, target_omega);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	689a      	ldr	r2, [r3, #8]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 800256c:	edd7 0a04 	vldr	s1, [r7, #16]
 8002570:	eeb0 0a67 	vmov.f32	s0, s15
 8002574:	4610      	mov	r0, r2
 8002576:	f001 f967 	bl	8003848 <_ZN12VelocityCtrl11setVelocityEff>

	pre_diff = diff;
 800257a:	4a05      	ldr	r2, [pc, #20]	; (8002590 <_ZN9LineTrace23pidAngularVelocityTraceEv+0xf8>)
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	6013      	str	r3, [r2, #0]

}
 8002580:	bf00      	nop
 8002582:	3718      	adds	r7, #24
 8002584:	46bd      	mov	sp, r7
 8002586:	bdb0      	pop	{r4, r5, r7, pc}
 8002588:	d2f1a9fc 	.word	0xd2f1a9fc
 800258c:	3f50624d 	.word	0x3f50624d
 8002590:	20000214 	.word	0x20000214
 8002594:	20000218 	.word	0x20000218

08002598 <_ZN9LineTrace4initEv>:
	monitor_r = r;
}

// -------public---------- //
void LineTrace::init()
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b086      	sub	sp, #24
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
	float temp_kp_v, temp_ki_v, temp_kd_v;
	sd_read_array_float("Params", "kp_v.txt", 1, &temp_kp_v);
 80025a0:	f107 0314 	add.w	r3, r7, #20
 80025a4:	2201      	movs	r2, #1
 80025a6:	4912      	ldr	r1, [pc, #72]	; (80025f0 <_ZN9LineTrace4initEv+0x58>)
 80025a8:	4812      	ldr	r0, [pc, #72]	; (80025f4 <_ZN9LineTrace4initEv+0x5c>)
 80025aa:	f7ff f847 	bl	800163c <sd_read_array_float>
	sd_read_array_float("Params", "ki_v.txt", 1, &temp_ki_v);
 80025ae:	f107 0310 	add.w	r3, r7, #16
 80025b2:	2201      	movs	r2, #1
 80025b4:	4910      	ldr	r1, [pc, #64]	; (80025f8 <_ZN9LineTrace4initEv+0x60>)
 80025b6:	480f      	ldr	r0, [pc, #60]	; (80025f4 <_ZN9LineTrace4initEv+0x5c>)
 80025b8:	f7ff f840 	bl	800163c <sd_read_array_float>
	sd_read_array_float("Params", "kd_v.txt", 1, &temp_kd_v);
 80025bc:	f107 030c 	add.w	r3, r7, #12
 80025c0:	2201      	movs	r2, #1
 80025c2:	490e      	ldr	r1, [pc, #56]	; (80025fc <_ZN9LineTrace4initEv+0x64>)
 80025c4:	480b      	ldr	r0, [pc, #44]	; (80025f4 <_ZN9LineTrace4initEv+0x5c>)
 80025c6:	f7ff f839 	bl	800163c <sd_read_array_float>
	setVeloGain(temp_kp_v, temp_ki_v, temp_kd_v);
 80025ca:	edd7 7a05 	vldr	s15, [r7, #20]
 80025ce:	ed97 7a04 	vldr	s14, [r7, #16]
 80025d2:	edd7 6a03 	vldr	s13, [r7, #12]
 80025d6:	eeb0 1a66 	vmov.f32	s2, s13
 80025da:	eef0 0a47 	vmov.f32	s1, s14
 80025de:	eeb0 0a67 	vmov.f32	s0, s15
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f000 f825 	bl	8002632 <_ZN9LineTrace11setVeloGainEfff>

}
 80025e8:	bf00      	nop
 80025ea:	3718      	adds	r7, #24
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	08017604 	.word	0x08017604
 80025f4:	08017610 	.word	0x08017610
 80025f8:	08017618 	.word	0x08017618
 80025fc:	08017624 	.word	0x08017624

08002600 <_ZN9LineTrace7setGainEfff>:

void LineTrace::setGain(float kp, float ki, float kd)
{
 8002600:	b480      	push	{r7}
 8002602:	b085      	sub	sp, #20
 8002604:	af00      	add	r7, sp, #0
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	ed87 0a02 	vstr	s0, [r7, #8]
 800260c:	edc7 0a01 	vstr	s1, [r7, #4]
 8002610:	ed87 1a00 	vstr	s2, [r7]
	kp_ = kp;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	68ba      	ldr	r2, [r7, #8]
 8002618:	611a      	str	r2, [r3, #16]
	ki_ = ki;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	619a      	str	r2, [r3, #24]
	kd_ = kd;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	683a      	ldr	r2, [r7, #0]
 8002624:	615a      	str	r2, [r3, #20]
}
 8002626:	bf00      	nop
 8002628:	3714      	adds	r7, #20
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr

08002632 <_ZN9LineTrace11setVeloGainEfff>:


void LineTrace::setVeloGain(float kp, float ki, float kd)
{
 8002632:	b480      	push	{r7}
 8002634:	b085      	sub	sp, #20
 8002636:	af00      	add	r7, sp, #0
 8002638:	60f8      	str	r0, [r7, #12]
 800263a:	ed87 0a02 	vstr	s0, [r7, #8]
 800263e:	edc7 0a01 	vstr	s1, [r7, #4]
 8002642:	ed87 1a00 	vstr	s2, [r7]
	kp_velo_ = kp;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	68ba      	ldr	r2, [r7, #8]
 800264a:	61da      	str	r2, [r3, #28]
	ki_velo_ = ki;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	625a      	str	r2, [r3, #36]	; 0x24
	kd_velo_ = kd;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	683a      	ldr	r2, [r7, #0]
 8002656:	621a      	str	r2, [r3, #32]
}
 8002658:	bf00      	nop
 800265a:	3714      	adds	r7, #20
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <_ZN9LineTrace6getKpVEv>:
{
	return kd_;
}

float LineTrace::getKpV()
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
	return kp_velo_;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	69db      	ldr	r3, [r3, #28]
 8002670:	ee07 3a90 	vmov	s15, r3
}
 8002674:	eeb0 0a67 	vmov.f32	s0, s15
 8002678:	370c      	adds	r7, #12
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr

08002682 <_ZN9LineTrace6getKiVEv>:
float LineTrace::getKiV()
{
 8002682:	b480      	push	{r7}
 8002684:	b083      	sub	sp, #12
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
	return ki_velo_;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268e:	ee07 3a90 	vmov	s15, r3
}
 8002692:	eeb0 0a67 	vmov.f32	s0, s15
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <_ZN9LineTrace6getKdVEv>:
float LineTrace::getKdV()
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
	return kd_velo_;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a1b      	ldr	r3, [r3, #32]
 80026ac:	ee07 3a90 	vmov	s15, r3
}
 80026b0:	eeb0 0a67 	vmov.f32	s0, s15
 80026b4:	370c      	adds	r7, #12
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr

080026be <_ZN9LineTrace14setNormalRatioEf>:

void LineTrace::setNormalRatio(float ratio)
{
 80026be:	b480      	push	{r7}
 80026c0:	b083      	sub	sp, #12
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
 80026c6:	ed87 0a00 	vstr	s0, [r7]
	normal_ratio_ = ratio;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	683a      	ldr	r2, [r7, #0]
 80026ce:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80026d0:	bf00      	nop
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr

080026dc <_ZN9LineTrace17setTargetVelocityEf>:

void LineTrace::setTargetVelocity(float velocity)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	ed87 0a00 	vstr	s0, [r7]
	target_velocity_ = velocity;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	683a      	ldr	r2, [r7, #0]
 80026ec:	665a      	str	r2, [r3, #100]	; 0x64
}
 80026ee:	bf00      	nop
 80026f0:	370c      	adds	r7, #12
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
 80026fa:	0000      	movs	r0, r0
 80026fc:	0000      	movs	r0, r0
	...

08002700 <_ZN9LineTrace4flipEv>:

void LineTrace::flip()
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
	if(excution_flag_ == true){
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800270e:	2b00      	cmp	r3, #0
 8002710:	d024      	beq.n	800275c <_ZN9LineTrace4flipEv+0x5c>
		//pidTrace();
		pidAngularVelocityTrace();
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f7ff fec0 	bl	8002498 <_ZN9LineTrace23pidAngularVelocityTraceEv>
		//steeringAngleTrace();

		if(line_sensor_->emergencyStop() == true){
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	4618      	mov	r0, r3
 800271e:	f7ff fdf5 	bl	800230c <_ZN10LineSensor13emergencyStopEv>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d011      	beq.n	800274c <_ZN9LineTrace4flipEv+0x4c>
			motor_->setRatio(0, 0);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	ed9f 1b0e 	vldr	d1, [pc, #56]	; 8002768 <_ZN9LineTrace4flipEv+0x68>
 8002730:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 8002768 <_ZN9LineTrace4flipEv+0x68>
 8002734:	4618      	mov	r0, r3
 8002736:	f000 fa0b 	bl	8002b50 <_ZN5Motor8setRatioEdd>
			led_.LR(1, -1);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	330c      	adds	r3, #12
 800273e:	f04f 32ff 	mov.w	r2, #4294967295
 8002742:	2101      	movs	r1, #1
 8002744:	4618      	mov	r0, r3
 8002746:	f7ff fc4b 	bl	8001fe0 <_ZN3LED2LREaa>
			led_.LR(0, -1);

		}
	}

}
 800274a:	e007      	b.n	800275c <_ZN9LineTrace4flipEv+0x5c>
			led_.LR(0, -1);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	330c      	adds	r3, #12
 8002750:	f04f 32ff 	mov.w	r2, #4294967295
 8002754:	2100      	movs	r1, #0
 8002756:	4618      	mov	r0, r3
 8002758:	f7ff fc42 	bl	8001fe0 <_ZN3LED2LREaa>
}
 800275c:	bf00      	nop
 800275e:	3708      	adds	r7, #8
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	f3af 8000 	nop.w
	...

08002770 <_ZN9LineTrace5startEv>:

void LineTrace::start()
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2201      	movs	r2, #1
 800277c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 8002780:	bf00      	nop
 8002782:	370c      	adds	r7, #12
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr
 800278c:	0000      	movs	r0, r0
	...

08002790 <_ZN9LineTrace4stopEv>:

void LineTrace::stop()
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	motor_->setRatio(0, 0);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	ed9f 1b06 	vldr	d1, [pc, #24]	; 80027c0 <_ZN9LineTrace4stopEv+0x30>
 80027a8:	ed9f 0b05 	vldr	d0, [pc, #20]	; 80027c0 <_ZN9LineTrace4stopEv+0x30>
 80027ac:	4618      	mov	r0, r3
 80027ae:	f000 f9cf 	bl	8002b50 <_ZN5Motor8setRatioEdd>
}
 80027b2:	bf00      	nop
 80027b4:	3708      	adds	r7, #8
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	f3af 8000 	nop.w
	...

080027c8 <_ZN6LoggerC1Ev>:
#include "HAL_SDcard_lib.h"
#include <stdio.h>
#include "Macro.h"
#include "AQM0802.h"

Logger::Logger() : recording_flag_(false), log_index_tim_(0), log_index_tim2_(0), log_index_dis_(0){}
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 80027d6:	2200      	movs	r2, #0
 80027d8:	701a      	strb	r2, [r3, #0]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 80027e0:	3302      	adds	r3, #2
 80027e2:	2200      	movs	r2, #0
 80027e4:	801a      	strh	r2, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 80027ec:	3304      	adds	r3, #4
 80027ee:	2200      	movs	r2, #0
 80027f0:	801a      	strh	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 80027f8:	3306      	adds	r3, #6
 80027fa:	2200      	movs	r2, #0
 80027fc:	801a      	strh	r2, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4618      	mov	r0, r3
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <_ZN6Logger10sdCardInitEv>:

bool Logger::sdCardInit()
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8002814:	2300      	movs	r3, #0
 8002816:	73fb      	strb	r3, [r7, #15]

	if(sd_mount() == 1){
 8002818:	f7fe ff9c 	bl	8001754 <sd_mount>
 800281c:	4603      	mov	r3, r0
 800281e:	2b01      	cmp	r3, #1
 8002820:	bf0c      	ite	eq
 8002822:	2301      	moveq	r3, #1
 8002824:	2300      	movne	r3, #0
 8002826:	b2db      	uxtb	r3, r3
 8002828:	2b00      	cmp	r3, #0
 800282a:	d019      	beq.n	8002860 <_ZN6Logger10sdCardInitEv+0x54>
	  printf("mount success\r\n");
 800282c:	481b      	ldr	r0, [pc, #108]	; (800289c <_ZN6Logger10sdCardInitEv+0x90>)
 800282e:	f010 fea5 	bl	801357c <puts>

	  lcd_clear();
 8002832:	f7fe fc35 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 8002836:	2100      	movs	r1, #0
 8002838:	2000      	movs	r0, #0
 800283a:	f7fe fc41 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 800283e:	4818      	ldr	r0, [pc, #96]	; (80028a0 <_ZN6Logger10sdCardInitEv+0x94>)
 8002840:	f7fe fc68 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 8002844:	2101      	movs	r1, #1
 8002846:	2000      	movs	r0, #0
 8002848:	f7fe fc3a 	bl	80010c0 <lcd_locate>
	  lcd_printf("success");
 800284c:	4815      	ldr	r0, [pc, #84]	; (80028a4 <_ZN6Logger10sdCardInitEv+0x98>)
 800284e:	f7fe fc61 	bl	8001114 <lcd_printf>
	  HAL_Delay(1000);
 8002852:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002856:	f004 fa3f 	bl	8006cd8 <HAL_Delay>

	  ret = true;
 800285a:	2301      	movs	r3, #1
 800285c:	73fb      	strb	r3, [r7, #15]
 800285e:	e018      	b.n	8002892 <_ZN6Logger10sdCardInitEv+0x86>
	}
	else{
	  printf("mount error\r\n");
 8002860:	4811      	ldr	r0, [pc, #68]	; (80028a8 <_ZN6Logger10sdCardInitEv+0x9c>)
 8002862:	f010 fe8b 	bl	801357c <puts>

	  lcd_clear();
 8002866:	f7fe fc1b 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 800286a:	2100      	movs	r1, #0
 800286c:	2000      	movs	r0, #0
 800286e:	f7fe fc27 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 8002872:	480b      	ldr	r0, [pc, #44]	; (80028a0 <_ZN6Logger10sdCardInitEv+0x94>)
 8002874:	f7fe fc4e 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 8002878:	2101      	movs	r1, #1
 800287a:	2000      	movs	r0, #0
 800287c:	f7fe fc20 	bl	80010c0 <lcd_locate>
	  lcd_printf("fail");
 8002880:	480a      	ldr	r0, [pc, #40]	; (80028ac <_ZN6Logger10sdCardInitEv+0xa0>)
 8002882:	f7fe fc47 	bl	8001114 <lcd_printf>
	  HAL_Delay(1000);
 8002886:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800288a:	f004 fa25 	bl	8006cd8 <HAL_Delay>

	  ret = false;
 800288e:	2300      	movs	r3, #0
 8002890:	73fb      	strb	r3, [r7, #15]
	//data[0] = 100;
	//sd_write_array_int("sdio", "write1.txt", DATA_SIZE, data, ADD_WRITE); //write
	//sd_read_array_int("sdio", "write1.txt", DATA_SIZE, temp); //read
	//sd_write_array_int("sdio", "write2.txt", DATA_SIZE, temp, ADD_WRITE); //write

	return ret;
 8002892:	7bfb      	ldrb	r3, [r7, #15]
}
 8002894:	4618      	mov	r0, r3
 8002896:	3710      	adds	r7, #16
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	08017630 	.word	0x08017630
 80028a0:	08017640 	.word	0x08017640
 80028a4:	0801764c 	.word	0x0801764c
 80028a8:	08017654 	.word	0x08017654
 80028ac:	08017664 	.word	0x08017664

080028b0 <_ZN6Logger8storeLogEf>:

	}

}
void Logger::storeLog(float data)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d024      	beq.n	8002912 <_ZN6Logger8storeLogEf+0x62>
		store_data_float_[log_index_tim_] = data;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 80028ce:	3302      	adds	r3, #2
 80028d0:	881b      	ldrh	r3, [r3, #0]
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	4413      	add	r3, r2
 80028d8:	683a      	ldr	r2, [r7, #0]
 80028da:	601a      	str	r2, [r3, #0]

		log_index_tim_++;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 80028e2:	3302      	adds	r3, #2
 80028e4:	881b      	ldrh	r3, [r3, #0]
 80028e6:	3301      	adds	r3, #1
 80028e8:	b29a      	uxth	r2, r3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 80028f0:	3302      	adds	r3, #2
 80028f2:	801a      	strh	r2, [r3, #0]

		if(log_index_tim_ >= LOG_DATA_SIZE_TIM) log_index_tim_ = 0;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 80028fa:	3302      	adds	r3, #2
 80028fc:	881b      	ldrh	r3, [r3, #0]
 80028fe:	f242 720f 	movw	r2, #9999	; 0x270f
 8002902:	4293      	cmp	r3, r2
 8002904:	d905      	bls.n	8002912 <_ZN6Logger8storeLogEf+0x62>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 800290c:	3302      	adds	r3, #2
 800290e:	2200      	movs	r2, #0
 8002910:	801a      	strh	r2, [r3, #0]
	}
}
 8002912:	bf00      	nop
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr

0800291e <_ZN6Logger9storeLog2Ef>:
void Logger::storeLog2(float data)
{
 800291e:	b480      	push	{r7}
 8002920:	b083      	sub	sp, #12
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
 8002926:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d027      	beq.n	8002986 <_ZN6Logger9storeLog2Ef+0x68>
		store_data_float2_[log_index_tim2_] = data;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 800293c:	3304      	adds	r3, #4
 800293e:	881b      	ldrh	r3, [r3, #0]
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8002946:	3310      	adds	r3, #16
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	4413      	add	r3, r2
 800294c:	683a      	ldr	r2, [r7, #0]
 800294e:	601a      	str	r2, [r3, #0]

		log_index_tim2_++;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002956:	3304      	adds	r3, #4
 8002958:	881b      	ldrh	r3, [r3, #0]
 800295a:	3301      	adds	r3, #1
 800295c:	b29a      	uxth	r2, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002964:	3304      	adds	r3, #4
 8002966:	801a      	strh	r2, [r3, #0]

		if(log_index_tim2_ >= LOG_DATA_SIZE_TIM2) log_index_tim2_ = 0;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 800296e:	3304      	adds	r3, #4
 8002970:	881b      	ldrh	r3, [r3, #0]
 8002972:	f242 720f 	movw	r2, #9999	; 0x270f
 8002976:	4293      	cmp	r3, r2
 8002978:	d905      	bls.n	8002986 <_ZN6Logger9storeLog2Ef+0x68>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002980:	3304      	adds	r3, #4
 8002982:	2200      	movs	r2, #0
 8002984:	801a      	strh	r2, [r3, #0]
	}
}
 8002986:	bf00      	nop
 8002988:	370c      	adds	r7, #12
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr

08002992 <_ZN6Logger8saveLogsEPKcS1_>:
		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
	}
}

void Logger::saveLogs(const char *folder_name, const char *file_name)
{
 8002992:	b580      	push	{r7, lr}
 8002994:	b086      	sub	sp, #24
 8002996:	af02      	add	r7, sp, #8
 8002998:	60f8      	str	r0, [r7, #12]
 800299a:	60b9      	str	r1, [r7, #8]
 800299c:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM, store_data_float_, OVER_WRITE); //write
 800299e:	68fa      	ldr	r2, [r7, #12]
 80029a0:	2300      	movs	r3, #0
 80029a2:	9300      	str	r3, [sp, #0]
 80029a4:	4613      	mov	r3, r2
 80029a6:	f242 7210 	movw	r2, #10000	; 0x2710
 80029aa:	6879      	ldr	r1, [r7, #4]
 80029ac:	68b8      	ldr	r0, [r7, #8]
 80029ae:	f7fe fddf 	bl	8001570 <sd_write_array_float>
}
 80029b2:	bf00      	nop
 80029b4:	3710      	adds	r7, #16
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}

080029ba <_ZN6Logger9saveLogs2EPKcS1_>:
void Logger::saveLogs2(const char *folder_name, const char *file_name)
{
 80029ba:	b580      	push	{r7, lr}
 80029bc:	b086      	sub	sp, #24
 80029be:	af02      	add	r7, sp, #8
 80029c0:	60f8      	str	r0, [r7, #12]
 80029c2:	60b9      	str	r1, [r7, #8]
 80029c4:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_float2_, OVER_WRITE); //write
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 80029cc:	3340      	adds	r3, #64	; 0x40
 80029ce:	2200      	movs	r2, #0
 80029d0:	9200      	str	r2, [sp, #0]
 80029d2:	f242 7210 	movw	r2, #10000	; 0x2710
 80029d6:	6879      	ldr	r1, [r7, #4]
 80029d8:	68b8      	ldr	r0, [r7, #8]
 80029da:	f7fe fdc9 	bl	8001570 <sd_write_array_float>
}
 80029de:	bf00      	nop
 80029e0:	3710      	adds	r7, #16
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}

080029e6 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>:

void Logger::saveDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 80029e6:	b580      	push	{r7, lr}
 80029e8:	b086      	sub	sp, #24
 80029ea:	af02      	add	r7, sp, #8
 80029ec:	60f8      	str	r0, [r7, #12]
 80029ee:	60b9      	str	r1, [r7, #8]
 80029f0:	607a      	str	r2, [r7, #4]
 80029f2:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_, OVER_WRITE); //write
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 80029fa:	3380      	adds	r3, #128	; 0x80
 80029fc:	2200      	movs	r2, #0
 80029fe:	9200      	str	r2, [sp, #0]
 8002a00:	f241 7270 	movw	r2, #6000	; 0x1770
 8002a04:	6879      	ldr	r1, [r7, #4]
 8002a06:	68b8      	ldr	r0, [r7, #8]
 8002a08:	f7fe fdb2 	bl	8001570 <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_, OVER_WRITE); //write
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f503 33cb 	add.w	r3, r3, #103936	; 0x19600
 8002a12:	3340      	adds	r3, #64	; 0x40
 8002a14:	2200      	movs	r2, #0
 8002a16:	9200      	str	r2, [sp, #0]
 8002a18:	f241 7270 	movw	r2, #6000	; 0x1770
 8002a1c:	6839      	ldr	r1, [r7, #0]
 8002a1e:	68b8      	ldr	r0, [r7, #8]
 8002a20:	f7fe fda6 	bl	8001570 <sd_write_array_float>
}
 8002a24:	bf00      	nop
 8002a26:	3710      	adds	r7, #16
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <_ZN6Logger5startEv>:
	log_index_tim_ = 0;
	log_index_dis_ = 0;
}

void Logger::start()
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
	recording_flag_ = true;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	701a      	strb	r2, [r3, #0]
}
 8002a3e:	bf00      	nop
 8002a40:	370c      	adds	r7, #12
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr

08002a4a <_ZN6Logger4stopEv>:

void Logger::stop()
{
 8002a4a:	b480      	push	{r7}
 8002a4c:	b083      	sub	sp, #12
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
	recording_flag_ = false;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002a58:	2200      	movs	r2, #0
 8002a5a:	701a      	strb	r2, [r3, #0]
}
 8002a5c:	bf00      	nop
 8002a5e:	370c      	adds	r7, #12
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr

08002a68 <_ZN5MotorC1Ev>:

#include "Motor.hpp"
#include "G_variables.h"


Motor::Motor() : temp_left_counter_period_(0), temp_right_counter_period_(0){}
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	801a      	strh	r2, [r3, #0]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	805a      	strh	r2, [r3, #2]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	370c      	adds	r7, #12
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
	...

08002a8c <_ZN5Motor4initEv>:

void Motor::init()
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
	//PWM start
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8002a94:	2108      	movs	r1, #8
 8002a96:	4805      	ldr	r0, [pc, #20]	; (8002aac <_ZN5Motor4initEv+0x20>)
 8002a98:	f009 fae6 	bl	800c068 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8002a9c:	210c      	movs	r1, #12
 8002a9e:	4803      	ldr	r0, [pc, #12]	; (8002aac <_ZN5Motor4initEv+0x20>)
 8002aa0:	f009 fae2 	bl	800c068 <HAL_TIM_PWM_Start>

}
 8002aa4:	bf00      	nop
 8002aa6:	3708      	adds	r7, #8
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	20039830 	.word	0x20039830

08002ab0 <_ZN5Motor9motorCtrlEv>:

void Motor::motorCtrl()
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
	uint16_t left_counter_period, right_counter_period;

	if(temp_left_counter_period_ < 0) {
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	da0d      	bge.n	8002ade <_ZN5Motor9motorCtrlEv+0x2e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002ac8:	481f      	ldr	r0, [pc, #124]	; (8002b48 <_ZN5Motor9motorCtrlEv+0x98>)
 8002aca:	f005 fb9b 	bl	8008204 <HAL_GPIO_WritePin>
		left_counter_period = -1 * temp_left_counter_period_;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	425b      	negs	r3, r3
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	81fb      	strh	r3, [r7, #14]
 8002adc:	e00a      	b.n	8002af4 <_ZN5Motor9motorCtrlEv+0x44>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002ae4:	4818      	ldr	r0, [pc, #96]	; (8002b48 <_ZN5Motor9motorCtrlEv+0x98>)
 8002ae6:	f005 fb8d 	bl	8008204 <HAL_GPIO_WritePin>
		left_counter_period = temp_left_counter_period_;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	81fb      	strh	r3, [r7, #14]
	}

	if(temp_right_counter_period_ < 0) {
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	da0d      	bge.n	8002b1a <_ZN5Motor9motorCtrlEv+0x6a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8002afe:	2201      	movs	r2, #1
 8002b00:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002b04:	4810      	ldr	r0, [pc, #64]	; (8002b48 <_ZN5Motor9motorCtrlEv+0x98>)
 8002b06:	f005 fb7d 	bl	8008204 <HAL_GPIO_WritePin>
		right_counter_period = -1 * temp_right_counter_period_;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	425b      	negs	r3, r3
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	81bb      	strh	r3, [r7, #12]
 8002b18:	e00a      	b.n	8002b30 <_ZN5Motor9motorCtrlEv+0x80>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002b20:	4809      	ldr	r0, [pc, #36]	; (8002b48 <_ZN5Motor9motorCtrlEv+0x98>)
 8002b22:	f005 fb6f 	bl	8008204 <HAL_GPIO_WritePin>
		right_counter_period = temp_right_counter_period_;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	81bb      	strh	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, left_counter_period);
 8002b30:	89fa      	ldrh	r2, [r7, #14]
 8002b32:	4b06      	ldr	r3, [pc, #24]	; (8002b4c <_ZN5Motor9motorCtrlEv+0x9c>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, right_counter_period);
 8002b38:	89ba      	ldrh	r2, [r7, #12]
 8002b3a:	4b04      	ldr	r3, [pc, #16]	; (8002b4c <_ZN5Motor9motorCtrlEv+0x9c>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002b40:	bf00      	nop
 8002b42:	3710      	adds	r7, #16
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	40020c00 	.word	0x40020c00
 8002b4c:	20039830 	.word	0x20039830

08002b50 <_ZN5Motor8setRatioEdd>:

void Motor::setRatio(double left_ratio, double right_ratio)
{
 8002b50:	b590      	push	{r4, r7, lr}
 8002b52:	b087      	sub	sp, #28
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6178      	str	r0, [r7, #20]
 8002b58:	ed87 0b02 	vstr	d0, [r7, #8]
 8002b5c:	ed87 1b00 	vstr	d1, [r7]
	if(left_ratio > 1) left_ratio = 1;
 8002b60:	f04f 0200 	mov.w	r2, #0
 8002b64:	4b30      	ldr	r3, [pc, #192]	; (8002c28 <_ZN5Motor8setRatioEdd+0xd8>)
 8002b66:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002b6a:	f7fd ffed 	bl	8000b48 <__aeabi_dcmpgt>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d005      	beq.n	8002b80 <_ZN5Motor8setRatioEdd+0x30>
 8002b74:	f04f 0300 	mov.w	r3, #0
 8002b78:	4c2b      	ldr	r4, [pc, #172]	; (8002c28 <_ZN5Motor8setRatioEdd+0xd8>)
 8002b7a:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8002b7e:	e00e      	b.n	8002b9e <_ZN5Motor8setRatioEdd+0x4e>
	else if(left_ratio < -1) left_ratio = -1;
 8002b80:	f04f 0200 	mov.w	r2, #0
 8002b84:	4b29      	ldr	r3, [pc, #164]	; (8002c2c <_ZN5Motor8setRatioEdd+0xdc>)
 8002b86:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002b8a:	f7fd ffbf 	bl	8000b0c <__aeabi_dcmplt>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d004      	beq.n	8002b9e <_ZN5Motor8setRatioEdd+0x4e>
 8002b94:	f04f 0300 	mov.w	r3, #0
 8002b98:	4c24      	ldr	r4, [pc, #144]	; (8002c2c <_ZN5Motor8setRatioEdd+0xdc>)
 8002b9a:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if(right_ratio > 1) right_ratio = 1;
 8002b9e:	f04f 0200 	mov.w	r2, #0
 8002ba2:	4b21      	ldr	r3, [pc, #132]	; (8002c28 <_ZN5Motor8setRatioEdd+0xd8>)
 8002ba4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002ba8:	f7fd ffce 	bl	8000b48 <__aeabi_dcmpgt>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d005      	beq.n	8002bbe <_ZN5Motor8setRatioEdd+0x6e>
 8002bb2:	f04f 0300 	mov.w	r3, #0
 8002bb6:	4c1c      	ldr	r4, [pc, #112]	; (8002c28 <_ZN5Motor8setRatioEdd+0xd8>)
 8002bb8:	e9c7 3400 	strd	r3, r4, [r7]
 8002bbc:	e00e      	b.n	8002bdc <_ZN5Motor8setRatioEdd+0x8c>
	else if(right_ratio < -1) right_ratio = -1;
 8002bbe:	f04f 0200 	mov.w	r2, #0
 8002bc2:	4b1a      	ldr	r3, [pc, #104]	; (8002c2c <_ZN5Motor8setRatioEdd+0xdc>)
 8002bc4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002bc8:	f7fd ffa0 	bl	8000b0c <__aeabi_dcmplt>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d004      	beq.n	8002bdc <_ZN5Motor8setRatioEdd+0x8c>
 8002bd2:	f04f 0300 	mov.w	r3, #0
 8002bd6:	4c15      	ldr	r4, [pc, #84]	; (8002c2c <_ZN5Motor8setRatioEdd+0xdc>)
 8002bd8:	e9c7 3400 	strd	r3, r4, [r7]

	temp_left_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * left_ratio);
 8002bdc:	f04f 0200 	mov.w	r2, #0
 8002be0:	4b13      	ldr	r3, [pc, #76]	; (8002c30 <_ZN5Motor8setRatioEdd+0xe0>)
 8002be2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002be6:	f7fd fd1f 	bl	8000628 <__aeabi_dmul>
 8002bea:	4603      	mov	r3, r0
 8002bec:	460c      	mov	r4, r1
 8002bee:	4618      	mov	r0, r3
 8002bf0:	4621      	mov	r1, r4
 8002bf2:	f7fd ffc9 	bl	8000b88 <__aeabi_d2iz>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	b21a      	sxth	r2, r3
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	801a      	strh	r2, [r3, #0]
	temp_right_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * right_ratio);
 8002bfe:	f04f 0200 	mov.w	r2, #0
 8002c02:	4b0b      	ldr	r3, [pc, #44]	; (8002c30 <_ZN5Motor8setRatioEdd+0xe0>)
 8002c04:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002c08:	f7fd fd0e 	bl	8000628 <__aeabi_dmul>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	460c      	mov	r4, r1
 8002c10:	4618      	mov	r0, r3
 8002c12:	4621      	mov	r1, r4
 8002c14:	f7fd ffb8 	bl	8000b88 <__aeabi_d2iz>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	b21a      	sxth	r2, r3
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	805a      	strh	r2, [r3, #2]

}
 8002c20:	bf00      	nop
 8002c22:	371c      	adds	r7, #28
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd90      	pop	{r4, r7, pc}
 8002c28:	3ff00000 	.word	0x3ff00000
 8002c2c:	bff00000 	.word	0xbff00000
 8002c30:	409c2000 	.word	0x409c2000

08002c34 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>:

#define DELTA_T 0.001

float monitor_x, monitor_y, monitor_theta;

Odometry::Odometry(Encoder *encoder, IMU *imu, VelocityCtrl *velocity_ctrl) : x_(0), y_(0), theta_(0)
 8002c34:	b490      	push	{r4, r7}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	607a      	str	r2, [r7, #4]
 8002c40:	603b      	str	r3, [r7, #0]
 8002c42:	68fa      	ldr	r2, [r7, #12]
 8002c44:	f04f 0300 	mov.w	r3, #0
 8002c48:	f04f 0400 	mov.w	r4, #0
 8002c4c:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8002c50:	68fa      	ldr	r2, [r7, #12]
 8002c52:	f04f 0300 	mov.w	r3, #0
 8002c56:	f04f 0400 	mov.w	r4, #0
 8002c5a:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8002c5e:	68fa      	ldr	r2, [r7, #12]
 8002c60:	f04f 0300 	mov.w	r3, #0
 8002c64:	f04f 0400 	mov.w	r4, #0
 8002c68:	e9c2 3408 	strd	r3, r4, [r2, #32]
{
	encoder_ = encoder;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	68ba      	ldr	r2, [r7, #8]
 8002c70:	601a      	str	r2, [r3, #0]
	imu_ = imu;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	683a      	ldr	r2, [r7, #0]
 8002c7c:	609a      	str	r2, [r3, #8]
}
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	4618      	mov	r0, r3
 8002c82:	3710      	adds	r7, #16
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bc90      	pop	{r4, r7}
 8002c88:	4770      	bx	lr
 8002c8a:	0000      	movs	r0, r0
 8002c8c:	0000      	movs	r0, r0
	...

08002c90 <_ZN8Odometry12calcPotitionEv>:


void Odometry::calcPotition()
{
 8002c90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c94:	b086      	sub	sp, #24
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
	//float current_velocity = velocity_ctrl_->getCurrentVelocity();
	double current_omega = imu_->getOmega();
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7fe ff26 	bl	8001af0 <_ZN3IMU8getOmegaEv>
 8002ca4:	ee10 3a10 	vmov	r3, s0
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7fd fc65 	bl	8000578 <__aeabi_f2d>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	460c      	mov	r4, r1
 8002cb2:	e9c7 3404 	strd	r3, r4, [r7, #16]
	float distance = encoder_->getDistance();
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f7fe fb8e 	bl	80013dc <_ZN7Encoder11getDistanceEv>
 8002cc0:	ed87 0a03 	vstr	s0, [r7, #12]

	delta_theta_ = current_omega * DELTA_T;
 8002cc4:	a357      	add	r3, pc, #348	; (adr r3, 8002e24 <_ZN8Odometry12calcPotitionEv+0x194>)
 8002cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cca:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002cce:	f7fd fcab 	bl	8000628 <__aeabi_dmul>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	460c      	mov	r4, r1
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28

	x_ = x_ + distance * cos(theta_ + delta_theta_ / 2);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8002ce2:	68f8      	ldr	r0, [r7, #12]
 8002ce4:	f7fd fc48 	bl	8000578 <__aeabi_f2d>
 8002ce8:	4682      	mov	sl, r0
 8002cea:	468b      	mov	fp, r1
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002cf8:	f04f 0200 	mov.w	r2, #0
 8002cfc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002d00:	f7fd fdbc 	bl	800087c <__aeabi_ddiv>
 8002d04:	4602      	mov	r2, r0
 8002d06:	460b      	mov	r3, r1
 8002d08:	4640      	mov	r0, r8
 8002d0a:	4649      	mov	r1, r9
 8002d0c:	f7fd fad6 	bl	80002bc <__adddf3>
 8002d10:	4602      	mov	r2, r0
 8002d12:	460b      	mov	r3, r1
 8002d14:	ec43 2b17 	vmov	d7, r2, r3
 8002d18:	eeb0 0a47 	vmov.f32	s0, s14
 8002d1c:	eef0 0a67 	vmov.f32	s1, s15
 8002d20:	f00e fce6 	bl	80116f0 <cos>
 8002d24:	ec53 2b10 	vmov	r2, r3, d0
 8002d28:	4650      	mov	r0, sl
 8002d2a:	4659      	mov	r1, fp
 8002d2c:	f7fd fc7c 	bl	8000628 <__aeabi_dmul>
 8002d30:	4602      	mov	r2, r0
 8002d32:	460b      	mov	r3, r1
 8002d34:	4620      	mov	r0, r4
 8002d36:	4629      	mov	r1, r5
 8002d38:	f7fd fac0 	bl	80002bc <__adddf3>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	460c      	mov	r4, r1
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	e9c2 3404 	strd	r3, r4, [r2, #16]
	y_ = y_ + distance * sin(theta_ + delta_theta_ / 2);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002d4c:	68f8      	ldr	r0, [r7, #12]
 8002d4e:	f7fd fc13 	bl	8000578 <__aeabi_f2d>
 8002d52:	4682      	mov	sl, r0
 8002d54:	468b      	mov	fp, r1
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002d62:	f04f 0200 	mov.w	r2, #0
 8002d66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002d6a:	f7fd fd87 	bl	800087c <__aeabi_ddiv>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	460b      	mov	r3, r1
 8002d72:	4640      	mov	r0, r8
 8002d74:	4649      	mov	r1, r9
 8002d76:	f7fd faa1 	bl	80002bc <__adddf3>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	ec43 2b17 	vmov	d7, r2, r3
 8002d82:	eeb0 0a47 	vmov.f32	s0, s14
 8002d86:	eef0 0a67 	vmov.f32	s1, s15
 8002d8a:	f00e fcf5 	bl	8011778 <sin>
 8002d8e:	ec53 2b10 	vmov	r2, r3, d0
 8002d92:	4650      	mov	r0, sl
 8002d94:	4659      	mov	r1, fp
 8002d96:	f7fd fc47 	bl	8000628 <__aeabi_dmul>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	4620      	mov	r0, r4
 8002da0:	4629      	mov	r1, r5
 8002da2:	f7fd fa8b 	bl	80002bc <__adddf3>
 8002da6:	4603      	mov	r3, r0
 8002da8:	460c      	mov	r4, r1
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	e9c2 3406 	strd	r3, r4, [r2, #24]
	theta_ = theta_ + delta_theta_;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	4623      	mov	r3, r4
 8002dc0:	f7fd fa7c 	bl	80002bc <__adddf3>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	460c      	mov	r4, r1
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	e9c2 3408 	strd	r3, r4, [r2, #32]

	monitor_x = x_;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	4621      	mov	r1, r4
 8002dd8:	f7fd ff1e 	bl	8000c18 <__aeabi_d2f>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	4b0e      	ldr	r3, [pc, #56]	; (8002e18 <_ZN8Odometry12calcPotitionEv+0x188>)
 8002de0:	601a      	str	r2, [r3, #0]
	monitor_y = y_;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8002de8:	4618      	mov	r0, r3
 8002dea:	4621      	mov	r1, r4
 8002dec:	f7fd ff14 	bl	8000c18 <__aeabi_d2f>
 8002df0:	4602      	mov	r2, r0
 8002df2:	4b0a      	ldr	r3, [pc, #40]	; (8002e1c <_ZN8Odometry12calcPotitionEv+0x18c>)
 8002df4:	601a      	str	r2, [r3, #0]
	monitor_theta = theta_;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	4621      	mov	r1, r4
 8002e00:	f7fd ff0a 	bl	8000c18 <__aeabi_d2f>
 8002e04:	4602      	mov	r2, r0
 8002e06:	4b06      	ldr	r3, [pc, #24]	; (8002e20 <_ZN8Odometry12calcPotitionEv+0x190>)
 8002e08:	601a      	str	r2, [r3, #0]
}
 8002e0a:	bf00      	nop
 8002e0c:	3718      	adds	r7, #24
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e14:	f3af 8000 	nop.w
 8002e18:	2000021c 	.word	0x2000021c
 8002e1c:	20000220 	.word	0x20000220
 8002e20:	20000224 	.word	0x20000224
 8002e24:	d2f1a9fc 	.word	0xd2f1a9fc
 8002e28:	3f50624d 	.word	0x3f50624d

08002e2c <_ZN8Odometry4flipEv>:

void Odometry::flip()
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
	calcPotition();
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f7ff ff2b 	bl	8002c90 <_ZN8Odometry12calcPotitionEv>
}
 8002e3a:	bf00      	nop
 8002e3c:	3708      	adds	r7, #8
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}

08002e42 <_ZN8Odometry13clearPotitionEv>:
{
	return delta_theta_;
}

void Odometry::clearPotition()
{
 8002e42:	b490      	push	{r4, r7}
 8002e44:	b082      	sub	sp, #8
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
	x_ = 0;
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	f04f 0300 	mov.w	r3, #0
 8002e50:	f04f 0400 	mov.w	r4, #0
 8002e54:	e9c2 3404 	strd	r3, r4, [r2, #16]
	y_ = 0;
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	f04f 0300 	mov.w	r3, #0
 8002e5e:	f04f 0400 	mov.w	r4, #0
 8002e62:	e9c2 3406 	strd	r3, r4, [r2, #24]
	theta_ = 0;
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	f04f 0300 	mov.w	r3, #0
 8002e6c:	f04f 0400 	mov.w	r4, #0
 8002e70:	e9c2 3408 	strd	r3, r4, [r2, #32]
}
 8002e74:	bf00      	nop
 8002e76:	3708      	adds	r7, #8
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bc90      	pop	{r4, r7}
 8002e7c:	4770      	bx	lr
	...

08002e80 <_ZN13PathFollowingC1Ev>:

uint16_t mon_ref_num;
double mon_x, mon_y, mon_th;
double mon_log_dis, mon_log_th;

PathFollowing::PathFollowing() : execute_flag_(false), x_tar_(0), y_tar_(0), th_tar_(0), ref_num(0)
 8002e80:	b490      	push	{r4, r7}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	701a      	strb	r2, [r3, #0]
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	f04f 0300 	mov.w	r3, #0
 8002e94:	f04f 0400 	mov.w	r4, #0
 8002e98:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	f04f 0300 	mov.w	r3, #0
 8002ea2:	f04f 0400 	mov.w	r4, #0
 8002ea6:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	f04f 0300 	mov.w	r3, #0
 8002eb0:	f04f 0400 	mov.w	r4, #0
 8002eb4:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8002ebe:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	801a      	strh	r2, [r3, #0]
{
	rtParam.kx = 0;
 8002ec6:	4a29      	ldr	r2, [pc, #164]	; (8002f6c <_ZN13PathFollowingC1Ev+0xec>)
 8002ec8:	f04f 0300 	mov.w	r3, #0
 8002ecc:	f04f 0400 	mov.w	r4, #0
 8002ed0:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = 0;
 8002ed4:	4a25      	ldr	r2, [pc, #148]	; (8002f6c <_ZN13PathFollowingC1Ev+0xec>)
 8002ed6:	f04f 0300 	mov.w	r3, #0
 8002eda:	f04f 0400 	mov.w	r4, #0
 8002ede:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = 0;
 8002ee2:	4a22      	ldr	r2, [pc, #136]	; (8002f6c <_ZN13PathFollowingC1Ev+0xec>)
 8002ee4:	f04f 0300 	mov.w	r3, #0
 8002ee8:	f04f 0400 	mov.w	r4, #0
 8002eec:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.target_x = 0;
 8002ef0:	4a1f      	ldr	r2, [pc, #124]	; (8002f70 <_ZN13PathFollowingC1Ev+0xf0>)
 8002ef2:	f04f 0300 	mov.w	r3, #0
 8002ef6:	f04f 0400 	mov.w	r4, #0
 8002efa:	e9c2 3400 	strd	r3, r4, [r2]
	rtU.target_y = 0;
 8002efe:	4a1c      	ldr	r2, [pc, #112]	; (8002f70 <_ZN13PathFollowingC1Ev+0xf0>)
 8002f00:	f04f 0300 	mov.w	r3, #0
 8002f04:	f04f 0400 	mov.w	r4, #0
 8002f08:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtU.th = 0;
 8002f0c:	4a18      	ldr	r2, [pc, #96]	; (8002f70 <_ZN13PathFollowingC1Ev+0xf0>)
 8002f0e:	f04f 0300 	mov.w	r3, #0
 8002f12:	f04f 0400 	mov.w	r4, #0
 8002f16:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.x = 0;
 8002f1a:	4a15      	ldr	r2, [pc, #84]	; (8002f70 <_ZN13PathFollowingC1Ev+0xf0>)
 8002f1c:	f04f 0300 	mov.w	r3, #0
 8002f20:	f04f 0400 	mov.w	r4, #0
 8002f24:	e9c2 3406 	strd	r3, r4, [r2, #24]
	rtU.y = 0;
 8002f28:	4a11      	ldr	r2, [pc, #68]	; (8002f70 <_ZN13PathFollowingC1Ev+0xf0>)
 8002f2a:	f04f 0300 	mov.w	r3, #0
 8002f2e:	f04f 0400 	mov.w	r4, #0
 8002f32:	e9c2 3408 	strd	r3, r4, [r2, #32]
	rtU.th_cur = 0;
 8002f36:	4a0e      	ldr	r2, [pc, #56]	; (8002f70 <_ZN13PathFollowingC1Ev+0xf0>)
 8002f38:	f04f 0300 	mov.w	r3, #0
 8002f3c:	f04f 0400 	mov.w	r4, #0
 8002f40:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	rtY.V_tar = 0;
 8002f44:	4a0b      	ldr	r2, [pc, #44]	; (8002f74 <_ZN13PathFollowingC1Ev+0xf4>)
 8002f46:	f04f 0300 	mov.w	r3, #0
 8002f4a:	f04f 0400 	mov.w	r4, #0
 8002f4e:	e9c2 3400 	strd	r3, r4, [r2]
	rtY.tar = 0;
 8002f52:	4a08      	ldr	r2, [pc, #32]	; (8002f74 <_ZN13PathFollowingC1Ev+0xf4>)
 8002f54:	f04f 0300 	mov.w	r3, #0
 8002f58:	f04f 0400 	mov.w	r4, #0
 8002f5c:	e9c2 3402 	strd	r3, r4, [r2, #8]

}
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	4618      	mov	r0, r3
 8002f64:	3708      	adds	r7, #8
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bc90      	pop	{r4, r7}
 8002f6a:	4770      	bx	lr
 8002f6c:	20039d30 	.word	0x20039d30
 8002f70:	20039cc0 	.word	0x20039cc0
 8002f74:	20039d20 	.word	0x20039d20

08002f78 <_ZN13PathFollowing4initEv>:
	}

}

void PathFollowing::init()
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b088      	sub	sp, #32
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
	path_following_initialize();
 8002f80:	f001 fcd4 	bl	800492c <path_following_initialize>

	double temp_kx, temp_ky, temp_kt;
	sd_read_array_double("Params", "kx.txt", 1, &temp_kx);
 8002f84:	f107 0318 	add.w	r3, r7, #24
 8002f88:	2201      	movs	r2, #1
 8002f8a:	4915      	ldr	r1, [pc, #84]	; (8002fe0 <_ZN13PathFollowing4initEv+0x68>)
 8002f8c:	4815      	ldr	r0, [pc, #84]	; (8002fe4 <_ZN13PathFollowing4initEv+0x6c>)
 8002f8e:	f7fe fb9b 	bl	80016c8 <sd_read_array_double>
	sd_read_array_double("Params", "ky.txt", 1, &temp_ky);
 8002f92:	f107 0310 	add.w	r3, r7, #16
 8002f96:	2201      	movs	r2, #1
 8002f98:	4913      	ldr	r1, [pc, #76]	; (8002fe8 <_ZN13PathFollowing4initEv+0x70>)
 8002f9a:	4812      	ldr	r0, [pc, #72]	; (8002fe4 <_ZN13PathFollowing4initEv+0x6c>)
 8002f9c:	f7fe fb94 	bl	80016c8 <sd_read_array_double>
	sd_read_array_double("Params", "kt.txt", 1, &temp_kt);
 8002fa0:	f107 0308 	add.w	r3, r7, #8
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	4911      	ldr	r1, [pc, #68]	; (8002fec <_ZN13PathFollowing4initEv+0x74>)
 8002fa8:	480e      	ldr	r0, [pc, #56]	; (8002fe4 <_ZN13PathFollowing4initEv+0x6c>)
 8002faa:	f7fe fb8d 	bl	80016c8 <sd_read_array_double>
	setGain(temp_kx, temp_ky, temp_kt);
 8002fae:	ed97 7b06 	vldr	d7, [r7, #24]
 8002fb2:	ed97 6b04 	vldr	d6, [r7, #16]
 8002fb6:	ed97 5b02 	vldr	d5, [r7, #8]
 8002fba:	eeb0 2a45 	vmov.f32	s4, s10
 8002fbe:	eef0 2a65 	vmov.f32	s5, s11
 8002fc2:	eeb0 1a46 	vmov.f32	s2, s12
 8002fc6:	eef0 1a66 	vmov.f32	s3, s13
 8002fca:	eeb0 0a47 	vmov.f32	s0, s14
 8002fce:	eef0 0a67 	vmov.f32	s1, s15
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 f80c 	bl	8002ff0 <_ZN13PathFollowing7setGainEddd>
}
 8002fd8:	bf00      	nop
 8002fda:	3720      	adds	r7, #32
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	0801766c 	.word	0x0801766c
 8002fe4:	08017674 	.word	0x08017674
 8002fe8:	0801767c 	.word	0x0801767c
 8002fec:	08017684 	.word	0x08017684

08002ff0 <_ZN13PathFollowing7setGainEddd>:

void PathFollowing::setGain(double kx, double ky, double kt)
{
 8002ff0:	b490      	push	{r4, r7}
 8002ff2:	b088      	sub	sp, #32
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	61f8      	str	r0, [r7, #28]
 8002ff8:	ed87 0b04 	vstr	d0, [r7, #16]
 8002ffc:	ed87 1b02 	vstr	d1, [r7, #8]
 8003000:	ed87 2b00 	vstr	d2, [r7]
	rtParam.kx = kx;
 8003004:	4a09      	ldr	r2, [pc, #36]	; (800302c <_ZN13PathFollowing7setGainEddd+0x3c>)
 8003006:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800300a:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = ky;
 800300e:	4a07      	ldr	r2, [pc, #28]	; (800302c <_ZN13PathFollowing7setGainEddd+0x3c>)
 8003010:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003014:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = kt;
 8003018:	4a04      	ldr	r2, [pc, #16]	; (800302c <_ZN13PathFollowing7setGainEddd+0x3c>)
 800301a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800301e:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 8003022:	bf00      	nop
 8003024:	3720      	adds	r7, #32
 8003026:	46bd      	mov	sp, r7
 8003028:	bc90      	pop	{r4, r7}
 800302a:	4770      	bx	lr
 800302c:	20039d30 	.word	0x20039d30

08003030 <_ZN13PathFollowing8getKxValEv>:

double PathFollowing::getKxVal()
{
 8003030:	b490      	push	{r4, r7}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
	return rtParam.kx;
 8003038:	4b06      	ldr	r3, [pc, #24]	; (8003054 <_ZN13PathFollowing8getKxValEv+0x24>)
 800303a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800303e:	ec44 3b17 	vmov	d7, r3, r4
}
 8003042:	eeb0 0a47 	vmov.f32	s0, s14
 8003046:	eef0 0a67 	vmov.f32	s1, s15
 800304a:	3708      	adds	r7, #8
 800304c:	46bd      	mov	sp, r7
 800304e:	bc90      	pop	{r4, r7}
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop
 8003054:	20039d30 	.word	0x20039d30

08003058 <_ZN13PathFollowing8getKyValEv>:

double PathFollowing::getKyVal()
{
 8003058:	b490      	push	{r4, r7}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
	return rtParam.ky;
 8003060:	4b06      	ldr	r3, [pc, #24]	; (800307c <_ZN13PathFollowing8getKyValEv+0x24>)
 8003062:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8003066:	ec44 3b17 	vmov	d7, r3, r4
}
 800306a:	eeb0 0a47 	vmov.f32	s0, s14
 800306e:	eef0 0a67 	vmov.f32	s1, s15
 8003072:	3708      	adds	r7, #8
 8003074:	46bd      	mov	sp, r7
 8003076:	bc90      	pop	{r4, r7}
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop
 800307c:	20039d30 	.word	0x20039d30

08003080 <_ZN13PathFollowing8getKtValEv>:

double PathFollowing::getKtVal()
{
 8003080:	b490      	push	{r4, r7}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
	return rtParam.kt;
 8003088:	4b06      	ldr	r3, [pc, #24]	; (80030a4 <_ZN13PathFollowing8getKtValEv+0x24>)
 800308a:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800308e:	ec44 3b17 	vmov	d7, r3, r4
}
 8003092:	eeb0 0a47 	vmov.f32	s0, s14
 8003096:	eef0 0a67 	vmov.f32	s1, s15
 800309a:	3708      	adds	r7, #8
 800309c:	46bd      	mov	sp, r7
 800309e:	bc90      	pop	{r4, r7}
 80030a0:	4770      	bx	lr
 80030a2:	bf00      	nop
 80030a4:	20039d30 	.word	0x20039d30

080030a8 <_ZN11PowerSensor4initEv>:
#define LOW_VOLTAGE_THRESHOLD 7.4

float monitor_voltage;

void PowerSensor::init()
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT);
 80030b0:	2088      	movs	r0, #136	; 0x88
 80030b2:	f7fe fe5a 	bl	8001d6a <INA260_init>
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT);
 80030b6:	2080      	movs	r0, #128	; 0x80
 80030b8:	f7fe fe57 	bl	8001d6a <INA260_init>
}
 80030bc:	bf00      	nop
 80030be:	3708      	adds	r7, #8
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	0000      	movs	r0, r0
	...

080030c8 <_ZN11PowerSensor12updateValuesEv>:

void PowerSensor::updateValues()
{
 80030c8:	b590      	push	{r4, r7, lr}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
	//current_l_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
	//current_r_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT) * 0.00125;
	buttery_voltage_ = INA260_read(0x02, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
 80030d0:	2188      	movs	r1, #136	; 0x88
 80030d2:	2002      	movs	r0, #2
 80030d4:	f7fe fde6 	bl	8001ca4 <INA260_read>
 80030d8:	4603      	mov	r3, r0
 80030da:	4618      	mov	r0, r3
 80030dc:	f7fd fa3a 	bl	8000554 <__aeabi_i2d>
 80030e0:	a30c      	add	r3, pc, #48	; (adr r3, 8003114 <_ZN11PowerSensor12updateValuesEv+0x4c>)
 80030e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030e6:	f7fd fa9f 	bl	8000628 <__aeabi_dmul>
 80030ea:	4603      	mov	r3, r0
 80030ec:	460c      	mov	r4, r1
 80030ee:	4618      	mov	r0, r3
 80030f0:	4621      	mov	r1, r4
 80030f2:	f7fd fd91 	bl	8000c18 <__aeabi_d2f>
 80030f6:	4602      	mov	r2, r0
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	609a      	str	r2, [r3, #8]

	monitor_voltage = buttery_voltage_;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	4a03      	ldr	r2, [pc, #12]	; (8003110 <_ZN11PowerSensor12updateValuesEv+0x48>)
 8003102:	6013      	str	r3, [r2, #0]
}
 8003104:	bf00      	nop
 8003106:	370c      	adds	r7, #12
 8003108:	46bd      	mov	sp, r7
 800310a:	bd90      	pop	{r4, r7, pc}
 800310c:	f3af 8000 	nop.w
 8003110:	20000228 	.word	0x20000228
 8003114:	47ae147b 	.word	0x47ae147b
 8003118:	3f547ae1 	.word	0x3f547ae1

0800311c <_ZN11PowerSensor17getButteryVoltageEv>:
	left = current_l_;
	right = current_r_;
}

float PowerSensor::getButteryVoltage()
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
	return buttery_voltage_;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	ee07 3a90 	vmov	s15, r3

}
 800312c:	eeb0 0a67 	vmov.f32	s0, s15
 8003130:	370c      	adds	r7, #12
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
 800313a:	0000      	movs	r0, r0
 800313c:	0000      	movs	r0, r0
	...

08003140 <_ZN11PowerSensor12butteryCheckEv>:

bool PowerSensor::butteryCheck()
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
	static uint16_t cnt;
	bool ret = false;
 8003148:	2300      	movs	r3, #0
 800314a:	73fb      	strb	r3, [r7, #15]

	if(buttery_voltage_ < LOW_VOLTAGE_THRESHOLD) cnt++;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	4618      	mov	r0, r3
 8003152:	f7fd fa11 	bl	8000578 <__aeabi_f2d>
 8003156:	a311      	add	r3, pc, #68	; (adr r3, 800319c <_ZN11PowerSensor12butteryCheckEv+0x5c>)
 8003158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800315c:	f7fd fcd6 	bl	8000b0c <__aeabi_dcmplt>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d006      	beq.n	8003174 <_ZN11PowerSensor12butteryCheckEv+0x34>
 8003166:	4b0c      	ldr	r3, [pc, #48]	; (8003198 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003168:	881b      	ldrh	r3, [r3, #0]
 800316a:	3301      	adds	r3, #1
 800316c:	b29a      	uxth	r2, r3
 800316e:	4b0a      	ldr	r3, [pc, #40]	; (8003198 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003170:	801a      	strh	r2, [r3, #0]
 8003172:	e002      	b.n	800317a <_ZN11PowerSensor12butteryCheckEv+0x3a>
	else cnt = 0;
 8003174:	4b08      	ldr	r3, [pc, #32]	; (8003198 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003176:	2200      	movs	r2, #0
 8003178:	801a      	strh	r2, [r3, #0]

	if(cnt >= 1) {
 800317a:	4b07      	ldr	r3, [pc, #28]	; (8003198 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 800317c:	881b      	ldrh	r3, [r3, #0]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d004      	beq.n	800318c <_ZN11PowerSensor12butteryCheckEv+0x4c>
		ret = true;
 8003182:	2301      	movs	r3, #1
 8003184:	73fb      	strb	r3, [r7, #15]
		cnt = 1;
 8003186:	4b04      	ldr	r3, [pc, #16]	; (8003198 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003188:	2201      	movs	r2, #1
 800318a:	801a      	strh	r2, [r3, #0]
	}

	return ret;
 800318c:	7bfb      	ldrb	r3, [r7, #15]
}
 800318e:	4618      	mov	r0, r3
 8003190:	3710      	adds	r7, #16
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	2000022c 	.word	0x2000022c
 800319c:	9999999a 	.word	0x9999999a
 80031a0:	401d9999 	.word	0x401d9999

080031a4 <_ZN12RotarySwitch8getValueEv>:

#include "RotarySwitch.hpp"


uint16_t RotarySwitch::getValue()
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 80031ac:	2300      	movs	r3, #0
 80031ae:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_1))	ret_value |= 0x01;
 80031b0:	2102      	movs	r1, #2
 80031b2:	4822      	ldr	r0, [pc, #136]	; (800323c <_ZN12RotarySwitch8getValueEv+0x98>)
 80031b4:	f005 f80e 	bl	80081d4 <HAL_GPIO_ReadPin>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	bf0c      	ite	eq
 80031be:	2301      	moveq	r3, #1
 80031c0:	2300      	movne	r3, #0
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d003      	beq.n	80031d0 <_ZN12RotarySwitch8getValueEv+0x2c>
 80031c8:	89fb      	ldrh	r3, [r7, #14]
 80031ca:	f043 0301 	orr.w	r3, r3, #1
 80031ce:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_3))	ret_value |= 0x02;
 80031d0:	2108      	movs	r1, #8
 80031d2:	481a      	ldr	r0, [pc, #104]	; (800323c <_ZN12RotarySwitch8getValueEv+0x98>)
 80031d4:	f004 fffe 	bl	80081d4 <HAL_GPIO_ReadPin>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	bf0c      	ite	eq
 80031de:	2301      	moveq	r3, #1
 80031e0:	2300      	movne	r3, #0
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d003      	beq.n	80031f0 <_ZN12RotarySwitch8getValueEv+0x4c>
 80031e8:	89fb      	ldrh	r3, [r7, #14]
 80031ea:	f043 0302 	orr.w	r3, r3, #2
 80031ee:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_4))	ret_value |= 0x04;
 80031f0:	2110      	movs	r1, #16
 80031f2:	4812      	ldr	r0, [pc, #72]	; (800323c <_ZN12RotarySwitch8getValueEv+0x98>)
 80031f4:	f004 ffee 	bl	80081d4 <HAL_GPIO_ReadPin>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	bf0c      	ite	eq
 80031fe:	2301      	moveq	r3, #1
 8003200:	2300      	movne	r3, #0
 8003202:	b2db      	uxtb	r3, r3
 8003204:	2b00      	cmp	r3, #0
 8003206:	d003      	beq.n	8003210 <_ZN12RotarySwitch8getValueEv+0x6c>
 8003208:	89fb      	ldrh	r3, [r7, #14]
 800320a:	f043 0304 	orr.w	r3, r3, #4
 800320e:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7))	ret_value |= 0x08;
 8003210:	2180      	movs	r1, #128	; 0x80
 8003212:	480a      	ldr	r0, [pc, #40]	; (800323c <_ZN12RotarySwitch8getValueEv+0x98>)
 8003214:	f004 ffde 	bl	80081d4 <HAL_GPIO_ReadPin>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	bf0c      	ite	eq
 800321e:	2301      	moveq	r3, #1
 8003220:	2300      	movne	r3, #0
 8003222:	b2db      	uxtb	r3, r3
 8003224:	2b00      	cmp	r3, #0
 8003226:	d003      	beq.n	8003230 <_ZN12RotarySwitch8getValueEv+0x8c>
 8003228:	89fb      	ldrh	r3, [r7, #14]
 800322a:	f043 0308 	orr.w	r3, r3, #8
 800322e:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8003230:	89fb      	ldrh	r3, [r7, #14]

}
 8003232:	4618      	mov	r0, r3
 8003234:	3710      	adds	r7, #16
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	40020c00 	.word	0x40020c00

08003240 <_ZN10SideSensorC1Ev>:
 *      Author: under
 */

#include "SideSensor.hpp"

SideSensor::SideSensor()
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
{

}
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	4618      	mov	r0, r3
 800324c:	370c      	adds	r7, #12
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
	...

08003258 <_ZN10SideSensor12updateStatusEt>:


void SideSensor::updateStatus(uint16_t gpio_pin)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	460b      	mov	r3, r1
 8003262:	807b      	strh	r3, [r7, #2]
	static bool white_flag1 = false;
	static bool white_flag2 = false;

	if (gpio_pin == GPIO_PIN_2 && white_flag1 == false){
 8003264:	887b      	ldrh	r3, [r7, #2]
 8003266:	2b04      	cmp	r3, #4
 8003268:	d111      	bne.n	800328e <_ZN10SideSensor12updateStatusEt+0x36>
 800326a:	4b28      	ldr	r3, [pc, #160]	; (800330c <_ZN10SideSensor12updateStatusEt+0xb4>)
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	f083 0301 	eor.w	r3, r3, #1
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2b00      	cmp	r3, #0
 8003276:	d00a      	beq.n	800328e <_ZN10SideSensor12updateStatusEt+0x36>
		status_ |= 0x01;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	881b      	ldrh	r3, [r3, #0]
 800327c:	f043 0301 	orr.w	r3, r3, #1
 8003280:	b29a      	uxth	r2, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	801a      	strh	r2, [r3, #0]
		white_flag1 = true;
 8003286:	4b21      	ldr	r3, [pc, #132]	; (800330c <_ZN10SideSensor12updateStatusEt+0xb4>)
 8003288:	2201      	movs	r2, #1
 800328a:	701a      	strb	r2, [r3, #0]
 800328c:	e010      	b.n	80032b0 <_ZN10SideSensor12updateStatusEt+0x58>
	}
	else if(gpio_pin == GPIO_PIN_2 && white_flag1 == true){
 800328e:	887b      	ldrh	r3, [r7, #2]
 8003290:	2b04      	cmp	r3, #4
 8003292:	d10d      	bne.n	80032b0 <_ZN10SideSensor12updateStatusEt+0x58>
 8003294:	4b1d      	ldr	r3, [pc, #116]	; (800330c <_ZN10SideSensor12updateStatusEt+0xb4>)
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d009      	beq.n	80032b0 <_ZN10SideSensor12updateStatusEt+0x58>
		status_ ^= 0x01;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	881b      	ldrh	r3, [r3, #0]
 80032a0:	f083 0301 	eor.w	r3, r3, #1
 80032a4:	b29a      	uxth	r2, r3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	801a      	strh	r2, [r3, #0]
		white_flag1 = false;
 80032aa:	4b18      	ldr	r3, [pc, #96]	; (800330c <_ZN10SideSensor12updateStatusEt+0xb4>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	701a      	strb	r2, [r3, #0]

	}

	if (gpio_pin == GPIO_PIN_8 && white_flag2 == false){
 80032b0:	887b      	ldrh	r3, [r7, #2]
 80032b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032b6:	d111      	bne.n	80032dc <_ZN10SideSensor12updateStatusEt+0x84>
 80032b8:	4b15      	ldr	r3, [pc, #84]	; (8003310 <_ZN10SideSensor12updateStatusEt+0xb8>)
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	f083 0301 	eor.w	r3, r3, #1
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d00a      	beq.n	80032dc <_ZN10SideSensor12updateStatusEt+0x84>
		status_ |= 0x02;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	881b      	ldrh	r3, [r3, #0]
 80032ca:	f043 0302 	orr.w	r3, r3, #2
 80032ce:	b29a      	uxth	r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	801a      	strh	r2, [r3, #0]
		white_flag2 = true;
 80032d4:	4b0e      	ldr	r3, [pc, #56]	; (8003310 <_ZN10SideSensor12updateStatusEt+0xb8>)
 80032d6:	2201      	movs	r2, #1
 80032d8:	701a      	strb	r2, [r3, #0]
	else if(gpio_pin == GPIO_PIN_8 && white_flag2 == true){
		status_ ^= 0x02;
		white_flag2 = false;
	}

}
 80032da:	e011      	b.n	8003300 <_ZN10SideSensor12updateStatusEt+0xa8>
	else if(gpio_pin == GPIO_PIN_8 && white_flag2 == true){
 80032dc:	887b      	ldrh	r3, [r7, #2]
 80032de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032e2:	d10d      	bne.n	8003300 <_ZN10SideSensor12updateStatusEt+0xa8>
 80032e4:	4b0a      	ldr	r3, [pc, #40]	; (8003310 <_ZN10SideSensor12updateStatusEt+0xb8>)
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d009      	beq.n	8003300 <_ZN10SideSensor12updateStatusEt+0xa8>
		status_ ^= 0x02;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	881b      	ldrh	r3, [r3, #0]
 80032f0:	f083 0302 	eor.w	r3, r3, #2
 80032f4:	b29a      	uxth	r2, r3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	801a      	strh	r2, [r3, #0]
		white_flag2 = false;
 80032fa:	4b05      	ldr	r3, [pc, #20]	; (8003310 <_ZN10SideSensor12updateStatusEt+0xb8>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	701a      	strb	r2, [r3, #0]
}
 8003300:	bf00      	nop
 8003302:	370c      	adds	r7, #12
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr
 800330c:	2000022e 	.word	0x2000022e
 8003310:	2000022f 	.word	0x2000022f

08003314 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>:

#include "SystemIdentification.hpp"

float mon_msig;

SystemIdentification::SystemIdentification(Logger *logger, Motor *motor) : msigArrayIdx_(0), inputVal_(0), processing_flag_(false)
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	60b9      	str	r1, [r7, #8]
 800331e:	607a      	str	r2, [r7, #4]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	4a10      	ldr	r2, [pc, #64]	; (8003364 <_ZN20SystemIdentificationC1EP6LoggerP5Motor+0x50>)
 8003324:	3308      	adds	r3, #8
 8003326:	4611      	mov	r1, r2
 8003328:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800332c:	4618      	mov	r0, r3
 800332e:	f00f fa5f 	bl	80127f0 <memcpy>
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2200      	movs	r2, #0
 8003336:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	f04f 0200 	mov.w	r2, #0
 8003340:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2200      	movs	r2, #0
 8003348:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
{
	logger_ = logger;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	68ba      	ldr	r2, [r7, #8]
 8003350:	601a      	str	r2, [r3, #0]
	motor_ = motor;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	605a      	str	r2, [r3, #4]
	//msigItr_ = msigArray_.begin();
}
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	4618      	mov	r0, r3
 800335c:	3710      	adds	r7, #16
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	080176a8 	.word	0x080176a8

08003368 <_ZN20SystemIdentification13inOutputStoreEf>:
{

}

void SystemIdentification::inOutputStore(float output)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	ed87 0a00 	vstr	s0, [r7]
	if(processing_flag_ == true){
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 800337a:	2b00      	cmp	r3, #0
 800337c:	d010      	beq.n	80033a0 <_ZN20SystemIdentification13inOutputStoreEf+0x38>
		logger_->storeLog(output);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	ed97 0a00 	vldr	s0, [r7]
 8003386:	4618      	mov	r0, r3
 8003388:	f7ff fa92 	bl	80028b0 <_ZN6Logger8storeLogEf>
		logger_->storeLog2(inputVal_);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	edd3 7a80 	vldr	s15, [r3, #512]	; 0x200
 8003396:	eeb0 0a67 	vmov.f32	s0, s15
 800339a:	4610      	mov	r0, r2
 800339c:	f7ff fabf 	bl	800291e <_ZN6Logger9storeLog2Ef>
	}

}
 80033a0:	bf00      	nop
 80033a2:	3708      	adds	r7, #8
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <_ZN20SystemIdentification12inOutputSaveEv>:

void SystemIdentification::inOutputSave()
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
	logger_->saveLogs("sysident", "MSIGRES.txt");
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a07      	ldr	r2, [pc, #28]	; (80033d4 <_ZN20SystemIdentification12inOutputSaveEv+0x2c>)
 80033b6:	4908      	ldr	r1, [pc, #32]	; (80033d8 <_ZN20SystemIdentification12inOutputSaveEv+0x30>)
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7ff faea 	bl	8002992 <_ZN6Logger8saveLogsEPKcS1_>
	logger_->saveLogs2("sysident", "INPUT.txt");
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a06      	ldr	r2, [pc, #24]	; (80033dc <_ZN20SystemIdentification12inOutputSaveEv+0x34>)
 80033c4:	4904      	ldr	r1, [pc, #16]	; (80033d8 <_ZN20SystemIdentification12inOutputSaveEv+0x30>)
 80033c6:	4618      	mov	r0, r3
 80033c8:	f7ff faf7 	bl	80029ba <_ZN6Logger9saveLogs2EPKcS1_>
}
 80033cc:	bf00      	nop
 80033ce:	3708      	adds	r7, #8
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	0801789c 	.word	0x0801789c
 80033d8:	080178a8 	.word	0x080178a8
 80033dc:	080178b4 	.word	0x080178b4

080033e0 <_ZN20SystemIdentification10updateMsigEv>:

void SystemIdentification::updateMsig()
{
 80033e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
	if(processing_flag_ == true){
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d046      	beq.n	8003480 <_ZN20SystemIdentification10updateMsigEv+0xa0>
		inputVal_ = inputRatio_ * msigArray_[msigArrayIdx_];
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	ed93 7a81 	vldr	s14, [r3, #516]	; 0x204
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 80033fe:	461a      	mov	r2, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	3204      	adds	r2, #4
 8003404:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8003408:	ee07 3a90 	vmov	s15, r3
 800340c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003410:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200
		msigArrayIdx_++;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 8003420:	3301      	adds	r3, #1
 8003422:	b29a      	uxth	r2, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
		mon_msig = inputVal_;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003430:	4a15      	ldr	r2, [pc, #84]	; (8003488 <_ZN20SystemIdentification10updateMsigEv+0xa8>)
 8003432:	6013      	str	r3, [r2, #0]

		if(msigArrayIdx_ >= MSIG_SIZE) msigArrayIdx_ = MSIG_SIZE;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 800343a:	2bf9      	cmp	r3, #249	; 0xf9
 800343c:	d903      	bls.n	8003446 <_ZN20SystemIdentification10updateMsigEv+0x66>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	22fa      	movs	r2, #250	; 0xfa
 8003442:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc

		motor_->setRatio(inputVal_, -inputVal_);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685c      	ldr	r4, [r3, #4]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003450:	4618      	mov	r0, r3
 8003452:	f7fd f891 	bl	8000578 <__aeabi_f2d>
 8003456:	4605      	mov	r5, r0
 8003458:	460e      	mov	r6, r1
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	edd3 7a80 	vldr	s15, [r3, #512]	; 0x200
 8003460:	eef1 7a67 	vneg.f32	s15, s15
 8003464:	ee17 3a90 	vmov	r3, s15
 8003468:	4618      	mov	r0, r3
 800346a:	f7fd f885 	bl	8000578 <__aeabi_f2d>
 800346e:	4602      	mov	r2, r0
 8003470:	460b      	mov	r3, r1
 8003472:	ec43 2b11 	vmov	d1, r2, r3
 8003476:	ec46 5b10 	vmov	d0, r5, r6
 800347a:	4620      	mov	r0, r4
 800347c:	f7ff fb68 	bl	8002b50 <_ZN5Motor8setRatioEdd>

	}

}
 8003480:	bf00      	nop
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003488:	20000230 	.word	0x20000230

0800348c <_ZN20SystemIdentification13setInputRatioEf>:
void SystemIdentification::setInputRatio(float ratio)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	ed87 0a00 	vstr	s0, [r7]
	inputRatio_ = ratio;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	683a      	ldr	r2, [r7, #0]
 800349c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
}
 80034a0:	bf00      	nop
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <_ZN20SystemIdentification5startEv>:

void SystemIdentification::start()
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b082      	sub	sp, #8
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
	//logger_->resetLogs();
	logger_->start();
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4618      	mov	r0, r3
 80034ba:	f7ff fab7 	bl	8002a2c <_ZN6Logger5startEv>
	processing_flag_ = true;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2201      	movs	r2, #1
 80034c2:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
}
 80034c6:	bf00      	nop
 80034c8:	3708      	adds	r7, #8
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
	...

080034d0 <_ZN20SystemIdentification4stopEv>:

void SystemIdentification::stop()
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
	logger_->stop();
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4618      	mov	r0, r3
 80034de:	f7ff fab4 	bl	8002a4a <_ZN6Logger4stopEv>
	processing_flag_ = false;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
	msigArrayIdx_ = 0;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
	motor_->setRatio(0, 0);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8003510 <_ZN20SystemIdentification4stopEv+0x40>
 80034fa:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8003510 <_ZN20SystemIdentification4stopEv+0x40>
 80034fe:	4618      	mov	r0, r3
 8003500:	f7ff fb26 	bl	8002b50 <_ZN5Motor8setRatioEdd>
}
 8003504:	bf00      	nop
 8003506:	3708      	adds	r7, #8
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	f3af 8000 	nop.w
	...

08003518 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>:

#include "VelocityCtrl.hpp"
//#include "ICM_20648.h"
#include <stdio.h>

VelocityCtrl::VelocityCtrl(Motor *motor, Encoder *encoder, IMU *imu) :
 8003518:	b480      	push	{r7}
 800351a:	b085      	sub	sp, #20
 800351c:	af00      	add	r7, sp, #0
 800351e:	60f8      	str	r0, [r7, #12]
 8003520:	60b9      	str	r1, [r7, #8]
 8003522:	607a      	str	r2, [r7, #4]
 8003524:	603b      	str	r3, [r7, #0]
target_velocity_(0), target_omega_(0), current_velocity_(0), current_omega_(0), v_kp_(0), v_kd_(0), v_ki_(0),
	o_kp_(0), o_kd_(0), o_ki_(0), excution_flag_(false)
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	f04f 0200 	mov.w	r2, #0
 800352c:	601a      	str	r2, [r3, #0]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f04f 0200 	mov.w	r2, #0
 8003534:	605a      	str	r2, [r3, #4]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f04f 0200 	mov.w	r2, #0
 800353c:	609a      	str	r2, [r3, #8]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	f04f 0200 	mov.w	r2, #0
 8003544:	60da      	str	r2, [r3, #12]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	f04f 0200 	mov.w	r2, #0
 800354c:	611a      	str	r2, [r3, #16]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	f04f 0200 	mov.w	r2, #0
 8003554:	615a      	str	r2, [r3, #20]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	f04f 0200 	mov.w	r2, #0
 800355c:	619a      	str	r2, [r3, #24]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f04f 0200 	mov.w	r2, #0
 8003564:	61da      	str	r2, [r3, #28]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f04f 0200 	mov.w	r2, #0
 800356c:	621a      	str	r2, [r3, #32]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	f04f 0200 	mov.w	r2, #0
 8003574:	625a      	str	r2, [r3, #36]	; 0x24
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2200      	movs	r2, #0
 800357a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
{
	motor_ = motor;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	68ba      	ldr	r2, [r7, #8]
 8003582:	62da      	str	r2, [r3, #44]	; 0x2c
	encoder_ = encoder;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	631a      	str	r2, [r3, #48]	; 0x30
	imu_ = imu;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	683a      	ldr	r2, [r7, #0]
 800358e:	635a      	str	r2, [r3, #52]	; 0x34

}
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	4618      	mov	r0, r3
 8003594:	3714      	adds	r7, #20
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr
	...

080035a0 <_ZN12VelocityCtrl12calcVelocityEv>:

// ---------private ---------//

float VelocityCtrl::calcVelocity()
{
 80035a0:	b590      	push	{r4, r7, lr}
 80035a2:	b087      	sub	sp, #28
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
	float enc_l, enc_r;
	encoder_->getCnt(enc_l, enc_r);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ac:	f107 020c 	add.w	r2, r7, #12
 80035b0:	f107 0110 	add.w	r1, r7, #16
 80035b4:	4618      	mov	r0, r3
 80035b6:	f7fd fefd 	bl	80013b4 <_ZN7Encoder6getCntERfS0_>
	float enc_cnt = (enc_l + enc_r) / 2;
 80035ba:	ed97 7a04 	vldr	s14, [r7, #16]
 80035be:	edd7 7a03 	vldr	s15, [r7, #12]
 80035c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80035c6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80035ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80035ce:	edc7 7a05 	vstr	s15, [r7, #20]

	current_velocity_ = VELOCITY_PER_CNT * enc_cnt;
 80035d2:	6978      	ldr	r0, [r7, #20]
 80035d4:	f7fc ffd0 	bl	8000578 <__aeabi_f2d>
 80035d8:	a30b      	add	r3, pc, #44	; (adr r3, 8003608 <_ZN12VelocityCtrl12calcVelocityEv+0x68>)
 80035da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035de:	f7fd f823 	bl	8000628 <__aeabi_dmul>
 80035e2:	4603      	mov	r3, r0
 80035e4:	460c      	mov	r4, r1
 80035e6:	4618      	mov	r0, r3
 80035e8:	4621      	mov	r1, r4
 80035ea:	f7fd fb15 	bl	8000c18 <__aeabi_d2f>
 80035ee:	4602      	mov	r2, r0
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	609a      	str	r2, [r3, #8]

	return current_velocity_;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	ee07 3a90 	vmov	s15, r3
}
 80035fc:	eeb0 0a67 	vmov.f32	s0, s15
 8003600:	371c      	adds	r7, #28
 8003602:	46bd      	mov	sp, r7
 8003604:	bd90      	pop	{r4, r7, pc}
 8003606:	bf00      	nop
 8003608:	1ab1d998 	.word	0x1ab1d998
 800360c:	3f7830b5 	.word	0x3f7830b5

08003610 <_ZN12VelocityCtrl3pidEv>:
	return current_omega_;
}
*/

void VelocityCtrl::pid()
{
 8003610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003612:	ed2d 8b02 	vpush	{d8}
 8003616:	b08d      	sub	sp, #52	; 0x34
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
	float static v_pre_diff, o_pre_diff;
	float v_diff = target_velocity_ - current_velocity_;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	ed93 7a00 	vldr	s14, [r3]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	edd3 7a02 	vldr	s15, [r3, #8]
 8003628:	ee77 7a67 	vsub.f32	s15, s14, s15
 800362c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	float o_diff = target_omega_- imu_->getOmega();
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	ed93 8a01 	vldr	s16, [r3, #4]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800363a:	4618      	mov	r0, r3
 800363c:	f7fe fa58 	bl	8001af0 <_ZN3IMU8getOmegaEv>
 8003640:	eef0 7a40 	vmov.f32	s15, s0
 8003644:	ee78 7a67 	vsub.f32	s15, s16, s15
 8003648:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	float v_p, v_d, o_p, o_d;
	static float v_i, o_i;

	v_p = v_kp_ * v_diff;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	edd3 7a04 	vldr	s15, [r3, #16]
 8003652:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003656:	ee67 7a27 	vmul.f32	s15, s14, s15
 800365a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	v_i += v_ki_ * v_diff * DELTA_T;
 800365e:	4b76      	ldr	r3, [pc, #472]	; (8003838 <_ZN12VelocityCtrl3pidEv+0x228>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4618      	mov	r0, r3
 8003664:	f7fc ff88 	bl	8000578 <__aeabi_f2d>
 8003668:	4604      	mov	r4, r0
 800366a:	460d      	mov	r5, r1
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	ed93 7a06 	vldr	s14, [r3, #24]
 8003672:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003676:	ee67 7a27 	vmul.f32	s15, s14, s15
 800367a:	ee17 0a90 	vmov	r0, s15
 800367e:	f7fc ff7b 	bl	8000578 <__aeabi_f2d>
 8003682:	a36b      	add	r3, pc, #428	; (adr r3, 8003830 <_ZN12VelocityCtrl3pidEv+0x220>)
 8003684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003688:	f7fc ffce 	bl	8000628 <__aeabi_dmul>
 800368c:	4602      	mov	r2, r0
 800368e:	460b      	mov	r3, r1
 8003690:	4620      	mov	r0, r4
 8003692:	4629      	mov	r1, r5
 8003694:	f7fc fe12 	bl	80002bc <__adddf3>
 8003698:	4603      	mov	r3, r0
 800369a:	460c      	mov	r4, r1
 800369c:	4618      	mov	r0, r3
 800369e:	4621      	mov	r1, r4
 80036a0:	f7fd faba 	bl	8000c18 <__aeabi_d2f>
 80036a4:	4602      	mov	r2, r0
 80036a6:	4b64      	ldr	r3, [pc, #400]	; (8003838 <_ZN12VelocityCtrl3pidEv+0x228>)
 80036a8:	601a      	str	r2, [r3, #0]
	v_d = v_kd_ * (v_diff - v_pre_diff) * DELTA_T;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	ed93 7a05 	vldr	s14, [r3, #20]
 80036b0:	4b62      	ldr	r3, [pc, #392]	; (800383c <_ZN12VelocityCtrl3pidEv+0x22c>)
 80036b2:	edd3 7a00 	vldr	s15, [r3]
 80036b6:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80036ba:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80036be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036c2:	ee17 0a90 	vmov	r0, s15
 80036c6:	f7fc ff57 	bl	8000578 <__aeabi_f2d>
 80036ca:	a359      	add	r3, pc, #356	; (adr r3, 8003830 <_ZN12VelocityCtrl3pidEv+0x220>)
 80036cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036d0:	f7fc ffaa 	bl	8000628 <__aeabi_dmul>
 80036d4:	4603      	mov	r3, r0
 80036d6:	460c      	mov	r4, r1
 80036d8:	4618      	mov	r0, r3
 80036da:	4621      	mov	r1, r4
 80036dc:	f7fd fa9c 	bl	8000c18 <__aeabi_d2f>
 80036e0:	4603      	mov	r3, r0
 80036e2:	623b      	str	r3, [r7, #32]

	o_p = o_kp_ * o_diff;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	edd3 7a07 	vldr	s15, [r3, #28]
 80036ea:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80036ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036f2:	edc7 7a07 	vstr	s15, [r7, #28]
	o_i += o_ki_ * o_diff * DELTA_T;
 80036f6:	4b52      	ldr	r3, [pc, #328]	; (8003840 <_ZN12VelocityCtrl3pidEv+0x230>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4618      	mov	r0, r3
 80036fc:	f7fc ff3c 	bl	8000578 <__aeabi_f2d>
 8003700:	4604      	mov	r4, r0
 8003702:	460d      	mov	r5, r1
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800370a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800370e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003712:	ee17 0a90 	vmov	r0, s15
 8003716:	f7fc ff2f 	bl	8000578 <__aeabi_f2d>
 800371a:	a345      	add	r3, pc, #276	; (adr r3, 8003830 <_ZN12VelocityCtrl3pidEv+0x220>)
 800371c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003720:	f7fc ff82 	bl	8000628 <__aeabi_dmul>
 8003724:	4602      	mov	r2, r0
 8003726:	460b      	mov	r3, r1
 8003728:	4620      	mov	r0, r4
 800372a:	4629      	mov	r1, r5
 800372c:	f7fc fdc6 	bl	80002bc <__adddf3>
 8003730:	4603      	mov	r3, r0
 8003732:	460c      	mov	r4, r1
 8003734:	4618      	mov	r0, r3
 8003736:	4621      	mov	r1, r4
 8003738:	f7fd fa6e 	bl	8000c18 <__aeabi_d2f>
 800373c:	4602      	mov	r2, r0
 800373e:	4b40      	ldr	r3, [pc, #256]	; (8003840 <_ZN12VelocityCtrl3pidEv+0x230>)
 8003740:	601a      	str	r2, [r3, #0]
	o_d = o_kd_ * (o_diff - o_pre_diff) * DELTA_T;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	ed93 7a08 	vldr	s14, [r3, #32]
 8003748:	4b3e      	ldr	r3, [pc, #248]	; (8003844 <_ZN12VelocityCtrl3pidEv+0x234>)
 800374a:	edd3 7a00 	vldr	s15, [r3]
 800374e:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8003752:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003756:	ee67 7a27 	vmul.f32	s15, s14, s15
 800375a:	ee17 0a90 	vmov	r0, s15
 800375e:	f7fc ff0b 	bl	8000578 <__aeabi_f2d>
 8003762:	a333      	add	r3, pc, #204	; (adr r3, 8003830 <_ZN12VelocityCtrl3pidEv+0x220>)
 8003764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003768:	f7fc ff5e 	bl	8000628 <__aeabi_dmul>
 800376c:	4603      	mov	r3, r0
 800376e:	460c      	mov	r4, r1
 8003770:	4618      	mov	r0, r3
 8003772:	4621      	mov	r1, r4
 8003774:	f7fd fa50 	bl	8000c18 <__aeabi_d2f>
 8003778:	4603      	mov	r3, r0
 800377a:	61bb      	str	r3, [r7, #24]

	float v_left_ratio, v_right_ratio, o_left_ratio, o_right_ratio;

	v_left_ratio = v_right_ratio =  v_p + v_d + v_i;
 800377c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003780:	edd7 7a08 	vldr	s15, [r7, #32]
 8003784:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003788:	4b2b      	ldr	r3, [pc, #172]	; (8003838 <_ZN12VelocityCtrl3pidEv+0x228>)
 800378a:	edd3 7a00 	vldr	s15, [r3]
 800378e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003792:	edc7 7a05 	vstr	s15, [r7, #20]
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	613b      	str	r3, [r7, #16]

	o_left_ratio = o_p + o_d + o_i;
 800379a:	ed97 7a07 	vldr	s14, [r7, #28]
 800379e:	edd7 7a06 	vldr	s15, [r7, #24]
 80037a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037a6:	4b26      	ldr	r3, [pc, #152]	; (8003840 <_ZN12VelocityCtrl3pidEv+0x230>)
 80037a8:	edd3 7a00 	vldr	s15, [r3]
 80037ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037b0:	edc7 7a03 	vstr	s15, [r7, #12]
	o_right_ratio = -(o_p + o_d + o_i);
 80037b4:	ed97 7a07 	vldr	s14, [r7, #28]
 80037b8:	edd7 7a06 	vldr	s15, [r7, #24]
 80037bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037c0:	4b1f      	ldr	r3, [pc, #124]	; (8003840 <_ZN12VelocityCtrl3pidEv+0x230>)
 80037c2:	edd3 7a00 	vldr	s15, [r3]
 80037c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037ca:	eef1 7a67 	vneg.f32	s15, s15
 80037ce:	edc7 7a02 	vstr	s15, [r7, #8]

	motor_->setRatio(v_left_ratio + o_left_ratio, v_right_ratio + o_right_ratio);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80037d6:	ed97 7a04 	vldr	s14, [r7, #16]
 80037da:	edd7 7a03 	vldr	s15, [r7, #12]
 80037de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037e2:	ee17 0a90 	vmov	r0, s15
 80037e6:	f7fc fec7 	bl	8000578 <__aeabi_f2d>
 80037ea:	4605      	mov	r5, r0
 80037ec:	460e      	mov	r6, r1
 80037ee:	ed97 7a05 	vldr	s14, [r7, #20]
 80037f2:	edd7 7a02 	vldr	s15, [r7, #8]
 80037f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037fa:	ee17 0a90 	vmov	r0, s15
 80037fe:	f7fc febb 	bl	8000578 <__aeabi_f2d>
 8003802:	4602      	mov	r2, r0
 8003804:	460b      	mov	r3, r1
 8003806:	ec43 2b11 	vmov	d1, r2, r3
 800380a:	ec46 5b10 	vmov	d0, r5, r6
 800380e:	4620      	mov	r0, r4
 8003810:	f7ff f99e 	bl	8002b50 <_ZN5Motor8setRatioEdd>

	v_pre_diff = v_diff;
 8003814:	4a09      	ldr	r2, [pc, #36]	; (800383c <_ZN12VelocityCtrl3pidEv+0x22c>)
 8003816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003818:	6013      	str	r3, [r2, #0]
	o_pre_diff = o_diff;
 800381a:	4a0a      	ldr	r2, [pc, #40]	; (8003844 <_ZN12VelocityCtrl3pidEv+0x234>)
 800381c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800381e:	6013      	str	r3, [r2, #0]
}
 8003820:	bf00      	nop
 8003822:	3734      	adds	r7, #52	; 0x34
 8003824:	46bd      	mov	sp, r7
 8003826:	ecbd 8b02 	vpop	{d8}
 800382a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800382c:	f3af 8000 	nop.w
 8003830:	d2f1a9fc 	.word	0xd2f1a9fc
 8003834:	3f50624d 	.word	0x3f50624d
 8003838:	2000023c 	.word	0x2000023c
 800383c:	20000234 	.word	0x20000234
 8003840:	20000240 	.word	0x20000240
 8003844:	20000238 	.word	0x20000238

08003848 <_ZN12VelocityCtrl11setVelocityEff>:
{

}

void VelocityCtrl::setVelocity(float velocity, float omega)
{
 8003848:	b480      	push	{r7}
 800384a:	b085      	sub	sp, #20
 800384c:	af00      	add	r7, sp, #0
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	ed87 0a02 	vstr	s0, [r7, #8]
 8003854:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	68ba      	ldr	r2, [r7, #8]
 800385c:	601a      	str	r2, [r3, #0]
	target_omega_= omega;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	605a      	str	r2, [r3, #4]
}
 8003864:	bf00      	nop
 8003866:	3714      	adds	r7, #20
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <_ZN12VelocityCtrl15setVelocityGainEfff>:

void VelocityCtrl::setVelocityGain(float kp, float ki, float kd)
{
 8003870:	b480      	push	{r7}
 8003872:	b085      	sub	sp, #20
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	ed87 0a02 	vstr	s0, [r7, #8]
 800387c:	edc7 0a01 	vstr	s1, [r7, #4]
 8003880:	ed87 1a00 	vstr	s2, [r7]
	v_kp_ = kp;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	68ba      	ldr	r2, [r7, #8]
 8003888:	611a      	str	r2, [r3, #16]
	v_ki_ = ki;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	619a      	str	r2, [r3, #24]
	v_kd_ = kd;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	683a      	ldr	r2, [r7, #0]
 8003894:	615a      	str	r2, [r3, #20]
}
 8003896:	bf00      	nop
 8003898:	3714      	adds	r7, #20
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr

080038a2 <_ZN12VelocityCtrl12setOmegaGainEfff>:

void VelocityCtrl::setOmegaGain(float kp, float ki, float kd)
{
 80038a2:	b480      	push	{r7}
 80038a4:	b085      	sub	sp, #20
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	60f8      	str	r0, [r7, #12]
 80038aa:	ed87 0a02 	vstr	s0, [r7, #8]
 80038ae:	edc7 0a01 	vstr	s1, [r7, #4]
 80038b2:	ed87 1a00 	vstr	s2, [r7]
	o_kp_ = kp;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	68ba      	ldr	r2, [r7, #8]
 80038ba:	61da      	str	r2, [r3, #28]
	o_ki_ = ki;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	625a      	str	r2, [r3, #36]	; 0x24
	o_kd_ = kd;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	683a      	ldr	r2, [r7, #0]
 80038c6:	621a      	str	r2, [r3, #32]
}
 80038c8:	bf00      	nop
 80038ca:	3714      	adds	r7, #20
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <_ZN12VelocityCtrl4flipEv>:

void VelocityCtrl::flip()
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
    calcVelocity();
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f7ff fe5f 	bl	80035a0 <_ZN12VelocityCtrl12calcVelocityEv>
	//calcOmega();

	if(excution_flag_ == true){
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d002      	beq.n	80038f2 <_ZN12VelocityCtrl4flipEv+0x1e>
		pid();
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f7ff fe8f 	bl	8003610 <_ZN12VelocityCtrl3pidEv>
	}


}
 80038f2:	bf00      	nop
 80038f4:	3708      	adds	r7, #8
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}

080038fa <_ZN12VelocityCtrl5startEv>:

void VelocityCtrl::start()
{
 80038fa:	b480      	push	{r7}
 80038fc:	b083      	sub	sp, #12
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2201      	movs	r2, #1
 8003906:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	//calcOmega();
}
 800390a:	bf00      	nop
 800390c:	370c      	adds	r7, #12
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr
	...

08003918 <_ZN12VelocityCtrl4stopEv>:

void VelocityCtrl::stop()
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	motor_->setRatio(0, 0);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392c:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8003948 <_ZN12VelocityCtrl4stopEv+0x30>
 8003930:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8003948 <_ZN12VelocityCtrl4stopEv+0x30>
 8003934:	4618      	mov	r0, r3
 8003936:	f7ff f90b 	bl	8002b50 <_ZN5Motor8setRatioEdd>

}
 800393a:	bf00      	nop
 800393c:	3708      	adds	r7, #8
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	f3af 8000 	nop.w
	...

08003950 <_ZN12VelocityCtrl18getCurrentVelocityEv>:

float VelocityCtrl::getCurrentVelocity()
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
	return current_velocity_;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	ee07 3a90 	vmov	s15, r3
}
 8003960:	eeb0 0a67 	vmov.f32	s0, s15
 8003964:	370c      	adds	r7, #12
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr

0800396e <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800396e:	b480      	push	{r7}
 8003970:	b083      	sub	sp, #12
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003976:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800397a:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800397e:	f003 0301 	and.w	r3, r3, #1
 8003982:	2b00      	cmp	r3, #0
 8003984:	d013      	beq.n	80039ae <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8003986:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800398a:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800398e:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003992:	2b00      	cmp	r3, #0
 8003994:	d00b      	beq.n	80039ae <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8003996:	e000      	b.n	800399a <ITM_SendChar+0x2c>
    {
      __NOP();
 8003998:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800399a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d0f9      	beq.n	8003998 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80039a4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	b2d2      	uxtb	r2, r2
 80039ac:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80039ae:	687b      	ldr	r3, [r7, #4]
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	370c      	adds	r7, #12
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr

080039bc <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


int _write(int file, char *ptr, int len)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b086      	sub	sp, #24
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	60b9      	str	r1, [r7, #8]
 80039c6:	607a      	str	r2, [r7, #4]
  int DataIdx;
  for(DataIdx=0; DataIdx<len; DataIdx++)
 80039c8:	2300      	movs	r3, #0
 80039ca:	617b      	str	r3, [r7, #20]
 80039cc:	e009      	b.n	80039e2 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	1c5a      	adds	r2, r3, #1
 80039d2:	60ba      	str	r2, [r7, #8]
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	4618      	mov	r0, r3
 80039d8:	f7ff ffc9 	bl	800396e <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	3301      	adds	r3, #1
 80039e0:	617b      	str	r3, [r7, #20]
 80039e2:	697a      	ldr	r2, [r7, #20]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	429a      	cmp	r2, r3
 80039e8:	dbf1      	blt.n	80039ce <_write+0x12>
  }
  return len;
 80039ea:	687b      	ldr	r3, [r7, #4]
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3718      	adds	r7, #24
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	4603      	mov	r3, r0
 80039fc:	80fb      	strh	r3, [r7, #6]
	cppExit(GPIO_Pin);
 80039fe:	88fb      	ldrh	r3, [r7, #6]
 8003a00:	4618      	mov	r0, r3
 8003a02:	f001 ff41 	bl	8005888 <cppExit>
}
 8003a06:	bf00      	nop
 8003a08:	3708      	adds	r7, #8
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
	...

08003a10 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6){
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a1e      	ldr	r2, [pc, #120]	; (8003a98 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d10e      	bne.n	8003a40 <HAL_TIM_PeriodElapsedCallback+0x30>
		cppFlip1ms();
 8003a22:	f001 fea3 	bl	800576c <cppFlip1ms>

		tim6_timer++;
 8003a26:	4b1d      	ldr	r3, [pc, #116]	; (8003a9c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	4a1b      	ldr	r2, [pc, #108]	; (8003a9c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8003a2e:	6013      	str	r3, [r2, #0]
		if(tim6_timer >= 100000) tim6_timer = 0;
 8003a30:	4b1a      	ldr	r3, [pc, #104]	; (8003a9c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a1a      	ldr	r2, [pc, #104]	; (8003aa0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d902      	bls.n	8003a40 <HAL_TIM_PeriodElapsedCallback+0x30>
 8003a3a:	4b18      	ldr	r3, [pc, #96]	; (8003a9c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM7){
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a17      	ldr	r2, [pc, #92]	; (8003aa4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d10e      	bne.n	8003a68 <HAL_TIM_PeriodElapsedCallback+0x58>
		cppFlip100ns();
 8003a4a:	f001 fef5 	bl	8005838 <cppFlip100ns>

		tim7_timer++;
 8003a4e:	4b16      	ldr	r3, [pc, #88]	; (8003aa8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	3301      	adds	r3, #1
 8003a54:	4a14      	ldr	r2, [pc, #80]	; (8003aa8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8003a56:	6013      	str	r3, [r2, #0]
		if(tim7_timer >= 100000) tim7_timer = 0;
 8003a58:	4b13      	ldr	r3, [pc, #76]	; (8003aa8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a10      	ldr	r2, [pc, #64]	; (8003aa0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d902      	bls.n	8003a68 <HAL_TIM_PeriodElapsedCallback+0x58>
 8003a62:	4b11      	ldr	r3, [pc, #68]	; (8003aa8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8003a64:	2200      	movs	r2, #0
 8003a66:	601a      	str	r2, [r3, #0]
	}
	if(htim->Instance == TIM13){
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a0f      	ldr	r2, [pc, #60]	; (8003aac <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d10e      	bne.n	8003a90 <HAL_TIM_PeriodElapsedCallback+0x80>
		cppFlip10ms();
 8003a72:	f001 feeb 	bl	800584c <cppFlip10ms>

		tim13_timer++;
 8003a76:	4b0e      	ldr	r3, [pc, #56]	; (8003ab0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	3301      	adds	r3, #1
 8003a7c:	4a0c      	ldr	r2, [pc, #48]	; (8003ab0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003a7e:	6013      	str	r3, [r2, #0]
		if(tim13_timer >= 100000) tim13_timer = 0;
 8003a80:	4b0b      	ldr	r3, [pc, #44]	; (8003ab0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a06      	ldr	r2, [pc, #24]	; (8003aa0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d902      	bls.n	8003a90 <HAL_TIM_PeriodElapsedCallback+0x80>
 8003a8a:	4b09      	ldr	r3, [pc, #36]	; (8003ab0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	601a      	str	r2, [r3, #0]
	}

}
 8003a90:	bf00      	nop
 8003a92:	3708      	adds	r7, #8
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	40001000 	.word	0x40001000
 8003a9c:	200399a0 	.word	0x200399a0
 8003aa0:	0001869f 	.word	0x0001869f
 8003aa4:	40001400 	.word	0x40001400
 8003aa8:	200399e4 	.word	0x200399e4
 8003aac:	40001c00 	.word	0x40001c00
 8003ab0:	200399e8 	.word	0x200399e8

08003ab4 <init>:

void init()
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	af00      	add	r7, sp, #0
	// ------initialize------//
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET); // sensor led ON
 8003ab8:	2201      	movs	r2, #1
 8003aba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003abe:	4808      	ldr	r0, [pc, #32]	; (8003ae0 <init+0x2c>)
 8003ac0:	f004 fba0 	bl	8008204 <HAL_GPIO_WritePin>

	// timer interrpt in start
	HAL_TIM_Base_Start_IT(&htim6);
 8003ac4:	4807      	ldr	r0, [pc, #28]	; (8003ae4 <init+0x30>)
 8003ac6:	f008 fa80 	bl	800bfca <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8003aca:	4807      	ldr	r0, [pc, #28]	; (8003ae8 <init+0x34>)
 8003acc:	f008 fa7d 	bl	800bfca <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 8003ad0:	4806      	ldr	r0, [pc, #24]	; (8003aec <init+0x38>)
 8003ad2:	f008 fa7a 	bl	800bfca <HAL_TIM_Base_Start_IT>

	cppInit();
 8003ad6:	f001 fd93 	bl	8005600 <cppInit>

	//path_following_initialize();

}
 8003ada:	bf00      	nop
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	40021000 	.word	0x40021000
 8003ae4:	20039acc 	.word	0x20039acc
 8003ae8:	20039c70 	.word	0x20039c70
 8003aec:	200399ec 	.word	0x200399ec

08003af0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003af4:	f003 f87e 	bl	8006bf4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003af8:	f000 f82a 	bl	8003b50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003afc:	f000 fdbc 	bl	8004678 <MX_GPIO_Init>
  MX_DMA_Init();
 8003b00:	f000 fd8a 	bl	8004618 <MX_DMA_Init>
  MX_I2C2_Init();
 8003b04:	f000 f9e8 	bl	8003ed8 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8003b08:	f000 fa14 	bl	8003f34 <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 8003b0c:	f000 fa32 	bl	8003f74 <MX_SPI2_Init>
  MX_TIM1_Init();
 8003b10:	f000 fa66 	bl	8003fe0 <MX_TIM1_Init>
  MX_TIM4_Init();
 8003b14:	f000 fb70 	bl	80041f8 <MX_TIM4_Init>
  MX_TIM8_Init();
 8003b18:	f000 fc3c 	bl	8004394 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 8003b1c:	f000 fd52 	bl	80045c4 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8003b20:	f00a fa26 	bl	800df70 <MX_FATFS_Init>
  MX_TIM6_Init();
 8003b24:	f000 fbcc 	bl	80042c0 <MX_TIM6_Init>
  MX_I2C1_Init();
 8003b28:	f000 f9a8 	bl	8003e7c <MX_I2C1_Init>
  MX_TIM3_Init();
 8003b2c:	f000 fb00 	bl	8004130 <MX_TIM3_Init>
  MX_TIM10_Init();
 8003b30:	f000 fc88 	bl	8004444 <MX_TIM10_Init>
  MX_TIM11_Init();
 8003b34:	f000 fcd4 	bl	80044e0 <MX_TIM11_Init>
  MX_ADC2_Init();
 8003b38:	f000 f898 	bl	8003c6c <MX_ADC2_Init>
  MX_TIM7_Init();
 8003b3c:	f000 fbf6 	bl	800432c <MX_TIM7_Init>
  MX_TIM13_Init();
 8003b40:	f000 fd1c 	bl	800457c <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  init();
 8003b44:	f7ff ffb6 	bl	8003ab4 <init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  cppLoop();
 8003b48:	f001 feae 	bl	80058a8 <cppLoop>
 8003b4c:	e7fc      	b.n	8003b48 <main+0x58>
	...

08003b50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b0a4      	sub	sp, #144	; 0x90
 8003b54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003b56:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003b5a:	2234      	movs	r2, #52	; 0x34
 8003b5c:	2100      	movs	r1, #0
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f00e fe51 	bl	8012806 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003b64:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003b68:	2200      	movs	r2, #0
 8003b6a:	601a      	str	r2, [r3, #0]
 8003b6c:	605a      	str	r2, [r3, #4]
 8003b6e:	609a      	str	r2, [r3, #8]
 8003b70:	60da      	str	r2, [r3, #12]
 8003b72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003b74:	f107 030c 	add.w	r3, r7, #12
 8003b78:	223c      	movs	r2, #60	; 0x3c
 8003b7a:	2100      	movs	r1, #0
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f00e fe42 	bl	8012806 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b82:	2300      	movs	r3, #0
 8003b84:	60bb      	str	r3, [r7, #8]
 8003b86:	4b37      	ldr	r3, [pc, #220]	; (8003c64 <SystemClock_Config+0x114>)
 8003b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8a:	4a36      	ldr	r2, [pc, #216]	; (8003c64 <SystemClock_Config+0x114>)
 8003b8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b90:	6413      	str	r3, [r2, #64]	; 0x40
 8003b92:	4b34      	ldr	r3, [pc, #208]	; (8003c64 <SystemClock_Config+0x114>)
 8003b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b9a:	60bb      	str	r3, [r7, #8]
 8003b9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	607b      	str	r3, [r7, #4]
 8003ba2:	4b31      	ldr	r3, [pc, #196]	; (8003c68 <SystemClock_Config+0x118>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a30      	ldr	r2, [pc, #192]	; (8003c68 <SystemClock_Config+0x118>)
 8003ba8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003bac:	6013      	str	r3, [r2, #0]
 8003bae:	4b2e      	ldr	r3, [pc, #184]	; (8003c68 <SystemClock_Config+0x118>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003bb6:	607b      	str	r3, [r7, #4]
 8003bb8:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003bbe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003bc2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003bc4:	2302      	movs	r3, #2
 8003bc6:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003bc8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003bcc:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003bce:	2308      	movs	r3, #8
 8003bd0:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8003bd2:	23b4      	movs	r3, #180	; 0xb4
 8003bd4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003bd8:	2302      	movs	r3, #2
 8003bda:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8003bde:	2308      	movs	r3, #8
 8003be0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003be4:	2302      	movs	r3, #2
 8003be6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003bea:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f005 ff42 	bl	8009a78 <HAL_RCC_OscConfig>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d001      	beq.n	8003bfe <SystemClock_Config+0xae>
  {
    Error_Handler();
 8003bfa:	f000 fe93 	bl	8004924 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003bfe:	f005 fabd 	bl	800917c <HAL_PWREx_EnableOverDrive>
 8003c02:	4603      	mov	r3, r0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d001      	beq.n	8003c0c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8003c08:	f000 fe8c 	bl	8004924 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003c0c:	230f      	movs	r3, #15
 8003c0e:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003c10:	2302      	movs	r3, #2
 8003c12:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003c14:	2300      	movs	r3, #0
 8003c16:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003c18:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003c1c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003c1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c22:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003c24:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003c28:	2105      	movs	r1, #5
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f005 faf6 	bl	800921c <HAL_RCC_ClockConfig>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d001      	beq.n	8003c3a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8003c36:	f000 fe75 	bl	8004924 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8003c3a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003c3e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8003c40:	2300      	movs	r3, #0
 8003c42:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8003c44:	2300      	movs	r3, #0
 8003c46:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003c48:	f107 030c 	add.w	r3, r7, #12
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f005 fcd5 	bl	80095fc <HAL_RCCEx_PeriphCLKConfig>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d001      	beq.n	8003c5c <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8003c58:	f000 fe64 	bl	8004924 <Error_Handler>
  }
}
 8003c5c:	bf00      	nop
 8003c5e:	3790      	adds	r7, #144	; 0x90
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	40023800 	.word	0x40023800
 8003c68:	40007000 	.word	0x40007000

08003c6c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003c72:	463b      	mov	r3, r7
 8003c74:	2200      	movs	r2, #0
 8003c76:	601a      	str	r2, [r3, #0]
 8003c78:	605a      	str	r2, [r3, #4]
 8003c7a:	609a      	str	r2, [r3, #8]
 8003c7c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8003c7e:	4b7c      	ldr	r3, [pc, #496]	; (8003e70 <MX_ADC2_Init+0x204>)
 8003c80:	4a7c      	ldr	r2, [pc, #496]	; (8003e74 <MX_ADC2_Init+0x208>)
 8003c82:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003c84:	4b7a      	ldr	r3, [pc, #488]	; (8003e70 <MX_ADC2_Init+0x204>)
 8003c86:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003c8a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8003c8c:	4b78      	ldr	r3, [pc, #480]	; (8003e70 <MX_ADC2_Init+0x204>)
 8003c8e:	2200      	movs	r2, #0
 8003c90:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8003c92:	4b77      	ldr	r3, [pc, #476]	; (8003e70 <MX_ADC2_Init+0x204>)
 8003c94:	2201      	movs	r2, #1
 8003c96:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8003c98:	4b75      	ldr	r3, [pc, #468]	; (8003e70 <MX_ADC2_Init+0x204>)
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003c9e:	4b74      	ldr	r3, [pc, #464]	; (8003e70 <MX_ADC2_Init+0x204>)
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003ca6:	4b72      	ldr	r3, [pc, #456]	; (8003e70 <MX_ADC2_Init+0x204>)
 8003ca8:	2200      	movs	r2, #0
 8003caa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003cac:	4b70      	ldr	r3, [pc, #448]	; (8003e70 <MX_ADC2_Init+0x204>)
 8003cae:	4a72      	ldr	r2, [pc, #456]	; (8003e78 <MX_ADC2_Init+0x20c>)
 8003cb0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003cb2:	4b6f      	ldr	r3, [pc, #444]	; (8003e70 <MX_ADC2_Init+0x204>)
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 14;
 8003cb8:	4b6d      	ldr	r3, [pc, #436]	; (8003e70 <MX_ADC2_Init+0x204>)
 8003cba:	220e      	movs	r2, #14
 8003cbc:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8003cbe:	4b6c      	ldr	r3, [pc, #432]	; (8003e70 <MX_ADC2_Init+0x204>)
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003cc6:	4b6a      	ldr	r3, [pc, #424]	; (8003e70 <MX_ADC2_Init+0x204>)
 8003cc8:	2201      	movs	r2, #1
 8003cca:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003ccc:	4868      	ldr	r0, [pc, #416]	; (8003e70 <MX_ADC2_Init+0x204>)
 8003cce:	f003 f825 	bl	8006d1c <HAL_ADC_Init>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d001      	beq.n	8003cdc <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8003cd8:	f000 fe24 	bl	8004924 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8003cdc:	230a      	movs	r3, #10
 8003cde:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8003ce4:	2306      	movs	r3, #6
 8003ce6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003ce8:	463b      	mov	r3, r7
 8003cea:	4619      	mov	r1, r3
 8003cec:	4860      	ldr	r0, [pc, #384]	; (8003e70 <MX_ADC2_Init+0x204>)
 8003cee:	f003 f969 	bl	8006fc4 <HAL_ADC_ConfigChannel>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d001      	beq.n	8003cfc <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8003cf8:	f000 fe14 	bl	8004924 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8003cfc:	230b      	movs	r3, #11
 8003cfe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8003d00:	2302      	movs	r3, #2
 8003d02:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003d04:	463b      	mov	r3, r7
 8003d06:	4619      	mov	r1, r3
 8003d08:	4859      	ldr	r0, [pc, #356]	; (8003e70 <MX_ADC2_Init+0x204>)
 8003d0a:	f003 f95b 	bl	8006fc4 <HAL_ADC_ConfigChannel>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d001      	beq.n	8003d18 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8003d14:	f000 fe06 	bl	8004924 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8003d18:	230c      	movs	r3, #12
 8003d1a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003d20:	463b      	mov	r3, r7
 8003d22:	4619      	mov	r1, r3
 8003d24:	4852      	ldr	r0, [pc, #328]	; (8003e70 <MX_ADC2_Init+0x204>)
 8003d26:	f003 f94d 	bl	8006fc4 <HAL_ADC_ConfigChannel>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d001      	beq.n	8003d34 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8003d30:	f000 fdf8 	bl	8004924 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8003d34:	230d      	movs	r3, #13
 8003d36:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8003d38:	2304      	movs	r3, #4
 8003d3a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003d3c:	463b      	mov	r3, r7
 8003d3e:	4619      	mov	r1, r3
 8003d40:	484b      	ldr	r0, [pc, #300]	; (8003e70 <MX_ADC2_Init+0x204>)
 8003d42:	f003 f93f 	bl	8006fc4 <HAL_ADC_ConfigChannel>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d001      	beq.n	8003d50 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8003d4c:	f000 fdea 	bl	8004924 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003d50:	2300      	movs	r3, #0
 8003d52:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8003d54:	2305      	movs	r3, #5
 8003d56:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003d58:	463b      	mov	r3, r7
 8003d5a:	4619      	mov	r1, r3
 8003d5c:	4844      	ldr	r0, [pc, #272]	; (8003e70 <MX_ADC2_Init+0x204>)
 8003d5e:	f003 f931 	bl	8006fc4 <HAL_ADC_ConfigChannel>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d001      	beq.n	8003d6c <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8003d68:	f000 fddc 	bl	8004924 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8003d70:	2306      	movs	r3, #6
 8003d72:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003d74:	463b      	mov	r3, r7
 8003d76:	4619      	mov	r1, r3
 8003d78:	483d      	ldr	r0, [pc, #244]	; (8003e70 <MX_ADC2_Init+0x204>)
 8003d7a:	f003 f923 	bl	8006fc4 <HAL_ADC_ConfigChannel>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d001      	beq.n	8003d88 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 8003d84:	f000 fdce 	bl	8004924 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8003d88:	2302      	movs	r3, #2
 8003d8a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8003d8c:	2307      	movs	r3, #7
 8003d8e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003d90:	463b      	mov	r3, r7
 8003d92:	4619      	mov	r1, r3
 8003d94:	4836      	ldr	r0, [pc, #216]	; (8003e70 <MX_ADC2_Init+0x204>)
 8003d96:	f003 f915 	bl	8006fc4 <HAL_ADC_ConfigChannel>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d001      	beq.n	8003da4 <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 8003da0:	f000 fdc0 	bl	8004924 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003da4:	2303      	movs	r3, #3
 8003da6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8003da8:	2308      	movs	r3, #8
 8003daa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003dac:	463b      	mov	r3, r7
 8003dae:	4619      	mov	r1, r3
 8003db0:	482f      	ldr	r0, [pc, #188]	; (8003e70 <MX_ADC2_Init+0x204>)
 8003db2:	f003 f907 	bl	8006fc4 <HAL_ADC_ConfigChannel>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d001      	beq.n	8003dc0 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 8003dbc:	f000 fdb2 	bl	8004924 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8003dc0:	2304      	movs	r3, #4
 8003dc2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8003dc4:	2309      	movs	r3, #9
 8003dc6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003dc8:	463b      	mov	r3, r7
 8003dca:	4619      	mov	r1, r3
 8003dcc:	4828      	ldr	r0, [pc, #160]	; (8003e70 <MX_ADC2_Init+0x204>)
 8003dce:	f003 f8f9 	bl	8006fc4 <HAL_ADC_ConfigChannel>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d001      	beq.n	8003ddc <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 8003dd8:	f000 fda4 	bl	8004924 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8003ddc:	2305      	movs	r3, #5
 8003dde:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8003de0:	230a      	movs	r3, #10
 8003de2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003de4:	463b      	mov	r3, r7
 8003de6:	4619      	mov	r1, r3
 8003de8:	4821      	ldr	r0, [pc, #132]	; (8003e70 <MX_ADC2_Init+0x204>)
 8003dea:	f003 f8eb 	bl	8006fc4 <HAL_ADC_ConfigChannel>
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d001      	beq.n	8003df8 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 8003df4:	f000 fd96 	bl	8004924 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8003df8:	2306      	movs	r3, #6
 8003dfa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8003dfc:	230b      	movs	r3, #11
 8003dfe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003e00:	463b      	mov	r3, r7
 8003e02:	4619      	mov	r1, r3
 8003e04:	481a      	ldr	r0, [pc, #104]	; (8003e70 <MX_ADC2_Init+0x204>)
 8003e06:	f003 f8dd 	bl	8006fc4 <HAL_ADC_ConfigChannel>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d001      	beq.n	8003e14 <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 8003e10:	f000 fd88 	bl	8004924 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8003e14:	2307      	movs	r3, #7
 8003e16:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8003e18:	230c      	movs	r3, #12
 8003e1a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003e1c:	463b      	mov	r3, r7
 8003e1e:	4619      	mov	r1, r3
 8003e20:	4813      	ldr	r0, [pc, #76]	; (8003e70 <MX_ADC2_Init+0x204>)
 8003e22:	f003 f8cf 	bl	8006fc4 <HAL_ADC_ConfigChannel>
 8003e26:	4603      	mov	r3, r0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d001      	beq.n	8003e30 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 8003e2c:	f000 fd7a 	bl	8004924 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8003e30:	2308      	movs	r3, #8
 8003e32:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8003e34:	230d      	movs	r3, #13
 8003e36:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003e38:	463b      	mov	r3, r7
 8003e3a:	4619      	mov	r1, r3
 8003e3c:	480c      	ldr	r0, [pc, #48]	; (8003e70 <MX_ADC2_Init+0x204>)
 8003e3e:	f003 f8c1 	bl	8006fc4 <HAL_ADC_ConfigChannel>
 8003e42:	4603      	mov	r3, r0
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d001      	beq.n	8003e4c <MX_ADC2_Init+0x1e0>
  {
    Error_Handler();
 8003e48:	f000 fd6c 	bl	8004924 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8003e4c:	2309      	movs	r3, #9
 8003e4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8003e50:	230e      	movs	r3, #14
 8003e52:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003e54:	463b      	mov	r3, r7
 8003e56:	4619      	mov	r1, r3
 8003e58:	4805      	ldr	r0, [pc, #20]	; (8003e70 <MX_ADC2_Init+0x204>)
 8003e5a:	f003 f8b3 	bl	8006fc4 <HAL_ADC_ConfigChannel>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d001      	beq.n	8003e68 <MX_ADC2_Init+0x1fc>
  {
    Error_Handler();
 8003e64:	f000 fd5e 	bl	8004924 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8003e68:	bf00      	nop
 8003e6a:	3710      	adds	r7, #16
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	20039870 	.word	0x20039870
 8003e74:	40012100 	.word	0x40012100
 8003e78:	0f000001 	.word	0x0f000001

08003e7c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003e80:	4b12      	ldr	r3, [pc, #72]	; (8003ecc <MX_I2C1_Init+0x50>)
 8003e82:	4a13      	ldr	r2, [pc, #76]	; (8003ed0 <MX_I2C1_Init+0x54>)
 8003e84:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003e86:	4b11      	ldr	r3, [pc, #68]	; (8003ecc <MX_I2C1_Init+0x50>)
 8003e88:	4a12      	ldr	r2, [pc, #72]	; (8003ed4 <MX_I2C1_Init+0x58>)
 8003e8a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003e8c:	4b0f      	ldr	r3, [pc, #60]	; (8003ecc <MX_I2C1_Init+0x50>)
 8003e8e:	2200      	movs	r2, #0
 8003e90:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003e92:	4b0e      	ldr	r3, [pc, #56]	; (8003ecc <MX_I2C1_Init+0x50>)
 8003e94:	2200      	movs	r2, #0
 8003e96:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003e98:	4b0c      	ldr	r3, [pc, #48]	; (8003ecc <MX_I2C1_Init+0x50>)
 8003e9a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003e9e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003ea0:	4b0a      	ldr	r3, [pc, #40]	; (8003ecc <MX_I2C1_Init+0x50>)
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003ea6:	4b09      	ldr	r3, [pc, #36]	; (8003ecc <MX_I2C1_Init+0x50>)
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003eac:	4b07      	ldr	r3, [pc, #28]	; (8003ecc <MX_I2C1_Init+0x50>)
 8003eae:	2200      	movs	r2, #0
 8003eb0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8003eb2:	4b06      	ldr	r3, [pc, #24]	; (8003ecc <MX_I2C1_Init+0x50>)
 8003eb4:	2280      	movs	r2, #128	; 0x80
 8003eb6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003eb8:	4804      	ldr	r0, [pc, #16]	; (8003ecc <MX_I2C1_Init+0x50>)
 8003eba:	f004 f9d5 	bl	8008268 <HAL_I2C_Init>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d001      	beq.n	8003ec8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003ec4:	f000 fd2e 	bl	8004924 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003ec8:	bf00      	nop
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	200398b8 	.word	0x200398b8
 8003ed0:	40005400 	.word	0x40005400
 8003ed4:	000186a0 	.word	0x000186a0

08003ed8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003edc:	4b12      	ldr	r3, [pc, #72]	; (8003f28 <MX_I2C2_Init+0x50>)
 8003ede:	4a13      	ldr	r2, [pc, #76]	; (8003f2c <MX_I2C2_Init+0x54>)
 8003ee0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8003ee2:	4b11      	ldr	r3, [pc, #68]	; (8003f28 <MX_I2C2_Init+0x50>)
 8003ee4:	4a12      	ldr	r2, [pc, #72]	; (8003f30 <MX_I2C2_Init+0x58>)
 8003ee6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003ee8:	4b0f      	ldr	r3, [pc, #60]	; (8003f28 <MX_I2C2_Init+0x50>)
 8003eea:	2200      	movs	r2, #0
 8003eec:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8003eee:	4b0e      	ldr	r3, [pc, #56]	; (8003f28 <MX_I2C2_Init+0x50>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003ef4:	4b0c      	ldr	r3, [pc, #48]	; (8003f28 <MX_I2C2_Init+0x50>)
 8003ef6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003efa:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003efc:	4b0a      	ldr	r3, [pc, #40]	; (8003f28 <MX_I2C2_Init+0x50>)
 8003efe:	2200      	movs	r2, #0
 8003f00:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8003f02:	4b09      	ldr	r3, [pc, #36]	; (8003f28 <MX_I2C2_Init+0x50>)
 8003f04:	2200      	movs	r2, #0
 8003f06:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003f08:	4b07      	ldr	r3, [pc, #28]	; (8003f28 <MX_I2C2_Init+0x50>)
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8003f0e:	4b06      	ldr	r3, [pc, #24]	; (8003f28 <MX_I2C2_Init+0x50>)
 8003f10:	2280      	movs	r2, #128	; 0x80
 8003f12:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003f14:	4804      	ldr	r0, [pc, #16]	; (8003f28 <MX_I2C2_Init+0x50>)
 8003f16:	f004 f9a7 	bl	8008268 <HAL_I2C_Init>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d001      	beq.n	8003f24 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8003f20:	f000 fd00 	bl	8004924 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003f24:	bf00      	nop
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	2003994c 	.word	0x2003994c
 8003f2c:	40005800 	.word	0x40005800
 8003f30:	000186a0 	.word	0x000186a0

08003f34 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8003f34:	b480      	push	{r7}
 8003f36:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8003f38:	4b0c      	ldr	r3, [pc, #48]	; (8003f6c <MX_SDIO_SD_Init+0x38>)
 8003f3a:	4a0d      	ldr	r2, [pc, #52]	; (8003f70 <MX_SDIO_SD_Init+0x3c>)
 8003f3c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8003f3e:	4b0b      	ldr	r3, [pc, #44]	; (8003f6c <MX_SDIO_SD_Init+0x38>)
 8003f40:	2200      	movs	r2, #0
 8003f42:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8003f44:	4b09      	ldr	r3, [pc, #36]	; (8003f6c <MX_SDIO_SD_Init+0x38>)
 8003f46:	2200      	movs	r2, #0
 8003f48:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003f4a:	4b08      	ldr	r3, [pc, #32]	; (8003f6c <MX_SDIO_SD_Init+0x38>)
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8003f50:	4b06      	ldr	r3, [pc, #24]	; (8003f6c <MX_SDIO_SD_Init+0x38>)
 8003f52:	2200      	movs	r2, #0
 8003f54:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003f56:	4b05      	ldr	r3, [pc, #20]	; (8003f6c <MX_SDIO_SD_Init+0x38>)
 8003f58:	2200      	movs	r2, #0
 8003f5a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8003f5c:	4b03      	ldr	r3, [pc, #12]	; (8003f6c <MX_SDIO_SD_Init+0x38>)
 8003f5e:	2200      	movs	r2, #0
 8003f60:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8003f62:	bf00      	nop
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr
 8003f6c:	20039b4c 	.word	0x20039b4c
 8003f70:	40012c00 	.word	0x40012c00

08003f74 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003f78:	4b17      	ldr	r3, [pc, #92]	; (8003fd8 <MX_SPI2_Init+0x64>)
 8003f7a:	4a18      	ldr	r2, [pc, #96]	; (8003fdc <MX_SPI2_Init+0x68>)
 8003f7c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003f7e:	4b16      	ldr	r3, [pc, #88]	; (8003fd8 <MX_SPI2_Init+0x64>)
 8003f80:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003f84:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003f86:	4b14      	ldr	r3, [pc, #80]	; (8003fd8 <MX_SPI2_Init+0x64>)
 8003f88:	2200      	movs	r2, #0
 8003f8a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003f8c:	4b12      	ldr	r3, [pc, #72]	; (8003fd8 <MX_SPI2_Init+0x64>)
 8003f8e:	2200      	movs	r2, #0
 8003f90:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003f92:	4b11      	ldr	r3, [pc, #68]	; (8003fd8 <MX_SPI2_Init+0x64>)
 8003f94:	2202      	movs	r2, #2
 8003f96:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003f98:	4b0f      	ldr	r3, [pc, #60]	; (8003fd8 <MX_SPI2_Init+0x64>)
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003f9e:	4b0e      	ldr	r3, [pc, #56]	; (8003fd8 <MX_SPI2_Init+0x64>)
 8003fa0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fa4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003fa6:	4b0c      	ldr	r3, [pc, #48]	; (8003fd8 <MX_SPI2_Init+0x64>)
 8003fa8:	2228      	movs	r2, #40	; 0x28
 8003faa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003fac:	4b0a      	ldr	r3, [pc, #40]	; (8003fd8 <MX_SPI2_Init+0x64>)
 8003fae:	2200      	movs	r2, #0
 8003fb0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003fb2:	4b09      	ldr	r3, [pc, #36]	; (8003fd8 <MX_SPI2_Init+0x64>)
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003fb8:	4b07      	ldr	r3, [pc, #28]	; (8003fd8 <MX_SPI2_Init+0x64>)
 8003fba:	2200      	movs	r2, #0
 8003fbc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003fbe:	4b06      	ldr	r3, [pc, #24]	; (8003fd8 <MX_SPI2_Init+0x64>)
 8003fc0:	220a      	movs	r2, #10
 8003fc2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003fc4:	4804      	ldr	r0, [pc, #16]	; (8003fd8 <MX_SPI2_Init+0x64>)
 8003fc6:	f007 fa81 	bl	800b4cc <HAL_SPI_Init>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d001      	beq.n	8003fd4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003fd0:	f000 fca8 	bl	8004924 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003fd4:	bf00      	nop
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	20039798 	.word	0x20039798
 8003fdc:	40003800 	.word	0x40003800

08003fe0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b09a      	sub	sp, #104	; 0x68
 8003fe4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003fe6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003fea:	2224      	movs	r2, #36	; 0x24
 8003fec:	2100      	movs	r1, #0
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f00e fc09 	bl	8012806 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ff4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	601a      	str	r2, [r3, #0]
 8003ffc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003ffe:	f107 0320 	add.w	r3, r7, #32
 8004002:	2200      	movs	r2, #0
 8004004:	601a      	str	r2, [r3, #0]
 8004006:	605a      	str	r2, [r3, #4]
 8004008:	609a      	str	r2, [r3, #8]
 800400a:	60da      	str	r2, [r3, #12]
 800400c:	611a      	str	r2, [r3, #16]
 800400e:	615a      	str	r2, [r3, #20]
 8004010:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004012:	463b      	mov	r3, r7
 8004014:	2220      	movs	r2, #32
 8004016:	2100      	movs	r1, #0
 8004018:	4618      	mov	r0, r3
 800401a:	f00e fbf4 	bl	8012806 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800401e:	4b42      	ldr	r3, [pc, #264]	; (8004128 <MX_TIM1_Init+0x148>)
 8004020:	4a42      	ldr	r2, [pc, #264]	; (800412c <MX_TIM1_Init+0x14c>)
 8004022:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004024:	4b40      	ldr	r3, [pc, #256]	; (8004128 <MX_TIM1_Init+0x148>)
 8004026:	2200      	movs	r2, #0
 8004028:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800402a:	4b3f      	ldr	r3, [pc, #252]	; (8004128 <MX_TIM1_Init+0x148>)
 800402c:	2200      	movs	r2, #0
 800402e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8004030:	4b3d      	ldr	r3, [pc, #244]	; (8004128 <MX_TIM1_Init+0x148>)
 8004032:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004036:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004038:	4b3b      	ldr	r3, [pc, #236]	; (8004128 <MX_TIM1_Init+0x148>)
 800403a:	2200      	movs	r2, #0
 800403c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800403e:	4b3a      	ldr	r3, [pc, #232]	; (8004128 <MX_TIM1_Init+0x148>)
 8004040:	2200      	movs	r2, #0
 8004042:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004044:	4b38      	ldr	r3, [pc, #224]	; (8004128 <MX_TIM1_Init+0x148>)
 8004046:	2200      	movs	r2, #0
 8004048:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800404a:	4837      	ldr	r0, [pc, #220]	; (8004128 <MX_TIM1_Init+0x148>)
 800404c:	f007 ffe1 	bl	800c012 <HAL_TIM_PWM_Init>
 8004050:	4603      	mov	r3, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d001      	beq.n	800405a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8004056:	f000 fc65 	bl	8004924 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800405a:	2303      	movs	r3, #3
 800405c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800405e:	2300      	movs	r3, #0
 8004060:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004062:	2301      	movs	r3, #1
 8004064:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004066:	2300      	movs	r3, #0
 8004068:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 800406a:	2300      	movs	r3, #0
 800406c:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800406e:	2300      	movs	r3, #0
 8004070:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004072:	2301      	movs	r3, #1
 8004074:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004076:	2300      	movs	r3, #0
 8004078:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 800407a:	2300      	movs	r3, #0
 800407c:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800407e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004082:	4619      	mov	r1, r3
 8004084:	4828      	ldr	r0, [pc, #160]	; (8004128 <MX_TIM1_Init+0x148>)
 8004086:	f008 f82d 	bl	800c0e4 <HAL_TIM_Encoder_Init>
 800408a:	4603      	mov	r3, r0
 800408c:	2b00      	cmp	r3, #0
 800408e:	d001      	beq.n	8004094 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8004090:	f000 fc48 	bl	8004924 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004094:	2300      	movs	r3, #0
 8004096:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004098:	2300      	movs	r3, #0
 800409a:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800409c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80040a0:	4619      	mov	r1, r3
 80040a2:	4821      	ldr	r0, [pc, #132]	; (8004128 <MX_TIM1_Init+0x148>)
 80040a4:	f008 fd54 	bl	800cb50 <HAL_TIMEx_MasterConfigSynchronization>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d001      	beq.n	80040b2 <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 80040ae:	f000 fc39 	bl	8004924 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80040b2:	2360      	movs	r3, #96	; 0x60
 80040b4:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 80040b6:	2300      	movs	r3, #0
 80040b8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80040ba:	2300      	movs	r3, #0
 80040bc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80040be:	2300      	movs	r3, #0
 80040c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80040c2:	2300      	movs	r3, #0
 80040c4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80040c6:	2300      	movs	r3, #0
 80040c8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80040ca:	2300      	movs	r3, #0
 80040cc:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80040ce:	f107 0320 	add.w	r3, r7, #32
 80040d2:	2208      	movs	r2, #8
 80040d4:	4619      	mov	r1, r3
 80040d6:	4814      	ldr	r0, [pc, #80]	; (8004128 <MX_TIM1_Init+0x148>)
 80040d8:	f008 f9d6 	bl	800c488 <HAL_TIM_PWM_ConfigChannel>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d001      	beq.n	80040e6 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 80040e2:	f000 fc1f 	bl	8004924 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80040e6:	2300      	movs	r3, #0
 80040e8:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80040ea:	2300      	movs	r3, #0
 80040ec:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80040ee:	2300      	movs	r3, #0
 80040f0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80040f2:	2300      	movs	r3, #0
 80040f4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80040f6:	2300      	movs	r3, #0
 80040f8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80040fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80040fe:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004100:	2300      	movs	r3, #0
 8004102:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004104:	463b      	mov	r3, r7
 8004106:	4619      	mov	r1, r3
 8004108:	4807      	ldr	r0, [pc, #28]	; (8004128 <MX_TIM1_Init+0x148>)
 800410a:	f008 fd9d 	bl	800cc48 <HAL_TIMEx_ConfigBreakDeadTime>
 800410e:	4603      	mov	r3, r0
 8004110:	2b00      	cmp	r3, #0
 8004112:	d001      	beq.n	8004118 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8004114:	f000 fc06 	bl	8004924 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004118:	4803      	ldr	r0, [pc, #12]	; (8004128 <MX_TIM1_Init+0x148>)
 800411a:	f000 fff3 	bl	8005104 <HAL_TIM_MspPostInit>

}
 800411e:	bf00      	nop
 8004120:	3768      	adds	r7, #104	; 0x68
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	20039b0c 	.word	0x20039b0c
 800412c:	40010000 	.word	0x40010000

08004130 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b08a      	sub	sp, #40	; 0x28
 8004134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004136:	f107 0320 	add.w	r3, r7, #32
 800413a:	2200      	movs	r2, #0
 800413c:	601a      	str	r2, [r3, #0]
 800413e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004140:	1d3b      	adds	r3, r7, #4
 8004142:	2200      	movs	r2, #0
 8004144:	601a      	str	r2, [r3, #0]
 8004146:	605a      	str	r2, [r3, #4]
 8004148:	609a      	str	r2, [r3, #8]
 800414a:	60da      	str	r2, [r3, #12]
 800414c:	611a      	str	r2, [r3, #16]
 800414e:	615a      	str	r2, [r3, #20]
 8004150:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004152:	4b27      	ldr	r3, [pc, #156]	; (80041f0 <MX_TIM3_Init+0xc0>)
 8004154:	4a27      	ldr	r2, [pc, #156]	; (80041f4 <MX_TIM3_Init+0xc4>)
 8004156:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004158:	4b25      	ldr	r3, [pc, #148]	; (80041f0 <MX_TIM3_Init+0xc0>)
 800415a:	2200      	movs	r2, #0
 800415c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800415e:	4b24      	ldr	r3, [pc, #144]	; (80041f0 <MX_TIM3_Init+0xc0>)
 8004160:	2200      	movs	r2, #0
 8004162:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004164:	4b22      	ldr	r3, [pc, #136]	; (80041f0 <MX_TIM3_Init+0xc0>)
 8004166:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800416a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800416c:	4b20      	ldr	r3, [pc, #128]	; (80041f0 <MX_TIM3_Init+0xc0>)
 800416e:	2200      	movs	r2, #0
 8004170:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004172:	4b1f      	ldr	r3, [pc, #124]	; (80041f0 <MX_TIM3_Init+0xc0>)
 8004174:	2200      	movs	r2, #0
 8004176:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004178:	481d      	ldr	r0, [pc, #116]	; (80041f0 <MX_TIM3_Init+0xc0>)
 800417a:	f007 ff4a 	bl	800c012 <HAL_TIM_PWM_Init>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d001      	beq.n	8004188 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8004184:	f000 fbce 	bl	8004924 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004188:	2300      	movs	r3, #0
 800418a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800418c:	2300      	movs	r3, #0
 800418e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004190:	f107 0320 	add.w	r3, r7, #32
 8004194:	4619      	mov	r1, r3
 8004196:	4816      	ldr	r0, [pc, #88]	; (80041f0 <MX_TIM3_Init+0xc0>)
 8004198:	f008 fcda 	bl	800cb50 <HAL_TIMEx_MasterConfigSynchronization>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d001      	beq.n	80041a6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80041a2:	f000 fbbf 	bl	8004924 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80041a6:	2360      	movs	r3, #96	; 0x60
 80041a8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80041aa:	2300      	movs	r3, #0
 80041ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80041ae:	2300      	movs	r3, #0
 80041b0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80041b2:	2300      	movs	r3, #0
 80041b4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80041b6:	1d3b      	adds	r3, r7, #4
 80041b8:	2200      	movs	r2, #0
 80041ba:	4619      	mov	r1, r3
 80041bc:	480c      	ldr	r0, [pc, #48]	; (80041f0 <MX_TIM3_Init+0xc0>)
 80041be:	f008 f963 	bl	800c488 <HAL_TIM_PWM_ConfigChannel>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d001      	beq.n	80041cc <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80041c8:	f000 fbac 	bl	8004924 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80041cc:	1d3b      	adds	r3, r7, #4
 80041ce:	2204      	movs	r2, #4
 80041d0:	4619      	mov	r1, r3
 80041d2:	4807      	ldr	r0, [pc, #28]	; (80041f0 <MX_TIM3_Init+0xc0>)
 80041d4:	f008 f958 	bl	800c488 <HAL_TIM_PWM_ConfigChannel>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d001      	beq.n	80041e2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80041de:	f000 fba1 	bl	8004924 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80041e2:	4803      	ldr	r0, [pc, #12]	; (80041f0 <MX_TIM3_Init+0xc0>)
 80041e4:	f000 ff8e 	bl	8005104 <HAL_TIM_MspPostInit>

}
 80041e8:	bf00      	nop
 80041ea:	3728      	adds	r7, #40	; 0x28
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	200399a4 	.word	0x200399a4
 80041f4:	40000400 	.word	0x40000400

080041f8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b08a      	sub	sp, #40	; 0x28
 80041fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80041fe:	f107 0320 	add.w	r3, r7, #32
 8004202:	2200      	movs	r2, #0
 8004204:	601a      	str	r2, [r3, #0]
 8004206:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004208:	1d3b      	adds	r3, r7, #4
 800420a:	2200      	movs	r2, #0
 800420c:	601a      	str	r2, [r3, #0]
 800420e:	605a      	str	r2, [r3, #4]
 8004210:	609a      	str	r2, [r3, #8]
 8004212:	60da      	str	r2, [r3, #12]
 8004214:	611a      	str	r2, [r3, #16]
 8004216:	615a      	str	r2, [r3, #20]
 8004218:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800421a:	4b27      	ldr	r3, [pc, #156]	; (80042b8 <MX_TIM4_Init+0xc0>)
 800421c:	4a27      	ldr	r2, [pc, #156]	; (80042bc <MX_TIM4_Init+0xc4>)
 800421e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8004220:	4b25      	ldr	r3, [pc, #148]	; (80042b8 <MX_TIM4_Init+0xc0>)
 8004222:	2200      	movs	r2, #0
 8004224:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004226:	4b24      	ldr	r3, [pc, #144]	; (80042b8 <MX_TIM4_Init+0xc0>)
 8004228:	2200      	movs	r2, #0
 800422a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 800422c:	4b22      	ldr	r3, [pc, #136]	; (80042b8 <MX_TIM4_Init+0xc0>)
 800422e:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8004232:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004234:	4b20      	ldr	r3, [pc, #128]	; (80042b8 <MX_TIM4_Init+0xc0>)
 8004236:	2200      	movs	r2, #0
 8004238:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800423a:	4b1f      	ldr	r3, [pc, #124]	; (80042b8 <MX_TIM4_Init+0xc0>)
 800423c:	2200      	movs	r2, #0
 800423e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8004240:	481d      	ldr	r0, [pc, #116]	; (80042b8 <MX_TIM4_Init+0xc0>)
 8004242:	f007 fee6 	bl	800c012 <HAL_TIM_PWM_Init>
 8004246:	4603      	mov	r3, r0
 8004248:	2b00      	cmp	r3, #0
 800424a:	d001      	beq.n	8004250 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 800424c:	f000 fb6a 	bl	8004924 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004250:	2300      	movs	r3, #0
 8004252:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004254:	2300      	movs	r3, #0
 8004256:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004258:	f107 0320 	add.w	r3, r7, #32
 800425c:	4619      	mov	r1, r3
 800425e:	4816      	ldr	r0, [pc, #88]	; (80042b8 <MX_TIM4_Init+0xc0>)
 8004260:	f008 fc76 	bl	800cb50 <HAL_TIMEx_MasterConfigSynchronization>
 8004264:	4603      	mov	r3, r0
 8004266:	2b00      	cmp	r3, #0
 8004268:	d001      	beq.n	800426e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800426a:	f000 fb5b 	bl	8004924 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800426e:	2360      	movs	r3, #96	; 0x60
 8004270:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004272:	2300      	movs	r3, #0
 8004274:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004276:	2300      	movs	r3, #0
 8004278:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800427a:	2300      	movs	r3, #0
 800427c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800427e:	1d3b      	adds	r3, r7, #4
 8004280:	2208      	movs	r2, #8
 8004282:	4619      	mov	r1, r3
 8004284:	480c      	ldr	r0, [pc, #48]	; (80042b8 <MX_TIM4_Init+0xc0>)
 8004286:	f008 f8ff 	bl	800c488 <HAL_TIM_PWM_ConfigChannel>
 800428a:	4603      	mov	r3, r0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d001      	beq.n	8004294 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8004290:	f000 fb48 	bl	8004924 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004294:	1d3b      	adds	r3, r7, #4
 8004296:	220c      	movs	r2, #12
 8004298:	4619      	mov	r1, r3
 800429a:	4807      	ldr	r0, [pc, #28]	; (80042b8 <MX_TIM4_Init+0xc0>)
 800429c:	f008 f8f4 	bl	800c488 <HAL_TIM_PWM_ConfigChannel>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d001      	beq.n	80042aa <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80042a6:	f000 fb3d 	bl	8004924 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80042aa:	4803      	ldr	r0, [pc, #12]	; (80042b8 <MX_TIM4_Init+0xc0>)
 80042ac:	f000 ff2a 	bl	8005104 <HAL_TIM_MspPostInit>

}
 80042b0:	bf00      	nop
 80042b2:	3728      	adds	r7, #40	; 0x28
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	20039830 	.word	0x20039830
 80042bc:	40000800 	.word	0x40000800

080042c0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b082      	sub	sp, #8
 80042c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80042c6:	463b      	mov	r3, r7
 80042c8:	2200      	movs	r2, #0
 80042ca:	601a      	str	r2, [r3, #0]
 80042cc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80042ce:	4b15      	ldr	r3, [pc, #84]	; (8004324 <MX_TIM6_Init+0x64>)
 80042d0:	4a15      	ldr	r2, [pc, #84]	; (8004328 <MX_TIM6_Init+0x68>)
 80042d2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 80042d4:	4b13      	ldr	r3, [pc, #76]	; (8004324 <MX_TIM6_Init+0x64>)
 80042d6:	2259      	movs	r2, #89	; 0x59
 80042d8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042da:	4b12      	ldr	r3, [pc, #72]	; (8004324 <MX_TIM6_Init+0x64>)
 80042dc:	2200      	movs	r2, #0
 80042de:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 80042e0:	4b10      	ldr	r3, [pc, #64]	; (8004324 <MX_TIM6_Init+0x64>)
 80042e2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80042e6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80042e8:	4b0e      	ldr	r3, [pc, #56]	; (8004324 <MX_TIM6_Init+0x64>)
 80042ea:	2280      	movs	r2, #128	; 0x80
 80042ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80042ee:	480d      	ldr	r0, [pc, #52]	; (8004324 <MX_TIM6_Init+0x64>)
 80042f0:	f007 fe40 	bl	800bf74 <HAL_TIM_Base_Init>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d001      	beq.n	80042fe <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80042fa:	f000 fb13 	bl	8004924 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80042fe:	2300      	movs	r3, #0
 8004300:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004302:	2300      	movs	r3, #0
 8004304:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004306:	463b      	mov	r3, r7
 8004308:	4619      	mov	r1, r3
 800430a:	4806      	ldr	r0, [pc, #24]	; (8004324 <MX_TIM6_Init+0x64>)
 800430c:	f008 fc20 	bl	800cb50 <HAL_TIMEx_MasterConfigSynchronization>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d001      	beq.n	800431a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8004316:	f000 fb05 	bl	8004924 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800431a:	bf00      	nop
 800431c:	3708      	adds	r7, #8
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	20039acc 	.word	0x20039acc
 8004328:	40001000 	.word	0x40001000

0800432c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b082      	sub	sp, #8
 8004330:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004332:	463b      	mov	r3, r7
 8004334:	2200      	movs	r2, #0
 8004336:	601a      	str	r2, [r3, #0]
 8004338:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800433a:	4b14      	ldr	r3, [pc, #80]	; (800438c <MX_TIM7_Init+0x60>)
 800433c:	4a14      	ldr	r2, [pc, #80]	; (8004390 <MX_TIM7_Init+0x64>)
 800433e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 179;
 8004340:	4b12      	ldr	r3, [pc, #72]	; (800438c <MX_TIM7_Init+0x60>)
 8004342:	22b3      	movs	r2, #179	; 0xb3
 8004344:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004346:	4b11      	ldr	r3, [pc, #68]	; (800438c <MX_TIM7_Init+0x60>)
 8004348:	2200      	movs	r2, #0
 800434a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49;
 800434c:	4b0f      	ldr	r3, [pc, #60]	; (800438c <MX_TIM7_Init+0x60>)
 800434e:	2231      	movs	r2, #49	; 0x31
 8004350:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004352:	4b0e      	ldr	r3, [pc, #56]	; (800438c <MX_TIM7_Init+0x60>)
 8004354:	2280      	movs	r2, #128	; 0x80
 8004356:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004358:	480c      	ldr	r0, [pc, #48]	; (800438c <MX_TIM7_Init+0x60>)
 800435a:	f007 fe0b 	bl	800bf74 <HAL_TIM_Base_Init>
 800435e:	4603      	mov	r3, r0
 8004360:	2b00      	cmp	r3, #0
 8004362:	d001      	beq.n	8004368 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8004364:	f000 fade 	bl	8004924 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004368:	2300      	movs	r3, #0
 800436a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800436c:	2300      	movs	r3, #0
 800436e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004370:	463b      	mov	r3, r7
 8004372:	4619      	mov	r1, r3
 8004374:	4805      	ldr	r0, [pc, #20]	; (800438c <MX_TIM7_Init+0x60>)
 8004376:	f008 fbeb 	bl	800cb50 <HAL_TIMEx_MasterConfigSynchronization>
 800437a:	4603      	mov	r3, r0
 800437c:	2b00      	cmp	r3, #0
 800437e:	d001      	beq.n	8004384 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8004380:	f000 fad0 	bl	8004924 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004384:	bf00      	nop
 8004386:	3708      	adds	r7, #8
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}
 800438c:	20039c70 	.word	0x20039c70
 8004390:	40001400 	.word	0x40001400

08004394 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b08c      	sub	sp, #48	; 0x30
 8004398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800439a:	f107 030c 	add.w	r3, r7, #12
 800439e:	2224      	movs	r2, #36	; 0x24
 80043a0:	2100      	movs	r1, #0
 80043a2:	4618      	mov	r0, r3
 80043a4:	f00e fa2f 	bl	8012806 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80043a8:	1d3b      	adds	r3, r7, #4
 80043aa:	2200      	movs	r2, #0
 80043ac:	601a      	str	r2, [r3, #0]
 80043ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80043b0:	4b22      	ldr	r3, [pc, #136]	; (800443c <MX_TIM8_Init+0xa8>)
 80043b2:	4a23      	ldr	r2, [pc, #140]	; (8004440 <MX_TIM8_Init+0xac>)
 80043b4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80043b6:	4b21      	ldr	r3, [pc, #132]	; (800443c <MX_TIM8_Init+0xa8>)
 80043b8:	2200      	movs	r2, #0
 80043ba:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80043bc:	4b1f      	ldr	r3, [pc, #124]	; (800443c <MX_TIM8_Init+0xa8>)
 80043be:	2210      	movs	r2, #16
 80043c0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80043c2:	4b1e      	ldr	r3, [pc, #120]	; (800443c <MX_TIM8_Init+0xa8>)
 80043c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80043c8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80043ca:	4b1c      	ldr	r3, [pc, #112]	; (800443c <MX_TIM8_Init+0xa8>)
 80043cc:	2200      	movs	r2, #0
 80043ce:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80043d0:	4b1a      	ldr	r3, [pc, #104]	; (800443c <MX_TIM8_Init+0xa8>)
 80043d2:	2200      	movs	r2, #0
 80043d4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80043d6:	4b19      	ldr	r3, [pc, #100]	; (800443c <MX_TIM8_Init+0xa8>)
 80043d8:	2200      	movs	r2, #0
 80043da:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80043dc:	2303      	movs	r3, #3
 80043de:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80043e0:	2300      	movs	r3, #0
 80043e2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80043e4:	2301      	movs	r3, #1
 80043e6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80043e8:	2300      	movs	r3, #0
 80043ea:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80043ec:	2300      	movs	r3, #0
 80043ee:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80043f0:	2300      	movs	r3, #0
 80043f2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80043f4:	2301      	movs	r3, #1
 80043f6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80043f8:	2300      	movs	r3, #0
 80043fa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80043fc:	2300      	movs	r3, #0
 80043fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8004400:	f107 030c 	add.w	r3, r7, #12
 8004404:	4619      	mov	r1, r3
 8004406:	480d      	ldr	r0, [pc, #52]	; (800443c <MX_TIM8_Init+0xa8>)
 8004408:	f007 fe6c 	bl	800c0e4 <HAL_TIM_Encoder_Init>
 800440c:	4603      	mov	r3, r0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d001      	beq.n	8004416 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8004412:	f000 fa87 	bl	8004924 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004416:	2300      	movs	r3, #0
 8004418:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800441a:	2300      	movs	r3, #0
 800441c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800441e:	1d3b      	adds	r3, r7, #4
 8004420:	4619      	mov	r1, r3
 8004422:	4806      	ldr	r0, [pc, #24]	; (800443c <MX_TIM8_Init+0xa8>)
 8004424:	f008 fb94 	bl	800cb50 <HAL_TIMEx_MasterConfigSynchronization>
 8004428:	4603      	mov	r3, r0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d001      	beq.n	8004432 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 800442e:	f000 fa79 	bl	8004924 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8004432:	bf00      	nop
 8004434:	3730      	adds	r7, #48	; 0x30
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop
 800443c:	200397f0 	.word	0x200397f0
 8004440:	40010400 	.word	0x40010400

08004444 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b088      	sub	sp, #32
 8004448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800444a:	1d3b      	adds	r3, r7, #4
 800444c:	2200      	movs	r2, #0
 800444e:	601a      	str	r2, [r3, #0]
 8004450:	605a      	str	r2, [r3, #4]
 8004452:	609a      	str	r2, [r3, #8]
 8004454:	60da      	str	r2, [r3, #12]
 8004456:	611a      	str	r2, [r3, #16]
 8004458:	615a      	str	r2, [r3, #20]
 800445a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800445c:	4b1e      	ldr	r3, [pc, #120]	; (80044d8 <MX_TIM10_Init+0x94>)
 800445e:	4a1f      	ldr	r2, [pc, #124]	; (80044dc <MX_TIM10_Init+0x98>)
 8004460:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8004462:	4b1d      	ldr	r3, [pc, #116]	; (80044d8 <MX_TIM10_Init+0x94>)
 8004464:	2200      	movs	r2, #0
 8004466:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004468:	4b1b      	ldr	r3, [pc, #108]	; (80044d8 <MX_TIM10_Init+0x94>)
 800446a:	2200      	movs	r2, #0
 800446c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 800446e:	4b1a      	ldr	r3, [pc, #104]	; (80044d8 <MX_TIM10_Init+0x94>)
 8004470:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004474:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004476:	4b18      	ldr	r3, [pc, #96]	; (80044d8 <MX_TIM10_Init+0x94>)
 8004478:	2200      	movs	r2, #0
 800447a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800447c:	4b16      	ldr	r3, [pc, #88]	; (80044d8 <MX_TIM10_Init+0x94>)
 800447e:	2200      	movs	r2, #0
 8004480:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8004482:	4815      	ldr	r0, [pc, #84]	; (80044d8 <MX_TIM10_Init+0x94>)
 8004484:	f007 fd76 	bl	800bf74 <HAL_TIM_Base_Init>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d001      	beq.n	8004492 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 800448e:	f000 fa49 	bl	8004924 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8004492:	4811      	ldr	r0, [pc, #68]	; (80044d8 <MX_TIM10_Init+0x94>)
 8004494:	f007 fdbd 	bl	800c012 <HAL_TIM_PWM_Init>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d001      	beq.n	80044a2 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 800449e:	f000 fa41 	bl	8004924 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80044a2:	2360      	movs	r3, #96	; 0x60
 80044a4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80044a6:	2300      	movs	r3, #0
 80044a8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80044aa:	2300      	movs	r3, #0
 80044ac:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80044ae:	2300      	movs	r3, #0
 80044b0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80044b2:	1d3b      	adds	r3, r7, #4
 80044b4:	2200      	movs	r2, #0
 80044b6:	4619      	mov	r1, r3
 80044b8:	4807      	ldr	r0, [pc, #28]	; (80044d8 <MX_TIM10_Init+0x94>)
 80044ba:	f007 ffe5 	bl	800c488 <HAL_TIM_PWM_ConfigChannel>
 80044be:	4603      	mov	r3, r0
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d001      	beq.n	80044c8 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 80044c4:	f000 fa2e 	bl	8004924 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 80044c8:	4803      	ldr	r0, [pc, #12]	; (80044d8 <MX_TIM10_Init+0x94>)
 80044ca:	f000 fe1b 	bl	8005104 <HAL_TIM_MspPostInit>

}
 80044ce:	bf00      	nop
 80044d0:	3720      	adds	r7, #32
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	bf00      	nop
 80044d8:	2003990c 	.word	0x2003990c
 80044dc:	40014400 	.word	0x40014400

080044e0 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b088      	sub	sp, #32
 80044e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80044e6:	1d3b      	adds	r3, r7, #4
 80044e8:	2200      	movs	r2, #0
 80044ea:	601a      	str	r2, [r3, #0]
 80044ec:	605a      	str	r2, [r3, #4]
 80044ee:	609a      	str	r2, [r3, #8]
 80044f0:	60da      	str	r2, [r3, #12]
 80044f2:	611a      	str	r2, [r3, #16]
 80044f4:	615a      	str	r2, [r3, #20]
 80044f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80044f8:	4b1e      	ldr	r3, [pc, #120]	; (8004574 <MX_TIM11_Init+0x94>)
 80044fa:	4a1f      	ldr	r2, [pc, #124]	; (8004578 <MX_TIM11_Init+0x98>)
 80044fc:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 80044fe:	4b1d      	ldr	r3, [pc, #116]	; (8004574 <MX_TIM11_Init+0x94>)
 8004500:	2200      	movs	r2, #0
 8004502:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004504:	4b1b      	ldr	r3, [pc, #108]	; (8004574 <MX_TIM11_Init+0x94>)
 8004506:	2200      	movs	r2, #0
 8004508:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 800450a:	4b1a      	ldr	r3, [pc, #104]	; (8004574 <MX_TIM11_Init+0x94>)
 800450c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004510:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004512:	4b18      	ldr	r3, [pc, #96]	; (8004574 <MX_TIM11_Init+0x94>)
 8004514:	2200      	movs	r2, #0
 8004516:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004518:	4b16      	ldr	r3, [pc, #88]	; (8004574 <MX_TIM11_Init+0x94>)
 800451a:	2200      	movs	r2, #0
 800451c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800451e:	4815      	ldr	r0, [pc, #84]	; (8004574 <MX_TIM11_Init+0x94>)
 8004520:	f007 fd28 	bl	800bf74 <HAL_TIM_Base_Init>
 8004524:	4603      	mov	r3, r0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d001      	beq.n	800452e <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 800452a:	f000 f9fb 	bl	8004924 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 800452e:	4811      	ldr	r0, [pc, #68]	; (8004574 <MX_TIM11_Init+0x94>)
 8004530:	f007 fd6f 	bl	800c012 <HAL_TIM_PWM_Init>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d001      	beq.n	800453e <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 800453a:	f000 f9f3 	bl	8004924 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800453e:	2360      	movs	r3, #96	; 0x60
 8004540:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004542:	2300      	movs	r3, #0
 8004544:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004546:	2300      	movs	r3, #0
 8004548:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800454a:	2300      	movs	r3, #0
 800454c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800454e:	1d3b      	adds	r3, r7, #4
 8004550:	2200      	movs	r2, #0
 8004552:	4619      	mov	r1, r3
 8004554:	4807      	ldr	r0, [pc, #28]	; (8004574 <MX_TIM11_Init+0x94>)
 8004556:	f007 ff97 	bl	800c488 <HAL_TIM_PWM_ConfigChannel>
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d001      	beq.n	8004564 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8004560:	f000 f9e0 	bl	8004924 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8004564:	4803      	ldr	r0, [pc, #12]	; (8004574 <MX_TIM11_Init+0x94>)
 8004566:	f000 fdcd 	bl	8005104 <HAL_TIM_MspPostInit>

}
 800456a:	bf00      	nop
 800456c:	3720      	adds	r7, #32
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	20039a2c 	.word	0x20039a2c
 8004578:	40014800 	.word	0x40014800

0800457c <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8004580:	4b0e      	ldr	r3, [pc, #56]	; (80045bc <MX_TIM13_Init+0x40>)
 8004582:	4a0f      	ldr	r2, [pc, #60]	; (80045c0 <MX_TIM13_Init+0x44>)
 8004584:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 89;
 8004586:	4b0d      	ldr	r3, [pc, #52]	; (80045bc <MX_TIM13_Init+0x40>)
 8004588:	2259      	movs	r2, #89	; 0x59
 800458a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800458c:	4b0b      	ldr	r3, [pc, #44]	; (80045bc <MX_TIM13_Init+0x40>)
 800458e:	2200      	movs	r2, #0
 8004590:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 8004592:	4b0a      	ldr	r3, [pc, #40]	; (80045bc <MX_TIM13_Init+0x40>)
 8004594:	f242 720f 	movw	r2, #9999	; 0x270f
 8004598:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800459a:	4b08      	ldr	r3, [pc, #32]	; (80045bc <MX_TIM13_Init+0x40>)
 800459c:	2200      	movs	r2, #0
 800459e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80045a0:	4b06      	ldr	r3, [pc, #24]	; (80045bc <MX_TIM13_Init+0x40>)
 80045a2:	2280      	movs	r2, #128	; 0x80
 80045a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80045a6:	4805      	ldr	r0, [pc, #20]	; (80045bc <MX_TIM13_Init+0x40>)
 80045a8:	f007 fce4 	bl	800bf74 <HAL_TIM_Base_Init>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d001      	beq.n	80045b6 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 80045b2:	f000 f9b7 	bl	8004924 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80045b6:	bf00      	nop
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	200399ec 	.word	0x200399ec
 80045c0:	40001c00 	.word	0x40001c00

080045c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80045c8:	4b11      	ldr	r3, [pc, #68]	; (8004610 <MX_USART2_UART_Init+0x4c>)
 80045ca:	4a12      	ldr	r2, [pc, #72]	; (8004614 <MX_USART2_UART_Init+0x50>)
 80045cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80045ce:	4b10      	ldr	r3, [pc, #64]	; (8004610 <MX_USART2_UART_Init+0x4c>)
 80045d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80045d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80045d6:	4b0e      	ldr	r3, [pc, #56]	; (8004610 <MX_USART2_UART_Init+0x4c>)
 80045d8:	2200      	movs	r2, #0
 80045da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80045dc:	4b0c      	ldr	r3, [pc, #48]	; (8004610 <MX_USART2_UART_Init+0x4c>)
 80045de:	2200      	movs	r2, #0
 80045e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80045e2:	4b0b      	ldr	r3, [pc, #44]	; (8004610 <MX_USART2_UART_Init+0x4c>)
 80045e4:	2200      	movs	r2, #0
 80045e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80045e8:	4b09      	ldr	r3, [pc, #36]	; (8004610 <MX_USART2_UART_Init+0x4c>)
 80045ea:	220c      	movs	r2, #12
 80045ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80045ee:	4b08      	ldr	r3, [pc, #32]	; (8004610 <MX_USART2_UART_Init+0x4c>)
 80045f0:	2200      	movs	r2, #0
 80045f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80045f4:	4b06      	ldr	r3, [pc, #24]	; (8004610 <MX_USART2_UART_Init+0x4c>)
 80045f6:	2200      	movs	r2, #0
 80045f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80045fa:	4805      	ldr	r0, [pc, #20]	; (8004610 <MX_USART2_UART_Init+0x4c>)
 80045fc:	f008 fb8a 	bl	800cd14 <HAL_UART_Init>
 8004600:	4603      	mov	r3, r0
 8004602:	2b00      	cmp	r3, #0
 8004604:	d001      	beq.n	800460a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004606:	f000 f98d 	bl	8004924 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800460a:	bf00      	nop
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	20039bd0 	.word	0x20039bd0
 8004614:	40004400 	.word	0x40004400

08004618 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b082      	sub	sp, #8
 800461c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800461e:	2300      	movs	r3, #0
 8004620:	607b      	str	r3, [r7, #4]
 8004622:	4b14      	ldr	r3, [pc, #80]	; (8004674 <MX_DMA_Init+0x5c>)
 8004624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004626:	4a13      	ldr	r2, [pc, #76]	; (8004674 <MX_DMA_Init+0x5c>)
 8004628:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800462c:	6313      	str	r3, [r2, #48]	; 0x30
 800462e:	4b11      	ldr	r3, [pc, #68]	; (8004674 <MX_DMA_Init+0x5c>)
 8004630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004632:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004636:	607b      	str	r3, [r7, #4]
 8004638:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800463a:	2200      	movs	r2, #0
 800463c:	2100      	movs	r1, #0
 800463e:	203a      	movs	r0, #58	; 0x3a
 8004640:	f003 f84b 	bl	80076da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8004644:	203a      	movs	r0, #58	; 0x3a
 8004646:	f003 f864 	bl	8007712 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800464a:	2200      	movs	r2, #0
 800464c:	2100      	movs	r1, #0
 800464e:	203b      	movs	r0, #59	; 0x3b
 8004650:	f003 f843 	bl	80076da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8004654:	203b      	movs	r0, #59	; 0x3b
 8004656:	f003 f85c 	bl	8007712 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800465a:	2200      	movs	r2, #0
 800465c:	2100      	movs	r1, #0
 800465e:	2045      	movs	r0, #69	; 0x45
 8004660:	f003 f83b 	bl	80076da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8004664:	2045      	movs	r0, #69	; 0x45
 8004666:	f003 f854 	bl	8007712 <HAL_NVIC_EnableIRQ>

}
 800466a:	bf00      	nop
 800466c:	3708      	adds	r7, #8
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
 8004672:	bf00      	nop
 8004674:	40023800 	.word	0x40023800

08004678 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b08c      	sub	sp, #48	; 0x30
 800467c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800467e:	f107 031c 	add.w	r3, r7, #28
 8004682:	2200      	movs	r2, #0
 8004684:	601a      	str	r2, [r3, #0]
 8004686:	605a      	str	r2, [r3, #4]
 8004688:	609a      	str	r2, [r3, #8]
 800468a:	60da      	str	r2, [r3, #12]
 800468c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800468e:	2300      	movs	r3, #0
 8004690:	61bb      	str	r3, [r7, #24]
 8004692:	4b9c      	ldr	r3, [pc, #624]	; (8004904 <MX_GPIO_Init+0x28c>)
 8004694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004696:	4a9b      	ldr	r2, [pc, #620]	; (8004904 <MX_GPIO_Init+0x28c>)
 8004698:	f043 0310 	orr.w	r3, r3, #16
 800469c:	6313      	str	r3, [r2, #48]	; 0x30
 800469e:	4b99      	ldr	r3, [pc, #612]	; (8004904 <MX_GPIO_Init+0x28c>)
 80046a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a2:	f003 0310 	and.w	r3, r3, #16
 80046a6:	61bb      	str	r3, [r7, #24]
 80046a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80046aa:	2300      	movs	r3, #0
 80046ac:	617b      	str	r3, [r7, #20]
 80046ae:	4b95      	ldr	r3, [pc, #596]	; (8004904 <MX_GPIO_Init+0x28c>)
 80046b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b2:	4a94      	ldr	r2, [pc, #592]	; (8004904 <MX_GPIO_Init+0x28c>)
 80046b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046b8:	6313      	str	r3, [r2, #48]	; 0x30
 80046ba:	4b92      	ldr	r3, [pc, #584]	; (8004904 <MX_GPIO_Init+0x28c>)
 80046bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046c2:	617b      	str	r3, [r7, #20]
 80046c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80046c6:	2300      	movs	r3, #0
 80046c8:	613b      	str	r3, [r7, #16]
 80046ca:	4b8e      	ldr	r3, [pc, #568]	; (8004904 <MX_GPIO_Init+0x28c>)
 80046cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ce:	4a8d      	ldr	r2, [pc, #564]	; (8004904 <MX_GPIO_Init+0x28c>)
 80046d0:	f043 0304 	orr.w	r3, r3, #4
 80046d4:	6313      	str	r3, [r2, #48]	; 0x30
 80046d6:	4b8b      	ldr	r3, [pc, #556]	; (8004904 <MX_GPIO_Init+0x28c>)
 80046d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046da:	f003 0304 	and.w	r3, r3, #4
 80046de:	613b      	str	r3, [r7, #16]
 80046e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80046e2:	2300      	movs	r3, #0
 80046e4:	60fb      	str	r3, [r7, #12]
 80046e6:	4b87      	ldr	r3, [pc, #540]	; (8004904 <MX_GPIO_Init+0x28c>)
 80046e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ea:	4a86      	ldr	r2, [pc, #536]	; (8004904 <MX_GPIO_Init+0x28c>)
 80046ec:	f043 0301 	orr.w	r3, r3, #1
 80046f0:	6313      	str	r3, [r2, #48]	; 0x30
 80046f2:	4b84      	ldr	r3, [pc, #528]	; (8004904 <MX_GPIO_Init+0x28c>)
 80046f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f6:	f003 0301 	and.w	r3, r3, #1
 80046fa:	60fb      	str	r3, [r7, #12]
 80046fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80046fe:	2300      	movs	r3, #0
 8004700:	60bb      	str	r3, [r7, #8]
 8004702:	4b80      	ldr	r3, [pc, #512]	; (8004904 <MX_GPIO_Init+0x28c>)
 8004704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004706:	4a7f      	ldr	r2, [pc, #508]	; (8004904 <MX_GPIO_Init+0x28c>)
 8004708:	f043 0302 	orr.w	r3, r3, #2
 800470c:	6313      	str	r3, [r2, #48]	; 0x30
 800470e:	4b7d      	ldr	r3, [pc, #500]	; (8004904 <MX_GPIO_Init+0x28c>)
 8004710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004712:	f003 0302 	and.w	r3, r3, #2
 8004716:	60bb      	str	r3, [r7, #8]
 8004718:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800471a:	2300      	movs	r3, #0
 800471c:	607b      	str	r3, [r7, #4]
 800471e:	4b79      	ldr	r3, [pc, #484]	; (8004904 <MX_GPIO_Init+0x28c>)
 8004720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004722:	4a78      	ldr	r2, [pc, #480]	; (8004904 <MX_GPIO_Init+0x28c>)
 8004724:	f043 0308 	orr.w	r3, r3, #8
 8004728:	6313      	str	r3, [r2, #48]	; 0x30
 800472a:	4b76      	ldr	r3, [pc, #472]	; (8004904 <MX_GPIO_Init+0x28c>)
 800472c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800472e:	f003 0308 	and.w	r3, r3, #8
 8004732:	607b      	str	r3, [r7, #4]
 8004734:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8004736:	2200      	movs	r2, #0
 8004738:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800473c:	4872      	ldr	r0, [pc, #456]	; (8004908 <MX_GPIO_Init+0x290>)
 800473e:	f003 fd61 	bl	8008204 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8004742:	2200      	movs	r2, #0
 8004744:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004748:	4870      	ldr	r0, [pc, #448]	; (800490c <MX_GPIO_Init+0x294>)
 800474a:	f003 fd5b 	bl	8008204 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 800474e:	2200      	movs	r2, #0
 8004750:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004754:	486e      	ldr	r0, [pc, #440]	; (8004910 <MX_GPIO_Init+0x298>)
 8004756:	f003 fd55 	bl	8008204 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800475a:	2200      	movs	r2, #0
 800475c:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8004760:	486c      	ldr	r0, [pc, #432]	; (8004914 <MX_GPIO_Init+0x29c>)
 8004762:	f003 fd4f 	bl	8008204 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004766:	2304      	movs	r3, #4
 8004768:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800476a:	4b6b      	ldr	r3, [pc, #428]	; (8004918 <MX_GPIO_Init+0x2a0>)
 800476c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800476e:	2300      	movs	r3, #0
 8004770:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004772:	f107 031c 	add.w	r3, r7, #28
 8004776:	4619      	mov	r1, r3
 8004778:	4863      	ldr	r0, [pc, #396]	; (8004908 <MX_GPIO_Init+0x290>)
 800477a:	f003 fb81 	bl	8007e80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800477e:	230f      	movs	r3, #15
 8004780:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004782:	2303      	movs	r3, #3
 8004784:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004786:	2300      	movs	r3, #0
 8004788:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800478a:	f107 031c 	add.w	r3, r7, #28
 800478e:	4619      	mov	r1, r3
 8004790:	4862      	ldr	r0, [pc, #392]	; (800491c <MX_GPIO_Init+0x2a4>)
 8004792:	f003 fb75 	bl	8007e80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004796:	23e1      	movs	r3, #225	; 0xe1
 8004798:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800479a:	2303      	movs	r3, #3
 800479c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800479e:	2300      	movs	r3, #0
 80047a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047a2:	f107 031c 	add.w	r3, r7, #28
 80047a6:	4619      	mov	r1, r3
 80047a8:	485a      	ldr	r0, [pc, #360]	; (8004914 <MX_GPIO_Init+0x29c>)
 80047aa:	f003 fb69 	bl	8007e80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80047ae:	2303      	movs	r3, #3
 80047b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80047b2:	2303      	movs	r3, #3
 80047b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047b6:	2300      	movs	r3, #0
 80047b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047ba:	f107 031c 	add.w	r3, r7, #28
 80047be:	4619      	mov	r1, r3
 80047c0:	4852      	ldr	r0, [pc, #328]	; (800490c <MX_GPIO_Init+0x294>)
 80047c2:	f003 fb5d 	bl	8007e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80047c6:	2304      	movs	r3, #4
 80047c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80047ca:	2300      	movs	r3, #0
 80047cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80047ce:	2301      	movs	r3, #1
 80047d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047d2:	f107 031c 	add.w	r3, r7, #28
 80047d6:	4619      	mov	r1, r3
 80047d8:	484c      	ldr	r0, [pc, #304]	; (800490c <MX_GPIO_Init+0x294>)
 80047da:	f003 fb51 	bl	8007e80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 80047de:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 80047e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80047e4:	2300      	movs	r3, #0
 80047e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80047e8:	2301      	movs	r3, #1
 80047ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80047ec:	f107 031c 	add.w	r3, r7, #28
 80047f0:	4619      	mov	r1, r3
 80047f2:	4845      	ldr	r0, [pc, #276]	; (8004908 <MX_GPIO_Init+0x290>)
 80047f4:	f003 fb44 	bl	8007e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80047f8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80047fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80047fe:	2301      	movs	r3, #1
 8004800:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004802:	2300      	movs	r3, #0
 8004804:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004806:	2300      	movs	r3, #0
 8004808:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800480a:	f107 031c 	add.w	r3, r7, #28
 800480e:	4619      	mov	r1, r3
 8004810:	483d      	ldr	r0, [pc, #244]	; (8004908 <MX_GPIO_Init+0x290>)
 8004812:	f003 fb35 	bl	8007e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004816:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800481a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800481c:	2301      	movs	r3, #1
 800481e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004820:	2300      	movs	r3, #0
 8004822:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004824:	2300      	movs	r3, #0
 8004826:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004828:	f107 031c 	add.w	r3, r7, #28
 800482c:	4619      	mov	r1, r3
 800482e:	4837      	ldr	r0, [pc, #220]	; (800490c <MX_GPIO_Init+0x294>)
 8004830:	f003 fb26 	bl	8007e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004834:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004838:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800483a:	4b39      	ldr	r3, [pc, #228]	; (8004920 <MX_GPIO_Init+0x2a8>)
 800483c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800483e:	2300      	movs	r3, #0
 8004840:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004842:	f107 031c 	add.w	r3, r7, #28
 8004846:	4619      	mov	r1, r3
 8004848:	4831      	ldr	r0, [pc, #196]	; (8004910 <MX_GPIO_Init+0x298>)
 800484a:	f003 fb19 	bl	8007e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800484e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004852:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004854:	2301      	movs	r3, #1
 8004856:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004858:	2300      	movs	r3, #0
 800485a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800485c:	2300      	movs	r3, #0
 800485e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004860:	f107 031c 	add.w	r3, r7, #28
 8004864:	4619      	mov	r1, r3
 8004866:	482a      	ldr	r0, [pc, #168]	; (8004910 <MX_GPIO_Init+0x298>)
 8004868:	f003 fb0a 	bl	8007e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800486c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004870:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004872:	2301      	movs	r3, #1
 8004874:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004876:	2301      	movs	r3, #1
 8004878:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800487a:	2300      	movs	r3, #0
 800487c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800487e:	f107 031c 	add.w	r3, r7, #28
 8004882:	4619      	mov	r1, r3
 8004884:	4822      	ldr	r0, [pc, #136]	; (8004910 <MX_GPIO_Init+0x298>)
 8004886:	f003 fafb 	bl	8007e80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800488a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800488e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004890:	2301      	movs	r3, #1
 8004892:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004894:	2300      	movs	r3, #0
 8004896:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004898:	2300      	movs	r3, #0
 800489a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800489c:	f107 031c 	add.w	r3, r7, #28
 80048a0:	4619      	mov	r1, r3
 80048a2:	481c      	ldr	r0, [pc, #112]	; (8004914 <MX_GPIO_Init+0x29c>)
 80048a4:	f003 faec 	bl	8007e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80048a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80048ae:	2300      	movs	r3, #0
 80048b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048b2:	2300      	movs	r3, #0
 80048b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048b6:	f107 031c 	add.w	r3, r7, #28
 80048ba:	4619      	mov	r1, r3
 80048bc:	4815      	ldr	r0, [pc, #84]	; (8004914 <MX_GPIO_Init+0x29c>)
 80048be:	f003 fadf 	bl	8007e80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 80048c2:	239b      	movs	r3, #155	; 0x9b
 80048c4:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80048c6:	2300      	movs	r3, #0
 80048c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80048ca:	2301      	movs	r3, #1
 80048cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80048ce:	f107 031c 	add.w	r3, r7, #28
 80048d2:	4619      	mov	r1, r3
 80048d4:	480e      	ldr	r0, [pc, #56]	; (8004910 <MX_GPIO_Init+0x298>)
 80048d6:	f003 fad3 	bl	8007e80 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80048da:	2200      	movs	r2, #0
 80048dc:	2100      	movs	r1, #0
 80048de:	2008      	movs	r0, #8
 80048e0:	f002 fefb 	bl	80076da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80048e4:	2008      	movs	r0, #8
 80048e6:	f002 ff14 	bl	8007712 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80048ea:	2200      	movs	r2, #0
 80048ec:	2100      	movs	r1, #0
 80048ee:	2017      	movs	r0, #23
 80048f0:	f002 fef3 	bl	80076da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80048f4:	2017      	movs	r0, #23
 80048f6:	f002 ff0c 	bl	8007712 <HAL_NVIC_EnableIRQ>

}
 80048fa:	bf00      	nop
 80048fc:	3730      	adds	r7, #48	; 0x30
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	40023800 	.word	0x40023800
 8004908:	40021000 	.word	0x40021000
 800490c:	40020400 	.word	0x40020400
 8004910:	40020c00 	.word	0x40020c00
 8004914:	40020000 	.word	0x40020000
 8004918:	10310000 	.word	0x10310000
 800491c:	40020800 	.word	0x40020800
 8004920:	10110000 	.word	0x10110000

08004924 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004924:	b480      	push	{r7}
 8004926:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004928:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800492a:	e7fe      	b.n	800492a <Error_Handler+0x6>

0800492c <path_following_initialize>:
  /* End of Outputs for SubSystem: '<Root>/path_following' */
}

/* Model initialize function */
void path_following_initialize(void)
{
 800492c:	b480      	push	{r7}
 800492e:	af00      	add	r7, sp, #0
  /* (no initialization code required) */
}
 8004930:	bf00      	nop
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr
	...

0800493c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004942:	2300      	movs	r3, #0
 8004944:	607b      	str	r3, [r7, #4]
 8004946:	4b10      	ldr	r3, [pc, #64]	; (8004988 <HAL_MspInit+0x4c>)
 8004948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800494a:	4a0f      	ldr	r2, [pc, #60]	; (8004988 <HAL_MspInit+0x4c>)
 800494c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004950:	6453      	str	r3, [r2, #68]	; 0x44
 8004952:	4b0d      	ldr	r3, [pc, #52]	; (8004988 <HAL_MspInit+0x4c>)
 8004954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004956:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800495a:	607b      	str	r3, [r7, #4]
 800495c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800495e:	2300      	movs	r3, #0
 8004960:	603b      	str	r3, [r7, #0]
 8004962:	4b09      	ldr	r3, [pc, #36]	; (8004988 <HAL_MspInit+0x4c>)
 8004964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004966:	4a08      	ldr	r2, [pc, #32]	; (8004988 <HAL_MspInit+0x4c>)
 8004968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800496c:	6413      	str	r3, [r2, #64]	; 0x40
 800496e:	4b06      	ldr	r3, [pc, #24]	; (8004988 <HAL_MspInit+0x4c>)
 8004970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004976:	603b      	str	r3, [r7, #0]
 8004978:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800497a:	bf00      	nop
 800497c:	370c      	adds	r7, #12
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr
 8004986:	bf00      	nop
 8004988:	40023800 	.word	0x40023800

0800498c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b08c      	sub	sp, #48	; 0x30
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004994:	f107 031c 	add.w	r3, r7, #28
 8004998:	2200      	movs	r2, #0
 800499a:	601a      	str	r2, [r3, #0]
 800499c:	605a      	str	r2, [r3, #4]
 800499e:	609a      	str	r2, [r3, #8]
 80049a0:	60da      	str	r2, [r3, #12]
 80049a2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a4a      	ldr	r2, [pc, #296]	; (8004ad4 <HAL_ADC_MspInit+0x148>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	f040 808e 	bne.w	8004acc <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 80049b0:	2300      	movs	r3, #0
 80049b2:	61bb      	str	r3, [r7, #24]
 80049b4:	4b48      	ldr	r3, [pc, #288]	; (8004ad8 <HAL_ADC_MspInit+0x14c>)
 80049b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049b8:	4a47      	ldr	r2, [pc, #284]	; (8004ad8 <HAL_ADC_MspInit+0x14c>)
 80049ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80049be:	6453      	str	r3, [r2, #68]	; 0x44
 80049c0:	4b45      	ldr	r3, [pc, #276]	; (8004ad8 <HAL_ADC_MspInit+0x14c>)
 80049c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049c8:	61bb      	str	r3, [r7, #24]
 80049ca:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80049cc:	2300      	movs	r3, #0
 80049ce:	617b      	str	r3, [r7, #20]
 80049d0:	4b41      	ldr	r3, [pc, #260]	; (8004ad8 <HAL_ADC_MspInit+0x14c>)
 80049d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d4:	4a40      	ldr	r2, [pc, #256]	; (8004ad8 <HAL_ADC_MspInit+0x14c>)
 80049d6:	f043 0304 	orr.w	r3, r3, #4
 80049da:	6313      	str	r3, [r2, #48]	; 0x30
 80049dc:	4b3e      	ldr	r3, [pc, #248]	; (8004ad8 <HAL_ADC_MspInit+0x14c>)
 80049de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e0:	f003 0304 	and.w	r3, r3, #4
 80049e4:	617b      	str	r3, [r7, #20]
 80049e6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049e8:	2300      	movs	r3, #0
 80049ea:	613b      	str	r3, [r7, #16]
 80049ec:	4b3a      	ldr	r3, [pc, #232]	; (8004ad8 <HAL_ADC_MspInit+0x14c>)
 80049ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f0:	4a39      	ldr	r2, [pc, #228]	; (8004ad8 <HAL_ADC_MspInit+0x14c>)
 80049f2:	f043 0301 	orr.w	r3, r3, #1
 80049f6:	6313      	str	r3, [r2, #48]	; 0x30
 80049f8:	4b37      	ldr	r3, [pc, #220]	; (8004ad8 <HAL_ADC_MspInit+0x14c>)
 80049fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049fc:	f003 0301 	and.w	r3, r3, #1
 8004a00:	613b      	str	r3, [r7, #16]
 8004a02:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a04:	2300      	movs	r3, #0
 8004a06:	60fb      	str	r3, [r7, #12]
 8004a08:	4b33      	ldr	r3, [pc, #204]	; (8004ad8 <HAL_ADC_MspInit+0x14c>)
 8004a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a0c:	4a32      	ldr	r2, [pc, #200]	; (8004ad8 <HAL_ADC_MspInit+0x14c>)
 8004a0e:	f043 0302 	orr.w	r3, r3, #2
 8004a12:	6313      	str	r3, [r2, #48]	; 0x30
 8004a14:	4b30      	ldr	r3, [pc, #192]	; (8004ad8 <HAL_ADC_MspInit+0x14c>)
 8004a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a18:	f003 0302 	and.w	r3, r3, #2
 8004a1c:	60fb      	str	r3, [r7, #12]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC2_IN6
    PA7     ------> ADC2_IN7
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8004a20:	230f      	movs	r3, #15
 8004a22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004a24:	2303      	movs	r3, #3
 8004a26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a2c:	f107 031c 	add.w	r3, r7, #28
 8004a30:	4619      	mov	r1, r3
 8004a32:	482a      	ldr	r0, [pc, #168]	; (8004adc <HAL_ADC_MspInit+0x150>)
 8004a34:	f003 fa24 	bl	8007e80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8004a38:	23ff      	movs	r3, #255	; 0xff
 8004a3a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004a3c:	2303      	movs	r3, #3
 8004a3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a40:	2300      	movs	r3, #0
 8004a42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a44:	f107 031c 	add.w	r3, r7, #28
 8004a48:	4619      	mov	r1, r3
 8004a4a:	4825      	ldr	r0, [pc, #148]	; (8004ae0 <HAL_ADC_MspInit+0x154>)
 8004a4c:	f003 fa18 	bl	8007e80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004a50:	2303      	movs	r3, #3
 8004a52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004a54:	2303      	movs	r3, #3
 8004a56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a5c:	f107 031c 	add.w	r3, r7, #28
 8004a60:	4619      	mov	r1, r3
 8004a62:	4820      	ldr	r0, [pc, #128]	; (8004ae4 <HAL_ADC_MspInit+0x158>)
 8004a64:	f003 fa0c 	bl	8007e80 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 8004a68:	4b1f      	ldr	r3, [pc, #124]	; (8004ae8 <HAL_ADC_MspInit+0x15c>)
 8004a6a:	4a20      	ldr	r2, [pc, #128]	; (8004aec <HAL_ADC_MspInit+0x160>)
 8004a6c:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8004a6e:	4b1e      	ldr	r3, [pc, #120]	; (8004ae8 <HAL_ADC_MspInit+0x15c>)
 8004a70:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004a74:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004a76:	4b1c      	ldr	r3, [pc, #112]	; (8004ae8 <HAL_ADC_MspInit+0x15c>)
 8004a78:	2200      	movs	r2, #0
 8004a7a:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a7c:	4b1a      	ldr	r3, [pc, #104]	; (8004ae8 <HAL_ADC_MspInit+0x15c>)
 8004a7e:	2200      	movs	r2, #0
 8004a80:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8004a82:	4b19      	ldr	r3, [pc, #100]	; (8004ae8 <HAL_ADC_MspInit+0x15c>)
 8004a84:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a88:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004a8a:	4b17      	ldr	r3, [pc, #92]	; (8004ae8 <HAL_ADC_MspInit+0x15c>)
 8004a8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a90:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004a92:	4b15      	ldr	r3, [pc, #84]	; (8004ae8 <HAL_ADC_MspInit+0x15c>)
 8004a94:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004a98:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8004a9a:	4b13      	ldr	r3, [pc, #76]	; (8004ae8 <HAL_ADC_MspInit+0x15c>)
 8004a9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004aa0:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004aa2:	4b11      	ldr	r3, [pc, #68]	; (8004ae8 <HAL_ADC_MspInit+0x15c>)
 8004aa4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004aa8:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004aaa:	4b0f      	ldr	r3, [pc, #60]	; (8004ae8 <HAL_ADC_MspInit+0x15c>)
 8004aac:	2200      	movs	r2, #0
 8004aae:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8004ab0:	480d      	ldr	r0, [pc, #52]	; (8004ae8 <HAL_ADC_MspInit+0x15c>)
 8004ab2:	f002 fe49 	bl	8007748 <HAL_DMA_Init>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d001      	beq.n	8004ac0 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8004abc:	f7ff ff32 	bl	8004924 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	4a09      	ldr	r2, [pc, #36]	; (8004ae8 <HAL_ADC_MspInit+0x15c>)
 8004ac4:	639a      	str	r2, [r3, #56]	; 0x38
 8004ac6:	4a08      	ldr	r2, [pc, #32]	; (8004ae8 <HAL_ADC_MspInit+0x15c>)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8004acc:	bf00      	nop
 8004ace:	3730      	adds	r7, #48	; 0x30
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}
 8004ad4:	40012100 	.word	0x40012100
 8004ad8:	40023800 	.word	0x40023800
 8004adc:	40020800 	.word	0x40020800
 8004ae0:	40020000 	.word	0x40020000
 8004ae4:	40020400 	.word	0x40020400
 8004ae8:	20039c10 	.word	0x20039c10
 8004aec:	40026440 	.word	0x40026440

08004af0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b08c      	sub	sp, #48	; 0x30
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004af8:	f107 031c 	add.w	r3, r7, #28
 8004afc:	2200      	movs	r2, #0
 8004afe:	601a      	str	r2, [r3, #0]
 8004b00:	605a      	str	r2, [r3, #4]
 8004b02:	609a      	str	r2, [r3, #8]
 8004b04:	60da      	str	r2, [r3, #12]
 8004b06:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a32      	ldr	r2, [pc, #200]	; (8004bd8 <HAL_I2C_MspInit+0xe8>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d12c      	bne.n	8004b6c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b12:	2300      	movs	r3, #0
 8004b14:	61bb      	str	r3, [r7, #24]
 8004b16:	4b31      	ldr	r3, [pc, #196]	; (8004bdc <HAL_I2C_MspInit+0xec>)
 8004b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b1a:	4a30      	ldr	r2, [pc, #192]	; (8004bdc <HAL_I2C_MspInit+0xec>)
 8004b1c:	f043 0302 	orr.w	r3, r3, #2
 8004b20:	6313      	str	r3, [r2, #48]	; 0x30
 8004b22:	4b2e      	ldr	r3, [pc, #184]	; (8004bdc <HAL_I2C_MspInit+0xec>)
 8004b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b26:	f003 0302 	and.w	r3, r3, #2
 8004b2a:	61bb      	str	r3, [r7, #24]
 8004b2c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004b2e:	23c0      	movs	r3, #192	; 0xc0
 8004b30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004b32:	2312      	movs	r3, #18
 8004b34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004b36:	2301      	movs	r3, #1
 8004b38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004b3e:	2304      	movs	r3, #4
 8004b40:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b42:	f107 031c 	add.w	r3, r7, #28
 8004b46:	4619      	mov	r1, r3
 8004b48:	4825      	ldr	r0, [pc, #148]	; (8004be0 <HAL_I2C_MspInit+0xf0>)
 8004b4a:	f003 f999 	bl	8007e80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004b4e:	2300      	movs	r3, #0
 8004b50:	617b      	str	r3, [r7, #20]
 8004b52:	4b22      	ldr	r3, [pc, #136]	; (8004bdc <HAL_I2C_MspInit+0xec>)
 8004b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b56:	4a21      	ldr	r2, [pc, #132]	; (8004bdc <HAL_I2C_MspInit+0xec>)
 8004b58:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004b5c:	6413      	str	r3, [r2, #64]	; 0x40
 8004b5e:	4b1f      	ldr	r3, [pc, #124]	; (8004bdc <HAL_I2C_MspInit+0xec>)
 8004b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b66:	617b      	str	r3, [r7, #20]
 8004b68:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8004b6a:	e031      	b.n	8004bd0 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a1c      	ldr	r2, [pc, #112]	; (8004be4 <HAL_I2C_MspInit+0xf4>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d12c      	bne.n	8004bd0 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b76:	2300      	movs	r3, #0
 8004b78:	613b      	str	r3, [r7, #16]
 8004b7a:	4b18      	ldr	r3, [pc, #96]	; (8004bdc <HAL_I2C_MspInit+0xec>)
 8004b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b7e:	4a17      	ldr	r2, [pc, #92]	; (8004bdc <HAL_I2C_MspInit+0xec>)
 8004b80:	f043 0302 	orr.w	r3, r3, #2
 8004b84:	6313      	str	r3, [r2, #48]	; 0x30
 8004b86:	4b15      	ldr	r3, [pc, #84]	; (8004bdc <HAL_I2C_MspInit+0xec>)
 8004b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b8a:	f003 0302 	and.w	r3, r3, #2
 8004b8e:	613b      	str	r3, [r7, #16]
 8004b90:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004b92:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004b96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004b98:	2312      	movs	r3, #18
 8004b9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004ba4:	2304      	movs	r3, #4
 8004ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ba8:	f107 031c 	add.w	r3, r7, #28
 8004bac:	4619      	mov	r1, r3
 8004bae:	480c      	ldr	r0, [pc, #48]	; (8004be0 <HAL_I2C_MspInit+0xf0>)
 8004bb0:	f003 f966 	bl	8007e80 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	60fb      	str	r3, [r7, #12]
 8004bb8:	4b08      	ldr	r3, [pc, #32]	; (8004bdc <HAL_I2C_MspInit+0xec>)
 8004bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bbc:	4a07      	ldr	r2, [pc, #28]	; (8004bdc <HAL_I2C_MspInit+0xec>)
 8004bbe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004bc2:	6413      	str	r3, [r2, #64]	; 0x40
 8004bc4:	4b05      	ldr	r3, [pc, #20]	; (8004bdc <HAL_I2C_MspInit+0xec>)
 8004bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bcc:	60fb      	str	r3, [r7, #12]
 8004bce:	68fb      	ldr	r3, [r7, #12]
}
 8004bd0:	bf00      	nop
 8004bd2:	3730      	adds	r7, #48	; 0x30
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	40005400 	.word	0x40005400
 8004bdc:	40023800 	.word	0x40023800
 8004be0:	40020400 	.word	0x40020400
 8004be4:	40005800 	.word	0x40005800

08004be8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b08a      	sub	sp, #40	; 0x28
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bf0:	f107 0314 	add.w	r3, r7, #20
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	601a      	str	r2, [r3, #0]
 8004bf8:	605a      	str	r2, [r3, #4]
 8004bfa:	609a      	str	r2, [r3, #8]
 8004bfc:	60da      	str	r2, [r3, #12]
 8004bfe:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a69      	ldr	r2, [pc, #420]	; (8004dac <HAL_SD_MspInit+0x1c4>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	f040 80cb 	bne.w	8004da2 <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	613b      	str	r3, [r7, #16]
 8004c10:	4b67      	ldr	r3, [pc, #412]	; (8004db0 <HAL_SD_MspInit+0x1c8>)
 8004c12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c14:	4a66      	ldr	r2, [pc, #408]	; (8004db0 <HAL_SD_MspInit+0x1c8>)
 8004c16:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004c1a:	6453      	str	r3, [r2, #68]	; 0x44
 8004c1c:	4b64      	ldr	r3, [pc, #400]	; (8004db0 <HAL_SD_MspInit+0x1c8>)
 8004c1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c24:	613b      	str	r3, [r7, #16]
 8004c26:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c28:	2300      	movs	r3, #0
 8004c2a:	60fb      	str	r3, [r7, #12]
 8004c2c:	4b60      	ldr	r3, [pc, #384]	; (8004db0 <HAL_SD_MspInit+0x1c8>)
 8004c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c30:	4a5f      	ldr	r2, [pc, #380]	; (8004db0 <HAL_SD_MspInit+0x1c8>)
 8004c32:	f043 0304 	orr.w	r3, r3, #4
 8004c36:	6313      	str	r3, [r2, #48]	; 0x30
 8004c38:	4b5d      	ldr	r3, [pc, #372]	; (8004db0 <HAL_SD_MspInit+0x1c8>)
 8004c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c3c:	f003 0304 	and.w	r3, r3, #4
 8004c40:	60fb      	str	r3, [r7, #12]
 8004c42:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004c44:	2300      	movs	r3, #0
 8004c46:	60bb      	str	r3, [r7, #8]
 8004c48:	4b59      	ldr	r3, [pc, #356]	; (8004db0 <HAL_SD_MspInit+0x1c8>)
 8004c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c4c:	4a58      	ldr	r2, [pc, #352]	; (8004db0 <HAL_SD_MspInit+0x1c8>)
 8004c4e:	f043 0308 	orr.w	r3, r3, #8
 8004c52:	6313      	str	r3, [r2, #48]	; 0x30
 8004c54:	4b56      	ldr	r3, [pc, #344]	; (8004db0 <HAL_SD_MspInit+0x1c8>)
 8004c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c58:	f003 0308 	and.w	r3, r3, #8
 8004c5c:	60bb      	str	r3, [r7, #8]
 8004c5e:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8004c60:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8004c64:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c66:	2302      	movs	r3, #2
 8004c68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8004c72:	230c      	movs	r3, #12
 8004c74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c76:	f107 0314 	add.w	r3, r7, #20
 8004c7a:	4619      	mov	r1, r3
 8004c7c:	484d      	ldr	r0, [pc, #308]	; (8004db4 <HAL_SD_MspInit+0x1cc>)
 8004c7e:	f003 f8ff 	bl	8007e80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004c82:	2304      	movs	r3, #4
 8004c84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c86:	2302      	movs	r3, #2
 8004c88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8004c92:	230c      	movs	r3, #12
 8004c94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004c96:	f107 0314 	add.w	r3, r7, #20
 8004c9a:	4619      	mov	r1, r3
 8004c9c:	4846      	ldr	r0, [pc, #280]	; (8004db8 <HAL_SD_MspInit+0x1d0>)
 8004c9e:	f003 f8ef 	bl	8007e80 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8004ca2:	4b46      	ldr	r3, [pc, #280]	; (8004dbc <HAL_SD_MspInit+0x1d4>)
 8004ca4:	4a46      	ldr	r2, [pc, #280]	; (8004dc0 <HAL_SD_MspInit+0x1d8>)
 8004ca6:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8004ca8:	4b44      	ldr	r3, [pc, #272]	; (8004dbc <HAL_SD_MspInit+0x1d4>)
 8004caa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004cae:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004cb0:	4b42      	ldr	r3, [pc, #264]	; (8004dbc <HAL_SD_MspInit+0x1d4>)
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004cb6:	4b41      	ldr	r3, [pc, #260]	; (8004dbc <HAL_SD_MspInit+0x1d4>)
 8004cb8:	2200      	movs	r2, #0
 8004cba:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004cbc:	4b3f      	ldr	r3, [pc, #252]	; (8004dbc <HAL_SD_MspInit+0x1d4>)
 8004cbe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004cc2:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004cc4:	4b3d      	ldr	r3, [pc, #244]	; (8004dbc <HAL_SD_MspInit+0x1d4>)
 8004cc6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004cca:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004ccc:	4b3b      	ldr	r3, [pc, #236]	; (8004dbc <HAL_SD_MspInit+0x1d4>)
 8004cce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004cd2:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8004cd4:	4b39      	ldr	r3, [pc, #228]	; (8004dbc <HAL_SD_MspInit+0x1d4>)
 8004cd6:	2220      	movs	r2, #32
 8004cd8:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8004cda:	4b38      	ldr	r3, [pc, #224]	; (8004dbc <HAL_SD_MspInit+0x1d4>)
 8004cdc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004ce0:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004ce2:	4b36      	ldr	r3, [pc, #216]	; (8004dbc <HAL_SD_MspInit+0x1d4>)
 8004ce4:	2204      	movs	r2, #4
 8004ce6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004ce8:	4b34      	ldr	r3, [pc, #208]	; (8004dbc <HAL_SD_MspInit+0x1d4>)
 8004cea:	2203      	movs	r2, #3
 8004cec:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8004cee:	4b33      	ldr	r3, [pc, #204]	; (8004dbc <HAL_SD_MspInit+0x1d4>)
 8004cf0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004cf4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8004cf6:	4b31      	ldr	r3, [pc, #196]	; (8004dbc <HAL_SD_MspInit+0x1d4>)
 8004cf8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004cfc:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8004cfe:	482f      	ldr	r0, [pc, #188]	; (8004dbc <HAL_SD_MspInit+0x1d4>)
 8004d00:	f002 fd22 	bl	8007748 <HAL_DMA_Init>
 8004d04:	4603      	mov	r3, r0
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d001      	beq.n	8004d0e <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 8004d0a:	f7ff fe0b 	bl	8004924 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a2a      	ldr	r2, [pc, #168]	; (8004dbc <HAL_SD_MspInit+0x1d4>)
 8004d12:	641a      	str	r2, [r3, #64]	; 0x40
 8004d14:	4a29      	ldr	r2, [pc, #164]	; (8004dbc <HAL_SD_MspInit+0x1d4>)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8004d1a:	4b2a      	ldr	r3, [pc, #168]	; (8004dc4 <HAL_SD_MspInit+0x1dc>)
 8004d1c:	4a2a      	ldr	r2, [pc, #168]	; (8004dc8 <HAL_SD_MspInit+0x1e0>)
 8004d1e:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8004d20:	4b28      	ldr	r3, [pc, #160]	; (8004dc4 <HAL_SD_MspInit+0x1dc>)
 8004d22:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004d26:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004d28:	4b26      	ldr	r3, [pc, #152]	; (8004dc4 <HAL_SD_MspInit+0x1dc>)
 8004d2a:	2240      	movs	r2, #64	; 0x40
 8004d2c:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d2e:	4b25      	ldr	r3, [pc, #148]	; (8004dc4 <HAL_SD_MspInit+0x1dc>)
 8004d30:	2200      	movs	r2, #0
 8004d32:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004d34:	4b23      	ldr	r3, [pc, #140]	; (8004dc4 <HAL_SD_MspInit+0x1dc>)
 8004d36:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d3a:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004d3c:	4b21      	ldr	r3, [pc, #132]	; (8004dc4 <HAL_SD_MspInit+0x1dc>)
 8004d3e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004d42:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004d44:	4b1f      	ldr	r3, [pc, #124]	; (8004dc4 <HAL_SD_MspInit+0x1dc>)
 8004d46:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004d4a:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8004d4c:	4b1d      	ldr	r3, [pc, #116]	; (8004dc4 <HAL_SD_MspInit+0x1dc>)
 8004d4e:	2220      	movs	r2, #32
 8004d50:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8004d52:	4b1c      	ldr	r3, [pc, #112]	; (8004dc4 <HAL_SD_MspInit+0x1dc>)
 8004d54:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004d58:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004d5a:	4b1a      	ldr	r3, [pc, #104]	; (8004dc4 <HAL_SD_MspInit+0x1dc>)
 8004d5c:	2204      	movs	r2, #4
 8004d5e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004d60:	4b18      	ldr	r3, [pc, #96]	; (8004dc4 <HAL_SD_MspInit+0x1dc>)
 8004d62:	2203      	movs	r2, #3
 8004d64:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8004d66:	4b17      	ldr	r3, [pc, #92]	; (8004dc4 <HAL_SD_MspInit+0x1dc>)
 8004d68:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004d6c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8004d6e:	4b15      	ldr	r3, [pc, #84]	; (8004dc4 <HAL_SD_MspInit+0x1dc>)
 8004d70:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004d74:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8004d76:	4813      	ldr	r0, [pc, #76]	; (8004dc4 <HAL_SD_MspInit+0x1dc>)
 8004d78:	f002 fce6 	bl	8007748 <HAL_DMA_Init>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d001      	beq.n	8004d86 <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 8004d82:	f7ff fdcf 	bl	8004924 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a0e      	ldr	r2, [pc, #56]	; (8004dc4 <HAL_SD_MspInit+0x1dc>)
 8004d8a:	63da      	str	r2, [r3, #60]	; 0x3c
 8004d8c:	4a0d      	ldr	r2, [pc, #52]	; (8004dc4 <HAL_SD_MspInit+0x1dc>)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8004d92:	2200      	movs	r2, #0
 8004d94:	2100      	movs	r1, #0
 8004d96:	2031      	movs	r0, #49	; 0x31
 8004d98:	f002 fc9f 	bl	80076da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8004d9c:	2031      	movs	r0, #49	; 0x31
 8004d9e:	f002 fcb8 	bl	8007712 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8004da2:	bf00      	nop
 8004da4:	3728      	adds	r7, #40	; 0x28
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	bf00      	nop
 8004dac:	40012c00 	.word	0x40012c00
 8004db0:	40023800 	.word	0x40023800
 8004db4:	40020800 	.word	0x40020800
 8004db8:	40020c00 	.word	0x40020c00
 8004dbc:	20039738 	.word	0x20039738
 8004dc0:	40026458 	.word	0x40026458
 8004dc4:	20039a6c 	.word	0x20039a6c
 8004dc8:	400264a0 	.word	0x400264a0

08004dcc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b08a      	sub	sp, #40	; 0x28
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004dd4:	f107 0314 	add.w	r3, r7, #20
 8004dd8:	2200      	movs	r2, #0
 8004dda:	601a      	str	r2, [r3, #0]
 8004ddc:	605a      	str	r2, [r3, #4]
 8004dde:	609a      	str	r2, [r3, #8]
 8004de0:	60da      	str	r2, [r3, #12]
 8004de2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a19      	ldr	r2, [pc, #100]	; (8004e50 <HAL_SPI_MspInit+0x84>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d12c      	bne.n	8004e48 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004dee:	2300      	movs	r3, #0
 8004df0:	613b      	str	r3, [r7, #16]
 8004df2:	4b18      	ldr	r3, [pc, #96]	; (8004e54 <HAL_SPI_MspInit+0x88>)
 8004df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df6:	4a17      	ldr	r2, [pc, #92]	; (8004e54 <HAL_SPI_MspInit+0x88>)
 8004df8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004dfc:	6413      	str	r3, [r2, #64]	; 0x40
 8004dfe:	4b15      	ldr	r3, [pc, #84]	; (8004e54 <HAL_SPI_MspInit+0x88>)
 8004e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e06:	613b      	str	r3, [r7, #16]
 8004e08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	60fb      	str	r3, [r7, #12]
 8004e0e:	4b11      	ldr	r3, [pc, #68]	; (8004e54 <HAL_SPI_MspInit+0x88>)
 8004e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e12:	4a10      	ldr	r2, [pc, #64]	; (8004e54 <HAL_SPI_MspInit+0x88>)
 8004e14:	f043 0302 	orr.w	r3, r3, #2
 8004e18:	6313      	str	r3, [r2, #48]	; 0x30
 8004e1a:	4b0e      	ldr	r3, [pc, #56]	; (8004e54 <HAL_SPI_MspInit+0x88>)
 8004e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e1e:	f003 0302 	and.w	r3, r3, #2
 8004e22:	60fb      	str	r3, [r7, #12]
 8004e24:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8004e26:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8004e2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e2c:	2302      	movs	r3, #2
 8004e2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e30:	2300      	movs	r3, #0
 8004e32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e34:	2303      	movs	r3, #3
 8004e36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004e38:	2305      	movs	r3, #5
 8004e3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e3c:	f107 0314 	add.w	r3, r7, #20
 8004e40:	4619      	mov	r1, r3
 8004e42:	4805      	ldr	r0, [pc, #20]	; (8004e58 <HAL_SPI_MspInit+0x8c>)
 8004e44:	f003 f81c 	bl	8007e80 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004e48:	bf00      	nop
 8004e4a:	3728      	adds	r7, #40	; 0x28
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}
 8004e50:	40003800 	.word	0x40003800
 8004e54:	40023800 	.word	0x40023800
 8004e58:	40020400 	.word	0x40020400

08004e5c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b08c      	sub	sp, #48	; 0x30
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e64:	f107 031c 	add.w	r3, r7, #28
 8004e68:	2200      	movs	r2, #0
 8004e6a:	601a      	str	r2, [r3, #0]
 8004e6c:	605a      	str	r2, [r3, #4]
 8004e6e:	609a      	str	r2, [r3, #8]
 8004e70:	60da      	str	r2, [r3, #12]
 8004e72:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a2d      	ldr	r2, [pc, #180]	; (8004f30 <HAL_TIM_PWM_MspInit+0xd4>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d12d      	bne.n	8004eda <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004e7e:	2300      	movs	r3, #0
 8004e80:	61bb      	str	r3, [r7, #24]
 8004e82:	4b2c      	ldr	r3, [pc, #176]	; (8004f34 <HAL_TIM_PWM_MspInit+0xd8>)
 8004e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e86:	4a2b      	ldr	r2, [pc, #172]	; (8004f34 <HAL_TIM_PWM_MspInit+0xd8>)
 8004e88:	f043 0301 	orr.w	r3, r3, #1
 8004e8c:	6453      	str	r3, [r2, #68]	; 0x44
 8004e8e:	4b29      	ldr	r3, [pc, #164]	; (8004f34 <HAL_TIM_PWM_MspInit+0xd8>)
 8004e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e92:	f003 0301 	and.w	r3, r3, #1
 8004e96:	61bb      	str	r3, [r7, #24]
 8004e98:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	617b      	str	r3, [r7, #20]
 8004e9e:	4b25      	ldr	r3, [pc, #148]	; (8004f34 <HAL_TIM_PWM_MspInit+0xd8>)
 8004ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ea2:	4a24      	ldr	r2, [pc, #144]	; (8004f34 <HAL_TIM_PWM_MspInit+0xd8>)
 8004ea4:	f043 0310 	orr.w	r3, r3, #16
 8004ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8004eaa:	4b22      	ldr	r3, [pc, #136]	; (8004f34 <HAL_TIM_PWM_MspInit+0xd8>)
 8004eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eae:	f003 0310 	and.w	r3, r3, #16
 8004eb2:	617b      	str	r3, [r7, #20]
 8004eb4:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8004eb6:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8004eba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ebc:	2302      	movs	r3, #2
 8004ebe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004ecc:	f107 031c 	add.w	r3, r7, #28
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	4819      	ldr	r0, [pc, #100]	; (8004f38 <HAL_TIM_PWM_MspInit+0xdc>)
 8004ed4:	f002 ffd4 	bl	8007e80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004ed8:	e026      	b.n	8004f28 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM3)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a17      	ldr	r2, [pc, #92]	; (8004f3c <HAL_TIM_PWM_MspInit+0xe0>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d10e      	bne.n	8004f02 <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	613b      	str	r3, [r7, #16]
 8004ee8:	4b12      	ldr	r3, [pc, #72]	; (8004f34 <HAL_TIM_PWM_MspInit+0xd8>)
 8004eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eec:	4a11      	ldr	r2, [pc, #68]	; (8004f34 <HAL_TIM_PWM_MspInit+0xd8>)
 8004eee:	f043 0302 	orr.w	r3, r3, #2
 8004ef2:	6413      	str	r3, [r2, #64]	; 0x40
 8004ef4:	4b0f      	ldr	r3, [pc, #60]	; (8004f34 <HAL_TIM_PWM_MspInit+0xd8>)
 8004ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef8:	f003 0302 	and.w	r3, r3, #2
 8004efc:	613b      	str	r3, [r7, #16]
 8004efe:	693b      	ldr	r3, [r7, #16]
}
 8004f00:	e012      	b.n	8004f28 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM4)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a0e      	ldr	r2, [pc, #56]	; (8004f40 <HAL_TIM_PWM_MspInit+0xe4>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d10d      	bne.n	8004f28 <HAL_TIM_PWM_MspInit+0xcc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	60fb      	str	r3, [r7, #12]
 8004f10:	4b08      	ldr	r3, [pc, #32]	; (8004f34 <HAL_TIM_PWM_MspInit+0xd8>)
 8004f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f14:	4a07      	ldr	r2, [pc, #28]	; (8004f34 <HAL_TIM_PWM_MspInit+0xd8>)
 8004f16:	f043 0304 	orr.w	r3, r3, #4
 8004f1a:	6413      	str	r3, [r2, #64]	; 0x40
 8004f1c:	4b05      	ldr	r3, [pc, #20]	; (8004f34 <HAL_TIM_PWM_MspInit+0xd8>)
 8004f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f20:	f003 0304 	and.w	r3, r3, #4
 8004f24:	60fb      	str	r3, [r7, #12]
 8004f26:	68fb      	ldr	r3, [r7, #12]
}
 8004f28:	bf00      	nop
 8004f2a:	3730      	adds	r7, #48	; 0x30
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}
 8004f30:	40010000 	.word	0x40010000
 8004f34:	40023800 	.word	0x40023800
 8004f38:	40021000 	.word	0x40021000
 8004f3c:	40000400 	.word	0x40000400
 8004f40:	40000800 	.word	0x40000800

08004f44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b088      	sub	sp, #32
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a3e      	ldr	r2, [pc, #248]	; (800504c <HAL_TIM_Base_MspInit+0x108>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d116      	bne.n	8004f84 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004f56:	2300      	movs	r3, #0
 8004f58:	61fb      	str	r3, [r7, #28]
 8004f5a:	4b3d      	ldr	r3, [pc, #244]	; (8005050 <HAL_TIM_Base_MspInit+0x10c>)
 8004f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f5e:	4a3c      	ldr	r2, [pc, #240]	; (8005050 <HAL_TIM_Base_MspInit+0x10c>)
 8004f60:	f043 0310 	orr.w	r3, r3, #16
 8004f64:	6413      	str	r3, [r2, #64]	; 0x40
 8004f66:	4b3a      	ldr	r3, [pc, #232]	; (8005050 <HAL_TIM_Base_MspInit+0x10c>)
 8004f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6a:	f003 0310 	and.w	r3, r3, #16
 8004f6e:	61fb      	str	r3, [r7, #28]
 8004f70:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8004f72:	2200      	movs	r2, #0
 8004f74:	2101      	movs	r1, #1
 8004f76:	2036      	movs	r0, #54	; 0x36
 8004f78:	f002 fbaf 	bl	80076da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004f7c:	2036      	movs	r0, #54	; 0x36
 8004f7e:	f002 fbc8 	bl	8007712 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8004f82:	e05e      	b.n	8005042 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM7)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a32      	ldr	r2, [pc, #200]	; (8005054 <HAL_TIM_Base_MspInit+0x110>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d116      	bne.n	8004fbc <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004f8e:	2300      	movs	r3, #0
 8004f90:	61bb      	str	r3, [r7, #24]
 8004f92:	4b2f      	ldr	r3, [pc, #188]	; (8005050 <HAL_TIM_Base_MspInit+0x10c>)
 8004f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f96:	4a2e      	ldr	r2, [pc, #184]	; (8005050 <HAL_TIM_Base_MspInit+0x10c>)
 8004f98:	f043 0320 	orr.w	r3, r3, #32
 8004f9c:	6413      	str	r3, [r2, #64]	; 0x40
 8004f9e:	4b2c      	ldr	r3, [pc, #176]	; (8005050 <HAL_TIM_Base_MspInit+0x10c>)
 8004fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa2:	f003 0320 	and.w	r3, r3, #32
 8004fa6:	61bb      	str	r3, [r7, #24]
 8004fa8:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8004faa:	2200      	movs	r2, #0
 8004fac:	2100      	movs	r1, #0
 8004fae:	2037      	movs	r0, #55	; 0x37
 8004fb0:	f002 fb93 	bl	80076da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004fb4:	2037      	movs	r0, #55	; 0x37
 8004fb6:	f002 fbac 	bl	8007712 <HAL_NVIC_EnableIRQ>
}
 8004fba:	e042      	b.n	8005042 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM10)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a25      	ldr	r2, [pc, #148]	; (8005058 <HAL_TIM_Base_MspInit+0x114>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d10e      	bne.n	8004fe4 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	617b      	str	r3, [r7, #20]
 8004fca:	4b21      	ldr	r3, [pc, #132]	; (8005050 <HAL_TIM_Base_MspInit+0x10c>)
 8004fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fce:	4a20      	ldr	r2, [pc, #128]	; (8005050 <HAL_TIM_Base_MspInit+0x10c>)
 8004fd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fd4:	6453      	str	r3, [r2, #68]	; 0x44
 8004fd6:	4b1e      	ldr	r3, [pc, #120]	; (8005050 <HAL_TIM_Base_MspInit+0x10c>)
 8004fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fde:	617b      	str	r3, [r7, #20]
 8004fe0:	697b      	ldr	r3, [r7, #20]
}
 8004fe2:	e02e      	b.n	8005042 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM11)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a1c      	ldr	r2, [pc, #112]	; (800505c <HAL_TIM_Base_MspInit+0x118>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d10e      	bne.n	800500c <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8004fee:	2300      	movs	r3, #0
 8004ff0:	613b      	str	r3, [r7, #16]
 8004ff2:	4b17      	ldr	r3, [pc, #92]	; (8005050 <HAL_TIM_Base_MspInit+0x10c>)
 8004ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ff6:	4a16      	ldr	r2, [pc, #88]	; (8005050 <HAL_TIM_Base_MspInit+0x10c>)
 8004ff8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ffc:	6453      	str	r3, [r2, #68]	; 0x44
 8004ffe:	4b14      	ldr	r3, [pc, #80]	; (8005050 <HAL_TIM_Base_MspInit+0x10c>)
 8005000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005002:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005006:	613b      	str	r3, [r7, #16]
 8005008:	693b      	ldr	r3, [r7, #16]
}
 800500a:	e01a      	b.n	8005042 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM13)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a13      	ldr	r2, [pc, #76]	; (8005060 <HAL_TIM_Base_MspInit+0x11c>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d115      	bne.n	8005042 <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8005016:	2300      	movs	r3, #0
 8005018:	60fb      	str	r3, [r7, #12]
 800501a:	4b0d      	ldr	r3, [pc, #52]	; (8005050 <HAL_TIM_Base_MspInit+0x10c>)
 800501c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501e:	4a0c      	ldr	r2, [pc, #48]	; (8005050 <HAL_TIM_Base_MspInit+0x10c>)
 8005020:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005024:	6413      	str	r3, [r2, #64]	; 0x40
 8005026:	4b0a      	ldr	r3, [pc, #40]	; (8005050 <HAL_TIM_Base_MspInit+0x10c>)
 8005028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800502a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800502e:	60fb      	str	r3, [r7, #12]
 8005030:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8005032:	2200      	movs	r2, #0
 8005034:	2100      	movs	r1, #0
 8005036:	202c      	movs	r0, #44	; 0x2c
 8005038:	f002 fb4f 	bl	80076da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800503c:	202c      	movs	r0, #44	; 0x2c
 800503e:	f002 fb68 	bl	8007712 <HAL_NVIC_EnableIRQ>
}
 8005042:	bf00      	nop
 8005044:	3720      	adds	r7, #32
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}
 800504a:	bf00      	nop
 800504c:	40001000 	.word	0x40001000
 8005050:	40023800 	.word	0x40023800
 8005054:	40001400 	.word	0x40001400
 8005058:	40014400 	.word	0x40014400
 800505c:	40014800 	.word	0x40014800
 8005060:	40001c00 	.word	0x40001c00

08005064 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b08a      	sub	sp, #40	; 0x28
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800506c:	f107 0314 	add.w	r3, r7, #20
 8005070:	2200      	movs	r2, #0
 8005072:	601a      	str	r2, [r3, #0]
 8005074:	605a      	str	r2, [r3, #4]
 8005076:	609a      	str	r2, [r3, #8]
 8005078:	60da      	str	r2, [r3, #12]
 800507a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a1d      	ldr	r2, [pc, #116]	; (80050f8 <HAL_TIM_Encoder_MspInit+0x94>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d133      	bne.n	80050ee <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005086:	2300      	movs	r3, #0
 8005088:	613b      	str	r3, [r7, #16]
 800508a:	4b1c      	ldr	r3, [pc, #112]	; (80050fc <HAL_TIM_Encoder_MspInit+0x98>)
 800508c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800508e:	4a1b      	ldr	r2, [pc, #108]	; (80050fc <HAL_TIM_Encoder_MspInit+0x98>)
 8005090:	f043 0302 	orr.w	r3, r3, #2
 8005094:	6453      	str	r3, [r2, #68]	; 0x44
 8005096:	4b19      	ldr	r3, [pc, #100]	; (80050fc <HAL_TIM_Encoder_MspInit+0x98>)
 8005098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800509a:	f003 0302 	and.w	r3, r3, #2
 800509e:	613b      	str	r3, [r7, #16]
 80050a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80050a2:	2300      	movs	r3, #0
 80050a4:	60fb      	str	r3, [r7, #12]
 80050a6:	4b15      	ldr	r3, [pc, #84]	; (80050fc <HAL_TIM_Encoder_MspInit+0x98>)
 80050a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050aa:	4a14      	ldr	r2, [pc, #80]	; (80050fc <HAL_TIM_Encoder_MspInit+0x98>)
 80050ac:	f043 0304 	orr.w	r3, r3, #4
 80050b0:	6313      	str	r3, [r2, #48]	; 0x30
 80050b2:	4b12      	ldr	r3, [pc, #72]	; (80050fc <HAL_TIM_Encoder_MspInit+0x98>)
 80050b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050b6:	f003 0304 	and.w	r3, r3, #4
 80050ba:	60fb      	str	r3, [r7, #12]
 80050bc:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80050be:	23c0      	movs	r3, #192	; 0xc0
 80050c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050c2:	2302      	movs	r3, #2
 80050c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050c6:	2300      	movs	r3, #0
 80050c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050ca:	2300      	movs	r3, #0
 80050cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80050ce:	2303      	movs	r3, #3
 80050d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80050d2:	f107 0314 	add.w	r3, r7, #20
 80050d6:	4619      	mov	r1, r3
 80050d8:	4809      	ldr	r0, [pc, #36]	; (8005100 <HAL_TIM_Encoder_MspInit+0x9c>)
 80050da:	f002 fed1 	bl	8007e80 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80050de:	2200      	movs	r2, #0
 80050e0:	2100      	movs	r1, #0
 80050e2:	202c      	movs	r0, #44	; 0x2c
 80050e4:	f002 faf9 	bl	80076da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80050e8:	202c      	movs	r0, #44	; 0x2c
 80050ea:	f002 fb12 	bl	8007712 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80050ee:	bf00      	nop
 80050f0:	3728      	adds	r7, #40	; 0x28
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	40010400 	.word	0x40010400
 80050fc:	40023800 	.word	0x40023800
 8005100:	40020800 	.word	0x40020800

08005104 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b08c      	sub	sp, #48	; 0x30
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800510c:	f107 031c 	add.w	r3, r7, #28
 8005110:	2200      	movs	r2, #0
 8005112:	601a      	str	r2, [r3, #0]
 8005114:	605a      	str	r2, [r3, #4]
 8005116:	609a      	str	r2, [r3, #8]
 8005118:	60da      	str	r2, [r3, #12]
 800511a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a5c      	ldr	r2, [pc, #368]	; (8005294 <HAL_TIM_MspPostInit+0x190>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d11f      	bne.n	8005166 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005126:	2300      	movs	r3, #0
 8005128:	61bb      	str	r3, [r7, #24]
 800512a:	4b5b      	ldr	r3, [pc, #364]	; (8005298 <HAL_TIM_MspPostInit+0x194>)
 800512c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800512e:	4a5a      	ldr	r2, [pc, #360]	; (8005298 <HAL_TIM_MspPostInit+0x194>)
 8005130:	f043 0310 	orr.w	r3, r3, #16
 8005134:	6313      	str	r3, [r2, #48]	; 0x30
 8005136:	4b58      	ldr	r3, [pc, #352]	; (8005298 <HAL_TIM_MspPostInit+0x194>)
 8005138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800513a:	f003 0310 	and.w	r3, r3, #16
 800513e:	61bb      	str	r3, [r7, #24]
 8005140:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005142:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005146:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005148:	2302      	movs	r3, #2
 800514a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800514c:	2300      	movs	r3, #0
 800514e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005150:	2300      	movs	r3, #0
 8005152:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005154:	2301      	movs	r3, #1
 8005156:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005158:	f107 031c 	add.w	r3, r7, #28
 800515c:	4619      	mov	r1, r3
 800515e:	484f      	ldr	r0, [pc, #316]	; (800529c <HAL_TIM_MspPostInit+0x198>)
 8005160:	f002 fe8e 	bl	8007e80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8005164:	e091      	b.n	800528a <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM3)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a4d      	ldr	r2, [pc, #308]	; (80052a0 <HAL_TIM_MspPostInit+0x19c>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d11e      	bne.n	80051ae <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005170:	2300      	movs	r3, #0
 8005172:	617b      	str	r3, [r7, #20]
 8005174:	4b48      	ldr	r3, [pc, #288]	; (8005298 <HAL_TIM_MspPostInit+0x194>)
 8005176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005178:	4a47      	ldr	r2, [pc, #284]	; (8005298 <HAL_TIM_MspPostInit+0x194>)
 800517a:	f043 0302 	orr.w	r3, r3, #2
 800517e:	6313      	str	r3, [r2, #48]	; 0x30
 8005180:	4b45      	ldr	r3, [pc, #276]	; (8005298 <HAL_TIM_MspPostInit+0x194>)
 8005182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005184:	f003 0302 	and.w	r3, r3, #2
 8005188:	617b      	str	r3, [r7, #20]
 800518a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800518c:	2330      	movs	r3, #48	; 0x30
 800518e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005190:	2302      	movs	r3, #2
 8005192:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005194:	2300      	movs	r3, #0
 8005196:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005198:	2300      	movs	r3, #0
 800519a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800519c:	2302      	movs	r3, #2
 800519e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051a0:	f107 031c 	add.w	r3, r7, #28
 80051a4:	4619      	mov	r1, r3
 80051a6:	483f      	ldr	r0, [pc, #252]	; (80052a4 <HAL_TIM_MspPostInit+0x1a0>)
 80051a8:	f002 fe6a 	bl	8007e80 <HAL_GPIO_Init>
}
 80051ac:	e06d      	b.n	800528a <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM4)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a3d      	ldr	r2, [pc, #244]	; (80052a8 <HAL_TIM_MspPostInit+0x1a4>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d11f      	bne.n	80051f8 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80051b8:	2300      	movs	r3, #0
 80051ba:	613b      	str	r3, [r7, #16]
 80051bc:	4b36      	ldr	r3, [pc, #216]	; (8005298 <HAL_TIM_MspPostInit+0x194>)
 80051be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051c0:	4a35      	ldr	r2, [pc, #212]	; (8005298 <HAL_TIM_MspPostInit+0x194>)
 80051c2:	f043 0308 	orr.w	r3, r3, #8
 80051c6:	6313      	str	r3, [r2, #48]	; 0x30
 80051c8:	4b33      	ldr	r3, [pc, #204]	; (8005298 <HAL_TIM_MspPostInit+0x194>)
 80051ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051cc:	f003 0308 	and.w	r3, r3, #8
 80051d0:	613b      	str	r3, [r7, #16]
 80051d2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80051d4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80051d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051da:	2302      	movs	r3, #2
 80051dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051de:	2300      	movs	r3, #0
 80051e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051e2:	2300      	movs	r3, #0
 80051e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80051e6:	2302      	movs	r3, #2
 80051e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80051ea:	f107 031c 	add.w	r3, r7, #28
 80051ee:	4619      	mov	r1, r3
 80051f0:	482e      	ldr	r0, [pc, #184]	; (80052ac <HAL_TIM_MspPostInit+0x1a8>)
 80051f2:	f002 fe45 	bl	8007e80 <HAL_GPIO_Init>
}
 80051f6:	e048      	b.n	800528a <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM10)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a2c      	ldr	r2, [pc, #176]	; (80052b0 <HAL_TIM_MspPostInit+0x1ac>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d11f      	bne.n	8005242 <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005202:	2300      	movs	r3, #0
 8005204:	60fb      	str	r3, [r7, #12]
 8005206:	4b24      	ldr	r3, [pc, #144]	; (8005298 <HAL_TIM_MspPostInit+0x194>)
 8005208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800520a:	4a23      	ldr	r2, [pc, #140]	; (8005298 <HAL_TIM_MspPostInit+0x194>)
 800520c:	f043 0302 	orr.w	r3, r3, #2
 8005210:	6313      	str	r3, [r2, #48]	; 0x30
 8005212:	4b21      	ldr	r3, [pc, #132]	; (8005298 <HAL_TIM_MspPostInit+0x194>)
 8005214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005216:	f003 0302 	and.w	r3, r3, #2
 800521a:	60fb      	str	r3, [r7, #12]
 800521c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800521e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005222:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005224:	2302      	movs	r3, #2
 8005226:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005228:	2300      	movs	r3, #0
 800522a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800522c:	2300      	movs	r3, #0
 800522e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8005230:	2303      	movs	r3, #3
 8005232:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005234:	f107 031c 	add.w	r3, r7, #28
 8005238:	4619      	mov	r1, r3
 800523a:	481a      	ldr	r0, [pc, #104]	; (80052a4 <HAL_TIM_MspPostInit+0x1a0>)
 800523c:	f002 fe20 	bl	8007e80 <HAL_GPIO_Init>
}
 8005240:	e023      	b.n	800528a <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM11)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a1b      	ldr	r2, [pc, #108]	; (80052b4 <HAL_TIM_MspPostInit+0x1b0>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d11e      	bne.n	800528a <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800524c:	2300      	movs	r3, #0
 800524e:	60bb      	str	r3, [r7, #8]
 8005250:	4b11      	ldr	r3, [pc, #68]	; (8005298 <HAL_TIM_MspPostInit+0x194>)
 8005252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005254:	4a10      	ldr	r2, [pc, #64]	; (8005298 <HAL_TIM_MspPostInit+0x194>)
 8005256:	f043 0302 	orr.w	r3, r3, #2
 800525a:	6313      	str	r3, [r2, #48]	; 0x30
 800525c:	4b0e      	ldr	r3, [pc, #56]	; (8005298 <HAL_TIM_MspPostInit+0x194>)
 800525e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005260:	f003 0302 	and.w	r3, r3, #2
 8005264:	60bb      	str	r3, [r7, #8]
 8005266:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005268:	f44f 7300 	mov.w	r3, #512	; 0x200
 800526c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800526e:	2302      	movs	r3, #2
 8005270:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005272:	2300      	movs	r3, #0
 8005274:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005276:	2300      	movs	r3, #0
 8005278:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 800527a:	2303      	movs	r3, #3
 800527c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800527e:	f107 031c 	add.w	r3, r7, #28
 8005282:	4619      	mov	r1, r3
 8005284:	4807      	ldr	r0, [pc, #28]	; (80052a4 <HAL_TIM_MspPostInit+0x1a0>)
 8005286:	f002 fdfb 	bl	8007e80 <HAL_GPIO_Init>
}
 800528a:	bf00      	nop
 800528c:	3730      	adds	r7, #48	; 0x30
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
 8005292:	bf00      	nop
 8005294:	40010000 	.word	0x40010000
 8005298:	40023800 	.word	0x40023800
 800529c:	40021000 	.word	0x40021000
 80052a0:	40000400 	.word	0x40000400
 80052a4:	40020400 	.word	0x40020400
 80052a8:	40000800 	.word	0x40000800
 80052ac:	40020c00 	.word	0x40020c00
 80052b0:	40014400 	.word	0x40014400
 80052b4:	40014800 	.word	0x40014800

080052b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b08a      	sub	sp, #40	; 0x28
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052c0:	f107 0314 	add.w	r3, r7, #20
 80052c4:	2200      	movs	r2, #0
 80052c6:	601a      	str	r2, [r3, #0]
 80052c8:	605a      	str	r2, [r3, #4]
 80052ca:	609a      	str	r2, [r3, #8]
 80052cc:	60da      	str	r2, [r3, #12]
 80052ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a19      	ldr	r2, [pc, #100]	; (800533c <HAL_UART_MspInit+0x84>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d12b      	bne.n	8005332 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80052da:	2300      	movs	r3, #0
 80052dc:	613b      	str	r3, [r7, #16]
 80052de:	4b18      	ldr	r3, [pc, #96]	; (8005340 <HAL_UART_MspInit+0x88>)
 80052e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e2:	4a17      	ldr	r2, [pc, #92]	; (8005340 <HAL_UART_MspInit+0x88>)
 80052e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052e8:	6413      	str	r3, [r2, #64]	; 0x40
 80052ea:	4b15      	ldr	r3, [pc, #84]	; (8005340 <HAL_UART_MspInit+0x88>)
 80052ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052f2:	613b      	str	r3, [r7, #16]
 80052f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80052f6:	2300      	movs	r3, #0
 80052f8:	60fb      	str	r3, [r7, #12]
 80052fa:	4b11      	ldr	r3, [pc, #68]	; (8005340 <HAL_UART_MspInit+0x88>)
 80052fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052fe:	4a10      	ldr	r2, [pc, #64]	; (8005340 <HAL_UART_MspInit+0x88>)
 8005300:	f043 0308 	orr.w	r3, r3, #8
 8005304:	6313      	str	r3, [r2, #48]	; 0x30
 8005306:	4b0e      	ldr	r3, [pc, #56]	; (8005340 <HAL_UART_MspInit+0x88>)
 8005308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800530a:	f003 0308 	and.w	r3, r3, #8
 800530e:	60fb      	str	r3, [r7, #12]
 8005310:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8005312:	2360      	movs	r3, #96	; 0x60
 8005314:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005316:	2302      	movs	r3, #2
 8005318:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800531a:	2300      	movs	r3, #0
 800531c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800531e:	2303      	movs	r3, #3
 8005320:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005322:	2307      	movs	r3, #7
 8005324:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005326:	f107 0314 	add.w	r3, r7, #20
 800532a:	4619      	mov	r1, r3
 800532c:	4805      	ldr	r0, [pc, #20]	; (8005344 <HAL_UART_MspInit+0x8c>)
 800532e:	f002 fda7 	bl	8007e80 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005332:	bf00      	nop
 8005334:	3728      	adds	r7, #40	; 0x28
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
 800533a:	bf00      	nop
 800533c:	40004400 	.word	0x40004400
 8005340:	40023800 	.word	0x40023800
 8005344:	40020c00 	.word	0x40020c00

08005348 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005348:	b480      	push	{r7}
 800534a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800534c:	e7fe      	b.n	800534c <NMI_Handler+0x4>

0800534e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800534e:	b480      	push	{r7}
 8005350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005352:	e7fe      	b.n	8005352 <HardFault_Handler+0x4>

08005354 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005354:	b480      	push	{r7}
 8005356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005358:	e7fe      	b.n	8005358 <MemManage_Handler+0x4>

0800535a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800535a:	b480      	push	{r7}
 800535c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800535e:	e7fe      	b.n	800535e <BusFault_Handler+0x4>

08005360 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005360:	b480      	push	{r7}
 8005362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005364:	e7fe      	b.n	8005364 <UsageFault_Handler+0x4>

08005366 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005366:	b480      	push	{r7}
 8005368:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800536a:	bf00      	nop
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005374:	b480      	push	{r7}
 8005376:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005378:	bf00      	nop
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr

08005382 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005382:	b480      	push	{r7}
 8005384:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005386:	bf00      	nop
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr

08005390 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005394:	f001 fc80 	bl	8006c98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005398:	bf00      	nop
 800539a:	bd80      	pop	{r7, pc}

0800539c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80053a0:	2004      	movs	r0, #4
 80053a2:	f002 ff49 	bl	8008238 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80053a6:	bf00      	nop
 80053a8:	bd80      	pop	{r7, pc}

080053aa <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80053aa:	b580      	push	{r7, lr}
 80053ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80053ae:	f44f 7080 	mov.w	r0, #256	; 0x100
 80053b2:	f002 ff41 	bl	8008238 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80053b6:	bf00      	nop
 80053b8:	bd80      	pop	{r7, pc}
	...

080053bc <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80053c0:	4803      	ldr	r0, [pc, #12]	; (80053d0 <TIM8_UP_TIM13_IRQHandler+0x14>)
 80053c2:	f006 ff58 	bl	800c276 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 80053c6:	4803      	ldr	r0, [pc, #12]	; (80053d4 <TIM8_UP_TIM13_IRQHandler+0x18>)
 80053c8:	f006 ff55 	bl	800c276 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80053cc:	bf00      	nop
 80053ce:	bd80      	pop	{r7, pc}
 80053d0:	200397f0 	.word	0x200397f0
 80053d4:	200399ec 	.word	0x200399ec

080053d8 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80053dc:	4802      	ldr	r0, [pc, #8]	; (80053e8 <SDIO_IRQHandler+0x10>)
 80053de:	f004 fff1 	bl	800a3c4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80053e2:	bf00      	nop
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	20039b4c 	.word	0x20039b4c

080053ec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80053f0:	4802      	ldr	r0, [pc, #8]	; (80053fc <TIM6_DAC_IRQHandler+0x10>)
 80053f2:	f006 ff40 	bl	800c276 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80053f6:	bf00      	nop
 80053f8:	bd80      	pop	{r7, pc}
 80053fa:	bf00      	nop
 80053fc:	20039acc 	.word	0x20039acc

08005400 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8005404:	4802      	ldr	r0, [pc, #8]	; (8005410 <TIM7_IRQHandler+0x10>)
 8005406:	f006 ff36 	bl	800c276 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800540a:	bf00      	nop
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	20039c70 	.word	0x20039c70

08005414 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8005418:	4802      	ldr	r0, [pc, #8]	; (8005424 <DMA2_Stream2_IRQHandler+0x10>)
 800541a:	f002 fabd 	bl	8007998 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800541e:	bf00      	nop
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop
 8005424:	20039c10 	.word	0x20039c10

08005428 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 800542c:	4802      	ldr	r0, [pc, #8]	; (8005438 <DMA2_Stream3_IRQHandler+0x10>)
 800542e:	f002 fab3 	bl	8007998 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8005432:	bf00      	nop
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop
 8005438:	20039738 	.word	0x20039738

0800543c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8005440:	4802      	ldr	r0, [pc, #8]	; (800544c <DMA2_Stream6_IRQHandler+0x10>)
 8005442:	f002 faa9 	bl	8007998 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8005446:	bf00      	nop
 8005448:	bd80      	pop	{r7, pc}
 800544a:	bf00      	nop
 800544c:	20039a6c 	.word	0x20039a6c

08005450 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b086      	sub	sp, #24
 8005454:	af00      	add	r7, sp, #0
 8005456:	60f8      	str	r0, [r7, #12]
 8005458:	60b9      	str	r1, [r7, #8]
 800545a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800545c:	2300      	movs	r3, #0
 800545e:	617b      	str	r3, [r7, #20]
 8005460:	e00a      	b.n	8005478 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005462:	f3af 8000 	nop.w
 8005466:	4601      	mov	r1, r0
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	1c5a      	adds	r2, r3, #1
 800546c:	60ba      	str	r2, [r7, #8]
 800546e:	b2ca      	uxtb	r2, r1
 8005470:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	3301      	adds	r3, #1
 8005476:	617b      	str	r3, [r7, #20]
 8005478:	697a      	ldr	r2, [r7, #20]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	429a      	cmp	r2, r3
 800547e:	dbf0      	blt.n	8005462 <_read+0x12>
	}

return len;
 8005480:	687b      	ldr	r3, [r7, #4]
}
 8005482:	4618      	mov	r0, r3
 8005484:	3718      	adds	r7, #24
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}

0800548a <_close>:
	}
	return len;
}

int _close(int file)
{
 800548a:	b480      	push	{r7}
 800548c:	b083      	sub	sp, #12
 800548e:	af00      	add	r7, sp, #0
 8005490:	6078      	str	r0, [r7, #4]
	return -1;
 8005492:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005496:	4618      	mov	r0, r3
 8005498:	370c      	adds	r7, #12
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr

080054a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80054a2:	b480      	push	{r7}
 80054a4:	b083      	sub	sp, #12
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]
 80054aa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80054b2:	605a      	str	r2, [r3, #4]
	return 0;
 80054b4:	2300      	movs	r3, #0
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	370c      	adds	r7, #12
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr

080054c2 <_isatty>:

int _isatty(int file)
{
 80054c2:	b480      	push	{r7}
 80054c4:	b083      	sub	sp, #12
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
	return 1;
 80054ca:	2301      	movs	r3, #1
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	370c      	adds	r7, #12
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr

080054d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80054d8:	b480      	push	{r7}
 80054da:	b085      	sub	sp, #20
 80054dc:	af00      	add	r7, sp, #0
 80054de:	60f8      	str	r0, [r7, #12]
 80054e0:	60b9      	str	r1, [r7, #8]
 80054e2:	607a      	str	r2, [r7, #4]
	return 0;
 80054e4:	2300      	movs	r3, #0
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3714      	adds	r7, #20
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr
	...

080054f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b086      	sub	sp, #24
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80054fc:	4a14      	ldr	r2, [pc, #80]	; (8005550 <_sbrk+0x5c>)
 80054fe:	4b15      	ldr	r3, [pc, #84]	; (8005554 <_sbrk+0x60>)
 8005500:	1ad3      	subs	r3, r2, r3
 8005502:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005508:	4b13      	ldr	r3, [pc, #76]	; (8005558 <_sbrk+0x64>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d102      	bne.n	8005516 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005510:	4b11      	ldr	r3, [pc, #68]	; (8005558 <_sbrk+0x64>)
 8005512:	4a12      	ldr	r2, [pc, #72]	; (800555c <_sbrk+0x68>)
 8005514:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005516:	4b10      	ldr	r3, [pc, #64]	; (8005558 <_sbrk+0x64>)
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4413      	add	r3, r2
 800551e:	693a      	ldr	r2, [r7, #16]
 8005520:	429a      	cmp	r2, r3
 8005522:	d207      	bcs.n	8005534 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005524:	f00d f93a 	bl	801279c <__errno>
 8005528:	4602      	mov	r2, r0
 800552a:	230c      	movs	r3, #12
 800552c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800552e:	f04f 33ff 	mov.w	r3, #4294967295
 8005532:	e009      	b.n	8005548 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005534:	4b08      	ldr	r3, [pc, #32]	; (8005558 <_sbrk+0x64>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800553a:	4b07      	ldr	r3, [pc, #28]	; (8005558 <_sbrk+0x64>)
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4413      	add	r3, r2
 8005542:	4a05      	ldr	r2, [pc, #20]	; (8005558 <_sbrk+0x64>)
 8005544:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005546:	68fb      	ldr	r3, [r7, #12]
}
 8005548:	4618      	mov	r0, r3
 800554a:	3718      	adds	r7, #24
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}
 8005550:	20050000 	.word	0x20050000
 8005554:	00000800 	.word	0x00000800
 8005558:	20000244 	.word	0x20000244
 800555c:	2003bdc0 	.word	0x2003bdc0

08005560 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005560:	b480      	push	{r7}
 8005562:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005564:	4b08      	ldr	r3, [pc, #32]	; (8005588 <SystemInit+0x28>)
 8005566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800556a:	4a07      	ldr	r2, [pc, #28]	; (8005588 <SystemInit+0x28>)
 800556c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005570:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005574:	4b04      	ldr	r3, [pc, #16]	; (8005588 <SystemInit+0x28>)
 8005576:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800557a:	609a      	str	r2, [r3, #8]
#endif
}
 800557c:	bf00      	nop
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr
 8005586:	bf00      	nop
 8005588:	e000ed00 	.word	0xe000ed00

0800558c <batteryLowMode>:
float mon_v, mon_w;
uint16_t mon_cnt;
float mon_zg, mon_offset;

void batteryLowMode()
{
 800558c:	b580      	push	{r7, lr}
 800558e:	af00      	add	r7, sp, #0
	lcd_clear();
 8005590:	f7fb fd86 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8005594:	2100      	movs	r1, #0
 8005596:	2000      	movs	r0, #0
 8005598:	f7fb fd92 	bl	80010c0 <lcd_locate>
	lcd_printf("Battery");
 800559c:	4814      	ldr	r0, [pc, #80]	; (80055f0 <batteryLowMode+0x64>)
 800559e:	f7fb fdb9 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 80055a2:	2101      	movs	r1, #1
 80055a4:	2000      	movs	r0, #0
 80055a6:	f7fb fd8b 	bl	80010c0 <lcd_locate>
	lcd_printf("Low");
 80055aa:	4812      	ldr	r0, [pc, #72]	; (80055f4 <batteryLowMode+0x68>)
 80055ac:	f7fb fdb2 	bl	8001114 <lcd_printf>

	while(1){
		led.fullColor('R');
 80055b0:	2152      	movs	r1, #82	; 0x52
 80055b2:	4811      	ldr	r0, [pc, #68]	; (80055f8 <batteryLowMode+0x6c>)
 80055b4:	f7fc fc58 	bl	8001e68 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 80055b8:	2064      	movs	r0, #100	; 0x64
 80055ba:	f001 fb8d 	bl	8006cd8 <HAL_Delay>
		led.fullColor('Y');
 80055be:	2159      	movs	r1, #89	; 0x59
 80055c0:	480d      	ldr	r0, [pc, #52]	; (80055f8 <batteryLowMode+0x6c>)
 80055c2:	f7fc fc51 	bl	8001e68 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 80055c6:	2064      	movs	r0, #100	; 0x64
 80055c8:	f001 fb86 	bl	8006cd8 <HAL_Delay>

		if(joy_stick.getValue() == JOY_C){
 80055cc:	480b      	ldr	r0, [pc, #44]	; (80055fc <batteryLowMode+0x70>)
 80055ce:	f7fc fbe7 	bl	8001da0 <_ZN8JoyStick8getValueEv>
 80055d2:	4603      	mov	r3, r0
 80055d4:	2b02      	cmp	r3, #2
 80055d6:	bf0c      	ite	eq
 80055d8:	2301      	moveq	r3, #1
 80055da:	2300      	movne	r3, #0
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d0e6      	beq.n	80055b0 <batteryLowMode+0x24>
			HAL_Delay(500);
 80055e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80055e6:	f001 fb77 	bl	8006cd8 <HAL_Delay>
			break;
 80055ea:	bf00      	nop
		}
	}
}
 80055ec:	bf00      	nop
 80055ee:	bd80      	pop	{r7, pc}
 80055f0:	080178c0 	.word	0x080178c0
 80055f4:	080178c8 	.word	0x080178c8
 80055f8:	20000550 	.word	0x20000550
 80055fc:	20000544 	.word	0x20000544

08005600 <cppInit>:

void cppInit(void)
{
 8005600:	b598      	push	{r3, r4, r7, lr}
 8005602:	af00      	add	r7, sp, #0
	lcd_init();
 8005604:	f7fb fd08 	bl	8001018 <lcd_init>

	//---------- Buttery Check ----------//
	power_sensor.init();
 8005608:	4842      	ldr	r0, [pc, #264]	; (8005714 <cppInit+0x114>)
 800560a:	f7fd fd4d 	bl	80030a8 <_ZN11PowerSensor4initEv>
	HAL_Delay(100);
 800560e:	2064      	movs	r0, #100	; 0x64
 8005610:	f001 fb62 	bl	8006cd8 <HAL_Delay>
	power_sensor.updateValues();
 8005614:	483f      	ldr	r0, [pc, #252]	; (8005714 <cppInit+0x114>)
 8005616:	f7fd fd57 	bl	80030c8 <_ZN11PowerSensor12updateValuesEv>

	lcd_clear();
 800561a:	f7fb fd41 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 800561e:	2100      	movs	r1, #0
 8005620:	2000      	movs	r0, #0
 8005622:	f7fb fd4d 	bl	80010c0 <lcd_locate>
	lcd_printf("Voltage");
 8005626:	483c      	ldr	r0, [pc, #240]	; (8005718 <cppInit+0x118>)
 8005628:	f7fb fd74 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 800562c:	2101      	movs	r1, #1
 800562e:	2000      	movs	r0, #0
 8005630:	f7fb fd46 	bl	80010c0 <lcd_locate>
	lcd_printf("%f", power_sensor.getButteryVoltage());
 8005634:	4837      	ldr	r0, [pc, #220]	; (8005714 <cppInit+0x114>)
 8005636:	f7fd fd71 	bl	800311c <_ZN11PowerSensor17getButteryVoltageEv>
 800563a:	ee10 3a10 	vmov	r3, s0
 800563e:	4618      	mov	r0, r3
 8005640:	f7fa ff9a 	bl	8000578 <__aeabi_f2d>
 8005644:	4603      	mov	r3, r0
 8005646:	460c      	mov	r4, r1
 8005648:	461a      	mov	r2, r3
 800564a:	4623      	mov	r3, r4
 800564c:	4833      	ldr	r0, [pc, #204]	; (800571c <cppInit+0x11c>)
 800564e:	f7fb fd61 	bl	8001114 <lcd_printf>
	HAL_Delay(1000);
 8005652:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005656:	f001 fb3f 	bl	8006cd8 <HAL_Delay>

	if(power_sensor.butteryCheck() == true) batteryLowMode(); //if battery low, informed
 800565a:	482e      	ldr	r0, [pc, #184]	; (8005714 <cppInit+0x114>)
 800565c:	f7fd fd70 	bl	8003140 <_ZN11PowerSensor12butteryCheckEv>
 8005660:	4603      	mov	r3, r0
 8005662:	2b00      	cmp	r3, #0
 8005664:	d001      	beq.n	800566a <cppInit+0x6a>
 8005666:	f7ff ff91 	bl	800558c <batteryLowMode>

	// -----------initialize-------//
	if(logger.sdCardInit() == true){ //sd mount successfull
 800566a:	482d      	ldr	r0, [pc, #180]	; (8005720 <cppInit+0x120>)
 800566c:	f7fd f8ce 	bl	800280c <_ZN6Logger10sdCardInitEv>
 8005670:	4603      	mov	r3, r0
 8005672:	2b00      	cmp	r3, #0
 8005674:	d007      	beq.n	8005686 <cppInit+0x86>
		led.fullColor('G');
 8005676:	2147      	movs	r1, #71	; 0x47
 8005678:	482a      	ldr	r0, [pc, #168]	; (8005724 <cppInit+0x124>)
 800567a:	f7fc fbf5 	bl	8001e68 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 800567e:	2064      	movs	r0, #100	; 0x64
 8005680:	f001 fb2a 	bl	8006cd8 <HAL_Delay>
 8005684:	e006      	b.n	8005694 <cppInit+0x94>
	}
	else{ //sd mount fali
		led.fullColor('R');
 8005686:	2152      	movs	r1, #82	; 0x52
 8005688:	4826      	ldr	r0, [pc, #152]	; (8005724 <cppInit+0x124>)
 800568a:	f7fc fbed 	bl	8001e68 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 800568e:	2064      	movs	r0, #100	; 0x64
 8005690:	f001 fb22 	bl	8006cd8 <HAL_Delay>
	}

	line_sensor.ADCStart();
 8005694:	4824      	ldr	r0, [pc, #144]	; (8005728 <cppInit+0x128>)
 8005696:	f7fc fd43 	bl	8002120 <_ZN10LineSensor8ADCStartEv>
	motor.init();
 800569a:	4824      	ldr	r0, [pc, #144]	; (800572c <cppInit+0x12c>)
 800569c:	f7fd f9f6 	bl	8002a8c <_ZN5Motor4initEv>
	encoder.init();
 80056a0:	4823      	ldr	r0, [pc, #140]	; (8005730 <cppInit+0x130>)
 80056a2:	f7fb fd7b 	bl	800119c <_ZN7Encoder4initEv>
	imu.init();
 80056a6:	4823      	ldr	r0, [pc, #140]	; (8005734 <cppInit+0x134>)
 80056a8:	f7fc f99c 	bl	80019e4 <_ZN3IMU4initEv>
	line_trace.init();
 80056ac:	4822      	ldr	r0, [pc, #136]	; (8005738 <cppInit+0x138>)
 80056ae:	f7fc ff73 	bl	8002598 <_ZN9LineTrace4initEv>

	//line_sensor.calibration();
	HAL_Delay(1000);
 80056b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80056b6:	f001 fb0f 	bl	8006cd8 <HAL_Delay>

	led.fullColor('M');
 80056ba:	214d      	movs	r1, #77	; 0x4d
 80056bc:	4819      	ldr	r0, [pc, #100]	; (8005724 <cppInit+0x124>)
 80056be:	f7fc fbd3 	bl	8001e68 <_ZN3LED9fullColorEc>
	imu.calibration();
 80056c2:	481c      	ldr	r0, [pc, #112]	; (8005734 <cppInit+0x134>)
 80056c4:	f7fc fa5e 	bl	8001b84 <_ZN3IMU11calibrationEv>

	//line_trace.setGain(0.0005, 0.000003, 0);
	line_trace.setGain(0.0005, 0.000002, 0);
 80056c8:	ed9f 1a1c 	vldr	s2, [pc, #112]	; 800573c <cppInit+0x13c>
 80056cc:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8005740 <cppInit+0x140>
 80056d0:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 8005744 <cppInit+0x144>
 80056d4:	4818      	ldr	r0, [pc, #96]	; (8005738 <cppInit+0x138>)
 80056d6:	f7fc ff93 	bl	8002600 <_ZN9LineTrace7setGainEfff>

	//velocity_ctrl.setVelocityGain(1.5, 20, 0);
	velocity_ctrl.setVelocityGain(3.0983, 23.773, 0.036866);
 80056da:	ed9f 1a1b 	vldr	s2, [pc, #108]	; 8005748 <cppInit+0x148>
 80056de:	eddf 0a1b 	vldr	s1, [pc, #108]	; 800574c <cppInit+0x14c>
 80056e2:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 8005750 <cppInit+0x150>
 80056e6:	481b      	ldr	r0, [pc, #108]	; (8005754 <cppInit+0x154>)
 80056e8:	f7fe f8c2 	bl	8003870 <_ZN12VelocityCtrl15setVelocityGainEfff>
	//velocity_ctrl.setVelocityGain(1.9842, 22.9078, 0.02079);
	//velocity_ctrl.setOmegaGain(0.5, 5, 0);
	//velocity_ctrl.setOmegaGain(0.05, 7, 0);
	velocity_ctrl.setOmegaGain(0.35757, 4.0392, 0.0046799);
 80056ec:	ed9f 1a1a 	vldr	s2, [pc, #104]	; 8005758 <cppInit+0x158>
 80056f0:	eddf 0a1a 	vldr	s1, [pc, #104]	; 800575c <cppInit+0x15c>
 80056f4:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 8005760 <cppInit+0x160>
 80056f8:	4816      	ldr	r0, [pc, #88]	; (8005754 <cppInit+0x154>)
 80056fa:	f7fe f8d2 	bl	80038a2 <_ZN12VelocityCtrl12setOmegaGainEfff>
	//velocity_ctrl.setOmegaGain(0.12175, 1.0604, 0.002614);
	//velocity_ctrl.setOmegaGain(0.0, 0, 0);


	encoder.clearDistance();
 80056fe:	480c      	ldr	r0, [pc, #48]	; (8005730 <cppInit+0x130>)
 8005700:	f7fb fe7b 	bl	80013fa <_ZN7Encoder13clearDistanceEv>
	odometry.clearPotition();
 8005704:	4817      	ldr	r0, [pc, #92]	; (8005764 <cppInit+0x164>)
 8005706:	f7fd fb9c 	bl	8002e42 <_ZN8Odometry13clearPotitionEv>

	path_following.init();
 800570a:	4817      	ldr	r0, [pc, #92]	; (8005768 <cppInit+0x168>)
 800570c:	f7fd fc34 	bl	8002f78 <_ZN13PathFollowing4initEv>

}
 8005710:	bf00      	nop
 8005712:	bd98      	pop	{r3, r4, r7, pc}
 8005714:	20000554 	.word	0x20000554
 8005718:	080178cc 	.word	0x080178cc
 800571c:	080178d4 	.word	0x080178d4
 8005720:	20000574 	.word	0x20000574
 8005724:	20000550 	.word	0x20000550
 8005728:	20000248 	.word	0x20000248
 800572c:	2000054c 	.word	0x2000054c
 8005730:	2001f97c 	.word	0x2001f97c
 8005734:	20000560 	.word	0x20000560
 8005738:	2001f9cc 	.word	0x2001f9cc
 800573c:	00000000 	.word	0x00000000
 8005740:	360637bd 	.word	0x360637bd
 8005744:	3a03126f 	.word	0x3a03126f
 8005748:	3d1700ce 	.word	0x3d1700ce
 800574c:	41be2f1b 	.word	0x41be2f1b
 8005750:	40464a8c 	.word	0x40464a8c
 8005754:	2001f994 	.word	0x2001f994
 8005758:	3b9959d9 	.word	0x3b9959d9
 800575c:	40814120 	.word	0x40814120
 8005760:	3eb7136a 	.word	0x3eb7136a
 8005764:	2001fa38 	.word	0x2001fa38
 8005768:	2001fc78 	.word	0x2001fc78

0800576c <cppFlip1ms>:

void cppFlip1ms(void)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	af00      	add	r7, sp, #0
	line_sensor.updateSensorValues();
 8005770:	4825      	ldr	r0, [pc, #148]	; (8005808 <cppFlip1ms+0x9c>)
 8005772:	f7fc fd33 	bl	80021dc <_ZN10LineSensor18updateSensorValuesEv>
	imu.updateValues();
 8005776:	4825      	ldr	r0, [pc, #148]	; (800580c <cppFlip1ms+0xa0>)
 8005778:	f7fc f962 	bl	8001a40 <_ZN3IMU12updateValuesEv>
	mon_zg = imu.getOmega();
 800577c:	4823      	ldr	r0, [pc, #140]	; (800580c <cppFlip1ms+0xa0>)
 800577e:	f7fc f9b7 	bl	8001af0 <_ZN3IMU8getOmegaEv>
 8005782:	eef0 7a40 	vmov.f32	s15, s0
 8005786:	4b22      	ldr	r3, [pc, #136]	; (8005810 <cppFlip1ms+0xa4>)
 8005788:	edc3 7a00 	vstr	s15, [r3]
	mon_offset = imu.getOffsetVal();
 800578c:	481f      	ldr	r0, [pc, #124]	; (800580c <cppFlip1ms+0xa0>)
 800578e:	f7fc fa7a 	bl	8001c86 <_ZN3IMU12getOffsetValEv>
 8005792:	eef0 7a40 	vmov.f32	s15, s0
 8005796:	4b1f      	ldr	r3, [pc, #124]	; (8005814 <cppFlip1ms+0xa8>)
 8005798:	edc3 7a00 	vstr	s15, [r3]
	encoder.updateCnt();
 800579c:	481e      	ldr	r0, [pc, #120]	; (8005818 <cppFlip1ms+0xac>)
 800579e:	f7fb fd1f 	bl	80011e0 <_ZN7Encoder9updateCntEv>

	line_trace.flip();
 80057a2:	481e      	ldr	r0, [pc, #120]	; (800581c <cppFlip1ms+0xb0>)
 80057a4:	f7fc ffac 	bl	8002700 <_ZN9LineTrace4flipEv>
	velocity_ctrl.flip();
 80057a8:	481d      	ldr	r0, [pc, #116]	; (8005820 <cppFlip1ms+0xb4>)
 80057aa:	f7fe f893 	bl	80038d4 <_ZN12VelocityCtrl4flipEv>
	odometry.flip();
 80057ae:	481d      	ldr	r0, [pc, #116]	; (8005824 <cppFlip1ms+0xb8>)
 80057b0:	f7fd fb3c 	bl	8002e2c <_ZN8Odometry4flipEv>

	motor.motorCtrl();
 80057b4:	481c      	ldr	r0, [pc, #112]	; (8005828 <cppFlip1ms+0xbc>)
 80057b6:	f7fd f97b 	bl	8002ab0 <_ZN5Motor9motorCtrlEv>

	logger.storeLog(velocity_ctrl.getCurrentVelocity());
 80057ba:	4819      	ldr	r0, [pc, #100]	; (8005820 <cppFlip1ms+0xb4>)
 80057bc:	f7fe f8c8 	bl	8003950 <_ZN12VelocityCtrl18getCurrentVelocityEv>
 80057c0:	eef0 7a40 	vmov.f32	s15, s0
 80057c4:	eeb0 0a67 	vmov.f32	s0, s15
 80057c8:	4818      	ldr	r0, [pc, #96]	; (800582c <cppFlip1ms+0xc0>)
 80057ca:	f7fd f871 	bl	80028b0 <_ZN6Logger8storeLogEf>
	//logger.storeLog(imu.getOmega());

	static uint16_t twice_cnt;
	twice_cnt++;
 80057ce:	4b18      	ldr	r3, [pc, #96]	; (8005830 <cppFlip1ms+0xc4>)
 80057d0:	881b      	ldrh	r3, [r3, #0]
 80057d2:	3301      	adds	r3, #1
 80057d4:	b29a      	uxth	r2, r3
 80057d6:	4b16      	ldr	r3, [pc, #88]	; (8005830 <cppFlip1ms+0xc4>)
 80057d8:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 2){ //2ms
 80057da:	4b15      	ldr	r3, [pc, #84]	; (8005830 <cppFlip1ms+0xc4>)
 80057dc:	881b      	ldrh	r3, [r3, #0]
 80057de:	2b01      	cmp	r3, #1
 80057e0:	d90c      	bls.n	80057fc <cppFlip1ms+0x90>
		sys_ident.inOutputStore(imu.getOmega());
 80057e2:	480a      	ldr	r0, [pc, #40]	; (800580c <cppFlip1ms+0xa0>)
 80057e4:	f7fc f984 	bl	8001af0 <_ZN3IMU8getOmegaEv>
 80057e8:	eef0 7a40 	vmov.f32	s15, s0
 80057ec:	eeb0 0a67 	vmov.f32	s0, s15
 80057f0:	4810      	ldr	r0, [pc, #64]	; (8005834 <cppFlip1ms+0xc8>)
 80057f2:	f7fd fdb9 	bl	8003368 <_ZN20SystemIdentification13inOutputStoreEf>
		twice_cnt = 0;
 80057f6:	4b0e      	ldr	r3, [pc, #56]	; (8005830 <cppFlip1ms+0xc4>)
 80057f8:	2200      	movs	r2, #0
 80057fa:	801a      	strh	r2, [r3, #0]
		encoder.clearTotalCnt();
		odometry.clearPotition();
	}
	*/

	encoder.clearCnt();
 80057fc:	4806      	ldr	r0, [pc, #24]	; (8005818 <cppFlip1ms+0xac>)
 80057fe:	f7fb fe0b 	bl	8001418 <_ZN7Encoder8clearCntEv>

	//Buttery Check
	//power_sensor.updateValues();
	//if(power_sensor.butteryCheck() == true) led.fullColor('R');

}
 8005802:	bf00      	nop
 8005804:	bd80      	pop	{r7, pc}
 8005806:	bf00      	nop
 8005808:	20000248 	.word	0x20000248
 800580c:	20000560 	.word	0x20000560
 8005810:	200373a4 	.word	0x200373a4
 8005814:	200373a8 	.word	0x200373a8
 8005818:	2001f97c 	.word	0x2001f97c
 800581c:	2001f9cc 	.word	0x2001f9cc
 8005820:	2001f994 	.word	0x2001f994
 8005824:	2001fa38 	.word	0x2001fa38
 8005828:	2000054c 	.word	0x2000054c
 800582c:	20000574 	.word	0x20000574
 8005830:	200373ac 	.word	0x200373ac
 8005834:	2001fa68 	.word	0x2001fa68

08005838 <cppFlip100ns>:

void cppFlip100ns(void)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	af00      	add	r7, sp, #0
	line_sensor.storeSensorValues();
 800583c:	4802      	ldr	r0, [pc, #8]	; (8005848 <cppFlip100ns+0x10>)
 800583e:	f7fc fc7f 	bl	8002140 <_ZN10LineSensor17storeSensorValuesEv>
	if(cnt >= 2){ //200ns
		cnt = 0;
		//imu.storeValues();
	}
	*/
}
 8005842:	bf00      	nop
 8005844:	bd80      	pop	{r7, pc}
 8005846:	bf00      	nop
 8005848:	20000248 	.word	0x20000248

0800584c <cppFlip10ms>:

void cppFlip10ms(void)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	af00      	add	r7, sp, #0
	static uint16_t twice_cnt;
	twice_cnt++;
 8005850:	4b0a      	ldr	r3, [pc, #40]	; (800587c <cppFlip10ms+0x30>)
 8005852:	881b      	ldrh	r3, [r3, #0]
 8005854:	3301      	adds	r3, #1
 8005856:	b29a      	uxth	r2, r3
 8005858:	4b08      	ldr	r3, [pc, #32]	; (800587c <cppFlip10ms+0x30>)
 800585a:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 7){ //70ms
 800585c:	4b07      	ldr	r3, [pc, #28]	; (800587c <cppFlip10ms+0x30>)
 800585e:	881b      	ldrh	r3, [r3, #0]
 8005860:	2b06      	cmp	r3, #6
 8005862:	d905      	bls.n	8005870 <cppFlip10ms+0x24>
		sys_ident.updateMsig();
 8005864:	4806      	ldr	r0, [pc, #24]	; (8005880 <cppFlip10ms+0x34>)
 8005866:	f7fd fdbb 	bl	80033e0 <_ZN20SystemIdentification10updateMsigEv>
		twice_cnt = 0;
 800586a:	4b04      	ldr	r3, [pc, #16]	; (800587c <cppFlip10ms+0x30>)
 800586c:	2200      	movs	r2, #0
 800586e:	801a      	strh	r2, [r3, #0]
	}

	mon_cnt = twice_cnt;
 8005870:	4b02      	ldr	r3, [pc, #8]	; (800587c <cppFlip10ms+0x30>)
 8005872:	881a      	ldrh	r2, [r3, #0]
 8005874:	4b03      	ldr	r3, [pc, #12]	; (8005884 <cppFlip10ms+0x38>)
 8005876:	801a      	strh	r2, [r3, #0]
		path_following.flip();
	}
	velocity_ctrl.setVelocity(path_following.getV(), path_following.getW());
	*/

}
 8005878:	bf00      	nop
 800587a:	bd80      	pop	{r7, pc}
 800587c:	200373ae 	.word	0x200373ae
 8005880:	2001fa68 	.word	0x2001fa68
 8005884:	200373a0 	.word	0x200373a0

08005888 <cppExit>:

void cppExit(uint16_t gpio_pin)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b082      	sub	sp, #8
 800588c:	af00      	add	r7, sp, #0
 800588e:	4603      	mov	r3, r0
 8005890:	80fb      	strh	r3, [r7, #6]
	side_sensor.updateStatus(gpio_pin);
 8005892:	88fb      	ldrh	r3, [r7, #6]
 8005894:	4619      	mov	r1, r3
 8005896:	4803      	ldr	r0, [pc, #12]	; (80058a4 <cppExit+0x1c>)
 8005898:	f7fd fcde 	bl	8003258 <_ZN10SideSensor12updateStatusEt>
}
 800589c:	bf00      	nop
 800589e:	3708      	adds	r7, #8
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}
 80058a4:	20000540 	.word	0x20000540

080058a8 <cppLoop>:

void cppLoop(void)
{
 80058a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80058ac:	b08b      	sub	sp, #44	; 0x2c
 80058ae:	af02      	add	r7, sp, #8
	switch(rotary_switch.getValue()){
 80058b0:	48bb      	ldr	r0, [pc, #748]	; (8005ba0 <cppLoop+0x2f8>)
 80058b2:	f7fd fc77 	bl	80031a4 <_ZN12RotarySwitch8getValueEv>
 80058b6:	4603      	mov	r3, r0
 80058b8:	2b0f      	cmp	r3, #15
 80058ba:	f201 80bb 	bhi.w	8006a34 <cppLoop+0x118c>
 80058be:	a201      	add	r2, pc, #4	; (adr r2, 80058c4 <cppLoop+0x1c>)
 80058c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058c4:	08005905 	.word	0x08005905
 80058c8:	08005dc9 	.word	0x08005dc9
 80058cc:	08005e51 	.word	0x08005e51
 80058d0:	08005f2d 	.word	0x08005f2d
 80058d4:	08005fe7 	.word	0x08005fe7
 80058d8:	08006075 	.word	0x08006075
 80058dc:	0800613b 	.word	0x0800613b
 80058e0:	08006259 	.word	0x08006259
 80058e4:	080062f9 	.word	0x080062f9
 80058e8:	0800682d 	.word	0x0800682d
 80058ec:	080068c9 	.word	0x080068c9
 80058f0:	08006963 	.word	0x08006963
 80058f4:	0800698d 	.word	0x0800698d
 80058f8:	080069b7 	.word	0x080069b7
 80058fc:	080069e1 	.word	0x080069e1
 8005900:	08006a0b 	.word	0x08006a0b
	static int16_t selector;

	case 0:
		led.fullColor('R');
 8005904:	2152      	movs	r1, #82	; 0x52
 8005906:	48a7      	ldr	r0, [pc, #668]	; (8005ba4 <cppLoop+0x2fc>)
 8005908:	f7fc faae 	bl	8001e68 <_ZN3LED9fullColorEc>

		lcd_clear();
 800590c:	f7fb fbc8 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8005910:	2100      	movs	r1, #0
 8005912:	2000      	movs	r0, #0
 8005914:	f7fb fbd4 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf    ", line_trace.getKpV()*1000);
 8005918:	48a3      	ldr	r0, [pc, #652]	; (8005ba8 <cppLoop+0x300>)
 800591a:	f7fc fea3 	bl	8002664 <_ZN9LineTrace6getKpVEv>
 800591e:	eeb0 7a40 	vmov.f32	s14, s0
 8005922:	eddf 7aa2 	vldr	s15, [pc, #648]	; 8005bac <cppLoop+0x304>
 8005926:	ee67 7a27 	vmul.f32	s15, s14, s15
 800592a:	ee17 0a90 	vmov	r0, s15
 800592e:	f7fa fe23 	bl	8000578 <__aeabi_f2d>
 8005932:	4603      	mov	r3, r0
 8005934:	460c      	mov	r4, r1
 8005936:	461a      	mov	r2, r3
 8005938:	4623      	mov	r3, r4
 800593a:	489d      	ldr	r0, [pc, #628]	; (8005bb0 <cppLoop+0x308>)
 800593c:	f7fb fbea 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8005940:	2101      	movs	r1, #1
 8005942:	2000      	movs	r0, #0
 8005944:	f7fb fbbc 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", line_trace.getKiV()*1000, line_trace.getKdV()*1000);
 8005948:	4897      	ldr	r0, [pc, #604]	; (8005ba8 <cppLoop+0x300>)
 800594a:	f7fc fe9a 	bl	8002682 <_ZN9LineTrace6getKiVEv>
 800594e:	eeb0 7a40 	vmov.f32	s14, s0
 8005952:	eddf 7a96 	vldr	s15, [pc, #600]	; 8005bac <cppLoop+0x304>
 8005956:	ee67 7a27 	vmul.f32	s15, s14, s15
 800595a:	ee17 0a90 	vmov	r0, s15
 800595e:	f7fa fe0b 	bl	8000578 <__aeabi_f2d>
 8005962:	4605      	mov	r5, r0
 8005964:	460e      	mov	r6, r1
 8005966:	4890      	ldr	r0, [pc, #576]	; (8005ba8 <cppLoop+0x300>)
 8005968:	f7fc fe9a 	bl	80026a0 <_ZN9LineTrace6getKdVEv>
 800596c:	eeb0 7a40 	vmov.f32	s14, s0
 8005970:	eddf 7a8e 	vldr	s15, [pc, #568]	; 8005bac <cppLoop+0x304>
 8005974:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005978:	ee17 0a90 	vmov	r0, s15
 800597c:	f7fa fdfc 	bl	8000578 <__aeabi_f2d>
 8005980:	4603      	mov	r3, r0
 8005982:	460c      	mov	r4, r1
 8005984:	e9cd 3400 	strd	r3, r4, [sp]
 8005988:	462a      	mov	r2, r5
 800598a:	4633      	mov	r3, r6
 800598c:	4889      	ldr	r0, [pc, #548]	; (8005bb4 <cppLoop+0x30c>)
 800598e:	f7fb fbc1 	bl	8001114 <lcd_printf>

		static float adj_kp_v = line_trace.getKpV();
 8005992:	4b89      	ldr	r3, [pc, #548]	; (8005bb8 <cppLoop+0x310>)
 8005994:	781b      	ldrb	r3, [r3, #0]
 8005996:	f3bf 8f5b 	dmb	ish
 800599a:	b2db      	uxtb	r3, r3
 800599c:	f003 0301 	and.w	r3, r3, #1
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	bf0c      	ite	eq
 80059a4:	2301      	moveq	r3, #1
 80059a6:	2300      	movne	r3, #0
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d015      	beq.n	80059da <cppLoop+0x132>
 80059ae:	4882      	ldr	r0, [pc, #520]	; (8005bb8 <cppLoop+0x310>)
 80059b0:	f00b fe8f 	bl	80116d2 <__cxa_guard_acquire>
 80059b4:	4603      	mov	r3, r0
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	bf14      	ite	ne
 80059ba:	2301      	movne	r3, #1
 80059bc:	2300      	moveq	r3, #0
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d00a      	beq.n	80059da <cppLoop+0x132>
 80059c4:	4878      	ldr	r0, [pc, #480]	; (8005ba8 <cppLoop+0x300>)
 80059c6:	f7fc fe4d 	bl	8002664 <_ZN9LineTrace6getKpVEv>
 80059ca:	eef0 7a40 	vmov.f32	s15, s0
 80059ce:	4b7b      	ldr	r3, [pc, #492]	; (8005bbc <cppLoop+0x314>)
 80059d0:	edc3 7a00 	vstr	s15, [r3]
 80059d4:	4878      	ldr	r0, [pc, #480]	; (8005bb8 <cppLoop+0x310>)
 80059d6:	f00b fe88 	bl	80116ea <__cxa_guard_release>
		static float adj_ki_v = line_trace.getKiV();
 80059da:	4b79      	ldr	r3, [pc, #484]	; (8005bc0 <cppLoop+0x318>)
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	f3bf 8f5b 	dmb	ish
 80059e2:	b2db      	uxtb	r3, r3
 80059e4:	f003 0301 	and.w	r3, r3, #1
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	bf0c      	ite	eq
 80059ec:	2301      	moveq	r3, #1
 80059ee:	2300      	movne	r3, #0
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d015      	beq.n	8005a22 <cppLoop+0x17a>
 80059f6:	4872      	ldr	r0, [pc, #456]	; (8005bc0 <cppLoop+0x318>)
 80059f8:	f00b fe6b 	bl	80116d2 <__cxa_guard_acquire>
 80059fc:	4603      	mov	r3, r0
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	bf14      	ite	ne
 8005a02:	2301      	movne	r3, #1
 8005a04:	2300      	moveq	r3, #0
 8005a06:	b2db      	uxtb	r3, r3
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d00a      	beq.n	8005a22 <cppLoop+0x17a>
 8005a0c:	4866      	ldr	r0, [pc, #408]	; (8005ba8 <cppLoop+0x300>)
 8005a0e:	f7fc fe38 	bl	8002682 <_ZN9LineTrace6getKiVEv>
 8005a12:	eef0 7a40 	vmov.f32	s15, s0
 8005a16:	4b6b      	ldr	r3, [pc, #428]	; (8005bc4 <cppLoop+0x31c>)
 8005a18:	edc3 7a00 	vstr	s15, [r3]
 8005a1c:	4868      	ldr	r0, [pc, #416]	; (8005bc0 <cppLoop+0x318>)
 8005a1e:	f00b fe64 	bl	80116ea <__cxa_guard_release>
		static float adj_kd_v = line_trace.getKdV();
 8005a22:	4b69      	ldr	r3, [pc, #420]	; (8005bc8 <cppLoop+0x320>)
 8005a24:	781b      	ldrb	r3, [r3, #0]
 8005a26:	f3bf 8f5b 	dmb	ish
 8005a2a:	b2db      	uxtb	r3, r3
 8005a2c:	f003 0301 	and.w	r3, r3, #1
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	bf0c      	ite	eq
 8005a34:	2301      	moveq	r3, #1
 8005a36:	2300      	movne	r3, #0
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d015      	beq.n	8005a6a <cppLoop+0x1c2>
 8005a3e:	4862      	ldr	r0, [pc, #392]	; (8005bc8 <cppLoop+0x320>)
 8005a40:	f00b fe47 	bl	80116d2 <__cxa_guard_acquire>
 8005a44:	4603      	mov	r3, r0
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	bf14      	ite	ne
 8005a4a:	2301      	movne	r3, #1
 8005a4c:	2300      	moveq	r3, #0
 8005a4e:	b2db      	uxtb	r3, r3
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d00a      	beq.n	8005a6a <cppLoop+0x1c2>
 8005a54:	4854      	ldr	r0, [pc, #336]	; (8005ba8 <cppLoop+0x300>)
 8005a56:	f7fc fe23 	bl	80026a0 <_ZN9LineTrace6getKdVEv>
 8005a5a:	eef0 7a40 	vmov.f32	s15, s0
 8005a5e:	4b5b      	ldr	r3, [pc, #364]	; (8005bcc <cppLoop+0x324>)
 8005a60:	edc3 7a00 	vstr	s15, [r3]
 8005a64:	4858      	ldr	r0, [pc, #352]	; (8005bc8 <cppLoop+0x320>)
 8005a66:	f00b fe40 	bl	80116ea <__cxa_guard_release>

		if(joy_stick.getValue() == JOY_U){
 8005a6a:	4859      	ldr	r0, [pc, #356]	; (8005bd0 <cppLoop+0x328>)
 8005a6c:	f7fc f998 	bl	8001da0 <_ZN8JoyStick8getValueEv>
 8005a70:	4603      	mov	r3, r0
 8005a72:	2b08      	cmp	r3, #8
 8005a74:	bf0c      	ite	eq
 8005a76:	2301      	moveq	r3, #1
 8005a78:	2300      	movne	r3, #0
 8005a7a:	b2db      	uxtb	r3, r3
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d022      	beq.n	8005ac6 <cppLoop+0x21e>
			led.LR(-1, 1);
 8005a80:	2201      	movs	r2, #1
 8005a82:	f04f 31ff 	mov.w	r1, #4294967295
 8005a86:	4847      	ldr	r0, [pc, #284]	; (8005ba4 <cppLoop+0x2fc>)
 8005a88:	f7fc faaa 	bl	8001fe0 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8005a8c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005a90:	f001 f922 	bl	8006cd8 <HAL_Delay>

			selector++;
 8005a94:	4b4f      	ldr	r3, [pc, #316]	; (8005bd4 <cppLoop+0x32c>)
 8005a96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	3301      	adds	r3, #1
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	b21a      	sxth	r2, r3
 8005aa2:	4b4c      	ldr	r3, [pc, #304]	; (8005bd4 <cppLoop+0x32c>)
 8005aa4:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 8005aa6:	4b4b      	ldr	r3, [pc, #300]	; (8005bd4 <cppLoop+0x32c>)
 8005aa8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005aac:	2b02      	cmp	r3, #2
 8005aae:	dd02      	ble.n	8005ab6 <cppLoop+0x20e>
 8005ab0:	4b48      	ldr	r3, [pc, #288]	; (8005bd4 <cppLoop+0x32c>)
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	f04f 31ff 	mov.w	r1, #4294967295
 8005abc:	4839      	ldr	r0, [pc, #228]	; (8005ba4 <cppLoop+0x2fc>)
 8005abe:	f7fc fa8f 	bl	8001fe0 <_ZN3LED2LREaa>
			sd_write_array_float("Params", "kd_v.txt", 1, &adj_kd_v, OVER_WRITE);
			line_trace.setVeloGain(adj_kp_v, adj_ki_v, adj_kd_v);

			led.LR(-1, 0);
		}
		break;
 8005ac2:	f000 bfb9 	b.w	8006a38 <cppLoop+0x1190>
		else if(joy_stick.getValue() == JOY_R){
 8005ac6:	4842      	ldr	r0, [pc, #264]	; (8005bd0 <cppLoop+0x328>)
 8005ac8:	f7fc f96a 	bl	8001da0 <_ZN8JoyStick8getValueEv>
 8005acc:	4603      	mov	r3, r0
 8005ace:	2b10      	cmp	r3, #16
 8005ad0:	bf0c      	ite	eq
 8005ad2:	2301      	moveq	r3, #1
 8005ad4:	2300      	movne	r3, #0
 8005ad6:	b2db      	uxtb	r3, r3
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d07d      	beq.n	8005bd8 <cppLoop+0x330>
			led.LR(-1, 1);
 8005adc:	2201      	movs	r2, #1
 8005ade:	f04f 31ff 	mov.w	r1, #4294967295
 8005ae2:	4830      	ldr	r0, [pc, #192]	; (8005ba4 <cppLoop+0x2fc>)
 8005ae4:	f7fc fa7c 	bl	8001fe0 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8005ae8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005aec:	f001 f8f4 	bl	8006cd8 <HAL_Delay>
			if(selector == 0){
 8005af0:	4b38      	ldr	r3, [pc, #224]	; (8005bd4 <cppLoop+0x32c>)
 8005af2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d113      	bne.n	8005b22 <cppLoop+0x27a>
				adj_kp_v = adj_kp_v + 0.00001;
 8005afa:	4b30      	ldr	r3, [pc, #192]	; (8005bbc <cppLoop+0x314>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4618      	mov	r0, r3
 8005b00:	f7fa fd3a 	bl	8000578 <__aeabi_f2d>
 8005b04:	a324      	add	r3, pc, #144	; (adr r3, 8005b98 <cppLoop+0x2f0>)
 8005b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b0a:	f7fa fbd7 	bl	80002bc <__adddf3>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	460c      	mov	r4, r1
 8005b12:	4618      	mov	r0, r3
 8005b14:	4621      	mov	r1, r4
 8005b16:	f7fb f87f 	bl	8000c18 <__aeabi_d2f>
 8005b1a:	4602      	mov	r2, r0
 8005b1c:	4b27      	ldr	r3, [pc, #156]	; (8005bbc <cppLoop+0x314>)
 8005b1e:	601a      	str	r2, [r3, #0]
 8005b20:	e02b      	b.n	8005b7a <cppLoop+0x2d2>
			else if(selector == 1){
 8005b22:	4b2c      	ldr	r3, [pc, #176]	; (8005bd4 <cppLoop+0x32c>)
 8005b24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d113      	bne.n	8005b54 <cppLoop+0x2ac>
				adj_ki_v = adj_ki_v + 0.00001;
 8005b2c:	4b25      	ldr	r3, [pc, #148]	; (8005bc4 <cppLoop+0x31c>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4618      	mov	r0, r3
 8005b32:	f7fa fd21 	bl	8000578 <__aeabi_f2d>
 8005b36:	a318      	add	r3, pc, #96	; (adr r3, 8005b98 <cppLoop+0x2f0>)
 8005b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b3c:	f7fa fbbe 	bl	80002bc <__adddf3>
 8005b40:	4603      	mov	r3, r0
 8005b42:	460c      	mov	r4, r1
 8005b44:	4618      	mov	r0, r3
 8005b46:	4621      	mov	r1, r4
 8005b48:	f7fb f866 	bl	8000c18 <__aeabi_d2f>
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	4b1d      	ldr	r3, [pc, #116]	; (8005bc4 <cppLoop+0x31c>)
 8005b50:	601a      	str	r2, [r3, #0]
 8005b52:	e012      	b.n	8005b7a <cppLoop+0x2d2>
				adj_kd_v = adj_kd_v + 0.00001;
 8005b54:	4b1d      	ldr	r3, [pc, #116]	; (8005bcc <cppLoop+0x324>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f7fa fd0d 	bl	8000578 <__aeabi_f2d>
 8005b5e:	a30e      	add	r3, pc, #56	; (adr r3, 8005b98 <cppLoop+0x2f0>)
 8005b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b64:	f7fa fbaa 	bl	80002bc <__adddf3>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	460c      	mov	r4, r1
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	4621      	mov	r1, r4
 8005b70:	f7fb f852 	bl	8000c18 <__aeabi_d2f>
 8005b74:	4602      	mov	r2, r0
 8005b76:	4b15      	ldr	r3, [pc, #84]	; (8005bcc <cppLoop+0x324>)
 8005b78:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8005b7a:	2152      	movs	r1, #82	; 0x52
 8005b7c:	4809      	ldr	r0, [pc, #36]	; (8005ba4 <cppLoop+0x2fc>)
 8005b7e:	f7fc f973 	bl	8001e68 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8005b82:	2200      	movs	r2, #0
 8005b84:	f04f 31ff 	mov.w	r1, #4294967295
 8005b88:	4806      	ldr	r0, [pc, #24]	; (8005ba4 <cppLoop+0x2fc>)
 8005b8a:	f7fc fa29 	bl	8001fe0 <_ZN3LED2LREaa>
		break;
 8005b8e:	f000 bf53 	b.w	8006a38 <cppLoop+0x1190>
 8005b92:	bf00      	nop
 8005b94:	f3af 8000 	nop.w
 8005b98:	88e368f1 	.word	0x88e368f1
 8005b9c:	3ee4f8b5 	.word	0x3ee4f8b5
 8005ba0:	20000548 	.word	0x20000548
 8005ba4:	20000550 	.word	0x20000550
 8005ba8:	2001f9cc 	.word	0x2001f9cc
 8005bac:	447a0000 	.word	0x447a0000
 8005bb0:	080178d8 	.word	0x080178d8
 8005bb4:	080178e4 	.word	0x080178e4
 8005bb8:	200373b8 	.word	0x200373b8
 8005bbc:	200373b4 	.word	0x200373b4
 8005bc0:	200373c0 	.word	0x200373c0
 8005bc4:	200373bc 	.word	0x200373bc
 8005bc8:	200373c8 	.word	0x200373c8
 8005bcc:	200373c4 	.word	0x200373c4
 8005bd0:	20000544 	.word	0x20000544
 8005bd4:	200373b0 	.word	0x200373b0
		else if(joy_stick.getValue() == JOY_L){
 8005bd8:	48c1      	ldr	r0, [pc, #772]	; (8005ee0 <cppLoop+0x638>)
 8005bda:	f7fc f8e1 	bl	8001da0 <_ZN8JoyStick8getValueEv>
 8005bde:	4603      	mov	r3, r0
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	bf0c      	ite	eq
 8005be4:	2301      	moveq	r3, #1
 8005be6:	2300      	movne	r3, #0
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d05a      	beq.n	8005ca4 <cppLoop+0x3fc>
			led.LR(-1, 1);
 8005bee:	2201      	movs	r2, #1
 8005bf0:	f04f 31ff 	mov.w	r1, #4294967295
 8005bf4:	48bb      	ldr	r0, [pc, #748]	; (8005ee4 <cppLoop+0x63c>)
 8005bf6:	f7fc f9f3 	bl	8001fe0 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8005bfa:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005bfe:	f001 f86b 	bl	8006cd8 <HAL_Delay>
			if(selector == 0){
 8005c02:	4bb9      	ldr	r3, [pc, #740]	; (8005ee8 <cppLoop+0x640>)
 8005c04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d113      	bne.n	8005c34 <cppLoop+0x38c>
				adj_kp_v = adj_kp_v - 0.00001;
 8005c0c:	4bb7      	ldr	r3, [pc, #732]	; (8005eec <cppLoop+0x644>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4618      	mov	r0, r3
 8005c12:	f7fa fcb1 	bl	8000578 <__aeabi_f2d>
 8005c16:	a3b0      	add	r3, pc, #704	; (adr r3, 8005ed8 <cppLoop+0x630>)
 8005c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c1c:	f7fa fb4c 	bl	80002b8 <__aeabi_dsub>
 8005c20:	4603      	mov	r3, r0
 8005c22:	460c      	mov	r4, r1
 8005c24:	4618      	mov	r0, r3
 8005c26:	4621      	mov	r1, r4
 8005c28:	f7fa fff6 	bl	8000c18 <__aeabi_d2f>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	4baf      	ldr	r3, [pc, #700]	; (8005eec <cppLoop+0x644>)
 8005c30:	601a      	str	r2, [r3, #0]
 8005c32:	e02b      	b.n	8005c8c <cppLoop+0x3e4>
			else if(selector == 1){
 8005c34:	4bac      	ldr	r3, [pc, #688]	; (8005ee8 <cppLoop+0x640>)
 8005c36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c3a:	2b01      	cmp	r3, #1
 8005c3c:	d113      	bne.n	8005c66 <cppLoop+0x3be>
				adj_ki_v = adj_ki_v - 0.00001;
 8005c3e:	4bac      	ldr	r3, [pc, #688]	; (8005ef0 <cppLoop+0x648>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4618      	mov	r0, r3
 8005c44:	f7fa fc98 	bl	8000578 <__aeabi_f2d>
 8005c48:	a3a3      	add	r3, pc, #652	; (adr r3, 8005ed8 <cppLoop+0x630>)
 8005c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c4e:	f7fa fb33 	bl	80002b8 <__aeabi_dsub>
 8005c52:	4603      	mov	r3, r0
 8005c54:	460c      	mov	r4, r1
 8005c56:	4618      	mov	r0, r3
 8005c58:	4621      	mov	r1, r4
 8005c5a:	f7fa ffdd 	bl	8000c18 <__aeabi_d2f>
 8005c5e:	4602      	mov	r2, r0
 8005c60:	4ba3      	ldr	r3, [pc, #652]	; (8005ef0 <cppLoop+0x648>)
 8005c62:	601a      	str	r2, [r3, #0]
 8005c64:	e012      	b.n	8005c8c <cppLoop+0x3e4>
				adj_kd_v = adj_kd_v - 0.00001;
 8005c66:	4ba3      	ldr	r3, [pc, #652]	; (8005ef4 <cppLoop+0x64c>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f7fa fc84 	bl	8000578 <__aeabi_f2d>
 8005c70:	a399      	add	r3, pc, #612	; (adr r3, 8005ed8 <cppLoop+0x630>)
 8005c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c76:	f7fa fb1f 	bl	80002b8 <__aeabi_dsub>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	460c      	mov	r4, r1
 8005c7e:	4618      	mov	r0, r3
 8005c80:	4621      	mov	r1, r4
 8005c82:	f7fa ffc9 	bl	8000c18 <__aeabi_d2f>
 8005c86:	4602      	mov	r2, r0
 8005c88:	4b9a      	ldr	r3, [pc, #616]	; (8005ef4 <cppLoop+0x64c>)
 8005c8a:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8005c8c:	2152      	movs	r1, #82	; 0x52
 8005c8e:	4895      	ldr	r0, [pc, #596]	; (8005ee4 <cppLoop+0x63c>)
 8005c90:	f7fc f8ea 	bl	8001e68 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8005c94:	2200      	movs	r2, #0
 8005c96:	f04f 31ff 	mov.w	r1, #4294967295
 8005c9a:	4892      	ldr	r0, [pc, #584]	; (8005ee4 <cppLoop+0x63c>)
 8005c9c:	f7fc f9a0 	bl	8001fe0 <_ZN3LED2LREaa>
		break;
 8005ca0:	f000 beca 	b.w	8006a38 <cppLoop+0x1190>
		else if(joy_stick.getValue() == JOY_D){
 8005ca4:	488e      	ldr	r0, [pc, #568]	; (8005ee0 <cppLoop+0x638>)
 8005ca6:	f7fc f87b 	bl	8001da0 <_ZN8JoyStick8getValueEv>
 8005caa:	4603      	mov	r3, r0
 8005cac:	2b04      	cmp	r3, #4
 8005cae:	bf0c      	ite	eq
 8005cb0:	2301      	moveq	r3, #1
 8005cb2:	2300      	movne	r3, #0
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d03e      	beq.n	8005d38 <cppLoop+0x490>
			led.LR(-1, 1);
 8005cba:	2201      	movs	r2, #1
 8005cbc:	f04f 31ff 	mov.w	r1, #4294967295
 8005cc0:	4888      	ldr	r0, [pc, #544]	; (8005ee4 <cppLoop+0x63c>)
 8005cc2:	f7fc f98d 	bl	8001fe0 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8005cc6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005cca:	f001 f805 	bl	8006cd8 <HAL_Delay>
			sd_read_array_float("Params", "kp_v.txt", 1, &temp_kp_v);
 8005cce:	f107 031c 	add.w	r3, r7, #28
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	4988      	ldr	r1, [pc, #544]	; (8005ef8 <cppLoop+0x650>)
 8005cd6:	4889      	ldr	r0, [pc, #548]	; (8005efc <cppLoop+0x654>)
 8005cd8:	f7fb fcb0 	bl	800163c <sd_read_array_float>
			sd_read_array_float("Params", "ki_v.txt", 1, &temp_ki_v);
 8005cdc:	f107 0318 	add.w	r3, r7, #24
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	4987      	ldr	r1, [pc, #540]	; (8005f00 <cppLoop+0x658>)
 8005ce4:	4885      	ldr	r0, [pc, #532]	; (8005efc <cppLoop+0x654>)
 8005ce6:	f7fb fca9 	bl	800163c <sd_read_array_float>
			sd_read_array_float("Params", "kd_v.txt", 1, &temp_kd_v);
 8005cea:	f107 0314 	add.w	r3, r7, #20
 8005cee:	2201      	movs	r2, #1
 8005cf0:	4984      	ldr	r1, [pc, #528]	; (8005f04 <cppLoop+0x65c>)
 8005cf2:	4882      	ldr	r0, [pc, #520]	; (8005efc <cppLoop+0x654>)
 8005cf4:	f7fb fca2 	bl	800163c <sd_read_array_float>
			line_trace.setVeloGain(temp_kp_v, temp_ki_v, temp_kd_v);
 8005cf8:	edd7 7a07 	vldr	s15, [r7, #28]
 8005cfc:	ed97 7a06 	vldr	s14, [r7, #24]
 8005d00:	edd7 6a05 	vldr	s13, [r7, #20]
 8005d04:	eeb0 1a66 	vmov.f32	s2, s13
 8005d08:	eef0 0a47 	vmov.f32	s1, s14
 8005d0c:	eeb0 0a67 	vmov.f32	s0, s15
 8005d10:	487d      	ldr	r0, [pc, #500]	; (8005f08 <cppLoop+0x660>)
 8005d12:	f7fc fc8e 	bl	8002632 <_ZN9LineTrace11setVeloGainEfff>
			adj_kp_v = temp_kp_v;
 8005d16:	69fb      	ldr	r3, [r7, #28]
 8005d18:	4a74      	ldr	r2, [pc, #464]	; (8005eec <cppLoop+0x644>)
 8005d1a:	6013      	str	r3, [r2, #0]
			adj_ki_v = temp_kp_v;
 8005d1c:	69fb      	ldr	r3, [r7, #28]
 8005d1e:	4a74      	ldr	r2, [pc, #464]	; (8005ef0 <cppLoop+0x648>)
 8005d20:	6013      	str	r3, [r2, #0]
			adj_kd_v = temp_kp_v;
 8005d22:	69fb      	ldr	r3, [r7, #28]
 8005d24:	4a73      	ldr	r2, [pc, #460]	; (8005ef4 <cppLoop+0x64c>)
 8005d26:	6013      	str	r3, [r2, #0]
			led.LR(-1, 0);
 8005d28:	2200      	movs	r2, #0
 8005d2a:	f04f 31ff 	mov.w	r1, #4294967295
 8005d2e:	486d      	ldr	r0, [pc, #436]	; (8005ee4 <cppLoop+0x63c>)
 8005d30:	f7fc f956 	bl	8001fe0 <_ZN3LED2LREaa>
		break;
 8005d34:	f000 be80 	b.w	8006a38 <cppLoop+0x1190>
		else if(joy_stick.getValue() == JOY_C){
 8005d38:	4869      	ldr	r0, [pc, #420]	; (8005ee0 <cppLoop+0x638>)
 8005d3a:	f7fc f831 	bl	8001da0 <_ZN8JoyStick8getValueEv>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	2b02      	cmp	r3, #2
 8005d42:	bf0c      	ite	eq
 8005d44:	2301      	moveq	r3, #1
 8005d46:	2300      	movne	r3, #0
 8005d48:	b2db      	uxtb	r3, r3
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	f000 8674 	beq.w	8006a38 <cppLoop+0x1190>
			led.LR(-1, 1);
 8005d50:	2201      	movs	r2, #1
 8005d52:	f04f 31ff 	mov.w	r1, #4294967295
 8005d56:	4863      	ldr	r0, [pc, #396]	; (8005ee4 <cppLoop+0x63c>)
 8005d58:	f7fc f942 	bl	8001fe0 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8005d5c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005d60:	f000 ffba 	bl	8006cd8 <HAL_Delay>
			sd_write_array_float("Params", "kp_v.txt", 1, &adj_kp_v, OVER_WRITE);
 8005d64:	2300      	movs	r3, #0
 8005d66:	9300      	str	r3, [sp, #0]
 8005d68:	4b60      	ldr	r3, [pc, #384]	; (8005eec <cppLoop+0x644>)
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	4962      	ldr	r1, [pc, #392]	; (8005ef8 <cppLoop+0x650>)
 8005d6e:	4863      	ldr	r0, [pc, #396]	; (8005efc <cppLoop+0x654>)
 8005d70:	f7fb fbfe 	bl	8001570 <sd_write_array_float>
			sd_write_array_float("Params", "ki_v.txt", 1, &adj_ki_v, OVER_WRITE);
 8005d74:	2300      	movs	r3, #0
 8005d76:	9300      	str	r3, [sp, #0]
 8005d78:	4b5d      	ldr	r3, [pc, #372]	; (8005ef0 <cppLoop+0x648>)
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	4960      	ldr	r1, [pc, #384]	; (8005f00 <cppLoop+0x658>)
 8005d7e:	485f      	ldr	r0, [pc, #380]	; (8005efc <cppLoop+0x654>)
 8005d80:	f7fb fbf6 	bl	8001570 <sd_write_array_float>
			sd_write_array_float("Params", "kd_v.txt", 1, &adj_kd_v, OVER_WRITE);
 8005d84:	2300      	movs	r3, #0
 8005d86:	9300      	str	r3, [sp, #0]
 8005d88:	4b5a      	ldr	r3, [pc, #360]	; (8005ef4 <cppLoop+0x64c>)
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	495d      	ldr	r1, [pc, #372]	; (8005f04 <cppLoop+0x65c>)
 8005d8e:	485b      	ldr	r0, [pc, #364]	; (8005efc <cppLoop+0x654>)
 8005d90:	f7fb fbee 	bl	8001570 <sd_write_array_float>
			line_trace.setVeloGain(adj_kp_v, adj_ki_v, adj_kd_v);
 8005d94:	4b55      	ldr	r3, [pc, #340]	; (8005eec <cppLoop+0x644>)
 8005d96:	edd3 7a00 	vldr	s15, [r3]
 8005d9a:	4b55      	ldr	r3, [pc, #340]	; (8005ef0 <cppLoop+0x648>)
 8005d9c:	ed93 7a00 	vldr	s14, [r3]
 8005da0:	4b54      	ldr	r3, [pc, #336]	; (8005ef4 <cppLoop+0x64c>)
 8005da2:	edd3 6a00 	vldr	s13, [r3]
 8005da6:	eeb0 1a66 	vmov.f32	s2, s13
 8005daa:	eef0 0a47 	vmov.f32	s1, s14
 8005dae:	eeb0 0a67 	vmov.f32	s0, s15
 8005db2:	4855      	ldr	r0, [pc, #340]	; (8005f08 <cppLoop+0x660>)
 8005db4:	f7fc fc3d 	bl	8002632 <_ZN9LineTrace11setVeloGainEfff>
			led.LR(-1, 0);
 8005db8:	2200      	movs	r2, #0
 8005dba:	f04f 31ff 	mov.w	r1, #4294967295
 8005dbe:	4849      	ldr	r0, [pc, #292]	; (8005ee4 <cppLoop+0x63c>)
 8005dc0:	f7fc f90e 	bl	8001fe0 <_ZN3LED2LREaa>
		break;
 8005dc4:	f000 be38 	b.w	8006a38 <cppLoop+0x1190>

	case 1:
		led.fullColor('G');
 8005dc8:	2147      	movs	r1, #71	; 0x47
 8005dca:	4846      	ldr	r0, [pc, #280]	; (8005ee4 <cppLoop+0x63c>)
 8005dcc:	f7fc f84c 	bl	8001e68 <_ZN3LED9fullColorEc>

		lcd_clear();
 8005dd0:	f7fb f966 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8005dd4:	2100      	movs	r1, #0
 8005dd6:	2000      	movs	r0, #0
 8005dd8:	f7fb f972 	bl	80010c0 <lcd_locate>
		lcd_printf("velocity");
 8005ddc:	484b      	ldr	r0, [pc, #300]	; (8005f0c <cppLoop+0x664>)
 8005dde:	f7fb f999 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8005de2:	2101      	movs	r1, #1
 8005de4:	2000      	movs	r0, #0
 8005de6:	f7fb f96b 	bl	80010c0 <lcd_locate>
		lcd_printf("trace");
 8005dea:	4849      	ldr	r0, [pc, #292]	; (8005f10 <cppLoop+0x668>)
 8005dec:	f7fb f992 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8005df0:	483b      	ldr	r0, [pc, #236]	; (8005ee0 <cppLoop+0x638>)
 8005df2:	f7fb ffd5 	bl	8001da0 <_ZN8JoyStick8getValueEv>
 8005df6:	4603      	mov	r3, r0
 8005df8:	2b02      	cmp	r3, #2
 8005dfa:	bf0c      	ite	eq
 8005dfc:	2301      	moveq	r3, #1
 8005dfe:	2300      	movne	r3, #0
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	f000 861a 	beq.w	8006a3c <cppLoop+0x1194>
			HAL_Delay(500);
 8005e08:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005e0c:	f000 ff64 	bl	8006cd8 <HAL_Delay>

			velocity_ctrl.start();
 8005e10:	4840      	ldr	r0, [pc, #256]	; (8005f14 <cppLoop+0x66c>)
 8005e12:	f7fd fd72 	bl	80038fa <_ZN12VelocityCtrl5startEv>
			line_trace.start();
 8005e16:	483c      	ldr	r0, [pc, #240]	; (8005f08 <cppLoop+0x660>)
 8005e18:	f7fc fcaa 	bl	8002770 <_ZN9LineTrace5startEv>
			line_trace.setTargetVelocity(0.8);
 8005e1c:	ed9f 0a3e 	vldr	s0, [pc, #248]	; 8005f18 <cppLoop+0x670>
 8005e20:	4839      	ldr	r0, [pc, #228]	; (8005f08 <cppLoop+0x660>)
 8005e22:	f7fc fc5b 	bl	80026dc <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(1, -1);
 8005e26:	f04f 32ff 	mov.w	r2, #4294967295
 8005e2a:	2101      	movs	r1, #1
 8005e2c:	482d      	ldr	r0, [pc, #180]	; (8005ee4 <cppLoop+0x63c>)
 8005e2e:	f7fc f8d7 	bl	8001fe0 <_ZN3LED2LREaa>

			HAL_Delay(3000);
 8005e32:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8005e36:	f000 ff4f 	bl	8006cd8 <HAL_Delay>

			velocity_ctrl.stop();
 8005e3a:	4836      	ldr	r0, [pc, #216]	; (8005f14 <cppLoop+0x66c>)
 8005e3c:	f7fd fd6c 	bl	8003918 <_ZN12VelocityCtrl4stopEv>
			led.LR(0, -1);
 8005e40:	f04f 32ff 	mov.w	r2, #4294967295
 8005e44:	2100      	movs	r1, #0
 8005e46:	4827      	ldr	r0, [pc, #156]	; (8005ee4 <cppLoop+0x63c>)
 8005e48:	f7fc f8ca 	bl	8001fe0 <_ZN3LED2LREaa>

			//logger.stop();
		}

		break;
 8005e4c:	f000 bdf6 	b.w	8006a3c <cppLoop+0x1194>

	case 2:
		led.fullColor('B');
 8005e50:	2142      	movs	r1, #66	; 0x42
 8005e52:	4824      	ldr	r0, [pc, #144]	; (8005ee4 <cppLoop+0x63c>)
 8005e54:	f7fc f808 	bl	8001e68 <_ZN3LED9fullColorEc>

		lcd_clear();
 8005e58:	f7fb f922 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8005e5c:	2100      	movs	r1, #0
 8005e5e:	2000      	movs	r0, #0
 8005e60:	f7fb f92e 	bl	80010c0 <lcd_locate>
		lcd_printf("Msig");
 8005e64:	482d      	ldr	r0, [pc, #180]	; (8005f1c <cppLoop+0x674>)
 8005e66:	f7fb f955 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8005e6a:	2101      	movs	r1, #1
 8005e6c:	2000      	movs	r0, #0
 8005e6e:	f7fb f927 	bl	80010c0 <lcd_locate>
		lcd_printf("Record");
 8005e72:	482b      	ldr	r0, [pc, #172]	; (8005f20 <cppLoop+0x678>)
 8005e74:	f7fb f94e 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8005e78:	4819      	ldr	r0, [pc, #100]	; (8005ee0 <cppLoop+0x638>)
 8005e7a:	f7fb ff91 	bl	8001da0 <_ZN8JoyStick8getValueEv>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	2b02      	cmp	r3, #2
 8005e82:	bf0c      	ite	eq
 8005e84:	2301      	moveq	r3, #1
 8005e86:	2300      	movne	r3, #0
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	f000 85d8 	beq.w	8006a40 <cppLoop+0x1198>
			led.LR(-1, 1);
 8005e90:	2201      	movs	r2, #1
 8005e92:	f04f 31ff 	mov.w	r1, #4294967295
 8005e96:	4813      	ldr	r0, [pc, #76]	; (8005ee4 <cppLoop+0x63c>)
 8005e98:	f7fc f8a2 	bl	8001fe0 <_ZN3LED2LREaa>
			HAL_Delay(1500);
 8005e9c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8005ea0:	f000 ff1a 	bl	8006cd8 <HAL_Delay>

			sys_ident.setInputRatio(0.3);
 8005ea4:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8005f24 <cppLoop+0x67c>
 8005ea8:	481f      	ldr	r0, [pc, #124]	; (8005f28 <cppLoop+0x680>)
 8005eaa:	f7fd faef 	bl	800348c <_ZN20SystemIdentification13setInputRatioEf>
			sys_ident.start();
 8005eae:	481e      	ldr	r0, [pc, #120]	; (8005f28 <cppLoop+0x680>)
 8005eb0:	f7fd fafc 	bl	80034ac <_ZN20SystemIdentification5startEv>
			HAL_Delay(17500);
 8005eb4:	f244 405c 	movw	r0, #17500	; 0x445c
 8005eb8:	f000 ff0e 	bl	8006cd8 <HAL_Delay>
			sys_ident.stop();
 8005ebc:	481a      	ldr	r0, [pc, #104]	; (8005f28 <cppLoop+0x680>)
 8005ebe:	f7fd fb07 	bl	80034d0 <_ZN20SystemIdentification4stopEv>
			sys_ident.inOutputSave();
 8005ec2:	4819      	ldr	r0, [pc, #100]	; (8005f28 <cppLoop+0x680>)
 8005ec4:	f7fd fa70 	bl	80033a8 <_ZN20SystemIdentification12inOutputSaveEv>

			led.LR(-1, 0);
 8005ec8:	2200      	movs	r2, #0
 8005eca:	f04f 31ff 	mov.w	r1, #4294967295
 8005ece:	4805      	ldr	r0, [pc, #20]	; (8005ee4 <cppLoop+0x63c>)
 8005ed0:	f7fc f886 	bl	8001fe0 <_ZN3LED2LREaa>
		}
		break;
 8005ed4:	f000 bdb4 	b.w	8006a40 <cppLoop+0x1198>
 8005ed8:	88e368f1 	.word	0x88e368f1
 8005edc:	3ee4f8b5 	.word	0x3ee4f8b5
 8005ee0:	20000544 	.word	0x20000544
 8005ee4:	20000550 	.word	0x20000550
 8005ee8:	200373b0 	.word	0x200373b0
 8005eec:	200373b4 	.word	0x200373b4
 8005ef0:	200373bc 	.word	0x200373bc
 8005ef4:	200373c4 	.word	0x200373c4
 8005ef8:	080178f4 	.word	0x080178f4
 8005efc:	08017900 	.word	0x08017900
 8005f00:	08017908 	.word	0x08017908
 8005f04:	08017914 	.word	0x08017914
 8005f08:	2001f9cc 	.word	0x2001f9cc
 8005f0c:	08017920 	.word	0x08017920
 8005f10:	0801792c 	.word	0x0801792c
 8005f14:	2001f994 	.word	0x2001f994
 8005f18:	3f4ccccd 	.word	0x3f4ccccd
 8005f1c:	08017934 	.word	0x08017934
 8005f20:	0801793c 	.word	0x0801793c
 8005f24:	3e99999a 	.word	0x3e99999a
 8005f28:	2001fa68 	.word	0x2001fa68

	case 3:
		led.fullColor('M');
 8005f2c:	214d      	movs	r1, #77	; 0x4d
 8005f2e:	48b2      	ldr	r0, [pc, #712]	; (80061f8 <cppLoop+0x950>)
 8005f30:	f7fb ff9a 	bl	8001e68 <_ZN3LED9fullColorEc>

		lcd_clear();
 8005f34:	f7fb f8b4 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8005f38:	2100      	movs	r1, #0
 8005f3a:	2000      	movs	r0, #0
 8005f3c:	f7fb f8c0 	bl	80010c0 <lcd_locate>
		lcd_printf("Line");
 8005f40:	48ae      	ldr	r0, [pc, #696]	; (80061fc <cppLoop+0x954>)
 8005f42:	f7fb f8e7 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8005f46:	2101      	movs	r1, #1
 8005f48:	2000      	movs	r0, #0
 8005f4a:	f7fb f8b9 	bl	80010c0 <lcd_locate>
		lcd_printf("Trace");
 8005f4e:	48ac      	ldr	r0, [pc, #688]	; (8006200 <cppLoop+0x958>)
 8005f50:	f7fb f8e0 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8005f54:	48ab      	ldr	r0, [pc, #684]	; (8006204 <cppLoop+0x95c>)
 8005f56:	f7fb ff23 	bl	8001da0 <_ZN8JoyStick8getValueEv>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	2b02      	cmp	r3, #2
 8005f5e:	bf0c      	ite	eq
 8005f60:	2301      	moveq	r3, #1
 8005f62:	2300      	movne	r3, #0
 8005f64:	b2db      	uxtb	r3, r3
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	f000 856c 	beq.w	8006a44 <cppLoop+0x119c>
			led.LR(-1, 1);
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	f04f 31ff 	mov.w	r1, #4294967295
 8005f72:	48a1      	ldr	r0, [pc, #644]	; (80061f8 <cppLoop+0x950>)
 8005f74:	f7fc f834 	bl	8001fe0 <_ZN3LED2LREaa>
			HAL_Delay(500);
 8005f78:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005f7c:	f000 feac 	bl	8006cd8 <HAL_Delay>

			logger.start();
 8005f80:	48a1      	ldr	r0, [pc, #644]	; (8006208 <cppLoop+0x960>)
 8005f82:	f7fc fd53 	bl	8002a2c <_ZN6Logger5startEv>
			line_trace.setNormalRatio(0.1);
 8005f86:	ed9f 0aa1 	vldr	s0, [pc, #644]	; 800620c <cppLoop+0x964>
 8005f8a:	48a1      	ldr	r0, [pc, #644]	; (8006210 <cppLoop+0x968>)
 8005f8c:	f7fc fb97 	bl	80026be <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 8005f90:	489f      	ldr	r0, [pc, #636]	; (8006210 <cppLoop+0x968>)
 8005f92:	f7fc fbed 	bl	8002770 <_ZN9LineTrace5startEv>

			HAL_Delay(5000);
 8005f96:	f241 3088 	movw	r0, #5000	; 0x1388
 8005f9a:	f000 fe9d 	bl	8006cd8 <HAL_Delay>

			logger.stop();
 8005f9e:	489a      	ldr	r0, [pc, #616]	; (8006208 <cppLoop+0x960>)
 8005fa0:	f7fc fd53 	bl	8002a4a <_ZN6Logger4stopEv>
			line_trace.setNormalRatio(0.1);
 8005fa4:	ed9f 0a99 	vldr	s0, [pc, #612]	; 800620c <cppLoop+0x964>
 8005fa8:	4899      	ldr	r0, [pc, #612]	; (8006210 <cppLoop+0x968>)
 8005faa:	f7fc fb88 	bl	80026be <_ZN9LineTrace14setNormalRatioEf>
			line_trace.stop();
 8005fae:	4898      	ldr	r0, [pc, #608]	; (8006210 <cppLoop+0x968>)
 8005fb0:	f7fc fbee 	bl	8002790 <_ZN9LineTrace4stopEv>

			led.LR(1, -1);
 8005fb4:	f04f 32ff 	mov.w	r2, #4294967295
 8005fb8:	2101      	movs	r1, #1
 8005fba:	488f      	ldr	r0, [pc, #572]	; (80061f8 <cppLoop+0x950>)
 8005fbc:	f7fc f810 	bl	8001fe0 <_ZN3LED2LREaa>
			logger.saveLogs("line_sensors", "sensor7.csv");
 8005fc0:	4a94      	ldr	r2, [pc, #592]	; (8006214 <cppLoop+0x96c>)
 8005fc2:	4995      	ldr	r1, [pc, #596]	; (8006218 <cppLoop+0x970>)
 8005fc4:	4890      	ldr	r0, [pc, #576]	; (8006208 <cppLoop+0x960>)
 8005fc6:	f7fc fce4 	bl	8002992 <_ZN6Logger8saveLogsEPKcS1_>
			led.LR(0, -1);
 8005fca:	f04f 32ff 	mov.w	r2, #4294967295
 8005fce:	2100      	movs	r1, #0
 8005fd0:	4889      	ldr	r0, [pc, #548]	; (80061f8 <cppLoop+0x950>)
 8005fd2:	f7fc f805 	bl	8001fe0 <_ZN3LED2LREaa>

			led.LR(-1, 0);
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	f04f 31ff 	mov.w	r1, #4294967295
 8005fdc:	4886      	ldr	r0, [pc, #536]	; (80061f8 <cppLoop+0x950>)
 8005fde:	f7fb ffff 	bl	8001fe0 <_ZN3LED2LREaa>
		}

		break;
 8005fe2:	f000 bd2f 	b.w	8006a44 <cppLoop+0x119c>

	case 4:
		led.fullColor('Y');
 8005fe6:	2159      	movs	r1, #89	; 0x59
 8005fe8:	4883      	ldr	r0, [pc, #524]	; (80061f8 <cppLoop+0x950>)
 8005fea:	f7fb ff3d 	bl	8001e68 <_ZN3LED9fullColorEc>

		lcd_clear();
 8005fee:	f7fb f857 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8005ff2:	2100      	movs	r1, #0
 8005ff4:	2000      	movs	r0, #0
 8005ff6:	f7fb f863 	bl	80010c0 <lcd_locate>
		lcd_printf("Steering");
 8005ffa:	4888      	ldr	r0, [pc, #544]	; (800621c <cppLoop+0x974>)
 8005ffc:	f7fb f88a 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006000:	2101      	movs	r1, #1
 8006002:	2000      	movs	r0, #0
 8006004:	f7fb f85c 	bl	80010c0 <lcd_locate>
		lcd_printf("Trace");
 8006008:	487d      	ldr	r0, [pc, #500]	; (8006200 <cppLoop+0x958>)
 800600a:	f7fb f883 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800600e:	487d      	ldr	r0, [pc, #500]	; (8006204 <cppLoop+0x95c>)
 8006010:	f7fb fec6 	bl	8001da0 <_ZN8JoyStick8getValueEv>
 8006014:	4603      	mov	r3, r0
 8006016:	2b02      	cmp	r3, #2
 8006018:	bf0c      	ite	eq
 800601a:	2301      	moveq	r3, #1
 800601c:	2300      	movne	r3, #0
 800601e:	b2db      	uxtb	r3, r3
 8006020:	2b00      	cmp	r3, #0
 8006022:	f000 8511 	beq.w	8006a48 <cppLoop+0x11a0>
			led.LR(-1, 1);
 8006026:	2201      	movs	r2, #1
 8006028:	f04f 31ff 	mov.w	r1, #4294967295
 800602c:	4872      	ldr	r0, [pc, #456]	; (80061f8 <cppLoop+0x950>)
 800602e:	f7fb ffd7 	bl	8001fe0 <_ZN3LED2LREaa>
			HAL_Delay(500);
 8006032:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006036:	f000 fe4f 	bl	8006cd8 <HAL_Delay>

			line_trace.setTargetVelocity(0.1);
 800603a:	ed9f 0a74 	vldr	s0, [pc, #464]	; 800620c <cppLoop+0x964>
 800603e:	4874      	ldr	r0, [pc, #464]	; (8006210 <cppLoop+0x968>)
 8006040:	f7fc fb4c 	bl	80026dc <_ZN9LineTrace17setTargetVelocityEf>
			velocity_ctrl.start();
 8006044:	4876      	ldr	r0, [pc, #472]	; (8006220 <cppLoop+0x978>)
 8006046:	f7fd fc58 	bl	80038fa <_ZN12VelocityCtrl5startEv>
			line_trace.start();
 800604a:	4871      	ldr	r0, [pc, #452]	; (8006210 <cppLoop+0x968>)
 800604c:	f7fc fb90 	bl	8002770 <_ZN9LineTrace5startEv>

			HAL_Delay(10000);
 8006050:	f242 7010 	movw	r0, #10000	; 0x2710
 8006054:	f000 fe40 	bl	8006cd8 <HAL_Delay>

			line_trace.stop();
 8006058:	486d      	ldr	r0, [pc, #436]	; (8006210 <cppLoop+0x968>)
 800605a:	f7fc fb99 	bl	8002790 <_ZN9LineTrace4stopEv>
			velocity_ctrl.stop();
 800605e:	4870      	ldr	r0, [pc, #448]	; (8006220 <cppLoop+0x978>)
 8006060:	f7fd fc5a 	bl	8003918 <_ZN12VelocityCtrl4stopEv>


			led.LR(-1, 0);
 8006064:	2200      	movs	r2, #0
 8006066:	f04f 31ff 	mov.w	r1, #4294967295
 800606a:	4863      	ldr	r0, [pc, #396]	; (80061f8 <cppLoop+0x950>)
 800606c:	f7fb ffb8 	bl	8001fe0 <_ZN3LED2LREaa>
		}
		break;
 8006070:	f000 bcea 	b.w	8006a48 <cppLoop+0x11a0>

	case 5:
		led.fullColor('C');
 8006074:	2143      	movs	r1, #67	; 0x43
 8006076:	4860      	ldr	r0, [pc, #384]	; (80061f8 <cppLoop+0x950>)
 8006078:	f7fb fef6 	bl	8001e68 <_ZN3LED9fullColorEc>

		lcd_clear();
 800607c:	f7fb f810 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006080:	2100      	movs	r1, #0
 8006082:	2000      	movs	r0, #0
 8006084:	f7fb f81c 	bl	80010c0 <lcd_locate>
		lcd_printf("Teoshi");
 8006088:	4866      	ldr	r0, [pc, #408]	; (8006224 <cppLoop+0x97c>)
 800608a:	f7fb f843 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800608e:	2101      	movs	r1, #1
 8006090:	2000      	movs	r0, #0
 8006092:	f7fb f815 	bl	80010c0 <lcd_locate>
		lcd_printf("Following");
 8006096:	4864      	ldr	r0, [pc, #400]	; (8006228 <cppLoop+0x980>)
 8006098:	f7fb f83c 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800609c:	4859      	ldr	r0, [pc, #356]	; (8006204 <cppLoop+0x95c>)
 800609e:	f7fb fe7f 	bl	8001da0 <_ZN8JoyStick8getValueEv>
 80060a2:	4603      	mov	r3, r0
 80060a4:	2b02      	cmp	r3, #2
 80060a6:	bf0c      	ite	eq
 80060a8:	2301      	moveq	r3, #1
 80060aa:	2300      	movne	r3, #0
 80060ac:	b2db      	uxtb	r3, r3
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	f000 84cc 	beq.w	8006a4c <cppLoop+0x11a4>
			led.LR(-1, 1);
 80060b4:	2201      	movs	r2, #1
 80060b6:	f04f 31ff 	mov.w	r1, #4294967295
 80060ba:	484f      	ldr	r0, [pc, #316]	; (80061f8 <cppLoop+0x950>)
 80060bc:	f7fb ff90 	bl	8001fe0 <_ZN3LED2LREaa>
			HAL_Delay(500);
 80060c0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80060c4:	f000 fe08 	bl	8006cd8 <HAL_Delay>

			line_trace.setNormalRatio(0.0);
 80060c8:	ed9f 0a58 	vldr	s0, [pc, #352]	; 800622c <cppLoop+0x984>
 80060cc:	4850      	ldr	r0, [pc, #320]	; (8006210 <cppLoop+0x968>)
 80060ce:	f7fc faf6 	bl	80026be <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 80060d2:	484f      	ldr	r0, [pc, #316]	; (8006210 <cppLoop+0x968>)
 80060d4:	f7fc fb4c 	bl	8002770 <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 80060d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80060dc:	f000 fdfc 	bl	8006cd8 <HAL_Delay>

			led.fullColor('R');
 80060e0:	2152      	movs	r1, #82	; 0x52
 80060e2:	4845      	ldr	r0, [pc, #276]	; (80061f8 <cppLoop+0x950>)
 80060e4:	f7fb fec0 	bl	8001e68 <_ZN3LED9fullColorEc>
			encoder.clearTotalCnt();
 80060e8:	4851      	ldr	r0, [pc, #324]	; (8006230 <cppLoop+0x988>)
 80060ea:	f7fb f9b7 	bl	800145c <_ZN7Encoder13clearTotalCntEv>
			encoder.clearDistance();
 80060ee:	4850      	ldr	r0, [pc, #320]	; (8006230 <cppLoop+0x988>)
 80060f0:	f7fb f983 	bl	80013fa <_ZN7Encoder13clearDistanceEv>

			HAL_Delay(10000);
 80060f4:	f242 7010 	movw	r0, #10000	; 0x2710
 80060f8:	f000 fdee 	bl	8006cd8 <HAL_Delay>

			line_trace.stop();
 80060fc:	4844      	ldr	r0, [pc, #272]	; (8006210 <cppLoop+0x968>)
 80060fe:	f7fc fb47 	bl	8002790 <_ZN9LineTrace4stopEv>
			//long total = encoder.getTotalCnt();

			//user_fopen("total_cnts", "cnts.txt");
			user_fopen("distance", "1m.txt");
 8006102:	494c      	ldr	r1, [pc, #304]	; (8006234 <cppLoop+0x98c>)
 8006104:	484c      	ldr	r0, [pc, #304]	; (8006238 <cppLoop+0x990>)
 8006106:	f7fb f9bf 	bl	8001488 <user_fopen>
			float d = encoder.getDistance();
 800610a:	4849      	ldr	r0, [pc, #292]	; (8006230 <cppLoop+0x988>)
 800610c:	f7fb f966 	bl	80013dc <_ZN7Encoder11getDistanceEv>
 8006110:	eef0 7a40 	vmov.f32	s15, s0
 8006114:	edc7 7a04 	vstr	s15, [r7, #16]
			sd_write_float(1, &d, ADD_WRITE);
 8006118:	f107 0310 	add.w	r3, r7, #16
 800611c:	2201      	movs	r2, #1
 800611e:	4619      	mov	r1, r3
 8006120:	2001      	movs	r0, #1
 8006122:	f7fb f9d3 	bl	80014cc <sd_write_float>
			user_fclose();
 8006126:	f7fb f9c1 	bl	80014ac <user_fclose>

			led.LR(-1, 0);
 800612a:	2200      	movs	r2, #0
 800612c:	f04f 31ff 	mov.w	r1, #4294967295
 8006130:	4831      	ldr	r0, [pc, #196]	; (80061f8 <cppLoop+0x950>)
 8006132:	f7fb ff55 	bl	8001fe0 <_ZN3LED2LREaa>
		}

		break;
 8006136:	f000 bc89 	b.w	8006a4c <cppLoop+0x11a4>

	case 6:
		led.fullColor('R');
 800613a:	2152      	movs	r1, #82	; 0x52
 800613c:	482e      	ldr	r0, [pc, #184]	; (80061f8 <cppLoop+0x950>)
 800613e:	f7fb fe93 	bl	8001e68 <_ZN3LED9fullColorEc>

		lcd_clear();
 8006142:	f7fa ffad 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006146:	2100      	movs	r1, #0
 8006148:	2000      	movs	r0, #0
 800614a:	f7fa ffb9 	bl	80010c0 <lcd_locate>
		lcd_printf("Position");
 800614e:	483b      	ldr	r0, [pc, #236]	; (800623c <cppLoop+0x994>)
 8006150:	f7fa ffe0 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006154:	2101      	movs	r1, #1
 8006156:	2000      	movs	r0, #0
 8006158:	f7fa ffb2 	bl	80010c0 <lcd_locate>
		lcd_printf("Record");
 800615c:	4838      	ldr	r0, [pc, #224]	; (8006240 <cppLoop+0x998>)
 800615e:	f7fa ffd9 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006162:	4828      	ldr	r0, [pc, #160]	; (8006204 <cppLoop+0x95c>)
 8006164:	f7fb fe1c 	bl	8001da0 <_ZN8JoyStick8getValueEv>
 8006168:	4603      	mov	r3, r0
 800616a:	2b02      	cmp	r3, #2
 800616c:	bf0c      	ite	eq
 800616e:	2301      	moveq	r3, #1
 8006170:	2300      	movne	r3, #0
 8006172:	b2db      	uxtb	r3, r3
 8006174:	2b00      	cmp	r3, #0
 8006176:	f000 846b 	beq.w	8006a50 <cppLoop+0x11a8>
			HAL_Delay(500);
 800617a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800617e:	f000 fdab 	bl	8006cd8 <HAL_Delay>
			led.LR(-1, 1);
 8006182:	2201      	movs	r2, #1
 8006184:	f04f 31ff 	mov.w	r1, #4294967295
 8006188:	481b      	ldr	r0, [pc, #108]	; (80061f8 <cppLoop+0x950>)
 800618a:	f7fb ff29 	bl	8001fe0 <_ZN3LED2LREaa>

			line_trace.setNormalRatio(0.07);
 800618e:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8006244 <cppLoop+0x99c>
 8006192:	481f      	ldr	r0, [pc, #124]	; (8006210 <cppLoop+0x968>)
 8006194:	f7fc fa93 	bl	80026be <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 8006198:	481d      	ldr	r0, [pc, #116]	; (8006210 <cppLoop+0x968>)
 800619a:	f7fc fae9 	bl	8002770 <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 800619e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80061a2:	f000 fd99 	bl	8006cd8 <HAL_Delay>

			led.fullColor('R');
 80061a6:	2152      	movs	r1, #82	; 0x52
 80061a8:	4813      	ldr	r0, [pc, #76]	; (80061f8 <cppLoop+0x950>)
 80061aa:	f7fb fe5d 	bl	8001e68 <_ZN3LED9fullColorEc>
			encoder.clearTotalCnt();
 80061ae:	4820      	ldr	r0, [pc, #128]	; (8006230 <cppLoop+0x988>)
 80061b0:	f7fb f954 	bl	800145c <_ZN7Encoder13clearTotalCntEv>
			encoder.clearDistance();
 80061b4:	481e      	ldr	r0, [pc, #120]	; (8006230 <cppLoop+0x988>)
 80061b6:	f7fb f920 	bl	80013fa <_ZN7Encoder13clearDistanceEv>
			odometry.clearPotition();
 80061ba:	4823      	ldr	r0, [pc, #140]	; (8006248 <cppLoop+0x9a0>)
 80061bc:	f7fc fe41 	bl	8002e42 <_ZN8Odometry13clearPotitionEv>
			logger.start();
 80061c0:	4811      	ldr	r0, [pc, #68]	; (8006208 <cppLoop+0x960>)
 80061c2:	f7fc fc33 	bl	8002a2c <_ZN6Logger5startEv>

			HAL_Delay(3000);
 80061c6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80061ca:	f000 fd85 	bl	8006cd8 <HAL_Delay>

			line_trace.stop();
 80061ce:	4810      	ldr	r0, [pc, #64]	; (8006210 <cppLoop+0x968>)
 80061d0:	f7fc fade 	bl	8002790 <_ZN9LineTrace4stopEv>
			logger.stop();
 80061d4:	480c      	ldr	r0, [pc, #48]	; (8006208 <cppLoop+0x960>)
 80061d6:	f7fc fc38 	bl	8002a4a <_ZN6Logger4stopEv>

			logger.saveDistanceAndTheta("Pos", "dis_s2.txt", "th_s2.txt");
 80061da:	4b1c      	ldr	r3, [pc, #112]	; (800624c <cppLoop+0x9a4>)
 80061dc:	4a1c      	ldr	r2, [pc, #112]	; (8006250 <cppLoop+0x9a8>)
 80061de:	491d      	ldr	r1, [pc, #116]	; (8006254 <cppLoop+0x9ac>)
 80061e0:	4809      	ldr	r0, [pc, #36]	; (8006208 <cppLoop+0x960>)
 80061e2:	f7fc fc00 	bl	80029e6 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>

			led.LR(-1, 0);
 80061e6:	2200      	movs	r2, #0
 80061e8:	f04f 31ff 	mov.w	r1, #4294967295
 80061ec:	4802      	ldr	r0, [pc, #8]	; (80061f8 <cppLoop+0x950>)
 80061ee:	f7fb fef7 	bl	8001fe0 <_ZN3LED2LREaa>
		}

		break;
 80061f2:	f000 bc2d 	b.w	8006a50 <cppLoop+0x11a8>
 80061f6:	bf00      	nop
 80061f8:	20000550 	.word	0x20000550
 80061fc:	08017944 	.word	0x08017944
 8006200:	0801794c 	.word	0x0801794c
 8006204:	20000544 	.word	0x20000544
 8006208:	20000574 	.word	0x20000574
 800620c:	3dcccccd 	.word	0x3dcccccd
 8006210:	2001f9cc 	.word	0x2001f9cc
 8006214:	08017954 	.word	0x08017954
 8006218:	08017960 	.word	0x08017960
 800621c:	08017970 	.word	0x08017970
 8006220:	2001f994 	.word	0x2001f994
 8006224:	0801797c 	.word	0x0801797c
 8006228:	08017984 	.word	0x08017984
 800622c:	00000000 	.word	0x00000000
 8006230:	2001f97c 	.word	0x2001f97c
 8006234:	08017990 	.word	0x08017990
 8006238:	08017998 	.word	0x08017998
 800623c:	080179a4 	.word	0x080179a4
 8006240:	0801793c 	.word	0x0801793c
 8006244:	3d8f5c29 	.word	0x3d8f5c29
 8006248:	2001fa38 	.word	0x2001fa38
 800624c:	080179b0 	.word	0x080179b0
 8006250:	080179bc 	.word	0x080179bc
 8006254:	080179c8 	.word	0x080179c8

	case 7:
		led.fullColor('G');
 8006258:	2147      	movs	r1, #71	; 0x47
 800625a:	48b3      	ldr	r0, [pc, #716]	; (8006528 <cppLoop+0xc80>)
 800625c:	f7fb fe04 	bl	8001e68 <_ZN3LED9fullColorEc>

		lcd_clear();
 8006260:	f7fa ff1e 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006264:	2100      	movs	r1, #0
 8006266:	2000      	movs	r0, #0
 8006268:	f7fa ff2a 	bl	80010c0 <lcd_locate>
		lcd_printf("Velocity");
 800626c:	48af      	ldr	r0, [pc, #700]	; (800652c <cppLoop+0xc84>)
 800626e:	f7fa ff51 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006272:	2101      	movs	r1, #1
 8006274:	2000      	movs	r0, #0
 8006276:	f7fa ff23 	bl	80010c0 <lcd_locate>
		lcd_printf("Test");
 800627a:	48ad      	ldr	r0, [pc, #692]	; (8006530 <cppLoop+0xc88>)
 800627c:	f7fa ff4a 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006280:	48ac      	ldr	r0, [pc, #688]	; (8006534 <cppLoop+0xc8c>)
 8006282:	f7fb fd8d 	bl	8001da0 <_ZN8JoyStick8getValueEv>
 8006286:	4603      	mov	r3, r0
 8006288:	2b02      	cmp	r3, #2
 800628a:	bf0c      	ite	eq
 800628c:	2301      	moveq	r3, #1
 800628e:	2300      	movne	r3, #0
 8006290:	b2db      	uxtb	r3, r3
 8006292:	2b00      	cmp	r3, #0
 8006294:	f000 83de 	beq.w	8006a54 <cppLoop+0x11ac>
			led.LR(-1, 1);
 8006298:	2201      	movs	r2, #1
 800629a:	f04f 31ff 	mov.w	r1, #4294967295
 800629e:	48a2      	ldr	r0, [pc, #648]	; (8006528 <cppLoop+0xc80>)
 80062a0:	f7fb fe9e 	bl	8001fe0 <_ZN3LED2LREaa>
			HAL_Delay(500);
 80062a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80062a8:	f000 fd16 	bl	8006cd8 <HAL_Delay>

			led.fullColor('R');
 80062ac:	2152      	movs	r1, #82	; 0x52
 80062ae:	489e      	ldr	r0, [pc, #632]	; (8006528 <cppLoop+0xc80>)
 80062b0:	f7fb fdda 	bl	8001e68 <_ZN3LED9fullColorEc>
			velocity_ctrl.setVelocity(0, 1.57);
 80062b4:	eddf 0aa0 	vldr	s1, [pc, #640]	; 8006538 <cppLoop+0xc90>
 80062b8:	ed9f 0aa0 	vldr	s0, [pc, #640]	; 800653c <cppLoop+0xc94>
 80062bc:	48a0      	ldr	r0, [pc, #640]	; (8006540 <cppLoop+0xc98>)
 80062be:	f7fd fac3 	bl	8003848 <_ZN12VelocityCtrl11setVelocityEff>
			velocity_ctrl.start();
 80062c2:	489f      	ldr	r0, [pc, #636]	; (8006540 <cppLoop+0xc98>)
 80062c4:	f7fd fb19 	bl	80038fa <_ZN12VelocityCtrl5startEv>

			HAL_Delay(1000);
 80062c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80062cc:	f000 fd04 	bl	8006cd8 <HAL_Delay>
			velocity_ctrl.setVelocity(0, 0);
 80062d0:	eddf 0a9a 	vldr	s1, [pc, #616]	; 800653c <cppLoop+0xc94>
 80062d4:	ed9f 0a99 	vldr	s0, [pc, #612]	; 800653c <cppLoop+0xc94>
 80062d8:	4899      	ldr	r0, [pc, #612]	; (8006540 <cppLoop+0xc98>)
 80062da:	f7fd fab5 	bl	8003848 <_ZN12VelocityCtrl11setVelocityEff>
			HAL_Delay(100);
 80062de:	2064      	movs	r0, #100	; 0x64
 80062e0:	f000 fcfa 	bl	8006cd8 <HAL_Delay>
			velocity_ctrl.stop();
 80062e4:	4896      	ldr	r0, [pc, #600]	; (8006540 <cppLoop+0xc98>)
 80062e6:	f7fd fb17 	bl	8003918 <_ZN12VelocityCtrl4stopEv>

			led.LR(-1, 0);
 80062ea:	2200      	movs	r2, #0
 80062ec:	f04f 31ff 	mov.w	r1, #4294967295
 80062f0:	488d      	ldr	r0, [pc, #564]	; (8006528 <cppLoop+0xc80>)
 80062f2:	f7fb fe75 	bl	8001fe0 <_ZN3LED2LREaa>
		}
		break;
 80062f6:	e3ad      	b.n	8006a54 <cppLoop+0x11ac>

	case 8:
		led.fullColor('B');
 80062f8:	2142      	movs	r1, #66	; 0x42
 80062fa:	488b      	ldr	r0, [pc, #556]	; (8006528 <cppLoop+0xc80>)
 80062fc:	f7fb fdb4 	bl	8001e68 <_ZN3LED9fullColorEc>

		lcd_clear();
 8006300:	f7fa fece 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006304:	2100      	movs	r1, #0
 8006306:	2000      	movs	r0, #0
 8006308:	f7fa feda 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf    ", path_following.getKxVal()*1000);
 800630c:	488d      	ldr	r0, [pc, #564]	; (8006544 <cppLoop+0xc9c>)
 800630e:	f7fc fe8f 	bl	8003030 <_ZN13PathFollowing8getKxValEv>
 8006312:	ec51 0b10 	vmov	r0, r1, d0
 8006316:	f04f 0200 	mov.w	r2, #0
 800631a:	4b8b      	ldr	r3, [pc, #556]	; (8006548 <cppLoop+0xca0>)
 800631c:	f7fa f984 	bl	8000628 <__aeabi_dmul>
 8006320:	4603      	mov	r3, r0
 8006322:	460c      	mov	r4, r1
 8006324:	461a      	mov	r2, r3
 8006326:	4623      	mov	r3, r4
 8006328:	4888      	ldr	r0, [pc, #544]	; (800654c <cppLoop+0xca4>)
 800632a:	f7fa fef3 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800632e:	2101      	movs	r1, #1
 8006330:	2000      	movs	r0, #0
 8006332:	f7fa fec5 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", path_following.getKyVal()*1000, path_following.getKtVal()*1000);
 8006336:	4883      	ldr	r0, [pc, #524]	; (8006544 <cppLoop+0xc9c>)
 8006338:	f7fc fe8e 	bl	8003058 <_ZN13PathFollowing8getKyValEv>
 800633c:	ec51 0b10 	vmov	r0, r1, d0
 8006340:	f04f 0200 	mov.w	r2, #0
 8006344:	4b80      	ldr	r3, [pc, #512]	; (8006548 <cppLoop+0xca0>)
 8006346:	f7fa f96f 	bl	8000628 <__aeabi_dmul>
 800634a:	4603      	mov	r3, r0
 800634c:	460c      	mov	r4, r1
 800634e:	461d      	mov	r5, r3
 8006350:	4626      	mov	r6, r4
 8006352:	487c      	ldr	r0, [pc, #496]	; (8006544 <cppLoop+0xc9c>)
 8006354:	f7fc fe94 	bl	8003080 <_ZN13PathFollowing8getKtValEv>
 8006358:	ec51 0b10 	vmov	r0, r1, d0
 800635c:	f04f 0200 	mov.w	r2, #0
 8006360:	4b79      	ldr	r3, [pc, #484]	; (8006548 <cppLoop+0xca0>)
 8006362:	f7fa f961 	bl	8000628 <__aeabi_dmul>
 8006366:	4603      	mov	r3, r0
 8006368:	460c      	mov	r4, r1
 800636a:	e9cd 3400 	strd	r3, r4, [sp]
 800636e:	462a      	mov	r2, r5
 8006370:	4633      	mov	r3, r6
 8006372:	4877      	ldr	r0, [pc, #476]	; (8006550 <cppLoop+0xca8>)
 8006374:	f7fa fece 	bl	8001114 <lcd_printf>

		static float adj_kx = path_following.getKxVal();
 8006378:	4b76      	ldr	r3, [pc, #472]	; (8006554 <cppLoop+0xcac>)
 800637a:	781b      	ldrb	r3, [r3, #0]
 800637c:	f3bf 8f5b 	dmb	ish
 8006380:	b2db      	uxtb	r3, r3
 8006382:	f003 0301 	and.w	r3, r3, #1
 8006386:	2b00      	cmp	r3, #0
 8006388:	bf0c      	ite	eq
 800638a:	2301      	moveq	r3, #1
 800638c:	2300      	movne	r3, #0
 800638e:	b2db      	uxtb	r3, r3
 8006390:	2b00      	cmp	r3, #0
 8006392:	d019      	beq.n	80063c8 <cppLoop+0xb20>
 8006394:	486f      	ldr	r0, [pc, #444]	; (8006554 <cppLoop+0xcac>)
 8006396:	f00b f99c 	bl	80116d2 <__cxa_guard_acquire>
 800639a:	4603      	mov	r3, r0
 800639c:	2b00      	cmp	r3, #0
 800639e:	bf14      	ite	ne
 80063a0:	2301      	movne	r3, #1
 80063a2:	2300      	moveq	r3, #0
 80063a4:	b2db      	uxtb	r3, r3
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d00e      	beq.n	80063c8 <cppLoop+0xb20>
 80063aa:	4866      	ldr	r0, [pc, #408]	; (8006544 <cppLoop+0xc9c>)
 80063ac:	f7fc fe40 	bl	8003030 <_ZN13PathFollowing8getKxValEv>
 80063b0:	ec54 3b10 	vmov	r3, r4, d0
 80063b4:	4618      	mov	r0, r3
 80063b6:	4621      	mov	r1, r4
 80063b8:	f7fa fc2e 	bl	8000c18 <__aeabi_d2f>
 80063bc:	4602      	mov	r2, r0
 80063be:	4b66      	ldr	r3, [pc, #408]	; (8006558 <cppLoop+0xcb0>)
 80063c0:	601a      	str	r2, [r3, #0]
 80063c2:	4864      	ldr	r0, [pc, #400]	; (8006554 <cppLoop+0xcac>)
 80063c4:	f00b f991 	bl	80116ea <__cxa_guard_release>
		static float adj_ky = path_following.getKyVal();
 80063c8:	4b64      	ldr	r3, [pc, #400]	; (800655c <cppLoop+0xcb4>)
 80063ca:	781b      	ldrb	r3, [r3, #0]
 80063cc:	f3bf 8f5b 	dmb	ish
 80063d0:	b2db      	uxtb	r3, r3
 80063d2:	f003 0301 	and.w	r3, r3, #1
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	bf0c      	ite	eq
 80063da:	2301      	moveq	r3, #1
 80063dc:	2300      	movne	r3, #0
 80063de:	b2db      	uxtb	r3, r3
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d019      	beq.n	8006418 <cppLoop+0xb70>
 80063e4:	485d      	ldr	r0, [pc, #372]	; (800655c <cppLoop+0xcb4>)
 80063e6:	f00b f974 	bl	80116d2 <__cxa_guard_acquire>
 80063ea:	4603      	mov	r3, r0
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	bf14      	ite	ne
 80063f0:	2301      	movne	r3, #1
 80063f2:	2300      	moveq	r3, #0
 80063f4:	b2db      	uxtb	r3, r3
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d00e      	beq.n	8006418 <cppLoop+0xb70>
 80063fa:	4852      	ldr	r0, [pc, #328]	; (8006544 <cppLoop+0xc9c>)
 80063fc:	f7fc fe2c 	bl	8003058 <_ZN13PathFollowing8getKyValEv>
 8006400:	ec54 3b10 	vmov	r3, r4, d0
 8006404:	4618      	mov	r0, r3
 8006406:	4621      	mov	r1, r4
 8006408:	f7fa fc06 	bl	8000c18 <__aeabi_d2f>
 800640c:	4602      	mov	r2, r0
 800640e:	4b54      	ldr	r3, [pc, #336]	; (8006560 <cppLoop+0xcb8>)
 8006410:	601a      	str	r2, [r3, #0]
 8006412:	4852      	ldr	r0, [pc, #328]	; (800655c <cppLoop+0xcb4>)
 8006414:	f00b f969 	bl	80116ea <__cxa_guard_release>
		static float adj_kt = path_following.getKtVal();
 8006418:	4b52      	ldr	r3, [pc, #328]	; (8006564 <cppLoop+0xcbc>)
 800641a:	781b      	ldrb	r3, [r3, #0]
 800641c:	f3bf 8f5b 	dmb	ish
 8006420:	b2db      	uxtb	r3, r3
 8006422:	f003 0301 	and.w	r3, r3, #1
 8006426:	2b00      	cmp	r3, #0
 8006428:	bf0c      	ite	eq
 800642a:	2301      	moveq	r3, #1
 800642c:	2300      	movne	r3, #0
 800642e:	b2db      	uxtb	r3, r3
 8006430:	2b00      	cmp	r3, #0
 8006432:	d019      	beq.n	8006468 <cppLoop+0xbc0>
 8006434:	484b      	ldr	r0, [pc, #300]	; (8006564 <cppLoop+0xcbc>)
 8006436:	f00b f94c 	bl	80116d2 <__cxa_guard_acquire>
 800643a:	4603      	mov	r3, r0
 800643c:	2b00      	cmp	r3, #0
 800643e:	bf14      	ite	ne
 8006440:	2301      	movne	r3, #1
 8006442:	2300      	moveq	r3, #0
 8006444:	b2db      	uxtb	r3, r3
 8006446:	2b00      	cmp	r3, #0
 8006448:	d00e      	beq.n	8006468 <cppLoop+0xbc0>
 800644a:	483e      	ldr	r0, [pc, #248]	; (8006544 <cppLoop+0xc9c>)
 800644c:	f7fc fe18 	bl	8003080 <_ZN13PathFollowing8getKtValEv>
 8006450:	ec54 3b10 	vmov	r3, r4, d0
 8006454:	4618      	mov	r0, r3
 8006456:	4621      	mov	r1, r4
 8006458:	f7fa fbde 	bl	8000c18 <__aeabi_d2f>
 800645c:	4602      	mov	r2, r0
 800645e:	4b42      	ldr	r3, [pc, #264]	; (8006568 <cppLoop+0xcc0>)
 8006460:	601a      	str	r2, [r3, #0]
 8006462:	4840      	ldr	r0, [pc, #256]	; (8006564 <cppLoop+0xcbc>)
 8006464:	f00b f941 	bl	80116ea <__cxa_guard_release>

		if(joy_stick.getValue() == JOY_U){
 8006468:	4832      	ldr	r0, [pc, #200]	; (8006534 <cppLoop+0xc8c>)
 800646a:	f7fb fc99 	bl	8001da0 <_ZN8JoyStick8getValueEv>
 800646e:	4603      	mov	r3, r0
 8006470:	2b08      	cmp	r3, #8
 8006472:	bf0c      	ite	eq
 8006474:	2301      	moveq	r3, #1
 8006476:	2300      	movne	r3, #0
 8006478:	b2db      	uxtb	r3, r3
 800647a:	2b00      	cmp	r3, #0
 800647c:	d021      	beq.n	80064c2 <cppLoop+0xc1a>
			led.LR(-1, 1);
 800647e:	2201      	movs	r2, #1
 8006480:	f04f 31ff 	mov.w	r1, #4294967295
 8006484:	4828      	ldr	r0, [pc, #160]	; (8006528 <cppLoop+0xc80>)
 8006486:	f7fb fdab 	bl	8001fe0 <_ZN3LED2LREaa>
			HAL_Delay(300);
 800648a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800648e:	f000 fc23 	bl	8006cd8 <HAL_Delay>

			selector++;
 8006492:	4b36      	ldr	r3, [pc, #216]	; (800656c <cppLoop+0xcc4>)
 8006494:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006498:	b29b      	uxth	r3, r3
 800649a:	3301      	adds	r3, #1
 800649c:	b29b      	uxth	r3, r3
 800649e:	b21a      	sxth	r2, r3
 80064a0:	4b32      	ldr	r3, [pc, #200]	; (800656c <cppLoop+0xcc4>)
 80064a2:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 80064a4:	4b31      	ldr	r3, [pc, #196]	; (800656c <cppLoop+0xcc4>)
 80064a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80064aa:	2b02      	cmp	r3, #2
 80064ac:	dd02      	ble.n	80064b4 <cppLoop+0xc0c>
 80064ae:	4b2f      	ldr	r3, [pc, #188]	; (800656c <cppLoop+0xcc4>)
 80064b0:	2200      	movs	r2, #0
 80064b2:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 80064b4:	2200      	movs	r2, #0
 80064b6:	f04f 31ff 	mov.w	r1, #4294967295
 80064ba:	481b      	ldr	r0, [pc, #108]	; (8006528 <cppLoop+0xc80>)
 80064bc:	f7fb fd90 	bl	8001fe0 <_ZN3LED2LREaa>

			led.LR(-1, 0);
		}


		break;
 80064c0:	e2ca      	b.n	8006a58 <cppLoop+0x11b0>
		else if(joy_stick.getValue() == JOY_R){
 80064c2:	481c      	ldr	r0, [pc, #112]	; (8006534 <cppLoop+0xc8c>)
 80064c4:	f7fb fc6c 	bl	8001da0 <_ZN8JoyStick8getValueEv>
 80064c8:	4603      	mov	r3, r0
 80064ca:	2b10      	cmp	r3, #16
 80064cc:	bf0c      	ite	eq
 80064ce:	2301      	moveq	r3, #1
 80064d0:	2300      	movne	r3, #0
 80064d2:	b2db      	uxtb	r3, r3
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	f000 8082 	beq.w	80065de <cppLoop+0xd36>
			led.LR(-1, 1);
 80064da:	2201      	movs	r2, #1
 80064dc:	f04f 31ff 	mov.w	r1, #4294967295
 80064e0:	4811      	ldr	r0, [pc, #68]	; (8006528 <cppLoop+0xc80>)
 80064e2:	f7fb fd7d 	bl	8001fe0 <_ZN3LED2LREaa>
			HAL_Delay(300);
 80064e6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80064ea:	f000 fbf5 	bl	8006cd8 <HAL_Delay>
			if(selector == 0){
 80064ee:	4b1f      	ldr	r3, [pc, #124]	; (800656c <cppLoop+0xcc4>)
 80064f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d13b      	bne.n	8006570 <cppLoop+0xcc8>
				adj_kx = adj_kx + 0.00001;
 80064f8:	4b17      	ldr	r3, [pc, #92]	; (8006558 <cppLoop+0xcb0>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4618      	mov	r0, r3
 80064fe:	f7fa f83b 	bl	8000578 <__aeabi_f2d>
 8006502:	a307      	add	r3, pc, #28	; (adr r3, 8006520 <cppLoop+0xc78>)
 8006504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006508:	f7f9 fed8 	bl	80002bc <__adddf3>
 800650c:	4603      	mov	r3, r0
 800650e:	460c      	mov	r4, r1
 8006510:	4618      	mov	r0, r3
 8006512:	4621      	mov	r1, r4
 8006514:	f7fa fb80 	bl	8000c18 <__aeabi_d2f>
 8006518:	4602      	mov	r2, r0
 800651a:	4b0f      	ldr	r3, [pc, #60]	; (8006558 <cppLoop+0xcb0>)
 800651c:	601a      	str	r2, [r3, #0]
 800651e:	e053      	b.n	80065c8 <cppLoop+0xd20>
 8006520:	88e368f1 	.word	0x88e368f1
 8006524:	3ee4f8b5 	.word	0x3ee4f8b5
 8006528:	20000550 	.word	0x20000550
 800652c:	080179cc 	.word	0x080179cc
 8006530:	080179d8 	.word	0x080179d8
 8006534:	20000544 	.word	0x20000544
 8006538:	3fc8f5c3 	.word	0x3fc8f5c3
 800653c:	00000000 	.word	0x00000000
 8006540:	2001f994 	.word	0x2001f994
 8006544:	2001fc78 	.word	0x2001fc78
 8006548:	408f4000 	.word	0x408f4000
 800654c:	080178d8 	.word	0x080178d8
 8006550:	080178e4 	.word	0x080178e4
 8006554:	200373d0 	.word	0x200373d0
 8006558:	200373cc 	.word	0x200373cc
 800655c:	200373d8 	.word	0x200373d8
 8006560:	200373d4 	.word	0x200373d4
 8006564:	200373e0 	.word	0x200373e0
 8006568:	200373dc 	.word	0x200373dc
 800656c:	200373b0 	.word	0x200373b0
			else if(selector == 1){
 8006570:	4ba3      	ldr	r3, [pc, #652]	; (8006800 <cppLoop+0xf58>)
 8006572:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006576:	2b01      	cmp	r3, #1
 8006578:	d113      	bne.n	80065a2 <cppLoop+0xcfa>
				adj_ky = adj_ky + 0.00001;
 800657a:	4ba2      	ldr	r3, [pc, #648]	; (8006804 <cppLoop+0xf5c>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4618      	mov	r0, r3
 8006580:	f7f9 fffa 	bl	8000578 <__aeabi_f2d>
 8006584:	a39c      	add	r3, pc, #624	; (adr r3, 80067f8 <cppLoop+0xf50>)
 8006586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800658a:	f7f9 fe97 	bl	80002bc <__adddf3>
 800658e:	4603      	mov	r3, r0
 8006590:	460c      	mov	r4, r1
 8006592:	4618      	mov	r0, r3
 8006594:	4621      	mov	r1, r4
 8006596:	f7fa fb3f 	bl	8000c18 <__aeabi_d2f>
 800659a:	4602      	mov	r2, r0
 800659c:	4b99      	ldr	r3, [pc, #612]	; (8006804 <cppLoop+0xf5c>)
 800659e:	601a      	str	r2, [r3, #0]
 80065a0:	e012      	b.n	80065c8 <cppLoop+0xd20>
				adj_kt = adj_kt + 0.00001;
 80065a2:	4b99      	ldr	r3, [pc, #612]	; (8006808 <cppLoop+0xf60>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4618      	mov	r0, r3
 80065a8:	f7f9 ffe6 	bl	8000578 <__aeabi_f2d>
 80065ac:	a392      	add	r3, pc, #584	; (adr r3, 80067f8 <cppLoop+0xf50>)
 80065ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b2:	f7f9 fe83 	bl	80002bc <__adddf3>
 80065b6:	4603      	mov	r3, r0
 80065b8:	460c      	mov	r4, r1
 80065ba:	4618      	mov	r0, r3
 80065bc:	4621      	mov	r1, r4
 80065be:	f7fa fb2b 	bl	8000c18 <__aeabi_d2f>
 80065c2:	4602      	mov	r2, r0
 80065c4:	4b90      	ldr	r3, [pc, #576]	; (8006808 <cppLoop+0xf60>)
 80065c6:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 80065c8:	2152      	movs	r1, #82	; 0x52
 80065ca:	4890      	ldr	r0, [pc, #576]	; (800680c <cppLoop+0xf64>)
 80065cc:	f7fb fc4c 	bl	8001e68 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 80065d0:	2200      	movs	r2, #0
 80065d2:	f04f 31ff 	mov.w	r1, #4294967295
 80065d6:	488d      	ldr	r0, [pc, #564]	; (800680c <cppLoop+0xf64>)
 80065d8:	f7fb fd02 	bl	8001fe0 <_ZN3LED2LREaa>
		break;
 80065dc:	e23c      	b.n	8006a58 <cppLoop+0x11b0>
		else if(joy_stick.getValue() == JOY_L){
 80065de:	488c      	ldr	r0, [pc, #560]	; (8006810 <cppLoop+0xf68>)
 80065e0:	f7fb fbde 	bl	8001da0 <_ZN8JoyStick8getValueEv>
 80065e4:	4603      	mov	r3, r0
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	bf0c      	ite	eq
 80065ea:	2301      	moveq	r3, #1
 80065ec:	2300      	movne	r3, #0
 80065ee:	b2db      	uxtb	r3, r3
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d059      	beq.n	80066a8 <cppLoop+0xe00>
			led.LR(-1, 1);
 80065f4:	2201      	movs	r2, #1
 80065f6:	f04f 31ff 	mov.w	r1, #4294967295
 80065fa:	4884      	ldr	r0, [pc, #528]	; (800680c <cppLoop+0xf64>)
 80065fc:	f7fb fcf0 	bl	8001fe0 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8006600:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006604:	f000 fb68 	bl	8006cd8 <HAL_Delay>
			if(selector == 0){
 8006608:	4b7d      	ldr	r3, [pc, #500]	; (8006800 <cppLoop+0xf58>)
 800660a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d113      	bne.n	800663a <cppLoop+0xd92>
				adj_kx = adj_kx - 0.00001;
 8006612:	4b80      	ldr	r3, [pc, #512]	; (8006814 <cppLoop+0xf6c>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4618      	mov	r0, r3
 8006618:	f7f9 ffae 	bl	8000578 <__aeabi_f2d>
 800661c:	a376      	add	r3, pc, #472	; (adr r3, 80067f8 <cppLoop+0xf50>)
 800661e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006622:	f7f9 fe49 	bl	80002b8 <__aeabi_dsub>
 8006626:	4603      	mov	r3, r0
 8006628:	460c      	mov	r4, r1
 800662a:	4618      	mov	r0, r3
 800662c:	4621      	mov	r1, r4
 800662e:	f7fa faf3 	bl	8000c18 <__aeabi_d2f>
 8006632:	4602      	mov	r2, r0
 8006634:	4b77      	ldr	r3, [pc, #476]	; (8006814 <cppLoop+0xf6c>)
 8006636:	601a      	str	r2, [r3, #0]
 8006638:	e02b      	b.n	8006692 <cppLoop+0xdea>
			else if(selector == 1){
 800663a:	4b71      	ldr	r3, [pc, #452]	; (8006800 <cppLoop+0xf58>)
 800663c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006640:	2b01      	cmp	r3, #1
 8006642:	d113      	bne.n	800666c <cppLoop+0xdc4>
				adj_ky = adj_ky - 0.00001;
 8006644:	4b6f      	ldr	r3, [pc, #444]	; (8006804 <cppLoop+0xf5c>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4618      	mov	r0, r3
 800664a:	f7f9 ff95 	bl	8000578 <__aeabi_f2d>
 800664e:	a36a      	add	r3, pc, #424	; (adr r3, 80067f8 <cppLoop+0xf50>)
 8006650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006654:	f7f9 fe30 	bl	80002b8 <__aeabi_dsub>
 8006658:	4603      	mov	r3, r0
 800665a:	460c      	mov	r4, r1
 800665c:	4618      	mov	r0, r3
 800665e:	4621      	mov	r1, r4
 8006660:	f7fa fada 	bl	8000c18 <__aeabi_d2f>
 8006664:	4602      	mov	r2, r0
 8006666:	4b67      	ldr	r3, [pc, #412]	; (8006804 <cppLoop+0xf5c>)
 8006668:	601a      	str	r2, [r3, #0]
 800666a:	e012      	b.n	8006692 <cppLoop+0xdea>
				adj_kt = adj_kt - 0.00001;
 800666c:	4b66      	ldr	r3, [pc, #408]	; (8006808 <cppLoop+0xf60>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4618      	mov	r0, r3
 8006672:	f7f9 ff81 	bl	8000578 <__aeabi_f2d>
 8006676:	a360      	add	r3, pc, #384	; (adr r3, 80067f8 <cppLoop+0xf50>)
 8006678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800667c:	f7f9 fe1c 	bl	80002b8 <__aeabi_dsub>
 8006680:	4603      	mov	r3, r0
 8006682:	460c      	mov	r4, r1
 8006684:	4618      	mov	r0, r3
 8006686:	4621      	mov	r1, r4
 8006688:	f7fa fac6 	bl	8000c18 <__aeabi_d2f>
 800668c:	4602      	mov	r2, r0
 800668e:	4b5e      	ldr	r3, [pc, #376]	; (8006808 <cppLoop+0xf60>)
 8006690:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8006692:	2152      	movs	r1, #82	; 0x52
 8006694:	485d      	ldr	r0, [pc, #372]	; (800680c <cppLoop+0xf64>)
 8006696:	f7fb fbe7 	bl	8001e68 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 800669a:	2200      	movs	r2, #0
 800669c:	f04f 31ff 	mov.w	r1, #4294967295
 80066a0:	485a      	ldr	r0, [pc, #360]	; (800680c <cppLoop+0xf64>)
 80066a2:	f7fb fc9d 	bl	8001fe0 <_ZN3LED2LREaa>
		break;
 80066a6:	e1d7      	b.n	8006a58 <cppLoop+0x11b0>
		else if(joy_stick.getValue() == JOY_D){
 80066a8:	4859      	ldr	r0, [pc, #356]	; (8006810 <cppLoop+0xf68>)
 80066aa:	f7fb fb79 	bl	8001da0 <_ZN8JoyStick8getValueEv>
 80066ae:	4603      	mov	r3, r0
 80066b0:	2b04      	cmp	r3, #4
 80066b2:	bf0c      	ite	eq
 80066b4:	2301      	moveq	r3, #1
 80066b6:	2300      	movne	r3, #0
 80066b8:	b2db      	uxtb	r3, r3
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d048      	beq.n	8006750 <cppLoop+0xea8>
			led.LR(-1, 1);
 80066be:	2201      	movs	r2, #1
 80066c0:	f04f 31ff 	mov.w	r1, #4294967295
 80066c4:	4851      	ldr	r0, [pc, #324]	; (800680c <cppLoop+0xf64>)
 80066c6:	f7fb fc8b 	bl	8001fe0 <_ZN3LED2LREaa>
			HAL_Delay(300);
 80066ca:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80066ce:	f000 fb03 	bl	8006cd8 <HAL_Delay>
			sd_read_array_float("Params", "kx.txt", 1, &temp_kx);
 80066d2:	f107 030c 	add.w	r3, r7, #12
 80066d6:	2201      	movs	r2, #1
 80066d8:	494f      	ldr	r1, [pc, #316]	; (8006818 <cppLoop+0xf70>)
 80066da:	4850      	ldr	r0, [pc, #320]	; (800681c <cppLoop+0xf74>)
 80066dc:	f7fa ffae 	bl	800163c <sd_read_array_float>
			sd_read_array_float("Params", "ky.txt", 1, &temp_ky);
 80066e0:	f107 0308 	add.w	r3, r7, #8
 80066e4:	2201      	movs	r2, #1
 80066e6:	494e      	ldr	r1, [pc, #312]	; (8006820 <cppLoop+0xf78>)
 80066e8:	484c      	ldr	r0, [pc, #304]	; (800681c <cppLoop+0xf74>)
 80066ea:	f7fa ffa7 	bl	800163c <sd_read_array_float>
			sd_read_array_float("Params", "kt.txt", 1, &temp_kt);
 80066ee:	1d3b      	adds	r3, r7, #4
 80066f0:	2201      	movs	r2, #1
 80066f2:	494c      	ldr	r1, [pc, #304]	; (8006824 <cppLoop+0xf7c>)
 80066f4:	4849      	ldr	r0, [pc, #292]	; (800681c <cppLoop+0xf74>)
 80066f6:	f7fa ffa1 	bl	800163c <sd_read_array_float>
			path_following.setGain(temp_kx, temp_ky, temp_kt);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	4618      	mov	r0, r3
 80066fe:	f7f9 ff3b 	bl	8000578 <__aeabi_f2d>
 8006702:	4604      	mov	r4, r0
 8006704:	460d      	mov	r5, r1
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	4618      	mov	r0, r3
 800670a:	f7f9 ff35 	bl	8000578 <__aeabi_f2d>
 800670e:	4680      	mov	r8, r0
 8006710:	4689      	mov	r9, r1
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	4618      	mov	r0, r3
 8006716:	f7f9 ff2f 	bl	8000578 <__aeabi_f2d>
 800671a:	4602      	mov	r2, r0
 800671c:	460b      	mov	r3, r1
 800671e:	ec43 2b12 	vmov	d2, r2, r3
 8006722:	ec49 8b11 	vmov	d1, r8, r9
 8006726:	ec45 4b10 	vmov	d0, r4, r5
 800672a:	483f      	ldr	r0, [pc, #252]	; (8006828 <cppLoop+0xf80>)
 800672c:	f7fc fc60 	bl	8002ff0 <_ZN13PathFollowing7setGainEddd>
			adj_kx = temp_kx;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	4a38      	ldr	r2, [pc, #224]	; (8006814 <cppLoop+0xf6c>)
 8006734:	6013      	str	r3, [r2, #0]
			adj_ky = temp_ky;
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	4a32      	ldr	r2, [pc, #200]	; (8006804 <cppLoop+0xf5c>)
 800673a:	6013      	str	r3, [r2, #0]
			adj_kt = temp_kt;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	4a32      	ldr	r2, [pc, #200]	; (8006808 <cppLoop+0xf60>)
 8006740:	6013      	str	r3, [r2, #0]
			led.LR(-1, 0);
 8006742:	2200      	movs	r2, #0
 8006744:	f04f 31ff 	mov.w	r1, #4294967295
 8006748:	4830      	ldr	r0, [pc, #192]	; (800680c <cppLoop+0xf64>)
 800674a:	f7fb fc49 	bl	8001fe0 <_ZN3LED2LREaa>
		break;
 800674e:	e183      	b.n	8006a58 <cppLoop+0x11b0>
		else if(joy_stick.getValue() == JOY_C){
 8006750:	482f      	ldr	r0, [pc, #188]	; (8006810 <cppLoop+0xf68>)
 8006752:	f7fb fb25 	bl	8001da0 <_ZN8JoyStick8getValueEv>
 8006756:	4603      	mov	r3, r0
 8006758:	2b02      	cmp	r3, #2
 800675a:	bf0c      	ite	eq
 800675c:	2301      	moveq	r3, #1
 800675e:	2300      	movne	r3, #0
 8006760:	b2db      	uxtb	r3, r3
 8006762:	2b00      	cmp	r3, #0
 8006764:	f000 8178 	beq.w	8006a58 <cppLoop+0x11b0>
			led.LR(-1, 1);
 8006768:	2201      	movs	r2, #1
 800676a:	f04f 31ff 	mov.w	r1, #4294967295
 800676e:	4827      	ldr	r0, [pc, #156]	; (800680c <cppLoop+0xf64>)
 8006770:	f7fb fc36 	bl	8001fe0 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8006774:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006778:	f000 faae 	bl	8006cd8 <HAL_Delay>
			sd_write_array_float("Params", "kx.txt", 1, &adj_kx, OVER_WRITE);
 800677c:	2300      	movs	r3, #0
 800677e:	9300      	str	r3, [sp, #0]
 8006780:	4b24      	ldr	r3, [pc, #144]	; (8006814 <cppLoop+0xf6c>)
 8006782:	2201      	movs	r2, #1
 8006784:	4924      	ldr	r1, [pc, #144]	; (8006818 <cppLoop+0xf70>)
 8006786:	4825      	ldr	r0, [pc, #148]	; (800681c <cppLoop+0xf74>)
 8006788:	f7fa fef2 	bl	8001570 <sd_write_array_float>
			sd_write_array_float("Params", "ky.txt", 1, &adj_ky, OVER_WRITE);
 800678c:	2300      	movs	r3, #0
 800678e:	9300      	str	r3, [sp, #0]
 8006790:	4b1c      	ldr	r3, [pc, #112]	; (8006804 <cppLoop+0xf5c>)
 8006792:	2201      	movs	r2, #1
 8006794:	4922      	ldr	r1, [pc, #136]	; (8006820 <cppLoop+0xf78>)
 8006796:	4821      	ldr	r0, [pc, #132]	; (800681c <cppLoop+0xf74>)
 8006798:	f7fa feea 	bl	8001570 <sd_write_array_float>
			sd_write_array_float("Params", "kt.txt", 1, &adj_kt, OVER_WRITE);
 800679c:	2300      	movs	r3, #0
 800679e:	9300      	str	r3, [sp, #0]
 80067a0:	4b19      	ldr	r3, [pc, #100]	; (8006808 <cppLoop+0xf60>)
 80067a2:	2201      	movs	r2, #1
 80067a4:	491f      	ldr	r1, [pc, #124]	; (8006824 <cppLoop+0xf7c>)
 80067a6:	481d      	ldr	r0, [pc, #116]	; (800681c <cppLoop+0xf74>)
 80067a8:	f7fa fee2 	bl	8001570 <sd_write_array_float>
			path_following.setGain(adj_kx, adj_ky, adj_kt);
 80067ac:	4b19      	ldr	r3, [pc, #100]	; (8006814 <cppLoop+0xf6c>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4618      	mov	r0, r3
 80067b2:	f7f9 fee1 	bl	8000578 <__aeabi_f2d>
 80067b6:	4604      	mov	r4, r0
 80067b8:	460d      	mov	r5, r1
 80067ba:	4b12      	ldr	r3, [pc, #72]	; (8006804 <cppLoop+0xf5c>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4618      	mov	r0, r3
 80067c0:	f7f9 feda 	bl	8000578 <__aeabi_f2d>
 80067c4:	4680      	mov	r8, r0
 80067c6:	4689      	mov	r9, r1
 80067c8:	4b0f      	ldr	r3, [pc, #60]	; (8006808 <cppLoop+0xf60>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4618      	mov	r0, r3
 80067ce:	f7f9 fed3 	bl	8000578 <__aeabi_f2d>
 80067d2:	4602      	mov	r2, r0
 80067d4:	460b      	mov	r3, r1
 80067d6:	ec43 2b12 	vmov	d2, r2, r3
 80067da:	ec49 8b11 	vmov	d1, r8, r9
 80067de:	ec45 4b10 	vmov	d0, r4, r5
 80067e2:	4811      	ldr	r0, [pc, #68]	; (8006828 <cppLoop+0xf80>)
 80067e4:	f7fc fc04 	bl	8002ff0 <_ZN13PathFollowing7setGainEddd>
			led.LR(-1, 0);
 80067e8:	2200      	movs	r2, #0
 80067ea:	f04f 31ff 	mov.w	r1, #4294967295
 80067ee:	4807      	ldr	r0, [pc, #28]	; (800680c <cppLoop+0xf64>)
 80067f0:	f7fb fbf6 	bl	8001fe0 <_ZN3LED2LREaa>
		break;
 80067f4:	e130      	b.n	8006a58 <cppLoop+0x11b0>
 80067f6:	bf00      	nop
 80067f8:	88e368f1 	.word	0x88e368f1
 80067fc:	3ee4f8b5 	.word	0x3ee4f8b5
 8006800:	200373b0 	.word	0x200373b0
 8006804:	200373d4 	.word	0x200373d4
 8006808:	200373dc 	.word	0x200373dc
 800680c:	20000550 	.word	0x20000550
 8006810:	20000544 	.word	0x20000544
 8006814:	200373cc 	.word	0x200373cc
 8006818:	080179e0 	.word	0x080179e0
 800681c:	08017900 	.word	0x08017900
 8006820:	080179e8 	.word	0x080179e8
 8006824:	080179f0 	.word	0x080179f0
 8006828:	2001fc78 	.word	0x2001fc78

	case 9:
		led.fullColor('M');
 800682c:	214d      	movs	r1, #77	; 0x4d
 800682e:	4898      	ldr	r0, [pc, #608]	; (8006a90 <cppLoop+0x11e8>)
 8006830:	f7fb fb1a 	bl	8001e68 <_ZN3LED9fullColorEc>

		lcd_clear();
 8006834:	f7fa fc34 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006838:	2100      	movs	r1, #0
 800683a:	2000      	movs	r0, #0
 800683c:	f7fa fc40 	bl	80010c0 <lcd_locate>
		lcd_printf("Step");
 8006840:	4894      	ldr	r0, [pc, #592]	; (8006a94 <cppLoop+0x11ec>)
 8006842:	f7fa fc67 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006846:	2101      	movs	r1, #1
 8006848:	2000      	movs	r0, #0
 800684a:	f7fa fc39 	bl	80010c0 <lcd_locate>
		lcd_printf("Record");
 800684e:	4892      	ldr	r0, [pc, #584]	; (8006a98 <cppLoop+0x11f0>)
 8006850:	f7fa fc60 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006854:	4891      	ldr	r0, [pc, #580]	; (8006a9c <cppLoop+0x11f4>)
 8006856:	f7fb faa3 	bl	8001da0 <_ZN8JoyStick8getValueEv>
 800685a:	4603      	mov	r3, r0
 800685c:	2b02      	cmp	r3, #2
 800685e:	bf0c      	ite	eq
 8006860:	2301      	moveq	r3, #1
 8006862:	2300      	movne	r3, #0
 8006864:	b2db      	uxtb	r3, r3
 8006866:	2b00      	cmp	r3, #0
 8006868:	f000 80f8 	beq.w	8006a5c <cppLoop+0x11b4>
			HAL_Delay(1500);
 800686c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8006870:	f000 fa32 	bl	8006cd8 <HAL_Delay>
			led.LR(-1, 1);
 8006874:	2201      	movs	r2, #1
 8006876:	f04f 31ff 	mov.w	r1, #4294967295
 800687a:	4885      	ldr	r0, [pc, #532]	; (8006a90 <cppLoop+0x11e8>)
 800687c:	f7fb fbb0 	bl	8001fe0 <_ZN3LED2LREaa>

			logger.start();
 8006880:	4887      	ldr	r0, [pc, #540]	; (8006aa0 <cppLoop+0x11f8>)
 8006882:	f7fc f8d3 	bl	8002a2c <_ZN6Logger5startEv>
			motor.setRatio(0.3, -0.3);
 8006886:	ed9f 1b7c 	vldr	d1, [pc, #496]	; 8006a78 <cppLoop+0x11d0>
 800688a:	ed9f 0b7d 	vldr	d0, [pc, #500]	; 8006a80 <cppLoop+0x11d8>
 800688e:	4885      	ldr	r0, [pc, #532]	; (8006aa4 <cppLoop+0x11fc>)
 8006890:	f7fc f95e 	bl	8002b50 <_ZN5Motor8setRatioEdd>

			HAL_Delay(1000);
 8006894:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006898:	f000 fa1e 	bl	8006cd8 <HAL_Delay>

			logger.stop();
 800689c:	4880      	ldr	r0, [pc, #512]	; (8006aa0 <cppLoop+0x11f8>)
 800689e:	f7fc f8d4 	bl	8002a4a <_ZN6Logger4stopEv>
			motor.setRatio(0.0, 0.0);
 80068a2:	ed9f 1b79 	vldr	d1, [pc, #484]	; 8006a88 <cppLoop+0x11e0>
 80068a6:	ed9f 0b78 	vldr	d0, [pc, #480]	; 8006a88 <cppLoop+0x11e0>
 80068aa:	487e      	ldr	r0, [pc, #504]	; (8006aa4 <cppLoop+0x11fc>)
 80068ac:	f7fc f950 	bl	8002b50 <_ZN5Motor8setRatioEdd>

			logger.saveLogs("SYSIDENT", "STEPRES.txt");
 80068b0:	4a7d      	ldr	r2, [pc, #500]	; (8006aa8 <cppLoop+0x1200>)
 80068b2:	497e      	ldr	r1, [pc, #504]	; (8006aac <cppLoop+0x1204>)
 80068b4:	487a      	ldr	r0, [pc, #488]	; (8006aa0 <cppLoop+0x11f8>)
 80068b6:	f7fc f86c 	bl	8002992 <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 80068ba:	2200      	movs	r2, #0
 80068bc:	f04f 31ff 	mov.w	r1, #4294967295
 80068c0:	4873      	ldr	r0, [pc, #460]	; (8006a90 <cppLoop+0x11e8>)
 80068c2:	f7fb fb8d 	bl	8001fe0 <_ZN3LED2LREaa>
		}
		break;
 80068c6:	e0c9      	b.n	8006a5c <cppLoop+0x11b4>

	case 10:
		led.fullColor('Y');
 80068c8:	2159      	movs	r1, #89	; 0x59
 80068ca:	4871      	ldr	r0, [pc, #452]	; (8006a90 <cppLoop+0x11e8>)
 80068cc:	f7fb facc 	bl	8001e68 <_ZN3LED9fullColorEc>

		lcd_clear();
 80068d0:	f7fa fbe6 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80068d4:	2100      	movs	r1, #0
 80068d6:	2000      	movs	r0, #0
 80068d8:	f7fa fbf2 	bl	80010c0 <lcd_locate>
		lcd_printf("PID");
 80068dc:	4874      	ldr	r0, [pc, #464]	; (8006ab0 <cppLoop+0x1208>)
 80068de:	f7fa fc19 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80068e2:	2101      	movs	r1, #1
 80068e4:	2000      	movs	r0, #0
 80068e6:	f7fa fbeb 	bl	80010c0 <lcd_locate>
		lcd_printf("Response");
 80068ea:	4872      	ldr	r0, [pc, #456]	; (8006ab4 <cppLoop+0x120c>)
 80068ec:	f7fa fc12 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80068f0:	486a      	ldr	r0, [pc, #424]	; (8006a9c <cppLoop+0x11f4>)
 80068f2:	f7fb fa55 	bl	8001da0 <_ZN8JoyStick8getValueEv>
 80068f6:	4603      	mov	r3, r0
 80068f8:	2b02      	cmp	r3, #2
 80068fa:	bf0c      	ite	eq
 80068fc:	2301      	moveq	r3, #1
 80068fe:	2300      	movne	r3, #0
 8006900:	b2db      	uxtb	r3, r3
 8006902:	2b00      	cmp	r3, #0
 8006904:	f000 80ac 	beq.w	8006a60 <cppLoop+0x11b8>
			HAL_Delay(1500);
 8006908:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800690c:	f000 f9e4 	bl	8006cd8 <HAL_Delay>
			led.LR(-1, 1);
 8006910:	2201      	movs	r2, #1
 8006912:	f04f 31ff 	mov.w	r1, #4294967295
 8006916:	485e      	ldr	r0, [pc, #376]	; (8006a90 <cppLoop+0x11e8>)
 8006918:	f7fb fb62 	bl	8001fe0 <_ZN3LED2LREaa>

			logger.start();
 800691c:	4860      	ldr	r0, [pc, #384]	; (8006aa0 <cppLoop+0x11f8>)
 800691e:	f7fc f885 	bl	8002a2c <_ZN6Logger5startEv>
			velocity_ctrl.start();
 8006922:	4865      	ldr	r0, [pc, #404]	; (8006ab8 <cppLoop+0x1210>)
 8006924:	f7fc ffe9 	bl	80038fa <_ZN12VelocityCtrl5startEv>
			velocity_ctrl.setVelocity(0.8, 0);
 8006928:	eddf 0a64 	vldr	s1, [pc, #400]	; 8006abc <cppLoop+0x1214>
 800692c:	ed9f 0a64 	vldr	s0, [pc, #400]	; 8006ac0 <cppLoop+0x1218>
 8006930:	4861      	ldr	r0, [pc, #388]	; (8006ab8 <cppLoop+0x1210>)
 8006932:	f7fc ff89 	bl	8003848 <_ZN12VelocityCtrl11setVelocityEff>

			HAL_Delay(1000);
 8006936:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800693a:	f000 f9cd 	bl	8006cd8 <HAL_Delay>

			logger.stop();
 800693e:	4858      	ldr	r0, [pc, #352]	; (8006aa0 <cppLoop+0x11f8>)
 8006940:	f7fc f883 	bl	8002a4a <_ZN6Logger4stopEv>
			velocity_ctrl.stop();
 8006944:	485c      	ldr	r0, [pc, #368]	; (8006ab8 <cppLoop+0x1210>)
 8006946:	f7fc ffe7 	bl	8003918 <_ZN12VelocityCtrl4stopEv>

			logger.saveLogs("SYSIDENT", "PIDRES.txt");
 800694a:	4a5e      	ldr	r2, [pc, #376]	; (8006ac4 <cppLoop+0x121c>)
 800694c:	4957      	ldr	r1, [pc, #348]	; (8006aac <cppLoop+0x1204>)
 800694e:	4854      	ldr	r0, [pc, #336]	; (8006aa0 <cppLoop+0x11f8>)
 8006950:	f7fc f81f 	bl	8002992 <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 8006954:	2200      	movs	r2, #0
 8006956:	f04f 31ff 	mov.w	r1, #4294967295
 800695a:	484d      	ldr	r0, [pc, #308]	; (8006a90 <cppLoop+0x11e8>)
 800695c:	f7fb fb40 	bl	8001fe0 <_ZN3LED2LREaa>
		}

		break;
 8006960:	e07e      	b.n	8006a60 <cppLoop+0x11b8>

	case 11:
		led.fullColor('C');
 8006962:	2143      	movs	r1, #67	; 0x43
 8006964:	484a      	ldr	r0, [pc, #296]	; (8006a90 <cppLoop+0x11e8>)
 8006966:	f7fb fa7f 	bl	8001e68 <_ZN3LED9fullColorEc>

		lcd_clear();
 800696a:	f7fa fb99 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800696e:	2100      	movs	r1, #0
 8006970:	2000      	movs	r0, #0
 8006972:	f7fa fba5 	bl	80010c0 <lcd_locate>
		lcd_printf("11      ");
 8006976:	4854      	ldr	r0, [pc, #336]	; (8006ac8 <cppLoop+0x1220>)
 8006978:	f7fa fbcc 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800697c:	2101      	movs	r1, #1
 800697e:	2000      	movs	r0, #0
 8006980:	f7fa fb9e 	bl	80010c0 <lcd_locate>
		lcd_printf("        ");
 8006984:	4851      	ldr	r0, [pc, #324]	; (8006acc <cppLoop+0x1224>)
 8006986:	f7fa fbc5 	bl	8001114 <lcd_printf>

		break;
 800698a:	e06a      	b.n	8006a62 <cppLoop+0x11ba>

	case 12:
		led.fullColor('R');
 800698c:	2152      	movs	r1, #82	; 0x52
 800698e:	4840      	ldr	r0, [pc, #256]	; (8006a90 <cppLoop+0x11e8>)
 8006990:	f7fb fa6a 	bl	8001e68 <_ZN3LED9fullColorEc>

		lcd_clear();
 8006994:	f7fa fb84 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006998:	2100      	movs	r1, #0
 800699a:	2000      	movs	r0, #0
 800699c:	f7fa fb90 	bl	80010c0 <lcd_locate>
		lcd_printf("12      ");
 80069a0:	484b      	ldr	r0, [pc, #300]	; (8006ad0 <cppLoop+0x1228>)
 80069a2:	f7fa fbb7 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80069a6:	2101      	movs	r1, #1
 80069a8:	2000      	movs	r0, #0
 80069aa:	f7fa fb89 	bl	80010c0 <lcd_locate>
		lcd_printf("        ");
 80069ae:	4847      	ldr	r0, [pc, #284]	; (8006acc <cppLoop+0x1224>)
 80069b0:	f7fa fbb0 	bl	8001114 <lcd_printf>

		break;
 80069b4:	e055      	b.n	8006a62 <cppLoop+0x11ba>

	case 13:
		led.fullColor('G');
 80069b6:	2147      	movs	r1, #71	; 0x47
 80069b8:	4835      	ldr	r0, [pc, #212]	; (8006a90 <cppLoop+0x11e8>)
 80069ba:	f7fb fa55 	bl	8001e68 <_ZN3LED9fullColorEc>

		lcd_clear();
 80069be:	f7fa fb6f 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80069c2:	2100      	movs	r1, #0
 80069c4:	2000      	movs	r0, #0
 80069c6:	f7fa fb7b 	bl	80010c0 <lcd_locate>
		lcd_printf("13      ");
 80069ca:	4842      	ldr	r0, [pc, #264]	; (8006ad4 <cppLoop+0x122c>)
 80069cc:	f7fa fba2 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80069d0:	2101      	movs	r1, #1
 80069d2:	2000      	movs	r0, #0
 80069d4:	f7fa fb74 	bl	80010c0 <lcd_locate>
		lcd_printf("        ");
 80069d8:	483c      	ldr	r0, [pc, #240]	; (8006acc <cppLoop+0x1224>)
 80069da:	f7fa fb9b 	bl	8001114 <lcd_printf>

		break;
 80069de:	e040      	b.n	8006a62 <cppLoop+0x11ba>

	case 14:
		led.fullColor('B');
 80069e0:	2142      	movs	r1, #66	; 0x42
 80069e2:	482b      	ldr	r0, [pc, #172]	; (8006a90 <cppLoop+0x11e8>)
 80069e4:	f7fb fa40 	bl	8001e68 <_ZN3LED9fullColorEc>

		lcd_clear();
 80069e8:	f7fa fb5a 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80069ec:	2100      	movs	r1, #0
 80069ee:	2000      	movs	r0, #0
 80069f0:	f7fa fb66 	bl	80010c0 <lcd_locate>
		lcd_printf("14      ");
 80069f4:	4838      	ldr	r0, [pc, #224]	; (8006ad8 <cppLoop+0x1230>)
 80069f6:	f7fa fb8d 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80069fa:	2101      	movs	r1, #1
 80069fc:	2000      	movs	r0, #0
 80069fe:	f7fa fb5f 	bl	80010c0 <lcd_locate>
		lcd_printf("        ");
 8006a02:	4832      	ldr	r0, [pc, #200]	; (8006acc <cppLoop+0x1224>)
 8006a04:	f7fa fb86 	bl	8001114 <lcd_printf>

		break;
 8006a08:	e02b      	b.n	8006a62 <cppLoop+0x11ba>

	case 15:
		led.fullColor('M');
 8006a0a:	214d      	movs	r1, #77	; 0x4d
 8006a0c:	4820      	ldr	r0, [pc, #128]	; (8006a90 <cppLoop+0x11e8>)
 8006a0e:	f7fb fa2b 	bl	8001e68 <_ZN3LED9fullColorEc>

		lcd_clear();
 8006a12:	f7fa fb45 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006a16:	2100      	movs	r1, #0
 8006a18:	2000      	movs	r0, #0
 8006a1a:	f7fa fb51 	bl	80010c0 <lcd_locate>
		lcd_printf("15      ");
 8006a1e:	482f      	ldr	r0, [pc, #188]	; (8006adc <cppLoop+0x1234>)
 8006a20:	f7fa fb78 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006a24:	2101      	movs	r1, #1
 8006a26:	2000      	movs	r0, #0
 8006a28:	f7fa fb4a 	bl	80010c0 <lcd_locate>
		lcd_printf("        ");
 8006a2c:	4827      	ldr	r0, [pc, #156]	; (8006acc <cppLoop+0x1224>)
 8006a2e:	f7fa fb71 	bl	8001114 <lcd_printf>

		break;
 8006a32:	e016      	b.n	8006a62 <cppLoop+0x11ba>

	default:
		break;
 8006a34:	bf00      	nop
 8006a36:	e014      	b.n	8006a62 <cppLoop+0x11ba>
		break;
 8006a38:	bf00      	nop
 8006a3a:	e012      	b.n	8006a62 <cppLoop+0x11ba>
		break;
 8006a3c:	bf00      	nop
 8006a3e:	e010      	b.n	8006a62 <cppLoop+0x11ba>
		break;
 8006a40:	bf00      	nop
 8006a42:	e00e      	b.n	8006a62 <cppLoop+0x11ba>
		break;
 8006a44:	bf00      	nop
 8006a46:	e00c      	b.n	8006a62 <cppLoop+0x11ba>
		break;
 8006a48:	bf00      	nop
 8006a4a:	e00a      	b.n	8006a62 <cppLoop+0x11ba>
		break;
 8006a4c:	bf00      	nop
 8006a4e:	e008      	b.n	8006a62 <cppLoop+0x11ba>
		break;
 8006a50:	bf00      	nop
 8006a52:	e006      	b.n	8006a62 <cppLoop+0x11ba>
		break;
 8006a54:	bf00      	nop
 8006a56:	e004      	b.n	8006a62 <cppLoop+0x11ba>
		break;
 8006a58:	bf00      	nop
 8006a5a:	e002      	b.n	8006a62 <cppLoop+0x11ba>
		break;
 8006a5c:	bf00      	nop
 8006a5e:	e000      	b.n	8006a62 <cppLoop+0x11ba>
		break;
 8006a60:	bf00      	nop

	}

	HAL_Delay(30);
 8006a62:	201e      	movs	r0, #30
 8006a64:	f000 f938 	bl	8006cd8 <HAL_Delay>

}
 8006a68:	bf00      	nop
 8006a6a:	3724      	adds	r7, #36	; 0x24
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006a72:	bf00      	nop
 8006a74:	f3af 8000 	nop.w
 8006a78:	33333333 	.word	0x33333333
 8006a7c:	bfd33333 	.word	0xbfd33333
 8006a80:	33333333 	.word	0x33333333
 8006a84:	3fd33333 	.word	0x3fd33333
	...
 8006a90:	20000550 	.word	0x20000550
 8006a94:	080179f8 	.word	0x080179f8
 8006a98:	0801793c 	.word	0x0801793c
 8006a9c:	20000544 	.word	0x20000544
 8006aa0:	20000574 	.word	0x20000574
 8006aa4:	2000054c 	.word	0x2000054c
 8006aa8:	08017a00 	.word	0x08017a00
 8006aac:	08017a0c 	.word	0x08017a0c
 8006ab0:	08017a18 	.word	0x08017a18
 8006ab4:	08017a1c 	.word	0x08017a1c
 8006ab8:	2001f994 	.word	0x2001f994
 8006abc:	00000000 	.word	0x00000000
 8006ac0:	3f4ccccd 	.word	0x3f4ccccd
 8006ac4:	08017a28 	.word	0x08017a28
 8006ac8:	08017a34 	.word	0x08017a34
 8006acc:	08017a40 	.word	0x08017a40
 8006ad0:	08017a4c 	.word	0x08017a4c
 8006ad4:	08017a58 	.word	0x08017a58
 8006ad8:	08017a64 	.word	0x08017a64
 8006adc:	08017a70 	.word	0x08017a70

08006ae0 <_Z41__static_initialization_and_destruction_0ii>:
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b082      	sub	sp, #8
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
 8006ae8:	6039      	str	r1, [r7, #0]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d133      	bne.n	8006b58 <_Z41__static_initialization_and_destruction_0ii+0x78>
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d12e      	bne.n	8006b58 <_Z41__static_initialization_and_destruction_0ii+0x78>
LineSensor line_sensor;
 8006afa:	4819      	ldr	r0, [pc, #100]	; (8006b60 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8006afc:	f7fb faa8 	bl	8002050 <_ZN10LineSensorC1Ev>
SideSensor side_sensor;
 8006b00:	4818      	ldr	r0, [pc, #96]	; (8006b64 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8006b02:	f7fc fb9d 	bl	8003240 <_ZN10SideSensorC1Ev>
JoyStick joy_stick;
 8006b06:	4818      	ldr	r0, [pc, #96]	; (8006b68 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8006b08:	f7fb f93e 	bl	8001d88 <_ZN8JoyStickC1Ev>
Motor motor;
 8006b0c:	4817      	ldr	r0, [pc, #92]	; (8006b6c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8006b0e:	f7fb ffab 	bl	8002a68 <_ZN5MotorC1Ev>
IMU imu;
 8006b12:	4817      	ldr	r0, [pc, #92]	; (8006b70 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8006b14:	f7fa ff44 	bl	80019a0 <_ZN3IMUC1Ev>
Logger logger;
 8006b18:	4816      	ldr	r0, [pc, #88]	; (8006b74 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8006b1a:	f7fb fe55 	bl	80027c8 <_ZN6LoggerC1Ev>
Encoder encoder;
 8006b1e:	4816      	ldr	r0, [pc, #88]	; (8006b78 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8006b20:	f7fa fb18 	bl	8001154 <_ZN7EncoderC1Ev>
VelocityCtrl velocity_ctrl(&motor, &encoder, &imu);
 8006b24:	4b12      	ldr	r3, [pc, #72]	; (8006b70 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8006b26:	4a14      	ldr	r2, [pc, #80]	; (8006b78 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8006b28:	4910      	ldr	r1, [pc, #64]	; (8006b6c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8006b2a:	4814      	ldr	r0, [pc, #80]	; (8006b7c <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8006b2c:	f7fc fcf4 	bl	8003518 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>
LineTrace line_trace(&motor, &line_sensor, &velocity_ctrl);
 8006b30:	4b12      	ldr	r3, [pc, #72]	; (8006b7c <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8006b32:	4a0b      	ldr	r2, [pc, #44]	; (8006b60 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8006b34:	490d      	ldr	r1, [pc, #52]	; (8006b6c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8006b36:	4812      	ldr	r0, [pc, #72]	; (8006b80 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8006b38:	f7fb fc20 	bl	800237c <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrl>
Odometry odometry(&encoder, &imu, &velocity_ctrl);
 8006b3c:	4b0f      	ldr	r3, [pc, #60]	; (8006b7c <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8006b3e:	4a0c      	ldr	r2, [pc, #48]	; (8006b70 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8006b40:	490d      	ldr	r1, [pc, #52]	; (8006b78 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8006b42:	4810      	ldr	r0, [pc, #64]	; (8006b84 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8006b44:	f7fc f876 	bl	8002c34 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>
SystemIdentification sys_ident(&logger, &motor);
 8006b48:	4a08      	ldr	r2, [pc, #32]	; (8006b6c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8006b4a:	490a      	ldr	r1, [pc, #40]	; (8006b74 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8006b4c:	480e      	ldr	r0, [pc, #56]	; (8006b88 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8006b4e:	f7fc fbe1 	bl	8003314 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>
PathFollowing path_following;
 8006b52:	480e      	ldr	r0, [pc, #56]	; (8006b8c <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8006b54:	f7fc f994 	bl	8002e80 <_ZN13PathFollowingC1Ev>
}
 8006b58:	bf00      	nop
 8006b5a:	3708      	adds	r7, #8
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}
 8006b60:	20000248 	.word	0x20000248
 8006b64:	20000540 	.word	0x20000540
 8006b68:	20000544 	.word	0x20000544
 8006b6c:	2000054c 	.word	0x2000054c
 8006b70:	20000560 	.word	0x20000560
 8006b74:	20000574 	.word	0x20000574
 8006b78:	2001f97c 	.word	0x2001f97c
 8006b7c:	2001f994 	.word	0x2001f994
 8006b80:	2001f9cc 	.word	0x2001f9cc
 8006b84:	2001fa38 	.word	0x2001fa38
 8006b88:	2001fa68 	.word	0x2001fa68
 8006b8c:	2001fc78 	.word	0x2001fc78

08006b90 <_GLOBAL__sub_I_line_sensor>:
 8006b90:	b580      	push	{r7, lr}
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006b98:	2001      	movs	r0, #1
 8006b9a:	f7ff ffa1 	bl	8006ae0 <_Z41__static_initialization_and_destruction_0ii>
 8006b9e:	bd80      	pop	{r7, pc}

08006ba0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006ba0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006bd8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006ba4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006ba6:	e003      	b.n	8006bb0 <LoopCopyDataInit>

08006ba8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006ba8:	4b0c      	ldr	r3, [pc, #48]	; (8006bdc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006baa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006bac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006bae:	3104      	adds	r1, #4

08006bb0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006bb0:	480b      	ldr	r0, [pc, #44]	; (8006be0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8006bb2:	4b0c      	ldr	r3, [pc, #48]	; (8006be4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006bb4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006bb6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006bb8:	d3f6      	bcc.n	8006ba8 <CopyDataInit>
  ldr  r2, =_sbss
 8006bba:	4a0b      	ldr	r2, [pc, #44]	; (8006be8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006bbc:	e002      	b.n	8006bc4 <LoopFillZerobss>

08006bbe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8006bbe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006bc0:	f842 3b04 	str.w	r3, [r2], #4

08006bc4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006bc4:	4b09      	ldr	r3, [pc, #36]	; (8006bec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006bc6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006bc8:	d3f9      	bcc.n	8006bbe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006bca:	f7fe fcc9 	bl	8005560 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006bce:	f00b fdeb 	bl	80127a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006bd2:	f7fc ff8d 	bl	8003af0 <main>
  bx  lr    
 8006bd6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006bd8:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8006bdc:	08018078 	.word	0x08018078
  ldr  r0, =_sdata
 8006be0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006be4:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8006be8:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8006bec:	2003bdc0 	.word	0x2003bdc0

08006bf0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006bf0:	e7fe      	b.n	8006bf0 <ADC_IRQHandler>
	...

08006bf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006bf8:	4b0e      	ldr	r3, [pc, #56]	; (8006c34 <HAL_Init+0x40>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a0d      	ldr	r2, [pc, #52]	; (8006c34 <HAL_Init+0x40>)
 8006bfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006c02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006c04:	4b0b      	ldr	r3, [pc, #44]	; (8006c34 <HAL_Init+0x40>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a0a      	ldr	r2, [pc, #40]	; (8006c34 <HAL_Init+0x40>)
 8006c0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006c0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006c10:	4b08      	ldr	r3, [pc, #32]	; (8006c34 <HAL_Init+0x40>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a07      	ldr	r2, [pc, #28]	; (8006c34 <HAL_Init+0x40>)
 8006c16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006c1c:	2003      	movs	r0, #3
 8006c1e:	f000 fd51 	bl	80076c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006c22:	2000      	movs	r0, #0
 8006c24:	f000 f808 	bl	8006c38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006c28:	f7fd fe88 	bl	800493c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006c2c:	2300      	movs	r3, #0
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	bd80      	pop	{r7, pc}
 8006c32:	bf00      	nop
 8006c34:	40023c00 	.word	0x40023c00

08006c38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b082      	sub	sp, #8
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006c40:	4b12      	ldr	r3, [pc, #72]	; (8006c8c <HAL_InitTick+0x54>)
 8006c42:	681a      	ldr	r2, [r3, #0]
 8006c44:	4b12      	ldr	r3, [pc, #72]	; (8006c90 <HAL_InitTick+0x58>)
 8006c46:	781b      	ldrb	r3, [r3, #0]
 8006c48:	4619      	mov	r1, r3
 8006c4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006c4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c56:	4618      	mov	r0, r3
 8006c58:	f000 fd69 	bl	800772e <HAL_SYSTICK_Config>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d001      	beq.n	8006c66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006c62:	2301      	movs	r3, #1
 8006c64:	e00e      	b.n	8006c84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2b0f      	cmp	r3, #15
 8006c6a:	d80a      	bhi.n	8006c82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	6879      	ldr	r1, [r7, #4]
 8006c70:	f04f 30ff 	mov.w	r0, #4294967295
 8006c74:	f000 fd31 	bl	80076da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006c78:	4a06      	ldr	r2, [pc, #24]	; (8006c94 <HAL_InitTick+0x5c>)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	e000      	b.n	8006c84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006c82:	2301      	movs	r3, #1
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	3708      	adds	r7, #8
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}
 8006c8c:	20000000 	.word	0x20000000
 8006c90:	20000008 	.word	0x20000008
 8006c94:	20000004 	.word	0x20000004

08006c98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006c9c:	4b06      	ldr	r3, [pc, #24]	; (8006cb8 <HAL_IncTick+0x20>)
 8006c9e:	781b      	ldrb	r3, [r3, #0]
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	4b06      	ldr	r3, [pc, #24]	; (8006cbc <HAL_IncTick+0x24>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4413      	add	r3, r2
 8006ca8:	4a04      	ldr	r2, [pc, #16]	; (8006cbc <HAL_IncTick+0x24>)
 8006caa:	6013      	str	r3, [r2, #0]
}
 8006cac:	bf00      	nop
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb4:	4770      	bx	lr
 8006cb6:	bf00      	nop
 8006cb8:	20000008 	.word	0x20000008
 8006cbc:	20039d48 	.word	0x20039d48

08006cc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	af00      	add	r7, sp, #0
  return uwTick;
 8006cc4:	4b03      	ldr	r3, [pc, #12]	; (8006cd4 <HAL_GetTick+0x14>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd0:	4770      	bx	lr
 8006cd2:	bf00      	nop
 8006cd4:	20039d48 	.word	0x20039d48

08006cd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b084      	sub	sp, #16
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006ce0:	f7ff ffee 	bl	8006cc0 <HAL_GetTick>
 8006ce4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cf0:	d005      	beq.n	8006cfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006cf2:	4b09      	ldr	r3, [pc, #36]	; (8006d18 <HAL_Delay+0x40>)
 8006cf4:	781b      	ldrb	r3, [r3, #0]
 8006cf6:	461a      	mov	r2, r3
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	4413      	add	r3, r2
 8006cfc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006cfe:	bf00      	nop
 8006d00:	f7ff ffde 	bl	8006cc0 <HAL_GetTick>
 8006d04:	4602      	mov	r2, r0
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	1ad3      	subs	r3, r2, r3
 8006d0a:	68fa      	ldr	r2, [r7, #12]
 8006d0c:	429a      	cmp	r2, r3
 8006d0e:	d8f7      	bhi.n	8006d00 <HAL_Delay+0x28>
  {
  }
}
 8006d10:	bf00      	nop
 8006d12:	3710      	adds	r7, #16
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}
 8006d18:	20000008 	.word	0x20000008

08006d1c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b084      	sub	sp, #16
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006d24:	2300      	movs	r3, #0
 8006d26:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d101      	bne.n	8006d32 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006d2e:	2301      	movs	r3, #1
 8006d30:	e033      	b.n	8006d9a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d109      	bne.n	8006d4e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f7fd fe26 	bl	800498c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2200      	movs	r2, #0
 8006d44:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d52:	f003 0310 	and.w	r3, r3, #16
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d118      	bne.n	8006d8c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d5e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006d62:	f023 0302 	bic.w	r3, r3, #2
 8006d66:	f043 0202 	orr.w	r2, r3, #2
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f000 fa5a 	bl	8007228 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2200      	movs	r2, #0
 8006d78:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d7e:	f023 0303 	bic.w	r3, r3, #3
 8006d82:	f043 0201 	orr.w	r2, r3, #1
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	641a      	str	r2, [r3, #64]	; 0x40
 8006d8a:	e001      	b.n	8006d90 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2200      	movs	r2, #0
 8006d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3710      	adds	r7, #16
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}
	...

08006da4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b086      	sub	sp, #24
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	60f8      	str	r0, [r7, #12]
 8006dac:	60b9      	str	r1, [r7, #8]
 8006dae:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8006db0:	2300      	movs	r3, #0
 8006db2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006dba:	2b01      	cmp	r3, #1
 8006dbc:	d101      	bne.n	8006dc2 <HAL_ADC_Start_DMA+0x1e>
 8006dbe:	2302      	movs	r3, #2
 8006dc0:	e0cc      	b.n	8006f5c <HAL_ADC_Start_DMA+0x1b8>
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	f003 0301 	and.w	r3, r3, #1
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	d018      	beq.n	8006e0a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	689a      	ldr	r2, [r3, #8]
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f042 0201 	orr.w	r2, r2, #1
 8006de6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006de8:	4b5e      	ldr	r3, [pc, #376]	; (8006f64 <HAL_ADC_Start_DMA+0x1c0>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a5e      	ldr	r2, [pc, #376]	; (8006f68 <HAL_ADC_Start_DMA+0x1c4>)
 8006dee:	fba2 2303 	umull	r2, r3, r2, r3
 8006df2:	0c9a      	lsrs	r2, r3, #18
 8006df4:	4613      	mov	r3, r2
 8006df6:	005b      	lsls	r3, r3, #1
 8006df8:	4413      	add	r3, r2
 8006dfa:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006dfc:	e002      	b.n	8006e04 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	3b01      	subs	r3, #1
 8006e02:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d1f9      	bne.n	8006dfe <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	689b      	ldr	r3, [r3, #8]
 8006e10:	f003 0301 	and.w	r3, r3, #1
 8006e14:	2b01      	cmp	r3, #1
 8006e16:	f040 80a0 	bne.w	8006f5a <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e1e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006e22:	f023 0301 	bic.w	r3, r3, #1
 8006e26:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d007      	beq.n	8006e4c <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e40:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006e44:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006e54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e58:	d106      	bne.n	8006e68 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e5e:	f023 0206 	bic.w	r2, r3, #6
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	645a      	str	r2, [r3, #68]	; 0x44
 8006e66:	e002      	b.n	8006e6e <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2200      	movs	r2, #0
 8006e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006e76:	4b3d      	ldr	r3, [pc, #244]	; (8006f6c <HAL_ADC_Start_DMA+0x1c8>)
 8006e78:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e7e:	4a3c      	ldr	r2, [pc, #240]	; (8006f70 <HAL_ADC_Start_DMA+0x1cc>)
 8006e80:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e86:	4a3b      	ldr	r2, [pc, #236]	; (8006f74 <HAL_ADC_Start_DMA+0x1d0>)
 8006e88:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e8e:	4a3a      	ldr	r2, [pc, #232]	; (8006f78 <HAL_ADC_Start_DMA+0x1d4>)
 8006e90:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006e9a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	685a      	ldr	r2, [r3, #4]
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006eaa:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	689a      	ldr	r2, [r3, #8]
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006eba:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	334c      	adds	r3, #76	; 0x4c
 8006ec6:	4619      	mov	r1, r3
 8006ec8:	68ba      	ldr	r2, [r7, #8]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f000 fcea 	bl	80078a4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	f003 031f 	and.w	r3, r3, #31
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d12a      	bne.n	8006f32 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a26      	ldr	r2, [pc, #152]	; (8006f7c <HAL_ADC_Start_DMA+0x1d8>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d015      	beq.n	8006f12 <HAL_ADC_Start_DMA+0x16e>
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a25      	ldr	r2, [pc, #148]	; (8006f80 <HAL_ADC_Start_DMA+0x1dc>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d105      	bne.n	8006efc <HAL_ADC_Start_DMA+0x158>
 8006ef0:	4b1e      	ldr	r3, [pc, #120]	; (8006f6c <HAL_ADC_Start_DMA+0x1c8>)
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	f003 031f 	and.w	r3, r3, #31
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d00a      	beq.n	8006f12 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a20      	ldr	r2, [pc, #128]	; (8006f84 <HAL_ADC_Start_DMA+0x1e0>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d129      	bne.n	8006f5a <HAL_ADC_Start_DMA+0x1b6>
 8006f06:	4b19      	ldr	r3, [pc, #100]	; (8006f6c <HAL_ADC_Start_DMA+0x1c8>)
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	f003 031f 	and.w	r3, r3, #31
 8006f0e:	2b0f      	cmp	r3, #15
 8006f10:	d823      	bhi.n	8006f5a <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	689b      	ldr	r3, [r3, #8]
 8006f18:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d11c      	bne.n	8006f5a <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	689a      	ldr	r2, [r3, #8]
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006f2e:	609a      	str	r2, [r3, #8]
 8006f30:	e013      	b.n	8006f5a <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a11      	ldr	r2, [pc, #68]	; (8006f7c <HAL_ADC_Start_DMA+0x1d8>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d10e      	bne.n	8006f5a <HAL_ADC_Start_DMA+0x1b6>
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	689b      	ldr	r3, [r3, #8]
 8006f42:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d107      	bne.n	8006f5a <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	689a      	ldr	r2, [r3, #8]
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006f58:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8006f5a:	2300      	movs	r3, #0
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3718      	adds	r7, #24
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}
 8006f64:	20000000 	.word	0x20000000
 8006f68:	431bde83 	.word	0x431bde83
 8006f6c:	40012300 	.word	0x40012300
 8006f70:	08007421 	.word	0x08007421
 8006f74:	080074db 	.word	0x080074db
 8006f78:	080074f7 	.word	0x080074f7
 8006f7c:	40012000 	.word	0x40012000
 8006f80:	40012100 	.word	0x40012100
 8006f84:	40012200 	.word	0x40012200

08006f88 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b083      	sub	sp, #12
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8006f90:	bf00      	nop
 8006f92:	370c      	adds	r7, #12
 8006f94:	46bd      	mov	sp, r7
 8006f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9a:	4770      	bx	lr

08006f9c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b083      	sub	sp, #12
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8006fa4:	bf00      	nop
 8006fa6:	370c      	adds	r7, #12
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fae:	4770      	bx	lr

08006fb0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b083      	sub	sp, #12
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8006fb8:	bf00      	nop
 8006fba:	370c      	adds	r7, #12
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc2:	4770      	bx	lr

08006fc4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b085      	sub	sp, #20
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
 8006fcc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d101      	bne.n	8006fe0 <HAL_ADC_ConfigChannel+0x1c>
 8006fdc:	2302      	movs	r3, #2
 8006fde:	e113      	b.n	8007208 <HAL_ADC_ConfigChannel+0x244>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	2b09      	cmp	r3, #9
 8006fee:	d925      	bls.n	800703c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	68d9      	ldr	r1, [r3, #12]
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	461a      	mov	r2, r3
 8006ffe:	4613      	mov	r3, r2
 8007000:	005b      	lsls	r3, r3, #1
 8007002:	4413      	add	r3, r2
 8007004:	3b1e      	subs	r3, #30
 8007006:	2207      	movs	r2, #7
 8007008:	fa02 f303 	lsl.w	r3, r2, r3
 800700c:	43da      	mvns	r2, r3
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	400a      	ands	r2, r1
 8007014:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	68d9      	ldr	r1, [r3, #12]
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	689a      	ldr	r2, [r3, #8]
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	b29b      	uxth	r3, r3
 8007026:	4618      	mov	r0, r3
 8007028:	4603      	mov	r3, r0
 800702a:	005b      	lsls	r3, r3, #1
 800702c:	4403      	add	r3, r0
 800702e:	3b1e      	subs	r3, #30
 8007030:	409a      	lsls	r2, r3
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	430a      	orrs	r2, r1
 8007038:	60da      	str	r2, [r3, #12]
 800703a:	e022      	b.n	8007082 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	6919      	ldr	r1, [r3, #16]
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	b29b      	uxth	r3, r3
 8007048:	461a      	mov	r2, r3
 800704a:	4613      	mov	r3, r2
 800704c:	005b      	lsls	r3, r3, #1
 800704e:	4413      	add	r3, r2
 8007050:	2207      	movs	r2, #7
 8007052:	fa02 f303 	lsl.w	r3, r2, r3
 8007056:	43da      	mvns	r2, r3
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	400a      	ands	r2, r1
 800705e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	6919      	ldr	r1, [r3, #16]
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	689a      	ldr	r2, [r3, #8]
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	b29b      	uxth	r3, r3
 8007070:	4618      	mov	r0, r3
 8007072:	4603      	mov	r3, r0
 8007074:	005b      	lsls	r3, r3, #1
 8007076:	4403      	add	r3, r0
 8007078:	409a      	lsls	r2, r3
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	430a      	orrs	r2, r1
 8007080:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	2b06      	cmp	r3, #6
 8007088:	d824      	bhi.n	80070d4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	685a      	ldr	r2, [r3, #4]
 8007094:	4613      	mov	r3, r2
 8007096:	009b      	lsls	r3, r3, #2
 8007098:	4413      	add	r3, r2
 800709a:	3b05      	subs	r3, #5
 800709c:	221f      	movs	r2, #31
 800709e:	fa02 f303 	lsl.w	r3, r2, r3
 80070a2:	43da      	mvns	r2, r3
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	400a      	ands	r2, r1
 80070aa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	4618      	mov	r0, r3
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	685a      	ldr	r2, [r3, #4]
 80070be:	4613      	mov	r3, r2
 80070c0:	009b      	lsls	r3, r3, #2
 80070c2:	4413      	add	r3, r2
 80070c4:	3b05      	subs	r3, #5
 80070c6:	fa00 f203 	lsl.w	r2, r0, r3
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	430a      	orrs	r2, r1
 80070d0:	635a      	str	r2, [r3, #52]	; 0x34
 80070d2:	e04c      	b.n	800716e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	2b0c      	cmp	r3, #12
 80070da:	d824      	bhi.n	8007126 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	685a      	ldr	r2, [r3, #4]
 80070e6:	4613      	mov	r3, r2
 80070e8:	009b      	lsls	r3, r3, #2
 80070ea:	4413      	add	r3, r2
 80070ec:	3b23      	subs	r3, #35	; 0x23
 80070ee:	221f      	movs	r2, #31
 80070f0:	fa02 f303 	lsl.w	r3, r2, r3
 80070f4:	43da      	mvns	r2, r3
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	400a      	ands	r2, r1
 80070fc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	b29b      	uxth	r3, r3
 800710a:	4618      	mov	r0, r3
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	685a      	ldr	r2, [r3, #4]
 8007110:	4613      	mov	r3, r2
 8007112:	009b      	lsls	r3, r3, #2
 8007114:	4413      	add	r3, r2
 8007116:	3b23      	subs	r3, #35	; 0x23
 8007118:	fa00 f203 	lsl.w	r2, r0, r3
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	430a      	orrs	r2, r1
 8007122:	631a      	str	r2, [r3, #48]	; 0x30
 8007124:	e023      	b.n	800716e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	685a      	ldr	r2, [r3, #4]
 8007130:	4613      	mov	r3, r2
 8007132:	009b      	lsls	r3, r3, #2
 8007134:	4413      	add	r3, r2
 8007136:	3b41      	subs	r3, #65	; 0x41
 8007138:	221f      	movs	r2, #31
 800713a:	fa02 f303 	lsl.w	r3, r2, r3
 800713e:	43da      	mvns	r2, r3
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	400a      	ands	r2, r1
 8007146:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	b29b      	uxth	r3, r3
 8007154:	4618      	mov	r0, r3
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	685a      	ldr	r2, [r3, #4]
 800715a:	4613      	mov	r3, r2
 800715c:	009b      	lsls	r3, r3, #2
 800715e:	4413      	add	r3, r2
 8007160:	3b41      	subs	r3, #65	; 0x41
 8007162:	fa00 f203 	lsl.w	r2, r0, r3
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	430a      	orrs	r2, r1
 800716c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800716e:	4b29      	ldr	r3, [pc, #164]	; (8007214 <HAL_ADC_ConfigChannel+0x250>)
 8007170:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4a28      	ldr	r2, [pc, #160]	; (8007218 <HAL_ADC_ConfigChannel+0x254>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d10f      	bne.n	800719c <HAL_ADC_ConfigChannel+0x1d8>
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	2b12      	cmp	r3, #18
 8007182:	d10b      	bne.n	800719c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	685b      	ldr	r3, [r3, #4]
 8007188:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a1d      	ldr	r2, [pc, #116]	; (8007218 <HAL_ADC_ConfigChannel+0x254>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d12b      	bne.n	80071fe <HAL_ADC_ConfigChannel+0x23a>
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a1c      	ldr	r2, [pc, #112]	; (800721c <HAL_ADC_ConfigChannel+0x258>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d003      	beq.n	80071b8 <HAL_ADC_ConfigChannel+0x1f4>
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	2b11      	cmp	r3, #17
 80071b6:	d122      	bne.n	80071fe <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a11      	ldr	r2, [pc, #68]	; (800721c <HAL_ADC_ConfigChannel+0x258>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d111      	bne.n	80071fe <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80071da:	4b11      	ldr	r3, [pc, #68]	; (8007220 <HAL_ADC_ConfigChannel+0x25c>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a11      	ldr	r2, [pc, #68]	; (8007224 <HAL_ADC_ConfigChannel+0x260>)
 80071e0:	fba2 2303 	umull	r2, r3, r2, r3
 80071e4:	0c9a      	lsrs	r2, r3, #18
 80071e6:	4613      	mov	r3, r2
 80071e8:	009b      	lsls	r3, r3, #2
 80071ea:	4413      	add	r3, r2
 80071ec:	005b      	lsls	r3, r3, #1
 80071ee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80071f0:	e002      	b.n	80071f8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	3b01      	subs	r3, #1
 80071f6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d1f9      	bne.n	80071f2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2200      	movs	r2, #0
 8007202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8007206:	2300      	movs	r3, #0
}
 8007208:	4618      	mov	r0, r3
 800720a:	3714      	adds	r7, #20
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr
 8007214:	40012300 	.word	0x40012300
 8007218:	40012000 	.word	0x40012000
 800721c:	10000012 	.word	0x10000012
 8007220:	20000000 	.word	0x20000000
 8007224:	431bde83 	.word	0x431bde83

08007228 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007228:	b480      	push	{r7}
 800722a:	b085      	sub	sp, #20
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007230:	4b79      	ldr	r3, [pc, #484]	; (8007418 <ADC_Init+0x1f0>)
 8007232:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	685a      	ldr	r2, [r3, #4]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	431a      	orrs	r2, r3
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	685a      	ldr	r2, [r3, #4]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800725c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	6859      	ldr	r1, [r3, #4]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	691b      	ldr	r3, [r3, #16]
 8007268:	021a      	lsls	r2, r3, #8
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	430a      	orrs	r2, r1
 8007270:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	685a      	ldr	r2, [r3, #4]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007280:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	6859      	ldr	r1, [r3, #4]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	689a      	ldr	r2, [r3, #8]
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	430a      	orrs	r2, r1
 8007292:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	689a      	ldr	r2, [r3, #8]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80072a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	6899      	ldr	r1, [r3, #8]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	68da      	ldr	r2, [r3, #12]
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	430a      	orrs	r2, r1
 80072b4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072ba:	4a58      	ldr	r2, [pc, #352]	; (800741c <ADC_Init+0x1f4>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d022      	beq.n	8007306 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	689a      	ldr	r2, [r3, #8]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80072ce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	6899      	ldr	r1, [r3, #8]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	430a      	orrs	r2, r1
 80072e0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	689a      	ldr	r2, [r3, #8]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80072f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	6899      	ldr	r1, [r3, #8]
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	430a      	orrs	r2, r1
 8007302:	609a      	str	r2, [r3, #8]
 8007304:	e00f      	b.n	8007326 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	689a      	ldr	r2, [r3, #8]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007314:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	689a      	ldr	r2, [r3, #8]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007324:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	689a      	ldr	r2, [r3, #8]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f022 0202 	bic.w	r2, r2, #2
 8007334:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	6899      	ldr	r1, [r3, #8]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	7e1b      	ldrb	r3, [r3, #24]
 8007340:	005a      	lsls	r2, r3, #1
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	430a      	orrs	r2, r1
 8007348:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d01b      	beq.n	800738c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	685a      	ldr	r2, [r3, #4]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007362:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	685a      	ldr	r2, [r3, #4]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8007372:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	6859      	ldr	r1, [r3, #4]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800737e:	3b01      	subs	r3, #1
 8007380:	035a      	lsls	r2, r3, #13
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	430a      	orrs	r2, r1
 8007388:	605a      	str	r2, [r3, #4]
 800738a:	e007      	b.n	800739c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	685a      	ldr	r2, [r3, #4]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800739a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80073aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	69db      	ldr	r3, [r3, #28]
 80073b6:	3b01      	subs	r3, #1
 80073b8:	051a      	lsls	r2, r3, #20
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	430a      	orrs	r2, r1
 80073c0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	689a      	ldr	r2, [r3, #8]
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80073d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	6899      	ldr	r1, [r3, #8]
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80073de:	025a      	lsls	r2, r3, #9
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	430a      	orrs	r2, r1
 80073e6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	689a      	ldr	r2, [r3, #8]
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	6899      	ldr	r1, [r3, #8]
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	695b      	ldr	r3, [r3, #20]
 8007402:	029a      	lsls	r2, r3, #10
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	430a      	orrs	r2, r1
 800740a:	609a      	str	r2, [r3, #8]
}
 800740c:	bf00      	nop
 800740e:	3714      	adds	r7, #20
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr
 8007418:	40012300 	.word	0x40012300
 800741c:	0f000001 	.word	0x0f000001

08007420 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b084      	sub	sp, #16
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800742c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007432:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007436:	2b00      	cmp	r3, #0
 8007438:	d13c      	bne.n	80074b4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800743e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	689b      	ldr	r3, [r3, #8]
 800744c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007450:	2b00      	cmp	r3, #0
 8007452:	d12b      	bne.n	80074ac <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007458:	2b00      	cmp	r3, #0
 800745a:	d127      	bne.n	80074ac <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007462:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007466:	2b00      	cmp	r3, #0
 8007468:	d006      	beq.n	8007478 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	689b      	ldr	r3, [r3, #8]
 8007470:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007474:	2b00      	cmp	r3, #0
 8007476:	d119      	bne.n	80074ac <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	685a      	ldr	r2, [r3, #4]
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f022 0220 	bic.w	r2, r2, #32
 8007486:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800748c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007498:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800749c:	2b00      	cmp	r3, #0
 800749e:	d105      	bne.n	80074ac <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074a4:	f043 0201 	orr.w	r2, r3, #1
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80074ac:	68f8      	ldr	r0, [r7, #12]
 80074ae:	f7ff fd6b 	bl	8006f88 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80074b2:	e00e      	b.n	80074d2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074b8:	f003 0310 	and.w	r3, r3, #16
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d003      	beq.n	80074c8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80074c0:	68f8      	ldr	r0, [r7, #12]
 80074c2:	f7ff fd75 	bl	8006fb0 <HAL_ADC_ErrorCallback>
}
 80074c6:	e004      	b.n	80074d2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	4798      	blx	r3
}
 80074d2:	bf00      	nop
 80074d4:	3710      	adds	r7, #16
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}

080074da <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80074da:	b580      	push	{r7, lr}
 80074dc:	b084      	sub	sp, #16
 80074de:	af00      	add	r7, sp, #0
 80074e0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074e6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80074e8:	68f8      	ldr	r0, [r7, #12]
 80074ea:	f7ff fd57 	bl	8006f9c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80074ee:	bf00      	nop
 80074f0:	3710      	adds	r7, #16
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}

080074f6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80074f6:	b580      	push	{r7, lr}
 80074f8:	b084      	sub	sp, #16
 80074fa:	af00      	add	r7, sp, #0
 80074fc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007502:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	2240      	movs	r2, #64	; 0x40
 8007508:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800750e:	f043 0204 	orr.w	r2, r3, #4
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007516:	68f8      	ldr	r0, [r7, #12]
 8007518:	f7ff fd4a 	bl	8006fb0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800751c:	bf00      	nop
 800751e:	3710      	adds	r7, #16
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}

08007524 <__NVIC_SetPriorityGrouping>:
{
 8007524:	b480      	push	{r7}
 8007526:	b085      	sub	sp, #20
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f003 0307 	and.w	r3, r3, #7
 8007532:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007534:	4b0c      	ldr	r3, [pc, #48]	; (8007568 <__NVIC_SetPriorityGrouping+0x44>)
 8007536:	68db      	ldr	r3, [r3, #12]
 8007538:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800753a:	68ba      	ldr	r2, [r7, #8]
 800753c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007540:	4013      	ands	r3, r2
 8007542:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800754c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007550:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007554:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007556:	4a04      	ldr	r2, [pc, #16]	; (8007568 <__NVIC_SetPriorityGrouping+0x44>)
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	60d3      	str	r3, [r2, #12]
}
 800755c:	bf00      	nop
 800755e:	3714      	adds	r7, #20
 8007560:	46bd      	mov	sp, r7
 8007562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007566:	4770      	bx	lr
 8007568:	e000ed00 	.word	0xe000ed00

0800756c <__NVIC_GetPriorityGrouping>:
{
 800756c:	b480      	push	{r7}
 800756e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007570:	4b04      	ldr	r3, [pc, #16]	; (8007584 <__NVIC_GetPriorityGrouping+0x18>)
 8007572:	68db      	ldr	r3, [r3, #12]
 8007574:	0a1b      	lsrs	r3, r3, #8
 8007576:	f003 0307 	and.w	r3, r3, #7
}
 800757a:	4618      	mov	r0, r3
 800757c:	46bd      	mov	sp, r7
 800757e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007582:	4770      	bx	lr
 8007584:	e000ed00 	.word	0xe000ed00

08007588 <__NVIC_EnableIRQ>:
{
 8007588:	b480      	push	{r7}
 800758a:	b083      	sub	sp, #12
 800758c:	af00      	add	r7, sp, #0
 800758e:	4603      	mov	r3, r0
 8007590:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007596:	2b00      	cmp	r3, #0
 8007598:	db0b      	blt.n	80075b2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800759a:	79fb      	ldrb	r3, [r7, #7]
 800759c:	f003 021f 	and.w	r2, r3, #31
 80075a0:	4907      	ldr	r1, [pc, #28]	; (80075c0 <__NVIC_EnableIRQ+0x38>)
 80075a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80075a6:	095b      	lsrs	r3, r3, #5
 80075a8:	2001      	movs	r0, #1
 80075aa:	fa00 f202 	lsl.w	r2, r0, r2
 80075ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80075b2:	bf00      	nop
 80075b4:	370c      	adds	r7, #12
 80075b6:	46bd      	mov	sp, r7
 80075b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075bc:	4770      	bx	lr
 80075be:	bf00      	nop
 80075c0:	e000e100 	.word	0xe000e100

080075c4 <__NVIC_SetPriority>:
{
 80075c4:	b480      	push	{r7}
 80075c6:	b083      	sub	sp, #12
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	4603      	mov	r3, r0
 80075cc:	6039      	str	r1, [r7, #0]
 80075ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80075d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	db0a      	blt.n	80075ee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	b2da      	uxtb	r2, r3
 80075dc:	490c      	ldr	r1, [pc, #48]	; (8007610 <__NVIC_SetPriority+0x4c>)
 80075de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80075e2:	0112      	lsls	r2, r2, #4
 80075e4:	b2d2      	uxtb	r2, r2
 80075e6:	440b      	add	r3, r1
 80075e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80075ec:	e00a      	b.n	8007604 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	b2da      	uxtb	r2, r3
 80075f2:	4908      	ldr	r1, [pc, #32]	; (8007614 <__NVIC_SetPriority+0x50>)
 80075f4:	79fb      	ldrb	r3, [r7, #7]
 80075f6:	f003 030f 	and.w	r3, r3, #15
 80075fa:	3b04      	subs	r3, #4
 80075fc:	0112      	lsls	r2, r2, #4
 80075fe:	b2d2      	uxtb	r2, r2
 8007600:	440b      	add	r3, r1
 8007602:	761a      	strb	r2, [r3, #24]
}
 8007604:	bf00      	nop
 8007606:	370c      	adds	r7, #12
 8007608:	46bd      	mov	sp, r7
 800760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760e:	4770      	bx	lr
 8007610:	e000e100 	.word	0xe000e100
 8007614:	e000ed00 	.word	0xe000ed00

08007618 <NVIC_EncodePriority>:
{
 8007618:	b480      	push	{r7}
 800761a:	b089      	sub	sp, #36	; 0x24
 800761c:	af00      	add	r7, sp, #0
 800761e:	60f8      	str	r0, [r7, #12]
 8007620:	60b9      	str	r1, [r7, #8]
 8007622:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	f003 0307 	and.w	r3, r3, #7
 800762a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800762c:	69fb      	ldr	r3, [r7, #28]
 800762e:	f1c3 0307 	rsb	r3, r3, #7
 8007632:	2b04      	cmp	r3, #4
 8007634:	bf28      	it	cs
 8007636:	2304      	movcs	r3, #4
 8007638:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800763a:	69fb      	ldr	r3, [r7, #28]
 800763c:	3304      	adds	r3, #4
 800763e:	2b06      	cmp	r3, #6
 8007640:	d902      	bls.n	8007648 <NVIC_EncodePriority+0x30>
 8007642:	69fb      	ldr	r3, [r7, #28]
 8007644:	3b03      	subs	r3, #3
 8007646:	e000      	b.n	800764a <NVIC_EncodePriority+0x32>
 8007648:	2300      	movs	r3, #0
 800764a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800764c:	f04f 32ff 	mov.w	r2, #4294967295
 8007650:	69bb      	ldr	r3, [r7, #24]
 8007652:	fa02 f303 	lsl.w	r3, r2, r3
 8007656:	43da      	mvns	r2, r3
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	401a      	ands	r2, r3
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007660:	f04f 31ff 	mov.w	r1, #4294967295
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	fa01 f303 	lsl.w	r3, r1, r3
 800766a:	43d9      	mvns	r1, r3
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007670:	4313      	orrs	r3, r2
}
 8007672:	4618      	mov	r0, r3
 8007674:	3724      	adds	r7, #36	; 0x24
 8007676:	46bd      	mov	sp, r7
 8007678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767c:	4770      	bx	lr
	...

08007680 <SysTick_Config>:
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b082      	sub	sp, #8
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	3b01      	subs	r3, #1
 800768c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007690:	d301      	bcc.n	8007696 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8007692:	2301      	movs	r3, #1
 8007694:	e00f      	b.n	80076b6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007696:	4a0a      	ldr	r2, [pc, #40]	; (80076c0 <SysTick_Config+0x40>)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	3b01      	subs	r3, #1
 800769c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800769e:	210f      	movs	r1, #15
 80076a0:	f04f 30ff 	mov.w	r0, #4294967295
 80076a4:	f7ff ff8e 	bl	80075c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80076a8:	4b05      	ldr	r3, [pc, #20]	; (80076c0 <SysTick_Config+0x40>)
 80076aa:	2200      	movs	r2, #0
 80076ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80076ae:	4b04      	ldr	r3, [pc, #16]	; (80076c0 <SysTick_Config+0x40>)
 80076b0:	2207      	movs	r2, #7
 80076b2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80076b4:	2300      	movs	r3, #0
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3708      	adds	r7, #8
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}
 80076be:	bf00      	nop
 80076c0:	e000e010 	.word	0xe000e010

080076c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b082      	sub	sp, #8
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f7ff ff29 	bl	8007524 <__NVIC_SetPriorityGrouping>
}
 80076d2:	bf00      	nop
 80076d4:	3708      	adds	r7, #8
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}

080076da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80076da:	b580      	push	{r7, lr}
 80076dc:	b086      	sub	sp, #24
 80076de:	af00      	add	r7, sp, #0
 80076e0:	4603      	mov	r3, r0
 80076e2:	60b9      	str	r1, [r7, #8]
 80076e4:	607a      	str	r2, [r7, #4]
 80076e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80076e8:	2300      	movs	r3, #0
 80076ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80076ec:	f7ff ff3e 	bl	800756c <__NVIC_GetPriorityGrouping>
 80076f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80076f2:	687a      	ldr	r2, [r7, #4]
 80076f4:	68b9      	ldr	r1, [r7, #8]
 80076f6:	6978      	ldr	r0, [r7, #20]
 80076f8:	f7ff ff8e 	bl	8007618 <NVIC_EncodePriority>
 80076fc:	4602      	mov	r2, r0
 80076fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007702:	4611      	mov	r1, r2
 8007704:	4618      	mov	r0, r3
 8007706:	f7ff ff5d 	bl	80075c4 <__NVIC_SetPriority>
}
 800770a:	bf00      	nop
 800770c:	3718      	adds	r7, #24
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}

08007712 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007712:	b580      	push	{r7, lr}
 8007714:	b082      	sub	sp, #8
 8007716:	af00      	add	r7, sp, #0
 8007718:	4603      	mov	r3, r0
 800771a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800771c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007720:	4618      	mov	r0, r3
 8007722:	f7ff ff31 	bl	8007588 <__NVIC_EnableIRQ>
}
 8007726:	bf00      	nop
 8007728:	3708      	adds	r7, #8
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}

0800772e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800772e:	b580      	push	{r7, lr}
 8007730:	b082      	sub	sp, #8
 8007732:	af00      	add	r7, sp, #0
 8007734:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f7ff ffa2 	bl	8007680 <SysTick_Config>
 800773c:	4603      	mov	r3, r0
}
 800773e:	4618      	mov	r0, r3
 8007740:	3708      	adds	r7, #8
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}
	...

08007748 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b086      	sub	sp, #24
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007750:	2300      	movs	r3, #0
 8007752:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007754:	f7ff fab4 	bl	8006cc0 <HAL_GetTick>
 8007758:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d101      	bne.n	8007764 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007760:	2301      	movs	r3, #1
 8007762:	e099      	b.n	8007898 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2200      	movs	r2, #0
 8007768:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2202      	movs	r2, #2
 8007770:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	681a      	ldr	r2, [r3, #0]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f022 0201 	bic.w	r2, r2, #1
 8007782:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007784:	e00f      	b.n	80077a6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007786:	f7ff fa9b 	bl	8006cc0 <HAL_GetTick>
 800778a:	4602      	mov	r2, r0
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	1ad3      	subs	r3, r2, r3
 8007790:	2b05      	cmp	r3, #5
 8007792:	d908      	bls.n	80077a6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2220      	movs	r2, #32
 8007798:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2203      	movs	r2, #3
 800779e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80077a2:	2303      	movs	r3, #3
 80077a4:	e078      	b.n	8007898 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f003 0301 	and.w	r3, r3, #1
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d1e8      	bne.n	8007786 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80077bc:	697a      	ldr	r2, [r7, #20]
 80077be:	4b38      	ldr	r3, [pc, #224]	; (80078a0 <HAL_DMA_Init+0x158>)
 80077c0:	4013      	ands	r3, r2
 80077c2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	685a      	ldr	r2, [r3, #4]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	689b      	ldr	r3, [r3, #8]
 80077cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80077d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	691b      	ldr	r3, [r3, #16]
 80077d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80077de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	699b      	ldr	r3, [r3, #24]
 80077e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80077ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6a1b      	ldr	r3, [r3, #32]
 80077f0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80077f2:	697a      	ldr	r2, [r7, #20]
 80077f4:	4313      	orrs	r3, r2
 80077f6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077fc:	2b04      	cmp	r3, #4
 80077fe:	d107      	bne.n	8007810 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007808:	4313      	orrs	r3, r2
 800780a:	697a      	ldr	r2, [r7, #20]
 800780c:	4313      	orrs	r3, r2
 800780e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	697a      	ldr	r2, [r7, #20]
 8007816:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	695b      	ldr	r3, [r3, #20]
 800781e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	f023 0307 	bic.w	r3, r3, #7
 8007826:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800782c:	697a      	ldr	r2, [r7, #20]
 800782e:	4313      	orrs	r3, r2
 8007830:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007836:	2b04      	cmp	r3, #4
 8007838:	d117      	bne.n	800786a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800783e:	697a      	ldr	r2, [r7, #20]
 8007840:	4313      	orrs	r3, r2
 8007842:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007848:	2b00      	cmp	r3, #0
 800784a:	d00e      	beq.n	800786a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f000 fa9d 	bl	8007d8c <DMA_CheckFifoParam>
 8007852:	4603      	mov	r3, r0
 8007854:	2b00      	cmp	r3, #0
 8007856:	d008      	beq.n	800786a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2240      	movs	r2, #64	; 0x40
 800785c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2201      	movs	r2, #1
 8007862:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007866:	2301      	movs	r3, #1
 8007868:	e016      	b.n	8007898 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	697a      	ldr	r2, [r7, #20]
 8007870:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f000 fa54 	bl	8007d20 <DMA_CalcBaseAndBitshift>
 8007878:	4603      	mov	r3, r0
 800787a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007880:	223f      	movs	r2, #63	; 0x3f
 8007882:	409a      	lsls	r2, r3
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2200      	movs	r2, #0
 800788c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2201      	movs	r2, #1
 8007892:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007896:	2300      	movs	r3, #0
}
 8007898:	4618      	mov	r0, r3
 800789a:	3718      	adds	r7, #24
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}
 80078a0:	f010803f 	.word	0xf010803f

080078a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b086      	sub	sp, #24
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	60f8      	str	r0, [r7, #12]
 80078ac:	60b9      	str	r1, [r7, #8]
 80078ae:	607a      	str	r2, [r7, #4]
 80078b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80078b2:	2300      	movs	r3, #0
 80078b4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078ba:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80078c2:	2b01      	cmp	r3, #1
 80078c4:	d101      	bne.n	80078ca <HAL_DMA_Start_IT+0x26>
 80078c6:	2302      	movs	r3, #2
 80078c8:	e040      	b.n	800794c <HAL_DMA_Start_IT+0xa8>
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	2201      	movs	r2, #1
 80078ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80078d8:	b2db      	uxtb	r3, r3
 80078da:	2b01      	cmp	r3, #1
 80078dc:	d12f      	bne.n	800793e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	2202      	movs	r2, #2
 80078e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2200      	movs	r2, #0
 80078ea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	687a      	ldr	r2, [r7, #4]
 80078f0:	68b9      	ldr	r1, [r7, #8]
 80078f2:	68f8      	ldr	r0, [r7, #12]
 80078f4:	f000 f9e6 	bl	8007cc4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078fc:	223f      	movs	r2, #63	; 0x3f
 80078fe:	409a      	lsls	r2, r3
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	681a      	ldr	r2, [r3, #0]
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f042 0216 	orr.w	r2, r2, #22
 8007912:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007918:	2b00      	cmp	r3, #0
 800791a:	d007      	beq.n	800792c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	681a      	ldr	r2, [r3, #0]
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f042 0208 	orr.w	r2, r2, #8
 800792a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	681a      	ldr	r2, [r3, #0]
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f042 0201 	orr.w	r2, r2, #1
 800793a:	601a      	str	r2, [r3, #0]
 800793c:	e005      	b.n	800794a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	2200      	movs	r2, #0
 8007942:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007946:	2302      	movs	r3, #2
 8007948:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800794a:	7dfb      	ldrb	r3, [r7, #23]
}
 800794c:	4618      	mov	r0, r3
 800794e:	3718      	adds	r7, #24
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}

08007954 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007954:	b480      	push	{r7}
 8007956:	b083      	sub	sp, #12
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007962:	b2db      	uxtb	r3, r3
 8007964:	2b02      	cmp	r3, #2
 8007966:	d004      	beq.n	8007972 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2280      	movs	r2, #128	; 0x80
 800796c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800796e:	2301      	movs	r3, #1
 8007970:	e00c      	b.n	800798c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2205      	movs	r2, #5
 8007976:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	681a      	ldr	r2, [r3, #0]
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f022 0201 	bic.w	r2, r2, #1
 8007988:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800798a:	2300      	movs	r3, #0
}
 800798c:	4618      	mov	r0, r3
 800798e:	370c      	adds	r7, #12
 8007990:	46bd      	mov	sp, r7
 8007992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007996:	4770      	bx	lr

08007998 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b086      	sub	sp, #24
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80079a0:	2300      	movs	r3, #0
 80079a2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80079a4:	4b92      	ldr	r3, [pc, #584]	; (8007bf0 <HAL_DMA_IRQHandler+0x258>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a92      	ldr	r2, [pc, #584]	; (8007bf4 <HAL_DMA_IRQHandler+0x25c>)
 80079aa:	fba2 2303 	umull	r2, r3, r2, r3
 80079ae:	0a9b      	lsrs	r3, r3, #10
 80079b0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079b6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079c2:	2208      	movs	r2, #8
 80079c4:	409a      	lsls	r2, r3
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	4013      	ands	r3, r2
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d01a      	beq.n	8007a04 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f003 0304 	and.w	r3, r3, #4
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d013      	beq.n	8007a04 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	681a      	ldr	r2, [r3, #0]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f022 0204 	bic.w	r2, r2, #4
 80079ea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079f0:	2208      	movs	r2, #8
 80079f2:	409a      	lsls	r2, r3
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079fc:	f043 0201 	orr.w	r2, r3, #1
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a08:	2201      	movs	r2, #1
 8007a0a:	409a      	lsls	r2, r3
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	4013      	ands	r3, r2
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d012      	beq.n	8007a3a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	695b      	ldr	r3, [r3, #20]
 8007a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d00b      	beq.n	8007a3a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a26:	2201      	movs	r2, #1
 8007a28:	409a      	lsls	r2, r3
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a32:	f043 0202 	orr.w	r2, r3, #2
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a3e:	2204      	movs	r2, #4
 8007a40:	409a      	lsls	r2, r3
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	4013      	ands	r3, r2
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d012      	beq.n	8007a70 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f003 0302 	and.w	r3, r3, #2
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d00b      	beq.n	8007a70 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a5c:	2204      	movs	r2, #4
 8007a5e:	409a      	lsls	r2, r3
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a68:	f043 0204 	orr.w	r2, r3, #4
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a74:	2210      	movs	r2, #16
 8007a76:	409a      	lsls	r2, r3
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	4013      	ands	r3, r2
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d043      	beq.n	8007b08 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f003 0308 	and.w	r3, r3, #8
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d03c      	beq.n	8007b08 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a92:	2210      	movs	r2, #16
 8007a94:	409a      	lsls	r2, r3
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d018      	beq.n	8007ada <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d108      	bne.n	8007ac8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d024      	beq.n	8007b08 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	4798      	blx	r3
 8007ac6:	e01f      	b.n	8007b08 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d01b      	beq.n	8007b08 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	4798      	blx	r3
 8007ad8:	e016      	b.n	8007b08 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d107      	bne.n	8007af8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	681a      	ldr	r2, [r3, #0]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f022 0208 	bic.w	r2, r2, #8
 8007af6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d003      	beq.n	8007b08 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b0c:	2220      	movs	r2, #32
 8007b0e:	409a      	lsls	r2, r3
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	4013      	ands	r3, r2
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	f000 808e 	beq.w	8007c36 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f003 0310 	and.w	r3, r3, #16
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	f000 8086 	beq.w	8007c36 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b2e:	2220      	movs	r2, #32
 8007b30:	409a      	lsls	r2, r3
 8007b32:	693b      	ldr	r3, [r7, #16]
 8007b34:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007b3c:	b2db      	uxtb	r3, r3
 8007b3e:	2b05      	cmp	r3, #5
 8007b40:	d136      	bne.n	8007bb0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	681a      	ldr	r2, [r3, #0]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f022 0216 	bic.w	r2, r2, #22
 8007b50:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	695a      	ldr	r2, [r3, #20]
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007b60:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d103      	bne.n	8007b72 <HAL_DMA_IRQHandler+0x1da>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d007      	beq.n	8007b82 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	681a      	ldr	r2, [r3, #0]
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f022 0208 	bic.w	r2, r2, #8
 8007b80:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b86:	223f      	movs	r2, #63	; 0x3f
 8007b88:	409a      	lsls	r2, r3
 8007b8a:	693b      	ldr	r3, [r7, #16]
 8007b8c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2200      	movs	r2, #0
 8007b92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2201      	movs	r2, #1
 8007b9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d07d      	beq.n	8007ca2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	4798      	blx	r3
        }
        return;
 8007bae:	e078      	b.n	8007ca2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d01c      	beq.n	8007bf8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d108      	bne.n	8007bde <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d030      	beq.n	8007c36 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	4798      	blx	r3
 8007bdc:	e02b      	b.n	8007c36 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d027      	beq.n	8007c36 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	4798      	blx	r3
 8007bee:	e022      	b.n	8007c36 <HAL_DMA_IRQHandler+0x29e>
 8007bf0:	20000000 	.word	0x20000000
 8007bf4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d10f      	bne.n	8007c26 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	681a      	ldr	r2, [r3, #0]
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f022 0210 	bic.w	r2, r2, #16
 8007c14:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2201      	movs	r2, #1
 8007c22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d003      	beq.n	8007c36 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d032      	beq.n	8007ca4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c42:	f003 0301 	and.w	r3, r3, #1
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d022      	beq.n	8007c90 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2205      	movs	r2, #5
 8007c4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	681a      	ldr	r2, [r3, #0]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f022 0201 	bic.w	r2, r2, #1
 8007c60:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	3301      	adds	r3, #1
 8007c66:	60bb      	str	r3, [r7, #8]
 8007c68:	697a      	ldr	r2, [r7, #20]
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	d307      	bcc.n	8007c7e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f003 0301 	and.w	r3, r3, #1
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d1f2      	bne.n	8007c62 <HAL_DMA_IRQHandler+0x2ca>
 8007c7c:	e000      	b.n	8007c80 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8007c7e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2200      	movs	r2, #0
 8007c84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d005      	beq.n	8007ca4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	4798      	blx	r3
 8007ca0:	e000      	b.n	8007ca4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8007ca2:	bf00      	nop
    }
  }
}
 8007ca4:	3718      	adds	r7, #24
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}
 8007caa:	bf00      	nop

08007cac <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8007cac:	b480      	push	{r7}
 8007cae:	b083      	sub	sp, #12
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	370c      	adds	r7, #12
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr

08007cc4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b085      	sub	sp, #20
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	60f8      	str	r0, [r7, #12]
 8007ccc:	60b9      	str	r1, [r7, #8]
 8007cce:	607a      	str	r2, [r7, #4]
 8007cd0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	681a      	ldr	r2, [r3, #0]
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007ce0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	683a      	ldr	r2, [r7, #0]
 8007ce8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	689b      	ldr	r3, [r3, #8]
 8007cee:	2b40      	cmp	r3, #64	; 0x40
 8007cf0:	d108      	bne.n	8007d04 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	687a      	ldr	r2, [r7, #4]
 8007cf8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	68ba      	ldr	r2, [r7, #8]
 8007d00:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007d02:	e007      	b.n	8007d14 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	68ba      	ldr	r2, [r7, #8]
 8007d0a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	687a      	ldr	r2, [r7, #4]
 8007d12:	60da      	str	r2, [r3, #12]
}
 8007d14:	bf00      	nop
 8007d16:	3714      	adds	r7, #20
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1e:	4770      	bx	lr

08007d20 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007d20:	b480      	push	{r7}
 8007d22:	b085      	sub	sp, #20
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	b2db      	uxtb	r3, r3
 8007d2e:	3b10      	subs	r3, #16
 8007d30:	4a14      	ldr	r2, [pc, #80]	; (8007d84 <DMA_CalcBaseAndBitshift+0x64>)
 8007d32:	fba2 2303 	umull	r2, r3, r2, r3
 8007d36:	091b      	lsrs	r3, r3, #4
 8007d38:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007d3a:	4a13      	ldr	r2, [pc, #76]	; (8007d88 <DMA_CalcBaseAndBitshift+0x68>)
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	4413      	add	r3, r2
 8007d40:	781b      	ldrb	r3, [r3, #0]
 8007d42:	461a      	mov	r2, r3
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	2b03      	cmp	r3, #3
 8007d4c:	d909      	bls.n	8007d62 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007d56:	f023 0303 	bic.w	r3, r3, #3
 8007d5a:	1d1a      	adds	r2, r3, #4
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	659a      	str	r2, [r3, #88]	; 0x58
 8007d60:	e007      	b.n	8007d72 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007d6a:	f023 0303 	bic.w	r3, r3, #3
 8007d6e:	687a      	ldr	r2, [r7, #4]
 8007d70:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3714      	adds	r7, #20
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d80:	4770      	bx	lr
 8007d82:	bf00      	nop
 8007d84:	aaaaaaab 	.word	0xaaaaaaab
 8007d88:	08017ab0 	.word	0x08017ab0

08007d8c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b085      	sub	sp, #20
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d94:	2300      	movs	r3, #0
 8007d96:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d9c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	699b      	ldr	r3, [r3, #24]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d11f      	bne.n	8007de6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	2b03      	cmp	r3, #3
 8007daa:	d855      	bhi.n	8007e58 <DMA_CheckFifoParam+0xcc>
 8007dac:	a201      	add	r2, pc, #4	; (adr r2, 8007db4 <DMA_CheckFifoParam+0x28>)
 8007dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007db2:	bf00      	nop
 8007db4:	08007dc5 	.word	0x08007dc5
 8007db8:	08007dd7 	.word	0x08007dd7
 8007dbc:	08007dc5 	.word	0x08007dc5
 8007dc0:	08007e59 	.word	0x08007e59
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dc8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d045      	beq.n	8007e5c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007dd4:	e042      	b.n	8007e5c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dda:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007dde:	d13f      	bne.n	8007e60 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8007de0:	2301      	movs	r3, #1
 8007de2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007de4:	e03c      	b.n	8007e60 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	699b      	ldr	r3, [r3, #24]
 8007dea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007dee:	d121      	bne.n	8007e34 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	2b03      	cmp	r3, #3
 8007df4:	d836      	bhi.n	8007e64 <DMA_CheckFifoParam+0xd8>
 8007df6:	a201      	add	r2, pc, #4	; (adr r2, 8007dfc <DMA_CheckFifoParam+0x70>)
 8007df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dfc:	08007e0d 	.word	0x08007e0d
 8007e00:	08007e13 	.word	0x08007e13
 8007e04:	08007e0d 	.word	0x08007e0d
 8007e08:	08007e25 	.word	0x08007e25
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	73fb      	strb	r3, [r7, #15]
      break;
 8007e10:	e02f      	b.n	8007e72 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d024      	beq.n	8007e68 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8007e1e:	2301      	movs	r3, #1
 8007e20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007e22:	e021      	b.n	8007e68 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e28:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007e2c:	d11e      	bne.n	8007e6c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8007e2e:	2301      	movs	r3, #1
 8007e30:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007e32:	e01b      	b.n	8007e6c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	2b02      	cmp	r3, #2
 8007e38:	d902      	bls.n	8007e40 <DMA_CheckFifoParam+0xb4>
 8007e3a:	2b03      	cmp	r3, #3
 8007e3c:	d003      	beq.n	8007e46 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007e3e:	e018      	b.n	8007e72 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8007e40:	2301      	movs	r3, #1
 8007e42:	73fb      	strb	r3, [r7, #15]
      break;
 8007e44:	e015      	b.n	8007e72 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d00e      	beq.n	8007e70 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8007e52:	2301      	movs	r3, #1
 8007e54:	73fb      	strb	r3, [r7, #15]
      break;
 8007e56:	e00b      	b.n	8007e70 <DMA_CheckFifoParam+0xe4>
      break;
 8007e58:	bf00      	nop
 8007e5a:	e00a      	b.n	8007e72 <DMA_CheckFifoParam+0xe6>
      break;
 8007e5c:	bf00      	nop
 8007e5e:	e008      	b.n	8007e72 <DMA_CheckFifoParam+0xe6>
      break;
 8007e60:	bf00      	nop
 8007e62:	e006      	b.n	8007e72 <DMA_CheckFifoParam+0xe6>
      break;
 8007e64:	bf00      	nop
 8007e66:	e004      	b.n	8007e72 <DMA_CheckFifoParam+0xe6>
      break;
 8007e68:	bf00      	nop
 8007e6a:	e002      	b.n	8007e72 <DMA_CheckFifoParam+0xe6>
      break;   
 8007e6c:	bf00      	nop
 8007e6e:	e000      	b.n	8007e72 <DMA_CheckFifoParam+0xe6>
      break;
 8007e70:	bf00      	nop
    }
  } 
  
  return status; 
 8007e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	3714      	adds	r7, #20
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7e:	4770      	bx	lr

08007e80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007e80:	b480      	push	{r7}
 8007e82:	b089      	sub	sp, #36	; 0x24
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
 8007e88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007e92:	2300      	movs	r3, #0
 8007e94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007e96:	2300      	movs	r3, #0
 8007e98:	61fb      	str	r3, [r7, #28]
 8007e9a:	e177      	b.n	800818c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007e9c:	2201      	movs	r2, #1
 8007e9e:	69fb      	ldr	r3, [r7, #28]
 8007ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ea4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	697a      	ldr	r2, [r7, #20]
 8007eac:	4013      	ands	r3, r2
 8007eae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007eb0:	693a      	ldr	r2, [r7, #16]
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	429a      	cmp	r2, r3
 8007eb6:	f040 8166 	bne.w	8008186 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	2b01      	cmp	r3, #1
 8007ec0:	d00b      	beq.n	8007eda <HAL_GPIO_Init+0x5a>
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	685b      	ldr	r3, [r3, #4]
 8007ec6:	2b02      	cmp	r3, #2
 8007ec8:	d007      	beq.n	8007eda <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007ece:	2b11      	cmp	r3, #17
 8007ed0:	d003      	beq.n	8007eda <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	685b      	ldr	r3, [r3, #4]
 8007ed6:	2b12      	cmp	r3, #18
 8007ed8:	d130      	bne.n	8007f3c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	689b      	ldr	r3, [r3, #8]
 8007ede:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007ee0:	69fb      	ldr	r3, [r7, #28]
 8007ee2:	005b      	lsls	r3, r3, #1
 8007ee4:	2203      	movs	r2, #3
 8007ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8007eea:	43db      	mvns	r3, r3
 8007eec:	69ba      	ldr	r2, [r7, #24]
 8007eee:	4013      	ands	r3, r2
 8007ef0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	68da      	ldr	r2, [r3, #12]
 8007ef6:	69fb      	ldr	r3, [r7, #28]
 8007ef8:	005b      	lsls	r3, r3, #1
 8007efa:	fa02 f303 	lsl.w	r3, r2, r3
 8007efe:	69ba      	ldr	r2, [r7, #24]
 8007f00:	4313      	orrs	r3, r2
 8007f02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	69ba      	ldr	r2, [r7, #24]
 8007f08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	685b      	ldr	r3, [r3, #4]
 8007f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007f10:	2201      	movs	r2, #1
 8007f12:	69fb      	ldr	r3, [r7, #28]
 8007f14:	fa02 f303 	lsl.w	r3, r2, r3
 8007f18:	43db      	mvns	r3, r3
 8007f1a:	69ba      	ldr	r2, [r7, #24]
 8007f1c:	4013      	ands	r3, r2
 8007f1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	685b      	ldr	r3, [r3, #4]
 8007f24:	091b      	lsrs	r3, r3, #4
 8007f26:	f003 0201 	and.w	r2, r3, #1
 8007f2a:	69fb      	ldr	r3, [r7, #28]
 8007f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8007f30:	69ba      	ldr	r2, [r7, #24]
 8007f32:	4313      	orrs	r3, r2
 8007f34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	69ba      	ldr	r2, [r7, #24]
 8007f3a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	68db      	ldr	r3, [r3, #12]
 8007f40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007f42:	69fb      	ldr	r3, [r7, #28]
 8007f44:	005b      	lsls	r3, r3, #1
 8007f46:	2203      	movs	r2, #3
 8007f48:	fa02 f303 	lsl.w	r3, r2, r3
 8007f4c:	43db      	mvns	r3, r3
 8007f4e:	69ba      	ldr	r2, [r7, #24]
 8007f50:	4013      	ands	r3, r2
 8007f52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	689a      	ldr	r2, [r3, #8]
 8007f58:	69fb      	ldr	r3, [r7, #28]
 8007f5a:	005b      	lsls	r3, r3, #1
 8007f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8007f60:	69ba      	ldr	r2, [r7, #24]
 8007f62:	4313      	orrs	r3, r2
 8007f64:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	69ba      	ldr	r2, [r7, #24]
 8007f6a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	685b      	ldr	r3, [r3, #4]
 8007f70:	2b02      	cmp	r3, #2
 8007f72:	d003      	beq.n	8007f7c <HAL_GPIO_Init+0xfc>
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	685b      	ldr	r3, [r3, #4]
 8007f78:	2b12      	cmp	r3, #18
 8007f7a:	d123      	bne.n	8007fc4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007f7c:	69fb      	ldr	r3, [r7, #28]
 8007f7e:	08da      	lsrs	r2, r3, #3
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	3208      	adds	r2, #8
 8007f84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007f8a:	69fb      	ldr	r3, [r7, #28]
 8007f8c:	f003 0307 	and.w	r3, r3, #7
 8007f90:	009b      	lsls	r3, r3, #2
 8007f92:	220f      	movs	r2, #15
 8007f94:	fa02 f303 	lsl.w	r3, r2, r3
 8007f98:	43db      	mvns	r3, r3
 8007f9a:	69ba      	ldr	r2, [r7, #24]
 8007f9c:	4013      	ands	r3, r2
 8007f9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	691a      	ldr	r2, [r3, #16]
 8007fa4:	69fb      	ldr	r3, [r7, #28]
 8007fa6:	f003 0307 	and.w	r3, r3, #7
 8007faa:	009b      	lsls	r3, r3, #2
 8007fac:	fa02 f303 	lsl.w	r3, r2, r3
 8007fb0:	69ba      	ldr	r2, [r7, #24]
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007fb6:	69fb      	ldr	r3, [r7, #28]
 8007fb8:	08da      	lsrs	r2, r3, #3
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	3208      	adds	r2, #8
 8007fbe:	69b9      	ldr	r1, [r7, #24]
 8007fc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007fca:	69fb      	ldr	r3, [r7, #28]
 8007fcc:	005b      	lsls	r3, r3, #1
 8007fce:	2203      	movs	r2, #3
 8007fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8007fd4:	43db      	mvns	r3, r3
 8007fd6:	69ba      	ldr	r2, [r7, #24]
 8007fd8:	4013      	ands	r3, r2
 8007fda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	685b      	ldr	r3, [r3, #4]
 8007fe0:	f003 0203 	and.w	r2, r3, #3
 8007fe4:	69fb      	ldr	r3, [r7, #28]
 8007fe6:	005b      	lsls	r3, r3, #1
 8007fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8007fec:	69ba      	ldr	r2, [r7, #24]
 8007fee:	4313      	orrs	r3, r2
 8007ff0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	69ba      	ldr	r2, [r7, #24]
 8007ff6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	685b      	ldr	r3, [r3, #4]
 8007ffc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008000:	2b00      	cmp	r3, #0
 8008002:	f000 80c0 	beq.w	8008186 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008006:	2300      	movs	r3, #0
 8008008:	60fb      	str	r3, [r7, #12]
 800800a:	4b65      	ldr	r3, [pc, #404]	; (80081a0 <HAL_GPIO_Init+0x320>)
 800800c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800800e:	4a64      	ldr	r2, [pc, #400]	; (80081a0 <HAL_GPIO_Init+0x320>)
 8008010:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008014:	6453      	str	r3, [r2, #68]	; 0x44
 8008016:	4b62      	ldr	r3, [pc, #392]	; (80081a0 <HAL_GPIO_Init+0x320>)
 8008018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800801a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800801e:	60fb      	str	r3, [r7, #12]
 8008020:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008022:	4a60      	ldr	r2, [pc, #384]	; (80081a4 <HAL_GPIO_Init+0x324>)
 8008024:	69fb      	ldr	r3, [r7, #28]
 8008026:	089b      	lsrs	r3, r3, #2
 8008028:	3302      	adds	r3, #2
 800802a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800802e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008030:	69fb      	ldr	r3, [r7, #28]
 8008032:	f003 0303 	and.w	r3, r3, #3
 8008036:	009b      	lsls	r3, r3, #2
 8008038:	220f      	movs	r2, #15
 800803a:	fa02 f303 	lsl.w	r3, r2, r3
 800803e:	43db      	mvns	r3, r3
 8008040:	69ba      	ldr	r2, [r7, #24]
 8008042:	4013      	ands	r3, r2
 8008044:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	4a57      	ldr	r2, [pc, #348]	; (80081a8 <HAL_GPIO_Init+0x328>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d037      	beq.n	80080be <HAL_GPIO_Init+0x23e>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	4a56      	ldr	r2, [pc, #344]	; (80081ac <HAL_GPIO_Init+0x32c>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d031      	beq.n	80080ba <HAL_GPIO_Init+0x23a>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	4a55      	ldr	r2, [pc, #340]	; (80081b0 <HAL_GPIO_Init+0x330>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d02b      	beq.n	80080b6 <HAL_GPIO_Init+0x236>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	4a54      	ldr	r2, [pc, #336]	; (80081b4 <HAL_GPIO_Init+0x334>)
 8008062:	4293      	cmp	r3, r2
 8008064:	d025      	beq.n	80080b2 <HAL_GPIO_Init+0x232>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	4a53      	ldr	r2, [pc, #332]	; (80081b8 <HAL_GPIO_Init+0x338>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d01f      	beq.n	80080ae <HAL_GPIO_Init+0x22e>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	4a52      	ldr	r2, [pc, #328]	; (80081bc <HAL_GPIO_Init+0x33c>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d019      	beq.n	80080aa <HAL_GPIO_Init+0x22a>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	4a51      	ldr	r2, [pc, #324]	; (80081c0 <HAL_GPIO_Init+0x340>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d013      	beq.n	80080a6 <HAL_GPIO_Init+0x226>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	4a50      	ldr	r2, [pc, #320]	; (80081c4 <HAL_GPIO_Init+0x344>)
 8008082:	4293      	cmp	r3, r2
 8008084:	d00d      	beq.n	80080a2 <HAL_GPIO_Init+0x222>
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	4a4f      	ldr	r2, [pc, #316]	; (80081c8 <HAL_GPIO_Init+0x348>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d007      	beq.n	800809e <HAL_GPIO_Init+0x21e>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	4a4e      	ldr	r2, [pc, #312]	; (80081cc <HAL_GPIO_Init+0x34c>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d101      	bne.n	800809a <HAL_GPIO_Init+0x21a>
 8008096:	2309      	movs	r3, #9
 8008098:	e012      	b.n	80080c0 <HAL_GPIO_Init+0x240>
 800809a:	230a      	movs	r3, #10
 800809c:	e010      	b.n	80080c0 <HAL_GPIO_Init+0x240>
 800809e:	2308      	movs	r3, #8
 80080a0:	e00e      	b.n	80080c0 <HAL_GPIO_Init+0x240>
 80080a2:	2307      	movs	r3, #7
 80080a4:	e00c      	b.n	80080c0 <HAL_GPIO_Init+0x240>
 80080a6:	2306      	movs	r3, #6
 80080a8:	e00a      	b.n	80080c0 <HAL_GPIO_Init+0x240>
 80080aa:	2305      	movs	r3, #5
 80080ac:	e008      	b.n	80080c0 <HAL_GPIO_Init+0x240>
 80080ae:	2304      	movs	r3, #4
 80080b0:	e006      	b.n	80080c0 <HAL_GPIO_Init+0x240>
 80080b2:	2303      	movs	r3, #3
 80080b4:	e004      	b.n	80080c0 <HAL_GPIO_Init+0x240>
 80080b6:	2302      	movs	r3, #2
 80080b8:	e002      	b.n	80080c0 <HAL_GPIO_Init+0x240>
 80080ba:	2301      	movs	r3, #1
 80080bc:	e000      	b.n	80080c0 <HAL_GPIO_Init+0x240>
 80080be:	2300      	movs	r3, #0
 80080c0:	69fa      	ldr	r2, [r7, #28]
 80080c2:	f002 0203 	and.w	r2, r2, #3
 80080c6:	0092      	lsls	r2, r2, #2
 80080c8:	4093      	lsls	r3, r2
 80080ca:	69ba      	ldr	r2, [r7, #24]
 80080cc:	4313      	orrs	r3, r2
 80080ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80080d0:	4934      	ldr	r1, [pc, #208]	; (80081a4 <HAL_GPIO_Init+0x324>)
 80080d2:	69fb      	ldr	r3, [r7, #28]
 80080d4:	089b      	lsrs	r3, r3, #2
 80080d6:	3302      	adds	r3, #2
 80080d8:	69ba      	ldr	r2, [r7, #24]
 80080da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80080de:	4b3c      	ldr	r3, [pc, #240]	; (80081d0 <HAL_GPIO_Init+0x350>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80080e4:	693b      	ldr	r3, [r7, #16]
 80080e6:	43db      	mvns	r3, r3
 80080e8:	69ba      	ldr	r2, [r7, #24]
 80080ea:	4013      	ands	r3, r2
 80080ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	685b      	ldr	r3, [r3, #4]
 80080f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d003      	beq.n	8008102 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80080fa:	69ba      	ldr	r2, [r7, #24]
 80080fc:	693b      	ldr	r3, [r7, #16]
 80080fe:	4313      	orrs	r3, r2
 8008100:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008102:	4a33      	ldr	r2, [pc, #204]	; (80081d0 <HAL_GPIO_Init+0x350>)
 8008104:	69bb      	ldr	r3, [r7, #24]
 8008106:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8008108:	4b31      	ldr	r3, [pc, #196]	; (80081d0 <HAL_GPIO_Init+0x350>)
 800810a:	685b      	ldr	r3, [r3, #4]
 800810c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800810e:	693b      	ldr	r3, [r7, #16]
 8008110:	43db      	mvns	r3, r3
 8008112:	69ba      	ldr	r2, [r7, #24]
 8008114:	4013      	ands	r3, r2
 8008116:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008120:	2b00      	cmp	r3, #0
 8008122:	d003      	beq.n	800812c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8008124:	69ba      	ldr	r2, [r7, #24]
 8008126:	693b      	ldr	r3, [r7, #16]
 8008128:	4313      	orrs	r3, r2
 800812a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800812c:	4a28      	ldr	r2, [pc, #160]	; (80081d0 <HAL_GPIO_Init+0x350>)
 800812e:	69bb      	ldr	r3, [r7, #24]
 8008130:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008132:	4b27      	ldr	r3, [pc, #156]	; (80081d0 <HAL_GPIO_Init+0x350>)
 8008134:	689b      	ldr	r3, [r3, #8]
 8008136:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	43db      	mvns	r3, r3
 800813c:	69ba      	ldr	r2, [r7, #24]
 800813e:	4013      	ands	r3, r2
 8008140:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	685b      	ldr	r3, [r3, #4]
 8008146:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800814a:	2b00      	cmp	r3, #0
 800814c:	d003      	beq.n	8008156 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800814e:	69ba      	ldr	r2, [r7, #24]
 8008150:	693b      	ldr	r3, [r7, #16]
 8008152:	4313      	orrs	r3, r2
 8008154:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008156:	4a1e      	ldr	r2, [pc, #120]	; (80081d0 <HAL_GPIO_Init+0x350>)
 8008158:	69bb      	ldr	r3, [r7, #24]
 800815a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800815c:	4b1c      	ldr	r3, [pc, #112]	; (80081d0 <HAL_GPIO_Init+0x350>)
 800815e:	68db      	ldr	r3, [r3, #12]
 8008160:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	43db      	mvns	r3, r3
 8008166:	69ba      	ldr	r2, [r7, #24]
 8008168:	4013      	ands	r3, r2
 800816a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	685b      	ldr	r3, [r3, #4]
 8008170:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008174:	2b00      	cmp	r3, #0
 8008176:	d003      	beq.n	8008180 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8008178:	69ba      	ldr	r2, [r7, #24]
 800817a:	693b      	ldr	r3, [r7, #16]
 800817c:	4313      	orrs	r3, r2
 800817e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008180:	4a13      	ldr	r2, [pc, #76]	; (80081d0 <HAL_GPIO_Init+0x350>)
 8008182:	69bb      	ldr	r3, [r7, #24]
 8008184:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008186:	69fb      	ldr	r3, [r7, #28]
 8008188:	3301      	adds	r3, #1
 800818a:	61fb      	str	r3, [r7, #28]
 800818c:	69fb      	ldr	r3, [r7, #28]
 800818e:	2b0f      	cmp	r3, #15
 8008190:	f67f ae84 	bls.w	8007e9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008194:	bf00      	nop
 8008196:	3724      	adds	r7, #36	; 0x24
 8008198:	46bd      	mov	sp, r7
 800819a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819e:	4770      	bx	lr
 80081a0:	40023800 	.word	0x40023800
 80081a4:	40013800 	.word	0x40013800
 80081a8:	40020000 	.word	0x40020000
 80081ac:	40020400 	.word	0x40020400
 80081b0:	40020800 	.word	0x40020800
 80081b4:	40020c00 	.word	0x40020c00
 80081b8:	40021000 	.word	0x40021000
 80081bc:	40021400 	.word	0x40021400
 80081c0:	40021800 	.word	0x40021800
 80081c4:	40021c00 	.word	0x40021c00
 80081c8:	40022000 	.word	0x40022000
 80081cc:	40022400 	.word	0x40022400
 80081d0:	40013c00 	.word	0x40013c00

080081d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b085      	sub	sp, #20
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	460b      	mov	r3, r1
 80081de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	691a      	ldr	r2, [r3, #16]
 80081e4:	887b      	ldrh	r3, [r7, #2]
 80081e6:	4013      	ands	r3, r2
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d002      	beq.n	80081f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80081ec:	2301      	movs	r3, #1
 80081ee:	73fb      	strb	r3, [r7, #15]
 80081f0:	e001      	b.n	80081f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80081f2:	2300      	movs	r3, #0
 80081f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80081f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	3714      	adds	r7, #20
 80081fc:	46bd      	mov	sp, r7
 80081fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008202:	4770      	bx	lr

08008204 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008204:	b480      	push	{r7}
 8008206:	b083      	sub	sp, #12
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
 800820c:	460b      	mov	r3, r1
 800820e:	807b      	strh	r3, [r7, #2]
 8008210:	4613      	mov	r3, r2
 8008212:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008214:	787b      	ldrb	r3, [r7, #1]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d003      	beq.n	8008222 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800821a:	887a      	ldrh	r2, [r7, #2]
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008220:	e003      	b.n	800822a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008222:	887b      	ldrh	r3, [r7, #2]
 8008224:	041a      	lsls	r2, r3, #16
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	619a      	str	r2, [r3, #24]
}
 800822a:	bf00      	nop
 800822c:	370c      	adds	r7, #12
 800822e:	46bd      	mov	sp, r7
 8008230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008234:	4770      	bx	lr
	...

08008238 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b082      	sub	sp, #8
 800823c:	af00      	add	r7, sp, #0
 800823e:	4603      	mov	r3, r0
 8008240:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008242:	4b08      	ldr	r3, [pc, #32]	; (8008264 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008244:	695a      	ldr	r2, [r3, #20]
 8008246:	88fb      	ldrh	r3, [r7, #6]
 8008248:	4013      	ands	r3, r2
 800824a:	2b00      	cmp	r3, #0
 800824c:	d006      	beq.n	800825c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800824e:	4a05      	ldr	r2, [pc, #20]	; (8008264 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008250:	88fb      	ldrh	r3, [r7, #6]
 8008252:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008254:	88fb      	ldrh	r3, [r7, #6]
 8008256:	4618      	mov	r0, r3
 8008258:	f7fb fbcc 	bl	80039f4 <HAL_GPIO_EXTI_Callback>
  }
}
 800825c:	bf00      	nop
 800825e:	3708      	adds	r7, #8
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}
 8008264:	40013c00 	.word	0x40013c00

08008268 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b084      	sub	sp, #16
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d101      	bne.n	800827a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008276:	2301      	movs	r3, #1
 8008278:	e11f      	b.n	80084ba <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008280:	b2db      	uxtb	r3, r3
 8008282:	2b00      	cmp	r3, #0
 8008284:	d106      	bne.n	8008294 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2200      	movs	r2, #0
 800828a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f7fc fc2e 	bl	8004af0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2224      	movs	r2, #36	; 0x24
 8008298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	681a      	ldr	r2, [r3, #0]
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f022 0201 	bic.w	r2, r2, #1
 80082aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	681a      	ldr	r2, [r3, #0]
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80082ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	681a      	ldr	r2, [r3, #0]
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80082ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80082cc:	f001 f96e 	bl	80095ac <HAL_RCC_GetPCLK1Freq>
 80082d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	685b      	ldr	r3, [r3, #4]
 80082d6:	4a7b      	ldr	r2, [pc, #492]	; (80084c4 <HAL_I2C_Init+0x25c>)
 80082d8:	4293      	cmp	r3, r2
 80082da:	d807      	bhi.n	80082ec <HAL_I2C_Init+0x84>
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	4a7a      	ldr	r2, [pc, #488]	; (80084c8 <HAL_I2C_Init+0x260>)
 80082e0:	4293      	cmp	r3, r2
 80082e2:	bf94      	ite	ls
 80082e4:	2301      	movls	r3, #1
 80082e6:	2300      	movhi	r3, #0
 80082e8:	b2db      	uxtb	r3, r3
 80082ea:	e006      	b.n	80082fa <HAL_I2C_Init+0x92>
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	4a77      	ldr	r2, [pc, #476]	; (80084cc <HAL_I2C_Init+0x264>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	bf94      	ite	ls
 80082f4:	2301      	movls	r3, #1
 80082f6:	2300      	movhi	r3, #0
 80082f8:	b2db      	uxtb	r3, r3
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d001      	beq.n	8008302 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80082fe:	2301      	movs	r3, #1
 8008300:	e0db      	b.n	80084ba <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	4a72      	ldr	r2, [pc, #456]	; (80084d0 <HAL_I2C_Init+0x268>)
 8008306:	fba2 2303 	umull	r2, r3, r2, r3
 800830a:	0c9b      	lsrs	r3, r3, #18
 800830c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	685b      	ldr	r3, [r3, #4]
 8008314:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	68ba      	ldr	r2, [r7, #8]
 800831e:	430a      	orrs	r2, r1
 8008320:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	6a1b      	ldr	r3, [r3, #32]
 8008328:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	685b      	ldr	r3, [r3, #4]
 8008330:	4a64      	ldr	r2, [pc, #400]	; (80084c4 <HAL_I2C_Init+0x25c>)
 8008332:	4293      	cmp	r3, r2
 8008334:	d802      	bhi.n	800833c <HAL_I2C_Init+0xd4>
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	3301      	adds	r3, #1
 800833a:	e009      	b.n	8008350 <HAL_I2C_Init+0xe8>
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008342:	fb02 f303 	mul.w	r3, r2, r3
 8008346:	4a63      	ldr	r2, [pc, #396]	; (80084d4 <HAL_I2C_Init+0x26c>)
 8008348:	fba2 2303 	umull	r2, r3, r2, r3
 800834c:	099b      	lsrs	r3, r3, #6
 800834e:	3301      	adds	r3, #1
 8008350:	687a      	ldr	r2, [r7, #4]
 8008352:	6812      	ldr	r2, [r2, #0]
 8008354:	430b      	orrs	r3, r1
 8008356:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	69db      	ldr	r3, [r3, #28]
 800835e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8008362:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	685b      	ldr	r3, [r3, #4]
 800836a:	4956      	ldr	r1, [pc, #344]	; (80084c4 <HAL_I2C_Init+0x25c>)
 800836c:	428b      	cmp	r3, r1
 800836e:	d80d      	bhi.n	800838c <HAL_I2C_Init+0x124>
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	1e59      	subs	r1, r3, #1
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	685b      	ldr	r3, [r3, #4]
 8008378:	005b      	lsls	r3, r3, #1
 800837a:	fbb1 f3f3 	udiv	r3, r1, r3
 800837e:	3301      	adds	r3, #1
 8008380:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008384:	2b04      	cmp	r3, #4
 8008386:	bf38      	it	cc
 8008388:	2304      	movcc	r3, #4
 800838a:	e04f      	b.n	800842c <HAL_I2C_Init+0x1c4>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	689b      	ldr	r3, [r3, #8]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d111      	bne.n	80083b8 <HAL_I2C_Init+0x150>
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	1e58      	subs	r0, r3, #1
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6859      	ldr	r1, [r3, #4]
 800839c:	460b      	mov	r3, r1
 800839e:	005b      	lsls	r3, r3, #1
 80083a0:	440b      	add	r3, r1
 80083a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80083a6:	3301      	adds	r3, #1
 80083a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	bf0c      	ite	eq
 80083b0:	2301      	moveq	r3, #1
 80083b2:	2300      	movne	r3, #0
 80083b4:	b2db      	uxtb	r3, r3
 80083b6:	e012      	b.n	80083de <HAL_I2C_Init+0x176>
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	1e58      	subs	r0, r3, #1
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6859      	ldr	r1, [r3, #4]
 80083c0:	460b      	mov	r3, r1
 80083c2:	009b      	lsls	r3, r3, #2
 80083c4:	440b      	add	r3, r1
 80083c6:	0099      	lsls	r1, r3, #2
 80083c8:	440b      	add	r3, r1
 80083ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80083ce:	3301      	adds	r3, #1
 80083d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	bf0c      	ite	eq
 80083d8:	2301      	moveq	r3, #1
 80083da:	2300      	movne	r3, #0
 80083dc:	b2db      	uxtb	r3, r3
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d001      	beq.n	80083e6 <HAL_I2C_Init+0x17e>
 80083e2:	2301      	movs	r3, #1
 80083e4:	e022      	b.n	800842c <HAL_I2C_Init+0x1c4>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	689b      	ldr	r3, [r3, #8]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d10e      	bne.n	800840c <HAL_I2C_Init+0x1a4>
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	1e58      	subs	r0, r3, #1
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6859      	ldr	r1, [r3, #4]
 80083f6:	460b      	mov	r3, r1
 80083f8:	005b      	lsls	r3, r3, #1
 80083fa:	440b      	add	r3, r1
 80083fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8008400:	3301      	adds	r3, #1
 8008402:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008406:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800840a:	e00f      	b.n	800842c <HAL_I2C_Init+0x1c4>
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	1e58      	subs	r0, r3, #1
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6859      	ldr	r1, [r3, #4]
 8008414:	460b      	mov	r3, r1
 8008416:	009b      	lsls	r3, r3, #2
 8008418:	440b      	add	r3, r1
 800841a:	0099      	lsls	r1, r3, #2
 800841c:	440b      	add	r3, r1
 800841e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008422:	3301      	adds	r3, #1
 8008424:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008428:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800842c:	6879      	ldr	r1, [r7, #4]
 800842e:	6809      	ldr	r1, [r1, #0]
 8008430:	4313      	orrs	r3, r2
 8008432:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	69da      	ldr	r2, [r3, #28]
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6a1b      	ldr	r3, [r3, #32]
 8008446:	431a      	orrs	r2, r3
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	430a      	orrs	r2, r1
 800844e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	689b      	ldr	r3, [r3, #8]
 8008456:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800845a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800845e:	687a      	ldr	r2, [r7, #4]
 8008460:	6911      	ldr	r1, [r2, #16]
 8008462:	687a      	ldr	r2, [r7, #4]
 8008464:	68d2      	ldr	r2, [r2, #12]
 8008466:	4311      	orrs	r1, r2
 8008468:	687a      	ldr	r2, [r7, #4]
 800846a:	6812      	ldr	r2, [r2, #0]
 800846c:	430b      	orrs	r3, r1
 800846e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	68db      	ldr	r3, [r3, #12]
 8008476:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	695a      	ldr	r2, [r3, #20]
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	699b      	ldr	r3, [r3, #24]
 8008482:	431a      	orrs	r2, r3
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	430a      	orrs	r2, r1
 800848a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	681a      	ldr	r2, [r3, #0]
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f042 0201 	orr.w	r2, r2, #1
 800849a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2200      	movs	r2, #0
 80084a0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2220      	movs	r2, #32
 80084a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2200      	movs	r2, #0
 80084ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2200      	movs	r2, #0
 80084b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80084b8:	2300      	movs	r3, #0
}
 80084ba:	4618      	mov	r0, r3
 80084bc:	3710      	adds	r7, #16
 80084be:	46bd      	mov	sp, r7
 80084c0:	bd80      	pop	{r7, pc}
 80084c2:	bf00      	nop
 80084c4:	000186a0 	.word	0x000186a0
 80084c8:	001e847f 	.word	0x001e847f
 80084cc:	003d08ff 	.word	0x003d08ff
 80084d0:	431bde83 	.word	0x431bde83
 80084d4:	10624dd3 	.word	0x10624dd3

080084d8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b088      	sub	sp, #32
 80084dc:	af02      	add	r7, sp, #8
 80084de:	60f8      	str	r0, [r7, #12]
 80084e0:	607a      	str	r2, [r7, #4]
 80084e2:	461a      	mov	r2, r3
 80084e4:	460b      	mov	r3, r1
 80084e6:	817b      	strh	r3, [r7, #10]
 80084e8:	4613      	mov	r3, r2
 80084ea:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80084ec:	f7fe fbe8 	bl	8006cc0 <HAL_GetTick>
 80084f0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084f8:	b2db      	uxtb	r3, r3
 80084fa:	2b20      	cmp	r3, #32
 80084fc:	f040 80e0 	bne.w	80086c0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	9300      	str	r3, [sp, #0]
 8008504:	2319      	movs	r3, #25
 8008506:	2201      	movs	r2, #1
 8008508:	4970      	ldr	r1, [pc, #448]	; (80086cc <HAL_I2C_Master_Transmit+0x1f4>)
 800850a:	68f8      	ldr	r0, [r7, #12]
 800850c:	f000 fc58 	bl	8008dc0 <I2C_WaitOnFlagUntilTimeout>
 8008510:	4603      	mov	r3, r0
 8008512:	2b00      	cmp	r3, #0
 8008514:	d001      	beq.n	800851a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8008516:	2302      	movs	r3, #2
 8008518:	e0d3      	b.n	80086c2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008520:	2b01      	cmp	r3, #1
 8008522:	d101      	bne.n	8008528 <HAL_I2C_Master_Transmit+0x50>
 8008524:	2302      	movs	r3, #2
 8008526:	e0cc      	b.n	80086c2 <HAL_I2C_Master_Transmit+0x1ea>
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	2201      	movs	r2, #1
 800852c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f003 0301 	and.w	r3, r3, #1
 800853a:	2b01      	cmp	r3, #1
 800853c:	d007      	beq.n	800854e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	681a      	ldr	r2, [r3, #0]
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f042 0201 	orr.w	r2, r2, #1
 800854c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	681a      	ldr	r2, [r3, #0]
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800855c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	2221      	movs	r2, #33	; 0x21
 8008562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	2210      	movs	r2, #16
 800856a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	2200      	movs	r2, #0
 8008572:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	687a      	ldr	r2, [r7, #4]
 8008578:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	893a      	ldrh	r2, [r7, #8]
 800857e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008584:	b29a      	uxth	r2, r3
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	4a50      	ldr	r2, [pc, #320]	; (80086d0 <HAL_I2C_Master_Transmit+0x1f8>)
 800858e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008590:	8979      	ldrh	r1, [r7, #10]
 8008592:	697b      	ldr	r3, [r7, #20]
 8008594:	6a3a      	ldr	r2, [r7, #32]
 8008596:	68f8      	ldr	r0, [r7, #12]
 8008598:	f000 fac2 	bl	8008b20 <I2C_MasterRequestWrite>
 800859c:	4603      	mov	r3, r0
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d001      	beq.n	80085a6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80085a2:	2301      	movs	r3, #1
 80085a4:	e08d      	b.n	80086c2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80085a6:	2300      	movs	r3, #0
 80085a8:	613b      	str	r3, [r7, #16]
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	695b      	ldr	r3, [r3, #20]
 80085b0:	613b      	str	r3, [r7, #16]
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	699b      	ldr	r3, [r3, #24]
 80085b8:	613b      	str	r3, [r7, #16]
 80085ba:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80085bc:	e066      	b.n	800868c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80085be:	697a      	ldr	r2, [r7, #20]
 80085c0:	6a39      	ldr	r1, [r7, #32]
 80085c2:	68f8      	ldr	r0, [r7, #12]
 80085c4:	f000 fcd2 	bl	8008f6c <I2C_WaitOnTXEFlagUntilTimeout>
 80085c8:	4603      	mov	r3, r0
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d00d      	beq.n	80085ea <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085d2:	2b04      	cmp	r3, #4
 80085d4:	d107      	bne.n	80085e6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	681a      	ldr	r2, [r3, #0]
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80085e4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80085e6:	2301      	movs	r3, #1
 80085e8:	e06b      	b.n	80086c2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ee:	781a      	ldrb	r2, [r3, #0]
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085fa:	1c5a      	adds	r2, r3, #1
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008604:	b29b      	uxth	r3, r3
 8008606:	3b01      	subs	r3, #1
 8008608:	b29a      	uxth	r2, r3
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008612:	3b01      	subs	r3, #1
 8008614:	b29a      	uxth	r2, r3
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	695b      	ldr	r3, [r3, #20]
 8008620:	f003 0304 	and.w	r3, r3, #4
 8008624:	2b04      	cmp	r3, #4
 8008626:	d11b      	bne.n	8008660 <HAL_I2C_Master_Transmit+0x188>
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800862c:	2b00      	cmp	r3, #0
 800862e:	d017      	beq.n	8008660 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008634:	781a      	ldrb	r2, [r3, #0]
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008640:	1c5a      	adds	r2, r3, #1
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800864a:	b29b      	uxth	r3, r3
 800864c:	3b01      	subs	r3, #1
 800864e:	b29a      	uxth	r2, r3
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008658:	3b01      	subs	r3, #1
 800865a:	b29a      	uxth	r2, r3
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008660:	697a      	ldr	r2, [r7, #20]
 8008662:	6a39      	ldr	r1, [r7, #32]
 8008664:	68f8      	ldr	r0, [r7, #12]
 8008666:	f000 fcc2 	bl	8008fee <I2C_WaitOnBTFFlagUntilTimeout>
 800866a:	4603      	mov	r3, r0
 800866c:	2b00      	cmp	r3, #0
 800866e:	d00d      	beq.n	800868c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008674:	2b04      	cmp	r3, #4
 8008676:	d107      	bne.n	8008688 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	681a      	ldr	r2, [r3, #0]
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008686:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008688:	2301      	movs	r3, #1
 800868a:	e01a      	b.n	80086c2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008690:	2b00      	cmp	r3, #0
 8008692:	d194      	bne.n	80085be <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	681a      	ldr	r2, [r3, #0]
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80086a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	2220      	movs	r2, #32
 80086a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	2200      	movs	r2, #0
 80086b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	2200      	movs	r2, #0
 80086b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80086bc:	2300      	movs	r3, #0
 80086be:	e000      	b.n	80086c2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80086c0:	2302      	movs	r3, #2
  }
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3718      	adds	r7, #24
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}
 80086ca:	bf00      	nop
 80086cc:	00100002 	.word	0x00100002
 80086d0:	ffff0000 	.word	0xffff0000

080086d4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b08c      	sub	sp, #48	; 0x30
 80086d8:	af02      	add	r7, sp, #8
 80086da:	60f8      	str	r0, [r7, #12]
 80086dc:	607a      	str	r2, [r7, #4]
 80086de:	461a      	mov	r2, r3
 80086e0:	460b      	mov	r3, r1
 80086e2:	817b      	strh	r3, [r7, #10]
 80086e4:	4613      	mov	r3, r2
 80086e6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80086e8:	f7fe faea 	bl	8006cc0 <HAL_GetTick>
 80086ec:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086f4:	b2db      	uxtb	r3, r3
 80086f6:	2b20      	cmp	r3, #32
 80086f8:	f040 820b 	bne.w	8008b12 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80086fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086fe:	9300      	str	r3, [sp, #0]
 8008700:	2319      	movs	r3, #25
 8008702:	2201      	movs	r2, #1
 8008704:	497c      	ldr	r1, [pc, #496]	; (80088f8 <HAL_I2C_Master_Receive+0x224>)
 8008706:	68f8      	ldr	r0, [r7, #12]
 8008708:	f000 fb5a 	bl	8008dc0 <I2C_WaitOnFlagUntilTimeout>
 800870c:	4603      	mov	r3, r0
 800870e:	2b00      	cmp	r3, #0
 8008710:	d001      	beq.n	8008716 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8008712:	2302      	movs	r3, #2
 8008714:	e1fe      	b.n	8008b14 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800871c:	2b01      	cmp	r3, #1
 800871e:	d101      	bne.n	8008724 <HAL_I2C_Master_Receive+0x50>
 8008720:	2302      	movs	r3, #2
 8008722:	e1f7      	b.n	8008b14 <HAL_I2C_Master_Receive+0x440>
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	2201      	movs	r2, #1
 8008728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f003 0301 	and.w	r3, r3, #1
 8008736:	2b01      	cmp	r3, #1
 8008738:	d007      	beq.n	800874a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	681a      	ldr	r2, [r3, #0]
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f042 0201 	orr.w	r2, r2, #1
 8008748:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	681a      	ldr	r2, [r3, #0]
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008758:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	2222      	movs	r2, #34	; 0x22
 800875e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	2210      	movs	r2, #16
 8008766:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	2200      	movs	r2, #0
 800876e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	687a      	ldr	r2, [r7, #4]
 8008774:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	893a      	ldrh	r2, [r7, #8]
 800877a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008780:	b29a      	uxth	r2, r3
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	4a5c      	ldr	r2, [pc, #368]	; (80088fc <HAL_I2C_Master_Receive+0x228>)
 800878a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800878c:	8979      	ldrh	r1, [r7, #10]
 800878e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008790:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008792:	68f8      	ldr	r0, [r7, #12]
 8008794:	f000 fa46 	bl	8008c24 <I2C_MasterRequestRead>
 8008798:	4603      	mov	r3, r0
 800879a:	2b00      	cmp	r3, #0
 800879c:	d001      	beq.n	80087a2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800879e:	2301      	movs	r3, #1
 80087a0:	e1b8      	b.n	8008b14 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d113      	bne.n	80087d2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80087aa:	2300      	movs	r3, #0
 80087ac:	623b      	str	r3, [r7, #32]
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	695b      	ldr	r3, [r3, #20]
 80087b4:	623b      	str	r3, [r7, #32]
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	699b      	ldr	r3, [r3, #24]
 80087bc:	623b      	str	r3, [r7, #32]
 80087be:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	681a      	ldr	r2, [r3, #0]
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80087ce:	601a      	str	r2, [r3, #0]
 80087d0:	e18c      	b.n	8008aec <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087d6:	2b01      	cmp	r3, #1
 80087d8:	d11b      	bne.n	8008812 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	681a      	ldr	r2, [r3, #0]
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80087e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80087ea:	2300      	movs	r3, #0
 80087ec:	61fb      	str	r3, [r7, #28]
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	695b      	ldr	r3, [r3, #20]
 80087f4:	61fb      	str	r3, [r7, #28]
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	699b      	ldr	r3, [r3, #24]
 80087fc:	61fb      	str	r3, [r7, #28]
 80087fe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	681a      	ldr	r2, [r3, #0]
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800880e:	601a      	str	r2, [r3, #0]
 8008810:	e16c      	b.n	8008aec <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008816:	2b02      	cmp	r3, #2
 8008818:	d11b      	bne.n	8008852 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	681a      	ldr	r2, [r3, #0]
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008828:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	681a      	ldr	r2, [r3, #0]
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008838:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800883a:	2300      	movs	r3, #0
 800883c:	61bb      	str	r3, [r7, #24]
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	695b      	ldr	r3, [r3, #20]
 8008844:	61bb      	str	r3, [r7, #24]
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	699b      	ldr	r3, [r3, #24]
 800884c:	61bb      	str	r3, [r7, #24]
 800884e:	69bb      	ldr	r3, [r7, #24]
 8008850:	e14c      	b.n	8008aec <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	681a      	ldr	r2, [r3, #0]
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008860:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008862:	2300      	movs	r3, #0
 8008864:	617b      	str	r3, [r7, #20]
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	695b      	ldr	r3, [r3, #20]
 800886c:	617b      	str	r3, [r7, #20]
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	699b      	ldr	r3, [r3, #24]
 8008874:	617b      	str	r3, [r7, #20]
 8008876:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008878:	e138      	b.n	8008aec <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800887e:	2b03      	cmp	r3, #3
 8008880:	f200 80f1 	bhi.w	8008a66 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008888:	2b01      	cmp	r3, #1
 800888a:	d123      	bne.n	80088d4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800888c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800888e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008890:	68f8      	ldr	r0, [r7, #12]
 8008892:	f000 fbed 	bl	8009070 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008896:	4603      	mov	r3, r0
 8008898:	2b00      	cmp	r3, #0
 800889a:	d001      	beq.n	80088a0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800889c:	2301      	movs	r3, #1
 800889e:	e139      	b.n	8008b14 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	691a      	ldr	r2, [r3, #16]
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088aa:	b2d2      	uxtb	r2, r2
 80088ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088b2:	1c5a      	adds	r2, r3, #1
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088bc:	3b01      	subs	r3, #1
 80088be:	b29a      	uxth	r2, r3
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088c8:	b29b      	uxth	r3, r3
 80088ca:	3b01      	subs	r3, #1
 80088cc:	b29a      	uxth	r2, r3
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80088d2:	e10b      	b.n	8008aec <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088d8:	2b02      	cmp	r3, #2
 80088da:	d14e      	bne.n	800897a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80088dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088de:	9300      	str	r3, [sp, #0]
 80088e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088e2:	2200      	movs	r2, #0
 80088e4:	4906      	ldr	r1, [pc, #24]	; (8008900 <HAL_I2C_Master_Receive+0x22c>)
 80088e6:	68f8      	ldr	r0, [r7, #12]
 80088e8:	f000 fa6a 	bl	8008dc0 <I2C_WaitOnFlagUntilTimeout>
 80088ec:	4603      	mov	r3, r0
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d008      	beq.n	8008904 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80088f2:	2301      	movs	r3, #1
 80088f4:	e10e      	b.n	8008b14 <HAL_I2C_Master_Receive+0x440>
 80088f6:	bf00      	nop
 80088f8:	00100002 	.word	0x00100002
 80088fc:	ffff0000 	.word	0xffff0000
 8008900:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	681a      	ldr	r2, [r3, #0]
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008912:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	691a      	ldr	r2, [r3, #16]
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800891e:	b2d2      	uxtb	r2, r2
 8008920:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008926:	1c5a      	adds	r2, r3, #1
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008930:	3b01      	subs	r3, #1
 8008932:	b29a      	uxth	r2, r3
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800893c:	b29b      	uxth	r3, r3
 800893e:	3b01      	subs	r3, #1
 8008940:	b29a      	uxth	r2, r3
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	691a      	ldr	r2, [r3, #16]
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008950:	b2d2      	uxtb	r2, r2
 8008952:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008958:	1c5a      	adds	r2, r3, #1
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008962:	3b01      	subs	r3, #1
 8008964:	b29a      	uxth	r2, r3
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800896e:	b29b      	uxth	r3, r3
 8008970:	3b01      	subs	r3, #1
 8008972:	b29a      	uxth	r2, r3
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008978:	e0b8      	b.n	8008aec <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800897a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800897c:	9300      	str	r3, [sp, #0]
 800897e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008980:	2200      	movs	r2, #0
 8008982:	4966      	ldr	r1, [pc, #408]	; (8008b1c <HAL_I2C_Master_Receive+0x448>)
 8008984:	68f8      	ldr	r0, [r7, #12]
 8008986:	f000 fa1b 	bl	8008dc0 <I2C_WaitOnFlagUntilTimeout>
 800898a:	4603      	mov	r3, r0
 800898c:	2b00      	cmp	r3, #0
 800898e:	d001      	beq.n	8008994 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8008990:	2301      	movs	r3, #1
 8008992:	e0bf      	b.n	8008b14 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	681a      	ldr	r2, [r3, #0]
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80089a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	691a      	ldr	r2, [r3, #16]
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ae:	b2d2      	uxtb	r2, r2
 80089b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089b6:	1c5a      	adds	r2, r3, #1
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089c0:	3b01      	subs	r3, #1
 80089c2:	b29a      	uxth	r2, r3
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089cc:	b29b      	uxth	r3, r3
 80089ce:	3b01      	subs	r3, #1
 80089d0:	b29a      	uxth	r2, r3
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80089d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d8:	9300      	str	r3, [sp, #0]
 80089da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089dc:	2200      	movs	r2, #0
 80089de:	494f      	ldr	r1, [pc, #316]	; (8008b1c <HAL_I2C_Master_Receive+0x448>)
 80089e0:	68f8      	ldr	r0, [r7, #12]
 80089e2:	f000 f9ed 	bl	8008dc0 <I2C_WaitOnFlagUntilTimeout>
 80089e6:	4603      	mov	r3, r0
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d001      	beq.n	80089f0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80089ec:	2301      	movs	r3, #1
 80089ee:	e091      	b.n	8008b14 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	681a      	ldr	r2, [r3, #0]
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80089fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	691a      	ldr	r2, [r3, #16]
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a0a:	b2d2      	uxtb	r2, r2
 8008a0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a12:	1c5a      	adds	r2, r3, #1
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a1c:	3b01      	subs	r3, #1
 8008a1e:	b29a      	uxth	r2, r3
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a28:	b29b      	uxth	r3, r3
 8008a2a:	3b01      	subs	r3, #1
 8008a2c:	b29a      	uxth	r2, r3
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	691a      	ldr	r2, [r3, #16]
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a3c:	b2d2      	uxtb	r2, r2
 8008a3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a44:	1c5a      	adds	r2, r3, #1
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a4e:	3b01      	subs	r3, #1
 8008a50:	b29a      	uxth	r2, r3
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a5a:	b29b      	uxth	r3, r3
 8008a5c:	3b01      	subs	r3, #1
 8008a5e:	b29a      	uxth	r2, r3
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008a64:	e042      	b.n	8008aec <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008a66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a68:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008a6a:	68f8      	ldr	r0, [r7, #12]
 8008a6c:	f000 fb00 	bl	8009070 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008a70:	4603      	mov	r3, r0
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d001      	beq.n	8008a7a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8008a76:	2301      	movs	r3, #1
 8008a78:	e04c      	b.n	8008b14 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	691a      	ldr	r2, [r3, #16]
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a84:	b2d2      	uxtb	r2, r2
 8008a86:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a8c:	1c5a      	adds	r2, r3, #1
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a96:	3b01      	subs	r3, #1
 8008a98:	b29a      	uxth	r2, r3
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008aa2:	b29b      	uxth	r3, r3
 8008aa4:	3b01      	subs	r3, #1
 8008aa6:	b29a      	uxth	r2, r3
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	695b      	ldr	r3, [r3, #20]
 8008ab2:	f003 0304 	and.w	r3, r3, #4
 8008ab6:	2b04      	cmp	r3, #4
 8008ab8:	d118      	bne.n	8008aec <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	691a      	ldr	r2, [r3, #16]
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ac4:	b2d2      	uxtb	r2, r2
 8008ac6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008acc:	1c5a      	adds	r2, r3, #1
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ad6:	3b01      	subs	r3, #1
 8008ad8:	b29a      	uxth	r2, r3
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ae2:	b29b      	uxth	r3, r3
 8008ae4:	3b01      	subs	r3, #1
 8008ae6:	b29a      	uxth	r2, r3
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	f47f aec2 	bne.w	800887a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	2220      	movs	r2, #32
 8008afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	2200      	movs	r2, #0
 8008b02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	e000      	b.n	8008b14 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8008b12:	2302      	movs	r3, #2
  }
}
 8008b14:	4618      	mov	r0, r3
 8008b16:	3728      	adds	r7, #40	; 0x28
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	bd80      	pop	{r7, pc}
 8008b1c:	00010004 	.word	0x00010004

08008b20 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b088      	sub	sp, #32
 8008b24:	af02      	add	r7, sp, #8
 8008b26:	60f8      	str	r0, [r7, #12]
 8008b28:	607a      	str	r2, [r7, #4]
 8008b2a:	603b      	str	r3, [r7, #0]
 8008b2c:	460b      	mov	r3, r1
 8008b2e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b34:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	2b08      	cmp	r3, #8
 8008b3a:	d006      	beq.n	8008b4a <I2C_MasterRequestWrite+0x2a>
 8008b3c:	697b      	ldr	r3, [r7, #20]
 8008b3e:	2b01      	cmp	r3, #1
 8008b40:	d003      	beq.n	8008b4a <I2C_MasterRequestWrite+0x2a>
 8008b42:	697b      	ldr	r3, [r7, #20]
 8008b44:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008b48:	d108      	bne.n	8008b5c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	681a      	ldr	r2, [r3, #0]
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008b58:	601a      	str	r2, [r3, #0]
 8008b5a:	e00b      	b.n	8008b74 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b60:	2b12      	cmp	r3, #18
 8008b62:	d107      	bne.n	8008b74 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	681a      	ldr	r2, [r3, #0]
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008b72:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	9300      	str	r3, [sp, #0]
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008b80:	68f8      	ldr	r0, [r7, #12]
 8008b82:	f000 f91d 	bl	8008dc0 <I2C_WaitOnFlagUntilTimeout>
 8008b86:	4603      	mov	r3, r0
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d00d      	beq.n	8008ba8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b9a:	d103      	bne.n	8008ba4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008ba2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008ba4:	2303      	movs	r3, #3
 8008ba6:	e035      	b.n	8008c14 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	691b      	ldr	r3, [r3, #16]
 8008bac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008bb0:	d108      	bne.n	8008bc4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008bb2:	897b      	ldrh	r3, [r7, #10]
 8008bb4:	b2db      	uxtb	r3, r3
 8008bb6:	461a      	mov	r2, r3
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008bc0:	611a      	str	r2, [r3, #16]
 8008bc2:	e01b      	b.n	8008bfc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008bc4:	897b      	ldrh	r3, [r7, #10]
 8008bc6:	11db      	asrs	r3, r3, #7
 8008bc8:	b2db      	uxtb	r3, r3
 8008bca:	f003 0306 	and.w	r3, r3, #6
 8008bce:	b2db      	uxtb	r3, r3
 8008bd0:	f063 030f 	orn	r3, r3, #15
 8008bd4:	b2da      	uxtb	r2, r3
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	687a      	ldr	r2, [r7, #4]
 8008be0:	490e      	ldr	r1, [pc, #56]	; (8008c1c <I2C_MasterRequestWrite+0xfc>)
 8008be2:	68f8      	ldr	r0, [r7, #12]
 8008be4:	f000 f943 	bl	8008e6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008be8:	4603      	mov	r3, r0
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d001      	beq.n	8008bf2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8008bee:	2301      	movs	r3, #1
 8008bf0:	e010      	b.n	8008c14 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008bf2:	897b      	ldrh	r3, [r7, #10]
 8008bf4:	b2da      	uxtb	r2, r3
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	687a      	ldr	r2, [r7, #4]
 8008c00:	4907      	ldr	r1, [pc, #28]	; (8008c20 <I2C_MasterRequestWrite+0x100>)
 8008c02:	68f8      	ldr	r0, [r7, #12]
 8008c04:	f000 f933 	bl	8008e6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008c08:	4603      	mov	r3, r0
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d001      	beq.n	8008c12 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8008c0e:	2301      	movs	r3, #1
 8008c10:	e000      	b.n	8008c14 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8008c12:	2300      	movs	r3, #0
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	3718      	adds	r7, #24
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}
 8008c1c:	00010008 	.word	0x00010008
 8008c20:	00010002 	.word	0x00010002

08008c24 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b088      	sub	sp, #32
 8008c28:	af02      	add	r7, sp, #8
 8008c2a:	60f8      	str	r0, [r7, #12]
 8008c2c:	607a      	str	r2, [r7, #4]
 8008c2e:	603b      	str	r3, [r7, #0]
 8008c30:	460b      	mov	r3, r1
 8008c32:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c38:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	681a      	ldr	r2, [r3, #0]
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008c48:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008c4a:	697b      	ldr	r3, [r7, #20]
 8008c4c:	2b08      	cmp	r3, #8
 8008c4e:	d006      	beq.n	8008c5e <I2C_MasterRequestRead+0x3a>
 8008c50:	697b      	ldr	r3, [r7, #20]
 8008c52:	2b01      	cmp	r3, #1
 8008c54:	d003      	beq.n	8008c5e <I2C_MasterRequestRead+0x3a>
 8008c56:	697b      	ldr	r3, [r7, #20]
 8008c58:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008c5c:	d108      	bne.n	8008c70 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	681a      	ldr	r2, [r3, #0]
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008c6c:	601a      	str	r2, [r3, #0]
 8008c6e:	e00b      	b.n	8008c88 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c74:	2b11      	cmp	r3, #17
 8008c76:	d107      	bne.n	8008c88 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	681a      	ldr	r2, [r3, #0]
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008c86:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	9300      	str	r3, [sp, #0]
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2200      	movs	r2, #0
 8008c90:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008c94:	68f8      	ldr	r0, [r7, #12]
 8008c96:	f000 f893 	bl	8008dc0 <I2C_WaitOnFlagUntilTimeout>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d00d      	beq.n	8008cbc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008caa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008cae:	d103      	bne.n	8008cb8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008cb6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008cb8:	2303      	movs	r3, #3
 8008cba:	e079      	b.n	8008db0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	691b      	ldr	r3, [r3, #16]
 8008cc0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008cc4:	d108      	bne.n	8008cd8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008cc6:	897b      	ldrh	r3, [r7, #10]
 8008cc8:	b2db      	uxtb	r3, r3
 8008cca:	f043 0301 	orr.w	r3, r3, #1
 8008cce:	b2da      	uxtb	r2, r3
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	611a      	str	r2, [r3, #16]
 8008cd6:	e05f      	b.n	8008d98 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008cd8:	897b      	ldrh	r3, [r7, #10]
 8008cda:	11db      	asrs	r3, r3, #7
 8008cdc:	b2db      	uxtb	r3, r3
 8008cde:	f003 0306 	and.w	r3, r3, #6
 8008ce2:	b2db      	uxtb	r3, r3
 8008ce4:	f063 030f 	orn	r3, r3, #15
 8008ce8:	b2da      	uxtb	r2, r3
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	687a      	ldr	r2, [r7, #4]
 8008cf4:	4930      	ldr	r1, [pc, #192]	; (8008db8 <I2C_MasterRequestRead+0x194>)
 8008cf6:	68f8      	ldr	r0, [r7, #12]
 8008cf8:	f000 f8b9 	bl	8008e6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d001      	beq.n	8008d06 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8008d02:	2301      	movs	r3, #1
 8008d04:	e054      	b.n	8008db0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008d06:	897b      	ldrh	r3, [r7, #10]
 8008d08:	b2da      	uxtb	r2, r3
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	687a      	ldr	r2, [r7, #4]
 8008d14:	4929      	ldr	r1, [pc, #164]	; (8008dbc <I2C_MasterRequestRead+0x198>)
 8008d16:	68f8      	ldr	r0, [r7, #12]
 8008d18:	f000 f8a9 	bl	8008e6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d001      	beq.n	8008d26 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8008d22:	2301      	movs	r3, #1
 8008d24:	e044      	b.n	8008db0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008d26:	2300      	movs	r3, #0
 8008d28:	613b      	str	r3, [r7, #16]
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	695b      	ldr	r3, [r3, #20]
 8008d30:	613b      	str	r3, [r7, #16]
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	699b      	ldr	r3, [r3, #24]
 8008d38:	613b      	str	r3, [r7, #16]
 8008d3a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	681a      	ldr	r2, [r3, #0]
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008d4a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	9300      	str	r3, [sp, #0]
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2200      	movs	r2, #0
 8008d54:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008d58:	68f8      	ldr	r0, [r7, #12]
 8008d5a:	f000 f831 	bl	8008dc0 <I2C_WaitOnFlagUntilTimeout>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d00d      	beq.n	8008d80 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d72:	d103      	bne.n	8008d7c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008d7a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8008d7c:	2303      	movs	r3, #3
 8008d7e:	e017      	b.n	8008db0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8008d80:	897b      	ldrh	r3, [r7, #10]
 8008d82:	11db      	asrs	r3, r3, #7
 8008d84:	b2db      	uxtb	r3, r3
 8008d86:	f003 0306 	and.w	r3, r3, #6
 8008d8a:	b2db      	uxtb	r3, r3
 8008d8c:	f063 030e 	orn	r3, r3, #14
 8008d90:	b2da      	uxtb	r2, r3
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	687a      	ldr	r2, [r7, #4]
 8008d9c:	4907      	ldr	r1, [pc, #28]	; (8008dbc <I2C_MasterRequestRead+0x198>)
 8008d9e:	68f8      	ldr	r0, [r7, #12]
 8008da0:	f000 f865 	bl	8008e6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008da4:	4603      	mov	r3, r0
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d001      	beq.n	8008dae <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8008daa:	2301      	movs	r3, #1
 8008dac:	e000      	b.n	8008db0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8008dae:	2300      	movs	r3, #0
}
 8008db0:	4618      	mov	r0, r3
 8008db2:	3718      	adds	r7, #24
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}
 8008db8:	00010008 	.word	0x00010008
 8008dbc:	00010002 	.word	0x00010002

08008dc0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b084      	sub	sp, #16
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	60f8      	str	r0, [r7, #12]
 8008dc8:	60b9      	str	r1, [r7, #8]
 8008dca:	603b      	str	r3, [r7, #0]
 8008dcc:	4613      	mov	r3, r2
 8008dce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008dd0:	e025      	b.n	8008e1e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dd8:	d021      	beq.n	8008e1e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008dda:	f7fd ff71 	bl	8006cc0 <HAL_GetTick>
 8008dde:	4602      	mov	r2, r0
 8008de0:	69bb      	ldr	r3, [r7, #24]
 8008de2:	1ad3      	subs	r3, r2, r3
 8008de4:	683a      	ldr	r2, [r7, #0]
 8008de6:	429a      	cmp	r2, r3
 8008de8:	d302      	bcc.n	8008df0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d116      	bne.n	8008e1e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	2200      	movs	r2, #0
 8008df4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	2220      	movs	r2, #32
 8008dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	2200      	movs	r2, #0
 8008e02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e0a:	f043 0220 	orr.w	r2, r3, #32
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	2200      	movs	r2, #0
 8008e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	e023      	b.n	8008e66 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	0c1b      	lsrs	r3, r3, #16
 8008e22:	b2db      	uxtb	r3, r3
 8008e24:	2b01      	cmp	r3, #1
 8008e26:	d10d      	bne.n	8008e44 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	695b      	ldr	r3, [r3, #20]
 8008e2e:	43da      	mvns	r2, r3
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	4013      	ands	r3, r2
 8008e34:	b29b      	uxth	r3, r3
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	bf0c      	ite	eq
 8008e3a:	2301      	moveq	r3, #1
 8008e3c:	2300      	movne	r3, #0
 8008e3e:	b2db      	uxtb	r3, r3
 8008e40:	461a      	mov	r2, r3
 8008e42:	e00c      	b.n	8008e5e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	699b      	ldr	r3, [r3, #24]
 8008e4a:	43da      	mvns	r2, r3
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	4013      	ands	r3, r2
 8008e50:	b29b      	uxth	r3, r3
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	bf0c      	ite	eq
 8008e56:	2301      	moveq	r3, #1
 8008e58:	2300      	movne	r3, #0
 8008e5a:	b2db      	uxtb	r3, r3
 8008e5c:	461a      	mov	r2, r3
 8008e5e:	79fb      	ldrb	r3, [r7, #7]
 8008e60:	429a      	cmp	r2, r3
 8008e62:	d0b6      	beq.n	8008dd2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008e64:	2300      	movs	r3, #0
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	3710      	adds	r7, #16
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}

08008e6e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008e6e:	b580      	push	{r7, lr}
 8008e70:	b084      	sub	sp, #16
 8008e72:	af00      	add	r7, sp, #0
 8008e74:	60f8      	str	r0, [r7, #12]
 8008e76:	60b9      	str	r1, [r7, #8]
 8008e78:	607a      	str	r2, [r7, #4]
 8008e7a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008e7c:	e051      	b.n	8008f22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	695b      	ldr	r3, [r3, #20]
 8008e84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008e88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e8c:	d123      	bne.n	8008ed6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	681a      	ldr	r2, [r3, #0]
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e9c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008ea6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	2220      	movs	r2, #32
 8008eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	2200      	movs	r2, #0
 8008eba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ec2:	f043 0204 	orr.w	r2, r3, #4
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	2200      	movs	r2, #0
 8008ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	e046      	b.n	8008f64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008edc:	d021      	beq.n	8008f22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ede:	f7fd feef 	bl	8006cc0 <HAL_GetTick>
 8008ee2:	4602      	mov	r2, r0
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	1ad3      	subs	r3, r2, r3
 8008ee8:	687a      	ldr	r2, [r7, #4]
 8008eea:	429a      	cmp	r2, r3
 8008eec:	d302      	bcc.n	8008ef4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d116      	bne.n	8008f22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	2220      	movs	r2, #32
 8008efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	2200      	movs	r2, #0
 8008f06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f0e:	f043 0220 	orr.w	r2, r3, #32
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	2200      	movs	r2, #0
 8008f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008f1e:	2301      	movs	r3, #1
 8008f20:	e020      	b.n	8008f64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008f22:	68bb      	ldr	r3, [r7, #8]
 8008f24:	0c1b      	lsrs	r3, r3, #16
 8008f26:	b2db      	uxtb	r3, r3
 8008f28:	2b01      	cmp	r3, #1
 8008f2a:	d10c      	bne.n	8008f46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	695b      	ldr	r3, [r3, #20]
 8008f32:	43da      	mvns	r2, r3
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	4013      	ands	r3, r2
 8008f38:	b29b      	uxth	r3, r3
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	bf14      	ite	ne
 8008f3e:	2301      	movne	r3, #1
 8008f40:	2300      	moveq	r3, #0
 8008f42:	b2db      	uxtb	r3, r3
 8008f44:	e00b      	b.n	8008f5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	699b      	ldr	r3, [r3, #24]
 8008f4c:	43da      	mvns	r2, r3
 8008f4e:	68bb      	ldr	r3, [r7, #8]
 8008f50:	4013      	ands	r3, r2
 8008f52:	b29b      	uxth	r3, r3
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	bf14      	ite	ne
 8008f58:	2301      	movne	r3, #1
 8008f5a:	2300      	moveq	r3, #0
 8008f5c:	b2db      	uxtb	r3, r3
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d18d      	bne.n	8008e7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008f62:	2300      	movs	r3, #0
}
 8008f64:	4618      	mov	r0, r3
 8008f66:	3710      	adds	r7, #16
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bd80      	pop	{r7, pc}

08008f6c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b084      	sub	sp, #16
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	60f8      	str	r0, [r7, #12]
 8008f74:	60b9      	str	r1, [r7, #8]
 8008f76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008f78:	e02d      	b.n	8008fd6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008f7a:	68f8      	ldr	r0, [r7, #12]
 8008f7c:	f000 f8ce 	bl	800911c <I2C_IsAcknowledgeFailed>
 8008f80:	4603      	mov	r3, r0
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d001      	beq.n	8008f8a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008f86:	2301      	movs	r3, #1
 8008f88:	e02d      	b.n	8008fe6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f90:	d021      	beq.n	8008fd6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f92:	f7fd fe95 	bl	8006cc0 <HAL_GetTick>
 8008f96:	4602      	mov	r2, r0
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	1ad3      	subs	r3, r2, r3
 8008f9c:	68ba      	ldr	r2, [r7, #8]
 8008f9e:	429a      	cmp	r2, r3
 8008fa0:	d302      	bcc.n	8008fa8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008fa2:	68bb      	ldr	r3, [r7, #8]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d116      	bne.n	8008fd6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	2200      	movs	r2, #0
 8008fac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	2220      	movs	r2, #32
 8008fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fc2:	f043 0220 	orr.w	r2, r3, #32
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	2200      	movs	r2, #0
 8008fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	e007      	b.n	8008fe6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	695b      	ldr	r3, [r3, #20]
 8008fdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fe0:	2b80      	cmp	r3, #128	; 0x80
 8008fe2:	d1ca      	bne.n	8008f7a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008fe4:	2300      	movs	r3, #0
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	3710      	adds	r7, #16
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd80      	pop	{r7, pc}

08008fee <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008fee:	b580      	push	{r7, lr}
 8008ff0:	b084      	sub	sp, #16
 8008ff2:	af00      	add	r7, sp, #0
 8008ff4:	60f8      	str	r0, [r7, #12]
 8008ff6:	60b9      	str	r1, [r7, #8]
 8008ff8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008ffa:	e02d      	b.n	8009058 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008ffc:	68f8      	ldr	r0, [r7, #12]
 8008ffe:	f000 f88d 	bl	800911c <I2C_IsAcknowledgeFailed>
 8009002:	4603      	mov	r3, r0
 8009004:	2b00      	cmp	r3, #0
 8009006:	d001      	beq.n	800900c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009008:	2301      	movs	r3, #1
 800900a:	e02d      	b.n	8009068 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009012:	d021      	beq.n	8009058 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009014:	f7fd fe54 	bl	8006cc0 <HAL_GetTick>
 8009018:	4602      	mov	r2, r0
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	1ad3      	subs	r3, r2, r3
 800901e:	68ba      	ldr	r2, [r7, #8]
 8009020:	429a      	cmp	r2, r3
 8009022:	d302      	bcc.n	800902a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009024:	68bb      	ldr	r3, [r7, #8]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d116      	bne.n	8009058 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	2200      	movs	r2, #0
 800902e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	2220      	movs	r2, #32
 8009034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	2200      	movs	r2, #0
 800903c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009044:	f043 0220 	orr.w	r2, r3, #32
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	2200      	movs	r2, #0
 8009050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009054:	2301      	movs	r3, #1
 8009056:	e007      	b.n	8009068 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	695b      	ldr	r3, [r3, #20]
 800905e:	f003 0304 	and.w	r3, r3, #4
 8009062:	2b04      	cmp	r3, #4
 8009064:	d1ca      	bne.n	8008ffc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009066:	2300      	movs	r3, #0
}
 8009068:	4618      	mov	r0, r3
 800906a:	3710      	adds	r7, #16
 800906c:	46bd      	mov	sp, r7
 800906e:	bd80      	pop	{r7, pc}

08009070 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b084      	sub	sp, #16
 8009074:	af00      	add	r7, sp, #0
 8009076:	60f8      	str	r0, [r7, #12]
 8009078:	60b9      	str	r1, [r7, #8]
 800907a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800907c:	e042      	b.n	8009104 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	695b      	ldr	r3, [r3, #20]
 8009084:	f003 0310 	and.w	r3, r3, #16
 8009088:	2b10      	cmp	r3, #16
 800908a:	d119      	bne.n	80090c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f06f 0210 	mvn.w	r2, #16
 8009094:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	2200      	movs	r2, #0
 800909a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	2220      	movs	r2, #32
 80090a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	2200      	movs	r2, #0
 80090a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	2200      	movs	r2, #0
 80090b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80090bc:	2301      	movs	r3, #1
 80090be:	e029      	b.n	8009114 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80090c0:	f7fd fdfe 	bl	8006cc0 <HAL_GetTick>
 80090c4:	4602      	mov	r2, r0
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	1ad3      	subs	r3, r2, r3
 80090ca:	68ba      	ldr	r2, [r7, #8]
 80090cc:	429a      	cmp	r2, r3
 80090ce:	d302      	bcc.n	80090d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d116      	bne.n	8009104 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	2200      	movs	r2, #0
 80090da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	2220      	movs	r2, #32
 80090e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	2200      	movs	r2, #0
 80090e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090f0:	f043 0220 	orr.w	r2, r3, #32
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	2200      	movs	r2, #0
 80090fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009100:	2301      	movs	r3, #1
 8009102:	e007      	b.n	8009114 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	695b      	ldr	r3, [r3, #20]
 800910a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800910e:	2b40      	cmp	r3, #64	; 0x40
 8009110:	d1b5      	bne.n	800907e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009112:	2300      	movs	r3, #0
}
 8009114:	4618      	mov	r0, r3
 8009116:	3710      	adds	r7, #16
 8009118:	46bd      	mov	sp, r7
 800911a:	bd80      	pop	{r7, pc}

0800911c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800911c:	b480      	push	{r7}
 800911e:	b083      	sub	sp, #12
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	695b      	ldr	r3, [r3, #20]
 800912a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800912e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009132:	d11b      	bne.n	800916c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800913c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2200      	movs	r2, #0
 8009142:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2220      	movs	r2, #32
 8009148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2200      	movs	r2, #0
 8009150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009158:	f043 0204 	orr.w	r2, r3, #4
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2200      	movs	r2, #0
 8009164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009168:	2301      	movs	r3, #1
 800916a:	e000      	b.n	800916e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800916c:	2300      	movs	r3, #0
}
 800916e:	4618      	mov	r0, r3
 8009170:	370c      	adds	r7, #12
 8009172:	46bd      	mov	sp, r7
 8009174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009178:	4770      	bx	lr
	...

0800917c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b082      	sub	sp, #8
 8009180:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8009182:	2300      	movs	r3, #0
 8009184:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8009186:	2300      	movs	r3, #0
 8009188:	603b      	str	r3, [r7, #0]
 800918a:	4b20      	ldr	r3, [pc, #128]	; (800920c <HAL_PWREx_EnableOverDrive+0x90>)
 800918c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800918e:	4a1f      	ldr	r2, [pc, #124]	; (800920c <HAL_PWREx_EnableOverDrive+0x90>)
 8009190:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009194:	6413      	str	r3, [r2, #64]	; 0x40
 8009196:	4b1d      	ldr	r3, [pc, #116]	; (800920c <HAL_PWREx_EnableOverDrive+0x90>)
 8009198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800919a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800919e:	603b      	str	r3, [r7, #0]
 80091a0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80091a2:	4b1b      	ldr	r3, [pc, #108]	; (8009210 <HAL_PWREx_EnableOverDrive+0x94>)
 80091a4:	2201      	movs	r2, #1
 80091a6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80091a8:	f7fd fd8a 	bl	8006cc0 <HAL_GetTick>
 80091ac:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80091ae:	e009      	b.n	80091c4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80091b0:	f7fd fd86 	bl	8006cc0 <HAL_GetTick>
 80091b4:	4602      	mov	r2, r0
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	1ad3      	subs	r3, r2, r3
 80091ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80091be:	d901      	bls.n	80091c4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80091c0:	2303      	movs	r3, #3
 80091c2:	e01f      	b.n	8009204 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80091c4:	4b13      	ldr	r3, [pc, #76]	; (8009214 <HAL_PWREx_EnableOverDrive+0x98>)
 80091c6:	685b      	ldr	r3, [r3, #4]
 80091c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80091cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091d0:	d1ee      	bne.n	80091b0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80091d2:	4b11      	ldr	r3, [pc, #68]	; (8009218 <HAL_PWREx_EnableOverDrive+0x9c>)
 80091d4:	2201      	movs	r2, #1
 80091d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80091d8:	f7fd fd72 	bl	8006cc0 <HAL_GetTick>
 80091dc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80091de:	e009      	b.n	80091f4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80091e0:	f7fd fd6e 	bl	8006cc0 <HAL_GetTick>
 80091e4:	4602      	mov	r2, r0
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	1ad3      	subs	r3, r2, r3
 80091ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80091ee:	d901      	bls.n	80091f4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80091f0:	2303      	movs	r3, #3
 80091f2:	e007      	b.n	8009204 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80091f4:	4b07      	ldr	r3, [pc, #28]	; (8009214 <HAL_PWREx_EnableOverDrive+0x98>)
 80091f6:	685b      	ldr	r3, [r3, #4]
 80091f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009200:	d1ee      	bne.n	80091e0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8009202:	2300      	movs	r3, #0
}
 8009204:	4618      	mov	r0, r3
 8009206:	3708      	adds	r7, #8
 8009208:	46bd      	mov	sp, r7
 800920a:	bd80      	pop	{r7, pc}
 800920c:	40023800 	.word	0x40023800
 8009210:	420e0040 	.word	0x420e0040
 8009214:	40007000 	.word	0x40007000
 8009218:	420e0044 	.word	0x420e0044

0800921c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b084      	sub	sp, #16
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
 8009224:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d101      	bne.n	8009230 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800922c:	2301      	movs	r3, #1
 800922e:	e0cc      	b.n	80093ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009230:	4b68      	ldr	r3, [pc, #416]	; (80093d4 <HAL_RCC_ClockConfig+0x1b8>)
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f003 030f 	and.w	r3, r3, #15
 8009238:	683a      	ldr	r2, [r7, #0]
 800923a:	429a      	cmp	r2, r3
 800923c:	d90c      	bls.n	8009258 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800923e:	4b65      	ldr	r3, [pc, #404]	; (80093d4 <HAL_RCC_ClockConfig+0x1b8>)
 8009240:	683a      	ldr	r2, [r7, #0]
 8009242:	b2d2      	uxtb	r2, r2
 8009244:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009246:	4b63      	ldr	r3, [pc, #396]	; (80093d4 <HAL_RCC_ClockConfig+0x1b8>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f003 030f 	and.w	r3, r3, #15
 800924e:	683a      	ldr	r2, [r7, #0]
 8009250:	429a      	cmp	r2, r3
 8009252:	d001      	beq.n	8009258 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009254:	2301      	movs	r3, #1
 8009256:	e0b8      	b.n	80093ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f003 0302 	and.w	r3, r3, #2
 8009260:	2b00      	cmp	r3, #0
 8009262:	d020      	beq.n	80092a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f003 0304 	and.w	r3, r3, #4
 800926c:	2b00      	cmp	r3, #0
 800926e:	d005      	beq.n	800927c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009270:	4b59      	ldr	r3, [pc, #356]	; (80093d8 <HAL_RCC_ClockConfig+0x1bc>)
 8009272:	689b      	ldr	r3, [r3, #8]
 8009274:	4a58      	ldr	r2, [pc, #352]	; (80093d8 <HAL_RCC_ClockConfig+0x1bc>)
 8009276:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800927a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f003 0308 	and.w	r3, r3, #8
 8009284:	2b00      	cmp	r3, #0
 8009286:	d005      	beq.n	8009294 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009288:	4b53      	ldr	r3, [pc, #332]	; (80093d8 <HAL_RCC_ClockConfig+0x1bc>)
 800928a:	689b      	ldr	r3, [r3, #8]
 800928c:	4a52      	ldr	r2, [pc, #328]	; (80093d8 <HAL_RCC_ClockConfig+0x1bc>)
 800928e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009292:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009294:	4b50      	ldr	r3, [pc, #320]	; (80093d8 <HAL_RCC_ClockConfig+0x1bc>)
 8009296:	689b      	ldr	r3, [r3, #8]
 8009298:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	689b      	ldr	r3, [r3, #8]
 80092a0:	494d      	ldr	r1, [pc, #308]	; (80093d8 <HAL_RCC_ClockConfig+0x1bc>)
 80092a2:	4313      	orrs	r3, r2
 80092a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f003 0301 	and.w	r3, r3, #1
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d044      	beq.n	800933c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	685b      	ldr	r3, [r3, #4]
 80092b6:	2b01      	cmp	r3, #1
 80092b8:	d107      	bne.n	80092ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80092ba:	4b47      	ldr	r3, [pc, #284]	; (80093d8 <HAL_RCC_ClockConfig+0x1bc>)
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d119      	bne.n	80092fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80092c6:	2301      	movs	r3, #1
 80092c8:	e07f      	b.n	80093ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	685b      	ldr	r3, [r3, #4]
 80092ce:	2b02      	cmp	r3, #2
 80092d0:	d003      	beq.n	80092da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80092d6:	2b03      	cmp	r3, #3
 80092d8:	d107      	bne.n	80092ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80092da:	4b3f      	ldr	r3, [pc, #252]	; (80093d8 <HAL_RCC_ClockConfig+0x1bc>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d109      	bne.n	80092fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80092e6:	2301      	movs	r3, #1
 80092e8:	e06f      	b.n	80093ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80092ea:	4b3b      	ldr	r3, [pc, #236]	; (80093d8 <HAL_RCC_ClockConfig+0x1bc>)
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f003 0302 	and.w	r3, r3, #2
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d101      	bne.n	80092fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80092f6:	2301      	movs	r3, #1
 80092f8:	e067      	b.n	80093ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80092fa:	4b37      	ldr	r3, [pc, #220]	; (80093d8 <HAL_RCC_ClockConfig+0x1bc>)
 80092fc:	689b      	ldr	r3, [r3, #8]
 80092fe:	f023 0203 	bic.w	r2, r3, #3
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	685b      	ldr	r3, [r3, #4]
 8009306:	4934      	ldr	r1, [pc, #208]	; (80093d8 <HAL_RCC_ClockConfig+0x1bc>)
 8009308:	4313      	orrs	r3, r2
 800930a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800930c:	f7fd fcd8 	bl	8006cc0 <HAL_GetTick>
 8009310:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009312:	e00a      	b.n	800932a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009314:	f7fd fcd4 	bl	8006cc0 <HAL_GetTick>
 8009318:	4602      	mov	r2, r0
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	1ad3      	subs	r3, r2, r3
 800931e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009322:	4293      	cmp	r3, r2
 8009324:	d901      	bls.n	800932a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009326:	2303      	movs	r3, #3
 8009328:	e04f      	b.n	80093ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800932a:	4b2b      	ldr	r3, [pc, #172]	; (80093d8 <HAL_RCC_ClockConfig+0x1bc>)
 800932c:	689b      	ldr	r3, [r3, #8]
 800932e:	f003 020c 	and.w	r2, r3, #12
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	685b      	ldr	r3, [r3, #4]
 8009336:	009b      	lsls	r3, r3, #2
 8009338:	429a      	cmp	r2, r3
 800933a:	d1eb      	bne.n	8009314 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800933c:	4b25      	ldr	r3, [pc, #148]	; (80093d4 <HAL_RCC_ClockConfig+0x1b8>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f003 030f 	and.w	r3, r3, #15
 8009344:	683a      	ldr	r2, [r7, #0]
 8009346:	429a      	cmp	r2, r3
 8009348:	d20c      	bcs.n	8009364 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800934a:	4b22      	ldr	r3, [pc, #136]	; (80093d4 <HAL_RCC_ClockConfig+0x1b8>)
 800934c:	683a      	ldr	r2, [r7, #0]
 800934e:	b2d2      	uxtb	r2, r2
 8009350:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009352:	4b20      	ldr	r3, [pc, #128]	; (80093d4 <HAL_RCC_ClockConfig+0x1b8>)
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f003 030f 	and.w	r3, r3, #15
 800935a:	683a      	ldr	r2, [r7, #0]
 800935c:	429a      	cmp	r2, r3
 800935e:	d001      	beq.n	8009364 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009360:	2301      	movs	r3, #1
 8009362:	e032      	b.n	80093ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f003 0304 	and.w	r3, r3, #4
 800936c:	2b00      	cmp	r3, #0
 800936e:	d008      	beq.n	8009382 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009370:	4b19      	ldr	r3, [pc, #100]	; (80093d8 <HAL_RCC_ClockConfig+0x1bc>)
 8009372:	689b      	ldr	r3, [r3, #8]
 8009374:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	68db      	ldr	r3, [r3, #12]
 800937c:	4916      	ldr	r1, [pc, #88]	; (80093d8 <HAL_RCC_ClockConfig+0x1bc>)
 800937e:	4313      	orrs	r3, r2
 8009380:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f003 0308 	and.w	r3, r3, #8
 800938a:	2b00      	cmp	r3, #0
 800938c:	d009      	beq.n	80093a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800938e:	4b12      	ldr	r3, [pc, #72]	; (80093d8 <HAL_RCC_ClockConfig+0x1bc>)
 8009390:	689b      	ldr	r3, [r3, #8]
 8009392:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	691b      	ldr	r3, [r3, #16]
 800939a:	00db      	lsls	r3, r3, #3
 800939c:	490e      	ldr	r1, [pc, #56]	; (80093d8 <HAL_RCC_ClockConfig+0x1bc>)
 800939e:	4313      	orrs	r3, r2
 80093a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80093a2:	f000 f821 	bl	80093e8 <HAL_RCC_GetSysClockFreq>
 80093a6:	4601      	mov	r1, r0
 80093a8:	4b0b      	ldr	r3, [pc, #44]	; (80093d8 <HAL_RCC_ClockConfig+0x1bc>)
 80093aa:	689b      	ldr	r3, [r3, #8]
 80093ac:	091b      	lsrs	r3, r3, #4
 80093ae:	f003 030f 	and.w	r3, r3, #15
 80093b2:	4a0a      	ldr	r2, [pc, #40]	; (80093dc <HAL_RCC_ClockConfig+0x1c0>)
 80093b4:	5cd3      	ldrb	r3, [r2, r3]
 80093b6:	fa21 f303 	lsr.w	r3, r1, r3
 80093ba:	4a09      	ldr	r2, [pc, #36]	; (80093e0 <HAL_RCC_ClockConfig+0x1c4>)
 80093bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80093be:	4b09      	ldr	r3, [pc, #36]	; (80093e4 <HAL_RCC_ClockConfig+0x1c8>)
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	4618      	mov	r0, r3
 80093c4:	f7fd fc38 	bl	8006c38 <HAL_InitTick>

  return HAL_OK;
 80093c8:	2300      	movs	r3, #0
}
 80093ca:	4618      	mov	r0, r3
 80093cc:	3710      	adds	r7, #16
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bd80      	pop	{r7, pc}
 80093d2:	bf00      	nop
 80093d4:	40023c00 	.word	0x40023c00
 80093d8:	40023800 	.word	0x40023800
 80093dc:	08017a98 	.word	0x08017a98
 80093e0:	20000000 	.word	0x20000000
 80093e4:	20000004 	.word	0x20000004

080093e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80093e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093ea:	b085      	sub	sp, #20
 80093ec:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80093ee:	2300      	movs	r3, #0
 80093f0:	607b      	str	r3, [r7, #4]
 80093f2:	2300      	movs	r3, #0
 80093f4:	60fb      	str	r3, [r7, #12]
 80093f6:	2300      	movs	r3, #0
 80093f8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80093fa:	2300      	movs	r3, #0
 80093fc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80093fe:	4b63      	ldr	r3, [pc, #396]	; (800958c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009400:	689b      	ldr	r3, [r3, #8]
 8009402:	f003 030c 	and.w	r3, r3, #12
 8009406:	2b04      	cmp	r3, #4
 8009408:	d007      	beq.n	800941a <HAL_RCC_GetSysClockFreq+0x32>
 800940a:	2b08      	cmp	r3, #8
 800940c:	d008      	beq.n	8009420 <HAL_RCC_GetSysClockFreq+0x38>
 800940e:	2b00      	cmp	r3, #0
 8009410:	f040 80b4 	bne.w	800957c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009414:	4b5e      	ldr	r3, [pc, #376]	; (8009590 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8009416:	60bb      	str	r3, [r7, #8]
       break;
 8009418:	e0b3      	b.n	8009582 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800941a:	4b5d      	ldr	r3, [pc, #372]	; (8009590 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800941c:	60bb      	str	r3, [r7, #8]
      break;
 800941e:	e0b0      	b.n	8009582 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009420:	4b5a      	ldr	r3, [pc, #360]	; (800958c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009422:	685b      	ldr	r3, [r3, #4]
 8009424:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009428:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800942a:	4b58      	ldr	r3, [pc, #352]	; (800958c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800942c:	685b      	ldr	r3, [r3, #4]
 800942e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009432:	2b00      	cmp	r3, #0
 8009434:	d04a      	beq.n	80094cc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009436:	4b55      	ldr	r3, [pc, #340]	; (800958c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009438:	685b      	ldr	r3, [r3, #4]
 800943a:	099b      	lsrs	r3, r3, #6
 800943c:	f04f 0400 	mov.w	r4, #0
 8009440:	f240 11ff 	movw	r1, #511	; 0x1ff
 8009444:	f04f 0200 	mov.w	r2, #0
 8009448:	ea03 0501 	and.w	r5, r3, r1
 800944c:	ea04 0602 	and.w	r6, r4, r2
 8009450:	4629      	mov	r1, r5
 8009452:	4632      	mov	r2, r6
 8009454:	f04f 0300 	mov.w	r3, #0
 8009458:	f04f 0400 	mov.w	r4, #0
 800945c:	0154      	lsls	r4, r2, #5
 800945e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8009462:	014b      	lsls	r3, r1, #5
 8009464:	4619      	mov	r1, r3
 8009466:	4622      	mov	r2, r4
 8009468:	1b49      	subs	r1, r1, r5
 800946a:	eb62 0206 	sbc.w	r2, r2, r6
 800946e:	f04f 0300 	mov.w	r3, #0
 8009472:	f04f 0400 	mov.w	r4, #0
 8009476:	0194      	lsls	r4, r2, #6
 8009478:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800947c:	018b      	lsls	r3, r1, #6
 800947e:	1a5b      	subs	r3, r3, r1
 8009480:	eb64 0402 	sbc.w	r4, r4, r2
 8009484:	f04f 0100 	mov.w	r1, #0
 8009488:	f04f 0200 	mov.w	r2, #0
 800948c:	00e2      	lsls	r2, r4, #3
 800948e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8009492:	00d9      	lsls	r1, r3, #3
 8009494:	460b      	mov	r3, r1
 8009496:	4614      	mov	r4, r2
 8009498:	195b      	adds	r3, r3, r5
 800949a:	eb44 0406 	adc.w	r4, r4, r6
 800949e:	f04f 0100 	mov.w	r1, #0
 80094a2:	f04f 0200 	mov.w	r2, #0
 80094a6:	02a2      	lsls	r2, r4, #10
 80094a8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80094ac:	0299      	lsls	r1, r3, #10
 80094ae:	460b      	mov	r3, r1
 80094b0:	4614      	mov	r4, r2
 80094b2:	4618      	mov	r0, r3
 80094b4:	4621      	mov	r1, r4
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	f04f 0400 	mov.w	r4, #0
 80094bc:	461a      	mov	r2, r3
 80094be:	4623      	mov	r3, r4
 80094c0:	f7f7 fbfa 	bl	8000cb8 <__aeabi_uldivmod>
 80094c4:	4603      	mov	r3, r0
 80094c6:	460c      	mov	r4, r1
 80094c8:	60fb      	str	r3, [r7, #12]
 80094ca:	e049      	b.n	8009560 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80094cc:	4b2f      	ldr	r3, [pc, #188]	; (800958c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80094ce:	685b      	ldr	r3, [r3, #4]
 80094d0:	099b      	lsrs	r3, r3, #6
 80094d2:	f04f 0400 	mov.w	r4, #0
 80094d6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80094da:	f04f 0200 	mov.w	r2, #0
 80094de:	ea03 0501 	and.w	r5, r3, r1
 80094e2:	ea04 0602 	and.w	r6, r4, r2
 80094e6:	4629      	mov	r1, r5
 80094e8:	4632      	mov	r2, r6
 80094ea:	f04f 0300 	mov.w	r3, #0
 80094ee:	f04f 0400 	mov.w	r4, #0
 80094f2:	0154      	lsls	r4, r2, #5
 80094f4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80094f8:	014b      	lsls	r3, r1, #5
 80094fa:	4619      	mov	r1, r3
 80094fc:	4622      	mov	r2, r4
 80094fe:	1b49      	subs	r1, r1, r5
 8009500:	eb62 0206 	sbc.w	r2, r2, r6
 8009504:	f04f 0300 	mov.w	r3, #0
 8009508:	f04f 0400 	mov.w	r4, #0
 800950c:	0194      	lsls	r4, r2, #6
 800950e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8009512:	018b      	lsls	r3, r1, #6
 8009514:	1a5b      	subs	r3, r3, r1
 8009516:	eb64 0402 	sbc.w	r4, r4, r2
 800951a:	f04f 0100 	mov.w	r1, #0
 800951e:	f04f 0200 	mov.w	r2, #0
 8009522:	00e2      	lsls	r2, r4, #3
 8009524:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8009528:	00d9      	lsls	r1, r3, #3
 800952a:	460b      	mov	r3, r1
 800952c:	4614      	mov	r4, r2
 800952e:	195b      	adds	r3, r3, r5
 8009530:	eb44 0406 	adc.w	r4, r4, r6
 8009534:	f04f 0100 	mov.w	r1, #0
 8009538:	f04f 0200 	mov.w	r2, #0
 800953c:	02a2      	lsls	r2, r4, #10
 800953e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8009542:	0299      	lsls	r1, r3, #10
 8009544:	460b      	mov	r3, r1
 8009546:	4614      	mov	r4, r2
 8009548:	4618      	mov	r0, r3
 800954a:	4621      	mov	r1, r4
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f04f 0400 	mov.w	r4, #0
 8009552:	461a      	mov	r2, r3
 8009554:	4623      	mov	r3, r4
 8009556:	f7f7 fbaf 	bl	8000cb8 <__aeabi_uldivmod>
 800955a:	4603      	mov	r3, r0
 800955c:	460c      	mov	r4, r1
 800955e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009560:	4b0a      	ldr	r3, [pc, #40]	; (800958c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009562:	685b      	ldr	r3, [r3, #4]
 8009564:	0c1b      	lsrs	r3, r3, #16
 8009566:	f003 0303 	and.w	r3, r3, #3
 800956a:	3301      	adds	r3, #1
 800956c:	005b      	lsls	r3, r3, #1
 800956e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8009570:	68fa      	ldr	r2, [r7, #12]
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	fbb2 f3f3 	udiv	r3, r2, r3
 8009578:	60bb      	str	r3, [r7, #8]
      break;
 800957a:	e002      	b.n	8009582 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800957c:	4b04      	ldr	r3, [pc, #16]	; (8009590 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800957e:	60bb      	str	r3, [r7, #8]
      break;
 8009580:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009582:	68bb      	ldr	r3, [r7, #8]
}
 8009584:	4618      	mov	r0, r3
 8009586:	3714      	adds	r7, #20
 8009588:	46bd      	mov	sp, r7
 800958a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800958c:	40023800 	.word	0x40023800
 8009590:	00f42400 	.word	0x00f42400

08009594 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009594:	b480      	push	{r7}
 8009596:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009598:	4b03      	ldr	r3, [pc, #12]	; (80095a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800959a:	681b      	ldr	r3, [r3, #0]
}
 800959c:	4618      	mov	r0, r3
 800959e:	46bd      	mov	sp, r7
 80095a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a4:	4770      	bx	lr
 80095a6:	bf00      	nop
 80095a8:	20000000 	.word	0x20000000

080095ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80095b0:	f7ff fff0 	bl	8009594 <HAL_RCC_GetHCLKFreq>
 80095b4:	4601      	mov	r1, r0
 80095b6:	4b05      	ldr	r3, [pc, #20]	; (80095cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80095b8:	689b      	ldr	r3, [r3, #8]
 80095ba:	0a9b      	lsrs	r3, r3, #10
 80095bc:	f003 0307 	and.w	r3, r3, #7
 80095c0:	4a03      	ldr	r2, [pc, #12]	; (80095d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80095c2:	5cd3      	ldrb	r3, [r2, r3]
 80095c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	bd80      	pop	{r7, pc}
 80095cc:	40023800 	.word	0x40023800
 80095d0:	08017aa8 	.word	0x08017aa8

080095d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80095d8:	f7ff ffdc 	bl	8009594 <HAL_RCC_GetHCLKFreq>
 80095dc:	4601      	mov	r1, r0
 80095de:	4b05      	ldr	r3, [pc, #20]	; (80095f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80095e0:	689b      	ldr	r3, [r3, #8]
 80095e2:	0b5b      	lsrs	r3, r3, #13
 80095e4:	f003 0307 	and.w	r3, r3, #7
 80095e8:	4a03      	ldr	r2, [pc, #12]	; (80095f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80095ea:	5cd3      	ldrb	r3, [r2, r3]
 80095ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80095f0:	4618      	mov	r0, r3
 80095f2:	bd80      	pop	{r7, pc}
 80095f4:	40023800 	.word	0x40023800
 80095f8:	08017aa8 	.word	0x08017aa8

080095fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b088      	sub	sp, #32
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009604:	2300      	movs	r3, #0
 8009606:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 8009608:	2300      	movs	r3, #0
 800960a:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 800960c:	2300      	movs	r3, #0
 800960e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 8009610:	2300      	movs	r3, #0
 8009612:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 8009614:	2300      	movs	r3, #0
 8009616:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009620:	2b00      	cmp	r3, #0
 8009622:	d00a      	beq.n	800963a <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8009624:	4b66      	ldr	r3, [pc, #408]	; (80097c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009626:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800962a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009632:	4963      	ldr	r1, [pc, #396]	; (80097c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009634:	4313      	orrs	r3, r2
 8009636:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009642:	2b00      	cmp	r3, #0
 8009644:	d00a      	beq.n	800965c <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8009646:	4b5e      	ldr	r3, [pc, #376]	; (80097c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009648:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800964c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009654:	495a      	ldr	r1, [pc, #360]	; (80097c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009656:	4313      	orrs	r3, r2
 8009658:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f003 0301 	and.w	r3, r3, #1
 8009664:	2b00      	cmp	r3, #0
 8009666:	d10b      	bne.n	8009680 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8009670:	2b00      	cmp	r3, #0
 8009672:	d105      	bne.n	8009680 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800967c:	2b00      	cmp	r3, #0
 800967e:	d075      	beq.n	800976c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009680:	4b50      	ldr	r3, [pc, #320]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8009682:	2200      	movs	r2, #0
 8009684:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009686:	f7fd fb1b 	bl	8006cc0 <HAL_GetTick>
 800968a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800968c:	e008      	b.n	80096a0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800968e:	f7fd fb17 	bl	8006cc0 <HAL_GetTick>
 8009692:	4602      	mov	r2, r0
 8009694:	69fb      	ldr	r3, [r7, #28]
 8009696:	1ad3      	subs	r3, r2, r3
 8009698:	2b02      	cmp	r3, #2
 800969a:	d901      	bls.n	80096a0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800969c:	2303      	movs	r3, #3
 800969e:	e1dc      	b.n	8009a5a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80096a0:	4b47      	ldr	r3, [pc, #284]	; (80097c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d1f0      	bne.n	800968e <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	f003 0301 	and.w	r3, r3, #1
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d009      	beq.n	80096cc <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	685b      	ldr	r3, [r3, #4]
 80096bc:	019a      	lsls	r2, r3, #6
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	689b      	ldr	r3, [r3, #8]
 80096c2:	071b      	lsls	r3, r3, #28
 80096c4:	493e      	ldr	r1, [pc, #248]	; (80097c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80096c6:	4313      	orrs	r3, r2
 80096c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f003 0302 	and.w	r3, r3, #2
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d01f      	beq.n	8009718 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80096d8:	4b39      	ldr	r3, [pc, #228]	; (80097c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80096da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80096de:	0f1b      	lsrs	r3, r3, #28
 80096e0:	f003 0307 	and.w	r3, r3, #7
 80096e4:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	685b      	ldr	r3, [r3, #4]
 80096ea:	019a      	lsls	r2, r3, #6
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	68db      	ldr	r3, [r3, #12]
 80096f0:	061b      	lsls	r3, r3, #24
 80096f2:	431a      	orrs	r2, r3
 80096f4:	69bb      	ldr	r3, [r7, #24]
 80096f6:	071b      	lsls	r3, r3, #28
 80096f8:	4931      	ldr	r1, [pc, #196]	; (80097c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80096fa:	4313      	orrs	r3, r2
 80096fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8009700:	4b2f      	ldr	r3, [pc, #188]	; (80097c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009702:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009706:	f023 021f 	bic.w	r2, r3, #31
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6a1b      	ldr	r3, [r3, #32]
 800970e:	3b01      	subs	r3, #1
 8009710:	492b      	ldr	r1, [pc, #172]	; (80097c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009712:	4313      	orrs	r3, r2
 8009714:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009720:	2b00      	cmp	r3, #0
 8009722:	d00d      	beq.n	8009740 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	685b      	ldr	r3, [r3, #4]
 8009728:	019a      	lsls	r2, r3, #6
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	68db      	ldr	r3, [r3, #12]
 800972e:	061b      	lsls	r3, r3, #24
 8009730:	431a      	orrs	r2, r3
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	689b      	ldr	r3, [r3, #8]
 8009736:	071b      	lsls	r3, r3, #28
 8009738:	4921      	ldr	r1, [pc, #132]	; (80097c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800973a:	4313      	orrs	r3, r2
 800973c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009740:	4b20      	ldr	r3, [pc, #128]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8009742:	2201      	movs	r2, #1
 8009744:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009746:	f7fd fabb 	bl	8006cc0 <HAL_GetTick>
 800974a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800974c:	e008      	b.n	8009760 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800974e:	f7fd fab7 	bl	8006cc0 <HAL_GetTick>
 8009752:	4602      	mov	r2, r0
 8009754:	69fb      	ldr	r3, [r7, #28]
 8009756:	1ad3      	subs	r3, r2, r3
 8009758:	2b02      	cmp	r3, #2
 800975a:	d901      	bls.n	8009760 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800975c:	2303      	movs	r3, #3
 800975e:	e17c      	b.n	8009a5a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009760:	4b17      	ldr	r3, [pc, #92]	; (80097c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009768:	2b00      	cmp	r3, #0
 800976a:	d0f0      	beq.n	800974e <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f003 0304 	and.w	r3, r3, #4
 8009774:	2b00      	cmp	r3, #0
 8009776:	d112      	bne.n	800979e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8009780:	2b00      	cmp	r3, #0
 8009782:	d10c      	bne.n	800979e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800978c:	2b00      	cmp	r3, #0
 800978e:	f000 80ce 	beq.w	800992e <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8009796:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800979a:	f040 80c8 	bne.w	800992e <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800979e:	4b0a      	ldr	r3, [pc, #40]	; (80097c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80097a0:	2200      	movs	r2, #0
 80097a2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80097a4:	f7fd fa8c 	bl	8006cc0 <HAL_GetTick>
 80097a8:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80097aa:	e00f      	b.n	80097cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80097ac:	f7fd fa88 	bl	8006cc0 <HAL_GetTick>
 80097b0:	4602      	mov	r2, r0
 80097b2:	69fb      	ldr	r3, [r7, #28]
 80097b4:	1ad3      	subs	r3, r2, r3
 80097b6:	2b02      	cmp	r3, #2
 80097b8:	d908      	bls.n	80097cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80097ba:	2303      	movs	r3, #3
 80097bc:	e14d      	b.n	8009a5a <HAL_RCCEx_PeriphCLKConfig+0x45e>
 80097be:	bf00      	nop
 80097c0:	40023800 	.word	0x40023800
 80097c4:	42470068 	.word	0x42470068
 80097c8:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80097cc:	4ba5      	ldr	r3, [pc, #660]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80097d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097d8:	d0e8      	beq.n	80097ac <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f003 0304 	and.w	r3, r3, #4
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d02e      	beq.n	8009844 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80097e6:	4b9f      	ldr	r3, [pc, #636]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80097e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097ec:	0c1b      	lsrs	r3, r3, #16
 80097ee:	f003 0303 	and.w	r3, r3, #3
 80097f2:	3301      	adds	r3, #1
 80097f4:	005b      	lsls	r3, r3, #1
 80097f6:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80097f8:	4b9a      	ldr	r3, [pc, #616]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80097fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097fe:	0f1b      	lsrs	r3, r3, #28
 8009800:	f003 0307 	and.w	r3, r3, #7
 8009804:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	691b      	ldr	r3, [r3, #16]
 800980a:	019a      	lsls	r2, r3, #6
 800980c:	697b      	ldr	r3, [r7, #20]
 800980e:	085b      	lsrs	r3, r3, #1
 8009810:	3b01      	subs	r3, #1
 8009812:	041b      	lsls	r3, r3, #16
 8009814:	431a      	orrs	r2, r3
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	699b      	ldr	r3, [r3, #24]
 800981a:	061b      	lsls	r3, r3, #24
 800981c:	431a      	orrs	r2, r3
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	071b      	lsls	r3, r3, #28
 8009822:	4990      	ldr	r1, [pc, #576]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009824:	4313      	orrs	r3, r2
 8009826:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800982a:	4b8e      	ldr	r3, [pc, #568]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800982c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009830:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009838:	3b01      	subs	r3, #1
 800983a:	021b      	lsls	r3, r3, #8
 800983c:	4989      	ldr	r1, [pc, #548]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800983e:	4313      	orrs	r3, r2
 8009840:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	f003 0308 	and.w	r3, r3, #8
 800984c:	2b00      	cmp	r3, #0
 800984e:	d02c      	beq.n	80098aa <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8009850:	4b84      	ldr	r3, [pc, #528]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009856:	0c1b      	lsrs	r3, r3, #16
 8009858:	f003 0303 	and.w	r3, r3, #3
 800985c:	3301      	adds	r3, #1
 800985e:	005b      	lsls	r3, r3, #1
 8009860:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009862:	4b80      	ldr	r3, [pc, #512]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009868:	0e1b      	lsrs	r3, r3, #24
 800986a:	f003 030f 	and.w	r3, r3, #15
 800986e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	691b      	ldr	r3, [r3, #16]
 8009874:	019a      	lsls	r2, r3, #6
 8009876:	697b      	ldr	r3, [r7, #20]
 8009878:	085b      	lsrs	r3, r3, #1
 800987a:	3b01      	subs	r3, #1
 800987c:	041b      	lsls	r3, r3, #16
 800987e:	431a      	orrs	r2, r3
 8009880:	693b      	ldr	r3, [r7, #16]
 8009882:	061b      	lsls	r3, r3, #24
 8009884:	431a      	orrs	r2, r3
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	69db      	ldr	r3, [r3, #28]
 800988a:	071b      	lsls	r3, r3, #28
 800988c:	4975      	ldr	r1, [pc, #468]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800988e:	4313      	orrs	r3, r2
 8009890:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8009894:	4b73      	ldr	r3, [pc, #460]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009896:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800989a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098a2:	4970      	ldr	r1, [pc, #448]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80098a4:	4313      	orrs	r3, r2
 80098a6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d024      	beq.n	8009900 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 80098ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80098be:	d11f      	bne.n	8009900 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80098c0:	4b68      	ldr	r3, [pc, #416]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80098c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098c6:	0e1b      	lsrs	r3, r3, #24
 80098c8:	f003 030f 	and.w	r3, r3, #15
 80098cc:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80098ce:	4b65      	ldr	r3, [pc, #404]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80098d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098d4:	0f1b      	lsrs	r3, r3, #28
 80098d6:	f003 0307 	and.w	r3, r3, #7
 80098da:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	691b      	ldr	r3, [r3, #16]
 80098e0:	019a      	lsls	r2, r3, #6
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	695b      	ldr	r3, [r3, #20]
 80098e6:	085b      	lsrs	r3, r3, #1
 80098e8:	3b01      	subs	r3, #1
 80098ea:	041b      	lsls	r3, r3, #16
 80098ec:	431a      	orrs	r2, r3
 80098ee:	693b      	ldr	r3, [r7, #16]
 80098f0:	061b      	lsls	r3, r3, #24
 80098f2:	431a      	orrs	r2, r3
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	071b      	lsls	r3, r3, #28
 80098f8:	495a      	ldr	r1, [pc, #360]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80098fa:	4313      	orrs	r3, r2
 80098fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009900:	4b59      	ldr	r3, [pc, #356]	; (8009a68 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8009902:	2201      	movs	r2, #1
 8009904:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009906:	f7fd f9db 	bl	8006cc0 <HAL_GetTick>
 800990a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800990c:	e008      	b.n	8009920 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800990e:	f7fd f9d7 	bl	8006cc0 <HAL_GetTick>
 8009912:	4602      	mov	r2, r0
 8009914:	69fb      	ldr	r3, [r7, #28]
 8009916:	1ad3      	subs	r3, r2, r3
 8009918:	2b02      	cmp	r3, #2
 800991a:	d901      	bls.n	8009920 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800991c:	2303      	movs	r3, #3
 800991e:	e09c      	b.n	8009a5a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009920:	4b50      	ldr	r3, [pc, #320]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009928:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800992c:	d1ef      	bne.n	800990e <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	f003 0320 	and.w	r3, r3, #32
 8009936:	2b00      	cmp	r3, #0
 8009938:	f000 8083 	beq.w	8009a42 <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800993c:	2300      	movs	r3, #0
 800993e:	60bb      	str	r3, [r7, #8]
 8009940:	4b48      	ldr	r3, [pc, #288]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009944:	4a47      	ldr	r2, [pc, #284]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009946:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800994a:	6413      	str	r3, [r2, #64]	; 0x40
 800994c:	4b45      	ldr	r3, [pc, #276]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800994e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009950:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009954:	60bb      	str	r3, [r7, #8]
 8009956:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8009958:	4b44      	ldr	r3, [pc, #272]	; (8009a6c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	4a43      	ldr	r2, [pc, #268]	; (8009a6c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800995e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009962:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009964:	f7fd f9ac 	bl	8006cc0 <HAL_GetTick>
 8009968:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800996a:	e008      	b.n	800997e <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800996c:	f7fd f9a8 	bl	8006cc0 <HAL_GetTick>
 8009970:	4602      	mov	r2, r0
 8009972:	69fb      	ldr	r3, [r7, #28]
 8009974:	1ad3      	subs	r3, r2, r3
 8009976:	2b02      	cmp	r3, #2
 8009978:	d901      	bls.n	800997e <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 800997a:	2303      	movs	r3, #3
 800997c:	e06d      	b.n	8009a5a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800997e:	4b3b      	ldr	r3, [pc, #236]	; (8009a6c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009986:	2b00      	cmp	r3, #0
 8009988:	d0f0      	beq.n	800996c <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800998a:	4b36      	ldr	r3, [pc, #216]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800998c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800998e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009992:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009994:	69bb      	ldr	r3, [r7, #24]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d02f      	beq.n	80099fa <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800999e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80099a2:	69ba      	ldr	r2, [r7, #24]
 80099a4:	429a      	cmp	r2, r3
 80099a6:	d028      	beq.n	80099fa <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80099a8:	4b2e      	ldr	r3, [pc, #184]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80099aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80099b0:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80099b2:	4b2f      	ldr	r3, [pc, #188]	; (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80099b4:	2201      	movs	r2, #1
 80099b6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80099b8:	4b2d      	ldr	r3, [pc, #180]	; (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80099ba:	2200      	movs	r2, #0
 80099bc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80099be:	4a29      	ldr	r2, [pc, #164]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80099c0:	69bb      	ldr	r3, [r7, #24]
 80099c2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80099c4:	4b27      	ldr	r3, [pc, #156]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80099c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099c8:	f003 0301 	and.w	r3, r3, #1
 80099cc:	2b01      	cmp	r3, #1
 80099ce:	d114      	bne.n	80099fa <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80099d0:	f7fd f976 	bl	8006cc0 <HAL_GetTick>
 80099d4:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80099d6:	e00a      	b.n	80099ee <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80099d8:	f7fd f972 	bl	8006cc0 <HAL_GetTick>
 80099dc:	4602      	mov	r2, r0
 80099de:	69fb      	ldr	r3, [r7, #28]
 80099e0:	1ad3      	subs	r3, r2, r3
 80099e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80099e6:	4293      	cmp	r3, r2
 80099e8:	d901      	bls.n	80099ee <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 80099ea:	2303      	movs	r3, #3
 80099ec:	e035      	b.n	8009a5a <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80099ee:	4b1d      	ldr	r3, [pc, #116]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80099f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099f2:	f003 0302 	and.w	r3, r3, #2
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d0ee      	beq.n	80099d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009a06:	d10d      	bne.n	8009a24 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8009a08:	4b16      	ldr	r3, [pc, #88]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009a0a:	689b      	ldr	r3, [r3, #8]
 8009a0c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a14:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009a18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a1c:	4911      	ldr	r1, [pc, #68]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009a1e:	4313      	orrs	r3, r2
 8009a20:	608b      	str	r3, [r1, #8]
 8009a22:	e005      	b.n	8009a30 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8009a24:	4b0f      	ldr	r3, [pc, #60]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009a26:	689b      	ldr	r3, [r3, #8]
 8009a28:	4a0e      	ldr	r2, [pc, #56]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009a2a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8009a2e:	6093      	str	r3, [r2, #8]
 8009a30:	4b0c      	ldr	r3, [pc, #48]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009a32:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009a3c:	4909      	ldr	r1, [pc, #36]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009a3e:	4313      	orrs	r3, r2
 8009a40:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f003 0310 	and.w	r3, r3, #16
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d004      	beq.n	8009a58 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8009a54:	4b07      	ldr	r3, [pc, #28]	; (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 8009a56:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8009a58:	2300      	movs	r3, #0
}
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	3720      	adds	r7, #32
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	bd80      	pop	{r7, pc}
 8009a62:	bf00      	nop
 8009a64:	40023800 	.word	0x40023800
 8009a68:	42470070 	.word	0x42470070
 8009a6c:	40007000 	.word	0x40007000
 8009a70:	42470e40 	.word	0x42470e40
 8009a74:	424711e0 	.word	0x424711e0

08009a78 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b086      	sub	sp, #24
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009a80:	2300      	movs	r3, #0
 8009a82:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f003 0301 	and.w	r3, r3, #1
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d075      	beq.n	8009b7c <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8009a90:	4ba2      	ldr	r3, [pc, #648]	; (8009d1c <HAL_RCC_OscConfig+0x2a4>)
 8009a92:	689b      	ldr	r3, [r3, #8]
 8009a94:	f003 030c 	and.w	r3, r3, #12
 8009a98:	2b04      	cmp	r3, #4
 8009a9a:	d00c      	beq.n	8009ab6 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009a9c:	4b9f      	ldr	r3, [pc, #636]	; (8009d1c <HAL_RCC_OscConfig+0x2a4>)
 8009a9e:	689b      	ldr	r3, [r3, #8]
 8009aa0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8009aa4:	2b08      	cmp	r3, #8
 8009aa6:	d112      	bne.n	8009ace <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009aa8:	4b9c      	ldr	r3, [pc, #624]	; (8009d1c <HAL_RCC_OscConfig+0x2a4>)
 8009aaa:	685b      	ldr	r3, [r3, #4]
 8009aac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009ab0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009ab4:	d10b      	bne.n	8009ace <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009ab6:	4b99      	ldr	r3, [pc, #612]	; (8009d1c <HAL_RCC_OscConfig+0x2a4>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d05b      	beq.n	8009b7a <HAL_RCC_OscConfig+0x102>
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	685b      	ldr	r3, [r3, #4]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d157      	bne.n	8009b7a <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8009aca:	2301      	movs	r3, #1
 8009acc:	e20b      	b.n	8009ee6 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	685b      	ldr	r3, [r3, #4]
 8009ad2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ad6:	d106      	bne.n	8009ae6 <HAL_RCC_OscConfig+0x6e>
 8009ad8:	4b90      	ldr	r3, [pc, #576]	; (8009d1c <HAL_RCC_OscConfig+0x2a4>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	4a8f      	ldr	r2, [pc, #572]	; (8009d1c <HAL_RCC_OscConfig+0x2a4>)
 8009ade:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009ae2:	6013      	str	r3, [r2, #0]
 8009ae4:	e01d      	b.n	8009b22 <HAL_RCC_OscConfig+0xaa>
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	685b      	ldr	r3, [r3, #4]
 8009aea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009aee:	d10c      	bne.n	8009b0a <HAL_RCC_OscConfig+0x92>
 8009af0:	4b8a      	ldr	r3, [pc, #552]	; (8009d1c <HAL_RCC_OscConfig+0x2a4>)
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	4a89      	ldr	r2, [pc, #548]	; (8009d1c <HAL_RCC_OscConfig+0x2a4>)
 8009af6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009afa:	6013      	str	r3, [r2, #0]
 8009afc:	4b87      	ldr	r3, [pc, #540]	; (8009d1c <HAL_RCC_OscConfig+0x2a4>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	4a86      	ldr	r2, [pc, #536]	; (8009d1c <HAL_RCC_OscConfig+0x2a4>)
 8009b02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009b06:	6013      	str	r3, [r2, #0]
 8009b08:	e00b      	b.n	8009b22 <HAL_RCC_OscConfig+0xaa>
 8009b0a:	4b84      	ldr	r3, [pc, #528]	; (8009d1c <HAL_RCC_OscConfig+0x2a4>)
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	4a83      	ldr	r2, [pc, #524]	; (8009d1c <HAL_RCC_OscConfig+0x2a4>)
 8009b10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009b14:	6013      	str	r3, [r2, #0]
 8009b16:	4b81      	ldr	r3, [pc, #516]	; (8009d1c <HAL_RCC_OscConfig+0x2a4>)
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	4a80      	ldr	r2, [pc, #512]	; (8009d1c <HAL_RCC_OscConfig+0x2a4>)
 8009b1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009b20:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	685b      	ldr	r3, [r3, #4]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d013      	beq.n	8009b52 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b2a:	f7fd f8c9 	bl	8006cc0 <HAL_GetTick>
 8009b2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009b30:	e008      	b.n	8009b44 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009b32:	f7fd f8c5 	bl	8006cc0 <HAL_GetTick>
 8009b36:	4602      	mov	r2, r0
 8009b38:	693b      	ldr	r3, [r7, #16]
 8009b3a:	1ad3      	subs	r3, r2, r3
 8009b3c:	2b64      	cmp	r3, #100	; 0x64
 8009b3e:	d901      	bls.n	8009b44 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8009b40:	2303      	movs	r3, #3
 8009b42:	e1d0      	b.n	8009ee6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009b44:	4b75      	ldr	r3, [pc, #468]	; (8009d1c <HAL_RCC_OscConfig+0x2a4>)
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d0f0      	beq.n	8009b32 <HAL_RCC_OscConfig+0xba>
 8009b50:	e014      	b.n	8009b7c <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b52:	f7fd f8b5 	bl	8006cc0 <HAL_GetTick>
 8009b56:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009b58:	e008      	b.n	8009b6c <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009b5a:	f7fd f8b1 	bl	8006cc0 <HAL_GetTick>
 8009b5e:	4602      	mov	r2, r0
 8009b60:	693b      	ldr	r3, [r7, #16]
 8009b62:	1ad3      	subs	r3, r2, r3
 8009b64:	2b64      	cmp	r3, #100	; 0x64
 8009b66:	d901      	bls.n	8009b6c <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8009b68:	2303      	movs	r3, #3
 8009b6a:	e1bc      	b.n	8009ee6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009b6c:	4b6b      	ldr	r3, [pc, #428]	; (8009d1c <HAL_RCC_OscConfig+0x2a4>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d1f0      	bne.n	8009b5a <HAL_RCC_OscConfig+0xe2>
 8009b78:	e000      	b.n	8009b7c <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009b7a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	f003 0302 	and.w	r3, r3, #2
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d063      	beq.n	8009c50 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8009b88:	4b64      	ldr	r3, [pc, #400]	; (8009d1c <HAL_RCC_OscConfig+0x2a4>)
 8009b8a:	689b      	ldr	r3, [r3, #8]
 8009b8c:	f003 030c 	and.w	r3, r3, #12
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d00b      	beq.n	8009bac <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009b94:	4b61      	ldr	r3, [pc, #388]	; (8009d1c <HAL_RCC_OscConfig+0x2a4>)
 8009b96:	689b      	ldr	r3, [r3, #8]
 8009b98:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8009b9c:	2b08      	cmp	r3, #8
 8009b9e:	d11c      	bne.n	8009bda <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009ba0:	4b5e      	ldr	r3, [pc, #376]	; (8009d1c <HAL_RCC_OscConfig+0x2a4>)
 8009ba2:	685b      	ldr	r3, [r3, #4]
 8009ba4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d116      	bne.n	8009bda <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009bac:	4b5b      	ldr	r3, [pc, #364]	; (8009d1c <HAL_RCC_OscConfig+0x2a4>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	f003 0302 	and.w	r3, r3, #2
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d005      	beq.n	8009bc4 <HAL_RCC_OscConfig+0x14c>
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	68db      	ldr	r3, [r3, #12]
 8009bbc:	2b01      	cmp	r3, #1
 8009bbe:	d001      	beq.n	8009bc4 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8009bc0:	2301      	movs	r3, #1
 8009bc2:	e190      	b.n	8009ee6 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009bc4:	4b55      	ldr	r3, [pc, #340]	; (8009d1c <HAL_RCC_OscConfig+0x2a4>)
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	691b      	ldr	r3, [r3, #16]
 8009bd0:	00db      	lsls	r3, r3, #3
 8009bd2:	4952      	ldr	r1, [pc, #328]	; (8009d1c <HAL_RCC_OscConfig+0x2a4>)
 8009bd4:	4313      	orrs	r3, r2
 8009bd6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009bd8:	e03a      	b.n	8009c50 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	68db      	ldr	r3, [r3, #12]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d020      	beq.n	8009c24 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009be2:	4b4f      	ldr	r3, [pc, #316]	; (8009d20 <HAL_RCC_OscConfig+0x2a8>)
 8009be4:	2201      	movs	r2, #1
 8009be6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009be8:	f7fd f86a 	bl	8006cc0 <HAL_GetTick>
 8009bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009bee:	e008      	b.n	8009c02 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009bf0:	f7fd f866 	bl	8006cc0 <HAL_GetTick>
 8009bf4:	4602      	mov	r2, r0
 8009bf6:	693b      	ldr	r3, [r7, #16]
 8009bf8:	1ad3      	subs	r3, r2, r3
 8009bfa:	2b02      	cmp	r3, #2
 8009bfc:	d901      	bls.n	8009c02 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8009bfe:	2303      	movs	r3, #3
 8009c00:	e171      	b.n	8009ee6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009c02:	4b46      	ldr	r3, [pc, #280]	; (8009d1c <HAL_RCC_OscConfig+0x2a4>)
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	f003 0302 	and.w	r3, r3, #2
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d0f0      	beq.n	8009bf0 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009c0e:	4b43      	ldr	r3, [pc, #268]	; (8009d1c <HAL_RCC_OscConfig+0x2a4>)
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	691b      	ldr	r3, [r3, #16]
 8009c1a:	00db      	lsls	r3, r3, #3
 8009c1c:	493f      	ldr	r1, [pc, #252]	; (8009d1c <HAL_RCC_OscConfig+0x2a4>)
 8009c1e:	4313      	orrs	r3, r2
 8009c20:	600b      	str	r3, [r1, #0]
 8009c22:	e015      	b.n	8009c50 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009c24:	4b3e      	ldr	r3, [pc, #248]	; (8009d20 <HAL_RCC_OscConfig+0x2a8>)
 8009c26:	2200      	movs	r2, #0
 8009c28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c2a:	f7fd f849 	bl	8006cc0 <HAL_GetTick>
 8009c2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009c30:	e008      	b.n	8009c44 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009c32:	f7fd f845 	bl	8006cc0 <HAL_GetTick>
 8009c36:	4602      	mov	r2, r0
 8009c38:	693b      	ldr	r3, [r7, #16]
 8009c3a:	1ad3      	subs	r3, r2, r3
 8009c3c:	2b02      	cmp	r3, #2
 8009c3e:	d901      	bls.n	8009c44 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8009c40:	2303      	movs	r3, #3
 8009c42:	e150      	b.n	8009ee6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009c44:	4b35      	ldr	r3, [pc, #212]	; (8009d1c <HAL_RCC_OscConfig+0x2a4>)
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	f003 0302 	and.w	r3, r3, #2
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d1f0      	bne.n	8009c32 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	f003 0308 	and.w	r3, r3, #8
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d030      	beq.n	8009cbe <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	695b      	ldr	r3, [r3, #20]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d016      	beq.n	8009c92 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009c64:	4b2f      	ldr	r3, [pc, #188]	; (8009d24 <HAL_RCC_OscConfig+0x2ac>)
 8009c66:	2201      	movs	r2, #1
 8009c68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c6a:	f7fd f829 	bl	8006cc0 <HAL_GetTick>
 8009c6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009c70:	e008      	b.n	8009c84 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009c72:	f7fd f825 	bl	8006cc0 <HAL_GetTick>
 8009c76:	4602      	mov	r2, r0
 8009c78:	693b      	ldr	r3, [r7, #16]
 8009c7a:	1ad3      	subs	r3, r2, r3
 8009c7c:	2b02      	cmp	r3, #2
 8009c7e:	d901      	bls.n	8009c84 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8009c80:	2303      	movs	r3, #3
 8009c82:	e130      	b.n	8009ee6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009c84:	4b25      	ldr	r3, [pc, #148]	; (8009d1c <HAL_RCC_OscConfig+0x2a4>)
 8009c86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c88:	f003 0302 	and.w	r3, r3, #2
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d0f0      	beq.n	8009c72 <HAL_RCC_OscConfig+0x1fa>
 8009c90:	e015      	b.n	8009cbe <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009c92:	4b24      	ldr	r3, [pc, #144]	; (8009d24 <HAL_RCC_OscConfig+0x2ac>)
 8009c94:	2200      	movs	r2, #0
 8009c96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c98:	f7fd f812 	bl	8006cc0 <HAL_GetTick>
 8009c9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009c9e:	e008      	b.n	8009cb2 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009ca0:	f7fd f80e 	bl	8006cc0 <HAL_GetTick>
 8009ca4:	4602      	mov	r2, r0
 8009ca6:	693b      	ldr	r3, [r7, #16]
 8009ca8:	1ad3      	subs	r3, r2, r3
 8009caa:	2b02      	cmp	r3, #2
 8009cac:	d901      	bls.n	8009cb2 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 8009cae:	2303      	movs	r3, #3
 8009cb0:	e119      	b.n	8009ee6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009cb2:	4b1a      	ldr	r3, [pc, #104]	; (8009d1c <HAL_RCC_OscConfig+0x2a4>)
 8009cb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009cb6:	f003 0302 	and.w	r3, r3, #2
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d1f0      	bne.n	8009ca0 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	f003 0304 	and.w	r3, r3, #4
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	f000 809f 	beq.w	8009e0a <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009ccc:	2300      	movs	r3, #0
 8009cce:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009cd0:	4b12      	ldr	r3, [pc, #72]	; (8009d1c <HAL_RCC_OscConfig+0x2a4>)
 8009cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d10f      	bne.n	8009cfc <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009cdc:	2300      	movs	r3, #0
 8009cde:	60fb      	str	r3, [r7, #12]
 8009ce0:	4b0e      	ldr	r3, [pc, #56]	; (8009d1c <HAL_RCC_OscConfig+0x2a4>)
 8009ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ce4:	4a0d      	ldr	r2, [pc, #52]	; (8009d1c <HAL_RCC_OscConfig+0x2a4>)
 8009ce6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009cea:	6413      	str	r3, [r2, #64]	; 0x40
 8009cec:	4b0b      	ldr	r3, [pc, #44]	; (8009d1c <HAL_RCC_OscConfig+0x2a4>)
 8009cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009cf4:	60fb      	str	r3, [r7, #12]
 8009cf6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8009cf8:	2301      	movs	r3, #1
 8009cfa:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009cfc:	4b0a      	ldr	r3, [pc, #40]	; (8009d28 <HAL_RCC_OscConfig+0x2b0>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d120      	bne.n	8009d4a <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009d08:	4b07      	ldr	r3, [pc, #28]	; (8009d28 <HAL_RCC_OscConfig+0x2b0>)
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	4a06      	ldr	r2, [pc, #24]	; (8009d28 <HAL_RCC_OscConfig+0x2b0>)
 8009d0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d12:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009d14:	f7fc ffd4 	bl	8006cc0 <HAL_GetTick>
 8009d18:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009d1a:	e010      	b.n	8009d3e <HAL_RCC_OscConfig+0x2c6>
 8009d1c:	40023800 	.word	0x40023800
 8009d20:	42470000 	.word	0x42470000
 8009d24:	42470e80 	.word	0x42470e80
 8009d28:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009d2c:	f7fc ffc8 	bl	8006cc0 <HAL_GetTick>
 8009d30:	4602      	mov	r2, r0
 8009d32:	693b      	ldr	r3, [r7, #16]
 8009d34:	1ad3      	subs	r3, r2, r3
 8009d36:	2b02      	cmp	r3, #2
 8009d38:	d901      	bls.n	8009d3e <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 8009d3a:	2303      	movs	r3, #3
 8009d3c:	e0d3      	b.n	8009ee6 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009d3e:	4b6c      	ldr	r3, [pc, #432]	; (8009ef0 <HAL_RCC_OscConfig+0x478>)
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d0f0      	beq.n	8009d2c <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	689b      	ldr	r3, [r3, #8]
 8009d4e:	2b01      	cmp	r3, #1
 8009d50:	d106      	bne.n	8009d60 <HAL_RCC_OscConfig+0x2e8>
 8009d52:	4b68      	ldr	r3, [pc, #416]	; (8009ef4 <HAL_RCC_OscConfig+0x47c>)
 8009d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d56:	4a67      	ldr	r2, [pc, #412]	; (8009ef4 <HAL_RCC_OscConfig+0x47c>)
 8009d58:	f043 0301 	orr.w	r3, r3, #1
 8009d5c:	6713      	str	r3, [r2, #112]	; 0x70
 8009d5e:	e01c      	b.n	8009d9a <HAL_RCC_OscConfig+0x322>
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	689b      	ldr	r3, [r3, #8]
 8009d64:	2b05      	cmp	r3, #5
 8009d66:	d10c      	bne.n	8009d82 <HAL_RCC_OscConfig+0x30a>
 8009d68:	4b62      	ldr	r3, [pc, #392]	; (8009ef4 <HAL_RCC_OscConfig+0x47c>)
 8009d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d6c:	4a61      	ldr	r2, [pc, #388]	; (8009ef4 <HAL_RCC_OscConfig+0x47c>)
 8009d6e:	f043 0304 	orr.w	r3, r3, #4
 8009d72:	6713      	str	r3, [r2, #112]	; 0x70
 8009d74:	4b5f      	ldr	r3, [pc, #380]	; (8009ef4 <HAL_RCC_OscConfig+0x47c>)
 8009d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d78:	4a5e      	ldr	r2, [pc, #376]	; (8009ef4 <HAL_RCC_OscConfig+0x47c>)
 8009d7a:	f043 0301 	orr.w	r3, r3, #1
 8009d7e:	6713      	str	r3, [r2, #112]	; 0x70
 8009d80:	e00b      	b.n	8009d9a <HAL_RCC_OscConfig+0x322>
 8009d82:	4b5c      	ldr	r3, [pc, #368]	; (8009ef4 <HAL_RCC_OscConfig+0x47c>)
 8009d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d86:	4a5b      	ldr	r2, [pc, #364]	; (8009ef4 <HAL_RCC_OscConfig+0x47c>)
 8009d88:	f023 0301 	bic.w	r3, r3, #1
 8009d8c:	6713      	str	r3, [r2, #112]	; 0x70
 8009d8e:	4b59      	ldr	r3, [pc, #356]	; (8009ef4 <HAL_RCC_OscConfig+0x47c>)
 8009d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d92:	4a58      	ldr	r2, [pc, #352]	; (8009ef4 <HAL_RCC_OscConfig+0x47c>)
 8009d94:	f023 0304 	bic.w	r3, r3, #4
 8009d98:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	689b      	ldr	r3, [r3, #8]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d015      	beq.n	8009dce <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009da2:	f7fc ff8d 	bl	8006cc0 <HAL_GetTick>
 8009da6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009da8:	e00a      	b.n	8009dc0 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009daa:	f7fc ff89 	bl	8006cc0 <HAL_GetTick>
 8009dae:	4602      	mov	r2, r0
 8009db0:	693b      	ldr	r3, [r7, #16]
 8009db2:	1ad3      	subs	r3, r2, r3
 8009db4:	f241 3288 	movw	r2, #5000	; 0x1388
 8009db8:	4293      	cmp	r3, r2
 8009dba:	d901      	bls.n	8009dc0 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8009dbc:	2303      	movs	r3, #3
 8009dbe:	e092      	b.n	8009ee6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009dc0:	4b4c      	ldr	r3, [pc, #304]	; (8009ef4 <HAL_RCC_OscConfig+0x47c>)
 8009dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dc4:	f003 0302 	and.w	r3, r3, #2
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d0ee      	beq.n	8009daa <HAL_RCC_OscConfig+0x332>
 8009dcc:	e014      	b.n	8009df8 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009dce:	f7fc ff77 	bl	8006cc0 <HAL_GetTick>
 8009dd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009dd4:	e00a      	b.n	8009dec <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009dd6:	f7fc ff73 	bl	8006cc0 <HAL_GetTick>
 8009dda:	4602      	mov	r2, r0
 8009ddc:	693b      	ldr	r3, [r7, #16]
 8009dde:	1ad3      	subs	r3, r2, r3
 8009de0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009de4:	4293      	cmp	r3, r2
 8009de6:	d901      	bls.n	8009dec <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8009de8:	2303      	movs	r3, #3
 8009dea:	e07c      	b.n	8009ee6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009dec:	4b41      	ldr	r3, [pc, #260]	; (8009ef4 <HAL_RCC_OscConfig+0x47c>)
 8009dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009df0:	f003 0302 	and.w	r3, r3, #2
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d1ee      	bne.n	8009dd6 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009df8:	7dfb      	ldrb	r3, [r7, #23]
 8009dfa:	2b01      	cmp	r3, #1
 8009dfc:	d105      	bne.n	8009e0a <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009dfe:	4b3d      	ldr	r3, [pc, #244]	; (8009ef4 <HAL_RCC_OscConfig+0x47c>)
 8009e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e02:	4a3c      	ldr	r2, [pc, #240]	; (8009ef4 <HAL_RCC_OscConfig+0x47c>)
 8009e04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009e08:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	699b      	ldr	r3, [r3, #24]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d068      	beq.n	8009ee4 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009e12:	4b38      	ldr	r3, [pc, #224]	; (8009ef4 <HAL_RCC_OscConfig+0x47c>)
 8009e14:	689b      	ldr	r3, [r3, #8]
 8009e16:	f003 030c 	and.w	r3, r3, #12
 8009e1a:	2b08      	cmp	r3, #8
 8009e1c:	d060      	beq.n	8009ee0 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	699b      	ldr	r3, [r3, #24]
 8009e22:	2b02      	cmp	r3, #2
 8009e24:	d145      	bne.n	8009eb2 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009e26:	4b34      	ldr	r3, [pc, #208]	; (8009ef8 <HAL_RCC_OscConfig+0x480>)
 8009e28:	2200      	movs	r2, #0
 8009e2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e2c:	f7fc ff48 	bl	8006cc0 <HAL_GetTick>
 8009e30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009e32:	e008      	b.n	8009e46 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009e34:	f7fc ff44 	bl	8006cc0 <HAL_GetTick>
 8009e38:	4602      	mov	r2, r0
 8009e3a:	693b      	ldr	r3, [r7, #16]
 8009e3c:	1ad3      	subs	r3, r2, r3
 8009e3e:	2b02      	cmp	r3, #2
 8009e40:	d901      	bls.n	8009e46 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 8009e42:	2303      	movs	r3, #3
 8009e44:	e04f      	b.n	8009ee6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009e46:	4b2b      	ldr	r3, [pc, #172]	; (8009ef4 <HAL_RCC_OscConfig+0x47c>)
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d1f0      	bne.n	8009e34 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	69da      	ldr	r2, [r3, #28]
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	6a1b      	ldr	r3, [r3, #32]
 8009e5a:	431a      	orrs	r2, r3
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e60:	019b      	lsls	r3, r3, #6
 8009e62:	431a      	orrs	r2, r3
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e68:	085b      	lsrs	r3, r3, #1
 8009e6a:	3b01      	subs	r3, #1
 8009e6c:	041b      	lsls	r3, r3, #16
 8009e6e:	431a      	orrs	r2, r3
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e74:	061b      	lsls	r3, r3, #24
 8009e76:	431a      	orrs	r2, r3
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e7c:	071b      	lsls	r3, r3, #28
 8009e7e:	491d      	ldr	r1, [pc, #116]	; (8009ef4 <HAL_RCC_OscConfig+0x47c>)
 8009e80:	4313      	orrs	r3, r2
 8009e82:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009e84:	4b1c      	ldr	r3, [pc, #112]	; (8009ef8 <HAL_RCC_OscConfig+0x480>)
 8009e86:	2201      	movs	r2, #1
 8009e88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e8a:	f7fc ff19 	bl	8006cc0 <HAL_GetTick>
 8009e8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009e90:	e008      	b.n	8009ea4 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009e92:	f7fc ff15 	bl	8006cc0 <HAL_GetTick>
 8009e96:	4602      	mov	r2, r0
 8009e98:	693b      	ldr	r3, [r7, #16]
 8009e9a:	1ad3      	subs	r3, r2, r3
 8009e9c:	2b02      	cmp	r3, #2
 8009e9e:	d901      	bls.n	8009ea4 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8009ea0:	2303      	movs	r3, #3
 8009ea2:	e020      	b.n	8009ee6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009ea4:	4b13      	ldr	r3, [pc, #76]	; (8009ef4 <HAL_RCC_OscConfig+0x47c>)
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d0f0      	beq.n	8009e92 <HAL_RCC_OscConfig+0x41a>
 8009eb0:	e018      	b.n	8009ee4 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009eb2:	4b11      	ldr	r3, [pc, #68]	; (8009ef8 <HAL_RCC_OscConfig+0x480>)
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009eb8:	f7fc ff02 	bl	8006cc0 <HAL_GetTick>
 8009ebc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009ebe:	e008      	b.n	8009ed2 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009ec0:	f7fc fefe 	bl	8006cc0 <HAL_GetTick>
 8009ec4:	4602      	mov	r2, r0
 8009ec6:	693b      	ldr	r3, [r7, #16]
 8009ec8:	1ad3      	subs	r3, r2, r3
 8009eca:	2b02      	cmp	r3, #2
 8009ecc:	d901      	bls.n	8009ed2 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8009ece:	2303      	movs	r3, #3
 8009ed0:	e009      	b.n	8009ee6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009ed2:	4b08      	ldr	r3, [pc, #32]	; (8009ef4 <HAL_RCC_OscConfig+0x47c>)
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d1f0      	bne.n	8009ec0 <HAL_RCC_OscConfig+0x448>
 8009ede:	e001      	b.n	8009ee4 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8009ee0:	2301      	movs	r3, #1
 8009ee2:	e000      	b.n	8009ee6 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8009ee4:	2300      	movs	r3, #0
}
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	3718      	adds	r7, #24
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}
 8009eee:	bf00      	nop
 8009ef0:	40007000 	.word	0x40007000
 8009ef4:	40023800 	.word	0x40023800
 8009ef8:	42470060 	.word	0x42470060

08009efc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b082      	sub	sp, #8
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d101      	bne.n	8009f0e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8009f0a:	2301      	movs	r3, #1
 8009f0c:	e022      	b.n	8009f54 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009f14:	b2db      	uxtb	r3, r3
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d105      	bne.n	8009f26 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8009f20:	6878      	ldr	r0, [r7, #4]
 8009f22:	f7fa fe61 	bl	8004be8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2203      	movs	r2, #3
 8009f2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8009f2e:	6878      	ldr	r0, [r7, #4]
 8009f30:	f000 f814 	bl	8009f5c <HAL_SD_InitCard>
 8009f34:	4603      	mov	r3, r0
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d001      	beq.n	8009f3e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8009f3a:	2301      	movs	r3, #1
 8009f3c:	e00a      	b.n	8009f54 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2200      	movs	r2, #0
 8009f42:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2200      	movs	r2, #0
 8009f48:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	2201      	movs	r2, #1
 8009f4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8009f52:	2300      	movs	r3, #0
}
 8009f54:	4618      	mov	r0, r3
 8009f56:	3708      	adds	r7, #8
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bd80      	pop	{r7, pc}

08009f5c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009f5c:	b5b0      	push	{r4, r5, r7, lr}
 8009f5e:	b08e      	sub	sp, #56	; 0x38
 8009f60:	af04      	add	r7, sp, #16
 8009f62:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8009f64:	2300      	movs	r3, #0
 8009f66:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8009f68:	2300      	movs	r3, #0
 8009f6a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8009f70:	2300      	movs	r3, #0
 8009f72:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8009f74:	2300      	movs	r3, #0
 8009f76:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8009f78:	2376      	movs	r3, #118	; 0x76
 8009f7a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681d      	ldr	r5, [r3, #0]
 8009f80:	466c      	mov	r4, sp
 8009f82:	f107 0314 	add.w	r3, r7, #20
 8009f86:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009f8a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009f8e:	f107 0308 	add.w	r3, r7, #8
 8009f92:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009f94:	4628      	mov	r0, r5
 8009f96:	f003 fa87 	bl	800d4a8 <SDIO_Init>
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8009fa0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d001      	beq.n	8009fac <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8009fa8:	2301      	movs	r3, #1
 8009faa:	e031      	b.n	800a010 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8009fac:	4b1a      	ldr	r3, [pc, #104]	; (800a018 <HAL_SD_InitCard+0xbc>)
 8009fae:	2200      	movs	r2, #0
 8009fb0:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	f003 fabf 	bl	800d53a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8009fbc:	4b16      	ldr	r3, [pc, #88]	; (800a018 <HAL_SD_InitCard+0xbc>)
 8009fbe:	2201      	movs	r2, #1
 8009fc0:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8009fc2:	6878      	ldr	r0, [r7, #4]
 8009fc4:	f000 ffc6 	bl	800af54 <SD_PowerON>
 8009fc8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009fca:	6a3b      	ldr	r3, [r7, #32]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d00b      	beq.n	8009fe8 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2201      	movs	r2, #1
 8009fd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009fdc:	6a3b      	ldr	r3, [r7, #32]
 8009fde:	431a      	orrs	r2, r3
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009fe4:	2301      	movs	r3, #1
 8009fe6:	e013      	b.n	800a010 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8009fe8:	6878      	ldr	r0, [r7, #4]
 8009fea:	f000 fee5 	bl	800adb8 <SD_InitCard>
 8009fee:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009ff0:	6a3b      	ldr	r3, [r7, #32]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d00b      	beq.n	800a00e <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2201      	movs	r2, #1
 8009ffa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a002:	6a3b      	ldr	r3, [r7, #32]
 800a004:	431a      	orrs	r2, r3
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a00a:	2301      	movs	r3, #1
 800a00c:	e000      	b.n	800a010 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800a00e:	2300      	movs	r3, #0
}
 800a010:	4618      	mov	r0, r3
 800a012:	3728      	adds	r7, #40	; 0x28
 800a014:	46bd      	mov	sp, r7
 800a016:	bdb0      	pop	{r4, r5, r7, pc}
 800a018:	422580a0 	.word	0x422580a0

0800a01c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b08c      	sub	sp, #48	; 0x30
 800a020:	af00      	add	r7, sp, #0
 800a022:	60f8      	str	r0, [r7, #12]
 800a024:	60b9      	str	r1, [r7, #8]
 800a026:	607a      	str	r2, [r7, #4]
 800a028:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800a02e:	68bb      	ldr	r3, [r7, #8]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d107      	bne.n	800a044 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a038:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a040:	2301      	movs	r3, #1
 800a042:	e0c7      	b.n	800a1d4 <HAL_SD_ReadBlocks_DMA+0x1b8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a04a:	b2db      	uxtb	r3, r3
 800a04c:	2b01      	cmp	r3, #1
 800a04e:	f040 80c0 	bne.w	800a1d2 <HAL_SD_ReadBlocks_DMA+0x1b6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	2200      	movs	r2, #0
 800a056:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a058:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	441a      	add	r2, r3
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a062:	429a      	cmp	r2, r3
 800a064:	d907      	bls.n	800a076 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a06a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800a072:	2301      	movs	r3, #1
 800a074:	e0ae      	b.n	800a1d4 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	2203      	movs	r2, #3
 800a07a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	2200      	movs	r2, #0
 800a084:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800a094:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a09a:	4a50      	ldr	r2, [pc, #320]	; (800a1dc <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800a09c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0a2:	4a4f      	ldr	r2, [pc, #316]	; (800a1e0 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 800a0a4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	3380      	adds	r3, #128	; 0x80
 800a0b8:	4619      	mov	r1, r3
 800a0ba:	68ba      	ldr	r2, [r7, #8]
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	025b      	lsls	r3, r3, #9
 800a0c0:	089b      	lsrs	r3, r3, #2
 800a0c2:	f7fd fbef 	bl	80078a4 <HAL_DMA_Start_IT>
 800a0c6:	4603      	mov	r3, r0
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d017      	beq.n	800a0fc <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800a0da:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	4a40      	ldr	r2, [pc, #256]	; (800a1e4 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800a0e2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0e8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	2201      	movs	r2, #1
 800a0f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	e06b      	b.n	800a1d4 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800a0fc:	4b3a      	ldr	r3, [pc, #232]	; (800a1e8 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800a0fe:	2201      	movs	r2, #1
 800a100:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a106:	2b01      	cmp	r3, #1
 800a108:	d002      	beq.n	800a110 <HAL_SD_ReadBlocks_DMA+0xf4>
      {
        add *= 512U;
 800a10a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a10c:	025b      	lsls	r3, r3, #9
 800a10e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a118:	4618      	mov	r0, r3
 800a11a:	f003 faa1 	bl	800d660 <SDMMC_CmdBlockLength>
 800a11e:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800a120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a122:	2b00      	cmp	r3, #0
 800a124:	d00f      	beq.n	800a146 <HAL_SD_ReadBlocks_DMA+0x12a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	4a2e      	ldr	r2, [pc, #184]	; (800a1e4 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800a12c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a134:	431a      	orrs	r2, r3
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	2201      	movs	r2, #1
 800a13e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800a142:	2301      	movs	r3, #1
 800a144:	e046      	b.n	800a1d4 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a146:	f04f 33ff 	mov.w	r3, #4294967295
 800a14a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	025b      	lsls	r3, r3, #9
 800a150:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800a152:	2390      	movs	r3, #144	; 0x90
 800a154:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800a156:	2302      	movs	r3, #2
 800a158:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800a15a:	2300      	movs	r3, #0
 800a15c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800a15e:	2301      	movs	r3, #1
 800a160:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	f107 0210 	add.w	r2, r7, #16
 800a16a:	4611      	mov	r1, r2
 800a16c:	4618      	mov	r0, r3
 800a16e:	f003 fa4b 	bl	800d608 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	2b01      	cmp	r3, #1
 800a176:	d90a      	bls.n	800a18e <HAL_SD_ReadBlocks_DMA+0x172>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	2282      	movs	r2, #130	; 0x82
 800a17c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a184:	4618      	mov	r0, r3
 800a186:	f003 faaf 	bl	800d6e8 <SDMMC_CmdReadMultiBlock>
 800a18a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a18c:	e009      	b.n	800a1a2 <HAL_SD_ReadBlocks_DMA+0x186>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	2281      	movs	r2, #129	; 0x81
 800a192:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a19a:	4618      	mov	r0, r3
 800a19c:	f003 fa82 	bl	800d6a4 <SDMMC_CmdReadSingleBlock>
 800a1a0:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800a1a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d012      	beq.n	800a1ce <HAL_SD_ReadBlocks_DMA+0x1b2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	4a0d      	ldr	r2, [pc, #52]	; (800a1e4 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800a1ae:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a1b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1b6:	431a      	orrs	r2, r3
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	2201      	movs	r2, #1
 800a1c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	e002      	b.n	800a1d4 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      return HAL_OK;
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	e000      	b.n	800a1d4 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
  }
  else
  {
    return HAL_BUSY;
 800a1d2:	2302      	movs	r3, #2
  }
}
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	3730      	adds	r7, #48	; 0x30
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	bd80      	pop	{r7, pc}
 800a1dc:	0800abc7 	.word	0x0800abc7
 800a1e0:	0800ac39 	.word	0x0800ac39
 800a1e4:	004005ff 	.word	0x004005ff
 800a1e8:	4225858c 	.word	0x4225858c

0800a1ec <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b08c      	sub	sp, #48	; 0x30
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	60f8      	str	r0, [r7, #12]
 800a1f4:	60b9      	str	r1, [r7, #8]
 800a1f6:	607a      	str	r2, [r7, #4]
 800a1f8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800a1fe:	68bb      	ldr	r3, [r7, #8]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d107      	bne.n	800a214 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a208:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a210:	2301      	movs	r3, #1
 800a212:	e0ca      	b.n	800a3aa <HAL_SD_WriteBlocks_DMA+0x1be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a21a:	b2db      	uxtb	r3, r3
 800a21c:	2b01      	cmp	r3, #1
 800a21e:	f040 80c3 	bne.w	800a3a8 <HAL_SD_WriteBlocks_DMA+0x1bc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	2200      	movs	r2, #0
 800a226:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a228:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	441a      	add	r2, r3
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a232:	429a      	cmp	r2, r3
 800a234:	d907      	bls.n	800a246 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a23a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800a242:	2301      	movs	r3, #1
 800a244:	e0b1      	b.n	800a3aa <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	2203      	movs	r2, #3
 800a24a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	2200      	movs	r2, #0
 800a254:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	f042 021a 	orr.w	r2, r2, #26
 800a264:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a26a:	4a52      	ldr	r2, [pc, #328]	; (800a3b4 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800a26c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a272:	4a51      	ldr	r2, [pc, #324]	; (800a3b8 <HAL_SD_WriteBlocks_DMA+0x1cc>)
 800a274:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a27a:	2200      	movs	r2, #0
 800a27c:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a282:	2b01      	cmp	r3, #1
 800a284:	d002      	beq.n	800a28c <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800a286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a288:	025b      	lsls	r3, r3, #9
 800a28a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a294:	4618      	mov	r0, r3
 800a296:	f003 f9e3 	bl	800d660 <SDMMC_CmdBlockLength>
 800a29a:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a29c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d00f      	beq.n	800a2c2 <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	4a45      	ldr	r2, [pc, #276]	; (800a3bc <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800a2a8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a2ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2b0:	431a      	orrs	r2, r3
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	2201      	movs	r2, #1
 800a2ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a2be:	2301      	movs	r3, #1
 800a2c0:	e073      	b.n	800a3aa <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	2b01      	cmp	r3, #1
 800a2c6:	d90a      	bls.n	800a2de <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	22a0      	movs	r2, #160	; 0xa0
 800a2cc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	f003 fa4b 	bl	800d770 <SDMMC_CmdWriteMultiBlock>
 800a2da:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a2dc:	e009      	b.n	800a2f2 <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	2290      	movs	r2, #144	; 0x90
 800a2e2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	f003 fa1e 	bl	800d72c <SDMMC_CmdWriteSingleBlock>
 800a2f0:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800a2f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d012      	beq.n	800a31e <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	4a2f      	ldr	r2, [pc, #188]	; (800a3bc <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800a2fe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a306:	431a      	orrs	r2, r3
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	2201      	movs	r2, #1
 800a310:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	2200      	movs	r2, #0
 800a318:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a31a:	2301      	movs	r3, #1
 800a31c:	e045      	b.n	800a3aa <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800a31e:	4b28      	ldr	r3, [pc, #160]	; (800a3c0 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800a320:	2201      	movs	r2, #1
 800a322:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800a328:	68b9      	ldr	r1, [r7, #8]
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	3380      	adds	r3, #128	; 0x80
 800a330:	461a      	mov	r2, r3
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	025b      	lsls	r3, r3, #9
 800a336:	089b      	lsrs	r3, r3, #2
 800a338:	f7fd fab4 	bl	80078a4 <HAL_DMA_Start_IT>
 800a33c:	4603      	mov	r3, r0
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d01a      	beq.n	800a378 <HAL_SD_WriteBlocks_DMA+0x18c>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	f022 021a 	bic.w	r2, r2, #26
 800a350:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	4a19      	ldr	r2, [pc, #100]	; (800a3bc <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800a358:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a35e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	2201      	movs	r2, #1
 800a36a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	2200      	movs	r2, #0
 800a372:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a374:	2301      	movs	r3, #1
 800a376:	e018      	b.n	800a3aa <HAL_SD_WriteBlocks_DMA+0x1be>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a378:	f04f 33ff 	mov.w	r3, #4294967295
 800a37c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	025b      	lsls	r3, r3, #9
 800a382:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800a384:	2390      	movs	r3, #144	; 0x90
 800a386:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800a388:	2300      	movs	r3, #0
 800a38a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800a38c:	2300      	movs	r3, #0
 800a38e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800a390:	2301      	movs	r3, #1
 800a392:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	f107 0210 	add.w	r2, r7, #16
 800a39c:	4611      	mov	r1, r2
 800a39e:	4618      	mov	r0, r3
 800a3a0:	f003 f932 	bl	800d608 <SDIO_ConfigData>

      return HAL_OK;
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	e000      	b.n	800a3aa <HAL_SD_WriteBlocks_DMA+0x1be>
    }
  }
  else
  {
    return HAL_BUSY;
 800a3a8:	2302      	movs	r3, #2
  }
}
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	3730      	adds	r7, #48	; 0x30
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bd80      	pop	{r7, pc}
 800a3b2:	bf00      	nop
 800a3b4:	0800ab9d 	.word	0x0800ab9d
 800a3b8:	0800ac39 	.word	0x0800ac39
 800a3bc:	004005ff 	.word	0x004005ff
 800a3c0:	4225858c 	.word	0x4225858c

0800a3c4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b084      	sub	sp, #16
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3d0:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d008      	beq.n	800a3f2 <HAL_SD_IRQHandler+0x2e>
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	f003 0308 	and.w	r3, r3, #8
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d003      	beq.n	800a3f2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800a3ea:	6878      	ldr	r0, [r7, #4]
 800a3ec:	f000 ffc8 	bl	800b380 <SD_Read_IT>
 800a3f0:	e155      	b.n	800a69e <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	f000 808f 	beq.w	800a520 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a40a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a412:	687a      	ldr	r2, [r7, #4]
 800a414:	6812      	ldr	r2, [r2, #0]
 800a416:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800a41a:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800a41e:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	f022 0201 	bic.w	r2, r2, #1
 800a42e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	f003 0308 	and.w	r3, r3, #8
 800a436:	2b00      	cmp	r3, #0
 800a438:	d039      	beq.n	800a4ae <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	f003 0302 	and.w	r3, r3, #2
 800a440:	2b00      	cmp	r3, #0
 800a442:	d104      	bne.n	800a44e <HAL_SD_IRQHandler+0x8a>
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	f003 0320 	and.w	r3, r3, #32
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d011      	beq.n	800a472 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	4618      	mov	r0, r3
 800a454:	f003 f9ae 	bl	800d7b4 <SDMMC_CmdStopTransfer>
 800a458:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800a45a:	68bb      	ldr	r3, [r7, #8]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d008      	beq.n	800a472 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	431a      	orrs	r2, r3
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800a46c:	6878      	ldr	r0, [r7, #4]
 800a46e:	f000 f91f 	bl	800a6b0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	f240 523a 	movw	r2, #1338	; 0x53a
 800a47a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2201      	movs	r2, #1
 800a480:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2200      	movs	r2, #0
 800a488:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	f003 0301 	and.w	r3, r3, #1
 800a490:	2b00      	cmp	r3, #0
 800a492:	d104      	bne.n	800a49e <HAL_SD_IRQHandler+0xda>
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	f003 0302 	and.w	r3, r3, #2
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d003      	beq.n	800a4a6 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800a49e:	6878      	ldr	r0, [r7, #4]
 800a4a0:	f003 fe04 	bl	800e0ac <HAL_SD_RxCpltCallback>
 800a4a4:	e0fb      	b.n	800a69e <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800a4a6:	6878      	ldr	r0, [r7, #4]
 800a4a8:	f003 fdf6 	bl	800e098 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800a4ac:	e0f7      	b.n	800a69e <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	f000 80f2 	beq.w	800a69e <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	f003 0320 	and.w	r3, r3, #32
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d011      	beq.n	800a4e8 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	f003 f973 	bl	800d7b4 <SDMMC_CmdStopTransfer>
 800a4ce:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800a4d0:	68bb      	ldr	r3, [r7, #8]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d008      	beq.n	800a4e8 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a4da:	68bb      	ldr	r3, [r7, #8]
 800a4dc:	431a      	orrs	r2, r3
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800a4e2:	6878      	ldr	r0, [r7, #4]
 800a4e4:	f000 f8e4 	bl	800a6b0 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	f003 0301 	and.w	r3, r3, #1
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	f040 80d5 	bne.w	800a69e <HAL_SD_IRQHandler+0x2da>
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	f003 0302 	and.w	r3, r3, #2
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	f040 80cf 	bne.w	800a69e <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	f022 0208 	bic.w	r2, r2, #8
 800a50e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2201      	movs	r2, #1
 800a514:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800a518:	6878      	ldr	r0, [r7, #4]
 800a51a:	f003 fdbd 	bl	800e098 <HAL_SD_TxCpltCallback>
}
 800a51e:	e0be      	b.n	800a69e <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a526:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d008      	beq.n	800a540 <HAL_SD_IRQHandler+0x17c>
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	f003 0308 	and.w	r3, r3, #8
 800a534:	2b00      	cmp	r3, #0
 800a536:	d003      	beq.n	800a540 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800a538:	6878      	ldr	r0, [r7, #4]
 800a53a:	f000 ff72 	bl	800b422 <SD_Write_IT>
 800a53e:	e0ae      	b.n	800a69e <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a546:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	f000 80a7 	beq.w	800a69e <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a556:	f003 0302 	and.w	r3, r3, #2
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d005      	beq.n	800a56a <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a562:	f043 0202 	orr.w	r2, r3, #2
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a570:	f003 0308 	and.w	r3, r3, #8
 800a574:	2b00      	cmp	r3, #0
 800a576:	d005      	beq.n	800a584 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a57c:	f043 0208 	orr.w	r2, r3, #8
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a58a:	f003 0320 	and.w	r3, r3, #32
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d005      	beq.n	800a59e <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a596:	f043 0220 	orr.w	r2, r3, #32
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5a4:	f003 0310 	and.w	r3, r3, #16
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d005      	beq.n	800a5b8 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5b0:	f043 0210 	orr.w	r2, r3, #16
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	f240 523a 	movw	r2, #1338	; 0x53a
 800a5c0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800a5d0:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	f003 f8ec 	bl	800d7b4 <SDMMC_CmdStopTransfer>
 800a5dc:	4602      	mov	r2, r0
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5e2:	431a      	orrs	r2, r3
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	f003 0308 	and.w	r3, r3, #8
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d00a      	beq.n	800a608 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	2201      	movs	r2, #1
 800a5f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800a600:	6878      	ldr	r0, [r7, #4]
 800a602:	f000 f855 	bl	800a6b0 <HAL_SD_ErrorCallback>
}
 800a606:	e04a      	b.n	800a69e <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d045      	beq.n	800a69e <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	f003 0310 	and.w	r3, r3, #16
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d104      	bne.n	800a626 <HAL_SD_IRQHandler+0x262>
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	f003 0320 	and.w	r3, r3, #32
 800a622:	2b00      	cmp	r3, #0
 800a624:	d011      	beq.n	800a64a <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a62a:	4a1f      	ldr	r2, [pc, #124]	; (800a6a8 <HAL_SD_IRQHandler+0x2e4>)
 800a62c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a632:	4618      	mov	r0, r3
 800a634:	f7fd f98e 	bl	8007954 <HAL_DMA_Abort_IT>
 800a638:	4603      	mov	r3, r0
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d02f      	beq.n	800a69e <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a642:	4618      	mov	r0, r3
 800a644:	f000 fb4a 	bl	800acdc <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800a648:	e029      	b.n	800a69e <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	f003 0301 	and.w	r3, r3, #1
 800a650:	2b00      	cmp	r3, #0
 800a652:	d104      	bne.n	800a65e <HAL_SD_IRQHandler+0x29a>
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	f003 0302 	and.w	r3, r3, #2
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d011      	beq.n	800a682 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a662:	4a12      	ldr	r2, [pc, #72]	; (800a6ac <HAL_SD_IRQHandler+0x2e8>)
 800a664:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a66a:	4618      	mov	r0, r3
 800a66c:	f7fd f972 	bl	8007954 <HAL_DMA_Abort_IT>
 800a670:	4603      	mov	r3, r0
 800a672:	2b00      	cmp	r3, #0
 800a674:	d013      	beq.n	800a69e <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a67a:	4618      	mov	r0, r3
 800a67c:	f000 fb65 	bl	800ad4a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800a680:	e00d      	b.n	800a69e <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	2200      	movs	r2, #0
 800a686:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2201      	movs	r2, #1
 800a68c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2200      	movs	r2, #0
 800a694:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800a696:	6878      	ldr	r0, [r7, #4]
 800a698:	f003 fcf4 	bl	800e084 <HAL_SD_AbortCallback>
}
 800a69c:	e7ff      	b.n	800a69e <HAL_SD_IRQHandler+0x2da>
 800a69e:	bf00      	nop
 800a6a0:	3710      	adds	r7, #16
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	bd80      	pop	{r7, pc}
 800a6a6:	bf00      	nop
 800a6a8:	0800acdd 	.word	0x0800acdd
 800a6ac:	0800ad4b 	.word	0x0800ad4b

0800a6b0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800a6b0:	b480      	push	{r7}
 800a6b2:	b083      	sub	sp, #12
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800a6b8:	bf00      	nop
 800a6ba:	370c      	adds	r7, #12
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c2:	4770      	bx	lr

0800a6c4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800a6c4:	b480      	push	{r7}
 800a6c6:	b083      	sub	sp, #12
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]
 800a6cc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a6d2:	0f9b      	lsrs	r3, r3, #30
 800a6d4:	b2da      	uxtb	r2, r3
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a6de:	0e9b      	lsrs	r3, r3, #26
 800a6e0:	b2db      	uxtb	r3, r3
 800a6e2:	f003 030f 	and.w	r3, r3, #15
 800a6e6:	b2da      	uxtb	r2, r3
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a6f0:	0e1b      	lsrs	r3, r3, #24
 800a6f2:	b2db      	uxtb	r3, r3
 800a6f4:	f003 0303 	and.w	r3, r3, #3
 800a6f8:	b2da      	uxtb	r2, r3
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a702:	0c1b      	lsrs	r3, r3, #16
 800a704:	b2da      	uxtb	r2, r3
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a70e:	0a1b      	lsrs	r3, r3, #8
 800a710:	b2da      	uxtb	r2, r3
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a71a:	b2da      	uxtb	r2, r3
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a724:	0d1b      	lsrs	r3, r3, #20
 800a726:	b29a      	uxth	r2, r3
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a730:	0c1b      	lsrs	r3, r3, #16
 800a732:	b2db      	uxtb	r3, r3
 800a734:	f003 030f 	and.w	r3, r3, #15
 800a738:	b2da      	uxtb	r2, r3
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a742:	0bdb      	lsrs	r3, r3, #15
 800a744:	b2db      	uxtb	r3, r3
 800a746:	f003 0301 	and.w	r3, r3, #1
 800a74a:	b2da      	uxtb	r2, r3
 800a74c:	683b      	ldr	r3, [r7, #0]
 800a74e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a754:	0b9b      	lsrs	r3, r3, #14
 800a756:	b2db      	uxtb	r3, r3
 800a758:	f003 0301 	and.w	r3, r3, #1
 800a75c:	b2da      	uxtb	r2, r3
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a766:	0b5b      	lsrs	r3, r3, #13
 800a768:	b2db      	uxtb	r3, r3
 800a76a:	f003 0301 	and.w	r3, r3, #1
 800a76e:	b2da      	uxtb	r2, r3
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a778:	0b1b      	lsrs	r3, r3, #12
 800a77a:	b2db      	uxtb	r3, r3
 800a77c:	f003 0301 	and.w	r3, r3, #1
 800a780:	b2da      	uxtb	r2, r3
 800a782:	683b      	ldr	r3, [r7, #0]
 800a784:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	2200      	movs	r2, #0
 800a78a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a790:	2b00      	cmp	r3, #0
 800a792:	d163      	bne.n	800a85c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a798:	009a      	lsls	r2, r3, #2
 800a79a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800a79e:	4013      	ands	r3, r2
 800a7a0:	687a      	ldr	r2, [r7, #4]
 800a7a2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800a7a4:	0f92      	lsrs	r2, r2, #30
 800a7a6:	431a      	orrs	r2, r3
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a7b0:	0edb      	lsrs	r3, r3, #27
 800a7b2:	b2db      	uxtb	r3, r3
 800a7b4:	f003 0307 	and.w	r3, r3, #7
 800a7b8:	b2da      	uxtb	r2, r3
 800a7ba:	683b      	ldr	r3, [r7, #0]
 800a7bc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a7c2:	0e1b      	lsrs	r3, r3, #24
 800a7c4:	b2db      	uxtb	r3, r3
 800a7c6:	f003 0307 	and.w	r3, r3, #7
 800a7ca:	b2da      	uxtb	r2, r3
 800a7cc:	683b      	ldr	r3, [r7, #0]
 800a7ce:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a7d4:	0d5b      	lsrs	r3, r3, #21
 800a7d6:	b2db      	uxtb	r3, r3
 800a7d8:	f003 0307 	and.w	r3, r3, #7
 800a7dc:	b2da      	uxtb	r2, r3
 800a7de:	683b      	ldr	r3, [r7, #0]
 800a7e0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a7e6:	0c9b      	lsrs	r3, r3, #18
 800a7e8:	b2db      	uxtb	r3, r3
 800a7ea:	f003 0307 	and.w	r3, r3, #7
 800a7ee:	b2da      	uxtb	r2, r3
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a7f8:	0bdb      	lsrs	r3, r3, #15
 800a7fa:	b2db      	uxtb	r3, r3
 800a7fc:	f003 0307 	and.w	r3, r3, #7
 800a800:	b2da      	uxtb	r2, r3
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	691b      	ldr	r3, [r3, #16]
 800a80a:	1c5a      	adds	r2, r3, #1
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	7e1b      	ldrb	r3, [r3, #24]
 800a814:	b2db      	uxtb	r3, r3
 800a816:	f003 0307 	and.w	r3, r3, #7
 800a81a:	3302      	adds	r3, #2
 800a81c:	2201      	movs	r2, #1
 800a81e:	fa02 f303 	lsl.w	r3, r2, r3
 800a822:	687a      	ldr	r2, [r7, #4]
 800a824:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800a826:	fb02 f203 	mul.w	r2, r2, r3
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	7a1b      	ldrb	r3, [r3, #8]
 800a832:	b2db      	uxtb	r3, r3
 800a834:	f003 030f 	and.w	r3, r3, #15
 800a838:	2201      	movs	r2, #1
 800a83a:	409a      	lsls	r2, r3
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a844:	687a      	ldr	r2, [r7, #4]
 800a846:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800a848:	0a52      	lsrs	r2, r2, #9
 800a84a:	fb02 f203 	mul.w	r2, r2, r3
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a858:	661a      	str	r2, [r3, #96]	; 0x60
 800a85a:	e031      	b.n	800a8c0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a860:	2b01      	cmp	r3, #1
 800a862:	d11d      	bne.n	800a8a0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a868:	041b      	lsls	r3, r3, #16
 800a86a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a872:	0c1b      	lsrs	r3, r3, #16
 800a874:	431a      	orrs	r2, r3
 800a876:	683b      	ldr	r3, [r7, #0]
 800a878:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	691b      	ldr	r3, [r3, #16]
 800a87e:	3301      	adds	r3, #1
 800a880:	029a      	lsls	r2, r3, #10
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a894:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	661a      	str	r2, [r3, #96]	; 0x60
 800a89e:	e00f      	b.n	800a8c0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	4a58      	ldr	r2, [pc, #352]	; (800aa08 <HAL_SD_GetCardCSD+0x344>)
 800a8a6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8ac:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2201      	movs	r2, #1
 800a8b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a8bc:	2301      	movs	r3, #1
 800a8be:	e09d      	b.n	800a9fc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a8c4:	0b9b      	lsrs	r3, r3, #14
 800a8c6:	b2db      	uxtb	r3, r3
 800a8c8:	f003 0301 	and.w	r3, r3, #1
 800a8cc:	b2da      	uxtb	r2, r3
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a8d6:	09db      	lsrs	r3, r3, #7
 800a8d8:	b2db      	uxtb	r3, r3
 800a8da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a8de:	b2da      	uxtb	r2, r3
 800a8e0:	683b      	ldr	r3, [r7, #0]
 800a8e2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a8e8:	b2db      	uxtb	r3, r3
 800a8ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a8ee:	b2da      	uxtb	r2, r3
 800a8f0:	683b      	ldr	r3, [r7, #0]
 800a8f2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8f8:	0fdb      	lsrs	r3, r3, #31
 800a8fa:	b2da      	uxtb	r2, r3
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a904:	0f5b      	lsrs	r3, r3, #29
 800a906:	b2db      	uxtb	r3, r3
 800a908:	f003 0303 	and.w	r3, r3, #3
 800a90c:	b2da      	uxtb	r2, r3
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a916:	0e9b      	lsrs	r3, r3, #26
 800a918:	b2db      	uxtb	r3, r3
 800a91a:	f003 0307 	and.w	r3, r3, #7
 800a91e:	b2da      	uxtb	r2, r3
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a928:	0d9b      	lsrs	r3, r3, #22
 800a92a:	b2db      	uxtb	r3, r3
 800a92c:	f003 030f 	and.w	r3, r3, #15
 800a930:	b2da      	uxtb	r2, r3
 800a932:	683b      	ldr	r3, [r7, #0]
 800a934:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a93a:	0d5b      	lsrs	r3, r3, #21
 800a93c:	b2db      	uxtb	r3, r3
 800a93e:	f003 0301 	and.w	r3, r3, #1
 800a942:	b2da      	uxtb	r2, r3
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800a94a:	683b      	ldr	r3, [r7, #0]
 800a94c:	2200      	movs	r2, #0
 800a94e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a956:	0c1b      	lsrs	r3, r3, #16
 800a958:	b2db      	uxtb	r3, r3
 800a95a:	f003 0301 	and.w	r3, r3, #1
 800a95e:	b2da      	uxtb	r2, r3
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a96a:	0bdb      	lsrs	r3, r3, #15
 800a96c:	b2db      	uxtb	r3, r3
 800a96e:	f003 0301 	and.w	r3, r3, #1
 800a972:	b2da      	uxtb	r2, r3
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a97e:	0b9b      	lsrs	r3, r3, #14
 800a980:	b2db      	uxtb	r3, r3
 800a982:	f003 0301 	and.w	r3, r3, #1
 800a986:	b2da      	uxtb	r2, r3
 800a988:	683b      	ldr	r3, [r7, #0]
 800a98a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a992:	0b5b      	lsrs	r3, r3, #13
 800a994:	b2db      	uxtb	r3, r3
 800a996:	f003 0301 	and.w	r3, r3, #1
 800a99a:	b2da      	uxtb	r2, r3
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9a6:	0b1b      	lsrs	r3, r3, #12
 800a9a8:	b2db      	uxtb	r3, r3
 800a9aa:	f003 0301 	and.w	r3, r3, #1
 800a9ae:	b2da      	uxtb	r2, r3
 800a9b0:	683b      	ldr	r3, [r7, #0]
 800a9b2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9ba:	0a9b      	lsrs	r3, r3, #10
 800a9bc:	b2db      	uxtb	r3, r3
 800a9be:	f003 0303 	and.w	r3, r3, #3
 800a9c2:	b2da      	uxtb	r2, r3
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9ce:	0a1b      	lsrs	r3, r3, #8
 800a9d0:	b2db      	uxtb	r3, r3
 800a9d2:	f003 0303 	and.w	r3, r3, #3
 800a9d6:	b2da      	uxtb	r2, r3
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9e2:	085b      	lsrs	r3, r3, #1
 800a9e4:	b2db      	uxtb	r3, r3
 800a9e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9ea:	b2da      	uxtb	r2, r3
 800a9ec:	683b      	ldr	r3, [r7, #0]
 800a9ee:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	2201      	movs	r2, #1
 800a9f6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800a9fa:	2300      	movs	r3, #0
}
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	370c      	adds	r7, #12
 800aa00:	46bd      	mov	sp, r7
 800aa02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa06:	4770      	bx	lr
 800aa08:	004005ff 	.word	0x004005ff

0800aa0c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800aa0c:	b480      	push	{r7}
 800aa0e:	b083      	sub	sp, #12
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
 800aa14:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aa1a:	683b      	ldr	r3, [r7, #0]
 800aa1c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800aa22:	683b      	ldr	r3, [r7, #0]
 800aa24:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800aa32:	683b      	ldr	r3, [r7, #0]
 800aa34:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800aa4a:	683b      	ldr	r3, [r7, #0]
 800aa4c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800aa52:	683b      	ldr	r3, [r7, #0]
 800aa54:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800aa56:	2300      	movs	r3, #0
}
 800aa58:	4618      	mov	r0, r3
 800aa5a:	370c      	adds	r7, #12
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa62:	4770      	bx	lr

0800aa64 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800aa64:	b5b0      	push	{r4, r5, r7, lr}
 800aa66:	b08e      	sub	sp, #56	; 0x38
 800aa68:	af04      	add	r7, sp, #16
 800aa6a:	6078      	str	r0, [r7, #4]
 800aa6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	2203      	movs	r2, #3
 800aa72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa7a:	2b03      	cmp	r3, #3
 800aa7c:	d02e      	beq.n	800aadc <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800aa7e:	683b      	ldr	r3, [r7, #0]
 800aa80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa84:	d106      	bne.n	800aa94 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa8a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	639a      	str	r2, [r3, #56]	; 0x38
 800aa92:	e029      	b.n	800aae8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800aa94:	683b      	ldr	r3, [r7, #0]
 800aa96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aa9a:	d10a      	bne.n	800aab2 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800aa9c:	6878      	ldr	r0, [r7, #4]
 800aa9e:	f000 fb0f 	bl	800b0c0 <SD_WideBus_Enable>
 800aaa2:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aaa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaaa:	431a      	orrs	r2, r3
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	639a      	str	r2, [r3, #56]	; 0x38
 800aab0:	e01a      	b.n	800aae8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800aab2:	683b      	ldr	r3, [r7, #0]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d10a      	bne.n	800aace <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800aab8:	6878      	ldr	r0, [r7, #4]
 800aaba:	f000 fb4c 	bl	800b156 <SD_WideBus_Disable>
 800aabe:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aac6:	431a      	orrs	r2, r3
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	639a      	str	r2, [r3, #56]	; 0x38
 800aacc:	e00c      	b.n	800aae8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aad2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	639a      	str	r2, [r3, #56]	; 0x38
 800aada:	e005      	b.n	800aae8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aae0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d009      	beq.n	800ab04 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	4a18      	ldr	r2, [pc, #96]	; (800ab58 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800aaf6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	2201      	movs	r2, #1
 800aafc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800ab00:	2301      	movs	r3, #1
 800ab02:	e024      	b.n	800ab4e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	685b      	ldr	r3, [r3, #4]
 800ab08:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	689b      	ldr	r3, [r3, #8]
 800ab0e:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	68db      	ldr	r3, [r3, #12]
 800ab14:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800ab16:	683b      	ldr	r3, [r7, #0]
 800ab18:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	695b      	ldr	r3, [r3, #20]
 800ab1e:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	699b      	ldr	r3, [r3, #24]
 800ab24:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681d      	ldr	r5, [r3, #0]
 800ab2a:	466c      	mov	r4, sp
 800ab2c:	f107 0318 	add.w	r3, r7, #24
 800ab30:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ab34:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ab38:	f107 030c 	add.w	r3, r7, #12
 800ab3c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ab3e:	4628      	mov	r0, r5
 800ab40:	f002 fcb2 	bl	800d4a8 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	2201      	movs	r2, #1
 800ab48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800ab4c:	2300      	movs	r3, #0
}
 800ab4e:	4618      	mov	r0, r3
 800ab50:	3728      	adds	r7, #40	; 0x28
 800ab52:	46bd      	mov	sp, r7
 800ab54:	bdb0      	pop	{r4, r5, r7, pc}
 800ab56:	bf00      	nop
 800ab58:	004005ff 	.word	0x004005ff

0800ab5c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800ab5c:	b580      	push	{r7, lr}
 800ab5e:	b086      	sub	sp, #24
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800ab64:	2300      	movs	r3, #0
 800ab66:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800ab68:	f107 030c 	add.w	r3, r7, #12
 800ab6c:	4619      	mov	r1, r3
 800ab6e:	6878      	ldr	r0, [r7, #4]
 800ab70:	f000 fa7e 	bl	800b070 <SD_SendStatus>
 800ab74:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ab76:	697b      	ldr	r3, [r7, #20]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d005      	beq.n	800ab88 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab80:	697b      	ldr	r3, [r7, #20]
 800ab82:	431a      	orrs	r2, r3
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	0a5b      	lsrs	r3, r3, #9
 800ab8c:	f003 030f 	and.w	r3, r3, #15
 800ab90:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800ab92:	693b      	ldr	r3, [r7, #16]
}
 800ab94:	4618      	mov	r0, r3
 800ab96:	3718      	adds	r7, #24
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	bd80      	pop	{r7, pc}

0800ab9c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ab9c:	b480      	push	{r7}
 800ab9e:	b085      	sub	sp, #20
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aba8:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800abb8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800abba:	bf00      	nop
 800abbc:	3714      	adds	r7, #20
 800abbe:	46bd      	mov	sp, r7
 800abc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc4:	4770      	bx	lr

0800abc6 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800abc6:	b580      	push	{r7, lr}
 800abc8:	b084      	sub	sp, #16
 800abca:	af00      	add	r7, sp, #0
 800abcc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abd2:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abd8:	2b82      	cmp	r3, #130	; 0x82
 800abda:	d111      	bne.n	800ac00 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	4618      	mov	r0, r3
 800abe2:	f002 fde7 	bl	800d7b4 <SDMMC_CmdStopTransfer>
 800abe6:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800abe8:	68bb      	ldr	r3, [r7, #8]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d008      	beq.n	800ac00 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800abf2:	68bb      	ldr	r3, [r7, #8]
 800abf4:	431a      	orrs	r2, r3
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800abfa:	68f8      	ldr	r0, [r7, #12]
 800abfc:	f7ff fd58 	bl	800a6b0 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	f022 0208 	bic.w	r2, r2, #8
 800ac0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	f240 523a 	movw	r2, #1338	; 0x53a
 800ac18:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	2201      	movs	r2, #1
 800ac1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	2200      	movs	r2, #0
 800ac26:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800ac28:	68f8      	ldr	r0, [r7, #12]
 800ac2a:	f003 fa3f 	bl	800e0ac <HAL_SD_RxCpltCallback>
#endif
}
 800ac2e:	bf00      	nop
 800ac30:	3710      	adds	r7, #16
 800ac32:	46bd      	mov	sp, r7
 800ac34:	bd80      	pop	{r7, pc}
	...

0800ac38 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b086      	sub	sp, #24
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac44:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800ac46:	6878      	ldr	r0, [r7, #4]
 800ac48:	f7fd f830 	bl	8007cac <HAL_DMA_GetError>
 800ac4c:	4603      	mov	r3, r0
 800ac4e:	2b02      	cmp	r3, #2
 800ac50:	d03e      	beq.n	800acd0 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800ac52:	697b      	ldr	r3, [r7, #20]
 800ac54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac58:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800ac5a:	697b      	ldr	r3, [r7, #20]
 800ac5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac60:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800ac62:	693b      	ldr	r3, [r7, #16]
 800ac64:	2b01      	cmp	r3, #1
 800ac66:	d002      	beq.n	800ac6e <SD_DMAError+0x36>
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	2b01      	cmp	r3, #1
 800ac6c:	d12d      	bne.n	800acca <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ac6e:	697b      	ldr	r3, [r7, #20]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	4a19      	ldr	r2, [pc, #100]	; (800acd8 <SD_DMAError+0xa0>)
 800ac74:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800ac76:	697b      	ldr	r3, [r7, #20]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ac7c:	697b      	ldr	r3, [r7, #20]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800ac84:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800ac86:	697b      	ldr	r3, [r7, #20]
 800ac88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac8a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ac8e:	697b      	ldr	r3, [r7, #20]
 800ac90:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800ac92:	6978      	ldr	r0, [r7, #20]
 800ac94:	f7ff ff62 	bl	800ab5c <HAL_SD_GetCardState>
 800ac98:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800ac9a:	68bb      	ldr	r3, [r7, #8]
 800ac9c:	2b06      	cmp	r3, #6
 800ac9e:	d002      	beq.n	800aca6 <SD_DMAError+0x6e>
 800aca0:	68bb      	ldr	r3, [r7, #8]
 800aca2:	2b05      	cmp	r3, #5
 800aca4:	d10a      	bne.n	800acbc <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800aca6:	697b      	ldr	r3, [r7, #20]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	4618      	mov	r0, r3
 800acac:	f002 fd82 	bl	800d7b4 <SDMMC_CmdStopTransfer>
 800acb0:	4602      	mov	r2, r0
 800acb2:	697b      	ldr	r3, [r7, #20]
 800acb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acb6:	431a      	orrs	r2, r3
 800acb8:	697b      	ldr	r3, [r7, #20]
 800acba:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800acbc:	697b      	ldr	r3, [r7, #20]
 800acbe:	2201      	movs	r2, #1
 800acc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800acc4:	697b      	ldr	r3, [r7, #20]
 800acc6:	2200      	movs	r2, #0
 800acc8:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800acca:	6978      	ldr	r0, [r7, #20]
 800accc:	f7ff fcf0 	bl	800a6b0 <HAL_SD_ErrorCallback>
#endif
  }
}
 800acd0:	bf00      	nop
 800acd2:	3718      	adds	r7, #24
 800acd4:	46bd      	mov	sp, r7
 800acd6:	bd80      	pop	{r7, pc}
 800acd8:	004005ff 	.word	0x004005ff

0800acdc <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	b084      	sub	sp, #16
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ace8:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	f240 523a 	movw	r2, #1338	; 0x53a
 800acf2:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800acf4:	68f8      	ldr	r0, [r7, #12]
 800acf6:	f7ff ff31 	bl	800ab5c <HAL_SD_GetCardState>
 800acfa:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	2201      	movs	r2, #1
 800ad00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	2200      	movs	r2, #0
 800ad08:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800ad0a:	68bb      	ldr	r3, [r7, #8]
 800ad0c:	2b06      	cmp	r3, #6
 800ad0e:	d002      	beq.n	800ad16 <SD_DMATxAbort+0x3a>
 800ad10:	68bb      	ldr	r3, [r7, #8]
 800ad12:	2b05      	cmp	r3, #5
 800ad14:	d10a      	bne.n	800ad2c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	f002 fd4a 	bl	800d7b4 <SDMMC_CmdStopTransfer>
 800ad20:	4602      	mov	r2, r0
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad26:	431a      	orrs	r2, r3
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d103      	bne.n	800ad3c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800ad34:	68f8      	ldr	r0, [r7, #12]
 800ad36:	f003 f9a5 	bl	800e084 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800ad3a:	e002      	b.n	800ad42 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800ad3c:	68f8      	ldr	r0, [r7, #12]
 800ad3e:	f7ff fcb7 	bl	800a6b0 <HAL_SD_ErrorCallback>
}
 800ad42:	bf00      	nop
 800ad44:	3710      	adds	r7, #16
 800ad46:	46bd      	mov	sp, r7
 800ad48:	bd80      	pop	{r7, pc}

0800ad4a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800ad4a:	b580      	push	{r7, lr}
 800ad4c:	b084      	sub	sp, #16
 800ad4e:	af00      	add	r7, sp, #0
 800ad50:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad56:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	f240 523a 	movw	r2, #1338	; 0x53a
 800ad60:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800ad62:	68f8      	ldr	r0, [r7, #12]
 800ad64:	f7ff fefa 	bl	800ab5c <HAL_SD_GetCardState>
 800ad68:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	2201      	movs	r2, #1
 800ad6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	2200      	movs	r2, #0
 800ad76:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800ad78:	68bb      	ldr	r3, [r7, #8]
 800ad7a:	2b06      	cmp	r3, #6
 800ad7c:	d002      	beq.n	800ad84 <SD_DMARxAbort+0x3a>
 800ad7e:	68bb      	ldr	r3, [r7, #8]
 800ad80:	2b05      	cmp	r3, #5
 800ad82:	d10a      	bne.n	800ad9a <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	4618      	mov	r0, r3
 800ad8a:	f002 fd13 	bl	800d7b4 <SDMMC_CmdStopTransfer>
 800ad8e:	4602      	mov	r2, r0
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad94:	431a      	orrs	r2, r3
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d103      	bne.n	800adaa <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800ada2:	68f8      	ldr	r0, [r7, #12]
 800ada4:	f003 f96e 	bl	800e084 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800ada8:	e002      	b.n	800adb0 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800adaa:	68f8      	ldr	r0, [r7, #12]
 800adac:	f7ff fc80 	bl	800a6b0 <HAL_SD_ErrorCallback>
}
 800adb0:	bf00      	nop
 800adb2:	3710      	adds	r7, #16
 800adb4:	46bd      	mov	sp, r7
 800adb6:	bd80      	pop	{r7, pc}

0800adb8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800adb8:	b5b0      	push	{r4, r5, r7, lr}
 800adba:	b094      	sub	sp, #80	; 0x50
 800adbc:	af04      	add	r7, sp, #16
 800adbe:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800adc0:	2301      	movs	r3, #1
 800adc2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	4618      	mov	r0, r3
 800adca:	f002 fbc5 	bl	800d558 <SDIO_GetPowerState>
 800adce:	4603      	mov	r3, r0
 800add0:	2b00      	cmp	r3, #0
 800add2:	d102      	bne.n	800adda <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800add4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800add8:	e0b7      	b.n	800af4a <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800adde:	2b03      	cmp	r3, #3
 800ade0:	d02f      	beq.n	800ae42 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	4618      	mov	r0, r3
 800ade8:	f002 fdee 	bl	800d9c8 <SDMMC_CmdSendCID>
 800adec:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800adee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d001      	beq.n	800adf8 <SD_InitCard+0x40>
    {
      return errorstate;
 800adf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adf6:	e0a8      	b.n	800af4a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	2100      	movs	r1, #0
 800adfe:	4618      	mov	r0, r3
 800ae00:	f002 fbef 	bl	800d5e2 <SDIO_GetResponse>
 800ae04:	4602      	mov	r2, r0
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	2104      	movs	r1, #4
 800ae10:	4618      	mov	r0, r3
 800ae12:	f002 fbe6 	bl	800d5e2 <SDIO_GetResponse>
 800ae16:	4602      	mov	r2, r0
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	2108      	movs	r1, #8
 800ae22:	4618      	mov	r0, r3
 800ae24:	f002 fbdd 	bl	800d5e2 <SDIO_GetResponse>
 800ae28:	4602      	mov	r2, r0
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	210c      	movs	r1, #12
 800ae34:	4618      	mov	r0, r3
 800ae36:	f002 fbd4 	bl	800d5e2 <SDIO_GetResponse>
 800ae3a:	4602      	mov	r2, r0
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae46:	2b03      	cmp	r3, #3
 800ae48:	d00d      	beq.n	800ae66 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	f107 020e 	add.w	r2, r7, #14
 800ae52:	4611      	mov	r1, r2
 800ae54:	4618      	mov	r0, r3
 800ae56:	f002 fdf4 	bl	800da42 <SDMMC_CmdSetRelAdd>
 800ae5a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ae5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d001      	beq.n	800ae66 <SD_InitCard+0xae>
    {
      return errorstate;
 800ae62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae64:	e071      	b.n	800af4a <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae6a:	2b03      	cmp	r3, #3
 800ae6c:	d036      	beq.n	800aedc <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800ae6e:	89fb      	ldrh	r3, [r7, #14]
 800ae70:	461a      	mov	r2, r3
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681a      	ldr	r2, [r3, #0]
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae7e:	041b      	lsls	r3, r3, #16
 800ae80:	4619      	mov	r1, r3
 800ae82:	4610      	mov	r0, r2
 800ae84:	f002 fdbe 	bl	800da04 <SDMMC_CmdSendCSD>
 800ae88:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ae8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d001      	beq.n	800ae94 <SD_InitCard+0xdc>
    {
      return errorstate;
 800ae90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae92:	e05a      	b.n	800af4a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	2100      	movs	r1, #0
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	f002 fba1 	bl	800d5e2 <SDIO_GetResponse>
 800aea0:	4602      	mov	r2, r0
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	2104      	movs	r1, #4
 800aeac:	4618      	mov	r0, r3
 800aeae:	f002 fb98 	bl	800d5e2 <SDIO_GetResponse>
 800aeb2:	4602      	mov	r2, r0
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	2108      	movs	r1, #8
 800aebe:	4618      	mov	r0, r3
 800aec0:	f002 fb8f 	bl	800d5e2 <SDIO_GetResponse>
 800aec4:	4602      	mov	r2, r0
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	210c      	movs	r1, #12
 800aed0:	4618      	mov	r0, r3
 800aed2:	f002 fb86 	bl	800d5e2 <SDIO_GetResponse>
 800aed6:	4602      	mov	r2, r0
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	2104      	movs	r1, #4
 800aee2:	4618      	mov	r0, r3
 800aee4:	f002 fb7d 	bl	800d5e2 <SDIO_GetResponse>
 800aee8:	4603      	mov	r3, r0
 800aeea:	0d1a      	lsrs	r2, r3, #20
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800aef0:	f107 0310 	add.w	r3, r7, #16
 800aef4:	4619      	mov	r1, r3
 800aef6:	6878      	ldr	r0, [r7, #4]
 800aef8:	f7ff fbe4 	bl	800a6c4 <HAL_SD_GetCardCSD>
 800aefc:	4603      	mov	r3, r0
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d002      	beq.n	800af08 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800af02:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800af06:	e020      	b.n	800af4a <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	6819      	ldr	r1, [r3, #0]
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af10:	041b      	lsls	r3, r3, #16
 800af12:	f04f 0400 	mov.w	r4, #0
 800af16:	461a      	mov	r2, r3
 800af18:	4623      	mov	r3, r4
 800af1a:	4608      	mov	r0, r1
 800af1c:	f002 fc6c 	bl	800d7f8 <SDMMC_CmdSelDesel>
 800af20:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800af22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af24:	2b00      	cmp	r3, #0
 800af26:	d001      	beq.n	800af2c <SD_InitCard+0x174>
  {
    return errorstate;
 800af28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af2a:	e00e      	b.n	800af4a <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681d      	ldr	r5, [r3, #0]
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	466c      	mov	r4, sp
 800af34:	f103 0210 	add.w	r2, r3, #16
 800af38:	ca07      	ldmia	r2, {r0, r1, r2}
 800af3a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800af3e:	3304      	adds	r3, #4
 800af40:	cb0e      	ldmia	r3, {r1, r2, r3}
 800af42:	4628      	mov	r0, r5
 800af44:	f002 fab0 	bl	800d4a8 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800af48:	2300      	movs	r3, #0
}
 800af4a:	4618      	mov	r0, r3
 800af4c:	3740      	adds	r7, #64	; 0x40
 800af4e:	46bd      	mov	sp, r7
 800af50:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800af54 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b086      	sub	sp, #24
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800af5c:	2300      	movs	r3, #0
 800af5e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800af60:	2300      	movs	r3, #0
 800af62:	617b      	str	r3, [r7, #20]
 800af64:	2300      	movs	r3, #0
 800af66:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	4618      	mov	r0, r3
 800af6e:	f002 fc66 	bl	800d83e <SDMMC_CmdGoIdleState>
 800af72:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d001      	beq.n	800af7e <SD_PowerON+0x2a>
  {
    return errorstate;
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	e072      	b.n	800b064 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	4618      	mov	r0, r3
 800af84:	f002 fc79 	bl	800d87a <SDMMC_CmdOperCond>
 800af88:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d00d      	beq.n	800afac <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	2200      	movs	r2, #0
 800af94:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	4618      	mov	r0, r3
 800af9c:	f002 fc4f 	bl	800d83e <SDMMC_CmdGoIdleState>
 800afa0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d004      	beq.n	800afb2 <SD_PowerON+0x5e>
    {
      return errorstate;
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	e05b      	b.n	800b064 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2201      	movs	r2, #1
 800afb0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800afb6:	2b01      	cmp	r3, #1
 800afb8:	d137      	bne.n	800b02a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	2100      	movs	r1, #0
 800afc0:	4618      	mov	r0, r3
 800afc2:	f002 fc79 	bl	800d8b8 <SDMMC_CmdAppCommand>
 800afc6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d02d      	beq.n	800b02a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800afce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800afd2:	e047      	b.n	800b064 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	2100      	movs	r1, #0
 800afda:	4618      	mov	r0, r3
 800afdc:	f002 fc6c 	bl	800d8b8 <SDMMC_CmdAppCommand>
 800afe0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d001      	beq.n	800afec <SD_PowerON+0x98>
    {
      return errorstate;
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	e03b      	b.n	800b064 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	491e      	ldr	r1, [pc, #120]	; (800b06c <SD_PowerON+0x118>)
 800aff2:	4618      	mov	r0, r3
 800aff4:	f002 fc82 	bl	800d8fc <SDMMC_CmdAppOperCommand>
 800aff8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d002      	beq.n	800b006 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b000:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b004:	e02e      	b.n	800b064 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	2100      	movs	r1, #0
 800b00c:	4618      	mov	r0, r3
 800b00e:	f002 fae8 	bl	800d5e2 <SDIO_GetResponse>
 800b012:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800b014:	697b      	ldr	r3, [r7, #20]
 800b016:	0fdb      	lsrs	r3, r3, #31
 800b018:	2b01      	cmp	r3, #1
 800b01a:	d101      	bne.n	800b020 <SD_PowerON+0xcc>
 800b01c:	2301      	movs	r3, #1
 800b01e:	e000      	b.n	800b022 <SD_PowerON+0xce>
 800b020:	2300      	movs	r3, #0
 800b022:	613b      	str	r3, [r7, #16]

    count++;
 800b024:	68bb      	ldr	r3, [r7, #8]
 800b026:	3301      	adds	r3, #1
 800b028:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800b02a:	68bb      	ldr	r3, [r7, #8]
 800b02c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b030:	4293      	cmp	r3, r2
 800b032:	d802      	bhi.n	800b03a <SD_PowerON+0xe6>
 800b034:	693b      	ldr	r3, [r7, #16]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d0cc      	beq.n	800afd4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800b03a:	68bb      	ldr	r3, [r7, #8]
 800b03c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b040:	4293      	cmp	r3, r2
 800b042:	d902      	bls.n	800b04a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800b044:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b048:	e00c      	b.n	800b064 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800b04a:	697b      	ldr	r3, [r7, #20]
 800b04c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b050:	2b00      	cmp	r3, #0
 800b052:	d003      	beq.n	800b05c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	2201      	movs	r2, #1
 800b058:	645a      	str	r2, [r3, #68]	; 0x44
 800b05a:	e002      	b.n	800b062 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2200      	movs	r2, #0
 800b060:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800b062:	2300      	movs	r3, #0
}
 800b064:	4618      	mov	r0, r3
 800b066:	3718      	adds	r7, #24
 800b068:	46bd      	mov	sp, r7
 800b06a:	bd80      	pop	{r7, pc}
 800b06c:	c1100000 	.word	0xc1100000

0800b070 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800b070:	b580      	push	{r7, lr}
 800b072:	b084      	sub	sp, #16
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]
 800b078:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800b07a:	683b      	ldr	r3, [r7, #0]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d102      	bne.n	800b086 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800b080:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b084:	e018      	b.n	800b0b8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681a      	ldr	r2, [r3, #0]
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b08e:	041b      	lsls	r3, r3, #16
 800b090:	4619      	mov	r1, r3
 800b092:	4610      	mov	r0, r2
 800b094:	f002 fcf6 	bl	800da84 <SDMMC_CmdSendStatus>
 800b098:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d001      	beq.n	800b0a4 <SD_SendStatus+0x34>
  {
    return errorstate;
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	e009      	b.n	800b0b8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	2100      	movs	r1, #0
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	f002 fa99 	bl	800d5e2 <SDIO_GetResponse>
 800b0b0:	4602      	mov	r2, r0
 800b0b2:	683b      	ldr	r3, [r7, #0]
 800b0b4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800b0b6:	2300      	movs	r3, #0
}
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	3710      	adds	r7, #16
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	bd80      	pop	{r7, pc}

0800b0c0 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b086      	sub	sp, #24
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	60fb      	str	r3, [r7, #12]
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	2100      	movs	r1, #0
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	f002 fa83 	bl	800d5e2 <SDIO_GetResponse>
 800b0dc:	4603      	mov	r3, r0
 800b0de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b0e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b0e6:	d102      	bne.n	800b0ee <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b0e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b0ec:	e02f      	b.n	800b14e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b0ee:	f107 030c 	add.w	r3, r7, #12
 800b0f2:	4619      	mov	r1, r3
 800b0f4:	6878      	ldr	r0, [r7, #4]
 800b0f6:	f000 f879 	bl	800b1ec <SD_FindSCR>
 800b0fa:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b0fc:	697b      	ldr	r3, [r7, #20]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d001      	beq.n	800b106 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800b102:	697b      	ldr	r3, [r7, #20]
 800b104:	e023      	b.n	800b14e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b106:	693b      	ldr	r3, [r7, #16]
 800b108:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d01c      	beq.n	800b14a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681a      	ldr	r2, [r3, #0]
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b118:	041b      	lsls	r3, r3, #16
 800b11a:	4619      	mov	r1, r3
 800b11c:	4610      	mov	r0, r2
 800b11e:	f002 fbcb 	bl	800d8b8 <SDMMC_CmdAppCommand>
 800b122:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b124:	697b      	ldr	r3, [r7, #20]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d001      	beq.n	800b12e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800b12a:	697b      	ldr	r3, [r7, #20]
 800b12c:	e00f      	b.n	800b14e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	2102      	movs	r1, #2
 800b134:	4618      	mov	r0, r3
 800b136:	f002 fc04 	bl	800d942 <SDMMC_CmdBusWidth>
 800b13a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b13c:	697b      	ldr	r3, [r7, #20]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d001      	beq.n	800b146 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800b142:	697b      	ldr	r3, [r7, #20]
 800b144:	e003      	b.n	800b14e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b146:	2300      	movs	r3, #0
 800b148:	e001      	b.n	800b14e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b14a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b14e:	4618      	mov	r0, r3
 800b150:	3718      	adds	r7, #24
 800b152:	46bd      	mov	sp, r7
 800b154:	bd80      	pop	{r7, pc}

0800b156 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800b156:	b580      	push	{r7, lr}
 800b158:	b086      	sub	sp, #24
 800b15a:	af00      	add	r7, sp, #0
 800b15c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800b15e:	2300      	movs	r3, #0
 800b160:	60fb      	str	r3, [r7, #12]
 800b162:	2300      	movs	r3, #0
 800b164:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	2100      	movs	r1, #0
 800b16c:	4618      	mov	r0, r3
 800b16e:	f002 fa38 	bl	800d5e2 <SDIO_GetResponse>
 800b172:	4603      	mov	r3, r0
 800b174:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b178:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b17c:	d102      	bne.n	800b184 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b17e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b182:	e02f      	b.n	800b1e4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b184:	f107 030c 	add.w	r3, r7, #12
 800b188:	4619      	mov	r1, r3
 800b18a:	6878      	ldr	r0, [r7, #4]
 800b18c:	f000 f82e 	bl	800b1ec <SD_FindSCR>
 800b190:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b192:	697b      	ldr	r3, [r7, #20]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d001      	beq.n	800b19c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800b198:	697b      	ldr	r3, [r7, #20]
 800b19a:	e023      	b.n	800b1e4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b19c:	693b      	ldr	r3, [r7, #16]
 800b19e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d01c      	beq.n	800b1e0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681a      	ldr	r2, [r3, #0]
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1ae:	041b      	lsls	r3, r3, #16
 800b1b0:	4619      	mov	r1, r3
 800b1b2:	4610      	mov	r0, r2
 800b1b4:	f002 fb80 	bl	800d8b8 <SDMMC_CmdAppCommand>
 800b1b8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b1ba:	697b      	ldr	r3, [r7, #20]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d001      	beq.n	800b1c4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800b1c0:	697b      	ldr	r3, [r7, #20]
 800b1c2:	e00f      	b.n	800b1e4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	2100      	movs	r1, #0
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	f002 fbb9 	bl	800d942 <SDMMC_CmdBusWidth>
 800b1d0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b1d2:	697b      	ldr	r3, [r7, #20]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d001      	beq.n	800b1dc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800b1d8:	697b      	ldr	r3, [r7, #20]
 800b1da:	e003      	b.n	800b1e4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b1dc:	2300      	movs	r3, #0
 800b1de:	e001      	b.n	800b1e4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b1e0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	3718      	adds	r7, #24
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	bd80      	pop	{r7, pc}

0800b1ec <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800b1ec:	b590      	push	{r4, r7, lr}
 800b1ee:	b08f      	sub	sp, #60	; 0x3c
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
 800b1f4:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b1f6:	f7fb fd63 	bl	8006cc0 <HAL_GetTick>
 800b1fa:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800b200:	2300      	movs	r3, #0
 800b202:	60bb      	str	r3, [r7, #8]
 800b204:	2300      	movs	r3, #0
 800b206:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800b208:	683b      	ldr	r3, [r7, #0]
 800b20a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	2108      	movs	r1, #8
 800b212:	4618      	mov	r0, r3
 800b214:	f002 fa24 	bl	800d660 <SDMMC_CmdBlockLength>
 800b218:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b21a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d001      	beq.n	800b224 <SD_FindSCR+0x38>
  {
    return errorstate;
 800b220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b222:	e0a9      	b.n	800b378 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681a      	ldr	r2, [r3, #0]
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b22c:	041b      	lsls	r3, r3, #16
 800b22e:	4619      	mov	r1, r3
 800b230:	4610      	mov	r0, r2
 800b232:	f002 fb41 	bl	800d8b8 <SDMMC_CmdAppCommand>
 800b236:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d001      	beq.n	800b242 <SD_FindSCR+0x56>
  {
    return errorstate;
 800b23e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b240:	e09a      	b.n	800b378 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b242:	f04f 33ff 	mov.w	r3, #4294967295
 800b246:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800b248:	2308      	movs	r3, #8
 800b24a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800b24c:	2330      	movs	r3, #48	; 0x30
 800b24e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800b250:	2302      	movs	r3, #2
 800b252:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800b254:	2300      	movs	r3, #0
 800b256:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800b258:	2301      	movs	r3, #1
 800b25a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	f107 0210 	add.w	r2, r7, #16
 800b264:	4611      	mov	r1, r2
 800b266:	4618      	mov	r0, r3
 800b268:	f002 f9ce 	bl	800d608 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	4618      	mov	r0, r3
 800b272:	f002 fb88 	bl	800d986 <SDMMC_CmdSendSCR>
 800b276:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d022      	beq.n	800b2c4 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800b27e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b280:	e07a      	b.n	800b378 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b288:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d00e      	beq.n	800b2ae <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	6819      	ldr	r1, [r3, #0]
 800b294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b296:	009b      	lsls	r3, r3, #2
 800b298:	f107 0208 	add.w	r2, r7, #8
 800b29c:	18d4      	adds	r4, r2, r3
 800b29e:	4608      	mov	r0, r1
 800b2a0:	f002 f92d 	bl	800d4fe <SDIO_ReadFIFO>
 800b2a4:	4603      	mov	r3, r0
 800b2a6:	6023      	str	r3, [r4, #0]
      index++;
 800b2a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2aa:	3301      	adds	r3, #1
 800b2ac:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b2ae:	f7fb fd07 	bl	8006cc0 <HAL_GetTick>
 800b2b2:	4602      	mov	r2, r0
 800b2b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2b6:	1ad3      	subs	r3, r2, r3
 800b2b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2bc:	d102      	bne.n	800b2c4 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b2be:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b2c2:	e059      	b.n	800b378 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b2ca:	f240 432a 	movw	r3, #1066	; 0x42a
 800b2ce:	4013      	ands	r3, r2
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d0d6      	beq.n	800b282 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2da:	f003 0308 	and.w	r3, r3, #8
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d005      	beq.n	800b2ee <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	2208      	movs	r2, #8
 800b2e8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b2ea:	2308      	movs	r3, #8
 800b2ec:	e044      	b.n	800b378 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2f4:	f003 0302 	and.w	r3, r3, #2
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d005      	beq.n	800b308 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	2202      	movs	r2, #2
 800b302:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b304:	2302      	movs	r3, #2
 800b306:	e037      	b.n	800b378 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b30e:	f003 0320 	and.w	r3, r3, #32
 800b312:	2b00      	cmp	r3, #0
 800b314:	d005      	beq.n	800b322 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	2220      	movs	r2, #32
 800b31c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800b31e:	2320      	movs	r3, #32
 800b320:	e02a      	b.n	800b378 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	f240 523a 	movw	r2, #1338	; 0x53a
 800b32a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	061a      	lsls	r2, r3, #24
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	021b      	lsls	r3, r3, #8
 800b334:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b338:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	0a1b      	lsrs	r3, r3, #8
 800b33e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b342:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	0e1b      	lsrs	r3, r3, #24
 800b348:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b34a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b34c:	601a      	str	r2, [r3, #0]
    scr++;
 800b34e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b350:	3304      	adds	r3, #4
 800b352:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b354:	68bb      	ldr	r3, [r7, #8]
 800b356:	061a      	lsls	r2, r3, #24
 800b358:	68bb      	ldr	r3, [r7, #8]
 800b35a:	021b      	lsls	r3, r3, #8
 800b35c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b360:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b362:	68bb      	ldr	r3, [r7, #8]
 800b364:	0a1b      	lsrs	r3, r3, #8
 800b366:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b36a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b36c:	68bb      	ldr	r3, [r7, #8]
 800b36e:	0e1b      	lsrs	r3, r3, #24
 800b370:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b374:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800b376:	2300      	movs	r3, #0
}
 800b378:	4618      	mov	r0, r3
 800b37a:	373c      	adds	r7, #60	; 0x3c
 800b37c:	46bd      	mov	sp, r7
 800b37e:	bd90      	pop	{r4, r7, pc}

0800b380 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b086      	sub	sp, #24
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b38c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b392:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800b394:	693b      	ldr	r3, [r7, #16]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d03f      	beq.n	800b41a <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800b39a:	2300      	movs	r3, #0
 800b39c:	617b      	str	r3, [r7, #20]
 800b39e:	e033      	b.n	800b408 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	f002 f8aa 	bl	800d4fe <SDIO_ReadFIFO>
 800b3aa:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800b3ac:	68bb      	ldr	r3, [r7, #8]
 800b3ae:	b2da      	uxtb	r2, r3
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	3301      	adds	r3, #1
 800b3b8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b3ba:	693b      	ldr	r3, [r7, #16]
 800b3bc:	3b01      	subs	r3, #1
 800b3be:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800b3c0:	68bb      	ldr	r3, [r7, #8]
 800b3c2:	0a1b      	lsrs	r3, r3, #8
 800b3c4:	b2da      	uxtb	r2, r3
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	3301      	adds	r3, #1
 800b3ce:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b3d0:	693b      	ldr	r3, [r7, #16]
 800b3d2:	3b01      	subs	r3, #1
 800b3d4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800b3d6:	68bb      	ldr	r3, [r7, #8]
 800b3d8:	0c1b      	lsrs	r3, r3, #16
 800b3da:	b2da      	uxtb	r2, r3
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	3301      	adds	r3, #1
 800b3e4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b3e6:	693b      	ldr	r3, [r7, #16]
 800b3e8:	3b01      	subs	r3, #1
 800b3ea:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800b3ec:	68bb      	ldr	r3, [r7, #8]
 800b3ee:	0e1b      	lsrs	r3, r3, #24
 800b3f0:	b2da      	uxtb	r2, r3
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	3301      	adds	r3, #1
 800b3fa:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b3fc:	693b      	ldr	r3, [r7, #16]
 800b3fe:	3b01      	subs	r3, #1
 800b400:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800b402:	697b      	ldr	r3, [r7, #20]
 800b404:	3301      	adds	r3, #1
 800b406:	617b      	str	r3, [r7, #20]
 800b408:	697b      	ldr	r3, [r7, #20]
 800b40a:	2b07      	cmp	r3, #7
 800b40c:	d9c8      	bls.n	800b3a0 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	68fa      	ldr	r2, [r7, #12]
 800b412:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	693a      	ldr	r2, [r7, #16]
 800b418:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800b41a:	bf00      	nop
 800b41c:	3718      	adds	r7, #24
 800b41e:	46bd      	mov	sp, r7
 800b420:	bd80      	pop	{r7, pc}

0800b422 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800b422:	b580      	push	{r7, lr}
 800b424:	b086      	sub	sp, #24
 800b426:	af00      	add	r7, sp, #0
 800b428:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	6a1b      	ldr	r3, [r3, #32]
 800b42e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b434:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800b436:	693b      	ldr	r3, [r7, #16]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d043      	beq.n	800b4c4 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800b43c:	2300      	movs	r3, #0
 800b43e:	617b      	str	r3, [r7, #20]
 800b440:	e037      	b.n	800b4b2 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	781b      	ldrb	r3, [r3, #0]
 800b446:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	3301      	adds	r3, #1
 800b44c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b44e:	693b      	ldr	r3, [r7, #16]
 800b450:	3b01      	subs	r3, #1
 800b452:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	781b      	ldrb	r3, [r3, #0]
 800b458:	021a      	lsls	r2, r3, #8
 800b45a:	68bb      	ldr	r3, [r7, #8]
 800b45c:	4313      	orrs	r3, r2
 800b45e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	3301      	adds	r3, #1
 800b464:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b466:	693b      	ldr	r3, [r7, #16]
 800b468:	3b01      	subs	r3, #1
 800b46a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	781b      	ldrb	r3, [r3, #0]
 800b470:	041a      	lsls	r2, r3, #16
 800b472:	68bb      	ldr	r3, [r7, #8]
 800b474:	4313      	orrs	r3, r2
 800b476:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	3301      	adds	r3, #1
 800b47c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b47e:	693b      	ldr	r3, [r7, #16]
 800b480:	3b01      	subs	r3, #1
 800b482:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	781b      	ldrb	r3, [r3, #0]
 800b488:	061a      	lsls	r2, r3, #24
 800b48a:	68bb      	ldr	r3, [r7, #8]
 800b48c:	4313      	orrs	r3, r2
 800b48e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	3301      	adds	r3, #1
 800b494:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b496:	693b      	ldr	r3, [r7, #16]
 800b498:	3b01      	subs	r3, #1
 800b49a:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	f107 0208 	add.w	r2, r7, #8
 800b4a4:	4611      	mov	r1, r2
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	f002 f836 	bl	800d518 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800b4ac:	697b      	ldr	r3, [r7, #20]
 800b4ae:	3301      	adds	r3, #1
 800b4b0:	617b      	str	r3, [r7, #20]
 800b4b2:	697b      	ldr	r3, [r7, #20]
 800b4b4:	2b07      	cmp	r3, #7
 800b4b6:	d9c4      	bls.n	800b442 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	68fa      	ldr	r2, [r7, #12]
 800b4bc:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	693a      	ldr	r2, [r7, #16]
 800b4c2:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800b4c4:	bf00      	nop
 800b4c6:	3718      	adds	r7, #24
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	bd80      	pop	{r7, pc}

0800b4cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b082      	sub	sp, #8
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d101      	bne.n	800b4de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b4da:	2301      	movs	r3, #1
 800b4dc:	e056      	b.n	800b58c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	2200      	movs	r2, #0
 800b4e2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b4ea:	b2db      	uxtb	r3, r3
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d106      	bne.n	800b4fe <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b4f8:	6878      	ldr	r0, [r7, #4]
 800b4fa:	f7f9 fc67 	bl	8004dcc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	2202      	movs	r2, #2
 800b502:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	681a      	ldr	r2, [r3, #0]
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b514:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	685a      	ldr	r2, [r3, #4]
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	689b      	ldr	r3, [r3, #8]
 800b51e:	431a      	orrs	r2, r3
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	68db      	ldr	r3, [r3, #12]
 800b524:	431a      	orrs	r2, r3
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	691b      	ldr	r3, [r3, #16]
 800b52a:	431a      	orrs	r2, r3
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	695b      	ldr	r3, [r3, #20]
 800b530:	431a      	orrs	r2, r3
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	699b      	ldr	r3, [r3, #24]
 800b536:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b53a:	431a      	orrs	r2, r3
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	69db      	ldr	r3, [r3, #28]
 800b540:	431a      	orrs	r2, r3
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	6a1b      	ldr	r3, [r3, #32]
 800b546:	ea42 0103 	orr.w	r1, r2, r3
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	430a      	orrs	r2, r1
 800b554:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	699b      	ldr	r3, [r3, #24]
 800b55a:	0c1b      	lsrs	r3, r3, #16
 800b55c:	f003 0104 	and.w	r1, r3, #4
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	430a      	orrs	r2, r1
 800b56a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	69da      	ldr	r2, [r3, #28]
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b57a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	2200      	movs	r2, #0
 800b580:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	2201      	movs	r2, #1
 800b586:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800b58a:	2300      	movs	r3, #0
}
 800b58c:	4618      	mov	r0, r3
 800b58e:	3708      	adds	r7, #8
 800b590:	46bd      	mov	sp, r7
 800b592:	bd80      	pop	{r7, pc}

0800b594 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b594:	b580      	push	{r7, lr}
 800b596:	b088      	sub	sp, #32
 800b598:	af00      	add	r7, sp, #0
 800b59a:	60f8      	str	r0, [r7, #12]
 800b59c:	60b9      	str	r1, [r7, #8]
 800b59e:	603b      	str	r3, [r7, #0]
 800b5a0:	4613      	mov	r3, r2
 800b5a2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b5ae:	2b01      	cmp	r3, #1
 800b5b0:	d101      	bne.n	800b5b6 <HAL_SPI_Transmit+0x22>
 800b5b2:	2302      	movs	r3, #2
 800b5b4:	e11e      	b.n	800b7f4 <HAL_SPI_Transmit+0x260>
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	2201      	movs	r2, #1
 800b5ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b5be:	f7fb fb7f 	bl	8006cc0 <HAL_GetTick>
 800b5c2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800b5c4:	88fb      	ldrh	r3, [r7, #6]
 800b5c6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b5ce:	b2db      	uxtb	r3, r3
 800b5d0:	2b01      	cmp	r3, #1
 800b5d2:	d002      	beq.n	800b5da <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800b5d4:	2302      	movs	r3, #2
 800b5d6:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b5d8:	e103      	b.n	800b7e2 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800b5da:	68bb      	ldr	r3, [r7, #8]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d002      	beq.n	800b5e6 <HAL_SPI_Transmit+0x52>
 800b5e0:	88fb      	ldrh	r3, [r7, #6]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d102      	bne.n	800b5ec <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800b5e6:	2301      	movs	r3, #1
 800b5e8:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b5ea:	e0fa      	b.n	800b7e2 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	2203      	movs	r2, #3
 800b5f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	68ba      	ldr	r2, [r7, #8]
 800b5fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	88fa      	ldrh	r2, [r7, #6]
 800b604:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	88fa      	ldrh	r2, [r7, #6]
 800b60a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	2200      	movs	r2, #0
 800b610:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	2200      	movs	r2, #0
 800b616:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	2200      	movs	r2, #0
 800b61c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	2200      	movs	r2, #0
 800b622:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	2200      	movs	r2, #0
 800b628:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	689b      	ldr	r3, [r3, #8]
 800b62e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b632:	d107      	bne.n	800b644 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	681a      	ldr	r2, [r3, #0]
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b642:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b64e:	2b40      	cmp	r3, #64	; 0x40
 800b650:	d007      	beq.n	800b662 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	681a      	ldr	r2, [r3, #0]
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b660:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	68db      	ldr	r3, [r3, #12]
 800b666:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b66a:	d14b      	bne.n	800b704 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	685b      	ldr	r3, [r3, #4]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d002      	beq.n	800b67a <HAL_SPI_Transmit+0xe6>
 800b674:	8afb      	ldrh	r3, [r7, #22]
 800b676:	2b01      	cmp	r3, #1
 800b678:	d13e      	bne.n	800b6f8 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b67e:	881a      	ldrh	r2, [r3, #0]
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b68a:	1c9a      	adds	r2, r3, #2
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b694:	b29b      	uxth	r3, r3
 800b696:	3b01      	subs	r3, #1
 800b698:	b29a      	uxth	r2, r3
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b69e:	e02b      	b.n	800b6f8 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	689b      	ldr	r3, [r3, #8]
 800b6a6:	f003 0302 	and.w	r3, r3, #2
 800b6aa:	2b02      	cmp	r3, #2
 800b6ac:	d112      	bne.n	800b6d4 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6b2:	881a      	ldrh	r2, [r3, #0]
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6be:	1c9a      	adds	r2, r3, #2
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b6c8:	b29b      	uxth	r3, r3
 800b6ca:	3b01      	subs	r3, #1
 800b6cc:	b29a      	uxth	r2, r3
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	86da      	strh	r2, [r3, #54]	; 0x36
 800b6d2:	e011      	b.n	800b6f8 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b6d4:	f7fb faf4 	bl	8006cc0 <HAL_GetTick>
 800b6d8:	4602      	mov	r2, r0
 800b6da:	69bb      	ldr	r3, [r7, #24]
 800b6dc:	1ad3      	subs	r3, r2, r3
 800b6de:	683a      	ldr	r2, [r7, #0]
 800b6e0:	429a      	cmp	r2, r3
 800b6e2:	d803      	bhi.n	800b6ec <HAL_SPI_Transmit+0x158>
 800b6e4:	683b      	ldr	r3, [r7, #0]
 800b6e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6ea:	d102      	bne.n	800b6f2 <HAL_SPI_Transmit+0x15e>
 800b6ec:	683b      	ldr	r3, [r7, #0]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d102      	bne.n	800b6f8 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800b6f2:	2303      	movs	r3, #3
 800b6f4:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b6f6:	e074      	b.n	800b7e2 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b6fc:	b29b      	uxth	r3, r3
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d1ce      	bne.n	800b6a0 <HAL_SPI_Transmit+0x10c>
 800b702:	e04c      	b.n	800b79e <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	685b      	ldr	r3, [r3, #4]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d002      	beq.n	800b712 <HAL_SPI_Transmit+0x17e>
 800b70c:	8afb      	ldrh	r3, [r7, #22]
 800b70e:	2b01      	cmp	r3, #1
 800b710:	d140      	bne.n	800b794 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	330c      	adds	r3, #12
 800b71c:	7812      	ldrb	r2, [r2, #0]
 800b71e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b724:	1c5a      	adds	r2, r3, #1
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b72e:	b29b      	uxth	r3, r3
 800b730:	3b01      	subs	r3, #1
 800b732:	b29a      	uxth	r2, r3
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800b738:	e02c      	b.n	800b794 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	689b      	ldr	r3, [r3, #8]
 800b740:	f003 0302 	and.w	r3, r3, #2
 800b744:	2b02      	cmp	r3, #2
 800b746:	d113      	bne.n	800b770 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	330c      	adds	r3, #12
 800b752:	7812      	ldrb	r2, [r2, #0]
 800b754:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b75a:	1c5a      	adds	r2, r3, #1
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b764:	b29b      	uxth	r3, r3
 800b766:	3b01      	subs	r3, #1
 800b768:	b29a      	uxth	r2, r3
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	86da      	strh	r2, [r3, #54]	; 0x36
 800b76e:	e011      	b.n	800b794 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b770:	f7fb faa6 	bl	8006cc0 <HAL_GetTick>
 800b774:	4602      	mov	r2, r0
 800b776:	69bb      	ldr	r3, [r7, #24]
 800b778:	1ad3      	subs	r3, r2, r3
 800b77a:	683a      	ldr	r2, [r7, #0]
 800b77c:	429a      	cmp	r2, r3
 800b77e:	d803      	bhi.n	800b788 <HAL_SPI_Transmit+0x1f4>
 800b780:	683b      	ldr	r3, [r7, #0]
 800b782:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b786:	d102      	bne.n	800b78e <HAL_SPI_Transmit+0x1fa>
 800b788:	683b      	ldr	r3, [r7, #0]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d102      	bne.n	800b794 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800b78e:	2303      	movs	r3, #3
 800b790:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b792:	e026      	b.n	800b7e2 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b798:	b29b      	uxth	r3, r3
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d1cd      	bne.n	800b73a <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b79e:	69ba      	ldr	r2, [r7, #24]
 800b7a0:	6839      	ldr	r1, [r7, #0]
 800b7a2:	68f8      	ldr	r0, [r7, #12]
 800b7a4:	f000 fba4 	bl	800bef0 <SPI_EndRxTxTransaction>
 800b7a8:	4603      	mov	r3, r0
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d002      	beq.n	800b7b4 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	2220      	movs	r2, #32
 800b7b2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	689b      	ldr	r3, [r3, #8]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d10a      	bne.n	800b7d2 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b7bc:	2300      	movs	r3, #0
 800b7be:	613b      	str	r3, [r7, #16]
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	68db      	ldr	r3, [r3, #12]
 800b7c6:	613b      	str	r3, [r7, #16]
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	689b      	ldr	r3, [r3, #8]
 800b7ce:	613b      	str	r3, [r7, #16]
 800b7d0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d002      	beq.n	800b7e0 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800b7da:	2301      	movs	r3, #1
 800b7dc:	77fb      	strb	r3, [r7, #31]
 800b7de:	e000      	b.n	800b7e2 <HAL_SPI_Transmit+0x24e>
  }

error:
 800b7e0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	2201      	movs	r2, #1
 800b7e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b7f2:	7ffb      	ldrb	r3, [r7, #31]
}
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	3720      	adds	r7, #32
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	bd80      	pop	{r7, pc}

0800b7fc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b088      	sub	sp, #32
 800b800:	af02      	add	r7, sp, #8
 800b802:	60f8      	str	r0, [r7, #12]
 800b804:	60b9      	str	r1, [r7, #8]
 800b806:	603b      	str	r3, [r7, #0]
 800b808:	4613      	mov	r3, r2
 800b80a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b80c:	2300      	movs	r3, #0
 800b80e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	685b      	ldr	r3, [r3, #4]
 800b814:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b818:	d112      	bne.n	800b840 <HAL_SPI_Receive+0x44>
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	689b      	ldr	r3, [r3, #8]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d10e      	bne.n	800b840 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	2204      	movs	r2, #4
 800b826:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800b82a:	88fa      	ldrh	r2, [r7, #6]
 800b82c:	683b      	ldr	r3, [r7, #0]
 800b82e:	9300      	str	r3, [sp, #0]
 800b830:	4613      	mov	r3, r2
 800b832:	68ba      	ldr	r2, [r7, #8]
 800b834:	68b9      	ldr	r1, [r7, #8]
 800b836:	68f8      	ldr	r0, [r7, #12]
 800b838:	f000 f8e9 	bl	800ba0e <HAL_SPI_TransmitReceive>
 800b83c:	4603      	mov	r3, r0
 800b83e:	e0e2      	b.n	800ba06 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b846:	2b01      	cmp	r3, #1
 800b848:	d101      	bne.n	800b84e <HAL_SPI_Receive+0x52>
 800b84a:	2302      	movs	r3, #2
 800b84c:	e0db      	b.n	800ba06 <HAL_SPI_Receive+0x20a>
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	2201      	movs	r2, #1
 800b852:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b856:	f7fb fa33 	bl	8006cc0 <HAL_GetTick>
 800b85a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b862:	b2db      	uxtb	r3, r3
 800b864:	2b01      	cmp	r3, #1
 800b866:	d002      	beq.n	800b86e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800b868:	2302      	movs	r3, #2
 800b86a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b86c:	e0c2      	b.n	800b9f4 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800b86e:	68bb      	ldr	r3, [r7, #8]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d002      	beq.n	800b87a <HAL_SPI_Receive+0x7e>
 800b874:	88fb      	ldrh	r3, [r7, #6]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d102      	bne.n	800b880 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800b87a:	2301      	movs	r3, #1
 800b87c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b87e:	e0b9      	b.n	800b9f4 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	2204      	movs	r2, #4
 800b884:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	2200      	movs	r2, #0
 800b88c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	68ba      	ldr	r2, [r7, #8]
 800b892:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	88fa      	ldrh	r2, [r7, #6]
 800b898:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	88fa      	ldrh	r2, [r7, #6]
 800b89e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	2200      	movs	r2, #0
 800b8aa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	2200      	movs	r2, #0
 800b8b0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	689b      	ldr	r3, [r3, #8]
 800b8c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b8c6:	d107      	bne.n	800b8d8 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	681a      	ldr	r2, [r3, #0]
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b8d6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8e2:	2b40      	cmp	r3, #64	; 0x40
 800b8e4:	d007      	beq.n	800b8f6 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	681a      	ldr	r2, [r3, #0]
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b8f4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	68db      	ldr	r3, [r3, #12]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d162      	bne.n	800b9c4 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800b8fe:	e02e      	b.n	800b95e <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	689b      	ldr	r3, [r3, #8]
 800b906:	f003 0301 	and.w	r3, r3, #1
 800b90a:	2b01      	cmp	r3, #1
 800b90c:	d115      	bne.n	800b93a <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	f103 020c 	add.w	r2, r3, #12
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b91a:	7812      	ldrb	r2, [r2, #0]
 800b91c:	b2d2      	uxtb	r2, r2
 800b91e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b924:	1c5a      	adds	r2, r3, #1
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b92e:	b29b      	uxth	r3, r3
 800b930:	3b01      	subs	r3, #1
 800b932:	b29a      	uxth	r2, r3
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b938:	e011      	b.n	800b95e <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b93a:	f7fb f9c1 	bl	8006cc0 <HAL_GetTick>
 800b93e:	4602      	mov	r2, r0
 800b940:	693b      	ldr	r3, [r7, #16]
 800b942:	1ad3      	subs	r3, r2, r3
 800b944:	683a      	ldr	r2, [r7, #0]
 800b946:	429a      	cmp	r2, r3
 800b948:	d803      	bhi.n	800b952 <HAL_SPI_Receive+0x156>
 800b94a:	683b      	ldr	r3, [r7, #0]
 800b94c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b950:	d102      	bne.n	800b958 <HAL_SPI_Receive+0x15c>
 800b952:	683b      	ldr	r3, [r7, #0]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d102      	bne.n	800b95e <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800b958:	2303      	movs	r3, #3
 800b95a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800b95c:	e04a      	b.n	800b9f4 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b962:	b29b      	uxth	r3, r3
 800b964:	2b00      	cmp	r3, #0
 800b966:	d1cb      	bne.n	800b900 <HAL_SPI_Receive+0x104>
 800b968:	e031      	b.n	800b9ce <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	689b      	ldr	r3, [r3, #8]
 800b970:	f003 0301 	and.w	r3, r3, #1
 800b974:	2b01      	cmp	r3, #1
 800b976:	d113      	bne.n	800b9a0 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	68da      	ldr	r2, [r3, #12]
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b982:	b292      	uxth	r2, r2
 800b984:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b98a:	1c9a      	adds	r2, r3, #2
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b994:	b29b      	uxth	r3, r3
 800b996:	3b01      	subs	r3, #1
 800b998:	b29a      	uxth	r2, r3
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b99e:	e011      	b.n	800b9c4 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b9a0:	f7fb f98e 	bl	8006cc0 <HAL_GetTick>
 800b9a4:	4602      	mov	r2, r0
 800b9a6:	693b      	ldr	r3, [r7, #16]
 800b9a8:	1ad3      	subs	r3, r2, r3
 800b9aa:	683a      	ldr	r2, [r7, #0]
 800b9ac:	429a      	cmp	r2, r3
 800b9ae:	d803      	bhi.n	800b9b8 <HAL_SPI_Receive+0x1bc>
 800b9b0:	683b      	ldr	r3, [r7, #0]
 800b9b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9b6:	d102      	bne.n	800b9be <HAL_SPI_Receive+0x1c2>
 800b9b8:	683b      	ldr	r3, [r7, #0]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d102      	bne.n	800b9c4 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800b9be:	2303      	movs	r3, #3
 800b9c0:	75fb      	strb	r3, [r7, #23]
          goto error;
 800b9c2:	e017      	b.n	800b9f4 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b9c8:	b29b      	uxth	r3, r3
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d1cd      	bne.n	800b96a <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b9ce:	693a      	ldr	r2, [r7, #16]
 800b9d0:	6839      	ldr	r1, [r7, #0]
 800b9d2:	68f8      	ldr	r0, [r7, #12]
 800b9d4:	f000 fa27 	bl	800be26 <SPI_EndRxTransaction>
 800b9d8:	4603      	mov	r3, r0
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d002      	beq.n	800b9e4 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	2220      	movs	r2, #32
 800b9e2:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d002      	beq.n	800b9f2 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800b9ec:	2301      	movs	r3, #1
 800b9ee:	75fb      	strb	r3, [r7, #23]
 800b9f0:	e000      	b.n	800b9f4 <HAL_SPI_Receive+0x1f8>
  }

error :
 800b9f2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	2201      	movs	r2, #1
 800b9f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	2200      	movs	r2, #0
 800ba00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ba04:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba06:	4618      	mov	r0, r3
 800ba08:	3718      	adds	r7, #24
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	bd80      	pop	{r7, pc}

0800ba0e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800ba0e:	b580      	push	{r7, lr}
 800ba10:	b08c      	sub	sp, #48	; 0x30
 800ba12:	af00      	add	r7, sp, #0
 800ba14:	60f8      	str	r0, [r7, #12]
 800ba16:	60b9      	str	r1, [r7, #8]
 800ba18:	607a      	str	r2, [r7, #4]
 800ba1a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800ba1c:	2301      	movs	r3, #1
 800ba1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800ba20:	2300      	movs	r3, #0
 800ba22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ba2c:	2b01      	cmp	r3, #1
 800ba2e:	d101      	bne.n	800ba34 <HAL_SPI_TransmitReceive+0x26>
 800ba30:	2302      	movs	r3, #2
 800ba32:	e18a      	b.n	800bd4a <HAL_SPI_TransmitReceive+0x33c>
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	2201      	movs	r2, #1
 800ba38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ba3c:	f7fb f940 	bl	8006cc0 <HAL_GetTick>
 800ba40:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ba48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	685b      	ldr	r3, [r3, #4]
 800ba50:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800ba52:	887b      	ldrh	r3, [r7, #2]
 800ba54:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800ba56:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ba5a:	2b01      	cmp	r3, #1
 800ba5c:	d00f      	beq.n	800ba7e <HAL_SPI_TransmitReceive+0x70>
 800ba5e:	69fb      	ldr	r3, [r7, #28]
 800ba60:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ba64:	d107      	bne.n	800ba76 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	689b      	ldr	r3, [r3, #8]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d103      	bne.n	800ba76 <HAL_SPI_TransmitReceive+0x68>
 800ba6e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ba72:	2b04      	cmp	r3, #4
 800ba74:	d003      	beq.n	800ba7e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800ba76:	2302      	movs	r3, #2
 800ba78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800ba7c:	e15b      	b.n	800bd36 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800ba7e:	68bb      	ldr	r3, [r7, #8]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d005      	beq.n	800ba90 <HAL_SPI_TransmitReceive+0x82>
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d002      	beq.n	800ba90 <HAL_SPI_TransmitReceive+0x82>
 800ba8a:	887b      	ldrh	r3, [r7, #2]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d103      	bne.n	800ba98 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800ba90:	2301      	movs	r3, #1
 800ba92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800ba96:	e14e      	b.n	800bd36 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ba9e:	b2db      	uxtb	r3, r3
 800baa0:	2b04      	cmp	r3, #4
 800baa2:	d003      	beq.n	800baac <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	2205      	movs	r2, #5
 800baa8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	2200      	movs	r2, #0
 800bab0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	687a      	ldr	r2, [r7, #4]
 800bab6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	887a      	ldrh	r2, [r7, #2]
 800babc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	887a      	ldrh	r2, [r7, #2]
 800bac2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	68ba      	ldr	r2, [r7, #8]
 800bac8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	887a      	ldrh	r2, [r7, #2]
 800bace:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	887a      	ldrh	r2, [r7, #2]
 800bad4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	2200      	movs	r2, #0
 800bada:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	2200      	movs	r2, #0
 800bae0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800baec:	2b40      	cmp	r3, #64	; 0x40
 800baee:	d007      	beq.n	800bb00 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	681a      	ldr	r2, [r3, #0]
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bafe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	68db      	ldr	r3, [r3, #12]
 800bb04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bb08:	d178      	bne.n	800bbfc <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	685b      	ldr	r3, [r3, #4]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d002      	beq.n	800bb18 <HAL_SPI_TransmitReceive+0x10a>
 800bb12:	8b7b      	ldrh	r3, [r7, #26]
 800bb14:	2b01      	cmp	r3, #1
 800bb16:	d166      	bne.n	800bbe6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb1c:	881a      	ldrh	r2, [r3, #0]
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb28:	1c9a      	adds	r2, r3, #2
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bb32:	b29b      	uxth	r3, r3
 800bb34:	3b01      	subs	r3, #1
 800bb36:	b29a      	uxth	r2, r3
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bb3c:	e053      	b.n	800bbe6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	689b      	ldr	r3, [r3, #8]
 800bb44:	f003 0302 	and.w	r3, r3, #2
 800bb48:	2b02      	cmp	r3, #2
 800bb4a:	d11b      	bne.n	800bb84 <HAL_SPI_TransmitReceive+0x176>
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bb50:	b29b      	uxth	r3, r3
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d016      	beq.n	800bb84 <HAL_SPI_TransmitReceive+0x176>
 800bb56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb58:	2b01      	cmp	r3, #1
 800bb5a:	d113      	bne.n	800bb84 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb60:	881a      	ldrh	r2, [r3, #0]
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb6c:	1c9a      	adds	r2, r3, #2
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bb76:	b29b      	uxth	r3, r3
 800bb78:	3b01      	subs	r3, #1
 800bb7a:	b29a      	uxth	r2, r3
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800bb80:	2300      	movs	r3, #0
 800bb82:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	689b      	ldr	r3, [r3, #8]
 800bb8a:	f003 0301 	and.w	r3, r3, #1
 800bb8e:	2b01      	cmp	r3, #1
 800bb90:	d119      	bne.n	800bbc6 <HAL_SPI_TransmitReceive+0x1b8>
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bb96:	b29b      	uxth	r3, r3
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d014      	beq.n	800bbc6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	68da      	ldr	r2, [r3, #12]
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bba6:	b292      	uxth	r2, r2
 800bba8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbae:	1c9a      	adds	r2, r3, #2
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bbb8:	b29b      	uxth	r3, r3
 800bbba:	3b01      	subs	r3, #1
 800bbbc:	b29a      	uxth	r2, r3
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800bbc2:	2301      	movs	r3, #1
 800bbc4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800bbc6:	f7fb f87b 	bl	8006cc0 <HAL_GetTick>
 800bbca:	4602      	mov	r2, r0
 800bbcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbce:	1ad3      	subs	r3, r2, r3
 800bbd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bbd2:	429a      	cmp	r2, r3
 800bbd4:	d807      	bhi.n	800bbe6 <HAL_SPI_TransmitReceive+0x1d8>
 800bbd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbdc:	d003      	beq.n	800bbe6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800bbde:	2303      	movs	r3, #3
 800bbe0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800bbe4:	e0a7      	b.n	800bd36 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bbea:	b29b      	uxth	r3, r3
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d1a6      	bne.n	800bb3e <HAL_SPI_TransmitReceive+0x130>
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bbf4:	b29b      	uxth	r3, r3
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d1a1      	bne.n	800bb3e <HAL_SPI_TransmitReceive+0x130>
 800bbfa:	e07c      	b.n	800bcf6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	685b      	ldr	r3, [r3, #4]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d002      	beq.n	800bc0a <HAL_SPI_TransmitReceive+0x1fc>
 800bc04:	8b7b      	ldrh	r3, [r7, #26]
 800bc06:	2b01      	cmp	r3, #1
 800bc08:	d16b      	bne.n	800bce2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	330c      	adds	r3, #12
 800bc14:	7812      	ldrb	r2, [r2, #0]
 800bc16:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc1c:	1c5a      	adds	r2, r3, #1
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bc26:	b29b      	uxth	r3, r3
 800bc28:	3b01      	subs	r3, #1
 800bc2a:	b29a      	uxth	r2, r3
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bc30:	e057      	b.n	800bce2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	689b      	ldr	r3, [r3, #8]
 800bc38:	f003 0302 	and.w	r3, r3, #2
 800bc3c:	2b02      	cmp	r3, #2
 800bc3e:	d11c      	bne.n	800bc7a <HAL_SPI_TransmitReceive+0x26c>
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bc44:	b29b      	uxth	r3, r3
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d017      	beq.n	800bc7a <HAL_SPI_TransmitReceive+0x26c>
 800bc4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc4c:	2b01      	cmp	r3, #1
 800bc4e:	d114      	bne.n	800bc7a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	330c      	adds	r3, #12
 800bc5a:	7812      	ldrb	r2, [r2, #0]
 800bc5c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc62:	1c5a      	adds	r2, r3, #1
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bc6c:	b29b      	uxth	r3, r3
 800bc6e:	3b01      	subs	r3, #1
 800bc70:	b29a      	uxth	r2, r3
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800bc76:	2300      	movs	r3, #0
 800bc78:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	689b      	ldr	r3, [r3, #8]
 800bc80:	f003 0301 	and.w	r3, r3, #1
 800bc84:	2b01      	cmp	r3, #1
 800bc86:	d119      	bne.n	800bcbc <HAL_SPI_TransmitReceive+0x2ae>
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bc8c:	b29b      	uxth	r3, r3
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d014      	beq.n	800bcbc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	68da      	ldr	r2, [r3, #12]
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc9c:	b2d2      	uxtb	r2, r2
 800bc9e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bca4:	1c5a      	adds	r2, r3, #1
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bcae:	b29b      	uxth	r3, r3
 800bcb0:	3b01      	subs	r3, #1
 800bcb2:	b29a      	uxth	r2, r3
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800bcb8:	2301      	movs	r3, #1
 800bcba:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800bcbc:	f7fb f800 	bl	8006cc0 <HAL_GetTick>
 800bcc0:	4602      	mov	r2, r0
 800bcc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcc4:	1ad3      	subs	r3, r2, r3
 800bcc6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bcc8:	429a      	cmp	r2, r3
 800bcca:	d803      	bhi.n	800bcd4 <HAL_SPI_TransmitReceive+0x2c6>
 800bccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcd2:	d102      	bne.n	800bcda <HAL_SPI_TransmitReceive+0x2cc>
 800bcd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d103      	bne.n	800bce2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800bcda:	2303      	movs	r3, #3
 800bcdc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800bce0:	e029      	b.n	800bd36 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bce6:	b29b      	uxth	r3, r3
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d1a2      	bne.n	800bc32 <HAL_SPI_TransmitReceive+0x224>
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bcf0:	b29b      	uxth	r3, r3
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d19d      	bne.n	800bc32 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bcf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bcf8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bcfa:	68f8      	ldr	r0, [r7, #12]
 800bcfc:	f000 f8f8 	bl	800bef0 <SPI_EndRxTxTransaction>
 800bd00:	4603      	mov	r3, r0
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d006      	beq.n	800bd14 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800bd06:	2301      	movs	r3, #1
 800bd08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	2220      	movs	r2, #32
 800bd10:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800bd12:	e010      	b.n	800bd36 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	689b      	ldr	r3, [r3, #8]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d10b      	bne.n	800bd34 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	617b      	str	r3, [r7, #20]
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	68db      	ldr	r3, [r3, #12]
 800bd26:	617b      	str	r3, [r7, #20]
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	689b      	ldr	r3, [r3, #8]
 800bd2e:	617b      	str	r3, [r7, #20]
 800bd30:	697b      	ldr	r3, [r7, #20]
 800bd32:	e000      	b.n	800bd36 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800bd34:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	2201      	movs	r2, #1
 800bd3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	2200      	movs	r2, #0
 800bd42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800bd46:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	3730      	adds	r7, #48	; 0x30
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	bd80      	pop	{r7, pc}

0800bd52 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800bd52:	b580      	push	{r7, lr}
 800bd54:	b084      	sub	sp, #16
 800bd56:	af00      	add	r7, sp, #0
 800bd58:	60f8      	str	r0, [r7, #12]
 800bd5a:	60b9      	str	r1, [r7, #8]
 800bd5c:	603b      	str	r3, [r7, #0]
 800bd5e:	4613      	mov	r3, r2
 800bd60:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bd62:	e04c      	b.n	800bdfe <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800bd64:	683b      	ldr	r3, [r7, #0]
 800bd66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd6a:	d048      	beq.n	800bdfe <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800bd6c:	f7fa ffa8 	bl	8006cc0 <HAL_GetTick>
 800bd70:	4602      	mov	r2, r0
 800bd72:	69bb      	ldr	r3, [r7, #24]
 800bd74:	1ad3      	subs	r3, r2, r3
 800bd76:	683a      	ldr	r2, [r7, #0]
 800bd78:	429a      	cmp	r2, r3
 800bd7a:	d902      	bls.n	800bd82 <SPI_WaitFlagStateUntilTimeout+0x30>
 800bd7c:	683b      	ldr	r3, [r7, #0]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d13d      	bne.n	800bdfe <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	685a      	ldr	r2, [r3, #4]
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800bd90:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	685b      	ldr	r3, [r3, #4]
 800bd96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bd9a:	d111      	bne.n	800bdc0 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	689b      	ldr	r3, [r3, #8]
 800bda0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bda4:	d004      	beq.n	800bdb0 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	689b      	ldr	r3, [r3, #8]
 800bdaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bdae:	d107      	bne.n	800bdc0 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	681a      	ldr	r2, [r3, #0]
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bdbe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bdc8:	d10f      	bne.n	800bdea <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	681a      	ldr	r2, [r3, #0]
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bdd8:	601a      	str	r2, [r3, #0]
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	681a      	ldr	r2, [r3, #0]
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bde8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	2201      	movs	r2, #1
 800bdee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	2200      	movs	r2, #0
 800bdf6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800bdfa:	2303      	movs	r3, #3
 800bdfc:	e00f      	b.n	800be1e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	689a      	ldr	r2, [r3, #8]
 800be04:	68bb      	ldr	r3, [r7, #8]
 800be06:	4013      	ands	r3, r2
 800be08:	68ba      	ldr	r2, [r7, #8]
 800be0a:	429a      	cmp	r2, r3
 800be0c:	bf0c      	ite	eq
 800be0e:	2301      	moveq	r3, #1
 800be10:	2300      	movne	r3, #0
 800be12:	b2db      	uxtb	r3, r3
 800be14:	461a      	mov	r2, r3
 800be16:	79fb      	ldrb	r3, [r7, #7]
 800be18:	429a      	cmp	r2, r3
 800be1a:	d1a3      	bne.n	800bd64 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800be1c:	2300      	movs	r3, #0
}
 800be1e:	4618      	mov	r0, r3
 800be20:	3710      	adds	r7, #16
 800be22:	46bd      	mov	sp, r7
 800be24:	bd80      	pop	{r7, pc}

0800be26 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800be26:	b580      	push	{r7, lr}
 800be28:	b086      	sub	sp, #24
 800be2a:	af02      	add	r7, sp, #8
 800be2c:	60f8      	str	r0, [r7, #12]
 800be2e:	60b9      	str	r1, [r7, #8]
 800be30:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	685b      	ldr	r3, [r3, #4]
 800be36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800be3a:	d111      	bne.n	800be60 <SPI_EndRxTransaction+0x3a>
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	689b      	ldr	r3, [r3, #8]
 800be40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800be44:	d004      	beq.n	800be50 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	689b      	ldr	r3, [r3, #8]
 800be4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800be4e:	d107      	bne.n	800be60 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	681a      	ldr	r2, [r3, #0]
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800be5e:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	685b      	ldr	r3, [r3, #4]
 800be64:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800be68:	d12a      	bne.n	800bec0 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	689b      	ldr	r3, [r3, #8]
 800be6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800be72:	d012      	beq.n	800be9a <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	9300      	str	r3, [sp, #0]
 800be78:	68bb      	ldr	r3, [r7, #8]
 800be7a:	2200      	movs	r2, #0
 800be7c:	2180      	movs	r1, #128	; 0x80
 800be7e:	68f8      	ldr	r0, [r7, #12]
 800be80:	f7ff ff67 	bl	800bd52 <SPI_WaitFlagStateUntilTimeout>
 800be84:	4603      	mov	r3, r0
 800be86:	2b00      	cmp	r3, #0
 800be88:	d02d      	beq.n	800bee6 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be8e:	f043 0220 	orr.w	r2, r3, #32
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800be96:	2303      	movs	r3, #3
 800be98:	e026      	b.n	800bee8 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	9300      	str	r3, [sp, #0]
 800be9e:	68bb      	ldr	r3, [r7, #8]
 800bea0:	2200      	movs	r2, #0
 800bea2:	2101      	movs	r1, #1
 800bea4:	68f8      	ldr	r0, [r7, #12]
 800bea6:	f7ff ff54 	bl	800bd52 <SPI_WaitFlagStateUntilTimeout>
 800beaa:	4603      	mov	r3, r0
 800beac:	2b00      	cmp	r3, #0
 800beae:	d01a      	beq.n	800bee6 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800beb4:	f043 0220 	orr.w	r2, r3, #32
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800bebc:	2303      	movs	r3, #3
 800bebe:	e013      	b.n	800bee8 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	9300      	str	r3, [sp, #0]
 800bec4:	68bb      	ldr	r3, [r7, #8]
 800bec6:	2200      	movs	r2, #0
 800bec8:	2101      	movs	r1, #1
 800beca:	68f8      	ldr	r0, [r7, #12]
 800becc:	f7ff ff41 	bl	800bd52 <SPI_WaitFlagStateUntilTimeout>
 800bed0:	4603      	mov	r3, r0
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d007      	beq.n	800bee6 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800beda:	f043 0220 	orr.w	r2, r3, #32
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800bee2:	2303      	movs	r3, #3
 800bee4:	e000      	b.n	800bee8 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800bee6:	2300      	movs	r3, #0
}
 800bee8:	4618      	mov	r0, r3
 800beea:	3710      	adds	r7, #16
 800beec:	46bd      	mov	sp, r7
 800beee:	bd80      	pop	{r7, pc}

0800bef0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800bef0:	b580      	push	{r7, lr}
 800bef2:	b088      	sub	sp, #32
 800bef4:	af02      	add	r7, sp, #8
 800bef6:	60f8      	str	r0, [r7, #12]
 800bef8:	60b9      	str	r1, [r7, #8]
 800befa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800befc:	4b1b      	ldr	r3, [pc, #108]	; (800bf6c <SPI_EndRxTxTransaction+0x7c>)
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	4a1b      	ldr	r2, [pc, #108]	; (800bf70 <SPI_EndRxTxTransaction+0x80>)
 800bf02:	fba2 2303 	umull	r2, r3, r2, r3
 800bf06:	0d5b      	lsrs	r3, r3, #21
 800bf08:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bf0c:	fb02 f303 	mul.w	r3, r2, r3
 800bf10:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	685b      	ldr	r3, [r3, #4]
 800bf16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bf1a:	d112      	bne.n	800bf42 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	9300      	str	r3, [sp, #0]
 800bf20:	68bb      	ldr	r3, [r7, #8]
 800bf22:	2200      	movs	r2, #0
 800bf24:	2180      	movs	r1, #128	; 0x80
 800bf26:	68f8      	ldr	r0, [r7, #12]
 800bf28:	f7ff ff13 	bl	800bd52 <SPI_WaitFlagStateUntilTimeout>
 800bf2c:	4603      	mov	r3, r0
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d016      	beq.n	800bf60 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf36:	f043 0220 	orr.w	r2, r3, #32
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800bf3e:	2303      	movs	r3, #3
 800bf40:	e00f      	b.n	800bf62 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800bf42:	697b      	ldr	r3, [r7, #20]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d00a      	beq.n	800bf5e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800bf48:	697b      	ldr	r3, [r7, #20]
 800bf4a:	3b01      	subs	r3, #1
 800bf4c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	689b      	ldr	r3, [r3, #8]
 800bf54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf58:	2b80      	cmp	r3, #128	; 0x80
 800bf5a:	d0f2      	beq.n	800bf42 <SPI_EndRxTxTransaction+0x52>
 800bf5c:	e000      	b.n	800bf60 <SPI_EndRxTxTransaction+0x70>
        break;
 800bf5e:	bf00      	nop
  }

  return HAL_OK;
 800bf60:	2300      	movs	r3, #0
}
 800bf62:	4618      	mov	r0, r3
 800bf64:	3718      	adds	r7, #24
 800bf66:	46bd      	mov	sp, r7
 800bf68:	bd80      	pop	{r7, pc}
 800bf6a:	bf00      	nop
 800bf6c:	20000000 	.word	0x20000000
 800bf70:	165e9f81 	.word	0x165e9f81

0800bf74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bf74:	b580      	push	{r7, lr}
 800bf76:	b082      	sub	sp, #8
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d101      	bne.n	800bf86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bf82:	2301      	movs	r3, #1
 800bf84:	e01d      	b.n	800bfc2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bf8c:	b2db      	uxtb	r3, r3
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d106      	bne.n	800bfa0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	2200      	movs	r2, #0
 800bf96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bf9a:	6878      	ldr	r0, [r7, #4]
 800bf9c:	f7f8 ffd2 	bl	8004f44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	2202      	movs	r2, #2
 800bfa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	681a      	ldr	r2, [r3, #0]
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	3304      	adds	r3, #4
 800bfb0:	4619      	mov	r1, r3
 800bfb2:	4610      	mov	r0, r2
 800bfb4:	f000 fb56 	bl	800c664 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	2201      	movs	r2, #1
 800bfbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bfc0:	2300      	movs	r3, #0
}
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	3708      	adds	r7, #8
 800bfc6:	46bd      	mov	sp, r7
 800bfc8:	bd80      	pop	{r7, pc}

0800bfca <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bfca:	b480      	push	{r7}
 800bfcc:	b085      	sub	sp, #20
 800bfce:	af00      	add	r7, sp, #0
 800bfd0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	68da      	ldr	r2, [r3, #12]
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	f042 0201 	orr.w	r2, r2, #1
 800bfe0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	689b      	ldr	r3, [r3, #8]
 800bfe8:	f003 0307 	and.w	r3, r3, #7
 800bfec:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	2b06      	cmp	r3, #6
 800bff2:	d007      	beq.n	800c004 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	681a      	ldr	r2, [r3, #0]
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	f042 0201 	orr.w	r2, r2, #1
 800c002:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c004:	2300      	movs	r3, #0
}
 800c006:	4618      	mov	r0, r3
 800c008:	3714      	adds	r7, #20
 800c00a:	46bd      	mov	sp, r7
 800c00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c010:	4770      	bx	lr

0800c012 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c012:	b580      	push	{r7, lr}
 800c014:	b082      	sub	sp, #8
 800c016:	af00      	add	r7, sp, #0
 800c018:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d101      	bne.n	800c024 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c020:	2301      	movs	r3, #1
 800c022:	e01d      	b.n	800c060 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c02a:	b2db      	uxtb	r3, r3
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d106      	bne.n	800c03e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	2200      	movs	r2, #0
 800c034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c038:	6878      	ldr	r0, [r7, #4]
 800c03a:	f7f8 ff0f 	bl	8004e5c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	2202      	movs	r2, #2
 800c042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681a      	ldr	r2, [r3, #0]
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	3304      	adds	r3, #4
 800c04e:	4619      	mov	r1, r3
 800c050:	4610      	mov	r0, r2
 800c052:	f000 fb07 	bl	800c664 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	2201      	movs	r2, #1
 800c05a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c05e:	2300      	movs	r3, #0
}
 800c060:	4618      	mov	r0, r3
 800c062:	3708      	adds	r7, #8
 800c064:	46bd      	mov	sp, r7
 800c066:	bd80      	pop	{r7, pc}

0800c068 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c068:	b580      	push	{r7, lr}
 800c06a:	b084      	sub	sp, #16
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	6078      	str	r0, [r7, #4]
 800c070:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	2201      	movs	r2, #1
 800c078:	6839      	ldr	r1, [r7, #0]
 800c07a:	4618      	mov	r0, r3
 800c07c:	f000 fd42 	bl	800cb04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	4a15      	ldr	r2, [pc, #84]	; (800c0dc <HAL_TIM_PWM_Start+0x74>)
 800c086:	4293      	cmp	r3, r2
 800c088:	d004      	beq.n	800c094 <HAL_TIM_PWM_Start+0x2c>
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	4a14      	ldr	r2, [pc, #80]	; (800c0e0 <HAL_TIM_PWM_Start+0x78>)
 800c090:	4293      	cmp	r3, r2
 800c092:	d101      	bne.n	800c098 <HAL_TIM_PWM_Start+0x30>
 800c094:	2301      	movs	r3, #1
 800c096:	e000      	b.n	800c09a <HAL_TIM_PWM_Start+0x32>
 800c098:	2300      	movs	r3, #0
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d007      	beq.n	800c0ae <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c0ac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	689b      	ldr	r3, [r3, #8]
 800c0b4:	f003 0307 	and.w	r3, r3, #7
 800c0b8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	2b06      	cmp	r3, #6
 800c0be:	d007      	beq.n	800c0d0 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	681a      	ldr	r2, [r3, #0]
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	f042 0201 	orr.w	r2, r2, #1
 800c0ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c0d0:	2300      	movs	r3, #0
}
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	3710      	adds	r7, #16
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	bd80      	pop	{r7, pc}
 800c0da:	bf00      	nop
 800c0dc:	40010000 	.word	0x40010000
 800c0e0:	40010400 	.word	0x40010400

0800c0e4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b086      	sub	sp, #24
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
 800c0ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d101      	bne.n	800c0f8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800c0f4:	2301      	movs	r3, #1
 800c0f6:	e083      	b.n	800c200 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c0fe:	b2db      	uxtb	r3, r3
 800c100:	2b00      	cmp	r3, #0
 800c102:	d106      	bne.n	800c112 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	2200      	movs	r2, #0
 800c108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800c10c:	6878      	ldr	r0, [r7, #4]
 800c10e:	f7f8 ffa9 	bl	8005064 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	2202      	movs	r2, #2
 800c116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	689b      	ldr	r3, [r3, #8]
 800c120:	687a      	ldr	r2, [r7, #4]
 800c122:	6812      	ldr	r2, [r2, #0]
 800c124:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c128:	f023 0307 	bic.w	r3, r3, #7
 800c12c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	681a      	ldr	r2, [r3, #0]
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	3304      	adds	r3, #4
 800c136:	4619      	mov	r1, r3
 800c138:	4610      	mov	r0, r2
 800c13a:	f000 fa93 	bl	800c664 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	689b      	ldr	r3, [r3, #8]
 800c144:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	699b      	ldr	r3, [r3, #24]
 800c14c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	6a1b      	ldr	r3, [r3, #32]
 800c154:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800c156:	683b      	ldr	r3, [r7, #0]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	697a      	ldr	r2, [r7, #20]
 800c15c:	4313      	orrs	r3, r2
 800c15e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800c160:	693b      	ldr	r3, [r7, #16]
 800c162:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c166:	f023 0303 	bic.w	r3, r3, #3
 800c16a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800c16c:	683b      	ldr	r3, [r7, #0]
 800c16e:	689a      	ldr	r2, [r3, #8]
 800c170:	683b      	ldr	r3, [r7, #0]
 800c172:	699b      	ldr	r3, [r3, #24]
 800c174:	021b      	lsls	r3, r3, #8
 800c176:	4313      	orrs	r3, r2
 800c178:	693a      	ldr	r2, [r7, #16]
 800c17a:	4313      	orrs	r3, r2
 800c17c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800c17e:	693b      	ldr	r3, [r7, #16]
 800c180:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800c184:	f023 030c 	bic.w	r3, r3, #12
 800c188:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800c18a:	693b      	ldr	r3, [r7, #16]
 800c18c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c190:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c194:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800c196:	683b      	ldr	r3, [r7, #0]
 800c198:	68da      	ldr	r2, [r3, #12]
 800c19a:	683b      	ldr	r3, [r7, #0]
 800c19c:	69db      	ldr	r3, [r3, #28]
 800c19e:	021b      	lsls	r3, r3, #8
 800c1a0:	4313      	orrs	r3, r2
 800c1a2:	693a      	ldr	r2, [r7, #16]
 800c1a4:	4313      	orrs	r3, r2
 800c1a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800c1a8:	683b      	ldr	r3, [r7, #0]
 800c1aa:	691b      	ldr	r3, [r3, #16]
 800c1ac:	011a      	lsls	r2, r3, #4
 800c1ae:	683b      	ldr	r3, [r7, #0]
 800c1b0:	6a1b      	ldr	r3, [r3, #32]
 800c1b2:	031b      	lsls	r3, r3, #12
 800c1b4:	4313      	orrs	r3, r2
 800c1b6:	693a      	ldr	r2, [r7, #16]
 800c1b8:	4313      	orrs	r3, r2
 800c1ba:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800c1c2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800c1ca:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800c1cc:	683b      	ldr	r3, [r7, #0]
 800c1ce:	685a      	ldr	r2, [r3, #4]
 800c1d0:	683b      	ldr	r3, [r7, #0]
 800c1d2:	695b      	ldr	r3, [r3, #20]
 800c1d4:	011b      	lsls	r3, r3, #4
 800c1d6:	4313      	orrs	r3, r2
 800c1d8:	68fa      	ldr	r2, [r7, #12]
 800c1da:	4313      	orrs	r3, r2
 800c1dc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	697a      	ldr	r2, [r7, #20]
 800c1e4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	693a      	ldr	r2, [r7, #16]
 800c1ec:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	68fa      	ldr	r2, [r7, #12]
 800c1f4:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	2201      	movs	r2, #1
 800c1fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c1fe:	2300      	movs	r3, #0
}
 800c200:	4618      	mov	r0, r3
 800c202:	3718      	adds	r7, #24
 800c204:	46bd      	mov	sp, r7
 800c206:	bd80      	pop	{r7, pc}

0800c208 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c208:	b580      	push	{r7, lr}
 800c20a:	b082      	sub	sp, #8
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	6078      	str	r0, [r7, #4]
 800c210:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800c212:	683b      	ldr	r3, [r7, #0]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d002      	beq.n	800c21e <HAL_TIM_Encoder_Start+0x16>
 800c218:	2b04      	cmp	r3, #4
 800c21a:	d008      	beq.n	800c22e <HAL_TIM_Encoder_Start+0x26>
 800c21c:	e00f      	b.n	800c23e <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	2201      	movs	r2, #1
 800c224:	2100      	movs	r1, #0
 800c226:	4618      	mov	r0, r3
 800c228:	f000 fc6c 	bl	800cb04 <TIM_CCxChannelCmd>
      break;
 800c22c:	e016      	b.n	800c25c <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	2201      	movs	r2, #1
 800c234:	2104      	movs	r1, #4
 800c236:	4618      	mov	r0, r3
 800c238:	f000 fc64 	bl	800cb04 <TIM_CCxChannelCmd>
      break;
 800c23c:	e00e      	b.n	800c25c <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	2201      	movs	r2, #1
 800c244:	2100      	movs	r1, #0
 800c246:	4618      	mov	r0, r3
 800c248:	f000 fc5c 	bl	800cb04 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	2201      	movs	r2, #1
 800c252:	2104      	movs	r1, #4
 800c254:	4618      	mov	r0, r3
 800c256:	f000 fc55 	bl	800cb04 <TIM_CCxChannelCmd>
      break;
 800c25a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	681a      	ldr	r2, [r3, #0]
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	f042 0201 	orr.w	r2, r2, #1
 800c26a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800c26c:	2300      	movs	r3, #0
}
 800c26e:	4618      	mov	r0, r3
 800c270:	3708      	adds	r7, #8
 800c272:	46bd      	mov	sp, r7
 800c274:	bd80      	pop	{r7, pc}

0800c276 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c276:	b580      	push	{r7, lr}
 800c278:	b082      	sub	sp, #8
 800c27a:	af00      	add	r7, sp, #0
 800c27c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	691b      	ldr	r3, [r3, #16]
 800c284:	f003 0302 	and.w	r3, r3, #2
 800c288:	2b02      	cmp	r3, #2
 800c28a:	d122      	bne.n	800c2d2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	68db      	ldr	r3, [r3, #12]
 800c292:	f003 0302 	and.w	r3, r3, #2
 800c296:	2b02      	cmp	r3, #2
 800c298:	d11b      	bne.n	800c2d2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	f06f 0202 	mvn.w	r2, #2
 800c2a2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	2201      	movs	r2, #1
 800c2a8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	699b      	ldr	r3, [r3, #24]
 800c2b0:	f003 0303 	and.w	r3, r3, #3
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d003      	beq.n	800c2c0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c2b8:	6878      	ldr	r0, [r7, #4]
 800c2ba:	f000 f9b5 	bl	800c628 <HAL_TIM_IC_CaptureCallback>
 800c2be:	e005      	b.n	800c2cc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c2c0:	6878      	ldr	r0, [r7, #4]
 800c2c2:	f000 f9a7 	bl	800c614 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c2c6:	6878      	ldr	r0, [r7, #4]
 800c2c8:	f000 f9b8 	bl	800c63c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	2200      	movs	r2, #0
 800c2d0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	691b      	ldr	r3, [r3, #16]
 800c2d8:	f003 0304 	and.w	r3, r3, #4
 800c2dc:	2b04      	cmp	r3, #4
 800c2de:	d122      	bne.n	800c326 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	68db      	ldr	r3, [r3, #12]
 800c2e6:	f003 0304 	and.w	r3, r3, #4
 800c2ea:	2b04      	cmp	r3, #4
 800c2ec:	d11b      	bne.n	800c326 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	f06f 0204 	mvn.w	r2, #4
 800c2f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	2202      	movs	r2, #2
 800c2fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	699b      	ldr	r3, [r3, #24]
 800c304:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d003      	beq.n	800c314 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c30c:	6878      	ldr	r0, [r7, #4]
 800c30e:	f000 f98b 	bl	800c628 <HAL_TIM_IC_CaptureCallback>
 800c312:	e005      	b.n	800c320 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c314:	6878      	ldr	r0, [r7, #4]
 800c316:	f000 f97d 	bl	800c614 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c31a:	6878      	ldr	r0, [r7, #4]
 800c31c:	f000 f98e 	bl	800c63c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	2200      	movs	r2, #0
 800c324:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	691b      	ldr	r3, [r3, #16]
 800c32c:	f003 0308 	and.w	r3, r3, #8
 800c330:	2b08      	cmp	r3, #8
 800c332:	d122      	bne.n	800c37a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	68db      	ldr	r3, [r3, #12]
 800c33a:	f003 0308 	and.w	r3, r3, #8
 800c33e:	2b08      	cmp	r3, #8
 800c340:	d11b      	bne.n	800c37a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	f06f 0208 	mvn.w	r2, #8
 800c34a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	2204      	movs	r2, #4
 800c350:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	69db      	ldr	r3, [r3, #28]
 800c358:	f003 0303 	and.w	r3, r3, #3
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d003      	beq.n	800c368 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c360:	6878      	ldr	r0, [r7, #4]
 800c362:	f000 f961 	bl	800c628 <HAL_TIM_IC_CaptureCallback>
 800c366:	e005      	b.n	800c374 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c368:	6878      	ldr	r0, [r7, #4]
 800c36a:	f000 f953 	bl	800c614 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c36e:	6878      	ldr	r0, [r7, #4]
 800c370:	f000 f964 	bl	800c63c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	2200      	movs	r2, #0
 800c378:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	691b      	ldr	r3, [r3, #16]
 800c380:	f003 0310 	and.w	r3, r3, #16
 800c384:	2b10      	cmp	r3, #16
 800c386:	d122      	bne.n	800c3ce <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	68db      	ldr	r3, [r3, #12]
 800c38e:	f003 0310 	and.w	r3, r3, #16
 800c392:	2b10      	cmp	r3, #16
 800c394:	d11b      	bne.n	800c3ce <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	f06f 0210 	mvn.w	r2, #16
 800c39e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	2208      	movs	r2, #8
 800c3a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	69db      	ldr	r3, [r3, #28]
 800c3ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d003      	beq.n	800c3bc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c3b4:	6878      	ldr	r0, [r7, #4]
 800c3b6:	f000 f937 	bl	800c628 <HAL_TIM_IC_CaptureCallback>
 800c3ba:	e005      	b.n	800c3c8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c3bc:	6878      	ldr	r0, [r7, #4]
 800c3be:	f000 f929 	bl	800c614 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c3c2:	6878      	ldr	r0, [r7, #4]
 800c3c4:	f000 f93a 	bl	800c63c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	2200      	movs	r2, #0
 800c3cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	691b      	ldr	r3, [r3, #16]
 800c3d4:	f003 0301 	and.w	r3, r3, #1
 800c3d8:	2b01      	cmp	r3, #1
 800c3da:	d10e      	bne.n	800c3fa <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	68db      	ldr	r3, [r3, #12]
 800c3e2:	f003 0301 	and.w	r3, r3, #1
 800c3e6:	2b01      	cmp	r3, #1
 800c3e8:	d107      	bne.n	800c3fa <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	f06f 0201 	mvn.w	r2, #1
 800c3f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c3f4:	6878      	ldr	r0, [r7, #4]
 800c3f6:	f7f7 fb0b 	bl	8003a10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	691b      	ldr	r3, [r3, #16]
 800c400:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c404:	2b80      	cmp	r3, #128	; 0x80
 800c406:	d10e      	bne.n	800c426 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	68db      	ldr	r3, [r3, #12]
 800c40e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c412:	2b80      	cmp	r3, #128	; 0x80
 800c414:	d107      	bne.n	800c426 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c41e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c420:	6878      	ldr	r0, [r7, #4]
 800c422:	f000 fc6d 	bl	800cd00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	691b      	ldr	r3, [r3, #16]
 800c42c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c430:	2b40      	cmp	r3, #64	; 0x40
 800c432:	d10e      	bne.n	800c452 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	68db      	ldr	r3, [r3, #12]
 800c43a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c43e:	2b40      	cmp	r3, #64	; 0x40
 800c440:	d107      	bne.n	800c452 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c44a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c44c:	6878      	ldr	r0, [r7, #4]
 800c44e:	f000 f8ff 	bl	800c650 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	691b      	ldr	r3, [r3, #16]
 800c458:	f003 0320 	and.w	r3, r3, #32
 800c45c:	2b20      	cmp	r3, #32
 800c45e:	d10e      	bne.n	800c47e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	68db      	ldr	r3, [r3, #12]
 800c466:	f003 0320 	and.w	r3, r3, #32
 800c46a:	2b20      	cmp	r3, #32
 800c46c:	d107      	bne.n	800c47e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	f06f 0220 	mvn.w	r2, #32
 800c476:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c478:	6878      	ldr	r0, [r7, #4]
 800c47a:	f000 fc37 	bl	800ccec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c47e:	bf00      	nop
 800c480:	3708      	adds	r7, #8
 800c482:	46bd      	mov	sp, r7
 800c484:	bd80      	pop	{r7, pc}
	...

0800c488 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c488:	b580      	push	{r7, lr}
 800c48a:	b084      	sub	sp, #16
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	60f8      	str	r0, [r7, #12]
 800c490:	60b9      	str	r1, [r7, #8]
 800c492:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c49a:	2b01      	cmp	r3, #1
 800c49c:	d101      	bne.n	800c4a2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800c49e:	2302      	movs	r3, #2
 800c4a0:	e0b4      	b.n	800c60c <HAL_TIM_PWM_ConfigChannel+0x184>
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	2201      	movs	r2, #1
 800c4a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	2202      	movs	r2, #2
 800c4ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	2b0c      	cmp	r3, #12
 800c4b6:	f200 809f 	bhi.w	800c5f8 <HAL_TIM_PWM_ConfigChannel+0x170>
 800c4ba:	a201      	add	r2, pc, #4	; (adr r2, 800c4c0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800c4bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4c0:	0800c4f5 	.word	0x0800c4f5
 800c4c4:	0800c5f9 	.word	0x0800c5f9
 800c4c8:	0800c5f9 	.word	0x0800c5f9
 800c4cc:	0800c5f9 	.word	0x0800c5f9
 800c4d0:	0800c535 	.word	0x0800c535
 800c4d4:	0800c5f9 	.word	0x0800c5f9
 800c4d8:	0800c5f9 	.word	0x0800c5f9
 800c4dc:	0800c5f9 	.word	0x0800c5f9
 800c4e0:	0800c577 	.word	0x0800c577
 800c4e4:	0800c5f9 	.word	0x0800c5f9
 800c4e8:	0800c5f9 	.word	0x0800c5f9
 800c4ec:	0800c5f9 	.word	0x0800c5f9
 800c4f0:	0800c5b7 	.word	0x0800c5b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	68b9      	ldr	r1, [r7, #8]
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	f000 f952 	bl	800c7a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	699a      	ldr	r2, [r3, #24]
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	f042 0208 	orr.w	r2, r2, #8
 800c50e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	699a      	ldr	r2, [r3, #24]
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	f022 0204 	bic.w	r2, r2, #4
 800c51e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	6999      	ldr	r1, [r3, #24]
 800c526:	68bb      	ldr	r3, [r7, #8]
 800c528:	691a      	ldr	r2, [r3, #16]
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	430a      	orrs	r2, r1
 800c530:	619a      	str	r2, [r3, #24]
      break;
 800c532:	e062      	b.n	800c5fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	68b9      	ldr	r1, [r7, #8]
 800c53a:	4618      	mov	r0, r3
 800c53c:	f000 f9a2 	bl	800c884 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	699a      	ldr	r2, [r3, #24]
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c54e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	699a      	ldr	r2, [r3, #24]
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c55e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	6999      	ldr	r1, [r3, #24]
 800c566:	68bb      	ldr	r3, [r7, #8]
 800c568:	691b      	ldr	r3, [r3, #16]
 800c56a:	021a      	lsls	r2, r3, #8
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	430a      	orrs	r2, r1
 800c572:	619a      	str	r2, [r3, #24]
      break;
 800c574:	e041      	b.n	800c5fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	68b9      	ldr	r1, [r7, #8]
 800c57c:	4618      	mov	r0, r3
 800c57e:	f000 f9f7 	bl	800c970 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	69da      	ldr	r2, [r3, #28]
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	f042 0208 	orr.w	r2, r2, #8
 800c590:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	69da      	ldr	r2, [r3, #28]
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	f022 0204 	bic.w	r2, r2, #4
 800c5a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	69d9      	ldr	r1, [r3, #28]
 800c5a8:	68bb      	ldr	r3, [r7, #8]
 800c5aa:	691a      	ldr	r2, [r3, #16]
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	430a      	orrs	r2, r1
 800c5b2:	61da      	str	r2, [r3, #28]
      break;
 800c5b4:	e021      	b.n	800c5fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	68b9      	ldr	r1, [r7, #8]
 800c5bc:	4618      	mov	r0, r3
 800c5be:	f000 fa4b 	bl	800ca58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	69da      	ldr	r2, [r3, #28]
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c5d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	69da      	ldr	r2, [r3, #28]
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c5e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	69d9      	ldr	r1, [r3, #28]
 800c5e8:	68bb      	ldr	r3, [r7, #8]
 800c5ea:	691b      	ldr	r3, [r3, #16]
 800c5ec:	021a      	lsls	r2, r3, #8
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	430a      	orrs	r2, r1
 800c5f4:	61da      	str	r2, [r3, #28]
      break;
 800c5f6:	e000      	b.n	800c5fa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800c5f8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	2201      	movs	r2, #1
 800c5fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	2200      	movs	r2, #0
 800c606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c60a:	2300      	movs	r3, #0
}
 800c60c:	4618      	mov	r0, r3
 800c60e:	3710      	adds	r7, #16
 800c610:	46bd      	mov	sp, r7
 800c612:	bd80      	pop	{r7, pc}

0800c614 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c614:	b480      	push	{r7}
 800c616:	b083      	sub	sp, #12
 800c618:	af00      	add	r7, sp, #0
 800c61a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c61c:	bf00      	nop
 800c61e:	370c      	adds	r7, #12
 800c620:	46bd      	mov	sp, r7
 800c622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c626:	4770      	bx	lr

0800c628 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c628:	b480      	push	{r7}
 800c62a:	b083      	sub	sp, #12
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c630:	bf00      	nop
 800c632:	370c      	adds	r7, #12
 800c634:	46bd      	mov	sp, r7
 800c636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c63a:	4770      	bx	lr

0800c63c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c63c:	b480      	push	{r7}
 800c63e:	b083      	sub	sp, #12
 800c640:	af00      	add	r7, sp, #0
 800c642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c644:	bf00      	nop
 800c646:	370c      	adds	r7, #12
 800c648:	46bd      	mov	sp, r7
 800c64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64e:	4770      	bx	lr

0800c650 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c650:	b480      	push	{r7}
 800c652:	b083      	sub	sp, #12
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c658:	bf00      	nop
 800c65a:	370c      	adds	r7, #12
 800c65c:	46bd      	mov	sp, r7
 800c65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c662:	4770      	bx	lr

0800c664 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c664:	b480      	push	{r7}
 800c666:	b085      	sub	sp, #20
 800c668:	af00      	add	r7, sp, #0
 800c66a:	6078      	str	r0, [r7, #4]
 800c66c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	4a40      	ldr	r2, [pc, #256]	; (800c778 <TIM_Base_SetConfig+0x114>)
 800c678:	4293      	cmp	r3, r2
 800c67a:	d013      	beq.n	800c6a4 <TIM_Base_SetConfig+0x40>
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c682:	d00f      	beq.n	800c6a4 <TIM_Base_SetConfig+0x40>
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	4a3d      	ldr	r2, [pc, #244]	; (800c77c <TIM_Base_SetConfig+0x118>)
 800c688:	4293      	cmp	r3, r2
 800c68a:	d00b      	beq.n	800c6a4 <TIM_Base_SetConfig+0x40>
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	4a3c      	ldr	r2, [pc, #240]	; (800c780 <TIM_Base_SetConfig+0x11c>)
 800c690:	4293      	cmp	r3, r2
 800c692:	d007      	beq.n	800c6a4 <TIM_Base_SetConfig+0x40>
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	4a3b      	ldr	r2, [pc, #236]	; (800c784 <TIM_Base_SetConfig+0x120>)
 800c698:	4293      	cmp	r3, r2
 800c69a:	d003      	beq.n	800c6a4 <TIM_Base_SetConfig+0x40>
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	4a3a      	ldr	r2, [pc, #232]	; (800c788 <TIM_Base_SetConfig+0x124>)
 800c6a0:	4293      	cmp	r3, r2
 800c6a2:	d108      	bne.n	800c6b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c6aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c6ac:	683b      	ldr	r3, [r7, #0]
 800c6ae:	685b      	ldr	r3, [r3, #4]
 800c6b0:	68fa      	ldr	r2, [r7, #12]
 800c6b2:	4313      	orrs	r3, r2
 800c6b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	4a2f      	ldr	r2, [pc, #188]	; (800c778 <TIM_Base_SetConfig+0x114>)
 800c6ba:	4293      	cmp	r3, r2
 800c6bc:	d02b      	beq.n	800c716 <TIM_Base_SetConfig+0xb2>
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c6c4:	d027      	beq.n	800c716 <TIM_Base_SetConfig+0xb2>
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	4a2c      	ldr	r2, [pc, #176]	; (800c77c <TIM_Base_SetConfig+0x118>)
 800c6ca:	4293      	cmp	r3, r2
 800c6cc:	d023      	beq.n	800c716 <TIM_Base_SetConfig+0xb2>
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	4a2b      	ldr	r2, [pc, #172]	; (800c780 <TIM_Base_SetConfig+0x11c>)
 800c6d2:	4293      	cmp	r3, r2
 800c6d4:	d01f      	beq.n	800c716 <TIM_Base_SetConfig+0xb2>
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	4a2a      	ldr	r2, [pc, #168]	; (800c784 <TIM_Base_SetConfig+0x120>)
 800c6da:	4293      	cmp	r3, r2
 800c6dc:	d01b      	beq.n	800c716 <TIM_Base_SetConfig+0xb2>
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	4a29      	ldr	r2, [pc, #164]	; (800c788 <TIM_Base_SetConfig+0x124>)
 800c6e2:	4293      	cmp	r3, r2
 800c6e4:	d017      	beq.n	800c716 <TIM_Base_SetConfig+0xb2>
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	4a28      	ldr	r2, [pc, #160]	; (800c78c <TIM_Base_SetConfig+0x128>)
 800c6ea:	4293      	cmp	r3, r2
 800c6ec:	d013      	beq.n	800c716 <TIM_Base_SetConfig+0xb2>
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	4a27      	ldr	r2, [pc, #156]	; (800c790 <TIM_Base_SetConfig+0x12c>)
 800c6f2:	4293      	cmp	r3, r2
 800c6f4:	d00f      	beq.n	800c716 <TIM_Base_SetConfig+0xb2>
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	4a26      	ldr	r2, [pc, #152]	; (800c794 <TIM_Base_SetConfig+0x130>)
 800c6fa:	4293      	cmp	r3, r2
 800c6fc:	d00b      	beq.n	800c716 <TIM_Base_SetConfig+0xb2>
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	4a25      	ldr	r2, [pc, #148]	; (800c798 <TIM_Base_SetConfig+0x134>)
 800c702:	4293      	cmp	r3, r2
 800c704:	d007      	beq.n	800c716 <TIM_Base_SetConfig+0xb2>
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	4a24      	ldr	r2, [pc, #144]	; (800c79c <TIM_Base_SetConfig+0x138>)
 800c70a:	4293      	cmp	r3, r2
 800c70c:	d003      	beq.n	800c716 <TIM_Base_SetConfig+0xb2>
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	4a23      	ldr	r2, [pc, #140]	; (800c7a0 <TIM_Base_SetConfig+0x13c>)
 800c712:	4293      	cmp	r3, r2
 800c714:	d108      	bne.n	800c728 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c71c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c71e:	683b      	ldr	r3, [r7, #0]
 800c720:	68db      	ldr	r3, [r3, #12]
 800c722:	68fa      	ldr	r2, [r7, #12]
 800c724:	4313      	orrs	r3, r2
 800c726:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c72e:	683b      	ldr	r3, [r7, #0]
 800c730:	695b      	ldr	r3, [r3, #20]
 800c732:	4313      	orrs	r3, r2
 800c734:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	68fa      	ldr	r2, [r7, #12]
 800c73a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c73c:	683b      	ldr	r3, [r7, #0]
 800c73e:	689a      	ldr	r2, [r3, #8]
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c744:	683b      	ldr	r3, [r7, #0]
 800c746:	681a      	ldr	r2, [r3, #0]
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	4a0a      	ldr	r2, [pc, #40]	; (800c778 <TIM_Base_SetConfig+0x114>)
 800c750:	4293      	cmp	r3, r2
 800c752:	d003      	beq.n	800c75c <TIM_Base_SetConfig+0xf8>
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	4a0c      	ldr	r2, [pc, #48]	; (800c788 <TIM_Base_SetConfig+0x124>)
 800c758:	4293      	cmp	r3, r2
 800c75a:	d103      	bne.n	800c764 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c75c:	683b      	ldr	r3, [r7, #0]
 800c75e:	691a      	ldr	r2, [r3, #16]
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	2201      	movs	r2, #1
 800c768:	615a      	str	r2, [r3, #20]
}
 800c76a:	bf00      	nop
 800c76c:	3714      	adds	r7, #20
 800c76e:	46bd      	mov	sp, r7
 800c770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c774:	4770      	bx	lr
 800c776:	bf00      	nop
 800c778:	40010000 	.word	0x40010000
 800c77c:	40000400 	.word	0x40000400
 800c780:	40000800 	.word	0x40000800
 800c784:	40000c00 	.word	0x40000c00
 800c788:	40010400 	.word	0x40010400
 800c78c:	40014000 	.word	0x40014000
 800c790:	40014400 	.word	0x40014400
 800c794:	40014800 	.word	0x40014800
 800c798:	40001800 	.word	0x40001800
 800c79c:	40001c00 	.word	0x40001c00
 800c7a0:	40002000 	.word	0x40002000

0800c7a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c7a4:	b480      	push	{r7}
 800c7a6:	b087      	sub	sp, #28
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	6078      	str	r0, [r7, #4]
 800c7ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	6a1b      	ldr	r3, [r3, #32]
 800c7b2:	f023 0201 	bic.w	r2, r3, #1
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	6a1b      	ldr	r3, [r3, #32]
 800c7be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	685b      	ldr	r3, [r3, #4]
 800c7c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	699b      	ldr	r3, [r3, #24]
 800c7ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c7d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	f023 0303 	bic.w	r3, r3, #3
 800c7da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c7dc:	683b      	ldr	r3, [r7, #0]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	68fa      	ldr	r2, [r7, #12]
 800c7e2:	4313      	orrs	r3, r2
 800c7e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c7e6:	697b      	ldr	r3, [r7, #20]
 800c7e8:	f023 0302 	bic.w	r3, r3, #2
 800c7ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c7ee:	683b      	ldr	r3, [r7, #0]
 800c7f0:	689b      	ldr	r3, [r3, #8]
 800c7f2:	697a      	ldr	r2, [r7, #20]
 800c7f4:	4313      	orrs	r3, r2
 800c7f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	4a20      	ldr	r2, [pc, #128]	; (800c87c <TIM_OC1_SetConfig+0xd8>)
 800c7fc:	4293      	cmp	r3, r2
 800c7fe:	d003      	beq.n	800c808 <TIM_OC1_SetConfig+0x64>
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	4a1f      	ldr	r2, [pc, #124]	; (800c880 <TIM_OC1_SetConfig+0xdc>)
 800c804:	4293      	cmp	r3, r2
 800c806:	d10c      	bne.n	800c822 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c808:	697b      	ldr	r3, [r7, #20]
 800c80a:	f023 0308 	bic.w	r3, r3, #8
 800c80e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c810:	683b      	ldr	r3, [r7, #0]
 800c812:	68db      	ldr	r3, [r3, #12]
 800c814:	697a      	ldr	r2, [r7, #20]
 800c816:	4313      	orrs	r3, r2
 800c818:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c81a:	697b      	ldr	r3, [r7, #20]
 800c81c:	f023 0304 	bic.w	r3, r3, #4
 800c820:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	4a15      	ldr	r2, [pc, #84]	; (800c87c <TIM_OC1_SetConfig+0xd8>)
 800c826:	4293      	cmp	r3, r2
 800c828:	d003      	beq.n	800c832 <TIM_OC1_SetConfig+0x8e>
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	4a14      	ldr	r2, [pc, #80]	; (800c880 <TIM_OC1_SetConfig+0xdc>)
 800c82e:	4293      	cmp	r3, r2
 800c830:	d111      	bne.n	800c856 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c832:	693b      	ldr	r3, [r7, #16]
 800c834:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c838:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c83a:	693b      	ldr	r3, [r7, #16]
 800c83c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c840:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c842:	683b      	ldr	r3, [r7, #0]
 800c844:	695b      	ldr	r3, [r3, #20]
 800c846:	693a      	ldr	r2, [r7, #16]
 800c848:	4313      	orrs	r3, r2
 800c84a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c84c:	683b      	ldr	r3, [r7, #0]
 800c84e:	699b      	ldr	r3, [r3, #24]
 800c850:	693a      	ldr	r2, [r7, #16]
 800c852:	4313      	orrs	r3, r2
 800c854:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	693a      	ldr	r2, [r7, #16]
 800c85a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	68fa      	ldr	r2, [r7, #12]
 800c860:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c862:	683b      	ldr	r3, [r7, #0]
 800c864:	685a      	ldr	r2, [r3, #4]
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	697a      	ldr	r2, [r7, #20]
 800c86e:	621a      	str	r2, [r3, #32]
}
 800c870:	bf00      	nop
 800c872:	371c      	adds	r7, #28
 800c874:	46bd      	mov	sp, r7
 800c876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c87a:	4770      	bx	lr
 800c87c:	40010000 	.word	0x40010000
 800c880:	40010400 	.word	0x40010400

0800c884 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c884:	b480      	push	{r7}
 800c886:	b087      	sub	sp, #28
 800c888:	af00      	add	r7, sp, #0
 800c88a:	6078      	str	r0, [r7, #4]
 800c88c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	6a1b      	ldr	r3, [r3, #32]
 800c892:	f023 0210 	bic.w	r2, r3, #16
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	6a1b      	ldr	r3, [r3, #32]
 800c89e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	685b      	ldr	r3, [r3, #4]
 800c8a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	699b      	ldr	r3, [r3, #24]
 800c8aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c8b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c8ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c8bc:	683b      	ldr	r3, [r7, #0]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	021b      	lsls	r3, r3, #8
 800c8c2:	68fa      	ldr	r2, [r7, #12]
 800c8c4:	4313      	orrs	r3, r2
 800c8c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c8c8:	697b      	ldr	r3, [r7, #20]
 800c8ca:	f023 0320 	bic.w	r3, r3, #32
 800c8ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c8d0:	683b      	ldr	r3, [r7, #0]
 800c8d2:	689b      	ldr	r3, [r3, #8]
 800c8d4:	011b      	lsls	r3, r3, #4
 800c8d6:	697a      	ldr	r2, [r7, #20]
 800c8d8:	4313      	orrs	r3, r2
 800c8da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	4a22      	ldr	r2, [pc, #136]	; (800c968 <TIM_OC2_SetConfig+0xe4>)
 800c8e0:	4293      	cmp	r3, r2
 800c8e2:	d003      	beq.n	800c8ec <TIM_OC2_SetConfig+0x68>
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	4a21      	ldr	r2, [pc, #132]	; (800c96c <TIM_OC2_SetConfig+0xe8>)
 800c8e8:	4293      	cmp	r3, r2
 800c8ea:	d10d      	bne.n	800c908 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c8ec:	697b      	ldr	r3, [r7, #20]
 800c8ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c8f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c8f4:	683b      	ldr	r3, [r7, #0]
 800c8f6:	68db      	ldr	r3, [r3, #12]
 800c8f8:	011b      	lsls	r3, r3, #4
 800c8fa:	697a      	ldr	r2, [r7, #20]
 800c8fc:	4313      	orrs	r3, r2
 800c8fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c900:	697b      	ldr	r3, [r7, #20]
 800c902:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c906:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	4a17      	ldr	r2, [pc, #92]	; (800c968 <TIM_OC2_SetConfig+0xe4>)
 800c90c:	4293      	cmp	r3, r2
 800c90e:	d003      	beq.n	800c918 <TIM_OC2_SetConfig+0x94>
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	4a16      	ldr	r2, [pc, #88]	; (800c96c <TIM_OC2_SetConfig+0xe8>)
 800c914:	4293      	cmp	r3, r2
 800c916:	d113      	bne.n	800c940 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c918:	693b      	ldr	r3, [r7, #16]
 800c91a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c91e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c920:	693b      	ldr	r3, [r7, #16]
 800c922:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c926:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c928:	683b      	ldr	r3, [r7, #0]
 800c92a:	695b      	ldr	r3, [r3, #20]
 800c92c:	009b      	lsls	r3, r3, #2
 800c92e:	693a      	ldr	r2, [r7, #16]
 800c930:	4313      	orrs	r3, r2
 800c932:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c934:	683b      	ldr	r3, [r7, #0]
 800c936:	699b      	ldr	r3, [r3, #24]
 800c938:	009b      	lsls	r3, r3, #2
 800c93a:	693a      	ldr	r2, [r7, #16]
 800c93c:	4313      	orrs	r3, r2
 800c93e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	693a      	ldr	r2, [r7, #16]
 800c944:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	68fa      	ldr	r2, [r7, #12]
 800c94a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c94c:	683b      	ldr	r3, [r7, #0]
 800c94e:	685a      	ldr	r2, [r3, #4]
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	697a      	ldr	r2, [r7, #20]
 800c958:	621a      	str	r2, [r3, #32]
}
 800c95a:	bf00      	nop
 800c95c:	371c      	adds	r7, #28
 800c95e:	46bd      	mov	sp, r7
 800c960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c964:	4770      	bx	lr
 800c966:	bf00      	nop
 800c968:	40010000 	.word	0x40010000
 800c96c:	40010400 	.word	0x40010400

0800c970 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c970:	b480      	push	{r7}
 800c972:	b087      	sub	sp, #28
 800c974:	af00      	add	r7, sp, #0
 800c976:	6078      	str	r0, [r7, #4]
 800c978:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	6a1b      	ldr	r3, [r3, #32]
 800c97e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	6a1b      	ldr	r3, [r3, #32]
 800c98a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	685b      	ldr	r3, [r3, #4]
 800c990:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	69db      	ldr	r3, [r3, #28]
 800c996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c99e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	f023 0303 	bic.w	r3, r3, #3
 800c9a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c9a8:	683b      	ldr	r3, [r7, #0]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	68fa      	ldr	r2, [r7, #12]
 800c9ae:	4313      	orrs	r3, r2
 800c9b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c9b2:	697b      	ldr	r3, [r7, #20]
 800c9b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c9b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c9ba:	683b      	ldr	r3, [r7, #0]
 800c9bc:	689b      	ldr	r3, [r3, #8]
 800c9be:	021b      	lsls	r3, r3, #8
 800c9c0:	697a      	ldr	r2, [r7, #20]
 800c9c2:	4313      	orrs	r3, r2
 800c9c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	4a21      	ldr	r2, [pc, #132]	; (800ca50 <TIM_OC3_SetConfig+0xe0>)
 800c9ca:	4293      	cmp	r3, r2
 800c9cc:	d003      	beq.n	800c9d6 <TIM_OC3_SetConfig+0x66>
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	4a20      	ldr	r2, [pc, #128]	; (800ca54 <TIM_OC3_SetConfig+0xe4>)
 800c9d2:	4293      	cmp	r3, r2
 800c9d4:	d10d      	bne.n	800c9f2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c9d6:	697b      	ldr	r3, [r7, #20]
 800c9d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c9dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c9de:	683b      	ldr	r3, [r7, #0]
 800c9e0:	68db      	ldr	r3, [r3, #12]
 800c9e2:	021b      	lsls	r3, r3, #8
 800c9e4:	697a      	ldr	r2, [r7, #20]
 800c9e6:	4313      	orrs	r3, r2
 800c9e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c9ea:	697b      	ldr	r3, [r7, #20]
 800c9ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c9f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	4a16      	ldr	r2, [pc, #88]	; (800ca50 <TIM_OC3_SetConfig+0xe0>)
 800c9f6:	4293      	cmp	r3, r2
 800c9f8:	d003      	beq.n	800ca02 <TIM_OC3_SetConfig+0x92>
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	4a15      	ldr	r2, [pc, #84]	; (800ca54 <TIM_OC3_SetConfig+0xe4>)
 800c9fe:	4293      	cmp	r3, r2
 800ca00:	d113      	bne.n	800ca2a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ca02:	693b      	ldr	r3, [r7, #16]
 800ca04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ca08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ca0a:	693b      	ldr	r3, [r7, #16]
 800ca0c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ca10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ca12:	683b      	ldr	r3, [r7, #0]
 800ca14:	695b      	ldr	r3, [r3, #20]
 800ca16:	011b      	lsls	r3, r3, #4
 800ca18:	693a      	ldr	r2, [r7, #16]
 800ca1a:	4313      	orrs	r3, r2
 800ca1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ca1e:	683b      	ldr	r3, [r7, #0]
 800ca20:	699b      	ldr	r3, [r3, #24]
 800ca22:	011b      	lsls	r3, r3, #4
 800ca24:	693a      	ldr	r2, [r7, #16]
 800ca26:	4313      	orrs	r3, r2
 800ca28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	693a      	ldr	r2, [r7, #16]
 800ca2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	68fa      	ldr	r2, [r7, #12]
 800ca34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ca36:	683b      	ldr	r3, [r7, #0]
 800ca38:	685a      	ldr	r2, [r3, #4]
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	697a      	ldr	r2, [r7, #20]
 800ca42:	621a      	str	r2, [r3, #32]
}
 800ca44:	bf00      	nop
 800ca46:	371c      	adds	r7, #28
 800ca48:	46bd      	mov	sp, r7
 800ca4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca4e:	4770      	bx	lr
 800ca50:	40010000 	.word	0x40010000
 800ca54:	40010400 	.word	0x40010400

0800ca58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ca58:	b480      	push	{r7}
 800ca5a:	b087      	sub	sp, #28
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
 800ca60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	6a1b      	ldr	r3, [r3, #32]
 800ca66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	6a1b      	ldr	r3, [r3, #32]
 800ca72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	685b      	ldr	r3, [r3, #4]
 800ca78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	69db      	ldr	r3, [r3, #28]
 800ca7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ca86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ca8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ca90:	683b      	ldr	r3, [r7, #0]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	021b      	lsls	r3, r3, #8
 800ca96:	68fa      	ldr	r2, [r7, #12]
 800ca98:	4313      	orrs	r3, r2
 800ca9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ca9c:	693b      	ldr	r3, [r7, #16]
 800ca9e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800caa2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800caa4:	683b      	ldr	r3, [r7, #0]
 800caa6:	689b      	ldr	r3, [r3, #8]
 800caa8:	031b      	lsls	r3, r3, #12
 800caaa:	693a      	ldr	r2, [r7, #16]
 800caac:	4313      	orrs	r3, r2
 800caae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	4a12      	ldr	r2, [pc, #72]	; (800cafc <TIM_OC4_SetConfig+0xa4>)
 800cab4:	4293      	cmp	r3, r2
 800cab6:	d003      	beq.n	800cac0 <TIM_OC4_SetConfig+0x68>
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	4a11      	ldr	r2, [pc, #68]	; (800cb00 <TIM_OC4_SetConfig+0xa8>)
 800cabc:	4293      	cmp	r3, r2
 800cabe:	d109      	bne.n	800cad4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800cac0:	697b      	ldr	r3, [r7, #20]
 800cac2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cac6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800cac8:	683b      	ldr	r3, [r7, #0]
 800caca:	695b      	ldr	r3, [r3, #20]
 800cacc:	019b      	lsls	r3, r3, #6
 800cace:	697a      	ldr	r2, [r7, #20]
 800cad0:	4313      	orrs	r3, r2
 800cad2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	697a      	ldr	r2, [r7, #20]
 800cad8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	68fa      	ldr	r2, [r7, #12]
 800cade:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800cae0:	683b      	ldr	r3, [r7, #0]
 800cae2:	685a      	ldr	r2, [r3, #4]
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	693a      	ldr	r2, [r7, #16]
 800caec:	621a      	str	r2, [r3, #32]
}
 800caee:	bf00      	nop
 800caf0:	371c      	adds	r7, #28
 800caf2:	46bd      	mov	sp, r7
 800caf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf8:	4770      	bx	lr
 800cafa:	bf00      	nop
 800cafc:	40010000 	.word	0x40010000
 800cb00:	40010400 	.word	0x40010400

0800cb04 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800cb04:	b480      	push	{r7}
 800cb06:	b087      	sub	sp, #28
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	60f8      	str	r0, [r7, #12]
 800cb0c:	60b9      	str	r1, [r7, #8]
 800cb0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cb10:	68bb      	ldr	r3, [r7, #8]
 800cb12:	f003 031f 	and.w	r3, r3, #31
 800cb16:	2201      	movs	r2, #1
 800cb18:	fa02 f303 	lsl.w	r3, r2, r3
 800cb1c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	6a1a      	ldr	r2, [r3, #32]
 800cb22:	697b      	ldr	r3, [r7, #20]
 800cb24:	43db      	mvns	r3, r3
 800cb26:	401a      	ands	r2, r3
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	6a1a      	ldr	r2, [r3, #32]
 800cb30:	68bb      	ldr	r3, [r7, #8]
 800cb32:	f003 031f 	and.w	r3, r3, #31
 800cb36:	6879      	ldr	r1, [r7, #4]
 800cb38:	fa01 f303 	lsl.w	r3, r1, r3
 800cb3c:	431a      	orrs	r2, r3
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	621a      	str	r2, [r3, #32]
}
 800cb42:	bf00      	nop
 800cb44:	371c      	adds	r7, #28
 800cb46:	46bd      	mov	sp, r7
 800cb48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb4c:	4770      	bx	lr
	...

0800cb50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cb50:	b480      	push	{r7}
 800cb52:	b085      	sub	sp, #20
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	6078      	str	r0, [r7, #4]
 800cb58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cb60:	2b01      	cmp	r3, #1
 800cb62:	d101      	bne.n	800cb68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cb64:	2302      	movs	r3, #2
 800cb66:	e05a      	b.n	800cc1e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	2201      	movs	r2, #1
 800cb6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	2202      	movs	r2, #2
 800cb74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	685b      	ldr	r3, [r3, #4]
 800cb7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	689b      	ldr	r3, [r3, #8]
 800cb86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cb8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cb90:	683b      	ldr	r3, [r7, #0]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	68fa      	ldr	r2, [r7, #12]
 800cb96:	4313      	orrs	r3, r2
 800cb98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	68fa      	ldr	r2, [r7, #12]
 800cba0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	4a21      	ldr	r2, [pc, #132]	; (800cc2c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800cba8:	4293      	cmp	r3, r2
 800cbaa:	d022      	beq.n	800cbf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cbb4:	d01d      	beq.n	800cbf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	4a1d      	ldr	r2, [pc, #116]	; (800cc30 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800cbbc:	4293      	cmp	r3, r2
 800cbbe:	d018      	beq.n	800cbf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	4a1b      	ldr	r2, [pc, #108]	; (800cc34 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800cbc6:	4293      	cmp	r3, r2
 800cbc8:	d013      	beq.n	800cbf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	4a1a      	ldr	r2, [pc, #104]	; (800cc38 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800cbd0:	4293      	cmp	r3, r2
 800cbd2:	d00e      	beq.n	800cbf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	4a18      	ldr	r2, [pc, #96]	; (800cc3c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800cbda:	4293      	cmp	r3, r2
 800cbdc:	d009      	beq.n	800cbf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	4a17      	ldr	r2, [pc, #92]	; (800cc40 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800cbe4:	4293      	cmp	r3, r2
 800cbe6:	d004      	beq.n	800cbf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	4a15      	ldr	r2, [pc, #84]	; (800cc44 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800cbee:	4293      	cmp	r3, r2
 800cbf0:	d10c      	bne.n	800cc0c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cbf2:	68bb      	ldr	r3, [r7, #8]
 800cbf4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cbf8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cbfa:	683b      	ldr	r3, [r7, #0]
 800cbfc:	685b      	ldr	r3, [r3, #4]
 800cbfe:	68ba      	ldr	r2, [r7, #8]
 800cc00:	4313      	orrs	r3, r2
 800cc02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	68ba      	ldr	r2, [r7, #8]
 800cc0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	2201      	movs	r2, #1
 800cc10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	2200      	movs	r2, #0
 800cc18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cc1c:	2300      	movs	r3, #0
}
 800cc1e:	4618      	mov	r0, r3
 800cc20:	3714      	adds	r7, #20
 800cc22:	46bd      	mov	sp, r7
 800cc24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc28:	4770      	bx	lr
 800cc2a:	bf00      	nop
 800cc2c:	40010000 	.word	0x40010000
 800cc30:	40000400 	.word	0x40000400
 800cc34:	40000800 	.word	0x40000800
 800cc38:	40000c00 	.word	0x40000c00
 800cc3c:	40010400 	.word	0x40010400
 800cc40:	40014000 	.word	0x40014000
 800cc44:	40001800 	.word	0x40001800

0800cc48 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800cc48:	b480      	push	{r7}
 800cc4a:	b085      	sub	sp, #20
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
 800cc50:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800cc52:	2300      	movs	r3, #0
 800cc54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cc5c:	2b01      	cmp	r3, #1
 800cc5e:	d101      	bne.n	800cc64 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800cc60:	2302      	movs	r3, #2
 800cc62:	e03d      	b.n	800cce0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	2201      	movs	r2, #1
 800cc68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800cc72:	683b      	ldr	r3, [r7, #0]
 800cc74:	68db      	ldr	r3, [r3, #12]
 800cc76:	4313      	orrs	r3, r2
 800cc78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800cc80:	683b      	ldr	r3, [r7, #0]
 800cc82:	689b      	ldr	r3, [r3, #8]
 800cc84:	4313      	orrs	r3, r2
 800cc86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800cc8e:	683b      	ldr	r3, [r7, #0]
 800cc90:	685b      	ldr	r3, [r3, #4]
 800cc92:	4313      	orrs	r3, r2
 800cc94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800cc9c:	683b      	ldr	r3, [r7, #0]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	4313      	orrs	r3, r2
 800cca2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ccaa:	683b      	ldr	r3, [r7, #0]
 800ccac:	691b      	ldr	r3, [r3, #16]
 800ccae:	4313      	orrs	r3, r2
 800ccb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ccb8:	683b      	ldr	r3, [r7, #0]
 800ccba:	695b      	ldr	r3, [r3, #20]
 800ccbc:	4313      	orrs	r3, r2
 800ccbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ccc6:	683b      	ldr	r3, [r7, #0]
 800ccc8:	69db      	ldr	r3, [r3, #28]
 800ccca:	4313      	orrs	r3, r2
 800cccc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	68fa      	ldr	r2, [r7, #12]
 800ccd4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	2200      	movs	r2, #0
 800ccda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ccde:	2300      	movs	r3, #0
}
 800cce0:	4618      	mov	r0, r3
 800cce2:	3714      	adds	r7, #20
 800cce4:	46bd      	mov	sp, r7
 800cce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccea:	4770      	bx	lr

0800ccec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ccec:	b480      	push	{r7}
 800ccee:	b083      	sub	sp, #12
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ccf4:	bf00      	nop
 800ccf6:	370c      	adds	r7, #12
 800ccf8:	46bd      	mov	sp, r7
 800ccfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfe:	4770      	bx	lr

0800cd00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cd00:	b480      	push	{r7}
 800cd02:	b083      	sub	sp, #12
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cd08:	bf00      	nop
 800cd0a:	370c      	adds	r7, #12
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd12:	4770      	bx	lr

0800cd14 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cd14:	b580      	push	{r7, lr}
 800cd16:	b082      	sub	sp, #8
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d101      	bne.n	800cd26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cd22:	2301      	movs	r3, #1
 800cd24:	e03f      	b.n	800cda6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800cd2c:	b2db      	uxtb	r3, r3
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d106      	bne.n	800cd40 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	2200      	movs	r2, #0
 800cd36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cd3a:	6878      	ldr	r0, [r7, #4]
 800cd3c:	f7f8 fabc 	bl	80052b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	2224      	movs	r2, #36	; 0x24
 800cd44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	68da      	ldr	r2, [r3, #12]
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cd56:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800cd58:	6878      	ldr	r0, [r7, #4]
 800cd5a:	f000 f829 	bl	800cdb0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	691a      	ldr	r2, [r3, #16]
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800cd6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	695a      	ldr	r2, [r3, #20]
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800cd7c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	68da      	ldr	r2, [r3, #12]
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800cd8c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	2200      	movs	r2, #0
 800cd92:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	2220      	movs	r2, #32
 800cd98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	2220      	movs	r2, #32
 800cda0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800cda4:	2300      	movs	r3, #0
}
 800cda6:	4618      	mov	r0, r3
 800cda8:	3708      	adds	r7, #8
 800cdaa:	46bd      	mov	sp, r7
 800cdac:	bd80      	pop	{r7, pc}
	...

0800cdb0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cdb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdb4:	b085      	sub	sp, #20
 800cdb6:	af00      	add	r7, sp, #0
 800cdb8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	691b      	ldr	r3, [r3, #16]
 800cdc0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	68da      	ldr	r2, [r3, #12]
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	430a      	orrs	r2, r1
 800cdce:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	689a      	ldr	r2, [r3, #8]
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	691b      	ldr	r3, [r3, #16]
 800cdd8:	431a      	orrs	r2, r3
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	695b      	ldr	r3, [r3, #20]
 800cdde:	431a      	orrs	r2, r3
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	69db      	ldr	r3, [r3, #28]
 800cde4:	4313      	orrs	r3, r2
 800cde6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	68db      	ldr	r3, [r3, #12]
 800cdee:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800cdf2:	f023 030c 	bic.w	r3, r3, #12
 800cdf6:	687a      	ldr	r2, [r7, #4]
 800cdf8:	6812      	ldr	r2, [r2, #0]
 800cdfa:	68f9      	ldr	r1, [r7, #12]
 800cdfc:	430b      	orrs	r3, r1
 800cdfe:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	695b      	ldr	r3, [r3, #20]
 800ce06:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	699a      	ldr	r2, [r3, #24]
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	430a      	orrs	r2, r1
 800ce14:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	69db      	ldr	r3, [r3, #28]
 800ce1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ce1e:	f040 818b 	bne.w	800d138 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	4ac1      	ldr	r2, [pc, #772]	; (800d12c <UART_SetConfig+0x37c>)
 800ce28:	4293      	cmp	r3, r2
 800ce2a:	d005      	beq.n	800ce38 <UART_SetConfig+0x88>
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	4abf      	ldr	r2, [pc, #764]	; (800d130 <UART_SetConfig+0x380>)
 800ce32:	4293      	cmp	r3, r2
 800ce34:	f040 80bd 	bne.w	800cfb2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ce38:	f7fc fbcc 	bl	80095d4 <HAL_RCC_GetPCLK2Freq>
 800ce3c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ce3e:	68bb      	ldr	r3, [r7, #8]
 800ce40:	461d      	mov	r5, r3
 800ce42:	f04f 0600 	mov.w	r6, #0
 800ce46:	46a8      	mov	r8, r5
 800ce48:	46b1      	mov	r9, r6
 800ce4a:	eb18 0308 	adds.w	r3, r8, r8
 800ce4e:	eb49 0409 	adc.w	r4, r9, r9
 800ce52:	4698      	mov	r8, r3
 800ce54:	46a1      	mov	r9, r4
 800ce56:	eb18 0805 	adds.w	r8, r8, r5
 800ce5a:	eb49 0906 	adc.w	r9, r9, r6
 800ce5e:	f04f 0100 	mov.w	r1, #0
 800ce62:	f04f 0200 	mov.w	r2, #0
 800ce66:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800ce6a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800ce6e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800ce72:	4688      	mov	r8, r1
 800ce74:	4691      	mov	r9, r2
 800ce76:	eb18 0005 	adds.w	r0, r8, r5
 800ce7a:	eb49 0106 	adc.w	r1, r9, r6
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	685b      	ldr	r3, [r3, #4]
 800ce82:	461d      	mov	r5, r3
 800ce84:	f04f 0600 	mov.w	r6, #0
 800ce88:	196b      	adds	r3, r5, r5
 800ce8a:	eb46 0406 	adc.w	r4, r6, r6
 800ce8e:	461a      	mov	r2, r3
 800ce90:	4623      	mov	r3, r4
 800ce92:	f7f3 ff11 	bl	8000cb8 <__aeabi_uldivmod>
 800ce96:	4603      	mov	r3, r0
 800ce98:	460c      	mov	r4, r1
 800ce9a:	461a      	mov	r2, r3
 800ce9c:	4ba5      	ldr	r3, [pc, #660]	; (800d134 <UART_SetConfig+0x384>)
 800ce9e:	fba3 2302 	umull	r2, r3, r3, r2
 800cea2:	095b      	lsrs	r3, r3, #5
 800cea4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800cea8:	68bb      	ldr	r3, [r7, #8]
 800ceaa:	461d      	mov	r5, r3
 800ceac:	f04f 0600 	mov.w	r6, #0
 800ceb0:	46a9      	mov	r9, r5
 800ceb2:	46b2      	mov	sl, r6
 800ceb4:	eb19 0309 	adds.w	r3, r9, r9
 800ceb8:	eb4a 040a 	adc.w	r4, sl, sl
 800cebc:	4699      	mov	r9, r3
 800cebe:	46a2      	mov	sl, r4
 800cec0:	eb19 0905 	adds.w	r9, r9, r5
 800cec4:	eb4a 0a06 	adc.w	sl, sl, r6
 800cec8:	f04f 0100 	mov.w	r1, #0
 800cecc:	f04f 0200 	mov.w	r2, #0
 800ced0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ced4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ced8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800cedc:	4689      	mov	r9, r1
 800cede:	4692      	mov	sl, r2
 800cee0:	eb19 0005 	adds.w	r0, r9, r5
 800cee4:	eb4a 0106 	adc.w	r1, sl, r6
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	685b      	ldr	r3, [r3, #4]
 800ceec:	461d      	mov	r5, r3
 800ceee:	f04f 0600 	mov.w	r6, #0
 800cef2:	196b      	adds	r3, r5, r5
 800cef4:	eb46 0406 	adc.w	r4, r6, r6
 800cef8:	461a      	mov	r2, r3
 800cefa:	4623      	mov	r3, r4
 800cefc:	f7f3 fedc 	bl	8000cb8 <__aeabi_uldivmod>
 800cf00:	4603      	mov	r3, r0
 800cf02:	460c      	mov	r4, r1
 800cf04:	461a      	mov	r2, r3
 800cf06:	4b8b      	ldr	r3, [pc, #556]	; (800d134 <UART_SetConfig+0x384>)
 800cf08:	fba3 1302 	umull	r1, r3, r3, r2
 800cf0c:	095b      	lsrs	r3, r3, #5
 800cf0e:	2164      	movs	r1, #100	; 0x64
 800cf10:	fb01 f303 	mul.w	r3, r1, r3
 800cf14:	1ad3      	subs	r3, r2, r3
 800cf16:	00db      	lsls	r3, r3, #3
 800cf18:	3332      	adds	r3, #50	; 0x32
 800cf1a:	4a86      	ldr	r2, [pc, #536]	; (800d134 <UART_SetConfig+0x384>)
 800cf1c:	fba2 2303 	umull	r2, r3, r2, r3
 800cf20:	095b      	lsrs	r3, r3, #5
 800cf22:	005b      	lsls	r3, r3, #1
 800cf24:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800cf28:	4498      	add	r8, r3
 800cf2a:	68bb      	ldr	r3, [r7, #8]
 800cf2c:	461d      	mov	r5, r3
 800cf2e:	f04f 0600 	mov.w	r6, #0
 800cf32:	46a9      	mov	r9, r5
 800cf34:	46b2      	mov	sl, r6
 800cf36:	eb19 0309 	adds.w	r3, r9, r9
 800cf3a:	eb4a 040a 	adc.w	r4, sl, sl
 800cf3e:	4699      	mov	r9, r3
 800cf40:	46a2      	mov	sl, r4
 800cf42:	eb19 0905 	adds.w	r9, r9, r5
 800cf46:	eb4a 0a06 	adc.w	sl, sl, r6
 800cf4a:	f04f 0100 	mov.w	r1, #0
 800cf4e:	f04f 0200 	mov.w	r2, #0
 800cf52:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cf56:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800cf5a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800cf5e:	4689      	mov	r9, r1
 800cf60:	4692      	mov	sl, r2
 800cf62:	eb19 0005 	adds.w	r0, r9, r5
 800cf66:	eb4a 0106 	adc.w	r1, sl, r6
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	685b      	ldr	r3, [r3, #4]
 800cf6e:	461d      	mov	r5, r3
 800cf70:	f04f 0600 	mov.w	r6, #0
 800cf74:	196b      	adds	r3, r5, r5
 800cf76:	eb46 0406 	adc.w	r4, r6, r6
 800cf7a:	461a      	mov	r2, r3
 800cf7c:	4623      	mov	r3, r4
 800cf7e:	f7f3 fe9b 	bl	8000cb8 <__aeabi_uldivmod>
 800cf82:	4603      	mov	r3, r0
 800cf84:	460c      	mov	r4, r1
 800cf86:	461a      	mov	r2, r3
 800cf88:	4b6a      	ldr	r3, [pc, #424]	; (800d134 <UART_SetConfig+0x384>)
 800cf8a:	fba3 1302 	umull	r1, r3, r3, r2
 800cf8e:	095b      	lsrs	r3, r3, #5
 800cf90:	2164      	movs	r1, #100	; 0x64
 800cf92:	fb01 f303 	mul.w	r3, r1, r3
 800cf96:	1ad3      	subs	r3, r2, r3
 800cf98:	00db      	lsls	r3, r3, #3
 800cf9a:	3332      	adds	r3, #50	; 0x32
 800cf9c:	4a65      	ldr	r2, [pc, #404]	; (800d134 <UART_SetConfig+0x384>)
 800cf9e:	fba2 2303 	umull	r2, r3, r2, r3
 800cfa2:	095b      	lsrs	r3, r3, #5
 800cfa4:	f003 0207 	and.w	r2, r3, #7
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	4442      	add	r2, r8
 800cfae:	609a      	str	r2, [r3, #8]
 800cfb0:	e26f      	b.n	800d492 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800cfb2:	f7fc fafb 	bl	80095ac <HAL_RCC_GetPCLK1Freq>
 800cfb6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800cfb8:	68bb      	ldr	r3, [r7, #8]
 800cfba:	461d      	mov	r5, r3
 800cfbc:	f04f 0600 	mov.w	r6, #0
 800cfc0:	46a8      	mov	r8, r5
 800cfc2:	46b1      	mov	r9, r6
 800cfc4:	eb18 0308 	adds.w	r3, r8, r8
 800cfc8:	eb49 0409 	adc.w	r4, r9, r9
 800cfcc:	4698      	mov	r8, r3
 800cfce:	46a1      	mov	r9, r4
 800cfd0:	eb18 0805 	adds.w	r8, r8, r5
 800cfd4:	eb49 0906 	adc.w	r9, r9, r6
 800cfd8:	f04f 0100 	mov.w	r1, #0
 800cfdc:	f04f 0200 	mov.w	r2, #0
 800cfe0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800cfe4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800cfe8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800cfec:	4688      	mov	r8, r1
 800cfee:	4691      	mov	r9, r2
 800cff0:	eb18 0005 	adds.w	r0, r8, r5
 800cff4:	eb49 0106 	adc.w	r1, r9, r6
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	685b      	ldr	r3, [r3, #4]
 800cffc:	461d      	mov	r5, r3
 800cffe:	f04f 0600 	mov.w	r6, #0
 800d002:	196b      	adds	r3, r5, r5
 800d004:	eb46 0406 	adc.w	r4, r6, r6
 800d008:	461a      	mov	r2, r3
 800d00a:	4623      	mov	r3, r4
 800d00c:	f7f3 fe54 	bl	8000cb8 <__aeabi_uldivmod>
 800d010:	4603      	mov	r3, r0
 800d012:	460c      	mov	r4, r1
 800d014:	461a      	mov	r2, r3
 800d016:	4b47      	ldr	r3, [pc, #284]	; (800d134 <UART_SetConfig+0x384>)
 800d018:	fba3 2302 	umull	r2, r3, r3, r2
 800d01c:	095b      	lsrs	r3, r3, #5
 800d01e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800d022:	68bb      	ldr	r3, [r7, #8]
 800d024:	461d      	mov	r5, r3
 800d026:	f04f 0600 	mov.w	r6, #0
 800d02a:	46a9      	mov	r9, r5
 800d02c:	46b2      	mov	sl, r6
 800d02e:	eb19 0309 	adds.w	r3, r9, r9
 800d032:	eb4a 040a 	adc.w	r4, sl, sl
 800d036:	4699      	mov	r9, r3
 800d038:	46a2      	mov	sl, r4
 800d03a:	eb19 0905 	adds.w	r9, r9, r5
 800d03e:	eb4a 0a06 	adc.w	sl, sl, r6
 800d042:	f04f 0100 	mov.w	r1, #0
 800d046:	f04f 0200 	mov.w	r2, #0
 800d04a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d04e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d052:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d056:	4689      	mov	r9, r1
 800d058:	4692      	mov	sl, r2
 800d05a:	eb19 0005 	adds.w	r0, r9, r5
 800d05e:	eb4a 0106 	adc.w	r1, sl, r6
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	685b      	ldr	r3, [r3, #4]
 800d066:	461d      	mov	r5, r3
 800d068:	f04f 0600 	mov.w	r6, #0
 800d06c:	196b      	adds	r3, r5, r5
 800d06e:	eb46 0406 	adc.w	r4, r6, r6
 800d072:	461a      	mov	r2, r3
 800d074:	4623      	mov	r3, r4
 800d076:	f7f3 fe1f 	bl	8000cb8 <__aeabi_uldivmod>
 800d07a:	4603      	mov	r3, r0
 800d07c:	460c      	mov	r4, r1
 800d07e:	461a      	mov	r2, r3
 800d080:	4b2c      	ldr	r3, [pc, #176]	; (800d134 <UART_SetConfig+0x384>)
 800d082:	fba3 1302 	umull	r1, r3, r3, r2
 800d086:	095b      	lsrs	r3, r3, #5
 800d088:	2164      	movs	r1, #100	; 0x64
 800d08a:	fb01 f303 	mul.w	r3, r1, r3
 800d08e:	1ad3      	subs	r3, r2, r3
 800d090:	00db      	lsls	r3, r3, #3
 800d092:	3332      	adds	r3, #50	; 0x32
 800d094:	4a27      	ldr	r2, [pc, #156]	; (800d134 <UART_SetConfig+0x384>)
 800d096:	fba2 2303 	umull	r2, r3, r2, r3
 800d09a:	095b      	lsrs	r3, r3, #5
 800d09c:	005b      	lsls	r3, r3, #1
 800d09e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800d0a2:	4498      	add	r8, r3
 800d0a4:	68bb      	ldr	r3, [r7, #8]
 800d0a6:	461d      	mov	r5, r3
 800d0a8:	f04f 0600 	mov.w	r6, #0
 800d0ac:	46a9      	mov	r9, r5
 800d0ae:	46b2      	mov	sl, r6
 800d0b0:	eb19 0309 	adds.w	r3, r9, r9
 800d0b4:	eb4a 040a 	adc.w	r4, sl, sl
 800d0b8:	4699      	mov	r9, r3
 800d0ba:	46a2      	mov	sl, r4
 800d0bc:	eb19 0905 	adds.w	r9, r9, r5
 800d0c0:	eb4a 0a06 	adc.w	sl, sl, r6
 800d0c4:	f04f 0100 	mov.w	r1, #0
 800d0c8:	f04f 0200 	mov.w	r2, #0
 800d0cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d0d0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d0d4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d0d8:	4689      	mov	r9, r1
 800d0da:	4692      	mov	sl, r2
 800d0dc:	eb19 0005 	adds.w	r0, r9, r5
 800d0e0:	eb4a 0106 	adc.w	r1, sl, r6
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	685b      	ldr	r3, [r3, #4]
 800d0e8:	461d      	mov	r5, r3
 800d0ea:	f04f 0600 	mov.w	r6, #0
 800d0ee:	196b      	adds	r3, r5, r5
 800d0f0:	eb46 0406 	adc.w	r4, r6, r6
 800d0f4:	461a      	mov	r2, r3
 800d0f6:	4623      	mov	r3, r4
 800d0f8:	f7f3 fdde 	bl	8000cb8 <__aeabi_uldivmod>
 800d0fc:	4603      	mov	r3, r0
 800d0fe:	460c      	mov	r4, r1
 800d100:	461a      	mov	r2, r3
 800d102:	4b0c      	ldr	r3, [pc, #48]	; (800d134 <UART_SetConfig+0x384>)
 800d104:	fba3 1302 	umull	r1, r3, r3, r2
 800d108:	095b      	lsrs	r3, r3, #5
 800d10a:	2164      	movs	r1, #100	; 0x64
 800d10c:	fb01 f303 	mul.w	r3, r1, r3
 800d110:	1ad3      	subs	r3, r2, r3
 800d112:	00db      	lsls	r3, r3, #3
 800d114:	3332      	adds	r3, #50	; 0x32
 800d116:	4a07      	ldr	r2, [pc, #28]	; (800d134 <UART_SetConfig+0x384>)
 800d118:	fba2 2303 	umull	r2, r3, r2, r3
 800d11c:	095b      	lsrs	r3, r3, #5
 800d11e:	f003 0207 	and.w	r2, r3, #7
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	4442      	add	r2, r8
 800d128:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800d12a:	e1b2      	b.n	800d492 <UART_SetConfig+0x6e2>
 800d12c:	40011000 	.word	0x40011000
 800d130:	40011400 	.word	0x40011400
 800d134:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	4ad7      	ldr	r2, [pc, #860]	; (800d49c <UART_SetConfig+0x6ec>)
 800d13e:	4293      	cmp	r3, r2
 800d140:	d005      	beq.n	800d14e <UART_SetConfig+0x39e>
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	4ad6      	ldr	r2, [pc, #856]	; (800d4a0 <UART_SetConfig+0x6f0>)
 800d148:	4293      	cmp	r3, r2
 800d14a:	f040 80d1 	bne.w	800d2f0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800d14e:	f7fc fa41 	bl	80095d4 <HAL_RCC_GetPCLK2Freq>
 800d152:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d154:	68bb      	ldr	r3, [r7, #8]
 800d156:	469a      	mov	sl, r3
 800d158:	f04f 0b00 	mov.w	fp, #0
 800d15c:	46d0      	mov	r8, sl
 800d15e:	46d9      	mov	r9, fp
 800d160:	eb18 0308 	adds.w	r3, r8, r8
 800d164:	eb49 0409 	adc.w	r4, r9, r9
 800d168:	4698      	mov	r8, r3
 800d16a:	46a1      	mov	r9, r4
 800d16c:	eb18 080a 	adds.w	r8, r8, sl
 800d170:	eb49 090b 	adc.w	r9, r9, fp
 800d174:	f04f 0100 	mov.w	r1, #0
 800d178:	f04f 0200 	mov.w	r2, #0
 800d17c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800d180:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800d184:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800d188:	4688      	mov	r8, r1
 800d18a:	4691      	mov	r9, r2
 800d18c:	eb1a 0508 	adds.w	r5, sl, r8
 800d190:	eb4b 0609 	adc.w	r6, fp, r9
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	685b      	ldr	r3, [r3, #4]
 800d198:	4619      	mov	r1, r3
 800d19a:	f04f 0200 	mov.w	r2, #0
 800d19e:	f04f 0300 	mov.w	r3, #0
 800d1a2:	f04f 0400 	mov.w	r4, #0
 800d1a6:	0094      	lsls	r4, r2, #2
 800d1a8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d1ac:	008b      	lsls	r3, r1, #2
 800d1ae:	461a      	mov	r2, r3
 800d1b0:	4623      	mov	r3, r4
 800d1b2:	4628      	mov	r0, r5
 800d1b4:	4631      	mov	r1, r6
 800d1b6:	f7f3 fd7f 	bl	8000cb8 <__aeabi_uldivmod>
 800d1ba:	4603      	mov	r3, r0
 800d1bc:	460c      	mov	r4, r1
 800d1be:	461a      	mov	r2, r3
 800d1c0:	4bb8      	ldr	r3, [pc, #736]	; (800d4a4 <UART_SetConfig+0x6f4>)
 800d1c2:	fba3 2302 	umull	r2, r3, r3, r2
 800d1c6:	095b      	lsrs	r3, r3, #5
 800d1c8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800d1cc:	68bb      	ldr	r3, [r7, #8]
 800d1ce:	469b      	mov	fp, r3
 800d1d0:	f04f 0c00 	mov.w	ip, #0
 800d1d4:	46d9      	mov	r9, fp
 800d1d6:	46e2      	mov	sl, ip
 800d1d8:	eb19 0309 	adds.w	r3, r9, r9
 800d1dc:	eb4a 040a 	adc.w	r4, sl, sl
 800d1e0:	4699      	mov	r9, r3
 800d1e2:	46a2      	mov	sl, r4
 800d1e4:	eb19 090b 	adds.w	r9, r9, fp
 800d1e8:	eb4a 0a0c 	adc.w	sl, sl, ip
 800d1ec:	f04f 0100 	mov.w	r1, #0
 800d1f0:	f04f 0200 	mov.w	r2, #0
 800d1f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d1f8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d1fc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d200:	4689      	mov	r9, r1
 800d202:	4692      	mov	sl, r2
 800d204:	eb1b 0509 	adds.w	r5, fp, r9
 800d208:	eb4c 060a 	adc.w	r6, ip, sl
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	685b      	ldr	r3, [r3, #4]
 800d210:	4619      	mov	r1, r3
 800d212:	f04f 0200 	mov.w	r2, #0
 800d216:	f04f 0300 	mov.w	r3, #0
 800d21a:	f04f 0400 	mov.w	r4, #0
 800d21e:	0094      	lsls	r4, r2, #2
 800d220:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d224:	008b      	lsls	r3, r1, #2
 800d226:	461a      	mov	r2, r3
 800d228:	4623      	mov	r3, r4
 800d22a:	4628      	mov	r0, r5
 800d22c:	4631      	mov	r1, r6
 800d22e:	f7f3 fd43 	bl	8000cb8 <__aeabi_uldivmod>
 800d232:	4603      	mov	r3, r0
 800d234:	460c      	mov	r4, r1
 800d236:	461a      	mov	r2, r3
 800d238:	4b9a      	ldr	r3, [pc, #616]	; (800d4a4 <UART_SetConfig+0x6f4>)
 800d23a:	fba3 1302 	umull	r1, r3, r3, r2
 800d23e:	095b      	lsrs	r3, r3, #5
 800d240:	2164      	movs	r1, #100	; 0x64
 800d242:	fb01 f303 	mul.w	r3, r1, r3
 800d246:	1ad3      	subs	r3, r2, r3
 800d248:	011b      	lsls	r3, r3, #4
 800d24a:	3332      	adds	r3, #50	; 0x32
 800d24c:	4a95      	ldr	r2, [pc, #596]	; (800d4a4 <UART_SetConfig+0x6f4>)
 800d24e:	fba2 2303 	umull	r2, r3, r2, r3
 800d252:	095b      	lsrs	r3, r3, #5
 800d254:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d258:	4498      	add	r8, r3
 800d25a:	68bb      	ldr	r3, [r7, #8]
 800d25c:	469b      	mov	fp, r3
 800d25e:	f04f 0c00 	mov.w	ip, #0
 800d262:	46d9      	mov	r9, fp
 800d264:	46e2      	mov	sl, ip
 800d266:	eb19 0309 	adds.w	r3, r9, r9
 800d26a:	eb4a 040a 	adc.w	r4, sl, sl
 800d26e:	4699      	mov	r9, r3
 800d270:	46a2      	mov	sl, r4
 800d272:	eb19 090b 	adds.w	r9, r9, fp
 800d276:	eb4a 0a0c 	adc.w	sl, sl, ip
 800d27a:	f04f 0100 	mov.w	r1, #0
 800d27e:	f04f 0200 	mov.w	r2, #0
 800d282:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d286:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d28a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d28e:	4689      	mov	r9, r1
 800d290:	4692      	mov	sl, r2
 800d292:	eb1b 0509 	adds.w	r5, fp, r9
 800d296:	eb4c 060a 	adc.w	r6, ip, sl
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	685b      	ldr	r3, [r3, #4]
 800d29e:	4619      	mov	r1, r3
 800d2a0:	f04f 0200 	mov.w	r2, #0
 800d2a4:	f04f 0300 	mov.w	r3, #0
 800d2a8:	f04f 0400 	mov.w	r4, #0
 800d2ac:	0094      	lsls	r4, r2, #2
 800d2ae:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d2b2:	008b      	lsls	r3, r1, #2
 800d2b4:	461a      	mov	r2, r3
 800d2b6:	4623      	mov	r3, r4
 800d2b8:	4628      	mov	r0, r5
 800d2ba:	4631      	mov	r1, r6
 800d2bc:	f7f3 fcfc 	bl	8000cb8 <__aeabi_uldivmod>
 800d2c0:	4603      	mov	r3, r0
 800d2c2:	460c      	mov	r4, r1
 800d2c4:	461a      	mov	r2, r3
 800d2c6:	4b77      	ldr	r3, [pc, #476]	; (800d4a4 <UART_SetConfig+0x6f4>)
 800d2c8:	fba3 1302 	umull	r1, r3, r3, r2
 800d2cc:	095b      	lsrs	r3, r3, #5
 800d2ce:	2164      	movs	r1, #100	; 0x64
 800d2d0:	fb01 f303 	mul.w	r3, r1, r3
 800d2d4:	1ad3      	subs	r3, r2, r3
 800d2d6:	011b      	lsls	r3, r3, #4
 800d2d8:	3332      	adds	r3, #50	; 0x32
 800d2da:	4a72      	ldr	r2, [pc, #456]	; (800d4a4 <UART_SetConfig+0x6f4>)
 800d2dc:	fba2 2303 	umull	r2, r3, r2, r3
 800d2e0:	095b      	lsrs	r3, r3, #5
 800d2e2:	f003 020f 	and.w	r2, r3, #15
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	4442      	add	r2, r8
 800d2ec:	609a      	str	r2, [r3, #8]
 800d2ee:	e0d0      	b.n	800d492 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800d2f0:	f7fc f95c 	bl	80095ac <HAL_RCC_GetPCLK1Freq>
 800d2f4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d2f6:	68bb      	ldr	r3, [r7, #8]
 800d2f8:	469a      	mov	sl, r3
 800d2fa:	f04f 0b00 	mov.w	fp, #0
 800d2fe:	46d0      	mov	r8, sl
 800d300:	46d9      	mov	r9, fp
 800d302:	eb18 0308 	adds.w	r3, r8, r8
 800d306:	eb49 0409 	adc.w	r4, r9, r9
 800d30a:	4698      	mov	r8, r3
 800d30c:	46a1      	mov	r9, r4
 800d30e:	eb18 080a 	adds.w	r8, r8, sl
 800d312:	eb49 090b 	adc.w	r9, r9, fp
 800d316:	f04f 0100 	mov.w	r1, #0
 800d31a:	f04f 0200 	mov.w	r2, #0
 800d31e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800d322:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800d326:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800d32a:	4688      	mov	r8, r1
 800d32c:	4691      	mov	r9, r2
 800d32e:	eb1a 0508 	adds.w	r5, sl, r8
 800d332:	eb4b 0609 	adc.w	r6, fp, r9
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	685b      	ldr	r3, [r3, #4]
 800d33a:	4619      	mov	r1, r3
 800d33c:	f04f 0200 	mov.w	r2, #0
 800d340:	f04f 0300 	mov.w	r3, #0
 800d344:	f04f 0400 	mov.w	r4, #0
 800d348:	0094      	lsls	r4, r2, #2
 800d34a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d34e:	008b      	lsls	r3, r1, #2
 800d350:	461a      	mov	r2, r3
 800d352:	4623      	mov	r3, r4
 800d354:	4628      	mov	r0, r5
 800d356:	4631      	mov	r1, r6
 800d358:	f7f3 fcae 	bl	8000cb8 <__aeabi_uldivmod>
 800d35c:	4603      	mov	r3, r0
 800d35e:	460c      	mov	r4, r1
 800d360:	461a      	mov	r2, r3
 800d362:	4b50      	ldr	r3, [pc, #320]	; (800d4a4 <UART_SetConfig+0x6f4>)
 800d364:	fba3 2302 	umull	r2, r3, r3, r2
 800d368:	095b      	lsrs	r3, r3, #5
 800d36a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800d36e:	68bb      	ldr	r3, [r7, #8]
 800d370:	469b      	mov	fp, r3
 800d372:	f04f 0c00 	mov.w	ip, #0
 800d376:	46d9      	mov	r9, fp
 800d378:	46e2      	mov	sl, ip
 800d37a:	eb19 0309 	adds.w	r3, r9, r9
 800d37e:	eb4a 040a 	adc.w	r4, sl, sl
 800d382:	4699      	mov	r9, r3
 800d384:	46a2      	mov	sl, r4
 800d386:	eb19 090b 	adds.w	r9, r9, fp
 800d38a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800d38e:	f04f 0100 	mov.w	r1, #0
 800d392:	f04f 0200 	mov.w	r2, #0
 800d396:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d39a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d39e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d3a2:	4689      	mov	r9, r1
 800d3a4:	4692      	mov	sl, r2
 800d3a6:	eb1b 0509 	adds.w	r5, fp, r9
 800d3aa:	eb4c 060a 	adc.w	r6, ip, sl
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	685b      	ldr	r3, [r3, #4]
 800d3b2:	4619      	mov	r1, r3
 800d3b4:	f04f 0200 	mov.w	r2, #0
 800d3b8:	f04f 0300 	mov.w	r3, #0
 800d3bc:	f04f 0400 	mov.w	r4, #0
 800d3c0:	0094      	lsls	r4, r2, #2
 800d3c2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d3c6:	008b      	lsls	r3, r1, #2
 800d3c8:	461a      	mov	r2, r3
 800d3ca:	4623      	mov	r3, r4
 800d3cc:	4628      	mov	r0, r5
 800d3ce:	4631      	mov	r1, r6
 800d3d0:	f7f3 fc72 	bl	8000cb8 <__aeabi_uldivmod>
 800d3d4:	4603      	mov	r3, r0
 800d3d6:	460c      	mov	r4, r1
 800d3d8:	461a      	mov	r2, r3
 800d3da:	4b32      	ldr	r3, [pc, #200]	; (800d4a4 <UART_SetConfig+0x6f4>)
 800d3dc:	fba3 1302 	umull	r1, r3, r3, r2
 800d3e0:	095b      	lsrs	r3, r3, #5
 800d3e2:	2164      	movs	r1, #100	; 0x64
 800d3e4:	fb01 f303 	mul.w	r3, r1, r3
 800d3e8:	1ad3      	subs	r3, r2, r3
 800d3ea:	011b      	lsls	r3, r3, #4
 800d3ec:	3332      	adds	r3, #50	; 0x32
 800d3ee:	4a2d      	ldr	r2, [pc, #180]	; (800d4a4 <UART_SetConfig+0x6f4>)
 800d3f0:	fba2 2303 	umull	r2, r3, r2, r3
 800d3f4:	095b      	lsrs	r3, r3, #5
 800d3f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d3fa:	4498      	add	r8, r3
 800d3fc:	68bb      	ldr	r3, [r7, #8]
 800d3fe:	469b      	mov	fp, r3
 800d400:	f04f 0c00 	mov.w	ip, #0
 800d404:	46d9      	mov	r9, fp
 800d406:	46e2      	mov	sl, ip
 800d408:	eb19 0309 	adds.w	r3, r9, r9
 800d40c:	eb4a 040a 	adc.w	r4, sl, sl
 800d410:	4699      	mov	r9, r3
 800d412:	46a2      	mov	sl, r4
 800d414:	eb19 090b 	adds.w	r9, r9, fp
 800d418:	eb4a 0a0c 	adc.w	sl, sl, ip
 800d41c:	f04f 0100 	mov.w	r1, #0
 800d420:	f04f 0200 	mov.w	r2, #0
 800d424:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d428:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d42c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d430:	4689      	mov	r9, r1
 800d432:	4692      	mov	sl, r2
 800d434:	eb1b 0509 	adds.w	r5, fp, r9
 800d438:	eb4c 060a 	adc.w	r6, ip, sl
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	685b      	ldr	r3, [r3, #4]
 800d440:	4619      	mov	r1, r3
 800d442:	f04f 0200 	mov.w	r2, #0
 800d446:	f04f 0300 	mov.w	r3, #0
 800d44a:	f04f 0400 	mov.w	r4, #0
 800d44e:	0094      	lsls	r4, r2, #2
 800d450:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d454:	008b      	lsls	r3, r1, #2
 800d456:	461a      	mov	r2, r3
 800d458:	4623      	mov	r3, r4
 800d45a:	4628      	mov	r0, r5
 800d45c:	4631      	mov	r1, r6
 800d45e:	f7f3 fc2b 	bl	8000cb8 <__aeabi_uldivmod>
 800d462:	4603      	mov	r3, r0
 800d464:	460c      	mov	r4, r1
 800d466:	461a      	mov	r2, r3
 800d468:	4b0e      	ldr	r3, [pc, #56]	; (800d4a4 <UART_SetConfig+0x6f4>)
 800d46a:	fba3 1302 	umull	r1, r3, r3, r2
 800d46e:	095b      	lsrs	r3, r3, #5
 800d470:	2164      	movs	r1, #100	; 0x64
 800d472:	fb01 f303 	mul.w	r3, r1, r3
 800d476:	1ad3      	subs	r3, r2, r3
 800d478:	011b      	lsls	r3, r3, #4
 800d47a:	3332      	adds	r3, #50	; 0x32
 800d47c:	4a09      	ldr	r2, [pc, #36]	; (800d4a4 <UART_SetConfig+0x6f4>)
 800d47e:	fba2 2303 	umull	r2, r3, r2, r3
 800d482:	095b      	lsrs	r3, r3, #5
 800d484:	f003 020f 	and.w	r2, r3, #15
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	4442      	add	r2, r8
 800d48e:	609a      	str	r2, [r3, #8]
}
 800d490:	e7ff      	b.n	800d492 <UART_SetConfig+0x6e2>
 800d492:	bf00      	nop
 800d494:	3714      	adds	r7, #20
 800d496:	46bd      	mov	sp, r7
 800d498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d49c:	40011000 	.word	0x40011000
 800d4a0:	40011400 	.word	0x40011400
 800d4a4:	51eb851f 	.word	0x51eb851f

0800d4a8 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800d4a8:	b084      	sub	sp, #16
 800d4aa:	b480      	push	{r7}
 800d4ac:	b085      	sub	sp, #20
 800d4ae:	af00      	add	r7, sp, #0
 800d4b0:	6078      	str	r0, [r7, #4]
 800d4b2:	f107 001c 	add.w	r0, r7, #28
 800d4b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800d4be:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800d4c0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800d4c2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800d4c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800d4c6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800d4c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800d4ca:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800d4cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800d4ce:	431a      	orrs	r2, r3
             Init.ClockDiv
 800d4d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800d4d2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800d4d4:	68fa      	ldr	r2, [r7, #12]
 800d4d6:	4313      	orrs	r3, r2
 800d4d8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	685b      	ldr	r3, [r3, #4]
 800d4de:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800d4e2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d4e6:	68fa      	ldr	r2, [r7, #12]
 800d4e8:	431a      	orrs	r2, r3
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800d4ee:	2300      	movs	r3, #0
}
 800d4f0:	4618      	mov	r0, r3
 800d4f2:	3714      	adds	r7, #20
 800d4f4:	46bd      	mov	sp, r7
 800d4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4fa:	b004      	add	sp, #16
 800d4fc:	4770      	bx	lr

0800d4fe <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800d4fe:	b480      	push	{r7}
 800d500:	b083      	sub	sp, #12
 800d502:	af00      	add	r7, sp, #0
 800d504:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800d50c:	4618      	mov	r0, r3
 800d50e:	370c      	adds	r7, #12
 800d510:	46bd      	mov	sp, r7
 800d512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d516:	4770      	bx	lr

0800d518 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800d518:	b480      	push	{r7}
 800d51a:	b083      	sub	sp, #12
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	6078      	str	r0, [r7, #4]
 800d520:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800d522:	683b      	ldr	r3, [r7, #0]
 800d524:	681a      	ldr	r2, [r3, #0]
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d52c:	2300      	movs	r3, #0
}
 800d52e:	4618      	mov	r0, r3
 800d530:	370c      	adds	r7, #12
 800d532:	46bd      	mov	sp, r7
 800d534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d538:	4770      	bx	lr

0800d53a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800d53a:	b580      	push	{r7, lr}
 800d53c:	b082      	sub	sp, #8
 800d53e:	af00      	add	r7, sp, #0
 800d540:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	2203      	movs	r2, #3
 800d546:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800d548:	2002      	movs	r0, #2
 800d54a:	f7f9 fbc5 	bl	8006cd8 <HAL_Delay>
  
  return HAL_OK;
 800d54e:	2300      	movs	r3, #0
}
 800d550:	4618      	mov	r0, r3
 800d552:	3708      	adds	r7, #8
 800d554:	46bd      	mov	sp, r7
 800d556:	bd80      	pop	{r7, pc}

0800d558 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800d558:	b480      	push	{r7}
 800d55a:	b083      	sub	sp, #12
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	f003 0303 	and.w	r3, r3, #3
}
 800d568:	4618      	mov	r0, r3
 800d56a:	370c      	adds	r7, #12
 800d56c:	46bd      	mov	sp, r7
 800d56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d572:	4770      	bx	lr

0800d574 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800d574:	b480      	push	{r7}
 800d576:	b085      	sub	sp, #20
 800d578:	af00      	add	r7, sp, #0
 800d57a:	6078      	str	r0, [r7, #4]
 800d57c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d57e:	2300      	movs	r3, #0
 800d580:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800d582:	683b      	ldr	r3, [r7, #0]
 800d584:	681a      	ldr	r2, [r3, #0]
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d58a:	683b      	ldr	r3, [r7, #0]
 800d58c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800d58e:	683b      	ldr	r3, [r7, #0]
 800d590:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d592:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800d594:	683b      	ldr	r3, [r7, #0]
 800d596:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800d598:	431a      	orrs	r2, r3
                       Command->CPSM);
 800d59a:	683b      	ldr	r3, [r7, #0]
 800d59c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800d59e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d5a0:	68fa      	ldr	r2, [r7, #12]
 800d5a2:	4313      	orrs	r3, r2
 800d5a4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	68db      	ldr	r3, [r3, #12]
 800d5aa:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800d5ae:	f023 030f 	bic.w	r3, r3, #15
 800d5b2:	68fa      	ldr	r2, [r7, #12]
 800d5b4:	431a      	orrs	r2, r3
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800d5ba:	2300      	movs	r3, #0
}
 800d5bc:	4618      	mov	r0, r3
 800d5be:	3714      	adds	r7, #20
 800d5c0:	46bd      	mov	sp, r7
 800d5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c6:	4770      	bx	lr

0800d5c8 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800d5c8:	b480      	push	{r7}
 800d5ca:	b083      	sub	sp, #12
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	691b      	ldr	r3, [r3, #16]
 800d5d4:	b2db      	uxtb	r3, r3
}
 800d5d6:	4618      	mov	r0, r3
 800d5d8:	370c      	adds	r7, #12
 800d5da:	46bd      	mov	sp, r7
 800d5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e0:	4770      	bx	lr

0800d5e2 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800d5e2:	b480      	push	{r7}
 800d5e4:	b085      	sub	sp, #20
 800d5e6:	af00      	add	r7, sp, #0
 800d5e8:	6078      	str	r0, [r7, #4]
 800d5ea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	3314      	adds	r3, #20
 800d5f0:	461a      	mov	r2, r3
 800d5f2:	683b      	ldr	r3, [r7, #0]
 800d5f4:	4413      	add	r3, r2
 800d5f6:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	681b      	ldr	r3, [r3, #0]
}  
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	3714      	adds	r7, #20
 800d600:	46bd      	mov	sp, r7
 800d602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d606:	4770      	bx	lr

0800d608 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800d608:	b480      	push	{r7}
 800d60a:	b085      	sub	sp, #20
 800d60c:	af00      	add	r7, sp, #0
 800d60e:	6078      	str	r0, [r7, #4]
 800d610:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d612:	2300      	movs	r3, #0
 800d614:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800d616:	683b      	ldr	r3, [r7, #0]
 800d618:	681a      	ldr	r2, [r3, #0]
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800d61e:	683b      	ldr	r3, [r7, #0]
 800d620:	685a      	ldr	r2, [r3, #4]
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d626:	683b      	ldr	r3, [r7, #0]
 800d628:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800d62a:	683b      	ldr	r3, [r7, #0]
 800d62c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d62e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800d630:	683b      	ldr	r3, [r7, #0]
 800d632:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800d634:	431a      	orrs	r2, r3
                       Data->DPSM);
 800d636:	683b      	ldr	r3, [r7, #0]
 800d638:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800d63a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d63c:	68fa      	ldr	r2, [r7, #12]
 800d63e:	4313      	orrs	r3, r2
 800d640:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d646:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	431a      	orrs	r2, r3
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800d652:	2300      	movs	r3, #0

}
 800d654:	4618      	mov	r0, r3
 800d656:	3714      	adds	r7, #20
 800d658:	46bd      	mov	sp, r7
 800d65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d65e:	4770      	bx	lr

0800d660 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800d660:	b580      	push	{r7, lr}
 800d662:	b088      	sub	sp, #32
 800d664:	af00      	add	r7, sp, #0
 800d666:	6078      	str	r0, [r7, #4]
 800d668:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800d66a:	683b      	ldr	r3, [r7, #0]
 800d66c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800d66e:	2310      	movs	r3, #16
 800d670:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d672:	2340      	movs	r3, #64	; 0x40
 800d674:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d676:	2300      	movs	r3, #0
 800d678:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d67a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d67e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d680:	f107 0308 	add.w	r3, r7, #8
 800d684:	4619      	mov	r1, r3
 800d686:	6878      	ldr	r0, [r7, #4]
 800d688:	f7ff ff74 	bl	800d574 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800d68c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d690:	2110      	movs	r1, #16
 800d692:	6878      	ldr	r0, [r7, #4]
 800d694:	f000 fa40 	bl	800db18 <SDMMC_GetCmdResp1>
 800d698:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d69a:	69fb      	ldr	r3, [r7, #28]
}
 800d69c:	4618      	mov	r0, r3
 800d69e:	3720      	adds	r7, #32
 800d6a0:	46bd      	mov	sp, r7
 800d6a2:	bd80      	pop	{r7, pc}

0800d6a4 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800d6a4:	b580      	push	{r7, lr}
 800d6a6:	b088      	sub	sp, #32
 800d6a8:	af00      	add	r7, sp, #0
 800d6aa:	6078      	str	r0, [r7, #4]
 800d6ac:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d6ae:	683b      	ldr	r3, [r7, #0]
 800d6b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800d6b2:	2311      	movs	r3, #17
 800d6b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d6b6:	2340      	movs	r3, #64	; 0x40
 800d6b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d6ba:	2300      	movs	r3, #0
 800d6bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d6be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d6c2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d6c4:	f107 0308 	add.w	r3, r7, #8
 800d6c8:	4619      	mov	r1, r3
 800d6ca:	6878      	ldr	r0, [r7, #4]
 800d6cc:	f7ff ff52 	bl	800d574 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800d6d0:	f241 3288 	movw	r2, #5000	; 0x1388
 800d6d4:	2111      	movs	r1, #17
 800d6d6:	6878      	ldr	r0, [r7, #4]
 800d6d8:	f000 fa1e 	bl	800db18 <SDMMC_GetCmdResp1>
 800d6dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d6de:	69fb      	ldr	r3, [r7, #28]
}
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	3720      	adds	r7, #32
 800d6e4:	46bd      	mov	sp, r7
 800d6e6:	bd80      	pop	{r7, pc}

0800d6e8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800d6e8:	b580      	push	{r7, lr}
 800d6ea:	b088      	sub	sp, #32
 800d6ec:	af00      	add	r7, sp, #0
 800d6ee:	6078      	str	r0, [r7, #4]
 800d6f0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d6f2:	683b      	ldr	r3, [r7, #0]
 800d6f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800d6f6:	2312      	movs	r3, #18
 800d6f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d6fa:	2340      	movs	r3, #64	; 0x40
 800d6fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d6fe:	2300      	movs	r3, #0
 800d700:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d702:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d706:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d708:	f107 0308 	add.w	r3, r7, #8
 800d70c:	4619      	mov	r1, r3
 800d70e:	6878      	ldr	r0, [r7, #4]
 800d710:	f7ff ff30 	bl	800d574 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800d714:	f241 3288 	movw	r2, #5000	; 0x1388
 800d718:	2112      	movs	r1, #18
 800d71a:	6878      	ldr	r0, [r7, #4]
 800d71c:	f000 f9fc 	bl	800db18 <SDMMC_GetCmdResp1>
 800d720:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d722:	69fb      	ldr	r3, [r7, #28]
}
 800d724:	4618      	mov	r0, r3
 800d726:	3720      	adds	r7, #32
 800d728:	46bd      	mov	sp, r7
 800d72a:	bd80      	pop	{r7, pc}

0800d72c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800d72c:	b580      	push	{r7, lr}
 800d72e:	b088      	sub	sp, #32
 800d730:	af00      	add	r7, sp, #0
 800d732:	6078      	str	r0, [r7, #4]
 800d734:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d736:	683b      	ldr	r3, [r7, #0]
 800d738:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800d73a:	2318      	movs	r3, #24
 800d73c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d73e:	2340      	movs	r3, #64	; 0x40
 800d740:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d742:	2300      	movs	r3, #0
 800d744:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d746:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d74a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d74c:	f107 0308 	add.w	r3, r7, #8
 800d750:	4619      	mov	r1, r3
 800d752:	6878      	ldr	r0, [r7, #4]
 800d754:	f7ff ff0e 	bl	800d574 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800d758:	f241 3288 	movw	r2, #5000	; 0x1388
 800d75c:	2118      	movs	r1, #24
 800d75e:	6878      	ldr	r0, [r7, #4]
 800d760:	f000 f9da 	bl	800db18 <SDMMC_GetCmdResp1>
 800d764:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d766:	69fb      	ldr	r3, [r7, #28]
}
 800d768:	4618      	mov	r0, r3
 800d76a:	3720      	adds	r7, #32
 800d76c:	46bd      	mov	sp, r7
 800d76e:	bd80      	pop	{r7, pc}

0800d770 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800d770:	b580      	push	{r7, lr}
 800d772:	b088      	sub	sp, #32
 800d774:	af00      	add	r7, sp, #0
 800d776:	6078      	str	r0, [r7, #4]
 800d778:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d77a:	683b      	ldr	r3, [r7, #0]
 800d77c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800d77e:	2319      	movs	r3, #25
 800d780:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d782:	2340      	movs	r3, #64	; 0x40
 800d784:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d786:	2300      	movs	r3, #0
 800d788:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d78a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d78e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d790:	f107 0308 	add.w	r3, r7, #8
 800d794:	4619      	mov	r1, r3
 800d796:	6878      	ldr	r0, [r7, #4]
 800d798:	f7ff feec 	bl	800d574 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800d79c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d7a0:	2119      	movs	r1, #25
 800d7a2:	6878      	ldr	r0, [r7, #4]
 800d7a4:	f000 f9b8 	bl	800db18 <SDMMC_GetCmdResp1>
 800d7a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d7aa:	69fb      	ldr	r3, [r7, #28]
}
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	3720      	adds	r7, #32
 800d7b0:	46bd      	mov	sp, r7
 800d7b2:	bd80      	pop	{r7, pc}

0800d7b4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800d7b4:	b580      	push	{r7, lr}
 800d7b6:	b088      	sub	sp, #32
 800d7b8:	af00      	add	r7, sp, #0
 800d7ba:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800d7bc:	2300      	movs	r3, #0
 800d7be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800d7c0:	230c      	movs	r3, #12
 800d7c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d7c4:	2340      	movs	r3, #64	; 0x40
 800d7c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d7cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d7d0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d7d2:	f107 0308 	add.w	r3, r7, #8
 800d7d6:	4619      	mov	r1, r3
 800d7d8:	6878      	ldr	r0, [r7, #4]
 800d7da:	f7ff fecb 	bl	800d574 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800d7de:	4a05      	ldr	r2, [pc, #20]	; (800d7f4 <SDMMC_CmdStopTransfer+0x40>)
 800d7e0:	210c      	movs	r1, #12
 800d7e2:	6878      	ldr	r0, [r7, #4]
 800d7e4:	f000 f998 	bl	800db18 <SDMMC_GetCmdResp1>
 800d7e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d7ea:	69fb      	ldr	r3, [r7, #28]
}
 800d7ec:	4618      	mov	r0, r3
 800d7ee:	3720      	adds	r7, #32
 800d7f0:	46bd      	mov	sp, r7
 800d7f2:	bd80      	pop	{r7, pc}
 800d7f4:	05f5e100 	.word	0x05f5e100

0800d7f8 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800d7f8:	b580      	push	{r7, lr}
 800d7fa:	b08a      	sub	sp, #40	; 0x28
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	60f8      	str	r0, [r7, #12]
 800d800:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800d804:	683b      	ldr	r3, [r7, #0]
 800d806:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800d808:	2307      	movs	r3, #7
 800d80a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d80c:	2340      	movs	r3, #64	; 0x40
 800d80e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d810:	2300      	movs	r3, #0
 800d812:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d814:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d818:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d81a:	f107 0310 	add.w	r3, r7, #16
 800d81e:	4619      	mov	r1, r3
 800d820:	68f8      	ldr	r0, [r7, #12]
 800d822:	f7ff fea7 	bl	800d574 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800d826:	f241 3288 	movw	r2, #5000	; 0x1388
 800d82a:	2107      	movs	r1, #7
 800d82c:	68f8      	ldr	r0, [r7, #12]
 800d82e:	f000 f973 	bl	800db18 <SDMMC_GetCmdResp1>
 800d832:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800d834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d836:	4618      	mov	r0, r3
 800d838:	3728      	adds	r7, #40	; 0x28
 800d83a:	46bd      	mov	sp, r7
 800d83c:	bd80      	pop	{r7, pc}

0800d83e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800d83e:	b580      	push	{r7, lr}
 800d840:	b088      	sub	sp, #32
 800d842:	af00      	add	r7, sp, #0
 800d844:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800d846:	2300      	movs	r3, #0
 800d848:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800d84a:	2300      	movs	r3, #0
 800d84c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800d84e:	2300      	movs	r3, #0
 800d850:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d852:	2300      	movs	r3, #0
 800d854:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d856:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d85a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d85c:	f107 0308 	add.w	r3, r7, #8
 800d860:	4619      	mov	r1, r3
 800d862:	6878      	ldr	r0, [r7, #4]
 800d864:	f7ff fe86 	bl	800d574 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800d868:	6878      	ldr	r0, [r7, #4]
 800d86a:	f000 f92d 	bl	800dac8 <SDMMC_GetCmdError>
 800d86e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d870:	69fb      	ldr	r3, [r7, #28]
}
 800d872:	4618      	mov	r0, r3
 800d874:	3720      	adds	r7, #32
 800d876:	46bd      	mov	sp, r7
 800d878:	bd80      	pop	{r7, pc}

0800d87a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800d87a:	b580      	push	{r7, lr}
 800d87c:	b088      	sub	sp, #32
 800d87e:	af00      	add	r7, sp, #0
 800d880:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800d882:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800d886:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800d888:	2308      	movs	r3, #8
 800d88a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d88c:	2340      	movs	r3, #64	; 0x40
 800d88e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d890:	2300      	movs	r3, #0
 800d892:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d894:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d898:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d89a:	f107 0308 	add.w	r3, r7, #8
 800d89e:	4619      	mov	r1, r3
 800d8a0:	6878      	ldr	r0, [r7, #4]
 800d8a2:	f7ff fe67 	bl	800d574 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800d8a6:	6878      	ldr	r0, [r7, #4]
 800d8a8:	f000 fb16 	bl	800ded8 <SDMMC_GetCmdResp7>
 800d8ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d8ae:	69fb      	ldr	r3, [r7, #28]
}
 800d8b0:	4618      	mov	r0, r3
 800d8b2:	3720      	adds	r7, #32
 800d8b4:	46bd      	mov	sp, r7
 800d8b6:	bd80      	pop	{r7, pc}

0800d8b8 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d8b8:	b580      	push	{r7, lr}
 800d8ba:	b088      	sub	sp, #32
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	6078      	str	r0, [r7, #4]
 800d8c0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800d8c2:	683b      	ldr	r3, [r7, #0]
 800d8c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800d8c6:	2337      	movs	r3, #55	; 0x37
 800d8c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d8ca:	2340      	movs	r3, #64	; 0x40
 800d8cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d8ce:	2300      	movs	r3, #0
 800d8d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d8d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d8d6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d8d8:	f107 0308 	add.w	r3, r7, #8
 800d8dc:	4619      	mov	r1, r3
 800d8de:	6878      	ldr	r0, [r7, #4]
 800d8e0:	f7ff fe48 	bl	800d574 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800d8e4:	f241 3288 	movw	r2, #5000	; 0x1388
 800d8e8:	2137      	movs	r1, #55	; 0x37
 800d8ea:	6878      	ldr	r0, [r7, #4]
 800d8ec:	f000 f914 	bl	800db18 <SDMMC_GetCmdResp1>
 800d8f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d8f2:	69fb      	ldr	r3, [r7, #28]
}
 800d8f4:	4618      	mov	r0, r3
 800d8f6:	3720      	adds	r7, #32
 800d8f8:	46bd      	mov	sp, r7
 800d8fa:	bd80      	pop	{r7, pc}

0800d8fc <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d8fc:	b580      	push	{r7, lr}
 800d8fe:	b088      	sub	sp, #32
 800d900:	af00      	add	r7, sp, #0
 800d902:	6078      	str	r0, [r7, #4]
 800d904:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800d906:	683b      	ldr	r3, [r7, #0]
 800d908:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d90c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d910:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800d912:	2329      	movs	r3, #41	; 0x29
 800d914:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d916:	2340      	movs	r3, #64	; 0x40
 800d918:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d91a:	2300      	movs	r3, #0
 800d91c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d91e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d922:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d924:	f107 0308 	add.w	r3, r7, #8
 800d928:	4619      	mov	r1, r3
 800d92a:	6878      	ldr	r0, [r7, #4]
 800d92c:	f7ff fe22 	bl	800d574 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800d930:	6878      	ldr	r0, [r7, #4]
 800d932:	f000 fa23 	bl	800dd7c <SDMMC_GetCmdResp3>
 800d936:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d938:	69fb      	ldr	r3, [r7, #28]
}
 800d93a:	4618      	mov	r0, r3
 800d93c:	3720      	adds	r7, #32
 800d93e:	46bd      	mov	sp, r7
 800d940:	bd80      	pop	{r7, pc}

0800d942 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800d942:	b580      	push	{r7, lr}
 800d944:	b088      	sub	sp, #32
 800d946:	af00      	add	r7, sp, #0
 800d948:	6078      	str	r0, [r7, #4]
 800d94a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800d94c:	683b      	ldr	r3, [r7, #0]
 800d94e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800d950:	2306      	movs	r3, #6
 800d952:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d954:	2340      	movs	r3, #64	; 0x40
 800d956:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d958:	2300      	movs	r3, #0
 800d95a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d95c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d960:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d962:	f107 0308 	add.w	r3, r7, #8
 800d966:	4619      	mov	r1, r3
 800d968:	6878      	ldr	r0, [r7, #4]
 800d96a:	f7ff fe03 	bl	800d574 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800d96e:	f241 3288 	movw	r2, #5000	; 0x1388
 800d972:	2106      	movs	r1, #6
 800d974:	6878      	ldr	r0, [r7, #4]
 800d976:	f000 f8cf 	bl	800db18 <SDMMC_GetCmdResp1>
 800d97a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d97c:	69fb      	ldr	r3, [r7, #28]
}
 800d97e:	4618      	mov	r0, r3
 800d980:	3720      	adds	r7, #32
 800d982:	46bd      	mov	sp, r7
 800d984:	bd80      	pop	{r7, pc}

0800d986 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800d986:	b580      	push	{r7, lr}
 800d988:	b088      	sub	sp, #32
 800d98a:	af00      	add	r7, sp, #0
 800d98c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800d98e:	2300      	movs	r3, #0
 800d990:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800d992:	2333      	movs	r3, #51	; 0x33
 800d994:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d996:	2340      	movs	r3, #64	; 0x40
 800d998:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d99a:	2300      	movs	r3, #0
 800d99c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d99e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d9a2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d9a4:	f107 0308 	add.w	r3, r7, #8
 800d9a8:	4619      	mov	r1, r3
 800d9aa:	6878      	ldr	r0, [r7, #4]
 800d9ac:	f7ff fde2 	bl	800d574 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800d9b0:	f241 3288 	movw	r2, #5000	; 0x1388
 800d9b4:	2133      	movs	r1, #51	; 0x33
 800d9b6:	6878      	ldr	r0, [r7, #4]
 800d9b8:	f000 f8ae 	bl	800db18 <SDMMC_GetCmdResp1>
 800d9bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d9be:	69fb      	ldr	r3, [r7, #28]
}
 800d9c0:	4618      	mov	r0, r3
 800d9c2:	3720      	adds	r7, #32
 800d9c4:	46bd      	mov	sp, r7
 800d9c6:	bd80      	pop	{r7, pc}

0800d9c8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800d9c8:	b580      	push	{r7, lr}
 800d9ca:	b088      	sub	sp, #32
 800d9cc:	af00      	add	r7, sp, #0
 800d9ce:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800d9d0:	2300      	movs	r3, #0
 800d9d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800d9d4:	2302      	movs	r3, #2
 800d9d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800d9d8:	23c0      	movs	r3, #192	; 0xc0
 800d9da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d9dc:	2300      	movs	r3, #0
 800d9de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d9e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d9e4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d9e6:	f107 0308 	add.w	r3, r7, #8
 800d9ea:	4619      	mov	r1, r3
 800d9ec:	6878      	ldr	r0, [r7, #4]
 800d9ee:	f7ff fdc1 	bl	800d574 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800d9f2:	6878      	ldr	r0, [r7, #4]
 800d9f4:	f000 f97c 	bl	800dcf0 <SDMMC_GetCmdResp2>
 800d9f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d9fa:	69fb      	ldr	r3, [r7, #28]
}
 800d9fc:	4618      	mov	r0, r3
 800d9fe:	3720      	adds	r7, #32
 800da00:	46bd      	mov	sp, r7
 800da02:	bd80      	pop	{r7, pc}

0800da04 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800da04:	b580      	push	{r7, lr}
 800da06:	b088      	sub	sp, #32
 800da08:	af00      	add	r7, sp, #0
 800da0a:	6078      	str	r0, [r7, #4]
 800da0c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800da0e:	683b      	ldr	r3, [r7, #0]
 800da10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800da12:	2309      	movs	r3, #9
 800da14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800da16:	23c0      	movs	r3, #192	; 0xc0
 800da18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800da1a:	2300      	movs	r3, #0
 800da1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800da1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800da22:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800da24:	f107 0308 	add.w	r3, r7, #8
 800da28:	4619      	mov	r1, r3
 800da2a:	6878      	ldr	r0, [r7, #4]
 800da2c:	f7ff fda2 	bl	800d574 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800da30:	6878      	ldr	r0, [r7, #4]
 800da32:	f000 f95d 	bl	800dcf0 <SDMMC_GetCmdResp2>
 800da36:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800da38:	69fb      	ldr	r3, [r7, #28]
}
 800da3a:	4618      	mov	r0, r3
 800da3c:	3720      	adds	r7, #32
 800da3e:	46bd      	mov	sp, r7
 800da40:	bd80      	pop	{r7, pc}

0800da42 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800da42:	b580      	push	{r7, lr}
 800da44:	b088      	sub	sp, #32
 800da46:	af00      	add	r7, sp, #0
 800da48:	6078      	str	r0, [r7, #4]
 800da4a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800da4c:	2300      	movs	r3, #0
 800da4e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800da50:	2303      	movs	r3, #3
 800da52:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800da54:	2340      	movs	r3, #64	; 0x40
 800da56:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800da58:	2300      	movs	r3, #0
 800da5a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800da5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800da60:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800da62:	f107 0308 	add.w	r3, r7, #8
 800da66:	4619      	mov	r1, r3
 800da68:	6878      	ldr	r0, [r7, #4]
 800da6a:	f7ff fd83 	bl	800d574 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800da6e:	683a      	ldr	r2, [r7, #0]
 800da70:	2103      	movs	r1, #3
 800da72:	6878      	ldr	r0, [r7, #4]
 800da74:	f000 f9bc 	bl	800ddf0 <SDMMC_GetCmdResp6>
 800da78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800da7a:	69fb      	ldr	r3, [r7, #28]
}
 800da7c:	4618      	mov	r0, r3
 800da7e:	3720      	adds	r7, #32
 800da80:	46bd      	mov	sp, r7
 800da82:	bd80      	pop	{r7, pc}

0800da84 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800da84:	b580      	push	{r7, lr}
 800da86:	b088      	sub	sp, #32
 800da88:	af00      	add	r7, sp, #0
 800da8a:	6078      	str	r0, [r7, #4]
 800da8c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800da8e:	683b      	ldr	r3, [r7, #0]
 800da90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800da92:	230d      	movs	r3, #13
 800da94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800da96:	2340      	movs	r3, #64	; 0x40
 800da98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800da9a:	2300      	movs	r3, #0
 800da9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800da9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800daa2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800daa4:	f107 0308 	add.w	r3, r7, #8
 800daa8:	4619      	mov	r1, r3
 800daaa:	6878      	ldr	r0, [r7, #4]
 800daac:	f7ff fd62 	bl	800d574 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800dab0:	f241 3288 	movw	r2, #5000	; 0x1388
 800dab4:	210d      	movs	r1, #13
 800dab6:	6878      	ldr	r0, [r7, #4]
 800dab8:	f000 f82e 	bl	800db18 <SDMMC_GetCmdResp1>
 800dabc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dabe:	69fb      	ldr	r3, [r7, #28]
}
 800dac0:	4618      	mov	r0, r3
 800dac2:	3720      	adds	r7, #32
 800dac4:	46bd      	mov	sp, r7
 800dac6:	bd80      	pop	{r7, pc}

0800dac8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800dac8:	b490      	push	{r4, r7}
 800daca:	b082      	sub	sp, #8
 800dacc:	af00      	add	r7, sp, #0
 800dace:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dad0:	4b0f      	ldr	r3, [pc, #60]	; (800db10 <SDMMC_GetCmdError+0x48>)
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	4a0f      	ldr	r2, [pc, #60]	; (800db14 <SDMMC_GetCmdError+0x4c>)
 800dad6:	fba2 2303 	umull	r2, r3, r2, r3
 800dada:	0a5b      	lsrs	r3, r3, #9
 800dadc:	f241 3288 	movw	r2, #5000	; 0x1388
 800dae0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800dae4:	4623      	mov	r3, r4
 800dae6:	1e5c      	subs	r4, r3, #1
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d102      	bne.n	800daf2 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800daec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800daf0:	e009      	b.n	800db06 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800daf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d0f2      	beq.n	800dae4 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	22c5      	movs	r2, #197	; 0xc5
 800db02:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800db04:	2300      	movs	r3, #0
}
 800db06:	4618      	mov	r0, r3
 800db08:	3708      	adds	r7, #8
 800db0a:	46bd      	mov	sp, r7
 800db0c:	bc90      	pop	{r4, r7}
 800db0e:	4770      	bx	lr
 800db10:	20000000 	.word	0x20000000
 800db14:	10624dd3 	.word	0x10624dd3

0800db18 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800db18:	b590      	push	{r4, r7, lr}
 800db1a:	b087      	sub	sp, #28
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	60f8      	str	r0, [r7, #12]
 800db20:	460b      	mov	r3, r1
 800db22:	607a      	str	r2, [r7, #4]
 800db24:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800db26:	4b6f      	ldr	r3, [pc, #444]	; (800dce4 <SDMMC_GetCmdResp1+0x1cc>)
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	4a6f      	ldr	r2, [pc, #444]	; (800dce8 <SDMMC_GetCmdResp1+0x1d0>)
 800db2c:	fba2 2303 	umull	r2, r3, r2, r3
 800db30:	0a5b      	lsrs	r3, r3, #9
 800db32:	687a      	ldr	r2, [r7, #4]
 800db34:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800db38:	4623      	mov	r3, r4
 800db3a:	1e5c      	subs	r4, r3, #1
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d102      	bne.n	800db46 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800db40:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800db44:	e0c9      	b.n	800dcda <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db4a:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800db4c:	697b      	ldr	r3, [r7, #20]
 800db4e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800db52:	2b00      	cmp	r3, #0
 800db54:	d0f0      	beq.n	800db38 <SDMMC_GetCmdResp1+0x20>
 800db56:	697b      	ldr	r3, [r7, #20]
 800db58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d1eb      	bne.n	800db38 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db64:	f003 0304 	and.w	r3, r3, #4
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d004      	beq.n	800db76 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	2204      	movs	r2, #4
 800db70:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800db72:	2304      	movs	r3, #4
 800db74:	e0b1      	b.n	800dcda <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db7a:	f003 0301 	and.w	r3, r3, #1
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d004      	beq.n	800db8c <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	2201      	movs	r2, #1
 800db86:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800db88:	2301      	movs	r3, #1
 800db8a:	e0a6      	b.n	800dcda <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	22c5      	movs	r2, #197	; 0xc5
 800db90:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800db92:	68f8      	ldr	r0, [r7, #12]
 800db94:	f7ff fd18 	bl	800d5c8 <SDIO_GetCommandResponse>
 800db98:	4603      	mov	r3, r0
 800db9a:	461a      	mov	r2, r3
 800db9c:	7afb      	ldrb	r3, [r7, #11]
 800db9e:	4293      	cmp	r3, r2
 800dba0:	d001      	beq.n	800dba6 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dba2:	2301      	movs	r3, #1
 800dba4:	e099      	b.n	800dcda <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800dba6:	2100      	movs	r1, #0
 800dba8:	68f8      	ldr	r0, [r7, #12]
 800dbaa:	f7ff fd1a 	bl	800d5e2 <SDIO_GetResponse>
 800dbae:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800dbb0:	693a      	ldr	r2, [r7, #16]
 800dbb2:	4b4e      	ldr	r3, [pc, #312]	; (800dcec <SDMMC_GetCmdResp1+0x1d4>)
 800dbb4:	4013      	ands	r3, r2
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d101      	bne.n	800dbbe <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800dbba:	2300      	movs	r3, #0
 800dbbc:	e08d      	b.n	800dcda <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800dbbe:	693b      	ldr	r3, [r7, #16]
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	da02      	bge.n	800dbca <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800dbc4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800dbc8:	e087      	b.n	800dcda <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800dbca:	693b      	ldr	r3, [r7, #16]
 800dbcc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d001      	beq.n	800dbd8 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800dbd4:	2340      	movs	r3, #64	; 0x40
 800dbd6:	e080      	b.n	800dcda <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800dbd8:	693b      	ldr	r3, [r7, #16]
 800dbda:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d001      	beq.n	800dbe6 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800dbe2:	2380      	movs	r3, #128	; 0x80
 800dbe4:	e079      	b.n	800dcda <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800dbe6:	693b      	ldr	r3, [r7, #16]
 800dbe8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d002      	beq.n	800dbf6 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800dbf0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dbf4:	e071      	b.n	800dcda <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800dbf6:	693b      	ldr	r3, [r7, #16]
 800dbf8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d002      	beq.n	800dc06 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800dc00:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dc04:	e069      	b.n	800dcda <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800dc06:	693b      	ldr	r3, [r7, #16]
 800dc08:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d002      	beq.n	800dc16 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800dc10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dc14:	e061      	b.n	800dcda <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800dc16:	693b      	ldr	r3, [r7, #16]
 800dc18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d002      	beq.n	800dc26 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800dc20:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800dc24:	e059      	b.n	800dcda <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800dc26:	693b      	ldr	r3, [r7, #16]
 800dc28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d002      	beq.n	800dc36 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800dc30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dc34:	e051      	b.n	800dcda <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800dc36:	693b      	ldr	r3, [r7, #16]
 800dc38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d002      	beq.n	800dc46 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800dc40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800dc44:	e049      	b.n	800dcda <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800dc46:	693b      	ldr	r3, [r7, #16]
 800dc48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d002      	beq.n	800dc56 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800dc50:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800dc54:	e041      	b.n	800dcda <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800dc56:	693b      	ldr	r3, [r7, #16]
 800dc58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d002      	beq.n	800dc66 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800dc60:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dc64:	e039      	b.n	800dcda <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800dc66:	693b      	ldr	r3, [r7, #16]
 800dc68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d002      	beq.n	800dc76 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800dc70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800dc74:	e031      	b.n	800dcda <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800dc76:	693b      	ldr	r3, [r7, #16]
 800dc78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d002      	beq.n	800dc86 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800dc80:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800dc84:	e029      	b.n	800dcda <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800dc86:	693b      	ldr	r3, [r7, #16]
 800dc88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d002      	beq.n	800dc96 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800dc90:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800dc94:	e021      	b.n	800dcda <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800dc96:	693b      	ldr	r3, [r7, #16]
 800dc98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d002      	beq.n	800dca6 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800dca0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800dca4:	e019      	b.n	800dcda <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800dca6:	693b      	ldr	r3, [r7, #16]
 800dca8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d002      	beq.n	800dcb6 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800dcb0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800dcb4:	e011      	b.n	800dcda <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800dcb6:	693b      	ldr	r3, [r7, #16]
 800dcb8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d002      	beq.n	800dcc6 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800dcc0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800dcc4:	e009      	b.n	800dcda <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800dcc6:	693b      	ldr	r3, [r7, #16]
 800dcc8:	f003 0308 	and.w	r3, r3, #8
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d002      	beq.n	800dcd6 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800dcd0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800dcd4:	e001      	b.n	800dcda <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800dcd6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800dcda:	4618      	mov	r0, r3
 800dcdc:	371c      	adds	r7, #28
 800dcde:	46bd      	mov	sp, r7
 800dce0:	bd90      	pop	{r4, r7, pc}
 800dce2:	bf00      	nop
 800dce4:	20000000 	.word	0x20000000
 800dce8:	10624dd3 	.word	0x10624dd3
 800dcec:	fdffe008 	.word	0xfdffe008

0800dcf0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800dcf0:	b490      	push	{r4, r7}
 800dcf2:	b084      	sub	sp, #16
 800dcf4:	af00      	add	r7, sp, #0
 800dcf6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dcf8:	4b1e      	ldr	r3, [pc, #120]	; (800dd74 <SDMMC_GetCmdResp2+0x84>)
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	4a1e      	ldr	r2, [pc, #120]	; (800dd78 <SDMMC_GetCmdResp2+0x88>)
 800dcfe:	fba2 2303 	umull	r2, r3, r2, r3
 800dd02:	0a5b      	lsrs	r3, r3, #9
 800dd04:	f241 3288 	movw	r2, #5000	; 0x1388
 800dd08:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800dd0c:	4623      	mov	r3, r4
 800dd0e:	1e5c      	subs	r4, r3, #1
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d102      	bne.n	800dd1a <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dd14:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dd18:	e026      	b.n	800dd68 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd1e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d0f0      	beq.n	800dd0c <SDMMC_GetCmdResp2+0x1c>
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d1eb      	bne.n	800dd0c <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd38:	f003 0304 	and.w	r3, r3, #4
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d004      	beq.n	800dd4a <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	2204      	movs	r2, #4
 800dd44:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dd46:	2304      	movs	r3, #4
 800dd48:	e00e      	b.n	800dd68 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd4e:	f003 0301 	and.w	r3, r3, #1
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d004      	beq.n	800dd60 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	2201      	movs	r2, #1
 800dd5a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dd5c:	2301      	movs	r3, #1
 800dd5e:	e003      	b.n	800dd68 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	22c5      	movs	r2, #197	; 0xc5
 800dd64:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800dd66:	2300      	movs	r3, #0
}
 800dd68:	4618      	mov	r0, r3
 800dd6a:	3710      	adds	r7, #16
 800dd6c:	46bd      	mov	sp, r7
 800dd6e:	bc90      	pop	{r4, r7}
 800dd70:	4770      	bx	lr
 800dd72:	bf00      	nop
 800dd74:	20000000 	.word	0x20000000
 800dd78:	10624dd3 	.word	0x10624dd3

0800dd7c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800dd7c:	b490      	push	{r4, r7}
 800dd7e:	b084      	sub	sp, #16
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dd84:	4b18      	ldr	r3, [pc, #96]	; (800dde8 <SDMMC_GetCmdResp3+0x6c>)
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	4a18      	ldr	r2, [pc, #96]	; (800ddec <SDMMC_GetCmdResp3+0x70>)
 800dd8a:	fba2 2303 	umull	r2, r3, r2, r3
 800dd8e:	0a5b      	lsrs	r3, r3, #9
 800dd90:	f241 3288 	movw	r2, #5000	; 0x1388
 800dd94:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800dd98:	4623      	mov	r3, r4
 800dd9a:	1e5c      	subs	r4, r3, #1
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d102      	bne.n	800dda6 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dda0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dda4:	e01b      	b.n	800ddde <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ddaa:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d0f0      	beq.n	800dd98 <SDMMC_GetCmdResp3+0x1c>
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d1eb      	bne.n	800dd98 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ddc4:	f003 0304 	and.w	r3, r3, #4
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d004      	beq.n	800ddd6 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	2204      	movs	r2, #4
 800ddd0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ddd2:	2304      	movs	r3, #4
 800ddd4:	e003      	b.n	800ddde <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	22c5      	movs	r2, #197	; 0xc5
 800ddda:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800dddc:	2300      	movs	r3, #0
}
 800ddde:	4618      	mov	r0, r3
 800dde0:	3710      	adds	r7, #16
 800dde2:	46bd      	mov	sp, r7
 800dde4:	bc90      	pop	{r4, r7}
 800dde6:	4770      	bx	lr
 800dde8:	20000000 	.word	0x20000000
 800ddec:	10624dd3 	.word	0x10624dd3

0800ddf0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800ddf0:	b590      	push	{r4, r7, lr}
 800ddf2:	b087      	sub	sp, #28
 800ddf4:	af00      	add	r7, sp, #0
 800ddf6:	60f8      	str	r0, [r7, #12]
 800ddf8:	460b      	mov	r3, r1
 800ddfa:	607a      	str	r2, [r7, #4]
 800ddfc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ddfe:	4b34      	ldr	r3, [pc, #208]	; (800ded0 <SDMMC_GetCmdResp6+0xe0>)
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	4a34      	ldr	r2, [pc, #208]	; (800ded4 <SDMMC_GetCmdResp6+0xe4>)
 800de04:	fba2 2303 	umull	r2, r3, r2, r3
 800de08:	0a5b      	lsrs	r3, r3, #9
 800de0a:	f241 3288 	movw	r2, #5000	; 0x1388
 800de0e:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800de12:	4623      	mov	r3, r4
 800de14:	1e5c      	subs	r4, r3, #1
 800de16:	2b00      	cmp	r3, #0
 800de18:	d102      	bne.n	800de20 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800de1a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800de1e:	e052      	b.n	800dec6 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de24:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800de26:	697b      	ldr	r3, [r7, #20]
 800de28:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d0f0      	beq.n	800de12 <SDMMC_GetCmdResp6+0x22>
 800de30:	697b      	ldr	r3, [r7, #20]
 800de32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800de36:	2b00      	cmp	r3, #0
 800de38:	d1eb      	bne.n	800de12 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de3e:	f003 0304 	and.w	r3, r3, #4
 800de42:	2b00      	cmp	r3, #0
 800de44:	d004      	beq.n	800de50 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	2204      	movs	r2, #4
 800de4a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800de4c:	2304      	movs	r3, #4
 800de4e:	e03a      	b.n	800dec6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de54:	f003 0301 	and.w	r3, r3, #1
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d004      	beq.n	800de66 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	2201      	movs	r2, #1
 800de60:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800de62:	2301      	movs	r3, #1
 800de64:	e02f      	b.n	800dec6 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800de66:	68f8      	ldr	r0, [r7, #12]
 800de68:	f7ff fbae 	bl	800d5c8 <SDIO_GetCommandResponse>
 800de6c:	4603      	mov	r3, r0
 800de6e:	461a      	mov	r2, r3
 800de70:	7afb      	ldrb	r3, [r7, #11]
 800de72:	4293      	cmp	r3, r2
 800de74:	d001      	beq.n	800de7a <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800de76:	2301      	movs	r3, #1
 800de78:	e025      	b.n	800dec6 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	22c5      	movs	r2, #197	; 0xc5
 800de7e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800de80:	2100      	movs	r1, #0
 800de82:	68f8      	ldr	r0, [r7, #12]
 800de84:	f7ff fbad 	bl	800d5e2 <SDIO_GetResponse>
 800de88:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800de8a:	693b      	ldr	r3, [r7, #16]
 800de8c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800de90:	2b00      	cmp	r3, #0
 800de92:	d106      	bne.n	800dea2 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800de94:	693b      	ldr	r3, [r7, #16]
 800de96:	0c1b      	lsrs	r3, r3, #16
 800de98:	b29a      	uxth	r2, r3
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800de9e:	2300      	movs	r3, #0
 800dea0:	e011      	b.n	800dec6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800dea2:	693b      	ldr	r3, [r7, #16]
 800dea4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d002      	beq.n	800deb2 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800deac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800deb0:	e009      	b.n	800dec6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800deb2:	693b      	ldr	r3, [r7, #16]
 800deb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d002      	beq.n	800dec2 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800debc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dec0:	e001      	b.n	800dec6 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800dec2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800dec6:	4618      	mov	r0, r3
 800dec8:	371c      	adds	r7, #28
 800deca:	46bd      	mov	sp, r7
 800decc:	bd90      	pop	{r4, r7, pc}
 800dece:	bf00      	nop
 800ded0:	20000000 	.word	0x20000000
 800ded4:	10624dd3 	.word	0x10624dd3

0800ded8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800ded8:	b490      	push	{r4, r7}
 800deda:	b084      	sub	sp, #16
 800dedc:	af00      	add	r7, sp, #0
 800dede:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dee0:	4b21      	ldr	r3, [pc, #132]	; (800df68 <SDMMC_GetCmdResp7+0x90>)
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	4a21      	ldr	r2, [pc, #132]	; (800df6c <SDMMC_GetCmdResp7+0x94>)
 800dee6:	fba2 2303 	umull	r2, r3, r2, r3
 800deea:	0a5b      	lsrs	r3, r3, #9
 800deec:	f241 3288 	movw	r2, #5000	; 0x1388
 800def0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800def4:	4623      	mov	r3, r4
 800def6:	1e5c      	subs	r4, r3, #1
 800def8:	2b00      	cmp	r3, #0
 800defa:	d102      	bne.n	800df02 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800defc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800df00:	e02c      	b.n	800df5c <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df06:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d0f0      	beq.n	800def4 <SDMMC_GetCmdResp7+0x1c>
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d1eb      	bne.n	800def4 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df20:	f003 0304 	and.w	r3, r3, #4
 800df24:	2b00      	cmp	r3, #0
 800df26:	d004      	beq.n	800df32 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	2204      	movs	r2, #4
 800df2c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800df2e:	2304      	movs	r3, #4
 800df30:	e014      	b.n	800df5c <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df36:	f003 0301 	and.w	r3, r3, #1
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d004      	beq.n	800df48 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	2201      	movs	r2, #1
 800df42:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800df44:	2301      	movs	r3, #1
 800df46:	e009      	b.n	800df5c <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df50:	2b00      	cmp	r3, #0
 800df52:	d002      	beq.n	800df5a <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	2240      	movs	r2, #64	; 0x40
 800df58:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800df5a:	2300      	movs	r3, #0
  
}
 800df5c:	4618      	mov	r0, r3
 800df5e:	3710      	adds	r7, #16
 800df60:	46bd      	mov	sp, r7
 800df62:	bc90      	pop	{r4, r7}
 800df64:	4770      	bx	lr
 800df66:	bf00      	nop
 800df68:	20000000 	.word	0x20000000
 800df6c:	10624dd3 	.word	0x10624dd3

0800df70 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800df70:	b580      	push	{r7, lr}
 800df72:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800df74:	4904      	ldr	r1, [pc, #16]	; (800df88 <MX_FATFS_Init+0x18>)
 800df76:	4805      	ldr	r0, [pc, #20]	; (800df8c <MX_FATFS_Init+0x1c>)
 800df78:	f003 fb9c 	bl	80116b4 <FATFS_LinkDriver>
 800df7c:	4603      	mov	r3, r0
 800df7e:	461a      	mov	r2, r3
 800df80:	4b03      	ldr	r3, [pc, #12]	; (800df90 <MX_FATFS_Init+0x20>)
 800df82:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800df84:	bf00      	nop
 800df86:	bd80      	pop	{r7, pc}
 800df88:	20039d50 	.word	0x20039d50
 800df8c:	08017ab8 	.word	0x08017ab8
 800df90:	20039d4c 	.word	0x20039d4c

0800df94 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800df94:	b580      	push	{r7, lr}
 800df96:	b082      	sub	sp, #8
 800df98:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800df9a:	2300      	movs	r3, #0
 800df9c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800df9e:	f000 f896 	bl	800e0ce <BSP_SD_IsDetected>
 800dfa2:	4603      	mov	r3, r0
 800dfa4:	2b01      	cmp	r3, #1
 800dfa6:	d001      	beq.n	800dfac <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800dfa8:	2301      	movs	r3, #1
 800dfaa:	e012      	b.n	800dfd2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800dfac:	480b      	ldr	r0, [pc, #44]	; (800dfdc <BSP_SD_Init+0x48>)
 800dfae:	f7fb ffa5 	bl	8009efc <HAL_SD_Init>
 800dfb2:	4603      	mov	r3, r0
 800dfb4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800dfb6:	79fb      	ldrb	r3, [r7, #7]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d109      	bne.n	800dfd0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800dfbc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800dfc0:	4806      	ldr	r0, [pc, #24]	; (800dfdc <BSP_SD_Init+0x48>)
 800dfc2:	f7fc fd4f 	bl	800aa64 <HAL_SD_ConfigWideBusOperation>
 800dfc6:	4603      	mov	r3, r0
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d001      	beq.n	800dfd0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800dfcc:	2301      	movs	r3, #1
 800dfce:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800dfd0:	79fb      	ldrb	r3, [r7, #7]
}
 800dfd2:	4618      	mov	r0, r3
 800dfd4:	3708      	adds	r7, #8
 800dfd6:	46bd      	mov	sp, r7
 800dfd8:	bd80      	pop	{r7, pc}
 800dfda:	bf00      	nop
 800dfdc:	20039b4c 	.word	0x20039b4c

0800dfe0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800dfe0:	b580      	push	{r7, lr}
 800dfe2:	b086      	sub	sp, #24
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	60f8      	str	r0, [r7, #12]
 800dfe8:	60b9      	str	r1, [r7, #8]
 800dfea:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800dfec:	2300      	movs	r3, #0
 800dfee:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	68ba      	ldr	r2, [r7, #8]
 800dff4:	68f9      	ldr	r1, [r7, #12]
 800dff6:	4806      	ldr	r0, [pc, #24]	; (800e010 <BSP_SD_ReadBlocks_DMA+0x30>)
 800dff8:	f7fc f810 	bl	800a01c <HAL_SD_ReadBlocks_DMA>
 800dffc:	4603      	mov	r3, r0
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d001      	beq.n	800e006 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800e002:	2301      	movs	r3, #1
 800e004:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800e006:	7dfb      	ldrb	r3, [r7, #23]
}
 800e008:	4618      	mov	r0, r3
 800e00a:	3718      	adds	r7, #24
 800e00c:	46bd      	mov	sp, r7
 800e00e:	bd80      	pop	{r7, pc}
 800e010:	20039b4c 	.word	0x20039b4c

0800e014 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800e014:	b580      	push	{r7, lr}
 800e016:	b086      	sub	sp, #24
 800e018:	af00      	add	r7, sp, #0
 800e01a:	60f8      	str	r0, [r7, #12]
 800e01c:	60b9      	str	r1, [r7, #8]
 800e01e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800e020:	2300      	movs	r3, #0
 800e022:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	68ba      	ldr	r2, [r7, #8]
 800e028:	68f9      	ldr	r1, [r7, #12]
 800e02a:	4806      	ldr	r0, [pc, #24]	; (800e044 <BSP_SD_WriteBlocks_DMA+0x30>)
 800e02c:	f7fc f8de 	bl	800a1ec <HAL_SD_WriteBlocks_DMA>
 800e030:	4603      	mov	r3, r0
 800e032:	2b00      	cmp	r3, #0
 800e034:	d001      	beq.n	800e03a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800e036:	2301      	movs	r3, #1
 800e038:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800e03a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e03c:	4618      	mov	r0, r3
 800e03e:	3718      	adds	r7, #24
 800e040:	46bd      	mov	sp, r7
 800e042:	bd80      	pop	{r7, pc}
 800e044:	20039b4c 	.word	0x20039b4c

0800e048 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800e048:	b580      	push	{r7, lr}
 800e04a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800e04c:	4805      	ldr	r0, [pc, #20]	; (800e064 <BSP_SD_GetCardState+0x1c>)
 800e04e:	f7fc fd85 	bl	800ab5c <HAL_SD_GetCardState>
 800e052:	4603      	mov	r3, r0
 800e054:	2b04      	cmp	r3, #4
 800e056:	bf14      	ite	ne
 800e058:	2301      	movne	r3, #1
 800e05a:	2300      	moveq	r3, #0
 800e05c:	b2db      	uxtb	r3, r3
}
 800e05e:	4618      	mov	r0, r3
 800e060:	bd80      	pop	{r7, pc}
 800e062:	bf00      	nop
 800e064:	20039b4c 	.word	0x20039b4c

0800e068 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800e068:	b580      	push	{r7, lr}
 800e06a:	b082      	sub	sp, #8
 800e06c:	af00      	add	r7, sp, #0
 800e06e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800e070:	6879      	ldr	r1, [r7, #4]
 800e072:	4803      	ldr	r0, [pc, #12]	; (800e080 <BSP_SD_GetCardInfo+0x18>)
 800e074:	f7fc fcca 	bl	800aa0c <HAL_SD_GetCardInfo>
}
 800e078:	bf00      	nop
 800e07a:	3708      	adds	r7, #8
 800e07c:	46bd      	mov	sp, r7
 800e07e:	bd80      	pop	{r7, pc}
 800e080:	20039b4c 	.word	0x20039b4c

0800e084 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800e084:	b580      	push	{r7, lr}
 800e086:	b082      	sub	sp, #8
 800e088:	af00      	add	r7, sp, #0
 800e08a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800e08c:	f000 f818 	bl	800e0c0 <BSP_SD_AbortCallback>
}
 800e090:	bf00      	nop
 800e092:	3708      	adds	r7, #8
 800e094:	46bd      	mov	sp, r7
 800e096:	bd80      	pop	{r7, pc}

0800e098 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800e098:	b580      	push	{r7, lr}
 800e09a:	b082      	sub	sp, #8
 800e09c:	af00      	add	r7, sp, #0
 800e09e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800e0a0:	f000 f9a8 	bl	800e3f4 <BSP_SD_WriteCpltCallback>
}
 800e0a4:	bf00      	nop
 800e0a6:	3708      	adds	r7, #8
 800e0a8:	46bd      	mov	sp, r7
 800e0aa:	bd80      	pop	{r7, pc}

0800e0ac <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800e0ac:	b580      	push	{r7, lr}
 800e0ae:	b082      	sub	sp, #8
 800e0b0:	af00      	add	r7, sp, #0
 800e0b2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800e0b4:	f000 f9aa 	bl	800e40c <BSP_SD_ReadCpltCallback>
}
 800e0b8:	bf00      	nop
 800e0ba:	3708      	adds	r7, #8
 800e0bc:	46bd      	mov	sp, r7
 800e0be:	bd80      	pop	{r7, pc}

0800e0c0 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800e0c0:	b480      	push	{r7}
 800e0c2:	af00      	add	r7, sp, #0

}
 800e0c4:	bf00      	nop
 800e0c6:	46bd      	mov	sp, r7
 800e0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0cc:	4770      	bx	lr

0800e0ce <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800e0ce:	b580      	push	{r7, lr}
 800e0d0:	b082      	sub	sp, #8
 800e0d2:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800e0d4:	2301      	movs	r3, #1
 800e0d6:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800e0d8:	f000 f80c 	bl	800e0f4 <BSP_PlatformIsDetected>
 800e0dc:	4603      	mov	r3, r0
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d101      	bne.n	800e0e6 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800e0e2:	2300      	movs	r3, #0
 800e0e4:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800e0e6:	79fb      	ldrb	r3, [r7, #7]
 800e0e8:	b2db      	uxtb	r3, r3
}
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	3708      	adds	r7, #8
 800e0ee:	46bd      	mov	sp, r7
 800e0f0:	bd80      	pop	{r7, pc}
	...

0800e0f4 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800e0f4:	b580      	push	{r7, lr}
 800e0f6:	b082      	sub	sp, #8
 800e0f8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800e0fa:	2301      	movs	r3, #1
 800e0fc:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800e0fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800e102:	4806      	ldr	r0, [pc, #24]	; (800e11c <BSP_PlatformIsDetected+0x28>)
 800e104:	f7fa f866 	bl	80081d4 <HAL_GPIO_ReadPin>
 800e108:	4603      	mov	r3, r0
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d001      	beq.n	800e112 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800e10e:	2300      	movs	r3, #0
 800e110:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800e112:	79fb      	ldrb	r3, [r7, #7]
}
 800e114:	4618      	mov	r0, r3
 800e116:	3708      	adds	r7, #8
 800e118:	46bd      	mov	sp, r7
 800e11a:	bd80      	pop	{r7, pc}
 800e11c:	40020000 	.word	0x40020000

0800e120 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800e120:	b580      	push	{r7, lr}
 800e122:	b084      	sub	sp, #16
 800e124:	af00      	add	r7, sp, #0
 800e126:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800e128:	f7f8 fdca 	bl	8006cc0 <HAL_GetTick>
 800e12c:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800e12e:	e006      	b.n	800e13e <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e130:	f7ff ff8a 	bl	800e048 <BSP_SD_GetCardState>
 800e134:	4603      	mov	r3, r0
 800e136:	2b00      	cmp	r3, #0
 800e138:	d101      	bne.n	800e13e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800e13a:	2300      	movs	r3, #0
 800e13c:	e009      	b.n	800e152 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800e13e:	f7f8 fdbf 	bl	8006cc0 <HAL_GetTick>
 800e142:	4602      	mov	r2, r0
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	1ad3      	subs	r3, r2, r3
 800e148:	687a      	ldr	r2, [r7, #4]
 800e14a:	429a      	cmp	r2, r3
 800e14c:	d8f0      	bhi.n	800e130 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800e14e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e152:	4618      	mov	r0, r3
 800e154:	3710      	adds	r7, #16
 800e156:	46bd      	mov	sp, r7
 800e158:	bd80      	pop	{r7, pc}
	...

0800e15c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800e15c:	b580      	push	{r7, lr}
 800e15e:	b082      	sub	sp, #8
 800e160:	af00      	add	r7, sp, #0
 800e162:	4603      	mov	r3, r0
 800e164:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800e166:	4b0b      	ldr	r3, [pc, #44]	; (800e194 <SD_CheckStatus+0x38>)
 800e168:	2201      	movs	r2, #1
 800e16a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800e16c:	f7ff ff6c 	bl	800e048 <BSP_SD_GetCardState>
 800e170:	4603      	mov	r3, r0
 800e172:	2b00      	cmp	r3, #0
 800e174:	d107      	bne.n	800e186 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800e176:	4b07      	ldr	r3, [pc, #28]	; (800e194 <SD_CheckStatus+0x38>)
 800e178:	781b      	ldrb	r3, [r3, #0]
 800e17a:	b2db      	uxtb	r3, r3
 800e17c:	f023 0301 	bic.w	r3, r3, #1
 800e180:	b2da      	uxtb	r2, r3
 800e182:	4b04      	ldr	r3, [pc, #16]	; (800e194 <SD_CheckStatus+0x38>)
 800e184:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800e186:	4b03      	ldr	r3, [pc, #12]	; (800e194 <SD_CheckStatus+0x38>)
 800e188:	781b      	ldrb	r3, [r3, #0]
 800e18a:	b2db      	uxtb	r3, r3
}
 800e18c:	4618      	mov	r0, r3
 800e18e:	3708      	adds	r7, #8
 800e190:	46bd      	mov	sp, r7
 800e192:	bd80      	pop	{r7, pc}
 800e194:	20000009 	.word	0x20000009

0800e198 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800e198:	b580      	push	{r7, lr}
 800e19a:	b082      	sub	sp, #8
 800e19c:	af00      	add	r7, sp, #0
 800e19e:	4603      	mov	r3, r0
 800e1a0:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800e1a2:	f7ff fef7 	bl	800df94 <BSP_SD_Init>
 800e1a6:	4603      	mov	r3, r0
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d107      	bne.n	800e1bc <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800e1ac:	79fb      	ldrb	r3, [r7, #7]
 800e1ae:	4618      	mov	r0, r3
 800e1b0:	f7ff ffd4 	bl	800e15c <SD_CheckStatus>
 800e1b4:	4603      	mov	r3, r0
 800e1b6:	461a      	mov	r2, r3
 800e1b8:	4b04      	ldr	r3, [pc, #16]	; (800e1cc <SD_initialize+0x34>)
 800e1ba:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800e1bc:	4b03      	ldr	r3, [pc, #12]	; (800e1cc <SD_initialize+0x34>)
 800e1be:	781b      	ldrb	r3, [r3, #0]
 800e1c0:	b2db      	uxtb	r3, r3
}
 800e1c2:	4618      	mov	r0, r3
 800e1c4:	3708      	adds	r7, #8
 800e1c6:	46bd      	mov	sp, r7
 800e1c8:	bd80      	pop	{r7, pc}
 800e1ca:	bf00      	nop
 800e1cc:	20000009 	.word	0x20000009

0800e1d0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800e1d0:	b580      	push	{r7, lr}
 800e1d2:	b082      	sub	sp, #8
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	4603      	mov	r3, r0
 800e1d8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800e1da:	79fb      	ldrb	r3, [r7, #7]
 800e1dc:	4618      	mov	r0, r3
 800e1de:	f7ff ffbd 	bl	800e15c <SD_CheckStatus>
 800e1e2:	4603      	mov	r3, r0
}
 800e1e4:	4618      	mov	r0, r3
 800e1e6:	3708      	adds	r7, #8
 800e1e8:	46bd      	mov	sp, r7
 800e1ea:	bd80      	pop	{r7, pc}

0800e1ec <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800e1ec:	b580      	push	{r7, lr}
 800e1ee:	b086      	sub	sp, #24
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	60b9      	str	r1, [r7, #8]
 800e1f4:	607a      	str	r2, [r7, #4]
 800e1f6:	603b      	str	r3, [r7, #0]
 800e1f8:	4603      	mov	r3, r0
 800e1fa:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e1fc:	2301      	movs	r3, #1
 800e1fe:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800e200:	f247 5030 	movw	r0, #30000	; 0x7530
 800e204:	f7ff ff8c 	bl	800e120 <SD_CheckStatusWithTimeout>
 800e208:	4603      	mov	r3, r0
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	da01      	bge.n	800e212 <SD_read+0x26>
  {
    return res;
 800e20e:	7dfb      	ldrb	r3, [r7, #23]
 800e210:	e03b      	b.n	800e28a <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800e212:	683a      	ldr	r2, [r7, #0]
 800e214:	6879      	ldr	r1, [r7, #4]
 800e216:	68b8      	ldr	r0, [r7, #8]
 800e218:	f7ff fee2 	bl	800dfe0 <BSP_SD_ReadBlocks_DMA>
 800e21c:	4603      	mov	r3, r0
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d132      	bne.n	800e288 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800e222:	4b1c      	ldr	r3, [pc, #112]	; (800e294 <SD_read+0xa8>)
 800e224:	2200      	movs	r2, #0
 800e226:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800e228:	f7f8 fd4a 	bl	8006cc0 <HAL_GetTick>
 800e22c:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800e22e:	bf00      	nop
 800e230:	4b18      	ldr	r3, [pc, #96]	; (800e294 <SD_read+0xa8>)
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	2b00      	cmp	r3, #0
 800e236:	d108      	bne.n	800e24a <SD_read+0x5e>
 800e238:	f7f8 fd42 	bl	8006cc0 <HAL_GetTick>
 800e23c:	4602      	mov	r2, r0
 800e23e:	693b      	ldr	r3, [r7, #16]
 800e240:	1ad3      	subs	r3, r2, r3
 800e242:	f247 522f 	movw	r2, #29999	; 0x752f
 800e246:	4293      	cmp	r3, r2
 800e248:	d9f2      	bls.n	800e230 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 800e24a:	4b12      	ldr	r3, [pc, #72]	; (800e294 <SD_read+0xa8>)
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d102      	bne.n	800e258 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800e252:	2301      	movs	r3, #1
 800e254:	75fb      	strb	r3, [r7, #23]
 800e256:	e017      	b.n	800e288 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800e258:	4b0e      	ldr	r3, [pc, #56]	; (800e294 <SD_read+0xa8>)
 800e25a:	2200      	movs	r2, #0
 800e25c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800e25e:	f7f8 fd2f 	bl	8006cc0 <HAL_GetTick>
 800e262:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e264:	e007      	b.n	800e276 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e266:	f7ff feef 	bl	800e048 <BSP_SD_GetCardState>
 800e26a:	4603      	mov	r3, r0
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d102      	bne.n	800e276 <SD_read+0x8a>
          {
            res = RES_OK;
 800e270:	2300      	movs	r3, #0
 800e272:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800e274:	e008      	b.n	800e288 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e276:	f7f8 fd23 	bl	8006cc0 <HAL_GetTick>
 800e27a:	4602      	mov	r2, r0
 800e27c:	693b      	ldr	r3, [r7, #16]
 800e27e:	1ad3      	subs	r3, r2, r3
 800e280:	f247 522f 	movw	r2, #29999	; 0x752f
 800e284:	4293      	cmp	r3, r2
 800e286:	d9ee      	bls.n	800e266 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800e288:	7dfb      	ldrb	r3, [r7, #23]
}
 800e28a:	4618      	mov	r0, r3
 800e28c:	3718      	adds	r7, #24
 800e28e:	46bd      	mov	sp, r7
 800e290:	bd80      	pop	{r7, pc}
 800e292:	bf00      	nop
 800e294:	200373e8 	.word	0x200373e8

0800e298 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800e298:	b580      	push	{r7, lr}
 800e29a:	b086      	sub	sp, #24
 800e29c:	af00      	add	r7, sp, #0
 800e29e:	60b9      	str	r1, [r7, #8]
 800e2a0:	607a      	str	r2, [r7, #4]
 800e2a2:	603b      	str	r3, [r7, #0]
 800e2a4:	4603      	mov	r3, r0
 800e2a6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e2a8:	2301      	movs	r3, #1
 800e2aa:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800e2ac:	4b24      	ldr	r3, [pc, #144]	; (800e340 <SD_write+0xa8>)
 800e2ae:	2200      	movs	r2, #0
 800e2b0:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800e2b2:	f247 5030 	movw	r0, #30000	; 0x7530
 800e2b6:	f7ff ff33 	bl	800e120 <SD_CheckStatusWithTimeout>
 800e2ba:	4603      	mov	r3, r0
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	da01      	bge.n	800e2c4 <SD_write+0x2c>
  {
    return res;
 800e2c0:	7dfb      	ldrb	r3, [r7, #23]
 800e2c2:	e038      	b.n	800e336 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800e2c4:	683a      	ldr	r2, [r7, #0]
 800e2c6:	6879      	ldr	r1, [r7, #4]
 800e2c8:	68b8      	ldr	r0, [r7, #8]
 800e2ca:	f7ff fea3 	bl	800e014 <BSP_SD_WriteBlocks_DMA>
 800e2ce:	4603      	mov	r3, r0
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d12f      	bne.n	800e334 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800e2d4:	f7f8 fcf4 	bl	8006cc0 <HAL_GetTick>
 800e2d8:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800e2da:	bf00      	nop
 800e2dc:	4b18      	ldr	r3, [pc, #96]	; (800e340 <SD_write+0xa8>)
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d108      	bne.n	800e2f6 <SD_write+0x5e>
 800e2e4:	f7f8 fcec 	bl	8006cc0 <HAL_GetTick>
 800e2e8:	4602      	mov	r2, r0
 800e2ea:	693b      	ldr	r3, [r7, #16]
 800e2ec:	1ad3      	subs	r3, r2, r3
 800e2ee:	f247 522f 	movw	r2, #29999	; 0x752f
 800e2f2:	4293      	cmp	r3, r2
 800e2f4:	d9f2      	bls.n	800e2dc <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 800e2f6:	4b12      	ldr	r3, [pc, #72]	; (800e340 <SD_write+0xa8>)
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d102      	bne.n	800e304 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800e2fe:	2301      	movs	r3, #1
 800e300:	75fb      	strb	r3, [r7, #23]
 800e302:	e017      	b.n	800e334 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800e304:	4b0e      	ldr	r3, [pc, #56]	; (800e340 <SD_write+0xa8>)
 800e306:	2200      	movs	r2, #0
 800e308:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800e30a:	f7f8 fcd9 	bl	8006cc0 <HAL_GetTick>
 800e30e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e310:	e007      	b.n	800e322 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e312:	f7ff fe99 	bl	800e048 <BSP_SD_GetCardState>
 800e316:	4603      	mov	r3, r0
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d102      	bne.n	800e322 <SD_write+0x8a>
          {
            res = RES_OK;
 800e31c:	2300      	movs	r3, #0
 800e31e:	75fb      	strb	r3, [r7, #23]
            break;
 800e320:	e008      	b.n	800e334 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e322:	f7f8 fccd 	bl	8006cc0 <HAL_GetTick>
 800e326:	4602      	mov	r2, r0
 800e328:	693b      	ldr	r3, [r7, #16]
 800e32a:	1ad3      	subs	r3, r2, r3
 800e32c:	f247 522f 	movw	r2, #29999	; 0x752f
 800e330:	4293      	cmp	r3, r2
 800e332:	d9ee      	bls.n	800e312 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800e334:	7dfb      	ldrb	r3, [r7, #23]
}
 800e336:	4618      	mov	r0, r3
 800e338:	3718      	adds	r7, #24
 800e33a:	46bd      	mov	sp, r7
 800e33c:	bd80      	pop	{r7, pc}
 800e33e:	bf00      	nop
 800e340:	200373e4 	.word	0x200373e4

0800e344 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800e344:	b580      	push	{r7, lr}
 800e346:	b08c      	sub	sp, #48	; 0x30
 800e348:	af00      	add	r7, sp, #0
 800e34a:	4603      	mov	r3, r0
 800e34c:	603a      	str	r2, [r7, #0]
 800e34e:	71fb      	strb	r3, [r7, #7]
 800e350:	460b      	mov	r3, r1
 800e352:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800e354:	2301      	movs	r3, #1
 800e356:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800e35a:	4b25      	ldr	r3, [pc, #148]	; (800e3f0 <SD_ioctl+0xac>)
 800e35c:	781b      	ldrb	r3, [r3, #0]
 800e35e:	b2db      	uxtb	r3, r3
 800e360:	f003 0301 	and.w	r3, r3, #1
 800e364:	2b00      	cmp	r3, #0
 800e366:	d001      	beq.n	800e36c <SD_ioctl+0x28>
 800e368:	2303      	movs	r3, #3
 800e36a:	e03c      	b.n	800e3e6 <SD_ioctl+0xa2>

  switch (cmd)
 800e36c:	79bb      	ldrb	r3, [r7, #6]
 800e36e:	2b03      	cmp	r3, #3
 800e370:	d834      	bhi.n	800e3dc <SD_ioctl+0x98>
 800e372:	a201      	add	r2, pc, #4	; (adr r2, 800e378 <SD_ioctl+0x34>)
 800e374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e378:	0800e389 	.word	0x0800e389
 800e37c:	0800e391 	.word	0x0800e391
 800e380:	0800e3a9 	.word	0x0800e3a9
 800e384:	0800e3c3 	.word	0x0800e3c3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800e388:	2300      	movs	r3, #0
 800e38a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e38e:	e028      	b.n	800e3e2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800e390:	f107 030c 	add.w	r3, r7, #12
 800e394:	4618      	mov	r0, r3
 800e396:	f7ff fe67 	bl	800e068 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800e39a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e39c:	683b      	ldr	r3, [r7, #0]
 800e39e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e3a0:	2300      	movs	r3, #0
 800e3a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e3a6:	e01c      	b.n	800e3e2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e3a8:	f107 030c 	add.w	r3, r7, #12
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	f7ff fe5b 	bl	800e068 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800e3b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3b4:	b29a      	uxth	r2, r3
 800e3b6:	683b      	ldr	r3, [r7, #0]
 800e3b8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800e3ba:	2300      	movs	r3, #0
 800e3bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e3c0:	e00f      	b.n	800e3e2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e3c2:	f107 030c 	add.w	r3, r7, #12
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	f7ff fe4e 	bl	800e068 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800e3cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3ce:	0a5a      	lsrs	r2, r3, #9
 800e3d0:	683b      	ldr	r3, [r7, #0]
 800e3d2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e3d4:	2300      	movs	r3, #0
 800e3d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e3da:	e002      	b.n	800e3e2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800e3dc:	2304      	movs	r3, #4
 800e3de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800e3e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	3730      	adds	r7, #48	; 0x30
 800e3ea:	46bd      	mov	sp, r7
 800e3ec:	bd80      	pop	{r7, pc}
 800e3ee:	bf00      	nop
 800e3f0:	20000009 	.word	0x20000009

0800e3f4 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800e3f4:	b480      	push	{r7}
 800e3f6:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800e3f8:	4b03      	ldr	r3, [pc, #12]	; (800e408 <BSP_SD_WriteCpltCallback+0x14>)
 800e3fa:	2201      	movs	r2, #1
 800e3fc:	601a      	str	r2, [r3, #0]
}
 800e3fe:	bf00      	nop
 800e400:	46bd      	mov	sp, r7
 800e402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e406:	4770      	bx	lr
 800e408:	200373e4 	.word	0x200373e4

0800e40c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800e40c:	b480      	push	{r7}
 800e40e:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800e410:	4b03      	ldr	r3, [pc, #12]	; (800e420 <BSP_SD_ReadCpltCallback+0x14>)
 800e412:	2201      	movs	r2, #1
 800e414:	601a      	str	r2, [r3, #0]
}
 800e416:	bf00      	nop
 800e418:	46bd      	mov	sp, r7
 800e41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e41e:	4770      	bx	lr
 800e420:	200373e8 	.word	0x200373e8

0800e424 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800e424:	b580      	push	{r7, lr}
 800e426:	b084      	sub	sp, #16
 800e428:	af00      	add	r7, sp, #0
 800e42a:	4603      	mov	r3, r0
 800e42c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800e42e:	79fb      	ldrb	r3, [r7, #7]
 800e430:	4a08      	ldr	r2, [pc, #32]	; (800e454 <disk_status+0x30>)
 800e432:	009b      	lsls	r3, r3, #2
 800e434:	4413      	add	r3, r2
 800e436:	685b      	ldr	r3, [r3, #4]
 800e438:	685b      	ldr	r3, [r3, #4]
 800e43a:	79fa      	ldrb	r2, [r7, #7]
 800e43c:	4905      	ldr	r1, [pc, #20]	; (800e454 <disk_status+0x30>)
 800e43e:	440a      	add	r2, r1
 800e440:	7a12      	ldrb	r2, [r2, #8]
 800e442:	4610      	mov	r0, r2
 800e444:	4798      	blx	r3
 800e446:	4603      	mov	r3, r0
 800e448:	73fb      	strb	r3, [r7, #15]
  return stat;
 800e44a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e44c:	4618      	mov	r0, r3
 800e44e:	3710      	adds	r7, #16
 800e450:	46bd      	mov	sp, r7
 800e452:	bd80      	pop	{r7, pc}
 800e454:	20037414 	.word	0x20037414

0800e458 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800e458:	b580      	push	{r7, lr}
 800e45a:	b084      	sub	sp, #16
 800e45c:	af00      	add	r7, sp, #0
 800e45e:	4603      	mov	r3, r0
 800e460:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800e462:	2300      	movs	r3, #0
 800e464:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800e466:	79fb      	ldrb	r3, [r7, #7]
 800e468:	4a0d      	ldr	r2, [pc, #52]	; (800e4a0 <disk_initialize+0x48>)
 800e46a:	5cd3      	ldrb	r3, [r2, r3]
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d111      	bne.n	800e494 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800e470:	79fb      	ldrb	r3, [r7, #7]
 800e472:	4a0b      	ldr	r2, [pc, #44]	; (800e4a0 <disk_initialize+0x48>)
 800e474:	2101      	movs	r1, #1
 800e476:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800e478:	79fb      	ldrb	r3, [r7, #7]
 800e47a:	4a09      	ldr	r2, [pc, #36]	; (800e4a0 <disk_initialize+0x48>)
 800e47c:	009b      	lsls	r3, r3, #2
 800e47e:	4413      	add	r3, r2
 800e480:	685b      	ldr	r3, [r3, #4]
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	79fa      	ldrb	r2, [r7, #7]
 800e486:	4906      	ldr	r1, [pc, #24]	; (800e4a0 <disk_initialize+0x48>)
 800e488:	440a      	add	r2, r1
 800e48a:	7a12      	ldrb	r2, [r2, #8]
 800e48c:	4610      	mov	r0, r2
 800e48e:	4798      	blx	r3
 800e490:	4603      	mov	r3, r0
 800e492:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800e494:	7bfb      	ldrb	r3, [r7, #15]
}
 800e496:	4618      	mov	r0, r3
 800e498:	3710      	adds	r7, #16
 800e49a:	46bd      	mov	sp, r7
 800e49c:	bd80      	pop	{r7, pc}
 800e49e:	bf00      	nop
 800e4a0:	20037414 	.word	0x20037414

0800e4a4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800e4a4:	b590      	push	{r4, r7, lr}
 800e4a6:	b087      	sub	sp, #28
 800e4a8:	af00      	add	r7, sp, #0
 800e4aa:	60b9      	str	r1, [r7, #8]
 800e4ac:	607a      	str	r2, [r7, #4]
 800e4ae:	603b      	str	r3, [r7, #0]
 800e4b0:	4603      	mov	r3, r0
 800e4b2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800e4b4:	7bfb      	ldrb	r3, [r7, #15]
 800e4b6:	4a0a      	ldr	r2, [pc, #40]	; (800e4e0 <disk_read+0x3c>)
 800e4b8:	009b      	lsls	r3, r3, #2
 800e4ba:	4413      	add	r3, r2
 800e4bc:	685b      	ldr	r3, [r3, #4]
 800e4be:	689c      	ldr	r4, [r3, #8]
 800e4c0:	7bfb      	ldrb	r3, [r7, #15]
 800e4c2:	4a07      	ldr	r2, [pc, #28]	; (800e4e0 <disk_read+0x3c>)
 800e4c4:	4413      	add	r3, r2
 800e4c6:	7a18      	ldrb	r0, [r3, #8]
 800e4c8:	683b      	ldr	r3, [r7, #0]
 800e4ca:	687a      	ldr	r2, [r7, #4]
 800e4cc:	68b9      	ldr	r1, [r7, #8]
 800e4ce:	47a0      	blx	r4
 800e4d0:	4603      	mov	r3, r0
 800e4d2:	75fb      	strb	r3, [r7, #23]
  return res;
 800e4d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800e4d6:	4618      	mov	r0, r3
 800e4d8:	371c      	adds	r7, #28
 800e4da:	46bd      	mov	sp, r7
 800e4dc:	bd90      	pop	{r4, r7, pc}
 800e4de:	bf00      	nop
 800e4e0:	20037414 	.word	0x20037414

0800e4e4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800e4e4:	b590      	push	{r4, r7, lr}
 800e4e6:	b087      	sub	sp, #28
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	60b9      	str	r1, [r7, #8]
 800e4ec:	607a      	str	r2, [r7, #4]
 800e4ee:	603b      	str	r3, [r7, #0]
 800e4f0:	4603      	mov	r3, r0
 800e4f2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800e4f4:	7bfb      	ldrb	r3, [r7, #15]
 800e4f6:	4a0a      	ldr	r2, [pc, #40]	; (800e520 <disk_write+0x3c>)
 800e4f8:	009b      	lsls	r3, r3, #2
 800e4fa:	4413      	add	r3, r2
 800e4fc:	685b      	ldr	r3, [r3, #4]
 800e4fe:	68dc      	ldr	r4, [r3, #12]
 800e500:	7bfb      	ldrb	r3, [r7, #15]
 800e502:	4a07      	ldr	r2, [pc, #28]	; (800e520 <disk_write+0x3c>)
 800e504:	4413      	add	r3, r2
 800e506:	7a18      	ldrb	r0, [r3, #8]
 800e508:	683b      	ldr	r3, [r7, #0]
 800e50a:	687a      	ldr	r2, [r7, #4]
 800e50c:	68b9      	ldr	r1, [r7, #8]
 800e50e:	47a0      	blx	r4
 800e510:	4603      	mov	r3, r0
 800e512:	75fb      	strb	r3, [r7, #23]
  return res;
 800e514:	7dfb      	ldrb	r3, [r7, #23]
}
 800e516:	4618      	mov	r0, r3
 800e518:	371c      	adds	r7, #28
 800e51a:	46bd      	mov	sp, r7
 800e51c:	bd90      	pop	{r4, r7, pc}
 800e51e:	bf00      	nop
 800e520:	20037414 	.word	0x20037414

0800e524 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800e524:	b580      	push	{r7, lr}
 800e526:	b084      	sub	sp, #16
 800e528:	af00      	add	r7, sp, #0
 800e52a:	4603      	mov	r3, r0
 800e52c:	603a      	str	r2, [r7, #0]
 800e52e:	71fb      	strb	r3, [r7, #7]
 800e530:	460b      	mov	r3, r1
 800e532:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800e534:	79fb      	ldrb	r3, [r7, #7]
 800e536:	4a09      	ldr	r2, [pc, #36]	; (800e55c <disk_ioctl+0x38>)
 800e538:	009b      	lsls	r3, r3, #2
 800e53a:	4413      	add	r3, r2
 800e53c:	685b      	ldr	r3, [r3, #4]
 800e53e:	691b      	ldr	r3, [r3, #16]
 800e540:	79fa      	ldrb	r2, [r7, #7]
 800e542:	4906      	ldr	r1, [pc, #24]	; (800e55c <disk_ioctl+0x38>)
 800e544:	440a      	add	r2, r1
 800e546:	7a10      	ldrb	r0, [r2, #8]
 800e548:	79b9      	ldrb	r1, [r7, #6]
 800e54a:	683a      	ldr	r2, [r7, #0]
 800e54c:	4798      	blx	r3
 800e54e:	4603      	mov	r3, r0
 800e550:	73fb      	strb	r3, [r7, #15]
  return res;
 800e552:	7bfb      	ldrb	r3, [r7, #15]
}
 800e554:	4618      	mov	r0, r3
 800e556:	3710      	adds	r7, #16
 800e558:	46bd      	mov	sp, r7
 800e55a:	bd80      	pop	{r7, pc}
 800e55c:	20037414 	.word	0x20037414

0800e560 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800e560:	b480      	push	{r7}
 800e562:	b085      	sub	sp, #20
 800e564:	af00      	add	r7, sp, #0
 800e566:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	3301      	adds	r3, #1
 800e56c:	781b      	ldrb	r3, [r3, #0]
 800e56e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800e570:	89fb      	ldrh	r3, [r7, #14]
 800e572:	021b      	lsls	r3, r3, #8
 800e574:	b21a      	sxth	r2, r3
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	781b      	ldrb	r3, [r3, #0]
 800e57a:	b21b      	sxth	r3, r3
 800e57c:	4313      	orrs	r3, r2
 800e57e:	b21b      	sxth	r3, r3
 800e580:	81fb      	strh	r3, [r7, #14]
	return rv;
 800e582:	89fb      	ldrh	r3, [r7, #14]
}
 800e584:	4618      	mov	r0, r3
 800e586:	3714      	adds	r7, #20
 800e588:	46bd      	mov	sp, r7
 800e58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e58e:	4770      	bx	lr

0800e590 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800e590:	b480      	push	{r7}
 800e592:	b085      	sub	sp, #20
 800e594:	af00      	add	r7, sp, #0
 800e596:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	3303      	adds	r3, #3
 800e59c:	781b      	ldrb	r3, [r3, #0]
 800e59e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	021b      	lsls	r3, r3, #8
 800e5a4:	687a      	ldr	r2, [r7, #4]
 800e5a6:	3202      	adds	r2, #2
 800e5a8:	7812      	ldrb	r2, [r2, #0]
 800e5aa:	4313      	orrs	r3, r2
 800e5ac:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	021b      	lsls	r3, r3, #8
 800e5b2:	687a      	ldr	r2, [r7, #4]
 800e5b4:	3201      	adds	r2, #1
 800e5b6:	7812      	ldrb	r2, [r2, #0]
 800e5b8:	4313      	orrs	r3, r2
 800e5ba:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	021b      	lsls	r3, r3, #8
 800e5c0:	687a      	ldr	r2, [r7, #4]
 800e5c2:	7812      	ldrb	r2, [r2, #0]
 800e5c4:	4313      	orrs	r3, r2
 800e5c6:	60fb      	str	r3, [r7, #12]
	return rv;
 800e5c8:	68fb      	ldr	r3, [r7, #12]
}
 800e5ca:	4618      	mov	r0, r3
 800e5cc:	3714      	adds	r7, #20
 800e5ce:	46bd      	mov	sp, r7
 800e5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d4:	4770      	bx	lr

0800e5d6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800e5d6:	b480      	push	{r7}
 800e5d8:	b083      	sub	sp, #12
 800e5da:	af00      	add	r7, sp, #0
 800e5dc:	6078      	str	r0, [r7, #4]
 800e5de:	460b      	mov	r3, r1
 800e5e0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	1c5a      	adds	r2, r3, #1
 800e5e6:	607a      	str	r2, [r7, #4]
 800e5e8:	887a      	ldrh	r2, [r7, #2]
 800e5ea:	b2d2      	uxtb	r2, r2
 800e5ec:	701a      	strb	r2, [r3, #0]
 800e5ee:	887b      	ldrh	r3, [r7, #2]
 800e5f0:	0a1b      	lsrs	r3, r3, #8
 800e5f2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	1c5a      	adds	r2, r3, #1
 800e5f8:	607a      	str	r2, [r7, #4]
 800e5fa:	887a      	ldrh	r2, [r7, #2]
 800e5fc:	b2d2      	uxtb	r2, r2
 800e5fe:	701a      	strb	r2, [r3, #0]
}
 800e600:	bf00      	nop
 800e602:	370c      	adds	r7, #12
 800e604:	46bd      	mov	sp, r7
 800e606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e60a:	4770      	bx	lr

0800e60c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800e60c:	b480      	push	{r7}
 800e60e:	b083      	sub	sp, #12
 800e610:	af00      	add	r7, sp, #0
 800e612:	6078      	str	r0, [r7, #4]
 800e614:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	1c5a      	adds	r2, r3, #1
 800e61a:	607a      	str	r2, [r7, #4]
 800e61c:	683a      	ldr	r2, [r7, #0]
 800e61e:	b2d2      	uxtb	r2, r2
 800e620:	701a      	strb	r2, [r3, #0]
 800e622:	683b      	ldr	r3, [r7, #0]
 800e624:	0a1b      	lsrs	r3, r3, #8
 800e626:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	1c5a      	adds	r2, r3, #1
 800e62c:	607a      	str	r2, [r7, #4]
 800e62e:	683a      	ldr	r2, [r7, #0]
 800e630:	b2d2      	uxtb	r2, r2
 800e632:	701a      	strb	r2, [r3, #0]
 800e634:	683b      	ldr	r3, [r7, #0]
 800e636:	0a1b      	lsrs	r3, r3, #8
 800e638:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	1c5a      	adds	r2, r3, #1
 800e63e:	607a      	str	r2, [r7, #4]
 800e640:	683a      	ldr	r2, [r7, #0]
 800e642:	b2d2      	uxtb	r2, r2
 800e644:	701a      	strb	r2, [r3, #0]
 800e646:	683b      	ldr	r3, [r7, #0]
 800e648:	0a1b      	lsrs	r3, r3, #8
 800e64a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	1c5a      	adds	r2, r3, #1
 800e650:	607a      	str	r2, [r7, #4]
 800e652:	683a      	ldr	r2, [r7, #0]
 800e654:	b2d2      	uxtb	r2, r2
 800e656:	701a      	strb	r2, [r3, #0]
}
 800e658:	bf00      	nop
 800e65a:	370c      	adds	r7, #12
 800e65c:	46bd      	mov	sp, r7
 800e65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e662:	4770      	bx	lr

0800e664 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800e664:	b480      	push	{r7}
 800e666:	b087      	sub	sp, #28
 800e668:	af00      	add	r7, sp, #0
 800e66a:	60f8      	str	r0, [r7, #12]
 800e66c:	60b9      	str	r1, [r7, #8]
 800e66e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800e674:	68bb      	ldr	r3, [r7, #8]
 800e676:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d00d      	beq.n	800e69a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800e67e:	693a      	ldr	r2, [r7, #16]
 800e680:	1c53      	adds	r3, r2, #1
 800e682:	613b      	str	r3, [r7, #16]
 800e684:	697b      	ldr	r3, [r7, #20]
 800e686:	1c59      	adds	r1, r3, #1
 800e688:	6179      	str	r1, [r7, #20]
 800e68a:	7812      	ldrb	r2, [r2, #0]
 800e68c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	3b01      	subs	r3, #1
 800e692:	607b      	str	r3, [r7, #4]
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	2b00      	cmp	r3, #0
 800e698:	d1f1      	bne.n	800e67e <mem_cpy+0x1a>
	}
}
 800e69a:	bf00      	nop
 800e69c:	371c      	adds	r7, #28
 800e69e:	46bd      	mov	sp, r7
 800e6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a4:	4770      	bx	lr

0800e6a6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800e6a6:	b480      	push	{r7}
 800e6a8:	b087      	sub	sp, #28
 800e6aa:	af00      	add	r7, sp, #0
 800e6ac:	60f8      	str	r0, [r7, #12]
 800e6ae:	60b9      	str	r1, [r7, #8]
 800e6b0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800e6b6:	697b      	ldr	r3, [r7, #20]
 800e6b8:	1c5a      	adds	r2, r3, #1
 800e6ba:	617a      	str	r2, [r7, #20]
 800e6bc:	68ba      	ldr	r2, [r7, #8]
 800e6be:	b2d2      	uxtb	r2, r2
 800e6c0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	3b01      	subs	r3, #1
 800e6c6:	607b      	str	r3, [r7, #4]
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d1f3      	bne.n	800e6b6 <mem_set+0x10>
}
 800e6ce:	bf00      	nop
 800e6d0:	371c      	adds	r7, #28
 800e6d2:	46bd      	mov	sp, r7
 800e6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6d8:	4770      	bx	lr

0800e6da <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800e6da:	b480      	push	{r7}
 800e6dc:	b089      	sub	sp, #36	; 0x24
 800e6de:	af00      	add	r7, sp, #0
 800e6e0:	60f8      	str	r0, [r7, #12]
 800e6e2:	60b9      	str	r1, [r7, #8]
 800e6e4:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	61fb      	str	r3, [r7, #28]
 800e6ea:	68bb      	ldr	r3, [r7, #8]
 800e6ec:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800e6ee:	2300      	movs	r3, #0
 800e6f0:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800e6f2:	69fb      	ldr	r3, [r7, #28]
 800e6f4:	1c5a      	adds	r2, r3, #1
 800e6f6:	61fa      	str	r2, [r7, #28]
 800e6f8:	781b      	ldrb	r3, [r3, #0]
 800e6fa:	4619      	mov	r1, r3
 800e6fc:	69bb      	ldr	r3, [r7, #24]
 800e6fe:	1c5a      	adds	r2, r3, #1
 800e700:	61ba      	str	r2, [r7, #24]
 800e702:	781b      	ldrb	r3, [r3, #0]
 800e704:	1acb      	subs	r3, r1, r3
 800e706:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	3b01      	subs	r3, #1
 800e70c:	607b      	str	r3, [r7, #4]
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	2b00      	cmp	r3, #0
 800e712:	d002      	beq.n	800e71a <mem_cmp+0x40>
 800e714:	697b      	ldr	r3, [r7, #20]
 800e716:	2b00      	cmp	r3, #0
 800e718:	d0eb      	beq.n	800e6f2 <mem_cmp+0x18>

	return r;
 800e71a:	697b      	ldr	r3, [r7, #20]
}
 800e71c:	4618      	mov	r0, r3
 800e71e:	3724      	adds	r7, #36	; 0x24
 800e720:	46bd      	mov	sp, r7
 800e722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e726:	4770      	bx	lr

0800e728 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800e728:	b480      	push	{r7}
 800e72a:	b083      	sub	sp, #12
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	6078      	str	r0, [r7, #4]
 800e730:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800e732:	e002      	b.n	800e73a <chk_chr+0x12>
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	3301      	adds	r3, #1
 800e738:	607b      	str	r3, [r7, #4]
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	781b      	ldrb	r3, [r3, #0]
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d005      	beq.n	800e74e <chk_chr+0x26>
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	781b      	ldrb	r3, [r3, #0]
 800e746:	461a      	mov	r2, r3
 800e748:	683b      	ldr	r3, [r7, #0]
 800e74a:	4293      	cmp	r3, r2
 800e74c:	d1f2      	bne.n	800e734 <chk_chr+0xc>
	return *str;
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	781b      	ldrb	r3, [r3, #0]
}
 800e752:	4618      	mov	r0, r3
 800e754:	370c      	adds	r7, #12
 800e756:	46bd      	mov	sp, r7
 800e758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e75c:	4770      	bx	lr
	...

0800e760 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e760:	b480      	push	{r7}
 800e762:	b085      	sub	sp, #20
 800e764:	af00      	add	r7, sp, #0
 800e766:	6078      	str	r0, [r7, #4]
 800e768:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e76a:	2300      	movs	r3, #0
 800e76c:	60bb      	str	r3, [r7, #8]
 800e76e:	68bb      	ldr	r3, [r7, #8]
 800e770:	60fb      	str	r3, [r7, #12]
 800e772:	e029      	b.n	800e7c8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800e774:	4a27      	ldr	r2, [pc, #156]	; (800e814 <chk_lock+0xb4>)
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	011b      	lsls	r3, r3, #4
 800e77a:	4413      	add	r3, r2
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d01d      	beq.n	800e7be <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e782:	4a24      	ldr	r2, [pc, #144]	; (800e814 <chk_lock+0xb4>)
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	011b      	lsls	r3, r3, #4
 800e788:	4413      	add	r3, r2
 800e78a:	681a      	ldr	r2, [r3, #0]
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	429a      	cmp	r2, r3
 800e792:	d116      	bne.n	800e7c2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800e794:	4a1f      	ldr	r2, [pc, #124]	; (800e814 <chk_lock+0xb4>)
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	011b      	lsls	r3, r3, #4
 800e79a:	4413      	add	r3, r2
 800e79c:	3304      	adds	r3, #4
 800e79e:	681a      	ldr	r2, [r3, #0]
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e7a4:	429a      	cmp	r2, r3
 800e7a6:	d10c      	bne.n	800e7c2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e7a8:	4a1a      	ldr	r2, [pc, #104]	; (800e814 <chk_lock+0xb4>)
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	011b      	lsls	r3, r3, #4
 800e7ae:	4413      	add	r3, r2
 800e7b0:	3308      	adds	r3, #8
 800e7b2:	681a      	ldr	r2, [r3, #0]
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800e7b8:	429a      	cmp	r2, r3
 800e7ba:	d102      	bne.n	800e7c2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e7bc:	e007      	b.n	800e7ce <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800e7be:	2301      	movs	r3, #1
 800e7c0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	3301      	adds	r3, #1
 800e7c6:	60fb      	str	r3, [r7, #12]
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	2b01      	cmp	r3, #1
 800e7cc:	d9d2      	bls.n	800e774 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	2b02      	cmp	r3, #2
 800e7d2:	d109      	bne.n	800e7e8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800e7d4:	68bb      	ldr	r3, [r7, #8]
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d102      	bne.n	800e7e0 <chk_lock+0x80>
 800e7da:	683b      	ldr	r3, [r7, #0]
 800e7dc:	2b02      	cmp	r3, #2
 800e7de:	d101      	bne.n	800e7e4 <chk_lock+0x84>
 800e7e0:	2300      	movs	r3, #0
 800e7e2:	e010      	b.n	800e806 <chk_lock+0xa6>
 800e7e4:	2312      	movs	r3, #18
 800e7e6:	e00e      	b.n	800e806 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800e7e8:	683b      	ldr	r3, [r7, #0]
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d108      	bne.n	800e800 <chk_lock+0xa0>
 800e7ee:	4a09      	ldr	r2, [pc, #36]	; (800e814 <chk_lock+0xb4>)
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	011b      	lsls	r3, r3, #4
 800e7f4:	4413      	add	r3, r2
 800e7f6:	330c      	adds	r3, #12
 800e7f8:	881b      	ldrh	r3, [r3, #0]
 800e7fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e7fe:	d101      	bne.n	800e804 <chk_lock+0xa4>
 800e800:	2310      	movs	r3, #16
 800e802:	e000      	b.n	800e806 <chk_lock+0xa6>
 800e804:	2300      	movs	r3, #0
}
 800e806:	4618      	mov	r0, r3
 800e808:	3714      	adds	r7, #20
 800e80a:	46bd      	mov	sp, r7
 800e80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e810:	4770      	bx	lr
 800e812:	bf00      	nop
 800e814:	200373f4 	.word	0x200373f4

0800e818 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800e818:	b480      	push	{r7}
 800e81a:	b083      	sub	sp, #12
 800e81c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e81e:	2300      	movs	r3, #0
 800e820:	607b      	str	r3, [r7, #4]
 800e822:	e002      	b.n	800e82a <enq_lock+0x12>
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	3301      	adds	r3, #1
 800e828:	607b      	str	r3, [r7, #4]
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	2b01      	cmp	r3, #1
 800e82e:	d806      	bhi.n	800e83e <enq_lock+0x26>
 800e830:	4a09      	ldr	r2, [pc, #36]	; (800e858 <enq_lock+0x40>)
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	011b      	lsls	r3, r3, #4
 800e836:	4413      	add	r3, r2
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d1f2      	bne.n	800e824 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	2b02      	cmp	r3, #2
 800e842:	bf14      	ite	ne
 800e844:	2301      	movne	r3, #1
 800e846:	2300      	moveq	r3, #0
 800e848:	b2db      	uxtb	r3, r3
}
 800e84a:	4618      	mov	r0, r3
 800e84c:	370c      	adds	r7, #12
 800e84e:	46bd      	mov	sp, r7
 800e850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e854:	4770      	bx	lr
 800e856:	bf00      	nop
 800e858:	200373f4 	.word	0x200373f4

0800e85c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e85c:	b480      	push	{r7}
 800e85e:	b085      	sub	sp, #20
 800e860:	af00      	add	r7, sp, #0
 800e862:	6078      	str	r0, [r7, #4]
 800e864:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e866:	2300      	movs	r3, #0
 800e868:	60fb      	str	r3, [r7, #12]
 800e86a:	e01f      	b.n	800e8ac <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800e86c:	4a41      	ldr	r2, [pc, #260]	; (800e974 <inc_lock+0x118>)
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	011b      	lsls	r3, r3, #4
 800e872:	4413      	add	r3, r2
 800e874:	681a      	ldr	r2, [r3, #0]
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	429a      	cmp	r2, r3
 800e87c:	d113      	bne.n	800e8a6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800e87e:	4a3d      	ldr	r2, [pc, #244]	; (800e974 <inc_lock+0x118>)
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	011b      	lsls	r3, r3, #4
 800e884:	4413      	add	r3, r2
 800e886:	3304      	adds	r3, #4
 800e888:	681a      	ldr	r2, [r3, #0]
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800e88e:	429a      	cmp	r2, r3
 800e890:	d109      	bne.n	800e8a6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800e892:	4a38      	ldr	r2, [pc, #224]	; (800e974 <inc_lock+0x118>)
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	011b      	lsls	r3, r3, #4
 800e898:	4413      	add	r3, r2
 800e89a:	3308      	adds	r3, #8
 800e89c:	681a      	ldr	r2, [r3, #0]
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800e8a2:	429a      	cmp	r2, r3
 800e8a4:	d006      	beq.n	800e8b4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	3301      	adds	r3, #1
 800e8aa:	60fb      	str	r3, [r7, #12]
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	2b01      	cmp	r3, #1
 800e8b0:	d9dc      	bls.n	800e86c <inc_lock+0x10>
 800e8b2:	e000      	b.n	800e8b6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800e8b4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	2b02      	cmp	r3, #2
 800e8ba:	d132      	bne.n	800e922 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e8bc:	2300      	movs	r3, #0
 800e8be:	60fb      	str	r3, [r7, #12]
 800e8c0:	e002      	b.n	800e8c8 <inc_lock+0x6c>
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	3301      	adds	r3, #1
 800e8c6:	60fb      	str	r3, [r7, #12]
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	2b01      	cmp	r3, #1
 800e8cc:	d806      	bhi.n	800e8dc <inc_lock+0x80>
 800e8ce:	4a29      	ldr	r2, [pc, #164]	; (800e974 <inc_lock+0x118>)
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	011b      	lsls	r3, r3, #4
 800e8d4:	4413      	add	r3, r2
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d1f2      	bne.n	800e8c2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	2b02      	cmp	r3, #2
 800e8e0:	d101      	bne.n	800e8e6 <inc_lock+0x8a>
 800e8e2:	2300      	movs	r3, #0
 800e8e4:	e040      	b.n	800e968 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	681a      	ldr	r2, [r3, #0]
 800e8ea:	4922      	ldr	r1, [pc, #136]	; (800e974 <inc_lock+0x118>)
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	011b      	lsls	r3, r3, #4
 800e8f0:	440b      	add	r3, r1
 800e8f2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	689a      	ldr	r2, [r3, #8]
 800e8f8:	491e      	ldr	r1, [pc, #120]	; (800e974 <inc_lock+0x118>)
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	011b      	lsls	r3, r3, #4
 800e8fe:	440b      	add	r3, r1
 800e900:	3304      	adds	r3, #4
 800e902:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	695a      	ldr	r2, [r3, #20]
 800e908:	491a      	ldr	r1, [pc, #104]	; (800e974 <inc_lock+0x118>)
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	011b      	lsls	r3, r3, #4
 800e90e:	440b      	add	r3, r1
 800e910:	3308      	adds	r3, #8
 800e912:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800e914:	4a17      	ldr	r2, [pc, #92]	; (800e974 <inc_lock+0x118>)
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	011b      	lsls	r3, r3, #4
 800e91a:	4413      	add	r3, r2
 800e91c:	330c      	adds	r3, #12
 800e91e:	2200      	movs	r2, #0
 800e920:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800e922:	683b      	ldr	r3, [r7, #0]
 800e924:	2b00      	cmp	r3, #0
 800e926:	d009      	beq.n	800e93c <inc_lock+0xe0>
 800e928:	4a12      	ldr	r2, [pc, #72]	; (800e974 <inc_lock+0x118>)
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	011b      	lsls	r3, r3, #4
 800e92e:	4413      	add	r3, r2
 800e930:	330c      	adds	r3, #12
 800e932:	881b      	ldrh	r3, [r3, #0]
 800e934:	2b00      	cmp	r3, #0
 800e936:	d001      	beq.n	800e93c <inc_lock+0xe0>
 800e938:	2300      	movs	r3, #0
 800e93a:	e015      	b.n	800e968 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800e93c:	683b      	ldr	r3, [r7, #0]
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d108      	bne.n	800e954 <inc_lock+0xf8>
 800e942:	4a0c      	ldr	r2, [pc, #48]	; (800e974 <inc_lock+0x118>)
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	011b      	lsls	r3, r3, #4
 800e948:	4413      	add	r3, r2
 800e94a:	330c      	adds	r3, #12
 800e94c:	881b      	ldrh	r3, [r3, #0]
 800e94e:	3301      	adds	r3, #1
 800e950:	b29a      	uxth	r2, r3
 800e952:	e001      	b.n	800e958 <inc_lock+0xfc>
 800e954:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e958:	4906      	ldr	r1, [pc, #24]	; (800e974 <inc_lock+0x118>)
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	011b      	lsls	r3, r3, #4
 800e95e:	440b      	add	r3, r1
 800e960:	330c      	adds	r3, #12
 800e962:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	3301      	adds	r3, #1
}
 800e968:	4618      	mov	r0, r3
 800e96a:	3714      	adds	r7, #20
 800e96c:	46bd      	mov	sp, r7
 800e96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e972:	4770      	bx	lr
 800e974:	200373f4 	.word	0x200373f4

0800e978 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800e978:	b480      	push	{r7}
 800e97a:	b085      	sub	sp, #20
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	3b01      	subs	r3, #1
 800e984:	607b      	str	r3, [r7, #4]
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	2b01      	cmp	r3, #1
 800e98a:	d825      	bhi.n	800e9d8 <dec_lock+0x60>
		n = Files[i].ctr;
 800e98c:	4a17      	ldr	r2, [pc, #92]	; (800e9ec <dec_lock+0x74>)
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	011b      	lsls	r3, r3, #4
 800e992:	4413      	add	r3, r2
 800e994:	330c      	adds	r3, #12
 800e996:	881b      	ldrh	r3, [r3, #0]
 800e998:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800e99a:	89fb      	ldrh	r3, [r7, #14]
 800e99c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e9a0:	d101      	bne.n	800e9a6 <dec_lock+0x2e>
 800e9a2:	2300      	movs	r3, #0
 800e9a4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800e9a6:	89fb      	ldrh	r3, [r7, #14]
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d002      	beq.n	800e9b2 <dec_lock+0x3a>
 800e9ac:	89fb      	ldrh	r3, [r7, #14]
 800e9ae:	3b01      	subs	r3, #1
 800e9b0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800e9b2:	4a0e      	ldr	r2, [pc, #56]	; (800e9ec <dec_lock+0x74>)
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	011b      	lsls	r3, r3, #4
 800e9b8:	4413      	add	r3, r2
 800e9ba:	330c      	adds	r3, #12
 800e9bc:	89fa      	ldrh	r2, [r7, #14]
 800e9be:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800e9c0:	89fb      	ldrh	r3, [r7, #14]
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d105      	bne.n	800e9d2 <dec_lock+0x5a>
 800e9c6:	4a09      	ldr	r2, [pc, #36]	; (800e9ec <dec_lock+0x74>)
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	011b      	lsls	r3, r3, #4
 800e9cc:	4413      	add	r3, r2
 800e9ce:	2200      	movs	r2, #0
 800e9d0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800e9d2:	2300      	movs	r3, #0
 800e9d4:	737b      	strb	r3, [r7, #13]
 800e9d6:	e001      	b.n	800e9dc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800e9d8:	2302      	movs	r3, #2
 800e9da:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800e9dc:	7b7b      	ldrb	r3, [r7, #13]
}
 800e9de:	4618      	mov	r0, r3
 800e9e0:	3714      	adds	r7, #20
 800e9e2:	46bd      	mov	sp, r7
 800e9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e8:	4770      	bx	lr
 800e9ea:	bf00      	nop
 800e9ec:	200373f4 	.word	0x200373f4

0800e9f0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800e9f0:	b480      	push	{r7}
 800e9f2:	b085      	sub	sp, #20
 800e9f4:	af00      	add	r7, sp, #0
 800e9f6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800e9f8:	2300      	movs	r3, #0
 800e9fa:	60fb      	str	r3, [r7, #12]
 800e9fc:	e010      	b.n	800ea20 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800e9fe:	4a0d      	ldr	r2, [pc, #52]	; (800ea34 <clear_lock+0x44>)
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	011b      	lsls	r3, r3, #4
 800ea04:	4413      	add	r3, r2
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	687a      	ldr	r2, [r7, #4]
 800ea0a:	429a      	cmp	r2, r3
 800ea0c:	d105      	bne.n	800ea1a <clear_lock+0x2a>
 800ea0e:	4a09      	ldr	r2, [pc, #36]	; (800ea34 <clear_lock+0x44>)
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	011b      	lsls	r3, r3, #4
 800ea14:	4413      	add	r3, r2
 800ea16:	2200      	movs	r2, #0
 800ea18:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	3301      	adds	r3, #1
 800ea1e:	60fb      	str	r3, [r7, #12]
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	2b01      	cmp	r3, #1
 800ea24:	d9eb      	bls.n	800e9fe <clear_lock+0xe>
	}
}
 800ea26:	bf00      	nop
 800ea28:	3714      	adds	r7, #20
 800ea2a:	46bd      	mov	sp, r7
 800ea2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea30:	4770      	bx	lr
 800ea32:	bf00      	nop
 800ea34:	200373f4 	.word	0x200373f4

0800ea38 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800ea38:	b580      	push	{r7, lr}
 800ea3a:	b086      	sub	sp, #24
 800ea3c:	af00      	add	r7, sp, #0
 800ea3e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800ea40:	2300      	movs	r3, #0
 800ea42:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	78db      	ldrb	r3, [r3, #3]
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d034      	beq.n	800eab6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea50:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	7858      	ldrb	r0, [r3, #1]
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ea5c:	2301      	movs	r3, #1
 800ea5e:	697a      	ldr	r2, [r7, #20]
 800ea60:	f7ff fd40 	bl	800e4e4 <disk_write>
 800ea64:	4603      	mov	r3, r0
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d002      	beq.n	800ea70 <sync_window+0x38>
			res = FR_DISK_ERR;
 800ea6a:	2301      	movs	r3, #1
 800ea6c:	73fb      	strb	r3, [r7, #15]
 800ea6e:	e022      	b.n	800eab6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	2200      	movs	r2, #0
 800ea74:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea7a:	697a      	ldr	r2, [r7, #20]
 800ea7c:	1ad2      	subs	r2, r2, r3
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	6a1b      	ldr	r3, [r3, #32]
 800ea82:	429a      	cmp	r2, r3
 800ea84:	d217      	bcs.n	800eab6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	789b      	ldrb	r3, [r3, #2]
 800ea8a:	613b      	str	r3, [r7, #16]
 800ea8c:	e010      	b.n	800eab0 <sync_window+0x78>
					wsect += fs->fsize;
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	6a1b      	ldr	r3, [r3, #32]
 800ea92:	697a      	ldr	r2, [r7, #20]
 800ea94:	4413      	add	r3, r2
 800ea96:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	7858      	ldrb	r0, [r3, #1]
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800eaa2:	2301      	movs	r3, #1
 800eaa4:	697a      	ldr	r2, [r7, #20]
 800eaa6:	f7ff fd1d 	bl	800e4e4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800eaaa:	693b      	ldr	r3, [r7, #16]
 800eaac:	3b01      	subs	r3, #1
 800eaae:	613b      	str	r3, [r7, #16]
 800eab0:	693b      	ldr	r3, [r7, #16]
 800eab2:	2b01      	cmp	r3, #1
 800eab4:	d8eb      	bhi.n	800ea8e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800eab6:	7bfb      	ldrb	r3, [r7, #15]
}
 800eab8:	4618      	mov	r0, r3
 800eaba:	3718      	adds	r7, #24
 800eabc:	46bd      	mov	sp, r7
 800eabe:	bd80      	pop	{r7, pc}

0800eac0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800eac0:	b580      	push	{r7, lr}
 800eac2:	b084      	sub	sp, #16
 800eac4:	af00      	add	r7, sp, #0
 800eac6:	6078      	str	r0, [r7, #4]
 800eac8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800eaca:	2300      	movs	r3, #0
 800eacc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ead2:	683a      	ldr	r2, [r7, #0]
 800ead4:	429a      	cmp	r2, r3
 800ead6:	d01b      	beq.n	800eb10 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800ead8:	6878      	ldr	r0, [r7, #4]
 800eada:	f7ff ffad 	bl	800ea38 <sync_window>
 800eade:	4603      	mov	r3, r0
 800eae0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800eae2:	7bfb      	ldrb	r3, [r7, #15]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d113      	bne.n	800eb10 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	7858      	ldrb	r0, [r3, #1]
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800eaf2:	2301      	movs	r3, #1
 800eaf4:	683a      	ldr	r2, [r7, #0]
 800eaf6:	f7ff fcd5 	bl	800e4a4 <disk_read>
 800eafa:	4603      	mov	r3, r0
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d004      	beq.n	800eb0a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800eb00:	f04f 33ff 	mov.w	r3, #4294967295
 800eb04:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800eb06:	2301      	movs	r3, #1
 800eb08:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	683a      	ldr	r2, [r7, #0]
 800eb0e:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800eb10:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb12:	4618      	mov	r0, r3
 800eb14:	3710      	adds	r7, #16
 800eb16:	46bd      	mov	sp, r7
 800eb18:	bd80      	pop	{r7, pc}
	...

0800eb1c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800eb1c:	b580      	push	{r7, lr}
 800eb1e:	b084      	sub	sp, #16
 800eb20:	af00      	add	r7, sp, #0
 800eb22:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800eb24:	6878      	ldr	r0, [r7, #4]
 800eb26:	f7ff ff87 	bl	800ea38 <sync_window>
 800eb2a:	4603      	mov	r3, r0
 800eb2c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800eb2e:	7bfb      	ldrb	r3, [r7, #15]
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d159      	bne.n	800ebe8 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	781b      	ldrb	r3, [r3, #0]
 800eb38:	2b03      	cmp	r3, #3
 800eb3a:	d149      	bne.n	800ebd0 <sync_fs+0xb4>
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	791b      	ldrb	r3, [r3, #4]
 800eb40:	2b01      	cmp	r3, #1
 800eb42:	d145      	bne.n	800ebd0 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	899b      	ldrh	r3, [r3, #12]
 800eb4e:	461a      	mov	r2, r3
 800eb50:	2100      	movs	r1, #0
 800eb52:	f7ff fda8 	bl	800e6a6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	3338      	adds	r3, #56	; 0x38
 800eb5a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800eb5e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800eb62:	4618      	mov	r0, r3
 800eb64:	f7ff fd37 	bl	800e5d6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	3338      	adds	r3, #56	; 0x38
 800eb6c:	4921      	ldr	r1, [pc, #132]	; (800ebf4 <sync_fs+0xd8>)
 800eb6e:	4618      	mov	r0, r3
 800eb70:	f7ff fd4c 	bl	800e60c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	3338      	adds	r3, #56	; 0x38
 800eb78:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800eb7c:	491e      	ldr	r1, [pc, #120]	; (800ebf8 <sync_fs+0xdc>)
 800eb7e:	4618      	mov	r0, r3
 800eb80:	f7ff fd44 	bl	800e60c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	3338      	adds	r3, #56	; 0x38
 800eb88:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	695b      	ldr	r3, [r3, #20]
 800eb90:	4619      	mov	r1, r3
 800eb92:	4610      	mov	r0, r2
 800eb94:	f7ff fd3a 	bl	800e60c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	3338      	adds	r3, #56	; 0x38
 800eb9c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	691b      	ldr	r3, [r3, #16]
 800eba4:	4619      	mov	r1, r3
 800eba6:	4610      	mov	r0, r2
 800eba8:	f7ff fd30 	bl	800e60c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebb0:	1c5a      	adds	r2, r3, #1
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	7858      	ldrb	r0, [r3, #1]
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ebc4:	2301      	movs	r3, #1
 800ebc6:	f7ff fc8d 	bl	800e4e4 <disk_write>
			fs->fsi_flag = 0;
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	2200      	movs	r2, #0
 800ebce:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	785b      	ldrb	r3, [r3, #1]
 800ebd4:	2200      	movs	r2, #0
 800ebd6:	2100      	movs	r1, #0
 800ebd8:	4618      	mov	r0, r3
 800ebda:	f7ff fca3 	bl	800e524 <disk_ioctl>
 800ebde:	4603      	mov	r3, r0
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d001      	beq.n	800ebe8 <sync_fs+0xcc>
 800ebe4:	2301      	movs	r3, #1
 800ebe6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800ebe8:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebea:	4618      	mov	r0, r3
 800ebec:	3710      	adds	r7, #16
 800ebee:	46bd      	mov	sp, r7
 800ebf0:	bd80      	pop	{r7, pc}
 800ebf2:	bf00      	nop
 800ebf4:	41615252 	.word	0x41615252
 800ebf8:	61417272 	.word	0x61417272

0800ebfc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800ebfc:	b480      	push	{r7}
 800ebfe:	b083      	sub	sp, #12
 800ec00:	af00      	add	r7, sp, #0
 800ec02:	6078      	str	r0, [r7, #4]
 800ec04:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800ec06:	683b      	ldr	r3, [r7, #0]
 800ec08:	3b02      	subs	r3, #2
 800ec0a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	69db      	ldr	r3, [r3, #28]
 800ec10:	3b02      	subs	r3, #2
 800ec12:	683a      	ldr	r2, [r7, #0]
 800ec14:	429a      	cmp	r2, r3
 800ec16:	d301      	bcc.n	800ec1c <clust2sect+0x20>
 800ec18:	2300      	movs	r3, #0
 800ec1a:	e008      	b.n	800ec2e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	895b      	ldrh	r3, [r3, #10]
 800ec20:	461a      	mov	r2, r3
 800ec22:	683b      	ldr	r3, [r7, #0]
 800ec24:	fb03 f202 	mul.w	r2, r3, r2
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec2c:	4413      	add	r3, r2
}
 800ec2e:	4618      	mov	r0, r3
 800ec30:	370c      	adds	r7, #12
 800ec32:	46bd      	mov	sp, r7
 800ec34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec38:	4770      	bx	lr

0800ec3a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800ec3a:	b580      	push	{r7, lr}
 800ec3c:	b086      	sub	sp, #24
 800ec3e:	af00      	add	r7, sp, #0
 800ec40:	6078      	str	r0, [r7, #4]
 800ec42:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800ec4a:	683b      	ldr	r3, [r7, #0]
 800ec4c:	2b01      	cmp	r3, #1
 800ec4e:	d904      	bls.n	800ec5a <get_fat+0x20>
 800ec50:	693b      	ldr	r3, [r7, #16]
 800ec52:	69db      	ldr	r3, [r3, #28]
 800ec54:	683a      	ldr	r2, [r7, #0]
 800ec56:	429a      	cmp	r2, r3
 800ec58:	d302      	bcc.n	800ec60 <get_fat+0x26>
		val = 1;	/* Internal error */
 800ec5a:	2301      	movs	r3, #1
 800ec5c:	617b      	str	r3, [r7, #20]
 800ec5e:	e0b7      	b.n	800edd0 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800ec60:	f04f 33ff 	mov.w	r3, #4294967295
 800ec64:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800ec66:	693b      	ldr	r3, [r7, #16]
 800ec68:	781b      	ldrb	r3, [r3, #0]
 800ec6a:	2b02      	cmp	r3, #2
 800ec6c:	d05a      	beq.n	800ed24 <get_fat+0xea>
 800ec6e:	2b03      	cmp	r3, #3
 800ec70:	d07d      	beq.n	800ed6e <get_fat+0x134>
 800ec72:	2b01      	cmp	r3, #1
 800ec74:	f040 80a2 	bne.w	800edbc <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800ec78:	683b      	ldr	r3, [r7, #0]
 800ec7a:	60fb      	str	r3, [r7, #12]
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	085b      	lsrs	r3, r3, #1
 800ec80:	68fa      	ldr	r2, [r7, #12]
 800ec82:	4413      	add	r3, r2
 800ec84:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ec86:	693b      	ldr	r3, [r7, #16]
 800ec88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ec8a:	693b      	ldr	r3, [r7, #16]
 800ec8c:	899b      	ldrh	r3, [r3, #12]
 800ec8e:	4619      	mov	r1, r3
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	fbb3 f3f1 	udiv	r3, r3, r1
 800ec96:	4413      	add	r3, r2
 800ec98:	4619      	mov	r1, r3
 800ec9a:	6938      	ldr	r0, [r7, #16]
 800ec9c:	f7ff ff10 	bl	800eac0 <move_window>
 800eca0:	4603      	mov	r3, r0
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	f040 808d 	bne.w	800edc2 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	1c5a      	adds	r2, r3, #1
 800ecac:	60fa      	str	r2, [r7, #12]
 800ecae:	693a      	ldr	r2, [r7, #16]
 800ecb0:	8992      	ldrh	r2, [r2, #12]
 800ecb2:	fbb3 f1f2 	udiv	r1, r3, r2
 800ecb6:	fb02 f201 	mul.w	r2, r2, r1
 800ecba:	1a9b      	subs	r3, r3, r2
 800ecbc:	693a      	ldr	r2, [r7, #16]
 800ecbe:	4413      	add	r3, r2
 800ecc0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ecc4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ecc6:	693b      	ldr	r3, [r7, #16]
 800ecc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ecca:	693b      	ldr	r3, [r7, #16]
 800eccc:	899b      	ldrh	r3, [r3, #12]
 800ecce:	4619      	mov	r1, r3
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	fbb3 f3f1 	udiv	r3, r3, r1
 800ecd6:	4413      	add	r3, r2
 800ecd8:	4619      	mov	r1, r3
 800ecda:	6938      	ldr	r0, [r7, #16]
 800ecdc:	f7ff fef0 	bl	800eac0 <move_window>
 800ece0:	4603      	mov	r3, r0
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d16f      	bne.n	800edc6 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800ece6:	693b      	ldr	r3, [r7, #16]
 800ece8:	899b      	ldrh	r3, [r3, #12]
 800ecea:	461a      	mov	r2, r3
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	fbb3 f1f2 	udiv	r1, r3, r2
 800ecf2:	fb02 f201 	mul.w	r2, r2, r1
 800ecf6:	1a9b      	subs	r3, r3, r2
 800ecf8:	693a      	ldr	r2, [r7, #16]
 800ecfa:	4413      	add	r3, r2
 800ecfc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ed00:	021b      	lsls	r3, r3, #8
 800ed02:	461a      	mov	r2, r3
 800ed04:	68bb      	ldr	r3, [r7, #8]
 800ed06:	4313      	orrs	r3, r2
 800ed08:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800ed0a:	683b      	ldr	r3, [r7, #0]
 800ed0c:	f003 0301 	and.w	r3, r3, #1
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d002      	beq.n	800ed1a <get_fat+0xe0>
 800ed14:	68bb      	ldr	r3, [r7, #8]
 800ed16:	091b      	lsrs	r3, r3, #4
 800ed18:	e002      	b.n	800ed20 <get_fat+0xe6>
 800ed1a:	68bb      	ldr	r3, [r7, #8]
 800ed1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ed20:	617b      	str	r3, [r7, #20]
			break;
 800ed22:	e055      	b.n	800edd0 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ed24:	693b      	ldr	r3, [r7, #16]
 800ed26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ed28:	693b      	ldr	r3, [r7, #16]
 800ed2a:	899b      	ldrh	r3, [r3, #12]
 800ed2c:	085b      	lsrs	r3, r3, #1
 800ed2e:	b29b      	uxth	r3, r3
 800ed30:	4619      	mov	r1, r3
 800ed32:	683b      	ldr	r3, [r7, #0]
 800ed34:	fbb3 f3f1 	udiv	r3, r3, r1
 800ed38:	4413      	add	r3, r2
 800ed3a:	4619      	mov	r1, r3
 800ed3c:	6938      	ldr	r0, [r7, #16]
 800ed3e:	f7ff febf 	bl	800eac0 <move_window>
 800ed42:	4603      	mov	r3, r0
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d140      	bne.n	800edca <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800ed48:	693b      	ldr	r3, [r7, #16]
 800ed4a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ed4e:	683b      	ldr	r3, [r7, #0]
 800ed50:	005b      	lsls	r3, r3, #1
 800ed52:	693a      	ldr	r2, [r7, #16]
 800ed54:	8992      	ldrh	r2, [r2, #12]
 800ed56:	fbb3 f0f2 	udiv	r0, r3, r2
 800ed5a:	fb02 f200 	mul.w	r2, r2, r0
 800ed5e:	1a9b      	subs	r3, r3, r2
 800ed60:	440b      	add	r3, r1
 800ed62:	4618      	mov	r0, r3
 800ed64:	f7ff fbfc 	bl	800e560 <ld_word>
 800ed68:	4603      	mov	r3, r0
 800ed6a:	617b      	str	r3, [r7, #20]
			break;
 800ed6c:	e030      	b.n	800edd0 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ed6e:	693b      	ldr	r3, [r7, #16]
 800ed70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ed72:	693b      	ldr	r3, [r7, #16]
 800ed74:	899b      	ldrh	r3, [r3, #12]
 800ed76:	089b      	lsrs	r3, r3, #2
 800ed78:	b29b      	uxth	r3, r3
 800ed7a:	4619      	mov	r1, r3
 800ed7c:	683b      	ldr	r3, [r7, #0]
 800ed7e:	fbb3 f3f1 	udiv	r3, r3, r1
 800ed82:	4413      	add	r3, r2
 800ed84:	4619      	mov	r1, r3
 800ed86:	6938      	ldr	r0, [r7, #16]
 800ed88:	f7ff fe9a 	bl	800eac0 <move_window>
 800ed8c:	4603      	mov	r3, r0
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d11d      	bne.n	800edce <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800ed92:	693b      	ldr	r3, [r7, #16]
 800ed94:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ed98:	683b      	ldr	r3, [r7, #0]
 800ed9a:	009b      	lsls	r3, r3, #2
 800ed9c:	693a      	ldr	r2, [r7, #16]
 800ed9e:	8992      	ldrh	r2, [r2, #12]
 800eda0:	fbb3 f0f2 	udiv	r0, r3, r2
 800eda4:	fb02 f200 	mul.w	r2, r2, r0
 800eda8:	1a9b      	subs	r3, r3, r2
 800edaa:	440b      	add	r3, r1
 800edac:	4618      	mov	r0, r3
 800edae:	f7ff fbef 	bl	800e590 <ld_dword>
 800edb2:	4603      	mov	r3, r0
 800edb4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800edb8:	617b      	str	r3, [r7, #20]
			break;
 800edba:	e009      	b.n	800edd0 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800edbc:	2301      	movs	r3, #1
 800edbe:	617b      	str	r3, [r7, #20]
 800edc0:	e006      	b.n	800edd0 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800edc2:	bf00      	nop
 800edc4:	e004      	b.n	800edd0 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800edc6:	bf00      	nop
 800edc8:	e002      	b.n	800edd0 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800edca:	bf00      	nop
 800edcc:	e000      	b.n	800edd0 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800edce:	bf00      	nop
		}
	}

	return val;
 800edd0:	697b      	ldr	r3, [r7, #20]
}
 800edd2:	4618      	mov	r0, r3
 800edd4:	3718      	adds	r7, #24
 800edd6:	46bd      	mov	sp, r7
 800edd8:	bd80      	pop	{r7, pc}

0800edda <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800edda:	b590      	push	{r4, r7, lr}
 800eddc:	b089      	sub	sp, #36	; 0x24
 800edde:	af00      	add	r7, sp, #0
 800ede0:	60f8      	str	r0, [r7, #12]
 800ede2:	60b9      	str	r1, [r7, #8]
 800ede4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800ede6:	2302      	movs	r3, #2
 800ede8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800edea:	68bb      	ldr	r3, [r7, #8]
 800edec:	2b01      	cmp	r3, #1
 800edee:	f240 8106 	bls.w	800effe <put_fat+0x224>
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	69db      	ldr	r3, [r3, #28]
 800edf6:	68ba      	ldr	r2, [r7, #8]
 800edf8:	429a      	cmp	r2, r3
 800edfa:	f080 8100 	bcs.w	800effe <put_fat+0x224>
		switch (fs->fs_type) {
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	781b      	ldrb	r3, [r3, #0]
 800ee02:	2b02      	cmp	r3, #2
 800ee04:	f000 8088 	beq.w	800ef18 <put_fat+0x13e>
 800ee08:	2b03      	cmp	r3, #3
 800ee0a:	f000 80b0 	beq.w	800ef6e <put_fat+0x194>
 800ee0e:	2b01      	cmp	r3, #1
 800ee10:	f040 80f5 	bne.w	800effe <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800ee14:	68bb      	ldr	r3, [r7, #8]
 800ee16:	61bb      	str	r3, [r7, #24]
 800ee18:	69bb      	ldr	r3, [r7, #24]
 800ee1a:	085b      	lsrs	r3, r3, #1
 800ee1c:	69ba      	ldr	r2, [r7, #24]
 800ee1e:	4413      	add	r3, r2
 800ee20:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	899b      	ldrh	r3, [r3, #12]
 800ee2a:	4619      	mov	r1, r3
 800ee2c:	69bb      	ldr	r3, [r7, #24]
 800ee2e:	fbb3 f3f1 	udiv	r3, r3, r1
 800ee32:	4413      	add	r3, r2
 800ee34:	4619      	mov	r1, r3
 800ee36:	68f8      	ldr	r0, [r7, #12]
 800ee38:	f7ff fe42 	bl	800eac0 <move_window>
 800ee3c:	4603      	mov	r3, r0
 800ee3e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ee40:	7ffb      	ldrb	r3, [r7, #31]
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	f040 80d4 	bne.w	800eff0 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ee4e:	69bb      	ldr	r3, [r7, #24]
 800ee50:	1c5a      	adds	r2, r3, #1
 800ee52:	61ba      	str	r2, [r7, #24]
 800ee54:	68fa      	ldr	r2, [r7, #12]
 800ee56:	8992      	ldrh	r2, [r2, #12]
 800ee58:	fbb3 f0f2 	udiv	r0, r3, r2
 800ee5c:	fb02 f200 	mul.w	r2, r2, r0
 800ee60:	1a9b      	subs	r3, r3, r2
 800ee62:	440b      	add	r3, r1
 800ee64:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800ee66:	68bb      	ldr	r3, [r7, #8]
 800ee68:	f003 0301 	and.w	r3, r3, #1
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d00d      	beq.n	800ee8c <put_fat+0xb2>
 800ee70:	697b      	ldr	r3, [r7, #20]
 800ee72:	781b      	ldrb	r3, [r3, #0]
 800ee74:	b25b      	sxtb	r3, r3
 800ee76:	f003 030f 	and.w	r3, r3, #15
 800ee7a:	b25a      	sxtb	r2, r3
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	b2db      	uxtb	r3, r3
 800ee80:	011b      	lsls	r3, r3, #4
 800ee82:	b25b      	sxtb	r3, r3
 800ee84:	4313      	orrs	r3, r2
 800ee86:	b25b      	sxtb	r3, r3
 800ee88:	b2db      	uxtb	r3, r3
 800ee8a:	e001      	b.n	800ee90 <put_fat+0xb6>
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	b2db      	uxtb	r3, r3
 800ee90:	697a      	ldr	r2, [r7, #20]
 800ee92:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	2201      	movs	r2, #1
 800ee98:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	899b      	ldrh	r3, [r3, #12]
 800eea2:	4619      	mov	r1, r3
 800eea4:	69bb      	ldr	r3, [r7, #24]
 800eea6:	fbb3 f3f1 	udiv	r3, r3, r1
 800eeaa:	4413      	add	r3, r2
 800eeac:	4619      	mov	r1, r3
 800eeae:	68f8      	ldr	r0, [r7, #12]
 800eeb0:	f7ff fe06 	bl	800eac0 <move_window>
 800eeb4:	4603      	mov	r3, r0
 800eeb6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800eeb8:	7ffb      	ldrb	r3, [r7, #31]
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	f040 809a 	bne.w	800eff4 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	899b      	ldrh	r3, [r3, #12]
 800eeca:	461a      	mov	r2, r3
 800eecc:	69bb      	ldr	r3, [r7, #24]
 800eece:	fbb3 f0f2 	udiv	r0, r3, r2
 800eed2:	fb02 f200 	mul.w	r2, r2, r0
 800eed6:	1a9b      	subs	r3, r3, r2
 800eed8:	440b      	add	r3, r1
 800eeda:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800eedc:	68bb      	ldr	r3, [r7, #8]
 800eede:	f003 0301 	and.w	r3, r3, #1
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d003      	beq.n	800eeee <put_fat+0x114>
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	091b      	lsrs	r3, r3, #4
 800eeea:	b2db      	uxtb	r3, r3
 800eeec:	e00e      	b.n	800ef0c <put_fat+0x132>
 800eeee:	697b      	ldr	r3, [r7, #20]
 800eef0:	781b      	ldrb	r3, [r3, #0]
 800eef2:	b25b      	sxtb	r3, r3
 800eef4:	f023 030f 	bic.w	r3, r3, #15
 800eef8:	b25a      	sxtb	r2, r3
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	0a1b      	lsrs	r3, r3, #8
 800eefe:	b25b      	sxtb	r3, r3
 800ef00:	f003 030f 	and.w	r3, r3, #15
 800ef04:	b25b      	sxtb	r3, r3
 800ef06:	4313      	orrs	r3, r2
 800ef08:	b25b      	sxtb	r3, r3
 800ef0a:	b2db      	uxtb	r3, r3
 800ef0c:	697a      	ldr	r2, [r7, #20]
 800ef0e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	2201      	movs	r2, #1
 800ef14:	70da      	strb	r2, [r3, #3]
			break;
 800ef16:	e072      	b.n	800effe <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	899b      	ldrh	r3, [r3, #12]
 800ef20:	085b      	lsrs	r3, r3, #1
 800ef22:	b29b      	uxth	r3, r3
 800ef24:	4619      	mov	r1, r3
 800ef26:	68bb      	ldr	r3, [r7, #8]
 800ef28:	fbb3 f3f1 	udiv	r3, r3, r1
 800ef2c:	4413      	add	r3, r2
 800ef2e:	4619      	mov	r1, r3
 800ef30:	68f8      	ldr	r0, [r7, #12]
 800ef32:	f7ff fdc5 	bl	800eac0 <move_window>
 800ef36:	4603      	mov	r3, r0
 800ef38:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ef3a:	7ffb      	ldrb	r3, [r7, #31]
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d15b      	bne.n	800eff8 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ef46:	68bb      	ldr	r3, [r7, #8]
 800ef48:	005b      	lsls	r3, r3, #1
 800ef4a:	68fa      	ldr	r2, [r7, #12]
 800ef4c:	8992      	ldrh	r2, [r2, #12]
 800ef4e:	fbb3 f0f2 	udiv	r0, r3, r2
 800ef52:	fb02 f200 	mul.w	r2, r2, r0
 800ef56:	1a9b      	subs	r3, r3, r2
 800ef58:	440b      	add	r3, r1
 800ef5a:	687a      	ldr	r2, [r7, #4]
 800ef5c:	b292      	uxth	r2, r2
 800ef5e:	4611      	mov	r1, r2
 800ef60:	4618      	mov	r0, r3
 800ef62:	f7ff fb38 	bl	800e5d6 <st_word>
			fs->wflag = 1;
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	2201      	movs	r2, #1
 800ef6a:	70da      	strb	r2, [r3, #3]
			break;
 800ef6c:	e047      	b.n	800effe <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	899b      	ldrh	r3, [r3, #12]
 800ef76:	089b      	lsrs	r3, r3, #2
 800ef78:	b29b      	uxth	r3, r3
 800ef7a:	4619      	mov	r1, r3
 800ef7c:	68bb      	ldr	r3, [r7, #8]
 800ef7e:	fbb3 f3f1 	udiv	r3, r3, r1
 800ef82:	4413      	add	r3, r2
 800ef84:	4619      	mov	r1, r3
 800ef86:	68f8      	ldr	r0, [r7, #12]
 800ef88:	f7ff fd9a 	bl	800eac0 <move_window>
 800ef8c:	4603      	mov	r3, r0
 800ef8e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ef90:	7ffb      	ldrb	r3, [r7, #31]
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d132      	bne.n	800effc <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800efa2:	68bb      	ldr	r3, [r7, #8]
 800efa4:	009b      	lsls	r3, r3, #2
 800efa6:	68fa      	ldr	r2, [r7, #12]
 800efa8:	8992      	ldrh	r2, [r2, #12]
 800efaa:	fbb3 f0f2 	udiv	r0, r3, r2
 800efae:	fb02 f200 	mul.w	r2, r2, r0
 800efb2:	1a9b      	subs	r3, r3, r2
 800efb4:	440b      	add	r3, r1
 800efb6:	4618      	mov	r0, r3
 800efb8:	f7ff faea 	bl	800e590 <ld_dword>
 800efbc:	4603      	mov	r3, r0
 800efbe:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800efc2:	4323      	orrs	r3, r4
 800efc4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800efcc:	68bb      	ldr	r3, [r7, #8]
 800efce:	009b      	lsls	r3, r3, #2
 800efd0:	68fa      	ldr	r2, [r7, #12]
 800efd2:	8992      	ldrh	r2, [r2, #12]
 800efd4:	fbb3 f0f2 	udiv	r0, r3, r2
 800efd8:	fb02 f200 	mul.w	r2, r2, r0
 800efdc:	1a9b      	subs	r3, r3, r2
 800efde:	440b      	add	r3, r1
 800efe0:	6879      	ldr	r1, [r7, #4]
 800efe2:	4618      	mov	r0, r3
 800efe4:	f7ff fb12 	bl	800e60c <st_dword>
			fs->wflag = 1;
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	2201      	movs	r2, #1
 800efec:	70da      	strb	r2, [r3, #3]
			break;
 800efee:	e006      	b.n	800effe <put_fat+0x224>
			if (res != FR_OK) break;
 800eff0:	bf00      	nop
 800eff2:	e004      	b.n	800effe <put_fat+0x224>
			if (res != FR_OK) break;
 800eff4:	bf00      	nop
 800eff6:	e002      	b.n	800effe <put_fat+0x224>
			if (res != FR_OK) break;
 800eff8:	bf00      	nop
 800effa:	e000      	b.n	800effe <put_fat+0x224>
			if (res != FR_OK) break;
 800effc:	bf00      	nop
		}
	}
	return res;
 800effe:	7ffb      	ldrb	r3, [r7, #31]
}
 800f000:	4618      	mov	r0, r3
 800f002:	3724      	adds	r7, #36	; 0x24
 800f004:	46bd      	mov	sp, r7
 800f006:	bd90      	pop	{r4, r7, pc}

0800f008 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800f008:	b580      	push	{r7, lr}
 800f00a:	b088      	sub	sp, #32
 800f00c:	af00      	add	r7, sp, #0
 800f00e:	60f8      	str	r0, [r7, #12]
 800f010:	60b9      	str	r1, [r7, #8]
 800f012:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800f014:	2300      	movs	r3, #0
 800f016:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800f01e:	68bb      	ldr	r3, [r7, #8]
 800f020:	2b01      	cmp	r3, #1
 800f022:	d904      	bls.n	800f02e <remove_chain+0x26>
 800f024:	69bb      	ldr	r3, [r7, #24]
 800f026:	69db      	ldr	r3, [r3, #28]
 800f028:	68ba      	ldr	r2, [r7, #8]
 800f02a:	429a      	cmp	r2, r3
 800f02c:	d301      	bcc.n	800f032 <remove_chain+0x2a>
 800f02e:	2302      	movs	r3, #2
 800f030:	e04b      	b.n	800f0ca <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	2b00      	cmp	r3, #0
 800f036:	d00c      	beq.n	800f052 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800f038:	f04f 32ff 	mov.w	r2, #4294967295
 800f03c:	6879      	ldr	r1, [r7, #4]
 800f03e:	69b8      	ldr	r0, [r7, #24]
 800f040:	f7ff fecb 	bl	800edda <put_fat>
 800f044:	4603      	mov	r3, r0
 800f046:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800f048:	7ffb      	ldrb	r3, [r7, #31]
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d001      	beq.n	800f052 <remove_chain+0x4a>
 800f04e:	7ffb      	ldrb	r3, [r7, #31]
 800f050:	e03b      	b.n	800f0ca <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800f052:	68b9      	ldr	r1, [r7, #8]
 800f054:	68f8      	ldr	r0, [r7, #12]
 800f056:	f7ff fdf0 	bl	800ec3a <get_fat>
 800f05a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800f05c:	697b      	ldr	r3, [r7, #20]
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d031      	beq.n	800f0c6 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800f062:	697b      	ldr	r3, [r7, #20]
 800f064:	2b01      	cmp	r3, #1
 800f066:	d101      	bne.n	800f06c <remove_chain+0x64>
 800f068:	2302      	movs	r3, #2
 800f06a:	e02e      	b.n	800f0ca <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800f06c:	697b      	ldr	r3, [r7, #20]
 800f06e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f072:	d101      	bne.n	800f078 <remove_chain+0x70>
 800f074:	2301      	movs	r3, #1
 800f076:	e028      	b.n	800f0ca <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800f078:	2200      	movs	r2, #0
 800f07a:	68b9      	ldr	r1, [r7, #8]
 800f07c:	69b8      	ldr	r0, [r7, #24]
 800f07e:	f7ff feac 	bl	800edda <put_fat>
 800f082:	4603      	mov	r3, r0
 800f084:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800f086:	7ffb      	ldrb	r3, [r7, #31]
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d001      	beq.n	800f090 <remove_chain+0x88>
 800f08c:	7ffb      	ldrb	r3, [r7, #31]
 800f08e:	e01c      	b.n	800f0ca <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800f090:	69bb      	ldr	r3, [r7, #24]
 800f092:	695a      	ldr	r2, [r3, #20]
 800f094:	69bb      	ldr	r3, [r7, #24]
 800f096:	69db      	ldr	r3, [r3, #28]
 800f098:	3b02      	subs	r3, #2
 800f09a:	429a      	cmp	r2, r3
 800f09c:	d20b      	bcs.n	800f0b6 <remove_chain+0xae>
			fs->free_clst++;
 800f09e:	69bb      	ldr	r3, [r7, #24]
 800f0a0:	695b      	ldr	r3, [r3, #20]
 800f0a2:	1c5a      	adds	r2, r3, #1
 800f0a4:	69bb      	ldr	r3, [r7, #24]
 800f0a6:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800f0a8:	69bb      	ldr	r3, [r7, #24]
 800f0aa:	791b      	ldrb	r3, [r3, #4]
 800f0ac:	f043 0301 	orr.w	r3, r3, #1
 800f0b0:	b2da      	uxtb	r2, r3
 800f0b2:	69bb      	ldr	r3, [r7, #24]
 800f0b4:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800f0b6:	697b      	ldr	r3, [r7, #20]
 800f0b8:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800f0ba:	69bb      	ldr	r3, [r7, #24]
 800f0bc:	69db      	ldr	r3, [r3, #28]
 800f0be:	68ba      	ldr	r2, [r7, #8]
 800f0c0:	429a      	cmp	r2, r3
 800f0c2:	d3c6      	bcc.n	800f052 <remove_chain+0x4a>
 800f0c4:	e000      	b.n	800f0c8 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800f0c6:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800f0c8:	2300      	movs	r3, #0
}
 800f0ca:	4618      	mov	r0, r3
 800f0cc:	3720      	adds	r7, #32
 800f0ce:	46bd      	mov	sp, r7
 800f0d0:	bd80      	pop	{r7, pc}

0800f0d2 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800f0d2:	b580      	push	{r7, lr}
 800f0d4:	b088      	sub	sp, #32
 800f0d6:	af00      	add	r7, sp, #0
 800f0d8:	6078      	str	r0, [r7, #4]
 800f0da:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800f0e2:	683b      	ldr	r3, [r7, #0]
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d10d      	bne.n	800f104 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800f0e8:	693b      	ldr	r3, [r7, #16]
 800f0ea:	691b      	ldr	r3, [r3, #16]
 800f0ec:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800f0ee:	69bb      	ldr	r3, [r7, #24]
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d004      	beq.n	800f0fe <create_chain+0x2c>
 800f0f4:	693b      	ldr	r3, [r7, #16]
 800f0f6:	69db      	ldr	r3, [r3, #28]
 800f0f8:	69ba      	ldr	r2, [r7, #24]
 800f0fa:	429a      	cmp	r2, r3
 800f0fc:	d31b      	bcc.n	800f136 <create_chain+0x64>
 800f0fe:	2301      	movs	r3, #1
 800f100:	61bb      	str	r3, [r7, #24]
 800f102:	e018      	b.n	800f136 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800f104:	6839      	ldr	r1, [r7, #0]
 800f106:	6878      	ldr	r0, [r7, #4]
 800f108:	f7ff fd97 	bl	800ec3a <get_fat>
 800f10c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	2b01      	cmp	r3, #1
 800f112:	d801      	bhi.n	800f118 <create_chain+0x46>
 800f114:	2301      	movs	r3, #1
 800f116:	e070      	b.n	800f1fa <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f11e:	d101      	bne.n	800f124 <create_chain+0x52>
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	e06a      	b.n	800f1fa <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800f124:	693b      	ldr	r3, [r7, #16]
 800f126:	69db      	ldr	r3, [r3, #28]
 800f128:	68fa      	ldr	r2, [r7, #12]
 800f12a:	429a      	cmp	r2, r3
 800f12c:	d201      	bcs.n	800f132 <create_chain+0x60>
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	e063      	b.n	800f1fa <create_chain+0x128>
		scl = clst;
 800f132:	683b      	ldr	r3, [r7, #0]
 800f134:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800f136:	69bb      	ldr	r3, [r7, #24]
 800f138:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800f13a:	69fb      	ldr	r3, [r7, #28]
 800f13c:	3301      	adds	r3, #1
 800f13e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800f140:	693b      	ldr	r3, [r7, #16]
 800f142:	69db      	ldr	r3, [r3, #28]
 800f144:	69fa      	ldr	r2, [r7, #28]
 800f146:	429a      	cmp	r2, r3
 800f148:	d307      	bcc.n	800f15a <create_chain+0x88>
				ncl = 2;
 800f14a:	2302      	movs	r3, #2
 800f14c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800f14e:	69fa      	ldr	r2, [r7, #28]
 800f150:	69bb      	ldr	r3, [r7, #24]
 800f152:	429a      	cmp	r2, r3
 800f154:	d901      	bls.n	800f15a <create_chain+0x88>
 800f156:	2300      	movs	r3, #0
 800f158:	e04f      	b.n	800f1fa <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800f15a:	69f9      	ldr	r1, [r7, #28]
 800f15c:	6878      	ldr	r0, [r7, #4]
 800f15e:	f7ff fd6c 	bl	800ec3a <get_fat>
 800f162:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	2b00      	cmp	r3, #0
 800f168:	d00e      	beq.n	800f188 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	2b01      	cmp	r3, #1
 800f16e:	d003      	beq.n	800f178 <create_chain+0xa6>
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f176:	d101      	bne.n	800f17c <create_chain+0xaa>
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	e03e      	b.n	800f1fa <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800f17c:	69fa      	ldr	r2, [r7, #28]
 800f17e:	69bb      	ldr	r3, [r7, #24]
 800f180:	429a      	cmp	r2, r3
 800f182:	d1da      	bne.n	800f13a <create_chain+0x68>
 800f184:	2300      	movs	r3, #0
 800f186:	e038      	b.n	800f1fa <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800f188:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800f18a:	f04f 32ff 	mov.w	r2, #4294967295
 800f18e:	69f9      	ldr	r1, [r7, #28]
 800f190:	6938      	ldr	r0, [r7, #16]
 800f192:	f7ff fe22 	bl	800edda <put_fat>
 800f196:	4603      	mov	r3, r0
 800f198:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800f19a:	7dfb      	ldrb	r3, [r7, #23]
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d109      	bne.n	800f1b4 <create_chain+0xe2>
 800f1a0:	683b      	ldr	r3, [r7, #0]
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d006      	beq.n	800f1b4 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800f1a6:	69fa      	ldr	r2, [r7, #28]
 800f1a8:	6839      	ldr	r1, [r7, #0]
 800f1aa:	6938      	ldr	r0, [r7, #16]
 800f1ac:	f7ff fe15 	bl	800edda <put_fat>
 800f1b0:	4603      	mov	r3, r0
 800f1b2:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800f1b4:	7dfb      	ldrb	r3, [r7, #23]
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d116      	bne.n	800f1e8 <create_chain+0x116>
		fs->last_clst = ncl;
 800f1ba:	693b      	ldr	r3, [r7, #16]
 800f1bc:	69fa      	ldr	r2, [r7, #28]
 800f1be:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800f1c0:	693b      	ldr	r3, [r7, #16]
 800f1c2:	695a      	ldr	r2, [r3, #20]
 800f1c4:	693b      	ldr	r3, [r7, #16]
 800f1c6:	69db      	ldr	r3, [r3, #28]
 800f1c8:	3b02      	subs	r3, #2
 800f1ca:	429a      	cmp	r2, r3
 800f1cc:	d804      	bhi.n	800f1d8 <create_chain+0x106>
 800f1ce:	693b      	ldr	r3, [r7, #16]
 800f1d0:	695b      	ldr	r3, [r3, #20]
 800f1d2:	1e5a      	subs	r2, r3, #1
 800f1d4:	693b      	ldr	r3, [r7, #16]
 800f1d6:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800f1d8:	693b      	ldr	r3, [r7, #16]
 800f1da:	791b      	ldrb	r3, [r3, #4]
 800f1dc:	f043 0301 	orr.w	r3, r3, #1
 800f1e0:	b2da      	uxtb	r2, r3
 800f1e2:	693b      	ldr	r3, [r7, #16]
 800f1e4:	711a      	strb	r2, [r3, #4]
 800f1e6:	e007      	b.n	800f1f8 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800f1e8:	7dfb      	ldrb	r3, [r7, #23]
 800f1ea:	2b01      	cmp	r3, #1
 800f1ec:	d102      	bne.n	800f1f4 <create_chain+0x122>
 800f1ee:	f04f 33ff 	mov.w	r3, #4294967295
 800f1f2:	e000      	b.n	800f1f6 <create_chain+0x124>
 800f1f4:	2301      	movs	r3, #1
 800f1f6:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800f1f8:	69fb      	ldr	r3, [r7, #28]
}
 800f1fa:	4618      	mov	r0, r3
 800f1fc:	3720      	adds	r7, #32
 800f1fe:	46bd      	mov	sp, r7
 800f200:	bd80      	pop	{r7, pc}

0800f202 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800f202:	b480      	push	{r7}
 800f204:	b087      	sub	sp, #28
 800f206:	af00      	add	r7, sp, #0
 800f208:	6078      	str	r0, [r7, #4]
 800f20a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f216:	3304      	adds	r3, #4
 800f218:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	899b      	ldrh	r3, [r3, #12]
 800f21e:	461a      	mov	r2, r3
 800f220:	683b      	ldr	r3, [r7, #0]
 800f222:	fbb3 f3f2 	udiv	r3, r3, r2
 800f226:	68fa      	ldr	r2, [r7, #12]
 800f228:	8952      	ldrh	r2, [r2, #10]
 800f22a:	fbb3 f3f2 	udiv	r3, r3, r2
 800f22e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f230:	693b      	ldr	r3, [r7, #16]
 800f232:	1d1a      	adds	r2, r3, #4
 800f234:	613a      	str	r2, [r7, #16]
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800f23a:	68bb      	ldr	r3, [r7, #8]
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d101      	bne.n	800f244 <clmt_clust+0x42>
 800f240:	2300      	movs	r3, #0
 800f242:	e010      	b.n	800f266 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800f244:	697a      	ldr	r2, [r7, #20]
 800f246:	68bb      	ldr	r3, [r7, #8]
 800f248:	429a      	cmp	r2, r3
 800f24a:	d307      	bcc.n	800f25c <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800f24c:	697a      	ldr	r2, [r7, #20]
 800f24e:	68bb      	ldr	r3, [r7, #8]
 800f250:	1ad3      	subs	r3, r2, r3
 800f252:	617b      	str	r3, [r7, #20]
 800f254:	693b      	ldr	r3, [r7, #16]
 800f256:	3304      	adds	r3, #4
 800f258:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f25a:	e7e9      	b.n	800f230 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800f25c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800f25e:	693b      	ldr	r3, [r7, #16]
 800f260:	681a      	ldr	r2, [r3, #0]
 800f262:	697b      	ldr	r3, [r7, #20]
 800f264:	4413      	add	r3, r2
}
 800f266:	4618      	mov	r0, r3
 800f268:	371c      	adds	r7, #28
 800f26a:	46bd      	mov	sp, r7
 800f26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f270:	4770      	bx	lr

0800f272 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800f272:	b580      	push	{r7, lr}
 800f274:	b086      	sub	sp, #24
 800f276:	af00      	add	r7, sp, #0
 800f278:	6078      	str	r0, [r7, #4]
 800f27a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800f282:	683b      	ldr	r3, [r7, #0]
 800f284:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f288:	d204      	bcs.n	800f294 <dir_sdi+0x22>
 800f28a:	683b      	ldr	r3, [r7, #0]
 800f28c:	f003 031f 	and.w	r3, r3, #31
 800f290:	2b00      	cmp	r3, #0
 800f292:	d001      	beq.n	800f298 <dir_sdi+0x26>
		return FR_INT_ERR;
 800f294:	2302      	movs	r3, #2
 800f296:	e071      	b.n	800f37c <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	683a      	ldr	r2, [r7, #0]
 800f29c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	689b      	ldr	r3, [r3, #8]
 800f2a2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800f2a4:	697b      	ldr	r3, [r7, #20]
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d106      	bne.n	800f2b8 <dir_sdi+0x46>
 800f2aa:	693b      	ldr	r3, [r7, #16]
 800f2ac:	781b      	ldrb	r3, [r3, #0]
 800f2ae:	2b02      	cmp	r3, #2
 800f2b0:	d902      	bls.n	800f2b8 <dir_sdi+0x46>
		clst = fs->dirbase;
 800f2b2:	693b      	ldr	r3, [r7, #16]
 800f2b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2b6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800f2b8:	697b      	ldr	r3, [r7, #20]
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d10c      	bne.n	800f2d8 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800f2be:	683b      	ldr	r3, [r7, #0]
 800f2c0:	095b      	lsrs	r3, r3, #5
 800f2c2:	693a      	ldr	r2, [r7, #16]
 800f2c4:	8912      	ldrh	r2, [r2, #8]
 800f2c6:	4293      	cmp	r3, r2
 800f2c8:	d301      	bcc.n	800f2ce <dir_sdi+0x5c>
 800f2ca:	2302      	movs	r3, #2
 800f2cc:	e056      	b.n	800f37c <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800f2ce:	693b      	ldr	r3, [r7, #16]
 800f2d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	61da      	str	r2, [r3, #28]
 800f2d6:	e02d      	b.n	800f334 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800f2d8:	693b      	ldr	r3, [r7, #16]
 800f2da:	895b      	ldrh	r3, [r3, #10]
 800f2dc:	461a      	mov	r2, r3
 800f2de:	693b      	ldr	r3, [r7, #16]
 800f2e0:	899b      	ldrh	r3, [r3, #12]
 800f2e2:	fb03 f302 	mul.w	r3, r3, r2
 800f2e6:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f2e8:	e019      	b.n	800f31e <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	6979      	ldr	r1, [r7, #20]
 800f2ee:	4618      	mov	r0, r3
 800f2f0:	f7ff fca3 	bl	800ec3a <get_fat>
 800f2f4:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f2f6:	697b      	ldr	r3, [r7, #20]
 800f2f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2fc:	d101      	bne.n	800f302 <dir_sdi+0x90>
 800f2fe:	2301      	movs	r3, #1
 800f300:	e03c      	b.n	800f37c <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800f302:	697b      	ldr	r3, [r7, #20]
 800f304:	2b01      	cmp	r3, #1
 800f306:	d904      	bls.n	800f312 <dir_sdi+0xa0>
 800f308:	693b      	ldr	r3, [r7, #16]
 800f30a:	69db      	ldr	r3, [r3, #28]
 800f30c:	697a      	ldr	r2, [r7, #20]
 800f30e:	429a      	cmp	r2, r3
 800f310:	d301      	bcc.n	800f316 <dir_sdi+0xa4>
 800f312:	2302      	movs	r3, #2
 800f314:	e032      	b.n	800f37c <dir_sdi+0x10a>
			ofs -= csz;
 800f316:	683a      	ldr	r2, [r7, #0]
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	1ad3      	subs	r3, r2, r3
 800f31c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f31e:	683a      	ldr	r2, [r7, #0]
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	429a      	cmp	r2, r3
 800f324:	d2e1      	bcs.n	800f2ea <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800f326:	6979      	ldr	r1, [r7, #20]
 800f328:	6938      	ldr	r0, [r7, #16]
 800f32a:	f7ff fc67 	bl	800ebfc <clust2sect>
 800f32e:	4602      	mov	r2, r0
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	697a      	ldr	r2, [r7, #20]
 800f338:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	69db      	ldr	r3, [r3, #28]
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d101      	bne.n	800f346 <dir_sdi+0xd4>
 800f342:	2302      	movs	r3, #2
 800f344:	e01a      	b.n	800f37c <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	69da      	ldr	r2, [r3, #28]
 800f34a:	693b      	ldr	r3, [r7, #16]
 800f34c:	899b      	ldrh	r3, [r3, #12]
 800f34e:	4619      	mov	r1, r3
 800f350:	683b      	ldr	r3, [r7, #0]
 800f352:	fbb3 f3f1 	udiv	r3, r3, r1
 800f356:	441a      	add	r2, r3
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800f35c:	693b      	ldr	r3, [r7, #16]
 800f35e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f362:	693b      	ldr	r3, [r7, #16]
 800f364:	899b      	ldrh	r3, [r3, #12]
 800f366:	461a      	mov	r2, r3
 800f368:	683b      	ldr	r3, [r7, #0]
 800f36a:	fbb3 f0f2 	udiv	r0, r3, r2
 800f36e:	fb02 f200 	mul.w	r2, r2, r0
 800f372:	1a9b      	subs	r3, r3, r2
 800f374:	18ca      	adds	r2, r1, r3
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f37a:	2300      	movs	r3, #0
}
 800f37c:	4618      	mov	r0, r3
 800f37e:	3718      	adds	r7, #24
 800f380:	46bd      	mov	sp, r7
 800f382:	bd80      	pop	{r7, pc}

0800f384 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800f384:	b580      	push	{r7, lr}
 800f386:	b086      	sub	sp, #24
 800f388:	af00      	add	r7, sp, #0
 800f38a:	6078      	str	r0, [r7, #4]
 800f38c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	695b      	ldr	r3, [r3, #20]
 800f398:	3320      	adds	r3, #32
 800f39a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	69db      	ldr	r3, [r3, #28]
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d003      	beq.n	800f3ac <dir_next+0x28>
 800f3a4:	68bb      	ldr	r3, [r7, #8]
 800f3a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f3aa:	d301      	bcc.n	800f3b0 <dir_next+0x2c>
 800f3ac:	2304      	movs	r3, #4
 800f3ae:	e0bb      	b.n	800f528 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	899b      	ldrh	r3, [r3, #12]
 800f3b4:	461a      	mov	r2, r3
 800f3b6:	68bb      	ldr	r3, [r7, #8]
 800f3b8:	fbb3 f1f2 	udiv	r1, r3, r2
 800f3bc:	fb02 f201 	mul.w	r2, r2, r1
 800f3c0:	1a9b      	subs	r3, r3, r2
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	f040 809d 	bne.w	800f502 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	69db      	ldr	r3, [r3, #28]
 800f3cc:	1c5a      	adds	r2, r3, #1
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	699b      	ldr	r3, [r3, #24]
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d10b      	bne.n	800f3f2 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800f3da:	68bb      	ldr	r3, [r7, #8]
 800f3dc:	095b      	lsrs	r3, r3, #5
 800f3de:	68fa      	ldr	r2, [r7, #12]
 800f3e0:	8912      	ldrh	r2, [r2, #8]
 800f3e2:	4293      	cmp	r3, r2
 800f3e4:	f0c0 808d 	bcc.w	800f502 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	2200      	movs	r2, #0
 800f3ec:	61da      	str	r2, [r3, #28]
 800f3ee:	2304      	movs	r3, #4
 800f3f0:	e09a      	b.n	800f528 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	899b      	ldrh	r3, [r3, #12]
 800f3f6:	461a      	mov	r2, r3
 800f3f8:	68bb      	ldr	r3, [r7, #8]
 800f3fa:	fbb3 f3f2 	udiv	r3, r3, r2
 800f3fe:	68fa      	ldr	r2, [r7, #12]
 800f400:	8952      	ldrh	r2, [r2, #10]
 800f402:	3a01      	subs	r2, #1
 800f404:	4013      	ands	r3, r2
 800f406:	2b00      	cmp	r3, #0
 800f408:	d17b      	bne.n	800f502 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800f40a:	687a      	ldr	r2, [r7, #4]
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	699b      	ldr	r3, [r3, #24]
 800f410:	4619      	mov	r1, r3
 800f412:	4610      	mov	r0, r2
 800f414:	f7ff fc11 	bl	800ec3a <get_fat>
 800f418:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800f41a:	697b      	ldr	r3, [r7, #20]
 800f41c:	2b01      	cmp	r3, #1
 800f41e:	d801      	bhi.n	800f424 <dir_next+0xa0>
 800f420:	2302      	movs	r3, #2
 800f422:	e081      	b.n	800f528 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800f424:	697b      	ldr	r3, [r7, #20]
 800f426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f42a:	d101      	bne.n	800f430 <dir_next+0xac>
 800f42c:	2301      	movs	r3, #1
 800f42e:	e07b      	b.n	800f528 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	69db      	ldr	r3, [r3, #28]
 800f434:	697a      	ldr	r2, [r7, #20]
 800f436:	429a      	cmp	r2, r3
 800f438:	d359      	bcc.n	800f4ee <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800f43a:	683b      	ldr	r3, [r7, #0]
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d104      	bne.n	800f44a <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	2200      	movs	r2, #0
 800f444:	61da      	str	r2, [r3, #28]
 800f446:	2304      	movs	r3, #4
 800f448:	e06e      	b.n	800f528 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800f44a:	687a      	ldr	r2, [r7, #4]
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	699b      	ldr	r3, [r3, #24]
 800f450:	4619      	mov	r1, r3
 800f452:	4610      	mov	r0, r2
 800f454:	f7ff fe3d 	bl	800f0d2 <create_chain>
 800f458:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800f45a:	697b      	ldr	r3, [r7, #20]
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d101      	bne.n	800f464 <dir_next+0xe0>
 800f460:	2307      	movs	r3, #7
 800f462:	e061      	b.n	800f528 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800f464:	697b      	ldr	r3, [r7, #20]
 800f466:	2b01      	cmp	r3, #1
 800f468:	d101      	bne.n	800f46e <dir_next+0xea>
 800f46a:	2302      	movs	r3, #2
 800f46c:	e05c      	b.n	800f528 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f46e:	697b      	ldr	r3, [r7, #20]
 800f470:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f474:	d101      	bne.n	800f47a <dir_next+0xf6>
 800f476:	2301      	movs	r3, #1
 800f478:	e056      	b.n	800f528 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800f47a:	68f8      	ldr	r0, [r7, #12]
 800f47c:	f7ff fadc 	bl	800ea38 <sync_window>
 800f480:	4603      	mov	r3, r0
 800f482:	2b00      	cmp	r3, #0
 800f484:	d001      	beq.n	800f48a <dir_next+0x106>
 800f486:	2301      	movs	r3, #1
 800f488:	e04e      	b.n	800f528 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800f48a:	68fb      	ldr	r3, [r7, #12]
 800f48c:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	899b      	ldrh	r3, [r3, #12]
 800f494:	461a      	mov	r2, r3
 800f496:	2100      	movs	r1, #0
 800f498:	f7ff f905 	bl	800e6a6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f49c:	2300      	movs	r3, #0
 800f49e:	613b      	str	r3, [r7, #16]
 800f4a0:	6979      	ldr	r1, [r7, #20]
 800f4a2:	68f8      	ldr	r0, [r7, #12]
 800f4a4:	f7ff fbaa 	bl	800ebfc <clust2sect>
 800f4a8:	4602      	mov	r2, r0
 800f4aa:	68fb      	ldr	r3, [r7, #12]
 800f4ac:	635a      	str	r2, [r3, #52]	; 0x34
 800f4ae:	e012      	b.n	800f4d6 <dir_next+0x152>
						fs->wflag = 1;
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	2201      	movs	r2, #1
 800f4b4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800f4b6:	68f8      	ldr	r0, [r7, #12]
 800f4b8:	f7ff fabe 	bl	800ea38 <sync_window>
 800f4bc:	4603      	mov	r3, r0
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d001      	beq.n	800f4c6 <dir_next+0x142>
 800f4c2:	2301      	movs	r3, #1
 800f4c4:	e030      	b.n	800f528 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f4c6:	693b      	ldr	r3, [r7, #16]
 800f4c8:	3301      	adds	r3, #1
 800f4ca:	613b      	str	r3, [r7, #16]
 800f4cc:	68fb      	ldr	r3, [r7, #12]
 800f4ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f4d0:	1c5a      	adds	r2, r3, #1
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	635a      	str	r2, [r3, #52]	; 0x34
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	895b      	ldrh	r3, [r3, #10]
 800f4da:	461a      	mov	r2, r3
 800f4dc:	693b      	ldr	r3, [r7, #16]
 800f4de:	4293      	cmp	r3, r2
 800f4e0:	d3e6      	bcc.n	800f4b0 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f4e6:	693b      	ldr	r3, [r7, #16]
 800f4e8:	1ad2      	subs	r2, r2, r3
 800f4ea:	68fb      	ldr	r3, [r7, #12]
 800f4ec:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	697a      	ldr	r2, [r7, #20]
 800f4f2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800f4f4:	6979      	ldr	r1, [r7, #20]
 800f4f6:	68f8      	ldr	r0, [r7, #12]
 800f4f8:	f7ff fb80 	bl	800ebfc <clust2sect>
 800f4fc:	4602      	mov	r2, r0
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	68ba      	ldr	r2, [r7, #8]
 800f506:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	899b      	ldrh	r3, [r3, #12]
 800f512:	461a      	mov	r2, r3
 800f514:	68bb      	ldr	r3, [r7, #8]
 800f516:	fbb3 f0f2 	udiv	r0, r3, r2
 800f51a:	fb02 f200 	mul.w	r2, r2, r0
 800f51e:	1a9b      	subs	r3, r3, r2
 800f520:	18ca      	adds	r2, r1, r3
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f526:	2300      	movs	r3, #0
}
 800f528:	4618      	mov	r0, r3
 800f52a:	3718      	adds	r7, #24
 800f52c:	46bd      	mov	sp, r7
 800f52e:	bd80      	pop	{r7, pc}

0800f530 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800f530:	b580      	push	{r7, lr}
 800f532:	b086      	sub	sp, #24
 800f534:	af00      	add	r7, sp, #0
 800f536:	6078      	str	r0, [r7, #4]
 800f538:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800f540:	2100      	movs	r1, #0
 800f542:	6878      	ldr	r0, [r7, #4]
 800f544:	f7ff fe95 	bl	800f272 <dir_sdi>
 800f548:	4603      	mov	r3, r0
 800f54a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f54c:	7dfb      	ldrb	r3, [r7, #23]
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d12b      	bne.n	800f5aa <dir_alloc+0x7a>
		n = 0;
 800f552:	2300      	movs	r3, #0
 800f554:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	69db      	ldr	r3, [r3, #28]
 800f55a:	4619      	mov	r1, r3
 800f55c:	68f8      	ldr	r0, [r7, #12]
 800f55e:	f7ff faaf 	bl	800eac0 <move_window>
 800f562:	4603      	mov	r3, r0
 800f564:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f566:	7dfb      	ldrb	r3, [r7, #23]
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d11d      	bne.n	800f5a8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	6a1b      	ldr	r3, [r3, #32]
 800f570:	781b      	ldrb	r3, [r3, #0]
 800f572:	2be5      	cmp	r3, #229	; 0xe5
 800f574:	d004      	beq.n	800f580 <dir_alloc+0x50>
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	6a1b      	ldr	r3, [r3, #32]
 800f57a:	781b      	ldrb	r3, [r3, #0]
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d107      	bne.n	800f590 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800f580:	693b      	ldr	r3, [r7, #16]
 800f582:	3301      	adds	r3, #1
 800f584:	613b      	str	r3, [r7, #16]
 800f586:	693a      	ldr	r2, [r7, #16]
 800f588:	683b      	ldr	r3, [r7, #0]
 800f58a:	429a      	cmp	r2, r3
 800f58c:	d102      	bne.n	800f594 <dir_alloc+0x64>
 800f58e:	e00c      	b.n	800f5aa <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800f590:	2300      	movs	r3, #0
 800f592:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800f594:	2101      	movs	r1, #1
 800f596:	6878      	ldr	r0, [r7, #4]
 800f598:	f7ff fef4 	bl	800f384 <dir_next>
 800f59c:	4603      	mov	r3, r0
 800f59e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800f5a0:	7dfb      	ldrb	r3, [r7, #23]
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d0d7      	beq.n	800f556 <dir_alloc+0x26>
 800f5a6:	e000      	b.n	800f5aa <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800f5a8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800f5aa:	7dfb      	ldrb	r3, [r7, #23]
 800f5ac:	2b04      	cmp	r3, #4
 800f5ae:	d101      	bne.n	800f5b4 <dir_alloc+0x84>
 800f5b0:	2307      	movs	r3, #7
 800f5b2:	75fb      	strb	r3, [r7, #23]
	return res;
 800f5b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800f5b6:	4618      	mov	r0, r3
 800f5b8:	3718      	adds	r7, #24
 800f5ba:	46bd      	mov	sp, r7
 800f5bc:	bd80      	pop	{r7, pc}

0800f5be <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800f5be:	b580      	push	{r7, lr}
 800f5c0:	b084      	sub	sp, #16
 800f5c2:	af00      	add	r7, sp, #0
 800f5c4:	6078      	str	r0, [r7, #4]
 800f5c6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800f5c8:	683b      	ldr	r3, [r7, #0]
 800f5ca:	331a      	adds	r3, #26
 800f5cc:	4618      	mov	r0, r3
 800f5ce:	f7fe ffc7 	bl	800e560 <ld_word>
 800f5d2:	4603      	mov	r3, r0
 800f5d4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	781b      	ldrb	r3, [r3, #0]
 800f5da:	2b03      	cmp	r3, #3
 800f5dc:	d109      	bne.n	800f5f2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800f5de:	683b      	ldr	r3, [r7, #0]
 800f5e0:	3314      	adds	r3, #20
 800f5e2:	4618      	mov	r0, r3
 800f5e4:	f7fe ffbc 	bl	800e560 <ld_word>
 800f5e8:	4603      	mov	r3, r0
 800f5ea:	041b      	lsls	r3, r3, #16
 800f5ec:	68fa      	ldr	r2, [r7, #12]
 800f5ee:	4313      	orrs	r3, r2
 800f5f0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800f5f2:	68fb      	ldr	r3, [r7, #12]
}
 800f5f4:	4618      	mov	r0, r3
 800f5f6:	3710      	adds	r7, #16
 800f5f8:	46bd      	mov	sp, r7
 800f5fa:	bd80      	pop	{r7, pc}

0800f5fc <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800f5fc:	b580      	push	{r7, lr}
 800f5fe:	b084      	sub	sp, #16
 800f600:	af00      	add	r7, sp, #0
 800f602:	60f8      	str	r0, [r7, #12]
 800f604:	60b9      	str	r1, [r7, #8]
 800f606:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800f608:	68bb      	ldr	r3, [r7, #8]
 800f60a:	331a      	adds	r3, #26
 800f60c:	687a      	ldr	r2, [r7, #4]
 800f60e:	b292      	uxth	r2, r2
 800f610:	4611      	mov	r1, r2
 800f612:	4618      	mov	r0, r3
 800f614:	f7fe ffdf 	bl	800e5d6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	781b      	ldrb	r3, [r3, #0]
 800f61c:	2b03      	cmp	r3, #3
 800f61e:	d109      	bne.n	800f634 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800f620:	68bb      	ldr	r3, [r7, #8]
 800f622:	f103 0214 	add.w	r2, r3, #20
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	0c1b      	lsrs	r3, r3, #16
 800f62a:	b29b      	uxth	r3, r3
 800f62c:	4619      	mov	r1, r3
 800f62e:	4610      	mov	r0, r2
 800f630:	f7fe ffd1 	bl	800e5d6 <st_word>
	}
}
 800f634:	bf00      	nop
 800f636:	3710      	adds	r7, #16
 800f638:	46bd      	mov	sp, r7
 800f63a:	bd80      	pop	{r7, pc}

0800f63c <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800f63c:	b580      	push	{r7, lr}
 800f63e:	b086      	sub	sp, #24
 800f640:	af00      	add	r7, sp, #0
 800f642:	6078      	str	r0, [r7, #4]
 800f644:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800f646:	2304      	movs	r3, #4
 800f648:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800f650:	e03c      	b.n	800f6cc <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	69db      	ldr	r3, [r3, #28]
 800f656:	4619      	mov	r1, r3
 800f658:	6938      	ldr	r0, [r7, #16]
 800f65a:	f7ff fa31 	bl	800eac0 <move_window>
 800f65e:	4603      	mov	r3, r0
 800f660:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f662:	7dfb      	ldrb	r3, [r7, #23]
 800f664:	2b00      	cmp	r3, #0
 800f666:	d136      	bne.n	800f6d6 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	6a1b      	ldr	r3, [r3, #32]
 800f66c:	781b      	ldrb	r3, [r3, #0]
 800f66e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800f670:	7bfb      	ldrb	r3, [r7, #15]
 800f672:	2b00      	cmp	r3, #0
 800f674:	d102      	bne.n	800f67c <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800f676:	2304      	movs	r3, #4
 800f678:	75fb      	strb	r3, [r7, #23]
 800f67a:	e031      	b.n	800f6e0 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	6a1b      	ldr	r3, [r3, #32]
 800f680:	330b      	adds	r3, #11
 800f682:	781b      	ldrb	r3, [r3, #0]
 800f684:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f688:	73bb      	strb	r3, [r7, #14]
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	7bba      	ldrb	r2, [r7, #14]
 800f68e:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800f690:	7bfb      	ldrb	r3, [r7, #15]
 800f692:	2be5      	cmp	r3, #229	; 0xe5
 800f694:	d011      	beq.n	800f6ba <dir_read+0x7e>
 800f696:	7bfb      	ldrb	r3, [r7, #15]
 800f698:	2b2e      	cmp	r3, #46	; 0x2e
 800f69a:	d00e      	beq.n	800f6ba <dir_read+0x7e>
 800f69c:	7bbb      	ldrb	r3, [r7, #14]
 800f69e:	2b0f      	cmp	r3, #15
 800f6a0:	d00b      	beq.n	800f6ba <dir_read+0x7e>
 800f6a2:	7bbb      	ldrb	r3, [r7, #14]
 800f6a4:	f023 0320 	bic.w	r3, r3, #32
 800f6a8:	2b08      	cmp	r3, #8
 800f6aa:	bf0c      	ite	eq
 800f6ac:	2301      	moveq	r3, #1
 800f6ae:	2300      	movne	r3, #0
 800f6b0:	b2db      	uxtb	r3, r3
 800f6b2:	461a      	mov	r2, r3
 800f6b4:	683b      	ldr	r3, [r7, #0]
 800f6b6:	4293      	cmp	r3, r2
 800f6b8:	d00f      	beq.n	800f6da <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800f6ba:	2100      	movs	r1, #0
 800f6bc:	6878      	ldr	r0, [r7, #4]
 800f6be:	f7ff fe61 	bl	800f384 <dir_next>
 800f6c2:	4603      	mov	r3, r0
 800f6c4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f6c6:	7dfb      	ldrb	r3, [r7, #23]
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d108      	bne.n	800f6de <dir_read+0xa2>
	while (dp->sect) {
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	69db      	ldr	r3, [r3, #28]
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d1be      	bne.n	800f652 <dir_read+0x16>
 800f6d4:	e004      	b.n	800f6e0 <dir_read+0xa4>
		if (res != FR_OK) break;
 800f6d6:	bf00      	nop
 800f6d8:	e002      	b.n	800f6e0 <dir_read+0xa4>
				break;
 800f6da:	bf00      	nop
 800f6dc:	e000      	b.n	800f6e0 <dir_read+0xa4>
		if (res != FR_OK) break;
 800f6de:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800f6e0:	7dfb      	ldrb	r3, [r7, #23]
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d002      	beq.n	800f6ec <dir_read+0xb0>
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	2200      	movs	r2, #0
 800f6ea:	61da      	str	r2, [r3, #28]
	return res;
 800f6ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800f6ee:	4618      	mov	r0, r3
 800f6f0:	3718      	adds	r7, #24
 800f6f2:	46bd      	mov	sp, r7
 800f6f4:	bd80      	pop	{r7, pc}

0800f6f6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800f6f6:	b580      	push	{r7, lr}
 800f6f8:	b086      	sub	sp, #24
 800f6fa:	af00      	add	r7, sp, #0
 800f6fc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	681b      	ldr	r3, [r3, #0]
 800f702:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800f704:	2100      	movs	r1, #0
 800f706:	6878      	ldr	r0, [r7, #4]
 800f708:	f7ff fdb3 	bl	800f272 <dir_sdi>
 800f70c:	4603      	mov	r3, r0
 800f70e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800f710:	7dfb      	ldrb	r3, [r7, #23]
 800f712:	2b00      	cmp	r3, #0
 800f714:	d001      	beq.n	800f71a <dir_find+0x24>
 800f716:	7dfb      	ldrb	r3, [r7, #23]
 800f718:	e03e      	b.n	800f798 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	69db      	ldr	r3, [r3, #28]
 800f71e:	4619      	mov	r1, r3
 800f720:	6938      	ldr	r0, [r7, #16]
 800f722:	f7ff f9cd 	bl	800eac0 <move_window>
 800f726:	4603      	mov	r3, r0
 800f728:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f72a:	7dfb      	ldrb	r3, [r7, #23]
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d12f      	bne.n	800f790 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	6a1b      	ldr	r3, [r3, #32]
 800f734:	781b      	ldrb	r3, [r3, #0]
 800f736:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800f738:	7bfb      	ldrb	r3, [r7, #15]
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d102      	bne.n	800f744 <dir_find+0x4e>
 800f73e:	2304      	movs	r3, #4
 800f740:	75fb      	strb	r3, [r7, #23]
 800f742:	e028      	b.n	800f796 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	6a1b      	ldr	r3, [r3, #32]
 800f748:	330b      	adds	r3, #11
 800f74a:	781b      	ldrb	r3, [r3, #0]
 800f74c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f750:	b2da      	uxtb	r2, r3
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	6a1b      	ldr	r3, [r3, #32]
 800f75a:	330b      	adds	r3, #11
 800f75c:	781b      	ldrb	r3, [r3, #0]
 800f75e:	f003 0308 	and.w	r3, r3, #8
 800f762:	2b00      	cmp	r3, #0
 800f764:	d10a      	bne.n	800f77c <dir_find+0x86>
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	6a18      	ldr	r0, [r3, #32]
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	3324      	adds	r3, #36	; 0x24
 800f76e:	220b      	movs	r2, #11
 800f770:	4619      	mov	r1, r3
 800f772:	f7fe ffb2 	bl	800e6da <mem_cmp>
 800f776:	4603      	mov	r3, r0
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d00b      	beq.n	800f794 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800f77c:	2100      	movs	r1, #0
 800f77e:	6878      	ldr	r0, [r7, #4]
 800f780:	f7ff fe00 	bl	800f384 <dir_next>
 800f784:	4603      	mov	r3, r0
 800f786:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800f788:	7dfb      	ldrb	r3, [r7, #23]
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d0c5      	beq.n	800f71a <dir_find+0x24>
 800f78e:	e002      	b.n	800f796 <dir_find+0xa0>
		if (res != FR_OK) break;
 800f790:	bf00      	nop
 800f792:	e000      	b.n	800f796 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f794:	bf00      	nop

	return res;
 800f796:	7dfb      	ldrb	r3, [r7, #23]
}
 800f798:	4618      	mov	r0, r3
 800f79a:	3718      	adds	r7, #24
 800f79c:	46bd      	mov	sp, r7
 800f79e:	bd80      	pop	{r7, pc}

0800f7a0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800f7a0:	b580      	push	{r7, lr}
 800f7a2:	b084      	sub	sp, #16
 800f7a4:	af00      	add	r7, sp, #0
 800f7a6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800f7ae:	2101      	movs	r1, #1
 800f7b0:	6878      	ldr	r0, [r7, #4]
 800f7b2:	f7ff febd 	bl	800f530 <dir_alloc>
 800f7b6:	4603      	mov	r3, r0
 800f7b8:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800f7ba:	7bfb      	ldrb	r3, [r7, #15]
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d11c      	bne.n	800f7fa <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	69db      	ldr	r3, [r3, #28]
 800f7c4:	4619      	mov	r1, r3
 800f7c6:	68b8      	ldr	r0, [r7, #8]
 800f7c8:	f7ff f97a 	bl	800eac0 <move_window>
 800f7cc:	4603      	mov	r3, r0
 800f7ce:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f7d0:	7bfb      	ldrb	r3, [r7, #15]
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d111      	bne.n	800f7fa <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	6a1b      	ldr	r3, [r3, #32]
 800f7da:	2220      	movs	r2, #32
 800f7dc:	2100      	movs	r1, #0
 800f7de:	4618      	mov	r0, r3
 800f7e0:	f7fe ff61 	bl	800e6a6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	6a18      	ldr	r0, [r3, #32]
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	3324      	adds	r3, #36	; 0x24
 800f7ec:	220b      	movs	r2, #11
 800f7ee:	4619      	mov	r1, r3
 800f7f0:	f7fe ff38 	bl	800e664 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800f7f4:	68bb      	ldr	r3, [r7, #8]
 800f7f6:	2201      	movs	r2, #1
 800f7f8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800f7fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7fc:	4618      	mov	r0, r3
 800f7fe:	3710      	adds	r7, #16
 800f800:	46bd      	mov	sp, r7
 800f802:	bd80      	pop	{r7, pc}

0800f804 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 800f804:	b580      	push	{r7, lr}
 800f806:	b084      	sub	sp, #16
 800f808:	af00      	add	r7, sp, #0
 800f80a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	69db      	ldr	r3, [r3, #28]
 800f816:	4619      	mov	r1, r3
 800f818:	68f8      	ldr	r0, [r7, #12]
 800f81a:	f7ff f951 	bl	800eac0 <move_window>
 800f81e:	4603      	mov	r3, r0
 800f820:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 800f822:	7afb      	ldrb	r3, [r7, #11]
 800f824:	2b00      	cmp	r3, #0
 800f826:	d106      	bne.n	800f836 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	6a1b      	ldr	r3, [r3, #32]
 800f82c:	22e5      	movs	r2, #229	; 0xe5
 800f82e:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	2201      	movs	r2, #1
 800f834:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 800f836:	7afb      	ldrb	r3, [r7, #11]
}
 800f838:	4618      	mov	r0, r3
 800f83a:	3710      	adds	r7, #16
 800f83c:	46bd      	mov	sp, r7
 800f83e:	bd80      	pop	{r7, pc}

0800f840 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800f840:	b580      	push	{r7, lr}
 800f842:	b088      	sub	sp, #32
 800f844:	af00      	add	r7, sp, #0
 800f846:	6078      	str	r0, [r7, #4]
 800f848:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800f84a:	683b      	ldr	r3, [r7, #0]
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	60fb      	str	r3, [r7, #12]
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	3324      	adds	r3, #36	; 0x24
 800f854:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800f856:	220b      	movs	r2, #11
 800f858:	2120      	movs	r1, #32
 800f85a:	68b8      	ldr	r0, [r7, #8]
 800f85c:	f7fe ff23 	bl	800e6a6 <mem_set>
	si = i = 0; ni = 8;
 800f860:	2300      	movs	r3, #0
 800f862:	613b      	str	r3, [r7, #16]
 800f864:	693b      	ldr	r3, [r7, #16]
 800f866:	617b      	str	r3, [r7, #20]
 800f868:	2308      	movs	r3, #8
 800f86a:	61bb      	str	r3, [r7, #24]
#if _FS_RPATH != 0
	if (p[si] == '.') { /* Is this a dot entry? */
 800f86c:	68fa      	ldr	r2, [r7, #12]
 800f86e:	697b      	ldr	r3, [r7, #20]
 800f870:	4413      	add	r3, r2
 800f872:	781b      	ldrb	r3, [r3, #0]
 800f874:	2b2e      	cmp	r3, #46	; 0x2e
 800f876:	d12f      	bne.n	800f8d8 <create_name+0x98>
		for (;;) {
			c = (BYTE)p[si++];
 800f878:	697b      	ldr	r3, [r7, #20]
 800f87a:	1c5a      	adds	r2, r3, #1
 800f87c:	617a      	str	r2, [r7, #20]
 800f87e:	68fa      	ldr	r2, [r7, #12]
 800f880:	4413      	add	r3, r2
 800f882:	781b      	ldrb	r3, [r3, #0]
 800f884:	77fb      	strb	r3, [r7, #31]
			if (c != '.' || si >= 3) break;
 800f886:	7ffb      	ldrb	r3, [r7, #31]
 800f888:	2b2e      	cmp	r3, #46	; 0x2e
 800f88a:	d10a      	bne.n	800f8a2 <create_name+0x62>
 800f88c:	697b      	ldr	r3, [r7, #20]
 800f88e:	2b02      	cmp	r3, #2
 800f890:	d807      	bhi.n	800f8a2 <create_name+0x62>
			sfn[i++] = c;
 800f892:	693b      	ldr	r3, [r7, #16]
 800f894:	1c5a      	adds	r2, r3, #1
 800f896:	613a      	str	r2, [r7, #16]
 800f898:	68ba      	ldr	r2, [r7, #8]
 800f89a:	4413      	add	r3, r2
 800f89c:	7ffa      	ldrb	r2, [r7, #31]
 800f89e:	701a      	strb	r2, [r3, #0]
			c = (BYTE)p[si++];
 800f8a0:	e7ea      	b.n	800f878 <create_name+0x38>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 800f8a2:	7ffb      	ldrb	r3, [r7, #31]
 800f8a4:	2b2f      	cmp	r3, #47	; 0x2f
 800f8a6:	d007      	beq.n	800f8b8 <create_name+0x78>
 800f8a8:	7ffb      	ldrb	r3, [r7, #31]
 800f8aa:	2b5c      	cmp	r3, #92	; 0x5c
 800f8ac:	d004      	beq.n	800f8b8 <create_name+0x78>
 800f8ae:	7ffb      	ldrb	r3, [r7, #31]
 800f8b0:	2b20      	cmp	r3, #32
 800f8b2:	d901      	bls.n	800f8b8 <create_name+0x78>
 800f8b4:	2306      	movs	r3, #6
 800f8b6:	e084      	b.n	800f9c2 <create_name+0x182>
		*path = p + si;								/* Return pointer to the next segment */
 800f8b8:	68fa      	ldr	r2, [r7, #12]
 800f8ba:	697b      	ldr	r3, [r7, #20]
 800f8bc:	441a      	add	r2, r3
 800f8be:	683b      	ldr	r3, [r7, #0]
 800f8c0:	601a      	str	r2, [r3, #0]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
 800f8c2:	7ffb      	ldrb	r3, [r7, #31]
 800f8c4:	2b20      	cmp	r3, #32
 800f8c6:	d801      	bhi.n	800f8cc <create_name+0x8c>
 800f8c8:	2224      	movs	r2, #36	; 0x24
 800f8ca:	e000      	b.n	800f8ce <create_name+0x8e>
 800f8cc:	2220      	movs	r2, #32
 800f8ce:	68bb      	ldr	r3, [r7, #8]
 800f8d0:	330b      	adds	r3, #11
 800f8d2:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 800f8d4:	2300      	movs	r3, #0
 800f8d6:	e074      	b.n	800f9c2 <create_name+0x182>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800f8d8:	697b      	ldr	r3, [r7, #20]
 800f8da:	1c5a      	adds	r2, r3, #1
 800f8dc:	617a      	str	r2, [r7, #20]
 800f8de:	68fa      	ldr	r2, [r7, #12]
 800f8e0:	4413      	add	r3, r2
 800f8e2:	781b      	ldrb	r3, [r3, #0]
 800f8e4:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800f8e6:	7ffb      	ldrb	r3, [r7, #31]
 800f8e8:	2b20      	cmp	r3, #32
 800f8ea:	d94e      	bls.n	800f98a <create_name+0x14a>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800f8ec:	7ffb      	ldrb	r3, [r7, #31]
 800f8ee:	2b2f      	cmp	r3, #47	; 0x2f
 800f8f0:	d006      	beq.n	800f900 <create_name+0xc0>
 800f8f2:	7ffb      	ldrb	r3, [r7, #31]
 800f8f4:	2b5c      	cmp	r3, #92	; 0x5c
 800f8f6:	d110      	bne.n	800f91a <create_name+0xda>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800f8f8:	e002      	b.n	800f900 <create_name+0xc0>
 800f8fa:	697b      	ldr	r3, [r7, #20]
 800f8fc:	3301      	adds	r3, #1
 800f8fe:	617b      	str	r3, [r7, #20]
 800f900:	68fa      	ldr	r2, [r7, #12]
 800f902:	697b      	ldr	r3, [r7, #20]
 800f904:	4413      	add	r3, r2
 800f906:	781b      	ldrb	r3, [r3, #0]
 800f908:	2b2f      	cmp	r3, #47	; 0x2f
 800f90a:	d0f6      	beq.n	800f8fa <create_name+0xba>
 800f90c:	68fa      	ldr	r2, [r7, #12]
 800f90e:	697b      	ldr	r3, [r7, #20]
 800f910:	4413      	add	r3, r2
 800f912:	781b      	ldrb	r3, [r3, #0]
 800f914:	2b5c      	cmp	r3, #92	; 0x5c
 800f916:	d0f0      	beq.n	800f8fa <create_name+0xba>
			break;
 800f918:	e038      	b.n	800f98c <create_name+0x14c>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800f91a:	7ffb      	ldrb	r3, [r7, #31]
 800f91c:	2b2e      	cmp	r3, #46	; 0x2e
 800f91e:	d003      	beq.n	800f928 <create_name+0xe8>
 800f920:	693a      	ldr	r2, [r7, #16]
 800f922:	69bb      	ldr	r3, [r7, #24]
 800f924:	429a      	cmp	r2, r3
 800f926:	d30c      	bcc.n	800f942 <create_name+0x102>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800f928:	69bb      	ldr	r3, [r7, #24]
 800f92a:	2b0b      	cmp	r3, #11
 800f92c:	d002      	beq.n	800f934 <create_name+0xf4>
 800f92e:	7ffb      	ldrb	r3, [r7, #31]
 800f930:	2b2e      	cmp	r3, #46	; 0x2e
 800f932:	d001      	beq.n	800f938 <create_name+0xf8>
 800f934:	2306      	movs	r3, #6
 800f936:	e044      	b.n	800f9c2 <create_name+0x182>
			i = 8; ni = 11;				/* Goto extension */
 800f938:	2308      	movs	r3, #8
 800f93a:	613b      	str	r3, [r7, #16]
 800f93c:	230b      	movs	r3, #11
 800f93e:	61bb      	str	r3, [r7, #24]
			continue;
 800f940:	e022      	b.n	800f988 <create_name+0x148>
		}
		if (c >= 0x80) {				/* Extended character? */
 800f942:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f946:	2b00      	cmp	r3, #0
 800f948:	da04      	bge.n	800f954 <create_name+0x114>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800f94a:	7ffb      	ldrb	r3, [r7, #31]
 800f94c:	3b80      	subs	r3, #128	; 0x80
 800f94e:	4a1f      	ldr	r2, [pc, #124]	; (800f9cc <create_name+0x18c>)
 800f950:	5cd3      	ldrb	r3, [r2, r3]
 800f952:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800f954:	7ffb      	ldrb	r3, [r7, #31]
 800f956:	4619      	mov	r1, r3
 800f958:	481d      	ldr	r0, [pc, #116]	; (800f9d0 <create_name+0x190>)
 800f95a:	f7fe fee5 	bl	800e728 <chk_chr>
 800f95e:	4603      	mov	r3, r0
 800f960:	2b00      	cmp	r3, #0
 800f962:	d001      	beq.n	800f968 <create_name+0x128>
 800f964:	2306      	movs	r3, #6
 800f966:	e02c      	b.n	800f9c2 <create_name+0x182>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800f968:	7ffb      	ldrb	r3, [r7, #31]
 800f96a:	2b60      	cmp	r3, #96	; 0x60
 800f96c:	d905      	bls.n	800f97a <create_name+0x13a>
 800f96e:	7ffb      	ldrb	r3, [r7, #31]
 800f970:	2b7a      	cmp	r3, #122	; 0x7a
 800f972:	d802      	bhi.n	800f97a <create_name+0x13a>
 800f974:	7ffb      	ldrb	r3, [r7, #31]
 800f976:	3b20      	subs	r3, #32
 800f978:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 800f97a:	693b      	ldr	r3, [r7, #16]
 800f97c:	1c5a      	adds	r2, r3, #1
 800f97e:	613a      	str	r2, [r7, #16]
 800f980:	68ba      	ldr	r2, [r7, #8]
 800f982:	4413      	add	r3, r2
 800f984:	7ffa      	ldrb	r2, [r7, #31]
 800f986:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800f988:	e7a6      	b.n	800f8d8 <create_name+0x98>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800f98a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800f98c:	68fa      	ldr	r2, [r7, #12]
 800f98e:	697b      	ldr	r3, [r7, #20]
 800f990:	441a      	add	r2, r3
 800f992:	683b      	ldr	r3, [r7, #0]
 800f994:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800f996:	693b      	ldr	r3, [r7, #16]
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d101      	bne.n	800f9a0 <create_name+0x160>
 800f99c:	2306      	movs	r3, #6
 800f99e:	e010      	b.n	800f9c2 <create_name+0x182>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800f9a0:	68bb      	ldr	r3, [r7, #8]
 800f9a2:	781b      	ldrb	r3, [r3, #0]
 800f9a4:	2be5      	cmp	r3, #229	; 0xe5
 800f9a6:	d102      	bne.n	800f9ae <create_name+0x16e>
 800f9a8:	68bb      	ldr	r3, [r7, #8]
 800f9aa:	2205      	movs	r2, #5
 800f9ac:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800f9ae:	7ffb      	ldrb	r3, [r7, #31]
 800f9b0:	2b20      	cmp	r3, #32
 800f9b2:	d801      	bhi.n	800f9b8 <create_name+0x178>
 800f9b4:	2204      	movs	r2, #4
 800f9b6:	e000      	b.n	800f9ba <create_name+0x17a>
 800f9b8:	2200      	movs	r2, #0
 800f9ba:	68bb      	ldr	r3, [r7, #8]
 800f9bc:	330b      	adds	r3, #11
 800f9be:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800f9c0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800f9c2:	4618      	mov	r0, r3
 800f9c4:	3720      	adds	r7, #32
 800f9c6:	46bd      	mov	sp, r7
 800f9c8:	bd80      	pop	{r7, pc}
 800f9ca:	bf00      	nop
 800f9cc:	08017acc 	.word	0x08017acc
 800f9d0:	08017a7c 	.word	0x08017a7c

0800f9d4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800f9d4:	b580      	push	{r7, lr}
 800f9d6:	b086      	sub	sp, #24
 800f9d8:	af00      	add	r7, sp, #0
 800f9da:	6078      	str	r0, [r7, #4]
 800f9dc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800f9e2:	693b      	ldr	r3, [r7, #16]
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 800f9e8:	683b      	ldr	r3, [r7, #0]
 800f9ea:	781b      	ldrb	r3, [r3, #0]
 800f9ec:	2b2f      	cmp	r3, #47	; 0x2f
 800f9ee:	d00b      	beq.n	800fa08 <follow_path+0x34>
 800f9f0:	683b      	ldr	r3, [r7, #0]
 800f9f2:	781b      	ldrb	r3, [r3, #0]
 800f9f4:	2b5c      	cmp	r3, #92	; 0x5c
 800f9f6:	d007      	beq.n	800fa08 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 800f9f8:	68fb      	ldr	r3, [r7, #12]
 800f9fa:	699a      	ldr	r2, [r3, #24]
 800f9fc:	693b      	ldr	r3, [r7, #16]
 800f9fe:	609a      	str	r2, [r3, #8]
 800fa00:	e00d      	b.n	800fa1e <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800fa02:	683b      	ldr	r3, [r7, #0]
 800fa04:	3301      	adds	r3, #1
 800fa06:	603b      	str	r3, [r7, #0]
 800fa08:	683b      	ldr	r3, [r7, #0]
 800fa0a:	781b      	ldrb	r3, [r3, #0]
 800fa0c:	2b2f      	cmp	r3, #47	; 0x2f
 800fa0e:	d0f8      	beq.n	800fa02 <follow_path+0x2e>
 800fa10:	683b      	ldr	r3, [r7, #0]
 800fa12:	781b      	ldrb	r3, [r3, #0]
 800fa14:	2b5c      	cmp	r3, #92	; 0x5c
 800fa16:	d0f4      	beq.n	800fa02 <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 800fa18:	693b      	ldr	r3, [r7, #16]
 800fa1a:	2200      	movs	r2, #0
 800fa1c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800fa1e:	683b      	ldr	r3, [r7, #0]
 800fa20:	781b      	ldrb	r3, [r3, #0]
 800fa22:	2b1f      	cmp	r3, #31
 800fa24:	d80a      	bhi.n	800fa3c <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	2280      	movs	r2, #128	; 0x80
 800fa2a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800fa2e:	2100      	movs	r1, #0
 800fa30:	6878      	ldr	r0, [r7, #4]
 800fa32:	f7ff fc1e 	bl	800f272 <dir_sdi>
 800fa36:	4603      	mov	r3, r0
 800fa38:	75fb      	strb	r3, [r7, #23]
 800fa3a:	e05b      	b.n	800faf4 <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800fa3c:	463b      	mov	r3, r7
 800fa3e:	4619      	mov	r1, r3
 800fa40:	6878      	ldr	r0, [r7, #4]
 800fa42:	f7ff fefd 	bl	800f840 <create_name>
 800fa46:	4603      	mov	r3, r0
 800fa48:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800fa4a:	7dfb      	ldrb	r3, [r7, #23]
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d14c      	bne.n	800faea <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 800fa50:	6878      	ldr	r0, [r7, #4]
 800fa52:	f7ff fe50 	bl	800f6f6 <dir_find>
 800fa56:	4603      	mov	r3, r0
 800fa58:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800fa60:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800fa62:	7dfb      	ldrb	r3, [r7, #23]
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d01b      	beq.n	800faa0 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800fa68:	7dfb      	ldrb	r3, [r7, #23]
 800fa6a:	2b04      	cmp	r3, #4
 800fa6c:	d13f      	bne.n	800faee <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 800fa6e:	7afb      	ldrb	r3, [r7, #11]
 800fa70:	f003 0320 	and.w	r3, r3, #32
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d00b      	beq.n	800fa90 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800fa78:	7afb      	ldrb	r3, [r7, #11]
 800fa7a:	f003 0304 	and.w	r3, r3, #4
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d031      	beq.n	800fae6 <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	2280      	movs	r2, #128	; 0x80
 800fa86:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 800fa8a:	2300      	movs	r3, #0
 800fa8c:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 800fa8e:	e02e      	b.n	800faee <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800fa90:	7afb      	ldrb	r3, [r7, #11]
 800fa92:	f003 0304 	and.w	r3, r3, #4
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d129      	bne.n	800faee <follow_path+0x11a>
 800fa9a:	2305      	movs	r3, #5
 800fa9c:	75fb      	strb	r3, [r7, #23]
				break;
 800fa9e:	e026      	b.n	800faee <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800faa0:	7afb      	ldrb	r3, [r7, #11]
 800faa2:	f003 0304 	and.w	r3, r3, #4
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d123      	bne.n	800faf2 <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800faaa:	693b      	ldr	r3, [r7, #16]
 800faac:	799b      	ldrb	r3, [r3, #6]
 800faae:	f003 0310 	and.w	r3, r3, #16
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d102      	bne.n	800fabc <follow_path+0xe8>
				res = FR_NO_PATH; break;
 800fab6:	2305      	movs	r3, #5
 800fab8:	75fb      	strb	r3, [r7, #23]
 800faba:	e01b      	b.n	800faf4 <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800fabc:	68fb      	ldr	r3, [r7, #12]
 800fabe:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	695b      	ldr	r3, [r3, #20]
 800fac6:	68fa      	ldr	r2, [r7, #12]
 800fac8:	8992      	ldrh	r2, [r2, #12]
 800faca:	fbb3 f0f2 	udiv	r0, r3, r2
 800face:	fb02 f200 	mul.w	r2, r2, r0
 800fad2:	1a9b      	subs	r3, r3, r2
 800fad4:	440b      	add	r3, r1
 800fad6:	4619      	mov	r1, r3
 800fad8:	68f8      	ldr	r0, [r7, #12]
 800fada:	f7ff fd70 	bl	800f5be <ld_clust>
 800fade:	4602      	mov	r2, r0
 800fae0:	693b      	ldr	r3, [r7, #16]
 800fae2:	609a      	str	r2, [r3, #8]
 800fae4:	e7aa      	b.n	800fa3c <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800fae6:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800fae8:	e7a8      	b.n	800fa3c <follow_path+0x68>
			if (res != FR_OK) break;
 800faea:	bf00      	nop
 800faec:	e002      	b.n	800faf4 <follow_path+0x120>
				break;
 800faee:	bf00      	nop
 800faf0:	e000      	b.n	800faf4 <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800faf2:	bf00      	nop
			}
		}
	}

	return res;
 800faf4:	7dfb      	ldrb	r3, [r7, #23]
}
 800faf6:	4618      	mov	r0, r3
 800faf8:	3718      	adds	r7, #24
 800fafa:	46bd      	mov	sp, r7
 800fafc:	bd80      	pop	{r7, pc}

0800fafe <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800fafe:	b480      	push	{r7}
 800fb00:	b087      	sub	sp, #28
 800fb02:	af00      	add	r7, sp, #0
 800fb04:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800fb06:	f04f 33ff 	mov.w	r3, #4294967295
 800fb0a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	681b      	ldr	r3, [r3, #0]
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d031      	beq.n	800fb78 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	617b      	str	r3, [r7, #20]
 800fb1a:	e002      	b.n	800fb22 <get_ldnumber+0x24>
 800fb1c:	697b      	ldr	r3, [r7, #20]
 800fb1e:	3301      	adds	r3, #1
 800fb20:	617b      	str	r3, [r7, #20]
 800fb22:	697b      	ldr	r3, [r7, #20]
 800fb24:	781b      	ldrb	r3, [r3, #0]
 800fb26:	2b20      	cmp	r3, #32
 800fb28:	d903      	bls.n	800fb32 <get_ldnumber+0x34>
 800fb2a:	697b      	ldr	r3, [r7, #20]
 800fb2c:	781b      	ldrb	r3, [r3, #0]
 800fb2e:	2b3a      	cmp	r3, #58	; 0x3a
 800fb30:	d1f4      	bne.n	800fb1c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800fb32:	697b      	ldr	r3, [r7, #20]
 800fb34:	781b      	ldrb	r3, [r3, #0]
 800fb36:	2b3a      	cmp	r3, #58	; 0x3a
 800fb38:	d11c      	bne.n	800fb74 <get_ldnumber+0x76>
			tp = *path;
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	1c5a      	adds	r2, r3, #1
 800fb44:	60fa      	str	r2, [r7, #12]
 800fb46:	781b      	ldrb	r3, [r3, #0]
 800fb48:	3b30      	subs	r3, #48	; 0x30
 800fb4a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800fb4c:	68bb      	ldr	r3, [r7, #8]
 800fb4e:	2b09      	cmp	r3, #9
 800fb50:	d80e      	bhi.n	800fb70 <get_ldnumber+0x72>
 800fb52:	68fa      	ldr	r2, [r7, #12]
 800fb54:	697b      	ldr	r3, [r7, #20]
 800fb56:	429a      	cmp	r2, r3
 800fb58:	d10a      	bne.n	800fb70 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800fb5a:	68bb      	ldr	r3, [r7, #8]
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d107      	bne.n	800fb70 <get_ldnumber+0x72>
					vol = (int)i;
 800fb60:	68bb      	ldr	r3, [r7, #8]
 800fb62:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800fb64:	697b      	ldr	r3, [r7, #20]
 800fb66:	3301      	adds	r3, #1
 800fb68:	617b      	str	r3, [r7, #20]
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	697a      	ldr	r2, [r7, #20]
 800fb6e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800fb70:	693b      	ldr	r3, [r7, #16]
 800fb72:	e002      	b.n	800fb7a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800fb74:	2300      	movs	r3, #0
 800fb76:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800fb78:	693b      	ldr	r3, [r7, #16]
}
 800fb7a:	4618      	mov	r0, r3
 800fb7c:	371c      	adds	r7, #28
 800fb7e:	46bd      	mov	sp, r7
 800fb80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb84:	4770      	bx	lr
	...

0800fb88 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800fb88:	b580      	push	{r7, lr}
 800fb8a:	b082      	sub	sp, #8
 800fb8c:	af00      	add	r7, sp, #0
 800fb8e:	6078      	str	r0, [r7, #4]
 800fb90:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	2200      	movs	r2, #0
 800fb96:	70da      	strb	r2, [r3, #3]
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	f04f 32ff 	mov.w	r2, #4294967295
 800fb9e:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800fba0:	6839      	ldr	r1, [r7, #0]
 800fba2:	6878      	ldr	r0, [r7, #4]
 800fba4:	f7fe ff8c 	bl	800eac0 <move_window>
 800fba8:	4603      	mov	r3, r0
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d001      	beq.n	800fbb2 <check_fs+0x2a>
 800fbae:	2304      	movs	r3, #4
 800fbb0:	e038      	b.n	800fc24 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	3338      	adds	r3, #56	; 0x38
 800fbb6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fbba:	4618      	mov	r0, r3
 800fbbc:	f7fe fcd0 	bl	800e560 <ld_word>
 800fbc0:	4603      	mov	r3, r0
 800fbc2:	461a      	mov	r2, r3
 800fbc4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800fbc8:	429a      	cmp	r2, r3
 800fbca:	d001      	beq.n	800fbd0 <check_fs+0x48>
 800fbcc:	2303      	movs	r3, #3
 800fbce:	e029      	b.n	800fc24 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800fbd6:	2be9      	cmp	r3, #233	; 0xe9
 800fbd8:	d009      	beq.n	800fbee <check_fs+0x66>
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800fbe0:	2beb      	cmp	r3, #235	; 0xeb
 800fbe2:	d11e      	bne.n	800fc22 <check_fs+0x9a>
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800fbea:	2b90      	cmp	r3, #144	; 0x90
 800fbec:	d119      	bne.n	800fc22 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	3338      	adds	r3, #56	; 0x38
 800fbf2:	3336      	adds	r3, #54	; 0x36
 800fbf4:	4618      	mov	r0, r3
 800fbf6:	f7fe fccb 	bl	800e590 <ld_dword>
 800fbfa:	4603      	mov	r3, r0
 800fbfc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800fc00:	4a0a      	ldr	r2, [pc, #40]	; (800fc2c <check_fs+0xa4>)
 800fc02:	4293      	cmp	r3, r2
 800fc04:	d101      	bne.n	800fc0a <check_fs+0x82>
 800fc06:	2300      	movs	r3, #0
 800fc08:	e00c      	b.n	800fc24 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	3338      	adds	r3, #56	; 0x38
 800fc0e:	3352      	adds	r3, #82	; 0x52
 800fc10:	4618      	mov	r0, r3
 800fc12:	f7fe fcbd 	bl	800e590 <ld_dword>
 800fc16:	4602      	mov	r2, r0
 800fc18:	4b05      	ldr	r3, [pc, #20]	; (800fc30 <check_fs+0xa8>)
 800fc1a:	429a      	cmp	r2, r3
 800fc1c:	d101      	bne.n	800fc22 <check_fs+0x9a>
 800fc1e:	2300      	movs	r3, #0
 800fc20:	e000      	b.n	800fc24 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800fc22:	2302      	movs	r3, #2
}
 800fc24:	4618      	mov	r0, r3
 800fc26:	3708      	adds	r7, #8
 800fc28:	46bd      	mov	sp, r7
 800fc2a:	bd80      	pop	{r7, pc}
 800fc2c:	00544146 	.word	0x00544146
 800fc30:	33544146 	.word	0x33544146

0800fc34 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800fc34:	b580      	push	{r7, lr}
 800fc36:	b096      	sub	sp, #88	; 0x58
 800fc38:	af00      	add	r7, sp, #0
 800fc3a:	60f8      	str	r0, [r7, #12]
 800fc3c:	60b9      	str	r1, [r7, #8]
 800fc3e:	4613      	mov	r3, r2
 800fc40:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800fc42:	68bb      	ldr	r3, [r7, #8]
 800fc44:	2200      	movs	r2, #0
 800fc46:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800fc48:	68f8      	ldr	r0, [r7, #12]
 800fc4a:	f7ff ff58 	bl	800fafe <get_ldnumber>
 800fc4e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800fc50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	da01      	bge.n	800fc5a <find_volume+0x26>
 800fc56:	230b      	movs	r3, #11
 800fc58:	e268      	b.n	801012c <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800fc5a:	4ab0      	ldr	r2, [pc, #704]	; (800ff1c <find_volume+0x2e8>)
 800fc5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fc62:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800fc64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d101      	bne.n	800fc6e <find_volume+0x3a>
 800fc6a:	230c      	movs	r3, #12
 800fc6c:	e25e      	b.n	801012c <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800fc6e:	68bb      	ldr	r3, [r7, #8]
 800fc70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fc72:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800fc74:	79fb      	ldrb	r3, [r7, #7]
 800fc76:	f023 0301 	bic.w	r3, r3, #1
 800fc7a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800fc7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc7e:	781b      	ldrb	r3, [r3, #0]
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d01a      	beq.n	800fcba <find_volume+0x86>
		stat = disk_status(fs->drv);
 800fc84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc86:	785b      	ldrb	r3, [r3, #1]
 800fc88:	4618      	mov	r0, r3
 800fc8a:	f7fe fbcb 	bl	800e424 <disk_status>
 800fc8e:	4603      	mov	r3, r0
 800fc90:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800fc94:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fc98:	f003 0301 	and.w	r3, r3, #1
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d10c      	bne.n	800fcba <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800fca0:	79fb      	ldrb	r3, [r7, #7]
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d007      	beq.n	800fcb6 <find_volume+0x82>
 800fca6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fcaa:	f003 0304 	and.w	r3, r3, #4
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d001      	beq.n	800fcb6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800fcb2:	230a      	movs	r3, #10
 800fcb4:	e23a      	b.n	801012c <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 800fcb6:	2300      	movs	r3, #0
 800fcb8:	e238      	b.n	801012c <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800fcba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcbc:	2200      	movs	r2, #0
 800fcbe:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800fcc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fcc2:	b2da      	uxtb	r2, r3
 800fcc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcc6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800fcc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcca:	785b      	ldrb	r3, [r3, #1]
 800fccc:	4618      	mov	r0, r3
 800fcce:	f7fe fbc3 	bl	800e458 <disk_initialize>
 800fcd2:	4603      	mov	r3, r0
 800fcd4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800fcd8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fcdc:	f003 0301 	and.w	r3, r3, #1
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d001      	beq.n	800fce8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800fce4:	2303      	movs	r3, #3
 800fce6:	e221      	b.n	801012c <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800fce8:	79fb      	ldrb	r3, [r7, #7]
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d007      	beq.n	800fcfe <find_volume+0xca>
 800fcee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fcf2:	f003 0304 	and.w	r3, r3, #4
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d001      	beq.n	800fcfe <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800fcfa:	230a      	movs	r3, #10
 800fcfc:	e216      	b.n	801012c <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800fcfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd00:	7858      	ldrb	r0, [r3, #1]
 800fd02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd04:	330c      	adds	r3, #12
 800fd06:	461a      	mov	r2, r3
 800fd08:	2102      	movs	r1, #2
 800fd0a:	f7fe fc0b 	bl	800e524 <disk_ioctl>
 800fd0e:	4603      	mov	r3, r0
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d001      	beq.n	800fd18 <find_volume+0xe4>
 800fd14:	2301      	movs	r3, #1
 800fd16:	e209      	b.n	801012c <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800fd18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd1a:	899b      	ldrh	r3, [r3, #12]
 800fd1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fd20:	d80d      	bhi.n	800fd3e <find_volume+0x10a>
 800fd22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd24:	899b      	ldrh	r3, [r3, #12]
 800fd26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fd2a:	d308      	bcc.n	800fd3e <find_volume+0x10a>
 800fd2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd2e:	899b      	ldrh	r3, [r3, #12]
 800fd30:	461a      	mov	r2, r3
 800fd32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd34:	899b      	ldrh	r3, [r3, #12]
 800fd36:	3b01      	subs	r3, #1
 800fd38:	4013      	ands	r3, r2
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d001      	beq.n	800fd42 <find_volume+0x10e>
 800fd3e:	2301      	movs	r3, #1
 800fd40:	e1f4      	b.n	801012c <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800fd42:	2300      	movs	r3, #0
 800fd44:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800fd46:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fd48:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fd4a:	f7ff ff1d 	bl	800fb88 <check_fs>
 800fd4e:	4603      	mov	r3, r0
 800fd50:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800fd54:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fd58:	2b02      	cmp	r3, #2
 800fd5a:	d14b      	bne.n	800fdf4 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800fd5c:	2300      	movs	r3, #0
 800fd5e:	643b      	str	r3, [r7, #64]	; 0x40
 800fd60:	e01f      	b.n	800fda2 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800fd62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd64:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800fd68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd6a:	011b      	lsls	r3, r3, #4
 800fd6c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800fd70:	4413      	add	r3, r2
 800fd72:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800fd74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd76:	3304      	adds	r3, #4
 800fd78:	781b      	ldrb	r3, [r3, #0]
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d006      	beq.n	800fd8c <find_volume+0x158>
 800fd7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd80:	3308      	adds	r3, #8
 800fd82:	4618      	mov	r0, r3
 800fd84:	f7fe fc04 	bl	800e590 <ld_dword>
 800fd88:	4602      	mov	r2, r0
 800fd8a:	e000      	b.n	800fd8e <find_volume+0x15a>
 800fd8c:	2200      	movs	r2, #0
 800fd8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd90:	009b      	lsls	r3, r3, #2
 800fd92:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800fd96:	440b      	add	r3, r1
 800fd98:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800fd9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd9e:	3301      	adds	r3, #1
 800fda0:	643b      	str	r3, [r7, #64]	; 0x40
 800fda2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fda4:	2b03      	cmp	r3, #3
 800fda6:	d9dc      	bls.n	800fd62 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800fda8:	2300      	movs	r3, #0
 800fdaa:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800fdac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d002      	beq.n	800fdb8 <find_volume+0x184>
 800fdb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fdb4:	3b01      	subs	r3, #1
 800fdb6:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800fdb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fdba:	009b      	lsls	r3, r3, #2
 800fdbc:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800fdc0:	4413      	add	r3, r2
 800fdc2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800fdc6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800fdc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d005      	beq.n	800fdda <find_volume+0x1a6>
 800fdce:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fdd0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fdd2:	f7ff fed9 	bl	800fb88 <check_fs>
 800fdd6:	4603      	mov	r3, r0
 800fdd8:	e000      	b.n	800fddc <find_volume+0x1a8>
 800fdda:	2303      	movs	r3, #3
 800fddc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800fde0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fde4:	2b01      	cmp	r3, #1
 800fde6:	d905      	bls.n	800fdf4 <find_volume+0x1c0>
 800fde8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fdea:	3301      	adds	r3, #1
 800fdec:	643b      	str	r3, [r7, #64]	; 0x40
 800fdee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fdf0:	2b03      	cmp	r3, #3
 800fdf2:	d9e1      	bls.n	800fdb8 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800fdf4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fdf8:	2b04      	cmp	r3, #4
 800fdfa:	d101      	bne.n	800fe00 <find_volume+0x1cc>
 800fdfc:	2301      	movs	r3, #1
 800fdfe:	e195      	b.n	801012c <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800fe00:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fe04:	2b01      	cmp	r3, #1
 800fe06:	d901      	bls.n	800fe0c <find_volume+0x1d8>
 800fe08:	230d      	movs	r3, #13
 800fe0a:	e18f      	b.n	801012c <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800fe0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe0e:	3338      	adds	r3, #56	; 0x38
 800fe10:	330b      	adds	r3, #11
 800fe12:	4618      	mov	r0, r3
 800fe14:	f7fe fba4 	bl	800e560 <ld_word>
 800fe18:	4603      	mov	r3, r0
 800fe1a:	461a      	mov	r2, r3
 800fe1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe1e:	899b      	ldrh	r3, [r3, #12]
 800fe20:	429a      	cmp	r2, r3
 800fe22:	d001      	beq.n	800fe28 <find_volume+0x1f4>
 800fe24:	230d      	movs	r3, #13
 800fe26:	e181      	b.n	801012c <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800fe28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe2a:	3338      	adds	r3, #56	; 0x38
 800fe2c:	3316      	adds	r3, #22
 800fe2e:	4618      	mov	r0, r3
 800fe30:	f7fe fb96 	bl	800e560 <ld_word>
 800fe34:	4603      	mov	r3, r0
 800fe36:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800fe38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d106      	bne.n	800fe4c <find_volume+0x218>
 800fe3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe40:	3338      	adds	r3, #56	; 0x38
 800fe42:	3324      	adds	r3, #36	; 0x24
 800fe44:	4618      	mov	r0, r3
 800fe46:	f7fe fba3 	bl	800e590 <ld_dword>
 800fe4a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800fe4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe4e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fe50:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800fe52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe54:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800fe58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe5a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800fe5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe5e:	789b      	ldrb	r3, [r3, #2]
 800fe60:	2b01      	cmp	r3, #1
 800fe62:	d005      	beq.n	800fe70 <find_volume+0x23c>
 800fe64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe66:	789b      	ldrb	r3, [r3, #2]
 800fe68:	2b02      	cmp	r3, #2
 800fe6a:	d001      	beq.n	800fe70 <find_volume+0x23c>
 800fe6c:	230d      	movs	r3, #13
 800fe6e:	e15d      	b.n	801012c <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800fe70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe72:	789b      	ldrb	r3, [r3, #2]
 800fe74:	461a      	mov	r2, r3
 800fe76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fe78:	fb02 f303 	mul.w	r3, r2, r3
 800fe7c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800fe7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fe84:	b29a      	uxth	r2, r3
 800fe86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe88:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800fe8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe8c:	895b      	ldrh	r3, [r3, #10]
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d008      	beq.n	800fea4 <find_volume+0x270>
 800fe92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe94:	895b      	ldrh	r3, [r3, #10]
 800fe96:	461a      	mov	r2, r3
 800fe98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe9a:	895b      	ldrh	r3, [r3, #10]
 800fe9c:	3b01      	subs	r3, #1
 800fe9e:	4013      	ands	r3, r2
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d001      	beq.n	800fea8 <find_volume+0x274>
 800fea4:	230d      	movs	r3, #13
 800fea6:	e141      	b.n	801012c <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800fea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feaa:	3338      	adds	r3, #56	; 0x38
 800feac:	3311      	adds	r3, #17
 800feae:	4618      	mov	r0, r3
 800feb0:	f7fe fb56 	bl	800e560 <ld_word>
 800feb4:	4603      	mov	r3, r0
 800feb6:	461a      	mov	r2, r3
 800feb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feba:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800febc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800febe:	891b      	ldrh	r3, [r3, #8]
 800fec0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fec2:	8992      	ldrh	r2, [r2, #12]
 800fec4:	0952      	lsrs	r2, r2, #5
 800fec6:	b292      	uxth	r2, r2
 800fec8:	fbb3 f1f2 	udiv	r1, r3, r2
 800fecc:	fb02 f201 	mul.w	r2, r2, r1
 800fed0:	1a9b      	subs	r3, r3, r2
 800fed2:	b29b      	uxth	r3, r3
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d001      	beq.n	800fedc <find_volume+0x2a8>
 800fed8:	230d      	movs	r3, #13
 800feda:	e127      	b.n	801012c <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800fedc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fede:	3338      	adds	r3, #56	; 0x38
 800fee0:	3313      	adds	r3, #19
 800fee2:	4618      	mov	r0, r3
 800fee4:	f7fe fb3c 	bl	800e560 <ld_word>
 800fee8:	4603      	mov	r3, r0
 800feea:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800feec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d106      	bne.n	800ff00 <find_volume+0x2cc>
 800fef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fef4:	3338      	adds	r3, #56	; 0x38
 800fef6:	3320      	adds	r3, #32
 800fef8:	4618      	mov	r0, r3
 800fefa:	f7fe fb49 	bl	800e590 <ld_dword>
 800fefe:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800ff00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff02:	3338      	adds	r3, #56	; 0x38
 800ff04:	330e      	adds	r3, #14
 800ff06:	4618      	mov	r0, r3
 800ff08:	f7fe fb2a 	bl	800e560 <ld_word>
 800ff0c:	4603      	mov	r3, r0
 800ff0e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800ff10:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d104      	bne.n	800ff20 <find_volume+0x2ec>
 800ff16:	230d      	movs	r3, #13
 800ff18:	e108      	b.n	801012c <find_volume+0x4f8>
 800ff1a:	bf00      	nop
 800ff1c:	200373ec 	.word	0x200373ec

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800ff20:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ff22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ff24:	4413      	add	r3, r2
 800ff26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ff28:	8911      	ldrh	r1, [r2, #8]
 800ff2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ff2c:	8992      	ldrh	r2, [r2, #12]
 800ff2e:	0952      	lsrs	r2, r2, #5
 800ff30:	b292      	uxth	r2, r2
 800ff32:	fbb1 f2f2 	udiv	r2, r1, r2
 800ff36:	b292      	uxth	r2, r2
 800ff38:	4413      	add	r3, r2
 800ff3a:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800ff3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ff3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff40:	429a      	cmp	r2, r3
 800ff42:	d201      	bcs.n	800ff48 <find_volume+0x314>
 800ff44:	230d      	movs	r3, #13
 800ff46:	e0f1      	b.n	801012c <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800ff48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ff4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff4c:	1ad3      	subs	r3, r2, r3
 800ff4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ff50:	8952      	ldrh	r2, [r2, #10]
 800ff52:	fbb3 f3f2 	udiv	r3, r3, r2
 800ff56:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800ff58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d101      	bne.n	800ff62 <find_volume+0x32e>
 800ff5e:	230d      	movs	r3, #13
 800ff60:	e0e4      	b.n	801012c <find_volume+0x4f8>
		fmt = FS_FAT32;
 800ff62:	2303      	movs	r3, #3
 800ff64:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800ff68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff6a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800ff6e:	4293      	cmp	r3, r2
 800ff70:	d802      	bhi.n	800ff78 <find_volume+0x344>
 800ff72:	2302      	movs	r3, #2
 800ff74:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800ff78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff7a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800ff7e:	4293      	cmp	r3, r2
 800ff80:	d802      	bhi.n	800ff88 <find_volume+0x354>
 800ff82:	2301      	movs	r3, #1
 800ff84:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800ff88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff8a:	1c9a      	adds	r2, r3, #2
 800ff8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff8e:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800ff90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff92:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ff94:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800ff96:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ff98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff9a:	441a      	add	r2, r3
 800ff9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff9e:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800ffa0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ffa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffa4:	441a      	add	r2, r3
 800ffa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffa8:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800ffaa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ffae:	2b03      	cmp	r3, #3
 800ffb0:	d11e      	bne.n	800fff0 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800ffb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffb4:	3338      	adds	r3, #56	; 0x38
 800ffb6:	332a      	adds	r3, #42	; 0x2a
 800ffb8:	4618      	mov	r0, r3
 800ffba:	f7fe fad1 	bl	800e560 <ld_word>
 800ffbe:	4603      	mov	r3, r0
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d001      	beq.n	800ffc8 <find_volume+0x394>
 800ffc4:	230d      	movs	r3, #13
 800ffc6:	e0b1      	b.n	801012c <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800ffc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffca:	891b      	ldrh	r3, [r3, #8]
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	d001      	beq.n	800ffd4 <find_volume+0x3a0>
 800ffd0:	230d      	movs	r3, #13
 800ffd2:	e0ab      	b.n	801012c <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800ffd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffd6:	3338      	adds	r3, #56	; 0x38
 800ffd8:	332c      	adds	r3, #44	; 0x2c
 800ffda:	4618      	mov	r0, r3
 800ffdc:	f7fe fad8 	bl	800e590 <ld_dword>
 800ffe0:	4602      	mov	r2, r0
 800ffe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffe4:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800ffe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffe8:	69db      	ldr	r3, [r3, #28]
 800ffea:	009b      	lsls	r3, r3, #2
 800ffec:	647b      	str	r3, [r7, #68]	; 0x44
 800ffee:	e01f      	b.n	8010030 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800fff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fff2:	891b      	ldrh	r3, [r3, #8]
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d101      	bne.n	800fffc <find_volume+0x3c8>
 800fff8:	230d      	movs	r3, #13
 800fffa:	e097      	b.n	801012c <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800fffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fffe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010000:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010002:	441a      	add	r2, r3
 8010004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010006:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8010008:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801000c:	2b02      	cmp	r3, #2
 801000e:	d103      	bne.n	8010018 <find_volume+0x3e4>
 8010010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010012:	69db      	ldr	r3, [r3, #28]
 8010014:	005b      	lsls	r3, r3, #1
 8010016:	e00a      	b.n	801002e <find_volume+0x3fa>
 8010018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801001a:	69da      	ldr	r2, [r3, #28]
 801001c:	4613      	mov	r3, r2
 801001e:	005b      	lsls	r3, r3, #1
 8010020:	4413      	add	r3, r2
 8010022:	085a      	lsrs	r2, r3, #1
 8010024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010026:	69db      	ldr	r3, [r3, #28]
 8010028:	f003 0301 	and.w	r3, r3, #1
 801002c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801002e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8010030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010032:	6a1a      	ldr	r2, [r3, #32]
 8010034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010036:	899b      	ldrh	r3, [r3, #12]
 8010038:	4619      	mov	r1, r3
 801003a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801003c:	440b      	add	r3, r1
 801003e:	3b01      	subs	r3, #1
 8010040:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010042:	8989      	ldrh	r1, [r1, #12]
 8010044:	fbb3 f3f1 	udiv	r3, r3, r1
 8010048:	429a      	cmp	r2, r3
 801004a:	d201      	bcs.n	8010050 <find_volume+0x41c>
 801004c:	230d      	movs	r3, #13
 801004e:	e06d      	b.n	801012c <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8010050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010052:	f04f 32ff 	mov.w	r2, #4294967295
 8010056:	615a      	str	r2, [r3, #20]
 8010058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801005a:	695a      	ldr	r2, [r3, #20]
 801005c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801005e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8010060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010062:	2280      	movs	r2, #128	; 0x80
 8010064:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8010066:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801006a:	2b03      	cmp	r3, #3
 801006c:	d149      	bne.n	8010102 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801006e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010070:	3338      	adds	r3, #56	; 0x38
 8010072:	3330      	adds	r3, #48	; 0x30
 8010074:	4618      	mov	r0, r3
 8010076:	f7fe fa73 	bl	800e560 <ld_word>
 801007a:	4603      	mov	r3, r0
 801007c:	2b01      	cmp	r3, #1
 801007e:	d140      	bne.n	8010102 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8010080:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010082:	3301      	adds	r3, #1
 8010084:	4619      	mov	r1, r3
 8010086:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010088:	f7fe fd1a 	bl	800eac0 <move_window>
 801008c:	4603      	mov	r3, r0
 801008e:	2b00      	cmp	r3, #0
 8010090:	d137      	bne.n	8010102 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8010092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010094:	2200      	movs	r2, #0
 8010096:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8010098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801009a:	3338      	adds	r3, #56	; 0x38
 801009c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80100a0:	4618      	mov	r0, r3
 80100a2:	f7fe fa5d 	bl	800e560 <ld_word>
 80100a6:	4603      	mov	r3, r0
 80100a8:	461a      	mov	r2, r3
 80100aa:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80100ae:	429a      	cmp	r2, r3
 80100b0:	d127      	bne.n	8010102 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80100b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100b4:	3338      	adds	r3, #56	; 0x38
 80100b6:	4618      	mov	r0, r3
 80100b8:	f7fe fa6a 	bl	800e590 <ld_dword>
 80100bc:	4602      	mov	r2, r0
 80100be:	4b1d      	ldr	r3, [pc, #116]	; (8010134 <find_volume+0x500>)
 80100c0:	429a      	cmp	r2, r3
 80100c2:	d11e      	bne.n	8010102 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80100c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100c6:	3338      	adds	r3, #56	; 0x38
 80100c8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80100cc:	4618      	mov	r0, r3
 80100ce:	f7fe fa5f 	bl	800e590 <ld_dword>
 80100d2:	4602      	mov	r2, r0
 80100d4:	4b18      	ldr	r3, [pc, #96]	; (8010138 <find_volume+0x504>)
 80100d6:	429a      	cmp	r2, r3
 80100d8:	d113      	bne.n	8010102 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80100da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100dc:	3338      	adds	r3, #56	; 0x38
 80100de:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80100e2:	4618      	mov	r0, r3
 80100e4:	f7fe fa54 	bl	800e590 <ld_dword>
 80100e8:	4602      	mov	r2, r0
 80100ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100ec:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80100ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100f0:	3338      	adds	r3, #56	; 0x38
 80100f2:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80100f6:	4618      	mov	r0, r3
 80100f8:	f7fe fa4a 	bl	800e590 <ld_dword>
 80100fc:	4602      	mov	r2, r0
 80100fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010100:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8010102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010104:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8010108:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801010a:	4b0c      	ldr	r3, [pc, #48]	; (801013c <find_volume+0x508>)
 801010c:	881b      	ldrh	r3, [r3, #0]
 801010e:	3301      	adds	r3, #1
 8010110:	b29a      	uxth	r2, r3
 8010112:	4b0a      	ldr	r3, [pc, #40]	; (801013c <find_volume+0x508>)
 8010114:	801a      	strh	r2, [r3, #0]
 8010116:	4b09      	ldr	r3, [pc, #36]	; (801013c <find_volume+0x508>)
 8010118:	881a      	ldrh	r2, [r3, #0]
 801011a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801011c:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 801011e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010120:	2200      	movs	r2, #0
 8010122:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8010124:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010126:	f7fe fc63 	bl	800e9f0 <clear_lock>
#endif
	return FR_OK;
 801012a:	2300      	movs	r3, #0
}
 801012c:	4618      	mov	r0, r3
 801012e:	3758      	adds	r7, #88	; 0x58
 8010130:	46bd      	mov	sp, r7
 8010132:	bd80      	pop	{r7, pc}
 8010134:	41615252 	.word	0x41615252
 8010138:	61417272 	.word	0x61417272
 801013c:	200373f0 	.word	0x200373f0

08010140 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8010140:	b580      	push	{r7, lr}
 8010142:	b084      	sub	sp, #16
 8010144:	af00      	add	r7, sp, #0
 8010146:	6078      	str	r0, [r7, #4]
 8010148:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801014a:	2309      	movs	r3, #9
 801014c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	2b00      	cmp	r3, #0
 8010152:	d01c      	beq.n	801018e <validate+0x4e>
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	2b00      	cmp	r3, #0
 801015a:	d018      	beq.n	801018e <validate+0x4e>
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	781b      	ldrb	r3, [r3, #0]
 8010162:	2b00      	cmp	r3, #0
 8010164:	d013      	beq.n	801018e <validate+0x4e>
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	889a      	ldrh	r2, [r3, #4]
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	88db      	ldrh	r3, [r3, #6]
 8010170:	429a      	cmp	r2, r3
 8010172:	d10c      	bne.n	801018e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	785b      	ldrb	r3, [r3, #1]
 801017a:	4618      	mov	r0, r3
 801017c:	f7fe f952 	bl	800e424 <disk_status>
 8010180:	4603      	mov	r3, r0
 8010182:	f003 0301 	and.w	r3, r3, #1
 8010186:	2b00      	cmp	r3, #0
 8010188:	d101      	bne.n	801018e <validate+0x4e>
			res = FR_OK;
 801018a:	2300      	movs	r3, #0
 801018c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801018e:	7bfb      	ldrb	r3, [r7, #15]
 8010190:	2b00      	cmp	r3, #0
 8010192:	d102      	bne.n	801019a <validate+0x5a>
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	e000      	b.n	801019c <validate+0x5c>
 801019a:	2300      	movs	r3, #0
 801019c:	683a      	ldr	r2, [r7, #0]
 801019e:	6013      	str	r3, [r2, #0]
	return res;
 80101a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80101a2:	4618      	mov	r0, r3
 80101a4:	3710      	adds	r7, #16
 80101a6:	46bd      	mov	sp, r7
 80101a8:	bd80      	pop	{r7, pc}
	...

080101ac <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80101ac:	b580      	push	{r7, lr}
 80101ae:	b088      	sub	sp, #32
 80101b0:	af00      	add	r7, sp, #0
 80101b2:	60f8      	str	r0, [r7, #12]
 80101b4:	60b9      	str	r1, [r7, #8]
 80101b6:	4613      	mov	r3, r2
 80101b8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80101ba:	68bb      	ldr	r3, [r7, #8]
 80101bc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80101be:	f107 0310 	add.w	r3, r7, #16
 80101c2:	4618      	mov	r0, r3
 80101c4:	f7ff fc9b 	bl	800fafe <get_ldnumber>
 80101c8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80101ca:	69fb      	ldr	r3, [r7, #28]
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	da01      	bge.n	80101d4 <f_mount+0x28>
 80101d0:	230b      	movs	r3, #11
 80101d2:	e02b      	b.n	801022c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80101d4:	4a17      	ldr	r2, [pc, #92]	; (8010234 <f_mount+0x88>)
 80101d6:	69fb      	ldr	r3, [r7, #28]
 80101d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80101dc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80101de:	69bb      	ldr	r3, [r7, #24]
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d005      	beq.n	80101f0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80101e4:	69b8      	ldr	r0, [r7, #24]
 80101e6:	f7fe fc03 	bl	800e9f0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80101ea:	69bb      	ldr	r3, [r7, #24]
 80101ec:	2200      	movs	r2, #0
 80101ee:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80101f0:	68fb      	ldr	r3, [r7, #12]
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d002      	beq.n	80101fc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	2200      	movs	r2, #0
 80101fa:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80101fc:	68fa      	ldr	r2, [r7, #12]
 80101fe:	490d      	ldr	r1, [pc, #52]	; (8010234 <f_mount+0x88>)
 8010200:	69fb      	ldr	r3, [r7, #28]
 8010202:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8010206:	68fb      	ldr	r3, [r7, #12]
 8010208:	2b00      	cmp	r3, #0
 801020a:	d002      	beq.n	8010212 <f_mount+0x66>
 801020c:	79fb      	ldrb	r3, [r7, #7]
 801020e:	2b01      	cmp	r3, #1
 8010210:	d001      	beq.n	8010216 <f_mount+0x6a>
 8010212:	2300      	movs	r3, #0
 8010214:	e00a      	b.n	801022c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8010216:	f107 010c 	add.w	r1, r7, #12
 801021a:	f107 0308 	add.w	r3, r7, #8
 801021e:	2200      	movs	r2, #0
 8010220:	4618      	mov	r0, r3
 8010222:	f7ff fd07 	bl	800fc34 <find_volume>
 8010226:	4603      	mov	r3, r0
 8010228:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801022a:	7dfb      	ldrb	r3, [r7, #23]
}
 801022c:	4618      	mov	r0, r3
 801022e:	3720      	adds	r7, #32
 8010230:	46bd      	mov	sp, r7
 8010232:	bd80      	pop	{r7, pc}
 8010234:	200373ec 	.word	0x200373ec

08010238 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8010238:	b580      	push	{r7, lr}
 801023a:	b098      	sub	sp, #96	; 0x60
 801023c:	af00      	add	r7, sp, #0
 801023e:	60f8      	str	r0, [r7, #12]
 8010240:	60b9      	str	r1, [r7, #8]
 8010242:	4613      	mov	r3, r2
 8010244:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	2b00      	cmp	r3, #0
 801024a:	d101      	bne.n	8010250 <f_open+0x18>
 801024c:	2309      	movs	r3, #9
 801024e:	e1ba      	b.n	80105c6 <f_open+0x38e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8010250:	79fb      	ldrb	r3, [r7, #7]
 8010252:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010256:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8010258:	79fa      	ldrb	r2, [r7, #7]
 801025a:	f107 0110 	add.w	r1, r7, #16
 801025e:	f107 0308 	add.w	r3, r7, #8
 8010262:	4618      	mov	r0, r3
 8010264:	f7ff fce6 	bl	800fc34 <find_volume>
 8010268:	4603      	mov	r3, r0
 801026a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 801026e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010272:	2b00      	cmp	r3, #0
 8010274:	f040 819e 	bne.w	80105b4 <f_open+0x37c>
		dj.obj.fs = fs;
 8010278:	693b      	ldr	r3, [r7, #16]
 801027a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801027c:	68ba      	ldr	r2, [r7, #8]
 801027e:	f107 0314 	add.w	r3, r7, #20
 8010282:	4611      	mov	r1, r2
 8010284:	4618      	mov	r0, r3
 8010286:	f7ff fba5 	bl	800f9d4 <follow_path>
 801028a:	4603      	mov	r3, r0
 801028c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8010290:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010294:	2b00      	cmp	r3, #0
 8010296:	d11a      	bne.n	80102ce <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8010298:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801029c:	b25b      	sxtb	r3, r3
 801029e:	2b00      	cmp	r3, #0
 80102a0:	da03      	bge.n	80102aa <f_open+0x72>
				res = FR_INVALID_NAME;
 80102a2:	2306      	movs	r3, #6
 80102a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80102a8:	e011      	b.n	80102ce <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80102aa:	79fb      	ldrb	r3, [r7, #7]
 80102ac:	f023 0301 	bic.w	r3, r3, #1
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	bf14      	ite	ne
 80102b4:	2301      	movne	r3, #1
 80102b6:	2300      	moveq	r3, #0
 80102b8:	b2db      	uxtb	r3, r3
 80102ba:	461a      	mov	r2, r3
 80102bc:	f107 0314 	add.w	r3, r7, #20
 80102c0:	4611      	mov	r1, r2
 80102c2:	4618      	mov	r0, r3
 80102c4:	f7fe fa4c 	bl	800e760 <chk_lock>
 80102c8:	4603      	mov	r3, r0
 80102ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80102ce:	79fb      	ldrb	r3, [r7, #7]
 80102d0:	f003 031c 	and.w	r3, r3, #28
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d07e      	beq.n	80103d6 <f_open+0x19e>
			if (res != FR_OK) {					/* No file, create new */
 80102d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d017      	beq.n	8010310 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80102e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80102e4:	2b04      	cmp	r3, #4
 80102e6:	d10e      	bne.n	8010306 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80102e8:	f7fe fa96 	bl	800e818 <enq_lock>
 80102ec:	4603      	mov	r3, r0
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d006      	beq.n	8010300 <f_open+0xc8>
 80102f2:	f107 0314 	add.w	r3, r7, #20
 80102f6:	4618      	mov	r0, r3
 80102f8:	f7ff fa52 	bl	800f7a0 <dir_register>
 80102fc:	4603      	mov	r3, r0
 80102fe:	e000      	b.n	8010302 <f_open+0xca>
 8010300:	2312      	movs	r3, #18
 8010302:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8010306:	79fb      	ldrb	r3, [r7, #7]
 8010308:	f043 0308 	orr.w	r3, r3, #8
 801030c:	71fb      	strb	r3, [r7, #7]
 801030e:	e010      	b.n	8010332 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8010310:	7ebb      	ldrb	r3, [r7, #26]
 8010312:	f003 0311 	and.w	r3, r3, #17
 8010316:	2b00      	cmp	r3, #0
 8010318:	d003      	beq.n	8010322 <f_open+0xea>
					res = FR_DENIED;
 801031a:	2307      	movs	r3, #7
 801031c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010320:	e007      	b.n	8010332 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8010322:	79fb      	ldrb	r3, [r7, #7]
 8010324:	f003 0304 	and.w	r3, r3, #4
 8010328:	2b00      	cmp	r3, #0
 801032a:	d002      	beq.n	8010332 <f_open+0xfa>
 801032c:	2308      	movs	r3, #8
 801032e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8010332:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010336:	2b00      	cmp	r3, #0
 8010338:	d167      	bne.n	801040a <f_open+0x1d2>
 801033a:	79fb      	ldrb	r3, [r7, #7]
 801033c:	f003 0308 	and.w	r3, r3, #8
 8010340:	2b00      	cmp	r3, #0
 8010342:	d062      	beq.n	801040a <f_open+0x1d2>
				dw = GET_FATTIME();
 8010344:	4ba2      	ldr	r3, [pc, #648]	; (80105d0 <f_open+0x398>)
 8010346:	653b      	str	r3, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8010348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801034a:	330e      	adds	r3, #14
 801034c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801034e:	4618      	mov	r0, r3
 8010350:	f7fe f95c 	bl	800e60c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8010354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010356:	3316      	adds	r3, #22
 8010358:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801035a:	4618      	mov	r0, r3
 801035c:	f7fe f956 	bl	800e60c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8010360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010362:	330b      	adds	r3, #11
 8010364:	2220      	movs	r2, #32
 8010366:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8010368:	693b      	ldr	r3, [r7, #16]
 801036a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801036c:	4611      	mov	r1, r2
 801036e:	4618      	mov	r0, r3
 8010370:	f7ff f925 	bl	800f5be <ld_clust>
 8010374:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8010376:	693b      	ldr	r3, [r7, #16]
 8010378:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801037a:	2200      	movs	r2, #0
 801037c:	4618      	mov	r0, r3
 801037e:	f7ff f93d 	bl	800f5fc <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8010382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010384:	331c      	adds	r3, #28
 8010386:	2100      	movs	r1, #0
 8010388:	4618      	mov	r0, r3
 801038a:	f7fe f93f 	bl	800e60c <st_dword>
					fs->wflag = 1;
 801038e:	693b      	ldr	r3, [r7, #16]
 8010390:	2201      	movs	r2, #1
 8010392:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8010394:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010396:	2b00      	cmp	r3, #0
 8010398:	d037      	beq.n	801040a <f_open+0x1d2>
						dw = fs->winsect;
 801039a:	693b      	ldr	r3, [r7, #16]
 801039c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801039e:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80103a0:	f107 0314 	add.w	r3, r7, #20
 80103a4:	2200      	movs	r2, #0
 80103a6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80103a8:	4618      	mov	r0, r3
 80103aa:	f7fe fe2d 	bl	800f008 <remove_chain>
 80103ae:	4603      	mov	r3, r0
 80103b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80103b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d126      	bne.n	801040a <f_open+0x1d2>
							res = move_window(fs, dw);
 80103bc:	693b      	ldr	r3, [r7, #16]
 80103be:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80103c0:	4618      	mov	r0, r3
 80103c2:	f7fe fb7d 	bl	800eac0 <move_window>
 80103c6:	4603      	mov	r3, r0
 80103c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80103cc:	693b      	ldr	r3, [r7, #16]
 80103ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80103d0:	3a01      	subs	r2, #1
 80103d2:	611a      	str	r2, [r3, #16]
 80103d4:	e019      	b.n	801040a <f_open+0x1d2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80103d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d115      	bne.n	801040a <f_open+0x1d2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80103de:	7ebb      	ldrb	r3, [r7, #26]
 80103e0:	f003 0310 	and.w	r3, r3, #16
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d003      	beq.n	80103f0 <f_open+0x1b8>
					res = FR_NO_FILE;
 80103e8:	2304      	movs	r3, #4
 80103ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80103ee:	e00c      	b.n	801040a <f_open+0x1d2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80103f0:	79fb      	ldrb	r3, [r7, #7]
 80103f2:	f003 0302 	and.w	r3, r3, #2
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d007      	beq.n	801040a <f_open+0x1d2>
 80103fa:	7ebb      	ldrb	r3, [r7, #26]
 80103fc:	f003 0301 	and.w	r3, r3, #1
 8010400:	2b00      	cmp	r3, #0
 8010402:	d002      	beq.n	801040a <f_open+0x1d2>
						res = FR_DENIED;
 8010404:	2307      	movs	r3, #7
 8010406:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 801040a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801040e:	2b00      	cmp	r3, #0
 8010410:	d128      	bne.n	8010464 <f_open+0x22c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8010412:	79fb      	ldrb	r3, [r7, #7]
 8010414:	f003 0308 	and.w	r3, r3, #8
 8010418:	2b00      	cmp	r3, #0
 801041a:	d003      	beq.n	8010424 <f_open+0x1ec>
				mode |= FA_MODIFIED;
 801041c:	79fb      	ldrb	r3, [r7, #7]
 801041e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010422:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8010424:	693b      	ldr	r3, [r7, #16]
 8010426:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010428:	68fb      	ldr	r3, [r7, #12]
 801042a:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 801042c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801042e:	68fb      	ldr	r3, [r7, #12]
 8010430:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010432:	79fb      	ldrb	r3, [r7, #7]
 8010434:	f023 0301 	bic.w	r3, r3, #1
 8010438:	2b00      	cmp	r3, #0
 801043a:	bf14      	ite	ne
 801043c:	2301      	movne	r3, #1
 801043e:	2300      	moveq	r3, #0
 8010440:	b2db      	uxtb	r3, r3
 8010442:	461a      	mov	r2, r3
 8010444:	f107 0314 	add.w	r3, r7, #20
 8010448:	4611      	mov	r1, r2
 801044a:	4618      	mov	r0, r3
 801044c:	f7fe fa06 	bl	800e85c <inc_lock>
 8010450:	4602      	mov	r2, r0
 8010452:	68fb      	ldr	r3, [r7, #12]
 8010454:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8010456:	68fb      	ldr	r3, [r7, #12]
 8010458:	691b      	ldr	r3, [r3, #16]
 801045a:	2b00      	cmp	r3, #0
 801045c:	d102      	bne.n	8010464 <f_open+0x22c>
 801045e:	2302      	movs	r3, #2
 8010460:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8010464:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010468:	2b00      	cmp	r3, #0
 801046a:	f040 80a3 	bne.w	80105b4 <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801046e:	693b      	ldr	r3, [r7, #16]
 8010470:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010472:	4611      	mov	r1, r2
 8010474:	4618      	mov	r0, r3
 8010476:	f7ff f8a2 	bl	800f5be <ld_clust>
 801047a:	4602      	mov	r2, r0
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8010480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010482:	331c      	adds	r3, #28
 8010484:	4618      	mov	r0, r3
 8010486:	f7fe f883 	bl	800e590 <ld_dword>
 801048a:	4602      	mov	r2, r0
 801048c:	68fb      	ldr	r3, [r7, #12]
 801048e:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8010490:	68fb      	ldr	r3, [r7, #12]
 8010492:	2200      	movs	r2, #0
 8010494:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8010496:	693a      	ldr	r2, [r7, #16]
 8010498:	68fb      	ldr	r3, [r7, #12]
 801049a:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801049c:	693b      	ldr	r3, [r7, #16]
 801049e:	88da      	ldrh	r2, [r3, #6]
 80104a0:	68fb      	ldr	r3, [r7, #12]
 80104a2:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80104a4:	68fb      	ldr	r3, [r7, #12]
 80104a6:	79fa      	ldrb	r2, [r7, #7]
 80104a8:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80104aa:	68fb      	ldr	r3, [r7, #12]
 80104ac:	2200      	movs	r2, #0
 80104ae:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80104b0:	68fb      	ldr	r3, [r7, #12]
 80104b2:	2200      	movs	r2, #0
 80104b4:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80104b6:	68fb      	ldr	r3, [r7, #12]
 80104b8:	2200      	movs	r2, #0
 80104ba:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80104bc:	68fb      	ldr	r3, [r7, #12]
 80104be:	3330      	adds	r3, #48	; 0x30
 80104c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80104c4:	2100      	movs	r1, #0
 80104c6:	4618      	mov	r0, r3
 80104c8:	f7fe f8ed 	bl	800e6a6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80104cc:	79fb      	ldrb	r3, [r7, #7]
 80104ce:	f003 0320 	and.w	r3, r3, #32
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d06e      	beq.n	80105b4 <f_open+0x37c>
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	68db      	ldr	r3, [r3, #12]
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d06a      	beq.n	80105b4 <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80104de:	68fb      	ldr	r3, [r7, #12]
 80104e0:	68da      	ldr	r2, [r3, #12]
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80104e6:	693b      	ldr	r3, [r7, #16]
 80104e8:	895b      	ldrh	r3, [r3, #10]
 80104ea:	461a      	mov	r2, r3
 80104ec:	693b      	ldr	r3, [r7, #16]
 80104ee:	899b      	ldrh	r3, [r3, #12]
 80104f0:	fb03 f302 	mul.w	r3, r3, r2
 80104f4:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80104f6:	68fb      	ldr	r3, [r7, #12]
 80104f8:	689b      	ldr	r3, [r3, #8]
 80104fa:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	68db      	ldr	r3, [r3, #12]
 8010500:	657b      	str	r3, [r7, #84]	; 0x54
 8010502:	e016      	b.n	8010532 <f_open+0x2fa>
					clst = get_fat(&fp->obj, clst);
 8010504:	68fb      	ldr	r3, [r7, #12]
 8010506:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010508:	4618      	mov	r0, r3
 801050a:	f7fe fb96 	bl	800ec3a <get_fat>
 801050e:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8010510:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010512:	2b01      	cmp	r3, #1
 8010514:	d802      	bhi.n	801051c <f_open+0x2e4>
 8010516:	2302      	movs	r3, #2
 8010518:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801051c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801051e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010522:	d102      	bne.n	801052a <f_open+0x2f2>
 8010524:	2301      	movs	r3, #1
 8010526:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801052a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801052c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801052e:	1ad3      	subs	r3, r2, r3
 8010530:	657b      	str	r3, [r7, #84]	; 0x54
 8010532:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010536:	2b00      	cmp	r3, #0
 8010538:	d103      	bne.n	8010542 <f_open+0x30a>
 801053a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801053c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801053e:	429a      	cmp	r2, r3
 8010540:	d8e0      	bhi.n	8010504 <f_open+0x2cc>
				}
				fp->clust = clst;
 8010542:	68fb      	ldr	r3, [r7, #12]
 8010544:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010546:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8010548:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801054c:	2b00      	cmp	r3, #0
 801054e:	d131      	bne.n	80105b4 <f_open+0x37c>
 8010550:	693b      	ldr	r3, [r7, #16]
 8010552:	899b      	ldrh	r3, [r3, #12]
 8010554:	461a      	mov	r2, r3
 8010556:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010558:	fbb3 f1f2 	udiv	r1, r3, r2
 801055c:	fb02 f201 	mul.w	r2, r2, r1
 8010560:	1a9b      	subs	r3, r3, r2
 8010562:	2b00      	cmp	r3, #0
 8010564:	d026      	beq.n	80105b4 <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8010566:	693b      	ldr	r3, [r7, #16]
 8010568:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801056a:	4618      	mov	r0, r3
 801056c:	f7fe fb46 	bl	800ebfc <clust2sect>
 8010570:	6478      	str	r0, [r7, #68]	; 0x44
 8010572:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010574:	2b00      	cmp	r3, #0
 8010576:	d103      	bne.n	8010580 <f_open+0x348>
						res = FR_INT_ERR;
 8010578:	2302      	movs	r3, #2
 801057a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801057e:	e019      	b.n	80105b4 <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8010580:	693b      	ldr	r3, [r7, #16]
 8010582:	899b      	ldrh	r3, [r3, #12]
 8010584:	461a      	mov	r2, r3
 8010586:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010588:	fbb3 f2f2 	udiv	r2, r3, r2
 801058c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801058e:	441a      	add	r2, r3
 8010590:	68fb      	ldr	r3, [r7, #12]
 8010592:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8010594:	693b      	ldr	r3, [r7, #16]
 8010596:	7858      	ldrb	r0, [r3, #1]
 8010598:	68fb      	ldr	r3, [r7, #12]
 801059a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	6a1a      	ldr	r2, [r3, #32]
 80105a2:	2301      	movs	r3, #1
 80105a4:	f7fd ff7e 	bl	800e4a4 <disk_read>
 80105a8:	4603      	mov	r3, r0
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	d002      	beq.n	80105b4 <f_open+0x37c>
 80105ae:	2301      	movs	r3, #1
 80105b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80105b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d002      	beq.n	80105c2 <f_open+0x38a>
 80105bc:	68fb      	ldr	r3, [r7, #12]
 80105be:	2200      	movs	r2, #0
 80105c0:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80105c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80105c6:	4618      	mov	r0, r3
 80105c8:	3760      	adds	r7, #96	; 0x60
 80105ca:	46bd      	mov	sp, r7
 80105cc:	bd80      	pop	{r7, pc}
 80105ce:	bf00      	nop
 80105d0:	274a0000 	.word	0x274a0000

080105d4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80105d4:	b580      	push	{r7, lr}
 80105d6:	b08e      	sub	sp, #56	; 0x38
 80105d8:	af00      	add	r7, sp, #0
 80105da:	60f8      	str	r0, [r7, #12]
 80105dc:	60b9      	str	r1, [r7, #8]
 80105de:	607a      	str	r2, [r7, #4]
 80105e0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80105e2:	68bb      	ldr	r3, [r7, #8]
 80105e4:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80105e6:	683b      	ldr	r3, [r7, #0]
 80105e8:	2200      	movs	r2, #0
 80105ea:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80105ec:	68fb      	ldr	r3, [r7, #12]
 80105ee:	f107 0214 	add.w	r2, r7, #20
 80105f2:	4611      	mov	r1, r2
 80105f4:	4618      	mov	r0, r3
 80105f6:	f7ff fda3 	bl	8010140 <validate>
 80105fa:	4603      	mov	r3, r0
 80105fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8010600:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010604:	2b00      	cmp	r3, #0
 8010606:	d107      	bne.n	8010618 <f_read+0x44>
 8010608:	68fb      	ldr	r3, [r7, #12]
 801060a:	7d5b      	ldrb	r3, [r3, #21]
 801060c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010610:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010614:	2b00      	cmp	r3, #0
 8010616:	d002      	beq.n	801061e <f_read+0x4a>
 8010618:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801061c:	e135      	b.n	801088a <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 801061e:	68fb      	ldr	r3, [r7, #12]
 8010620:	7d1b      	ldrb	r3, [r3, #20]
 8010622:	f003 0301 	and.w	r3, r3, #1
 8010626:	2b00      	cmp	r3, #0
 8010628:	d101      	bne.n	801062e <f_read+0x5a>
 801062a:	2307      	movs	r3, #7
 801062c:	e12d      	b.n	801088a <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 801062e:	68fb      	ldr	r3, [r7, #12]
 8010630:	68da      	ldr	r2, [r3, #12]
 8010632:	68fb      	ldr	r3, [r7, #12]
 8010634:	699b      	ldr	r3, [r3, #24]
 8010636:	1ad3      	subs	r3, r2, r3
 8010638:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 801063a:	687a      	ldr	r2, [r7, #4]
 801063c:	6a3b      	ldr	r3, [r7, #32]
 801063e:	429a      	cmp	r2, r3
 8010640:	f240 811e 	bls.w	8010880 <f_read+0x2ac>
 8010644:	6a3b      	ldr	r3, [r7, #32]
 8010646:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8010648:	e11a      	b.n	8010880 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 801064a:	68fb      	ldr	r3, [r7, #12]
 801064c:	699b      	ldr	r3, [r3, #24]
 801064e:	697a      	ldr	r2, [r7, #20]
 8010650:	8992      	ldrh	r2, [r2, #12]
 8010652:	fbb3 f1f2 	udiv	r1, r3, r2
 8010656:	fb02 f201 	mul.w	r2, r2, r1
 801065a:	1a9b      	subs	r3, r3, r2
 801065c:	2b00      	cmp	r3, #0
 801065e:	f040 80d5 	bne.w	801080c <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8010662:	68fb      	ldr	r3, [r7, #12]
 8010664:	699b      	ldr	r3, [r3, #24]
 8010666:	697a      	ldr	r2, [r7, #20]
 8010668:	8992      	ldrh	r2, [r2, #12]
 801066a:	fbb3 f3f2 	udiv	r3, r3, r2
 801066e:	697a      	ldr	r2, [r7, #20]
 8010670:	8952      	ldrh	r2, [r2, #10]
 8010672:	3a01      	subs	r2, #1
 8010674:	4013      	ands	r3, r2
 8010676:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8010678:	69fb      	ldr	r3, [r7, #28]
 801067a:	2b00      	cmp	r3, #0
 801067c:	d12f      	bne.n	80106de <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 801067e:	68fb      	ldr	r3, [r7, #12]
 8010680:	699b      	ldr	r3, [r3, #24]
 8010682:	2b00      	cmp	r3, #0
 8010684:	d103      	bne.n	801068e <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8010686:	68fb      	ldr	r3, [r7, #12]
 8010688:	689b      	ldr	r3, [r3, #8]
 801068a:	633b      	str	r3, [r7, #48]	; 0x30
 801068c:	e013      	b.n	80106b6 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801068e:	68fb      	ldr	r3, [r7, #12]
 8010690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010692:	2b00      	cmp	r3, #0
 8010694:	d007      	beq.n	80106a6 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8010696:	68fb      	ldr	r3, [r7, #12]
 8010698:	699b      	ldr	r3, [r3, #24]
 801069a:	4619      	mov	r1, r3
 801069c:	68f8      	ldr	r0, [r7, #12]
 801069e:	f7fe fdb0 	bl	800f202 <clmt_clust>
 80106a2:	6338      	str	r0, [r7, #48]	; 0x30
 80106a4:	e007      	b.n	80106b6 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80106a6:	68fa      	ldr	r2, [r7, #12]
 80106a8:	68fb      	ldr	r3, [r7, #12]
 80106aa:	69db      	ldr	r3, [r3, #28]
 80106ac:	4619      	mov	r1, r3
 80106ae:	4610      	mov	r0, r2
 80106b0:	f7fe fac3 	bl	800ec3a <get_fat>
 80106b4:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80106b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106b8:	2b01      	cmp	r3, #1
 80106ba:	d804      	bhi.n	80106c6 <f_read+0xf2>
 80106bc:	68fb      	ldr	r3, [r7, #12]
 80106be:	2202      	movs	r2, #2
 80106c0:	755a      	strb	r2, [r3, #21]
 80106c2:	2302      	movs	r3, #2
 80106c4:	e0e1      	b.n	801088a <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80106c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106cc:	d104      	bne.n	80106d8 <f_read+0x104>
 80106ce:	68fb      	ldr	r3, [r7, #12]
 80106d0:	2201      	movs	r2, #1
 80106d2:	755a      	strb	r2, [r3, #21]
 80106d4:	2301      	movs	r3, #1
 80106d6:	e0d8      	b.n	801088a <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80106dc:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80106de:	697a      	ldr	r2, [r7, #20]
 80106e0:	68fb      	ldr	r3, [r7, #12]
 80106e2:	69db      	ldr	r3, [r3, #28]
 80106e4:	4619      	mov	r1, r3
 80106e6:	4610      	mov	r0, r2
 80106e8:	f7fe fa88 	bl	800ebfc <clust2sect>
 80106ec:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80106ee:	69bb      	ldr	r3, [r7, #24]
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	d104      	bne.n	80106fe <f_read+0x12a>
 80106f4:	68fb      	ldr	r3, [r7, #12]
 80106f6:	2202      	movs	r2, #2
 80106f8:	755a      	strb	r2, [r3, #21]
 80106fa:	2302      	movs	r3, #2
 80106fc:	e0c5      	b.n	801088a <f_read+0x2b6>
			sect += csect;
 80106fe:	69ba      	ldr	r2, [r7, #24]
 8010700:	69fb      	ldr	r3, [r7, #28]
 8010702:	4413      	add	r3, r2
 8010704:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8010706:	697b      	ldr	r3, [r7, #20]
 8010708:	899b      	ldrh	r3, [r3, #12]
 801070a:	461a      	mov	r2, r3
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	fbb3 f3f2 	udiv	r3, r3, r2
 8010712:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8010714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010716:	2b00      	cmp	r3, #0
 8010718:	d041      	beq.n	801079e <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801071a:	69fa      	ldr	r2, [r7, #28]
 801071c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801071e:	4413      	add	r3, r2
 8010720:	697a      	ldr	r2, [r7, #20]
 8010722:	8952      	ldrh	r2, [r2, #10]
 8010724:	4293      	cmp	r3, r2
 8010726:	d905      	bls.n	8010734 <f_read+0x160>
					cc = fs->csize - csect;
 8010728:	697b      	ldr	r3, [r7, #20]
 801072a:	895b      	ldrh	r3, [r3, #10]
 801072c:	461a      	mov	r2, r3
 801072e:	69fb      	ldr	r3, [r7, #28]
 8010730:	1ad3      	subs	r3, r2, r3
 8010732:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010734:	697b      	ldr	r3, [r7, #20]
 8010736:	7858      	ldrb	r0, [r3, #1]
 8010738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801073a:	69ba      	ldr	r2, [r7, #24]
 801073c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801073e:	f7fd feb1 	bl	800e4a4 <disk_read>
 8010742:	4603      	mov	r3, r0
 8010744:	2b00      	cmp	r3, #0
 8010746:	d004      	beq.n	8010752 <f_read+0x17e>
 8010748:	68fb      	ldr	r3, [r7, #12]
 801074a:	2201      	movs	r2, #1
 801074c:	755a      	strb	r2, [r3, #21]
 801074e:	2301      	movs	r3, #1
 8010750:	e09b      	b.n	801088a <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8010752:	68fb      	ldr	r3, [r7, #12]
 8010754:	7d1b      	ldrb	r3, [r3, #20]
 8010756:	b25b      	sxtb	r3, r3
 8010758:	2b00      	cmp	r3, #0
 801075a:	da18      	bge.n	801078e <f_read+0x1ba>
 801075c:	68fb      	ldr	r3, [r7, #12]
 801075e:	6a1a      	ldr	r2, [r3, #32]
 8010760:	69bb      	ldr	r3, [r7, #24]
 8010762:	1ad3      	subs	r3, r2, r3
 8010764:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010766:	429a      	cmp	r2, r3
 8010768:	d911      	bls.n	801078e <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 801076a:	68fb      	ldr	r3, [r7, #12]
 801076c:	6a1a      	ldr	r2, [r3, #32]
 801076e:	69bb      	ldr	r3, [r7, #24]
 8010770:	1ad3      	subs	r3, r2, r3
 8010772:	697a      	ldr	r2, [r7, #20]
 8010774:	8992      	ldrh	r2, [r2, #12]
 8010776:	fb02 f303 	mul.w	r3, r2, r3
 801077a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801077c:	18d0      	adds	r0, r2, r3
 801077e:	68fb      	ldr	r3, [r7, #12]
 8010780:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010784:	697b      	ldr	r3, [r7, #20]
 8010786:	899b      	ldrh	r3, [r3, #12]
 8010788:	461a      	mov	r2, r3
 801078a:	f7fd ff6b 	bl	800e664 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 801078e:	697b      	ldr	r3, [r7, #20]
 8010790:	899b      	ldrh	r3, [r3, #12]
 8010792:	461a      	mov	r2, r3
 8010794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010796:	fb02 f303 	mul.w	r3, r2, r3
 801079a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 801079c:	e05c      	b.n	8010858 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	6a1b      	ldr	r3, [r3, #32]
 80107a2:	69ba      	ldr	r2, [r7, #24]
 80107a4:	429a      	cmp	r2, r3
 80107a6:	d02e      	beq.n	8010806 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80107a8:	68fb      	ldr	r3, [r7, #12]
 80107aa:	7d1b      	ldrb	r3, [r3, #20]
 80107ac:	b25b      	sxtb	r3, r3
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	da18      	bge.n	80107e4 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80107b2:	697b      	ldr	r3, [r7, #20]
 80107b4:	7858      	ldrb	r0, [r3, #1]
 80107b6:	68fb      	ldr	r3, [r7, #12]
 80107b8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80107bc:	68fb      	ldr	r3, [r7, #12]
 80107be:	6a1a      	ldr	r2, [r3, #32]
 80107c0:	2301      	movs	r3, #1
 80107c2:	f7fd fe8f 	bl	800e4e4 <disk_write>
 80107c6:	4603      	mov	r3, r0
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d004      	beq.n	80107d6 <f_read+0x202>
 80107cc:	68fb      	ldr	r3, [r7, #12]
 80107ce:	2201      	movs	r2, #1
 80107d0:	755a      	strb	r2, [r3, #21]
 80107d2:	2301      	movs	r3, #1
 80107d4:	e059      	b.n	801088a <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 80107d6:	68fb      	ldr	r3, [r7, #12]
 80107d8:	7d1b      	ldrb	r3, [r3, #20]
 80107da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80107de:	b2da      	uxtb	r2, r3
 80107e0:	68fb      	ldr	r3, [r7, #12]
 80107e2:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80107e4:	697b      	ldr	r3, [r7, #20]
 80107e6:	7858      	ldrb	r0, [r3, #1]
 80107e8:	68fb      	ldr	r3, [r7, #12]
 80107ea:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80107ee:	2301      	movs	r3, #1
 80107f0:	69ba      	ldr	r2, [r7, #24]
 80107f2:	f7fd fe57 	bl	800e4a4 <disk_read>
 80107f6:	4603      	mov	r3, r0
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d004      	beq.n	8010806 <f_read+0x232>
 80107fc:	68fb      	ldr	r3, [r7, #12]
 80107fe:	2201      	movs	r2, #1
 8010800:	755a      	strb	r2, [r3, #21]
 8010802:	2301      	movs	r3, #1
 8010804:	e041      	b.n	801088a <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8010806:	68fb      	ldr	r3, [r7, #12]
 8010808:	69ba      	ldr	r2, [r7, #24]
 801080a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801080c:	697b      	ldr	r3, [r7, #20]
 801080e:	899b      	ldrh	r3, [r3, #12]
 8010810:	4618      	mov	r0, r3
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	699b      	ldr	r3, [r3, #24]
 8010816:	697a      	ldr	r2, [r7, #20]
 8010818:	8992      	ldrh	r2, [r2, #12]
 801081a:	fbb3 f1f2 	udiv	r1, r3, r2
 801081e:	fb02 f201 	mul.w	r2, r2, r1
 8010822:	1a9b      	subs	r3, r3, r2
 8010824:	1ac3      	subs	r3, r0, r3
 8010826:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8010828:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	429a      	cmp	r2, r3
 801082e:	d901      	bls.n	8010834 <f_read+0x260>
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8010834:	68fb      	ldr	r3, [r7, #12]
 8010836:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801083a:	68fb      	ldr	r3, [r7, #12]
 801083c:	699b      	ldr	r3, [r3, #24]
 801083e:	697a      	ldr	r2, [r7, #20]
 8010840:	8992      	ldrh	r2, [r2, #12]
 8010842:	fbb3 f0f2 	udiv	r0, r3, r2
 8010846:	fb02 f200 	mul.w	r2, r2, r0
 801084a:	1a9b      	subs	r3, r3, r2
 801084c:	440b      	add	r3, r1
 801084e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010850:	4619      	mov	r1, r3
 8010852:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010854:	f7fd ff06 	bl	800e664 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8010858:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801085a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801085c:	4413      	add	r3, r2
 801085e:	627b      	str	r3, [r7, #36]	; 0x24
 8010860:	68fb      	ldr	r3, [r7, #12]
 8010862:	699a      	ldr	r2, [r3, #24]
 8010864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010866:	441a      	add	r2, r3
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	619a      	str	r2, [r3, #24]
 801086c:	683b      	ldr	r3, [r7, #0]
 801086e:	681a      	ldr	r2, [r3, #0]
 8010870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010872:	441a      	add	r2, r3
 8010874:	683b      	ldr	r3, [r7, #0]
 8010876:	601a      	str	r2, [r3, #0]
 8010878:	687a      	ldr	r2, [r7, #4]
 801087a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801087c:	1ad3      	subs	r3, r2, r3
 801087e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	2b00      	cmp	r3, #0
 8010884:	f47f aee1 	bne.w	801064a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8010888:	2300      	movs	r3, #0
}
 801088a:	4618      	mov	r0, r3
 801088c:	3738      	adds	r7, #56	; 0x38
 801088e:	46bd      	mov	sp, r7
 8010890:	bd80      	pop	{r7, pc}

08010892 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8010892:	b580      	push	{r7, lr}
 8010894:	b08c      	sub	sp, #48	; 0x30
 8010896:	af00      	add	r7, sp, #0
 8010898:	60f8      	str	r0, [r7, #12]
 801089a:	60b9      	str	r1, [r7, #8]
 801089c:	607a      	str	r2, [r7, #4]
 801089e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80108a0:	68bb      	ldr	r3, [r7, #8]
 80108a2:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80108a4:	683b      	ldr	r3, [r7, #0]
 80108a6:	2200      	movs	r2, #0
 80108a8:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80108aa:	68fb      	ldr	r3, [r7, #12]
 80108ac:	f107 0210 	add.w	r2, r7, #16
 80108b0:	4611      	mov	r1, r2
 80108b2:	4618      	mov	r0, r3
 80108b4:	f7ff fc44 	bl	8010140 <validate>
 80108b8:	4603      	mov	r3, r0
 80108ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80108be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d107      	bne.n	80108d6 <f_write+0x44>
 80108c6:	68fb      	ldr	r3, [r7, #12]
 80108c8:	7d5b      	ldrb	r3, [r3, #21]
 80108ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80108ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d002      	beq.n	80108dc <f_write+0x4a>
 80108d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80108da:	e16a      	b.n	8010bb2 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80108dc:	68fb      	ldr	r3, [r7, #12]
 80108de:	7d1b      	ldrb	r3, [r3, #20]
 80108e0:	f003 0302 	and.w	r3, r3, #2
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d101      	bne.n	80108ec <f_write+0x5a>
 80108e8:	2307      	movs	r3, #7
 80108ea:	e162      	b.n	8010bb2 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80108ec:	68fb      	ldr	r3, [r7, #12]
 80108ee:	699a      	ldr	r2, [r3, #24]
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	441a      	add	r2, r3
 80108f4:	68fb      	ldr	r3, [r7, #12]
 80108f6:	699b      	ldr	r3, [r3, #24]
 80108f8:	429a      	cmp	r2, r3
 80108fa:	f080 814c 	bcs.w	8010b96 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80108fe:	68fb      	ldr	r3, [r7, #12]
 8010900:	699b      	ldr	r3, [r3, #24]
 8010902:	43db      	mvns	r3, r3
 8010904:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8010906:	e146      	b.n	8010b96 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8010908:	68fb      	ldr	r3, [r7, #12]
 801090a:	699b      	ldr	r3, [r3, #24]
 801090c:	693a      	ldr	r2, [r7, #16]
 801090e:	8992      	ldrh	r2, [r2, #12]
 8010910:	fbb3 f1f2 	udiv	r1, r3, r2
 8010914:	fb02 f201 	mul.w	r2, r2, r1
 8010918:	1a9b      	subs	r3, r3, r2
 801091a:	2b00      	cmp	r3, #0
 801091c:	f040 80f1 	bne.w	8010b02 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8010920:	68fb      	ldr	r3, [r7, #12]
 8010922:	699b      	ldr	r3, [r3, #24]
 8010924:	693a      	ldr	r2, [r7, #16]
 8010926:	8992      	ldrh	r2, [r2, #12]
 8010928:	fbb3 f3f2 	udiv	r3, r3, r2
 801092c:	693a      	ldr	r2, [r7, #16]
 801092e:	8952      	ldrh	r2, [r2, #10]
 8010930:	3a01      	subs	r2, #1
 8010932:	4013      	ands	r3, r2
 8010934:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8010936:	69bb      	ldr	r3, [r7, #24]
 8010938:	2b00      	cmp	r3, #0
 801093a:	d143      	bne.n	80109c4 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	699b      	ldr	r3, [r3, #24]
 8010940:	2b00      	cmp	r3, #0
 8010942:	d10c      	bne.n	801095e <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	689b      	ldr	r3, [r3, #8]
 8010948:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801094a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801094c:	2b00      	cmp	r3, #0
 801094e:	d11a      	bne.n	8010986 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8010950:	68fb      	ldr	r3, [r7, #12]
 8010952:	2100      	movs	r1, #0
 8010954:	4618      	mov	r0, r3
 8010956:	f7fe fbbc 	bl	800f0d2 <create_chain>
 801095a:	62b8      	str	r0, [r7, #40]	; 0x28
 801095c:	e013      	b.n	8010986 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801095e:	68fb      	ldr	r3, [r7, #12]
 8010960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010962:	2b00      	cmp	r3, #0
 8010964:	d007      	beq.n	8010976 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8010966:	68fb      	ldr	r3, [r7, #12]
 8010968:	699b      	ldr	r3, [r3, #24]
 801096a:	4619      	mov	r1, r3
 801096c:	68f8      	ldr	r0, [r7, #12]
 801096e:	f7fe fc48 	bl	800f202 <clmt_clust>
 8010972:	62b8      	str	r0, [r7, #40]	; 0x28
 8010974:	e007      	b.n	8010986 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8010976:	68fa      	ldr	r2, [r7, #12]
 8010978:	68fb      	ldr	r3, [r7, #12]
 801097a:	69db      	ldr	r3, [r3, #28]
 801097c:	4619      	mov	r1, r3
 801097e:	4610      	mov	r0, r2
 8010980:	f7fe fba7 	bl	800f0d2 <create_chain>
 8010984:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010988:	2b00      	cmp	r3, #0
 801098a:	f000 8109 	beq.w	8010ba0 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801098e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010990:	2b01      	cmp	r3, #1
 8010992:	d104      	bne.n	801099e <f_write+0x10c>
 8010994:	68fb      	ldr	r3, [r7, #12]
 8010996:	2202      	movs	r2, #2
 8010998:	755a      	strb	r2, [r3, #21]
 801099a:	2302      	movs	r3, #2
 801099c:	e109      	b.n	8010bb2 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801099e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109a4:	d104      	bne.n	80109b0 <f_write+0x11e>
 80109a6:	68fb      	ldr	r3, [r7, #12]
 80109a8:	2201      	movs	r2, #1
 80109aa:	755a      	strb	r2, [r3, #21]
 80109ac:	2301      	movs	r3, #1
 80109ae:	e100      	b.n	8010bb2 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80109b4:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	689b      	ldr	r3, [r3, #8]
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d102      	bne.n	80109c4 <f_write+0x132>
 80109be:	68fb      	ldr	r3, [r7, #12]
 80109c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80109c2:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80109c4:	68fb      	ldr	r3, [r7, #12]
 80109c6:	7d1b      	ldrb	r3, [r3, #20]
 80109c8:	b25b      	sxtb	r3, r3
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	da18      	bge.n	8010a00 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80109ce:	693b      	ldr	r3, [r7, #16]
 80109d0:	7858      	ldrb	r0, [r3, #1]
 80109d2:	68fb      	ldr	r3, [r7, #12]
 80109d4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80109d8:	68fb      	ldr	r3, [r7, #12]
 80109da:	6a1a      	ldr	r2, [r3, #32]
 80109dc:	2301      	movs	r3, #1
 80109de:	f7fd fd81 	bl	800e4e4 <disk_write>
 80109e2:	4603      	mov	r3, r0
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d004      	beq.n	80109f2 <f_write+0x160>
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	2201      	movs	r2, #1
 80109ec:	755a      	strb	r2, [r3, #21]
 80109ee:	2301      	movs	r3, #1
 80109f0:	e0df      	b.n	8010bb2 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 80109f2:	68fb      	ldr	r3, [r7, #12]
 80109f4:	7d1b      	ldrb	r3, [r3, #20]
 80109f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80109fa:	b2da      	uxtb	r2, r3
 80109fc:	68fb      	ldr	r3, [r7, #12]
 80109fe:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8010a00:	693a      	ldr	r2, [r7, #16]
 8010a02:	68fb      	ldr	r3, [r7, #12]
 8010a04:	69db      	ldr	r3, [r3, #28]
 8010a06:	4619      	mov	r1, r3
 8010a08:	4610      	mov	r0, r2
 8010a0a:	f7fe f8f7 	bl	800ebfc <clust2sect>
 8010a0e:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8010a10:	697b      	ldr	r3, [r7, #20]
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	d104      	bne.n	8010a20 <f_write+0x18e>
 8010a16:	68fb      	ldr	r3, [r7, #12]
 8010a18:	2202      	movs	r2, #2
 8010a1a:	755a      	strb	r2, [r3, #21]
 8010a1c:	2302      	movs	r3, #2
 8010a1e:	e0c8      	b.n	8010bb2 <f_write+0x320>
			sect += csect;
 8010a20:	697a      	ldr	r2, [r7, #20]
 8010a22:	69bb      	ldr	r3, [r7, #24]
 8010a24:	4413      	add	r3, r2
 8010a26:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8010a28:	693b      	ldr	r3, [r7, #16]
 8010a2a:	899b      	ldrh	r3, [r3, #12]
 8010a2c:	461a      	mov	r2, r3
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	fbb3 f3f2 	udiv	r3, r3, r2
 8010a34:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8010a36:	6a3b      	ldr	r3, [r7, #32]
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d043      	beq.n	8010ac4 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8010a3c:	69ba      	ldr	r2, [r7, #24]
 8010a3e:	6a3b      	ldr	r3, [r7, #32]
 8010a40:	4413      	add	r3, r2
 8010a42:	693a      	ldr	r2, [r7, #16]
 8010a44:	8952      	ldrh	r2, [r2, #10]
 8010a46:	4293      	cmp	r3, r2
 8010a48:	d905      	bls.n	8010a56 <f_write+0x1c4>
					cc = fs->csize - csect;
 8010a4a:	693b      	ldr	r3, [r7, #16]
 8010a4c:	895b      	ldrh	r3, [r3, #10]
 8010a4e:	461a      	mov	r2, r3
 8010a50:	69bb      	ldr	r3, [r7, #24]
 8010a52:	1ad3      	subs	r3, r2, r3
 8010a54:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010a56:	693b      	ldr	r3, [r7, #16]
 8010a58:	7858      	ldrb	r0, [r3, #1]
 8010a5a:	6a3b      	ldr	r3, [r7, #32]
 8010a5c:	697a      	ldr	r2, [r7, #20]
 8010a5e:	69f9      	ldr	r1, [r7, #28]
 8010a60:	f7fd fd40 	bl	800e4e4 <disk_write>
 8010a64:	4603      	mov	r3, r0
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d004      	beq.n	8010a74 <f_write+0x1e2>
 8010a6a:	68fb      	ldr	r3, [r7, #12]
 8010a6c:	2201      	movs	r2, #1
 8010a6e:	755a      	strb	r2, [r3, #21]
 8010a70:	2301      	movs	r3, #1
 8010a72:	e09e      	b.n	8010bb2 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8010a74:	68fb      	ldr	r3, [r7, #12]
 8010a76:	6a1a      	ldr	r2, [r3, #32]
 8010a78:	697b      	ldr	r3, [r7, #20]
 8010a7a:	1ad3      	subs	r3, r2, r3
 8010a7c:	6a3a      	ldr	r2, [r7, #32]
 8010a7e:	429a      	cmp	r2, r3
 8010a80:	d918      	bls.n	8010ab4 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8010a82:	68fb      	ldr	r3, [r7, #12]
 8010a84:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8010a88:	68fb      	ldr	r3, [r7, #12]
 8010a8a:	6a1a      	ldr	r2, [r3, #32]
 8010a8c:	697b      	ldr	r3, [r7, #20]
 8010a8e:	1ad3      	subs	r3, r2, r3
 8010a90:	693a      	ldr	r2, [r7, #16]
 8010a92:	8992      	ldrh	r2, [r2, #12]
 8010a94:	fb02 f303 	mul.w	r3, r2, r3
 8010a98:	69fa      	ldr	r2, [r7, #28]
 8010a9a:	18d1      	adds	r1, r2, r3
 8010a9c:	693b      	ldr	r3, [r7, #16]
 8010a9e:	899b      	ldrh	r3, [r3, #12]
 8010aa0:	461a      	mov	r2, r3
 8010aa2:	f7fd fddf 	bl	800e664 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8010aa6:	68fb      	ldr	r3, [r7, #12]
 8010aa8:	7d1b      	ldrb	r3, [r3, #20]
 8010aaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010aae:	b2da      	uxtb	r2, r3
 8010ab0:	68fb      	ldr	r3, [r7, #12]
 8010ab2:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8010ab4:	693b      	ldr	r3, [r7, #16]
 8010ab6:	899b      	ldrh	r3, [r3, #12]
 8010ab8:	461a      	mov	r2, r3
 8010aba:	6a3b      	ldr	r3, [r7, #32]
 8010abc:	fb02 f303 	mul.w	r3, r2, r3
 8010ac0:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8010ac2:	e04b      	b.n	8010b5c <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010ac4:	68fb      	ldr	r3, [r7, #12]
 8010ac6:	6a1b      	ldr	r3, [r3, #32]
 8010ac8:	697a      	ldr	r2, [r7, #20]
 8010aca:	429a      	cmp	r2, r3
 8010acc:	d016      	beq.n	8010afc <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8010ace:	68fb      	ldr	r3, [r7, #12]
 8010ad0:	699a      	ldr	r2, [r3, #24]
 8010ad2:	68fb      	ldr	r3, [r7, #12]
 8010ad4:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010ad6:	429a      	cmp	r2, r3
 8010ad8:	d210      	bcs.n	8010afc <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8010ada:	693b      	ldr	r3, [r7, #16]
 8010adc:	7858      	ldrb	r0, [r3, #1]
 8010ade:	68fb      	ldr	r3, [r7, #12]
 8010ae0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010ae4:	2301      	movs	r3, #1
 8010ae6:	697a      	ldr	r2, [r7, #20]
 8010ae8:	f7fd fcdc 	bl	800e4a4 <disk_read>
 8010aec:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	d004      	beq.n	8010afc <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8010af2:	68fb      	ldr	r3, [r7, #12]
 8010af4:	2201      	movs	r2, #1
 8010af6:	755a      	strb	r2, [r3, #21]
 8010af8:	2301      	movs	r3, #1
 8010afa:	e05a      	b.n	8010bb2 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8010afc:	68fb      	ldr	r3, [r7, #12]
 8010afe:	697a      	ldr	r2, [r7, #20]
 8010b00:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8010b02:	693b      	ldr	r3, [r7, #16]
 8010b04:	899b      	ldrh	r3, [r3, #12]
 8010b06:	4618      	mov	r0, r3
 8010b08:	68fb      	ldr	r3, [r7, #12]
 8010b0a:	699b      	ldr	r3, [r3, #24]
 8010b0c:	693a      	ldr	r2, [r7, #16]
 8010b0e:	8992      	ldrh	r2, [r2, #12]
 8010b10:	fbb3 f1f2 	udiv	r1, r3, r2
 8010b14:	fb02 f201 	mul.w	r2, r2, r1
 8010b18:	1a9b      	subs	r3, r3, r2
 8010b1a:	1ac3      	subs	r3, r0, r3
 8010b1c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8010b1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	429a      	cmp	r2, r3
 8010b24:	d901      	bls.n	8010b2a <f_write+0x298>
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8010b2a:	68fb      	ldr	r3, [r7, #12]
 8010b2c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010b30:	68fb      	ldr	r3, [r7, #12]
 8010b32:	699b      	ldr	r3, [r3, #24]
 8010b34:	693a      	ldr	r2, [r7, #16]
 8010b36:	8992      	ldrh	r2, [r2, #12]
 8010b38:	fbb3 f0f2 	udiv	r0, r3, r2
 8010b3c:	fb02 f200 	mul.w	r2, r2, r0
 8010b40:	1a9b      	subs	r3, r3, r2
 8010b42:	440b      	add	r3, r1
 8010b44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010b46:	69f9      	ldr	r1, [r7, #28]
 8010b48:	4618      	mov	r0, r3
 8010b4a:	f7fd fd8b 	bl	800e664 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8010b4e:	68fb      	ldr	r3, [r7, #12]
 8010b50:	7d1b      	ldrb	r3, [r3, #20]
 8010b52:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010b56:	b2da      	uxtb	r2, r3
 8010b58:	68fb      	ldr	r3, [r7, #12]
 8010b5a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8010b5c:	69fa      	ldr	r2, [r7, #28]
 8010b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b60:	4413      	add	r3, r2
 8010b62:	61fb      	str	r3, [r7, #28]
 8010b64:	68fb      	ldr	r3, [r7, #12]
 8010b66:	699a      	ldr	r2, [r3, #24]
 8010b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b6a:	441a      	add	r2, r3
 8010b6c:	68fb      	ldr	r3, [r7, #12]
 8010b6e:	619a      	str	r2, [r3, #24]
 8010b70:	68fb      	ldr	r3, [r7, #12]
 8010b72:	68da      	ldr	r2, [r3, #12]
 8010b74:	68fb      	ldr	r3, [r7, #12]
 8010b76:	699b      	ldr	r3, [r3, #24]
 8010b78:	429a      	cmp	r2, r3
 8010b7a:	bf38      	it	cc
 8010b7c:	461a      	movcc	r2, r3
 8010b7e:	68fb      	ldr	r3, [r7, #12]
 8010b80:	60da      	str	r2, [r3, #12]
 8010b82:	683b      	ldr	r3, [r7, #0]
 8010b84:	681a      	ldr	r2, [r3, #0]
 8010b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b88:	441a      	add	r2, r3
 8010b8a:	683b      	ldr	r3, [r7, #0]
 8010b8c:	601a      	str	r2, [r3, #0]
 8010b8e:	687a      	ldr	r2, [r7, #4]
 8010b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b92:	1ad3      	subs	r3, r2, r3
 8010b94:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	f47f aeb5 	bne.w	8010908 <f_write+0x76>
 8010b9e:	e000      	b.n	8010ba2 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010ba0:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8010ba2:	68fb      	ldr	r3, [r7, #12]
 8010ba4:	7d1b      	ldrb	r3, [r3, #20]
 8010ba6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010baa:	b2da      	uxtb	r2, r3
 8010bac:	68fb      	ldr	r3, [r7, #12]
 8010bae:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8010bb0:	2300      	movs	r3, #0
}
 8010bb2:	4618      	mov	r0, r3
 8010bb4:	3730      	adds	r7, #48	; 0x30
 8010bb6:	46bd      	mov	sp, r7
 8010bb8:	bd80      	pop	{r7, pc}
	...

08010bbc <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8010bbc:	b580      	push	{r7, lr}
 8010bbe:	b086      	sub	sp, #24
 8010bc0:	af00      	add	r7, sp, #0
 8010bc2:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	f107 0208 	add.w	r2, r7, #8
 8010bca:	4611      	mov	r1, r2
 8010bcc:	4618      	mov	r0, r3
 8010bce:	f7ff fab7 	bl	8010140 <validate>
 8010bd2:	4603      	mov	r3, r0
 8010bd4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010bd6:	7dfb      	ldrb	r3, [r7, #23]
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d167      	bne.n	8010cac <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	7d1b      	ldrb	r3, [r3, #20]
 8010be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d061      	beq.n	8010cac <f_sync+0xf0>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	7d1b      	ldrb	r3, [r3, #20]
 8010bec:	b25b      	sxtb	r3, r3
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	da15      	bge.n	8010c1e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8010bf2:	68bb      	ldr	r3, [r7, #8]
 8010bf4:	7858      	ldrb	r0, [r3, #1]
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	6a1a      	ldr	r2, [r3, #32]
 8010c00:	2301      	movs	r3, #1
 8010c02:	f7fd fc6f 	bl	800e4e4 <disk_write>
 8010c06:	4603      	mov	r3, r0
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	d001      	beq.n	8010c10 <f_sync+0x54>
 8010c0c:	2301      	movs	r3, #1
 8010c0e:	e04e      	b.n	8010cae <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	7d1b      	ldrb	r3, [r3, #20]
 8010c14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010c18:	b2da      	uxtb	r2, r3
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8010c1e:	4b26      	ldr	r3, [pc, #152]	; (8010cb8 <f_sync+0xfc>)
 8010c20:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8010c22:	68ba      	ldr	r2, [r7, #8]
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c28:	4619      	mov	r1, r3
 8010c2a:	4610      	mov	r0, r2
 8010c2c:	f7fd ff48 	bl	800eac0 <move_window>
 8010c30:	4603      	mov	r3, r0
 8010c32:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8010c34:	7dfb      	ldrb	r3, [r7, #23]
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d138      	bne.n	8010cac <f_sync+0xf0>
					dir = fp->dir_ptr;
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010c3e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8010c40:	68fb      	ldr	r3, [r7, #12]
 8010c42:	330b      	adds	r3, #11
 8010c44:	781a      	ldrb	r2, [r3, #0]
 8010c46:	68fb      	ldr	r3, [r7, #12]
 8010c48:	330b      	adds	r3, #11
 8010c4a:	f042 0220 	orr.w	r2, r2, #32
 8010c4e:	b2d2      	uxtb	r2, r2
 8010c50:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	6818      	ldr	r0, [r3, #0]
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	689b      	ldr	r3, [r3, #8]
 8010c5a:	461a      	mov	r2, r3
 8010c5c:	68f9      	ldr	r1, [r7, #12]
 8010c5e:	f7fe fccd 	bl	800f5fc <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8010c62:	68fb      	ldr	r3, [r7, #12]
 8010c64:	f103 021c 	add.w	r2, r3, #28
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	68db      	ldr	r3, [r3, #12]
 8010c6c:	4619      	mov	r1, r3
 8010c6e:	4610      	mov	r0, r2
 8010c70:	f7fd fccc 	bl	800e60c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8010c74:	68fb      	ldr	r3, [r7, #12]
 8010c76:	3316      	adds	r3, #22
 8010c78:	6939      	ldr	r1, [r7, #16]
 8010c7a:	4618      	mov	r0, r3
 8010c7c:	f7fd fcc6 	bl	800e60c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8010c80:	68fb      	ldr	r3, [r7, #12]
 8010c82:	3312      	adds	r3, #18
 8010c84:	2100      	movs	r1, #0
 8010c86:	4618      	mov	r0, r3
 8010c88:	f7fd fca5 	bl	800e5d6 <st_word>
					fs->wflag = 1;
 8010c8c:	68bb      	ldr	r3, [r7, #8]
 8010c8e:	2201      	movs	r2, #1
 8010c90:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8010c92:	68bb      	ldr	r3, [r7, #8]
 8010c94:	4618      	mov	r0, r3
 8010c96:	f7fd ff41 	bl	800eb1c <sync_fs>
 8010c9a:	4603      	mov	r3, r0
 8010c9c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	7d1b      	ldrb	r3, [r3, #20]
 8010ca2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010ca6:	b2da      	uxtb	r2, r3
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8010cac:	7dfb      	ldrb	r3, [r7, #23]
}
 8010cae:	4618      	mov	r0, r3
 8010cb0:	3718      	adds	r7, #24
 8010cb2:	46bd      	mov	sp, r7
 8010cb4:	bd80      	pop	{r7, pc}
 8010cb6:	bf00      	nop
 8010cb8:	274a0000 	.word	0x274a0000

08010cbc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8010cbc:	b580      	push	{r7, lr}
 8010cbe:	b084      	sub	sp, #16
 8010cc0:	af00      	add	r7, sp, #0
 8010cc2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8010cc4:	6878      	ldr	r0, [r7, #4]
 8010cc6:	f7ff ff79 	bl	8010bbc <f_sync>
 8010cca:	4603      	mov	r3, r0
 8010ccc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8010cce:	7bfb      	ldrb	r3, [r7, #15]
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	d118      	bne.n	8010d06 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	f107 0208 	add.w	r2, r7, #8
 8010cda:	4611      	mov	r1, r2
 8010cdc:	4618      	mov	r0, r3
 8010cde:	f7ff fa2f 	bl	8010140 <validate>
 8010ce2:	4603      	mov	r3, r0
 8010ce4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010ce6:	7bfb      	ldrb	r3, [r7, #15]
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	d10c      	bne.n	8010d06 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	691b      	ldr	r3, [r3, #16]
 8010cf0:	4618      	mov	r0, r3
 8010cf2:	f7fd fe41 	bl	800e978 <dec_lock>
 8010cf6:	4603      	mov	r3, r0
 8010cf8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8010cfa:	7bfb      	ldrb	r3, [r7, #15]
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d102      	bne.n	8010d06 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	2200      	movs	r2, #0
 8010d04:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8010d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d08:	4618      	mov	r0, r3
 8010d0a:	3710      	adds	r7, #16
 8010d0c:	46bd      	mov	sp, r7
 8010d0e:	bd80      	pop	{r7, pc}

08010d10 <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8010d10:	b590      	push	{r4, r7, lr}
 8010d12:	b091      	sub	sp, #68	; 0x44
 8010d14:	af00      	add	r7, sp, #0
 8010d16:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8010d18:	f107 0108 	add.w	r1, r7, #8
 8010d1c:	1d3b      	adds	r3, r7, #4
 8010d1e:	2200      	movs	r2, #0
 8010d20:	4618      	mov	r0, r3
 8010d22:	f7fe ff87 	bl	800fc34 <find_volume>
 8010d26:	4603      	mov	r3, r0
 8010d28:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8010d2c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	d131      	bne.n	8010d98 <f_chdir+0x88>
		dj.obj.fs = fs;
 8010d34:	68bb      	ldr	r3, [r7, #8]
 8010d36:	60fb      	str	r3, [r7, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 8010d38:	687a      	ldr	r2, [r7, #4]
 8010d3a:	f107 030c 	add.w	r3, r7, #12
 8010d3e:	4611      	mov	r1, r2
 8010d40:	4618      	mov	r0, r3
 8010d42:	f7fe fe47 	bl	800f9d4 <follow_path>
 8010d46:	4603      	mov	r3, r0
 8010d48:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {					/* Follow completed */
 8010d4c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	d11a      	bne.n	8010d8a <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8010d54:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8010d58:	b25b      	sxtb	r3, r3
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	da03      	bge.n	8010d66 <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 8010d5e:	68bb      	ldr	r3, [r7, #8]
 8010d60:	697a      	ldr	r2, [r7, #20]
 8010d62:	619a      	str	r2, [r3, #24]
 8010d64:	e011      	b.n	8010d8a <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 8010d66:	7cbb      	ldrb	r3, [r7, #18]
 8010d68:	f003 0310 	and.w	r3, r3, #16
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d009      	beq.n	8010d84 <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 8010d70:	68bb      	ldr	r3, [r7, #8]
 8010d72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010d74:	68bc      	ldr	r4, [r7, #8]
 8010d76:	4611      	mov	r1, r2
 8010d78:	4618      	mov	r0, r3
 8010d7a:	f7fe fc20 	bl	800f5be <ld_clust>
 8010d7e:	4603      	mov	r3, r0
 8010d80:	61a3      	str	r3, [r4, #24]
 8010d82:	e002      	b.n	8010d8a <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 8010d84:	2305      	movs	r3, #5
 8010d86:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8010d8a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010d8e:	2b04      	cmp	r3, #4
 8010d90:	d102      	bne.n	8010d98 <f_chdir+0x88>
 8010d92:	2305      	movs	r3, #5
 8010d94:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	LEAVE_FF(fs, res);
 8010d98:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8010d9c:	4618      	mov	r0, r3
 8010d9e:	3744      	adds	r7, #68	; 0x44
 8010da0:	46bd      	mov	sp, r7
 8010da2:	bd90      	pop	{r4, r7, pc}

08010da4 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8010da4:	b580      	push	{r7, lr}
 8010da6:	b090      	sub	sp, #64	; 0x40
 8010da8:	af00      	add	r7, sp, #0
 8010daa:	6078      	str	r0, [r7, #4]
 8010dac:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	f107 0208 	add.w	r2, r7, #8
 8010db4:	4611      	mov	r1, r2
 8010db6:	4618      	mov	r0, r3
 8010db8:	f7ff f9c2 	bl	8010140 <validate>
 8010dbc:	4603      	mov	r3, r0
 8010dbe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8010dc2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d103      	bne.n	8010dd2 <f_lseek+0x2e>
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	7d5b      	ldrb	r3, [r3, #21]
 8010dce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8010dd2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d002      	beq.n	8010de0 <f_lseek+0x3c>
 8010dda:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010dde:	e201      	b.n	80111e4 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	f000 80d9 	beq.w	8010f9c <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8010dea:	683b      	ldr	r3, [r7, #0]
 8010dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010df0:	d15a      	bne.n	8010ea8 <f_lseek+0x104>
			tbl = fp->cltbl;
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010df6:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8010df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dfa:	1d1a      	adds	r2, r3, #4
 8010dfc:	627a      	str	r2, [r7, #36]	; 0x24
 8010dfe:	681b      	ldr	r3, [r3, #0]
 8010e00:	617b      	str	r3, [r7, #20]
 8010e02:	2302      	movs	r3, #2
 8010e04:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	689b      	ldr	r3, [r3, #8]
 8010e0a:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8010e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	d03a      	beq.n	8010e88 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8010e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e14:	613b      	str	r3, [r7, #16]
 8010e16:	2300      	movs	r3, #0
 8010e18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e1c:	3302      	adds	r3, #2
 8010e1e:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8010e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e22:	60fb      	str	r3, [r7, #12]
 8010e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e26:	3301      	adds	r3, #1
 8010e28:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010e2e:	4618      	mov	r0, r3
 8010e30:	f7fd ff03 	bl	800ec3a <get_fat>
 8010e34:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8010e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e38:	2b01      	cmp	r3, #1
 8010e3a:	d804      	bhi.n	8010e46 <f_lseek+0xa2>
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	2202      	movs	r2, #2
 8010e40:	755a      	strb	r2, [r3, #21]
 8010e42:	2302      	movs	r3, #2
 8010e44:	e1ce      	b.n	80111e4 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e4c:	d104      	bne.n	8010e58 <f_lseek+0xb4>
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	2201      	movs	r2, #1
 8010e52:	755a      	strb	r2, [r3, #21]
 8010e54:	2301      	movs	r3, #1
 8010e56:	e1c5      	b.n	80111e4 <f_lseek+0x440>
					} while (cl == pcl + 1);
 8010e58:	68fb      	ldr	r3, [r7, #12]
 8010e5a:	3301      	adds	r3, #1
 8010e5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010e5e:	429a      	cmp	r2, r3
 8010e60:	d0de      	beq.n	8010e20 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8010e62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010e64:	697b      	ldr	r3, [r7, #20]
 8010e66:	429a      	cmp	r2, r3
 8010e68:	d809      	bhi.n	8010e7e <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8010e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e6c:	1d1a      	adds	r2, r3, #4
 8010e6e:	627a      	str	r2, [r7, #36]	; 0x24
 8010e70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010e72:	601a      	str	r2, [r3, #0]
 8010e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e76:	1d1a      	adds	r2, r3, #4
 8010e78:	627a      	str	r2, [r7, #36]	; 0x24
 8010e7a:	693a      	ldr	r2, [r7, #16]
 8010e7c:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8010e7e:	68bb      	ldr	r3, [r7, #8]
 8010e80:	69db      	ldr	r3, [r3, #28]
 8010e82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010e84:	429a      	cmp	r2, r3
 8010e86:	d3c4      	bcc.n	8010e12 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010e8e:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8010e90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010e92:	697b      	ldr	r3, [r7, #20]
 8010e94:	429a      	cmp	r2, r3
 8010e96:	d803      	bhi.n	8010ea0 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8010e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e9a:	2200      	movs	r2, #0
 8010e9c:	601a      	str	r2, [r3, #0]
 8010e9e:	e19f      	b.n	80111e0 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8010ea0:	2311      	movs	r3, #17
 8010ea2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8010ea6:	e19b      	b.n	80111e0 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	68db      	ldr	r3, [r3, #12]
 8010eac:	683a      	ldr	r2, [r7, #0]
 8010eae:	429a      	cmp	r2, r3
 8010eb0:	d902      	bls.n	8010eb8 <f_lseek+0x114>
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	68db      	ldr	r3, [r3, #12]
 8010eb6:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	683a      	ldr	r2, [r7, #0]
 8010ebc:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8010ebe:	683b      	ldr	r3, [r7, #0]
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	f000 818d 	beq.w	80111e0 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8010ec6:	683b      	ldr	r3, [r7, #0]
 8010ec8:	3b01      	subs	r3, #1
 8010eca:	4619      	mov	r1, r3
 8010ecc:	6878      	ldr	r0, [r7, #4]
 8010ece:	f7fe f998 	bl	800f202 <clmt_clust>
 8010ed2:	4602      	mov	r2, r0
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8010ed8:	68ba      	ldr	r2, [r7, #8]
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	69db      	ldr	r3, [r3, #28]
 8010ede:	4619      	mov	r1, r3
 8010ee0:	4610      	mov	r0, r2
 8010ee2:	f7fd fe8b 	bl	800ebfc <clust2sect>
 8010ee6:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8010ee8:	69bb      	ldr	r3, [r7, #24]
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d104      	bne.n	8010ef8 <f_lseek+0x154>
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	2202      	movs	r2, #2
 8010ef2:	755a      	strb	r2, [r3, #21]
 8010ef4:	2302      	movs	r3, #2
 8010ef6:	e175      	b.n	80111e4 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8010ef8:	683b      	ldr	r3, [r7, #0]
 8010efa:	3b01      	subs	r3, #1
 8010efc:	68ba      	ldr	r2, [r7, #8]
 8010efe:	8992      	ldrh	r2, [r2, #12]
 8010f00:	fbb3 f3f2 	udiv	r3, r3, r2
 8010f04:	68ba      	ldr	r2, [r7, #8]
 8010f06:	8952      	ldrh	r2, [r2, #10]
 8010f08:	3a01      	subs	r2, #1
 8010f0a:	4013      	ands	r3, r2
 8010f0c:	69ba      	ldr	r2, [r7, #24]
 8010f0e:	4413      	add	r3, r2
 8010f10:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	699b      	ldr	r3, [r3, #24]
 8010f16:	68ba      	ldr	r2, [r7, #8]
 8010f18:	8992      	ldrh	r2, [r2, #12]
 8010f1a:	fbb3 f1f2 	udiv	r1, r3, r2
 8010f1e:	fb02 f201 	mul.w	r2, r2, r1
 8010f22:	1a9b      	subs	r3, r3, r2
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	f000 815b 	beq.w	80111e0 <f_lseek+0x43c>
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	6a1b      	ldr	r3, [r3, #32]
 8010f2e:	69ba      	ldr	r2, [r7, #24]
 8010f30:	429a      	cmp	r2, r3
 8010f32:	f000 8155 	beq.w	80111e0 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	7d1b      	ldrb	r3, [r3, #20]
 8010f3a:	b25b      	sxtb	r3, r3
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	da18      	bge.n	8010f72 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010f40:	68bb      	ldr	r3, [r7, #8]
 8010f42:	7858      	ldrb	r0, [r3, #1]
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	6a1a      	ldr	r2, [r3, #32]
 8010f4e:	2301      	movs	r3, #1
 8010f50:	f7fd fac8 	bl	800e4e4 <disk_write>
 8010f54:	4603      	mov	r3, r0
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d004      	beq.n	8010f64 <f_lseek+0x1c0>
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	2201      	movs	r2, #1
 8010f5e:	755a      	strb	r2, [r3, #21]
 8010f60:	2301      	movs	r3, #1
 8010f62:	e13f      	b.n	80111e4 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	7d1b      	ldrb	r3, [r3, #20]
 8010f68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010f6c:	b2da      	uxtb	r2, r3
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8010f72:	68bb      	ldr	r3, [r7, #8]
 8010f74:	7858      	ldrb	r0, [r3, #1]
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010f7c:	2301      	movs	r3, #1
 8010f7e:	69ba      	ldr	r2, [r7, #24]
 8010f80:	f7fd fa90 	bl	800e4a4 <disk_read>
 8010f84:	4603      	mov	r3, r0
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d004      	beq.n	8010f94 <f_lseek+0x1f0>
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	2201      	movs	r2, #1
 8010f8e:	755a      	strb	r2, [r3, #21]
 8010f90:	2301      	movs	r3, #1
 8010f92:	e127      	b.n	80111e4 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	69ba      	ldr	r2, [r7, #24]
 8010f98:	621a      	str	r2, [r3, #32]
 8010f9a:	e121      	b.n	80111e0 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	68db      	ldr	r3, [r3, #12]
 8010fa0:	683a      	ldr	r2, [r7, #0]
 8010fa2:	429a      	cmp	r2, r3
 8010fa4:	d908      	bls.n	8010fb8 <f_lseek+0x214>
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	7d1b      	ldrb	r3, [r3, #20]
 8010faa:	f003 0302 	and.w	r3, r3, #2
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d102      	bne.n	8010fb8 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	68db      	ldr	r3, [r3, #12]
 8010fb6:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	699b      	ldr	r3, [r3, #24]
 8010fbc:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8010fbe:	2300      	movs	r3, #0
 8010fc0:	637b      	str	r3, [r7, #52]	; 0x34
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010fc6:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8010fc8:	683b      	ldr	r3, [r7, #0]
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	f000 80b5 	beq.w	801113a <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8010fd0:	68bb      	ldr	r3, [r7, #8]
 8010fd2:	895b      	ldrh	r3, [r3, #10]
 8010fd4:	461a      	mov	r2, r3
 8010fd6:	68bb      	ldr	r3, [r7, #8]
 8010fd8:	899b      	ldrh	r3, [r3, #12]
 8010fda:	fb03 f302 	mul.w	r3, r3, r2
 8010fde:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8010fe0:	6a3b      	ldr	r3, [r7, #32]
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	d01b      	beq.n	801101e <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8010fe6:	683b      	ldr	r3, [r7, #0]
 8010fe8:	1e5a      	subs	r2, r3, #1
 8010fea:	69fb      	ldr	r3, [r7, #28]
 8010fec:	fbb2 f2f3 	udiv	r2, r2, r3
 8010ff0:	6a3b      	ldr	r3, [r7, #32]
 8010ff2:	1e59      	subs	r1, r3, #1
 8010ff4:	69fb      	ldr	r3, [r7, #28]
 8010ff6:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8010ffa:	429a      	cmp	r2, r3
 8010ffc:	d30f      	bcc.n	801101e <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8010ffe:	6a3b      	ldr	r3, [r7, #32]
 8011000:	1e5a      	subs	r2, r3, #1
 8011002:	69fb      	ldr	r3, [r7, #28]
 8011004:	425b      	negs	r3, r3
 8011006:	401a      	ands	r2, r3
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	699b      	ldr	r3, [r3, #24]
 8011010:	683a      	ldr	r2, [r7, #0]
 8011012:	1ad3      	subs	r3, r2, r3
 8011014:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	69db      	ldr	r3, [r3, #28]
 801101a:	63bb      	str	r3, [r7, #56]	; 0x38
 801101c:	e022      	b.n	8011064 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	689b      	ldr	r3, [r3, #8]
 8011022:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8011024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011026:	2b00      	cmp	r3, #0
 8011028:	d119      	bne.n	801105e <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	2100      	movs	r1, #0
 801102e:	4618      	mov	r0, r3
 8011030:	f7fe f84f 	bl	800f0d2 <create_chain>
 8011034:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8011036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011038:	2b01      	cmp	r3, #1
 801103a:	d104      	bne.n	8011046 <f_lseek+0x2a2>
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	2202      	movs	r2, #2
 8011040:	755a      	strb	r2, [r3, #21]
 8011042:	2302      	movs	r3, #2
 8011044:	e0ce      	b.n	80111e4 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011048:	f1b3 3fff 	cmp.w	r3, #4294967295
 801104c:	d104      	bne.n	8011058 <f_lseek+0x2b4>
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	2201      	movs	r2, #1
 8011052:	755a      	strb	r2, [r3, #21]
 8011054:	2301      	movs	r3, #1
 8011056:	e0c5      	b.n	80111e4 <f_lseek+0x440>
					fp->obj.sclust = clst;
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801105c:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011062:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8011064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011066:	2b00      	cmp	r3, #0
 8011068:	d067      	beq.n	801113a <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 801106a:	e03a      	b.n	80110e2 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 801106c:	683a      	ldr	r2, [r7, #0]
 801106e:	69fb      	ldr	r3, [r7, #28]
 8011070:	1ad3      	subs	r3, r2, r3
 8011072:	603b      	str	r3, [r7, #0]
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	699a      	ldr	r2, [r3, #24]
 8011078:	69fb      	ldr	r3, [r7, #28]
 801107a:	441a      	add	r2, r3
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	7d1b      	ldrb	r3, [r3, #20]
 8011084:	f003 0302 	and.w	r3, r3, #2
 8011088:	2b00      	cmp	r3, #0
 801108a:	d00b      	beq.n	80110a4 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011090:	4618      	mov	r0, r3
 8011092:	f7fe f81e 	bl	800f0d2 <create_chain>
 8011096:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8011098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801109a:	2b00      	cmp	r3, #0
 801109c:	d108      	bne.n	80110b0 <f_lseek+0x30c>
							ofs = 0; break;
 801109e:	2300      	movs	r3, #0
 80110a0:	603b      	str	r3, [r7, #0]
 80110a2:	e022      	b.n	80110ea <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80110a8:	4618      	mov	r0, r3
 80110aa:	f7fd fdc6 	bl	800ec3a <get_fat>
 80110ae:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80110b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80110b6:	d104      	bne.n	80110c2 <f_lseek+0x31e>
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	2201      	movs	r2, #1
 80110bc:	755a      	strb	r2, [r3, #21]
 80110be:	2301      	movs	r3, #1
 80110c0:	e090      	b.n	80111e4 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80110c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110c4:	2b01      	cmp	r3, #1
 80110c6:	d904      	bls.n	80110d2 <f_lseek+0x32e>
 80110c8:	68bb      	ldr	r3, [r7, #8]
 80110ca:	69db      	ldr	r3, [r3, #28]
 80110cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80110ce:	429a      	cmp	r2, r3
 80110d0:	d304      	bcc.n	80110dc <f_lseek+0x338>
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	2202      	movs	r2, #2
 80110d6:	755a      	strb	r2, [r3, #21]
 80110d8:	2302      	movs	r3, #2
 80110da:	e083      	b.n	80111e4 <f_lseek+0x440>
					fp->clust = clst;
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80110e0:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 80110e2:	683a      	ldr	r2, [r7, #0]
 80110e4:	69fb      	ldr	r3, [r7, #28]
 80110e6:	429a      	cmp	r2, r3
 80110e8:	d8c0      	bhi.n	801106c <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	699a      	ldr	r2, [r3, #24]
 80110ee:	683b      	ldr	r3, [r7, #0]
 80110f0:	441a      	add	r2, r3
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 80110f6:	68bb      	ldr	r3, [r7, #8]
 80110f8:	899b      	ldrh	r3, [r3, #12]
 80110fa:	461a      	mov	r2, r3
 80110fc:	683b      	ldr	r3, [r7, #0]
 80110fe:	fbb3 f1f2 	udiv	r1, r3, r2
 8011102:	fb02 f201 	mul.w	r2, r2, r1
 8011106:	1a9b      	subs	r3, r3, r2
 8011108:	2b00      	cmp	r3, #0
 801110a:	d016      	beq.n	801113a <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 801110c:	68bb      	ldr	r3, [r7, #8]
 801110e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011110:	4618      	mov	r0, r3
 8011112:	f7fd fd73 	bl	800ebfc <clust2sect>
 8011116:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8011118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801111a:	2b00      	cmp	r3, #0
 801111c:	d104      	bne.n	8011128 <f_lseek+0x384>
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	2202      	movs	r2, #2
 8011122:	755a      	strb	r2, [r3, #21]
 8011124:	2302      	movs	r3, #2
 8011126:	e05d      	b.n	80111e4 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8011128:	68bb      	ldr	r3, [r7, #8]
 801112a:	899b      	ldrh	r3, [r3, #12]
 801112c:	461a      	mov	r2, r3
 801112e:	683b      	ldr	r3, [r7, #0]
 8011130:	fbb3 f3f2 	udiv	r3, r3, r2
 8011134:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011136:	4413      	add	r3, r2
 8011138:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	699a      	ldr	r2, [r3, #24]
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	68db      	ldr	r3, [r3, #12]
 8011142:	429a      	cmp	r2, r3
 8011144:	d90a      	bls.n	801115c <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	699a      	ldr	r2, [r3, #24]
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	7d1b      	ldrb	r3, [r3, #20]
 8011152:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011156:	b2da      	uxtb	r2, r3
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	699b      	ldr	r3, [r3, #24]
 8011160:	68ba      	ldr	r2, [r7, #8]
 8011162:	8992      	ldrh	r2, [r2, #12]
 8011164:	fbb3 f1f2 	udiv	r1, r3, r2
 8011168:	fb02 f201 	mul.w	r2, r2, r1
 801116c:	1a9b      	subs	r3, r3, r2
 801116e:	2b00      	cmp	r3, #0
 8011170:	d036      	beq.n	80111e0 <f_lseek+0x43c>
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	6a1b      	ldr	r3, [r3, #32]
 8011176:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011178:	429a      	cmp	r2, r3
 801117a:	d031      	beq.n	80111e0 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	7d1b      	ldrb	r3, [r3, #20]
 8011180:	b25b      	sxtb	r3, r3
 8011182:	2b00      	cmp	r3, #0
 8011184:	da18      	bge.n	80111b8 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011186:	68bb      	ldr	r3, [r7, #8]
 8011188:	7858      	ldrb	r0, [r3, #1]
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	6a1a      	ldr	r2, [r3, #32]
 8011194:	2301      	movs	r3, #1
 8011196:	f7fd f9a5 	bl	800e4e4 <disk_write>
 801119a:	4603      	mov	r3, r0
 801119c:	2b00      	cmp	r3, #0
 801119e:	d004      	beq.n	80111aa <f_lseek+0x406>
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	2201      	movs	r2, #1
 80111a4:	755a      	strb	r2, [r3, #21]
 80111a6:	2301      	movs	r3, #1
 80111a8:	e01c      	b.n	80111e4 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	7d1b      	ldrb	r3, [r3, #20]
 80111ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80111b2:	b2da      	uxtb	r2, r3
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80111b8:	68bb      	ldr	r3, [r7, #8]
 80111ba:	7858      	ldrb	r0, [r3, #1]
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80111c2:	2301      	movs	r3, #1
 80111c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80111c6:	f7fd f96d 	bl	800e4a4 <disk_read>
 80111ca:	4603      	mov	r3, r0
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	d004      	beq.n	80111da <f_lseek+0x436>
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	2201      	movs	r2, #1
 80111d4:	755a      	strb	r2, [r3, #21]
 80111d6:	2301      	movs	r3, #1
 80111d8:	e004      	b.n	80111e4 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80111de:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 80111e0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80111e4:	4618      	mov	r0, r3
 80111e6:	3740      	adds	r7, #64	; 0x40
 80111e8:	46bd      	mov	sp, r7
 80111ea:	bd80      	pop	{r7, pc}

080111ec <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 80111ec:	b580      	push	{r7, lr}
 80111ee:	b09e      	sub	sp, #120	; 0x78
 80111f0:	af00      	add	r7, sp, #0
 80111f2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 80111f4:	2300      	movs	r3, #0
 80111f6:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 80111f8:	f107 010c 	add.w	r1, r7, #12
 80111fc:	1d3b      	adds	r3, r7, #4
 80111fe:	2202      	movs	r2, #2
 8011200:	4618      	mov	r0, r3
 8011202:	f7fe fd17 	bl	800fc34 <find_volume>
 8011206:	4603      	mov	r3, r0
 8011208:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 801120c:	68fb      	ldr	r3, [r7, #12]
 801120e:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 8011210:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011214:	2b00      	cmp	r3, #0
 8011216:	f040 80a4 	bne.w	8011362 <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 801121a:	687a      	ldr	r2, [r7, #4]
 801121c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011220:	4611      	mov	r1, r2
 8011222:	4618      	mov	r0, r3
 8011224:	f7fe fbd6 	bl	800f9d4 <follow_path>
 8011228:	4603      	mov	r3, r0
 801122a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 801122e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011232:	2b00      	cmp	r3, #0
 8011234:	d108      	bne.n	8011248 <f_unlink+0x5c>
 8011236:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801123a:	f003 0320 	and.w	r3, r3, #32
 801123e:	2b00      	cmp	r3, #0
 8011240:	d002      	beq.n	8011248 <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 8011242:	2306      	movs	r3, #6
 8011244:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8011248:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801124c:	2b00      	cmp	r3, #0
 801124e:	d108      	bne.n	8011262 <f_unlink+0x76>
 8011250:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011254:	2102      	movs	r1, #2
 8011256:	4618      	mov	r0, r3
 8011258:	f7fd fa82 	bl	800e760 <chk_lock>
 801125c:	4603      	mov	r3, r0
 801125e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8011262:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011266:	2b00      	cmp	r3, #0
 8011268:	d17b      	bne.n	8011362 <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 801126a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801126e:	b25b      	sxtb	r3, r3
 8011270:	2b00      	cmp	r3, #0
 8011272:	da03      	bge.n	801127c <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8011274:	2306      	movs	r3, #6
 8011276:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 801127a:	e008      	b.n	801128e <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 801127c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8011280:	f003 0301 	and.w	r3, r3, #1
 8011284:	2b00      	cmp	r3, #0
 8011286:	d002      	beq.n	801128e <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8011288:	2307      	movs	r3, #7
 801128a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 801128e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011292:	2b00      	cmp	r3, #0
 8011294:	d13d      	bne.n	8011312 <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8011296:	68fb      	ldr	r3, [r7, #12]
 8011298:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801129a:	4611      	mov	r1, r2
 801129c:	4618      	mov	r0, r3
 801129e:	f7fe f98e 	bl	800f5be <ld_clust>
 80112a2:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 80112a4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80112a8:	f003 0310 	and.w	r3, r3, #16
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d030      	beq.n	8011312 <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 80112b0:	68fb      	ldr	r3, [r7, #12]
 80112b2:	699b      	ldr	r3, [r3, #24]
 80112b4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80112b6:	429a      	cmp	r2, r3
 80112b8:	d103      	bne.n	80112c2 <f_unlink+0xd6>
						res = FR_DENIED;
 80112ba:	2307      	movs	r3, #7
 80112bc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80112c0:	e027      	b.n	8011312 <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 80112c2:	68fb      	ldr	r3, [r7, #12]
 80112c4:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 80112c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80112c8:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 80112ca:	f107 0310 	add.w	r3, r7, #16
 80112ce:	2100      	movs	r1, #0
 80112d0:	4618      	mov	r0, r3
 80112d2:	f7fd ffce 	bl	800f272 <dir_sdi>
 80112d6:	4603      	mov	r3, r0
 80112d8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 80112dc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d116      	bne.n	8011312 <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 80112e4:	f107 0310 	add.w	r3, r7, #16
 80112e8:	2100      	movs	r1, #0
 80112ea:	4618      	mov	r0, r3
 80112ec:	f7fe f9a6 	bl	800f63c <dir_read>
 80112f0:	4603      	mov	r3, r0
 80112f2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 80112f6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	d102      	bne.n	8011304 <f_unlink+0x118>
 80112fe:	2307      	movs	r3, #7
 8011300:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8011304:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011308:	2b04      	cmp	r3, #4
 801130a:	d102      	bne.n	8011312 <f_unlink+0x126>
 801130c:	2300      	movs	r3, #0
 801130e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 8011312:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011316:	2b00      	cmp	r3, #0
 8011318:	d123      	bne.n	8011362 <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 801131a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801131e:	4618      	mov	r0, r3
 8011320:	f7fe fa70 	bl	800f804 <dir_remove>
 8011324:	4603      	mov	r3, r0
 8011326:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 801132a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801132e:	2b00      	cmp	r3, #0
 8011330:	d10c      	bne.n	801134c <f_unlink+0x160>
 8011332:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011334:	2b00      	cmp	r3, #0
 8011336:	d009      	beq.n	801134c <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8011338:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801133c:	2200      	movs	r2, #0
 801133e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8011340:	4618      	mov	r0, r3
 8011342:	f7fd fe61 	bl	800f008 <remove_chain>
 8011346:	4603      	mov	r3, r0
 8011348:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 801134c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011350:	2b00      	cmp	r3, #0
 8011352:	d106      	bne.n	8011362 <f_unlink+0x176>
 8011354:	68fb      	ldr	r3, [r7, #12]
 8011356:	4618      	mov	r0, r3
 8011358:	f7fd fbe0 	bl	800eb1c <sync_fs>
 801135c:	4603      	mov	r3, r0
 801135e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8011362:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8011366:	4618      	mov	r0, r3
 8011368:	3778      	adds	r7, #120	; 0x78
 801136a:	46bd      	mov	sp, r7
 801136c:	bd80      	pop	{r7, pc}
	...

08011370 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8011370:	b580      	push	{r7, lr}
 8011372:	b096      	sub	sp, #88	; 0x58
 8011374:	af00      	add	r7, sp, #0
 8011376:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8011378:	f107 0108 	add.w	r1, r7, #8
 801137c:	1d3b      	adds	r3, r7, #4
 801137e:	2202      	movs	r2, #2
 8011380:	4618      	mov	r0, r3
 8011382:	f7fe fc57 	bl	800fc34 <find_volume>
 8011386:	4603      	mov	r3, r0
 8011388:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 801138c:	68bb      	ldr	r3, [r7, #8]
 801138e:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8011390:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011394:	2b00      	cmp	r3, #0
 8011396:	f040 80fe 	bne.w	8011596 <f_mkdir+0x226>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 801139a:	687a      	ldr	r2, [r7, #4]
 801139c:	f107 030c 	add.w	r3, r7, #12
 80113a0:	4611      	mov	r1, r2
 80113a2:	4618      	mov	r0, r3
 80113a4:	f7fe fb16 	bl	800f9d4 <follow_path>
 80113a8:	4603      	mov	r3, r0
 80113aa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 80113ae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	d102      	bne.n	80113bc <f_mkdir+0x4c>
 80113b6:	2308      	movs	r3, #8
 80113b8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 80113bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80113c0:	2b04      	cmp	r3, #4
 80113c2:	d108      	bne.n	80113d6 <f_mkdir+0x66>
 80113c4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80113c8:	f003 0320 	and.w	r3, r3, #32
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d002      	beq.n	80113d6 <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 80113d0:	2306      	movs	r3, #6
 80113d2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 80113d6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80113da:	2b04      	cmp	r3, #4
 80113dc:	f040 80db 	bne.w	8011596 <f_mkdir+0x226>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 80113e0:	f107 030c 	add.w	r3, r7, #12
 80113e4:	2100      	movs	r1, #0
 80113e6:	4618      	mov	r0, r3
 80113e8:	f7fd fe73 	bl	800f0d2 <create_chain>
 80113ec:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 80113ee:	68bb      	ldr	r3, [r7, #8]
 80113f0:	895b      	ldrh	r3, [r3, #10]
 80113f2:	461a      	mov	r2, r3
 80113f4:	68bb      	ldr	r3, [r7, #8]
 80113f6:	899b      	ldrh	r3, [r3, #12]
 80113f8:	fb03 f302 	mul.w	r3, r3, r2
 80113fc:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 80113fe:	2300      	movs	r3, #0
 8011400:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8011404:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011406:	2b00      	cmp	r3, #0
 8011408:	d102      	bne.n	8011410 <f_mkdir+0xa0>
 801140a:	2307      	movs	r3, #7
 801140c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8011410:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011412:	2b01      	cmp	r3, #1
 8011414:	d102      	bne.n	801141c <f_mkdir+0xac>
 8011416:	2302      	movs	r3, #2
 8011418:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 801141c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801141e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011422:	d102      	bne.n	801142a <f_mkdir+0xba>
 8011424:	2301      	movs	r3, #1
 8011426:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 801142a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801142e:	2b00      	cmp	r3, #0
 8011430:	d106      	bne.n	8011440 <f_mkdir+0xd0>
 8011432:	68bb      	ldr	r3, [r7, #8]
 8011434:	4618      	mov	r0, r3
 8011436:	f7fd faff 	bl	800ea38 <sync_window>
 801143a:	4603      	mov	r3, r0
 801143c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 8011440:	4b58      	ldr	r3, [pc, #352]	; (80115a4 <f_mkdir+0x234>)
 8011442:	643b      	str	r3, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8011444:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011448:	2b00      	cmp	r3, #0
 801144a:	d16c      	bne.n	8011526 <f_mkdir+0x1b6>
				dsc = clust2sect(fs, dcl);
 801144c:	68bb      	ldr	r3, [r7, #8]
 801144e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011450:	4618      	mov	r0, r3
 8011452:	f7fd fbd3 	bl	800ebfc <clust2sect>
 8011456:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 8011458:	68bb      	ldr	r3, [r7, #8]
 801145a:	3338      	adds	r3, #56	; 0x38
 801145c:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 801145e:	68bb      	ldr	r3, [r7, #8]
 8011460:	899b      	ldrh	r3, [r3, #12]
 8011462:	461a      	mov	r2, r3
 8011464:	2100      	movs	r1, #0
 8011466:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011468:	f7fd f91d 	bl	800e6a6 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 801146c:	220b      	movs	r2, #11
 801146e:	2120      	movs	r1, #32
 8011470:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011472:	f7fd f918 	bl	800e6a6 <mem_set>
					dir[DIR_Name] = '.';
 8011476:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011478:	222e      	movs	r2, #46	; 0x2e
 801147a:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 801147c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801147e:	330b      	adds	r3, #11
 8011480:	2210      	movs	r2, #16
 8011482:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8011484:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011486:	3316      	adds	r3, #22
 8011488:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801148a:	4618      	mov	r0, r3
 801148c:	f7fd f8be 	bl	800e60c <st_dword>
					st_clust(fs, dir, dcl);
 8011490:	68bb      	ldr	r3, [r7, #8]
 8011492:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011494:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011496:	4618      	mov	r0, r3
 8011498:	f7fe f8b0 	bl	800f5fc <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 801149c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801149e:	3320      	adds	r3, #32
 80114a0:	2220      	movs	r2, #32
 80114a2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80114a4:	4618      	mov	r0, r3
 80114a6:	f7fd f8dd 	bl	800e664 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 80114aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114ac:	3321      	adds	r3, #33	; 0x21
 80114ae:	222e      	movs	r2, #46	; 0x2e
 80114b0:	701a      	strb	r2, [r3, #0]
 80114b2:	697b      	ldr	r3, [r7, #20]
 80114b4:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 80114b6:	68bb      	ldr	r3, [r7, #8]
 80114b8:	781b      	ldrb	r3, [r3, #0]
 80114ba:	2b03      	cmp	r3, #3
 80114bc:	d106      	bne.n	80114cc <f_mkdir+0x15c>
 80114be:	68bb      	ldr	r3, [r7, #8]
 80114c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80114c4:	429a      	cmp	r2, r3
 80114c6:	d101      	bne.n	80114cc <f_mkdir+0x15c>
 80114c8:	2300      	movs	r3, #0
 80114ca:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 80114cc:	68b8      	ldr	r0, [r7, #8]
 80114ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114d0:	3320      	adds	r3, #32
 80114d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80114d4:	4619      	mov	r1, r3
 80114d6:	f7fe f891 	bl	800f5fc <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80114da:	68bb      	ldr	r3, [r7, #8]
 80114dc:	895b      	ldrh	r3, [r3, #10]
 80114de:	653b      	str	r3, [r7, #80]	; 0x50
 80114e0:	e01c      	b.n	801151c <f_mkdir+0x1ac>
					fs->winsect = dsc++;
 80114e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80114e4:	1c5a      	adds	r2, r3, #1
 80114e6:	64fa      	str	r2, [r7, #76]	; 0x4c
 80114e8:	68ba      	ldr	r2, [r7, #8]
 80114ea:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 80114ec:	68bb      	ldr	r3, [r7, #8]
 80114ee:	2201      	movs	r2, #1
 80114f0:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 80114f2:	68bb      	ldr	r3, [r7, #8]
 80114f4:	4618      	mov	r0, r3
 80114f6:	f7fd fa9f 	bl	800ea38 <sync_window>
 80114fa:	4603      	mov	r3, r0
 80114fc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 8011500:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011504:	2b00      	cmp	r3, #0
 8011506:	d10d      	bne.n	8011524 <f_mkdir+0x1b4>
					mem_set(dir, 0, SS(fs));
 8011508:	68bb      	ldr	r3, [r7, #8]
 801150a:	899b      	ldrh	r3, [r3, #12]
 801150c:	461a      	mov	r2, r3
 801150e:	2100      	movs	r1, #0
 8011510:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011512:	f7fd f8c8 	bl	800e6a6 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8011516:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011518:	3b01      	subs	r3, #1
 801151a:	653b      	str	r3, [r7, #80]	; 0x50
 801151c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801151e:	2b00      	cmp	r3, #0
 8011520:	d1df      	bne.n	80114e2 <f_mkdir+0x172>
 8011522:	e000      	b.n	8011526 <f_mkdir+0x1b6>
					if (res != FR_OK) break;
 8011524:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8011526:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801152a:	2b00      	cmp	r3, #0
 801152c:	d107      	bne.n	801153e <f_mkdir+0x1ce>
				res = dir_register(&dj);	/* Register the object to the directoy */
 801152e:	f107 030c 	add.w	r3, r7, #12
 8011532:	4618      	mov	r0, r3
 8011534:	f7fe f934 	bl	800f7a0 <dir_register>
 8011538:	4603      	mov	r3, r0
 801153a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 801153e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011542:	2b00      	cmp	r3, #0
 8011544:	d120      	bne.n	8011588 <f_mkdir+0x218>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8011546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011548:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 801154a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801154c:	3316      	adds	r3, #22
 801154e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011550:	4618      	mov	r0, r3
 8011552:	f7fd f85b 	bl	800e60c <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8011556:	68bb      	ldr	r3, [r7, #8]
 8011558:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801155a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801155c:	4618      	mov	r0, r3
 801155e:	f7fe f84d 	bl	800f5fc <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8011562:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011564:	330b      	adds	r3, #11
 8011566:	2210      	movs	r2, #16
 8011568:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 801156a:	68bb      	ldr	r3, [r7, #8]
 801156c:	2201      	movs	r2, #1
 801156e:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8011570:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011574:	2b00      	cmp	r3, #0
 8011576:	d10e      	bne.n	8011596 <f_mkdir+0x226>
					res = sync_fs(fs);
 8011578:	68bb      	ldr	r3, [r7, #8]
 801157a:	4618      	mov	r0, r3
 801157c:	f7fd face 	bl	800eb1c <sync_fs>
 8011580:	4603      	mov	r3, r0
 8011582:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8011586:	e006      	b.n	8011596 <f_mkdir+0x226>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8011588:	f107 030c 	add.w	r3, r7, #12
 801158c:	2200      	movs	r2, #0
 801158e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011590:	4618      	mov	r0, r3
 8011592:	f7fd fd39 	bl	800f008 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8011596:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 801159a:	4618      	mov	r0, r3
 801159c:	3758      	adds	r7, #88	; 0x58
 801159e:	46bd      	mov	sp, r7
 80115a0:	bd80      	pop	{r7, pc}
 80115a2:	bf00      	nop
 80115a4:	274a0000 	.word	0x274a0000

080115a8 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 80115a8:	b580      	push	{r7, lr}
 80115aa:	b088      	sub	sp, #32
 80115ac:	af00      	add	r7, sp, #0
 80115ae:	60f8      	str	r0, [r7, #12]
 80115b0:	60b9      	str	r1, [r7, #8]
 80115b2:	607a      	str	r2, [r7, #4]
	int n = 0;
 80115b4:	2300      	movs	r3, #0
 80115b6:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 80115b8:	68fb      	ldr	r3, [r7, #12]
 80115ba:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80115bc:	e017      	b.n	80115ee <f_gets+0x46>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 80115be:	f107 0310 	add.w	r3, r7, #16
 80115c2:	f107 0114 	add.w	r1, r7, #20
 80115c6:	2201      	movs	r2, #1
 80115c8:	6878      	ldr	r0, [r7, #4]
 80115ca:	f7ff f803 	bl	80105d4 <f_read>
		if (rc != 1) break;
 80115ce:	693b      	ldr	r3, [r7, #16]
 80115d0:	2b01      	cmp	r3, #1
 80115d2:	d112      	bne.n	80115fa <f_gets+0x52>
		c = s[0];
 80115d4:	7d3b      	ldrb	r3, [r7, #20]
 80115d6:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
		*p++ = c;
 80115d8:	69bb      	ldr	r3, [r7, #24]
 80115da:	1c5a      	adds	r2, r3, #1
 80115dc:	61ba      	str	r2, [r7, #24]
 80115de:	7dfa      	ldrb	r2, [r7, #23]
 80115e0:	701a      	strb	r2, [r3, #0]
		n++;
 80115e2:	69fb      	ldr	r3, [r7, #28]
 80115e4:	3301      	adds	r3, #1
 80115e6:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 80115e8:	7dfb      	ldrb	r3, [r7, #23]
 80115ea:	2b0a      	cmp	r3, #10
 80115ec:	d007      	beq.n	80115fe <f_gets+0x56>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80115ee:	68bb      	ldr	r3, [r7, #8]
 80115f0:	3b01      	subs	r3, #1
 80115f2:	69fa      	ldr	r2, [r7, #28]
 80115f4:	429a      	cmp	r2, r3
 80115f6:	dbe2      	blt.n	80115be <f_gets+0x16>
 80115f8:	e002      	b.n	8011600 <f_gets+0x58>
		if (rc != 1) break;
 80115fa:	bf00      	nop
 80115fc:	e000      	b.n	8011600 <f_gets+0x58>
		if (c == '\n') break;		/* Break on EOL */
 80115fe:	bf00      	nop
	}
	*p = 0;
 8011600:	69bb      	ldr	r3, [r7, #24]
 8011602:	2200      	movs	r2, #0
 8011604:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8011606:	69fb      	ldr	r3, [r7, #28]
 8011608:	2b00      	cmp	r3, #0
 801160a:	d001      	beq.n	8011610 <f_gets+0x68>
 801160c:	68fb      	ldr	r3, [r7, #12]
 801160e:	e000      	b.n	8011612 <f_gets+0x6a>
 8011610:	2300      	movs	r3, #0
}
 8011612:	4618      	mov	r0, r3
 8011614:	3720      	adds	r7, #32
 8011616:	46bd      	mov	sp, r7
 8011618:	bd80      	pop	{r7, pc}
	...

0801161c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801161c:	b480      	push	{r7}
 801161e:	b087      	sub	sp, #28
 8011620:	af00      	add	r7, sp, #0
 8011622:	60f8      	str	r0, [r7, #12]
 8011624:	60b9      	str	r1, [r7, #8]
 8011626:	4613      	mov	r3, r2
 8011628:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801162a:	2301      	movs	r3, #1
 801162c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801162e:	2300      	movs	r3, #0
 8011630:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8011632:	4b1f      	ldr	r3, [pc, #124]	; (80116b0 <FATFS_LinkDriverEx+0x94>)
 8011634:	7a5b      	ldrb	r3, [r3, #9]
 8011636:	b2db      	uxtb	r3, r3
 8011638:	2b00      	cmp	r3, #0
 801163a:	d131      	bne.n	80116a0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801163c:	4b1c      	ldr	r3, [pc, #112]	; (80116b0 <FATFS_LinkDriverEx+0x94>)
 801163e:	7a5b      	ldrb	r3, [r3, #9]
 8011640:	b2db      	uxtb	r3, r3
 8011642:	461a      	mov	r2, r3
 8011644:	4b1a      	ldr	r3, [pc, #104]	; (80116b0 <FATFS_LinkDriverEx+0x94>)
 8011646:	2100      	movs	r1, #0
 8011648:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801164a:	4b19      	ldr	r3, [pc, #100]	; (80116b0 <FATFS_LinkDriverEx+0x94>)
 801164c:	7a5b      	ldrb	r3, [r3, #9]
 801164e:	b2db      	uxtb	r3, r3
 8011650:	4a17      	ldr	r2, [pc, #92]	; (80116b0 <FATFS_LinkDriverEx+0x94>)
 8011652:	009b      	lsls	r3, r3, #2
 8011654:	4413      	add	r3, r2
 8011656:	68fa      	ldr	r2, [r7, #12]
 8011658:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801165a:	4b15      	ldr	r3, [pc, #84]	; (80116b0 <FATFS_LinkDriverEx+0x94>)
 801165c:	7a5b      	ldrb	r3, [r3, #9]
 801165e:	b2db      	uxtb	r3, r3
 8011660:	461a      	mov	r2, r3
 8011662:	4b13      	ldr	r3, [pc, #76]	; (80116b0 <FATFS_LinkDriverEx+0x94>)
 8011664:	4413      	add	r3, r2
 8011666:	79fa      	ldrb	r2, [r7, #7]
 8011668:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801166a:	4b11      	ldr	r3, [pc, #68]	; (80116b0 <FATFS_LinkDriverEx+0x94>)
 801166c:	7a5b      	ldrb	r3, [r3, #9]
 801166e:	b2db      	uxtb	r3, r3
 8011670:	1c5a      	adds	r2, r3, #1
 8011672:	b2d1      	uxtb	r1, r2
 8011674:	4a0e      	ldr	r2, [pc, #56]	; (80116b0 <FATFS_LinkDriverEx+0x94>)
 8011676:	7251      	strb	r1, [r2, #9]
 8011678:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801167a:	7dbb      	ldrb	r3, [r7, #22]
 801167c:	3330      	adds	r3, #48	; 0x30
 801167e:	b2da      	uxtb	r2, r3
 8011680:	68bb      	ldr	r3, [r7, #8]
 8011682:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8011684:	68bb      	ldr	r3, [r7, #8]
 8011686:	3301      	adds	r3, #1
 8011688:	223a      	movs	r2, #58	; 0x3a
 801168a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801168c:	68bb      	ldr	r3, [r7, #8]
 801168e:	3302      	adds	r3, #2
 8011690:	222f      	movs	r2, #47	; 0x2f
 8011692:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8011694:	68bb      	ldr	r3, [r7, #8]
 8011696:	3303      	adds	r3, #3
 8011698:	2200      	movs	r2, #0
 801169a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801169c:	2300      	movs	r3, #0
 801169e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80116a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80116a2:	4618      	mov	r0, r3
 80116a4:	371c      	adds	r7, #28
 80116a6:	46bd      	mov	sp, r7
 80116a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ac:	4770      	bx	lr
 80116ae:	bf00      	nop
 80116b0:	20037414 	.word	0x20037414

080116b4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80116b4:	b580      	push	{r7, lr}
 80116b6:	b082      	sub	sp, #8
 80116b8:	af00      	add	r7, sp, #0
 80116ba:	6078      	str	r0, [r7, #4]
 80116bc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80116be:	2200      	movs	r2, #0
 80116c0:	6839      	ldr	r1, [r7, #0]
 80116c2:	6878      	ldr	r0, [r7, #4]
 80116c4:	f7ff ffaa 	bl	801161c <FATFS_LinkDriverEx>
 80116c8:	4603      	mov	r3, r0
}
 80116ca:	4618      	mov	r0, r3
 80116cc:	3708      	adds	r7, #8
 80116ce:	46bd      	mov	sp, r7
 80116d0:	bd80      	pop	{r7, pc}

080116d2 <__cxa_guard_acquire>:
 80116d2:	6803      	ldr	r3, [r0, #0]
 80116d4:	07db      	lsls	r3, r3, #31
 80116d6:	d406      	bmi.n	80116e6 <__cxa_guard_acquire+0x14>
 80116d8:	7843      	ldrb	r3, [r0, #1]
 80116da:	b103      	cbz	r3, 80116de <__cxa_guard_acquire+0xc>
 80116dc:	deff      	udf	#255	; 0xff
 80116de:	2301      	movs	r3, #1
 80116e0:	7043      	strb	r3, [r0, #1]
 80116e2:	4618      	mov	r0, r3
 80116e4:	4770      	bx	lr
 80116e6:	2000      	movs	r0, #0
 80116e8:	4770      	bx	lr

080116ea <__cxa_guard_release>:
 80116ea:	2301      	movs	r3, #1
 80116ec:	6003      	str	r3, [r0, #0]
 80116ee:	4770      	bx	lr

080116f0 <cos>:
 80116f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80116f2:	ec51 0b10 	vmov	r0, r1, d0
 80116f6:	4a1e      	ldr	r2, [pc, #120]	; (8011770 <cos+0x80>)
 80116f8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80116fc:	4293      	cmp	r3, r2
 80116fe:	dc06      	bgt.n	801170e <cos+0x1e>
 8011700:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8011768 <cos+0x78>
 8011704:	f000 fa74 	bl	8011bf0 <__kernel_cos>
 8011708:	ec51 0b10 	vmov	r0, r1, d0
 801170c:	e007      	b.n	801171e <cos+0x2e>
 801170e:	4a19      	ldr	r2, [pc, #100]	; (8011774 <cos+0x84>)
 8011710:	4293      	cmp	r3, r2
 8011712:	dd09      	ble.n	8011728 <cos+0x38>
 8011714:	ee10 2a10 	vmov	r2, s0
 8011718:	460b      	mov	r3, r1
 801171a:	f7ee fdcd 	bl	80002b8 <__aeabi_dsub>
 801171e:	ec41 0b10 	vmov	d0, r0, r1
 8011722:	b005      	add	sp, #20
 8011724:	f85d fb04 	ldr.w	pc, [sp], #4
 8011728:	4668      	mov	r0, sp
 801172a:	f000 f86d 	bl	8011808 <__ieee754_rem_pio2>
 801172e:	f000 0003 	and.w	r0, r0, #3
 8011732:	2801      	cmp	r0, #1
 8011734:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011738:	ed9d 0b00 	vldr	d0, [sp]
 801173c:	d007      	beq.n	801174e <cos+0x5e>
 801173e:	2802      	cmp	r0, #2
 8011740:	d00e      	beq.n	8011760 <cos+0x70>
 8011742:	2800      	cmp	r0, #0
 8011744:	d0de      	beq.n	8011704 <cos+0x14>
 8011746:	2001      	movs	r0, #1
 8011748:	f000 fe5a 	bl	8012400 <__kernel_sin>
 801174c:	e7dc      	b.n	8011708 <cos+0x18>
 801174e:	f000 fe57 	bl	8012400 <__kernel_sin>
 8011752:	ec53 2b10 	vmov	r2, r3, d0
 8011756:	ee10 0a10 	vmov	r0, s0
 801175a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801175e:	e7de      	b.n	801171e <cos+0x2e>
 8011760:	f000 fa46 	bl	8011bf0 <__kernel_cos>
 8011764:	e7f5      	b.n	8011752 <cos+0x62>
 8011766:	bf00      	nop
	...
 8011770:	3fe921fb 	.word	0x3fe921fb
 8011774:	7fefffff 	.word	0x7fefffff

08011778 <sin>:
 8011778:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801177a:	ec51 0b10 	vmov	r0, r1, d0
 801177e:	4a20      	ldr	r2, [pc, #128]	; (8011800 <sin+0x88>)
 8011780:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011784:	4293      	cmp	r3, r2
 8011786:	dc07      	bgt.n	8011798 <sin+0x20>
 8011788:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 80117f8 <sin+0x80>
 801178c:	2000      	movs	r0, #0
 801178e:	f000 fe37 	bl	8012400 <__kernel_sin>
 8011792:	ec51 0b10 	vmov	r0, r1, d0
 8011796:	e007      	b.n	80117a8 <sin+0x30>
 8011798:	4a1a      	ldr	r2, [pc, #104]	; (8011804 <sin+0x8c>)
 801179a:	4293      	cmp	r3, r2
 801179c:	dd09      	ble.n	80117b2 <sin+0x3a>
 801179e:	ee10 2a10 	vmov	r2, s0
 80117a2:	460b      	mov	r3, r1
 80117a4:	f7ee fd88 	bl	80002b8 <__aeabi_dsub>
 80117a8:	ec41 0b10 	vmov	d0, r0, r1
 80117ac:	b005      	add	sp, #20
 80117ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80117b2:	4668      	mov	r0, sp
 80117b4:	f000 f828 	bl	8011808 <__ieee754_rem_pio2>
 80117b8:	f000 0003 	and.w	r0, r0, #3
 80117bc:	2801      	cmp	r0, #1
 80117be:	ed9d 1b02 	vldr	d1, [sp, #8]
 80117c2:	ed9d 0b00 	vldr	d0, [sp]
 80117c6:	d004      	beq.n	80117d2 <sin+0x5a>
 80117c8:	2802      	cmp	r0, #2
 80117ca:	d005      	beq.n	80117d8 <sin+0x60>
 80117cc:	b970      	cbnz	r0, 80117ec <sin+0x74>
 80117ce:	2001      	movs	r0, #1
 80117d0:	e7dd      	b.n	801178e <sin+0x16>
 80117d2:	f000 fa0d 	bl	8011bf0 <__kernel_cos>
 80117d6:	e7dc      	b.n	8011792 <sin+0x1a>
 80117d8:	2001      	movs	r0, #1
 80117da:	f000 fe11 	bl	8012400 <__kernel_sin>
 80117de:	ec53 2b10 	vmov	r2, r3, d0
 80117e2:	ee10 0a10 	vmov	r0, s0
 80117e6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80117ea:	e7dd      	b.n	80117a8 <sin+0x30>
 80117ec:	f000 fa00 	bl	8011bf0 <__kernel_cos>
 80117f0:	e7f5      	b.n	80117de <sin+0x66>
 80117f2:	bf00      	nop
 80117f4:	f3af 8000 	nop.w
	...
 8011800:	3fe921fb 	.word	0x3fe921fb
 8011804:	7fefffff 	.word	0x7fefffff

08011808 <__ieee754_rem_pio2>:
 8011808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801180c:	ec57 6b10 	vmov	r6, r7, d0
 8011810:	4bc3      	ldr	r3, [pc, #780]	; (8011b20 <__ieee754_rem_pio2+0x318>)
 8011812:	b08d      	sub	sp, #52	; 0x34
 8011814:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8011818:	4598      	cmp	r8, r3
 801181a:	4604      	mov	r4, r0
 801181c:	9704      	str	r7, [sp, #16]
 801181e:	dc07      	bgt.n	8011830 <__ieee754_rem_pio2+0x28>
 8011820:	2200      	movs	r2, #0
 8011822:	2300      	movs	r3, #0
 8011824:	ed84 0b00 	vstr	d0, [r4]
 8011828:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801182c:	2500      	movs	r5, #0
 801182e:	e027      	b.n	8011880 <__ieee754_rem_pio2+0x78>
 8011830:	4bbc      	ldr	r3, [pc, #752]	; (8011b24 <__ieee754_rem_pio2+0x31c>)
 8011832:	4598      	cmp	r8, r3
 8011834:	dc75      	bgt.n	8011922 <__ieee754_rem_pio2+0x11a>
 8011836:	9b04      	ldr	r3, [sp, #16]
 8011838:	4dbb      	ldr	r5, [pc, #748]	; (8011b28 <__ieee754_rem_pio2+0x320>)
 801183a:	2b00      	cmp	r3, #0
 801183c:	ee10 0a10 	vmov	r0, s0
 8011840:	a3a9      	add	r3, pc, #676	; (adr r3, 8011ae8 <__ieee754_rem_pio2+0x2e0>)
 8011842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011846:	4639      	mov	r1, r7
 8011848:	dd36      	ble.n	80118b8 <__ieee754_rem_pio2+0xb0>
 801184a:	f7ee fd35 	bl	80002b8 <__aeabi_dsub>
 801184e:	45a8      	cmp	r8, r5
 8011850:	4606      	mov	r6, r0
 8011852:	460f      	mov	r7, r1
 8011854:	d018      	beq.n	8011888 <__ieee754_rem_pio2+0x80>
 8011856:	a3a6      	add	r3, pc, #664	; (adr r3, 8011af0 <__ieee754_rem_pio2+0x2e8>)
 8011858:	e9d3 2300 	ldrd	r2, r3, [r3]
 801185c:	f7ee fd2c 	bl	80002b8 <__aeabi_dsub>
 8011860:	4602      	mov	r2, r0
 8011862:	460b      	mov	r3, r1
 8011864:	e9c4 2300 	strd	r2, r3, [r4]
 8011868:	4630      	mov	r0, r6
 801186a:	4639      	mov	r1, r7
 801186c:	f7ee fd24 	bl	80002b8 <__aeabi_dsub>
 8011870:	a39f      	add	r3, pc, #636	; (adr r3, 8011af0 <__ieee754_rem_pio2+0x2e8>)
 8011872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011876:	f7ee fd1f 	bl	80002b8 <__aeabi_dsub>
 801187a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801187e:	2501      	movs	r5, #1
 8011880:	4628      	mov	r0, r5
 8011882:	b00d      	add	sp, #52	; 0x34
 8011884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011888:	a39b      	add	r3, pc, #620	; (adr r3, 8011af8 <__ieee754_rem_pio2+0x2f0>)
 801188a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801188e:	f7ee fd13 	bl	80002b8 <__aeabi_dsub>
 8011892:	a39b      	add	r3, pc, #620	; (adr r3, 8011b00 <__ieee754_rem_pio2+0x2f8>)
 8011894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011898:	4606      	mov	r6, r0
 801189a:	460f      	mov	r7, r1
 801189c:	f7ee fd0c 	bl	80002b8 <__aeabi_dsub>
 80118a0:	4602      	mov	r2, r0
 80118a2:	460b      	mov	r3, r1
 80118a4:	e9c4 2300 	strd	r2, r3, [r4]
 80118a8:	4630      	mov	r0, r6
 80118aa:	4639      	mov	r1, r7
 80118ac:	f7ee fd04 	bl	80002b8 <__aeabi_dsub>
 80118b0:	a393      	add	r3, pc, #588	; (adr r3, 8011b00 <__ieee754_rem_pio2+0x2f8>)
 80118b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118b6:	e7de      	b.n	8011876 <__ieee754_rem_pio2+0x6e>
 80118b8:	f7ee fd00 	bl	80002bc <__adddf3>
 80118bc:	45a8      	cmp	r8, r5
 80118be:	4606      	mov	r6, r0
 80118c0:	460f      	mov	r7, r1
 80118c2:	d016      	beq.n	80118f2 <__ieee754_rem_pio2+0xea>
 80118c4:	a38a      	add	r3, pc, #552	; (adr r3, 8011af0 <__ieee754_rem_pio2+0x2e8>)
 80118c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118ca:	f7ee fcf7 	bl	80002bc <__adddf3>
 80118ce:	4602      	mov	r2, r0
 80118d0:	460b      	mov	r3, r1
 80118d2:	e9c4 2300 	strd	r2, r3, [r4]
 80118d6:	4630      	mov	r0, r6
 80118d8:	4639      	mov	r1, r7
 80118da:	f7ee fced 	bl	80002b8 <__aeabi_dsub>
 80118de:	a384      	add	r3, pc, #528	; (adr r3, 8011af0 <__ieee754_rem_pio2+0x2e8>)
 80118e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118e4:	f7ee fcea 	bl	80002bc <__adddf3>
 80118e8:	f04f 35ff 	mov.w	r5, #4294967295
 80118ec:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80118f0:	e7c6      	b.n	8011880 <__ieee754_rem_pio2+0x78>
 80118f2:	a381      	add	r3, pc, #516	; (adr r3, 8011af8 <__ieee754_rem_pio2+0x2f0>)
 80118f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118f8:	f7ee fce0 	bl	80002bc <__adddf3>
 80118fc:	a380      	add	r3, pc, #512	; (adr r3, 8011b00 <__ieee754_rem_pio2+0x2f8>)
 80118fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011902:	4606      	mov	r6, r0
 8011904:	460f      	mov	r7, r1
 8011906:	f7ee fcd9 	bl	80002bc <__adddf3>
 801190a:	4602      	mov	r2, r0
 801190c:	460b      	mov	r3, r1
 801190e:	e9c4 2300 	strd	r2, r3, [r4]
 8011912:	4630      	mov	r0, r6
 8011914:	4639      	mov	r1, r7
 8011916:	f7ee fccf 	bl	80002b8 <__aeabi_dsub>
 801191a:	a379      	add	r3, pc, #484	; (adr r3, 8011b00 <__ieee754_rem_pio2+0x2f8>)
 801191c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011920:	e7e0      	b.n	80118e4 <__ieee754_rem_pio2+0xdc>
 8011922:	4b82      	ldr	r3, [pc, #520]	; (8011b2c <__ieee754_rem_pio2+0x324>)
 8011924:	4598      	cmp	r8, r3
 8011926:	f300 80d0 	bgt.w	8011aca <__ieee754_rem_pio2+0x2c2>
 801192a:	f000 fe23 	bl	8012574 <fabs>
 801192e:	ec57 6b10 	vmov	r6, r7, d0
 8011932:	ee10 0a10 	vmov	r0, s0
 8011936:	a374      	add	r3, pc, #464	; (adr r3, 8011b08 <__ieee754_rem_pio2+0x300>)
 8011938:	e9d3 2300 	ldrd	r2, r3, [r3]
 801193c:	4639      	mov	r1, r7
 801193e:	f7ee fe73 	bl	8000628 <__aeabi_dmul>
 8011942:	2200      	movs	r2, #0
 8011944:	4b7a      	ldr	r3, [pc, #488]	; (8011b30 <__ieee754_rem_pio2+0x328>)
 8011946:	f7ee fcb9 	bl	80002bc <__adddf3>
 801194a:	f7ef f91d 	bl	8000b88 <__aeabi_d2iz>
 801194e:	4605      	mov	r5, r0
 8011950:	f7ee fe00 	bl	8000554 <__aeabi_i2d>
 8011954:	a364      	add	r3, pc, #400	; (adr r3, 8011ae8 <__ieee754_rem_pio2+0x2e0>)
 8011956:	e9d3 2300 	ldrd	r2, r3, [r3]
 801195a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801195e:	f7ee fe63 	bl	8000628 <__aeabi_dmul>
 8011962:	4602      	mov	r2, r0
 8011964:	460b      	mov	r3, r1
 8011966:	4630      	mov	r0, r6
 8011968:	4639      	mov	r1, r7
 801196a:	f7ee fca5 	bl	80002b8 <__aeabi_dsub>
 801196e:	a360      	add	r3, pc, #384	; (adr r3, 8011af0 <__ieee754_rem_pio2+0x2e8>)
 8011970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011974:	4682      	mov	sl, r0
 8011976:	468b      	mov	fp, r1
 8011978:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801197c:	f7ee fe54 	bl	8000628 <__aeabi_dmul>
 8011980:	2d1f      	cmp	r5, #31
 8011982:	4606      	mov	r6, r0
 8011984:	460f      	mov	r7, r1
 8011986:	dc0c      	bgt.n	80119a2 <__ieee754_rem_pio2+0x19a>
 8011988:	1e6a      	subs	r2, r5, #1
 801198a:	4b6a      	ldr	r3, [pc, #424]	; (8011b34 <__ieee754_rem_pio2+0x32c>)
 801198c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011990:	4543      	cmp	r3, r8
 8011992:	d006      	beq.n	80119a2 <__ieee754_rem_pio2+0x19a>
 8011994:	4632      	mov	r2, r6
 8011996:	463b      	mov	r3, r7
 8011998:	4650      	mov	r0, sl
 801199a:	4659      	mov	r1, fp
 801199c:	f7ee fc8c 	bl	80002b8 <__aeabi_dsub>
 80119a0:	e00e      	b.n	80119c0 <__ieee754_rem_pio2+0x1b8>
 80119a2:	4632      	mov	r2, r6
 80119a4:	463b      	mov	r3, r7
 80119a6:	4650      	mov	r0, sl
 80119a8:	4659      	mov	r1, fp
 80119aa:	f7ee fc85 	bl	80002b8 <__aeabi_dsub>
 80119ae:	ea4f 5328 	mov.w	r3, r8, asr #20
 80119b2:	9305      	str	r3, [sp, #20]
 80119b4:	9a05      	ldr	r2, [sp, #20]
 80119b6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80119ba:	1ad3      	subs	r3, r2, r3
 80119bc:	2b10      	cmp	r3, #16
 80119be:	dc02      	bgt.n	80119c6 <__ieee754_rem_pio2+0x1be>
 80119c0:	e9c4 0100 	strd	r0, r1, [r4]
 80119c4:	e039      	b.n	8011a3a <__ieee754_rem_pio2+0x232>
 80119c6:	a34c      	add	r3, pc, #304	; (adr r3, 8011af8 <__ieee754_rem_pio2+0x2f0>)
 80119c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80119d0:	f7ee fe2a 	bl	8000628 <__aeabi_dmul>
 80119d4:	4606      	mov	r6, r0
 80119d6:	460f      	mov	r7, r1
 80119d8:	4602      	mov	r2, r0
 80119da:	460b      	mov	r3, r1
 80119dc:	4650      	mov	r0, sl
 80119de:	4659      	mov	r1, fp
 80119e0:	f7ee fc6a 	bl	80002b8 <__aeabi_dsub>
 80119e4:	4602      	mov	r2, r0
 80119e6:	460b      	mov	r3, r1
 80119e8:	4680      	mov	r8, r0
 80119ea:	4689      	mov	r9, r1
 80119ec:	4650      	mov	r0, sl
 80119ee:	4659      	mov	r1, fp
 80119f0:	f7ee fc62 	bl	80002b8 <__aeabi_dsub>
 80119f4:	4632      	mov	r2, r6
 80119f6:	463b      	mov	r3, r7
 80119f8:	f7ee fc5e 	bl	80002b8 <__aeabi_dsub>
 80119fc:	a340      	add	r3, pc, #256	; (adr r3, 8011b00 <__ieee754_rem_pio2+0x2f8>)
 80119fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a02:	4606      	mov	r6, r0
 8011a04:	460f      	mov	r7, r1
 8011a06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011a0a:	f7ee fe0d 	bl	8000628 <__aeabi_dmul>
 8011a0e:	4632      	mov	r2, r6
 8011a10:	463b      	mov	r3, r7
 8011a12:	f7ee fc51 	bl	80002b8 <__aeabi_dsub>
 8011a16:	4602      	mov	r2, r0
 8011a18:	460b      	mov	r3, r1
 8011a1a:	4606      	mov	r6, r0
 8011a1c:	460f      	mov	r7, r1
 8011a1e:	4640      	mov	r0, r8
 8011a20:	4649      	mov	r1, r9
 8011a22:	f7ee fc49 	bl	80002b8 <__aeabi_dsub>
 8011a26:	9a05      	ldr	r2, [sp, #20]
 8011a28:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011a2c:	1ad3      	subs	r3, r2, r3
 8011a2e:	2b31      	cmp	r3, #49	; 0x31
 8011a30:	dc20      	bgt.n	8011a74 <__ieee754_rem_pio2+0x26c>
 8011a32:	e9c4 0100 	strd	r0, r1, [r4]
 8011a36:	46c2      	mov	sl, r8
 8011a38:	46cb      	mov	fp, r9
 8011a3a:	e9d4 8900 	ldrd	r8, r9, [r4]
 8011a3e:	4650      	mov	r0, sl
 8011a40:	4642      	mov	r2, r8
 8011a42:	464b      	mov	r3, r9
 8011a44:	4659      	mov	r1, fp
 8011a46:	f7ee fc37 	bl	80002b8 <__aeabi_dsub>
 8011a4a:	463b      	mov	r3, r7
 8011a4c:	4632      	mov	r2, r6
 8011a4e:	f7ee fc33 	bl	80002b8 <__aeabi_dsub>
 8011a52:	9b04      	ldr	r3, [sp, #16]
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011a5a:	f6bf af11 	bge.w	8011880 <__ieee754_rem_pio2+0x78>
 8011a5e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8011a62:	6063      	str	r3, [r4, #4]
 8011a64:	f8c4 8000 	str.w	r8, [r4]
 8011a68:	60a0      	str	r0, [r4, #8]
 8011a6a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011a6e:	60e3      	str	r3, [r4, #12]
 8011a70:	426d      	negs	r5, r5
 8011a72:	e705      	b.n	8011880 <__ieee754_rem_pio2+0x78>
 8011a74:	a326      	add	r3, pc, #152	; (adr r3, 8011b10 <__ieee754_rem_pio2+0x308>)
 8011a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011a7e:	f7ee fdd3 	bl	8000628 <__aeabi_dmul>
 8011a82:	4606      	mov	r6, r0
 8011a84:	460f      	mov	r7, r1
 8011a86:	4602      	mov	r2, r0
 8011a88:	460b      	mov	r3, r1
 8011a8a:	4640      	mov	r0, r8
 8011a8c:	4649      	mov	r1, r9
 8011a8e:	f7ee fc13 	bl	80002b8 <__aeabi_dsub>
 8011a92:	4602      	mov	r2, r0
 8011a94:	460b      	mov	r3, r1
 8011a96:	4682      	mov	sl, r0
 8011a98:	468b      	mov	fp, r1
 8011a9a:	4640      	mov	r0, r8
 8011a9c:	4649      	mov	r1, r9
 8011a9e:	f7ee fc0b 	bl	80002b8 <__aeabi_dsub>
 8011aa2:	4632      	mov	r2, r6
 8011aa4:	463b      	mov	r3, r7
 8011aa6:	f7ee fc07 	bl	80002b8 <__aeabi_dsub>
 8011aaa:	a31b      	add	r3, pc, #108	; (adr r3, 8011b18 <__ieee754_rem_pio2+0x310>)
 8011aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ab0:	4606      	mov	r6, r0
 8011ab2:	460f      	mov	r7, r1
 8011ab4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011ab8:	f7ee fdb6 	bl	8000628 <__aeabi_dmul>
 8011abc:	4632      	mov	r2, r6
 8011abe:	463b      	mov	r3, r7
 8011ac0:	f7ee fbfa 	bl	80002b8 <__aeabi_dsub>
 8011ac4:	4606      	mov	r6, r0
 8011ac6:	460f      	mov	r7, r1
 8011ac8:	e764      	b.n	8011994 <__ieee754_rem_pio2+0x18c>
 8011aca:	4b1b      	ldr	r3, [pc, #108]	; (8011b38 <__ieee754_rem_pio2+0x330>)
 8011acc:	4598      	cmp	r8, r3
 8011ace:	dd35      	ble.n	8011b3c <__ieee754_rem_pio2+0x334>
 8011ad0:	ee10 2a10 	vmov	r2, s0
 8011ad4:	463b      	mov	r3, r7
 8011ad6:	4630      	mov	r0, r6
 8011ad8:	4639      	mov	r1, r7
 8011ada:	f7ee fbed 	bl	80002b8 <__aeabi_dsub>
 8011ade:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011ae2:	e9c4 0100 	strd	r0, r1, [r4]
 8011ae6:	e6a1      	b.n	801182c <__ieee754_rem_pio2+0x24>
 8011ae8:	54400000 	.word	0x54400000
 8011aec:	3ff921fb 	.word	0x3ff921fb
 8011af0:	1a626331 	.word	0x1a626331
 8011af4:	3dd0b461 	.word	0x3dd0b461
 8011af8:	1a600000 	.word	0x1a600000
 8011afc:	3dd0b461 	.word	0x3dd0b461
 8011b00:	2e037073 	.word	0x2e037073
 8011b04:	3ba3198a 	.word	0x3ba3198a
 8011b08:	6dc9c883 	.word	0x6dc9c883
 8011b0c:	3fe45f30 	.word	0x3fe45f30
 8011b10:	2e000000 	.word	0x2e000000
 8011b14:	3ba3198a 	.word	0x3ba3198a
 8011b18:	252049c1 	.word	0x252049c1
 8011b1c:	397b839a 	.word	0x397b839a
 8011b20:	3fe921fb 	.word	0x3fe921fb
 8011b24:	4002d97b 	.word	0x4002d97b
 8011b28:	3ff921fb 	.word	0x3ff921fb
 8011b2c:	413921fb 	.word	0x413921fb
 8011b30:	3fe00000 	.word	0x3fe00000
 8011b34:	08017b4c 	.word	0x08017b4c
 8011b38:	7fefffff 	.word	0x7fefffff
 8011b3c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8011b40:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8011b44:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8011b48:	4630      	mov	r0, r6
 8011b4a:	460f      	mov	r7, r1
 8011b4c:	f7ef f81c 	bl	8000b88 <__aeabi_d2iz>
 8011b50:	f7ee fd00 	bl	8000554 <__aeabi_i2d>
 8011b54:	4602      	mov	r2, r0
 8011b56:	460b      	mov	r3, r1
 8011b58:	4630      	mov	r0, r6
 8011b5a:	4639      	mov	r1, r7
 8011b5c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011b60:	f7ee fbaa 	bl	80002b8 <__aeabi_dsub>
 8011b64:	2200      	movs	r2, #0
 8011b66:	4b1f      	ldr	r3, [pc, #124]	; (8011be4 <__ieee754_rem_pio2+0x3dc>)
 8011b68:	f7ee fd5e 	bl	8000628 <__aeabi_dmul>
 8011b6c:	460f      	mov	r7, r1
 8011b6e:	4606      	mov	r6, r0
 8011b70:	f7ef f80a 	bl	8000b88 <__aeabi_d2iz>
 8011b74:	f7ee fcee 	bl	8000554 <__aeabi_i2d>
 8011b78:	4602      	mov	r2, r0
 8011b7a:	460b      	mov	r3, r1
 8011b7c:	4630      	mov	r0, r6
 8011b7e:	4639      	mov	r1, r7
 8011b80:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011b84:	f7ee fb98 	bl	80002b8 <__aeabi_dsub>
 8011b88:	2200      	movs	r2, #0
 8011b8a:	4b16      	ldr	r3, [pc, #88]	; (8011be4 <__ieee754_rem_pio2+0x3dc>)
 8011b8c:	f7ee fd4c 	bl	8000628 <__aeabi_dmul>
 8011b90:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8011b94:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8011b98:	f04f 0803 	mov.w	r8, #3
 8011b9c:	2600      	movs	r6, #0
 8011b9e:	2700      	movs	r7, #0
 8011ba0:	4632      	mov	r2, r6
 8011ba2:	463b      	mov	r3, r7
 8011ba4:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8011ba8:	f108 3aff 	add.w	sl, r8, #4294967295
 8011bac:	f7ee ffa4 	bl	8000af8 <__aeabi_dcmpeq>
 8011bb0:	b9b0      	cbnz	r0, 8011be0 <__ieee754_rem_pio2+0x3d8>
 8011bb2:	4b0d      	ldr	r3, [pc, #52]	; (8011be8 <__ieee754_rem_pio2+0x3e0>)
 8011bb4:	9301      	str	r3, [sp, #4]
 8011bb6:	2302      	movs	r3, #2
 8011bb8:	9300      	str	r3, [sp, #0]
 8011bba:	462a      	mov	r2, r5
 8011bbc:	4643      	mov	r3, r8
 8011bbe:	4621      	mov	r1, r4
 8011bc0:	a806      	add	r0, sp, #24
 8011bc2:	f000 f8dd 	bl	8011d80 <__kernel_rem_pio2>
 8011bc6:	9b04      	ldr	r3, [sp, #16]
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	4605      	mov	r5, r0
 8011bcc:	f6bf ae58 	bge.w	8011880 <__ieee754_rem_pio2+0x78>
 8011bd0:	6863      	ldr	r3, [r4, #4]
 8011bd2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011bd6:	6063      	str	r3, [r4, #4]
 8011bd8:	68e3      	ldr	r3, [r4, #12]
 8011bda:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011bde:	e746      	b.n	8011a6e <__ieee754_rem_pio2+0x266>
 8011be0:	46d0      	mov	r8, sl
 8011be2:	e7dd      	b.n	8011ba0 <__ieee754_rem_pio2+0x398>
 8011be4:	41700000 	.word	0x41700000
 8011be8:	08017bcc 	.word	0x08017bcc
 8011bec:	00000000 	.word	0x00000000

08011bf0 <__kernel_cos>:
 8011bf0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011bf4:	ec59 8b10 	vmov	r8, r9, d0
 8011bf8:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8011bfc:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8011c00:	ed2d 8b02 	vpush	{d8}
 8011c04:	eeb0 8a41 	vmov.f32	s16, s2
 8011c08:	eef0 8a61 	vmov.f32	s17, s3
 8011c0c:	da07      	bge.n	8011c1e <__kernel_cos+0x2e>
 8011c0e:	ee10 0a10 	vmov	r0, s0
 8011c12:	4649      	mov	r1, r9
 8011c14:	f7ee ffb8 	bl	8000b88 <__aeabi_d2iz>
 8011c18:	2800      	cmp	r0, #0
 8011c1a:	f000 8089 	beq.w	8011d30 <__kernel_cos+0x140>
 8011c1e:	4642      	mov	r2, r8
 8011c20:	464b      	mov	r3, r9
 8011c22:	4640      	mov	r0, r8
 8011c24:	4649      	mov	r1, r9
 8011c26:	f7ee fcff 	bl	8000628 <__aeabi_dmul>
 8011c2a:	2200      	movs	r2, #0
 8011c2c:	4b4e      	ldr	r3, [pc, #312]	; (8011d68 <__kernel_cos+0x178>)
 8011c2e:	4604      	mov	r4, r0
 8011c30:	460d      	mov	r5, r1
 8011c32:	f7ee fcf9 	bl	8000628 <__aeabi_dmul>
 8011c36:	a340      	add	r3, pc, #256	; (adr r3, 8011d38 <__kernel_cos+0x148>)
 8011c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c3c:	4682      	mov	sl, r0
 8011c3e:	468b      	mov	fp, r1
 8011c40:	4620      	mov	r0, r4
 8011c42:	4629      	mov	r1, r5
 8011c44:	f7ee fcf0 	bl	8000628 <__aeabi_dmul>
 8011c48:	a33d      	add	r3, pc, #244	; (adr r3, 8011d40 <__kernel_cos+0x150>)
 8011c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c4e:	f7ee fb35 	bl	80002bc <__adddf3>
 8011c52:	4622      	mov	r2, r4
 8011c54:	462b      	mov	r3, r5
 8011c56:	f7ee fce7 	bl	8000628 <__aeabi_dmul>
 8011c5a:	a33b      	add	r3, pc, #236	; (adr r3, 8011d48 <__kernel_cos+0x158>)
 8011c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c60:	f7ee fb2a 	bl	80002b8 <__aeabi_dsub>
 8011c64:	4622      	mov	r2, r4
 8011c66:	462b      	mov	r3, r5
 8011c68:	f7ee fcde 	bl	8000628 <__aeabi_dmul>
 8011c6c:	a338      	add	r3, pc, #224	; (adr r3, 8011d50 <__kernel_cos+0x160>)
 8011c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c72:	f7ee fb23 	bl	80002bc <__adddf3>
 8011c76:	4622      	mov	r2, r4
 8011c78:	462b      	mov	r3, r5
 8011c7a:	f7ee fcd5 	bl	8000628 <__aeabi_dmul>
 8011c7e:	a336      	add	r3, pc, #216	; (adr r3, 8011d58 <__kernel_cos+0x168>)
 8011c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c84:	f7ee fb18 	bl	80002b8 <__aeabi_dsub>
 8011c88:	4622      	mov	r2, r4
 8011c8a:	462b      	mov	r3, r5
 8011c8c:	f7ee fccc 	bl	8000628 <__aeabi_dmul>
 8011c90:	a333      	add	r3, pc, #204	; (adr r3, 8011d60 <__kernel_cos+0x170>)
 8011c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c96:	f7ee fb11 	bl	80002bc <__adddf3>
 8011c9a:	4622      	mov	r2, r4
 8011c9c:	462b      	mov	r3, r5
 8011c9e:	f7ee fcc3 	bl	8000628 <__aeabi_dmul>
 8011ca2:	4622      	mov	r2, r4
 8011ca4:	462b      	mov	r3, r5
 8011ca6:	f7ee fcbf 	bl	8000628 <__aeabi_dmul>
 8011caa:	ec53 2b18 	vmov	r2, r3, d8
 8011cae:	4604      	mov	r4, r0
 8011cb0:	460d      	mov	r5, r1
 8011cb2:	4640      	mov	r0, r8
 8011cb4:	4649      	mov	r1, r9
 8011cb6:	f7ee fcb7 	bl	8000628 <__aeabi_dmul>
 8011cba:	460b      	mov	r3, r1
 8011cbc:	4602      	mov	r2, r0
 8011cbe:	4629      	mov	r1, r5
 8011cc0:	4620      	mov	r0, r4
 8011cc2:	f7ee faf9 	bl	80002b8 <__aeabi_dsub>
 8011cc6:	4b29      	ldr	r3, [pc, #164]	; (8011d6c <__kernel_cos+0x17c>)
 8011cc8:	429e      	cmp	r6, r3
 8011cca:	4680      	mov	r8, r0
 8011ccc:	4689      	mov	r9, r1
 8011cce:	dc11      	bgt.n	8011cf4 <__kernel_cos+0x104>
 8011cd0:	4602      	mov	r2, r0
 8011cd2:	460b      	mov	r3, r1
 8011cd4:	4650      	mov	r0, sl
 8011cd6:	4659      	mov	r1, fp
 8011cd8:	f7ee faee 	bl	80002b8 <__aeabi_dsub>
 8011cdc:	460b      	mov	r3, r1
 8011cde:	4924      	ldr	r1, [pc, #144]	; (8011d70 <__kernel_cos+0x180>)
 8011ce0:	4602      	mov	r2, r0
 8011ce2:	2000      	movs	r0, #0
 8011ce4:	f7ee fae8 	bl	80002b8 <__aeabi_dsub>
 8011ce8:	ecbd 8b02 	vpop	{d8}
 8011cec:	ec41 0b10 	vmov	d0, r0, r1
 8011cf0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011cf4:	4b1f      	ldr	r3, [pc, #124]	; (8011d74 <__kernel_cos+0x184>)
 8011cf6:	491e      	ldr	r1, [pc, #120]	; (8011d70 <__kernel_cos+0x180>)
 8011cf8:	429e      	cmp	r6, r3
 8011cfa:	bfcc      	ite	gt
 8011cfc:	4d1e      	ldrgt	r5, [pc, #120]	; (8011d78 <__kernel_cos+0x188>)
 8011cfe:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8011d02:	2400      	movs	r4, #0
 8011d04:	4622      	mov	r2, r4
 8011d06:	462b      	mov	r3, r5
 8011d08:	2000      	movs	r0, #0
 8011d0a:	f7ee fad5 	bl	80002b8 <__aeabi_dsub>
 8011d0e:	4622      	mov	r2, r4
 8011d10:	4606      	mov	r6, r0
 8011d12:	460f      	mov	r7, r1
 8011d14:	462b      	mov	r3, r5
 8011d16:	4650      	mov	r0, sl
 8011d18:	4659      	mov	r1, fp
 8011d1a:	f7ee facd 	bl	80002b8 <__aeabi_dsub>
 8011d1e:	4642      	mov	r2, r8
 8011d20:	464b      	mov	r3, r9
 8011d22:	f7ee fac9 	bl	80002b8 <__aeabi_dsub>
 8011d26:	4602      	mov	r2, r0
 8011d28:	460b      	mov	r3, r1
 8011d2a:	4630      	mov	r0, r6
 8011d2c:	4639      	mov	r1, r7
 8011d2e:	e7d9      	b.n	8011ce4 <__kernel_cos+0xf4>
 8011d30:	2000      	movs	r0, #0
 8011d32:	490f      	ldr	r1, [pc, #60]	; (8011d70 <__kernel_cos+0x180>)
 8011d34:	e7d8      	b.n	8011ce8 <__kernel_cos+0xf8>
 8011d36:	bf00      	nop
 8011d38:	be8838d4 	.word	0xbe8838d4
 8011d3c:	bda8fae9 	.word	0xbda8fae9
 8011d40:	bdb4b1c4 	.word	0xbdb4b1c4
 8011d44:	3e21ee9e 	.word	0x3e21ee9e
 8011d48:	809c52ad 	.word	0x809c52ad
 8011d4c:	3e927e4f 	.word	0x3e927e4f
 8011d50:	19cb1590 	.word	0x19cb1590
 8011d54:	3efa01a0 	.word	0x3efa01a0
 8011d58:	16c15177 	.word	0x16c15177
 8011d5c:	3f56c16c 	.word	0x3f56c16c
 8011d60:	5555554c 	.word	0x5555554c
 8011d64:	3fa55555 	.word	0x3fa55555
 8011d68:	3fe00000 	.word	0x3fe00000
 8011d6c:	3fd33332 	.word	0x3fd33332
 8011d70:	3ff00000 	.word	0x3ff00000
 8011d74:	3fe90000 	.word	0x3fe90000
 8011d78:	3fd20000 	.word	0x3fd20000
 8011d7c:	00000000 	.word	0x00000000

08011d80 <__kernel_rem_pio2>:
 8011d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d84:	ed2d 8b02 	vpush	{d8}
 8011d88:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8011d8c:	1ed4      	subs	r4, r2, #3
 8011d8e:	9308      	str	r3, [sp, #32]
 8011d90:	9101      	str	r1, [sp, #4]
 8011d92:	4bc5      	ldr	r3, [pc, #788]	; (80120a8 <__kernel_rem_pio2+0x328>)
 8011d94:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8011d96:	9009      	str	r0, [sp, #36]	; 0x24
 8011d98:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011d9c:	9304      	str	r3, [sp, #16]
 8011d9e:	9b08      	ldr	r3, [sp, #32]
 8011da0:	3b01      	subs	r3, #1
 8011da2:	9307      	str	r3, [sp, #28]
 8011da4:	2318      	movs	r3, #24
 8011da6:	fb94 f4f3 	sdiv	r4, r4, r3
 8011daa:	f06f 0317 	mvn.w	r3, #23
 8011dae:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8011db2:	fb04 3303 	mla	r3, r4, r3, r3
 8011db6:	eb03 0a02 	add.w	sl, r3, r2
 8011dba:	9b04      	ldr	r3, [sp, #16]
 8011dbc:	9a07      	ldr	r2, [sp, #28]
 8011dbe:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8012098 <__kernel_rem_pio2+0x318>
 8011dc2:	eb03 0802 	add.w	r8, r3, r2
 8011dc6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8011dc8:	1aa7      	subs	r7, r4, r2
 8011dca:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8011dce:	ae22      	add	r6, sp, #136	; 0x88
 8011dd0:	2500      	movs	r5, #0
 8011dd2:	4545      	cmp	r5, r8
 8011dd4:	dd13      	ble.n	8011dfe <__kernel_rem_pio2+0x7e>
 8011dd6:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8012098 <__kernel_rem_pio2+0x318>
 8011dda:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8011dde:	2600      	movs	r6, #0
 8011de0:	9b04      	ldr	r3, [sp, #16]
 8011de2:	429e      	cmp	r6, r3
 8011de4:	dc32      	bgt.n	8011e4c <__kernel_rem_pio2+0xcc>
 8011de6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011de8:	9302      	str	r3, [sp, #8]
 8011dea:	9b08      	ldr	r3, [sp, #32]
 8011dec:	199d      	adds	r5, r3, r6
 8011dee:	ab22      	add	r3, sp, #136	; 0x88
 8011df0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8011df4:	9306      	str	r3, [sp, #24]
 8011df6:	ec59 8b18 	vmov	r8, r9, d8
 8011dfa:	2700      	movs	r7, #0
 8011dfc:	e01f      	b.n	8011e3e <__kernel_rem_pio2+0xbe>
 8011dfe:	42ef      	cmn	r7, r5
 8011e00:	d407      	bmi.n	8011e12 <__kernel_rem_pio2+0x92>
 8011e02:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8011e06:	f7ee fba5 	bl	8000554 <__aeabi_i2d>
 8011e0a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8011e0e:	3501      	adds	r5, #1
 8011e10:	e7df      	b.n	8011dd2 <__kernel_rem_pio2+0x52>
 8011e12:	ec51 0b18 	vmov	r0, r1, d8
 8011e16:	e7f8      	b.n	8011e0a <__kernel_rem_pio2+0x8a>
 8011e18:	9906      	ldr	r1, [sp, #24]
 8011e1a:	9d02      	ldr	r5, [sp, #8]
 8011e1c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8011e20:	9106      	str	r1, [sp, #24]
 8011e22:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8011e26:	9502      	str	r5, [sp, #8]
 8011e28:	f7ee fbfe 	bl	8000628 <__aeabi_dmul>
 8011e2c:	4602      	mov	r2, r0
 8011e2e:	460b      	mov	r3, r1
 8011e30:	4640      	mov	r0, r8
 8011e32:	4649      	mov	r1, r9
 8011e34:	f7ee fa42 	bl	80002bc <__adddf3>
 8011e38:	3701      	adds	r7, #1
 8011e3a:	4680      	mov	r8, r0
 8011e3c:	4689      	mov	r9, r1
 8011e3e:	9b07      	ldr	r3, [sp, #28]
 8011e40:	429f      	cmp	r7, r3
 8011e42:	dde9      	ble.n	8011e18 <__kernel_rem_pio2+0x98>
 8011e44:	e8eb 8902 	strd	r8, r9, [fp], #8
 8011e48:	3601      	adds	r6, #1
 8011e4a:	e7c9      	b.n	8011de0 <__kernel_rem_pio2+0x60>
 8011e4c:	9b04      	ldr	r3, [sp, #16]
 8011e4e:	aa0e      	add	r2, sp, #56	; 0x38
 8011e50:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011e54:	930c      	str	r3, [sp, #48]	; 0x30
 8011e56:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8011e58:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8011e5c:	9c04      	ldr	r4, [sp, #16]
 8011e5e:	930b      	str	r3, [sp, #44]	; 0x2c
 8011e60:	ab9a      	add	r3, sp, #616	; 0x268
 8011e62:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8011e66:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011e6a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011e6e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8011e72:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8011e76:	ab9a      	add	r3, sp, #616	; 0x268
 8011e78:	445b      	add	r3, fp
 8011e7a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8011e7e:	2500      	movs	r5, #0
 8011e80:	1b63      	subs	r3, r4, r5
 8011e82:	2b00      	cmp	r3, #0
 8011e84:	dc78      	bgt.n	8011f78 <__kernel_rem_pio2+0x1f8>
 8011e86:	4650      	mov	r0, sl
 8011e88:	ec49 8b10 	vmov	d0, r8, r9
 8011e8c:	f000 fc00 	bl	8012690 <scalbn>
 8011e90:	ec57 6b10 	vmov	r6, r7, d0
 8011e94:	2200      	movs	r2, #0
 8011e96:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8011e9a:	ee10 0a10 	vmov	r0, s0
 8011e9e:	4639      	mov	r1, r7
 8011ea0:	f7ee fbc2 	bl	8000628 <__aeabi_dmul>
 8011ea4:	ec41 0b10 	vmov	d0, r0, r1
 8011ea8:	f000 fb6e 	bl	8012588 <floor>
 8011eac:	2200      	movs	r2, #0
 8011eae:	ec51 0b10 	vmov	r0, r1, d0
 8011eb2:	4b7e      	ldr	r3, [pc, #504]	; (80120ac <__kernel_rem_pio2+0x32c>)
 8011eb4:	f7ee fbb8 	bl	8000628 <__aeabi_dmul>
 8011eb8:	4602      	mov	r2, r0
 8011eba:	460b      	mov	r3, r1
 8011ebc:	4630      	mov	r0, r6
 8011ebe:	4639      	mov	r1, r7
 8011ec0:	f7ee f9fa 	bl	80002b8 <__aeabi_dsub>
 8011ec4:	460f      	mov	r7, r1
 8011ec6:	4606      	mov	r6, r0
 8011ec8:	f7ee fe5e 	bl	8000b88 <__aeabi_d2iz>
 8011ecc:	9006      	str	r0, [sp, #24]
 8011ece:	f7ee fb41 	bl	8000554 <__aeabi_i2d>
 8011ed2:	4602      	mov	r2, r0
 8011ed4:	460b      	mov	r3, r1
 8011ed6:	4630      	mov	r0, r6
 8011ed8:	4639      	mov	r1, r7
 8011eda:	f7ee f9ed 	bl	80002b8 <__aeabi_dsub>
 8011ede:	f1ba 0f00 	cmp.w	sl, #0
 8011ee2:	4606      	mov	r6, r0
 8011ee4:	460f      	mov	r7, r1
 8011ee6:	dd6c      	ble.n	8011fc2 <__kernel_rem_pio2+0x242>
 8011ee8:	1e62      	subs	r2, r4, #1
 8011eea:	ab0e      	add	r3, sp, #56	; 0x38
 8011eec:	f1ca 0118 	rsb	r1, sl, #24
 8011ef0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8011ef4:	9d06      	ldr	r5, [sp, #24]
 8011ef6:	fa40 f301 	asr.w	r3, r0, r1
 8011efa:	441d      	add	r5, r3
 8011efc:	408b      	lsls	r3, r1
 8011efe:	1ac0      	subs	r0, r0, r3
 8011f00:	ab0e      	add	r3, sp, #56	; 0x38
 8011f02:	9506      	str	r5, [sp, #24]
 8011f04:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8011f08:	f1ca 0317 	rsb	r3, sl, #23
 8011f0c:	fa40 f303 	asr.w	r3, r0, r3
 8011f10:	9302      	str	r3, [sp, #8]
 8011f12:	9b02      	ldr	r3, [sp, #8]
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	dd62      	ble.n	8011fde <__kernel_rem_pio2+0x25e>
 8011f18:	9b06      	ldr	r3, [sp, #24]
 8011f1a:	2200      	movs	r2, #0
 8011f1c:	3301      	adds	r3, #1
 8011f1e:	9306      	str	r3, [sp, #24]
 8011f20:	4615      	mov	r5, r2
 8011f22:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8011f26:	4294      	cmp	r4, r2
 8011f28:	f300 8095 	bgt.w	8012056 <__kernel_rem_pio2+0x2d6>
 8011f2c:	f1ba 0f00 	cmp.w	sl, #0
 8011f30:	dd07      	ble.n	8011f42 <__kernel_rem_pio2+0x1c2>
 8011f32:	f1ba 0f01 	cmp.w	sl, #1
 8011f36:	f000 80a2 	beq.w	801207e <__kernel_rem_pio2+0x2fe>
 8011f3a:	f1ba 0f02 	cmp.w	sl, #2
 8011f3e:	f000 80c1 	beq.w	80120c4 <__kernel_rem_pio2+0x344>
 8011f42:	9b02      	ldr	r3, [sp, #8]
 8011f44:	2b02      	cmp	r3, #2
 8011f46:	d14a      	bne.n	8011fde <__kernel_rem_pio2+0x25e>
 8011f48:	4632      	mov	r2, r6
 8011f4a:	463b      	mov	r3, r7
 8011f4c:	2000      	movs	r0, #0
 8011f4e:	4958      	ldr	r1, [pc, #352]	; (80120b0 <__kernel_rem_pio2+0x330>)
 8011f50:	f7ee f9b2 	bl	80002b8 <__aeabi_dsub>
 8011f54:	4606      	mov	r6, r0
 8011f56:	460f      	mov	r7, r1
 8011f58:	2d00      	cmp	r5, #0
 8011f5a:	d040      	beq.n	8011fde <__kernel_rem_pio2+0x25e>
 8011f5c:	4650      	mov	r0, sl
 8011f5e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 80120a0 <__kernel_rem_pio2+0x320>
 8011f62:	f000 fb95 	bl	8012690 <scalbn>
 8011f66:	4630      	mov	r0, r6
 8011f68:	4639      	mov	r1, r7
 8011f6a:	ec53 2b10 	vmov	r2, r3, d0
 8011f6e:	f7ee f9a3 	bl	80002b8 <__aeabi_dsub>
 8011f72:	4606      	mov	r6, r0
 8011f74:	460f      	mov	r7, r1
 8011f76:	e032      	b.n	8011fde <__kernel_rem_pio2+0x25e>
 8011f78:	2200      	movs	r2, #0
 8011f7a:	4b4e      	ldr	r3, [pc, #312]	; (80120b4 <__kernel_rem_pio2+0x334>)
 8011f7c:	4640      	mov	r0, r8
 8011f7e:	4649      	mov	r1, r9
 8011f80:	f7ee fb52 	bl	8000628 <__aeabi_dmul>
 8011f84:	f7ee fe00 	bl	8000b88 <__aeabi_d2iz>
 8011f88:	f7ee fae4 	bl	8000554 <__aeabi_i2d>
 8011f8c:	2200      	movs	r2, #0
 8011f8e:	4b4a      	ldr	r3, [pc, #296]	; (80120b8 <__kernel_rem_pio2+0x338>)
 8011f90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011f94:	f7ee fb48 	bl	8000628 <__aeabi_dmul>
 8011f98:	4602      	mov	r2, r0
 8011f9a:	460b      	mov	r3, r1
 8011f9c:	4640      	mov	r0, r8
 8011f9e:	4649      	mov	r1, r9
 8011fa0:	f7ee f98a 	bl	80002b8 <__aeabi_dsub>
 8011fa4:	f7ee fdf0 	bl	8000b88 <__aeabi_d2iz>
 8011fa8:	ab0e      	add	r3, sp, #56	; 0x38
 8011faa:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8011fae:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8011fb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011fb6:	f7ee f981 	bl	80002bc <__adddf3>
 8011fba:	3501      	adds	r5, #1
 8011fbc:	4680      	mov	r8, r0
 8011fbe:	4689      	mov	r9, r1
 8011fc0:	e75e      	b.n	8011e80 <__kernel_rem_pio2+0x100>
 8011fc2:	d105      	bne.n	8011fd0 <__kernel_rem_pio2+0x250>
 8011fc4:	1e63      	subs	r3, r4, #1
 8011fc6:	aa0e      	add	r2, sp, #56	; 0x38
 8011fc8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8011fcc:	15c3      	asrs	r3, r0, #23
 8011fce:	e79f      	b.n	8011f10 <__kernel_rem_pio2+0x190>
 8011fd0:	2200      	movs	r2, #0
 8011fd2:	4b3a      	ldr	r3, [pc, #232]	; (80120bc <__kernel_rem_pio2+0x33c>)
 8011fd4:	f7ee fdae 	bl	8000b34 <__aeabi_dcmpge>
 8011fd8:	2800      	cmp	r0, #0
 8011fda:	d139      	bne.n	8012050 <__kernel_rem_pio2+0x2d0>
 8011fdc:	9002      	str	r0, [sp, #8]
 8011fde:	2200      	movs	r2, #0
 8011fe0:	2300      	movs	r3, #0
 8011fe2:	4630      	mov	r0, r6
 8011fe4:	4639      	mov	r1, r7
 8011fe6:	f7ee fd87 	bl	8000af8 <__aeabi_dcmpeq>
 8011fea:	2800      	cmp	r0, #0
 8011fec:	f000 80c7 	beq.w	801217e <__kernel_rem_pio2+0x3fe>
 8011ff0:	1e65      	subs	r5, r4, #1
 8011ff2:	462b      	mov	r3, r5
 8011ff4:	2200      	movs	r2, #0
 8011ff6:	9904      	ldr	r1, [sp, #16]
 8011ff8:	428b      	cmp	r3, r1
 8011ffa:	da6a      	bge.n	80120d2 <__kernel_rem_pio2+0x352>
 8011ffc:	2a00      	cmp	r2, #0
 8011ffe:	f000 8088 	beq.w	8012112 <__kernel_rem_pio2+0x392>
 8012002:	ab0e      	add	r3, sp, #56	; 0x38
 8012004:	f1aa 0a18 	sub.w	sl, sl, #24
 8012008:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801200c:	2b00      	cmp	r3, #0
 801200e:	f000 80b4 	beq.w	801217a <__kernel_rem_pio2+0x3fa>
 8012012:	4650      	mov	r0, sl
 8012014:	ed9f 0b22 	vldr	d0, [pc, #136]	; 80120a0 <__kernel_rem_pio2+0x320>
 8012018:	f000 fb3a 	bl	8012690 <scalbn>
 801201c:	00ec      	lsls	r4, r5, #3
 801201e:	ab72      	add	r3, sp, #456	; 0x1c8
 8012020:	191e      	adds	r6, r3, r4
 8012022:	ec59 8b10 	vmov	r8, r9, d0
 8012026:	f106 0a08 	add.w	sl, r6, #8
 801202a:	462f      	mov	r7, r5
 801202c:	2f00      	cmp	r7, #0
 801202e:	f280 80df 	bge.w	80121f0 <__kernel_rem_pio2+0x470>
 8012032:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8012098 <__kernel_rem_pio2+0x318>
 8012036:	f04f 0a00 	mov.w	sl, #0
 801203a:	eba5 030a 	sub.w	r3, r5, sl
 801203e:	2b00      	cmp	r3, #0
 8012040:	f2c0 810a 	blt.w	8012258 <__kernel_rem_pio2+0x4d8>
 8012044:	f8df b078 	ldr.w	fp, [pc, #120]	; 80120c0 <__kernel_rem_pio2+0x340>
 8012048:	ec59 8b18 	vmov	r8, r9, d8
 801204c:	2700      	movs	r7, #0
 801204e:	e0f5      	b.n	801223c <__kernel_rem_pio2+0x4bc>
 8012050:	2302      	movs	r3, #2
 8012052:	9302      	str	r3, [sp, #8]
 8012054:	e760      	b.n	8011f18 <__kernel_rem_pio2+0x198>
 8012056:	ab0e      	add	r3, sp, #56	; 0x38
 8012058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801205c:	b94d      	cbnz	r5, 8012072 <__kernel_rem_pio2+0x2f2>
 801205e:	b12b      	cbz	r3, 801206c <__kernel_rem_pio2+0x2ec>
 8012060:	a80e      	add	r0, sp, #56	; 0x38
 8012062:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8012066:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801206a:	2301      	movs	r3, #1
 801206c:	3201      	adds	r2, #1
 801206e:	461d      	mov	r5, r3
 8012070:	e759      	b.n	8011f26 <__kernel_rem_pio2+0x1a6>
 8012072:	a80e      	add	r0, sp, #56	; 0x38
 8012074:	1acb      	subs	r3, r1, r3
 8012076:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801207a:	462b      	mov	r3, r5
 801207c:	e7f6      	b.n	801206c <__kernel_rem_pio2+0x2ec>
 801207e:	1e62      	subs	r2, r4, #1
 8012080:	ab0e      	add	r3, sp, #56	; 0x38
 8012082:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012086:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801208a:	a90e      	add	r1, sp, #56	; 0x38
 801208c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8012090:	e757      	b.n	8011f42 <__kernel_rem_pio2+0x1c2>
 8012092:	bf00      	nop
 8012094:	f3af 8000 	nop.w
	...
 80120a4:	3ff00000 	.word	0x3ff00000
 80120a8:	08017d18 	.word	0x08017d18
 80120ac:	40200000 	.word	0x40200000
 80120b0:	3ff00000 	.word	0x3ff00000
 80120b4:	3e700000 	.word	0x3e700000
 80120b8:	41700000 	.word	0x41700000
 80120bc:	3fe00000 	.word	0x3fe00000
 80120c0:	08017cd8 	.word	0x08017cd8
 80120c4:	1e62      	subs	r2, r4, #1
 80120c6:	ab0e      	add	r3, sp, #56	; 0x38
 80120c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80120cc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80120d0:	e7db      	b.n	801208a <__kernel_rem_pio2+0x30a>
 80120d2:	a90e      	add	r1, sp, #56	; 0x38
 80120d4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80120d8:	3b01      	subs	r3, #1
 80120da:	430a      	orrs	r2, r1
 80120dc:	e78b      	b.n	8011ff6 <__kernel_rem_pio2+0x276>
 80120de:	3301      	adds	r3, #1
 80120e0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80120e4:	2900      	cmp	r1, #0
 80120e6:	d0fa      	beq.n	80120de <__kernel_rem_pio2+0x35e>
 80120e8:	9a08      	ldr	r2, [sp, #32]
 80120ea:	4422      	add	r2, r4
 80120ec:	00d2      	lsls	r2, r2, #3
 80120ee:	a922      	add	r1, sp, #136	; 0x88
 80120f0:	18e3      	adds	r3, r4, r3
 80120f2:	9206      	str	r2, [sp, #24]
 80120f4:	440a      	add	r2, r1
 80120f6:	9302      	str	r3, [sp, #8]
 80120f8:	f10b 0108 	add.w	r1, fp, #8
 80120fc:	f102 0308 	add.w	r3, r2, #8
 8012100:	1c66      	adds	r6, r4, #1
 8012102:	910a      	str	r1, [sp, #40]	; 0x28
 8012104:	2500      	movs	r5, #0
 8012106:	930d      	str	r3, [sp, #52]	; 0x34
 8012108:	9b02      	ldr	r3, [sp, #8]
 801210a:	42b3      	cmp	r3, r6
 801210c:	da04      	bge.n	8012118 <__kernel_rem_pio2+0x398>
 801210e:	461c      	mov	r4, r3
 8012110:	e6a6      	b.n	8011e60 <__kernel_rem_pio2+0xe0>
 8012112:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012114:	2301      	movs	r3, #1
 8012116:	e7e3      	b.n	80120e0 <__kernel_rem_pio2+0x360>
 8012118:	9b06      	ldr	r3, [sp, #24]
 801211a:	18ef      	adds	r7, r5, r3
 801211c:	ab22      	add	r3, sp, #136	; 0x88
 801211e:	441f      	add	r7, r3
 8012120:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012122:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8012126:	f7ee fa15 	bl	8000554 <__aeabi_i2d>
 801212a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801212c:	461c      	mov	r4, r3
 801212e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012130:	e9c7 0100 	strd	r0, r1, [r7]
 8012134:	eb03 0b05 	add.w	fp, r3, r5
 8012138:	2700      	movs	r7, #0
 801213a:	f04f 0800 	mov.w	r8, #0
 801213e:	f04f 0900 	mov.w	r9, #0
 8012142:	9b07      	ldr	r3, [sp, #28]
 8012144:	429f      	cmp	r7, r3
 8012146:	dd08      	ble.n	801215a <__kernel_rem_pio2+0x3da>
 8012148:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801214a:	aa72      	add	r2, sp, #456	; 0x1c8
 801214c:	18eb      	adds	r3, r5, r3
 801214e:	4413      	add	r3, r2
 8012150:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8012154:	3601      	adds	r6, #1
 8012156:	3508      	adds	r5, #8
 8012158:	e7d6      	b.n	8012108 <__kernel_rem_pio2+0x388>
 801215a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801215e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8012162:	f7ee fa61 	bl	8000628 <__aeabi_dmul>
 8012166:	4602      	mov	r2, r0
 8012168:	460b      	mov	r3, r1
 801216a:	4640      	mov	r0, r8
 801216c:	4649      	mov	r1, r9
 801216e:	f7ee f8a5 	bl	80002bc <__adddf3>
 8012172:	3701      	adds	r7, #1
 8012174:	4680      	mov	r8, r0
 8012176:	4689      	mov	r9, r1
 8012178:	e7e3      	b.n	8012142 <__kernel_rem_pio2+0x3c2>
 801217a:	3d01      	subs	r5, #1
 801217c:	e741      	b.n	8012002 <__kernel_rem_pio2+0x282>
 801217e:	f1ca 0000 	rsb	r0, sl, #0
 8012182:	ec47 6b10 	vmov	d0, r6, r7
 8012186:	f000 fa83 	bl	8012690 <scalbn>
 801218a:	ec57 6b10 	vmov	r6, r7, d0
 801218e:	2200      	movs	r2, #0
 8012190:	4b99      	ldr	r3, [pc, #612]	; (80123f8 <__kernel_rem_pio2+0x678>)
 8012192:	ee10 0a10 	vmov	r0, s0
 8012196:	4639      	mov	r1, r7
 8012198:	f7ee fccc 	bl	8000b34 <__aeabi_dcmpge>
 801219c:	b1f8      	cbz	r0, 80121de <__kernel_rem_pio2+0x45e>
 801219e:	2200      	movs	r2, #0
 80121a0:	4b96      	ldr	r3, [pc, #600]	; (80123fc <__kernel_rem_pio2+0x67c>)
 80121a2:	4630      	mov	r0, r6
 80121a4:	4639      	mov	r1, r7
 80121a6:	f7ee fa3f 	bl	8000628 <__aeabi_dmul>
 80121aa:	f7ee fced 	bl	8000b88 <__aeabi_d2iz>
 80121ae:	4680      	mov	r8, r0
 80121b0:	f7ee f9d0 	bl	8000554 <__aeabi_i2d>
 80121b4:	2200      	movs	r2, #0
 80121b6:	4b90      	ldr	r3, [pc, #576]	; (80123f8 <__kernel_rem_pio2+0x678>)
 80121b8:	f7ee fa36 	bl	8000628 <__aeabi_dmul>
 80121bc:	460b      	mov	r3, r1
 80121be:	4602      	mov	r2, r0
 80121c0:	4639      	mov	r1, r7
 80121c2:	4630      	mov	r0, r6
 80121c4:	f7ee f878 	bl	80002b8 <__aeabi_dsub>
 80121c8:	f7ee fcde 	bl	8000b88 <__aeabi_d2iz>
 80121cc:	1c65      	adds	r5, r4, #1
 80121ce:	ab0e      	add	r3, sp, #56	; 0x38
 80121d0:	f10a 0a18 	add.w	sl, sl, #24
 80121d4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80121d8:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80121dc:	e719      	b.n	8012012 <__kernel_rem_pio2+0x292>
 80121de:	4630      	mov	r0, r6
 80121e0:	4639      	mov	r1, r7
 80121e2:	f7ee fcd1 	bl	8000b88 <__aeabi_d2iz>
 80121e6:	ab0e      	add	r3, sp, #56	; 0x38
 80121e8:	4625      	mov	r5, r4
 80121ea:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80121ee:	e710      	b.n	8012012 <__kernel_rem_pio2+0x292>
 80121f0:	ab0e      	add	r3, sp, #56	; 0x38
 80121f2:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80121f6:	f7ee f9ad 	bl	8000554 <__aeabi_i2d>
 80121fa:	4642      	mov	r2, r8
 80121fc:	464b      	mov	r3, r9
 80121fe:	f7ee fa13 	bl	8000628 <__aeabi_dmul>
 8012202:	2200      	movs	r2, #0
 8012204:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8012208:	4b7c      	ldr	r3, [pc, #496]	; (80123fc <__kernel_rem_pio2+0x67c>)
 801220a:	4640      	mov	r0, r8
 801220c:	4649      	mov	r1, r9
 801220e:	f7ee fa0b 	bl	8000628 <__aeabi_dmul>
 8012212:	3f01      	subs	r7, #1
 8012214:	4680      	mov	r8, r0
 8012216:	4689      	mov	r9, r1
 8012218:	e708      	b.n	801202c <__kernel_rem_pio2+0x2ac>
 801221a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 801221e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012222:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8012226:	f7ee f9ff 	bl	8000628 <__aeabi_dmul>
 801222a:	4602      	mov	r2, r0
 801222c:	460b      	mov	r3, r1
 801222e:	4640      	mov	r0, r8
 8012230:	4649      	mov	r1, r9
 8012232:	f7ee f843 	bl	80002bc <__adddf3>
 8012236:	3701      	adds	r7, #1
 8012238:	4680      	mov	r8, r0
 801223a:	4689      	mov	r9, r1
 801223c:	9b04      	ldr	r3, [sp, #16]
 801223e:	429f      	cmp	r7, r3
 8012240:	dc01      	bgt.n	8012246 <__kernel_rem_pio2+0x4c6>
 8012242:	45ba      	cmp	sl, r7
 8012244:	dae9      	bge.n	801221a <__kernel_rem_pio2+0x49a>
 8012246:	ab4a      	add	r3, sp, #296	; 0x128
 8012248:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801224c:	e9c3 8900 	strd	r8, r9, [r3]
 8012250:	f10a 0a01 	add.w	sl, sl, #1
 8012254:	3e08      	subs	r6, #8
 8012256:	e6f0      	b.n	801203a <__kernel_rem_pio2+0x2ba>
 8012258:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801225a:	2b03      	cmp	r3, #3
 801225c:	d85b      	bhi.n	8012316 <__kernel_rem_pio2+0x596>
 801225e:	e8df f003 	tbb	[pc, r3]
 8012262:	264a      	.short	0x264a
 8012264:	0226      	.short	0x0226
 8012266:	ab9a      	add	r3, sp, #616	; 0x268
 8012268:	441c      	add	r4, r3
 801226a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801226e:	46a2      	mov	sl, r4
 8012270:	46ab      	mov	fp, r5
 8012272:	f1bb 0f00 	cmp.w	fp, #0
 8012276:	dc6c      	bgt.n	8012352 <__kernel_rem_pio2+0x5d2>
 8012278:	46a2      	mov	sl, r4
 801227a:	46ab      	mov	fp, r5
 801227c:	f1bb 0f01 	cmp.w	fp, #1
 8012280:	f300 8086 	bgt.w	8012390 <__kernel_rem_pio2+0x610>
 8012284:	2000      	movs	r0, #0
 8012286:	2100      	movs	r1, #0
 8012288:	2d01      	cmp	r5, #1
 801228a:	f300 80a0 	bgt.w	80123ce <__kernel_rem_pio2+0x64e>
 801228e:	9b02      	ldr	r3, [sp, #8]
 8012290:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8012294:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8012298:	2b00      	cmp	r3, #0
 801229a:	f040 809e 	bne.w	80123da <__kernel_rem_pio2+0x65a>
 801229e:	9b01      	ldr	r3, [sp, #4]
 80122a0:	e9c3 7800 	strd	r7, r8, [r3]
 80122a4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80122a8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80122ac:	e033      	b.n	8012316 <__kernel_rem_pio2+0x596>
 80122ae:	3408      	adds	r4, #8
 80122b0:	ab4a      	add	r3, sp, #296	; 0x128
 80122b2:	441c      	add	r4, r3
 80122b4:	462e      	mov	r6, r5
 80122b6:	2000      	movs	r0, #0
 80122b8:	2100      	movs	r1, #0
 80122ba:	2e00      	cmp	r6, #0
 80122bc:	da3a      	bge.n	8012334 <__kernel_rem_pio2+0x5b4>
 80122be:	9b02      	ldr	r3, [sp, #8]
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	d03d      	beq.n	8012340 <__kernel_rem_pio2+0x5c0>
 80122c4:	4602      	mov	r2, r0
 80122c6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80122ca:	9c01      	ldr	r4, [sp, #4]
 80122cc:	e9c4 2300 	strd	r2, r3, [r4]
 80122d0:	4602      	mov	r2, r0
 80122d2:	460b      	mov	r3, r1
 80122d4:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80122d8:	f7ed ffee 	bl	80002b8 <__aeabi_dsub>
 80122dc:	ae4c      	add	r6, sp, #304	; 0x130
 80122de:	2401      	movs	r4, #1
 80122e0:	42a5      	cmp	r5, r4
 80122e2:	da30      	bge.n	8012346 <__kernel_rem_pio2+0x5c6>
 80122e4:	9b02      	ldr	r3, [sp, #8]
 80122e6:	b113      	cbz	r3, 80122ee <__kernel_rem_pio2+0x56e>
 80122e8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80122ec:	4619      	mov	r1, r3
 80122ee:	9b01      	ldr	r3, [sp, #4]
 80122f0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80122f4:	e00f      	b.n	8012316 <__kernel_rem_pio2+0x596>
 80122f6:	ab9a      	add	r3, sp, #616	; 0x268
 80122f8:	441c      	add	r4, r3
 80122fa:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80122fe:	2000      	movs	r0, #0
 8012300:	2100      	movs	r1, #0
 8012302:	2d00      	cmp	r5, #0
 8012304:	da10      	bge.n	8012328 <__kernel_rem_pio2+0x5a8>
 8012306:	9b02      	ldr	r3, [sp, #8]
 8012308:	b113      	cbz	r3, 8012310 <__kernel_rem_pio2+0x590>
 801230a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801230e:	4619      	mov	r1, r3
 8012310:	9b01      	ldr	r3, [sp, #4]
 8012312:	e9c3 0100 	strd	r0, r1, [r3]
 8012316:	9b06      	ldr	r3, [sp, #24]
 8012318:	f003 0007 	and.w	r0, r3, #7
 801231c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8012320:	ecbd 8b02 	vpop	{d8}
 8012324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012328:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801232c:	f7ed ffc6 	bl	80002bc <__adddf3>
 8012330:	3d01      	subs	r5, #1
 8012332:	e7e6      	b.n	8012302 <__kernel_rem_pio2+0x582>
 8012334:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012338:	f7ed ffc0 	bl	80002bc <__adddf3>
 801233c:	3e01      	subs	r6, #1
 801233e:	e7bc      	b.n	80122ba <__kernel_rem_pio2+0x53a>
 8012340:	4602      	mov	r2, r0
 8012342:	460b      	mov	r3, r1
 8012344:	e7c1      	b.n	80122ca <__kernel_rem_pio2+0x54a>
 8012346:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801234a:	f7ed ffb7 	bl	80002bc <__adddf3>
 801234e:	3401      	adds	r4, #1
 8012350:	e7c6      	b.n	80122e0 <__kernel_rem_pio2+0x560>
 8012352:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8012356:	ed3a 7b02 	vldmdb	sl!, {d7}
 801235a:	4640      	mov	r0, r8
 801235c:	ec53 2b17 	vmov	r2, r3, d7
 8012360:	4649      	mov	r1, r9
 8012362:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012366:	f7ed ffa9 	bl	80002bc <__adddf3>
 801236a:	4602      	mov	r2, r0
 801236c:	460b      	mov	r3, r1
 801236e:	4606      	mov	r6, r0
 8012370:	460f      	mov	r7, r1
 8012372:	4640      	mov	r0, r8
 8012374:	4649      	mov	r1, r9
 8012376:	f7ed ff9f 	bl	80002b8 <__aeabi_dsub>
 801237a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801237e:	f7ed ff9d 	bl	80002bc <__adddf3>
 8012382:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012386:	e9ca 0100 	strd	r0, r1, [sl]
 801238a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 801238e:	e770      	b.n	8012272 <__kernel_rem_pio2+0x4f2>
 8012390:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8012394:	ed3a 7b02 	vldmdb	sl!, {d7}
 8012398:	4630      	mov	r0, r6
 801239a:	ec53 2b17 	vmov	r2, r3, d7
 801239e:	4639      	mov	r1, r7
 80123a0:	ed8d 7b04 	vstr	d7, [sp, #16]
 80123a4:	f7ed ff8a 	bl	80002bc <__adddf3>
 80123a8:	4602      	mov	r2, r0
 80123aa:	460b      	mov	r3, r1
 80123ac:	4680      	mov	r8, r0
 80123ae:	4689      	mov	r9, r1
 80123b0:	4630      	mov	r0, r6
 80123b2:	4639      	mov	r1, r7
 80123b4:	f7ed ff80 	bl	80002b8 <__aeabi_dsub>
 80123b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80123bc:	f7ed ff7e 	bl	80002bc <__adddf3>
 80123c0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80123c4:	e9ca 0100 	strd	r0, r1, [sl]
 80123c8:	e94a 8902 	strd	r8, r9, [sl, #-8]
 80123cc:	e756      	b.n	801227c <__kernel_rem_pio2+0x4fc>
 80123ce:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80123d2:	f7ed ff73 	bl	80002bc <__adddf3>
 80123d6:	3d01      	subs	r5, #1
 80123d8:	e756      	b.n	8012288 <__kernel_rem_pio2+0x508>
 80123da:	9b01      	ldr	r3, [sp, #4]
 80123dc:	9a01      	ldr	r2, [sp, #4]
 80123de:	601f      	str	r7, [r3, #0]
 80123e0:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80123e4:	605c      	str	r4, [r3, #4]
 80123e6:	609d      	str	r5, [r3, #8]
 80123e8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80123ec:	60d3      	str	r3, [r2, #12]
 80123ee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80123f2:	6110      	str	r0, [r2, #16]
 80123f4:	6153      	str	r3, [r2, #20]
 80123f6:	e78e      	b.n	8012316 <__kernel_rem_pio2+0x596>
 80123f8:	41700000 	.word	0x41700000
 80123fc:	3e700000 	.word	0x3e700000

08012400 <__kernel_sin>:
 8012400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012404:	ec55 4b10 	vmov	r4, r5, d0
 8012408:	b085      	sub	sp, #20
 801240a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801240e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8012412:	ed8d 1b00 	vstr	d1, [sp]
 8012416:	9002      	str	r0, [sp, #8]
 8012418:	da06      	bge.n	8012428 <__kernel_sin+0x28>
 801241a:	ee10 0a10 	vmov	r0, s0
 801241e:	4629      	mov	r1, r5
 8012420:	f7ee fbb2 	bl	8000b88 <__aeabi_d2iz>
 8012424:	2800      	cmp	r0, #0
 8012426:	d051      	beq.n	80124cc <__kernel_sin+0xcc>
 8012428:	4622      	mov	r2, r4
 801242a:	462b      	mov	r3, r5
 801242c:	4620      	mov	r0, r4
 801242e:	4629      	mov	r1, r5
 8012430:	f7ee f8fa 	bl	8000628 <__aeabi_dmul>
 8012434:	4682      	mov	sl, r0
 8012436:	468b      	mov	fp, r1
 8012438:	4602      	mov	r2, r0
 801243a:	460b      	mov	r3, r1
 801243c:	4620      	mov	r0, r4
 801243e:	4629      	mov	r1, r5
 8012440:	f7ee f8f2 	bl	8000628 <__aeabi_dmul>
 8012444:	a341      	add	r3, pc, #260	; (adr r3, 801254c <__kernel_sin+0x14c>)
 8012446:	e9d3 2300 	ldrd	r2, r3, [r3]
 801244a:	4680      	mov	r8, r0
 801244c:	4689      	mov	r9, r1
 801244e:	4650      	mov	r0, sl
 8012450:	4659      	mov	r1, fp
 8012452:	f7ee f8e9 	bl	8000628 <__aeabi_dmul>
 8012456:	a33f      	add	r3, pc, #252	; (adr r3, 8012554 <__kernel_sin+0x154>)
 8012458:	e9d3 2300 	ldrd	r2, r3, [r3]
 801245c:	f7ed ff2c 	bl	80002b8 <__aeabi_dsub>
 8012460:	4652      	mov	r2, sl
 8012462:	465b      	mov	r3, fp
 8012464:	f7ee f8e0 	bl	8000628 <__aeabi_dmul>
 8012468:	a33c      	add	r3, pc, #240	; (adr r3, 801255c <__kernel_sin+0x15c>)
 801246a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801246e:	f7ed ff25 	bl	80002bc <__adddf3>
 8012472:	4652      	mov	r2, sl
 8012474:	465b      	mov	r3, fp
 8012476:	f7ee f8d7 	bl	8000628 <__aeabi_dmul>
 801247a:	a33a      	add	r3, pc, #232	; (adr r3, 8012564 <__kernel_sin+0x164>)
 801247c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012480:	f7ed ff1a 	bl	80002b8 <__aeabi_dsub>
 8012484:	4652      	mov	r2, sl
 8012486:	465b      	mov	r3, fp
 8012488:	f7ee f8ce 	bl	8000628 <__aeabi_dmul>
 801248c:	a337      	add	r3, pc, #220	; (adr r3, 801256c <__kernel_sin+0x16c>)
 801248e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012492:	f7ed ff13 	bl	80002bc <__adddf3>
 8012496:	9b02      	ldr	r3, [sp, #8]
 8012498:	4606      	mov	r6, r0
 801249a:	460f      	mov	r7, r1
 801249c:	b9db      	cbnz	r3, 80124d6 <__kernel_sin+0xd6>
 801249e:	4602      	mov	r2, r0
 80124a0:	460b      	mov	r3, r1
 80124a2:	4650      	mov	r0, sl
 80124a4:	4659      	mov	r1, fp
 80124a6:	f7ee f8bf 	bl	8000628 <__aeabi_dmul>
 80124aa:	a325      	add	r3, pc, #148	; (adr r3, 8012540 <__kernel_sin+0x140>)
 80124ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124b0:	f7ed ff02 	bl	80002b8 <__aeabi_dsub>
 80124b4:	4642      	mov	r2, r8
 80124b6:	464b      	mov	r3, r9
 80124b8:	f7ee f8b6 	bl	8000628 <__aeabi_dmul>
 80124bc:	4602      	mov	r2, r0
 80124be:	460b      	mov	r3, r1
 80124c0:	4620      	mov	r0, r4
 80124c2:	4629      	mov	r1, r5
 80124c4:	f7ed fefa 	bl	80002bc <__adddf3>
 80124c8:	4604      	mov	r4, r0
 80124ca:	460d      	mov	r5, r1
 80124cc:	ec45 4b10 	vmov	d0, r4, r5
 80124d0:	b005      	add	sp, #20
 80124d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124d6:	2200      	movs	r2, #0
 80124d8:	4b1b      	ldr	r3, [pc, #108]	; (8012548 <__kernel_sin+0x148>)
 80124da:	e9dd 0100 	ldrd	r0, r1, [sp]
 80124de:	f7ee f8a3 	bl	8000628 <__aeabi_dmul>
 80124e2:	4632      	mov	r2, r6
 80124e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80124e8:	463b      	mov	r3, r7
 80124ea:	4640      	mov	r0, r8
 80124ec:	4649      	mov	r1, r9
 80124ee:	f7ee f89b 	bl	8000628 <__aeabi_dmul>
 80124f2:	4602      	mov	r2, r0
 80124f4:	460b      	mov	r3, r1
 80124f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80124fa:	f7ed fedd 	bl	80002b8 <__aeabi_dsub>
 80124fe:	4652      	mov	r2, sl
 8012500:	465b      	mov	r3, fp
 8012502:	f7ee f891 	bl	8000628 <__aeabi_dmul>
 8012506:	e9dd 2300 	ldrd	r2, r3, [sp]
 801250a:	f7ed fed5 	bl	80002b8 <__aeabi_dsub>
 801250e:	a30c      	add	r3, pc, #48	; (adr r3, 8012540 <__kernel_sin+0x140>)
 8012510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012514:	4606      	mov	r6, r0
 8012516:	460f      	mov	r7, r1
 8012518:	4640      	mov	r0, r8
 801251a:	4649      	mov	r1, r9
 801251c:	f7ee f884 	bl	8000628 <__aeabi_dmul>
 8012520:	4602      	mov	r2, r0
 8012522:	460b      	mov	r3, r1
 8012524:	4630      	mov	r0, r6
 8012526:	4639      	mov	r1, r7
 8012528:	f7ed fec8 	bl	80002bc <__adddf3>
 801252c:	4602      	mov	r2, r0
 801252e:	460b      	mov	r3, r1
 8012530:	4620      	mov	r0, r4
 8012532:	4629      	mov	r1, r5
 8012534:	f7ed fec0 	bl	80002b8 <__aeabi_dsub>
 8012538:	e7c6      	b.n	80124c8 <__kernel_sin+0xc8>
 801253a:	bf00      	nop
 801253c:	f3af 8000 	nop.w
 8012540:	55555549 	.word	0x55555549
 8012544:	3fc55555 	.word	0x3fc55555
 8012548:	3fe00000 	.word	0x3fe00000
 801254c:	5acfd57c 	.word	0x5acfd57c
 8012550:	3de5d93a 	.word	0x3de5d93a
 8012554:	8a2b9ceb 	.word	0x8a2b9ceb
 8012558:	3e5ae5e6 	.word	0x3e5ae5e6
 801255c:	57b1fe7d 	.word	0x57b1fe7d
 8012560:	3ec71de3 	.word	0x3ec71de3
 8012564:	19c161d5 	.word	0x19c161d5
 8012568:	3f2a01a0 	.word	0x3f2a01a0
 801256c:	1110f8a6 	.word	0x1110f8a6
 8012570:	3f811111 	.word	0x3f811111

08012574 <fabs>:
 8012574:	ec51 0b10 	vmov	r0, r1, d0
 8012578:	ee10 2a10 	vmov	r2, s0
 801257c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012580:	ec43 2b10 	vmov	d0, r2, r3
 8012584:	4770      	bx	lr
	...

08012588 <floor>:
 8012588:	ec51 0b10 	vmov	r0, r1, d0
 801258c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012590:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8012594:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8012598:	2e13      	cmp	r6, #19
 801259a:	460c      	mov	r4, r1
 801259c:	ee10 5a10 	vmov	r5, s0
 80125a0:	4680      	mov	r8, r0
 80125a2:	dc34      	bgt.n	801260e <floor+0x86>
 80125a4:	2e00      	cmp	r6, #0
 80125a6:	da16      	bge.n	80125d6 <floor+0x4e>
 80125a8:	a335      	add	r3, pc, #212	; (adr r3, 8012680 <floor+0xf8>)
 80125aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125ae:	f7ed fe85 	bl	80002bc <__adddf3>
 80125b2:	2200      	movs	r2, #0
 80125b4:	2300      	movs	r3, #0
 80125b6:	f7ee fac7 	bl	8000b48 <__aeabi_dcmpgt>
 80125ba:	b148      	cbz	r0, 80125d0 <floor+0x48>
 80125bc:	2c00      	cmp	r4, #0
 80125be:	da59      	bge.n	8012674 <floor+0xec>
 80125c0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80125c4:	4a30      	ldr	r2, [pc, #192]	; (8012688 <floor+0x100>)
 80125c6:	432b      	orrs	r3, r5
 80125c8:	2500      	movs	r5, #0
 80125ca:	42ab      	cmp	r3, r5
 80125cc:	bf18      	it	ne
 80125ce:	4614      	movne	r4, r2
 80125d0:	4621      	mov	r1, r4
 80125d2:	4628      	mov	r0, r5
 80125d4:	e025      	b.n	8012622 <floor+0x9a>
 80125d6:	4f2d      	ldr	r7, [pc, #180]	; (801268c <floor+0x104>)
 80125d8:	4137      	asrs	r7, r6
 80125da:	ea01 0307 	and.w	r3, r1, r7
 80125de:	4303      	orrs	r3, r0
 80125e0:	d01f      	beq.n	8012622 <floor+0x9a>
 80125e2:	a327      	add	r3, pc, #156	; (adr r3, 8012680 <floor+0xf8>)
 80125e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125e8:	f7ed fe68 	bl	80002bc <__adddf3>
 80125ec:	2200      	movs	r2, #0
 80125ee:	2300      	movs	r3, #0
 80125f0:	f7ee faaa 	bl	8000b48 <__aeabi_dcmpgt>
 80125f4:	2800      	cmp	r0, #0
 80125f6:	d0eb      	beq.n	80125d0 <floor+0x48>
 80125f8:	2c00      	cmp	r4, #0
 80125fa:	bfbe      	ittt	lt
 80125fc:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8012600:	fa43 f606 	asrlt.w	r6, r3, r6
 8012604:	19a4      	addlt	r4, r4, r6
 8012606:	ea24 0407 	bic.w	r4, r4, r7
 801260a:	2500      	movs	r5, #0
 801260c:	e7e0      	b.n	80125d0 <floor+0x48>
 801260e:	2e33      	cmp	r6, #51	; 0x33
 8012610:	dd0b      	ble.n	801262a <floor+0xa2>
 8012612:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8012616:	d104      	bne.n	8012622 <floor+0x9a>
 8012618:	ee10 2a10 	vmov	r2, s0
 801261c:	460b      	mov	r3, r1
 801261e:	f7ed fe4d 	bl	80002bc <__adddf3>
 8012622:	ec41 0b10 	vmov	d0, r0, r1
 8012626:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801262a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801262e:	f04f 33ff 	mov.w	r3, #4294967295
 8012632:	fa23 f707 	lsr.w	r7, r3, r7
 8012636:	4207      	tst	r7, r0
 8012638:	d0f3      	beq.n	8012622 <floor+0x9a>
 801263a:	a311      	add	r3, pc, #68	; (adr r3, 8012680 <floor+0xf8>)
 801263c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012640:	f7ed fe3c 	bl	80002bc <__adddf3>
 8012644:	2200      	movs	r2, #0
 8012646:	2300      	movs	r3, #0
 8012648:	f7ee fa7e 	bl	8000b48 <__aeabi_dcmpgt>
 801264c:	2800      	cmp	r0, #0
 801264e:	d0bf      	beq.n	80125d0 <floor+0x48>
 8012650:	2c00      	cmp	r4, #0
 8012652:	da02      	bge.n	801265a <floor+0xd2>
 8012654:	2e14      	cmp	r6, #20
 8012656:	d103      	bne.n	8012660 <floor+0xd8>
 8012658:	3401      	adds	r4, #1
 801265a:	ea25 0507 	bic.w	r5, r5, r7
 801265e:	e7b7      	b.n	80125d0 <floor+0x48>
 8012660:	2301      	movs	r3, #1
 8012662:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8012666:	fa03 f606 	lsl.w	r6, r3, r6
 801266a:	4435      	add	r5, r6
 801266c:	4545      	cmp	r5, r8
 801266e:	bf38      	it	cc
 8012670:	18e4      	addcc	r4, r4, r3
 8012672:	e7f2      	b.n	801265a <floor+0xd2>
 8012674:	2500      	movs	r5, #0
 8012676:	462c      	mov	r4, r5
 8012678:	e7aa      	b.n	80125d0 <floor+0x48>
 801267a:	bf00      	nop
 801267c:	f3af 8000 	nop.w
 8012680:	8800759c 	.word	0x8800759c
 8012684:	7e37e43c 	.word	0x7e37e43c
 8012688:	bff00000 	.word	0xbff00000
 801268c:	000fffff 	.word	0x000fffff

08012690 <scalbn>:
 8012690:	b570      	push	{r4, r5, r6, lr}
 8012692:	ec55 4b10 	vmov	r4, r5, d0
 8012696:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801269a:	4606      	mov	r6, r0
 801269c:	462b      	mov	r3, r5
 801269e:	b9aa      	cbnz	r2, 80126cc <scalbn+0x3c>
 80126a0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80126a4:	4323      	orrs	r3, r4
 80126a6:	d03b      	beq.n	8012720 <scalbn+0x90>
 80126a8:	4b31      	ldr	r3, [pc, #196]	; (8012770 <scalbn+0xe0>)
 80126aa:	4629      	mov	r1, r5
 80126ac:	2200      	movs	r2, #0
 80126ae:	ee10 0a10 	vmov	r0, s0
 80126b2:	f7ed ffb9 	bl	8000628 <__aeabi_dmul>
 80126b6:	4b2f      	ldr	r3, [pc, #188]	; (8012774 <scalbn+0xe4>)
 80126b8:	429e      	cmp	r6, r3
 80126ba:	4604      	mov	r4, r0
 80126bc:	460d      	mov	r5, r1
 80126be:	da12      	bge.n	80126e6 <scalbn+0x56>
 80126c0:	a327      	add	r3, pc, #156	; (adr r3, 8012760 <scalbn+0xd0>)
 80126c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126c6:	f7ed ffaf 	bl	8000628 <__aeabi_dmul>
 80126ca:	e009      	b.n	80126e0 <scalbn+0x50>
 80126cc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80126d0:	428a      	cmp	r2, r1
 80126d2:	d10c      	bne.n	80126ee <scalbn+0x5e>
 80126d4:	ee10 2a10 	vmov	r2, s0
 80126d8:	4620      	mov	r0, r4
 80126da:	4629      	mov	r1, r5
 80126dc:	f7ed fdee 	bl	80002bc <__adddf3>
 80126e0:	4604      	mov	r4, r0
 80126e2:	460d      	mov	r5, r1
 80126e4:	e01c      	b.n	8012720 <scalbn+0x90>
 80126e6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80126ea:	460b      	mov	r3, r1
 80126ec:	3a36      	subs	r2, #54	; 0x36
 80126ee:	4432      	add	r2, r6
 80126f0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80126f4:	428a      	cmp	r2, r1
 80126f6:	dd0b      	ble.n	8012710 <scalbn+0x80>
 80126f8:	ec45 4b11 	vmov	d1, r4, r5
 80126fc:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8012768 <scalbn+0xd8>
 8012700:	f000 f83c 	bl	801277c <copysign>
 8012704:	a318      	add	r3, pc, #96	; (adr r3, 8012768 <scalbn+0xd8>)
 8012706:	e9d3 2300 	ldrd	r2, r3, [r3]
 801270a:	ec51 0b10 	vmov	r0, r1, d0
 801270e:	e7da      	b.n	80126c6 <scalbn+0x36>
 8012710:	2a00      	cmp	r2, #0
 8012712:	dd08      	ble.n	8012726 <scalbn+0x96>
 8012714:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012718:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801271c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012720:	ec45 4b10 	vmov	d0, r4, r5
 8012724:	bd70      	pop	{r4, r5, r6, pc}
 8012726:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801272a:	da0d      	bge.n	8012748 <scalbn+0xb8>
 801272c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8012730:	429e      	cmp	r6, r3
 8012732:	ec45 4b11 	vmov	d1, r4, r5
 8012736:	dce1      	bgt.n	80126fc <scalbn+0x6c>
 8012738:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8012760 <scalbn+0xd0>
 801273c:	f000 f81e 	bl	801277c <copysign>
 8012740:	a307      	add	r3, pc, #28	; (adr r3, 8012760 <scalbn+0xd0>)
 8012742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012746:	e7e0      	b.n	801270a <scalbn+0x7a>
 8012748:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801274c:	3236      	adds	r2, #54	; 0x36
 801274e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012752:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012756:	4620      	mov	r0, r4
 8012758:	4629      	mov	r1, r5
 801275a:	2200      	movs	r2, #0
 801275c:	4b06      	ldr	r3, [pc, #24]	; (8012778 <scalbn+0xe8>)
 801275e:	e7b2      	b.n	80126c6 <scalbn+0x36>
 8012760:	c2f8f359 	.word	0xc2f8f359
 8012764:	01a56e1f 	.word	0x01a56e1f
 8012768:	8800759c 	.word	0x8800759c
 801276c:	7e37e43c 	.word	0x7e37e43c
 8012770:	43500000 	.word	0x43500000
 8012774:	ffff3cb0 	.word	0xffff3cb0
 8012778:	3c900000 	.word	0x3c900000

0801277c <copysign>:
 801277c:	ec51 0b10 	vmov	r0, r1, d0
 8012780:	ee11 0a90 	vmov	r0, s3
 8012784:	ee10 2a10 	vmov	r2, s0
 8012788:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801278c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8012790:	ea41 0300 	orr.w	r3, r1, r0
 8012794:	ec43 2b10 	vmov	d0, r2, r3
 8012798:	4770      	bx	lr
	...

0801279c <__errno>:
 801279c:	4b01      	ldr	r3, [pc, #4]	; (80127a4 <__errno+0x8>)
 801279e:	6818      	ldr	r0, [r3, #0]
 80127a0:	4770      	bx	lr
 80127a2:	bf00      	nop
 80127a4:	2000000c 	.word	0x2000000c

080127a8 <__libc_init_array>:
 80127a8:	b570      	push	{r4, r5, r6, lr}
 80127aa:	4e0d      	ldr	r6, [pc, #52]	; (80127e0 <__libc_init_array+0x38>)
 80127ac:	4c0d      	ldr	r4, [pc, #52]	; (80127e4 <__libc_init_array+0x3c>)
 80127ae:	1ba4      	subs	r4, r4, r6
 80127b0:	10a4      	asrs	r4, r4, #2
 80127b2:	2500      	movs	r5, #0
 80127b4:	42a5      	cmp	r5, r4
 80127b6:	d109      	bne.n	80127cc <__libc_init_array+0x24>
 80127b8:	4e0b      	ldr	r6, [pc, #44]	; (80127e8 <__libc_init_array+0x40>)
 80127ba:	4c0c      	ldr	r4, [pc, #48]	; (80127ec <__libc_init_array+0x44>)
 80127bc:	f004 feee 	bl	801759c <_init>
 80127c0:	1ba4      	subs	r4, r4, r6
 80127c2:	10a4      	asrs	r4, r4, #2
 80127c4:	2500      	movs	r5, #0
 80127c6:	42a5      	cmp	r5, r4
 80127c8:	d105      	bne.n	80127d6 <__libc_init_array+0x2e>
 80127ca:	bd70      	pop	{r4, r5, r6, pc}
 80127cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80127d0:	4798      	blx	r3
 80127d2:	3501      	adds	r5, #1
 80127d4:	e7ee      	b.n	80127b4 <__libc_init_array+0xc>
 80127d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80127da:	4798      	blx	r3
 80127dc:	3501      	adds	r5, #1
 80127de:	e7f2      	b.n	80127c6 <__libc_init_array+0x1e>
 80127e0:	0801806c 	.word	0x0801806c
 80127e4:	0801806c 	.word	0x0801806c
 80127e8:	0801806c 	.word	0x0801806c
 80127ec:	08018074 	.word	0x08018074

080127f0 <memcpy>:
 80127f0:	b510      	push	{r4, lr}
 80127f2:	1e43      	subs	r3, r0, #1
 80127f4:	440a      	add	r2, r1
 80127f6:	4291      	cmp	r1, r2
 80127f8:	d100      	bne.n	80127fc <memcpy+0xc>
 80127fa:	bd10      	pop	{r4, pc}
 80127fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012800:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012804:	e7f7      	b.n	80127f6 <memcpy+0x6>

08012806 <memset>:
 8012806:	4402      	add	r2, r0
 8012808:	4603      	mov	r3, r0
 801280a:	4293      	cmp	r3, r2
 801280c:	d100      	bne.n	8012810 <memset+0xa>
 801280e:	4770      	bx	lr
 8012810:	f803 1b01 	strb.w	r1, [r3], #1
 8012814:	e7f9      	b.n	801280a <memset+0x4>

08012816 <__cvt>:
 8012816:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801281a:	ec55 4b10 	vmov	r4, r5, d0
 801281e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8012820:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8012824:	2d00      	cmp	r5, #0
 8012826:	460e      	mov	r6, r1
 8012828:	4691      	mov	r9, r2
 801282a:	4619      	mov	r1, r3
 801282c:	bfb8      	it	lt
 801282e:	4622      	movlt	r2, r4
 8012830:	462b      	mov	r3, r5
 8012832:	f027 0720 	bic.w	r7, r7, #32
 8012836:	bfbb      	ittet	lt
 8012838:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801283c:	461d      	movlt	r5, r3
 801283e:	2300      	movge	r3, #0
 8012840:	232d      	movlt	r3, #45	; 0x2d
 8012842:	bfb8      	it	lt
 8012844:	4614      	movlt	r4, r2
 8012846:	2f46      	cmp	r7, #70	; 0x46
 8012848:	700b      	strb	r3, [r1, #0]
 801284a:	d004      	beq.n	8012856 <__cvt+0x40>
 801284c:	2f45      	cmp	r7, #69	; 0x45
 801284e:	d100      	bne.n	8012852 <__cvt+0x3c>
 8012850:	3601      	adds	r6, #1
 8012852:	2102      	movs	r1, #2
 8012854:	e000      	b.n	8012858 <__cvt+0x42>
 8012856:	2103      	movs	r1, #3
 8012858:	ab03      	add	r3, sp, #12
 801285a:	9301      	str	r3, [sp, #4]
 801285c:	ab02      	add	r3, sp, #8
 801285e:	9300      	str	r3, [sp, #0]
 8012860:	4632      	mov	r2, r6
 8012862:	4653      	mov	r3, sl
 8012864:	ec45 4b10 	vmov	d0, r4, r5
 8012868:	f001 ff9e 	bl	80147a8 <_dtoa_r>
 801286c:	2f47      	cmp	r7, #71	; 0x47
 801286e:	4680      	mov	r8, r0
 8012870:	d102      	bne.n	8012878 <__cvt+0x62>
 8012872:	f019 0f01 	tst.w	r9, #1
 8012876:	d026      	beq.n	80128c6 <__cvt+0xb0>
 8012878:	2f46      	cmp	r7, #70	; 0x46
 801287a:	eb08 0906 	add.w	r9, r8, r6
 801287e:	d111      	bne.n	80128a4 <__cvt+0x8e>
 8012880:	f898 3000 	ldrb.w	r3, [r8]
 8012884:	2b30      	cmp	r3, #48	; 0x30
 8012886:	d10a      	bne.n	801289e <__cvt+0x88>
 8012888:	2200      	movs	r2, #0
 801288a:	2300      	movs	r3, #0
 801288c:	4620      	mov	r0, r4
 801288e:	4629      	mov	r1, r5
 8012890:	f7ee f932 	bl	8000af8 <__aeabi_dcmpeq>
 8012894:	b918      	cbnz	r0, 801289e <__cvt+0x88>
 8012896:	f1c6 0601 	rsb	r6, r6, #1
 801289a:	f8ca 6000 	str.w	r6, [sl]
 801289e:	f8da 3000 	ldr.w	r3, [sl]
 80128a2:	4499      	add	r9, r3
 80128a4:	2200      	movs	r2, #0
 80128a6:	2300      	movs	r3, #0
 80128a8:	4620      	mov	r0, r4
 80128aa:	4629      	mov	r1, r5
 80128ac:	f7ee f924 	bl	8000af8 <__aeabi_dcmpeq>
 80128b0:	b938      	cbnz	r0, 80128c2 <__cvt+0xac>
 80128b2:	2230      	movs	r2, #48	; 0x30
 80128b4:	9b03      	ldr	r3, [sp, #12]
 80128b6:	454b      	cmp	r3, r9
 80128b8:	d205      	bcs.n	80128c6 <__cvt+0xb0>
 80128ba:	1c59      	adds	r1, r3, #1
 80128bc:	9103      	str	r1, [sp, #12]
 80128be:	701a      	strb	r2, [r3, #0]
 80128c0:	e7f8      	b.n	80128b4 <__cvt+0x9e>
 80128c2:	f8cd 900c 	str.w	r9, [sp, #12]
 80128c6:	9b03      	ldr	r3, [sp, #12]
 80128c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80128ca:	eba3 0308 	sub.w	r3, r3, r8
 80128ce:	4640      	mov	r0, r8
 80128d0:	6013      	str	r3, [r2, #0]
 80128d2:	b004      	add	sp, #16
 80128d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080128d8 <__exponent>:
 80128d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80128da:	2900      	cmp	r1, #0
 80128dc:	4604      	mov	r4, r0
 80128de:	bfba      	itte	lt
 80128e0:	4249      	neglt	r1, r1
 80128e2:	232d      	movlt	r3, #45	; 0x2d
 80128e4:	232b      	movge	r3, #43	; 0x2b
 80128e6:	2909      	cmp	r1, #9
 80128e8:	f804 2b02 	strb.w	r2, [r4], #2
 80128ec:	7043      	strb	r3, [r0, #1]
 80128ee:	dd20      	ble.n	8012932 <__exponent+0x5a>
 80128f0:	f10d 0307 	add.w	r3, sp, #7
 80128f4:	461f      	mov	r7, r3
 80128f6:	260a      	movs	r6, #10
 80128f8:	fb91 f5f6 	sdiv	r5, r1, r6
 80128fc:	fb06 1115 	mls	r1, r6, r5, r1
 8012900:	3130      	adds	r1, #48	; 0x30
 8012902:	2d09      	cmp	r5, #9
 8012904:	f803 1c01 	strb.w	r1, [r3, #-1]
 8012908:	f103 32ff 	add.w	r2, r3, #4294967295
 801290c:	4629      	mov	r1, r5
 801290e:	dc09      	bgt.n	8012924 <__exponent+0x4c>
 8012910:	3130      	adds	r1, #48	; 0x30
 8012912:	3b02      	subs	r3, #2
 8012914:	f802 1c01 	strb.w	r1, [r2, #-1]
 8012918:	42bb      	cmp	r3, r7
 801291a:	4622      	mov	r2, r4
 801291c:	d304      	bcc.n	8012928 <__exponent+0x50>
 801291e:	1a10      	subs	r0, r2, r0
 8012920:	b003      	add	sp, #12
 8012922:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012924:	4613      	mov	r3, r2
 8012926:	e7e7      	b.n	80128f8 <__exponent+0x20>
 8012928:	f813 2b01 	ldrb.w	r2, [r3], #1
 801292c:	f804 2b01 	strb.w	r2, [r4], #1
 8012930:	e7f2      	b.n	8012918 <__exponent+0x40>
 8012932:	2330      	movs	r3, #48	; 0x30
 8012934:	4419      	add	r1, r3
 8012936:	7083      	strb	r3, [r0, #2]
 8012938:	1d02      	adds	r2, r0, #4
 801293a:	70c1      	strb	r1, [r0, #3]
 801293c:	e7ef      	b.n	801291e <__exponent+0x46>
	...

08012940 <_printf_float>:
 8012940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012944:	b08d      	sub	sp, #52	; 0x34
 8012946:	460c      	mov	r4, r1
 8012948:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801294c:	4616      	mov	r6, r2
 801294e:	461f      	mov	r7, r3
 8012950:	4605      	mov	r5, r0
 8012952:	f003 f995 	bl	8015c80 <_localeconv_r>
 8012956:	6803      	ldr	r3, [r0, #0]
 8012958:	9304      	str	r3, [sp, #16]
 801295a:	4618      	mov	r0, r3
 801295c:	f7ed fc50 	bl	8000200 <strlen>
 8012960:	2300      	movs	r3, #0
 8012962:	930a      	str	r3, [sp, #40]	; 0x28
 8012964:	f8d8 3000 	ldr.w	r3, [r8]
 8012968:	9005      	str	r0, [sp, #20]
 801296a:	3307      	adds	r3, #7
 801296c:	f023 0307 	bic.w	r3, r3, #7
 8012970:	f103 0208 	add.w	r2, r3, #8
 8012974:	f894 a018 	ldrb.w	sl, [r4, #24]
 8012978:	f8d4 b000 	ldr.w	fp, [r4]
 801297c:	f8c8 2000 	str.w	r2, [r8]
 8012980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012984:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8012988:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801298c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8012990:	9307      	str	r3, [sp, #28]
 8012992:	f8cd 8018 	str.w	r8, [sp, #24]
 8012996:	f04f 32ff 	mov.w	r2, #4294967295
 801299a:	4ba7      	ldr	r3, [pc, #668]	; (8012c38 <_printf_float+0x2f8>)
 801299c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80129a0:	f7ee f8dc 	bl	8000b5c <__aeabi_dcmpun>
 80129a4:	bb70      	cbnz	r0, 8012a04 <_printf_float+0xc4>
 80129a6:	f04f 32ff 	mov.w	r2, #4294967295
 80129aa:	4ba3      	ldr	r3, [pc, #652]	; (8012c38 <_printf_float+0x2f8>)
 80129ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80129b0:	f7ee f8b6 	bl	8000b20 <__aeabi_dcmple>
 80129b4:	bb30      	cbnz	r0, 8012a04 <_printf_float+0xc4>
 80129b6:	2200      	movs	r2, #0
 80129b8:	2300      	movs	r3, #0
 80129ba:	4640      	mov	r0, r8
 80129bc:	4649      	mov	r1, r9
 80129be:	f7ee f8a5 	bl	8000b0c <__aeabi_dcmplt>
 80129c2:	b110      	cbz	r0, 80129ca <_printf_float+0x8a>
 80129c4:	232d      	movs	r3, #45	; 0x2d
 80129c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80129ca:	4a9c      	ldr	r2, [pc, #624]	; (8012c3c <_printf_float+0x2fc>)
 80129cc:	4b9c      	ldr	r3, [pc, #624]	; (8012c40 <_printf_float+0x300>)
 80129ce:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80129d2:	bf8c      	ite	hi
 80129d4:	4690      	movhi	r8, r2
 80129d6:	4698      	movls	r8, r3
 80129d8:	2303      	movs	r3, #3
 80129da:	f02b 0204 	bic.w	r2, fp, #4
 80129de:	6123      	str	r3, [r4, #16]
 80129e0:	6022      	str	r2, [r4, #0]
 80129e2:	f04f 0900 	mov.w	r9, #0
 80129e6:	9700      	str	r7, [sp, #0]
 80129e8:	4633      	mov	r3, r6
 80129ea:	aa0b      	add	r2, sp, #44	; 0x2c
 80129ec:	4621      	mov	r1, r4
 80129ee:	4628      	mov	r0, r5
 80129f0:	f000 f9e6 	bl	8012dc0 <_printf_common>
 80129f4:	3001      	adds	r0, #1
 80129f6:	f040 808d 	bne.w	8012b14 <_printf_float+0x1d4>
 80129fa:	f04f 30ff 	mov.w	r0, #4294967295
 80129fe:	b00d      	add	sp, #52	; 0x34
 8012a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a04:	4642      	mov	r2, r8
 8012a06:	464b      	mov	r3, r9
 8012a08:	4640      	mov	r0, r8
 8012a0a:	4649      	mov	r1, r9
 8012a0c:	f7ee f8a6 	bl	8000b5c <__aeabi_dcmpun>
 8012a10:	b110      	cbz	r0, 8012a18 <_printf_float+0xd8>
 8012a12:	4a8c      	ldr	r2, [pc, #560]	; (8012c44 <_printf_float+0x304>)
 8012a14:	4b8c      	ldr	r3, [pc, #560]	; (8012c48 <_printf_float+0x308>)
 8012a16:	e7da      	b.n	80129ce <_printf_float+0x8e>
 8012a18:	6861      	ldr	r1, [r4, #4]
 8012a1a:	1c4b      	adds	r3, r1, #1
 8012a1c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8012a20:	a80a      	add	r0, sp, #40	; 0x28
 8012a22:	d13e      	bne.n	8012aa2 <_printf_float+0x162>
 8012a24:	2306      	movs	r3, #6
 8012a26:	6063      	str	r3, [r4, #4]
 8012a28:	2300      	movs	r3, #0
 8012a2a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8012a2e:	ab09      	add	r3, sp, #36	; 0x24
 8012a30:	9300      	str	r3, [sp, #0]
 8012a32:	ec49 8b10 	vmov	d0, r8, r9
 8012a36:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8012a3a:	6022      	str	r2, [r4, #0]
 8012a3c:	f8cd a004 	str.w	sl, [sp, #4]
 8012a40:	6861      	ldr	r1, [r4, #4]
 8012a42:	4628      	mov	r0, r5
 8012a44:	f7ff fee7 	bl	8012816 <__cvt>
 8012a48:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8012a4c:	2b47      	cmp	r3, #71	; 0x47
 8012a4e:	4680      	mov	r8, r0
 8012a50:	d109      	bne.n	8012a66 <_printf_float+0x126>
 8012a52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012a54:	1cd8      	adds	r0, r3, #3
 8012a56:	db02      	blt.n	8012a5e <_printf_float+0x11e>
 8012a58:	6862      	ldr	r2, [r4, #4]
 8012a5a:	4293      	cmp	r3, r2
 8012a5c:	dd47      	ble.n	8012aee <_printf_float+0x1ae>
 8012a5e:	f1aa 0a02 	sub.w	sl, sl, #2
 8012a62:	fa5f fa8a 	uxtb.w	sl, sl
 8012a66:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8012a6a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012a6c:	d824      	bhi.n	8012ab8 <_printf_float+0x178>
 8012a6e:	3901      	subs	r1, #1
 8012a70:	4652      	mov	r2, sl
 8012a72:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8012a76:	9109      	str	r1, [sp, #36]	; 0x24
 8012a78:	f7ff ff2e 	bl	80128d8 <__exponent>
 8012a7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012a7e:	1813      	adds	r3, r2, r0
 8012a80:	2a01      	cmp	r2, #1
 8012a82:	4681      	mov	r9, r0
 8012a84:	6123      	str	r3, [r4, #16]
 8012a86:	dc02      	bgt.n	8012a8e <_printf_float+0x14e>
 8012a88:	6822      	ldr	r2, [r4, #0]
 8012a8a:	07d1      	lsls	r1, r2, #31
 8012a8c:	d501      	bpl.n	8012a92 <_printf_float+0x152>
 8012a8e:	3301      	adds	r3, #1
 8012a90:	6123      	str	r3, [r4, #16]
 8012a92:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	d0a5      	beq.n	80129e6 <_printf_float+0xa6>
 8012a9a:	232d      	movs	r3, #45	; 0x2d
 8012a9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012aa0:	e7a1      	b.n	80129e6 <_printf_float+0xa6>
 8012aa2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8012aa6:	f000 8177 	beq.w	8012d98 <_printf_float+0x458>
 8012aaa:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8012aae:	d1bb      	bne.n	8012a28 <_printf_float+0xe8>
 8012ab0:	2900      	cmp	r1, #0
 8012ab2:	d1b9      	bne.n	8012a28 <_printf_float+0xe8>
 8012ab4:	2301      	movs	r3, #1
 8012ab6:	e7b6      	b.n	8012a26 <_printf_float+0xe6>
 8012ab8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8012abc:	d119      	bne.n	8012af2 <_printf_float+0x1b2>
 8012abe:	2900      	cmp	r1, #0
 8012ac0:	6863      	ldr	r3, [r4, #4]
 8012ac2:	dd0c      	ble.n	8012ade <_printf_float+0x19e>
 8012ac4:	6121      	str	r1, [r4, #16]
 8012ac6:	b913      	cbnz	r3, 8012ace <_printf_float+0x18e>
 8012ac8:	6822      	ldr	r2, [r4, #0]
 8012aca:	07d2      	lsls	r2, r2, #31
 8012acc:	d502      	bpl.n	8012ad4 <_printf_float+0x194>
 8012ace:	3301      	adds	r3, #1
 8012ad0:	440b      	add	r3, r1
 8012ad2:	6123      	str	r3, [r4, #16]
 8012ad4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012ad6:	65a3      	str	r3, [r4, #88]	; 0x58
 8012ad8:	f04f 0900 	mov.w	r9, #0
 8012adc:	e7d9      	b.n	8012a92 <_printf_float+0x152>
 8012ade:	b913      	cbnz	r3, 8012ae6 <_printf_float+0x1a6>
 8012ae0:	6822      	ldr	r2, [r4, #0]
 8012ae2:	07d0      	lsls	r0, r2, #31
 8012ae4:	d501      	bpl.n	8012aea <_printf_float+0x1aa>
 8012ae6:	3302      	adds	r3, #2
 8012ae8:	e7f3      	b.n	8012ad2 <_printf_float+0x192>
 8012aea:	2301      	movs	r3, #1
 8012aec:	e7f1      	b.n	8012ad2 <_printf_float+0x192>
 8012aee:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8012af2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8012af6:	4293      	cmp	r3, r2
 8012af8:	db05      	blt.n	8012b06 <_printf_float+0x1c6>
 8012afa:	6822      	ldr	r2, [r4, #0]
 8012afc:	6123      	str	r3, [r4, #16]
 8012afe:	07d1      	lsls	r1, r2, #31
 8012b00:	d5e8      	bpl.n	8012ad4 <_printf_float+0x194>
 8012b02:	3301      	adds	r3, #1
 8012b04:	e7e5      	b.n	8012ad2 <_printf_float+0x192>
 8012b06:	2b00      	cmp	r3, #0
 8012b08:	bfd4      	ite	le
 8012b0a:	f1c3 0302 	rsble	r3, r3, #2
 8012b0e:	2301      	movgt	r3, #1
 8012b10:	4413      	add	r3, r2
 8012b12:	e7de      	b.n	8012ad2 <_printf_float+0x192>
 8012b14:	6823      	ldr	r3, [r4, #0]
 8012b16:	055a      	lsls	r2, r3, #21
 8012b18:	d407      	bmi.n	8012b2a <_printf_float+0x1ea>
 8012b1a:	6923      	ldr	r3, [r4, #16]
 8012b1c:	4642      	mov	r2, r8
 8012b1e:	4631      	mov	r1, r6
 8012b20:	4628      	mov	r0, r5
 8012b22:	47b8      	blx	r7
 8012b24:	3001      	adds	r0, #1
 8012b26:	d12b      	bne.n	8012b80 <_printf_float+0x240>
 8012b28:	e767      	b.n	80129fa <_printf_float+0xba>
 8012b2a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8012b2e:	f240 80dc 	bls.w	8012cea <_printf_float+0x3aa>
 8012b32:	2200      	movs	r2, #0
 8012b34:	2300      	movs	r3, #0
 8012b36:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012b3a:	f7ed ffdd 	bl	8000af8 <__aeabi_dcmpeq>
 8012b3e:	2800      	cmp	r0, #0
 8012b40:	d033      	beq.n	8012baa <_printf_float+0x26a>
 8012b42:	2301      	movs	r3, #1
 8012b44:	4a41      	ldr	r2, [pc, #260]	; (8012c4c <_printf_float+0x30c>)
 8012b46:	4631      	mov	r1, r6
 8012b48:	4628      	mov	r0, r5
 8012b4a:	47b8      	blx	r7
 8012b4c:	3001      	adds	r0, #1
 8012b4e:	f43f af54 	beq.w	80129fa <_printf_float+0xba>
 8012b52:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012b56:	429a      	cmp	r2, r3
 8012b58:	db02      	blt.n	8012b60 <_printf_float+0x220>
 8012b5a:	6823      	ldr	r3, [r4, #0]
 8012b5c:	07d8      	lsls	r0, r3, #31
 8012b5e:	d50f      	bpl.n	8012b80 <_printf_float+0x240>
 8012b60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012b64:	4631      	mov	r1, r6
 8012b66:	4628      	mov	r0, r5
 8012b68:	47b8      	blx	r7
 8012b6a:	3001      	adds	r0, #1
 8012b6c:	f43f af45 	beq.w	80129fa <_printf_float+0xba>
 8012b70:	f04f 0800 	mov.w	r8, #0
 8012b74:	f104 091a 	add.w	r9, r4, #26
 8012b78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012b7a:	3b01      	subs	r3, #1
 8012b7c:	4543      	cmp	r3, r8
 8012b7e:	dc09      	bgt.n	8012b94 <_printf_float+0x254>
 8012b80:	6823      	ldr	r3, [r4, #0]
 8012b82:	079b      	lsls	r3, r3, #30
 8012b84:	f100 8103 	bmi.w	8012d8e <_printf_float+0x44e>
 8012b88:	68e0      	ldr	r0, [r4, #12]
 8012b8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012b8c:	4298      	cmp	r0, r3
 8012b8e:	bfb8      	it	lt
 8012b90:	4618      	movlt	r0, r3
 8012b92:	e734      	b.n	80129fe <_printf_float+0xbe>
 8012b94:	2301      	movs	r3, #1
 8012b96:	464a      	mov	r2, r9
 8012b98:	4631      	mov	r1, r6
 8012b9a:	4628      	mov	r0, r5
 8012b9c:	47b8      	blx	r7
 8012b9e:	3001      	adds	r0, #1
 8012ba0:	f43f af2b 	beq.w	80129fa <_printf_float+0xba>
 8012ba4:	f108 0801 	add.w	r8, r8, #1
 8012ba8:	e7e6      	b.n	8012b78 <_printf_float+0x238>
 8012baa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	dc2b      	bgt.n	8012c08 <_printf_float+0x2c8>
 8012bb0:	2301      	movs	r3, #1
 8012bb2:	4a26      	ldr	r2, [pc, #152]	; (8012c4c <_printf_float+0x30c>)
 8012bb4:	4631      	mov	r1, r6
 8012bb6:	4628      	mov	r0, r5
 8012bb8:	47b8      	blx	r7
 8012bba:	3001      	adds	r0, #1
 8012bbc:	f43f af1d 	beq.w	80129fa <_printf_float+0xba>
 8012bc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012bc2:	b923      	cbnz	r3, 8012bce <_printf_float+0x28e>
 8012bc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012bc6:	b913      	cbnz	r3, 8012bce <_printf_float+0x28e>
 8012bc8:	6823      	ldr	r3, [r4, #0]
 8012bca:	07d9      	lsls	r1, r3, #31
 8012bcc:	d5d8      	bpl.n	8012b80 <_printf_float+0x240>
 8012bce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012bd2:	4631      	mov	r1, r6
 8012bd4:	4628      	mov	r0, r5
 8012bd6:	47b8      	blx	r7
 8012bd8:	3001      	adds	r0, #1
 8012bda:	f43f af0e 	beq.w	80129fa <_printf_float+0xba>
 8012bde:	f04f 0900 	mov.w	r9, #0
 8012be2:	f104 0a1a 	add.w	sl, r4, #26
 8012be6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012be8:	425b      	negs	r3, r3
 8012bea:	454b      	cmp	r3, r9
 8012bec:	dc01      	bgt.n	8012bf2 <_printf_float+0x2b2>
 8012bee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012bf0:	e794      	b.n	8012b1c <_printf_float+0x1dc>
 8012bf2:	2301      	movs	r3, #1
 8012bf4:	4652      	mov	r2, sl
 8012bf6:	4631      	mov	r1, r6
 8012bf8:	4628      	mov	r0, r5
 8012bfa:	47b8      	blx	r7
 8012bfc:	3001      	adds	r0, #1
 8012bfe:	f43f aefc 	beq.w	80129fa <_printf_float+0xba>
 8012c02:	f109 0901 	add.w	r9, r9, #1
 8012c06:	e7ee      	b.n	8012be6 <_printf_float+0x2a6>
 8012c08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012c0a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012c0c:	429a      	cmp	r2, r3
 8012c0e:	bfa8      	it	ge
 8012c10:	461a      	movge	r2, r3
 8012c12:	2a00      	cmp	r2, #0
 8012c14:	4691      	mov	r9, r2
 8012c16:	dd07      	ble.n	8012c28 <_printf_float+0x2e8>
 8012c18:	4613      	mov	r3, r2
 8012c1a:	4631      	mov	r1, r6
 8012c1c:	4642      	mov	r2, r8
 8012c1e:	4628      	mov	r0, r5
 8012c20:	47b8      	blx	r7
 8012c22:	3001      	adds	r0, #1
 8012c24:	f43f aee9 	beq.w	80129fa <_printf_float+0xba>
 8012c28:	f104 031a 	add.w	r3, r4, #26
 8012c2c:	f04f 0b00 	mov.w	fp, #0
 8012c30:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012c34:	9306      	str	r3, [sp, #24]
 8012c36:	e015      	b.n	8012c64 <_printf_float+0x324>
 8012c38:	7fefffff 	.word	0x7fefffff
 8012c3c:	08017d30 	.word	0x08017d30
 8012c40:	08017d2c 	.word	0x08017d2c
 8012c44:	08017d38 	.word	0x08017d38
 8012c48:	08017d34 	.word	0x08017d34
 8012c4c:	08017f5b 	.word	0x08017f5b
 8012c50:	2301      	movs	r3, #1
 8012c52:	9a06      	ldr	r2, [sp, #24]
 8012c54:	4631      	mov	r1, r6
 8012c56:	4628      	mov	r0, r5
 8012c58:	47b8      	blx	r7
 8012c5a:	3001      	adds	r0, #1
 8012c5c:	f43f aecd 	beq.w	80129fa <_printf_float+0xba>
 8012c60:	f10b 0b01 	add.w	fp, fp, #1
 8012c64:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8012c68:	ebaa 0309 	sub.w	r3, sl, r9
 8012c6c:	455b      	cmp	r3, fp
 8012c6e:	dcef      	bgt.n	8012c50 <_printf_float+0x310>
 8012c70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012c74:	429a      	cmp	r2, r3
 8012c76:	44d0      	add	r8, sl
 8012c78:	db15      	blt.n	8012ca6 <_printf_float+0x366>
 8012c7a:	6823      	ldr	r3, [r4, #0]
 8012c7c:	07da      	lsls	r2, r3, #31
 8012c7e:	d412      	bmi.n	8012ca6 <_printf_float+0x366>
 8012c80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012c82:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012c84:	eba3 020a 	sub.w	r2, r3, sl
 8012c88:	eba3 0a01 	sub.w	sl, r3, r1
 8012c8c:	4592      	cmp	sl, r2
 8012c8e:	bfa8      	it	ge
 8012c90:	4692      	movge	sl, r2
 8012c92:	f1ba 0f00 	cmp.w	sl, #0
 8012c96:	dc0e      	bgt.n	8012cb6 <_printf_float+0x376>
 8012c98:	f04f 0800 	mov.w	r8, #0
 8012c9c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012ca0:	f104 091a 	add.w	r9, r4, #26
 8012ca4:	e019      	b.n	8012cda <_printf_float+0x39a>
 8012ca6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012caa:	4631      	mov	r1, r6
 8012cac:	4628      	mov	r0, r5
 8012cae:	47b8      	blx	r7
 8012cb0:	3001      	adds	r0, #1
 8012cb2:	d1e5      	bne.n	8012c80 <_printf_float+0x340>
 8012cb4:	e6a1      	b.n	80129fa <_printf_float+0xba>
 8012cb6:	4653      	mov	r3, sl
 8012cb8:	4642      	mov	r2, r8
 8012cba:	4631      	mov	r1, r6
 8012cbc:	4628      	mov	r0, r5
 8012cbe:	47b8      	blx	r7
 8012cc0:	3001      	adds	r0, #1
 8012cc2:	d1e9      	bne.n	8012c98 <_printf_float+0x358>
 8012cc4:	e699      	b.n	80129fa <_printf_float+0xba>
 8012cc6:	2301      	movs	r3, #1
 8012cc8:	464a      	mov	r2, r9
 8012cca:	4631      	mov	r1, r6
 8012ccc:	4628      	mov	r0, r5
 8012cce:	47b8      	blx	r7
 8012cd0:	3001      	adds	r0, #1
 8012cd2:	f43f ae92 	beq.w	80129fa <_printf_float+0xba>
 8012cd6:	f108 0801 	add.w	r8, r8, #1
 8012cda:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012cde:	1a9b      	subs	r3, r3, r2
 8012ce0:	eba3 030a 	sub.w	r3, r3, sl
 8012ce4:	4543      	cmp	r3, r8
 8012ce6:	dcee      	bgt.n	8012cc6 <_printf_float+0x386>
 8012ce8:	e74a      	b.n	8012b80 <_printf_float+0x240>
 8012cea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012cec:	2a01      	cmp	r2, #1
 8012cee:	dc01      	bgt.n	8012cf4 <_printf_float+0x3b4>
 8012cf0:	07db      	lsls	r3, r3, #31
 8012cf2:	d53a      	bpl.n	8012d6a <_printf_float+0x42a>
 8012cf4:	2301      	movs	r3, #1
 8012cf6:	4642      	mov	r2, r8
 8012cf8:	4631      	mov	r1, r6
 8012cfa:	4628      	mov	r0, r5
 8012cfc:	47b8      	blx	r7
 8012cfe:	3001      	adds	r0, #1
 8012d00:	f43f ae7b 	beq.w	80129fa <_printf_float+0xba>
 8012d04:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012d08:	4631      	mov	r1, r6
 8012d0a:	4628      	mov	r0, r5
 8012d0c:	47b8      	blx	r7
 8012d0e:	3001      	adds	r0, #1
 8012d10:	f108 0801 	add.w	r8, r8, #1
 8012d14:	f43f ae71 	beq.w	80129fa <_printf_float+0xba>
 8012d18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012d1a:	2200      	movs	r2, #0
 8012d1c:	f103 3aff 	add.w	sl, r3, #4294967295
 8012d20:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012d24:	2300      	movs	r3, #0
 8012d26:	f7ed fee7 	bl	8000af8 <__aeabi_dcmpeq>
 8012d2a:	b9c8      	cbnz	r0, 8012d60 <_printf_float+0x420>
 8012d2c:	4653      	mov	r3, sl
 8012d2e:	4642      	mov	r2, r8
 8012d30:	4631      	mov	r1, r6
 8012d32:	4628      	mov	r0, r5
 8012d34:	47b8      	blx	r7
 8012d36:	3001      	adds	r0, #1
 8012d38:	d10e      	bne.n	8012d58 <_printf_float+0x418>
 8012d3a:	e65e      	b.n	80129fa <_printf_float+0xba>
 8012d3c:	2301      	movs	r3, #1
 8012d3e:	4652      	mov	r2, sl
 8012d40:	4631      	mov	r1, r6
 8012d42:	4628      	mov	r0, r5
 8012d44:	47b8      	blx	r7
 8012d46:	3001      	adds	r0, #1
 8012d48:	f43f ae57 	beq.w	80129fa <_printf_float+0xba>
 8012d4c:	f108 0801 	add.w	r8, r8, #1
 8012d50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012d52:	3b01      	subs	r3, #1
 8012d54:	4543      	cmp	r3, r8
 8012d56:	dcf1      	bgt.n	8012d3c <_printf_float+0x3fc>
 8012d58:	464b      	mov	r3, r9
 8012d5a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8012d5e:	e6de      	b.n	8012b1e <_printf_float+0x1de>
 8012d60:	f04f 0800 	mov.w	r8, #0
 8012d64:	f104 0a1a 	add.w	sl, r4, #26
 8012d68:	e7f2      	b.n	8012d50 <_printf_float+0x410>
 8012d6a:	2301      	movs	r3, #1
 8012d6c:	e7df      	b.n	8012d2e <_printf_float+0x3ee>
 8012d6e:	2301      	movs	r3, #1
 8012d70:	464a      	mov	r2, r9
 8012d72:	4631      	mov	r1, r6
 8012d74:	4628      	mov	r0, r5
 8012d76:	47b8      	blx	r7
 8012d78:	3001      	adds	r0, #1
 8012d7a:	f43f ae3e 	beq.w	80129fa <_printf_float+0xba>
 8012d7e:	f108 0801 	add.w	r8, r8, #1
 8012d82:	68e3      	ldr	r3, [r4, #12]
 8012d84:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012d86:	1a9b      	subs	r3, r3, r2
 8012d88:	4543      	cmp	r3, r8
 8012d8a:	dcf0      	bgt.n	8012d6e <_printf_float+0x42e>
 8012d8c:	e6fc      	b.n	8012b88 <_printf_float+0x248>
 8012d8e:	f04f 0800 	mov.w	r8, #0
 8012d92:	f104 0919 	add.w	r9, r4, #25
 8012d96:	e7f4      	b.n	8012d82 <_printf_float+0x442>
 8012d98:	2900      	cmp	r1, #0
 8012d9a:	f43f ae8b 	beq.w	8012ab4 <_printf_float+0x174>
 8012d9e:	2300      	movs	r3, #0
 8012da0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8012da4:	ab09      	add	r3, sp, #36	; 0x24
 8012da6:	9300      	str	r3, [sp, #0]
 8012da8:	ec49 8b10 	vmov	d0, r8, r9
 8012dac:	6022      	str	r2, [r4, #0]
 8012dae:	f8cd a004 	str.w	sl, [sp, #4]
 8012db2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8012db6:	4628      	mov	r0, r5
 8012db8:	f7ff fd2d 	bl	8012816 <__cvt>
 8012dbc:	4680      	mov	r8, r0
 8012dbe:	e648      	b.n	8012a52 <_printf_float+0x112>

08012dc0 <_printf_common>:
 8012dc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012dc4:	4691      	mov	r9, r2
 8012dc6:	461f      	mov	r7, r3
 8012dc8:	688a      	ldr	r2, [r1, #8]
 8012dca:	690b      	ldr	r3, [r1, #16]
 8012dcc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012dd0:	4293      	cmp	r3, r2
 8012dd2:	bfb8      	it	lt
 8012dd4:	4613      	movlt	r3, r2
 8012dd6:	f8c9 3000 	str.w	r3, [r9]
 8012dda:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012dde:	4606      	mov	r6, r0
 8012de0:	460c      	mov	r4, r1
 8012de2:	b112      	cbz	r2, 8012dea <_printf_common+0x2a>
 8012de4:	3301      	adds	r3, #1
 8012de6:	f8c9 3000 	str.w	r3, [r9]
 8012dea:	6823      	ldr	r3, [r4, #0]
 8012dec:	0699      	lsls	r1, r3, #26
 8012dee:	bf42      	ittt	mi
 8012df0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8012df4:	3302      	addmi	r3, #2
 8012df6:	f8c9 3000 	strmi.w	r3, [r9]
 8012dfa:	6825      	ldr	r5, [r4, #0]
 8012dfc:	f015 0506 	ands.w	r5, r5, #6
 8012e00:	d107      	bne.n	8012e12 <_printf_common+0x52>
 8012e02:	f104 0a19 	add.w	sl, r4, #25
 8012e06:	68e3      	ldr	r3, [r4, #12]
 8012e08:	f8d9 2000 	ldr.w	r2, [r9]
 8012e0c:	1a9b      	subs	r3, r3, r2
 8012e0e:	42ab      	cmp	r3, r5
 8012e10:	dc28      	bgt.n	8012e64 <_printf_common+0xa4>
 8012e12:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8012e16:	6822      	ldr	r2, [r4, #0]
 8012e18:	3300      	adds	r3, #0
 8012e1a:	bf18      	it	ne
 8012e1c:	2301      	movne	r3, #1
 8012e1e:	0692      	lsls	r2, r2, #26
 8012e20:	d42d      	bmi.n	8012e7e <_printf_common+0xbe>
 8012e22:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012e26:	4639      	mov	r1, r7
 8012e28:	4630      	mov	r0, r6
 8012e2a:	47c0      	blx	r8
 8012e2c:	3001      	adds	r0, #1
 8012e2e:	d020      	beq.n	8012e72 <_printf_common+0xb2>
 8012e30:	6823      	ldr	r3, [r4, #0]
 8012e32:	68e5      	ldr	r5, [r4, #12]
 8012e34:	f8d9 2000 	ldr.w	r2, [r9]
 8012e38:	f003 0306 	and.w	r3, r3, #6
 8012e3c:	2b04      	cmp	r3, #4
 8012e3e:	bf08      	it	eq
 8012e40:	1aad      	subeq	r5, r5, r2
 8012e42:	68a3      	ldr	r3, [r4, #8]
 8012e44:	6922      	ldr	r2, [r4, #16]
 8012e46:	bf0c      	ite	eq
 8012e48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012e4c:	2500      	movne	r5, #0
 8012e4e:	4293      	cmp	r3, r2
 8012e50:	bfc4      	itt	gt
 8012e52:	1a9b      	subgt	r3, r3, r2
 8012e54:	18ed      	addgt	r5, r5, r3
 8012e56:	f04f 0900 	mov.w	r9, #0
 8012e5a:	341a      	adds	r4, #26
 8012e5c:	454d      	cmp	r5, r9
 8012e5e:	d11a      	bne.n	8012e96 <_printf_common+0xd6>
 8012e60:	2000      	movs	r0, #0
 8012e62:	e008      	b.n	8012e76 <_printf_common+0xb6>
 8012e64:	2301      	movs	r3, #1
 8012e66:	4652      	mov	r2, sl
 8012e68:	4639      	mov	r1, r7
 8012e6a:	4630      	mov	r0, r6
 8012e6c:	47c0      	blx	r8
 8012e6e:	3001      	adds	r0, #1
 8012e70:	d103      	bne.n	8012e7a <_printf_common+0xba>
 8012e72:	f04f 30ff 	mov.w	r0, #4294967295
 8012e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012e7a:	3501      	adds	r5, #1
 8012e7c:	e7c3      	b.n	8012e06 <_printf_common+0x46>
 8012e7e:	18e1      	adds	r1, r4, r3
 8012e80:	1c5a      	adds	r2, r3, #1
 8012e82:	2030      	movs	r0, #48	; 0x30
 8012e84:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012e88:	4422      	add	r2, r4
 8012e8a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012e8e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012e92:	3302      	adds	r3, #2
 8012e94:	e7c5      	b.n	8012e22 <_printf_common+0x62>
 8012e96:	2301      	movs	r3, #1
 8012e98:	4622      	mov	r2, r4
 8012e9a:	4639      	mov	r1, r7
 8012e9c:	4630      	mov	r0, r6
 8012e9e:	47c0      	blx	r8
 8012ea0:	3001      	adds	r0, #1
 8012ea2:	d0e6      	beq.n	8012e72 <_printf_common+0xb2>
 8012ea4:	f109 0901 	add.w	r9, r9, #1
 8012ea8:	e7d8      	b.n	8012e5c <_printf_common+0x9c>
	...

08012eac <_printf_i>:
 8012eac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012eb0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8012eb4:	460c      	mov	r4, r1
 8012eb6:	7e09      	ldrb	r1, [r1, #24]
 8012eb8:	b085      	sub	sp, #20
 8012eba:	296e      	cmp	r1, #110	; 0x6e
 8012ebc:	4617      	mov	r7, r2
 8012ebe:	4606      	mov	r6, r0
 8012ec0:	4698      	mov	r8, r3
 8012ec2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012ec4:	f000 80b3 	beq.w	801302e <_printf_i+0x182>
 8012ec8:	d822      	bhi.n	8012f10 <_printf_i+0x64>
 8012eca:	2963      	cmp	r1, #99	; 0x63
 8012ecc:	d036      	beq.n	8012f3c <_printf_i+0x90>
 8012ece:	d80a      	bhi.n	8012ee6 <_printf_i+0x3a>
 8012ed0:	2900      	cmp	r1, #0
 8012ed2:	f000 80b9 	beq.w	8013048 <_printf_i+0x19c>
 8012ed6:	2958      	cmp	r1, #88	; 0x58
 8012ed8:	f000 8083 	beq.w	8012fe2 <_printf_i+0x136>
 8012edc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012ee0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8012ee4:	e032      	b.n	8012f4c <_printf_i+0xa0>
 8012ee6:	2964      	cmp	r1, #100	; 0x64
 8012ee8:	d001      	beq.n	8012eee <_printf_i+0x42>
 8012eea:	2969      	cmp	r1, #105	; 0x69
 8012eec:	d1f6      	bne.n	8012edc <_printf_i+0x30>
 8012eee:	6820      	ldr	r0, [r4, #0]
 8012ef0:	6813      	ldr	r3, [r2, #0]
 8012ef2:	0605      	lsls	r5, r0, #24
 8012ef4:	f103 0104 	add.w	r1, r3, #4
 8012ef8:	d52a      	bpl.n	8012f50 <_printf_i+0xa4>
 8012efa:	681b      	ldr	r3, [r3, #0]
 8012efc:	6011      	str	r1, [r2, #0]
 8012efe:	2b00      	cmp	r3, #0
 8012f00:	da03      	bge.n	8012f0a <_printf_i+0x5e>
 8012f02:	222d      	movs	r2, #45	; 0x2d
 8012f04:	425b      	negs	r3, r3
 8012f06:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8012f0a:	486f      	ldr	r0, [pc, #444]	; (80130c8 <_printf_i+0x21c>)
 8012f0c:	220a      	movs	r2, #10
 8012f0e:	e039      	b.n	8012f84 <_printf_i+0xd8>
 8012f10:	2973      	cmp	r1, #115	; 0x73
 8012f12:	f000 809d 	beq.w	8013050 <_printf_i+0x1a4>
 8012f16:	d808      	bhi.n	8012f2a <_printf_i+0x7e>
 8012f18:	296f      	cmp	r1, #111	; 0x6f
 8012f1a:	d020      	beq.n	8012f5e <_printf_i+0xb2>
 8012f1c:	2970      	cmp	r1, #112	; 0x70
 8012f1e:	d1dd      	bne.n	8012edc <_printf_i+0x30>
 8012f20:	6823      	ldr	r3, [r4, #0]
 8012f22:	f043 0320 	orr.w	r3, r3, #32
 8012f26:	6023      	str	r3, [r4, #0]
 8012f28:	e003      	b.n	8012f32 <_printf_i+0x86>
 8012f2a:	2975      	cmp	r1, #117	; 0x75
 8012f2c:	d017      	beq.n	8012f5e <_printf_i+0xb2>
 8012f2e:	2978      	cmp	r1, #120	; 0x78
 8012f30:	d1d4      	bne.n	8012edc <_printf_i+0x30>
 8012f32:	2378      	movs	r3, #120	; 0x78
 8012f34:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012f38:	4864      	ldr	r0, [pc, #400]	; (80130cc <_printf_i+0x220>)
 8012f3a:	e055      	b.n	8012fe8 <_printf_i+0x13c>
 8012f3c:	6813      	ldr	r3, [r2, #0]
 8012f3e:	1d19      	adds	r1, r3, #4
 8012f40:	681b      	ldr	r3, [r3, #0]
 8012f42:	6011      	str	r1, [r2, #0]
 8012f44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012f48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012f4c:	2301      	movs	r3, #1
 8012f4e:	e08c      	b.n	801306a <_printf_i+0x1be>
 8012f50:	681b      	ldr	r3, [r3, #0]
 8012f52:	6011      	str	r1, [r2, #0]
 8012f54:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012f58:	bf18      	it	ne
 8012f5a:	b21b      	sxthne	r3, r3
 8012f5c:	e7cf      	b.n	8012efe <_printf_i+0x52>
 8012f5e:	6813      	ldr	r3, [r2, #0]
 8012f60:	6825      	ldr	r5, [r4, #0]
 8012f62:	1d18      	adds	r0, r3, #4
 8012f64:	6010      	str	r0, [r2, #0]
 8012f66:	0628      	lsls	r0, r5, #24
 8012f68:	d501      	bpl.n	8012f6e <_printf_i+0xc2>
 8012f6a:	681b      	ldr	r3, [r3, #0]
 8012f6c:	e002      	b.n	8012f74 <_printf_i+0xc8>
 8012f6e:	0668      	lsls	r0, r5, #25
 8012f70:	d5fb      	bpl.n	8012f6a <_printf_i+0xbe>
 8012f72:	881b      	ldrh	r3, [r3, #0]
 8012f74:	4854      	ldr	r0, [pc, #336]	; (80130c8 <_printf_i+0x21c>)
 8012f76:	296f      	cmp	r1, #111	; 0x6f
 8012f78:	bf14      	ite	ne
 8012f7a:	220a      	movne	r2, #10
 8012f7c:	2208      	moveq	r2, #8
 8012f7e:	2100      	movs	r1, #0
 8012f80:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012f84:	6865      	ldr	r5, [r4, #4]
 8012f86:	60a5      	str	r5, [r4, #8]
 8012f88:	2d00      	cmp	r5, #0
 8012f8a:	f2c0 8095 	blt.w	80130b8 <_printf_i+0x20c>
 8012f8e:	6821      	ldr	r1, [r4, #0]
 8012f90:	f021 0104 	bic.w	r1, r1, #4
 8012f94:	6021      	str	r1, [r4, #0]
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	d13d      	bne.n	8013016 <_printf_i+0x16a>
 8012f9a:	2d00      	cmp	r5, #0
 8012f9c:	f040 808e 	bne.w	80130bc <_printf_i+0x210>
 8012fa0:	4665      	mov	r5, ip
 8012fa2:	2a08      	cmp	r2, #8
 8012fa4:	d10b      	bne.n	8012fbe <_printf_i+0x112>
 8012fa6:	6823      	ldr	r3, [r4, #0]
 8012fa8:	07db      	lsls	r3, r3, #31
 8012faa:	d508      	bpl.n	8012fbe <_printf_i+0x112>
 8012fac:	6923      	ldr	r3, [r4, #16]
 8012fae:	6862      	ldr	r2, [r4, #4]
 8012fb0:	429a      	cmp	r2, r3
 8012fb2:	bfde      	ittt	le
 8012fb4:	2330      	movle	r3, #48	; 0x30
 8012fb6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012fba:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012fbe:	ebac 0305 	sub.w	r3, ip, r5
 8012fc2:	6123      	str	r3, [r4, #16]
 8012fc4:	f8cd 8000 	str.w	r8, [sp]
 8012fc8:	463b      	mov	r3, r7
 8012fca:	aa03      	add	r2, sp, #12
 8012fcc:	4621      	mov	r1, r4
 8012fce:	4630      	mov	r0, r6
 8012fd0:	f7ff fef6 	bl	8012dc0 <_printf_common>
 8012fd4:	3001      	adds	r0, #1
 8012fd6:	d14d      	bne.n	8013074 <_printf_i+0x1c8>
 8012fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8012fdc:	b005      	add	sp, #20
 8012fde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012fe2:	4839      	ldr	r0, [pc, #228]	; (80130c8 <_printf_i+0x21c>)
 8012fe4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8012fe8:	6813      	ldr	r3, [r2, #0]
 8012fea:	6821      	ldr	r1, [r4, #0]
 8012fec:	1d1d      	adds	r5, r3, #4
 8012fee:	681b      	ldr	r3, [r3, #0]
 8012ff0:	6015      	str	r5, [r2, #0]
 8012ff2:	060a      	lsls	r2, r1, #24
 8012ff4:	d50b      	bpl.n	801300e <_printf_i+0x162>
 8012ff6:	07ca      	lsls	r2, r1, #31
 8012ff8:	bf44      	itt	mi
 8012ffa:	f041 0120 	orrmi.w	r1, r1, #32
 8012ffe:	6021      	strmi	r1, [r4, #0]
 8013000:	b91b      	cbnz	r3, 801300a <_printf_i+0x15e>
 8013002:	6822      	ldr	r2, [r4, #0]
 8013004:	f022 0220 	bic.w	r2, r2, #32
 8013008:	6022      	str	r2, [r4, #0]
 801300a:	2210      	movs	r2, #16
 801300c:	e7b7      	b.n	8012f7e <_printf_i+0xd2>
 801300e:	064d      	lsls	r5, r1, #25
 8013010:	bf48      	it	mi
 8013012:	b29b      	uxthmi	r3, r3
 8013014:	e7ef      	b.n	8012ff6 <_printf_i+0x14a>
 8013016:	4665      	mov	r5, ip
 8013018:	fbb3 f1f2 	udiv	r1, r3, r2
 801301c:	fb02 3311 	mls	r3, r2, r1, r3
 8013020:	5cc3      	ldrb	r3, [r0, r3]
 8013022:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8013026:	460b      	mov	r3, r1
 8013028:	2900      	cmp	r1, #0
 801302a:	d1f5      	bne.n	8013018 <_printf_i+0x16c>
 801302c:	e7b9      	b.n	8012fa2 <_printf_i+0xf6>
 801302e:	6813      	ldr	r3, [r2, #0]
 8013030:	6825      	ldr	r5, [r4, #0]
 8013032:	6961      	ldr	r1, [r4, #20]
 8013034:	1d18      	adds	r0, r3, #4
 8013036:	6010      	str	r0, [r2, #0]
 8013038:	0628      	lsls	r0, r5, #24
 801303a:	681b      	ldr	r3, [r3, #0]
 801303c:	d501      	bpl.n	8013042 <_printf_i+0x196>
 801303e:	6019      	str	r1, [r3, #0]
 8013040:	e002      	b.n	8013048 <_printf_i+0x19c>
 8013042:	066a      	lsls	r2, r5, #25
 8013044:	d5fb      	bpl.n	801303e <_printf_i+0x192>
 8013046:	8019      	strh	r1, [r3, #0]
 8013048:	2300      	movs	r3, #0
 801304a:	6123      	str	r3, [r4, #16]
 801304c:	4665      	mov	r5, ip
 801304e:	e7b9      	b.n	8012fc4 <_printf_i+0x118>
 8013050:	6813      	ldr	r3, [r2, #0]
 8013052:	1d19      	adds	r1, r3, #4
 8013054:	6011      	str	r1, [r2, #0]
 8013056:	681d      	ldr	r5, [r3, #0]
 8013058:	6862      	ldr	r2, [r4, #4]
 801305a:	2100      	movs	r1, #0
 801305c:	4628      	mov	r0, r5
 801305e:	f7ed f8d7 	bl	8000210 <memchr>
 8013062:	b108      	cbz	r0, 8013068 <_printf_i+0x1bc>
 8013064:	1b40      	subs	r0, r0, r5
 8013066:	6060      	str	r0, [r4, #4]
 8013068:	6863      	ldr	r3, [r4, #4]
 801306a:	6123      	str	r3, [r4, #16]
 801306c:	2300      	movs	r3, #0
 801306e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013072:	e7a7      	b.n	8012fc4 <_printf_i+0x118>
 8013074:	6923      	ldr	r3, [r4, #16]
 8013076:	462a      	mov	r2, r5
 8013078:	4639      	mov	r1, r7
 801307a:	4630      	mov	r0, r6
 801307c:	47c0      	blx	r8
 801307e:	3001      	adds	r0, #1
 8013080:	d0aa      	beq.n	8012fd8 <_printf_i+0x12c>
 8013082:	6823      	ldr	r3, [r4, #0]
 8013084:	079b      	lsls	r3, r3, #30
 8013086:	d413      	bmi.n	80130b0 <_printf_i+0x204>
 8013088:	68e0      	ldr	r0, [r4, #12]
 801308a:	9b03      	ldr	r3, [sp, #12]
 801308c:	4298      	cmp	r0, r3
 801308e:	bfb8      	it	lt
 8013090:	4618      	movlt	r0, r3
 8013092:	e7a3      	b.n	8012fdc <_printf_i+0x130>
 8013094:	2301      	movs	r3, #1
 8013096:	464a      	mov	r2, r9
 8013098:	4639      	mov	r1, r7
 801309a:	4630      	mov	r0, r6
 801309c:	47c0      	blx	r8
 801309e:	3001      	adds	r0, #1
 80130a0:	d09a      	beq.n	8012fd8 <_printf_i+0x12c>
 80130a2:	3501      	adds	r5, #1
 80130a4:	68e3      	ldr	r3, [r4, #12]
 80130a6:	9a03      	ldr	r2, [sp, #12]
 80130a8:	1a9b      	subs	r3, r3, r2
 80130aa:	42ab      	cmp	r3, r5
 80130ac:	dcf2      	bgt.n	8013094 <_printf_i+0x1e8>
 80130ae:	e7eb      	b.n	8013088 <_printf_i+0x1dc>
 80130b0:	2500      	movs	r5, #0
 80130b2:	f104 0919 	add.w	r9, r4, #25
 80130b6:	e7f5      	b.n	80130a4 <_printf_i+0x1f8>
 80130b8:	2b00      	cmp	r3, #0
 80130ba:	d1ac      	bne.n	8013016 <_printf_i+0x16a>
 80130bc:	7803      	ldrb	r3, [r0, #0]
 80130be:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80130c2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80130c6:	e76c      	b.n	8012fa2 <_printf_i+0xf6>
 80130c8:	08017d3c 	.word	0x08017d3c
 80130cc:	08017d4d 	.word	0x08017d4d

080130d0 <_scanf_float>:
 80130d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130d4:	469a      	mov	sl, r3
 80130d6:	688b      	ldr	r3, [r1, #8]
 80130d8:	4616      	mov	r6, r2
 80130da:	1e5a      	subs	r2, r3, #1
 80130dc:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80130e0:	b087      	sub	sp, #28
 80130e2:	bf83      	ittte	hi
 80130e4:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 80130e8:	189b      	addhi	r3, r3, r2
 80130ea:	9301      	strhi	r3, [sp, #4]
 80130ec:	2300      	movls	r3, #0
 80130ee:	bf86      	itte	hi
 80130f0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80130f4:	608b      	strhi	r3, [r1, #8]
 80130f6:	9301      	strls	r3, [sp, #4]
 80130f8:	680b      	ldr	r3, [r1, #0]
 80130fa:	4688      	mov	r8, r1
 80130fc:	f04f 0b00 	mov.w	fp, #0
 8013100:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8013104:	f848 3b1c 	str.w	r3, [r8], #28
 8013108:	e9cd bb03 	strd	fp, fp, [sp, #12]
 801310c:	4607      	mov	r7, r0
 801310e:	460c      	mov	r4, r1
 8013110:	4645      	mov	r5, r8
 8013112:	465a      	mov	r2, fp
 8013114:	46d9      	mov	r9, fp
 8013116:	f8cd b008 	str.w	fp, [sp, #8]
 801311a:	68a1      	ldr	r1, [r4, #8]
 801311c:	b181      	cbz	r1, 8013140 <_scanf_float+0x70>
 801311e:	6833      	ldr	r3, [r6, #0]
 8013120:	781b      	ldrb	r3, [r3, #0]
 8013122:	2b49      	cmp	r3, #73	; 0x49
 8013124:	d071      	beq.n	801320a <_scanf_float+0x13a>
 8013126:	d84d      	bhi.n	80131c4 <_scanf_float+0xf4>
 8013128:	2b39      	cmp	r3, #57	; 0x39
 801312a:	d840      	bhi.n	80131ae <_scanf_float+0xde>
 801312c:	2b31      	cmp	r3, #49	; 0x31
 801312e:	f080 8088 	bcs.w	8013242 <_scanf_float+0x172>
 8013132:	2b2d      	cmp	r3, #45	; 0x2d
 8013134:	f000 8090 	beq.w	8013258 <_scanf_float+0x188>
 8013138:	d815      	bhi.n	8013166 <_scanf_float+0x96>
 801313a:	2b2b      	cmp	r3, #43	; 0x2b
 801313c:	f000 808c 	beq.w	8013258 <_scanf_float+0x188>
 8013140:	f1b9 0f00 	cmp.w	r9, #0
 8013144:	d003      	beq.n	801314e <_scanf_float+0x7e>
 8013146:	6823      	ldr	r3, [r4, #0]
 8013148:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801314c:	6023      	str	r3, [r4, #0]
 801314e:	3a01      	subs	r2, #1
 8013150:	2a01      	cmp	r2, #1
 8013152:	f200 80ea 	bhi.w	801332a <_scanf_float+0x25a>
 8013156:	4545      	cmp	r5, r8
 8013158:	f200 80dc 	bhi.w	8013314 <_scanf_float+0x244>
 801315c:	2601      	movs	r6, #1
 801315e:	4630      	mov	r0, r6
 8013160:	b007      	add	sp, #28
 8013162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013166:	2b2e      	cmp	r3, #46	; 0x2e
 8013168:	f000 809f 	beq.w	80132aa <_scanf_float+0x1da>
 801316c:	2b30      	cmp	r3, #48	; 0x30
 801316e:	d1e7      	bne.n	8013140 <_scanf_float+0x70>
 8013170:	6820      	ldr	r0, [r4, #0]
 8013172:	f410 7f80 	tst.w	r0, #256	; 0x100
 8013176:	d064      	beq.n	8013242 <_scanf_float+0x172>
 8013178:	9b01      	ldr	r3, [sp, #4]
 801317a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 801317e:	6020      	str	r0, [r4, #0]
 8013180:	f109 0901 	add.w	r9, r9, #1
 8013184:	b11b      	cbz	r3, 801318e <_scanf_float+0xbe>
 8013186:	3b01      	subs	r3, #1
 8013188:	3101      	adds	r1, #1
 801318a:	9301      	str	r3, [sp, #4]
 801318c:	60a1      	str	r1, [r4, #8]
 801318e:	68a3      	ldr	r3, [r4, #8]
 8013190:	3b01      	subs	r3, #1
 8013192:	60a3      	str	r3, [r4, #8]
 8013194:	6923      	ldr	r3, [r4, #16]
 8013196:	3301      	adds	r3, #1
 8013198:	6123      	str	r3, [r4, #16]
 801319a:	6873      	ldr	r3, [r6, #4]
 801319c:	3b01      	subs	r3, #1
 801319e:	2b00      	cmp	r3, #0
 80131a0:	6073      	str	r3, [r6, #4]
 80131a2:	f340 80ac 	ble.w	80132fe <_scanf_float+0x22e>
 80131a6:	6833      	ldr	r3, [r6, #0]
 80131a8:	3301      	adds	r3, #1
 80131aa:	6033      	str	r3, [r6, #0]
 80131ac:	e7b5      	b.n	801311a <_scanf_float+0x4a>
 80131ae:	2b45      	cmp	r3, #69	; 0x45
 80131b0:	f000 8085 	beq.w	80132be <_scanf_float+0x1ee>
 80131b4:	2b46      	cmp	r3, #70	; 0x46
 80131b6:	d06a      	beq.n	801328e <_scanf_float+0x1be>
 80131b8:	2b41      	cmp	r3, #65	; 0x41
 80131ba:	d1c1      	bne.n	8013140 <_scanf_float+0x70>
 80131bc:	2a01      	cmp	r2, #1
 80131be:	d1bf      	bne.n	8013140 <_scanf_float+0x70>
 80131c0:	2202      	movs	r2, #2
 80131c2:	e046      	b.n	8013252 <_scanf_float+0x182>
 80131c4:	2b65      	cmp	r3, #101	; 0x65
 80131c6:	d07a      	beq.n	80132be <_scanf_float+0x1ee>
 80131c8:	d818      	bhi.n	80131fc <_scanf_float+0x12c>
 80131ca:	2b54      	cmp	r3, #84	; 0x54
 80131cc:	d066      	beq.n	801329c <_scanf_float+0x1cc>
 80131ce:	d811      	bhi.n	80131f4 <_scanf_float+0x124>
 80131d0:	2b4e      	cmp	r3, #78	; 0x4e
 80131d2:	d1b5      	bne.n	8013140 <_scanf_float+0x70>
 80131d4:	2a00      	cmp	r2, #0
 80131d6:	d146      	bne.n	8013266 <_scanf_float+0x196>
 80131d8:	f1b9 0f00 	cmp.w	r9, #0
 80131dc:	d145      	bne.n	801326a <_scanf_float+0x19a>
 80131de:	6821      	ldr	r1, [r4, #0]
 80131e0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80131e4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80131e8:	d13f      	bne.n	801326a <_scanf_float+0x19a>
 80131ea:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80131ee:	6021      	str	r1, [r4, #0]
 80131f0:	2201      	movs	r2, #1
 80131f2:	e02e      	b.n	8013252 <_scanf_float+0x182>
 80131f4:	2b59      	cmp	r3, #89	; 0x59
 80131f6:	d01e      	beq.n	8013236 <_scanf_float+0x166>
 80131f8:	2b61      	cmp	r3, #97	; 0x61
 80131fa:	e7de      	b.n	80131ba <_scanf_float+0xea>
 80131fc:	2b6e      	cmp	r3, #110	; 0x6e
 80131fe:	d0e9      	beq.n	80131d4 <_scanf_float+0x104>
 8013200:	d815      	bhi.n	801322e <_scanf_float+0x15e>
 8013202:	2b66      	cmp	r3, #102	; 0x66
 8013204:	d043      	beq.n	801328e <_scanf_float+0x1be>
 8013206:	2b69      	cmp	r3, #105	; 0x69
 8013208:	d19a      	bne.n	8013140 <_scanf_float+0x70>
 801320a:	f1bb 0f00 	cmp.w	fp, #0
 801320e:	d138      	bne.n	8013282 <_scanf_float+0x1b2>
 8013210:	f1b9 0f00 	cmp.w	r9, #0
 8013214:	d197      	bne.n	8013146 <_scanf_float+0x76>
 8013216:	6821      	ldr	r1, [r4, #0]
 8013218:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 801321c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8013220:	d195      	bne.n	801314e <_scanf_float+0x7e>
 8013222:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8013226:	6021      	str	r1, [r4, #0]
 8013228:	f04f 0b01 	mov.w	fp, #1
 801322c:	e011      	b.n	8013252 <_scanf_float+0x182>
 801322e:	2b74      	cmp	r3, #116	; 0x74
 8013230:	d034      	beq.n	801329c <_scanf_float+0x1cc>
 8013232:	2b79      	cmp	r3, #121	; 0x79
 8013234:	d184      	bne.n	8013140 <_scanf_float+0x70>
 8013236:	f1bb 0f07 	cmp.w	fp, #7
 801323a:	d181      	bne.n	8013140 <_scanf_float+0x70>
 801323c:	f04f 0b08 	mov.w	fp, #8
 8013240:	e007      	b.n	8013252 <_scanf_float+0x182>
 8013242:	eb12 0f0b 	cmn.w	r2, fp
 8013246:	f47f af7b 	bne.w	8013140 <_scanf_float+0x70>
 801324a:	6821      	ldr	r1, [r4, #0]
 801324c:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8013250:	6021      	str	r1, [r4, #0]
 8013252:	702b      	strb	r3, [r5, #0]
 8013254:	3501      	adds	r5, #1
 8013256:	e79a      	b.n	801318e <_scanf_float+0xbe>
 8013258:	6821      	ldr	r1, [r4, #0]
 801325a:	0608      	lsls	r0, r1, #24
 801325c:	f57f af70 	bpl.w	8013140 <_scanf_float+0x70>
 8013260:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8013264:	e7f4      	b.n	8013250 <_scanf_float+0x180>
 8013266:	2a02      	cmp	r2, #2
 8013268:	d047      	beq.n	80132fa <_scanf_float+0x22a>
 801326a:	f1bb 0f01 	cmp.w	fp, #1
 801326e:	d003      	beq.n	8013278 <_scanf_float+0x1a8>
 8013270:	f1bb 0f04 	cmp.w	fp, #4
 8013274:	f47f af64 	bne.w	8013140 <_scanf_float+0x70>
 8013278:	f10b 0b01 	add.w	fp, fp, #1
 801327c:	fa5f fb8b 	uxtb.w	fp, fp
 8013280:	e7e7      	b.n	8013252 <_scanf_float+0x182>
 8013282:	f1bb 0f03 	cmp.w	fp, #3
 8013286:	d0f7      	beq.n	8013278 <_scanf_float+0x1a8>
 8013288:	f1bb 0f05 	cmp.w	fp, #5
 801328c:	e7f2      	b.n	8013274 <_scanf_float+0x1a4>
 801328e:	f1bb 0f02 	cmp.w	fp, #2
 8013292:	f47f af55 	bne.w	8013140 <_scanf_float+0x70>
 8013296:	f04f 0b03 	mov.w	fp, #3
 801329a:	e7da      	b.n	8013252 <_scanf_float+0x182>
 801329c:	f1bb 0f06 	cmp.w	fp, #6
 80132a0:	f47f af4e 	bne.w	8013140 <_scanf_float+0x70>
 80132a4:	f04f 0b07 	mov.w	fp, #7
 80132a8:	e7d3      	b.n	8013252 <_scanf_float+0x182>
 80132aa:	6821      	ldr	r1, [r4, #0]
 80132ac:	0588      	lsls	r0, r1, #22
 80132ae:	f57f af47 	bpl.w	8013140 <_scanf_float+0x70>
 80132b2:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 80132b6:	6021      	str	r1, [r4, #0]
 80132b8:	f8cd 9008 	str.w	r9, [sp, #8]
 80132bc:	e7c9      	b.n	8013252 <_scanf_float+0x182>
 80132be:	6821      	ldr	r1, [r4, #0]
 80132c0:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 80132c4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80132c8:	d006      	beq.n	80132d8 <_scanf_float+0x208>
 80132ca:	0548      	lsls	r0, r1, #21
 80132cc:	f57f af38 	bpl.w	8013140 <_scanf_float+0x70>
 80132d0:	f1b9 0f00 	cmp.w	r9, #0
 80132d4:	f43f af3b 	beq.w	801314e <_scanf_float+0x7e>
 80132d8:	0588      	lsls	r0, r1, #22
 80132da:	bf58      	it	pl
 80132dc:	9802      	ldrpl	r0, [sp, #8]
 80132de:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80132e2:	bf58      	it	pl
 80132e4:	eba9 0000 	subpl.w	r0, r9, r0
 80132e8:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 80132ec:	bf58      	it	pl
 80132ee:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 80132f2:	6021      	str	r1, [r4, #0]
 80132f4:	f04f 0900 	mov.w	r9, #0
 80132f8:	e7ab      	b.n	8013252 <_scanf_float+0x182>
 80132fa:	2203      	movs	r2, #3
 80132fc:	e7a9      	b.n	8013252 <_scanf_float+0x182>
 80132fe:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8013302:	9205      	str	r2, [sp, #20]
 8013304:	4631      	mov	r1, r6
 8013306:	4638      	mov	r0, r7
 8013308:	4798      	blx	r3
 801330a:	9a05      	ldr	r2, [sp, #20]
 801330c:	2800      	cmp	r0, #0
 801330e:	f43f af04 	beq.w	801311a <_scanf_float+0x4a>
 8013312:	e715      	b.n	8013140 <_scanf_float+0x70>
 8013314:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013318:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801331c:	4632      	mov	r2, r6
 801331e:	4638      	mov	r0, r7
 8013320:	4798      	blx	r3
 8013322:	6923      	ldr	r3, [r4, #16]
 8013324:	3b01      	subs	r3, #1
 8013326:	6123      	str	r3, [r4, #16]
 8013328:	e715      	b.n	8013156 <_scanf_float+0x86>
 801332a:	f10b 33ff 	add.w	r3, fp, #4294967295
 801332e:	2b06      	cmp	r3, #6
 8013330:	d80a      	bhi.n	8013348 <_scanf_float+0x278>
 8013332:	f1bb 0f02 	cmp.w	fp, #2
 8013336:	d968      	bls.n	801340a <_scanf_float+0x33a>
 8013338:	f1ab 0b03 	sub.w	fp, fp, #3
 801333c:	fa5f fb8b 	uxtb.w	fp, fp
 8013340:	eba5 0b0b 	sub.w	fp, r5, fp
 8013344:	455d      	cmp	r5, fp
 8013346:	d14b      	bne.n	80133e0 <_scanf_float+0x310>
 8013348:	6823      	ldr	r3, [r4, #0]
 801334a:	05da      	lsls	r2, r3, #23
 801334c:	d51f      	bpl.n	801338e <_scanf_float+0x2be>
 801334e:	055b      	lsls	r3, r3, #21
 8013350:	d468      	bmi.n	8013424 <_scanf_float+0x354>
 8013352:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8013356:	6923      	ldr	r3, [r4, #16]
 8013358:	2965      	cmp	r1, #101	; 0x65
 801335a:	f103 33ff 	add.w	r3, r3, #4294967295
 801335e:	f105 3bff 	add.w	fp, r5, #4294967295
 8013362:	6123      	str	r3, [r4, #16]
 8013364:	d00d      	beq.n	8013382 <_scanf_float+0x2b2>
 8013366:	2945      	cmp	r1, #69	; 0x45
 8013368:	d00b      	beq.n	8013382 <_scanf_float+0x2b2>
 801336a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801336e:	4632      	mov	r2, r6
 8013370:	4638      	mov	r0, r7
 8013372:	4798      	blx	r3
 8013374:	6923      	ldr	r3, [r4, #16]
 8013376:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 801337a:	3b01      	subs	r3, #1
 801337c:	f1a5 0b02 	sub.w	fp, r5, #2
 8013380:	6123      	str	r3, [r4, #16]
 8013382:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013386:	4632      	mov	r2, r6
 8013388:	4638      	mov	r0, r7
 801338a:	4798      	blx	r3
 801338c:	465d      	mov	r5, fp
 801338e:	6826      	ldr	r6, [r4, #0]
 8013390:	f016 0610 	ands.w	r6, r6, #16
 8013394:	d17a      	bne.n	801348c <_scanf_float+0x3bc>
 8013396:	702e      	strb	r6, [r5, #0]
 8013398:	6823      	ldr	r3, [r4, #0]
 801339a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801339e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80133a2:	d142      	bne.n	801342a <_scanf_float+0x35a>
 80133a4:	9b02      	ldr	r3, [sp, #8]
 80133a6:	eba9 0303 	sub.w	r3, r9, r3
 80133aa:	425a      	negs	r2, r3
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	d149      	bne.n	8013444 <_scanf_float+0x374>
 80133b0:	2200      	movs	r2, #0
 80133b2:	4641      	mov	r1, r8
 80133b4:	4638      	mov	r0, r7
 80133b6:	f000 ffcb 	bl	8014350 <_strtod_r>
 80133ba:	6825      	ldr	r5, [r4, #0]
 80133bc:	f8da 3000 	ldr.w	r3, [sl]
 80133c0:	f015 0f02 	tst.w	r5, #2
 80133c4:	f103 0204 	add.w	r2, r3, #4
 80133c8:	ec59 8b10 	vmov	r8, r9, d0
 80133cc:	f8ca 2000 	str.w	r2, [sl]
 80133d0:	d043      	beq.n	801345a <_scanf_float+0x38a>
 80133d2:	681b      	ldr	r3, [r3, #0]
 80133d4:	e9c3 8900 	strd	r8, r9, [r3]
 80133d8:	68e3      	ldr	r3, [r4, #12]
 80133da:	3301      	adds	r3, #1
 80133dc:	60e3      	str	r3, [r4, #12]
 80133de:	e6be      	b.n	801315e <_scanf_float+0x8e>
 80133e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80133e4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80133e8:	4632      	mov	r2, r6
 80133ea:	4638      	mov	r0, r7
 80133ec:	4798      	blx	r3
 80133ee:	6923      	ldr	r3, [r4, #16]
 80133f0:	3b01      	subs	r3, #1
 80133f2:	6123      	str	r3, [r4, #16]
 80133f4:	e7a6      	b.n	8013344 <_scanf_float+0x274>
 80133f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80133fa:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80133fe:	4632      	mov	r2, r6
 8013400:	4638      	mov	r0, r7
 8013402:	4798      	blx	r3
 8013404:	6923      	ldr	r3, [r4, #16]
 8013406:	3b01      	subs	r3, #1
 8013408:	6123      	str	r3, [r4, #16]
 801340a:	4545      	cmp	r5, r8
 801340c:	d8f3      	bhi.n	80133f6 <_scanf_float+0x326>
 801340e:	e6a5      	b.n	801315c <_scanf_float+0x8c>
 8013410:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013414:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8013418:	4632      	mov	r2, r6
 801341a:	4638      	mov	r0, r7
 801341c:	4798      	blx	r3
 801341e:	6923      	ldr	r3, [r4, #16]
 8013420:	3b01      	subs	r3, #1
 8013422:	6123      	str	r3, [r4, #16]
 8013424:	4545      	cmp	r5, r8
 8013426:	d8f3      	bhi.n	8013410 <_scanf_float+0x340>
 8013428:	e698      	b.n	801315c <_scanf_float+0x8c>
 801342a:	9b03      	ldr	r3, [sp, #12]
 801342c:	2b00      	cmp	r3, #0
 801342e:	d0bf      	beq.n	80133b0 <_scanf_float+0x2e0>
 8013430:	9904      	ldr	r1, [sp, #16]
 8013432:	230a      	movs	r3, #10
 8013434:	4632      	mov	r2, r6
 8013436:	3101      	adds	r1, #1
 8013438:	4638      	mov	r0, r7
 801343a:	f001 f815 	bl	8014468 <_strtol_r>
 801343e:	9b03      	ldr	r3, [sp, #12]
 8013440:	9d04      	ldr	r5, [sp, #16]
 8013442:	1ac2      	subs	r2, r0, r3
 8013444:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8013448:	429d      	cmp	r5, r3
 801344a:	bf28      	it	cs
 801344c:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8013450:	490f      	ldr	r1, [pc, #60]	; (8013490 <_scanf_float+0x3c0>)
 8013452:	4628      	mov	r0, r5
 8013454:	f000 f8d4 	bl	8013600 <siprintf>
 8013458:	e7aa      	b.n	80133b0 <_scanf_float+0x2e0>
 801345a:	f015 0504 	ands.w	r5, r5, #4
 801345e:	d1b8      	bne.n	80133d2 <_scanf_float+0x302>
 8013460:	681f      	ldr	r7, [r3, #0]
 8013462:	ee10 2a10 	vmov	r2, s0
 8013466:	464b      	mov	r3, r9
 8013468:	ee10 0a10 	vmov	r0, s0
 801346c:	4649      	mov	r1, r9
 801346e:	f7ed fb75 	bl	8000b5c <__aeabi_dcmpun>
 8013472:	b128      	cbz	r0, 8013480 <_scanf_float+0x3b0>
 8013474:	4628      	mov	r0, r5
 8013476:	f000 f889 	bl	801358c <nanf>
 801347a:	ed87 0a00 	vstr	s0, [r7]
 801347e:	e7ab      	b.n	80133d8 <_scanf_float+0x308>
 8013480:	4640      	mov	r0, r8
 8013482:	4649      	mov	r1, r9
 8013484:	f7ed fbc8 	bl	8000c18 <__aeabi_d2f>
 8013488:	6038      	str	r0, [r7, #0]
 801348a:	e7a5      	b.n	80133d8 <_scanf_float+0x308>
 801348c:	2600      	movs	r6, #0
 801348e:	e666      	b.n	801315e <_scanf_float+0x8e>
 8013490:	08017d5e 	.word	0x08017d5e

08013494 <iprintf>:
 8013494:	b40f      	push	{r0, r1, r2, r3}
 8013496:	4b0a      	ldr	r3, [pc, #40]	; (80134c0 <iprintf+0x2c>)
 8013498:	b513      	push	{r0, r1, r4, lr}
 801349a:	681c      	ldr	r4, [r3, #0]
 801349c:	b124      	cbz	r4, 80134a8 <iprintf+0x14>
 801349e:	69a3      	ldr	r3, [r4, #24]
 80134a0:	b913      	cbnz	r3, 80134a8 <iprintf+0x14>
 80134a2:	4620      	mov	r0, r4
 80134a4:	f002 f828 	bl	80154f8 <__sinit>
 80134a8:	ab05      	add	r3, sp, #20
 80134aa:	9a04      	ldr	r2, [sp, #16]
 80134ac:	68a1      	ldr	r1, [r4, #8]
 80134ae:	9301      	str	r3, [sp, #4]
 80134b0:	4620      	mov	r0, r4
 80134b2:	f003 fc5f 	bl	8016d74 <_vfiprintf_r>
 80134b6:	b002      	add	sp, #8
 80134b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80134bc:	b004      	add	sp, #16
 80134be:	4770      	bx	lr
 80134c0:	2000000c 	.word	0x2000000c

080134c4 <_puts_r>:
 80134c4:	b570      	push	{r4, r5, r6, lr}
 80134c6:	460e      	mov	r6, r1
 80134c8:	4605      	mov	r5, r0
 80134ca:	b118      	cbz	r0, 80134d4 <_puts_r+0x10>
 80134cc:	6983      	ldr	r3, [r0, #24]
 80134ce:	b90b      	cbnz	r3, 80134d4 <_puts_r+0x10>
 80134d0:	f002 f812 	bl	80154f8 <__sinit>
 80134d4:	69ab      	ldr	r3, [r5, #24]
 80134d6:	68ac      	ldr	r4, [r5, #8]
 80134d8:	b913      	cbnz	r3, 80134e0 <_puts_r+0x1c>
 80134da:	4628      	mov	r0, r5
 80134dc:	f002 f80c 	bl	80154f8 <__sinit>
 80134e0:	4b23      	ldr	r3, [pc, #140]	; (8013570 <_puts_r+0xac>)
 80134e2:	429c      	cmp	r4, r3
 80134e4:	d117      	bne.n	8013516 <_puts_r+0x52>
 80134e6:	686c      	ldr	r4, [r5, #4]
 80134e8:	89a3      	ldrh	r3, [r4, #12]
 80134ea:	071b      	lsls	r3, r3, #28
 80134ec:	d51d      	bpl.n	801352a <_puts_r+0x66>
 80134ee:	6923      	ldr	r3, [r4, #16]
 80134f0:	b1db      	cbz	r3, 801352a <_puts_r+0x66>
 80134f2:	3e01      	subs	r6, #1
 80134f4:	68a3      	ldr	r3, [r4, #8]
 80134f6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80134fa:	3b01      	subs	r3, #1
 80134fc:	60a3      	str	r3, [r4, #8]
 80134fe:	b9e9      	cbnz	r1, 801353c <_puts_r+0x78>
 8013500:	2b00      	cmp	r3, #0
 8013502:	da2e      	bge.n	8013562 <_puts_r+0x9e>
 8013504:	4622      	mov	r2, r4
 8013506:	210a      	movs	r1, #10
 8013508:	4628      	mov	r0, r5
 801350a:	f000 ffdf 	bl	80144cc <__swbuf_r>
 801350e:	3001      	adds	r0, #1
 8013510:	d011      	beq.n	8013536 <_puts_r+0x72>
 8013512:	200a      	movs	r0, #10
 8013514:	e011      	b.n	801353a <_puts_r+0x76>
 8013516:	4b17      	ldr	r3, [pc, #92]	; (8013574 <_puts_r+0xb0>)
 8013518:	429c      	cmp	r4, r3
 801351a:	d101      	bne.n	8013520 <_puts_r+0x5c>
 801351c:	68ac      	ldr	r4, [r5, #8]
 801351e:	e7e3      	b.n	80134e8 <_puts_r+0x24>
 8013520:	4b15      	ldr	r3, [pc, #84]	; (8013578 <_puts_r+0xb4>)
 8013522:	429c      	cmp	r4, r3
 8013524:	bf08      	it	eq
 8013526:	68ec      	ldreq	r4, [r5, #12]
 8013528:	e7de      	b.n	80134e8 <_puts_r+0x24>
 801352a:	4621      	mov	r1, r4
 801352c:	4628      	mov	r0, r5
 801352e:	f001 f831 	bl	8014594 <__swsetup_r>
 8013532:	2800      	cmp	r0, #0
 8013534:	d0dd      	beq.n	80134f2 <_puts_r+0x2e>
 8013536:	f04f 30ff 	mov.w	r0, #4294967295
 801353a:	bd70      	pop	{r4, r5, r6, pc}
 801353c:	2b00      	cmp	r3, #0
 801353e:	da04      	bge.n	801354a <_puts_r+0x86>
 8013540:	69a2      	ldr	r2, [r4, #24]
 8013542:	429a      	cmp	r2, r3
 8013544:	dc06      	bgt.n	8013554 <_puts_r+0x90>
 8013546:	290a      	cmp	r1, #10
 8013548:	d004      	beq.n	8013554 <_puts_r+0x90>
 801354a:	6823      	ldr	r3, [r4, #0]
 801354c:	1c5a      	adds	r2, r3, #1
 801354e:	6022      	str	r2, [r4, #0]
 8013550:	7019      	strb	r1, [r3, #0]
 8013552:	e7cf      	b.n	80134f4 <_puts_r+0x30>
 8013554:	4622      	mov	r2, r4
 8013556:	4628      	mov	r0, r5
 8013558:	f000 ffb8 	bl	80144cc <__swbuf_r>
 801355c:	3001      	adds	r0, #1
 801355e:	d1c9      	bne.n	80134f4 <_puts_r+0x30>
 8013560:	e7e9      	b.n	8013536 <_puts_r+0x72>
 8013562:	6823      	ldr	r3, [r4, #0]
 8013564:	200a      	movs	r0, #10
 8013566:	1c5a      	adds	r2, r3, #1
 8013568:	6022      	str	r2, [r4, #0]
 801356a:	7018      	strb	r0, [r3, #0]
 801356c:	e7e5      	b.n	801353a <_puts_r+0x76>
 801356e:	bf00      	nop
 8013570:	08017de8 	.word	0x08017de8
 8013574:	08017e08 	.word	0x08017e08
 8013578:	08017dc8 	.word	0x08017dc8

0801357c <puts>:
 801357c:	4b02      	ldr	r3, [pc, #8]	; (8013588 <puts+0xc>)
 801357e:	4601      	mov	r1, r0
 8013580:	6818      	ldr	r0, [r3, #0]
 8013582:	f7ff bf9f 	b.w	80134c4 <_puts_r>
 8013586:	bf00      	nop
 8013588:	2000000c 	.word	0x2000000c

0801358c <nanf>:
 801358c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013594 <nanf+0x8>
 8013590:	4770      	bx	lr
 8013592:	bf00      	nop
 8013594:	7fc00000 	.word	0x7fc00000

08013598 <sniprintf>:
 8013598:	b40c      	push	{r2, r3}
 801359a:	b530      	push	{r4, r5, lr}
 801359c:	4b17      	ldr	r3, [pc, #92]	; (80135fc <sniprintf+0x64>)
 801359e:	1e0c      	subs	r4, r1, #0
 80135a0:	b09d      	sub	sp, #116	; 0x74
 80135a2:	681d      	ldr	r5, [r3, #0]
 80135a4:	da08      	bge.n	80135b8 <sniprintf+0x20>
 80135a6:	238b      	movs	r3, #139	; 0x8b
 80135a8:	602b      	str	r3, [r5, #0]
 80135aa:	f04f 30ff 	mov.w	r0, #4294967295
 80135ae:	b01d      	add	sp, #116	; 0x74
 80135b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80135b4:	b002      	add	sp, #8
 80135b6:	4770      	bx	lr
 80135b8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80135bc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80135c0:	bf14      	ite	ne
 80135c2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80135c6:	4623      	moveq	r3, r4
 80135c8:	9304      	str	r3, [sp, #16]
 80135ca:	9307      	str	r3, [sp, #28]
 80135cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80135d0:	9002      	str	r0, [sp, #8]
 80135d2:	9006      	str	r0, [sp, #24]
 80135d4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80135d8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80135da:	ab21      	add	r3, sp, #132	; 0x84
 80135dc:	a902      	add	r1, sp, #8
 80135de:	4628      	mov	r0, r5
 80135e0:	9301      	str	r3, [sp, #4]
 80135e2:	f003 f8fb 	bl	80167dc <_svfiprintf_r>
 80135e6:	1c43      	adds	r3, r0, #1
 80135e8:	bfbc      	itt	lt
 80135ea:	238b      	movlt	r3, #139	; 0x8b
 80135ec:	602b      	strlt	r3, [r5, #0]
 80135ee:	2c00      	cmp	r4, #0
 80135f0:	d0dd      	beq.n	80135ae <sniprintf+0x16>
 80135f2:	9b02      	ldr	r3, [sp, #8]
 80135f4:	2200      	movs	r2, #0
 80135f6:	701a      	strb	r2, [r3, #0]
 80135f8:	e7d9      	b.n	80135ae <sniprintf+0x16>
 80135fa:	bf00      	nop
 80135fc:	2000000c 	.word	0x2000000c

08013600 <siprintf>:
 8013600:	b40e      	push	{r1, r2, r3}
 8013602:	b500      	push	{lr}
 8013604:	b09c      	sub	sp, #112	; 0x70
 8013606:	ab1d      	add	r3, sp, #116	; 0x74
 8013608:	9002      	str	r0, [sp, #8]
 801360a:	9006      	str	r0, [sp, #24]
 801360c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013610:	4809      	ldr	r0, [pc, #36]	; (8013638 <siprintf+0x38>)
 8013612:	9107      	str	r1, [sp, #28]
 8013614:	9104      	str	r1, [sp, #16]
 8013616:	4909      	ldr	r1, [pc, #36]	; (801363c <siprintf+0x3c>)
 8013618:	f853 2b04 	ldr.w	r2, [r3], #4
 801361c:	9105      	str	r1, [sp, #20]
 801361e:	6800      	ldr	r0, [r0, #0]
 8013620:	9301      	str	r3, [sp, #4]
 8013622:	a902      	add	r1, sp, #8
 8013624:	f003 f8da 	bl	80167dc <_svfiprintf_r>
 8013628:	9b02      	ldr	r3, [sp, #8]
 801362a:	2200      	movs	r2, #0
 801362c:	701a      	strb	r2, [r3, #0]
 801362e:	b01c      	add	sp, #112	; 0x70
 8013630:	f85d eb04 	ldr.w	lr, [sp], #4
 8013634:	b003      	add	sp, #12
 8013636:	4770      	bx	lr
 8013638:	2000000c 	.word	0x2000000c
 801363c:	ffff0208 	.word	0xffff0208

08013640 <siscanf>:
 8013640:	b40e      	push	{r1, r2, r3}
 8013642:	b530      	push	{r4, r5, lr}
 8013644:	b09c      	sub	sp, #112	; 0x70
 8013646:	ac1f      	add	r4, sp, #124	; 0x7c
 8013648:	f44f 7201 	mov.w	r2, #516	; 0x204
 801364c:	f854 5b04 	ldr.w	r5, [r4], #4
 8013650:	f8ad 2014 	strh.w	r2, [sp, #20]
 8013654:	9002      	str	r0, [sp, #8]
 8013656:	9006      	str	r0, [sp, #24]
 8013658:	f7ec fdd2 	bl	8000200 <strlen>
 801365c:	4b0b      	ldr	r3, [pc, #44]	; (801368c <siscanf+0x4c>)
 801365e:	9003      	str	r0, [sp, #12]
 8013660:	9007      	str	r0, [sp, #28]
 8013662:	930b      	str	r3, [sp, #44]	; 0x2c
 8013664:	480a      	ldr	r0, [pc, #40]	; (8013690 <siscanf+0x50>)
 8013666:	9401      	str	r4, [sp, #4]
 8013668:	2300      	movs	r3, #0
 801366a:	930f      	str	r3, [sp, #60]	; 0x3c
 801366c:	9314      	str	r3, [sp, #80]	; 0x50
 801366e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013672:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013676:	462a      	mov	r2, r5
 8013678:	4623      	mov	r3, r4
 801367a:	a902      	add	r1, sp, #8
 801367c:	6800      	ldr	r0, [r0, #0]
 801367e:	f003 f9ff 	bl	8016a80 <__ssvfiscanf_r>
 8013682:	b01c      	add	sp, #112	; 0x70
 8013684:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013688:	b003      	add	sp, #12
 801368a:	4770      	bx	lr
 801368c:	080136b7 	.word	0x080136b7
 8013690:	2000000c 	.word	0x2000000c

08013694 <__sread>:
 8013694:	b510      	push	{r4, lr}
 8013696:	460c      	mov	r4, r1
 8013698:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801369c:	f003 fdd8 	bl	8017250 <_read_r>
 80136a0:	2800      	cmp	r0, #0
 80136a2:	bfab      	itete	ge
 80136a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80136a6:	89a3      	ldrhlt	r3, [r4, #12]
 80136a8:	181b      	addge	r3, r3, r0
 80136aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80136ae:	bfac      	ite	ge
 80136b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80136b2:	81a3      	strhlt	r3, [r4, #12]
 80136b4:	bd10      	pop	{r4, pc}

080136b6 <__seofread>:
 80136b6:	2000      	movs	r0, #0
 80136b8:	4770      	bx	lr

080136ba <__swrite>:
 80136ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80136be:	461f      	mov	r7, r3
 80136c0:	898b      	ldrh	r3, [r1, #12]
 80136c2:	05db      	lsls	r3, r3, #23
 80136c4:	4605      	mov	r5, r0
 80136c6:	460c      	mov	r4, r1
 80136c8:	4616      	mov	r6, r2
 80136ca:	d505      	bpl.n	80136d8 <__swrite+0x1e>
 80136cc:	2302      	movs	r3, #2
 80136ce:	2200      	movs	r2, #0
 80136d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80136d4:	f002 fae2 	bl	8015c9c <_lseek_r>
 80136d8:	89a3      	ldrh	r3, [r4, #12]
 80136da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80136de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80136e2:	81a3      	strh	r3, [r4, #12]
 80136e4:	4632      	mov	r2, r6
 80136e6:	463b      	mov	r3, r7
 80136e8:	4628      	mov	r0, r5
 80136ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80136ee:	f000 bf3f 	b.w	8014570 <_write_r>

080136f2 <__sseek>:
 80136f2:	b510      	push	{r4, lr}
 80136f4:	460c      	mov	r4, r1
 80136f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80136fa:	f002 facf 	bl	8015c9c <_lseek_r>
 80136fe:	1c43      	adds	r3, r0, #1
 8013700:	89a3      	ldrh	r3, [r4, #12]
 8013702:	bf15      	itete	ne
 8013704:	6560      	strne	r0, [r4, #84]	; 0x54
 8013706:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801370a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801370e:	81a3      	strheq	r3, [r4, #12]
 8013710:	bf18      	it	ne
 8013712:	81a3      	strhne	r3, [r4, #12]
 8013714:	bd10      	pop	{r4, pc}

08013716 <__sclose>:
 8013716:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801371a:	f000 bfa9 	b.w	8014670 <_close_r>

0801371e <strcpy>:
 801371e:	4603      	mov	r3, r0
 8013720:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013724:	f803 2b01 	strb.w	r2, [r3], #1
 8013728:	2a00      	cmp	r2, #0
 801372a:	d1f9      	bne.n	8013720 <strcpy+0x2>
 801372c:	4770      	bx	lr

0801372e <sulp>:
 801372e:	b570      	push	{r4, r5, r6, lr}
 8013730:	4604      	mov	r4, r0
 8013732:	460d      	mov	r5, r1
 8013734:	ec45 4b10 	vmov	d0, r4, r5
 8013738:	4616      	mov	r6, r2
 801373a:	f002 fe0b 	bl	8016354 <__ulp>
 801373e:	ec51 0b10 	vmov	r0, r1, d0
 8013742:	b17e      	cbz	r6, 8013764 <sulp+0x36>
 8013744:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8013748:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801374c:	2b00      	cmp	r3, #0
 801374e:	dd09      	ble.n	8013764 <sulp+0x36>
 8013750:	051b      	lsls	r3, r3, #20
 8013752:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8013756:	2400      	movs	r4, #0
 8013758:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801375c:	4622      	mov	r2, r4
 801375e:	462b      	mov	r3, r5
 8013760:	f7ec ff62 	bl	8000628 <__aeabi_dmul>
 8013764:	bd70      	pop	{r4, r5, r6, pc}
	...

08013768 <_strtod_l>:
 8013768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801376c:	461f      	mov	r7, r3
 801376e:	b0a1      	sub	sp, #132	; 0x84
 8013770:	2300      	movs	r3, #0
 8013772:	4681      	mov	r9, r0
 8013774:	4638      	mov	r0, r7
 8013776:	460e      	mov	r6, r1
 8013778:	9217      	str	r2, [sp, #92]	; 0x5c
 801377a:	931c      	str	r3, [sp, #112]	; 0x70
 801377c:	f002 fa7e 	bl	8015c7c <__localeconv_l>
 8013780:	4680      	mov	r8, r0
 8013782:	6800      	ldr	r0, [r0, #0]
 8013784:	f7ec fd3c 	bl	8000200 <strlen>
 8013788:	f04f 0a00 	mov.w	sl, #0
 801378c:	4604      	mov	r4, r0
 801378e:	f04f 0b00 	mov.w	fp, #0
 8013792:	961b      	str	r6, [sp, #108]	; 0x6c
 8013794:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013796:	781a      	ldrb	r2, [r3, #0]
 8013798:	2a0d      	cmp	r2, #13
 801379a:	d832      	bhi.n	8013802 <_strtod_l+0x9a>
 801379c:	2a09      	cmp	r2, #9
 801379e:	d236      	bcs.n	801380e <_strtod_l+0xa6>
 80137a0:	2a00      	cmp	r2, #0
 80137a2:	d03e      	beq.n	8013822 <_strtod_l+0xba>
 80137a4:	2300      	movs	r3, #0
 80137a6:	930d      	str	r3, [sp, #52]	; 0x34
 80137a8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80137aa:	782b      	ldrb	r3, [r5, #0]
 80137ac:	2b30      	cmp	r3, #48	; 0x30
 80137ae:	f040 80ac 	bne.w	801390a <_strtod_l+0x1a2>
 80137b2:	786b      	ldrb	r3, [r5, #1]
 80137b4:	2b58      	cmp	r3, #88	; 0x58
 80137b6:	d001      	beq.n	80137bc <_strtod_l+0x54>
 80137b8:	2b78      	cmp	r3, #120	; 0x78
 80137ba:	d167      	bne.n	801388c <_strtod_l+0x124>
 80137bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80137be:	9301      	str	r3, [sp, #4]
 80137c0:	ab1c      	add	r3, sp, #112	; 0x70
 80137c2:	9300      	str	r3, [sp, #0]
 80137c4:	9702      	str	r7, [sp, #8]
 80137c6:	ab1d      	add	r3, sp, #116	; 0x74
 80137c8:	4a88      	ldr	r2, [pc, #544]	; (80139ec <_strtod_l+0x284>)
 80137ca:	a91b      	add	r1, sp, #108	; 0x6c
 80137cc:	4648      	mov	r0, r9
 80137ce:	f001 ff6c 	bl	80156aa <__gethex>
 80137d2:	f010 0407 	ands.w	r4, r0, #7
 80137d6:	4606      	mov	r6, r0
 80137d8:	d005      	beq.n	80137e6 <_strtod_l+0x7e>
 80137da:	2c06      	cmp	r4, #6
 80137dc:	d12b      	bne.n	8013836 <_strtod_l+0xce>
 80137de:	3501      	adds	r5, #1
 80137e0:	2300      	movs	r3, #0
 80137e2:	951b      	str	r5, [sp, #108]	; 0x6c
 80137e4:	930d      	str	r3, [sp, #52]	; 0x34
 80137e6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80137e8:	2b00      	cmp	r3, #0
 80137ea:	f040 859a 	bne.w	8014322 <_strtod_l+0xbba>
 80137ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80137f0:	b1e3      	cbz	r3, 801382c <_strtod_l+0xc4>
 80137f2:	4652      	mov	r2, sl
 80137f4:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80137f8:	ec43 2b10 	vmov	d0, r2, r3
 80137fc:	b021      	add	sp, #132	; 0x84
 80137fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013802:	2a2b      	cmp	r2, #43	; 0x2b
 8013804:	d015      	beq.n	8013832 <_strtod_l+0xca>
 8013806:	2a2d      	cmp	r2, #45	; 0x2d
 8013808:	d004      	beq.n	8013814 <_strtod_l+0xac>
 801380a:	2a20      	cmp	r2, #32
 801380c:	d1ca      	bne.n	80137a4 <_strtod_l+0x3c>
 801380e:	3301      	adds	r3, #1
 8013810:	931b      	str	r3, [sp, #108]	; 0x6c
 8013812:	e7bf      	b.n	8013794 <_strtod_l+0x2c>
 8013814:	2201      	movs	r2, #1
 8013816:	920d      	str	r2, [sp, #52]	; 0x34
 8013818:	1c5a      	adds	r2, r3, #1
 801381a:	921b      	str	r2, [sp, #108]	; 0x6c
 801381c:	785b      	ldrb	r3, [r3, #1]
 801381e:	2b00      	cmp	r3, #0
 8013820:	d1c2      	bne.n	80137a8 <_strtod_l+0x40>
 8013822:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013824:	961b      	str	r6, [sp, #108]	; 0x6c
 8013826:	2b00      	cmp	r3, #0
 8013828:	f040 8579 	bne.w	801431e <_strtod_l+0xbb6>
 801382c:	4652      	mov	r2, sl
 801382e:	465b      	mov	r3, fp
 8013830:	e7e2      	b.n	80137f8 <_strtod_l+0x90>
 8013832:	2200      	movs	r2, #0
 8013834:	e7ef      	b.n	8013816 <_strtod_l+0xae>
 8013836:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8013838:	b13a      	cbz	r2, 801384a <_strtod_l+0xe2>
 801383a:	2135      	movs	r1, #53	; 0x35
 801383c:	a81e      	add	r0, sp, #120	; 0x78
 801383e:	f002 fe81 	bl	8016544 <__copybits>
 8013842:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013844:	4648      	mov	r0, r9
 8013846:	f002 faed 	bl	8015e24 <_Bfree>
 801384a:	3c01      	subs	r4, #1
 801384c:	2c04      	cmp	r4, #4
 801384e:	d806      	bhi.n	801385e <_strtod_l+0xf6>
 8013850:	e8df f004 	tbb	[pc, r4]
 8013854:	1714030a 	.word	0x1714030a
 8013858:	0a          	.byte	0x0a
 8013859:	00          	.byte	0x00
 801385a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 801385e:	0730      	lsls	r0, r6, #28
 8013860:	d5c1      	bpl.n	80137e6 <_strtod_l+0x7e>
 8013862:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8013866:	e7be      	b.n	80137e6 <_strtod_l+0x7e>
 8013868:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 801386c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801386e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8013872:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8013876:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801387a:	e7f0      	b.n	801385e <_strtod_l+0xf6>
 801387c:	f8df b170 	ldr.w	fp, [pc, #368]	; 80139f0 <_strtod_l+0x288>
 8013880:	e7ed      	b.n	801385e <_strtod_l+0xf6>
 8013882:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8013886:	f04f 3aff 	mov.w	sl, #4294967295
 801388a:	e7e8      	b.n	801385e <_strtod_l+0xf6>
 801388c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801388e:	1c5a      	adds	r2, r3, #1
 8013890:	921b      	str	r2, [sp, #108]	; 0x6c
 8013892:	785b      	ldrb	r3, [r3, #1]
 8013894:	2b30      	cmp	r3, #48	; 0x30
 8013896:	d0f9      	beq.n	801388c <_strtod_l+0x124>
 8013898:	2b00      	cmp	r3, #0
 801389a:	d0a4      	beq.n	80137e6 <_strtod_l+0x7e>
 801389c:	2301      	movs	r3, #1
 801389e:	2500      	movs	r5, #0
 80138a0:	9306      	str	r3, [sp, #24]
 80138a2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80138a4:	9308      	str	r3, [sp, #32]
 80138a6:	9507      	str	r5, [sp, #28]
 80138a8:	9505      	str	r5, [sp, #20]
 80138aa:	220a      	movs	r2, #10
 80138ac:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80138ae:	7807      	ldrb	r7, [r0, #0]
 80138b0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80138b4:	b2d9      	uxtb	r1, r3
 80138b6:	2909      	cmp	r1, #9
 80138b8:	d929      	bls.n	801390e <_strtod_l+0x1a6>
 80138ba:	4622      	mov	r2, r4
 80138bc:	f8d8 1000 	ldr.w	r1, [r8]
 80138c0:	f003 fd1a 	bl	80172f8 <strncmp>
 80138c4:	2800      	cmp	r0, #0
 80138c6:	d031      	beq.n	801392c <_strtod_l+0x1c4>
 80138c8:	2000      	movs	r0, #0
 80138ca:	9c05      	ldr	r4, [sp, #20]
 80138cc:	9004      	str	r0, [sp, #16]
 80138ce:	463b      	mov	r3, r7
 80138d0:	4602      	mov	r2, r0
 80138d2:	2b65      	cmp	r3, #101	; 0x65
 80138d4:	d001      	beq.n	80138da <_strtod_l+0x172>
 80138d6:	2b45      	cmp	r3, #69	; 0x45
 80138d8:	d114      	bne.n	8013904 <_strtod_l+0x19c>
 80138da:	b924      	cbnz	r4, 80138e6 <_strtod_l+0x17e>
 80138dc:	b910      	cbnz	r0, 80138e4 <_strtod_l+0x17c>
 80138de:	9b06      	ldr	r3, [sp, #24]
 80138e0:	2b00      	cmp	r3, #0
 80138e2:	d09e      	beq.n	8013822 <_strtod_l+0xba>
 80138e4:	2400      	movs	r4, #0
 80138e6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80138e8:	1c73      	adds	r3, r6, #1
 80138ea:	931b      	str	r3, [sp, #108]	; 0x6c
 80138ec:	7873      	ldrb	r3, [r6, #1]
 80138ee:	2b2b      	cmp	r3, #43	; 0x2b
 80138f0:	d078      	beq.n	80139e4 <_strtod_l+0x27c>
 80138f2:	2b2d      	cmp	r3, #45	; 0x2d
 80138f4:	d070      	beq.n	80139d8 <_strtod_l+0x270>
 80138f6:	f04f 0c00 	mov.w	ip, #0
 80138fa:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80138fe:	2f09      	cmp	r7, #9
 8013900:	d97c      	bls.n	80139fc <_strtod_l+0x294>
 8013902:	961b      	str	r6, [sp, #108]	; 0x6c
 8013904:	f04f 0e00 	mov.w	lr, #0
 8013908:	e09a      	b.n	8013a40 <_strtod_l+0x2d8>
 801390a:	2300      	movs	r3, #0
 801390c:	e7c7      	b.n	801389e <_strtod_l+0x136>
 801390e:	9905      	ldr	r1, [sp, #20]
 8013910:	2908      	cmp	r1, #8
 8013912:	bfdd      	ittte	le
 8013914:	9907      	ldrle	r1, [sp, #28]
 8013916:	fb02 3301 	mlale	r3, r2, r1, r3
 801391a:	9307      	strle	r3, [sp, #28]
 801391c:	fb02 3505 	mlagt	r5, r2, r5, r3
 8013920:	9b05      	ldr	r3, [sp, #20]
 8013922:	3001      	adds	r0, #1
 8013924:	3301      	adds	r3, #1
 8013926:	9305      	str	r3, [sp, #20]
 8013928:	901b      	str	r0, [sp, #108]	; 0x6c
 801392a:	e7bf      	b.n	80138ac <_strtod_l+0x144>
 801392c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801392e:	191a      	adds	r2, r3, r4
 8013930:	921b      	str	r2, [sp, #108]	; 0x6c
 8013932:	9a05      	ldr	r2, [sp, #20]
 8013934:	5d1b      	ldrb	r3, [r3, r4]
 8013936:	2a00      	cmp	r2, #0
 8013938:	d037      	beq.n	80139aa <_strtod_l+0x242>
 801393a:	9c05      	ldr	r4, [sp, #20]
 801393c:	4602      	mov	r2, r0
 801393e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8013942:	2909      	cmp	r1, #9
 8013944:	d913      	bls.n	801396e <_strtod_l+0x206>
 8013946:	2101      	movs	r1, #1
 8013948:	9104      	str	r1, [sp, #16]
 801394a:	e7c2      	b.n	80138d2 <_strtod_l+0x16a>
 801394c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801394e:	1c5a      	adds	r2, r3, #1
 8013950:	921b      	str	r2, [sp, #108]	; 0x6c
 8013952:	785b      	ldrb	r3, [r3, #1]
 8013954:	3001      	adds	r0, #1
 8013956:	2b30      	cmp	r3, #48	; 0x30
 8013958:	d0f8      	beq.n	801394c <_strtod_l+0x1e4>
 801395a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801395e:	2a08      	cmp	r2, #8
 8013960:	f200 84e4 	bhi.w	801432c <_strtod_l+0xbc4>
 8013964:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8013966:	9208      	str	r2, [sp, #32]
 8013968:	4602      	mov	r2, r0
 801396a:	2000      	movs	r0, #0
 801396c:	4604      	mov	r4, r0
 801396e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8013972:	f100 0101 	add.w	r1, r0, #1
 8013976:	d012      	beq.n	801399e <_strtod_l+0x236>
 8013978:	440a      	add	r2, r1
 801397a:	eb00 0c04 	add.w	ip, r0, r4
 801397e:	4621      	mov	r1, r4
 8013980:	270a      	movs	r7, #10
 8013982:	458c      	cmp	ip, r1
 8013984:	d113      	bne.n	80139ae <_strtod_l+0x246>
 8013986:	1821      	adds	r1, r4, r0
 8013988:	2908      	cmp	r1, #8
 801398a:	f104 0401 	add.w	r4, r4, #1
 801398e:	4404      	add	r4, r0
 8013990:	dc19      	bgt.n	80139c6 <_strtod_l+0x25e>
 8013992:	9b07      	ldr	r3, [sp, #28]
 8013994:	210a      	movs	r1, #10
 8013996:	fb01 e303 	mla	r3, r1, r3, lr
 801399a:	9307      	str	r3, [sp, #28]
 801399c:	2100      	movs	r1, #0
 801399e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80139a0:	1c58      	adds	r0, r3, #1
 80139a2:	901b      	str	r0, [sp, #108]	; 0x6c
 80139a4:	785b      	ldrb	r3, [r3, #1]
 80139a6:	4608      	mov	r0, r1
 80139a8:	e7c9      	b.n	801393e <_strtod_l+0x1d6>
 80139aa:	9805      	ldr	r0, [sp, #20]
 80139ac:	e7d3      	b.n	8013956 <_strtod_l+0x1ee>
 80139ae:	2908      	cmp	r1, #8
 80139b0:	f101 0101 	add.w	r1, r1, #1
 80139b4:	dc03      	bgt.n	80139be <_strtod_l+0x256>
 80139b6:	9b07      	ldr	r3, [sp, #28]
 80139b8:	437b      	muls	r3, r7
 80139ba:	9307      	str	r3, [sp, #28]
 80139bc:	e7e1      	b.n	8013982 <_strtod_l+0x21a>
 80139be:	2910      	cmp	r1, #16
 80139c0:	bfd8      	it	le
 80139c2:	437d      	mulle	r5, r7
 80139c4:	e7dd      	b.n	8013982 <_strtod_l+0x21a>
 80139c6:	2c10      	cmp	r4, #16
 80139c8:	bfdc      	itt	le
 80139ca:	210a      	movle	r1, #10
 80139cc:	fb01 e505 	mlale	r5, r1, r5, lr
 80139d0:	e7e4      	b.n	801399c <_strtod_l+0x234>
 80139d2:	2301      	movs	r3, #1
 80139d4:	9304      	str	r3, [sp, #16]
 80139d6:	e781      	b.n	80138dc <_strtod_l+0x174>
 80139d8:	f04f 0c01 	mov.w	ip, #1
 80139dc:	1cb3      	adds	r3, r6, #2
 80139de:	931b      	str	r3, [sp, #108]	; 0x6c
 80139e0:	78b3      	ldrb	r3, [r6, #2]
 80139e2:	e78a      	b.n	80138fa <_strtod_l+0x192>
 80139e4:	f04f 0c00 	mov.w	ip, #0
 80139e8:	e7f8      	b.n	80139dc <_strtod_l+0x274>
 80139ea:	bf00      	nop
 80139ec:	08017d64 	.word	0x08017d64
 80139f0:	7ff00000 	.word	0x7ff00000
 80139f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80139f6:	1c5f      	adds	r7, r3, #1
 80139f8:	971b      	str	r7, [sp, #108]	; 0x6c
 80139fa:	785b      	ldrb	r3, [r3, #1]
 80139fc:	2b30      	cmp	r3, #48	; 0x30
 80139fe:	d0f9      	beq.n	80139f4 <_strtod_l+0x28c>
 8013a00:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8013a04:	2f08      	cmp	r7, #8
 8013a06:	f63f af7d 	bhi.w	8013904 <_strtod_l+0x19c>
 8013a0a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8013a0e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013a10:	930a      	str	r3, [sp, #40]	; 0x28
 8013a12:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013a14:	1c5f      	adds	r7, r3, #1
 8013a16:	971b      	str	r7, [sp, #108]	; 0x6c
 8013a18:	785b      	ldrb	r3, [r3, #1]
 8013a1a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8013a1e:	f1b8 0f09 	cmp.w	r8, #9
 8013a22:	d937      	bls.n	8013a94 <_strtod_l+0x32c>
 8013a24:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013a26:	1a7f      	subs	r7, r7, r1
 8013a28:	2f08      	cmp	r7, #8
 8013a2a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8013a2e:	dc37      	bgt.n	8013aa0 <_strtod_l+0x338>
 8013a30:	45be      	cmp	lr, r7
 8013a32:	bfa8      	it	ge
 8013a34:	46be      	movge	lr, r7
 8013a36:	f1bc 0f00 	cmp.w	ip, #0
 8013a3a:	d001      	beq.n	8013a40 <_strtod_l+0x2d8>
 8013a3c:	f1ce 0e00 	rsb	lr, lr, #0
 8013a40:	2c00      	cmp	r4, #0
 8013a42:	d151      	bne.n	8013ae8 <_strtod_l+0x380>
 8013a44:	2800      	cmp	r0, #0
 8013a46:	f47f aece 	bne.w	80137e6 <_strtod_l+0x7e>
 8013a4a:	9a06      	ldr	r2, [sp, #24]
 8013a4c:	2a00      	cmp	r2, #0
 8013a4e:	f47f aeca 	bne.w	80137e6 <_strtod_l+0x7e>
 8013a52:	9a04      	ldr	r2, [sp, #16]
 8013a54:	2a00      	cmp	r2, #0
 8013a56:	f47f aee4 	bne.w	8013822 <_strtod_l+0xba>
 8013a5a:	2b4e      	cmp	r3, #78	; 0x4e
 8013a5c:	d027      	beq.n	8013aae <_strtod_l+0x346>
 8013a5e:	dc21      	bgt.n	8013aa4 <_strtod_l+0x33c>
 8013a60:	2b49      	cmp	r3, #73	; 0x49
 8013a62:	f47f aede 	bne.w	8013822 <_strtod_l+0xba>
 8013a66:	49a0      	ldr	r1, [pc, #640]	; (8013ce8 <_strtod_l+0x580>)
 8013a68:	a81b      	add	r0, sp, #108	; 0x6c
 8013a6a:	f002 f851 	bl	8015b10 <__match>
 8013a6e:	2800      	cmp	r0, #0
 8013a70:	f43f aed7 	beq.w	8013822 <_strtod_l+0xba>
 8013a74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013a76:	499d      	ldr	r1, [pc, #628]	; (8013cec <_strtod_l+0x584>)
 8013a78:	3b01      	subs	r3, #1
 8013a7a:	a81b      	add	r0, sp, #108	; 0x6c
 8013a7c:	931b      	str	r3, [sp, #108]	; 0x6c
 8013a7e:	f002 f847 	bl	8015b10 <__match>
 8013a82:	b910      	cbnz	r0, 8013a8a <_strtod_l+0x322>
 8013a84:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013a86:	3301      	adds	r3, #1
 8013a88:	931b      	str	r3, [sp, #108]	; 0x6c
 8013a8a:	f8df b274 	ldr.w	fp, [pc, #628]	; 8013d00 <_strtod_l+0x598>
 8013a8e:	f04f 0a00 	mov.w	sl, #0
 8013a92:	e6a8      	b.n	80137e6 <_strtod_l+0x7e>
 8013a94:	210a      	movs	r1, #10
 8013a96:	fb01 3e0e 	mla	lr, r1, lr, r3
 8013a9a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8013a9e:	e7b8      	b.n	8013a12 <_strtod_l+0x2aa>
 8013aa0:	46be      	mov	lr, r7
 8013aa2:	e7c8      	b.n	8013a36 <_strtod_l+0x2ce>
 8013aa4:	2b69      	cmp	r3, #105	; 0x69
 8013aa6:	d0de      	beq.n	8013a66 <_strtod_l+0x2fe>
 8013aa8:	2b6e      	cmp	r3, #110	; 0x6e
 8013aaa:	f47f aeba 	bne.w	8013822 <_strtod_l+0xba>
 8013aae:	4990      	ldr	r1, [pc, #576]	; (8013cf0 <_strtod_l+0x588>)
 8013ab0:	a81b      	add	r0, sp, #108	; 0x6c
 8013ab2:	f002 f82d 	bl	8015b10 <__match>
 8013ab6:	2800      	cmp	r0, #0
 8013ab8:	f43f aeb3 	beq.w	8013822 <_strtod_l+0xba>
 8013abc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013abe:	781b      	ldrb	r3, [r3, #0]
 8013ac0:	2b28      	cmp	r3, #40	; 0x28
 8013ac2:	d10e      	bne.n	8013ae2 <_strtod_l+0x37a>
 8013ac4:	aa1e      	add	r2, sp, #120	; 0x78
 8013ac6:	498b      	ldr	r1, [pc, #556]	; (8013cf4 <_strtod_l+0x58c>)
 8013ac8:	a81b      	add	r0, sp, #108	; 0x6c
 8013aca:	f002 f835 	bl	8015b38 <__hexnan>
 8013ace:	2805      	cmp	r0, #5
 8013ad0:	d107      	bne.n	8013ae2 <_strtod_l+0x37a>
 8013ad2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013ad4:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8013ad8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8013adc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8013ae0:	e681      	b.n	80137e6 <_strtod_l+0x7e>
 8013ae2:	f8df b224 	ldr.w	fp, [pc, #548]	; 8013d08 <_strtod_l+0x5a0>
 8013ae6:	e7d2      	b.n	8013a8e <_strtod_l+0x326>
 8013ae8:	ebae 0302 	sub.w	r3, lr, r2
 8013aec:	9306      	str	r3, [sp, #24]
 8013aee:	9b05      	ldr	r3, [sp, #20]
 8013af0:	9807      	ldr	r0, [sp, #28]
 8013af2:	2b00      	cmp	r3, #0
 8013af4:	bf08      	it	eq
 8013af6:	4623      	moveq	r3, r4
 8013af8:	2c10      	cmp	r4, #16
 8013afa:	9305      	str	r3, [sp, #20]
 8013afc:	46a0      	mov	r8, r4
 8013afe:	bfa8      	it	ge
 8013b00:	f04f 0810 	movge.w	r8, #16
 8013b04:	f7ec fd16 	bl	8000534 <__aeabi_ui2d>
 8013b08:	2c09      	cmp	r4, #9
 8013b0a:	4682      	mov	sl, r0
 8013b0c:	468b      	mov	fp, r1
 8013b0e:	dc13      	bgt.n	8013b38 <_strtod_l+0x3d0>
 8013b10:	9b06      	ldr	r3, [sp, #24]
 8013b12:	2b00      	cmp	r3, #0
 8013b14:	f43f ae67 	beq.w	80137e6 <_strtod_l+0x7e>
 8013b18:	9b06      	ldr	r3, [sp, #24]
 8013b1a:	dd7a      	ble.n	8013c12 <_strtod_l+0x4aa>
 8013b1c:	2b16      	cmp	r3, #22
 8013b1e:	dc61      	bgt.n	8013be4 <_strtod_l+0x47c>
 8013b20:	4a75      	ldr	r2, [pc, #468]	; (8013cf8 <_strtod_l+0x590>)
 8013b22:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8013b26:	e9de 0100 	ldrd	r0, r1, [lr]
 8013b2a:	4652      	mov	r2, sl
 8013b2c:	465b      	mov	r3, fp
 8013b2e:	f7ec fd7b 	bl	8000628 <__aeabi_dmul>
 8013b32:	4682      	mov	sl, r0
 8013b34:	468b      	mov	fp, r1
 8013b36:	e656      	b.n	80137e6 <_strtod_l+0x7e>
 8013b38:	4b6f      	ldr	r3, [pc, #444]	; (8013cf8 <_strtod_l+0x590>)
 8013b3a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8013b3e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8013b42:	f7ec fd71 	bl	8000628 <__aeabi_dmul>
 8013b46:	4606      	mov	r6, r0
 8013b48:	4628      	mov	r0, r5
 8013b4a:	460f      	mov	r7, r1
 8013b4c:	f7ec fcf2 	bl	8000534 <__aeabi_ui2d>
 8013b50:	4602      	mov	r2, r0
 8013b52:	460b      	mov	r3, r1
 8013b54:	4630      	mov	r0, r6
 8013b56:	4639      	mov	r1, r7
 8013b58:	f7ec fbb0 	bl	80002bc <__adddf3>
 8013b5c:	2c0f      	cmp	r4, #15
 8013b5e:	4682      	mov	sl, r0
 8013b60:	468b      	mov	fp, r1
 8013b62:	ddd5      	ble.n	8013b10 <_strtod_l+0x3a8>
 8013b64:	9b06      	ldr	r3, [sp, #24]
 8013b66:	eba4 0808 	sub.w	r8, r4, r8
 8013b6a:	4498      	add	r8, r3
 8013b6c:	f1b8 0f00 	cmp.w	r8, #0
 8013b70:	f340 8096 	ble.w	8013ca0 <_strtod_l+0x538>
 8013b74:	f018 030f 	ands.w	r3, r8, #15
 8013b78:	d00a      	beq.n	8013b90 <_strtod_l+0x428>
 8013b7a:	495f      	ldr	r1, [pc, #380]	; (8013cf8 <_strtod_l+0x590>)
 8013b7c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013b80:	4652      	mov	r2, sl
 8013b82:	465b      	mov	r3, fp
 8013b84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013b88:	f7ec fd4e 	bl	8000628 <__aeabi_dmul>
 8013b8c:	4682      	mov	sl, r0
 8013b8e:	468b      	mov	fp, r1
 8013b90:	f038 080f 	bics.w	r8, r8, #15
 8013b94:	d073      	beq.n	8013c7e <_strtod_l+0x516>
 8013b96:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8013b9a:	dd47      	ble.n	8013c2c <_strtod_l+0x4c4>
 8013b9c:	2400      	movs	r4, #0
 8013b9e:	46a0      	mov	r8, r4
 8013ba0:	9407      	str	r4, [sp, #28]
 8013ba2:	9405      	str	r4, [sp, #20]
 8013ba4:	2322      	movs	r3, #34	; 0x22
 8013ba6:	f8df b158 	ldr.w	fp, [pc, #344]	; 8013d00 <_strtod_l+0x598>
 8013baa:	f8c9 3000 	str.w	r3, [r9]
 8013bae:	f04f 0a00 	mov.w	sl, #0
 8013bb2:	9b07      	ldr	r3, [sp, #28]
 8013bb4:	2b00      	cmp	r3, #0
 8013bb6:	f43f ae16 	beq.w	80137e6 <_strtod_l+0x7e>
 8013bba:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013bbc:	4648      	mov	r0, r9
 8013bbe:	f002 f931 	bl	8015e24 <_Bfree>
 8013bc2:	9905      	ldr	r1, [sp, #20]
 8013bc4:	4648      	mov	r0, r9
 8013bc6:	f002 f92d 	bl	8015e24 <_Bfree>
 8013bca:	4641      	mov	r1, r8
 8013bcc:	4648      	mov	r0, r9
 8013bce:	f002 f929 	bl	8015e24 <_Bfree>
 8013bd2:	9907      	ldr	r1, [sp, #28]
 8013bd4:	4648      	mov	r0, r9
 8013bd6:	f002 f925 	bl	8015e24 <_Bfree>
 8013bda:	4621      	mov	r1, r4
 8013bdc:	4648      	mov	r0, r9
 8013bde:	f002 f921 	bl	8015e24 <_Bfree>
 8013be2:	e600      	b.n	80137e6 <_strtod_l+0x7e>
 8013be4:	9a06      	ldr	r2, [sp, #24]
 8013be6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8013bea:	4293      	cmp	r3, r2
 8013bec:	dbba      	blt.n	8013b64 <_strtod_l+0x3fc>
 8013bee:	4d42      	ldr	r5, [pc, #264]	; (8013cf8 <_strtod_l+0x590>)
 8013bf0:	f1c4 040f 	rsb	r4, r4, #15
 8013bf4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8013bf8:	4652      	mov	r2, sl
 8013bfa:	465b      	mov	r3, fp
 8013bfc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013c00:	f7ec fd12 	bl	8000628 <__aeabi_dmul>
 8013c04:	9b06      	ldr	r3, [sp, #24]
 8013c06:	1b1c      	subs	r4, r3, r4
 8013c08:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8013c0c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013c10:	e78d      	b.n	8013b2e <_strtod_l+0x3c6>
 8013c12:	f113 0f16 	cmn.w	r3, #22
 8013c16:	dba5      	blt.n	8013b64 <_strtod_l+0x3fc>
 8013c18:	4a37      	ldr	r2, [pc, #220]	; (8013cf8 <_strtod_l+0x590>)
 8013c1a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8013c1e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8013c22:	4650      	mov	r0, sl
 8013c24:	4659      	mov	r1, fp
 8013c26:	f7ec fe29 	bl	800087c <__aeabi_ddiv>
 8013c2a:	e782      	b.n	8013b32 <_strtod_l+0x3ca>
 8013c2c:	2300      	movs	r3, #0
 8013c2e:	4e33      	ldr	r6, [pc, #204]	; (8013cfc <_strtod_l+0x594>)
 8013c30:	ea4f 1828 	mov.w	r8, r8, asr #4
 8013c34:	4650      	mov	r0, sl
 8013c36:	4659      	mov	r1, fp
 8013c38:	461d      	mov	r5, r3
 8013c3a:	f1b8 0f01 	cmp.w	r8, #1
 8013c3e:	dc21      	bgt.n	8013c84 <_strtod_l+0x51c>
 8013c40:	b10b      	cbz	r3, 8013c46 <_strtod_l+0x4de>
 8013c42:	4682      	mov	sl, r0
 8013c44:	468b      	mov	fp, r1
 8013c46:	4b2d      	ldr	r3, [pc, #180]	; (8013cfc <_strtod_l+0x594>)
 8013c48:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8013c4c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8013c50:	4652      	mov	r2, sl
 8013c52:	465b      	mov	r3, fp
 8013c54:	e9d5 0100 	ldrd	r0, r1, [r5]
 8013c58:	f7ec fce6 	bl	8000628 <__aeabi_dmul>
 8013c5c:	4b28      	ldr	r3, [pc, #160]	; (8013d00 <_strtod_l+0x598>)
 8013c5e:	460a      	mov	r2, r1
 8013c60:	400b      	ands	r3, r1
 8013c62:	4928      	ldr	r1, [pc, #160]	; (8013d04 <_strtod_l+0x59c>)
 8013c64:	428b      	cmp	r3, r1
 8013c66:	4682      	mov	sl, r0
 8013c68:	d898      	bhi.n	8013b9c <_strtod_l+0x434>
 8013c6a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8013c6e:	428b      	cmp	r3, r1
 8013c70:	bf86      	itte	hi
 8013c72:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8013d0c <_strtod_l+0x5a4>
 8013c76:	f04f 3aff 	movhi.w	sl, #4294967295
 8013c7a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8013c7e:	2300      	movs	r3, #0
 8013c80:	9304      	str	r3, [sp, #16]
 8013c82:	e077      	b.n	8013d74 <_strtod_l+0x60c>
 8013c84:	f018 0f01 	tst.w	r8, #1
 8013c88:	d006      	beq.n	8013c98 <_strtod_l+0x530>
 8013c8a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8013c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c92:	f7ec fcc9 	bl	8000628 <__aeabi_dmul>
 8013c96:	2301      	movs	r3, #1
 8013c98:	3501      	adds	r5, #1
 8013c9a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8013c9e:	e7cc      	b.n	8013c3a <_strtod_l+0x4d2>
 8013ca0:	d0ed      	beq.n	8013c7e <_strtod_l+0x516>
 8013ca2:	f1c8 0800 	rsb	r8, r8, #0
 8013ca6:	f018 020f 	ands.w	r2, r8, #15
 8013caa:	d00a      	beq.n	8013cc2 <_strtod_l+0x55a>
 8013cac:	4b12      	ldr	r3, [pc, #72]	; (8013cf8 <_strtod_l+0x590>)
 8013cae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013cb2:	4650      	mov	r0, sl
 8013cb4:	4659      	mov	r1, fp
 8013cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cba:	f7ec fddf 	bl	800087c <__aeabi_ddiv>
 8013cbe:	4682      	mov	sl, r0
 8013cc0:	468b      	mov	fp, r1
 8013cc2:	ea5f 1828 	movs.w	r8, r8, asr #4
 8013cc6:	d0da      	beq.n	8013c7e <_strtod_l+0x516>
 8013cc8:	f1b8 0f1f 	cmp.w	r8, #31
 8013ccc:	dd20      	ble.n	8013d10 <_strtod_l+0x5a8>
 8013cce:	2400      	movs	r4, #0
 8013cd0:	46a0      	mov	r8, r4
 8013cd2:	9407      	str	r4, [sp, #28]
 8013cd4:	9405      	str	r4, [sp, #20]
 8013cd6:	2322      	movs	r3, #34	; 0x22
 8013cd8:	f04f 0a00 	mov.w	sl, #0
 8013cdc:	f04f 0b00 	mov.w	fp, #0
 8013ce0:	f8c9 3000 	str.w	r3, [r9]
 8013ce4:	e765      	b.n	8013bb2 <_strtod_l+0x44a>
 8013ce6:	bf00      	nop
 8013ce8:	08017d31 	.word	0x08017d31
 8013cec:	08017dbb 	.word	0x08017dbb
 8013cf0:	08017d39 	.word	0x08017d39
 8013cf4:	08017d78 	.word	0x08017d78
 8013cf8:	08017e60 	.word	0x08017e60
 8013cfc:	08017e38 	.word	0x08017e38
 8013d00:	7ff00000 	.word	0x7ff00000
 8013d04:	7ca00000 	.word	0x7ca00000
 8013d08:	fff80000 	.word	0xfff80000
 8013d0c:	7fefffff 	.word	0x7fefffff
 8013d10:	f018 0310 	ands.w	r3, r8, #16
 8013d14:	bf18      	it	ne
 8013d16:	236a      	movne	r3, #106	; 0x6a
 8013d18:	4da0      	ldr	r5, [pc, #640]	; (8013f9c <_strtod_l+0x834>)
 8013d1a:	9304      	str	r3, [sp, #16]
 8013d1c:	4650      	mov	r0, sl
 8013d1e:	4659      	mov	r1, fp
 8013d20:	2300      	movs	r3, #0
 8013d22:	f1b8 0f00 	cmp.w	r8, #0
 8013d26:	f300 810a 	bgt.w	8013f3e <_strtod_l+0x7d6>
 8013d2a:	b10b      	cbz	r3, 8013d30 <_strtod_l+0x5c8>
 8013d2c:	4682      	mov	sl, r0
 8013d2e:	468b      	mov	fp, r1
 8013d30:	9b04      	ldr	r3, [sp, #16]
 8013d32:	b1bb      	cbz	r3, 8013d64 <_strtod_l+0x5fc>
 8013d34:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8013d38:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8013d3c:	2b00      	cmp	r3, #0
 8013d3e:	4659      	mov	r1, fp
 8013d40:	dd10      	ble.n	8013d64 <_strtod_l+0x5fc>
 8013d42:	2b1f      	cmp	r3, #31
 8013d44:	f340 8107 	ble.w	8013f56 <_strtod_l+0x7ee>
 8013d48:	2b34      	cmp	r3, #52	; 0x34
 8013d4a:	bfde      	ittt	le
 8013d4c:	3b20      	suble	r3, #32
 8013d4e:	f04f 32ff 	movle.w	r2, #4294967295
 8013d52:	fa02 f303 	lslle.w	r3, r2, r3
 8013d56:	f04f 0a00 	mov.w	sl, #0
 8013d5a:	bfcc      	ite	gt
 8013d5c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8013d60:	ea03 0b01 	andle.w	fp, r3, r1
 8013d64:	2200      	movs	r2, #0
 8013d66:	2300      	movs	r3, #0
 8013d68:	4650      	mov	r0, sl
 8013d6a:	4659      	mov	r1, fp
 8013d6c:	f7ec fec4 	bl	8000af8 <__aeabi_dcmpeq>
 8013d70:	2800      	cmp	r0, #0
 8013d72:	d1ac      	bne.n	8013cce <_strtod_l+0x566>
 8013d74:	9b07      	ldr	r3, [sp, #28]
 8013d76:	9300      	str	r3, [sp, #0]
 8013d78:	9a05      	ldr	r2, [sp, #20]
 8013d7a:	9908      	ldr	r1, [sp, #32]
 8013d7c:	4623      	mov	r3, r4
 8013d7e:	4648      	mov	r0, r9
 8013d80:	f002 f8a2 	bl	8015ec8 <__s2b>
 8013d84:	9007      	str	r0, [sp, #28]
 8013d86:	2800      	cmp	r0, #0
 8013d88:	f43f af08 	beq.w	8013b9c <_strtod_l+0x434>
 8013d8c:	9a06      	ldr	r2, [sp, #24]
 8013d8e:	9b06      	ldr	r3, [sp, #24]
 8013d90:	2a00      	cmp	r2, #0
 8013d92:	f1c3 0300 	rsb	r3, r3, #0
 8013d96:	bfa8      	it	ge
 8013d98:	2300      	movge	r3, #0
 8013d9a:	930e      	str	r3, [sp, #56]	; 0x38
 8013d9c:	2400      	movs	r4, #0
 8013d9e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8013da2:	9316      	str	r3, [sp, #88]	; 0x58
 8013da4:	46a0      	mov	r8, r4
 8013da6:	9b07      	ldr	r3, [sp, #28]
 8013da8:	4648      	mov	r0, r9
 8013daa:	6859      	ldr	r1, [r3, #4]
 8013dac:	f002 f806 	bl	8015dbc <_Balloc>
 8013db0:	9005      	str	r0, [sp, #20]
 8013db2:	2800      	cmp	r0, #0
 8013db4:	f43f aef6 	beq.w	8013ba4 <_strtod_l+0x43c>
 8013db8:	9b07      	ldr	r3, [sp, #28]
 8013dba:	691a      	ldr	r2, [r3, #16]
 8013dbc:	3202      	adds	r2, #2
 8013dbe:	f103 010c 	add.w	r1, r3, #12
 8013dc2:	0092      	lsls	r2, r2, #2
 8013dc4:	300c      	adds	r0, #12
 8013dc6:	f7fe fd13 	bl	80127f0 <memcpy>
 8013dca:	aa1e      	add	r2, sp, #120	; 0x78
 8013dcc:	a91d      	add	r1, sp, #116	; 0x74
 8013dce:	ec4b ab10 	vmov	d0, sl, fp
 8013dd2:	4648      	mov	r0, r9
 8013dd4:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8013dd8:	f002 fb32 	bl	8016440 <__d2b>
 8013ddc:	901c      	str	r0, [sp, #112]	; 0x70
 8013dde:	2800      	cmp	r0, #0
 8013de0:	f43f aee0 	beq.w	8013ba4 <_strtod_l+0x43c>
 8013de4:	2101      	movs	r1, #1
 8013de6:	4648      	mov	r0, r9
 8013de8:	f002 f8fa 	bl	8015fe0 <__i2b>
 8013dec:	4680      	mov	r8, r0
 8013dee:	2800      	cmp	r0, #0
 8013df0:	f43f aed8 	beq.w	8013ba4 <_strtod_l+0x43c>
 8013df4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8013df6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8013df8:	2e00      	cmp	r6, #0
 8013dfa:	bfab      	itete	ge
 8013dfc:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8013dfe:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8013e00:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8013e02:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8013e04:	bfac      	ite	ge
 8013e06:	18f7      	addge	r7, r6, r3
 8013e08:	1b9d      	sublt	r5, r3, r6
 8013e0a:	9b04      	ldr	r3, [sp, #16]
 8013e0c:	1af6      	subs	r6, r6, r3
 8013e0e:	4416      	add	r6, r2
 8013e10:	4b63      	ldr	r3, [pc, #396]	; (8013fa0 <_strtod_l+0x838>)
 8013e12:	3e01      	subs	r6, #1
 8013e14:	429e      	cmp	r6, r3
 8013e16:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8013e1a:	f280 80af 	bge.w	8013f7c <_strtod_l+0x814>
 8013e1e:	1b9b      	subs	r3, r3, r6
 8013e20:	2b1f      	cmp	r3, #31
 8013e22:	eba2 0203 	sub.w	r2, r2, r3
 8013e26:	f04f 0101 	mov.w	r1, #1
 8013e2a:	f300 809b 	bgt.w	8013f64 <_strtod_l+0x7fc>
 8013e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8013e32:	930f      	str	r3, [sp, #60]	; 0x3c
 8013e34:	2300      	movs	r3, #0
 8013e36:	930a      	str	r3, [sp, #40]	; 0x28
 8013e38:	18be      	adds	r6, r7, r2
 8013e3a:	9b04      	ldr	r3, [sp, #16]
 8013e3c:	42b7      	cmp	r7, r6
 8013e3e:	4415      	add	r5, r2
 8013e40:	441d      	add	r5, r3
 8013e42:	463b      	mov	r3, r7
 8013e44:	bfa8      	it	ge
 8013e46:	4633      	movge	r3, r6
 8013e48:	42ab      	cmp	r3, r5
 8013e4a:	bfa8      	it	ge
 8013e4c:	462b      	movge	r3, r5
 8013e4e:	2b00      	cmp	r3, #0
 8013e50:	bfc2      	ittt	gt
 8013e52:	1af6      	subgt	r6, r6, r3
 8013e54:	1aed      	subgt	r5, r5, r3
 8013e56:	1aff      	subgt	r7, r7, r3
 8013e58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013e5a:	b1bb      	cbz	r3, 8013e8c <_strtod_l+0x724>
 8013e5c:	4641      	mov	r1, r8
 8013e5e:	461a      	mov	r2, r3
 8013e60:	4648      	mov	r0, r9
 8013e62:	f002 f95d 	bl	8016120 <__pow5mult>
 8013e66:	4680      	mov	r8, r0
 8013e68:	2800      	cmp	r0, #0
 8013e6a:	f43f ae9b 	beq.w	8013ba4 <_strtod_l+0x43c>
 8013e6e:	4601      	mov	r1, r0
 8013e70:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8013e72:	4648      	mov	r0, r9
 8013e74:	f002 f8bd 	bl	8015ff2 <__multiply>
 8013e78:	900c      	str	r0, [sp, #48]	; 0x30
 8013e7a:	2800      	cmp	r0, #0
 8013e7c:	f43f ae92 	beq.w	8013ba4 <_strtod_l+0x43c>
 8013e80:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013e82:	4648      	mov	r0, r9
 8013e84:	f001 ffce 	bl	8015e24 <_Bfree>
 8013e88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013e8a:	931c      	str	r3, [sp, #112]	; 0x70
 8013e8c:	2e00      	cmp	r6, #0
 8013e8e:	dc7a      	bgt.n	8013f86 <_strtod_l+0x81e>
 8013e90:	9b06      	ldr	r3, [sp, #24]
 8013e92:	2b00      	cmp	r3, #0
 8013e94:	dd08      	ble.n	8013ea8 <_strtod_l+0x740>
 8013e96:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8013e98:	9905      	ldr	r1, [sp, #20]
 8013e9a:	4648      	mov	r0, r9
 8013e9c:	f002 f940 	bl	8016120 <__pow5mult>
 8013ea0:	9005      	str	r0, [sp, #20]
 8013ea2:	2800      	cmp	r0, #0
 8013ea4:	f43f ae7e 	beq.w	8013ba4 <_strtod_l+0x43c>
 8013ea8:	2d00      	cmp	r5, #0
 8013eaa:	dd08      	ble.n	8013ebe <_strtod_l+0x756>
 8013eac:	462a      	mov	r2, r5
 8013eae:	9905      	ldr	r1, [sp, #20]
 8013eb0:	4648      	mov	r0, r9
 8013eb2:	f002 f983 	bl	80161bc <__lshift>
 8013eb6:	9005      	str	r0, [sp, #20]
 8013eb8:	2800      	cmp	r0, #0
 8013eba:	f43f ae73 	beq.w	8013ba4 <_strtod_l+0x43c>
 8013ebe:	2f00      	cmp	r7, #0
 8013ec0:	dd08      	ble.n	8013ed4 <_strtod_l+0x76c>
 8013ec2:	4641      	mov	r1, r8
 8013ec4:	463a      	mov	r2, r7
 8013ec6:	4648      	mov	r0, r9
 8013ec8:	f002 f978 	bl	80161bc <__lshift>
 8013ecc:	4680      	mov	r8, r0
 8013ece:	2800      	cmp	r0, #0
 8013ed0:	f43f ae68 	beq.w	8013ba4 <_strtod_l+0x43c>
 8013ed4:	9a05      	ldr	r2, [sp, #20]
 8013ed6:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013ed8:	4648      	mov	r0, r9
 8013eda:	f002 f9dd 	bl	8016298 <__mdiff>
 8013ede:	4604      	mov	r4, r0
 8013ee0:	2800      	cmp	r0, #0
 8013ee2:	f43f ae5f 	beq.w	8013ba4 <_strtod_l+0x43c>
 8013ee6:	68c3      	ldr	r3, [r0, #12]
 8013ee8:	930c      	str	r3, [sp, #48]	; 0x30
 8013eea:	2300      	movs	r3, #0
 8013eec:	60c3      	str	r3, [r0, #12]
 8013eee:	4641      	mov	r1, r8
 8013ef0:	f002 f9b8 	bl	8016264 <__mcmp>
 8013ef4:	2800      	cmp	r0, #0
 8013ef6:	da55      	bge.n	8013fa4 <_strtod_l+0x83c>
 8013ef8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013efa:	b9e3      	cbnz	r3, 8013f36 <_strtod_l+0x7ce>
 8013efc:	f1ba 0f00 	cmp.w	sl, #0
 8013f00:	d119      	bne.n	8013f36 <_strtod_l+0x7ce>
 8013f02:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013f06:	b9b3      	cbnz	r3, 8013f36 <_strtod_l+0x7ce>
 8013f08:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013f0c:	0d1b      	lsrs	r3, r3, #20
 8013f0e:	051b      	lsls	r3, r3, #20
 8013f10:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8013f14:	d90f      	bls.n	8013f36 <_strtod_l+0x7ce>
 8013f16:	6963      	ldr	r3, [r4, #20]
 8013f18:	b913      	cbnz	r3, 8013f20 <_strtod_l+0x7b8>
 8013f1a:	6923      	ldr	r3, [r4, #16]
 8013f1c:	2b01      	cmp	r3, #1
 8013f1e:	dd0a      	ble.n	8013f36 <_strtod_l+0x7ce>
 8013f20:	4621      	mov	r1, r4
 8013f22:	2201      	movs	r2, #1
 8013f24:	4648      	mov	r0, r9
 8013f26:	f002 f949 	bl	80161bc <__lshift>
 8013f2a:	4641      	mov	r1, r8
 8013f2c:	4604      	mov	r4, r0
 8013f2e:	f002 f999 	bl	8016264 <__mcmp>
 8013f32:	2800      	cmp	r0, #0
 8013f34:	dc67      	bgt.n	8014006 <_strtod_l+0x89e>
 8013f36:	9b04      	ldr	r3, [sp, #16]
 8013f38:	2b00      	cmp	r3, #0
 8013f3a:	d171      	bne.n	8014020 <_strtod_l+0x8b8>
 8013f3c:	e63d      	b.n	8013bba <_strtod_l+0x452>
 8013f3e:	f018 0f01 	tst.w	r8, #1
 8013f42:	d004      	beq.n	8013f4e <_strtod_l+0x7e6>
 8013f44:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013f48:	f7ec fb6e 	bl	8000628 <__aeabi_dmul>
 8013f4c:	2301      	movs	r3, #1
 8013f4e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8013f52:	3508      	adds	r5, #8
 8013f54:	e6e5      	b.n	8013d22 <_strtod_l+0x5ba>
 8013f56:	f04f 32ff 	mov.w	r2, #4294967295
 8013f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8013f5e:	ea03 0a0a 	and.w	sl, r3, sl
 8013f62:	e6ff      	b.n	8013d64 <_strtod_l+0x5fc>
 8013f64:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8013f68:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8013f6c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8013f70:	36e2      	adds	r6, #226	; 0xe2
 8013f72:	fa01 f306 	lsl.w	r3, r1, r6
 8013f76:	930a      	str	r3, [sp, #40]	; 0x28
 8013f78:	910f      	str	r1, [sp, #60]	; 0x3c
 8013f7a:	e75d      	b.n	8013e38 <_strtod_l+0x6d0>
 8013f7c:	2300      	movs	r3, #0
 8013f7e:	930a      	str	r3, [sp, #40]	; 0x28
 8013f80:	2301      	movs	r3, #1
 8013f82:	930f      	str	r3, [sp, #60]	; 0x3c
 8013f84:	e758      	b.n	8013e38 <_strtod_l+0x6d0>
 8013f86:	4632      	mov	r2, r6
 8013f88:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013f8a:	4648      	mov	r0, r9
 8013f8c:	f002 f916 	bl	80161bc <__lshift>
 8013f90:	901c      	str	r0, [sp, #112]	; 0x70
 8013f92:	2800      	cmp	r0, #0
 8013f94:	f47f af7c 	bne.w	8013e90 <_strtod_l+0x728>
 8013f98:	e604      	b.n	8013ba4 <_strtod_l+0x43c>
 8013f9a:	bf00      	nop
 8013f9c:	08017d90 	.word	0x08017d90
 8013fa0:	fffffc02 	.word	0xfffffc02
 8013fa4:	465d      	mov	r5, fp
 8013fa6:	f040 8086 	bne.w	80140b6 <_strtod_l+0x94e>
 8013faa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013fac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013fb0:	b32a      	cbz	r2, 8013ffe <_strtod_l+0x896>
 8013fb2:	4aaf      	ldr	r2, [pc, #700]	; (8014270 <_strtod_l+0xb08>)
 8013fb4:	4293      	cmp	r3, r2
 8013fb6:	d153      	bne.n	8014060 <_strtod_l+0x8f8>
 8013fb8:	9b04      	ldr	r3, [sp, #16]
 8013fba:	4650      	mov	r0, sl
 8013fbc:	b1d3      	cbz	r3, 8013ff4 <_strtod_l+0x88c>
 8013fbe:	4aad      	ldr	r2, [pc, #692]	; (8014274 <_strtod_l+0xb0c>)
 8013fc0:	402a      	ands	r2, r5
 8013fc2:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8013fc6:	f04f 31ff 	mov.w	r1, #4294967295
 8013fca:	d816      	bhi.n	8013ffa <_strtod_l+0x892>
 8013fcc:	0d12      	lsrs	r2, r2, #20
 8013fce:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8013fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8013fd6:	4298      	cmp	r0, r3
 8013fd8:	d142      	bne.n	8014060 <_strtod_l+0x8f8>
 8013fda:	4ba7      	ldr	r3, [pc, #668]	; (8014278 <_strtod_l+0xb10>)
 8013fdc:	429d      	cmp	r5, r3
 8013fde:	d102      	bne.n	8013fe6 <_strtod_l+0x87e>
 8013fe0:	3001      	adds	r0, #1
 8013fe2:	f43f addf 	beq.w	8013ba4 <_strtod_l+0x43c>
 8013fe6:	4ba3      	ldr	r3, [pc, #652]	; (8014274 <_strtod_l+0xb0c>)
 8013fe8:	402b      	ands	r3, r5
 8013fea:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8013fee:	f04f 0a00 	mov.w	sl, #0
 8013ff2:	e7a0      	b.n	8013f36 <_strtod_l+0x7ce>
 8013ff4:	f04f 33ff 	mov.w	r3, #4294967295
 8013ff8:	e7ed      	b.n	8013fd6 <_strtod_l+0x86e>
 8013ffa:	460b      	mov	r3, r1
 8013ffc:	e7eb      	b.n	8013fd6 <_strtod_l+0x86e>
 8013ffe:	bb7b      	cbnz	r3, 8014060 <_strtod_l+0x8f8>
 8014000:	f1ba 0f00 	cmp.w	sl, #0
 8014004:	d12c      	bne.n	8014060 <_strtod_l+0x8f8>
 8014006:	9904      	ldr	r1, [sp, #16]
 8014008:	4a9a      	ldr	r2, [pc, #616]	; (8014274 <_strtod_l+0xb0c>)
 801400a:	465b      	mov	r3, fp
 801400c:	b1f1      	cbz	r1, 801404c <_strtod_l+0x8e4>
 801400e:	ea02 010b 	and.w	r1, r2, fp
 8014012:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8014016:	dc19      	bgt.n	801404c <_strtod_l+0x8e4>
 8014018:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801401c:	f77f ae5b 	ble.w	8013cd6 <_strtod_l+0x56e>
 8014020:	4a96      	ldr	r2, [pc, #600]	; (801427c <_strtod_l+0xb14>)
 8014022:	2300      	movs	r3, #0
 8014024:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8014028:	4650      	mov	r0, sl
 801402a:	4659      	mov	r1, fp
 801402c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8014030:	f7ec fafa 	bl	8000628 <__aeabi_dmul>
 8014034:	4682      	mov	sl, r0
 8014036:	468b      	mov	fp, r1
 8014038:	2900      	cmp	r1, #0
 801403a:	f47f adbe 	bne.w	8013bba <_strtod_l+0x452>
 801403e:	2800      	cmp	r0, #0
 8014040:	f47f adbb 	bne.w	8013bba <_strtod_l+0x452>
 8014044:	2322      	movs	r3, #34	; 0x22
 8014046:	f8c9 3000 	str.w	r3, [r9]
 801404a:	e5b6      	b.n	8013bba <_strtod_l+0x452>
 801404c:	4013      	ands	r3, r2
 801404e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8014052:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8014056:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801405a:	f04f 3aff 	mov.w	sl, #4294967295
 801405e:	e76a      	b.n	8013f36 <_strtod_l+0x7ce>
 8014060:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014062:	b193      	cbz	r3, 801408a <_strtod_l+0x922>
 8014064:	422b      	tst	r3, r5
 8014066:	f43f af66 	beq.w	8013f36 <_strtod_l+0x7ce>
 801406a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801406c:	9a04      	ldr	r2, [sp, #16]
 801406e:	4650      	mov	r0, sl
 8014070:	4659      	mov	r1, fp
 8014072:	b173      	cbz	r3, 8014092 <_strtod_l+0x92a>
 8014074:	f7ff fb5b 	bl	801372e <sulp>
 8014078:	4602      	mov	r2, r0
 801407a:	460b      	mov	r3, r1
 801407c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014080:	f7ec f91c 	bl	80002bc <__adddf3>
 8014084:	4682      	mov	sl, r0
 8014086:	468b      	mov	fp, r1
 8014088:	e755      	b.n	8013f36 <_strtod_l+0x7ce>
 801408a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801408c:	ea13 0f0a 	tst.w	r3, sl
 8014090:	e7e9      	b.n	8014066 <_strtod_l+0x8fe>
 8014092:	f7ff fb4c 	bl	801372e <sulp>
 8014096:	4602      	mov	r2, r0
 8014098:	460b      	mov	r3, r1
 801409a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801409e:	f7ec f90b 	bl	80002b8 <__aeabi_dsub>
 80140a2:	2200      	movs	r2, #0
 80140a4:	2300      	movs	r3, #0
 80140a6:	4682      	mov	sl, r0
 80140a8:	468b      	mov	fp, r1
 80140aa:	f7ec fd25 	bl	8000af8 <__aeabi_dcmpeq>
 80140ae:	2800      	cmp	r0, #0
 80140b0:	f47f ae11 	bne.w	8013cd6 <_strtod_l+0x56e>
 80140b4:	e73f      	b.n	8013f36 <_strtod_l+0x7ce>
 80140b6:	4641      	mov	r1, r8
 80140b8:	4620      	mov	r0, r4
 80140ba:	f002 fa10 	bl	80164de <__ratio>
 80140be:	ec57 6b10 	vmov	r6, r7, d0
 80140c2:	2200      	movs	r2, #0
 80140c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80140c8:	ee10 0a10 	vmov	r0, s0
 80140cc:	4639      	mov	r1, r7
 80140ce:	f7ec fd27 	bl	8000b20 <__aeabi_dcmple>
 80140d2:	2800      	cmp	r0, #0
 80140d4:	d077      	beq.n	80141c6 <_strtod_l+0xa5e>
 80140d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80140d8:	2b00      	cmp	r3, #0
 80140da:	d04a      	beq.n	8014172 <_strtod_l+0xa0a>
 80140dc:	4b68      	ldr	r3, [pc, #416]	; (8014280 <_strtod_l+0xb18>)
 80140de:	2200      	movs	r2, #0
 80140e0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80140e4:	4f66      	ldr	r7, [pc, #408]	; (8014280 <_strtod_l+0xb18>)
 80140e6:	2600      	movs	r6, #0
 80140e8:	4b62      	ldr	r3, [pc, #392]	; (8014274 <_strtod_l+0xb0c>)
 80140ea:	402b      	ands	r3, r5
 80140ec:	930f      	str	r3, [sp, #60]	; 0x3c
 80140ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80140f0:	4b64      	ldr	r3, [pc, #400]	; (8014284 <_strtod_l+0xb1c>)
 80140f2:	429a      	cmp	r2, r3
 80140f4:	f040 80ce 	bne.w	8014294 <_strtod_l+0xb2c>
 80140f8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80140fc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014100:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8014104:	ec4b ab10 	vmov	d0, sl, fp
 8014108:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 801410c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8014110:	f002 f920 	bl	8016354 <__ulp>
 8014114:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014118:	ec53 2b10 	vmov	r2, r3, d0
 801411c:	f7ec fa84 	bl	8000628 <__aeabi_dmul>
 8014120:	4652      	mov	r2, sl
 8014122:	465b      	mov	r3, fp
 8014124:	f7ec f8ca 	bl	80002bc <__adddf3>
 8014128:	460b      	mov	r3, r1
 801412a:	4952      	ldr	r1, [pc, #328]	; (8014274 <_strtod_l+0xb0c>)
 801412c:	4a56      	ldr	r2, [pc, #344]	; (8014288 <_strtod_l+0xb20>)
 801412e:	4019      	ands	r1, r3
 8014130:	4291      	cmp	r1, r2
 8014132:	4682      	mov	sl, r0
 8014134:	d95b      	bls.n	80141ee <_strtod_l+0xa86>
 8014136:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014138:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801413c:	4293      	cmp	r3, r2
 801413e:	d103      	bne.n	8014148 <_strtod_l+0x9e0>
 8014140:	9b08      	ldr	r3, [sp, #32]
 8014142:	3301      	adds	r3, #1
 8014144:	f43f ad2e 	beq.w	8013ba4 <_strtod_l+0x43c>
 8014148:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8014278 <_strtod_l+0xb10>
 801414c:	f04f 3aff 	mov.w	sl, #4294967295
 8014150:	991c      	ldr	r1, [sp, #112]	; 0x70
 8014152:	4648      	mov	r0, r9
 8014154:	f001 fe66 	bl	8015e24 <_Bfree>
 8014158:	9905      	ldr	r1, [sp, #20]
 801415a:	4648      	mov	r0, r9
 801415c:	f001 fe62 	bl	8015e24 <_Bfree>
 8014160:	4641      	mov	r1, r8
 8014162:	4648      	mov	r0, r9
 8014164:	f001 fe5e 	bl	8015e24 <_Bfree>
 8014168:	4621      	mov	r1, r4
 801416a:	4648      	mov	r0, r9
 801416c:	f001 fe5a 	bl	8015e24 <_Bfree>
 8014170:	e619      	b.n	8013da6 <_strtod_l+0x63e>
 8014172:	f1ba 0f00 	cmp.w	sl, #0
 8014176:	d11a      	bne.n	80141ae <_strtod_l+0xa46>
 8014178:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801417c:	b9eb      	cbnz	r3, 80141ba <_strtod_l+0xa52>
 801417e:	2200      	movs	r2, #0
 8014180:	4b3f      	ldr	r3, [pc, #252]	; (8014280 <_strtod_l+0xb18>)
 8014182:	4630      	mov	r0, r6
 8014184:	4639      	mov	r1, r7
 8014186:	f7ec fcc1 	bl	8000b0c <__aeabi_dcmplt>
 801418a:	b9c8      	cbnz	r0, 80141c0 <_strtod_l+0xa58>
 801418c:	4630      	mov	r0, r6
 801418e:	4639      	mov	r1, r7
 8014190:	2200      	movs	r2, #0
 8014192:	4b3e      	ldr	r3, [pc, #248]	; (801428c <_strtod_l+0xb24>)
 8014194:	f7ec fa48 	bl	8000628 <__aeabi_dmul>
 8014198:	4606      	mov	r6, r0
 801419a:	460f      	mov	r7, r1
 801419c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80141a0:	9618      	str	r6, [sp, #96]	; 0x60
 80141a2:	9319      	str	r3, [sp, #100]	; 0x64
 80141a4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 80141a8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80141ac:	e79c      	b.n	80140e8 <_strtod_l+0x980>
 80141ae:	f1ba 0f01 	cmp.w	sl, #1
 80141b2:	d102      	bne.n	80141ba <_strtod_l+0xa52>
 80141b4:	2d00      	cmp	r5, #0
 80141b6:	f43f ad8e 	beq.w	8013cd6 <_strtod_l+0x56e>
 80141ba:	2200      	movs	r2, #0
 80141bc:	4b34      	ldr	r3, [pc, #208]	; (8014290 <_strtod_l+0xb28>)
 80141be:	e78f      	b.n	80140e0 <_strtod_l+0x978>
 80141c0:	2600      	movs	r6, #0
 80141c2:	4f32      	ldr	r7, [pc, #200]	; (801428c <_strtod_l+0xb24>)
 80141c4:	e7ea      	b.n	801419c <_strtod_l+0xa34>
 80141c6:	4b31      	ldr	r3, [pc, #196]	; (801428c <_strtod_l+0xb24>)
 80141c8:	4630      	mov	r0, r6
 80141ca:	4639      	mov	r1, r7
 80141cc:	2200      	movs	r2, #0
 80141ce:	f7ec fa2b 	bl	8000628 <__aeabi_dmul>
 80141d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80141d4:	4606      	mov	r6, r0
 80141d6:	460f      	mov	r7, r1
 80141d8:	b933      	cbnz	r3, 80141e8 <_strtod_l+0xa80>
 80141da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80141de:	9010      	str	r0, [sp, #64]	; 0x40
 80141e0:	9311      	str	r3, [sp, #68]	; 0x44
 80141e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80141e6:	e7df      	b.n	80141a8 <_strtod_l+0xa40>
 80141e8:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80141ec:	e7f9      	b.n	80141e2 <_strtod_l+0xa7a>
 80141ee:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80141f2:	9b04      	ldr	r3, [sp, #16]
 80141f4:	2b00      	cmp	r3, #0
 80141f6:	d1ab      	bne.n	8014150 <_strtod_l+0x9e8>
 80141f8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80141fc:	0d1b      	lsrs	r3, r3, #20
 80141fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014200:	051b      	lsls	r3, r3, #20
 8014202:	429a      	cmp	r2, r3
 8014204:	465d      	mov	r5, fp
 8014206:	d1a3      	bne.n	8014150 <_strtod_l+0x9e8>
 8014208:	4639      	mov	r1, r7
 801420a:	4630      	mov	r0, r6
 801420c:	f7ec fcbc 	bl	8000b88 <__aeabi_d2iz>
 8014210:	f7ec f9a0 	bl	8000554 <__aeabi_i2d>
 8014214:	460b      	mov	r3, r1
 8014216:	4602      	mov	r2, r0
 8014218:	4639      	mov	r1, r7
 801421a:	4630      	mov	r0, r6
 801421c:	f7ec f84c 	bl	80002b8 <__aeabi_dsub>
 8014220:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014222:	4606      	mov	r6, r0
 8014224:	460f      	mov	r7, r1
 8014226:	b933      	cbnz	r3, 8014236 <_strtod_l+0xace>
 8014228:	f1ba 0f00 	cmp.w	sl, #0
 801422c:	d103      	bne.n	8014236 <_strtod_l+0xace>
 801422e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8014232:	2d00      	cmp	r5, #0
 8014234:	d06d      	beq.n	8014312 <_strtod_l+0xbaa>
 8014236:	a30a      	add	r3, pc, #40	; (adr r3, 8014260 <_strtod_l+0xaf8>)
 8014238:	e9d3 2300 	ldrd	r2, r3, [r3]
 801423c:	4630      	mov	r0, r6
 801423e:	4639      	mov	r1, r7
 8014240:	f7ec fc64 	bl	8000b0c <__aeabi_dcmplt>
 8014244:	2800      	cmp	r0, #0
 8014246:	f47f acb8 	bne.w	8013bba <_strtod_l+0x452>
 801424a:	a307      	add	r3, pc, #28	; (adr r3, 8014268 <_strtod_l+0xb00>)
 801424c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014250:	4630      	mov	r0, r6
 8014252:	4639      	mov	r1, r7
 8014254:	f7ec fc78 	bl	8000b48 <__aeabi_dcmpgt>
 8014258:	2800      	cmp	r0, #0
 801425a:	f43f af79 	beq.w	8014150 <_strtod_l+0x9e8>
 801425e:	e4ac      	b.n	8013bba <_strtod_l+0x452>
 8014260:	94a03595 	.word	0x94a03595
 8014264:	3fdfffff 	.word	0x3fdfffff
 8014268:	35afe535 	.word	0x35afe535
 801426c:	3fe00000 	.word	0x3fe00000
 8014270:	000fffff 	.word	0x000fffff
 8014274:	7ff00000 	.word	0x7ff00000
 8014278:	7fefffff 	.word	0x7fefffff
 801427c:	39500000 	.word	0x39500000
 8014280:	3ff00000 	.word	0x3ff00000
 8014284:	7fe00000 	.word	0x7fe00000
 8014288:	7c9fffff 	.word	0x7c9fffff
 801428c:	3fe00000 	.word	0x3fe00000
 8014290:	bff00000 	.word	0xbff00000
 8014294:	9b04      	ldr	r3, [sp, #16]
 8014296:	b333      	cbz	r3, 80142e6 <_strtod_l+0xb7e>
 8014298:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801429a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801429e:	d822      	bhi.n	80142e6 <_strtod_l+0xb7e>
 80142a0:	a327      	add	r3, pc, #156	; (adr r3, 8014340 <_strtod_l+0xbd8>)
 80142a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142a6:	4630      	mov	r0, r6
 80142a8:	4639      	mov	r1, r7
 80142aa:	f7ec fc39 	bl	8000b20 <__aeabi_dcmple>
 80142ae:	b1a0      	cbz	r0, 80142da <_strtod_l+0xb72>
 80142b0:	4639      	mov	r1, r7
 80142b2:	4630      	mov	r0, r6
 80142b4:	f7ec fc90 	bl	8000bd8 <__aeabi_d2uiz>
 80142b8:	2800      	cmp	r0, #0
 80142ba:	bf08      	it	eq
 80142bc:	2001      	moveq	r0, #1
 80142be:	f7ec f939 	bl	8000534 <__aeabi_ui2d>
 80142c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80142c4:	4606      	mov	r6, r0
 80142c6:	460f      	mov	r7, r1
 80142c8:	bb03      	cbnz	r3, 801430c <_strtod_l+0xba4>
 80142ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80142ce:	9012      	str	r0, [sp, #72]	; 0x48
 80142d0:	9313      	str	r3, [sp, #76]	; 0x4c
 80142d2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80142d6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80142da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80142dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80142de:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80142e2:	1a9b      	subs	r3, r3, r2
 80142e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80142e6:	ed9d 0b08 	vldr	d0, [sp, #32]
 80142ea:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 80142ee:	f002 f831 	bl	8016354 <__ulp>
 80142f2:	4650      	mov	r0, sl
 80142f4:	ec53 2b10 	vmov	r2, r3, d0
 80142f8:	4659      	mov	r1, fp
 80142fa:	f7ec f995 	bl	8000628 <__aeabi_dmul>
 80142fe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014302:	f7eb ffdb 	bl	80002bc <__adddf3>
 8014306:	4682      	mov	sl, r0
 8014308:	468b      	mov	fp, r1
 801430a:	e772      	b.n	80141f2 <_strtod_l+0xa8a>
 801430c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8014310:	e7df      	b.n	80142d2 <_strtod_l+0xb6a>
 8014312:	a30d      	add	r3, pc, #52	; (adr r3, 8014348 <_strtod_l+0xbe0>)
 8014314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014318:	f7ec fbf8 	bl	8000b0c <__aeabi_dcmplt>
 801431c:	e79c      	b.n	8014258 <_strtod_l+0xaf0>
 801431e:	2300      	movs	r3, #0
 8014320:	930d      	str	r3, [sp, #52]	; 0x34
 8014322:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8014324:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014326:	6013      	str	r3, [r2, #0]
 8014328:	f7ff ba61 	b.w	80137ee <_strtod_l+0x86>
 801432c:	2b65      	cmp	r3, #101	; 0x65
 801432e:	f04f 0200 	mov.w	r2, #0
 8014332:	f43f ab4e 	beq.w	80139d2 <_strtod_l+0x26a>
 8014336:	2101      	movs	r1, #1
 8014338:	4614      	mov	r4, r2
 801433a:	9104      	str	r1, [sp, #16]
 801433c:	f7ff bacb 	b.w	80138d6 <_strtod_l+0x16e>
 8014340:	ffc00000 	.word	0xffc00000
 8014344:	41dfffff 	.word	0x41dfffff
 8014348:	94a03595 	.word	0x94a03595
 801434c:	3fcfffff 	.word	0x3fcfffff

08014350 <_strtod_r>:
 8014350:	4b05      	ldr	r3, [pc, #20]	; (8014368 <_strtod_r+0x18>)
 8014352:	681b      	ldr	r3, [r3, #0]
 8014354:	b410      	push	{r4}
 8014356:	6a1b      	ldr	r3, [r3, #32]
 8014358:	4c04      	ldr	r4, [pc, #16]	; (801436c <_strtod_r+0x1c>)
 801435a:	2b00      	cmp	r3, #0
 801435c:	bf08      	it	eq
 801435e:	4623      	moveq	r3, r4
 8014360:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014364:	f7ff ba00 	b.w	8013768 <_strtod_l>
 8014368:	2000000c 	.word	0x2000000c
 801436c:	20000070 	.word	0x20000070

08014370 <_strtol_l.isra.0>:
 8014370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014374:	4680      	mov	r8, r0
 8014376:	4689      	mov	r9, r1
 8014378:	4692      	mov	sl, r2
 801437a:	461e      	mov	r6, r3
 801437c:	460f      	mov	r7, r1
 801437e:	463d      	mov	r5, r7
 8014380:	9808      	ldr	r0, [sp, #32]
 8014382:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014386:	f001 fc67 	bl	8015c58 <__locale_ctype_ptr_l>
 801438a:	4420      	add	r0, r4
 801438c:	7843      	ldrb	r3, [r0, #1]
 801438e:	f013 0308 	ands.w	r3, r3, #8
 8014392:	d132      	bne.n	80143fa <_strtol_l.isra.0+0x8a>
 8014394:	2c2d      	cmp	r4, #45	; 0x2d
 8014396:	d132      	bne.n	80143fe <_strtol_l.isra.0+0x8e>
 8014398:	787c      	ldrb	r4, [r7, #1]
 801439a:	1cbd      	adds	r5, r7, #2
 801439c:	2201      	movs	r2, #1
 801439e:	2e00      	cmp	r6, #0
 80143a0:	d05d      	beq.n	801445e <_strtol_l.isra.0+0xee>
 80143a2:	2e10      	cmp	r6, #16
 80143a4:	d109      	bne.n	80143ba <_strtol_l.isra.0+0x4a>
 80143a6:	2c30      	cmp	r4, #48	; 0x30
 80143a8:	d107      	bne.n	80143ba <_strtol_l.isra.0+0x4a>
 80143aa:	782b      	ldrb	r3, [r5, #0]
 80143ac:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80143b0:	2b58      	cmp	r3, #88	; 0x58
 80143b2:	d14f      	bne.n	8014454 <_strtol_l.isra.0+0xe4>
 80143b4:	786c      	ldrb	r4, [r5, #1]
 80143b6:	2610      	movs	r6, #16
 80143b8:	3502      	adds	r5, #2
 80143ba:	2a00      	cmp	r2, #0
 80143bc:	bf14      	ite	ne
 80143be:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80143c2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80143c6:	2700      	movs	r7, #0
 80143c8:	fbb1 fcf6 	udiv	ip, r1, r6
 80143cc:	4638      	mov	r0, r7
 80143ce:	fb06 1e1c 	mls	lr, r6, ip, r1
 80143d2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80143d6:	2b09      	cmp	r3, #9
 80143d8:	d817      	bhi.n	801440a <_strtol_l.isra.0+0x9a>
 80143da:	461c      	mov	r4, r3
 80143dc:	42a6      	cmp	r6, r4
 80143de:	dd23      	ble.n	8014428 <_strtol_l.isra.0+0xb8>
 80143e0:	1c7b      	adds	r3, r7, #1
 80143e2:	d007      	beq.n	80143f4 <_strtol_l.isra.0+0x84>
 80143e4:	4584      	cmp	ip, r0
 80143e6:	d31c      	bcc.n	8014422 <_strtol_l.isra.0+0xb2>
 80143e8:	d101      	bne.n	80143ee <_strtol_l.isra.0+0x7e>
 80143ea:	45a6      	cmp	lr, r4
 80143ec:	db19      	blt.n	8014422 <_strtol_l.isra.0+0xb2>
 80143ee:	fb00 4006 	mla	r0, r0, r6, r4
 80143f2:	2701      	movs	r7, #1
 80143f4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80143f8:	e7eb      	b.n	80143d2 <_strtol_l.isra.0+0x62>
 80143fa:	462f      	mov	r7, r5
 80143fc:	e7bf      	b.n	801437e <_strtol_l.isra.0+0xe>
 80143fe:	2c2b      	cmp	r4, #43	; 0x2b
 8014400:	bf04      	itt	eq
 8014402:	1cbd      	addeq	r5, r7, #2
 8014404:	787c      	ldrbeq	r4, [r7, #1]
 8014406:	461a      	mov	r2, r3
 8014408:	e7c9      	b.n	801439e <_strtol_l.isra.0+0x2e>
 801440a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 801440e:	2b19      	cmp	r3, #25
 8014410:	d801      	bhi.n	8014416 <_strtol_l.isra.0+0xa6>
 8014412:	3c37      	subs	r4, #55	; 0x37
 8014414:	e7e2      	b.n	80143dc <_strtol_l.isra.0+0x6c>
 8014416:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 801441a:	2b19      	cmp	r3, #25
 801441c:	d804      	bhi.n	8014428 <_strtol_l.isra.0+0xb8>
 801441e:	3c57      	subs	r4, #87	; 0x57
 8014420:	e7dc      	b.n	80143dc <_strtol_l.isra.0+0x6c>
 8014422:	f04f 37ff 	mov.w	r7, #4294967295
 8014426:	e7e5      	b.n	80143f4 <_strtol_l.isra.0+0x84>
 8014428:	1c7b      	adds	r3, r7, #1
 801442a:	d108      	bne.n	801443e <_strtol_l.isra.0+0xce>
 801442c:	2322      	movs	r3, #34	; 0x22
 801442e:	f8c8 3000 	str.w	r3, [r8]
 8014432:	4608      	mov	r0, r1
 8014434:	f1ba 0f00 	cmp.w	sl, #0
 8014438:	d107      	bne.n	801444a <_strtol_l.isra.0+0xda>
 801443a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801443e:	b102      	cbz	r2, 8014442 <_strtol_l.isra.0+0xd2>
 8014440:	4240      	negs	r0, r0
 8014442:	f1ba 0f00 	cmp.w	sl, #0
 8014446:	d0f8      	beq.n	801443a <_strtol_l.isra.0+0xca>
 8014448:	b10f      	cbz	r7, 801444e <_strtol_l.isra.0+0xde>
 801444a:	f105 39ff 	add.w	r9, r5, #4294967295
 801444e:	f8ca 9000 	str.w	r9, [sl]
 8014452:	e7f2      	b.n	801443a <_strtol_l.isra.0+0xca>
 8014454:	2430      	movs	r4, #48	; 0x30
 8014456:	2e00      	cmp	r6, #0
 8014458:	d1af      	bne.n	80143ba <_strtol_l.isra.0+0x4a>
 801445a:	2608      	movs	r6, #8
 801445c:	e7ad      	b.n	80143ba <_strtol_l.isra.0+0x4a>
 801445e:	2c30      	cmp	r4, #48	; 0x30
 8014460:	d0a3      	beq.n	80143aa <_strtol_l.isra.0+0x3a>
 8014462:	260a      	movs	r6, #10
 8014464:	e7a9      	b.n	80143ba <_strtol_l.isra.0+0x4a>
	...

08014468 <_strtol_r>:
 8014468:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801446a:	4c06      	ldr	r4, [pc, #24]	; (8014484 <_strtol_r+0x1c>)
 801446c:	4d06      	ldr	r5, [pc, #24]	; (8014488 <_strtol_r+0x20>)
 801446e:	6824      	ldr	r4, [r4, #0]
 8014470:	6a24      	ldr	r4, [r4, #32]
 8014472:	2c00      	cmp	r4, #0
 8014474:	bf08      	it	eq
 8014476:	462c      	moveq	r4, r5
 8014478:	9400      	str	r4, [sp, #0]
 801447a:	f7ff ff79 	bl	8014370 <_strtol_l.isra.0>
 801447e:	b003      	add	sp, #12
 8014480:	bd30      	pop	{r4, r5, pc}
 8014482:	bf00      	nop
 8014484:	2000000c 	.word	0x2000000c
 8014488:	20000070 	.word	0x20000070

0801448c <_vsiprintf_r>:
 801448c:	b500      	push	{lr}
 801448e:	b09b      	sub	sp, #108	; 0x6c
 8014490:	9100      	str	r1, [sp, #0]
 8014492:	9104      	str	r1, [sp, #16]
 8014494:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014498:	9105      	str	r1, [sp, #20]
 801449a:	9102      	str	r1, [sp, #8]
 801449c:	4905      	ldr	r1, [pc, #20]	; (80144b4 <_vsiprintf_r+0x28>)
 801449e:	9103      	str	r1, [sp, #12]
 80144a0:	4669      	mov	r1, sp
 80144a2:	f002 f99b 	bl	80167dc <_svfiprintf_r>
 80144a6:	9b00      	ldr	r3, [sp, #0]
 80144a8:	2200      	movs	r2, #0
 80144aa:	701a      	strb	r2, [r3, #0]
 80144ac:	b01b      	add	sp, #108	; 0x6c
 80144ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80144b2:	bf00      	nop
 80144b4:	ffff0208 	.word	0xffff0208

080144b8 <vsiprintf>:
 80144b8:	4613      	mov	r3, r2
 80144ba:	460a      	mov	r2, r1
 80144bc:	4601      	mov	r1, r0
 80144be:	4802      	ldr	r0, [pc, #8]	; (80144c8 <vsiprintf+0x10>)
 80144c0:	6800      	ldr	r0, [r0, #0]
 80144c2:	f7ff bfe3 	b.w	801448c <_vsiprintf_r>
 80144c6:	bf00      	nop
 80144c8:	2000000c 	.word	0x2000000c

080144cc <__swbuf_r>:
 80144cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80144ce:	460e      	mov	r6, r1
 80144d0:	4614      	mov	r4, r2
 80144d2:	4605      	mov	r5, r0
 80144d4:	b118      	cbz	r0, 80144de <__swbuf_r+0x12>
 80144d6:	6983      	ldr	r3, [r0, #24]
 80144d8:	b90b      	cbnz	r3, 80144de <__swbuf_r+0x12>
 80144da:	f001 f80d 	bl	80154f8 <__sinit>
 80144de:	4b21      	ldr	r3, [pc, #132]	; (8014564 <__swbuf_r+0x98>)
 80144e0:	429c      	cmp	r4, r3
 80144e2:	d12a      	bne.n	801453a <__swbuf_r+0x6e>
 80144e4:	686c      	ldr	r4, [r5, #4]
 80144e6:	69a3      	ldr	r3, [r4, #24]
 80144e8:	60a3      	str	r3, [r4, #8]
 80144ea:	89a3      	ldrh	r3, [r4, #12]
 80144ec:	071a      	lsls	r2, r3, #28
 80144ee:	d52e      	bpl.n	801454e <__swbuf_r+0x82>
 80144f0:	6923      	ldr	r3, [r4, #16]
 80144f2:	b363      	cbz	r3, 801454e <__swbuf_r+0x82>
 80144f4:	6923      	ldr	r3, [r4, #16]
 80144f6:	6820      	ldr	r0, [r4, #0]
 80144f8:	1ac0      	subs	r0, r0, r3
 80144fa:	6963      	ldr	r3, [r4, #20]
 80144fc:	b2f6      	uxtb	r6, r6
 80144fe:	4283      	cmp	r3, r0
 8014500:	4637      	mov	r7, r6
 8014502:	dc04      	bgt.n	801450e <__swbuf_r+0x42>
 8014504:	4621      	mov	r1, r4
 8014506:	4628      	mov	r0, r5
 8014508:	f000 ff8c 	bl	8015424 <_fflush_r>
 801450c:	bb28      	cbnz	r0, 801455a <__swbuf_r+0x8e>
 801450e:	68a3      	ldr	r3, [r4, #8]
 8014510:	3b01      	subs	r3, #1
 8014512:	60a3      	str	r3, [r4, #8]
 8014514:	6823      	ldr	r3, [r4, #0]
 8014516:	1c5a      	adds	r2, r3, #1
 8014518:	6022      	str	r2, [r4, #0]
 801451a:	701e      	strb	r6, [r3, #0]
 801451c:	6963      	ldr	r3, [r4, #20]
 801451e:	3001      	adds	r0, #1
 8014520:	4283      	cmp	r3, r0
 8014522:	d004      	beq.n	801452e <__swbuf_r+0x62>
 8014524:	89a3      	ldrh	r3, [r4, #12]
 8014526:	07db      	lsls	r3, r3, #31
 8014528:	d519      	bpl.n	801455e <__swbuf_r+0x92>
 801452a:	2e0a      	cmp	r6, #10
 801452c:	d117      	bne.n	801455e <__swbuf_r+0x92>
 801452e:	4621      	mov	r1, r4
 8014530:	4628      	mov	r0, r5
 8014532:	f000 ff77 	bl	8015424 <_fflush_r>
 8014536:	b190      	cbz	r0, 801455e <__swbuf_r+0x92>
 8014538:	e00f      	b.n	801455a <__swbuf_r+0x8e>
 801453a:	4b0b      	ldr	r3, [pc, #44]	; (8014568 <__swbuf_r+0x9c>)
 801453c:	429c      	cmp	r4, r3
 801453e:	d101      	bne.n	8014544 <__swbuf_r+0x78>
 8014540:	68ac      	ldr	r4, [r5, #8]
 8014542:	e7d0      	b.n	80144e6 <__swbuf_r+0x1a>
 8014544:	4b09      	ldr	r3, [pc, #36]	; (801456c <__swbuf_r+0xa0>)
 8014546:	429c      	cmp	r4, r3
 8014548:	bf08      	it	eq
 801454a:	68ec      	ldreq	r4, [r5, #12]
 801454c:	e7cb      	b.n	80144e6 <__swbuf_r+0x1a>
 801454e:	4621      	mov	r1, r4
 8014550:	4628      	mov	r0, r5
 8014552:	f000 f81f 	bl	8014594 <__swsetup_r>
 8014556:	2800      	cmp	r0, #0
 8014558:	d0cc      	beq.n	80144f4 <__swbuf_r+0x28>
 801455a:	f04f 37ff 	mov.w	r7, #4294967295
 801455e:	4638      	mov	r0, r7
 8014560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014562:	bf00      	nop
 8014564:	08017de8 	.word	0x08017de8
 8014568:	08017e08 	.word	0x08017e08
 801456c:	08017dc8 	.word	0x08017dc8

08014570 <_write_r>:
 8014570:	b538      	push	{r3, r4, r5, lr}
 8014572:	4c07      	ldr	r4, [pc, #28]	; (8014590 <_write_r+0x20>)
 8014574:	4605      	mov	r5, r0
 8014576:	4608      	mov	r0, r1
 8014578:	4611      	mov	r1, r2
 801457a:	2200      	movs	r2, #0
 801457c:	6022      	str	r2, [r4, #0]
 801457e:	461a      	mov	r2, r3
 8014580:	f7ef fa1c 	bl	80039bc <_write>
 8014584:	1c43      	adds	r3, r0, #1
 8014586:	d102      	bne.n	801458e <_write_r+0x1e>
 8014588:	6823      	ldr	r3, [r4, #0]
 801458a:	b103      	cbz	r3, 801458e <_write_r+0x1e>
 801458c:	602b      	str	r3, [r5, #0]
 801458e:	bd38      	pop	{r3, r4, r5, pc}
 8014590:	2003bdbc 	.word	0x2003bdbc

08014594 <__swsetup_r>:
 8014594:	4b32      	ldr	r3, [pc, #200]	; (8014660 <__swsetup_r+0xcc>)
 8014596:	b570      	push	{r4, r5, r6, lr}
 8014598:	681d      	ldr	r5, [r3, #0]
 801459a:	4606      	mov	r6, r0
 801459c:	460c      	mov	r4, r1
 801459e:	b125      	cbz	r5, 80145aa <__swsetup_r+0x16>
 80145a0:	69ab      	ldr	r3, [r5, #24]
 80145a2:	b913      	cbnz	r3, 80145aa <__swsetup_r+0x16>
 80145a4:	4628      	mov	r0, r5
 80145a6:	f000 ffa7 	bl	80154f8 <__sinit>
 80145aa:	4b2e      	ldr	r3, [pc, #184]	; (8014664 <__swsetup_r+0xd0>)
 80145ac:	429c      	cmp	r4, r3
 80145ae:	d10f      	bne.n	80145d0 <__swsetup_r+0x3c>
 80145b0:	686c      	ldr	r4, [r5, #4]
 80145b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80145b6:	b29a      	uxth	r2, r3
 80145b8:	0715      	lsls	r5, r2, #28
 80145ba:	d42c      	bmi.n	8014616 <__swsetup_r+0x82>
 80145bc:	06d0      	lsls	r0, r2, #27
 80145be:	d411      	bmi.n	80145e4 <__swsetup_r+0x50>
 80145c0:	2209      	movs	r2, #9
 80145c2:	6032      	str	r2, [r6, #0]
 80145c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80145c8:	81a3      	strh	r3, [r4, #12]
 80145ca:	f04f 30ff 	mov.w	r0, #4294967295
 80145ce:	e03e      	b.n	801464e <__swsetup_r+0xba>
 80145d0:	4b25      	ldr	r3, [pc, #148]	; (8014668 <__swsetup_r+0xd4>)
 80145d2:	429c      	cmp	r4, r3
 80145d4:	d101      	bne.n	80145da <__swsetup_r+0x46>
 80145d6:	68ac      	ldr	r4, [r5, #8]
 80145d8:	e7eb      	b.n	80145b2 <__swsetup_r+0x1e>
 80145da:	4b24      	ldr	r3, [pc, #144]	; (801466c <__swsetup_r+0xd8>)
 80145dc:	429c      	cmp	r4, r3
 80145de:	bf08      	it	eq
 80145e0:	68ec      	ldreq	r4, [r5, #12]
 80145e2:	e7e6      	b.n	80145b2 <__swsetup_r+0x1e>
 80145e4:	0751      	lsls	r1, r2, #29
 80145e6:	d512      	bpl.n	801460e <__swsetup_r+0x7a>
 80145e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80145ea:	b141      	cbz	r1, 80145fe <__swsetup_r+0x6a>
 80145ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80145f0:	4299      	cmp	r1, r3
 80145f2:	d002      	beq.n	80145fa <__swsetup_r+0x66>
 80145f4:	4630      	mov	r0, r6
 80145f6:	f001 ffef 	bl	80165d8 <_free_r>
 80145fa:	2300      	movs	r3, #0
 80145fc:	6363      	str	r3, [r4, #52]	; 0x34
 80145fe:	89a3      	ldrh	r3, [r4, #12]
 8014600:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014604:	81a3      	strh	r3, [r4, #12]
 8014606:	2300      	movs	r3, #0
 8014608:	6063      	str	r3, [r4, #4]
 801460a:	6923      	ldr	r3, [r4, #16]
 801460c:	6023      	str	r3, [r4, #0]
 801460e:	89a3      	ldrh	r3, [r4, #12]
 8014610:	f043 0308 	orr.w	r3, r3, #8
 8014614:	81a3      	strh	r3, [r4, #12]
 8014616:	6923      	ldr	r3, [r4, #16]
 8014618:	b94b      	cbnz	r3, 801462e <__swsetup_r+0x9a>
 801461a:	89a3      	ldrh	r3, [r4, #12]
 801461c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014620:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014624:	d003      	beq.n	801462e <__swsetup_r+0x9a>
 8014626:	4621      	mov	r1, r4
 8014628:	4630      	mov	r0, r6
 801462a:	f001 fb6d 	bl	8015d08 <__smakebuf_r>
 801462e:	89a2      	ldrh	r2, [r4, #12]
 8014630:	f012 0301 	ands.w	r3, r2, #1
 8014634:	d00c      	beq.n	8014650 <__swsetup_r+0xbc>
 8014636:	2300      	movs	r3, #0
 8014638:	60a3      	str	r3, [r4, #8]
 801463a:	6963      	ldr	r3, [r4, #20]
 801463c:	425b      	negs	r3, r3
 801463e:	61a3      	str	r3, [r4, #24]
 8014640:	6923      	ldr	r3, [r4, #16]
 8014642:	b953      	cbnz	r3, 801465a <__swsetup_r+0xc6>
 8014644:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014648:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801464c:	d1ba      	bne.n	80145c4 <__swsetup_r+0x30>
 801464e:	bd70      	pop	{r4, r5, r6, pc}
 8014650:	0792      	lsls	r2, r2, #30
 8014652:	bf58      	it	pl
 8014654:	6963      	ldrpl	r3, [r4, #20]
 8014656:	60a3      	str	r3, [r4, #8]
 8014658:	e7f2      	b.n	8014640 <__swsetup_r+0xac>
 801465a:	2000      	movs	r0, #0
 801465c:	e7f7      	b.n	801464e <__swsetup_r+0xba>
 801465e:	bf00      	nop
 8014660:	2000000c 	.word	0x2000000c
 8014664:	08017de8 	.word	0x08017de8
 8014668:	08017e08 	.word	0x08017e08
 801466c:	08017dc8 	.word	0x08017dc8

08014670 <_close_r>:
 8014670:	b538      	push	{r3, r4, r5, lr}
 8014672:	4c06      	ldr	r4, [pc, #24]	; (801468c <_close_r+0x1c>)
 8014674:	2300      	movs	r3, #0
 8014676:	4605      	mov	r5, r0
 8014678:	4608      	mov	r0, r1
 801467a:	6023      	str	r3, [r4, #0]
 801467c:	f7f0 ff05 	bl	800548a <_close>
 8014680:	1c43      	adds	r3, r0, #1
 8014682:	d102      	bne.n	801468a <_close_r+0x1a>
 8014684:	6823      	ldr	r3, [r4, #0]
 8014686:	b103      	cbz	r3, 801468a <_close_r+0x1a>
 8014688:	602b      	str	r3, [r5, #0]
 801468a:	bd38      	pop	{r3, r4, r5, pc}
 801468c:	2003bdbc 	.word	0x2003bdbc

08014690 <quorem>:
 8014690:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014694:	6903      	ldr	r3, [r0, #16]
 8014696:	690c      	ldr	r4, [r1, #16]
 8014698:	42a3      	cmp	r3, r4
 801469a:	4680      	mov	r8, r0
 801469c:	f2c0 8082 	blt.w	80147a4 <quorem+0x114>
 80146a0:	3c01      	subs	r4, #1
 80146a2:	f101 0714 	add.w	r7, r1, #20
 80146a6:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80146aa:	f100 0614 	add.w	r6, r0, #20
 80146ae:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80146b2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80146b6:	eb06 030c 	add.w	r3, r6, ip
 80146ba:	3501      	adds	r5, #1
 80146bc:	eb07 090c 	add.w	r9, r7, ip
 80146c0:	9301      	str	r3, [sp, #4]
 80146c2:	fbb0 f5f5 	udiv	r5, r0, r5
 80146c6:	b395      	cbz	r5, 801472e <quorem+0x9e>
 80146c8:	f04f 0a00 	mov.w	sl, #0
 80146cc:	4638      	mov	r0, r7
 80146ce:	46b6      	mov	lr, r6
 80146d0:	46d3      	mov	fp, sl
 80146d2:	f850 2b04 	ldr.w	r2, [r0], #4
 80146d6:	b293      	uxth	r3, r2
 80146d8:	fb05 a303 	mla	r3, r5, r3, sl
 80146dc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80146e0:	b29b      	uxth	r3, r3
 80146e2:	ebab 0303 	sub.w	r3, fp, r3
 80146e6:	0c12      	lsrs	r2, r2, #16
 80146e8:	f8de b000 	ldr.w	fp, [lr]
 80146ec:	fb05 a202 	mla	r2, r5, r2, sl
 80146f0:	fa13 f38b 	uxtah	r3, r3, fp
 80146f4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80146f8:	fa1f fb82 	uxth.w	fp, r2
 80146fc:	f8de 2000 	ldr.w	r2, [lr]
 8014700:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8014704:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014708:	b29b      	uxth	r3, r3
 801470a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801470e:	4581      	cmp	r9, r0
 8014710:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8014714:	f84e 3b04 	str.w	r3, [lr], #4
 8014718:	d2db      	bcs.n	80146d2 <quorem+0x42>
 801471a:	f856 300c 	ldr.w	r3, [r6, ip]
 801471e:	b933      	cbnz	r3, 801472e <quorem+0x9e>
 8014720:	9b01      	ldr	r3, [sp, #4]
 8014722:	3b04      	subs	r3, #4
 8014724:	429e      	cmp	r6, r3
 8014726:	461a      	mov	r2, r3
 8014728:	d330      	bcc.n	801478c <quorem+0xfc>
 801472a:	f8c8 4010 	str.w	r4, [r8, #16]
 801472e:	4640      	mov	r0, r8
 8014730:	f001 fd98 	bl	8016264 <__mcmp>
 8014734:	2800      	cmp	r0, #0
 8014736:	db25      	blt.n	8014784 <quorem+0xf4>
 8014738:	3501      	adds	r5, #1
 801473a:	4630      	mov	r0, r6
 801473c:	f04f 0c00 	mov.w	ip, #0
 8014740:	f857 2b04 	ldr.w	r2, [r7], #4
 8014744:	f8d0 e000 	ldr.w	lr, [r0]
 8014748:	b293      	uxth	r3, r2
 801474a:	ebac 0303 	sub.w	r3, ip, r3
 801474e:	0c12      	lsrs	r2, r2, #16
 8014750:	fa13 f38e 	uxtah	r3, r3, lr
 8014754:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8014758:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801475c:	b29b      	uxth	r3, r3
 801475e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014762:	45b9      	cmp	r9, r7
 8014764:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8014768:	f840 3b04 	str.w	r3, [r0], #4
 801476c:	d2e8      	bcs.n	8014740 <quorem+0xb0>
 801476e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8014772:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8014776:	b92a      	cbnz	r2, 8014784 <quorem+0xf4>
 8014778:	3b04      	subs	r3, #4
 801477a:	429e      	cmp	r6, r3
 801477c:	461a      	mov	r2, r3
 801477e:	d30b      	bcc.n	8014798 <quorem+0x108>
 8014780:	f8c8 4010 	str.w	r4, [r8, #16]
 8014784:	4628      	mov	r0, r5
 8014786:	b003      	add	sp, #12
 8014788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801478c:	6812      	ldr	r2, [r2, #0]
 801478e:	3b04      	subs	r3, #4
 8014790:	2a00      	cmp	r2, #0
 8014792:	d1ca      	bne.n	801472a <quorem+0x9a>
 8014794:	3c01      	subs	r4, #1
 8014796:	e7c5      	b.n	8014724 <quorem+0x94>
 8014798:	6812      	ldr	r2, [r2, #0]
 801479a:	3b04      	subs	r3, #4
 801479c:	2a00      	cmp	r2, #0
 801479e:	d1ef      	bne.n	8014780 <quorem+0xf0>
 80147a0:	3c01      	subs	r4, #1
 80147a2:	e7ea      	b.n	801477a <quorem+0xea>
 80147a4:	2000      	movs	r0, #0
 80147a6:	e7ee      	b.n	8014786 <quorem+0xf6>

080147a8 <_dtoa_r>:
 80147a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147ac:	ec57 6b10 	vmov	r6, r7, d0
 80147b0:	b097      	sub	sp, #92	; 0x5c
 80147b2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80147b4:	9106      	str	r1, [sp, #24]
 80147b6:	4604      	mov	r4, r0
 80147b8:	920b      	str	r2, [sp, #44]	; 0x2c
 80147ba:	9312      	str	r3, [sp, #72]	; 0x48
 80147bc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80147c0:	e9cd 6700 	strd	r6, r7, [sp]
 80147c4:	b93d      	cbnz	r5, 80147d6 <_dtoa_r+0x2e>
 80147c6:	2010      	movs	r0, #16
 80147c8:	f001 fade 	bl	8015d88 <malloc>
 80147cc:	6260      	str	r0, [r4, #36]	; 0x24
 80147ce:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80147d2:	6005      	str	r5, [r0, #0]
 80147d4:	60c5      	str	r5, [r0, #12]
 80147d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80147d8:	6819      	ldr	r1, [r3, #0]
 80147da:	b151      	cbz	r1, 80147f2 <_dtoa_r+0x4a>
 80147dc:	685a      	ldr	r2, [r3, #4]
 80147de:	604a      	str	r2, [r1, #4]
 80147e0:	2301      	movs	r3, #1
 80147e2:	4093      	lsls	r3, r2
 80147e4:	608b      	str	r3, [r1, #8]
 80147e6:	4620      	mov	r0, r4
 80147e8:	f001 fb1c 	bl	8015e24 <_Bfree>
 80147ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80147ee:	2200      	movs	r2, #0
 80147f0:	601a      	str	r2, [r3, #0]
 80147f2:	1e3b      	subs	r3, r7, #0
 80147f4:	bfbb      	ittet	lt
 80147f6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80147fa:	9301      	strlt	r3, [sp, #4]
 80147fc:	2300      	movge	r3, #0
 80147fe:	2201      	movlt	r2, #1
 8014800:	bfac      	ite	ge
 8014802:	f8c8 3000 	strge.w	r3, [r8]
 8014806:	f8c8 2000 	strlt.w	r2, [r8]
 801480a:	4baf      	ldr	r3, [pc, #700]	; (8014ac8 <_dtoa_r+0x320>)
 801480c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8014810:	ea33 0308 	bics.w	r3, r3, r8
 8014814:	d114      	bne.n	8014840 <_dtoa_r+0x98>
 8014816:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014818:	f242 730f 	movw	r3, #9999	; 0x270f
 801481c:	6013      	str	r3, [r2, #0]
 801481e:	9b00      	ldr	r3, [sp, #0]
 8014820:	b923      	cbnz	r3, 801482c <_dtoa_r+0x84>
 8014822:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8014826:	2800      	cmp	r0, #0
 8014828:	f000 8542 	beq.w	80152b0 <_dtoa_r+0xb08>
 801482c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801482e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8014adc <_dtoa_r+0x334>
 8014832:	2b00      	cmp	r3, #0
 8014834:	f000 8544 	beq.w	80152c0 <_dtoa_r+0xb18>
 8014838:	f10b 0303 	add.w	r3, fp, #3
 801483c:	f000 bd3e 	b.w	80152bc <_dtoa_r+0xb14>
 8014840:	e9dd 6700 	ldrd	r6, r7, [sp]
 8014844:	2200      	movs	r2, #0
 8014846:	2300      	movs	r3, #0
 8014848:	4630      	mov	r0, r6
 801484a:	4639      	mov	r1, r7
 801484c:	f7ec f954 	bl	8000af8 <__aeabi_dcmpeq>
 8014850:	4681      	mov	r9, r0
 8014852:	b168      	cbz	r0, 8014870 <_dtoa_r+0xc8>
 8014854:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014856:	2301      	movs	r3, #1
 8014858:	6013      	str	r3, [r2, #0]
 801485a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801485c:	2b00      	cmp	r3, #0
 801485e:	f000 8524 	beq.w	80152aa <_dtoa_r+0xb02>
 8014862:	4b9a      	ldr	r3, [pc, #616]	; (8014acc <_dtoa_r+0x324>)
 8014864:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014866:	f103 3bff 	add.w	fp, r3, #4294967295
 801486a:	6013      	str	r3, [r2, #0]
 801486c:	f000 bd28 	b.w	80152c0 <_dtoa_r+0xb18>
 8014870:	aa14      	add	r2, sp, #80	; 0x50
 8014872:	a915      	add	r1, sp, #84	; 0x54
 8014874:	ec47 6b10 	vmov	d0, r6, r7
 8014878:	4620      	mov	r0, r4
 801487a:	f001 fde1 	bl	8016440 <__d2b>
 801487e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8014882:	9004      	str	r0, [sp, #16]
 8014884:	2d00      	cmp	r5, #0
 8014886:	d07c      	beq.n	8014982 <_dtoa_r+0x1da>
 8014888:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801488c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8014890:	46b2      	mov	sl, r6
 8014892:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8014896:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801489a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 801489e:	2200      	movs	r2, #0
 80148a0:	4b8b      	ldr	r3, [pc, #556]	; (8014ad0 <_dtoa_r+0x328>)
 80148a2:	4650      	mov	r0, sl
 80148a4:	4659      	mov	r1, fp
 80148a6:	f7eb fd07 	bl	80002b8 <__aeabi_dsub>
 80148aa:	a381      	add	r3, pc, #516	; (adr r3, 8014ab0 <_dtoa_r+0x308>)
 80148ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148b0:	f7eb feba 	bl	8000628 <__aeabi_dmul>
 80148b4:	a380      	add	r3, pc, #512	; (adr r3, 8014ab8 <_dtoa_r+0x310>)
 80148b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148ba:	f7eb fcff 	bl	80002bc <__adddf3>
 80148be:	4606      	mov	r6, r0
 80148c0:	4628      	mov	r0, r5
 80148c2:	460f      	mov	r7, r1
 80148c4:	f7eb fe46 	bl	8000554 <__aeabi_i2d>
 80148c8:	a37d      	add	r3, pc, #500	; (adr r3, 8014ac0 <_dtoa_r+0x318>)
 80148ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148ce:	f7eb feab 	bl	8000628 <__aeabi_dmul>
 80148d2:	4602      	mov	r2, r0
 80148d4:	460b      	mov	r3, r1
 80148d6:	4630      	mov	r0, r6
 80148d8:	4639      	mov	r1, r7
 80148da:	f7eb fcef 	bl	80002bc <__adddf3>
 80148de:	4606      	mov	r6, r0
 80148e0:	460f      	mov	r7, r1
 80148e2:	f7ec f951 	bl	8000b88 <__aeabi_d2iz>
 80148e6:	2200      	movs	r2, #0
 80148e8:	4682      	mov	sl, r0
 80148ea:	2300      	movs	r3, #0
 80148ec:	4630      	mov	r0, r6
 80148ee:	4639      	mov	r1, r7
 80148f0:	f7ec f90c 	bl	8000b0c <__aeabi_dcmplt>
 80148f4:	b148      	cbz	r0, 801490a <_dtoa_r+0x162>
 80148f6:	4650      	mov	r0, sl
 80148f8:	f7eb fe2c 	bl	8000554 <__aeabi_i2d>
 80148fc:	4632      	mov	r2, r6
 80148fe:	463b      	mov	r3, r7
 8014900:	f7ec f8fa 	bl	8000af8 <__aeabi_dcmpeq>
 8014904:	b908      	cbnz	r0, 801490a <_dtoa_r+0x162>
 8014906:	f10a 3aff 	add.w	sl, sl, #4294967295
 801490a:	f1ba 0f16 	cmp.w	sl, #22
 801490e:	d859      	bhi.n	80149c4 <_dtoa_r+0x21c>
 8014910:	4970      	ldr	r1, [pc, #448]	; (8014ad4 <_dtoa_r+0x32c>)
 8014912:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8014916:	e9dd 2300 	ldrd	r2, r3, [sp]
 801491a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801491e:	f7ec f913 	bl	8000b48 <__aeabi_dcmpgt>
 8014922:	2800      	cmp	r0, #0
 8014924:	d050      	beq.n	80149c8 <_dtoa_r+0x220>
 8014926:	f10a 3aff 	add.w	sl, sl, #4294967295
 801492a:	2300      	movs	r3, #0
 801492c:	930f      	str	r3, [sp, #60]	; 0x3c
 801492e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014930:	1b5d      	subs	r5, r3, r5
 8014932:	f1b5 0801 	subs.w	r8, r5, #1
 8014936:	bf49      	itett	mi
 8014938:	f1c5 0301 	rsbmi	r3, r5, #1
 801493c:	2300      	movpl	r3, #0
 801493e:	9305      	strmi	r3, [sp, #20]
 8014940:	f04f 0800 	movmi.w	r8, #0
 8014944:	bf58      	it	pl
 8014946:	9305      	strpl	r3, [sp, #20]
 8014948:	f1ba 0f00 	cmp.w	sl, #0
 801494c:	db3e      	blt.n	80149cc <_dtoa_r+0x224>
 801494e:	2300      	movs	r3, #0
 8014950:	44d0      	add	r8, sl
 8014952:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8014956:	9307      	str	r3, [sp, #28]
 8014958:	9b06      	ldr	r3, [sp, #24]
 801495a:	2b09      	cmp	r3, #9
 801495c:	f200 8090 	bhi.w	8014a80 <_dtoa_r+0x2d8>
 8014960:	2b05      	cmp	r3, #5
 8014962:	bfc4      	itt	gt
 8014964:	3b04      	subgt	r3, #4
 8014966:	9306      	strgt	r3, [sp, #24]
 8014968:	9b06      	ldr	r3, [sp, #24]
 801496a:	f1a3 0302 	sub.w	r3, r3, #2
 801496e:	bfcc      	ite	gt
 8014970:	2500      	movgt	r5, #0
 8014972:	2501      	movle	r5, #1
 8014974:	2b03      	cmp	r3, #3
 8014976:	f200 808f 	bhi.w	8014a98 <_dtoa_r+0x2f0>
 801497a:	e8df f003 	tbb	[pc, r3]
 801497e:	7f7d      	.short	0x7f7d
 8014980:	7131      	.short	0x7131
 8014982:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8014986:	441d      	add	r5, r3
 8014988:	f205 4032 	addw	r0, r5, #1074	; 0x432
 801498c:	2820      	cmp	r0, #32
 801498e:	dd13      	ble.n	80149b8 <_dtoa_r+0x210>
 8014990:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8014994:	9b00      	ldr	r3, [sp, #0]
 8014996:	fa08 f800 	lsl.w	r8, r8, r0
 801499a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 801499e:	fa23 f000 	lsr.w	r0, r3, r0
 80149a2:	ea48 0000 	orr.w	r0, r8, r0
 80149a6:	f7eb fdc5 	bl	8000534 <__aeabi_ui2d>
 80149aa:	2301      	movs	r3, #1
 80149ac:	4682      	mov	sl, r0
 80149ae:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80149b2:	3d01      	subs	r5, #1
 80149b4:	9313      	str	r3, [sp, #76]	; 0x4c
 80149b6:	e772      	b.n	801489e <_dtoa_r+0xf6>
 80149b8:	9b00      	ldr	r3, [sp, #0]
 80149ba:	f1c0 0020 	rsb	r0, r0, #32
 80149be:	fa03 f000 	lsl.w	r0, r3, r0
 80149c2:	e7f0      	b.n	80149a6 <_dtoa_r+0x1fe>
 80149c4:	2301      	movs	r3, #1
 80149c6:	e7b1      	b.n	801492c <_dtoa_r+0x184>
 80149c8:	900f      	str	r0, [sp, #60]	; 0x3c
 80149ca:	e7b0      	b.n	801492e <_dtoa_r+0x186>
 80149cc:	9b05      	ldr	r3, [sp, #20]
 80149ce:	eba3 030a 	sub.w	r3, r3, sl
 80149d2:	9305      	str	r3, [sp, #20]
 80149d4:	f1ca 0300 	rsb	r3, sl, #0
 80149d8:	9307      	str	r3, [sp, #28]
 80149da:	2300      	movs	r3, #0
 80149dc:	930e      	str	r3, [sp, #56]	; 0x38
 80149de:	e7bb      	b.n	8014958 <_dtoa_r+0x1b0>
 80149e0:	2301      	movs	r3, #1
 80149e2:	930a      	str	r3, [sp, #40]	; 0x28
 80149e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80149e6:	2b00      	cmp	r3, #0
 80149e8:	dd59      	ble.n	8014a9e <_dtoa_r+0x2f6>
 80149ea:	9302      	str	r3, [sp, #8]
 80149ec:	4699      	mov	r9, r3
 80149ee:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80149f0:	2200      	movs	r2, #0
 80149f2:	6072      	str	r2, [r6, #4]
 80149f4:	2204      	movs	r2, #4
 80149f6:	f102 0014 	add.w	r0, r2, #20
 80149fa:	4298      	cmp	r0, r3
 80149fc:	6871      	ldr	r1, [r6, #4]
 80149fe:	d953      	bls.n	8014aa8 <_dtoa_r+0x300>
 8014a00:	4620      	mov	r0, r4
 8014a02:	f001 f9db 	bl	8015dbc <_Balloc>
 8014a06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014a08:	6030      	str	r0, [r6, #0]
 8014a0a:	f1b9 0f0e 	cmp.w	r9, #14
 8014a0e:	f8d3 b000 	ldr.w	fp, [r3]
 8014a12:	f200 80e6 	bhi.w	8014be2 <_dtoa_r+0x43a>
 8014a16:	2d00      	cmp	r5, #0
 8014a18:	f000 80e3 	beq.w	8014be2 <_dtoa_r+0x43a>
 8014a1c:	ed9d 7b00 	vldr	d7, [sp]
 8014a20:	f1ba 0f00 	cmp.w	sl, #0
 8014a24:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8014a28:	dd74      	ble.n	8014b14 <_dtoa_r+0x36c>
 8014a2a:	4a2a      	ldr	r2, [pc, #168]	; (8014ad4 <_dtoa_r+0x32c>)
 8014a2c:	f00a 030f 	and.w	r3, sl, #15
 8014a30:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8014a34:	ed93 7b00 	vldr	d7, [r3]
 8014a38:	ea4f 162a 	mov.w	r6, sl, asr #4
 8014a3c:	06f0      	lsls	r0, r6, #27
 8014a3e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8014a42:	d565      	bpl.n	8014b10 <_dtoa_r+0x368>
 8014a44:	4b24      	ldr	r3, [pc, #144]	; (8014ad8 <_dtoa_r+0x330>)
 8014a46:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8014a4a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8014a4e:	f7eb ff15 	bl	800087c <__aeabi_ddiv>
 8014a52:	e9cd 0100 	strd	r0, r1, [sp]
 8014a56:	f006 060f 	and.w	r6, r6, #15
 8014a5a:	2503      	movs	r5, #3
 8014a5c:	4f1e      	ldr	r7, [pc, #120]	; (8014ad8 <_dtoa_r+0x330>)
 8014a5e:	e04c      	b.n	8014afa <_dtoa_r+0x352>
 8014a60:	2301      	movs	r3, #1
 8014a62:	930a      	str	r3, [sp, #40]	; 0x28
 8014a64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014a66:	4453      	add	r3, sl
 8014a68:	f103 0901 	add.w	r9, r3, #1
 8014a6c:	9302      	str	r3, [sp, #8]
 8014a6e:	464b      	mov	r3, r9
 8014a70:	2b01      	cmp	r3, #1
 8014a72:	bfb8      	it	lt
 8014a74:	2301      	movlt	r3, #1
 8014a76:	e7ba      	b.n	80149ee <_dtoa_r+0x246>
 8014a78:	2300      	movs	r3, #0
 8014a7a:	e7b2      	b.n	80149e2 <_dtoa_r+0x23a>
 8014a7c:	2300      	movs	r3, #0
 8014a7e:	e7f0      	b.n	8014a62 <_dtoa_r+0x2ba>
 8014a80:	2501      	movs	r5, #1
 8014a82:	2300      	movs	r3, #0
 8014a84:	9306      	str	r3, [sp, #24]
 8014a86:	950a      	str	r5, [sp, #40]	; 0x28
 8014a88:	f04f 33ff 	mov.w	r3, #4294967295
 8014a8c:	9302      	str	r3, [sp, #8]
 8014a8e:	4699      	mov	r9, r3
 8014a90:	2200      	movs	r2, #0
 8014a92:	2312      	movs	r3, #18
 8014a94:	920b      	str	r2, [sp, #44]	; 0x2c
 8014a96:	e7aa      	b.n	80149ee <_dtoa_r+0x246>
 8014a98:	2301      	movs	r3, #1
 8014a9a:	930a      	str	r3, [sp, #40]	; 0x28
 8014a9c:	e7f4      	b.n	8014a88 <_dtoa_r+0x2e0>
 8014a9e:	2301      	movs	r3, #1
 8014aa0:	9302      	str	r3, [sp, #8]
 8014aa2:	4699      	mov	r9, r3
 8014aa4:	461a      	mov	r2, r3
 8014aa6:	e7f5      	b.n	8014a94 <_dtoa_r+0x2ec>
 8014aa8:	3101      	adds	r1, #1
 8014aaa:	6071      	str	r1, [r6, #4]
 8014aac:	0052      	lsls	r2, r2, #1
 8014aae:	e7a2      	b.n	80149f6 <_dtoa_r+0x24e>
 8014ab0:	636f4361 	.word	0x636f4361
 8014ab4:	3fd287a7 	.word	0x3fd287a7
 8014ab8:	8b60c8b3 	.word	0x8b60c8b3
 8014abc:	3fc68a28 	.word	0x3fc68a28
 8014ac0:	509f79fb 	.word	0x509f79fb
 8014ac4:	3fd34413 	.word	0x3fd34413
 8014ac8:	7ff00000 	.word	0x7ff00000
 8014acc:	08017f5c 	.word	0x08017f5c
 8014ad0:	3ff80000 	.word	0x3ff80000
 8014ad4:	08017e60 	.word	0x08017e60
 8014ad8:	08017e38 	.word	0x08017e38
 8014adc:	08017dc1 	.word	0x08017dc1
 8014ae0:	07f1      	lsls	r1, r6, #31
 8014ae2:	d508      	bpl.n	8014af6 <_dtoa_r+0x34e>
 8014ae4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014ae8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014aec:	f7eb fd9c 	bl	8000628 <__aeabi_dmul>
 8014af0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014af4:	3501      	adds	r5, #1
 8014af6:	1076      	asrs	r6, r6, #1
 8014af8:	3708      	adds	r7, #8
 8014afa:	2e00      	cmp	r6, #0
 8014afc:	d1f0      	bne.n	8014ae0 <_dtoa_r+0x338>
 8014afe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014b02:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014b06:	f7eb feb9 	bl	800087c <__aeabi_ddiv>
 8014b0a:	e9cd 0100 	strd	r0, r1, [sp]
 8014b0e:	e01a      	b.n	8014b46 <_dtoa_r+0x39e>
 8014b10:	2502      	movs	r5, #2
 8014b12:	e7a3      	b.n	8014a5c <_dtoa_r+0x2b4>
 8014b14:	f000 80a0 	beq.w	8014c58 <_dtoa_r+0x4b0>
 8014b18:	f1ca 0600 	rsb	r6, sl, #0
 8014b1c:	4b9f      	ldr	r3, [pc, #636]	; (8014d9c <_dtoa_r+0x5f4>)
 8014b1e:	4fa0      	ldr	r7, [pc, #640]	; (8014da0 <_dtoa_r+0x5f8>)
 8014b20:	f006 020f 	and.w	r2, r6, #15
 8014b24:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b2c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8014b30:	f7eb fd7a 	bl	8000628 <__aeabi_dmul>
 8014b34:	e9cd 0100 	strd	r0, r1, [sp]
 8014b38:	1136      	asrs	r6, r6, #4
 8014b3a:	2300      	movs	r3, #0
 8014b3c:	2502      	movs	r5, #2
 8014b3e:	2e00      	cmp	r6, #0
 8014b40:	d17f      	bne.n	8014c42 <_dtoa_r+0x49a>
 8014b42:	2b00      	cmp	r3, #0
 8014b44:	d1e1      	bne.n	8014b0a <_dtoa_r+0x362>
 8014b46:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014b48:	2b00      	cmp	r3, #0
 8014b4a:	f000 8087 	beq.w	8014c5c <_dtoa_r+0x4b4>
 8014b4e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8014b52:	2200      	movs	r2, #0
 8014b54:	4b93      	ldr	r3, [pc, #588]	; (8014da4 <_dtoa_r+0x5fc>)
 8014b56:	4630      	mov	r0, r6
 8014b58:	4639      	mov	r1, r7
 8014b5a:	f7eb ffd7 	bl	8000b0c <__aeabi_dcmplt>
 8014b5e:	2800      	cmp	r0, #0
 8014b60:	d07c      	beq.n	8014c5c <_dtoa_r+0x4b4>
 8014b62:	f1b9 0f00 	cmp.w	r9, #0
 8014b66:	d079      	beq.n	8014c5c <_dtoa_r+0x4b4>
 8014b68:	9b02      	ldr	r3, [sp, #8]
 8014b6a:	2b00      	cmp	r3, #0
 8014b6c:	dd35      	ble.n	8014bda <_dtoa_r+0x432>
 8014b6e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8014b72:	9308      	str	r3, [sp, #32]
 8014b74:	4639      	mov	r1, r7
 8014b76:	2200      	movs	r2, #0
 8014b78:	4b8b      	ldr	r3, [pc, #556]	; (8014da8 <_dtoa_r+0x600>)
 8014b7a:	4630      	mov	r0, r6
 8014b7c:	f7eb fd54 	bl	8000628 <__aeabi_dmul>
 8014b80:	e9cd 0100 	strd	r0, r1, [sp]
 8014b84:	9f02      	ldr	r7, [sp, #8]
 8014b86:	3501      	adds	r5, #1
 8014b88:	4628      	mov	r0, r5
 8014b8a:	f7eb fce3 	bl	8000554 <__aeabi_i2d>
 8014b8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014b92:	f7eb fd49 	bl	8000628 <__aeabi_dmul>
 8014b96:	2200      	movs	r2, #0
 8014b98:	4b84      	ldr	r3, [pc, #528]	; (8014dac <_dtoa_r+0x604>)
 8014b9a:	f7eb fb8f 	bl	80002bc <__adddf3>
 8014b9e:	4605      	mov	r5, r0
 8014ba0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8014ba4:	2f00      	cmp	r7, #0
 8014ba6:	d15d      	bne.n	8014c64 <_dtoa_r+0x4bc>
 8014ba8:	2200      	movs	r2, #0
 8014baa:	4b81      	ldr	r3, [pc, #516]	; (8014db0 <_dtoa_r+0x608>)
 8014bac:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014bb0:	f7eb fb82 	bl	80002b8 <__aeabi_dsub>
 8014bb4:	462a      	mov	r2, r5
 8014bb6:	4633      	mov	r3, r6
 8014bb8:	e9cd 0100 	strd	r0, r1, [sp]
 8014bbc:	f7eb ffc4 	bl	8000b48 <__aeabi_dcmpgt>
 8014bc0:	2800      	cmp	r0, #0
 8014bc2:	f040 8288 	bne.w	80150d6 <_dtoa_r+0x92e>
 8014bc6:	462a      	mov	r2, r5
 8014bc8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8014bcc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014bd0:	f7eb ff9c 	bl	8000b0c <__aeabi_dcmplt>
 8014bd4:	2800      	cmp	r0, #0
 8014bd6:	f040 827c 	bne.w	80150d2 <_dtoa_r+0x92a>
 8014bda:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8014bde:	e9cd 2300 	strd	r2, r3, [sp]
 8014be2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014be4:	2b00      	cmp	r3, #0
 8014be6:	f2c0 8150 	blt.w	8014e8a <_dtoa_r+0x6e2>
 8014bea:	f1ba 0f0e 	cmp.w	sl, #14
 8014bee:	f300 814c 	bgt.w	8014e8a <_dtoa_r+0x6e2>
 8014bf2:	4b6a      	ldr	r3, [pc, #424]	; (8014d9c <_dtoa_r+0x5f4>)
 8014bf4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8014bf8:	ed93 7b00 	vldr	d7, [r3]
 8014bfc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014bfe:	2b00      	cmp	r3, #0
 8014c00:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014c04:	f280 80d8 	bge.w	8014db8 <_dtoa_r+0x610>
 8014c08:	f1b9 0f00 	cmp.w	r9, #0
 8014c0c:	f300 80d4 	bgt.w	8014db8 <_dtoa_r+0x610>
 8014c10:	f040 825e 	bne.w	80150d0 <_dtoa_r+0x928>
 8014c14:	2200      	movs	r2, #0
 8014c16:	4b66      	ldr	r3, [pc, #408]	; (8014db0 <_dtoa_r+0x608>)
 8014c18:	ec51 0b17 	vmov	r0, r1, d7
 8014c1c:	f7eb fd04 	bl	8000628 <__aeabi_dmul>
 8014c20:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014c24:	f7eb ff86 	bl	8000b34 <__aeabi_dcmpge>
 8014c28:	464f      	mov	r7, r9
 8014c2a:	464e      	mov	r6, r9
 8014c2c:	2800      	cmp	r0, #0
 8014c2e:	f040 8234 	bne.w	801509a <_dtoa_r+0x8f2>
 8014c32:	2331      	movs	r3, #49	; 0x31
 8014c34:	f10b 0501 	add.w	r5, fp, #1
 8014c38:	f88b 3000 	strb.w	r3, [fp]
 8014c3c:	f10a 0a01 	add.w	sl, sl, #1
 8014c40:	e22f      	b.n	80150a2 <_dtoa_r+0x8fa>
 8014c42:	07f2      	lsls	r2, r6, #31
 8014c44:	d505      	bpl.n	8014c52 <_dtoa_r+0x4aa>
 8014c46:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014c4a:	f7eb fced 	bl	8000628 <__aeabi_dmul>
 8014c4e:	3501      	adds	r5, #1
 8014c50:	2301      	movs	r3, #1
 8014c52:	1076      	asrs	r6, r6, #1
 8014c54:	3708      	adds	r7, #8
 8014c56:	e772      	b.n	8014b3e <_dtoa_r+0x396>
 8014c58:	2502      	movs	r5, #2
 8014c5a:	e774      	b.n	8014b46 <_dtoa_r+0x39e>
 8014c5c:	f8cd a020 	str.w	sl, [sp, #32]
 8014c60:	464f      	mov	r7, r9
 8014c62:	e791      	b.n	8014b88 <_dtoa_r+0x3e0>
 8014c64:	4b4d      	ldr	r3, [pc, #308]	; (8014d9c <_dtoa_r+0x5f4>)
 8014c66:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8014c6a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8014c6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014c70:	2b00      	cmp	r3, #0
 8014c72:	d047      	beq.n	8014d04 <_dtoa_r+0x55c>
 8014c74:	4602      	mov	r2, r0
 8014c76:	460b      	mov	r3, r1
 8014c78:	2000      	movs	r0, #0
 8014c7a:	494e      	ldr	r1, [pc, #312]	; (8014db4 <_dtoa_r+0x60c>)
 8014c7c:	f7eb fdfe 	bl	800087c <__aeabi_ddiv>
 8014c80:	462a      	mov	r2, r5
 8014c82:	4633      	mov	r3, r6
 8014c84:	f7eb fb18 	bl	80002b8 <__aeabi_dsub>
 8014c88:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8014c8c:	465d      	mov	r5, fp
 8014c8e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014c92:	f7eb ff79 	bl	8000b88 <__aeabi_d2iz>
 8014c96:	4606      	mov	r6, r0
 8014c98:	f7eb fc5c 	bl	8000554 <__aeabi_i2d>
 8014c9c:	4602      	mov	r2, r0
 8014c9e:	460b      	mov	r3, r1
 8014ca0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014ca4:	f7eb fb08 	bl	80002b8 <__aeabi_dsub>
 8014ca8:	3630      	adds	r6, #48	; 0x30
 8014caa:	f805 6b01 	strb.w	r6, [r5], #1
 8014cae:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8014cb2:	e9cd 0100 	strd	r0, r1, [sp]
 8014cb6:	f7eb ff29 	bl	8000b0c <__aeabi_dcmplt>
 8014cba:	2800      	cmp	r0, #0
 8014cbc:	d163      	bne.n	8014d86 <_dtoa_r+0x5de>
 8014cbe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014cc2:	2000      	movs	r0, #0
 8014cc4:	4937      	ldr	r1, [pc, #220]	; (8014da4 <_dtoa_r+0x5fc>)
 8014cc6:	f7eb faf7 	bl	80002b8 <__aeabi_dsub>
 8014cca:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8014cce:	f7eb ff1d 	bl	8000b0c <__aeabi_dcmplt>
 8014cd2:	2800      	cmp	r0, #0
 8014cd4:	f040 80b7 	bne.w	8014e46 <_dtoa_r+0x69e>
 8014cd8:	eba5 030b 	sub.w	r3, r5, fp
 8014cdc:	429f      	cmp	r7, r3
 8014cde:	f77f af7c 	ble.w	8014bda <_dtoa_r+0x432>
 8014ce2:	2200      	movs	r2, #0
 8014ce4:	4b30      	ldr	r3, [pc, #192]	; (8014da8 <_dtoa_r+0x600>)
 8014ce6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014cea:	f7eb fc9d 	bl	8000628 <__aeabi_dmul>
 8014cee:	2200      	movs	r2, #0
 8014cf0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8014cf4:	4b2c      	ldr	r3, [pc, #176]	; (8014da8 <_dtoa_r+0x600>)
 8014cf6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014cfa:	f7eb fc95 	bl	8000628 <__aeabi_dmul>
 8014cfe:	e9cd 0100 	strd	r0, r1, [sp]
 8014d02:	e7c4      	b.n	8014c8e <_dtoa_r+0x4e6>
 8014d04:	462a      	mov	r2, r5
 8014d06:	4633      	mov	r3, r6
 8014d08:	f7eb fc8e 	bl	8000628 <__aeabi_dmul>
 8014d0c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8014d10:	eb0b 0507 	add.w	r5, fp, r7
 8014d14:	465e      	mov	r6, fp
 8014d16:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014d1a:	f7eb ff35 	bl	8000b88 <__aeabi_d2iz>
 8014d1e:	4607      	mov	r7, r0
 8014d20:	f7eb fc18 	bl	8000554 <__aeabi_i2d>
 8014d24:	3730      	adds	r7, #48	; 0x30
 8014d26:	4602      	mov	r2, r0
 8014d28:	460b      	mov	r3, r1
 8014d2a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014d2e:	f7eb fac3 	bl	80002b8 <__aeabi_dsub>
 8014d32:	f806 7b01 	strb.w	r7, [r6], #1
 8014d36:	42ae      	cmp	r6, r5
 8014d38:	e9cd 0100 	strd	r0, r1, [sp]
 8014d3c:	f04f 0200 	mov.w	r2, #0
 8014d40:	d126      	bne.n	8014d90 <_dtoa_r+0x5e8>
 8014d42:	4b1c      	ldr	r3, [pc, #112]	; (8014db4 <_dtoa_r+0x60c>)
 8014d44:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014d48:	f7eb fab8 	bl	80002bc <__adddf3>
 8014d4c:	4602      	mov	r2, r0
 8014d4e:	460b      	mov	r3, r1
 8014d50:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014d54:	f7eb fef8 	bl	8000b48 <__aeabi_dcmpgt>
 8014d58:	2800      	cmp	r0, #0
 8014d5a:	d174      	bne.n	8014e46 <_dtoa_r+0x69e>
 8014d5c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8014d60:	2000      	movs	r0, #0
 8014d62:	4914      	ldr	r1, [pc, #80]	; (8014db4 <_dtoa_r+0x60c>)
 8014d64:	f7eb faa8 	bl	80002b8 <__aeabi_dsub>
 8014d68:	4602      	mov	r2, r0
 8014d6a:	460b      	mov	r3, r1
 8014d6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014d70:	f7eb fecc 	bl	8000b0c <__aeabi_dcmplt>
 8014d74:	2800      	cmp	r0, #0
 8014d76:	f43f af30 	beq.w	8014bda <_dtoa_r+0x432>
 8014d7a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014d7e:	2b30      	cmp	r3, #48	; 0x30
 8014d80:	f105 32ff 	add.w	r2, r5, #4294967295
 8014d84:	d002      	beq.n	8014d8c <_dtoa_r+0x5e4>
 8014d86:	f8dd a020 	ldr.w	sl, [sp, #32]
 8014d8a:	e04a      	b.n	8014e22 <_dtoa_r+0x67a>
 8014d8c:	4615      	mov	r5, r2
 8014d8e:	e7f4      	b.n	8014d7a <_dtoa_r+0x5d2>
 8014d90:	4b05      	ldr	r3, [pc, #20]	; (8014da8 <_dtoa_r+0x600>)
 8014d92:	f7eb fc49 	bl	8000628 <__aeabi_dmul>
 8014d96:	e9cd 0100 	strd	r0, r1, [sp]
 8014d9a:	e7bc      	b.n	8014d16 <_dtoa_r+0x56e>
 8014d9c:	08017e60 	.word	0x08017e60
 8014da0:	08017e38 	.word	0x08017e38
 8014da4:	3ff00000 	.word	0x3ff00000
 8014da8:	40240000 	.word	0x40240000
 8014dac:	401c0000 	.word	0x401c0000
 8014db0:	40140000 	.word	0x40140000
 8014db4:	3fe00000 	.word	0x3fe00000
 8014db8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8014dbc:	465d      	mov	r5, fp
 8014dbe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014dc2:	4630      	mov	r0, r6
 8014dc4:	4639      	mov	r1, r7
 8014dc6:	f7eb fd59 	bl	800087c <__aeabi_ddiv>
 8014dca:	f7eb fedd 	bl	8000b88 <__aeabi_d2iz>
 8014dce:	4680      	mov	r8, r0
 8014dd0:	f7eb fbc0 	bl	8000554 <__aeabi_i2d>
 8014dd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014dd8:	f7eb fc26 	bl	8000628 <__aeabi_dmul>
 8014ddc:	4602      	mov	r2, r0
 8014dde:	460b      	mov	r3, r1
 8014de0:	4630      	mov	r0, r6
 8014de2:	4639      	mov	r1, r7
 8014de4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8014de8:	f7eb fa66 	bl	80002b8 <__aeabi_dsub>
 8014dec:	f805 6b01 	strb.w	r6, [r5], #1
 8014df0:	eba5 060b 	sub.w	r6, r5, fp
 8014df4:	45b1      	cmp	r9, r6
 8014df6:	4602      	mov	r2, r0
 8014df8:	460b      	mov	r3, r1
 8014dfa:	d139      	bne.n	8014e70 <_dtoa_r+0x6c8>
 8014dfc:	f7eb fa5e 	bl	80002bc <__adddf3>
 8014e00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014e04:	4606      	mov	r6, r0
 8014e06:	460f      	mov	r7, r1
 8014e08:	f7eb fe9e 	bl	8000b48 <__aeabi_dcmpgt>
 8014e0c:	b9c8      	cbnz	r0, 8014e42 <_dtoa_r+0x69a>
 8014e0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014e12:	4630      	mov	r0, r6
 8014e14:	4639      	mov	r1, r7
 8014e16:	f7eb fe6f 	bl	8000af8 <__aeabi_dcmpeq>
 8014e1a:	b110      	cbz	r0, 8014e22 <_dtoa_r+0x67a>
 8014e1c:	f018 0f01 	tst.w	r8, #1
 8014e20:	d10f      	bne.n	8014e42 <_dtoa_r+0x69a>
 8014e22:	9904      	ldr	r1, [sp, #16]
 8014e24:	4620      	mov	r0, r4
 8014e26:	f000 fffd 	bl	8015e24 <_Bfree>
 8014e2a:	2300      	movs	r3, #0
 8014e2c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014e2e:	702b      	strb	r3, [r5, #0]
 8014e30:	f10a 0301 	add.w	r3, sl, #1
 8014e34:	6013      	str	r3, [r2, #0]
 8014e36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014e38:	2b00      	cmp	r3, #0
 8014e3a:	f000 8241 	beq.w	80152c0 <_dtoa_r+0xb18>
 8014e3e:	601d      	str	r5, [r3, #0]
 8014e40:	e23e      	b.n	80152c0 <_dtoa_r+0xb18>
 8014e42:	f8cd a020 	str.w	sl, [sp, #32]
 8014e46:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8014e4a:	2a39      	cmp	r2, #57	; 0x39
 8014e4c:	f105 33ff 	add.w	r3, r5, #4294967295
 8014e50:	d108      	bne.n	8014e64 <_dtoa_r+0x6bc>
 8014e52:	459b      	cmp	fp, r3
 8014e54:	d10a      	bne.n	8014e6c <_dtoa_r+0x6c4>
 8014e56:	9b08      	ldr	r3, [sp, #32]
 8014e58:	3301      	adds	r3, #1
 8014e5a:	9308      	str	r3, [sp, #32]
 8014e5c:	2330      	movs	r3, #48	; 0x30
 8014e5e:	f88b 3000 	strb.w	r3, [fp]
 8014e62:	465b      	mov	r3, fp
 8014e64:	781a      	ldrb	r2, [r3, #0]
 8014e66:	3201      	adds	r2, #1
 8014e68:	701a      	strb	r2, [r3, #0]
 8014e6a:	e78c      	b.n	8014d86 <_dtoa_r+0x5de>
 8014e6c:	461d      	mov	r5, r3
 8014e6e:	e7ea      	b.n	8014e46 <_dtoa_r+0x69e>
 8014e70:	2200      	movs	r2, #0
 8014e72:	4b9b      	ldr	r3, [pc, #620]	; (80150e0 <_dtoa_r+0x938>)
 8014e74:	f7eb fbd8 	bl	8000628 <__aeabi_dmul>
 8014e78:	2200      	movs	r2, #0
 8014e7a:	2300      	movs	r3, #0
 8014e7c:	4606      	mov	r6, r0
 8014e7e:	460f      	mov	r7, r1
 8014e80:	f7eb fe3a 	bl	8000af8 <__aeabi_dcmpeq>
 8014e84:	2800      	cmp	r0, #0
 8014e86:	d09a      	beq.n	8014dbe <_dtoa_r+0x616>
 8014e88:	e7cb      	b.n	8014e22 <_dtoa_r+0x67a>
 8014e8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014e8c:	2a00      	cmp	r2, #0
 8014e8e:	f000 808b 	beq.w	8014fa8 <_dtoa_r+0x800>
 8014e92:	9a06      	ldr	r2, [sp, #24]
 8014e94:	2a01      	cmp	r2, #1
 8014e96:	dc6e      	bgt.n	8014f76 <_dtoa_r+0x7ce>
 8014e98:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014e9a:	2a00      	cmp	r2, #0
 8014e9c:	d067      	beq.n	8014f6e <_dtoa_r+0x7c6>
 8014e9e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8014ea2:	9f07      	ldr	r7, [sp, #28]
 8014ea4:	9d05      	ldr	r5, [sp, #20]
 8014ea6:	9a05      	ldr	r2, [sp, #20]
 8014ea8:	2101      	movs	r1, #1
 8014eaa:	441a      	add	r2, r3
 8014eac:	4620      	mov	r0, r4
 8014eae:	9205      	str	r2, [sp, #20]
 8014eb0:	4498      	add	r8, r3
 8014eb2:	f001 f895 	bl	8015fe0 <__i2b>
 8014eb6:	4606      	mov	r6, r0
 8014eb8:	2d00      	cmp	r5, #0
 8014eba:	dd0c      	ble.n	8014ed6 <_dtoa_r+0x72e>
 8014ebc:	f1b8 0f00 	cmp.w	r8, #0
 8014ec0:	dd09      	ble.n	8014ed6 <_dtoa_r+0x72e>
 8014ec2:	4545      	cmp	r5, r8
 8014ec4:	9a05      	ldr	r2, [sp, #20]
 8014ec6:	462b      	mov	r3, r5
 8014ec8:	bfa8      	it	ge
 8014eca:	4643      	movge	r3, r8
 8014ecc:	1ad2      	subs	r2, r2, r3
 8014ece:	9205      	str	r2, [sp, #20]
 8014ed0:	1aed      	subs	r5, r5, r3
 8014ed2:	eba8 0803 	sub.w	r8, r8, r3
 8014ed6:	9b07      	ldr	r3, [sp, #28]
 8014ed8:	b1eb      	cbz	r3, 8014f16 <_dtoa_r+0x76e>
 8014eda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014edc:	2b00      	cmp	r3, #0
 8014ede:	d067      	beq.n	8014fb0 <_dtoa_r+0x808>
 8014ee0:	b18f      	cbz	r7, 8014f06 <_dtoa_r+0x75e>
 8014ee2:	4631      	mov	r1, r6
 8014ee4:	463a      	mov	r2, r7
 8014ee6:	4620      	mov	r0, r4
 8014ee8:	f001 f91a 	bl	8016120 <__pow5mult>
 8014eec:	9a04      	ldr	r2, [sp, #16]
 8014eee:	4601      	mov	r1, r0
 8014ef0:	4606      	mov	r6, r0
 8014ef2:	4620      	mov	r0, r4
 8014ef4:	f001 f87d 	bl	8015ff2 <__multiply>
 8014ef8:	9904      	ldr	r1, [sp, #16]
 8014efa:	9008      	str	r0, [sp, #32]
 8014efc:	4620      	mov	r0, r4
 8014efe:	f000 ff91 	bl	8015e24 <_Bfree>
 8014f02:	9b08      	ldr	r3, [sp, #32]
 8014f04:	9304      	str	r3, [sp, #16]
 8014f06:	9b07      	ldr	r3, [sp, #28]
 8014f08:	1bda      	subs	r2, r3, r7
 8014f0a:	d004      	beq.n	8014f16 <_dtoa_r+0x76e>
 8014f0c:	9904      	ldr	r1, [sp, #16]
 8014f0e:	4620      	mov	r0, r4
 8014f10:	f001 f906 	bl	8016120 <__pow5mult>
 8014f14:	9004      	str	r0, [sp, #16]
 8014f16:	2101      	movs	r1, #1
 8014f18:	4620      	mov	r0, r4
 8014f1a:	f001 f861 	bl	8015fe0 <__i2b>
 8014f1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014f20:	4607      	mov	r7, r0
 8014f22:	2b00      	cmp	r3, #0
 8014f24:	f000 81d0 	beq.w	80152c8 <_dtoa_r+0xb20>
 8014f28:	461a      	mov	r2, r3
 8014f2a:	4601      	mov	r1, r0
 8014f2c:	4620      	mov	r0, r4
 8014f2e:	f001 f8f7 	bl	8016120 <__pow5mult>
 8014f32:	9b06      	ldr	r3, [sp, #24]
 8014f34:	2b01      	cmp	r3, #1
 8014f36:	4607      	mov	r7, r0
 8014f38:	dc40      	bgt.n	8014fbc <_dtoa_r+0x814>
 8014f3a:	9b00      	ldr	r3, [sp, #0]
 8014f3c:	2b00      	cmp	r3, #0
 8014f3e:	d139      	bne.n	8014fb4 <_dtoa_r+0x80c>
 8014f40:	9b01      	ldr	r3, [sp, #4]
 8014f42:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014f46:	2b00      	cmp	r3, #0
 8014f48:	d136      	bne.n	8014fb8 <_dtoa_r+0x810>
 8014f4a:	9b01      	ldr	r3, [sp, #4]
 8014f4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014f50:	0d1b      	lsrs	r3, r3, #20
 8014f52:	051b      	lsls	r3, r3, #20
 8014f54:	b12b      	cbz	r3, 8014f62 <_dtoa_r+0x7ba>
 8014f56:	9b05      	ldr	r3, [sp, #20]
 8014f58:	3301      	adds	r3, #1
 8014f5a:	9305      	str	r3, [sp, #20]
 8014f5c:	f108 0801 	add.w	r8, r8, #1
 8014f60:	2301      	movs	r3, #1
 8014f62:	9307      	str	r3, [sp, #28]
 8014f64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014f66:	2b00      	cmp	r3, #0
 8014f68:	d12a      	bne.n	8014fc0 <_dtoa_r+0x818>
 8014f6a:	2001      	movs	r0, #1
 8014f6c:	e030      	b.n	8014fd0 <_dtoa_r+0x828>
 8014f6e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014f70:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8014f74:	e795      	b.n	8014ea2 <_dtoa_r+0x6fa>
 8014f76:	9b07      	ldr	r3, [sp, #28]
 8014f78:	f109 37ff 	add.w	r7, r9, #4294967295
 8014f7c:	42bb      	cmp	r3, r7
 8014f7e:	bfbf      	itttt	lt
 8014f80:	9b07      	ldrlt	r3, [sp, #28]
 8014f82:	9707      	strlt	r7, [sp, #28]
 8014f84:	1afa      	sublt	r2, r7, r3
 8014f86:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8014f88:	bfbb      	ittet	lt
 8014f8a:	189b      	addlt	r3, r3, r2
 8014f8c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8014f8e:	1bdf      	subge	r7, r3, r7
 8014f90:	2700      	movlt	r7, #0
 8014f92:	f1b9 0f00 	cmp.w	r9, #0
 8014f96:	bfb5      	itete	lt
 8014f98:	9b05      	ldrlt	r3, [sp, #20]
 8014f9a:	9d05      	ldrge	r5, [sp, #20]
 8014f9c:	eba3 0509 	sublt.w	r5, r3, r9
 8014fa0:	464b      	movge	r3, r9
 8014fa2:	bfb8      	it	lt
 8014fa4:	2300      	movlt	r3, #0
 8014fa6:	e77e      	b.n	8014ea6 <_dtoa_r+0x6fe>
 8014fa8:	9f07      	ldr	r7, [sp, #28]
 8014faa:	9d05      	ldr	r5, [sp, #20]
 8014fac:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8014fae:	e783      	b.n	8014eb8 <_dtoa_r+0x710>
 8014fb0:	9a07      	ldr	r2, [sp, #28]
 8014fb2:	e7ab      	b.n	8014f0c <_dtoa_r+0x764>
 8014fb4:	2300      	movs	r3, #0
 8014fb6:	e7d4      	b.n	8014f62 <_dtoa_r+0x7ba>
 8014fb8:	9b00      	ldr	r3, [sp, #0]
 8014fba:	e7d2      	b.n	8014f62 <_dtoa_r+0x7ba>
 8014fbc:	2300      	movs	r3, #0
 8014fbe:	9307      	str	r3, [sp, #28]
 8014fc0:	693b      	ldr	r3, [r7, #16]
 8014fc2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8014fc6:	6918      	ldr	r0, [r3, #16]
 8014fc8:	f000 ffbc 	bl	8015f44 <__hi0bits>
 8014fcc:	f1c0 0020 	rsb	r0, r0, #32
 8014fd0:	4440      	add	r0, r8
 8014fd2:	f010 001f 	ands.w	r0, r0, #31
 8014fd6:	d047      	beq.n	8015068 <_dtoa_r+0x8c0>
 8014fd8:	f1c0 0320 	rsb	r3, r0, #32
 8014fdc:	2b04      	cmp	r3, #4
 8014fde:	dd3b      	ble.n	8015058 <_dtoa_r+0x8b0>
 8014fe0:	9b05      	ldr	r3, [sp, #20]
 8014fe2:	f1c0 001c 	rsb	r0, r0, #28
 8014fe6:	4403      	add	r3, r0
 8014fe8:	9305      	str	r3, [sp, #20]
 8014fea:	4405      	add	r5, r0
 8014fec:	4480      	add	r8, r0
 8014fee:	9b05      	ldr	r3, [sp, #20]
 8014ff0:	2b00      	cmp	r3, #0
 8014ff2:	dd05      	ble.n	8015000 <_dtoa_r+0x858>
 8014ff4:	461a      	mov	r2, r3
 8014ff6:	9904      	ldr	r1, [sp, #16]
 8014ff8:	4620      	mov	r0, r4
 8014ffa:	f001 f8df 	bl	80161bc <__lshift>
 8014ffe:	9004      	str	r0, [sp, #16]
 8015000:	f1b8 0f00 	cmp.w	r8, #0
 8015004:	dd05      	ble.n	8015012 <_dtoa_r+0x86a>
 8015006:	4639      	mov	r1, r7
 8015008:	4642      	mov	r2, r8
 801500a:	4620      	mov	r0, r4
 801500c:	f001 f8d6 	bl	80161bc <__lshift>
 8015010:	4607      	mov	r7, r0
 8015012:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015014:	b353      	cbz	r3, 801506c <_dtoa_r+0x8c4>
 8015016:	4639      	mov	r1, r7
 8015018:	9804      	ldr	r0, [sp, #16]
 801501a:	f001 f923 	bl	8016264 <__mcmp>
 801501e:	2800      	cmp	r0, #0
 8015020:	da24      	bge.n	801506c <_dtoa_r+0x8c4>
 8015022:	2300      	movs	r3, #0
 8015024:	220a      	movs	r2, #10
 8015026:	9904      	ldr	r1, [sp, #16]
 8015028:	4620      	mov	r0, r4
 801502a:	f000 ff12 	bl	8015e52 <__multadd>
 801502e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015030:	9004      	str	r0, [sp, #16]
 8015032:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015036:	2b00      	cmp	r3, #0
 8015038:	f000 814d 	beq.w	80152d6 <_dtoa_r+0xb2e>
 801503c:	2300      	movs	r3, #0
 801503e:	4631      	mov	r1, r6
 8015040:	220a      	movs	r2, #10
 8015042:	4620      	mov	r0, r4
 8015044:	f000 ff05 	bl	8015e52 <__multadd>
 8015048:	9b02      	ldr	r3, [sp, #8]
 801504a:	2b00      	cmp	r3, #0
 801504c:	4606      	mov	r6, r0
 801504e:	dc4f      	bgt.n	80150f0 <_dtoa_r+0x948>
 8015050:	9b06      	ldr	r3, [sp, #24]
 8015052:	2b02      	cmp	r3, #2
 8015054:	dd4c      	ble.n	80150f0 <_dtoa_r+0x948>
 8015056:	e011      	b.n	801507c <_dtoa_r+0x8d4>
 8015058:	d0c9      	beq.n	8014fee <_dtoa_r+0x846>
 801505a:	9a05      	ldr	r2, [sp, #20]
 801505c:	331c      	adds	r3, #28
 801505e:	441a      	add	r2, r3
 8015060:	9205      	str	r2, [sp, #20]
 8015062:	441d      	add	r5, r3
 8015064:	4498      	add	r8, r3
 8015066:	e7c2      	b.n	8014fee <_dtoa_r+0x846>
 8015068:	4603      	mov	r3, r0
 801506a:	e7f6      	b.n	801505a <_dtoa_r+0x8b2>
 801506c:	f1b9 0f00 	cmp.w	r9, #0
 8015070:	dc38      	bgt.n	80150e4 <_dtoa_r+0x93c>
 8015072:	9b06      	ldr	r3, [sp, #24]
 8015074:	2b02      	cmp	r3, #2
 8015076:	dd35      	ble.n	80150e4 <_dtoa_r+0x93c>
 8015078:	f8cd 9008 	str.w	r9, [sp, #8]
 801507c:	9b02      	ldr	r3, [sp, #8]
 801507e:	b963      	cbnz	r3, 801509a <_dtoa_r+0x8f2>
 8015080:	4639      	mov	r1, r7
 8015082:	2205      	movs	r2, #5
 8015084:	4620      	mov	r0, r4
 8015086:	f000 fee4 	bl	8015e52 <__multadd>
 801508a:	4601      	mov	r1, r0
 801508c:	4607      	mov	r7, r0
 801508e:	9804      	ldr	r0, [sp, #16]
 8015090:	f001 f8e8 	bl	8016264 <__mcmp>
 8015094:	2800      	cmp	r0, #0
 8015096:	f73f adcc 	bgt.w	8014c32 <_dtoa_r+0x48a>
 801509a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801509c:	465d      	mov	r5, fp
 801509e:	ea6f 0a03 	mvn.w	sl, r3
 80150a2:	f04f 0900 	mov.w	r9, #0
 80150a6:	4639      	mov	r1, r7
 80150a8:	4620      	mov	r0, r4
 80150aa:	f000 febb 	bl	8015e24 <_Bfree>
 80150ae:	2e00      	cmp	r6, #0
 80150b0:	f43f aeb7 	beq.w	8014e22 <_dtoa_r+0x67a>
 80150b4:	f1b9 0f00 	cmp.w	r9, #0
 80150b8:	d005      	beq.n	80150c6 <_dtoa_r+0x91e>
 80150ba:	45b1      	cmp	r9, r6
 80150bc:	d003      	beq.n	80150c6 <_dtoa_r+0x91e>
 80150be:	4649      	mov	r1, r9
 80150c0:	4620      	mov	r0, r4
 80150c2:	f000 feaf 	bl	8015e24 <_Bfree>
 80150c6:	4631      	mov	r1, r6
 80150c8:	4620      	mov	r0, r4
 80150ca:	f000 feab 	bl	8015e24 <_Bfree>
 80150ce:	e6a8      	b.n	8014e22 <_dtoa_r+0x67a>
 80150d0:	2700      	movs	r7, #0
 80150d2:	463e      	mov	r6, r7
 80150d4:	e7e1      	b.n	801509a <_dtoa_r+0x8f2>
 80150d6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80150da:	463e      	mov	r6, r7
 80150dc:	e5a9      	b.n	8014c32 <_dtoa_r+0x48a>
 80150de:	bf00      	nop
 80150e0:	40240000 	.word	0x40240000
 80150e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80150e6:	f8cd 9008 	str.w	r9, [sp, #8]
 80150ea:	2b00      	cmp	r3, #0
 80150ec:	f000 80fa 	beq.w	80152e4 <_dtoa_r+0xb3c>
 80150f0:	2d00      	cmp	r5, #0
 80150f2:	dd05      	ble.n	8015100 <_dtoa_r+0x958>
 80150f4:	4631      	mov	r1, r6
 80150f6:	462a      	mov	r2, r5
 80150f8:	4620      	mov	r0, r4
 80150fa:	f001 f85f 	bl	80161bc <__lshift>
 80150fe:	4606      	mov	r6, r0
 8015100:	9b07      	ldr	r3, [sp, #28]
 8015102:	2b00      	cmp	r3, #0
 8015104:	d04c      	beq.n	80151a0 <_dtoa_r+0x9f8>
 8015106:	6871      	ldr	r1, [r6, #4]
 8015108:	4620      	mov	r0, r4
 801510a:	f000 fe57 	bl	8015dbc <_Balloc>
 801510e:	6932      	ldr	r2, [r6, #16]
 8015110:	3202      	adds	r2, #2
 8015112:	4605      	mov	r5, r0
 8015114:	0092      	lsls	r2, r2, #2
 8015116:	f106 010c 	add.w	r1, r6, #12
 801511a:	300c      	adds	r0, #12
 801511c:	f7fd fb68 	bl	80127f0 <memcpy>
 8015120:	2201      	movs	r2, #1
 8015122:	4629      	mov	r1, r5
 8015124:	4620      	mov	r0, r4
 8015126:	f001 f849 	bl	80161bc <__lshift>
 801512a:	9b00      	ldr	r3, [sp, #0]
 801512c:	f8cd b014 	str.w	fp, [sp, #20]
 8015130:	f003 0301 	and.w	r3, r3, #1
 8015134:	46b1      	mov	r9, r6
 8015136:	9307      	str	r3, [sp, #28]
 8015138:	4606      	mov	r6, r0
 801513a:	4639      	mov	r1, r7
 801513c:	9804      	ldr	r0, [sp, #16]
 801513e:	f7ff faa7 	bl	8014690 <quorem>
 8015142:	4649      	mov	r1, r9
 8015144:	4605      	mov	r5, r0
 8015146:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801514a:	9804      	ldr	r0, [sp, #16]
 801514c:	f001 f88a 	bl	8016264 <__mcmp>
 8015150:	4632      	mov	r2, r6
 8015152:	9000      	str	r0, [sp, #0]
 8015154:	4639      	mov	r1, r7
 8015156:	4620      	mov	r0, r4
 8015158:	f001 f89e 	bl	8016298 <__mdiff>
 801515c:	68c3      	ldr	r3, [r0, #12]
 801515e:	4602      	mov	r2, r0
 8015160:	bb03      	cbnz	r3, 80151a4 <_dtoa_r+0x9fc>
 8015162:	4601      	mov	r1, r0
 8015164:	9008      	str	r0, [sp, #32]
 8015166:	9804      	ldr	r0, [sp, #16]
 8015168:	f001 f87c 	bl	8016264 <__mcmp>
 801516c:	9a08      	ldr	r2, [sp, #32]
 801516e:	4603      	mov	r3, r0
 8015170:	4611      	mov	r1, r2
 8015172:	4620      	mov	r0, r4
 8015174:	9308      	str	r3, [sp, #32]
 8015176:	f000 fe55 	bl	8015e24 <_Bfree>
 801517a:	9b08      	ldr	r3, [sp, #32]
 801517c:	b9a3      	cbnz	r3, 80151a8 <_dtoa_r+0xa00>
 801517e:	9a06      	ldr	r2, [sp, #24]
 8015180:	b992      	cbnz	r2, 80151a8 <_dtoa_r+0xa00>
 8015182:	9a07      	ldr	r2, [sp, #28]
 8015184:	b982      	cbnz	r2, 80151a8 <_dtoa_r+0xa00>
 8015186:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801518a:	d029      	beq.n	80151e0 <_dtoa_r+0xa38>
 801518c:	9b00      	ldr	r3, [sp, #0]
 801518e:	2b00      	cmp	r3, #0
 8015190:	dd01      	ble.n	8015196 <_dtoa_r+0x9ee>
 8015192:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8015196:	9b05      	ldr	r3, [sp, #20]
 8015198:	1c5d      	adds	r5, r3, #1
 801519a:	f883 8000 	strb.w	r8, [r3]
 801519e:	e782      	b.n	80150a6 <_dtoa_r+0x8fe>
 80151a0:	4630      	mov	r0, r6
 80151a2:	e7c2      	b.n	801512a <_dtoa_r+0x982>
 80151a4:	2301      	movs	r3, #1
 80151a6:	e7e3      	b.n	8015170 <_dtoa_r+0x9c8>
 80151a8:	9a00      	ldr	r2, [sp, #0]
 80151aa:	2a00      	cmp	r2, #0
 80151ac:	db04      	blt.n	80151b8 <_dtoa_r+0xa10>
 80151ae:	d125      	bne.n	80151fc <_dtoa_r+0xa54>
 80151b0:	9a06      	ldr	r2, [sp, #24]
 80151b2:	bb1a      	cbnz	r2, 80151fc <_dtoa_r+0xa54>
 80151b4:	9a07      	ldr	r2, [sp, #28]
 80151b6:	bb0a      	cbnz	r2, 80151fc <_dtoa_r+0xa54>
 80151b8:	2b00      	cmp	r3, #0
 80151ba:	ddec      	ble.n	8015196 <_dtoa_r+0x9ee>
 80151bc:	2201      	movs	r2, #1
 80151be:	9904      	ldr	r1, [sp, #16]
 80151c0:	4620      	mov	r0, r4
 80151c2:	f000 fffb 	bl	80161bc <__lshift>
 80151c6:	4639      	mov	r1, r7
 80151c8:	9004      	str	r0, [sp, #16]
 80151ca:	f001 f84b 	bl	8016264 <__mcmp>
 80151ce:	2800      	cmp	r0, #0
 80151d0:	dc03      	bgt.n	80151da <_dtoa_r+0xa32>
 80151d2:	d1e0      	bne.n	8015196 <_dtoa_r+0x9ee>
 80151d4:	f018 0f01 	tst.w	r8, #1
 80151d8:	d0dd      	beq.n	8015196 <_dtoa_r+0x9ee>
 80151da:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80151de:	d1d8      	bne.n	8015192 <_dtoa_r+0x9ea>
 80151e0:	9b05      	ldr	r3, [sp, #20]
 80151e2:	9a05      	ldr	r2, [sp, #20]
 80151e4:	1c5d      	adds	r5, r3, #1
 80151e6:	2339      	movs	r3, #57	; 0x39
 80151e8:	7013      	strb	r3, [r2, #0]
 80151ea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80151ee:	2b39      	cmp	r3, #57	; 0x39
 80151f0:	f105 32ff 	add.w	r2, r5, #4294967295
 80151f4:	d04f      	beq.n	8015296 <_dtoa_r+0xaee>
 80151f6:	3301      	adds	r3, #1
 80151f8:	7013      	strb	r3, [r2, #0]
 80151fa:	e754      	b.n	80150a6 <_dtoa_r+0x8fe>
 80151fc:	9a05      	ldr	r2, [sp, #20]
 80151fe:	2b00      	cmp	r3, #0
 8015200:	f102 0501 	add.w	r5, r2, #1
 8015204:	dd06      	ble.n	8015214 <_dtoa_r+0xa6c>
 8015206:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801520a:	d0e9      	beq.n	80151e0 <_dtoa_r+0xa38>
 801520c:	f108 0801 	add.w	r8, r8, #1
 8015210:	9b05      	ldr	r3, [sp, #20]
 8015212:	e7c2      	b.n	801519a <_dtoa_r+0x9f2>
 8015214:	9a02      	ldr	r2, [sp, #8]
 8015216:	f805 8c01 	strb.w	r8, [r5, #-1]
 801521a:	eba5 030b 	sub.w	r3, r5, fp
 801521e:	4293      	cmp	r3, r2
 8015220:	d021      	beq.n	8015266 <_dtoa_r+0xabe>
 8015222:	2300      	movs	r3, #0
 8015224:	220a      	movs	r2, #10
 8015226:	9904      	ldr	r1, [sp, #16]
 8015228:	4620      	mov	r0, r4
 801522a:	f000 fe12 	bl	8015e52 <__multadd>
 801522e:	45b1      	cmp	r9, r6
 8015230:	9004      	str	r0, [sp, #16]
 8015232:	f04f 0300 	mov.w	r3, #0
 8015236:	f04f 020a 	mov.w	r2, #10
 801523a:	4649      	mov	r1, r9
 801523c:	4620      	mov	r0, r4
 801523e:	d105      	bne.n	801524c <_dtoa_r+0xaa4>
 8015240:	f000 fe07 	bl	8015e52 <__multadd>
 8015244:	4681      	mov	r9, r0
 8015246:	4606      	mov	r6, r0
 8015248:	9505      	str	r5, [sp, #20]
 801524a:	e776      	b.n	801513a <_dtoa_r+0x992>
 801524c:	f000 fe01 	bl	8015e52 <__multadd>
 8015250:	4631      	mov	r1, r6
 8015252:	4681      	mov	r9, r0
 8015254:	2300      	movs	r3, #0
 8015256:	220a      	movs	r2, #10
 8015258:	4620      	mov	r0, r4
 801525a:	f000 fdfa 	bl	8015e52 <__multadd>
 801525e:	4606      	mov	r6, r0
 8015260:	e7f2      	b.n	8015248 <_dtoa_r+0xaa0>
 8015262:	f04f 0900 	mov.w	r9, #0
 8015266:	2201      	movs	r2, #1
 8015268:	9904      	ldr	r1, [sp, #16]
 801526a:	4620      	mov	r0, r4
 801526c:	f000 ffa6 	bl	80161bc <__lshift>
 8015270:	4639      	mov	r1, r7
 8015272:	9004      	str	r0, [sp, #16]
 8015274:	f000 fff6 	bl	8016264 <__mcmp>
 8015278:	2800      	cmp	r0, #0
 801527a:	dcb6      	bgt.n	80151ea <_dtoa_r+0xa42>
 801527c:	d102      	bne.n	8015284 <_dtoa_r+0xadc>
 801527e:	f018 0f01 	tst.w	r8, #1
 8015282:	d1b2      	bne.n	80151ea <_dtoa_r+0xa42>
 8015284:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015288:	2b30      	cmp	r3, #48	; 0x30
 801528a:	f105 32ff 	add.w	r2, r5, #4294967295
 801528e:	f47f af0a 	bne.w	80150a6 <_dtoa_r+0x8fe>
 8015292:	4615      	mov	r5, r2
 8015294:	e7f6      	b.n	8015284 <_dtoa_r+0xadc>
 8015296:	4593      	cmp	fp, r2
 8015298:	d105      	bne.n	80152a6 <_dtoa_r+0xafe>
 801529a:	2331      	movs	r3, #49	; 0x31
 801529c:	f10a 0a01 	add.w	sl, sl, #1
 80152a0:	f88b 3000 	strb.w	r3, [fp]
 80152a4:	e6ff      	b.n	80150a6 <_dtoa_r+0x8fe>
 80152a6:	4615      	mov	r5, r2
 80152a8:	e79f      	b.n	80151ea <_dtoa_r+0xa42>
 80152aa:	f8df b064 	ldr.w	fp, [pc, #100]	; 8015310 <_dtoa_r+0xb68>
 80152ae:	e007      	b.n	80152c0 <_dtoa_r+0xb18>
 80152b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80152b2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8015314 <_dtoa_r+0xb6c>
 80152b6:	b11b      	cbz	r3, 80152c0 <_dtoa_r+0xb18>
 80152b8:	f10b 0308 	add.w	r3, fp, #8
 80152bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80152be:	6013      	str	r3, [r2, #0]
 80152c0:	4658      	mov	r0, fp
 80152c2:	b017      	add	sp, #92	; 0x5c
 80152c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80152c8:	9b06      	ldr	r3, [sp, #24]
 80152ca:	2b01      	cmp	r3, #1
 80152cc:	f77f ae35 	ble.w	8014f3a <_dtoa_r+0x792>
 80152d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80152d2:	9307      	str	r3, [sp, #28]
 80152d4:	e649      	b.n	8014f6a <_dtoa_r+0x7c2>
 80152d6:	9b02      	ldr	r3, [sp, #8]
 80152d8:	2b00      	cmp	r3, #0
 80152da:	dc03      	bgt.n	80152e4 <_dtoa_r+0xb3c>
 80152dc:	9b06      	ldr	r3, [sp, #24]
 80152de:	2b02      	cmp	r3, #2
 80152e0:	f73f aecc 	bgt.w	801507c <_dtoa_r+0x8d4>
 80152e4:	465d      	mov	r5, fp
 80152e6:	4639      	mov	r1, r7
 80152e8:	9804      	ldr	r0, [sp, #16]
 80152ea:	f7ff f9d1 	bl	8014690 <quorem>
 80152ee:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80152f2:	f805 8b01 	strb.w	r8, [r5], #1
 80152f6:	9a02      	ldr	r2, [sp, #8]
 80152f8:	eba5 030b 	sub.w	r3, r5, fp
 80152fc:	429a      	cmp	r2, r3
 80152fe:	ddb0      	ble.n	8015262 <_dtoa_r+0xaba>
 8015300:	2300      	movs	r3, #0
 8015302:	220a      	movs	r2, #10
 8015304:	9904      	ldr	r1, [sp, #16]
 8015306:	4620      	mov	r0, r4
 8015308:	f000 fda3 	bl	8015e52 <__multadd>
 801530c:	9004      	str	r0, [sp, #16]
 801530e:	e7ea      	b.n	80152e6 <_dtoa_r+0xb3e>
 8015310:	08017f5b 	.word	0x08017f5b
 8015314:	08017db8 	.word	0x08017db8

08015318 <__sflush_r>:
 8015318:	898a      	ldrh	r2, [r1, #12]
 801531a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801531e:	4605      	mov	r5, r0
 8015320:	0710      	lsls	r0, r2, #28
 8015322:	460c      	mov	r4, r1
 8015324:	d458      	bmi.n	80153d8 <__sflush_r+0xc0>
 8015326:	684b      	ldr	r3, [r1, #4]
 8015328:	2b00      	cmp	r3, #0
 801532a:	dc05      	bgt.n	8015338 <__sflush_r+0x20>
 801532c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801532e:	2b00      	cmp	r3, #0
 8015330:	dc02      	bgt.n	8015338 <__sflush_r+0x20>
 8015332:	2000      	movs	r0, #0
 8015334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015338:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801533a:	2e00      	cmp	r6, #0
 801533c:	d0f9      	beq.n	8015332 <__sflush_r+0x1a>
 801533e:	2300      	movs	r3, #0
 8015340:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015344:	682f      	ldr	r7, [r5, #0]
 8015346:	6a21      	ldr	r1, [r4, #32]
 8015348:	602b      	str	r3, [r5, #0]
 801534a:	d032      	beq.n	80153b2 <__sflush_r+0x9a>
 801534c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801534e:	89a3      	ldrh	r3, [r4, #12]
 8015350:	075a      	lsls	r2, r3, #29
 8015352:	d505      	bpl.n	8015360 <__sflush_r+0x48>
 8015354:	6863      	ldr	r3, [r4, #4]
 8015356:	1ac0      	subs	r0, r0, r3
 8015358:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801535a:	b10b      	cbz	r3, 8015360 <__sflush_r+0x48>
 801535c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801535e:	1ac0      	subs	r0, r0, r3
 8015360:	2300      	movs	r3, #0
 8015362:	4602      	mov	r2, r0
 8015364:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015366:	6a21      	ldr	r1, [r4, #32]
 8015368:	4628      	mov	r0, r5
 801536a:	47b0      	blx	r6
 801536c:	1c43      	adds	r3, r0, #1
 801536e:	89a3      	ldrh	r3, [r4, #12]
 8015370:	d106      	bne.n	8015380 <__sflush_r+0x68>
 8015372:	6829      	ldr	r1, [r5, #0]
 8015374:	291d      	cmp	r1, #29
 8015376:	d848      	bhi.n	801540a <__sflush_r+0xf2>
 8015378:	4a29      	ldr	r2, [pc, #164]	; (8015420 <__sflush_r+0x108>)
 801537a:	40ca      	lsrs	r2, r1
 801537c:	07d6      	lsls	r6, r2, #31
 801537e:	d544      	bpl.n	801540a <__sflush_r+0xf2>
 8015380:	2200      	movs	r2, #0
 8015382:	6062      	str	r2, [r4, #4]
 8015384:	04d9      	lsls	r1, r3, #19
 8015386:	6922      	ldr	r2, [r4, #16]
 8015388:	6022      	str	r2, [r4, #0]
 801538a:	d504      	bpl.n	8015396 <__sflush_r+0x7e>
 801538c:	1c42      	adds	r2, r0, #1
 801538e:	d101      	bne.n	8015394 <__sflush_r+0x7c>
 8015390:	682b      	ldr	r3, [r5, #0]
 8015392:	b903      	cbnz	r3, 8015396 <__sflush_r+0x7e>
 8015394:	6560      	str	r0, [r4, #84]	; 0x54
 8015396:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015398:	602f      	str	r7, [r5, #0]
 801539a:	2900      	cmp	r1, #0
 801539c:	d0c9      	beq.n	8015332 <__sflush_r+0x1a>
 801539e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80153a2:	4299      	cmp	r1, r3
 80153a4:	d002      	beq.n	80153ac <__sflush_r+0x94>
 80153a6:	4628      	mov	r0, r5
 80153a8:	f001 f916 	bl	80165d8 <_free_r>
 80153ac:	2000      	movs	r0, #0
 80153ae:	6360      	str	r0, [r4, #52]	; 0x34
 80153b0:	e7c0      	b.n	8015334 <__sflush_r+0x1c>
 80153b2:	2301      	movs	r3, #1
 80153b4:	4628      	mov	r0, r5
 80153b6:	47b0      	blx	r6
 80153b8:	1c41      	adds	r1, r0, #1
 80153ba:	d1c8      	bne.n	801534e <__sflush_r+0x36>
 80153bc:	682b      	ldr	r3, [r5, #0]
 80153be:	2b00      	cmp	r3, #0
 80153c0:	d0c5      	beq.n	801534e <__sflush_r+0x36>
 80153c2:	2b1d      	cmp	r3, #29
 80153c4:	d001      	beq.n	80153ca <__sflush_r+0xb2>
 80153c6:	2b16      	cmp	r3, #22
 80153c8:	d101      	bne.n	80153ce <__sflush_r+0xb6>
 80153ca:	602f      	str	r7, [r5, #0]
 80153cc:	e7b1      	b.n	8015332 <__sflush_r+0x1a>
 80153ce:	89a3      	ldrh	r3, [r4, #12]
 80153d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80153d4:	81a3      	strh	r3, [r4, #12]
 80153d6:	e7ad      	b.n	8015334 <__sflush_r+0x1c>
 80153d8:	690f      	ldr	r7, [r1, #16]
 80153da:	2f00      	cmp	r7, #0
 80153dc:	d0a9      	beq.n	8015332 <__sflush_r+0x1a>
 80153de:	0793      	lsls	r3, r2, #30
 80153e0:	680e      	ldr	r6, [r1, #0]
 80153e2:	bf08      	it	eq
 80153e4:	694b      	ldreq	r3, [r1, #20]
 80153e6:	600f      	str	r7, [r1, #0]
 80153e8:	bf18      	it	ne
 80153ea:	2300      	movne	r3, #0
 80153ec:	eba6 0807 	sub.w	r8, r6, r7
 80153f0:	608b      	str	r3, [r1, #8]
 80153f2:	f1b8 0f00 	cmp.w	r8, #0
 80153f6:	dd9c      	ble.n	8015332 <__sflush_r+0x1a>
 80153f8:	4643      	mov	r3, r8
 80153fa:	463a      	mov	r2, r7
 80153fc:	6a21      	ldr	r1, [r4, #32]
 80153fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015400:	4628      	mov	r0, r5
 8015402:	47b0      	blx	r6
 8015404:	2800      	cmp	r0, #0
 8015406:	dc06      	bgt.n	8015416 <__sflush_r+0xfe>
 8015408:	89a3      	ldrh	r3, [r4, #12]
 801540a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801540e:	81a3      	strh	r3, [r4, #12]
 8015410:	f04f 30ff 	mov.w	r0, #4294967295
 8015414:	e78e      	b.n	8015334 <__sflush_r+0x1c>
 8015416:	4407      	add	r7, r0
 8015418:	eba8 0800 	sub.w	r8, r8, r0
 801541c:	e7e9      	b.n	80153f2 <__sflush_r+0xda>
 801541e:	bf00      	nop
 8015420:	20400001 	.word	0x20400001

08015424 <_fflush_r>:
 8015424:	b538      	push	{r3, r4, r5, lr}
 8015426:	690b      	ldr	r3, [r1, #16]
 8015428:	4605      	mov	r5, r0
 801542a:	460c      	mov	r4, r1
 801542c:	b1db      	cbz	r3, 8015466 <_fflush_r+0x42>
 801542e:	b118      	cbz	r0, 8015438 <_fflush_r+0x14>
 8015430:	6983      	ldr	r3, [r0, #24]
 8015432:	b90b      	cbnz	r3, 8015438 <_fflush_r+0x14>
 8015434:	f000 f860 	bl	80154f8 <__sinit>
 8015438:	4b0c      	ldr	r3, [pc, #48]	; (801546c <_fflush_r+0x48>)
 801543a:	429c      	cmp	r4, r3
 801543c:	d109      	bne.n	8015452 <_fflush_r+0x2e>
 801543e:	686c      	ldr	r4, [r5, #4]
 8015440:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015444:	b17b      	cbz	r3, 8015466 <_fflush_r+0x42>
 8015446:	4621      	mov	r1, r4
 8015448:	4628      	mov	r0, r5
 801544a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801544e:	f7ff bf63 	b.w	8015318 <__sflush_r>
 8015452:	4b07      	ldr	r3, [pc, #28]	; (8015470 <_fflush_r+0x4c>)
 8015454:	429c      	cmp	r4, r3
 8015456:	d101      	bne.n	801545c <_fflush_r+0x38>
 8015458:	68ac      	ldr	r4, [r5, #8]
 801545a:	e7f1      	b.n	8015440 <_fflush_r+0x1c>
 801545c:	4b05      	ldr	r3, [pc, #20]	; (8015474 <_fflush_r+0x50>)
 801545e:	429c      	cmp	r4, r3
 8015460:	bf08      	it	eq
 8015462:	68ec      	ldreq	r4, [r5, #12]
 8015464:	e7ec      	b.n	8015440 <_fflush_r+0x1c>
 8015466:	2000      	movs	r0, #0
 8015468:	bd38      	pop	{r3, r4, r5, pc}
 801546a:	bf00      	nop
 801546c:	08017de8 	.word	0x08017de8
 8015470:	08017e08 	.word	0x08017e08
 8015474:	08017dc8 	.word	0x08017dc8

08015478 <std>:
 8015478:	2300      	movs	r3, #0
 801547a:	b510      	push	{r4, lr}
 801547c:	4604      	mov	r4, r0
 801547e:	e9c0 3300 	strd	r3, r3, [r0]
 8015482:	6083      	str	r3, [r0, #8]
 8015484:	8181      	strh	r1, [r0, #12]
 8015486:	6643      	str	r3, [r0, #100]	; 0x64
 8015488:	81c2      	strh	r2, [r0, #14]
 801548a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801548e:	6183      	str	r3, [r0, #24]
 8015490:	4619      	mov	r1, r3
 8015492:	2208      	movs	r2, #8
 8015494:	305c      	adds	r0, #92	; 0x5c
 8015496:	f7fd f9b6 	bl	8012806 <memset>
 801549a:	4b05      	ldr	r3, [pc, #20]	; (80154b0 <std+0x38>)
 801549c:	6263      	str	r3, [r4, #36]	; 0x24
 801549e:	4b05      	ldr	r3, [pc, #20]	; (80154b4 <std+0x3c>)
 80154a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80154a2:	4b05      	ldr	r3, [pc, #20]	; (80154b8 <std+0x40>)
 80154a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80154a6:	4b05      	ldr	r3, [pc, #20]	; (80154bc <std+0x44>)
 80154a8:	6224      	str	r4, [r4, #32]
 80154aa:	6323      	str	r3, [r4, #48]	; 0x30
 80154ac:	bd10      	pop	{r4, pc}
 80154ae:	bf00      	nop
 80154b0:	08013695 	.word	0x08013695
 80154b4:	080136bb 	.word	0x080136bb
 80154b8:	080136f3 	.word	0x080136f3
 80154bc:	08013717 	.word	0x08013717

080154c0 <_cleanup_r>:
 80154c0:	4901      	ldr	r1, [pc, #4]	; (80154c8 <_cleanup_r+0x8>)
 80154c2:	f000 b885 	b.w	80155d0 <_fwalk_reent>
 80154c6:	bf00      	nop
 80154c8:	08015425 	.word	0x08015425

080154cc <__sfmoreglue>:
 80154cc:	b570      	push	{r4, r5, r6, lr}
 80154ce:	1e4a      	subs	r2, r1, #1
 80154d0:	2568      	movs	r5, #104	; 0x68
 80154d2:	4355      	muls	r5, r2
 80154d4:	460e      	mov	r6, r1
 80154d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80154da:	f001 f8cb 	bl	8016674 <_malloc_r>
 80154de:	4604      	mov	r4, r0
 80154e0:	b140      	cbz	r0, 80154f4 <__sfmoreglue+0x28>
 80154e2:	2100      	movs	r1, #0
 80154e4:	e9c0 1600 	strd	r1, r6, [r0]
 80154e8:	300c      	adds	r0, #12
 80154ea:	60a0      	str	r0, [r4, #8]
 80154ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80154f0:	f7fd f989 	bl	8012806 <memset>
 80154f4:	4620      	mov	r0, r4
 80154f6:	bd70      	pop	{r4, r5, r6, pc}

080154f8 <__sinit>:
 80154f8:	6983      	ldr	r3, [r0, #24]
 80154fa:	b510      	push	{r4, lr}
 80154fc:	4604      	mov	r4, r0
 80154fe:	bb33      	cbnz	r3, 801554e <__sinit+0x56>
 8015500:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8015504:	6503      	str	r3, [r0, #80]	; 0x50
 8015506:	4b12      	ldr	r3, [pc, #72]	; (8015550 <__sinit+0x58>)
 8015508:	4a12      	ldr	r2, [pc, #72]	; (8015554 <__sinit+0x5c>)
 801550a:	681b      	ldr	r3, [r3, #0]
 801550c:	6282      	str	r2, [r0, #40]	; 0x28
 801550e:	4298      	cmp	r0, r3
 8015510:	bf04      	itt	eq
 8015512:	2301      	moveq	r3, #1
 8015514:	6183      	streq	r3, [r0, #24]
 8015516:	f000 f81f 	bl	8015558 <__sfp>
 801551a:	6060      	str	r0, [r4, #4]
 801551c:	4620      	mov	r0, r4
 801551e:	f000 f81b 	bl	8015558 <__sfp>
 8015522:	60a0      	str	r0, [r4, #8]
 8015524:	4620      	mov	r0, r4
 8015526:	f000 f817 	bl	8015558 <__sfp>
 801552a:	2200      	movs	r2, #0
 801552c:	60e0      	str	r0, [r4, #12]
 801552e:	2104      	movs	r1, #4
 8015530:	6860      	ldr	r0, [r4, #4]
 8015532:	f7ff ffa1 	bl	8015478 <std>
 8015536:	2201      	movs	r2, #1
 8015538:	2109      	movs	r1, #9
 801553a:	68a0      	ldr	r0, [r4, #8]
 801553c:	f7ff ff9c 	bl	8015478 <std>
 8015540:	2202      	movs	r2, #2
 8015542:	2112      	movs	r1, #18
 8015544:	68e0      	ldr	r0, [r4, #12]
 8015546:	f7ff ff97 	bl	8015478 <std>
 801554a:	2301      	movs	r3, #1
 801554c:	61a3      	str	r3, [r4, #24]
 801554e:	bd10      	pop	{r4, pc}
 8015550:	08017d28 	.word	0x08017d28
 8015554:	080154c1 	.word	0x080154c1

08015558 <__sfp>:
 8015558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801555a:	4b1b      	ldr	r3, [pc, #108]	; (80155c8 <__sfp+0x70>)
 801555c:	681e      	ldr	r6, [r3, #0]
 801555e:	69b3      	ldr	r3, [r6, #24]
 8015560:	4607      	mov	r7, r0
 8015562:	b913      	cbnz	r3, 801556a <__sfp+0x12>
 8015564:	4630      	mov	r0, r6
 8015566:	f7ff ffc7 	bl	80154f8 <__sinit>
 801556a:	3648      	adds	r6, #72	; 0x48
 801556c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015570:	3b01      	subs	r3, #1
 8015572:	d503      	bpl.n	801557c <__sfp+0x24>
 8015574:	6833      	ldr	r3, [r6, #0]
 8015576:	b133      	cbz	r3, 8015586 <__sfp+0x2e>
 8015578:	6836      	ldr	r6, [r6, #0]
 801557a:	e7f7      	b.n	801556c <__sfp+0x14>
 801557c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015580:	b16d      	cbz	r5, 801559e <__sfp+0x46>
 8015582:	3468      	adds	r4, #104	; 0x68
 8015584:	e7f4      	b.n	8015570 <__sfp+0x18>
 8015586:	2104      	movs	r1, #4
 8015588:	4638      	mov	r0, r7
 801558a:	f7ff ff9f 	bl	80154cc <__sfmoreglue>
 801558e:	6030      	str	r0, [r6, #0]
 8015590:	2800      	cmp	r0, #0
 8015592:	d1f1      	bne.n	8015578 <__sfp+0x20>
 8015594:	230c      	movs	r3, #12
 8015596:	603b      	str	r3, [r7, #0]
 8015598:	4604      	mov	r4, r0
 801559a:	4620      	mov	r0, r4
 801559c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801559e:	4b0b      	ldr	r3, [pc, #44]	; (80155cc <__sfp+0x74>)
 80155a0:	6665      	str	r5, [r4, #100]	; 0x64
 80155a2:	e9c4 5500 	strd	r5, r5, [r4]
 80155a6:	60a5      	str	r5, [r4, #8]
 80155a8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80155ac:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80155b0:	2208      	movs	r2, #8
 80155b2:	4629      	mov	r1, r5
 80155b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80155b8:	f7fd f925 	bl	8012806 <memset>
 80155bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80155c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80155c4:	e7e9      	b.n	801559a <__sfp+0x42>
 80155c6:	bf00      	nop
 80155c8:	08017d28 	.word	0x08017d28
 80155cc:	ffff0001 	.word	0xffff0001

080155d0 <_fwalk_reent>:
 80155d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80155d4:	4680      	mov	r8, r0
 80155d6:	4689      	mov	r9, r1
 80155d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80155dc:	2600      	movs	r6, #0
 80155de:	b914      	cbnz	r4, 80155e6 <_fwalk_reent+0x16>
 80155e0:	4630      	mov	r0, r6
 80155e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80155e6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80155ea:	3f01      	subs	r7, #1
 80155ec:	d501      	bpl.n	80155f2 <_fwalk_reent+0x22>
 80155ee:	6824      	ldr	r4, [r4, #0]
 80155f0:	e7f5      	b.n	80155de <_fwalk_reent+0xe>
 80155f2:	89ab      	ldrh	r3, [r5, #12]
 80155f4:	2b01      	cmp	r3, #1
 80155f6:	d907      	bls.n	8015608 <_fwalk_reent+0x38>
 80155f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80155fc:	3301      	adds	r3, #1
 80155fe:	d003      	beq.n	8015608 <_fwalk_reent+0x38>
 8015600:	4629      	mov	r1, r5
 8015602:	4640      	mov	r0, r8
 8015604:	47c8      	blx	r9
 8015606:	4306      	orrs	r6, r0
 8015608:	3568      	adds	r5, #104	; 0x68
 801560a:	e7ee      	b.n	80155ea <_fwalk_reent+0x1a>

0801560c <rshift>:
 801560c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801560e:	6906      	ldr	r6, [r0, #16]
 8015610:	114b      	asrs	r3, r1, #5
 8015612:	429e      	cmp	r6, r3
 8015614:	f100 0414 	add.w	r4, r0, #20
 8015618:	dd30      	ble.n	801567c <rshift+0x70>
 801561a:	f011 011f 	ands.w	r1, r1, #31
 801561e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8015622:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8015626:	d108      	bne.n	801563a <rshift+0x2e>
 8015628:	4621      	mov	r1, r4
 801562a:	42b2      	cmp	r2, r6
 801562c:	460b      	mov	r3, r1
 801562e:	d211      	bcs.n	8015654 <rshift+0x48>
 8015630:	f852 3b04 	ldr.w	r3, [r2], #4
 8015634:	f841 3b04 	str.w	r3, [r1], #4
 8015638:	e7f7      	b.n	801562a <rshift+0x1e>
 801563a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 801563e:	f1c1 0c20 	rsb	ip, r1, #32
 8015642:	40cd      	lsrs	r5, r1
 8015644:	3204      	adds	r2, #4
 8015646:	4623      	mov	r3, r4
 8015648:	42b2      	cmp	r2, r6
 801564a:	4617      	mov	r7, r2
 801564c:	d30c      	bcc.n	8015668 <rshift+0x5c>
 801564e:	601d      	str	r5, [r3, #0]
 8015650:	b105      	cbz	r5, 8015654 <rshift+0x48>
 8015652:	3304      	adds	r3, #4
 8015654:	1b1a      	subs	r2, r3, r4
 8015656:	42a3      	cmp	r3, r4
 8015658:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801565c:	bf08      	it	eq
 801565e:	2300      	moveq	r3, #0
 8015660:	6102      	str	r2, [r0, #16]
 8015662:	bf08      	it	eq
 8015664:	6143      	streq	r3, [r0, #20]
 8015666:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015668:	683f      	ldr	r7, [r7, #0]
 801566a:	fa07 f70c 	lsl.w	r7, r7, ip
 801566e:	433d      	orrs	r5, r7
 8015670:	f843 5b04 	str.w	r5, [r3], #4
 8015674:	f852 5b04 	ldr.w	r5, [r2], #4
 8015678:	40cd      	lsrs	r5, r1
 801567a:	e7e5      	b.n	8015648 <rshift+0x3c>
 801567c:	4623      	mov	r3, r4
 801567e:	e7e9      	b.n	8015654 <rshift+0x48>

08015680 <__hexdig_fun>:
 8015680:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8015684:	2b09      	cmp	r3, #9
 8015686:	d802      	bhi.n	801568e <__hexdig_fun+0xe>
 8015688:	3820      	subs	r0, #32
 801568a:	b2c0      	uxtb	r0, r0
 801568c:	4770      	bx	lr
 801568e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8015692:	2b05      	cmp	r3, #5
 8015694:	d801      	bhi.n	801569a <__hexdig_fun+0x1a>
 8015696:	3847      	subs	r0, #71	; 0x47
 8015698:	e7f7      	b.n	801568a <__hexdig_fun+0xa>
 801569a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801569e:	2b05      	cmp	r3, #5
 80156a0:	d801      	bhi.n	80156a6 <__hexdig_fun+0x26>
 80156a2:	3827      	subs	r0, #39	; 0x27
 80156a4:	e7f1      	b.n	801568a <__hexdig_fun+0xa>
 80156a6:	2000      	movs	r0, #0
 80156a8:	4770      	bx	lr

080156aa <__gethex>:
 80156aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80156ae:	b08b      	sub	sp, #44	; 0x2c
 80156b0:	468a      	mov	sl, r1
 80156b2:	9002      	str	r0, [sp, #8]
 80156b4:	9816      	ldr	r0, [sp, #88]	; 0x58
 80156b6:	9306      	str	r3, [sp, #24]
 80156b8:	4690      	mov	r8, r2
 80156ba:	f000 fadf 	bl	8015c7c <__localeconv_l>
 80156be:	6803      	ldr	r3, [r0, #0]
 80156c0:	9303      	str	r3, [sp, #12]
 80156c2:	4618      	mov	r0, r3
 80156c4:	f7ea fd9c 	bl	8000200 <strlen>
 80156c8:	9b03      	ldr	r3, [sp, #12]
 80156ca:	9001      	str	r0, [sp, #4]
 80156cc:	4403      	add	r3, r0
 80156ce:	f04f 0b00 	mov.w	fp, #0
 80156d2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80156d6:	9307      	str	r3, [sp, #28]
 80156d8:	f8da 3000 	ldr.w	r3, [sl]
 80156dc:	3302      	adds	r3, #2
 80156de:	461f      	mov	r7, r3
 80156e0:	f813 0b01 	ldrb.w	r0, [r3], #1
 80156e4:	2830      	cmp	r0, #48	; 0x30
 80156e6:	d06c      	beq.n	80157c2 <__gethex+0x118>
 80156e8:	f7ff ffca 	bl	8015680 <__hexdig_fun>
 80156ec:	4604      	mov	r4, r0
 80156ee:	2800      	cmp	r0, #0
 80156f0:	d16a      	bne.n	80157c8 <__gethex+0x11e>
 80156f2:	9a01      	ldr	r2, [sp, #4]
 80156f4:	9903      	ldr	r1, [sp, #12]
 80156f6:	4638      	mov	r0, r7
 80156f8:	f001 fdfe 	bl	80172f8 <strncmp>
 80156fc:	2800      	cmp	r0, #0
 80156fe:	d166      	bne.n	80157ce <__gethex+0x124>
 8015700:	9b01      	ldr	r3, [sp, #4]
 8015702:	5cf8      	ldrb	r0, [r7, r3]
 8015704:	18fe      	adds	r6, r7, r3
 8015706:	f7ff ffbb 	bl	8015680 <__hexdig_fun>
 801570a:	2800      	cmp	r0, #0
 801570c:	d062      	beq.n	80157d4 <__gethex+0x12a>
 801570e:	4633      	mov	r3, r6
 8015710:	7818      	ldrb	r0, [r3, #0]
 8015712:	2830      	cmp	r0, #48	; 0x30
 8015714:	461f      	mov	r7, r3
 8015716:	f103 0301 	add.w	r3, r3, #1
 801571a:	d0f9      	beq.n	8015710 <__gethex+0x66>
 801571c:	f7ff ffb0 	bl	8015680 <__hexdig_fun>
 8015720:	fab0 f580 	clz	r5, r0
 8015724:	096d      	lsrs	r5, r5, #5
 8015726:	4634      	mov	r4, r6
 8015728:	f04f 0b01 	mov.w	fp, #1
 801572c:	463a      	mov	r2, r7
 801572e:	4616      	mov	r6, r2
 8015730:	3201      	adds	r2, #1
 8015732:	7830      	ldrb	r0, [r6, #0]
 8015734:	f7ff ffa4 	bl	8015680 <__hexdig_fun>
 8015738:	2800      	cmp	r0, #0
 801573a:	d1f8      	bne.n	801572e <__gethex+0x84>
 801573c:	9a01      	ldr	r2, [sp, #4]
 801573e:	9903      	ldr	r1, [sp, #12]
 8015740:	4630      	mov	r0, r6
 8015742:	f001 fdd9 	bl	80172f8 <strncmp>
 8015746:	b950      	cbnz	r0, 801575e <__gethex+0xb4>
 8015748:	b954      	cbnz	r4, 8015760 <__gethex+0xb6>
 801574a:	9b01      	ldr	r3, [sp, #4]
 801574c:	18f4      	adds	r4, r6, r3
 801574e:	4622      	mov	r2, r4
 8015750:	4616      	mov	r6, r2
 8015752:	3201      	adds	r2, #1
 8015754:	7830      	ldrb	r0, [r6, #0]
 8015756:	f7ff ff93 	bl	8015680 <__hexdig_fun>
 801575a:	2800      	cmp	r0, #0
 801575c:	d1f8      	bne.n	8015750 <__gethex+0xa6>
 801575e:	b10c      	cbz	r4, 8015764 <__gethex+0xba>
 8015760:	1ba4      	subs	r4, r4, r6
 8015762:	00a4      	lsls	r4, r4, #2
 8015764:	7833      	ldrb	r3, [r6, #0]
 8015766:	2b50      	cmp	r3, #80	; 0x50
 8015768:	d001      	beq.n	801576e <__gethex+0xc4>
 801576a:	2b70      	cmp	r3, #112	; 0x70
 801576c:	d140      	bne.n	80157f0 <__gethex+0x146>
 801576e:	7873      	ldrb	r3, [r6, #1]
 8015770:	2b2b      	cmp	r3, #43	; 0x2b
 8015772:	d031      	beq.n	80157d8 <__gethex+0x12e>
 8015774:	2b2d      	cmp	r3, #45	; 0x2d
 8015776:	d033      	beq.n	80157e0 <__gethex+0x136>
 8015778:	1c71      	adds	r1, r6, #1
 801577a:	f04f 0900 	mov.w	r9, #0
 801577e:	7808      	ldrb	r0, [r1, #0]
 8015780:	f7ff ff7e 	bl	8015680 <__hexdig_fun>
 8015784:	1e43      	subs	r3, r0, #1
 8015786:	b2db      	uxtb	r3, r3
 8015788:	2b18      	cmp	r3, #24
 801578a:	d831      	bhi.n	80157f0 <__gethex+0x146>
 801578c:	f1a0 0210 	sub.w	r2, r0, #16
 8015790:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8015794:	f7ff ff74 	bl	8015680 <__hexdig_fun>
 8015798:	1e43      	subs	r3, r0, #1
 801579a:	b2db      	uxtb	r3, r3
 801579c:	2b18      	cmp	r3, #24
 801579e:	d922      	bls.n	80157e6 <__gethex+0x13c>
 80157a0:	f1b9 0f00 	cmp.w	r9, #0
 80157a4:	d000      	beq.n	80157a8 <__gethex+0xfe>
 80157a6:	4252      	negs	r2, r2
 80157a8:	4414      	add	r4, r2
 80157aa:	f8ca 1000 	str.w	r1, [sl]
 80157ae:	b30d      	cbz	r5, 80157f4 <__gethex+0x14a>
 80157b0:	f1bb 0f00 	cmp.w	fp, #0
 80157b4:	bf0c      	ite	eq
 80157b6:	2706      	moveq	r7, #6
 80157b8:	2700      	movne	r7, #0
 80157ba:	4638      	mov	r0, r7
 80157bc:	b00b      	add	sp, #44	; 0x2c
 80157be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80157c2:	f10b 0b01 	add.w	fp, fp, #1
 80157c6:	e78a      	b.n	80156de <__gethex+0x34>
 80157c8:	2500      	movs	r5, #0
 80157ca:	462c      	mov	r4, r5
 80157cc:	e7ae      	b.n	801572c <__gethex+0x82>
 80157ce:	463e      	mov	r6, r7
 80157d0:	2501      	movs	r5, #1
 80157d2:	e7c7      	b.n	8015764 <__gethex+0xba>
 80157d4:	4604      	mov	r4, r0
 80157d6:	e7fb      	b.n	80157d0 <__gethex+0x126>
 80157d8:	f04f 0900 	mov.w	r9, #0
 80157dc:	1cb1      	adds	r1, r6, #2
 80157de:	e7ce      	b.n	801577e <__gethex+0xd4>
 80157e0:	f04f 0901 	mov.w	r9, #1
 80157e4:	e7fa      	b.n	80157dc <__gethex+0x132>
 80157e6:	230a      	movs	r3, #10
 80157e8:	fb03 0202 	mla	r2, r3, r2, r0
 80157ec:	3a10      	subs	r2, #16
 80157ee:	e7cf      	b.n	8015790 <__gethex+0xe6>
 80157f0:	4631      	mov	r1, r6
 80157f2:	e7da      	b.n	80157aa <__gethex+0x100>
 80157f4:	1bf3      	subs	r3, r6, r7
 80157f6:	3b01      	subs	r3, #1
 80157f8:	4629      	mov	r1, r5
 80157fa:	2b07      	cmp	r3, #7
 80157fc:	dc49      	bgt.n	8015892 <__gethex+0x1e8>
 80157fe:	9802      	ldr	r0, [sp, #8]
 8015800:	f000 fadc 	bl	8015dbc <_Balloc>
 8015804:	9b01      	ldr	r3, [sp, #4]
 8015806:	f100 0914 	add.w	r9, r0, #20
 801580a:	f04f 0b00 	mov.w	fp, #0
 801580e:	f1c3 0301 	rsb	r3, r3, #1
 8015812:	4605      	mov	r5, r0
 8015814:	f8cd 9010 	str.w	r9, [sp, #16]
 8015818:	46da      	mov	sl, fp
 801581a:	9308      	str	r3, [sp, #32]
 801581c:	42b7      	cmp	r7, r6
 801581e:	d33b      	bcc.n	8015898 <__gethex+0x1ee>
 8015820:	9804      	ldr	r0, [sp, #16]
 8015822:	f840 ab04 	str.w	sl, [r0], #4
 8015826:	eba0 0009 	sub.w	r0, r0, r9
 801582a:	1080      	asrs	r0, r0, #2
 801582c:	6128      	str	r0, [r5, #16]
 801582e:	0147      	lsls	r7, r0, #5
 8015830:	4650      	mov	r0, sl
 8015832:	f000 fb87 	bl	8015f44 <__hi0bits>
 8015836:	f8d8 6000 	ldr.w	r6, [r8]
 801583a:	1a3f      	subs	r7, r7, r0
 801583c:	42b7      	cmp	r7, r6
 801583e:	dd64      	ble.n	801590a <__gethex+0x260>
 8015840:	1bbf      	subs	r7, r7, r6
 8015842:	4639      	mov	r1, r7
 8015844:	4628      	mov	r0, r5
 8015846:	f000 fe97 	bl	8016578 <__any_on>
 801584a:	4682      	mov	sl, r0
 801584c:	b178      	cbz	r0, 801586e <__gethex+0x1c4>
 801584e:	1e7b      	subs	r3, r7, #1
 8015850:	1159      	asrs	r1, r3, #5
 8015852:	f003 021f 	and.w	r2, r3, #31
 8015856:	f04f 0a01 	mov.w	sl, #1
 801585a:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801585e:	fa0a f202 	lsl.w	r2, sl, r2
 8015862:	420a      	tst	r2, r1
 8015864:	d003      	beq.n	801586e <__gethex+0x1c4>
 8015866:	4553      	cmp	r3, sl
 8015868:	dc46      	bgt.n	80158f8 <__gethex+0x24e>
 801586a:	f04f 0a02 	mov.w	sl, #2
 801586e:	4639      	mov	r1, r7
 8015870:	4628      	mov	r0, r5
 8015872:	f7ff fecb 	bl	801560c <rshift>
 8015876:	443c      	add	r4, r7
 8015878:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801587c:	42a3      	cmp	r3, r4
 801587e:	da52      	bge.n	8015926 <__gethex+0x27c>
 8015880:	4629      	mov	r1, r5
 8015882:	9802      	ldr	r0, [sp, #8]
 8015884:	f000 face 	bl	8015e24 <_Bfree>
 8015888:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801588a:	2300      	movs	r3, #0
 801588c:	6013      	str	r3, [r2, #0]
 801588e:	27a3      	movs	r7, #163	; 0xa3
 8015890:	e793      	b.n	80157ba <__gethex+0x110>
 8015892:	3101      	adds	r1, #1
 8015894:	105b      	asrs	r3, r3, #1
 8015896:	e7b0      	b.n	80157fa <__gethex+0x150>
 8015898:	1e73      	subs	r3, r6, #1
 801589a:	9305      	str	r3, [sp, #20]
 801589c:	9a07      	ldr	r2, [sp, #28]
 801589e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80158a2:	4293      	cmp	r3, r2
 80158a4:	d018      	beq.n	80158d8 <__gethex+0x22e>
 80158a6:	f1bb 0f20 	cmp.w	fp, #32
 80158aa:	d107      	bne.n	80158bc <__gethex+0x212>
 80158ac:	9b04      	ldr	r3, [sp, #16]
 80158ae:	f8c3 a000 	str.w	sl, [r3]
 80158b2:	3304      	adds	r3, #4
 80158b4:	f04f 0a00 	mov.w	sl, #0
 80158b8:	9304      	str	r3, [sp, #16]
 80158ba:	46d3      	mov	fp, sl
 80158bc:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80158c0:	f7ff fede 	bl	8015680 <__hexdig_fun>
 80158c4:	f000 000f 	and.w	r0, r0, #15
 80158c8:	fa00 f00b 	lsl.w	r0, r0, fp
 80158cc:	ea4a 0a00 	orr.w	sl, sl, r0
 80158d0:	f10b 0b04 	add.w	fp, fp, #4
 80158d4:	9b05      	ldr	r3, [sp, #20]
 80158d6:	e00d      	b.n	80158f4 <__gethex+0x24a>
 80158d8:	9b05      	ldr	r3, [sp, #20]
 80158da:	9a08      	ldr	r2, [sp, #32]
 80158dc:	4413      	add	r3, r2
 80158de:	42bb      	cmp	r3, r7
 80158e0:	d3e1      	bcc.n	80158a6 <__gethex+0x1fc>
 80158e2:	4618      	mov	r0, r3
 80158e4:	9a01      	ldr	r2, [sp, #4]
 80158e6:	9903      	ldr	r1, [sp, #12]
 80158e8:	9309      	str	r3, [sp, #36]	; 0x24
 80158ea:	f001 fd05 	bl	80172f8 <strncmp>
 80158ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80158f0:	2800      	cmp	r0, #0
 80158f2:	d1d8      	bne.n	80158a6 <__gethex+0x1fc>
 80158f4:	461e      	mov	r6, r3
 80158f6:	e791      	b.n	801581c <__gethex+0x172>
 80158f8:	1eb9      	subs	r1, r7, #2
 80158fa:	4628      	mov	r0, r5
 80158fc:	f000 fe3c 	bl	8016578 <__any_on>
 8015900:	2800      	cmp	r0, #0
 8015902:	d0b2      	beq.n	801586a <__gethex+0x1c0>
 8015904:	f04f 0a03 	mov.w	sl, #3
 8015908:	e7b1      	b.n	801586e <__gethex+0x1c4>
 801590a:	da09      	bge.n	8015920 <__gethex+0x276>
 801590c:	1bf7      	subs	r7, r6, r7
 801590e:	4629      	mov	r1, r5
 8015910:	463a      	mov	r2, r7
 8015912:	9802      	ldr	r0, [sp, #8]
 8015914:	f000 fc52 	bl	80161bc <__lshift>
 8015918:	1be4      	subs	r4, r4, r7
 801591a:	4605      	mov	r5, r0
 801591c:	f100 0914 	add.w	r9, r0, #20
 8015920:	f04f 0a00 	mov.w	sl, #0
 8015924:	e7a8      	b.n	8015878 <__gethex+0x1ce>
 8015926:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801592a:	42a0      	cmp	r0, r4
 801592c:	dd6a      	ble.n	8015a04 <__gethex+0x35a>
 801592e:	1b04      	subs	r4, r0, r4
 8015930:	42a6      	cmp	r6, r4
 8015932:	dc2e      	bgt.n	8015992 <__gethex+0x2e8>
 8015934:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015938:	2b02      	cmp	r3, #2
 801593a:	d022      	beq.n	8015982 <__gethex+0x2d8>
 801593c:	2b03      	cmp	r3, #3
 801593e:	d024      	beq.n	801598a <__gethex+0x2e0>
 8015940:	2b01      	cmp	r3, #1
 8015942:	d115      	bne.n	8015970 <__gethex+0x2c6>
 8015944:	42a6      	cmp	r6, r4
 8015946:	d113      	bne.n	8015970 <__gethex+0x2c6>
 8015948:	2e01      	cmp	r6, #1
 801594a:	dc0b      	bgt.n	8015964 <__gethex+0x2ba>
 801594c:	9a06      	ldr	r2, [sp, #24]
 801594e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015952:	6013      	str	r3, [r2, #0]
 8015954:	2301      	movs	r3, #1
 8015956:	612b      	str	r3, [r5, #16]
 8015958:	f8c9 3000 	str.w	r3, [r9]
 801595c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801595e:	2762      	movs	r7, #98	; 0x62
 8015960:	601d      	str	r5, [r3, #0]
 8015962:	e72a      	b.n	80157ba <__gethex+0x110>
 8015964:	1e71      	subs	r1, r6, #1
 8015966:	4628      	mov	r0, r5
 8015968:	f000 fe06 	bl	8016578 <__any_on>
 801596c:	2800      	cmp	r0, #0
 801596e:	d1ed      	bne.n	801594c <__gethex+0x2a2>
 8015970:	4629      	mov	r1, r5
 8015972:	9802      	ldr	r0, [sp, #8]
 8015974:	f000 fa56 	bl	8015e24 <_Bfree>
 8015978:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801597a:	2300      	movs	r3, #0
 801597c:	6013      	str	r3, [r2, #0]
 801597e:	2750      	movs	r7, #80	; 0x50
 8015980:	e71b      	b.n	80157ba <__gethex+0x110>
 8015982:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015984:	2b00      	cmp	r3, #0
 8015986:	d0e1      	beq.n	801594c <__gethex+0x2a2>
 8015988:	e7f2      	b.n	8015970 <__gethex+0x2c6>
 801598a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801598c:	2b00      	cmp	r3, #0
 801598e:	d1dd      	bne.n	801594c <__gethex+0x2a2>
 8015990:	e7ee      	b.n	8015970 <__gethex+0x2c6>
 8015992:	1e67      	subs	r7, r4, #1
 8015994:	f1ba 0f00 	cmp.w	sl, #0
 8015998:	d131      	bne.n	80159fe <__gethex+0x354>
 801599a:	b127      	cbz	r7, 80159a6 <__gethex+0x2fc>
 801599c:	4639      	mov	r1, r7
 801599e:	4628      	mov	r0, r5
 80159a0:	f000 fdea 	bl	8016578 <__any_on>
 80159a4:	4682      	mov	sl, r0
 80159a6:	117a      	asrs	r2, r7, #5
 80159a8:	2301      	movs	r3, #1
 80159aa:	f007 071f 	and.w	r7, r7, #31
 80159ae:	fa03 f707 	lsl.w	r7, r3, r7
 80159b2:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80159b6:	4621      	mov	r1, r4
 80159b8:	421f      	tst	r7, r3
 80159ba:	4628      	mov	r0, r5
 80159bc:	bf18      	it	ne
 80159be:	f04a 0a02 	orrne.w	sl, sl, #2
 80159c2:	1b36      	subs	r6, r6, r4
 80159c4:	f7ff fe22 	bl	801560c <rshift>
 80159c8:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80159cc:	2702      	movs	r7, #2
 80159ce:	f1ba 0f00 	cmp.w	sl, #0
 80159d2:	d048      	beq.n	8015a66 <__gethex+0x3bc>
 80159d4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80159d8:	2b02      	cmp	r3, #2
 80159da:	d015      	beq.n	8015a08 <__gethex+0x35e>
 80159dc:	2b03      	cmp	r3, #3
 80159de:	d017      	beq.n	8015a10 <__gethex+0x366>
 80159e0:	2b01      	cmp	r3, #1
 80159e2:	d109      	bne.n	80159f8 <__gethex+0x34e>
 80159e4:	f01a 0f02 	tst.w	sl, #2
 80159e8:	d006      	beq.n	80159f8 <__gethex+0x34e>
 80159ea:	f8d9 3000 	ldr.w	r3, [r9]
 80159ee:	ea4a 0a03 	orr.w	sl, sl, r3
 80159f2:	f01a 0f01 	tst.w	sl, #1
 80159f6:	d10e      	bne.n	8015a16 <__gethex+0x36c>
 80159f8:	f047 0710 	orr.w	r7, r7, #16
 80159fc:	e033      	b.n	8015a66 <__gethex+0x3bc>
 80159fe:	f04f 0a01 	mov.w	sl, #1
 8015a02:	e7d0      	b.n	80159a6 <__gethex+0x2fc>
 8015a04:	2701      	movs	r7, #1
 8015a06:	e7e2      	b.n	80159ce <__gethex+0x324>
 8015a08:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015a0a:	f1c3 0301 	rsb	r3, r3, #1
 8015a0e:	9315      	str	r3, [sp, #84]	; 0x54
 8015a10:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015a12:	2b00      	cmp	r3, #0
 8015a14:	d0f0      	beq.n	80159f8 <__gethex+0x34e>
 8015a16:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8015a1a:	f105 0314 	add.w	r3, r5, #20
 8015a1e:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8015a22:	eb03 010a 	add.w	r1, r3, sl
 8015a26:	f04f 0c00 	mov.w	ip, #0
 8015a2a:	4618      	mov	r0, r3
 8015a2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8015a30:	f1b2 3fff 	cmp.w	r2, #4294967295
 8015a34:	d01c      	beq.n	8015a70 <__gethex+0x3c6>
 8015a36:	3201      	adds	r2, #1
 8015a38:	6002      	str	r2, [r0, #0]
 8015a3a:	2f02      	cmp	r7, #2
 8015a3c:	f105 0314 	add.w	r3, r5, #20
 8015a40:	d138      	bne.n	8015ab4 <__gethex+0x40a>
 8015a42:	f8d8 2000 	ldr.w	r2, [r8]
 8015a46:	3a01      	subs	r2, #1
 8015a48:	42b2      	cmp	r2, r6
 8015a4a:	d10a      	bne.n	8015a62 <__gethex+0x3b8>
 8015a4c:	1171      	asrs	r1, r6, #5
 8015a4e:	2201      	movs	r2, #1
 8015a50:	f006 061f 	and.w	r6, r6, #31
 8015a54:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015a58:	fa02 f606 	lsl.w	r6, r2, r6
 8015a5c:	421e      	tst	r6, r3
 8015a5e:	bf18      	it	ne
 8015a60:	4617      	movne	r7, r2
 8015a62:	f047 0720 	orr.w	r7, r7, #32
 8015a66:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015a68:	601d      	str	r5, [r3, #0]
 8015a6a:	9b06      	ldr	r3, [sp, #24]
 8015a6c:	601c      	str	r4, [r3, #0]
 8015a6e:	e6a4      	b.n	80157ba <__gethex+0x110>
 8015a70:	4299      	cmp	r1, r3
 8015a72:	f843 cc04 	str.w	ip, [r3, #-4]
 8015a76:	d8d8      	bhi.n	8015a2a <__gethex+0x380>
 8015a78:	68ab      	ldr	r3, [r5, #8]
 8015a7a:	4599      	cmp	r9, r3
 8015a7c:	db12      	blt.n	8015aa4 <__gethex+0x3fa>
 8015a7e:	6869      	ldr	r1, [r5, #4]
 8015a80:	9802      	ldr	r0, [sp, #8]
 8015a82:	3101      	adds	r1, #1
 8015a84:	f000 f99a 	bl	8015dbc <_Balloc>
 8015a88:	692a      	ldr	r2, [r5, #16]
 8015a8a:	3202      	adds	r2, #2
 8015a8c:	f105 010c 	add.w	r1, r5, #12
 8015a90:	4683      	mov	fp, r0
 8015a92:	0092      	lsls	r2, r2, #2
 8015a94:	300c      	adds	r0, #12
 8015a96:	f7fc feab 	bl	80127f0 <memcpy>
 8015a9a:	4629      	mov	r1, r5
 8015a9c:	9802      	ldr	r0, [sp, #8]
 8015a9e:	f000 f9c1 	bl	8015e24 <_Bfree>
 8015aa2:	465d      	mov	r5, fp
 8015aa4:	692b      	ldr	r3, [r5, #16]
 8015aa6:	1c5a      	adds	r2, r3, #1
 8015aa8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8015aac:	612a      	str	r2, [r5, #16]
 8015aae:	2201      	movs	r2, #1
 8015ab0:	615a      	str	r2, [r3, #20]
 8015ab2:	e7c2      	b.n	8015a3a <__gethex+0x390>
 8015ab4:	692a      	ldr	r2, [r5, #16]
 8015ab6:	454a      	cmp	r2, r9
 8015ab8:	dd0b      	ble.n	8015ad2 <__gethex+0x428>
 8015aba:	2101      	movs	r1, #1
 8015abc:	4628      	mov	r0, r5
 8015abe:	f7ff fda5 	bl	801560c <rshift>
 8015ac2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015ac6:	3401      	adds	r4, #1
 8015ac8:	42a3      	cmp	r3, r4
 8015aca:	f6ff aed9 	blt.w	8015880 <__gethex+0x1d6>
 8015ace:	2701      	movs	r7, #1
 8015ad0:	e7c7      	b.n	8015a62 <__gethex+0x3b8>
 8015ad2:	f016 061f 	ands.w	r6, r6, #31
 8015ad6:	d0fa      	beq.n	8015ace <__gethex+0x424>
 8015ad8:	449a      	add	sl, r3
 8015ada:	f1c6 0620 	rsb	r6, r6, #32
 8015ade:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8015ae2:	f000 fa2f 	bl	8015f44 <__hi0bits>
 8015ae6:	42b0      	cmp	r0, r6
 8015ae8:	dbe7      	blt.n	8015aba <__gethex+0x410>
 8015aea:	e7f0      	b.n	8015ace <__gethex+0x424>

08015aec <L_shift>:
 8015aec:	f1c2 0208 	rsb	r2, r2, #8
 8015af0:	0092      	lsls	r2, r2, #2
 8015af2:	b570      	push	{r4, r5, r6, lr}
 8015af4:	f1c2 0620 	rsb	r6, r2, #32
 8015af8:	6843      	ldr	r3, [r0, #4]
 8015afa:	6804      	ldr	r4, [r0, #0]
 8015afc:	fa03 f506 	lsl.w	r5, r3, r6
 8015b00:	432c      	orrs	r4, r5
 8015b02:	40d3      	lsrs	r3, r2
 8015b04:	6004      	str	r4, [r0, #0]
 8015b06:	f840 3f04 	str.w	r3, [r0, #4]!
 8015b0a:	4288      	cmp	r0, r1
 8015b0c:	d3f4      	bcc.n	8015af8 <L_shift+0xc>
 8015b0e:	bd70      	pop	{r4, r5, r6, pc}

08015b10 <__match>:
 8015b10:	b530      	push	{r4, r5, lr}
 8015b12:	6803      	ldr	r3, [r0, #0]
 8015b14:	3301      	adds	r3, #1
 8015b16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015b1a:	b914      	cbnz	r4, 8015b22 <__match+0x12>
 8015b1c:	6003      	str	r3, [r0, #0]
 8015b1e:	2001      	movs	r0, #1
 8015b20:	bd30      	pop	{r4, r5, pc}
 8015b22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015b26:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8015b2a:	2d19      	cmp	r5, #25
 8015b2c:	bf98      	it	ls
 8015b2e:	3220      	addls	r2, #32
 8015b30:	42a2      	cmp	r2, r4
 8015b32:	d0f0      	beq.n	8015b16 <__match+0x6>
 8015b34:	2000      	movs	r0, #0
 8015b36:	e7f3      	b.n	8015b20 <__match+0x10>

08015b38 <__hexnan>:
 8015b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b3c:	680b      	ldr	r3, [r1, #0]
 8015b3e:	6801      	ldr	r1, [r0, #0]
 8015b40:	115f      	asrs	r7, r3, #5
 8015b42:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8015b46:	f013 031f 	ands.w	r3, r3, #31
 8015b4a:	b087      	sub	sp, #28
 8015b4c:	bf18      	it	ne
 8015b4e:	3704      	addne	r7, #4
 8015b50:	2500      	movs	r5, #0
 8015b52:	1f3e      	subs	r6, r7, #4
 8015b54:	4682      	mov	sl, r0
 8015b56:	4690      	mov	r8, r2
 8015b58:	9301      	str	r3, [sp, #4]
 8015b5a:	f847 5c04 	str.w	r5, [r7, #-4]
 8015b5e:	46b1      	mov	r9, r6
 8015b60:	4634      	mov	r4, r6
 8015b62:	9502      	str	r5, [sp, #8]
 8015b64:	46ab      	mov	fp, r5
 8015b66:	784a      	ldrb	r2, [r1, #1]
 8015b68:	1c4b      	adds	r3, r1, #1
 8015b6a:	9303      	str	r3, [sp, #12]
 8015b6c:	b342      	cbz	r2, 8015bc0 <__hexnan+0x88>
 8015b6e:	4610      	mov	r0, r2
 8015b70:	9105      	str	r1, [sp, #20]
 8015b72:	9204      	str	r2, [sp, #16]
 8015b74:	f7ff fd84 	bl	8015680 <__hexdig_fun>
 8015b78:	2800      	cmp	r0, #0
 8015b7a:	d143      	bne.n	8015c04 <__hexnan+0xcc>
 8015b7c:	9a04      	ldr	r2, [sp, #16]
 8015b7e:	9905      	ldr	r1, [sp, #20]
 8015b80:	2a20      	cmp	r2, #32
 8015b82:	d818      	bhi.n	8015bb6 <__hexnan+0x7e>
 8015b84:	9b02      	ldr	r3, [sp, #8]
 8015b86:	459b      	cmp	fp, r3
 8015b88:	dd13      	ble.n	8015bb2 <__hexnan+0x7a>
 8015b8a:	454c      	cmp	r4, r9
 8015b8c:	d206      	bcs.n	8015b9c <__hexnan+0x64>
 8015b8e:	2d07      	cmp	r5, #7
 8015b90:	dc04      	bgt.n	8015b9c <__hexnan+0x64>
 8015b92:	462a      	mov	r2, r5
 8015b94:	4649      	mov	r1, r9
 8015b96:	4620      	mov	r0, r4
 8015b98:	f7ff ffa8 	bl	8015aec <L_shift>
 8015b9c:	4544      	cmp	r4, r8
 8015b9e:	d944      	bls.n	8015c2a <__hexnan+0xf2>
 8015ba0:	2300      	movs	r3, #0
 8015ba2:	f1a4 0904 	sub.w	r9, r4, #4
 8015ba6:	f844 3c04 	str.w	r3, [r4, #-4]
 8015baa:	f8cd b008 	str.w	fp, [sp, #8]
 8015bae:	464c      	mov	r4, r9
 8015bb0:	461d      	mov	r5, r3
 8015bb2:	9903      	ldr	r1, [sp, #12]
 8015bb4:	e7d7      	b.n	8015b66 <__hexnan+0x2e>
 8015bb6:	2a29      	cmp	r2, #41	; 0x29
 8015bb8:	d14a      	bne.n	8015c50 <__hexnan+0x118>
 8015bba:	3102      	adds	r1, #2
 8015bbc:	f8ca 1000 	str.w	r1, [sl]
 8015bc0:	f1bb 0f00 	cmp.w	fp, #0
 8015bc4:	d044      	beq.n	8015c50 <__hexnan+0x118>
 8015bc6:	454c      	cmp	r4, r9
 8015bc8:	d206      	bcs.n	8015bd8 <__hexnan+0xa0>
 8015bca:	2d07      	cmp	r5, #7
 8015bcc:	dc04      	bgt.n	8015bd8 <__hexnan+0xa0>
 8015bce:	462a      	mov	r2, r5
 8015bd0:	4649      	mov	r1, r9
 8015bd2:	4620      	mov	r0, r4
 8015bd4:	f7ff ff8a 	bl	8015aec <L_shift>
 8015bd8:	4544      	cmp	r4, r8
 8015bda:	d928      	bls.n	8015c2e <__hexnan+0xf6>
 8015bdc:	4643      	mov	r3, r8
 8015bde:	f854 2b04 	ldr.w	r2, [r4], #4
 8015be2:	f843 2b04 	str.w	r2, [r3], #4
 8015be6:	42a6      	cmp	r6, r4
 8015be8:	d2f9      	bcs.n	8015bde <__hexnan+0xa6>
 8015bea:	2200      	movs	r2, #0
 8015bec:	f843 2b04 	str.w	r2, [r3], #4
 8015bf0:	429e      	cmp	r6, r3
 8015bf2:	d2fb      	bcs.n	8015bec <__hexnan+0xb4>
 8015bf4:	6833      	ldr	r3, [r6, #0]
 8015bf6:	b91b      	cbnz	r3, 8015c00 <__hexnan+0xc8>
 8015bf8:	4546      	cmp	r6, r8
 8015bfa:	d127      	bne.n	8015c4c <__hexnan+0x114>
 8015bfc:	2301      	movs	r3, #1
 8015bfe:	6033      	str	r3, [r6, #0]
 8015c00:	2005      	movs	r0, #5
 8015c02:	e026      	b.n	8015c52 <__hexnan+0x11a>
 8015c04:	3501      	adds	r5, #1
 8015c06:	2d08      	cmp	r5, #8
 8015c08:	f10b 0b01 	add.w	fp, fp, #1
 8015c0c:	dd06      	ble.n	8015c1c <__hexnan+0xe4>
 8015c0e:	4544      	cmp	r4, r8
 8015c10:	d9cf      	bls.n	8015bb2 <__hexnan+0x7a>
 8015c12:	2300      	movs	r3, #0
 8015c14:	f844 3c04 	str.w	r3, [r4, #-4]
 8015c18:	2501      	movs	r5, #1
 8015c1a:	3c04      	subs	r4, #4
 8015c1c:	6822      	ldr	r2, [r4, #0]
 8015c1e:	f000 000f 	and.w	r0, r0, #15
 8015c22:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8015c26:	6020      	str	r0, [r4, #0]
 8015c28:	e7c3      	b.n	8015bb2 <__hexnan+0x7a>
 8015c2a:	2508      	movs	r5, #8
 8015c2c:	e7c1      	b.n	8015bb2 <__hexnan+0x7a>
 8015c2e:	9b01      	ldr	r3, [sp, #4]
 8015c30:	2b00      	cmp	r3, #0
 8015c32:	d0df      	beq.n	8015bf4 <__hexnan+0xbc>
 8015c34:	f04f 32ff 	mov.w	r2, #4294967295
 8015c38:	f1c3 0320 	rsb	r3, r3, #32
 8015c3c:	fa22 f303 	lsr.w	r3, r2, r3
 8015c40:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8015c44:	401a      	ands	r2, r3
 8015c46:	f847 2c04 	str.w	r2, [r7, #-4]
 8015c4a:	e7d3      	b.n	8015bf4 <__hexnan+0xbc>
 8015c4c:	3e04      	subs	r6, #4
 8015c4e:	e7d1      	b.n	8015bf4 <__hexnan+0xbc>
 8015c50:	2004      	movs	r0, #4
 8015c52:	b007      	add	sp, #28
 8015c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015c58 <__locale_ctype_ptr_l>:
 8015c58:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8015c5c:	4770      	bx	lr
	...

08015c60 <__locale_ctype_ptr>:
 8015c60:	4b04      	ldr	r3, [pc, #16]	; (8015c74 <__locale_ctype_ptr+0x14>)
 8015c62:	4a05      	ldr	r2, [pc, #20]	; (8015c78 <__locale_ctype_ptr+0x18>)
 8015c64:	681b      	ldr	r3, [r3, #0]
 8015c66:	6a1b      	ldr	r3, [r3, #32]
 8015c68:	2b00      	cmp	r3, #0
 8015c6a:	bf08      	it	eq
 8015c6c:	4613      	moveq	r3, r2
 8015c6e:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8015c72:	4770      	bx	lr
 8015c74:	2000000c 	.word	0x2000000c
 8015c78:	20000070 	.word	0x20000070

08015c7c <__localeconv_l>:
 8015c7c:	30f0      	adds	r0, #240	; 0xf0
 8015c7e:	4770      	bx	lr

08015c80 <_localeconv_r>:
 8015c80:	4b04      	ldr	r3, [pc, #16]	; (8015c94 <_localeconv_r+0x14>)
 8015c82:	681b      	ldr	r3, [r3, #0]
 8015c84:	6a18      	ldr	r0, [r3, #32]
 8015c86:	4b04      	ldr	r3, [pc, #16]	; (8015c98 <_localeconv_r+0x18>)
 8015c88:	2800      	cmp	r0, #0
 8015c8a:	bf08      	it	eq
 8015c8c:	4618      	moveq	r0, r3
 8015c8e:	30f0      	adds	r0, #240	; 0xf0
 8015c90:	4770      	bx	lr
 8015c92:	bf00      	nop
 8015c94:	2000000c 	.word	0x2000000c
 8015c98:	20000070 	.word	0x20000070

08015c9c <_lseek_r>:
 8015c9c:	b538      	push	{r3, r4, r5, lr}
 8015c9e:	4c07      	ldr	r4, [pc, #28]	; (8015cbc <_lseek_r+0x20>)
 8015ca0:	4605      	mov	r5, r0
 8015ca2:	4608      	mov	r0, r1
 8015ca4:	4611      	mov	r1, r2
 8015ca6:	2200      	movs	r2, #0
 8015ca8:	6022      	str	r2, [r4, #0]
 8015caa:	461a      	mov	r2, r3
 8015cac:	f7ef fc14 	bl	80054d8 <_lseek>
 8015cb0:	1c43      	adds	r3, r0, #1
 8015cb2:	d102      	bne.n	8015cba <_lseek_r+0x1e>
 8015cb4:	6823      	ldr	r3, [r4, #0]
 8015cb6:	b103      	cbz	r3, 8015cba <_lseek_r+0x1e>
 8015cb8:	602b      	str	r3, [r5, #0]
 8015cba:	bd38      	pop	{r3, r4, r5, pc}
 8015cbc:	2003bdbc 	.word	0x2003bdbc

08015cc0 <__swhatbuf_r>:
 8015cc0:	b570      	push	{r4, r5, r6, lr}
 8015cc2:	460e      	mov	r6, r1
 8015cc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015cc8:	2900      	cmp	r1, #0
 8015cca:	b096      	sub	sp, #88	; 0x58
 8015ccc:	4614      	mov	r4, r2
 8015cce:	461d      	mov	r5, r3
 8015cd0:	da07      	bge.n	8015ce2 <__swhatbuf_r+0x22>
 8015cd2:	2300      	movs	r3, #0
 8015cd4:	602b      	str	r3, [r5, #0]
 8015cd6:	89b3      	ldrh	r3, [r6, #12]
 8015cd8:	061a      	lsls	r2, r3, #24
 8015cda:	d410      	bmi.n	8015cfe <__swhatbuf_r+0x3e>
 8015cdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015ce0:	e00e      	b.n	8015d00 <__swhatbuf_r+0x40>
 8015ce2:	466a      	mov	r2, sp
 8015ce4:	f001 fbee 	bl	80174c4 <_fstat_r>
 8015ce8:	2800      	cmp	r0, #0
 8015cea:	dbf2      	blt.n	8015cd2 <__swhatbuf_r+0x12>
 8015cec:	9a01      	ldr	r2, [sp, #4]
 8015cee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015cf2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015cf6:	425a      	negs	r2, r3
 8015cf8:	415a      	adcs	r2, r3
 8015cfa:	602a      	str	r2, [r5, #0]
 8015cfc:	e7ee      	b.n	8015cdc <__swhatbuf_r+0x1c>
 8015cfe:	2340      	movs	r3, #64	; 0x40
 8015d00:	2000      	movs	r0, #0
 8015d02:	6023      	str	r3, [r4, #0]
 8015d04:	b016      	add	sp, #88	; 0x58
 8015d06:	bd70      	pop	{r4, r5, r6, pc}

08015d08 <__smakebuf_r>:
 8015d08:	898b      	ldrh	r3, [r1, #12]
 8015d0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015d0c:	079d      	lsls	r5, r3, #30
 8015d0e:	4606      	mov	r6, r0
 8015d10:	460c      	mov	r4, r1
 8015d12:	d507      	bpl.n	8015d24 <__smakebuf_r+0x1c>
 8015d14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015d18:	6023      	str	r3, [r4, #0]
 8015d1a:	6123      	str	r3, [r4, #16]
 8015d1c:	2301      	movs	r3, #1
 8015d1e:	6163      	str	r3, [r4, #20]
 8015d20:	b002      	add	sp, #8
 8015d22:	bd70      	pop	{r4, r5, r6, pc}
 8015d24:	ab01      	add	r3, sp, #4
 8015d26:	466a      	mov	r2, sp
 8015d28:	f7ff ffca 	bl	8015cc0 <__swhatbuf_r>
 8015d2c:	9900      	ldr	r1, [sp, #0]
 8015d2e:	4605      	mov	r5, r0
 8015d30:	4630      	mov	r0, r6
 8015d32:	f000 fc9f 	bl	8016674 <_malloc_r>
 8015d36:	b948      	cbnz	r0, 8015d4c <__smakebuf_r+0x44>
 8015d38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015d3c:	059a      	lsls	r2, r3, #22
 8015d3e:	d4ef      	bmi.n	8015d20 <__smakebuf_r+0x18>
 8015d40:	f023 0303 	bic.w	r3, r3, #3
 8015d44:	f043 0302 	orr.w	r3, r3, #2
 8015d48:	81a3      	strh	r3, [r4, #12]
 8015d4a:	e7e3      	b.n	8015d14 <__smakebuf_r+0xc>
 8015d4c:	4b0d      	ldr	r3, [pc, #52]	; (8015d84 <__smakebuf_r+0x7c>)
 8015d4e:	62b3      	str	r3, [r6, #40]	; 0x28
 8015d50:	89a3      	ldrh	r3, [r4, #12]
 8015d52:	6020      	str	r0, [r4, #0]
 8015d54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015d58:	81a3      	strh	r3, [r4, #12]
 8015d5a:	9b00      	ldr	r3, [sp, #0]
 8015d5c:	6163      	str	r3, [r4, #20]
 8015d5e:	9b01      	ldr	r3, [sp, #4]
 8015d60:	6120      	str	r0, [r4, #16]
 8015d62:	b15b      	cbz	r3, 8015d7c <__smakebuf_r+0x74>
 8015d64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015d68:	4630      	mov	r0, r6
 8015d6a:	f001 fbbd 	bl	80174e8 <_isatty_r>
 8015d6e:	b128      	cbz	r0, 8015d7c <__smakebuf_r+0x74>
 8015d70:	89a3      	ldrh	r3, [r4, #12]
 8015d72:	f023 0303 	bic.w	r3, r3, #3
 8015d76:	f043 0301 	orr.w	r3, r3, #1
 8015d7a:	81a3      	strh	r3, [r4, #12]
 8015d7c:	89a3      	ldrh	r3, [r4, #12]
 8015d7e:	431d      	orrs	r5, r3
 8015d80:	81a5      	strh	r5, [r4, #12]
 8015d82:	e7cd      	b.n	8015d20 <__smakebuf_r+0x18>
 8015d84:	080154c1 	.word	0x080154c1

08015d88 <malloc>:
 8015d88:	4b02      	ldr	r3, [pc, #8]	; (8015d94 <malloc+0xc>)
 8015d8a:	4601      	mov	r1, r0
 8015d8c:	6818      	ldr	r0, [r3, #0]
 8015d8e:	f000 bc71 	b.w	8016674 <_malloc_r>
 8015d92:	bf00      	nop
 8015d94:	2000000c 	.word	0x2000000c

08015d98 <__ascii_mbtowc>:
 8015d98:	b082      	sub	sp, #8
 8015d9a:	b901      	cbnz	r1, 8015d9e <__ascii_mbtowc+0x6>
 8015d9c:	a901      	add	r1, sp, #4
 8015d9e:	b142      	cbz	r2, 8015db2 <__ascii_mbtowc+0x1a>
 8015da0:	b14b      	cbz	r3, 8015db6 <__ascii_mbtowc+0x1e>
 8015da2:	7813      	ldrb	r3, [r2, #0]
 8015da4:	600b      	str	r3, [r1, #0]
 8015da6:	7812      	ldrb	r2, [r2, #0]
 8015da8:	1c10      	adds	r0, r2, #0
 8015daa:	bf18      	it	ne
 8015dac:	2001      	movne	r0, #1
 8015dae:	b002      	add	sp, #8
 8015db0:	4770      	bx	lr
 8015db2:	4610      	mov	r0, r2
 8015db4:	e7fb      	b.n	8015dae <__ascii_mbtowc+0x16>
 8015db6:	f06f 0001 	mvn.w	r0, #1
 8015dba:	e7f8      	b.n	8015dae <__ascii_mbtowc+0x16>

08015dbc <_Balloc>:
 8015dbc:	b570      	push	{r4, r5, r6, lr}
 8015dbe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8015dc0:	4604      	mov	r4, r0
 8015dc2:	460e      	mov	r6, r1
 8015dc4:	b93d      	cbnz	r5, 8015dd6 <_Balloc+0x1a>
 8015dc6:	2010      	movs	r0, #16
 8015dc8:	f7ff ffde 	bl	8015d88 <malloc>
 8015dcc:	6260      	str	r0, [r4, #36]	; 0x24
 8015dce:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8015dd2:	6005      	str	r5, [r0, #0]
 8015dd4:	60c5      	str	r5, [r0, #12]
 8015dd6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8015dd8:	68eb      	ldr	r3, [r5, #12]
 8015dda:	b183      	cbz	r3, 8015dfe <_Balloc+0x42>
 8015ddc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015dde:	68db      	ldr	r3, [r3, #12]
 8015de0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8015de4:	b9b8      	cbnz	r0, 8015e16 <_Balloc+0x5a>
 8015de6:	2101      	movs	r1, #1
 8015de8:	fa01 f506 	lsl.w	r5, r1, r6
 8015dec:	1d6a      	adds	r2, r5, #5
 8015dee:	0092      	lsls	r2, r2, #2
 8015df0:	4620      	mov	r0, r4
 8015df2:	f000 fbe2 	bl	80165ba <_calloc_r>
 8015df6:	b160      	cbz	r0, 8015e12 <_Balloc+0x56>
 8015df8:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8015dfc:	e00e      	b.n	8015e1c <_Balloc+0x60>
 8015dfe:	2221      	movs	r2, #33	; 0x21
 8015e00:	2104      	movs	r1, #4
 8015e02:	4620      	mov	r0, r4
 8015e04:	f000 fbd9 	bl	80165ba <_calloc_r>
 8015e08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015e0a:	60e8      	str	r0, [r5, #12]
 8015e0c:	68db      	ldr	r3, [r3, #12]
 8015e0e:	2b00      	cmp	r3, #0
 8015e10:	d1e4      	bne.n	8015ddc <_Balloc+0x20>
 8015e12:	2000      	movs	r0, #0
 8015e14:	bd70      	pop	{r4, r5, r6, pc}
 8015e16:	6802      	ldr	r2, [r0, #0]
 8015e18:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8015e1c:	2300      	movs	r3, #0
 8015e1e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015e22:	e7f7      	b.n	8015e14 <_Balloc+0x58>

08015e24 <_Bfree>:
 8015e24:	b570      	push	{r4, r5, r6, lr}
 8015e26:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8015e28:	4606      	mov	r6, r0
 8015e2a:	460d      	mov	r5, r1
 8015e2c:	b93c      	cbnz	r4, 8015e3e <_Bfree+0x1a>
 8015e2e:	2010      	movs	r0, #16
 8015e30:	f7ff ffaa 	bl	8015d88 <malloc>
 8015e34:	6270      	str	r0, [r6, #36]	; 0x24
 8015e36:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015e3a:	6004      	str	r4, [r0, #0]
 8015e3c:	60c4      	str	r4, [r0, #12]
 8015e3e:	b13d      	cbz	r5, 8015e50 <_Bfree+0x2c>
 8015e40:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8015e42:	686a      	ldr	r2, [r5, #4]
 8015e44:	68db      	ldr	r3, [r3, #12]
 8015e46:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015e4a:	6029      	str	r1, [r5, #0]
 8015e4c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8015e50:	bd70      	pop	{r4, r5, r6, pc}

08015e52 <__multadd>:
 8015e52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e56:	690d      	ldr	r5, [r1, #16]
 8015e58:	461f      	mov	r7, r3
 8015e5a:	4606      	mov	r6, r0
 8015e5c:	460c      	mov	r4, r1
 8015e5e:	f101 0c14 	add.w	ip, r1, #20
 8015e62:	2300      	movs	r3, #0
 8015e64:	f8dc 0000 	ldr.w	r0, [ip]
 8015e68:	b281      	uxth	r1, r0
 8015e6a:	fb02 7101 	mla	r1, r2, r1, r7
 8015e6e:	0c0f      	lsrs	r7, r1, #16
 8015e70:	0c00      	lsrs	r0, r0, #16
 8015e72:	fb02 7000 	mla	r0, r2, r0, r7
 8015e76:	b289      	uxth	r1, r1
 8015e78:	3301      	adds	r3, #1
 8015e7a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8015e7e:	429d      	cmp	r5, r3
 8015e80:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8015e84:	f84c 1b04 	str.w	r1, [ip], #4
 8015e88:	dcec      	bgt.n	8015e64 <__multadd+0x12>
 8015e8a:	b1d7      	cbz	r7, 8015ec2 <__multadd+0x70>
 8015e8c:	68a3      	ldr	r3, [r4, #8]
 8015e8e:	42ab      	cmp	r3, r5
 8015e90:	dc12      	bgt.n	8015eb8 <__multadd+0x66>
 8015e92:	6861      	ldr	r1, [r4, #4]
 8015e94:	4630      	mov	r0, r6
 8015e96:	3101      	adds	r1, #1
 8015e98:	f7ff ff90 	bl	8015dbc <_Balloc>
 8015e9c:	6922      	ldr	r2, [r4, #16]
 8015e9e:	3202      	adds	r2, #2
 8015ea0:	f104 010c 	add.w	r1, r4, #12
 8015ea4:	4680      	mov	r8, r0
 8015ea6:	0092      	lsls	r2, r2, #2
 8015ea8:	300c      	adds	r0, #12
 8015eaa:	f7fc fca1 	bl	80127f0 <memcpy>
 8015eae:	4621      	mov	r1, r4
 8015eb0:	4630      	mov	r0, r6
 8015eb2:	f7ff ffb7 	bl	8015e24 <_Bfree>
 8015eb6:	4644      	mov	r4, r8
 8015eb8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015ebc:	3501      	adds	r5, #1
 8015ebe:	615f      	str	r7, [r3, #20]
 8015ec0:	6125      	str	r5, [r4, #16]
 8015ec2:	4620      	mov	r0, r4
 8015ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015ec8 <__s2b>:
 8015ec8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015ecc:	460c      	mov	r4, r1
 8015ece:	4615      	mov	r5, r2
 8015ed0:	461f      	mov	r7, r3
 8015ed2:	2209      	movs	r2, #9
 8015ed4:	3308      	adds	r3, #8
 8015ed6:	4606      	mov	r6, r0
 8015ed8:	fb93 f3f2 	sdiv	r3, r3, r2
 8015edc:	2100      	movs	r1, #0
 8015ede:	2201      	movs	r2, #1
 8015ee0:	429a      	cmp	r2, r3
 8015ee2:	db20      	blt.n	8015f26 <__s2b+0x5e>
 8015ee4:	4630      	mov	r0, r6
 8015ee6:	f7ff ff69 	bl	8015dbc <_Balloc>
 8015eea:	9b08      	ldr	r3, [sp, #32]
 8015eec:	6143      	str	r3, [r0, #20]
 8015eee:	2d09      	cmp	r5, #9
 8015ef0:	f04f 0301 	mov.w	r3, #1
 8015ef4:	6103      	str	r3, [r0, #16]
 8015ef6:	dd19      	ble.n	8015f2c <__s2b+0x64>
 8015ef8:	f104 0809 	add.w	r8, r4, #9
 8015efc:	46c1      	mov	r9, r8
 8015efe:	442c      	add	r4, r5
 8015f00:	f819 3b01 	ldrb.w	r3, [r9], #1
 8015f04:	4601      	mov	r1, r0
 8015f06:	3b30      	subs	r3, #48	; 0x30
 8015f08:	220a      	movs	r2, #10
 8015f0a:	4630      	mov	r0, r6
 8015f0c:	f7ff ffa1 	bl	8015e52 <__multadd>
 8015f10:	45a1      	cmp	r9, r4
 8015f12:	d1f5      	bne.n	8015f00 <__s2b+0x38>
 8015f14:	eb08 0405 	add.w	r4, r8, r5
 8015f18:	3c08      	subs	r4, #8
 8015f1a:	1b2d      	subs	r5, r5, r4
 8015f1c:	1963      	adds	r3, r4, r5
 8015f1e:	42bb      	cmp	r3, r7
 8015f20:	db07      	blt.n	8015f32 <__s2b+0x6a>
 8015f22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015f26:	0052      	lsls	r2, r2, #1
 8015f28:	3101      	adds	r1, #1
 8015f2a:	e7d9      	b.n	8015ee0 <__s2b+0x18>
 8015f2c:	340a      	adds	r4, #10
 8015f2e:	2509      	movs	r5, #9
 8015f30:	e7f3      	b.n	8015f1a <__s2b+0x52>
 8015f32:	f814 3b01 	ldrb.w	r3, [r4], #1
 8015f36:	4601      	mov	r1, r0
 8015f38:	3b30      	subs	r3, #48	; 0x30
 8015f3a:	220a      	movs	r2, #10
 8015f3c:	4630      	mov	r0, r6
 8015f3e:	f7ff ff88 	bl	8015e52 <__multadd>
 8015f42:	e7eb      	b.n	8015f1c <__s2b+0x54>

08015f44 <__hi0bits>:
 8015f44:	0c02      	lsrs	r2, r0, #16
 8015f46:	0412      	lsls	r2, r2, #16
 8015f48:	4603      	mov	r3, r0
 8015f4a:	b9b2      	cbnz	r2, 8015f7a <__hi0bits+0x36>
 8015f4c:	0403      	lsls	r3, r0, #16
 8015f4e:	2010      	movs	r0, #16
 8015f50:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8015f54:	bf04      	itt	eq
 8015f56:	021b      	lsleq	r3, r3, #8
 8015f58:	3008      	addeq	r0, #8
 8015f5a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8015f5e:	bf04      	itt	eq
 8015f60:	011b      	lsleq	r3, r3, #4
 8015f62:	3004      	addeq	r0, #4
 8015f64:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8015f68:	bf04      	itt	eq
 8015f6a:	009b      	lsleq	r3, r3, #2
 8015f6c:	3002      	addeq	r0, #2
 8015f6e:	2b00      	cmp	r3, #0
 8015f70:	db06      	blt.n	8015f80 <__hi0bits+0x3c>
 8015f72:	005b      	lsls	r3, r3, #1
 8015f74:	d503      	bpl.n	8015f7e <__hi0bits+0x3a>
 8015f76:	3001      	adds	r0, #1
 8015f78:	4770      	bx	lr
 8015f7a:	2000      	movs	r0, #0
 8015f7c:	e7e8      	b.n	8015f50 <__hi0bits+0xc>
 8015f7e:	2020      	movs	r0, #32
 8015f80:	4770      	bx	lr

08015f82 <__lo0bits>:
 8015f82:	6803      	ldr	r3, [r0, #0]
 8015f84:	f013 0207 	ands.w	r2, r3, #7
 8015f88:	4601      	mov	r1, r0
 8015f8a:	d00b      	beq.n	8015fa4 <__lo0bits+0x22>
 8015f8c:	07da      	lsls	r2, r3, #31
 8015f8e:	d423      	bmi.n	8015fd8 <__lo0bits+0x56>
 8015f90:	0798      	lsls	r0, r3, #30
 8015f92:	bf49      	itett	mi
 8015f94:	085b      	lsrmi	r3, r3, #1
 8015f96:	089b      	lsrpl	r3, r3, #2
 8015f98:	2001      	movmi	r0, #1
 8015f9a:	600b      	strmi	r3, [r1, #0]
 8015f9c:	bf5c      	itt	pl
 8015f9e:	600b      	strpl	r3, [r1, #0]
 8015fa0:	2002      	movpl	r0, #2
 8015fa2:	4770      	bx	lr
 8015fa4:	b298      	uxth	r0, r3
 8015fa6:	b9a8      	cbnz	r0, 8015fd4 <__lo0bits+0x52>
 8015fa8:	0c1b      	lsrs	r3, r3, #16
 8015faa:	2010      	movs	r0, #16
 8015fac:	f013 0fff 	tst.w	r3, #255	; 0xff
 8015fb0:	bf04      	itt	eq
 8015fb2:	0a1b      	lsreq	r3, r3, #8
 8015fb4:	3008      	addeq	r0, #8
 8015fb6:	071a      	lsls	r2, r3, #28
 8015fb8:	bf04      	itt	eq
 8015fba:	091b      	lsreq	r3, r3, #4
 8015fbc:	3004      	addeq	r0, #4
 8015fbe:	079a      	lsls	r2, r3, #30
 8015fc0:	bf04      	itt	eq
 8015fc2:	089b      	lsreq	r3, r3, #2
 8015fc4:	3002      	addeq	r0, #2
 8015fc6:	07da      	lsls	r2, r3, #31
 8015fc8:	d402      	bmi.n	8015fd0 <__lo0bits+0x4e>
 8015fca:	085b      	lsrs	r3, r3, #1
 8015fcc:	d006      	beq.n	8015fdc <__lo0bits+0x5a>
 8015fce:	3001      	adds	r0, #1
 8015fd0:	600b      	str	r3, [r1, #0]
 8015fd2:	4770      	bx	lr
 8015fd4:	4610      	mov	r0, r2
 8015fd6:	e7e9      	b.n	8015fac <__lo0bits+0x2a>
 8015fd8:	2000      	movs	r0, #0
 8015fda:	4770      	bx	lr
 8015fdc:	2020      	movs	r0, #32
 8015fde:	4770      	bx	lr

08015fe0 <__i2b>:
 8015fe0:	b510      	push	{r4, lr}
 8015fe2:	460c      	mov	r4, r1
 8015fe4:	2101      	movs	r1, #1
 8015fe6:	f7ff fee9 	bl	8015dbc <_Balloc>
 8015fea:	2201      	movs	r2, #1
 8015fec:	6144      	str	r4, [r0, #20]
 8015fee:	6102      	str	r2, [r0, #16]
 8015ff0:	bd10      	pop	{r4, pc}

08015ff2 <__multiply>:
 8015ff2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ff6:	4614      	mov	r4, r2
 8015ff8:	690a      	ldr	r2, [r1, #16]
 8015ffa:	6923      	ldr	r3, [r4, #16]
 8015ffc:	429a      	cmp	r2, r3
 8015ffe:	bfb8      	it	lt
 8016000:	460b      	movlt	r3, r1
 8016002:	4688      	mov	r8, r1
 8016004:	bfbc      	itt	lt
 8016006:	46a0      	movlt	r8, r4
 8016008:	461c      	movlt	r4, r3
 801600a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801600e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8016012:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016016:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801601a:	eb07 0609 	add.w	r6, r7, r9
 801601e:	42b3      	cmp	r3, r6
 8016020:	bfb8      	it	lt
 8016022:	3101      	addlt	r1, #1
 8016024:	f7ff feca 	bl	8015dbc <_Balloc>
 8016028:	f100 0514 	add.w	r5, r0, #20
 801602c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8016030:	462b      	mov	r3, r5
 8016032:	2200      	movs	r2, #0
 8016034:	4573      	cmp	r3, lr
 8016036:	d316      	bcc.n	8016066 <__multiply+0x74>
 8016038:	f104 0214 	add.w	r2, r4, #20
 801603c:	f108 0114 	add.w	r1, r8, #20
 8016040:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8016044:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8016048:	9300      	str	r3, [sp, #0]
 801604a:	9b00      	ldr	r3, [sp, #0]
 801604c:	9201      	str	r2, [sp, #4]
 801604e:	4293      	cmp	r3, r2
 8016050:	d80c      	bhi.n	801606c <__multiply+0x7a>
 8016052:	2e00      	cmp	r6, #0
 8016054:	dd03      	ble.n	801605e <__multiply+0x6c>
 8016056:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801605a:	2b00      	cmp	r3, #0
 801605c:	d05d      	beq.n	801611a <__multiply+0x128>
 801605e:	6106      	str	r6, [r0, #16]
 8016060:	b003      	add	sp, #12
 8016062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016066:	f843 2b04 	str.w	r2, [r3], #4
 801606a:	e7e3      	b.n	8016034 <__multiply+0x42>
 801606c:	f8b2 b000 	ldrh.w	fp, [r2]
 8016070:	f1bb 0f00 	cmp.w	fp, #0
 8016074:	d023      	beq.n	80160be <__multiply+0xcc>
 8016076:	4689      	mov	r9, r1
 8016078:	46ac      	mov	ip, r5
 801607a:	f04f 0800 	mov.w	r8, #0
 801607e:	f859 4b04 	ldr.w	r4, [r9], #4
 8016082:	f8dc a000 	ldr.w	sl, [ip]
 8016086:	b2a3      	uxth	r3, r4
 8016088:	fa1f fa8a 	uxth.w	sl, sl
 801608c:	fb0b a303 	mla	r3, fp, r3, sl
 8016090:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8016094:	f8dc 4000 	ldr.w	r4, [ip]
 8016098:	4443      	add	r3, r8
 801609a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801609e:	fb0b 840a 	mla	r4, fp, sl, r8
 80160a2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80160a6:	46e2      	mov	sl, ip
 80160a8:	b29b      	uxth	r3, r3
 80160aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80160ae:	454f      	cmp	r7, r9
 80160b0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80160b4:	f84a 3b04 	str.w	r3, [sl], #4
 80160b8:	d82b      	bhi.n	8016112 <__multiply+0x120>
 80160ba:	f8cc 8004 	str.w	r8, [ip, #4]
 80160be:	9b01      	ldr	r3, [sp, #4]
 80160c0:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80160c4:	3204      	adds	r2, #4
 80160c6:	f1ba 0f00 	cmp.w	sl, #0
 80160ca:	d020      	beq.n	801610e <__multiply+0x11c>
 80160cc:	682b      	ldr	r3, [r5, #0]
 80160ce:	4689      	mov	r9, r1
 80160d0:	46a8      	mov	r8, r5
 80160d2:	f04f 0b00 	mov.w	fp, #0
 80160d6:	f8b9 c000 	ldrh.w	ip, [r9]
 80160da:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80160de:	fb0a 440c 	mla	r4, sl, ip, r4
 80160e2:	445c      	add	r4, fp
 80160e4:	46c4      	mov	ip, r8
 80160e6:	b29b      	uxth	r3, r3
 80160e8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80160ec:	f84c 3b04 	str.w	r3, [ip], #4
 80160f0:	f859 3b04 	ldr.w	r3, [r9], #4
 80160f4:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80160f8:	0c1b      	lsrs	r3, r3, #16
 80160fa:	fb0a b303 	mla	r3, sl, r3, fp
 80160fe:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8016102:	454f      	cmp	r7, r9
 8016104:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8016108:	d805      	bhi.n	8016116 <__multiply+0x124>
 801610a:	f8c8 3004 	str.w	r3, [r8, #4]
 801610e:	3504      	adds	r5, #4
 8016110:	e79b      	b.n	801604a <__multiply+0x58>
 8016112:	46d4      	mov	ip, sl
 8016114:	e7b3      	b.n	801607e <__multiply+0x8c>
 8016116:	46e0      	mov	r8, ip
 8016118:	e7dd      	b.n	80160d6 <__multiply+0xe4>
 801611a:	3e01      	subs	r6, #1
 801611c:	e799      	b.n	8016052 <__multiply+0x60>
	...

08016120 <__pow5mult>:
 8016120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016124:	4615      	mov	r5, r2
 8016126:	f012 0203 	ands.w	r2, r2, #3
 801612a:	4606      	mov	r6, r0
 801612c:	460f      	mov	r7, r1
 801612e:	d007      	beq.n	8016140 <__pow5mult+0x20>
 8016130:	3a01      	subs	r2, #1
 8016132:	4c21      	ldr	r4, [pc, #132]	; (80161b8 <__pow5mult+0x98>)
 8016134:	2300      	movs	r3, #0
 8016136:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801613a:	f7ff fe8a 	bl	8015e52 <__multadd>
 801613e:	4607      	mov	r7, r0
 8016140:	10ad      	asrs	r5, r5, #2
 8016142:	d035      	beq.n	80161b0 <__pow5mult+0x90>
 8016144:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8016146:	b93c      	cbnz	r4, 8016158 <__pow5mult+0x38>
 8016148:	2010      	movs	r0, #16
 801614a:	f7ff fe1d 	bl	8015d88 <malloc>
 801614e:	6270      	str	r0, [r6, #36]	; 0x24
 8016150:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016154:	6004      	str	r4, [r0, #0]
 8016156:	60c4      	str	r4, [r0, #12]
 8016158:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801615c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8016160:	b94c      	cbnz	r4, 8016176 <__pow5mult+0x56>
 8016162:	f240 2171 	movw	r1, #625	; 0x271
 8016166:	4630      	mov	r0, r6
 8016168:	f7ff ff3a 	bl	8015fe0 <__i2b>
 801616c:	2300      	movs	r3, #0
 801616e:	f8c8 0008 	str.w	r0, [r8, #8]
 8016172:	4604      	mov	r4, r0
 8016174:	6003      	str	r3, [r0, #0]
 8016176:	f04f 0800 	mov.w	r8, #0
 801617a:	07eb      	lsls	r3, r5, #31
 801617c:	d50a      	bpl.n	8016194 <__pow5mult+0x74>
 801617e:	4639      	mov	r1, r7
 8016180:	4622      	mov	r2, r4
 8016182:	4630      	mov	r0, r6
 8016184:	f7ff ff35 	bl	8015ff2 <__multiply>
 8016188:	4639      	mov	r1, r7
 801618a:	4681      	mov	r9, r0
 801618c:	4630      	mov	r0, r6
 801618e:	f7ff fe49 	bl	8015e24 <_Bfree>
 8016192:	464f      	mov	r7, r9
 8016194:	106d      	asrs	r5, r5, #1
 8016196:	d00b      	beq.n	80161b0 <__pow5mult+0x90>
 8016198:	6820      	ldr	r0, [r4, #0]
 801619a:	b938      	cbnz	r0, 80161ac <__pow5mult+0x8c>
 801619c:	4622      	mov	r2, r4
 801619e:	4621      	mov	r1, r4
 80161a0:	4630      	mov	r0, r6
 80161a2:	f7ff ff26 	bl	8015ff2 <__multiply>
 80161a6:	6020      	str	r0, [r4, #0]
 80161a8:	f8c0 8000 	str.w	r8, [r0]
 80161ac:	4604      	mov	r4, r0
 80161ae:	e7e4      	b.n	801617a <__pow5mult+0x5a>
 80161b0:	4638      	mov	r0, r7
 80161b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80161b6:	bf00      	nop
 80161b8:	08017f28 	.word	0x08017f28

080161bc <__lshift>:
 80161bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80161c0:	460c      	mov	r4, r1
 80161c2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80161c6:	6923      	ldr	r3, [r4, #16]
 80161c8:	6849      	ldr	r1, [r1, #4]
 80161ca:	eb0a 0903 	add.w	r9, sl, r3
 80161ce:	68a3      	ldr	r3, [r4, #8]
 80161d0:	4607      	mov	r7, r0
 80161d2:	4616      	mov	r6, r2
 80161d4:	f109 0501 	add.w	r5, r9, #1
 80161d8:	42ab      	cmp	r3, r5
 80161da:	db32      	blt.n	8016242 <__lshift+0x86>
 80161dc:	4638      	mov	r0, r7
 80161de:	f7ff fded 	bl	8015dbc <_Balloc>
 80161e2:	2300      	movs	r3, #0
 80161e4:	4680      	mov	r8, r0
 80161e6:	f100 0114 	add.w	r1, r0, #20
 80161ea:	461a      	mov	r2, r3
 80161ec:	4553      	cmp	r3, sl
 80161ee:	db2b      	blt.n	8016248 <__lshift+0x8c>
 80161f0:	6920      	ldr	r0, [r4, #16]
 80161f2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80161f6:	f104 0314 	add.w	r3, r4, #20
 80161fa:	f016 021f 	ands.w	r2, r6, #31
 80161fe:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8016202:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8016206:	d025      	beq.n	8016254 <__lshift+0x98>
 8016208:	f1c2 0e20 	rsb	lr, r2, #32
 801620c:	2000      	movs	r0, #0
 801620e:	681e      	ldr	r6, [r3, #0]
 8016210:	468a      	mov	sl, r1
 8016212:	4096      	lsls	r6, r2
 8016214:	4330      	orrs	r0, r6
 8016216:	f84a 0b04 	str.w	r0, [sl], #4
 801621a:	f853 0b04 	ldr.w	r0, [r3], #4
 801621e:	459c      	cmp	ip, r3
 8016220:	fa20 f00e 	lsr.w	r0, r0, lr
 8016224:	d814      	bhi.n	8016250 <__lshift+0x94>
 8016226:	6048      	str	r0, [r1, #4]
 8016228:	b108      	cbz	r0, 801622e <__lshift+0x72>
 801622a:	f109 0502 	add.w	r5, r9, #2
 801622e:	3d01      	subs	r5, #1
 8016230:	4638      	mov	r0, r7
 8016232:	f8c8 5010 	str.w	r5, [r8, #16]
 8016236:	4621      	mov	r1, r4
 8016238:	f7ff fdf4 	bl	8015e24 <_Bfree>
 801623c:	4640      	mov	r0, r8
 801623e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016242:	3101      	adds	r1, #1
 8016244:	005b      	lsls	r3, r3, #1
 8016246:	e7c7      	b.n	80161d8 <__lshift+0x1c>
 8016248:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801624c:	3301      	adds	r3, #1
 801624e:	e7cd      	b.n	80161ec <__lshift+0x30>
 8016250:	4651      	mov	r1, sl
 8016252:	e7dc      	b.n	801620e <__lshift+0x52>
 8016254:	3904      	subs	r1, #4
 8016256:	f853 2b04 	ldr.w	r2, [r3], #4
 801625a:	f841 2f04 	str.w	r2, [r1, #4]!
 801625e:	459c      	cmp	ip, r3
 8016260:	d8f9      	bhi.n	8016256 <__lshift+0x9a>
 8016262:	e7e4      	b.n	801622e <__lshift+0x72>

08016264 <__mcmp>:
 8016264:	6903      	ldr	r3, [r0, #16]
 8016266:	690a      	ldr	r2, [r1, #16]
 8016268:	1a9b      	subs	r3, r3, r2
 801626a:	b530      	push	{r4, r5, lr}
 801626c:	d10c      	bne.n	8016288 <__mcmp+0x24>
 801626e:	0092      	lsls	r2, r2, #2
 8016270:	3014      	adds	r0, #20
 8016272:	3114      	adds	r1, #20
 8016274:	1884      	adds	r4, r0, r2
 8016276:	4411      	add	r1, r2
 8016278:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801627c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8016280:	4295      	cmp	r5, r2
 8016282:	d003      	beq.n	801628c <__mcmp+0x28>
 8016284:	d305      	bcc.n	8016292 <__mcmp+0x2e>
 8016286:	2301      	movs	r3, #1
 8016288:	4618      	mov	r0, r3
 801628a:	bd30      	pop	{r4, r5, pc}
 801628c:	42a0      	cmp	r0, r4
 801628e:	d3f3      	bcc.n	8016278 <__mcmp+0x14>
 8016290:	e7fa      	b.n	8016288 <__mcmp+0x24>
 8016292:	f04f 33ff 	mov.w	r3, #4294967295
 8016296:	e7f7      	b.n	8016288 <__mcmp+0x24>

08016298 <__mdiff>:
 8016298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801629c:	460d      	mov	r5, r1
 801629e:	4607      	mov	r7, r0
 80162a0:	4611      	mov	r1, r2
 80162a2:	4628      	mov	r0, r5
 80162a4:	4614      	mov	r4, r2
 80162a6:	f7ff ffdd 	bl	8016264 <__mcmp>
 80162aa:	1e06      	subs	r6, r0, #0
 80162ac:	d108      	bne.n	80162c0 <__mdiff+0x28>
 80162ae:	4631      	mov	r1, r6
 80162b0:	4638      	mov	r0, r7
 80162b2:	f7ff fd83 	bl	8015dbc <_Balloc>
 80162b6:	2301      	movs	r3, #1
 80162b8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80162bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80162c0:	bfa4      	itt	ge
 80162c2:	4623      	movge	r3, r4
 80162c4:	462c      	movge	r4, r5
 80162c6:	4638      	mov	r0, r7
 80162c8:	6861      	ldr	r1, [r4, #4]
 80162ca:	bfa6      	itte	ge
 80162cc:	461d      	movge	r5, r3
 80162ce:	2600      	movge	r6, #0
 80162d0:	2601      	movlt	r6, #1
 80162d2:	f7ff fd73 	bl	8015dbc <_Balloc>
 80162d6:	692b      	ldr	r3, [r5, #16]
 80162d8:	60c6      	str	r6, [r0, #12]
 80162da:	6926      	ldr	r6, [r4, #16]
 80162dc:	f105 0914 	add.w	r9, r5, #20
 80162e0:	f104 0214 	add.w	r2, r4, #20
 80162e4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80162e8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80162ec:	f100 0514 	add.w	r5, r0, #20
 80162f0:	f04f 0e00 	mov.w	lr, #0
 80162f4:	f852 ab04 	ldr.w	sl, [r2], #4
 80162f8:	f859 4b04 	ldr.w	r4, [r9], #4
 80162fc:	fa1e f18a 	uxtah	r1, lr, sl
 8016300:	b2a3      	uxth	r3, r4
 8016302:	1ac9      	subs	r1, r1, r3
 8016304:	0c23      	lsrs	r3, r4, #16
 8016306:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801630a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801630e:	b289      	uxth	r1, r1
 8016310:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8016314:	45c8      	cmp	r8, r9
 8016316:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801631a:	4694      	mov	ip, r2
 801631c:	f845 3b04 	str.w	r3, [r5], #4
 8016320:	d8e8      	bhi.n	80162f4 <__mdiff+0x5c>
 8016322:	45bc      	cmp	ip, r7
 8016324:	d304      	bcc.n	8016330 <__mdiff+0x98>
 8016326:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801632a:	b183      	cbz	r3, 801634e <__mdiff+0xb6>
 801632c:	6106      	str	r6, [r0, #16]
 801632e:	e7c5      	b.n	80162bc <__mdiff+0x24>
 8016330:	f85c 1b04 	ldr.w	r1, [ip], #4
 8016334:	fa1e f381 	uxtah	r3, lr, r1
 8016338:	141a      	asrs	r2, r3, #16
 801633a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801633e:	b29b      	uxth	r3, r3
 8016340:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016344:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8016348:	f845 3b04 	str.w	r3, [r5], #4
 801634c:	e7e9      	b.n	8016322 <__mdiff+0x8a>
 801634e:	3e01      	subs	r6, #1
 8016350:	e7e9      	b.n	8016326 <__mdiff+0x8e>
	...

08016354 <__ulp>:
 8016354:	4b12      	ldr	r3, [pc, #72]	; (80163a0 <__ulp+0x4c>)
 8016356:	ee10 2a90 	vmov	r2, s1
 801635a:	401a      	ands	r2, r3
 801635c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8016360:	2b00      	cmp	r3, #0
 8016362:	dd04      	ble.n	801636e <__ulp+0x1a>
 8016364:	2000      	movs	r0, #0
 8016366:	4619      	mov	r1, r3
 8016368:	ec41 0b10 	vmov	d0, r0, r1
 801636c:	4770      	bx	lr
 801636e:	425b      	negs	r3, r3
 8016370:	151b      	asrs	r3, r3, #20
 8016372:	2b13      	cmp	r3, #19
 8016374:	f04f 0000 	mov.w	r0, #0
 8016378:	f04f 0100 	mov.w	r1, #0
 801637c:	dc04      	bgt.n	8016388 <__ulp+0x34>
 801637e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8016382:	fa42 f103 	asr.w	r1, r2, r3
 8016386:	e7ef      	b.n	8016368 <__ulp+0x14>
 8016388:	3b14      	subs	r3, #20
 801638a:	2b1e      	cmp	r3, #30
 801638c:	f04f 0201 	mov.w	r2, #1
 8016390:	bfda      	itte	le
 8016392:	f1c3 031f 	rsble	r3, r3, #31
 8016396:	fa02 f303 	lslle.w	r3, r2, r3
 801639a:	4613      	movgt	r3, r2
 801639c:	4618      	mov	r0, r3
 801639e:	e7e3      	b.n	8016368 <__ulp+0x14>
 80163a0:	7ff00000 	.word	0x7ff00000

080163a4 <__b2d>:
 80163a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80163a6:	6905      	ldr	r5, [r0, #16]
 80163a8:	f100 0714 	add.w	r7, r0, #20
 80163ac:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80163b0:	1f2e      	subs	r6, r5, #4
 80163b2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80163b6:	4620      	mov	r0, r4
 80163b8:	f7ff fdc4 	bl	8015f44 <__hi0bits>
 80163bc:	f1c0 0320 	rsb	r3, r0, #32
 80163c0:	280a      	cmp	r0, #10
 80163c2:	600b      	str	r3, [r1, #0]
 80163c4:	f8df c074 	ldr.w	ip, [pc, #116]	; 801643c <__b2d+0x98>
 80163c8:	dc14      	bgt.n	80163f4 <__b2d+0x50>
 80163ca:	f1c0 0e0b 	rsb	lr, r0, #11
 80163ce:	fa24 f10e 	lsr.w	r1, r4, lr
 80163d2:	42b7      	cmp	r7, r6
 80163d4:	ea41 030c 	orr.w	r3, r1, ip
 80163d8:	bf34      	ite	cc
 80163da:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80163de:	2100      	movcs	r1, #0
 80163e0:	3015      	adds	r0, #21
 80163e2:	fa04 f000 	lsl.w	r0, r4, r0
 80163e6:	fa21 f10e 	lsr.w	r1, r1, lr
 80163ea:	ea40 0201 	orr.w	r2, r0, r1
 80163ee:	ec43 2b10 	vmov	d0, r2, r3
 80163f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80163f4:	42b7      	cmp	r7, r6
 80163f6:	bf3a      	itte	cc
 80163f8:	f1a5 0608 	subcc.w	r6, r5, #8
 80163fc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8016400:	2100      	movcs	r1, #0
 8016402:	380b      	subs	r0, #11
 8016404:	d015      	beq.n	8016432 <__b2d+0x8e>
 8016406:	4084      	lsls	r4, r0
 8016408:	f1c0 0520 	rsb	r5, r0, #32
 801640c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8016410:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8016414:	42be      	cmp	r6, r7
 8016416:	fa21 fc05 	lsr.w	ip, r1, r5
 801641a:	ea44 030c 	orr.w	r3, r4, ip
 801641e:	bf8c      	ite	hi
 8016420:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8016424:	2400      	movls	r4, #0
 8016426:	fa01 f000 	lsl.w	r0, r1, r0
 801642a:	40ec      	lsrs	r4, r5
 801642c:	ea40 0204 	orr.w	r2, r0, r4
 8016430:	e7dd      	b.n	80163ee <__b2d+0x4a>
 8016432:	ea44 030c 	orr.w	r3, r4, ip
 8016436:	460a      	mov	r2, r1
 8016438:	e7d9      	b.n	80163ee <__b2d+0x4a>
 801643a:	bf00      	nop
 801643c:	3ff00000 	.word	0x3ff00000

08016440 <__d2b>:
 8016440:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016444:	460e      	mov	r6, r1
 8016446:	2101      	movs	r1, #1
 8016448:	ec59 8b10 	vmov	r8, r9, d0
 801644c:	4615      	mov	r5, r2
 801644e:	f7ff fcb5 	bl	8015dbc <_Balloc>
 8016452:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8016456:	4607      	mov	r7, r0
 8016458:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801645c:	bb34      	cbnz	r4, 80164ac <__d2b+0x6c>
 801645e:	9301      	str	r3, [sp, #4]
 8016460:	f1b8 0300 	subs.w	r3, r8, #0
 8016464:	d027      	beq.n	80164b6 <__d2b+0x76>
 8016466:	a802      	add	r0, sp, #8
 8016468:	f840 3d08 	str.w	r3, [r0, #-8]!
 801646c:	f7ff fd89 	bl	8015f82 <__lo0bits>
 8016470:	9900      	ldr	r1, [sp, #0]
 8016472:	b1f0      	cbz	r0, 80164b2 <__d2b+0x72>
 8016474:	9a01      	ldr	r2, [sp, #4]
 8016476:	f1c0 0320 	rsb	r3, r0, #32
 801647a:	fa02 f303 	lsl.w	r3, r2, r3
 801647e:	430b      	orrs	r3, r1
 8016480:	40c2      	lsrs	r2, r0
 8016482:	617b      	str	r3, [r7, #20]
 8016484:	9201      	str	r2, [sp, #4]
 8016486:	9b01      	ldr	r3, [sp, #4]
 8016488:	61bb      	str	r3, [r7, #24]
 801648a:	2b00      	cmp	r3, #0
 801648c:	bf14      	ite	ne
 801648e:	2102      	movne	r1, #2
 8016490:	2101      	moveq	r1, #1
 8016492:	6139      	str	r1, [r7, #16]
 8016494:	b1c4      	cbz	r4, 80164c8 <__d2b+0x88>
 8016496:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801649a:	4404      	add	r4, r0
 801649c:	6034      	str	r4, [r6, #0]
 801649e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80164a2:	6028      	str	r0, [r5, #0]
 80164a4:	4638      	mov	r0, r7
 80164a6:	b003      	add	sp, #12
 80164a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80164ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80164b0:	e7d5      	b.n	801645e <__d2b+0x1e>
 80164b2:	6179      	str	r1, [r7, #20]
 80164b4:	e7e7      	b.n	8016486 <__d2b+0x46>
 80164b6:	a801      	add	r0, sp, #4
 80164b8:	f7ff fd63 	bl	8015f82 <__lo0bits>
 80164bc:	9b01      	ldr	r3, [sp, #4]
 80164be:	617b      	str	r3, [r7, #20]
 80164c0:	2101      	movs	r1, #1
 80164c2:	6139      	str	r1, [r7, #16]
 80164c4:	3020      	adds	r0, #32
 80164c6:	e7e5      	b.n	8016494 <__d2b+0x54>
 80164c8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80164cc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80164d0:	6030      	str	r0, [r6, #0]
 80164d2:	6918      	ldr	r0, [r3, #16]
 80164d4:	f7ff fd36 	bl	8015f44 <__hi0bits>
 80164d8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80164dc:	e7e1      	b.n	80164a2 <__d2b+0x62>

080164de <__ratio>:
 80164de:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80164e2:	4688      	mov	r8, r1
 80164e4:	4669      	mov	r1, sp
 80164e6:	4681      	mov	r9, r0
 80164e8:	f7ff ff5c 	bl	80163a4 <__b2d>
 80164ec:	a901      	add	r1, sp, #4
 80164ee:	4640      	mov	r0, r8
 80164f0:	ec57 6b10 	vmov	r6, r7, d0
 80164f4:	f7ff ff56 	bl	80163a4 <__b2d>
 80164f8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80164fc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8016500:	eba3 0c02 	sub.w	ip, r3, r2
 8016504:	e9dd 3200 	ldrd	r3, r2, [sp]
 8016508:	1a9b      	subs	r3, r3, r2
 801650a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801650e:	ec5b ab10 	vmov	sl, fp, d0
 8016512:	2b00      	cmp	r3, #0
 8016514:	bfce      	itee	gt
 8016516:	463a      	movgt	r2, r7
 8016518:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801651c:	465a      	movle	r2, fp
 801651e:	4659      	mov	r1, fp
 8016520:	463d      	mov	r5, r7
 8016522:	bfd4      	ite	le
 8016524:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8016528:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 801652c:	4630      	mov	r0, r6
 801652e:	ee10 2a10 	vmov	r2, s0
 8016532:	460b      	mov	r3, r1
 8016534:	4629      	mov	r1, r5
 8016536:	f7ea f9a1 	bl	800087c <__aeabi_ddiv>
 801653a:	ec41 0b10 	vmov	d0, r0, r1
 801653e:	b003      	add	sp, #12
 8016540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016544 <__copybits>:
 8016544:	3901      	subs	r1, #1
 8016546:	b510      	push	{r4, lr}
 8016548:	1149      	asrs	r1, r1, #5
 801654a:	6914      	ldr	r4, [r2, #16]
 801654c:	3101      	adds	r1, #1
 801654e:	f102 0314 	add.w	r3, r2, #20
 8016552:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8016556:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801655a:	42a3      	cmp	r3, r4
 801655c:	4602      	mov	r2, r0
 801655e:	d303      	bcc.n	8016568 <__copybits+0x24>
 8016560:	2300      	movs	r3, #0
 8016562:	428a      	cmp	r2, r1
 8016564:	d305      	bcc.n	8016572 <__copybits+0x2e>
 8016566:	bd10      	pop	{r4, pc}
 8016568:	f853 2b04 	ldr.w	r2, [r3], #4
 801656c:	f840 2b04 	str.w	r2, [r0], #4
 8016570:	e7f3      	b.n	801655a <__copybits+0x16>
 8016572:	f842 3b04 	str.w	r3, [r2], #4
 8016576:	e7f4      	b.n	8016562 <__copybits+0x1e>

08016578 <__any_on>:
 8016578:	f100 0214 	add.w	r2, r0, #20
 801657c:	6900      	ldr	r0, [r0, #16]
 801657e:	114b      	asrs	r3, r1, #5
 8016580:	4298      	cmp	r0, r3
 8016582:	b510      	push	{r4, lr}
 8016584:	db11      	blt.n	80165aa <__any_on+0x32>
 8016586:	dd0a      	ble.n	801659e <__any_on+0x26>
 8016588:	f011 011f 	ands.w	r1, r1, #31
 801658c:	d007      	beq.n	801659e <__any_on+0x26>
 801658e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8016592:	fa24 f001 	lsr.w	r0, r4, r1
 8016596:	fa00 f101 	lsl.w	r1, r0, r1
 801659a:	428c      	cmp	r4, r1
 801659c:	d10b      	bne.n	80165b6 <__any_on+0x3e>
 801659e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80165a2:	4293      	cmp	r3, r2
 80165a4:	d803      	bhi.n	80165ae <__any_on+0x36>
 80165a6:	2000      	movs	r0, #0
 80165a8:	bd10      	pop	{r4, pc}
 80165aa:	4603      	mov	r3, r0
 80165ac:	e7f7      	b.n	801659e <__any_on+0x26>
 80165ae:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80165b2:	2900      	cmp	r1, #0
 80165b4:	d0f5      	beq.n	80165a2 <__any_on+0x2a>
 80165b6:	2001      	movs	r0, #1
 80165b8:	e7f6      	b.n	80165a8 <__any_on+0x30>

080165ba <_calloc_r>:
 80165ba:	b538      	push	{r3, r4, r5, lr}
 80165bc:	fb02 f401 	mul.w	r4, r2, r1
 80165c0:	4621      	mov	r1, r4
 80165c2:	f000 f857 	bl	8016674 <_malloc_r>
 80165c6:	4605      	mov	r5, r0
 80165c8:	b118      	cbz	r0, 80165d2 <_calloc_r+0x18>
 80165ca:	4622      	mov	r2, r4
 80165cc:	2100      	movs	r1, #0
 80165ce:	f7fc f91a 	bl	8012806 <memset>
 80165d2:	4628      	mov	r0, r5
 80165d4:	bd38      	pop	{r3, r4, r5, pc}
	...

080165d8 <_free_r>:
 80165d8:	b538      	push	{r3, r4, r5, lr}
 80165da:	4605      	mov	r5, r0
 80165dc:	2900      	cmp	r1, #0
 80165de:	d045      	beq.n	801666c <_free_r+0x94>
 80165e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80165e4:	1f0c      	subs	r4, r1, #4
 80165e6:	2b00      	cmp	r3, #0
 80165e8:	bfb8      	it	lt
 80165ea:	18e4      	addlt	r4, r4, r3
 80165ec:	f000 ffa5 	bl	801753a <__malloc_lock>
 80165f0:	4a1f      	ldr	r2, [pc, #124]	; (8016670 <_free_r+0x98>)
 80165f2:	6813      	ldr	r3, [r2, #0]
 80165f4:	4610      	mov	r0, r2
 80165f6:	b933      	cbnz	r3, 8016606 <_free_r+0x2e>
 80165f8:	6063      	str	r3, [r4, #4]
 80165fa:	6014      	str	r4, [r2, #0]
 80165fc:	4628      	mov	r0, r5
 80165fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016602:	f000 bf9b 	b.w	801753c <__malloc_unlock>
 8016606:	42a3      	cmp	r3, r4
 8016608:	d90c      	bls.n	8016624 <_free_r+0x4c>
 801660a:	6821      	ldr	r1, [r4, #0]
 801660c:	1862      	adds	r2, r4, r1
 801660e:	4293      	cmp	r3, r2
 8016610:	bf04      	itt	eq
 8016612:	681a      	ldreq	r2, [r3, #0]
 8016614:	685b      	ldreq	r3, [r3, #4]
 8016616:	6063      	str	r3, [r4, #4]
 8016618:	bf04      	itt	eq
 801661a:	1852      	addeq	r2, r2, r1
 801661c:	6022      	streq	r2, [r4, #0]
 801661e:	6004      	str	r4, [r0, #0]
 8016620:	e7ec      	b.n	80165fc <_free_r+0x24>
 8016622:	4613      	mov	r3, r2
 8016624:	685a      	ldr	r2, [r3, #4]
 8016626:	b10a      	cbz	r2, 801662c <_free_r+0x54>
 8016628:	42a2      	cmp	r2, r4
 801662a:	d9fa      	bls.n	8016622 <_free_r+0x4a>
 801662c:	6819      	ldr	r1, [r3, #0]
 801662e:	1858      	adds	r0, r3, r1
 8016630:	42a0      	cmp	r0, r4
 8016632:	d10b      	bne.n	801664c <_free_r+0x74>
 8016634:	6820      	ldr	r0, [r4, #0]
 8016636:	4401      	add	r1, r0
 8016638:	1858      	adds	r0, r3, r1
 801663a:	4282      	cmp	r2, r0
 801663c:	6019      	str	r1, [r3, #0]
 801663e:	d1dd      	bne.n	80165fc <_free_r+0x24>
 8016640:	6810      	ldr	r0, [r2, #0]
 8016642:	6852      	ldr	r2, [r2, #4]
 8016644:	605a      	str	r2, [r3, #4]
 8016646:	4401      	add	r1, r0
 8016648:	6019      	str	r1, [r3, #0]
 801664a:	e7d7      	b.n	80165fc <_free_r+0x24>
 801664c:	d902      	bls.n	8016654 <_free_r+0x7c>
 801664e:	230c      	movs	r3, #12
 8016650:	602b      	str	r3, [r5, #0]
 8016652:	e7d3      	b.n	80165fc <_free_r+0x24>
 8016654:	6820      	ldr	r0, [r4, #0]
 8016656:	1821      	adds	r1, r4, r0
 8016658:	428a      	cmp	r2, r1
 801665a:	bf04      	itt	eq
 801665c:	6811      	ldreq	r1, [r2, #0]
 801665e:	6852      	ldreq	r2, [r2, #4]
 8016660:	6062      	str	r2, [r4, #4]
 8016662:	bf04      	itt	eq
 8016664:	1809      	addeq	r1, r1, r0
 8016666:	6021      	streq	r1, [r4, #0]
 8016668:	605c      	str	r4, [r3, #4]
 801666a:	e7c7      	b.n	80165fc <_free_r+0x24>
 801666c:	bd38      	pop	{r3, r4, r5, pc}
 801666e:	bf00      	nop
 8016670:	20037420 	.word	0x20037420

08016674 <_malloc_r>:
 8016674:	b570      	push	{r4, r5, r6, lr}
 8016676:	1ccd      	adds	r5, r1, #3
 8016678:	f025 0503 	bic.w	r5, r5, #3
 801667c:	3508      	adds	r5, #8
 801667e:	2d0c      	cmp	r5, #12
 8016680:	bf38      	it	cc
 8016682:	250c      	movcc	r5, #12
 8016684:	2d00      	cmp	r5, #0
 8016686:	4606      	mov	r6, r0
 8016688:	db01      	blt.n	801668e <_malloc_r+0x1a>
 801668a:	42a9      	cmp	r1, r5
 801668c:	d903      	bls.n	8016696 <_malloc_r+0x22>
 801668e:	230c      	movs	r3, #12
 8016690:	6033      	str	r3, [r6, #0]
 8016692:	2000      	movs	r0, #0
 8016694:	bd70      	pop	{r4, r5, r6, pc}
 8016696:	f000 ff50 	bl	801753a <__malloc_lock>
 801669a:	4a21      	ldr	r2, [pc, #132]	; (8016720 <_malloc_r+0xac>)
 801669c:	6814      	ldr	r4, [r2, #0]
 801669e:	4621      	mov	r1, r4
 80166a0:	b991      	cbnz	r1, 80166c8 <_malloc_r+0x54>
 80166a2:	4c20      	ldr	r4, [pc, #128]	; (8016724 <_malloc_r+0xb0>)
 80166a4:	6823      	ldr	r3, [r4, #0]
 80166a6:	b91b      	cbnz	r3, 80166b0 <_malloc_r+0x3c>
 80166a8:	4630      	mov	r0, r6
 80166aa:	f000 fde3 	bl	8017274 <_sbrk_r>
 80166ae:	6020      	str	r0, [r4, #0]
 80166b0:	4629      	mov	r1, r5
 80166b2:	4630      	mov	r0, r6
 80166b4:	f000 fdde 	bl	8017274 <_sbrk_r>
 80166b8:	1c43      	adds	r3, r0, #1
 80166ba:	d124      	bne.n	8016706 <_malloc_r+0x92>
 80166bc:	230c      	movs	r3, #12
 80166be:	6033      	str	r3, [r6, #0]
 80166c0:	4630      	mov	r0, r6
 80166c2:	f000 ff3b 	bl	801753c <__malloc_unlock>
 80166c6:	e7e4      	b.n	8016692 <_malloc_r+0x1e>
 80166c8:	680b      	ldr	r3, [r1, #0]
 80166ca:	1b5b      	subs	r3, r3, r5
 80166cc:	d418      	bmi.n	8016700 <_malloc_r+0x8c>
 80166ce:	2b0b      	cmp	r3, #11
 80166d0:	d90f      	bls.n	80166f2 <_malloc_r+0x7e>
 80166d2:	600b      	str	r3, [r1, #0]
 80166d4:	50cd      	str	r5, [r1, r3]
 80166d6:	18cc      	adds	r4, r1, r3
 80166d8:	4630      	mov	r0, r6
 80166da:	f000 ff2f 	bl	801753c <__malloc_unlock>
 80166de:	f104 000b 	add.w	r0, r4, #11
 80166e2:	1d23      	adds	r3, r4, #4
 80166e4:	f020 0007 	bic.w	r0, r0, #7
 80166e8:	1ac3      	subs	r3, r0, r3
 80166ea:	d0d3      	beq.n	8016694 <_malloc_r+0x20>
 80166ec:	425a      	negs	r2, r3
 80166ee:	50e2      	str	r2, [r4, r3]
 80166f0:	e7d0      	b.n	8016694 <_malloc_r+0x20>
 80166f2:	428c      	cmp	r4, r1
 80166f4:	684b      	ldr	r3, [r1, #4]
 80166f6:	bf16      	itet	ne
 80166f8:	6063      	strne	r3, [r4, #4]
 80166fa:	6013      	streq	r3, [r2, #0]
 80166fc:	460c      	movne	r4, r1
 80166fe:	e7eb      	b.n	80166d8 <_malloc_r+0x64>
 8016700:	460c      	mov	r4, r1
 8016702:	6849      	ldr	r1, [r1, #4]
 8016704:	e7cc      	b.n	80166a0 <_malloc_r+0x2c>
 8016706:	1cc4      	adds	r4, r0, #3
 8016708:	f024 0403 	bic.w	r4, r4, #3
 801670c:	42a0      	cmp	r0, r4
 801670e:	d005      	beq.n	801671c <_malloc_r+0xa8>
 8016710:	1a21      	subs	r1, r4, r0
 8016712:	4630      	mov	r0, r6
 8016714:	f000 fdae 	bl	8017274 <_sbrk_r>
 8016718:	3001      	adds	r0, #1
 801671a:	d0cf      	beq.n	80166bc <_malloc_r+0x48>
 801671c:	6025      	str	r5, [r4, #0]
 801671e:	e7db      	b.n	80166d8 <_malloc_r+0x64>
 8016720:	20037420 	.word	0x20037420
 8016724:	20037424 	.word	0x20037424

08016728 <__ssputs_r>:
 8016728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801672c:	688e      	ldr	r6, [r1, #8]
 801672e:	429e      	cmp	r6, r3
 8016730:	4682      	mov	sl, r0
 8016732:	460c      	mov	r4, r1
 8016734:	4690      	mov	r8, r2
 8016736:	4699      	mov	r9, r3
 8016738:	d837      	bhi.n	80167aa <__ssputs_r+0x82>
 801673a:	898a      	ldrh	r2, [r1, #12]
 801673c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016740:	d031      	beq.n	80167a6 <__ssputs_r+0x7e>
 8016742:	6825      	ldr	r5, [r4, #0]
 8016744:	6909      	ldr	r1, [r1, #16]
 8016746:	1a6f      	subs	r7, r5, r1
 8016748:	6965      	ldr	r5, [r4, #20]
 801674a:	2302      	movs	r3, #2
 801674c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016750:	fb95 f5f3 	sdiv	r5, r5, r3
 8016754:	f109 0301 	add.w	r3, r9, #1
 8016758:	443b      	add	r3, r7
 801675a:	429d      	cmp	r5, r3
 801675c:	bf38      	it	cc
 801675e:	461d      	movcc	r5, r3
 8016760:	0553      	lsls	r3, r2, #21
 8016762:	d530      	bpl.n	80167c6 <__ssputs_r+0x9e>
 8016764:	4629      	mov	r1, r5
 8016766:	f7ff ff85 	bl	8016674 <_malloc_r>
 801676a:	4606      	mov	r6, r0
 801676c:	b950      	cbnz	r0, 8016784 <__ssputs_r+0x5c>
 801676e:	230c      	movs	r3, #12
 8016770:	f8ca 3000 	str.w	r3, [sl]
 8016774:	89a3      	ldrh	r3, [r4, #12]
 8016776:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801677a:	81a3      	strh	r3, [r4, #12]
 801677c:	f04f 30ff 	mov.w	r0, #4294967295
 8016780:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016784:	463a      	mov	r2, r7
 8016786:	6921      	ldr	r1, [r4, #16]
 8016788:	f7fc f832 	bl	80127f0 <memcpy>
 801678c:	89a3      	ldrh	r3, [r4, #12]
 801678e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016792:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016796:	81a3      	strh	r3, [r4, #12]
 8016798:	6126      	str	r6, [r4, #16]
 801679a:	6165      	str	r5, [r4, #20]
 801679c:	443e      	add	r6, r7
 801679e:	1bed      	subs	r5, r5, r7
 80167a0:	6026      	str	r6, [r4, #0]
 80167a2:	60a5      	str	r5, [r4, #8]
 80167a4:	464e      	mov	r6, r9
 80167a6:	454e      	cmp	r6, r9
 80167a8:	d900      	bls.n	80167ac <__ssputs_r+0x84>
 80167aa:	464e      	mov	r6, r9
 80167ac:	4632      	mov	r2, r6
 80167ae:	4641      	mov	r1, r8
 80167b0:	6820      	ldr	r0, [r4, #0]
 80167b2:	f000 fea9 	bl	8017508 <memmove>
 80167b6:	68a3      	ldr	r3, [r4, #8]
 80167b8:	1b9b      	subs	r3, r3, r6
 80167ba:	60a3      	str	r3, [r4, #8]
 80167bc:	6823      	ldr	r3, [r4, #0]
 80167be:	441e      	add	r6, r3
 80167c0:	6026      	str	r6, [r4, #0]
 80167c2:	2000      	movs	r0, #0
 80167c4:	e7dc      	b.n	8016780 <__ssputs_r+0x58>
 80167c6:	462a      	mov	r2, r5
 80167c8:	f000 feb9 	bl	801753e <_realloc_r>
 80167cc:	4606      	mov	r6, r0
 80167ce:	2800      	cmp	r0, #0
 80167d0:	d1e2      	bne.n	8016798 <__ssputs_r+0x70>
 80167d2:	6921      	ldr	r1, [r4, #16]
 80167d4:	4650      	mov	r0, sl
 80167d6:	f7ff feff 	bl	80165d8 <_free_r>
 80167da:	e7c8      	b.n	801676e <__ssputs_r+0x46>

080167dc <_svfiprintf_r>:
 80167dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167e0:	461d      	mov	r5, r3
 80167e2:	898b      	ldrh	r3, [r1, #12]
 80167e4:	061f      	lsls	r7, r3, #24
 80167e6:	b09d      	sub	sp, #116	; 0x74
 80167e8:	4680      	mov	r8, r0
 80167ea:	460c      	mov	r4, r1
 80167ec:	4616      	mov	r6, r2
 80167ee:	d50f      	bpl.n	8016810 <_svfiprintf_r+0x34>
 80167f0:	690b      	ldr	r3, [r1, #16]
 80167f2:	b96b      	cbnz	r3, 8016810 <_svfiprintf_r+0x34>
 80167f4:	2140      	movs	r1, #64	; 0x40
 80167f6:	f7ff ff3d 	bl	8016674 <_malloc_r>
 80167fa:	6020      	str	r0, [r4, #0]
 80167fc:	6120      	str	r0, [r4, #16]
 80167fe:	b928      	cbnz	r0, 801680c <_svfiprintf_r+0x30>
 8016800:	230c      	movs	r3, #12
 8016802:	f8c8 3000 	str.w	r3, [r8]
 8016806:	f04f 30ff 	mov.w	r0, #4294967295
 801680a:	e0c8      	b.n	801699e <_svfiprintf_r+0x1c2>
 801680c:	2340      	movs	r3, #64	; 0x40
 801680e:	6163      	str	r3, [r4, #20]
 8016810:	2300      	movs	r3, #0
 8016812:	9309      	str	r3, [sp, #36]	; 0x24
 8016814:	2320      	movs	r3, #32
 8016816:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801681a:	2330      	movs	r3, #48	; 0x30
 801681c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016820:	9503      	str	r5, [sp, #12]
 8016822:	f04f 0b01 	mov.w	fp, #1
 8016826:	4637      	mov	r7, r6
 8016828:	463d      	mov	r5, r7
 801682a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801682e:	b10b      	cbz	r3, 8016834 <_svfiprintf_r+0x58>
 8016830:	2b25      	cmp	r3, #37	; 0x25
 8016832:	d13e      	bne.n	80168b2 <_svfiprintf_r+0xd6>
 8016834:	ebb7 0a06 	subs.w	sl, r7, r6
 8016838:	d00b      	beq.n	8016852 <_svfiprintf_r+0x76>
 801683a:	4653      	mov	r3, sl
 801683c:	4632      	mov	r2, r6
 801683e:	4621      	mov	r1, r4
 8016840:	4640      	mov	r0, r8
 8016842:	f7ff ff71 	bl	8016728 <__ssputs_r>
 8016846:	3001      	adds	r0, #1
 8016848:	f000 80a4 	beq.w	8016994 <_svfiprintf_r+0x1b8>
 801684c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801684e:	4453      	add	r3, sl
 8016850:	9309      	str	r3, [sp, #36]	; 0x24
 8016852:	783b      	ldrb	r3, [r7, #0]
 8016854:	2b00      	cmp	r3, #0
 8016856:	f000 809d 	beq.w	8016994 <_svfiprintf_r+0x1b8>
 801685a:	2300      	movs	r3, #0
 801685c:	f04f 32ff 	mov.w	r2, #4294967295
 8016860:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016864:	9304      	str	r3, [sp, #16]
 8016866:	9307      	str	r3, [sp, #28]
 8016868:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801686c:	931a      	str	r3, [sp, #104]	; 0x68
 801686e:	462f      	mov	r7, r5
 8016870:	2205      	movs	r2, #5
 8016872:	f817 1b01 	ldrb.w	r1, [r7], #1
 8016876:	4850      	ldr	r0, [pc, #320]	; (80169b8 <_svfiprintf_r+0x1dc>)
 8016878:	f7e9 fcca 	bl	8000210 <memchr>
 801687c:	9b04      	ldr	r3, [sp, #16]
 801687e:	b9d0      	cbnz	r0, 80168b6 <_svfiprintf_r+0xda>
 8016880:	06d9      	lsls	r1, r3, #27
 8016882:	bf44      	itt	mi
 8016884:	2220      	movmi	r2, #32
 8016886:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801688a:	071a      	lsls	r2, r3, #28
 801688c:	bf44      	itt	mi
 801688e:	222b      	movmi	r2, #43	; 0x2b
 8016890:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016894:	782a      	ldrb	r2, [r5, #0]
 8016896:	2a2a      	cmp	r2, #42	; 0x2a
 8016898:	d015      	beq.n	80168c6 <_svfiprintf_r+0xea>
 801689a:	9a07      	ldr	r2, [sp, #28]
 801689c:	462f      	mov	r7, r5
 801689e:	2000      	movs	r0, #0
 80168a0:	250a      	movs	r5, #10
 80168a2:	4639      	mov	r1, r7
 80168a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80168a8:	3b30      	subs	r3, #48	; 0x30
 80168aa:	2b09      	cmp	r3, #9
 80168ac:	d94d      	bls.n	801694a <_svfiprintf_r+0x16e>
 80168ae:	b1b8      	cbz	r0, 80168e0 <_svfiprintf_r+0x104>
 80168b0:	e00f      	b.n	80168d2 <_svfiprintf_r+0xf6>
 80168b2:	462f      	mov	r7, r5
 80168b4:	e7b8      	b.n	8016828 <_svfiprintf_r+0x4c>
 80168b6:	4a40      	ldr	r2, [pc, #256]	; (80169b8 <_svfiprintf_r+0x1dc>)
 80168b8:	1a80      	subs	r0, r0, r2
 80168ba:	fa0b f000 	lsl.w	r0, fp, r0
 80168be:	4318      	orrs	r0, r3
 80168c0:	9004      	str	r0, [sp, #16]
 80168c2:	463d      	mov	r5, r7
 80168c4:	e7d3      	b.n	801686e <_svfiprintf_r+0x92>
 80168c6:	9a03      	ldr	r2, [sp, #12]
 80168c8:	1d11      	adds	r1, r2, #4
 80168ca:	6812      	ldr	r2, [r2, #0]
 80168cc:	9103      	str	r1, [sp, #12]
 80168ce:	2a00      	cmp	r2, #0
 80168d0:	db01      	blt.n	80168d6 <_svfiprintf_r+0xfa>
 80168d2:	9207      	str	r2, [sp, #28]
 80168d4:	e004      	b.n	80168e0 <_svfiprintf_r+0x104>
 80168d6:	4252      	negs	r2, r2
 80168d8:	f043 0302 	orr.w	r3, r3, #2
 80168dc:	9207      	str	r2, [sp, #28]
 80168de:	9304      	str	r3, [sp, #16]
 80168e0:	783b      	ldrb	r3, [r7, #0]
 80168e2:	2b2e      	cmp	r3, #46	; 0x2e
 80168e4:	d10c      	bne.n	8016900 <_svfiprintf_r+0x124>
 80168e6:	787b      	ldrb	r3, [r7, #1]
 80168e8:	2b2a      	cmp	r3, #42	; 0x2a
 80168ea:	d133      	bne.n	8016954 <_svfiprintf_r+0x178>
 80168ec:	9b03      	ldr	r3, [sp, #12]
 80168ee:	1d1a      	adds	r2, r3, #4
 80168f0:	681b      	ldr	r3, [r3, #0]
 80168f2:	9203      	str	r2, [sp, #12]
 80168f4:	2b00      	cmp	r3, #0
 80168f6:	bfb8      	it	lt
 80168f8:	f04f 33ff 	movlt.w	r3, #4294967295
 80168fc:	3702      	adds	r7, #2
 80168fe:	9305      	str	r3, [sp, #20]
 8016900:	4d2e      	ldr	r5, [pc, #184]	; (80169bc <_svfiprintf_r+0x1e0>)
 8016902:	7839      	ldrb	r1, [r7, #0]
 8016904:	2203      	movs	r2, #3
 8016906:	4628      	mov	r0, r5
 8016908:	f7e9 fc82 	bl	8000210 <memchr>
 801690c:	b138      	cbz	r0, 801691e <_svfiprintf_r+0x142>
 801690e:	2340      	movs	r3, #64	; 0x40
 8016910:	1b40      	subs	r0, r0, r5
 8016912:	fa03 f000 	lsl.w	r0, r3, r0
 8016916:	9b04      	ldr	r3, [sp, #16]
 8016918:	4303      	orrs	r3, r0
 801691a:	3701      	adds	r7, #1
 801691c:	9304      	str	r3, [sp, #16]
 801691e:	7839      	ldrb	r1, [r7, #0]
 8016920:	4827      	ldr	r0, [pc, #156]	; (80169c0 <_svfiprintf_r+0x1e4>)
 8016922:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016926:	2206      	movs	r2, #6
 8016928:	1c7e      	adds	r6, r7, #1
 801692a:	f7e9 fc71 	bl	8000210 <memchr>
 801692e:	2800      	cmp	r0, #0
 8016930:	d038      	beq.n	80169a4 <_svfiprintf_r+0x1c8>
 8016932:	4b24      	ldr	r3, [pc, #144]	; (80169c4 <_svfiprintf_r+0x1e8>)
 8016934:	bb13      	cbnz	r3, 801697c <_svfiprintf_r+0x1a0>
 8016936:	9b03      	ldr	r3, [sp, #12]
 8016938:	3307      	adds	r3, #7
 801693a:	f023 0307 	bic.w	r3, r3, #7
 801693e:	3308      	adds	r3, #8
 8016940:	9303      	str	r3, [sp, #12]
 8016942:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016944:	444b      	add	r3, r9
 8016946:	9309      	str	r3, [sp, #36]	; 0x24
 8016948:	e76d      	b.n	8016826 <_svfiprintf_r+0x4a>
 801694a:	fb05 3202 	mla	r2, r5, r2, r3
 801694e:	2001      	movs	r0, #1
 8016950:	460f      	mov	r7, r1
 8016952:	e7a6      	b.n	80168a2 <_svfiprintf_r+0xc6>
 8016954:	2300      	movs	r3, #0
 8016956:	3701      	adds	r7, #1
 8016958:	9305      	str	r3, [sp, #20]
 801695a:	4619      	mov	r1, r3
 801695c:	250a      	movs	r5, #10
 801695e:	4638      	mov	r0, r7
 8016960:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016964:	3a30      	subs	r2, #48	; 0x30
 8016966:	2a09      	cmp	r2, #9
 8016968:	d903      	bls.n	8016972 <_svfiprintf_r+0x196>
 801696a:	2b00      	cmp	r3, #0
 801696c:	d0c8      	beq.n	8016900 <_svfiprintf_r+0x124>
 801696e:	9105      	str	r1, [sp, #20]
 8016970:	e7c6      	b.n	8016900 <_svfiprintf_r+0x124>
 8016972:	fb05 2101 	mla	r1, r5, r1, r2
 8016976:	2301      	movs	r3, #1
 8016978:	4607      	mov	r7, r0
 801697a:	e7f0      	b.n	801695e <_svfiprintf_r+0x182>
 801697c:	ab03      	add	r3, sp, #12
 801697e:	9300      	str	r3, [sp, #0]
 8016980:	4622      	mov	r2, r4
 8016982:	4b11      	ldr	r3, [pc, #68]	; (80169c8 <_svfiprintf_r+0x1ec>)
 8016984:	a904      	add	r1, sp, #16
 8016986:	4640      	mov	r0, r8
 8016988:	f7fb ffda 	bl	8012940 <_printf_float>
 801698c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8016990:	4681      	mov	r9, r0
 8016992:	d1d6      	bne.n	8016942 <_svfiprintf_r+0x166>
 8016994:	89a3      	ldrh	r3, [r4, #12]
 8016996:	065b      	lsls	r3, r3, #25
 8016998:	f53f af35 	bmi.w	8016806 <_svfiprintf_r+0x2a>
 801699c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801699e:	b01d      	add	sp, #116	; 0x74
 80169a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80169a4:	ab03      	add	r3, sp, #12
 80169a6:	9300      	str	r3, [sp, #0]
 80169a8:	4622      	mov	r2, r4
 80169aa:	4b07      	ldr	r3, [pc, #28]	; (80169c8 <_svfiprintf_r+0x1ec>)
 80169ac:	a904      	add	r1, sp, #16
 80169ae:	4640      	mov	r0, r8
 80169b0:	f7fc fa7c 	bl	8012eac <_printf_i>
 80169b4:	e7ea      	b.n	801698c <_svfiprintf_r+0x1b0>
 80169b6:	bf00      	nop
 80169b8:	08017f34 	.word	0x08017f34
 80169bc:	08017f3a 	.word	0x08017f3a
 80169c0:	08017f3e 	.word	0x08017f3e
 80169c4:	08012941 	.word	0x08012941
 80169c8:	08016729 	.word	0x08016729

080169cc <_sungetc_r>:
 80169cc:	b538      	push	{r3, r4, r5, lr}
 80169ce:	1c4b      	adds	r3, r1, #1
 80169d0:	4614      	mov	r4, r2
 80169d2:	d103      	bne.n	80169dc <_sungetc_r+0x10>
 80169d4:	f04f 35ff 	mov.w	r5, #4294967295
 80169d8:	4628      	mov	r0, r5
 80169da:	bd38      	pop	{r3, r4, r5, pc}
 80169dc:	8993      	ldrh	r3, [r2, #12]
 80169de:	f023 0320 	bic.w	r3, r3, #32
 80169e2:	8193      	strh	r3, [r2, #12]
 80169e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80169e6:	6852      	ldr	r2, [r2, #4]
 80169e8:	b2cd      	uxtb	r5, r1
 80169ea:	b18b      	cbz	r3, 8016a10 <_sungetc_r+0x44>
 80169ec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80169ee:	4293      	cmp	r3, r2
 80169f0:	dd08      	ble.n	8016a04 <_sungetc_r+0x38>
 80169f2:	6823      	ldr	r3, [r4, #0]
 80169f4:	1e5a      	subs	r2, r3, #1
 80169f6:	6022      	str	r2, [r4, #0]
 80169f8:	f803 5c01 	strb.w	r5, [r3, #-1]
 80169fc:	6863      	ldr	r3, [r4, #4]
 80169fe:	3301      	adds	r3, #1
 8016a00:	6063      	str	r3, [r4, #4]
 8016a02:	e7e9      	b.n	80169d8 <_sungetc_r+0xc>
 8016a04:	4621      	mov	r1, r4
 8016a06:	f000 fd15 	bl	8017434 <__submore>
 8016a0a:	2800      	cmp	r0, #0
 8016a0c:	d0f1      	beq.n	80169f2 <_sungetc_r+0x26>
 8016a0e:	e7e1      	b.n	80169d4 <_sungetc_r+0x8>
 8016a10:	6921      	ldr	r1, [r4, #16]
 8016a12:	6823      	ldr	r3, [r4, #0]
 8016a14:	b151      	cbz	r1, 8016a2c <_sungetc_r+0x60>
 8016a16:	4299      	cmp	r1, r3
 8016a18:	d208      	bcs.n	8016a2c <_sungetc_r+0x60>
 8016a1a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8016a1e:	42a9      	cmp	r1, r5
 8016a20:	d104      	bne.n	8016a2c <_sungetc_r+0x60>
 8016a22:	3b01      	subs	r3, #1
 8016a24:	3201      	adds	r2, #1
 8016a26:	6023      	str	r3, [r4, #0]
 8016a28:	6062      	str	r2, [r4, #4]
 8016a2a:	e7d5      	b.n	80169d8 <_sungetc_r+0xc>
 8016a2c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8016a30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016a34:	6363      	str	r3, [r4, #52]	; 0x34
 8016a36:	2303      	movs	r3, #3
 8016a38:	63a3      	str	r3, [r4, #56]	; 0x38
 8016a3a:	4623      	mov	r3, r4
 8016a3c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8016a40:	6023      	str	r3, [r4, #0]
 8016a42:	2301      	movs	r3, #1
 8016a44:	e7dc      	b.n	8016a00 <_sungetc_r+0x34>

08016a46 <__ssrefill_r>:
 8016a46:	b510      	push	{r4, lr}
 8016a48:	460c      	mov	r4, r1
 8016a4a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8016a4c:	b169      	cbz	r1, 8016a6a <__ssrefill_r+0x24>
 8016a4e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016a52:	4299      	cmp	r1, r3
 8016a54:	d001      	beq.n	8016a5a <__ssrefill_r+0x14>
 8016a56:	f7ff fdbf 	bl	80165d8 <_free_r>
 8016a5a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016a5c:	6063      	str	r3, [r4, #4]
 8016a5e:	2000      	movs	r0, #0
 8016a60:	6360      	str	r0, [r4, #52]	; 0x34
 8016a62:	b113      	cbz	r3, 8016a6a <__ssrefill_r+0x24>
 8016a64:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8016a66:	6023      	str	r3, [r4, #0]
 8016a68:	bd10      	pop	{r4, pc}
 8016a6a:	6923      	ldr	r3, [r4, #16]
 8016a6c:	6023      	str	r3, [r4, #0]
 8016a6e:	2300      	movs	r3, #0
 8016a70:	6063      	str	r3, [r4, #4]
 8016a72:	89a3      	ldrh	r3, [r4, #12]
 8016a74:	f043 0320 	orr.w	r3, r3, #32
 8016a78:	81a3      	strh	r3, [r4, #12]
 8016a7a:	f04f 30ff 	mov.w	r0, #4294967295
 8016a7e:	e7f3      	b.n	8016a68 <__ssrefill_r+0x22>

08016a80 <__ssvfiscanf_r>:
 8016a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a84:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8016a88:	460c      	mov	r4, r1
 8016a8a:	2100      	movs	r1, #0
 8016a8c:	9144      	str	r1, [sp, #272]	; 0x110
 8016a8e:	9145      	str	r1, [sp, #276]	; 0x114
 8016a90:	499f      	ldr	r1, [pc, #636]	; (8016d10 <__ssvfiscanf_r+0x290>)
 8016a92:	91a0      	str	r1, [sp, #640]	; 0x280
 8016a94:	f10d 0804 	add.w	r8, sp, #4
 8016a98:	499e      	ldr	r1, [pc, #632]	; (8016d14 <__ssvfiscanf_r+0x294>)
 8016a9a:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8016d18 <__ssvfiscanf_r+0x298>
 8016a9e:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8016aa2:	4606      	mov	r6, r0
 8016aa4:	4692      	mov	sl, r2
 8016aa6:	91a1      	str	r1, [sp, #644]	; 0x284
 8016aa8:	9300      	str	r3, [sp, #0]
 8016aaa:	270a      	movs	r7, #10
 8016aac:	f89a 3000 	ldrb.w	r3, [sl]
 8016ab0:	2b00      	cmp	r3, #0
 8016ab2:	f000 812a 	beq.w	8016d0a <__ssvfiscanf_r+0x28a>
 8016ab6:	4655      	mov	r5, sl
 8016ab8:	f7ff f8d2 	bl	8015c60 <__locale_ctype_ptr>
 8016abc:	f815 bb01 	ldrb.w	fp, [r5], #1
 8016ac0:	4458      	add	r0, fp
 8016ac2:	7843      	ldrb	r3, [r0, #1]
 8016ac4:	f013 0308 	ands.w	r3, r3, #8
 8016ac8:	d01c      	beq.n	8016b04 <__ssvfiscanf_r+0x84>
 8016aca:	6863      	ldr	r3, [r4, #4]
 8016acc:	2b00      	cmp	r3, #0
 8016ace:	dd12      	ble.n	8016af6 <__ssvfiscanf_r+0x76>
 8016ad0:	f7ff f8c6 	bl	8015c60 <__locale_ctype_ptr>
 8016ad4:	6823      	ldr	r3, [r4, #0]
 8016ad6:	781a      	ldrb	r2, [r3, #0]
 8016ad8:	4410      	add	r0, r2
 8016ada:	7842      	ldrb	r2, [r0, #1]
 8016adc:	0712      	lsls	r2, r2, #28
 8016ade:	d401      	bmi.n	8016ae4 <__ssvfiscanf_r+0x64>
 8016ae0:	46aa      	mov	sl, r5
 8016ae2:	e7e3      	b.n	8016aac <__ssvfiscanf_r+0x2c>
 8016ae4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8016ae6:	3201      	adds	r2, #1
 8016ae8:	9245      	str	r2, [sp, #276]	; 0x114
 8016aea:	6862      	ldr	r2, [r4, #4]
 8016aec:	3301      	adds	r3, #1
 8016aee:	3a01      	subs	r2, #1
 8016af0:	6062      	str	r2, [r4, #4]
 8016af2:	6023      	str	r3, [r4, #0]
 8016af4:	e7e9      	b.n	8016aca <__ssvfiscanf_r+0x4a>
 8016af6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016af8:	4621      	mov	r1, r4
 8016afa:	4630      	mov	r0, r6
 8016afc:	4798      	blx	r3
 8016afe:	2800      	cmp	r0, #0
 8016b00:	d0e6      	beq.n	8016ad0 <__ssvfiscanf_r+0x50>
 8016b02:	e7ed      	b.n	8016ae0 <__ssvfiscanf_r+0x60>
 8016b04:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8016b08:	f040 8082 	bne.w	8016c10 <__ssvfiscanf_r+0x190>
 8016b0c:	9343      	str	r3, [sp, #268]	; 0x10c
 8016b0e:	9341      	str	r3, [sp, #260]	; 0x104
 8016b10:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8016b14:	2b2a      	cmp	r3, #42	; 0x2a
 8016b16:	d103      	bne.n	8016b20 <__ssvfiscanf_r+0xa0>
 8016b18:	2310      	movs	r3, #16
 8016b1a:	9341      	str	r3, [sp, #260]	; 0x104
 8016b1c:	f10a 0502 	add.w	r5, sl, #2
 8016b20:	46aa      	mov	sl, r5
 8016b22:	f815 1b01 	ldrb.w	r1, [r5], #1
 8016b26:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8016b2a:	2a09      	cmp	r2, #9
 8016b2c:	d922      	bls.n	8016b74 <__ssvfiscanf_r+0xf4>
 8016b2e:	2203      	movs	r2, #3
 8016b30:	4879      	ldr	r0, [pc, #484]	; (8016d18 <__ssvfiscanf_r+0x298>)
 8016b32:	f7e9 fb6d 	bl	8000210 <memchr>
 8016b36:	b138      	cbz	r0, 8016b48 <__ssvfiscanf_r+0xc8>
 8016b38:	eba0 0309 	sub.w	r3, r0, r9
 8016b3c:	2001      	movs	r0, #1
 8016b3e:	4098      	lsls	r0, r3
 8016b40:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016b42:	4318      	orrs	r0, r3
 8016b44:	9041      	str	r0, [sp, #260]	; 0x104
 8016b46:	46aa      	mov	sl, r5
 8016b48:	f89a 3000 	ldrb.w	r3, [sl]
 8016b4c:	2b67      	cmp	r3, #103	; 0x67
 8016b4e:	f10a 0501 	add.w	r5, sl, #1
 8016b52:	d82b      	bhi.n	8016bac <__ssvfiscanf_r+0x12c>
 8016b54:	2b65      	cmp	r3, #101	; 0x65
 8016b56:	f080 809f 	bcs.w	8016c98 <__ssvfiscanf_r+0x218>
 8016b5a:	2b47      	cmp	r3, #71	; 0x47
 8016b5c:	d810      	bhi.n	8016b80 <__ssvfiscanf_r+0x100>
 8016b5e:	2b45      	cmp	r3, #69	; 0x45
 8016b60:	f080 809a 	bcs.w	8016c98 <__ssvfiscanf_r+0x218>
 8016b64:	2b00      	cmp	r3, #0
 8016b66:	d06c      	beq.n	8016c42 <__ssvfiscanf_r+0x1c2>
 8016b68:	2b25      	cmp	r3, #37	; 0x25
 8016b6a:	d051      	beq.n	8016c10 <__ssvfiscanf_r+0x190>
 8016b6c:	2303      	movs	r3, #3
 8016b6e:	9347      	str	r3, [sp, #284]	; 0x11c
 8016b70:	9742      	str	r7, [sp, #264]	; 0x108
 8016b72:	e027      	b.n	8016bc4 <__ssvfiscanf_r+0x144>
 8016b74:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8016b76:	fb07 1303 	mla	r3, r7, r3, r1
 8016b7a:	3b30      	subs	r3, #48	; 0x30
 8016b7c:	9343      	str	r3, [sp, #268]	; 0x10c
 8016b7e:	e7cf      	b.n	8016b20 <__ssvfiscanf_r+0xa0>
 8016b80:	2b5b      	cmp	r3, #91	; 0x5b
 8016b82:	d06a      	beq.n	8016c5a <__ssvfiscanf_r+0x1da>
 8016b84:	d80c      	bhi.n	8016ba0 <__ssvfiscanf_r+0x120>
 8016b86:	2b58      	cmp	r3, #88	; 0x58
 8016b88:	d1f0      	bne.n	8016b6c <__ssvfiscanf_r+0xec>
 8016b8a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8016b8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8016b90:	9241      	str	r2, [sp, #260]	; 0x104
 8016b92:	2210      	movs	r2, #16
 8016b94:	9242      	str	r2, [sp, #264]	; 0x108
 8016b96:	2b6e      	cmp	r3, #110	; 0x6e
 8016b98:	bf8c      	ite	hi
 8016b9a:	2304      	movhi	r3, #4
 8016b9c:	2303      	movls	r3, #3
 8016b9e:	e010      	b.n	8016bc2 <__ssvfiscanf_r+0x142>
 8016ba0:	2b63      	cmp	r3, #99	; 0x63
 8016ba2:	d065      	beq.n	8016c70 <__ssvfiscanf_r+0x1f0>
 8016ba4:	2b64      	cmp	r3, #100	; 0x64
 8016ba6:	d1e1      	bne.n	8016b6c <__ssvfiscanf_r+0xec>
 8016ba8:	9742      	str	r7, [sp, #264]	; 0x108
 8016baa:	e7f4      	b.n	8016b96 <__ssvfiscanf_r+0x116>
 8016bac:	2b70      	cmp	r3, #112	; 0x70
 8016bae:	d04b      	beq.n	8016c48 <__ssvfiscanf_r+0x1c8>
 8016bb0:	d826      	bhi.n	8016c00 <__ssvfiscanf_r+0x180>
 8016bb2:	2b6e      	cmp	r3, #110	; 0x6e
 8016bb4:	d062      	beq.n	8016c7c <__ssvfiscanf_r+0x1fc>
 8016bb6:	d84c      	bhi.n	8016c52 <__ssvfiscanf_r+0x1d2>
 8016bb8:	2b69      	cmp	r3, #105	; 0x69
 8016bba:	d1d7      	bne.n	8016b6c <__ssvfiscanf_r+0xec>
 8016bbc:	2300      	movs	r3, #0
 8016bbe:	9342      	str	r3, [sp, #264]	; 0x108
 8016bc0:	2303      	movs	r3, #3
 8016bc2:	9347      	str	r3, [sp, #284]	; 0x11c
 8016bc4:	6863      	ldr	r3, [r4, #4]
 8016bc6:	2b00      	cmp	r3, #0
 8016bc8:	dd68      	ble.n	8016c9c <__ssvfiscanf_r+0x21c>
 8016bca:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016bcc:	0659      	lsls	r1, r3, #25
 8016bce:	d407      	bmi.n	8016be0 <__ssvfiscanf_r+0x160>
 8016bd0:	f7ff f846 	bl	8015c60 <__locale_ctype_ptr>
 8016bd4:	6823      	ldr	r3, [r4, #0]
 8016bd6:	781a      	ldrb	r2, [r3, #0]
 8016bd8:	4410      	add	r0, r2
 8016bda:	7842      	ldrb	r2, [r0, #1]
 8016bdc:	0712      	lsls	r2, r2, #28
 8016bde:	d464      	bmi.n	8016caa <__ssvfiscanf_r+0x22a>
 8016be0:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8016be2:	2b02      	cmp	r3, #2
 8016be4:	dc73      	bgt.n	8016cce <__ssvfiscanf_r+0x24e>
 8016be6:	466b      	mov	r3, sp
 8016be8:	4622      	mov	r2, r4
 8016bea:	a941      	add	r1, sp, #260	; 0x104
 8016bec:	4630      	mov	r0, r6
 8016bee:	f000 f9d7 	bl	8016fa0 <_scanf_chars>
 8016bf2:	2801      	cmp	r0, #1
 8016bf4:	f000 8089 	beq.w	8016d0a <__ssvfiscanf_r+0x28a>
 8016bf8:	2802      	cmp	r0, #2
 8016bfa:	f47f af71 	bne.w	8016ae0 <__ssvfiscanf_r+0x60>
 8016bfe:	e01d      	b.n	8016c3c <__ssvfiscanf_r+0x1bc>
 8016c00:	2b75      	cmp	r3, #117	; 0x75
 8016c02:	d0d1      	beq.n	8016ba8 <__ssvfiscanf_r+0x128>
 8016c04:	2b78      	cmp	r3, #120	; 0x78
 8016c06:	d0c0      	beq.n	8016b8a <__ssvfiscanf_r+0x10a>
 8016c08:	2b73      	cmp	r3, #115	; 0x73
 8016c0a:	d1af      	bne.n	8016b6c <__ssvfiscanf_r+0xec>
 8016c0c:	2302      	movs	r3, #2
 8016c0e:	e7d8      	b.n	8016bc2 <__ssvfiscanf_r+0x142>
 8016c10:	6863      	ldr	r3, [r4, #4]
 8016c12:	2b00      	cmp	r3, #0
 8016c14:	dd0c      	ble.n	8016c30 <__ssvfiscanf_r+0x1b0>
 8016c16:	6823      	ldr	r3, [r4, #0]
 8016c18:	781a      	ldrb	r2, [r3, #0]
 8016c1a:	455a      	cmp	r2, fp
 8016c1c:	d175      	bne.n	8016d0a <__ssvfiscanf_r+0x28a>
 8016c1e:	3301      	adds	r3, #1
 8016c20:	6862      	ldr	r2, [r4, #4]
 8016c22:	6023      	str	r3, [r4, #0]
 8016c24:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8016c26:	3a01      	subs	r2, #1
 8016c28:	3301      	adds	r3, #1
 8016c2a:	6062      	str	r2, [r4, #4]
 8016c2c:	9345      	str	r3, [sp, #276]	; 0x114
 8016c2e:	e757      	b.n	8016ae0 <__ssvfiscanf_r+0x60>
 8016c30:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016c32:	4621      	mov	r1, r4
 8016c34:	4630      	mov	r0, r6
 8016c36:	4798      	blx	r3
 8016c38:	2800      	cmp	r0, #0
 8016c3a:	d0ec      	beq.n	8016c16 <__ssvfiscanf_r+0x196>
 8016c3c:	9844      	ldr	r0, [sp, #272]	; 0x110
 8016c3e:	2800      	cmp	r0, #0
 8016c40:	d159      	bne.n	8016cf6 <__ssvfiscanf_r+0x276>
 8016c42:	f04f 30ff 	mov.w	r0, #4294967295
 8016c46:	e05c      	b.n	8016d02 <__ssvfiscanf_r+0x282>
 8016c48:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8016c4a:	f042 0220 	orr.w	r2, r2, #32
 8016c4e:	9241      	str	r2, [sp, #260]	; 0x104
 8016c50:	e79b      	b.n	8016b8a <__ssvfiscanf_r+0x10a>
 8016c52:	2308      	movs	r3, #8
 8016c54:	9342      	str	r3, [sp, #264]	; 0x108
 8016c56:	2304      	movs	r3, #4
 8016c58:	e7b3      	b.n	8016bc2 <__ssvfiscanf_r+0x142>
 8016c5a:	4629      	mov	r1, r5
 8016c5c:	4640      	mov	r0, r8
 8016c5e:	f000 fb19 	bl	8017294 <__sccl>
 8016c62:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016c64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016c68:	9341      	str	r3, [sp, #260]	; 0x104
 8016c6a:	4605      	mov	r5, r0
 8016c6c:	2301      	movs	r3, #1
 8016c6e:	e7a8      	b.n	8016bc2 <__ssvfiscanf_r+0x142>
 8016c70:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016c72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016c76:	9341      	str	r3, [sp, #260]	; 0x104
 8016c78:	2300      	movs	r3, #0
 8016c7a:	e7a2      	b.n	8016bc2 <__ssvfiscanf_r+0x142>
 8016c7c:	9841      	ldr	r0, [sp, #260]	; 0x104
 8016c7e:	06c3      	lsls	r3, r0, #27
 8016c80:	f53f af2e 	bmi.w	8016ae0 <__ssvfiscanf_r+0x60>
 8016c84:	9b00      	ldr	r3, [sp, #0]
 8016c86:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8016c88:	1d19      	adds	r1, r3, #4
 8016c8a:	9100      	str	r1, [sp, #0]
 8016c8c:	681b      	ldr	r3, [r3, #0]
 8016c8e:	07c0      	lsls	r0, r0, #31
 8016c90:	bf4c      	ite	mi
 8016c92:	801a      	strhmi	r2, [r3, #0]
 8016c94:	601a      	strpl	r2, [r3, #0]
 8016c96:	e723      	b.n	8016ae0 <__ssvfiscanf_r+0x60>
 8016c98:	2305      	movs	r3, #5
 8016c9a:	e792      	b.n	8016bc2 <__ssvfiscanf_r+0x142>
 8016c9c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016c9e:	4621      	mov	r1, r4
 8016ca0:	4630      	mov	r0, r6
 8016ca2:	4798      	blx	r3
 8016ca4:	2800      	cmp	r0, #0
 8016ca6:	d090      	beq.n	8016bca <__ssvfiscanf_r+0x14a>
 8016ca8:	e7c8      	b.n	8016c3c <__ssvfiscanf_r+0x1bc>
 8016caa:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8016cac:	3201      	adds	r2, #1
 8016cae:	9245      	str	r2, [sp, #276]	; 0x114
 8016cb0:	6862      	ldr	r2, [r4, #4]
 8016cb2:	3a01      	subs	r2, #1
 8016cb4:	2a00      	cmp	r2, #0
 8016cb6:	6062      	str	r2, [r4, #4]
 8016cb8:	dd02      	ble.n	8016cc0 <__ssvfiscanf_r+0x240>
 8016cba:	3301      	adds	r3, #1
 8016cbc:	6023      	str	r3, [r4, #0]
 8016cbe:	e787      	b.n	8016bd0 <__ssvfiscanf_r+0x150>
 8016cc0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016cc2:	4621      	mov	r1, r4
 8016cc4:	4630      	mov	r0, r6
 8016cc6:	4798      	blx	r3
 8016cc8:	2800      	cmp	r0, #0
 8016cca:	d081      	beq.n	8016bd0 <__ssvfiscanf_r+0x150>
 8016ccc:	e7b6      	b.n	8016c3c <__ssvfiscanf_r+0x1bc>
 8016cce:	2b04      	cmp	r3, #4
 8016cd0:	dc06      	bgt.n	8016ce0 <__ssvfiscanf_r+0x260>
 8016cd2:	466b      	mov	r3, sp
 8016cd4:	4622      	mov	r2, r4
 8016cd6:	a941      	add	r1, sp, #260	; 0x104
 8016cd8:	4630      	mov	r0, r6
 8016cda:	f000 f9c5 	bl	8017068 <_scanf_i>
 8016cde:	e788      	b.n	8016bf2 <__ssvfiscanf_r+0x172>
 8016ce0:	4b0e      	ldr	r3, [pc, #56]	; (8016d1c <__ssvfiscanf_r+0x29c>)
 8016ce2:	2b00      	cmp	r3, #0
 8016ce4:	f43f aefc 	beq.w	8016ae0 <__ssvfiscanf_r+0x60>
 8016ce8:	466b      	mov	r3, sp
 8016cea:	4622      	mov	r2, r4
 8016cec:	a941      	add	r1, sp, #260	; 0x104
 8016cee:	4630      	mov	r0, r6
 8016cf0:	f7fc f9ee 	bl	80130d0 <_scanf_float>
 8016cf4:	e77d      	b.n	8016bf2 <__ssvfiscanf_r+0x172>
 8016cf6:	89a3      	ldrh	r3, [r4, #12]
 8016cf8:	f013 0f40 	tst.w	r3, #64	; 0x40
 8016cfc:	bf18      	it	ne
 8016cfe:	f04f 30ff 	movne.w	r0, #4294967295
 8016d02:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8016d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d0a:	9844      	ldr	r0, [sp, #272]	; 0x110
 8016d0c:	e7f9      	b.n	8016d02 <__ssvfiscanf_r+0x282>
 8016d0e:	bf00      	nop
 8016d10:	080169cd 	.word	0x080169cd
 8016d14:	08016a47 	.word	0x08016a47
 8016d18:	08017f3a 	.word	0x08017f3a
 8016d1c:	080130d1 	.word	0x080130d1

08016d20 <__sfputc_r>:
 8016d20:	6893      	ldr	r3, [r2, #8]
 8016d22:	3b01      	subs	r3, #1
 8016d24:	2b00      	cmp	r3, #0
 8016d26:	b410      	push	{r4}
 8016d28:	6093      	str	r3, [r2, #8]
 8016d2a:	da08      	bge.n	8016d3e <__sfputc_r+0x1e>
 8016d2c:	6994      	ldr	r4, [r2, #24]
 8016d2e:	42a3      	cmp	r3, r4
 8016d30:	db01      	blt.n	8016d36 <__sfputc_r+0x16>
 8016d32:	290a      	cmp	r1, #10
 8016d34:	d103      	bne.n	8016d3e <__sfputc_r+0x1e>
 8016d36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016d3a:	f7fd bbc7 	b.w	80144cc <__swbuf_r>
 8016d3e:	6813      	ldr	r3, [r2, #0]
 8016d40:	1c58      	adds	r0, r3, #1
 8016d42:	6010      	str	r0, [r2, #0]
 8016d44:	7019      	strb	r1, [r3, #0]
 8016d46:	4608      	mov	r0, r1
 8016d48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016d4c:	4770      	bx	lr

08016d4e <__sfputs_r>:
 8016d4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d50:	4606      	mov	r6, r0
 8016d52:	460f      	mov	r7, r1
 8016d54:	4614      	mov	r4, r2
 8016d56:	18d5      	adds	r5, r2, r3
 8016d58:	42ac      	cmp	r4, r5
 8016d5a:	d101      	bne.n	8016d60 <__sfputs_r+0x12>
 8016d5c:	2000      	movs	r0, #0
 8016d5e:	e007      	b.n	8016d70 <__sfputs_r+0x22>
 8016d60:	463a      	mov	r2, r7
 8016d62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016d66:	4630      	mov	r0, r6
 8016d68:	f7ff ffda 	bl	8016d20 <__sfputc_r>
 8016d6c:	1c43      	adds	r3, r0, #1
 8016d6e:	d1f3      	bne.n	8016d58 <__sfputs_r+0xa>
 8016d70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016d74 <_vfiprintf_r>:
 8016d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d78:	460c      	mov	r4, r1
 8016d7a:	b09d      	sub	sp, #116	; 0x74
 8016d7c:	4617      	mov	r7, r2
 8016d7e:	461d      	mov	r5, r3
 8016d80:	4606      	mov	r6, r0
 8016d82:	b118      	cbz	r0, 8016d8c <_vfiprintf_r+0x18>
 8016d84:	6983      	ldr	r3, [r0, #24]
 8016d86:	b90b      	cbnz	r3, 8016d8c <_vfiprintf_r+0x18>
 8016d88:	f7fe fbb6 	bl	80154f8 <__sinit>
 8016d8c:	4b7c      	ldr	r3, [pc, #496]	; (8016f80 <_vfiprintf_r+0x20c>)
 8016d8e:	429c      	cmp	r4, r3
 8016d90:	d158      	bne.n	8016e44 <_vfiprintf_r+0xd0>
 8016d92:	6874      	ldr	r4, [r6, #4]
 8016d94:	89a3      	ldrh	r3, [r4, #12]
 8016d96:	0718      	lsls	r0, r3, #28
 8016d98:	d55e      	bpl.n	8016e58 <_vfiprintf_r+0xe4>
 8016d9a:	6923      	ldr	r3, [r4, #16]
 8016d9c:	2b00      	cmp	r3, #0
 8016d9e:	d05b      	beq.n	8016e58 <_vfiprintf_r+0xe4>
 8016da0:	2300      	movs	r3, #0
 8016da2:	9309      	str	r3, [sp, #36]	; 0x24
 8016da4:	2320      	movs	r3, #32
 8016da6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016daa:	2330      	movs	r3, #48	; 0x30
 8016dac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016db0:	9503      	str	r5, [sp, #12]
 8016db2:	f04f 0b01 	mov.w	fp, #1
 8016db6:	46b8      	mov	r8, r7
 8016db8:	4645      	mov	r5, r8
 8016dba:	f815 3b01 	ldrb.w	r3, [r5], #1
 8016dbe:	b10b      	cbz	r3, 8016dc4 <_vfiprintf_r+0x50>
 8016dc0:	2b25      	cmp	r3, #37	; 0x25
 8016dc2:	d154      	bne.n	8016e6e <_vfiprintf_r+0xfa>
 8016dc4:	ebb8 0a07 	subs.w	sl, r8, r7
 8016dc8:	d00b      	beq.n	8016de2 <_vfiprintf_r+0x6e>
 8016dca:	4653      	mov	r3, sl
 8016dcc:	463a      	mov	r2, r7
 8016dce:	4621      	mov	r1, r4
 8016dd0:	4630      	mov	r0, r6
 8016dd2:	f7ff ffbc 	bl	8016d4e <__sfputs_r>
 8016dd6:	3001      	adds	r0, #1
 8016dd8:	f000 80c2 	beq.w	8016f60 <_vfiprintf_r+0x1ec>
 8016ddc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016dde:	4453      	add	r3, sl
 8016de0:	9309      	str	r3, [sp, #36]	; 0x24
 8016de2:	f898 3000 	ldrb.w	r3, [r8]
 8016de6:	2b00      	cmp	r3, #0
 8016de8:	f000 80ba 	beq.w	8016f60 <_vfiprintf_r+0x1ec>
 8016dec:	2300      	movs	r3, #0
 8016dee:	f04f 32ff 	mov.w	r2, #4294967295
 8016df2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016df6:	9304      	str	r3, [sp, #16]
 8016df8:	9307      	str	r3, [sp, #28]
 8016dfa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016dfe:	931a      	str	r3, [sp, #104]	; 0x68
 8016e00:	46a8      	mov	r8, r5
 8016e02:	2205      	movs	r2, #5
 8016e04:	f818 1b01 	ldrb.w	r1, [r8], #1
 8016e08:	485e      	ldr	r0, [pc, #376]	; (8016f84 <_vfiprintf_r+0x210>)
 8016e0a:	f7e9 fa01 	bl	8000210 <memchr>
 8016e0e:	9b04      	ldr	r3, [sp, #16]
 8016e10:	bb78      	cbnz	r0, 8016e72 <_vfiprintf_r+0xfe>
 8016e12:	06d9      	lsls	r1, r3, #27
 8016e14:	bf44      	itt	mi
 8016e16:	2220      	movmi	r2, #32
 8016e18:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016e1c:	071a      	lsls	r2, r3, #28
 8016e1e:	bf44      	itt	mi
 8016e20:	222b      	movmi	r2, #43	; 0x2b
 8016e22:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016e26:	782a      	ldrb	r2, [r5, #0]
 8016e28:	2a2a      	cmp	r2, #42	; 0x2a
 8016e2a:	d02a      	beq.n	8016e82 <_vfiprintf_r+0x10e>
 8016e2c:	9a07      	ldr	r2, [sp, #28]
 8016e2e:	46a8      	mov	r8, r5
 8016e30:	2000      	movs	r0, #0
 8016e32:	250a      	movs	r5, #10
 8016e34:	4641      	mov	r1, r8
 8016e36:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016e3a:	3b30      	subs	r3, #48	; 0x30
 8016e3c:	2b09      	cmp	r3, #9
 8016e3e:	d969      	bls.n	8016f14 <_vfiprintf_r+0x1a0>
 8016e40:	b360      	cbz	r0, 8016e9c <_vfiprintf_r+0x128>
 8016e42:	e024      	b.n	8016e8e <_vfiprintf_r+0x11a>
 8016e44:	4b50      	ldr	r3, [pc, #320]	; (8016f88 <_vfiprintf_r+0x214>)
 8016e46:	429c      	cmp	r4, r3
 8016e48:	d101      	bne.n	8016e4e <_vfiprintf_r+0xda>
 8016e4a:	68b4      	ldr	r4, [r6, #8]
 8016e4c:	e7a2      	b.n	8016d94 <_vfiprintf_r+0x20>
 8016e4e:	4b4f      	ldr	r3, [pc, #316]	; (8016f8c <_vfiprintf_r+0x218>)
 8016e50:	429c      	cmp	r4, r3
 8016e52:	bf08      	it	eq
 8016e54:	68f4      	ldreq	r4, [r6, #12]
 8016e56:	e79d      	b.n	8016d94 <_vfiprintf_r+0x20>
 8016e58:	4621      	mov	r1, r4
 8016e5a:	4630      	mov	r0, r6
 8016e5c:	f7fd fb9a 	bl	8014594 <__swsetup_r>
 8016e60:	2800      	cmp	r0, #0
 8016e62:	d09d      	beq.n	8016da0 <_vfiprintf_r+0x2c>
 8016e64:	f04f 30ff 	mov.w	r0, #4294967295
 8016e68:	b01d      	add	sp, #116	; 0x74
 8016e6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e6e:	46a8      	mov	r8, r5
 8016e70:	e7a2      	b.n	8016db8 <_vfiprintf_r+0x44>
 8016e72:	4a44      	ldr	r2, [pc, #272]	; (8016f84 <_vfiprintf_r+0x210>)
 8016e74:	1a80      	subs	r0, r0, r2
 8016e76:	fa0b f000 	lsl.w	r0, fp, r0
 8016e7a:	4318      	orrs	r0, r3
 8016e7c:	9004      	str	r0, [sp, #16]
 8016e7e:	4645      	mov	r5, r8
 8016e80:	e7be      	b.n	8016e00 <_vfiprintf_r+0x8c>
 8016e82:	9a03      	ldr	r2, [sp, #12]
 8016e84:	1d11      	adds	r1, r2, #4
 8016e86:	6812      	ldr	r2, [r2, #0]
 8016e88:	9103      	str	r1, [sp, #12]
 8016e8a:	2a00      	cmp	r2, #0
 8016e8c:	db01      	blt.n	8016e92 <_vfiprintf_r+0x11e>
 8016e8e:	9207      	str	r2, [sp, #28]
 8016e90:	e004      	b.n	8016e9c <_vfiprintf_r+0x128>
 8016e92:	4252      	negs	r2, r2
 8016e94:	f043 0302 	orr.w	r3, r3, #2
 8016e98:	9207      	str	r2, [sp, #28]
 8016e9a:	9304      	str	r3, [sp, #16]
 8016e9c:	f898 3000 	ldrb.w	r3, [r8]
 8016ea0:	2b2e      	cmp	r3, #46	; 0x2e
 8016ea2:	d10e      	bne.n	8016ec2 <_vfiprintf_r+0x14e>
 8016ea4:	f898 3001 	ldrb.w	r3, [r8, #1]
 8016ea8:	2b2a      	cmp	r3, #42	; 0x2a
 8016eaa:	d138      	bne.n	8016f1e <_vfiprintf_r+0x1aa>
 8016eac:	9b03      	ldr	r3, [sp, #12]
 8016eae:	1d1a      	adds	r2, r3, #4
 8016eb0:	681b      	ldr	r3, [r3, #0]
 8016eb2:	9203      	str	r2, [sp, #12]
 8016eb4:	2b00      	cmp	r3, #0
 8016eb6:	bfb8      	it	lt
 8016eb8:	f04f 33ff 	movlt.w	r3, #4294967295
 8016ebc:	f108 0802 	add.w	r8, r8, #2
 8016ec0:	9305      	str	r3, [sp, #20]
 8016ec2:	4d33      	ldr	r5, [pc, #204]	; (8016f90 <_vfiprintf_r+0x21c>)
 8016ec4:	f898 1000 	ldrb.w	r1, [r8]
 8016ec8:	2203      	movs	r2, #3
 8016eca:	4628      	mov	r0, r5
 8016ecc:	f7e9 f9a0 	bl	8000210 <memchr>
 8016ed0:	b140      	cbz	r0, 8016ee4 <_vfiprintf_r+0x170>
 8016ed2:	2340      	movs	r3, #64	; 0x40
 8016ed4:	1b40      	subs	r0, r0, r5
 8016ed6:	fa03 f000 	lsl.w	r0, r3, r0
 8016eda:	9b04      	ldr	r3, [sp, #16]
 8016edc:	4303      	orrs	r3, r0
 8016ede:	f108 0801 	add.w	r8, r8, #1
 8016ee2:	9304      	str	r3, [sp, #16]
 8016ee4:	f898 1000 	ldrb.w	r1, [r8]
 8016ee8:	482a      	ldr	r0, [pc, #168]	; (8016f94 <_vfiprintf_r+0x220>)
 8016eea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016eee:	2206      	movs	r2, #6
 8016ef0:	f108 0701 	add.w	r7, r8, #1
 8016ef4:	f7e9 f98c 	bl	8000210 <memchr>
 8016ef8:	2800      	cmp	r0, #0
 8016efa:	d037      	beq.n	8016f6c <_vfiprintf_r+0x1f8>
 8016efc:	4b26      	ldr	r3, [pc, #152]	; (8016f98 <_vfiprintf_r+0x224>)
 8016efe:	bb1b      	cbnz	r3, 8016f48 <_vfiprintf_r+0x1d4>
 8016f00:	9b03      	ldr	r3, [sp, #12]
 8016f02:	3307      	adds	r3, #7
 8016f04:	f023 0307 	bic.w	r3, r3, #7
 8016f08:	3308      	adds	r3, #8
 8016f0a:	9303      	str	r3, [sp, #12]
 8016f0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016f0e:	444b      	add	r3, r9
 8016f10:	9309      	str	r3, [sp, #36]	; 0x24
 8016f12:	e750      	b.n	8016db6 <_vfiprintf_r+0x42>
 8016f14:	fb05 3202 	mla	r2, r5, r2, r3
 8016f18:	2001      	movs	r0, #1
 8016f1a:	4688      	mov	r8, r1
 8016f1c:	e78a      	b.n	8016e34 <_vfiprintf_r+0xc0>
 8016f1e:	2300      	movs	r3, #0
 8016f20:	f108 0801 	add.w	r8, r8, #1
 8016f24:	9305      	str	r3, [sp, #20]
 8016f26:	4619      	mov	r1, r3
 8016f28:	250a      	movs	r5, #10
 8016f2a:	4640      	mov	r0, r8
 8016f2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016f30:	3a30      	subs	r2, #48	; 0x30
 8016f32:	2a09      	cmp	r2, #9
 8016f34:	d903      	bls.n	8016f3e <_vfiprintf_r+0x1ca>
 8016f36:	2b00      	cmp	r3, #0
 8016f38:	d0c3      	beq.n	8016ec2 <_vfiprintf_r+0x14e>
 8016f3a:	9105      	str	r1, [sp, #20]
 8016f3c:	e7c1      	b.n	8016ec2 <_vfiprintf_r+0x14e>
 8016f3e:	fb05 2101 	mla	r1, r5, r1, r2
 8016f42:	2301      	movs	r3, #1
 8016f44:	4680      	mov	r8, r0
 8016f46:	e7f0      	b.n	8016f2a <_vfiprintf_r+0x1b6>
 8016f48:	ab03      	add	r3, sp, #12
 8016f4a:	9300      	str	r3, [sp, #0]
 8016f4c:	4622      	mov	r2, r4
 8016f4e:	4b13      	ldr	r3, [pc, #76]	; (8016f9c <_vfiprintf_r+0x228>)
 8016f50:	a904      	add	r1, sp, #16
 8016f52:	4630      	mov	r0, r6
 8016f54:	f7fb fcf4 	bl	8012940 <_printf_float>
 8016f58:	f1b0 3fff 	cmp.w	r0, #4294967295
 8016f5c:	4681      	mov	r9, r0
 8016f5e:	d1d5      	bne.n	8016f0c <_vfiprintf_r+0x198>
 8016f60:	89a3      	ldrh	r3, [r4, #12]
 8016f62:	065b      	lsls	r3, r3, #25
 8016f64:	f53f af7e 	bmi.w	8016e64 <_vfiprintf_r+0xf0>
 8016f68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016f6a:	e77d      	b.n	8016e68 <_vfiprintf_r+0xf4>
 8016f6c:	ab03      	add	r3, sp, #12
 8016f6e:	9300      	str	r3, [sp, #0]
 8016f70:	4622      	mov	r2, r4
 8016f72:	4b0a      	ldr	r3, [pc, #40]	; (8016f9c <_vfiprintf_r+0x228>)
 8016f74:	a904      	add	r1, sp, #16
 8016f76:	4630      	mov	r0, r6
 8016f78:	f7fb ff98 	bl	8012eac <_printf_i>
 8016f7c:	e7ec      	b.n	8016f58 <_vfiprintf_r+0x1e4>
 8016f7e:	bf00      	nop
 8016f80:	08017de8 	.word	0x08017de8
 8016f84:	08017f34 	.word	0x08017f34
 8016f88:	08017e08 	.word	0x08017e08
 8016f8c:	08017dc8 	.word	0x08017dc8
 8016f90:	08017f3a 	.word	0x08017f3a
 8016f94:	08017f3e 	.word	0x08017f3e
 8016f98:	08012941 	.word	0x08012941
 8016f9c:	08016d4f 	.word	0x08016d4f

08016fa0 <_scanf_chars>:
 8016fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016fa4:	4615      	mov	r5, r2
 8016fa6:	688a      	ldr	r2, [r1, #8]
 8016fa8:	4680      	mov	r8, r0
 8016faa:	460c      	mov	r4, r1
 8016fac:	b932      	cbnz	r2, 8016fbc <_scanf_chars+0x1c>
 8016fae:	698a      	ldr	r2, [r1, #24]
 8016fb0:	2a00      	cmp	r2, #0
 8016fb2:	bf14      	ite	ne
 8016fb4:	f04f 32ff 	movne.w	r2, #4294967295
 8016fb8:	2201      	moveq	r2, #1
 8016fba:	608a      	str	r2, [r1, #8]
 8016fbc:	6822      	ldr	r2, [r4, #0]
 8016fbe:	06d1      	lsls	r1, r2, #27
 8016fc0:	bf5f      	itttt	pl
 8016fc2:	681a      	ldrpl	r2, [r3, #0]
 8016fc4:	1d11      	addpl	r1, r2, #4
 8016fc6:	6019      	strpl	r1, [r3, #0]
 8016fc8:	6817      	ldrpl	r7, [r2, #0]
 8016fca:	2600      	movs	r6, #0
 8016fcc:	69a3      	ldr	r3, [r4, #24]
 8016fce:	b1db      	cbz	r3, 8017008 <_scanf_chars+0x68>
 8016fd0:	2b01      	cmp	r3, #1
 8016fd2:	d107      	bne.n	8016fe4 <_scanf_chars+0x44>
 8016fd4:	682b      	ldr	r3, [r5, #0]
 8016fd6:	6962      	ldr	r2, [r4, #20]
 8016fd8:	781b      	ldrb	r3, [r3, #0]
 8016fda:	5cd3      	ldrb	r3, [r2, r3]
 8016fdc:	b9a3      	cbnz	r3, 8017008 <_scanf_chars+0x68>
 8016fde:	2e00      	cmp	r6, #0
 8016fe0:	d132      	bne.n	8017048 <_scanf_chars+0xa8>
 8016fe2:	e006      	b.n	8016ff2 <_scanf_chars+0x52>
 8016fe4:	2b02      	cmp	r3, #2
 8016fe6:	d007      	beq.n	8016ff8 <_scanf_chars+0x58>
 8016fe8:	2e00      	cmp	r6, #0
 8016fea:	d12d      	bne.n	8017048 <_scanf_chars+0xa8>
 8016fec:	69a3      	ldr	r3, [r4, #24]
 8016fee:	2b01      	cmp	r3, #1
 8016ff0:	d12a      	bne.n	8017048 <_scanf_chars+0xa8>
 8016ff2:	2001      	movs	r0, #1
 8016ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ff8:	f7fe fe32 	bl	8015c60 <__locale_ctype_ptr>
 8016ffc:	682b      	ldr	r3, [r5, #0]
 8016ffe:	781b      	ldrb	r3, [r3, #0]
 8017000:	4418      	add	r0, r3
 8017002:	7843      	ldrb	r3, [r0, #1]
 8017004:	071b      	lsls	r3, r3, #28
 8017006:	d4ef      	bmi.n	8016fe8 <_scanf_chars+0x48>
 8017008:	6823      	ldr	r3, [r4, #0]
 801700a:	06da      	lsls	r2, r3, #27
 801700c:	bf5e      	ittt	pl
 801700e:	682b      	ldrpl	r3, [r5, #0]
 8017010:	781b      	ldrbpl	r3, [r3, #0]
 8017012:	703b      	strbpl	r3, [r7, #0]
 8017014:	682a      	ldr	r2, [r5, #0]
 8017016:	686b      	ldr	r3, [r5, #4]
 8017018:	f102 0201 	add.w	r2, r2, #1
 801701c:	602a      	str	r2, [r5, #0]
 801701e:	68a2      	ldr	r2, [r4, #8]
 8017020:	f103 33ff 	add.w	r3, r3, #4294967295
 8017024:	f102 32ff 	add.w	r2, r2, #4294967295
 8017028:	606b      	str	r3, [r5, #4]
 801702a:	f106 0601 	add.w	r6, r6, #1
 801702e:	bf58      	it	pl
 8017030:	3701      	addpl	r7, #1
 8017032:	60a2      	str	r2, [r4, #8]
 8017034:	b142      	cbz	r2, 8017048 <_scanf_chars+0xa8>
 8017036:	2b00      	cmp	r3, #0
 8017038:	dcc8      	bgt.n	8016fcc <_scanf_chars+0x2c>
 801703a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801703e:	4629      	mov	r1, r5
 8017040:	4640      	mov	r0, r8
 8017042:	4798      	blx	r3
 8017044:	2800      	cmp	r0, #0
 8017046:	d0c1      	beq.n	8016fcc <_scanf_chars+0x2c>
 8017048:	6823      	ldr	r3, [r4, #0]
 801704a:	f013 0310 	ands.w	r3, r3, #16
 801704e:	d105      	bne.n	801705c <_scanf_chars+0xbc>
 8017050:	68e2      	ldr	r2, [r4, #12]
 8017052:	3201      	adds	r2, #1
 8017054:	60e2      	str	r2, [r4, #12]
 8017056:	69a2      	ldr	r2, [r4, #24]
 8017058:	b102      	cbz	r2, 801705c <_scanf_chars+0xbc>
 801705a:	703b      	strb	r3, [r7, #0]
 801705c:	6923      	ldr	r3, [r4, #16]
 801705e:	441e      	add	r6, r3
 8017060:	6126      	str	r6, [r4, #16]
 8017062:	2000      	movs	r0, #0
 8017064:	e7c6      	b.n	8016ff4 <_scanf_chars+0x54>
	...

08017068 <_scanf_i>:
 8017068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801706c:	469a      	mov	sl, r3
 801706e:	4b74      	ldr	r3, [pc, #464]	; (8017240 <_scanf_i+0x1d8>)
 8017070:	460c      	mov	r4, r1
 8017072:	4683      	mov	fp, r0
 8017074:	4616      	mov	r6, r2
 8017076:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801707a:	b087      	sub	sp, #28
 801707c:	ab03      	add	r3, sp, #12
 801707e:	68a7      	ldr	r7, [r4, #8]
 8017080:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8017084:	4b6f      	ldr	r3, [pc, #444]	; (8017244 <_scanf_i+0x1dc>)
 8017086:	69a1      	ldr	r1, [r4, #24]
 8017088:	4a6f      	ldr	r2, [pc, #444]	; (8017248 <_scanf_i+0x1e0>)
 801708a:	2903      	cmp	r1, #3
 801708c:	bf08      	it	eq
 801708e:	461a      	moveq	r2, r3
 8017090:	1e7b      	subs	r3, r7, #1
 8017092:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8017096:	bf84      	itt	hi
 8017098:	f240 135d 	movwhi	r3, #349	; 0x15d
 801709c:	60a3      	strhi	r3, [r4, #8]
 801709e:	6823      	ldr	r3, [r4, #0]
 80170a0:	9200      	str	r2, [sp, #0]
 80170a2:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80170a6:	bf88      	it	hi
 80170a8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80170ac:	f104 091c 	add.w	r9, r4, #28
 80170b0:	6023      	str	r3, [r4, #0]
 80170b2:	bf8c      	ite	hi
 80170b4:	197f      	addhi	r7, r7, r5
 80170b6:	2700      	movls	r7, #0
 80170b8:	464b      	mov	r3, r9
 80170ba:	f04f 0800 	mov.w	r8, #0
 80170be:	9301      	str	r3, [sp, #4]
 80170c0:	6831      	ldr	r1, [r6, #0]
 80170c2:	ab03      	add	r3, sp, #12
 80170c4:	2202      	movs	r2, #2
 80170c6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80170ca:	7809      	ldrb	r1, [r1, #0]
 80170cc:	f7e9 f8a0 	bl	8000210 <memchr>
 80170d0:	9b01      	ldr	r3, [sp, #4]
 80170d2:	b330      	cbz	r0, 8017122 <_scanf_i+0xba>
 80170d4:	f1b8 0f01 	cmp.w	r8, #1
 80170d8:	d15a      	bne.n	8017190 <_scanf_i+0x128>
 80170da:	6862      	ldr	r2, [r4, #4]
 80170dc:	b92a      	cbnz	r2, 80170ea <_scanf_i+0x82>
 80170de:	6822      	ldr	r2, [r4, #0]
 80170e0:	2108      	movs	r1, #8
 80170e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80170e6:	6061      	str	r1, [r4, #4]
 80170e8:	6022      	str	r2, [r4, #0]
 80170ea:	6822      	ldr	r2, [r4, #0]
 80170ec:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80170f0:	6022      	str	r2, [r4, #0]
 80170f2:	68a2      	ldr	r2, [r4, #8]
 80170f4:	1e51      	subs	r1, r2, #1
 80170f6:	60a1      	str	r1, [r4, #8]
 80170f8:	b19a      	cbz	r2, 8017122 <_scanf_i+0xba>
 80170fa:	6832      	ldr	r2, [r6, #0]
 80170fc:	1c51      	adds	r1, r2, #1
 80170fe:	6031      	str	r1, [r6, #0]
 8017100:	7812      	ldrb	r2, [r2, #0]
 8017102:	701a      	strb	r2, [r3, #0]
 8017104:	1c5d      	adds	r5, r3, #1
 8017106:	6873      	ldr	r3, [r6, #4]
 8017108:	3b01      	subs	r3, #1
 801710a:	2b00      	cmp	r3, #0
 801710c:	6073      	str	r3, [r6, #4]
 801710e:	dc07      	bgt.n	8017120 <_scanf_i+0xb8>
 8017110:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017114:	4631      	mov	r1, r6
 8017116:	4658      	mov	r0, fp
 8017118:	4798      	blx	r3
 801711a:	2800      	cmp	r0, #0
 801711c:	f040 8086 	bne.w	801722c <_scanf_i+0x1c4>
 8017120:	462b      	mov	r3, r5
 8017122:	f108 0801 	add.w	r8, r8, #1
 8017126:	f1b8 0f03 	cmp.w	r8, #3
 801712a:	d1c8      	bne.n	80170be <_scanf_i+0x56>
 801712c:	6862      	ldr	r2, [r4, #4]
 801712e:	b90a      	cbnz	r2, 8017134 <_scanf_i+0xcc>
 8017130:	220a      	movs	r2, #10
 8017132:	6062      	str	r2, [r4, #4]
 8017134:	6862      	ldr	r2, [r4, #4]
 8017136:	4945      	ldr	r1, [pc, #276]	; (801724c <_scanf_i+0x1e4>)
 8017138:	6960      	ldr	r0, [r4, #20]
 801713a:	9301      	str	r3, [sp, #4]
 801713c:	1a89      	subs	r1, r1, r2
 801713e:	f000 f8a9 	bl	8017294 <__sccl>
 8017142:	9b01      	ldr	r3, [sp, #4]
 8017144:	f04f 0800 	mov.w	r8, #0
 8017148:	461d      	mov	r5, r3
 801714a:	68a3      	ldr	r3, [r4, #8]
 801714c:	6822      	ldr	r2, [r4, #0]
 801714e:	2b00      	cmp	r3, #0
 8017150:	d03a      	beq.n	80171c8 <_scanf_i+0x160>
 8017152:	6831      	ldr	r1, [r6, #0]
 8017154:	6960      	ldr	r0, [r4, #20]
 8017156:	f891 c000 	ldrb.w	ip, [r1]
 801715a:	f810 000c 	ldrb.w	r0, [r0, ip]
 801715e:	2800      	cmp	r0, #0
 8017160:	d032      	beq.n	80171c8 <_scanf_i+0x160>
 8017162:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8017166:	d121      	bne.n	80171ac <_scanf_i+0x144>
 8017168:	0510      	lsls	r0, r2, #20
 801716a:	d51f      	bpl.n	80171ac <_scanf_i+0x144>
 801716c:	f108 0801 	add.w	r8, r8, #1
 8017170:	b117      	cbz	r7, 8017178 <_scanf_i+0x110>
 8017172:	3301      	adds	r3, #1
 8017174:	3f01      	subs	r7, #1
 8017176:	60a3      	str	r3, [r4, #8]
 8017178:	6873      	ldr	r3, [r6, #4]
 801717a:	3b01      	subs	r3, #1
 801717c:	2b00      	cmp	r3, #0
 801717e:	6073      	str	r3, [r6, #4]
 8017180:	dd1b      	ble.n	80171ba <_scanf_i+0x152>
 8017182:	6833      	ldr	r3, [r6, #0]
 8017184:	3301      	adds	r3, #1
 8017186:	6033      	str	r3, [r6, #0]
 8017188:	68a3      	ldr	r3, [r4, #8]
 801718a:	3b01      	subs	r3, #1
 801718c:	60a3      	str	r3, [r4, #8]
 801718e:	e7dc      	b.n	801714a <_scanf_i+0xe2>
 8017190:	f1b8 0f02 	cmp.w	r8, #2
 8017194:	d1ad      	bne.n	80170f2 <_scanf_i+0x8a>
 8017196:	6822      	ldr	r2, [r4, #0]
 8017198:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801719c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80171a0:	d1bf      	bne.n	8017122 <_scanf_i+0xba>
 80171a2:	2110      	movs	r1, #16
 80171a4:	6061      	str	r1, [r4, #4]
 80171a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80171aa:	e7a1      	b.n	80170f0 <_scanf_i+0x88>
 80171ac:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80171b0:	6022      	str	r2, [r4, #0]
 80171b2:	780b      	ldrb	r3, [r1, #0]
 80171b4:	702b      	strb	r3, [r5, #0]
 80171b6:	3501      	adds	r5, #1
 80171b8:	e7de      	b.n	8017178 <_scanf_i+0x110>
 80171ba:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80171be:	4631      	mov	r1, r6
 80171c0:	4658      	mov	r0, fp
 80171c2:	4798      	blx	r3
 80171c4:	2800      	cmp	r0, #0
 80171c6:	d0df      	beq.n	8017188 <_scanf_i+0x120>
 80171c8:	6823      	ldr	r3, [r4, #0]
 80171ca:	05d9      	lsls	r1, r3, #23
 80171cc:	d50c      	bpl.n	80171e8 <_scanf_i+0x180>
 80171ce:	454d      	cmp	r5, r9
 80171d0:	d908      	bls.n	80171e4 <_scanf_i+0x17c>
 80171d2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80171d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80171da:	4632      	mov	r2, r6
 80171dc:	4658      	mov	r0, fp
 80171de:	4798      	blx	r3
 80171e0:	1e6f      	subs	r7, r5, #1
 80171e2:	463d      	mov	r5, r7
 80171e4:	454d      	cmp	r5, r9
 80171e6:	d029      	beq.n	801723c <_scanf_i+0x1d4>
 80171e8:	6822      	ldr	r2, [r4, #0]
 80171ea:	f012 0210 	ands.w	r2, r2, #16
 80171ee:	d113      	bne.n	8017218 <_scanf_i+0x1b0>
 80171f0:	702a      	strb	r2, [r5, #0]
 80171f2:	6863      	ldr	r3, [r4, #4]
 80171f4:	9e00      	ldr	r6, [sp, #0]
 80171f6:	4649      	mov	r1, r9
 80171f8:	4658      	mov	r0, fp
 80171fa:	47b0      	blx	r6
 80171fc:	f8da 3000 	ldr.w	r3, [sl]
 8017200:	6821      	ldr	r1, [r4, #0]
 8017202:	1d1a      	adds	r2, r3, #4
 8017204:	f8ca 2000 	str.w	r2, [sl]
 8017208:	f011 0f20 	tst.w	r1, #32
 801720c:	681b      	ldr	r3, [r3, #0]
 801720e:	d010      	beq.n	8017232 <_scanf_i+0x1ca>
 8017210:	6018      	str	r0, [r3, #0]
 8017212:	68e3      	ldr	r3, [r4, #12]
 8017214:	3301      	adds	r3, #1
 8017216:	60e3      	str	r3, [r4, #12]
 8017218:	eba5 0509 	sub.w	r5, r5, r9
 801721c:	44a8      	add	r8, r5
 801721e:	6925      	ldr	r5, [r4, #16]
 8017220:	4445      	add	r5, r8
 8017222:	6125      	str	r5, [r4, #16]
 8017224:	2000      	movs	r0, #0
 8017226:	b007      	add	sp, #28
 8017228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801722c:	f04f 0800 	mov.w	r8, #0
 8017230:	e7ca      	b.n	80171c8 <_scanf_i+0x160>
 8017232:	07ca      	lsls	r2, r1, #31
 8017234:	bf4c      	ite	mi
 8017236:	8018      	strhmi	r0, [r3, #0]
 8017238:	6018      	strpl	r0, [r3, #0]
 801723a:	e7ea      	b.n	8017212 <_scanf_i+0x1aa>
 801723c:	2001      	movs	r0, #1
 801723e:	e7f2      	b.n	8017226 <_scanf_i+0x1be>
 8017240:	08017a8c 	.word	0x08017a8c
 8017244:	08014469 	.word	0x08014469
 8017248:	08017411 	.word	0x08017411
 801724c:	08017f55 	.word	0x08017f55

08017250 <_read_r>:
 8017250:	b538      	push	{r3, r4, r5, lr}
 8017252:	4c07      	ldr	r4, [pc, #28]	; (8017270 <_read_r+0x20>)
 8017254:	4605      	mov	r5, r0
 8017256:	4608      	mov	r0, r1
 8017258:	4611      	mov	r1, r2
 801725a:	2200      	movs	r2, #0
 801725c:	6022      	str	r2, [r4, #0]
 801725e:	461a      	mov	r2, r3
 8017260:	f7ee f8f6 	bl	8005450 <_read>
 8017264:	1c43      	adds	r3, r0, #1
 8017266:	d102      	bne.n	801726e <_read_r+0x1e>
 8017268:	6823      	ldr	r3, [r4, #0]
 801726a:	b103      	cbz	r3, 801726e <_read_r+0x1e>
 801726c:	602b      	str	r3, [r5, #0]
 801726e:	bd38      	pop	{r3, r4, r5, pc}
 8017270:	2003bdbc 	.word	0x2003bdbc

08017274 <_sbrk_r>:
 8017274:	b538      	push	{r3, r4, r5, lr}
 8017276:	4c06      	ldr	r4, [pc, #24]	; (8017290 <_sbrk_r+0x1c>)
 8017278:	2300      	movs	r3, #0
 801727a:	4605      	mov	r5, r0
 801727c:	4608      	mov	r0, r1
 801727e:	6023      	str	r3, [r4, #0]
 8017280:	f7ee f938 	bl	80054f4 <_sbrk>
 8017284:	1c43      	adds	r3, r0, #1
 8017286:	d102      	bne.n	801728e <_sbrk_r+0x1a>
 8017288:	6823      	ldr	r3, [r4, #0]
 801728a:	b103      	cbz	r3, 801728e <_sbrk_r+0x1a>
 801728c:	602b      	str	r3, [r5, #0]
 801728e:	bd38      	pop	{r3, r4, r5, pc}
 8017290:	2003bdbc 	.word	0x2003bdbc

08017294 <__sccl>:
 8017294:	b570      	push	{r4, r5, r6, lr}
 8017296:	780b      	ldrb	r3, [r1, #0]
 8017298:	2b5e      	cmp	r3, #94	; 0x5e
 801729a:	bf13      	iteet	ne
 801729c:	1c4a      	addne	r2, r1, #1
 801729e:	1c8a      	addeq	r2, r1, #2
 80172a0:	784b      	ldrbeq	r3, [r1, #1]
 80172a2:	2100      	movne	r1, #0
 80172a4:	bf08      	it	eq
 80172a6:	2101      	moveq	r1, #1
 80172a8:	1e44      	subs	r4, r0, #1
 80172aa:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 80172ae:	f804 1f01 	strb.w	r1, [r4, #1]!
 80172b2:	42ac      	cmp	r4, r5
 80172b4:	d1fb      	bne.n	80172ae <__sccl+0x1a>
 80172b6:	b913      	cbnz	r3, 80172be <__sccl+0x2a>
 80172b8:	3a01      	subs	r2, #1
 80172ba:	4610      	mov	r0, r2
 80172bc:	bd70      	pop	{r4, r5, r6, pc}
 80172be:	f081 0401 	eor.w	r4, r1, #1
 80172c2:	54c4      	strb	r4, [r0, r3]
 80172c4:	1c51      	adds	r1, r2, #1
 80172c6:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 80172ca:	2d2d      	cmp	r5, #45	; 0x2d
 80172cc:	f101 36ff 	add.w	r6, r1, #4294967295
 80172d0:	460a      	mov	r2, r1
 80172d2:	d006      	beq.n	80172e2 <__sccl+0x4e>
 80172d4:	2d5d      	cmp	r5, #93	; 0x5d
 80172d6:	d0f0      	beq.n	80172ba <__sccl+0x26>
 80172d8:	b90d      	cbnz	r5, 80172de <__sccl+0x4a>
 80172da:	4632      	mov	r2, r6
 80172dc:	e7ed      	b.n	80172ba <__sccl+0x26>
 80172de:	462b      	mov	r3, r5
 80172e0:	e7ef      	b.n	80172c2 <__sccl+0x2e>
 80172e2:	780e      	ldrb	r6, [r1, #0]
 80172e4:	2e5d      	cmp	r6, #93	; 0x5d
 80172e6:	d0fa      	beq.n	80172de <__sccl+0x4a>
 80172e8:	42b3      	cmp	r3, r6
 80172ea:	dcf8      	bgt.n	80172de <__sccl+0x4a>
 80172ec:	3301      	adds	r3, #1
 80172ee:	429e      	cmp	r6, r3
 80172f0:	54c4      	strb	r4, [r0, r3]
 80172f2:	dcfb      	bgt.n	80172ec <__sccl+0x58>
 80172f4:	3102      	adds	r1, #2
 80172f6:	e7e6      	b.n	80172c6 <__sccl+0x32>

080172f8 <strncmp>:
 80172f8:	b510      	push	{r4, lr}
 80172fa:	b16a      	cbz	r2, 8017318 <strncmp+0x20>
 80172fc:	3901      	subs	r1, #1
 80172fe:	1884      	adds	r4, r0, r2
 8017300:	f810 3b01 	ldrb.w	r3, [r0], #1
 8017304:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8017308:	4293      	cmp	r3, r2
 801730a:	d103      	bne.n	8017314 <strncmp+0x1c>
 801730c:	42a0      	cmp	r0, r4
 801730e:	d001      	beq.n	8017314 <strncmp+0x1c>
 8017310:	2b00      	cmp	r3, #0
 8017312:	d1f5      	bne.n	8017300 <strncmp+0x8>
 8017314:	1a98      	subs	r0, r3, r2
 8017316:	bd10      	pop	{r4, pc}
 8017318:	4610      	mov	r0, r2
 801731a:	e7fc      	b.n	8017316 <strncmp+0x1e>

0801731c <_strtoul_l.isra.0>:
 801731c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017320:	4680      	mov	r8, r0
 8017322:	4689      	mov	r9, r1
 8017324:	4692      	mov	sl, r2
 8017326:	461e      	mov	r6, r3
 8017328:	460f      	mov	r7, r1
 801732a:	463d      	mov	r5, r7
 801732c:	9808      	ldr	r0, [sp, #32]
 801732e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017332:	f7fe fc91 	bl	8015c58 <__locale_ctype_ptr_l>
 8017336:	4420      	add	r0, r4
 8017338:	7843      	ldrb	r3, [r0, #1]
 801733a:	f013 0308 	ands.w	r3, r3, #8
 801733e:	d130      	bne.n	80173a2 <_strtoul_l.isra.0+0x86>
 8017340:	2c2d      	cmp	r4, #45	; 0x2d
 8017342:	d130      	bne.n	80173a6 <_strtoul_l.isra.0+0x8a>
 8017344:	787c      	ldrb	r4, [r7, #1]
 8017346:	1cbd      	adds	r5, r7, #2
 8017348:	2101      	movs	r1, #1
 801734a:	2e00      	cmp	r6, #0
 801734c:	d05c      	beq.n	8017408 <_strtoul_l.isra.0+0xec>
 801734e:	2e10      	cmp	r6, #16
 8017350:	d109      	bne.n	8017366 <_strtoul_l.isra.0+0x4a>
 8017352:	2c30      	cmp	r4, #48	; 0x30
 8017354:	d107      	bne.n	8017366 <_strtoul_l.isra.0+0x4a>
 8017356:	782b      	ldrb	r3, [r5, #0]
 8017358:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801735c:	2b58      	cmp	r3, #88	; 0x58
 801735e:	d14e      	bne.n	80173fe <_strtoul_l.isra.0+0xe2>
 8017360:	786c      	ldrb	r4, [r5, #1]
 8017362:	2610      	movs	r6, #16
 8017364:	3502      	adds	r5, #2
 8017366:	f04f 32ff 	mov.w	r2, #4294967295
 801736a:	2300      	movs	r3, #0
 801736c:	fbb2 f2f6 	udiv	r2, r2, r6
 8017370:	fb06 fc02 	mul.w	ip, r6, r2
 8017374:	ea6f 0c0c 	mvn.w	ip, ip
 8017378:	4618      	mov	r0, r3
 801737a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801737e:	2f09      	cmp	r7, #9
 8017380:	d817      	bhi.n	80173b2 <_strtoul_l.isra.0+0x96>
 8017382:	463c      	mov	r4, r7
 8017384:	42a6      	cmp	r6, r4
 8017386:	dd23      	ble.n	80173d0 <_strtoul_l.isra.0+0xb4>
 8017388:	2b00      	cmp	r3, #0
 801738a:	db1e      	blt.n	80173ca <_strtoul_l.isra.0+0xae>
 801738c:	4282      	cmp	r2, r0
 801738e:	d31c      	bcc.n	80173ca <_strtoul_l.isra.0+0xae>
 8017390:	d101      	bne.n	8017396 <_strtoul_l.isra.0+0x7a>
 8017392:	45a4      	cmp	ip, r4
 8017394:	db19      	blt.n	80173ca <_strtoul_l.isra.0+0xae>
 8017396:	fb00 4006 	mla	r0, r0, r6, r4
 801739a:	2301      	movs	r3, #1
 801739c:	f815 4b01 	ldrb.w	r4, [r5], #1
 80173a0:	e7eb      	b.n	801737a <_strtoul_l.isra.0+0x5e>
 80173a2:	462f      	mov	r7, r5
 80173a4:	e7c1      	b.n	801732a <_strtoul_l.isra.0+0xe>
 80173a6:	2c2b      	cmp	r4, #43	; 0x2b
 80173a8:	bf04      	itt	eq
 80173aa:	1cbd      	addeq	r5, r7, #2
 80173ac:	787c      	ldrbeq	r4, [r7, #1]
 80173ae:	4619      	mov	r1, r3
 80173b0:	e7cb      	b.n	801734a <_strtoul_l.isra.0+0x2e>
 80173b2:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80173b6:	2f19      	cmp	r7, #25
 80173b8:	d801      	bhi.n	80173be <_strtoul_l.isra.0+0xa2>
 80173ba:	3c37      	subs	r4, #55	; 0x37
 80173bc:	e7e2      	b.n	8017384 <_strtoul_l.isra.0+0x68>
 80173be:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80173c2:	2f19      	cmp	r7, #25
 80173c4:	d804      	bhi.n	80173d0 <_strtoul_l.isra.0+0xb4>
 80173c6:	3c57      	subs	r4, #87	; 0x57
 80173c8:	e7dc      	b.n	8017384 <_strtoul_l.isra.0+0x68>
 80173ca:	f04f 33ff 	mov.w	r3, #4294967295
 80173ce:	e7e5      	b.n	801739c <_strtoul_l.isra.0+0x80>
 80173d0:	2b00      	cmp	r3, #0
 80173d2:	da09      	bge.n	80173e8 <_strtoul_l.isra.0+0xcc>
 80173d4:	2322      	movs	r3, #34	; 0x22
 80173d6:	f8c8 3000 	str.w	r3, [r8]
 80173da:	f04f 30ff 	mov.w	r0, #4294967295
 80173de:	f1ba 0f00 	cmp.w	sl, #0
 80173e2:	d107      	bne.n	80173f4 <_strtoul_l.isra.0+0xd8>
 80173e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80173e8:	b101      	cbz	r1, 80173ec <_strtoul_l.isra.0+0xd0>
 80173ea:	4240      	negs	r0, r0
 80173ec:	f1ba 0f00 	cmp.w	sl, #0
 80173f0:	d0f8      	beq.n	80173e4 <_strtoul_l.isra.0+0xc8>
 80173f2:	b10b      	cbz	r3, 80173f8 <_strtoul_l.isra.0+0xdc>
 80173f4:	f105 39ff 	add.w	r9, r5, #4294967295
 80173f8:	f8ca 9000 	str.w	r9, [sl]
 80173fc:	e7f2      	b.n	80173e4 <_strtoul_l.isra.0+0xc8>
 80173fe:	2430      	movs	r4, #48	; 0x30
 8017400:	2e00      	cmp	r6, #0
 8017402:	d1b0      	bne.n	8017366 <_strtoul_l.isra.0+0x4a>
 8017404:	2608      	movs	r6, #8
 8017406:	e7ae      	b.n	8017366 <_strtoul_l.isra.0+0x4a>
 8017408:	2c30      	cmp	r4, #48	; 0x30
 801740a:	d0a4      	beq.n	8017356 <_strtoul_l.isra.0+0x3a>
 801740c:	260a      	movs	r6, #10
 801740e:	e7aa      	b.n	8017366 <_strtoul_l.isra.0+0x4a>

08017410 <_strtoul_r>:
 8017410:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017412:	4c06      	ldr	r4, [pc, #24]	; (801742c <_strtoul_r+0x1c>)
 8017414:	4d06      	ldr	r5, [pc, #24]	; (8017430 <_strtoul_r+0x20>)
 8017416:	6824      	ldr	r4, [r4, #0]
 8017418:	6a24      	ldr	r4, [r4, #32]
 801741a:	2c00      	cmp	r4, #0
 801741c:	bf08      	it	eq
 801741e:	462c      	moveq	r4, r5
 8017420:	9400      	str	r4, [sp, #0]
 8017422:	f7ff ff7b 	bl	801731c <_strtoul_l.isra.0>
 8017426:	b003      	add	sp, #12
 8017428:	bd30      	pop	{r4, r5, pc}
 801742a:	bf00      	nop
 801742c:	2000000c 	.word	0x2000000c
 8017430:	20000070 	.word	0x20000070

08017434 <__submore>:
 8017434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017438:	460c      	mov	r4, r1
 801743a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801743c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017440:	4299      	cmp	r1, r3
 8017442:	d11d      	bne.n	8017480 <__submore+0x4c>
 8017444:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8017448:	f7ff f914 	bl	8016674 <_malloc_r>
 801744c:	b918      	cbnz	r0, 8017456 <__submore+0x22>
 801744e:	f04f 30ff 	mov.w	r0, #4294967295
 8017452:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017456:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801745a:	63a3      	str	r3, [r4, #56]	; 0x38
 801745c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8017460:	6360      	str	r0, [r4, #52]	; 0x34
 8017462:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8017466:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801746a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801746e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8017472:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8017476:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801747a:	6020      	str	r0, [r4, #0]
 801747c:	2000      	movs	r0, #0
 801747e:	e7e8      	b.n	8017452 <__submore+0x1e>
 8017480:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8017482:	0077      	lsls	r7, r6, #1
 8017484:	463a      	mov	r2, r7
 8017486:	f000 f85a 	bl	801753e <_realloc_r>
 801748a:	4605      	mov	r5, r0
 801748c:	2800      	cmp	r0, #0
 801748e:	d0de      	beq.n	801744e <__submore+0x1a>
 8017490:	eb00 0806 	add.w	r8, r0, r6
 8017494:	4601      	mov	r1, r0
 8017496:	4632      	mov	r2, r6
 8017498:	4640      	mov	r0, r8
 801749a:	f7fb f9a9 	bl	80127f0 <memcpy>
 801749e:	f8c4 8000 	str.w	r8, [r4]
 80174a2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80174a6:	e7e9      	b.n	801747c <__submore+0x48>

080174a8 <__ascii_wctomb>:
 80174a8:	b149      	cbz	r1, 80174be <__ascii_wctomb+0x16>
 80174aa:	2aff      	cmp	r2, #255	; 0xff
 80174ac:	bf85      	ittet	hi
 80174ae:	238a      	movhi	r3, #138	; 0x8a
 80174b0:	6003      	strhi	r3, [r0, #0]
 80174b2:	700a      	strbls	r2, [r1, #0]
 80174b4:	f04f 30ff 	movhi.w	r0, #4294967295
 80174b8:	bf98      	it	ls
 80174ba:	2001      	movls	r0, #1
 80174bc:	4770      	bx	lr
 80174be:	4608      	mov	r0, r1
 80174c0:	4770      	bx	lr
	...

080174c4 <_fstat_r>:
 80174c4:	b538      	push	{r3, r4, r5, lr}
 80174c6:	4c07      	ldr	r4, [pc, #28]	; (80174e4 <_fstat_r+0x20>)
 80174c8:	2300      	movs	r3, #0
 80174ca:	4605      	mov	r5, r0
 80174cc:	4608      	mov	r0, r1
 80174ce:	4611      	mov	r1, r2
 80174d0:	6023      	str	r3, [r4, #0]
 80174d2:	f7ed ffe6 	bl	80054a2 <_fstat>
 80174d6:	1c43      	adds	r3, r0, #1
 80174d8:	d102      	bne.n	80174e0 <_fstat_r+0x1c>
 80174da:	6823      	ldr	r3, [r4, #0]
 80174dc:	b103      	cbz	r3, 80174e0 <_fstat_r+0x1c>
 80174de:	602b      	str	r3, [r5, #0]
 80174e0:	bd38      	pop	{r3, r4, r5, pc}
 80174e2:	bf00      	nop
 80174e4:	2003bdbc 	.word	0x2003bdbc

080174e8 <_isatty_r>:
 80174e8:	b538      	push	{r3, r4, r5, lr}
 80174ea:	4c06      	ldr	r4, [pc, #24]	; (8017504 <_isatty_r+0x1c>)
 80174ec:	2300      	movs	r3, #0
 80174ee:	4605      	mov	r5, r0
 80174f0:	4608      	mov	r0, r1
 80174f2:	6023      	str	r3, [r4, #0]
 80174f4:	f7ed ffe5 	bl	80054c2 <_isatty>
 80174f8:	1c43      	adds	r3, r0, #1
 80174fa:	d102      	bne.n	8017502 <_isatty_r+0x1a>
 80174fc:	6823      	ldr	r3, [r4, #0]
 80174fe:	b103      	cbz	r3, 8017502 <_isatty_r+0x1a>
 8017500:	602b      	str	r3, [r5, #0]
 8017502:	bd38      	pop	{r3, r4, r5, pc}
 8017504:	2003bdbc 	.word	0x2003bdbc

08017508 <memmove>:
 8017508:	4288      	cmp	r0, r1
 801750a:	b510      	push	{r4, lr}
 801750c:	eb01 0302 	add.w	r3, r1, r2
 8017510:	d807      	bhi.n	8017522 <memmove+0x1a>
 8017512:	1e42      	subs	r2, r0, #1
 8017514:	4299      	cmp	r1, r3
 8017516:	d00a      	beq.n	801752e <memmove+0x26>
 8017518:	f811 4b01 	ldrb.w	r4, [r1], #1
 801751c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8017520:	e7f8      	b.n	8017514 <memmove+0xc>
 8017522:	4283      	cmp	r3, r0
 8017524:	d9f5      	bls.n	8017512 <memmove+0xa>
 8017526:	1881      	adds	r1, r0, r2
 8017528:	1ad2      	subs	r2, r2, r3
 801752a:	42d3      	cmn	r3, r2
 801752c:	d100      	bne.n	8017530 <memmove+0x28>
 801752e:	bd10      	pop	{r4, pc}
 8017530:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017534:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8017538:	e7f7      	b.n	801752a <memmove+0x22>

0801753a <__malloc_lock>:
 801753a:	4770      	bx	lr

0801753c <__malloc_unlock>:
 801753c:	4770      	bx	lr

0801753e <_realloc_r>:
 801753e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017540:	4607      	mov	r7, r0
 8017542:	4614      	mov	r4, r2
 8017544:	460e      	mov	r6, r1
 8017546:	b921      	cbnz	r1, 8017552 <_realloc_r+0x14>
 8017548:	4611      	mov	r1, r2
 801754a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801754e:	f7ff b891 	b.w	8016674 <_malloc_r>
 8017552:	b922      	cbnz	r2, 801755e <_realloc_r+0x20>
 8017554:	f7ff f840 	bl	80165d8 <_free_r>
 8017558:	4625      	mov	r5, r4
 801755a:	4628      	mov	r0, r5
 801755c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801755e:	f000 f814 	bl	801758a <_malloc_usable_size_r>
 8017562:	42a0      	cmp	r0, r4
 8017564:	d20f      	bcs.n	8017586 <_realloc_r+0x48>
 8017566:	4621      	mov	r1, r4
 8017568:	4638      	mov	r0, r7
 801756a:	f7ff f883 	bl	8016674 <_malloc_r>
 801756e:	4605      	mov	r5, r0
 8017570:	2800      	cmp	r0, #0
 8017572:	d0f2      	beq.n	801755a <_realloc_r+0x1c>
 8017574:	4631      	mov	r1, r6
 8017576:	4622      	mov	r2, r4
 8017578:	f7fb f93a 	bl	80127f0 <memcpy>
 801757c:	4631      	mov	r1, r6
 801757e:	4638      	mov	r0, r7
 8017580:	f7ff f82a 	bl	80165d8 <_free_r>
 8017584:	e7e9      	b.n	801755a <_realloc_r+0x1c>
 8017586:	4635      	mov	r5, r6
 8017588:	e7e7      	b.n	801755a <_realloc_r+0x1c>

0801758a <_malloc_usable_size_r>:
 801758a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801758e:	1f18      	subs	r0, r3, #4
 8017590:	2b00      	cmp	r3, #0
 8017592:	bfbc      	itt	lt
 8017594:	580b      	ldrlt	r3, [r1, r0]
 8017596:	18c0      	addlt	r0, r0, r3
 8017598:	4770      	bx	lr
	...

0801759c <_init>:
 801759c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801759e:	bf00      	nop
 80175a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80175a2:	bc08      	pop	{r3}
 80175a4:	469e      	mov	lr, r3
 80175a6:	4770      	bx	lr

080175a8 <_fini>:
 80175a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80175aa:	bf00      	nop
 80175ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80175ae:	bc08      	pop	{r3}
 80175b0:	469e      	mov	lr, r3
 80175b2:	4770      	bx	lr
