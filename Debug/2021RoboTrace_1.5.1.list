
2021RoboTrace_1.5.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000170b4  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b94  08017278  08017278  00027278  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017e0c  08017e0c  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  08017e0c  08017e0c  00027e0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017e14  08017e14  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08017e14  08017e14  00027e14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017e1c  08017e1c  00027e1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08017e20  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00023c24  200001e0  08017ffc  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20023e04  08017ffc  00033e04  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00033233  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000070b7  00000000  00000000  0006343f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002080  00000000  00000000  0006a4f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001dd0  00000000  00000000  0006c578  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00036358  00000000  00000000  0006e348  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00023d7e  00000000  00000000  000a46a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010df26  00000000  00000000  000c841e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001d6344  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009ea4  00000000  00000000  001d63c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0801725c 	.word	0x0801725c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	0801725c 	.word	0x0801725c

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <lcd_cmd>:

extern I2C_HandleTypeDef hi2c1;

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	733b      	strb	r3, [r7, #12]
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txcmd,2,100);
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	217c      	movs	r1, #124	; 0x7c
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <lcd_cmd+0x2c>)
 8000fd8:	f006 fb06 	bl	80075e8 <HAL_I2C_Master_Transmit>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20021990 	.word	0x20021990

08000fe8 <lcd_data>:

void lcd_data(uint8_t data) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 8000ff2:	2340      	movs	r3, #64	; 0x40
 8000ff4:	733b      	strb	r3, [r7, #12]
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txdata,2,100);
 8000ffa:	f107 020c 	add.w	r2, r7, #12
 8000ffe:	2364      	movs	r3, #100	; 0x64
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2302      	movs	r3, #2
 8001004:	217c      	movs	r1, #124	; 0x7c
 8001006:	4803      	ldr	r0, [pc, #12]	; (8001014 <lcd_data+0x2c>)
 8001008:	f006 faee 	bl	80075e8 <HAL_I2C_Master_Transmit>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20021990 	.word	0x20021990

08001018 <lcd_init>:

void lcd_init(){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
 800101c:	2201      	movs	r2, #1
 800101e:	2110      	movs	r1, #16
 8001020:	481e      	ldr	r0, [pc, #120]	; (800109c <lcd_init+0x84>)
 8001022:	f006 f977 	bl	8007314 <HAL_GPIO_WritePin>
	HAL_Delay(40);
 8001026:	2028      	movs	r0, #40	; 0x28
 8001028:	f004 fede 	bl	8005de8 <HAL_Delay>
	lcd_cmd(0x38);
 800102c:	2038      	movs	r0, #56	; 0x38
 800102e:	f7ff ffc3 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f004 fed8 	bl	8005de8 <HAL_Delay>
	lcd_cmd(0x39);
 8001038:	2039      	movs	r0, #57	; 0x39
 800103a:	f7ff ffbd 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800103e:	2001      	movs	r0, #1
 8001040:	f004 fed2 	bl	8005de8 <HAL_Delay>
	lcd_cmd(0x14);
 8001044:	2014      	movs	r0, #20
 8001046:	f7ff ffb7 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f004 fecc 	bl	8005de8 <HAL_Delay>
	lcd_cmd(0x70);
 8001050:	2070      	movs	r0, #112	; 0x70
 8001052:	f7ff ffb1 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f004 fec6 	bl	8005de8 <HAL_Delay>
	lcd_cmd(0x56);
 800105c:	2056      	movs	r0, #86	; 0x56
 800105e:	f7ff ffab 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f004 fec0 	bl	8005de8 <HAL_Delay>
	lcd_cmd(0x6C);
 8001068:	206c      	movs	r0, #108	; 0x6c
 800106a:	f7ff ffa5 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(200);
 800106e:	20c8      	movs	r0, #200	; 0xc8
 8001070:	f004 feba 	bl	8005de8 <HAL_Delay>
	lcd_cmd(0x38);
 8001074:	2038      	movs	r0, #56	; 0x38
 8001076:	f7ff ff9f 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800107a:	2001      	movs	r0, #1
 800107c:	f004 feb4 	bl	8005de8 <HAL_Delay>
	lcd_cmd(0x0C);
 8001080:	200c      	movs	r0, #12
 8001082:	f7ff ff99 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001086:	2001      	movs	r0, #1
 8001088:	f004 feae 	bl	8005de8 <HAL_Delay>
	lcd_cmd(0x01);
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff ff93 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001092:	2001      	movs	r0, #1
 8001094:	f004 fea8 	bl	8005de8 <HAL_Delay>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020000 	.word	0x40020000

080010a0 <lcd_clear>:

void lcd_clear(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff87 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f004 fe9c 	bl	8005de8 <HAL_Delay>
	lcd_cmd(0x02);
 80010b0:	2002      	movs	r0, #2
 80010b2:	f7ff ff81 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f004 fe96 	bl	8005de8 <HAL_Delay>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <lcd_locate>:

void lcd_locate(int x, int y) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3302      	adds	r3, #2
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	019b      	lsls	r3, r3, #6
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4413      	add	r3, r2
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff6b 	bl	8000fb8 <lcd_cmd>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <lcd_print>:

void lcd_print(const char *str) {
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 80010f2:	e007      	b.n	8001104 <lcd_print+0x1a>
	{
			lcd_data(*str);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff75 	bl	8000fe8 <lcd_data>
			str++;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3301      	adds	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f3      	bne.n	80010f4 <lcd_print+0xa>
	}
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <lcd_printf>:

short lcd_printf(const char *format, ...) {
 8001114:	b40f      	push	{r0, r1, r2, r3}
 8001116:	b580      	push	{r7, lr}
 8001118:	b088      	sub	sp, #32
 800111a:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

  va_start(argptr, format);
 800111c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001120:	61bb      	str	r3, [r7, #24]
  ret = vsprintf(lcd_bff, format, argptr);
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001128:	4618      	mov	r0, r3
 800112a:	f012 ffe5 	bl	80140f8 <vsiprintf>
 800112e:	4603      	mov	r3, r0
 8001130:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 8001132:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001136:	2b00      	cmp	r3, #0
 8001138:	dd03      	ble.n	8001142 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ffd4 	bl	80010ea <lcd_print>
	}

	return ret;
 8001142:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001150:	b004      	add	sp, #16
 8001152:	4770      	bx	lr

08001154 <_ZN7EncoderC1Ev>:

float monitor_distance;
float monitor_cnt_l;
float monitor_cnt_r;

Encoder::Encoder() : cnt_l_(0), cnt_r_(0), distance_(0), total_cnt_l_(0), total_cnt_r_(0), total_distance_(0){}
 8001154:	b490      	push	{r4, r7}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	f04f 0300 	mov.w	r3, #0
 8001162:	f04f 0400 	mov.w	r4, #0
 8001166:	e9c2 3400 	strd	r3, r4, [r2]
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	f04f 0300 	mov.w	r3, #0
 8001170:	f04f 0400 	mov.w	r4, #0
 8001174:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8001178:	687a      	ldr	r2, [r7, #4]
 800117a:	f04f 0300 	mov.w	r3, #0
 800117e:	f04f 0400 	mov.w	r4, #0
 8001182:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	f04f 0300 	mov.w	r3, #0
 800118c:	f04f 0400 	mov.w	r4, #0
 8001190:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8001194:	687a      	ldr	r2, [r7, #4]
 8001196:	f04f 0300 	mov.w	r3, #0
 800119a:	f04f 0400 	mov.w	r4, #0
 800119e:	e9c2 3408 	strd	r3, r4, [r2, #32]
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	f04f 0300 	mov.w	r3, #0
 80011a8:	f04f 0400 	mov.w	r4, #0
 80011ac:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	4618      	mov	r0, r3
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bc90      	pop	{r4, r7}
 80011ba:	4770      	bx	lr

080011bc <_ZN7Encoder4initEv>:

void Encoder::init()
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 80011c4:	213c      	movs	r1, #60	; 0x3c
 80011c6:	4809      	ldr	r0, [pc, #36]	; (80011ec <_ZN7Encoder4initEv+0x30>)
 80011c8:	f00a f8a6 	bl	800b318 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 80011cc:	213c      	movs	r1, #60	; 0x3c
 80011ce:	4808      	ldr	r0, [pc, #32]	; (80011f0 <_ZN7Encoder4initEv+0x34>)
 80011d0:	f00a f8a2 	bl	800b318 <HAL_TIM_Encoder_Start>
	TIM1 -> CNT = CNT_OFFSET;
 80011d4:	4b07      	ldr	r3, [pc, #28]	; (80011f4 <_ZN7Encoder4initEv+0x38>)
 80011d6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011da:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 80011dc:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <_ZN7Encoder4initEv+0x3c>)
 80011de:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011e2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80011e4:	bf00      	nop
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20021be4 	.word	0x20021be4
 80011f0:	200218c8 	.word	0x200218c8
 80011f4:	40010000 	.word	0x40010000
 80011f8:	40010400 	.word	0x40010400
 80011fc:	00000000 	.word	0x00000000

08001200 <_ZN7Encoder9updateCntEv>:

void Encoder::updateCnt()
{
 8001200:	b590      	push	{r4, r7, lr}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
	cnt_l_ = (float(CNT_OFFSET) - float(TIM1 -> CNT)) * CORRECTION_COEFFICIENT;
 8001208:	4b4b      	ldr	r3, [pc, #300]	; (8001338 <_ZN7Encoder9updateCntEv+0x138>)
 800120a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800120c:	ee07 3a90 	vmov	s15, r3
 8001210:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001214:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800133c <_ZN7Encoder9updateCntEv+0x13c>
 8001218:	ee77 7a67 	vsub.f32	s15, s14, s15
 800121c:	ee17 0a90 	vmov	r0, s15
 8001220:	f7ff f9aa 	bl	8000578 <__aeabi_f2d>
 8001224:	a340      	add	r3, pc, #256	; (adr r3, 8001328 <_ZN7Encoder9updateCntEv+0x128>)
 8001226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800122a:	f7ff f9fd 	bl	8000628 <__aeabi_dmul>
 800122e:	4603      	mov	r3, r0
 8001230:	460c      	mov	r4, r1
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	e9c2 3400 	strd	r3, r4, [r2]
	cnt_r_ = (float(TIM8 -> CNT) - float(CNT_OFFSET)) * CORRECTION_COEFFICIENT;
 8001238:	4b41      	ldr	r3, [pc, #260]	; (8001340 <_ZN7Encoder9updateCntEv+0x140>)
 800123a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800123c:	ee07 3a90 	vmov	s15, r3
 8001240:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001244:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 800133c <_ZN7Encoder9updateCntEv+0x13c>
 8001248:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800124c:	ee17 0a90 	vmov	r0, s15
 8001250:	f7ff f992 	bl	8000578 <__aeabi_f2d>
 8001254:	a334      	add	r3, pc, #208	; (adr r3, 8001328 <_ZN7Encoder9updateCntEv+0x128>)
 8001256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800125a:	f7ff f9e5 	bl	8000628 <__aeabi_dmul>
 800125e:	4603      	mov	r3, r0
 8001260:	460c      	mov	r4, r1
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	e9c2 3402 	strd	r3, r4, [r2, #8]

	total_cnt_l_ += cnt_l_;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001274:	461a      	mov	r2, r3
 8001276:	4623      	mov	r3, r4
 8001278:	f7ff f820 	bl	80002bc <__adddf3>
 800127c:	4603      	mov	r3, r0
 800127e:	460c      	mov	r4, r1
 8001280:	687a      	ldr	r2, [r7, #4]
 8001282:	e9c2 3406 	strd	r3, r4, [r2, #24]
	total_cnt_r_ += cnt_r_;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8001292:	461a      	mov	r2, r3
 8001294:	4623      	mov	r3, r4
 8001296:	f7ff f811 	bl	80002bc <__adddf3>
 800129a:	4603      	mov	r3, r0
 800129c:	460c      	mov	r4, r1
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	e9c2 3408 	strd	r3, r4, [r2, #32]

	//distance_ = distance_ + DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
	distance_ = DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 80012b0:	461a      	mov	r2, r3
 80012b2:	4623      	mov	r3, r4
 80012b4:	f7ff f802 	bl	80002bc <__adddf3>
 80012b8:	4603      	mov	r3, r0
 80012ba:	460c      	mov	r4, r1
 80012bc:	4618      	mov	r0, r3
 80012be:	4621      	mov	r1, r4
 80012c0:	a31b      	add	r3, pc, #108	; (adr r3, 8001330 <_ZN7Encoder9updateCntEv+0x130>)
 80012c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c6:	f7ff f9af 	bl	8000628 <__aeabi_dmul>
 80012ca:	4603      	mov	r3, r0
 80012cc:	460c      	mov	r4, r1
 80012ce:	4618      	mov	r0, r3
 80012d0:	4621      	mov	r1, r4
 80012d2:	f04f 0200 	mov.w	r2, #0
 80012d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012da:	f7ff facf 	bl	800087c <__aeabi_ddiv>
 80012de:	4603      	mov	r3, r0
 80012e0:	460c      	mov	r4, r1
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	e9c2 3404 	strd	r3, r4, [r2, #16]
	total_distance_ += distance_;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80012f4:	461a      	mov	r2, r3
 80012f6:	4623      	mov	r3, r4
 80012f8:	f7fe ffe0 	bl	80002bc <__adddf3>
 80012fc:	4603      	mov	r3, r0
 80012fe:	460c      	mov	r4, r1
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	monitor_distance = distance_;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800130c:	4618      	mov	r0, r3
 800130e:	4621      	mov	r1, r4
 8001310:	f7ff fc82 	bl	8000c18 <__aeabi_d2f>
 8001314:	4602      	mov	r2, r0
 8001316:	4b0b      	ldr	r3, [pc, #44]	; (8001344 <_ZN7Encoder9updateCntEv+0x144>)
 8001318:	601a      	str	r2, [r3, #0]
}
 800131a:	bf00      	nop
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	bd90      	pop	{r4, r7, pc}
 8001322:	bf00      	nop
 8001324:	f3af 8000 	nop.w
 8001328:	e9a19657 	.word	0xe9a19657
 800132c:	3ff224a8 	.word	0x3ff224a8
 8001330:	1ab1d998 	.word	0x1ab1d998
 8001334:	3f7830b5 	.word	0x3f7830b5
 8001338:	40010000 	.word	0x40010000
 800133c:	47000000 	.word	0x47000000
 8001340:	40010400 	.word	0x40010400
 8001344:	200001fc 	.word	0x200001fc

08001348 <_ZN7Encoder6getCntERdS0_>:

void Encoder::getCnt(double &cnt_l, double &cnt_r)
{
 8001348:	b490      	push	{r4, r7}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	60f8      	str	r0, [r7, #12]
 8001350:	60b9      	str	r1, [r7, #8]
 8001352:	607a      	str	r2, [r7, #4]
	cnt_l = cnt_l_;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	e9d3 3400 	ldrd	r3, r4, [r3]
 800135a:	68ba      	ldr	r2, [r7, #8]
 800135c:	e9c2 3400 	strd	r3, r4, [r2]
	cnt_r = cnt_r_;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8001366:	687a      	ldr	r2, [r7, #4]
 8001368:	e9c2 3400 	strd	r3, r4, [r2]
}
 800136c:	bf00      	nop
 800136e:	3710      	adds	r7, #16
 8001370:	46bd      	mov	sp, r7
 8001372:	bc90      	pop	{r4, r7}
 8001374:	4770      	bx	lr

08001376 <_ZN7Encoder11getDistanceEv>:

double Encoder::getDistance()
{
 8001376:	b490      	push	{r4, r7}
 8001378:	b082      	sub	sp, #8
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
	return distance_;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8001384:	ec44 3b17 	vmov	d7, r3, r4
}
 8001388:	eeb0 0a47 	vmov.f32	s0, s14
 800138c:	eef0 0a67 	vmov.f32	s1, s15
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bc90      	pop	{r4, r7}
 8001396:	4770      	bx	lr

08001398 <_ZN7Encoder16getTotalDistanceEv>:

double Encoder::getTotalDistance()
{
 8001398:	b490      	push	{r4, r7}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
	return total_distance_;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 80013a6:	ec44 3b17 	vmov	d7, r3, r4
}
 80013aa:	eeb0 0a47 	vmov.f32	s0, s14
 80013ae:	eef0 0a67 	vmov.f32	s1, s15
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bc90      	pop	{r4, r7}
 80013b8:	4770      	bx	lr

080013ba <_ZN7Encoder13clearDistanceEv>:

void Encoder::clearDistance()
{
 80013ba:	b490      	push	{r4, r7}
 80013bc:	b082      	sub	sp, #8
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
	distance_ = 0;
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	f04f 0300 	mov.w	r3, #0
 80013c8:	f04f 0400 	mov.w	r4, #0
 80013cc:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 80013d0:	bf00      	nop
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bc90      	pop	{r4, r7}
 80013d8:	4770      	bx	lr
	...

080013dc <_ZN7Encoder8clearCntEv>:

void Encoder::clearCnt()
{
 80013dc:	b490      	push	{r4, r7}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
	cnt_l_ = 0;
 80013e4:	687a      	ldr	r2, [r7, #4]
 80013e6:	f04f 0300 	mov.w	r3, #0
 80013ea:	f04f 0400 	mov.w	r4, #0
 80013ee:	e9c2 3400 	strd	r3, r4, [r2]
	cnt_r_ = 0;
 80013f2:	687a      	ldr	r2, [r7, #4]
 80013f4:	f04f 0300 	mov.w	r3, #0
 80013f8:	f04f 0400 	mov.w	r4, #0
 80013fc:	e9c2 3402 	strd	r3, r4, [r2, #8]
	TIM1 -> CNT = CNT_OFFSET;
 8001400:	4b09      	ldr	r3, [pc, #36]	; (8001428 <_ZN7Encoder8clearCntEv+0x4c>)
 8001402:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001406:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 8001408:	4b08      	ldr	r3, [pc, #32]	; (800142c <_ZN7Encoder8clearCntEv+0x50>)
 800140a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800140e:	625a      	str	r2, [r3, #36]	; 0x24
	distance_ = 0;
 8001410:	687a      	ldr	r2, [r7, #4]
 8001412:	f04f 0300 	mov.w	r3, #0
 8001416:	f04f 0400 	mov.w	r4, #0
 800141a:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bc90      	pop	{r4, r7}
 8001426:	4770      	bx	lr
 8001428:	40010000 	.word	0x40010000
 800142c:	40010400 	.word	0x40010400

08001430 <_ZN7Encoder13clearTotalCntEv>:
{
	return (total_cnt_l_ + total_cnt_r_) / 2;
}

void Encoder::clearTotalCnt()
{
 8001430:	b490      	push	{r4, r7}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
	total_cnt_l_ = 0;
 8001438:	687a      	ldr	r2, [r7, #4]
 800143a:	f04f 0300 	mov.w	r3, #0
 800143e:	f04f 0400 	mov.w	r4, #0
 8001442:	e9c2 3406 	strd	r3, r4, [r2, #24]
	total_cnt_r_ = 0;
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	f04f 0300 	mov.w	r3, #0
 800144c:	f04f 0400 	mov.w	r4, #0
 8001450:	e9c2 3408 	strd	r3, r4, [r2, #32]
	total_distance_ = 0;
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	f04f 0300 	mov.w	r3, #0
 800145a:	f04f 0400 	mov.w	r4, #0
 800145e:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
}
 8001462:	bf00      	nop
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bc90      	pop	{r4, r7}
 800146a:	4770      	bx	lr

0800146c <user_fopen>:
//* 役割　：　fopenする
//* 引数　：　char, float *: short　: フォルダ名、ファイル名
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fopen(const char *p_folder_name, const char *p_file_name){
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	6039      	str	r1, [r7, #0]

	FRESULT ret = 0;
 8001476:	2300      	movs	r3, #0
 8001478:	73fb      	strb	r3, [r7, #15]

	create_path(p_folder_name, p_file_name);
 800147a:	6839      	ldr	r1, [r7, #0]
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f000 f9f1 	bl	8001864 <create_path>

	fopen_folder_and_file();	//書き込むファイルを選択
 8001482:	f000 fa05 	bl	8001890 <fopen_folder_and_file>

	return ret;
 8001486:	7bfb      	ldrb	r3, [r7, #15]
}
 8001488:	4618      	mov	r0, r3
 800148a:	3710      	adds	r7, #16
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}

08001490 <user_fclose>:
//* 役割　：　fcloseする
//* 引数　：　void
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fclose(){
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 8001496:	2300      	movs	r3, #0
 8001498:	71fb      	strb	r3, [r7, #7]

	f_close(&fil);	//ファイル閉じる
 800149a:	4804      	ldr	r0, [pc, #16]	; (80014ac <user_fclose+0x1c>)
 800149c:	f00f f96d 	bl	801077a <f_close>

	return ret;
 80014a0:	79fb      	ldrb	r3, [r7, #7]
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	200207d4 	.word	0x200207d4

080014b0 <sd_write>:
//* 役割　：　SDに書き込む
//* 引数　：　short, float *, char : 変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write(short size, float *data, char state){
 80014b0:	b590      	push	{r4, r7, lr}
 80014b2:	b087      	sub	sp, #28
 80014b4:	af02      	add	r7, sp, #8
 80014b6:	4603      	mov	r3, r0
 80014b8:	6039      	str	r1, [r7, #0]
 80014ba:	80fb      	strh	r3, [r7, #6]
 80014bc:	4613      	mov	r3, r2
 80014be:	717b      	strb	r3, [r7, #5]
	FRESULT ret = 0;
 80014c0:	2300      	movs	r3, #0
 80014c2:	737b      	strb	r3, [r7, #13]

	for(short i = 0 ; i < size; i++){
 80014c4:	2300      	movs	r3, #0
 80014c6:	81fb      	strh	r3, [r7, #14]
 80014c8:	e030      	b.n	800152c <sd_write+0x7c>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 80014ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	683a      	ldr	r2, [r7, #0]
 80014d2:	4413      	add	r3, r2
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff f84e 	bl	8000578 <__aeabi_f2d>
 80014dc:	4603      	mov	r3, r0
 80014de:	460c      	mov	r4, r1
 80014e0:	e9cd 3400 	strd	r3, r4, [sp]
 80014e4:	4a17      	ldr	r2, [pc, #92]	; (8001544 <sd_write+0x94>)
 80014e6:	2180      	movs	r1, #128	; 0x80
 80014e8:	4817      	ldr	r0, [pc, #92]	; (8001548 <sd_write+0x98>)
 80014ea:	f011 fe75 	bl	80131d8 <sniprintf>

		if(state == ADD_WRITE){
 80014ee:	797b      	ldrb	r3, [r7, #5]
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d106      	bne.n	8001502 <sd_write+0x52>
			f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 80014f4:	4b15      	ldr	r3, [pc, #84]	; (800154c <sd_write+0x9c>)
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	4619      	mov	r1, r3
 80014fa:	4814      	ldr	r0, [pc, #80]	; (800154c <sd_write+0x9c>)
 80014fc:	f00f f9b1 	bl	8010862 <f_lseek>
 8001500:	e003      	b.n	800150a <sd_write+0x5a>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
 8001502:	2100      	movs	r1, #0
 8001504:	4811      	ldr	r0, [pc, #68]	; (800154c <sd_write+0x9c>)
 8001506:	f00f f9ac 	bl	8010862 <f_lseek>
		}

		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 800150a:	480f      	ldr	r0, [pc, #60]	; (8001548 <sd_write+0x98>)
 800150c:	f7fe fe78 	bl	8000200 <strlen>
 8001510:	4602      	mov	r2, r0
 8001512:	4b0f      	ldr	r3, [pc, #60]	; (8001550 <sd_write+0xa0>)
 8001514:	490c      	ldr	r1, [pc, #48]	; (8001548 <sd_write+0x98>)
 8001516:	480d      	ldr	r0, [pc, #52]	; (800154c <sd_write+0x9c>)
 8001518:	f00e ff1d 	bl	8010356 <f_write>

		bufclear();	//書き込み用のバッファをクリア
 800151c:	f000 f9d2 	bl	80018c4 <bufclear>
	for(short i = 0 ; i < size; i++){
 8001520:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001524:	b29b      	uxth	r3, r3
 8001526:	3301      	adds	r3, #1
 8001528:	b29b      	uxth	r3, r3
 800152a:	81fb      	strh	r3, [r7, #14]
 800152c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001530:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001534:	429a      	cmp	r2, r3
 8001536:	dbc8      	blt.n	80014ca <sd_write+0x1a>
	}
	return ret;
 8001538:	7b7b      	ldrb	r3, [r7, #13]
}
 800153a:	4618      	mov	r0, r3
 800153c:	3714      	adds	r7, #20
 800153e:	46bd      	mov	sp, r7
 8001540:	bd90      	pop	{r4, r7, pc}
 8001542:	bf00      	nop
 8001544:	08017278 	.word	0x08017278
 8001548:	20020744 	.word	0x20020744
 800154c:	200207d4 	.word	0x200207d4
 8001550:	200207c4 	.word	0x200207c4

08001554 <sd_write_array_float>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data, char state){
 8001554:	b590      	push	{r4, r7, lr}
 8001556:	b089      	sub	sp, #36	; 0x24
 8001558:	af02      	add	r7, sp, #8
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	603b      	str	r3, [r7, #0]
 8001560:	4613      	mov	r3, r2
 8001562:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001564:	2300      	movs	r3, #0
 8001566:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001568:	68b9      	ldr	r1, [r7, #8]
 800156a:	68f8      	ldr	r0, [r7, #12]
 800156c:	f000 f97a 	bl	8001864 <create_path>

	if(state == OVER_WRITE){
 8001570:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001574:	2b00      	cmp	r3, #0
 8001576:	d108      	bne.n	800158a <sd_write_array_float+0x36>
		f_chdir(dirpath);
 8001578:	4822      	ldr	r0, [pc, #136]	; (8001604 <sd_write_array_float+0xb0>)
 800157a:	f00f f928 	bl	80107ce <f_chdir>
		f_unlink(filepath);	//	一回消す
 800157e:	4822      	ldr	r0, [pc, #136]	; (8001608 <sd_write_array_float+0xb4>)
 8001580:	f00f fb93 	bl	8010caa <f_unlink>
		f_chdir("..");
 8001584:	4821      	ldr	r0, [pc, #132]	; (800160c <sd_write_array_float+0xb8>)
 8001586:	f00f f922 	bl	80107ce <f_chdir>
	}

	fopen_folder_and_file();	//	書き込むファイルを選択
 800158a:	f000 f981 	bl	8001890 <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 800158e:	2300      	movs	r3, #0
 8001590:	82fb      	strh	r3, [r7, #22]
 8001592:	e028      	b.n	80015e6 <sd_write_array_float+0x92>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 8001594:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	683a      	ldr	r2, [r7, #0]
 800159c:	4413      	add	r3, r2
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7fe ffe9 	bl	8000578 <__aeabi_f2d>
 80015a6:	4603      	mov	r3, r0
 80015a8:	460c      	mov	r4, r1
 80015aa:	e9cd 3400 	strd	r3, r4, [sp]
 80015ae:	4a18      	ldr	r2, [pc, #96]	; (8001610 <sd_write_array_float+0xbc>)
 80015b0:	2180      	movs	r1, #128	; 0x80
 80015b2:	4818      	ldr	r0, [pc, #96]	; (8001614 <sd_write_array_float+0xc0>)
 80015b4:	f011 fe10 	bl	80131d8 <sniprintf>

		f_lseek(&fil, f_size(&fil));	//	ファイルの最後に移動
 80015b8:	4b17      	ldr	r3, [pc, #92]	; (8001618 <sd_write_array_float+0xc4>)
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	4619      	mov	r1, r3
 80015be:	4816      	ldr	r0, [pc, #88]	; (8001618 <sd_write_array_float+0xc4>)
 80015c0:	f00f f94f 	bl	8010862 <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//	書き込む
 80015c4:	4813      	ldr	r0, [pc, #76]	; (8001614 <sd_write_array_float+0xc0>)
 80015c6:	f7fe fe1b 	bl	8000200 <strlen>
 80015ca:	4602      	mov	r2, r0
 80015cc:	4b13      	ldr	r3, [pc, #76]	; (800161c <sd_write_array_float+0xc8>)
 80015ce:	4911      	ldr	r1, [pc, #68]	; (8001614 <sd_write_array_float+0xc0>)
 80015d0:	4811      	ldr	r0, [pc, #68]	; (8001618 <sd_write_array_float+0xc4>)
 80015d2:	f00e fec0 	bl	8010356 <f_write>

		bufclear();	//	書き込み用のバッファをクリア
 80015d6:	f000 f975 	bl	80018c4 <bufclear>
	for(short i = 0 ; i < size; i++){
 80015da:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80015de:	b29b      	uxth	r3, r3
 80015e0:	3301      	adds	r3, #1
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	82fb      	strh	r3, [r7, #22]
 80015e6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80015ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015ee:	429a      	cmp	r2, r3
 80015f0:	dbd0      	blt.n	8001594 <sd_write_array_float+0x40>
	}

	f_close(&fil);	//	ファイル閉じる
 80015f2:	4809      	ldr	r0, [pc, #36]	; (8001618 <sd_write_array_float+0xc4>)
 80015f4:	f00f f8c1 	bl	801077a <f_close>

	return ret;
 80015f8:	7d7b      	ldrb	r3, [r7, #21]
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	371c      	adds	r7, #28
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd90      	pop	{r4, r7, pc}
 8001602:	bf00      	nop
 8001604:	20020644 	.word	0x20020644
 8001608:	2001f500 	.word	0x2001f500
 800160c:	08017288 	.word	0x08017288
 8001610:	08017278 	.word	0x08017278
 8001614:	20020744 	.word	0x20020744
 8001618:	200207d4 	.word	0x200207d4
 800161c:	200207c4 	.word	0x200207c4

08001620 <sd_write_array_double>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, double *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_double(const char *p_folder_name, const char *p_file_name, short size, double *data, char state){
 8001620:	b590      	push	{r4, r7, lr}
 8001622:	b089      	sub	sp, #36	; 0x24
 8001624:	af02      	add	r7, sp, #8
 8001626:	60f8      	str	r0, [r7, #12]
 8001628:	60b9      	str	r1, [r7, #8]
 800162a:	603b      	str	r3, [r7, #0]
 800162c:	4613      	mov	r3, r2
 800162e:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001630:	2300      	movs	r3, #0
 8001632:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001634:	68b9      	ldr	r1, [r7, #8]
 8001636:	68f8      	ldr	r0, [r7, #12]
 8001638:	f000 f914 	bl	8001864 <create_path>

	if(state == OVER_WRITE){
 800163c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001640:	2b00      	cmp	r3, #0
 8001642:	d108      	bne.n	8001656 <sd_write_array_double+0x36>
		f_chdir(dirpath);
 8001644:	4820      	ldr	r0, [pc, #128]	; (80016c8 <sd_write_array_double+0xa8>)
 8001646:	f00f f8c2 	bl	80107ce <f_chdir>
		f_unlink(filepath);	//	一回消す
 800164a:	4820      	ldr	r0, [pc, #128]	; (80016cc <sd_write_array_double+0xac>)
 800164c:	f00f fb2d 	bl	8010caa <f_unlink>
		f_chdir("..");
 8001650:	481f      	ldr	r0, [pc, #124]	; (80016d0 <sd_write_array_double+0xb0>)
 8001652:	f00f f8bc 	bl	80107ce <f_chdir>
	}

	fopen_folder_and_file();	//	書き込むファイルを選択
 8001656:	f000 f91b 	bl	8001890 <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 800165a:	2300      	movs	r3, #0
 800165c:	82fb      	strh	r3, [r7, #22]
 800165e:	e024      	b.n	80016aa <sd_write_array_double+0x8a>
		snprintf(buffer, BUFF_SIZE, "%23.10e\n", *(data + i));	//doubleをstringに変換
 8001660:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001664:	00db      	lsls	r3, r3, #3
 8001666:	683a      	ldr	r2, [r7, #0]
 8001668:	4413      	add	r3, r2
 800166a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800166e:	e9cd 3400 	strd	r3, r4, [sp]
 8001672:	4a18      	ldr	r2, [pc, #96]	; (80016d4 <sd_write_array_double+0xb4>)
 8001674:	2180      	movs	r1, #128	; 0x80
 8001676:	4818      	ldr	r0, [pc, #96]	; (80016d8 <sd_write_array_double+0xb8>)
 8001678:	f011 fdae 	bl	80131d8 <sniprintf>

		f_lseek(&fil, f_size(&fil));	//	ファイルの最後に移動
 800167c:	4b17      	ldr	r3, [pc, #92]	; (80016dc <sd_write_array_double+0xbc>)
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	4619      	mov	r1, r3
 8001682:	4816      	ldr	r0, [pc, #88]	; (80016dc <sd_write_array_double+0xbc>)
 8001684:	f00f f8ed 	bl	8010862 <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//	書き込む
 8001688:	4813      	ldr	r0, [pc, #76]	; (80016d8 <sd_write_array_double+0xb8>)
 800168a:	f7fe fdb9 	bl	8000200 <strlen>
 800168e:	4602      	mov	r2, r0
 8001690:	4b13      	ldr	r3, [pc, #76]	; (80016e0 <sd_write_array_double+0xc0>)
 8001692:	4911      	ldr	r1, [pc, #68]	; (80016d8 <sd_write_array_double+0xb8>)
 8001694:	4811      	ldr	r0, [pc, #68]	; (80016dc <sd_write_array_double+0xbc>)
 8001696:	f00e fe5e 	bl	8010356 <f_write>

		bufclear();	//	書き込み用のバッファをクリア
 800169a:	f000 f913 	bl	80018c4 <bufclear>
	for(short i = 0 ; i < size; i++){
 800169e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	3301      	adds	r3, #1
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	82fb      	strh	r3, [r7, #22]
 80016aa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80016ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016b2:	429a      	cmp	r2, r3
 80016b4:	dbd4      	blt.n	8001660 <sd_write_array_double+0x40>
	}

	f_close(&fil);	//	ファイル閉じる
 80016b6:	4809      	ldr	r0, [pc, #36]	; (80016dc <sd_write_array_double+0xbc>)
 80016b8:	f00f f85f 	bl	801077a <f_close>

	return ret;
 80016bc:	7d7b      	ldrb	r3, [r7, #21]
}
 80016be:	4618      	mov	r0, r3
 80016c0:	371c      	adds	r7, #28
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd90      	pop	{r4, r7, pc}
 80016c6:	bf00      	nop
 80016c8:	20020644 	.word	0x20020644
 80016cc:	2001f500 	.word	0x2001f500
 80016d0:	08017288 	.word	0x08017288
 80016d4:	0801728c 	.word	0x0801728c
 80016d8:	20020744 	.word	0x20020744
 80016dc:	200207d4 	.word	0x200207d4
 80016e0:	200207c4 	.word	0x200207c4

080016e4 <sd_write_array_int>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_int(const char *p_folder_name, const char *p_file_name, short size, int *data, char state){
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b086      	sub	sp, #24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	60b9      	str	r1, [r7, #8]
 80016ee:	603b      	str	r3, [r7, #0]
 80016f0:	4613      	mov	r3, r2
 80016f2:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 80016f4:	2300      	movs	r3, #0
 80016f6:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 80016f8:	68b9      	ldr	r1, [r7, #8]
 80016fa:	68f8      	ldr	r0, [r7, #12]
 80016fc:	f000 f8b2 	bl	8001864 <create_path>

	if(state == OVER_WRITE){
 8001700:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d108      	bne.n	800171a <sd_write_array_int+0x36>
		f_chdir(dirpath);
 8001708:	481e      	ldr	r0, [pc, #120]	; (8001784 <sd_write_array_int+0xa0>)
 800170a:	f00f f860 	bl	80107ce <f_chdir>
		f_unlink(filepath);	//一回消す
 800170e:	481e      	ldr	r0, [pc, #120]	; (8001788 <sd_write_array_int+0xa4>)
 8001710:	f00f facb 	bl	8010caa <f_unlink>
		f_chdir("..");
 8001714:	481d      	ldr	r0, [pc, #116]	; (800178c <sd_write_array_int+0xa8>)
 8001716:	f00f f85a 	bl	80107ce <f_chdir>
	}

	fopen_folder_and_file();	//書き込むファイルを選択
 800171a:	f000 f8b9 	bl	8001890 <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 800171e:	2300      	movs	r3, #0
 8001720:	82fb      	strh	r3, [r7, #22]
 8001722:	e021      	b.n	8001768 <sd_write_array_int+0x84>
		snprintf(buffer, BUFF_SIZE, "%d\n", *(data + i));	//floatをstringに変換
 8001724:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	683a      	ldr	r2, [r7, #0]
 800172c:	4413      	add	r3, r2
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a17      	ldr	r2, [pc, #92]	; (8001790 <sd_write_array_int+0xac>)
 8001732:	2180      	movs	r1, #128	; 0x80
 8001734:	4817      	ldr	r0, [pc, #92]	; (8001794 <sd_write_array_int+0xb0>)
 8001736:	f011 fd4f 	bl	80131d8 <sniprintf>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
		}
*/
		f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 800173a:	4b17      	ldr	r3, [pc, #92]	; (8001798 <sd_write_array_int+0xb4>)
 800173c:	68db      	ldr	r3, [r3, #12]
 800173e:	4619      	mov	r1, r3
 8001740:	4815      	ldr	r0, [pc, #84]	; (8001798 <sd_write_array_int+0xb4>)
 8001742:	f00f f88e 	bl	8010862 <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 8001746:	4813      	ldr	r0, [pc, #76]	; (8001794 <sd_write_array_int+0xb0>)
 8001748:	f7fe fd5a 	bl	8000200 <strlen>
 800174c:	4602      	mov	r2, r0
 800174e:	4b13      	ldr	r3, [pc, #76]	; (800179c <sd_write_array_int+0xb8>)
 8001750:	4910      	ldr	r1, [pc, #64]	; (8001794 <sd_write_array_int+0xb0>)
 8001752:	4811      	ldr	r0, [pc, #68]	; (8001798 <sd_write_array_int+0xb4>)
 8001754:	f00e fdff 	bl	8010356 <f_write>

		bufclear();	//書き込み用のバッファをクリア
 8001758:	f000 f8b4 	bl	80018c4 <bufclear>
	for(short i = 0 ; i < size; i++){
 800175c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001760:	b29b      	uxth	r3, r3
 8001762:	3301      	adds	r3, #1
 8001764:	b29b      	uxth	r3, r3
 8001766:	82fb      	strh	r3, [r7, #22]
 8001768:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800176c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001770:	429a      	cmp	r2, r3
 8001772:	dbd7      	blt.n	8001724 <sd_write_array_int+0x40>
	}

	f_close(&fil);	//ファイル閉じる
 8001774:	4808      	ldr	r0, [pc, #32]	; (8001798 <sd_write_array_int+0xb4>)
 8001776:	f00f f800 	bl	801077a <f_close>

	return ret;
 800177a:	7d7b      	ldrb	r3, [r7, #21]
}
 800177c:	4618      	mov	r0, r3
 800177e:	3718      	adds	r7, #24
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	20020644 	.word	0x20020644
 8001788:	2001f500 	.word	0x2001f500
 800178c:	08017288 	.word	0x08017288
 8001790:	0801729c 	.word	0x0801729c
 8001794:	20020744 	.word	0x20020744
 8001798:	200207d4 	.word	0x200207d4
 800179c:	200207c4 	.word	0x200207c4

080017a0 <sd_read_array_int>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, float *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_int(const char  *p_folder_name, const char *p_file_name, short size, int *data){
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	60b9      	str	r1, [r7, #8]
 80017aa:	603b      	str	r3, [r7, #0]
 80017ac:	4613      	mov	r3, r2
 80017ae:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 80017b0:	2300      	movs	r3, #0
 80017b2:	757b      	strb	r3, [r7, #21]
	short i = 0;
 80017b4:	2300      	movs	r3, #0
 80017b6:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 80017b8:	68b9      	ldr	r1, [r7, #8]
 80017ba:	68f8      	ldr	r0, [r7, #12]
 80017bc:	f000 f852 	bl	8001864 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 80017c0:	f000 f866 	bl	8001890 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80017c4:	e019      	b.n	80017fa <sd_read_array_int+0x5a>
		sscanf(buffer, "%d", data + i);
 80017c6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	683a      	ldr	r2, [r7, #0]
 80017ce:	4413      	add	r3, r2
 80017d0:	461a      	mov	r2, r3
 80017d2:	4913      	ldr	r1, [pc, #76]	; (8001820 <sd_read_array_int+0x80>)
 80017d4:	4813      	ldr	r0, [pc, #76]	; (8001824 <sd_read_array_int+0x84>)
 80017d6:	f011 fd53 	bl	8013280 <siscanf>
		i++;
 80017da:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80017de:	b29b      	uxth	r3, r3
 80017e0:	3301      	adds	r3, #1
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 80017e6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80017ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017ee:	429a      	cmp	r2, r3
 80017f0:	db03      	blt.n	80017fa <sd_read_array_int+0x5a>
 80017f2:	88fb      	ldrh	r3, [r7, #6]
 80017f4:	3b01      	subs	r3, #1
 80017f6:	b29b      	uxth	r3, r3
 80017f8:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80017fa:	4a0b      	ldr	r2, [pc, #44]	; (8001828 <sd_read_array_int+0x88>)
 80017fc:	2180      	movs	r1, #128	; 0x80
 80017fe:	4809      	ldr	r0, [pc, #36]	; (8001824 <sd_read_array_int+0x84>)
 8001800:	f00f fc2e 	bl	8011060 <f_gets>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d1dd      	bne.n	80017c6 <sd_read_array_int+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 800180a:	f000 f85b 	bl	80018c4 <bufclear>

	f_close(&fil);	//ファイル閉じる
 800180e:	4806      	ldr	r0, [pc, #24]	; (8001828 <sd_read_array_int+0x88>)
 8001810:	f00e ffb3 	bl	801077a <f_close>

	return ret;
 8001814:	7d7b      	ldrb	r3, [r7, #21]
}
 8001816:	4618      	mov	r0, r3
 8001818:	3718      	adds	r7, #24
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	080172a0 	.word	0x080172a0
 8001824:	20020744 	.word	0x20020744
 8001828:	200207d4 	.word	0x200207d4

0800182c <sd_mount>:
//* 役割　：　SDカードをマウント
//* 引数　：　void:
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_mount(){
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 8001832:	2300      	movs	r3, #0
 8001834:	71fb      	strb	r3, [r7, #7]

	if(f_mount(&fs, "", 1) == FR_OK) ret = 1;
 8001836:	2201      	movs	r2, #1
 8001838:	4908      	ldr	r1, [pc, #32]	; (800185c <sd_mount+0x30>)
 800183a:	4809      	ldr	r0, [pc, #36]	; (8001860 <sd_mount+0x34>)
 800183c:	f00e fa1a 	bl	800fc74 <f_mount>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d102      	bne.n	800184c <sd_mount+0x20>
 8001846:	2301      	movs	r3, #1
 8001848:	71fb      	strb	r3, [r7, #7]
 800184a:	e001      	b.n	8001850 <sd_mount+0x24>
	else ret = 0;
 800184c:	2300      	movs	r3, #0
 800184e:	71fb      	strb	r3, [r7, #7]

	return ret;
 8001850:	79fb      	ldrb	r3, [r7, #7]
}
 8001852:	4618      	mov	r0, r3
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	080172a4 	.word	0x080172a4
 8001860:	2001f600 	.word	0x2001f600

08001864 <create_path>:
//* 役割　：　操作するパスの文字列を作る
//* 引数　：　char, char: フォルダ名, ファイル名
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void create_path(char const *p_folder_name, char const *p_file_name){
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]

	sprintf(dirpath, "%s", p_folder_name);
 800186e:	6879      	ldr	r1, [r7, #4]
 8001870:	4805      	ldr	r0, [pc, #20]	; (8001888 <create_path+0x24>)
 8001872:	f011 fd74 	bl	801335e <strcpy>

	sprintf(filepath, "%s", p_file_name);
 8001876:	6839      	ldr	r1, [r7, #0]
 8001878:	4804      	ldr	r0, [pc, #16]	; (800188c <create_path+0x28>)
 800187a:	f011 fd70 	bl	801335e <strcpy>

}
 800187e:	bf00      	nop
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	20020644 	.word	0x20020644
 800188c:	2001f500 	.word	0x2001f500

08001890 <fopen_folder_and_file>:
//* 役割　：　操作するファイルを選択する_
//* 引数　：　char: ファイル選択
//* 戻り値：　char: 状態チェック	0(マウント失敗) or 1(成功)
//* 備考 : なし
//************************************************************************/
void fopen_folder_and_file(){	//mkdir
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0

	f_mkdir(dirpath);
 8001894:	4807      	ldr	r0, [pc, #28]	; (80018b4 <fopen_folder_and_file+0x24>)
 8001896:	f00f fac9 	bl	8010e2c <f_mkdir>

	f_chdir(dirpath);
 800189a:	4806      	ldr	r0, [pc, #24]	; (80018b4 <fopen_folder_and_file+0x24>)
 800189c:	f00e ff97 	bl	80107ce <f_chdir>

	f_open(&fil, filepath, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 80018a0:	2213      	movs	r2, #19
 80018a2:	4905      	ldr	r1, [pc, #20]	; (80018b8 <fopen_folder_and_file+0x28>)
 80018a4:	4805      	ldr	r0, [pc, #20]	; (80018bc <fopen_folder_and_file+0x2c>)
 80018a6:	f00e fa2b 	bl	800fd00 <f_open>

	f_chdir("..");
 80018aa:	4805      	ldr	r0, [pc, #20]	; (80018c0 <fopen_folder_and_file+0x30>)
 80018ac:	f00e ff8f 	bl	80107ce <f_chdir>


}
 80018b0:	bf00      	nop
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	20020644 	.word	0x20020644
 80018b8:	2001f500 	.word	0x2001f500
 80018bc:	200207d4 	.word	0x200207d4
 80018c0:	08017288 	.word	0x08017288

080018c4 <bufclear>:
//* 役割　：　バッファをクリア
//* 引数　：　void:
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void bufclear(void){
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFF_SIZE; i++){
 80018ca:	2300      	movs	r3, #0
 80018cc:	607b      	str	r3, [r7, #4]
 80018ce:	e007      	b.n	80018e0 <bufclear+0x1c>
		buffer[i] = '\0';
 80018d0:	4a08      	ldr	r2, [pc, #32]	; (80018f4 <bufclear+0x30>)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4413      	add	r3, r2
 80018d6:	2200      	movs	r2, #0
 80018d8:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFF_SIZE; i++){
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	3301      	adds	r3, #1
 80018de:	607b      	str	r3, [r7, #4]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2b7f      	cmp	r3, #127	; 0x7f
 80018e4:	ddf4      	ble.n	80018d0 <bufclear+0xc>
	}
}
 80018e6:	bf00      	nop
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	20020744 	.word	0x20020744

080018f8 <read_byte>:
#include "ICM_20648.h"

volatile int16_t xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	4603      	mov	r3, r0
 8001900:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 8001902:	79fb      	ldrb	r3, [r7, #7]
 8001904:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001908:	b2db      	uxtb	r3, r3
 800190a:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 800190c:	2200      	movs	r2, #0
 800190e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001912:	480e      	ldr	r0, [pc, #56]	; (800194c <read_byte+0x54>)
 8001914:	f005 fcfe 	bl	8007314 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001918:	f107 010f 	add.w	r1, r7, #15
 800191c:	2364      	movs	r3, #100	; 0x64
 800191e:	2201      	movs	r2, #1
 8001920:	480b      	ldr	r0, [pc, #44]	; (8001950 <read_byte+0x58>)
 8001922:	f008 febf 	bl	800a6a4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,&val,1,100);
 8001926:	f107 010e 	add.w	r1, r7, #14
 800192a:	2364      	movs	r3, #100	; 0x64
 800192c:	2201      	movs	r2, #1
 800192e:	4808      	ldr	r0, [pc, #32]	; (8001950 <read_byte+0x58>)
 8001930:	f008 ffec 	bl	800a90c <HAL_SPI_Receive>
	CS_SET;
 8001934:	2201      	movs	r2, #1
 8001936:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800193a:	4804      	ldr	r0, [pc, #16]	; (800194c <read_byte+0x54>)
 800193c:	f005 fcea 	bl	8007314 <HAL_GPIO_WritePin>

	return val;
 8001940:	7bbb      	ldrb	r3, [r7, #14]
}
 8001942:	4618      	mov	r0, r3
 8001944:	3710      	adds	r7, #16
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	40020400 	.word	0x40020400
 8001950:	20021870 	.word	0x20021870

08001954 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	4603      	mov	r3, r0
 800195c:	460a      	mov	r2, r1
 800195e:	71fb      	strb	r3, [r7, #7]
 8001960:	4613      	mov	r3, r2
 8001962:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8001964:	79fb      	ldrb	r3, [r7, #7]
 8001966:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800196a:	b2db      	uxtb	r3, r3
 800196c:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 800196e:	2200      	movs	r2, #0
 8001970:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001974:	480c      	ldr	r0, [pc, #48]	; (80019a8 <write_byte+0x54>)
 8001976:	f005 fccd 	bl	8007314 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 800197a:	f107 010f 	add.w	r1, r7, #15
 800197e:	2364      	movs	r3, #100	; 0x64
 8001980:	2201      	movs	r2, #1
 8001982:	480a      	ldr	r0, [pc, #40]	; (80019ac <write_byte+0x58>)
 8001984:	f008 fe8e 	bl	800a6a4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&val,1,100);
 8001988:	1db9      	adds	r1, r7, #6
 800198a:	2364      	movs	r3, #100	; 0x64
 800198c:	2201      	movs	r2, #1
 800198e:	4807      	ldr	r0, [pc, #28]	; (80019ac <write_byte+0x58>)
 8001990:	f008 fe88 	bl	800a6a4 <HAL_SPI_Transmit>
	CS_SET;
 8001994:	2201      	movs	r2, #1
 8001996:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800199a:	4803      	ldr	r0, [pc, #12]	; (80019a8 <write_byte+0x54>)
 800199c:	f005 fcba 	bl	8007314 <HAL_GPIO_WritePin>
}
 80019a0:	bf00      	nop
 80019a2:	3710      	adds	r7, #16
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	40020400 	.word	0x40020400
 80019ac:	20021870 	.word	0x20021870

080019b0 <IMU_init>:

uint16_t IMU_init() {
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
	uint8_t who_am_i;
	uint16_t ret = 0;
 80019b6:	2300      	movs	r3, #0
 80019b8:	80fb      	strh	r3, [r7, #6]

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 80019ba:	2000      	movs	r0, #0
 80019bc:	f7ff ff9c 	bl	80018f8 <read_byte>
 80019c0:	4603      	mov	r3, r0
 80019c2:	717b      	strb	r3, [r7, #5]
	if ( who_am_i == 0xE0 ) {
 80019c4:	797b      	ldrb	r3, [r7, #5]
 80019c6:	2be0      	cmp	r3, #224	; 0xe0
 80019c8:	d119      	bne.n	80019fe <IMU_init+0x4e>
		ret = 1;
 80019ca:	2301      	movs	r3, #1
 80019cc:	80fb      	strh	r3, [r7, #6]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 80019ce:	2101      	movs	r1, #1
 80019d0:	2006      	movs	r0, #6
 80019d2:	f7ff ffbf 	bl	8001954 <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 80019d6:	2110      	movs	r1, #16
 80019d8:	2003      	movs	r0, #3
 80019da:	f7ff ffbb 	bl	8001954 <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 80019de:	2120      	movs	r1, #32
 80019e0:	207f      	movs	r0, #127	; 0x7f
 80019e2:	f7ff ffb7 	bl	8001954 <write_byte>
		write_byte(0x01,0x06);	//レンジ±2000dps
 80019e6:	2106      	movs	r1, #6
 80019e8:	2001      	movs	r0, #1
 80019ea:	f7ff ffb3 	bl	8001954 <write_byte>
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//レンジ±16g
 80019ee:	2106      	movs	r1, #6
 80019f0:	2014      	movs	r0, #20
 80019f2:	f7ff ffaf 	bl	8001954 <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 80019f6:	2100      	movs	r1, #0
 80019f8:	207f      	movs	r0, #127	; 0x7f
 80019fa:	f7ff ffab 	bl	8001954 <write_byte>
	}
	return ret;
 80019fe:	88fb      	ldrh	r3, [r7, #6]
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3708      	adds	r7, #8
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <read_gyro_data>:

void read_gyro_data() {
 8001a08:	b598      	push	{r3, r4, r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 8001a0c:	2033      	movs	r0, #51	; 0x33
 8001a0e:	f7ff ff73 	bl	80018f8 <read_byte>
 8001a12:	4603      	mov	r3, r0
 8001a14:	021b      	lsls	r3, r3, #8
 8001a16:	b21c      	sxth	r4, r3
 8001a18:	2034      	movs	r0, #52	; 0x34
 8001a1a:	f7ff ff6d 	bl	80018f8 <read_byte>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	b21b      	sxth	r3, r3
 8001a22:	4323      	orrs	r3, r4
 8001a24:	b21a      	sxth	r2, r3
 8001a26:	4b11      	ldr	r3, [pc, #68]	; (8001a6c <read_gyro_data+0x64>)
 8001a28:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 8001a2a:	2035      	movs	r0, #53	; 0x35
 8001a2c:	f7ff ff64 	bl	80018f8 <read_byte>
 8001a30:	4603      	mov	r3, r0
 8001a32:	021b      	lsls	r3, r3, #8
 8001a34:	b21c      	sxth	r4, r3
 8001a36:	2036      	movs	r0, #54	; 0x36
 8001a38:	f7ff ff5e 	bl	80018f8 <read_byte>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	b21b      	sxth	r3, r3
 8001a40:	4323      	orrs	r3, r4
 8001a42:	b21a      	sxth	r2, r3
 8001a44:	4b0a      	ldr	r3, [pc, #40]	; (8001a70 <read_gyro_data+0x68>)
 8001a46:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 8001a48:	2037      	movs	r0, #55	; 0x37
 8001a4a:	f7ff ff55 	bl	80018f8 <read_byte>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	021b      	lsls	r3, r3, #8
 8001a52:	b21c      	sxth	r4, r3
 8001a54:	2038      	movs	r0, #56	; 0x38
 8001a56:	f7ff ff4f 	bl	80018f8 <read_byte>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	b21b      	sxth	r3, r3
 8001a5e:	4323      	orrs	r3, r4
 8001a60:	b21a      	sxth	r2, r3
 8001a62:	4b04      	ldr	r3, [pc, #16]	; (8001a74 <read_gyro_data+0x6c>)
 8001a64:	801a      	strh	r2, [r3, #0]
}
 8001a66:	bf00      	nop
 8001a68:	bd98      	pop	{r3, r4, r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	2002180c 	.word	0x2002180c
 8001a70:	2002180a 	.word	0x2002180a
 8001a74:	20021804 	.word	0x20021804

08001a78 <read_accel_data>:

void read_accel_data() {
 8001a78:	b598      	push	{r3, r4, r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
	xa = ((uint16_t)read_byte(0x2D) << 8) | ((uint16_t)read_byte(0x2E));
 8001a7c:	202d      	movs	r0, #45	; 0x2d
 8001a7e:	f7ff ff3b 	bl	80018f8 <read_byte>
 8001a82:	4603      	mov	r3, r0
 8001a84:	021b      	lsls	r3, r3, #8
 8001a86:	b21c      	sxth	r4, r3
 8001a88:	202e      	movs	r0, #46	; 0x2e
 8001a8a:	f7ff ff35 	bl	80018f8 <read_byte>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	b21b      	sxth	r3, r3
 8001a92:	4323      	orrs	r3, r4
 8001a94:	b21a      	sxth	r2, r3
 8001a96:	4b11      	ldr	r3, [pc, #68]	; (8001adc <read_accel_data+0x64>)
 8001a98:	801a      	strh	r2, [r3, #0]
	ya = ((uint16_t)read_byte(0x2F) << 8) | ((uint16_t)read_byte(0x30));
 8001a9a:	202f      	movs	r0, #47	; 0x2f
 8001a9c:	f7ff ff2c 	bl	80018f8 <read_byte>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	021b      	lsls	r3, r3, #8
 8001aa4:	b21c      	sxth	r4, r3
 8001aa6:	2030      	movs	r0, #48	; 0x30
 8001aa8:	f7ff ff26 	bl	80018f8 <read_byte>
 8001aac:	4603      	mov	r3, r0
 8001aae:	b21b      	sxth	r3, r3
 8001ab0:	4323      	orrs	r3, r4
 8001ab2:	b21a      	sxth	r2, r3
 8001ab4:	4b0a      	ldr	r3, [pc, #40]	; (8001ae0 <read_accel_data+0x68>)
 8001ab6:	801a      	strh	r2, [r3, #0]
	za = ((uint16_t)read_byte(0x31) << 8) | ((uint16_t)read_byte(0x32));
 8001ab8:	2031      	movs	r0, #49	; 0x31
 8001aba:	f7ff ff1d 	bl	80018f8 <read_byte>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	021b      	lsls	r3, r3, #8
 8001ac2:	b21c      	sxth	r4, r3
 8001ac4:	2032      	movs	r0, #50	; 0x32
 8001ac6:	f7ff ff17 	bl	80018f8 <read_byte>
 8001aca:	4603      	mov	r3, r0
 8001acc:	b21b      	sxth	r3, r3
 8001ace:	4323      	orrs	r3, r4
 8001ad0:	b21a      	sxth	r2, r3
 8001ad2:	4b04      	ldr	r3, [pc, #16]	; (8001ae4 <read_accel_data+0x6c>)
 8001ad4:	801a      	strh	r2, [r3, #0]
}
 8001ad6:	bf00      	nop
 8001ad8:	bd98      	pop	{r3, r4, r7, pc}
 8001ada:	bf00      	nop
 8001adc:	20021808 	.word	0x20021808
 8001ae0:	2002180e 	.word	0x2002180e
 8001ae4:	20021806 	.word	0x20021806

08001ae8 <_ZN3IMUC1Ev>:
#include "stdio.h"
#include <vector>

#define PI 3.1415926535

IMU::IMU() : xa_(0), ya_(0), za_(0), xg_(0), yg_(0), zg_(0), offset_(0)
 8001ae8:	b490      	push	{r4, r7}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2200      	movs	r2, #0
 8001af4:	801a      	strh	r2, [r3, #0]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	805a      	strh	r2, [r3, #2]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2200      	movs	r2, #0
 8001b00:	809a      	strh	r2, [r3, #4]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2200      	movs	r2, #0
 8001b06:	80da      	strh	r2, [r3, #6]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	811a      	strh	r2, [r3, #8]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2200      	movs	r2, #0
 8001b12:	815a      	strh	r2, [r3, #10]
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	f04f 0300 	mov.w	r3, #0
 8001b1a:	f04f 0400 	mov.w	r4, #0
 8001b1e:	e9c2 3404 	strd	r3, r4, [r2, #16]
{

}
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4618      	mov	r0, r3
 8001b26:	3708      	adds	r7, #8
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bc90      	pop	{r4, r7}
 8001b2c:	4770      	bx	lr
	...

08001b30 <_ZN3IMU4initEv>:

void IMU::init()
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
	uint16_t who_i_am;
	who_i_am = IMU_init();
 8001b38:	f7ff ff3a 	bl	80019b0 <IMU_init>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	81fb      	strh	r3, [r7, #14]
	printf("who i am: %d\n", who_i_am);
 8001b40:	89fb      	ldrh	r3, [r7, #14]
 8001b42:	4619      	mov	r1, r3
 8001b44:	4803      	ldr	r0, [pc, #12]	; (8001b54 <_ZN3IMU4initEv+0x24>)
 8001b46:	f011 fab1 	bl	80130ac <iprintf>

}
 8001b4a:	bf00      	nop
 8001b4c:	3710      	adds	r7, #16
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	080172a8 	.word	0x080172a8

08001b58 <_ZN3IMU12updateValuesEv>:

void IMU::updateValues()
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
	read_gyro_data();
 8001b60:	f7ff ff52 	bl	8001a08 <read_gyro_data>
	read_accel_data();
 8001b64:	f7ff ff88 	bl	8001a78 <read_accel_data>

	xa_ = xa;
 8001b68:	4b10      	ldr	r3, [pc, #64]	; (8001bac <_ZN3IMU12updateValuesEv+0x54>)
 8001b6a:	881b      	ldrh	r3, [r3, #0]
 8001b6c:	b21a      	sxth	r2, r3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	801a      	strh	r2, [r3, #0]
	ya_ = ya;
 8001b72:	4b0f      	ldr	r3, [pc, #60]	; (8001bb0 <_ZN3IMU12updateValuesEv+0x58>)
 8001b74:	881b      	ldrh	r3, [r3, #0]
 8001b76:	b21a      	sxth	r2, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	805a      	strh	r2, [r3, #2]
	za_ = za;
 8001b7c:	4b0d      	ldr	r3, [pc, #52]	; (8001bb4 <_ZN3IMU12updateValuesEv+0x5c>)
 8001b7e:	881b      	ldrh	r3, [r3, #0]
 8001b80:	b21a      	sxth	r2, r3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	809a      	strh	r2, [r3, #4]
	xg_ = xg;
 8001b86:	4b0c      	ldr	r3, [pc, #48]	; (8001bb8 <_ZN3IMU12updateValuesEv+0x60>)
 8001b88:	881b      	ldrh	r3, [r3, #0]
 8001b8a:	b21a      	sxth	r2, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	80da      	strh	r2, [r3, #6]
	yg_ = yg;
 8001b90:	4b0a      	ldr	r3, [pc, #40]	; (8001bbc <_ZN3IMU12updateValuesEv+0x64>)
 8001b92:	881b      	ldrh	r3, [r3, #0]
 8001b94:	b21a      	sxth	r2, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	811a      	strh	r2, [r3, #8]
	zg_ = zg;
 8001b9a:	4b09      	ldr	r3, [pc, #36]	; (8001bc0 <_ZN3IMU12updateValuesEv+0x68>)
 8001b9c:	881b      	ldrh	r3, [r3, #0]
 8001b9e:	b21a      	sxth	r2, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	815a      	strh	r2, [r3, #10]

}
 8001ba4:	bf00      	nop
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	20021808 	.word	0x20021808
 8001bb0:	2002180e 	.word	0x2002180e
 8001bb4:	20021806 	.word	0x20021806
 8001bb8:	2002180c 	.word	0x2002180c
 8001bbc:	2002180a 	.word	0x2002180a
 8001bc0:	20021804 	.word	0x20021804
 8001bc4:	00000000 	.word	0x00000000

08001bc8 <_ZN3IMU8getOmegaEv>:

double IMU::getOmega()
{
 8001bc8:	b5b0      	push	{r4, r5, r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
	double corrected_zg = double(zg_) - offset_;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7fe fcbc 	bl	8000554 <__aeabi_i2d>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001be2:	f7fe fb69 	bl	80002b8 <__aeabi_dsub>
 8001be6:	4602      	mov	r2, r0
 8001be8:	460b      	mov	r3, r1
 8001bea:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return -(corrected_zg / 16.4) * PI / 180;
 8001bee:	a315      	add	r3, pc, #84	; (adr r3, 8001c44 <_ZN3IMU8getOmegaEv+0x7c>)
 8001bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bf4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001bf8:	f7fe fe40 	bl	800087c <__aeabi_ddiv>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	460b      	mov	r3, r1
 8001c00:	4614      	mov	r4, r2
 8001c02:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001c06:	a311      	add	r3, pc, #68	; (adr r3, 8001c4c <_ZN3IMU8getOmegaEv+0x84>)
 8001c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c0c:	4620      	mov	r0, r4
 8001c0e:	4629      	mov	r1, r5
 8001c10:	f7fe fd0a 	bl	8000628 <__aeabi_dmul>
 8001c14:	4603      	mov	r3, r0
 8001c16:	460c      	mov	r4, r1
 8001c18:	4618      	mov	r0, r3
 8001c1a:	4621      	mov	r1, r4
 8001c1c:	f04f 0200 	mov.w	r2, #0
 8001c20:	4b07      	ldr	r3, [pc, #28]	; (8001c40 <_ZN3IMU8getOmegaEv+0x78>)
 8001c22:	f7fe fe2b 	bl	800087c <__aeabi_ddiv>
 8001c26:	4603      	mov	r3, r0
 8001c28:	460c      	mov	r4, r1
 8001c2a:	ec44 3b17 	vmov	d7, r3, r4
}
 8001c2e:	eeb0 0a47 	vmov.f32	s0, s14
 8001c32:	eef0 0a67 	vmov.f32	s1, s15
 8001c36:	3710      	adds	r7, #16
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bdb0      	pop	{r4, r5, r7, pc}
 8001c3c:	f3af 8000 	nop.w
 8001c40:	40668000 	.word	0x40668000
 8001c44:	66666666 	.word	0x66666666
 8001c48:	40306666 	.word	0x40306666
 8001c4c:	54411744 	.word	0x54411744
 8001c50:	400921fb 	.word	0x400921fb

08001c54 <_ZN3IMU11calibrationEv>:

void IMU::calibration()
{
 8001c54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c58:	b08a      	sub	sp, #40	; 0x28
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
	float sum;
	for(const auto &v : zg_vals){
		sum += v;
	}

	offset_ = sum / num;
 8001c5e:	466b      	mov	r3, sp
 8001c60:	4698      	mov	r8, r3
	HAL_Delay(1000);
 8001c62:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c66:	f004 f8bf 	bl	8005de8 <HAL_Delay>
	int16_t num = 2000;
 8001c6a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001c6e:	83bb      	strh	r3, [r7, #28]
	double zg_vals[num];
 8001c70:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001c74:	1e5d      	subs	r5, r3, #1
 8001c76:	61bd      	str	r5, [r7, #24]
 8001c78:	462b      	mov	r3, r5
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	f04f 0200 	mov.w	r2, #0
 8001c82:	f04f 0300 	mov.w	r3, #0
 8001c86:	f04f 0400 	mov.w	r4, #0
 8001c8a:	0194      	lsls	r4, r2, #6
 8001c8c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001c90:	018b      	lsls	r3, r1, #6
 8001c92:	462b      	mov	r3, r5
 8001c94:	3301      	adds	r3, #1
 8001c96:	4619      	mov	r1, r3
 8001c98:	f04f 0200 	mov.w	r2, #0
 8001c9c:	f04f 0300 	mov.w	r3, #0
 8001ca0:	f04f 0400 	mov.w	r4, #0
 8001ca4:	0194      	lsls	r4, r2, #6
 8001ca6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001caa:	018b      	lsls	r3, r1, #6
 8001cac:	462b      	mov	r3, r5
 8001cae:	3301      	adds	r3, #1
 8001cb0:	00db      	lsls	r3, r3, #3
 8001cb2:	3307      	adds	r3, #7
 8001cb4:	3307      	adds	r3, #7
 8001cb6:	08db      	lsrs	r3, r3, #3
 8001cb8:	00db      	lsls	r3, r3, #3
 8001cba:	ebad 0d03 	sub.w	sp, sp, r3
 8001cbe:	466b      	mov	r3, sp
 8001cc0:	3307      	adds	r3, #7
 8001cc2:	08db      	lsrs	r3, r3, #3
 8001cc4:	00db      	lsls	r3, r3, #3
 8001cc6:	617b      	str	r3, [r7, #20]
	for(uint16_t i = 0; i < num; i++){
 8001cc8:	2300      	movs	r3, #0
 8001cca:	83fb      	strh	r3, [r7, #30]
 8001ccc:	8bfa      	ldrh	r2, [r7, #30]
 8001cce:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	da14      	bge.n	8001d00 <_ZN3IMU11calibrationEv+0xac>
		zg_vals[i] = double(zg_);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001cdc:	8bfe      	ldrh	r6, [r7, #30]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7fe fc38 	bl	8000554 <__aeabi_i2d>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	460c      	mov	r4, r1
 8001ce8:	6979      	ldr	r1, [r7, #20]
 8001cea:	00f2      	lsls	r2, r6, #3
 8001cec:	440a      	add	r2, r1
 8001cee:	e9c2 3400 	strd	r3, r4, [r2]
		HAL_Delay(2);
 8001cf2:	2002      	movs	r0, #2
 8001cf4:	f004 f878 	bl	8005de8 <HAL_Delay>
	for(uint16_t i = 0; i < num; i++){
 8001cf8:	8bfb      	ldrh	r3, [r7, #30]
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	83fb      	strh	r3, [r7, #30]
 8001cfe:	e7e5      	b.n	8001ccc <_ZN3IMU11calibrationEv+0x78>
	for(const auto &v : zg_vals){
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	627b      	str	r3, [r7, #36]	; 0x24
 8001d04:	697a      	ldr	r2, [r7, #20]
 8001d06:	462b      	mov	r3, r5
 8001d08:	3301      	adds	r3, #1
 8001d0a:	00db      	lsls	r3, r3, #3
 8001d0c:	4413      	add	r3, r2
 8001d0e:	613b      	str	r3, [r7, #16]
 8001d10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d017      	beq.n	8001d48 <_ZN3IMU11calibrationEv+0xf4>
 8001d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1a:	60fb      	str	r3, [r7, #12]
		sum += v;
 8001d1c:	6a38      	ldr	r0, [r7, #32]
 8001d1e:	f7fe fc2b 	bl	8000578 <__aeabi_f2d>
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001d28:	461a      	mov	r2, r3
 8001d2a:	4623      	mov	r3, r4
 8001d2c:	f7fe fac6 	bl	80002bc <__adddf3>
 8001d30:	4603      	mov	r3, r0
 8001d32:	460c      	mov	r4, r1
 8001d34:	4618      	mov	r0, r3
 8001d36:	4621      	mov	r1, r4
 8001d38:	f7fe ff6e 	bl	8000c18 <__aeabi_d2f>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	623b      	str	r3, [r7, #32]
	for(const auto &v : zg_vals){
 8001d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d42:	3308      	adds	r3, #8
 8001d44:	627b      	str	r3, [r7, #36]	; 0x24
 8001d46:	e7e3      	b.n	8001d10 <_ZN3IMU11calibrationEv+0xbc>
	offset_ = sum / num;
 8001d48:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001d4c:	ee07 3a90 	vmov	s15, r3
 8001d50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d54:	ed97 7a08 	vldr	s14, [r7, #32]
 8001d58:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001d5c:	ee16 0a90 	vmov	r0, s13
 8001d60:	f7fe fc0a 	bl	8000578 <__aeabi_f2d>
 8001d64:	4603      	mov	r3, r0
 8001d66:	460c      	mov	r4, r1
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8001d6e:	46c5      	mov	sp, r8
}
 8001d70:	bf00      	nop
 8001d72:	3728      	adds	r7, #40	; 0x28
 8001d74:	46bd      	mov	sp, r7
 8001d76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08001d7c <INA260_read>:

#include "INA260.h"

//#define SLAVEADRESS1 (0x44<<1)

unsigned short INA260_read(uint8_t pointer_byte, uint8_t slave_adress) {
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af02      	add	r7, sp, #8
 8001d82:	4603      	mov	r3, r0
 8001d84:	460a      	mov	r2, r1
 8001d86:	71fb      	strb	r3, [r7, #7]
 8001d88:	4613      	mov	r3, r2
 8001d8a:	71bb      	strb	r3, [r7, #6]
	uint8_t Rxdata[2];
	unsigned short val;
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, &pointer_byte, 1, 100);
 8001d8c:	79bb      	ldrb	r3, [r7, #6]
 8001d8e:	b299      	uxth	r1, r3
 8001d90:	1dfa      	adds	r2, r7, #7
 8001d92:	2364      	movs	r3, #100	; 0x64
 8001d94:	9300      	str	r3, [sp, #0]
 8001d96:	2301      	movs	r3, #1
 8001d98:	480c      	ldr	r0, [pc, #48]	; (8001dcc <INA260_read+0x50>)
 8001d9a:	f005 fc25 	bl	80075e8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, slave_adress, Rxdata, 2, 100);
 8001d9e:	79bb      	ldrb	r3, [r7, #6]
 8001da0:	b299      	uxth	r1, r3
 8001da2:	f107 020c 	add.w	r2, r7, #12
 8001da6:	2364      	movs	r3, #100	; 0x64
 8001da8:	9300      	str	r3, [sp, #0]
 8001daa:	2302      	movs	r3, #2
 8001dac:	4807      	ldr	r0, [pc, #28]	; (8001dcc <INA260_read+0x50>)
 8001dae:	f005 fd19 	bl	80077e4 <HAL_I2C_Master_Receive>
	val = ((unsigned short)Rxdata[0] << 8) | (unsigned short)Rxdata[1];
 8001db2:	7b3b      	ldrb	r3, [r7, #12]
 8001db4:	021b      	lsls	r3, r3, #8
 8001db6:	b21a      	sxth	r2, r3
 8001db8:	7b7b      	ldrb	r3, [r7, #13]
 8001dba:	b21b      	sxth	r3, r3
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	b21b      	sxth	r3, r3
 8001dc0:	81fb      	strh	r3, [r7, #14]
	return val;
 8001dc2:	89fb      	ldrh	r3, [r7, #14]
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3710      	adds	r7, #16
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	20021a24 	.word	0x20021a24

08001dd0 <INA260_write>:

void INA260_write(uint8_t pointer_byte , uint8_t data_msbyte , uint8_t data_lsbyte, uint8_t slave_adress) {
 8001dd0:	b590      	push	{r4, r7, lr}
 8001dd2:	b087      	sub	sp, #28
 8001dd4:	af02      	add	r7, sp, #8
 8001dd6:	4604      	mov	r4, r0
 8001dd8:	4608      	mov	r0, r1
 8001dda:	4611      	mov	r1, r2
 8001ddc:	461a      	mov	r2, r3
 8001dde:	4623      	mov	r3, r4
 8001de0:	71fb      	strb	r3, [r7, #7]
 8001de2:	4603      	mov	r3, r0
 8001de4:	71bb      	strb	r3, [r7, #6]
 8001de6:	460b      	mov	r3, r1
 8001de8:	717b      	strb	r3, [r7, #5]
 8001dea:	4613      	mov	r3, r2
 8001dec:	713b      	strb	r3, [r7, #4]
	uint8_t Txcmd[3] = { pointer_byte , data_msbyte , data_lsbyte };
 8001dee:	79fb      	ldrb	r3, [r7, #7]
 8001df0:	733b      	strb	r3, [r7, #12]
 8001df2:	79bb      	ldrb	r3, [r7, #6]
 8001df4:	737b      	strb	r3, [r7, #13]
 8001df6:	797b      	ldrb	r3, [r7, #5]
 8001df8:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, Txcmd, 3, 100);
 8001dfa:	793b      	ldrb	r3, [r7, #4]
 8001dfc:	b299      	uxth	r1, r3
 8001dfe:	f107 020c 	add.w	r2, r7, #12
 8001e02:	2364      	movs	r3, #100	; 0x64
 8001e04:	9300      	str	r3, [sp, #0]
 8001e06:	2303      	movs	r3, #3
 8001e08:	4803      	ldr	r0, [pc, #12]	; (8001e18 <INA260_write+0x48>)
 8001e0a:	f005 fbed 	bl	80075e8 <HAL_I2C_Master_Transmit>
}
 8001e0e:	bf00      	nop
 8001e10:	3714      	adds	r7, #20
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd90      	pop	{r4, r7, pc}
 8001e16:	bf00      	nop
 8001e18:	20021a24 	.word	0x20021a24

08001e1c <setConfig>:

void setConfig(uint8_t msbyte , uint8_t lsbyte, uint8_t slave_adress) {
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	4603      	mov	r3, r0
 8001e24:	71fb      	strb	r3, [r7, #7]
 8001e26:	460b      	mov	r3, r1
 8001e28:	71bb      	strb	r3, [r7, #6]
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	717b      	strb	r3, [r7, #5]
	INA260_write(0x00 , msbyte , lsbyte, slave_adress);
 8001e2e:	797b      	ldrb	r3, [r7, #5]
 8001e30:	79ba      	ldrb	r2, [r7, #6]
 8001e32:	79f9      	ldrb	r1, [r7, #7]
 8001e34:	2000      	movs	r0, #0
 8001e36:	f7ff ffcb 	bl	8001dd0 <INA260_write>
}
 8001e3a:	bf00      	nop
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <INA260_init>:

void INA260_init(uint8_t slave_adress) {
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b082      	sub	sp, #8
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	4603      	mov	r3, r0
 8001e4a:	71fb      	strb	r3, [r7, #7]
	setConfig(0x00,0xDF, slave_adress);//AVG=1,BusVoltageConversionTime=588u,ShuntCurrentConversionTime=588u,mode=BusVoltageContinuous
 8001e4c:	79fb      	ldrb	r3, [r7, #7]
 8001e4e:	461a      	mov	r2, r3
 8001e50:	21df      	movs	r1, #223	; 0xdf
 8001e52:	2000      	movs	r0, #0
 8001e54:	f7ff ffe2 	bl	8001e1c <setConfig>
}
 8001e58:	bf00      	nop
 8001e5a:	3708      	adds	r7, #8
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <_ZN8JoyStickC1Ev>:
 */

#include "Joystick.hpp"
//#include "stm32f4xx_hal.h"

JoyStick::JoyStick()
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
{

}
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
	...

08001e78 <_ZN8JoyStick8getValueEv>:

uint16_t JoyStick::getValue()
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8001e80:	2300      	movs	r3, #0
 8001e82:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10)) ret_value |= 0x01;
 8001e84:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e88:	482a      	ldr	r0, [pc, #168]	; (8001f34 <_ZN8JoyStick8getValueEv+0xbc>)
 8001e8a:	f005 fa2b 	bl	80072e4 <HAL_GPIO_ReadPin>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	bf0c      	ite	eq
 8001e94:	2301      	moveq	r3, #1
 8001e96:	2300      	movne	r3, #0
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d003      	beq.n	8001ea6 <_ZN8JoyStick8getValueEv+0x2e>
 8001e9e:	89fb      	ldrh	r3, [r7, #14]
 8001ea0:	f043 0301 	orr.w	r3, r3, #1
 8001ea4:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_0)) ret_value |= 0x02;
 8001ea6:	2101      	movs	r1, #1
 8001ea8:	4823      	ldr	r0, [pc, #140]	; (8001f38 <_ZN8JoyStick8getValueEv+0xc0>)
 8001eaa:	f005 fa1b 	bl	80072e4 <HAL_GPIO_ReadPin>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	bf0c      	ite	eq
 8001eb4:	2301      	moveq	r3, #1
 8001eb6:	2300      	movne	r3, #0
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d003      	beq.n	8001ec6 <_ZN8JoyStick8getValueEv+0x4e>
 8001ebe:	89fb      	ldrh	r3, [r7, #14]
 8001ec0:	f043 0302 	orr.w	r3, r3, #2
 8001ec4:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8)) ret_value |= 0x04;
 8001ec6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001eca:	481a      	ldr	r0, [pc, #104]	; (8001f34 <_ZN8JoyStick8getValueEv+0xbc>)
 8001ecc:	f005 fa0a 	bl	80072e4 <HAL_GPIO_ReadPin>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	bf0c      	ite	eq
 8001ed6:	2301      	moveq	r3, #1
 8001ed8:	2300      	movne	r3, #0
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d003      	beq.n	8001ee8 <_ZN8JoyStick8getValueEv+0x70>
 8001ee0:	89fb      	ldrh	r3, [r7, #14]
 8001ee2:	f043 0304 	orr.w	r3, r3, #4
 8001ee6:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)) ret_value |= 0x08;
 8001ee8:	2104      	movs	r1, #4
 8001eea:	4814      	ldr	r0, [pc, #80]	; (8001f3c <_ZN8JoyStick8getValueEv+0xc4>)
 8001eec:	f005 f9fa 	bl	80072e4 <HAL_GPIO_ReadPin>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	bf0c      	ite	eq
 8001ef6:	2301      	moveq	r3, #1
 8001ef8:	2300      	movne	r3, #0
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d003      	beq.n	8001f08 <_ZN8JoyStick8getValueEv+0x90>
 8001f00:	89fb      	ldrh	r3, [r7, #14]
 8001f02:	f043 0308 	orr.w	r3, r3, #8
 8001f06:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7)) ret_value |= 0x10;
 8001f08:	2180      	movs	r1, #128	; 0x80
 8001f0a:	480a      	ldr	r0, [pc, #40]	; (8001f34 <_ZN8JoyStick8getValueEv+0xbc>)
 8001f0c:	f005 f9ea 	bl	80072e4 <HAL_GPIO_ReadPin>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	bf0c      	ite	eq
 8001f16:	2301      	moveq	r3, #1
 8001f18:	2300      	movne	r3, #0
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d003      	beq.n	8001f28 <_ZN8JoyStick8getValueEv+0xb0>
 8001f20:	89fb      	ldrh	r3, [r7, #14]
 8001f22:	f043 0310 	orr.w	r3, r3, #16
 8001f26:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8001f28:	89fb      	ldrh	r3, [r7, #14]
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3710      	adds	r7, #16
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	40021000 	.word	0x40021000
 8001f38:	40020c00 	.word	0x40020c00
 8001f3c:	40020400 	.word	0x40020400

08001f40 <_ZN3LED9fullColorEc>:
 */

#include "LED.hpp"

void LED::fullColor(char color)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	460b      	mov	r3, r1
 8001f4a:	70fb      	strb	r3, [r7, #3]
	if(color == 'R'){
 8001f4c:	78fb      	ldrb	r3, [r7, #3]
 8001f4e:	2b52      	cmp	r3, #82	; 0x52
 8001f50:	d112      	bne.n	8001f78 <_ZN3LED9fullColorEc+0x38>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001f52:	2200      	movs	r2, #0
 8001f54:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f58:	4856      	ldr	r0, [pc, #344]	; (80020b4 <_ZN3LED9fullColorEc+0x174>)
 8001f5a:	f005 f9db 	bl	8007314 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f64:	4853      	ldr	r0, [pc, #332]	; (80020b4 <_ZN3LED9fullColorEc+0x174>)
 8001f66:	f005 f9d5 	bl	8007314 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f70:	4850      	ldr	r0, [pc, #320]	; (80020b4 <_ZN3LED9fullColorEc+0x174>)
 8001f72:	f005 f9cf 	bl	8007314 <HAL_GPIO_WritePin>
	else if(color == '~'){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
	}
}
 8001f76:	e098      	b.n	80020aa <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'G'){
 8001f78:	78fb      	ldrb	r3, [r7, #3]
 8001f7a:	2b47      	cmp	r3, #71	; 0x47
 8001f7c:	d112      	bne.n	8001fa4 <_ZN3LED9fullColorEc+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f84:	484b      	ldr	r0, [pc, #300]	; (80020b4 <_ZN3LED9fullColorEc+0x174>)
 8001f86:	f005 f9c5 	bl	8007314 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f90:	4848      	ldr	r0, [pc, #288]	; (80020b4 <_ZN3LED9fullColorEc+0x174>)
 8001f92:	f005 f9bf 	bl	8007314 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001f96:	2201      	movs	r2, #1
 8001f98:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f9c:	4845      	ldr	r0, [pc, #276]	; (80020b4 <_ZN3LED9fullColorEc+0x174>)
 8001f9e:	f005 f9b9 	bl	8007314 <HAL_GPIO_WritePin>
}
 8001fa2:	e082      	b.n	80020aa <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'B'){
 8001fa4:	78fb      	ldrb	r3, [r7, #3]
 8001fa6:	2b42      	cmp	r3, #66	; 0x42
 8001fa8:	d112      	bne.n	8001fd0 <_ZN3LED9fullColorEc+0x90>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001faa:	2201      	movs	r2, #1
 8001fac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fb0:	4840      	ldr	r0, [pc, #256]	; (80020b4 <_ZN3LED9fullColorEc+0x174>)
 8001fb2:	f005 f9af 	bl	8007314 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fbc:	483d      	ldr	r0, [pc, #244]	; (80020b4 <_ZN3LED9fullColorEc+0x174>)
 8001fbe:	f005 f9a9 	bl	8007314 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fc8:	483a      	ldr	r0, [pc, #232]	; (80020b4 <_ZN3LED9fullColorEc+0x174>)
 8001fca:	f005 f9a3 	bl	8007314 <HAL_GPIO_WritePin>
}
 8001fce:	e06c      	b.n	80020aa <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'C'){
 8001fd0:	78fb      	ldrb	r3, [r7, #3]
 8001fd2:	2b43      	cmp	r3, #67	; 0x43
 8001fd4:	d112      	bne.n	8001ffc <_ZN3LED9fullColorEc+0xbc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fdc:	4835      	ldr	r0, [pc, #212]	; (80020b4 <_ZN3LED9fullColorEc+0x174>)
 8001fde:	f005 f999 	bl	8007314 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fe8:	4832      	ldr	r0, [pc, #200]	; (80020b4 <_ZN3LED9fullColorEc+0x174>)
 8001fea:	f005 f993 	bl	8007314 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ff4:	482f      	ldr	r0, [pc, #188]	; (80020b4 <_ZN3LED9fullColorEc+0x174>)
 8001ff6:	f005 f98d 	bl	8007314 <HAL_GPIO_WritePin>
}
 8001ffa:	e056      	b.n	80020aa <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'M'){
 8001ffc:	78fb      	ldrb	r3, [r7, #3]
 8001ffe:	2b4d      	cmp	r3, #77	; 0x4d
 8002000:	d112      	bne.n	8002028 <_ZN3LED9fullColorEc+0xe8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002002:	2200      	movs	r2, #0
 8002004:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002008:	482a      	ldr	r0, [pc, #168]	; (80020b4 <_ZN3LED9fullColorEc+0x174>)
 800200a:	f005 f983 	bl	8007314 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 800200e:	2201      	movs	r2, #1
 8002010:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002014:	4827      	ldr	r0, [pc, #156]	; (80020b4 <_ZN3LED9fullColorEc+0x174>)
 8002016:	f005 f97d 	bl	8007314 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800201a:	2200      	movs	r2, #0
 800201c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002020:	4824      	ldr	r0, [pc, #144]	; (80020b4 <_ZN3LED9fullColorEc+0x174>)
 8002022:	f005 f977 	bl	8007314 <HAL_GPIO_WritePin>
}
 8002026:	e040      	b.n	80020aa <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'Y'){
 8002028:	78fb      	ldrb	r3, [r7, #3]
 800202a:	2b59      	cmp	r3, #89	; 0x59
 800202c:	d112      	bne.n	8002054 <_ZN3LED9fullColorEc+0x114>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800202e:	2200      	movs	r2, #0
 8002030:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002034:	481f      	ldr	r0, [pc, #124]	; (80020b4 <_ZN3LED9fullColorEc+0x174>)
 8002036:	f005 f96d 	bl	8007314 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800203a:	2200      	movs	r2, #0
 800203c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002040:	481c      	ldr	r0, [pc, #112]	; (80020b4 <_ZN3LED9fullColorEc+0x174>)
 8002042:	f005 f967 	bl	8007314 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8002046:	2201      	movs	r2, #1
 8002048:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800204c:	4819      	ldr	r0, [pc, #100]	; (80020b4 <_ZN3LED9fullColorEc+0x174>)
 800204e:	f005 f961 	bl	8007314 <HAL_GPIO_WritePin>
}
 8002052:	e02a      	b.n	80020aa <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'W'){
 8002054:	78fb      	ldrb	r3, [r7, #3]
 8002056:	2b57      	cmp	r3, #87	; 0x57
 8002058:	d112      	bne.n	8002080 <_ZN3LED9fullColorEc+0x140>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800205a:	2200      	movs	r2, #0
 800205c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002060:	4814      	ldr	r0, [pc, #80]	; (80020b4 <_ZN3LED9fullColorEc+0x174>)
 8002062:	f005 f957 	bl	8007314 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8002066:	2200      	movs	r2, #0
 8002068:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800206c:	4811      	ldr	r0, [pc, #68]	; (80020b4 <_ZN3LED9fullColorEc+0x174>)
 800206e:	f005 f951 	bl	8007314 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8002072:	2200      	movs	r2, #0
 8002074:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002078:	480e      	ldr	r0, [pc, #56]	; (80020b4 <_ZN3LED9fullColorEc+0x174>)
 800207a:	f005 f94b 	bl	8007314 <HAL_GPIO_WritePin>
}
 800207e:	e014      	b.n	80020aa <_ZN3LED9fullColorEc+0x16a>
	else if(color == '~'){
 8002080:	78fb      	ldrb	r3, [r7, #3]
 8002082:	2b7e      	cmp	r3, #126	; 0x7e
 8002084:	d111      	bne.n	80020aa <_ZN3LED9fullColorEc+0x16a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8002086:	2201      	movs	r2, #1
 8002088:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800208c:	4809      	ldr	r0, [pc, #36]	; (80020b4 <_ZN3LED9fullColorEc+0x174>)
 800208e:	f005 f941 	bl	8007314 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8002092:	2201      	movs	r2, #1
 8002094:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002098:	4806      	ldr	r0, [pc, #24]	; (80020b4 <_ZN3LED9fullColorEc+0x174>)
 800209a:	f005 f93b 	bl	8007314 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800209e:	2201      	movs	r2, #1
 80020a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020a4:	4803      	ldr	r0, [pc, #12]	; (80020b4 <_ZN3LED9fullColorEc+0x174>)
 80020a6:	f005 f935 	bl	8007314 <HAL_GPIO_WritePin>
}
 80020aa:	bf00      	nop
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	40020000 	.word	0x40020000

080020b8 <_ZN3LED2LREaa>:

void LED::LR(int8_t l_status, int8_t r_status)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	460b      	mov	r3, r1
 80020c2:	70fb      	strb	r3, [r7, #3]
 80020c4:	4613      	mov	r3, r2
 80020c6:	70bb      	strb	r3, [r7, #2]
	if(l_status == 1)
 80020c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d106      	bne.n	80020de <_ZN3LED2LREaa+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80020d0:	2201      	movs	r2, #1
 80020d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020d6:	4813      	ldr	r0, [pc, #76]	; (8002124 <_ZN3LED2LREaa+0x6c>)
 80020d8:	f005 f91c 	bl	8007314 <HAL_GPIO_WritePin>
 80020dc:	e009      	b.n	80020f2 <_ZN3LED2LREaa+0x3a>
	else if(l_status == 0)
 80020de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d105      	bne.n	80020f2 <_ZN3LED2LREaa+0x3a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80020e6:	2200      	movs	r2, #0
 80020e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020ec:	480d      	ldr	r0, [pc, #52]	; (8002124 <_ZN3LED2LREaa+0x6c>)
 80020ee:	f005 f911 	bl	8007314 <HAL_GPIO_WritePin>

	if(r_status == 1)
 80020f2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d106      	bne.n	8002108 <_ZN3LED2LREaa+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80020fa:	2201      	movs	r2, #1
 80020fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002100:	4808      	ldr	r0, [pc, #32]	; (8002124 <_ZN3LED2LREaa+0x6c>)
 8002102:	f005 f907 	bl	8007314 <HAL_GPIO_WritePin>
	else if(r_status == 0)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);

}
 8002106:	e009      	b.n	800211c <_ZN3LED2LREaa+0x64>
	else if(r_status == 0)
 8002108:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d105      	bne.n	800211c <_ZN3LED2LREaa+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8002110:	2200      	movs	r2, #0
 8002112:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002116:	4803      	ldr	r0, [pc, #12]	; (8002124 <_ZN3LED2LREaa+0x6c>)
 8002118:	f005 f8fc 	bl	8007314 <HAL_GPIO_WritePin>
}
 800211c:	bf00      	nop
 800211e:	3708      	adds	r7, #8
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	40020000 	.word	0x40020000

08002128 <_ZN10LineSensorC1Ev>:
#include <LineSensor.hpp>
#include <algorithm>
#include "G_variables.h"
#include "Macro.h"

LineSensor::LineSensor()
 8002128:	b580      	push	{r7, lr}
 800212a:	b092      	sub	sp, #72	; 0x48
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 8002136:	4618      	mov	r0, r3
 8002138:	f7ff fe92 	bl	8001e60 <_ZN8JoyStickC1Ev>
{
	for(auto &av : analog_val_){
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	637b      	str	r3, [r7, #52]	; 0x34
 8002140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002142:	647b      	str	r3, [r7, #68]	; 0x44
 8002144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002146:	331c      	adds	r3, #28
 8002148:	633b      	str	r3, [r7, #48]	; 0x30
 800214a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800214c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800214e:	429a      	cmp	r2, r3
 8002150:	d008      	beq.n	8002164 <_ZN10LineSensorC1Ev+0x3c>
 8002152:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002154:	62fb      	str	r3, [r7, #44]	; 0x2c
		av = 0;
 8002156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002158:	2200      	movs	r2, #0
 800215a:	801a      	strh	r2, [r3, #0]
	for(auto &av : analog_val_){
 800215c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800215e:	3302      	adds	r3, #2
 8002160:	647b      	str	r3, [r7, #68]	; 0x44
 8002162:	e7f2      	b.n	800214a <_ZN10LineSensorC1Ev+0x22>
	}

	for(auto &s : sensor){
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 800216a:	62bb      	str	r3, [r7, #40]	; 0x28
 800216c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800216e:	643b      	str	r3, [r7, #64]	; 0x40
 8002170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002172:	3338      	adds	r3, #56	; 0x38
 8002174:	627b      	str	r3, [r7, #36]	; 0x24
 8002176:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217a:	429a      	cmp	r2, r3
 800217c:	d009      	beq.n	8002192 <_ZN10LineSensorC1Ev+0x6a>
 800217e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002180:	623b      	str	r3, [r7, #32]
		s = 0;
 8002182:	6a3b      	ldr	r3, [r7, #32]
 8002184:	f04f 0200 	mov.w	r2, #0
 8002188:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor){
 800218a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800218c:	3304      	adds	r3, #4
 800218e:	643b      	str	r3, [r7, #64]	; 0x40
 8002190:	e7f1      	b.n	8002176 <_ZN10LineSensorC1Ev+0x4e>
	}

	for(auto &m : offset_values_){
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002198:	61fb      	str	r3, [r7, #28]
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	3338      	adds	r3, #56	; 0x38
 80021a2:	61bb      	str	r3, [r7, #24]
 80021a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d009      	beq.n	80021c0 <_ZN10LineSensorC1Ev+0x98>
 80021ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021ae:	617b      	str	r3, [r7, #20]
		m = 0;
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	f04f 0200 	mov.w	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]
	for(auto &m : offset_values_){
 80021b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021ba:	3304      	adds	r3, #4
 80021bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021be:	e7f1      	b.n	80021a4 <_ZN10LineSensorC1Ev+0x7c>
	}
	for(auto &s : sensor_coefficient_){
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 80021c6:	613b      	str	r3, [r7, #16]
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	3338      	adds	r3, #56	; 0x38
 80021d0:	60fb      	str	r3, [r7, #12]
 80021d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d009      	beq.n	80021ee <_ZN10LineSensorC1Ev+0xc6>
 80021da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021dc:	60bb      	str	r3, [r7, #8]
		s = 1;
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80021e4:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor_coefficient_){
 80021e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021e8:	3304      	adds	r3, #4
 80021ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80021ec:	e7f1      	b.n	80021d2 <_ZN10LineSensorC1Ev+0xaa>
	}

}
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4618      	mov	r0, r3
 80021f2:	3748      	adds	r7, #72	; 0x48
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <_ZN10LineSensor8ADCStartEv>:

void LineSensor::ADCStart()
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog_val_, 14);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	220e      	movs	r2, #14
 8002204:	4619      	mov	r1, r3
 8002206:	4803      	ldr	r0, [pc, #12]	; (8002214 <_ZN10LineSensor8ADCStartEv+0x1c>)
 8002208:	f003 fe54 	bl	8005eb4 <HAL_ADC_Start_DMA>
}
 800220c:	bf00      	nop
 800220e:	3708      	adds	r7, #8
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	20021948 	.word	0x20021948

08002218 <_ZN10LineSensor17storeSensorValuesEv>:

void LineSensor::storeSensorValues()
{
 8002218:	b480      	push	{r7}
 800221a:	b085      	sub	sp, #20
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
	static uint8_t cnt = 0;

	for(int i = 0; i < AD_DATA_SIZE; i++){
 8002220:	2300      	movs	r3, #0
 8002222:	60fb      	str	r3, [r7, #12]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2b0d      	cmp	r3, #13
 8002228:	dc2f      	bgt.n	800228a <_ZN10LineSensor17storeSensorValuesEv+0x72>
		store_vals_[cnt][i] = sensor_coefficient_[i] * (analog_val_[i] - offset_values_[i]) ;
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	3392      	adds	r3, #146	; 0x92
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	4413      	add	r3, r2
 8002234:	3304      	adds	r3, #4
 8002236:	ed93 7a00 	vldr	s14, [r3]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	68fa      	ldr	r2, [r7, #12]
 800223e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002242:	ee07 3a90 	vmov	s15, r3
 8002246:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	33a0      	adds	r3, #160	; 0xa0
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	4413      	add	r3, r2
 8002254:	3304      	adds	r3, #4
 8002256:	edd3 7a00 	vldr	s15, [r3]
 800225a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800225e:	4b14      	ldr	r3, [pc, #80]	; (80022b0 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	4619      	mov	r1, r3
 8002264:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	460b      	mov	r3, r1
 800226c:	00db      	lsls	r3, r3, #3
 800226e:	1a5b      	subs	r3, r3, r1
 8002270:	005b      	lsls	r3, r3, #1
 8002272:	68f9      	ldr	r1, [r7, #12]
 8002274:	440b      	add	r3, r1
 8002276:	3306      	adds	r3, #6
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	4413      	add	r3, r2
 800227c:	3304      	adds	r3, #4
 800227e:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < AD_DATA_SIZE; i++){
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	3301      	adds	r3, #1
 8002286:	60fb      	str	r3, [r7, #12]
 8002288:	e7cc      	b.n	8002224 <_ZN10LineSensor17storeSensorValuesEv+0xc>
		//store_vals_[cnt][i] = float(analog_val_[i]) ;
	}

	cnt++;
 800228a:	4b09      	ldr	r3, [pc, #36]	; (80022b0 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	3301      	adds	r3, #1
 8002290:	b2da      	uxtb	r2, r3
 8002292:	4b07      	ldr	r3, [pc, #28]	; (80022b0 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002294:	701a      	strb	r2, [r3, #0]
	if(cnt >= 10) cnt = 0;
 8002296:	4b06      	ldr	r3, [pc, #24]	; (80022b0 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	2b09      	cmp	r3, #9
 800229c:	d902      	bls.n	80022a4 <_ZN10LineSensor17storeSensorValuesEv+0x8c>
 800229e:	4b04      	ldr	r3, [pc, #16]	; (80022b0 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	701a      	strb	r2, [r3, #0]


}
 80022a4:	bf00      	nop
 80022a6:	3714      	adds	r7, #20
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr
 80022b0:	20000200 	.word	0x20000200

080022b4 <_ZN10LineSensor18updateSensorValuesEv>:
void LineSensor::updateSensorValues()
{
 80022b4:	b490      	push	{r4, r7}
 80022b6:	b08e      	sub	sp, #56	; 0x38
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
	float temp_val[10];

	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 80022bc:	2300      	movs	r3, #0
 80022be:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80022c2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80022c6:	2b0d      	cmp	r3, #13
 80022c8:	f200 8087 	bhi.w	80023da <_ZN10LineSensor18updateSensorValuesEv+0x126>
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 80022cc:	2300      	movs	r3, #0
 80022ce:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80022d2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80022d6:	2b09      	cmp	r3, #9
 80022d8:	d81c      	bhi.n	8002314 <_ZN10LineSensor18updateSensorValuesEv+0x60>
			temp_val[store_cnt] = store_vals_[store_cnt][ad_cnt];
 80022da:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80022de:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 80022e2:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	4613      	mov	r3, r2
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	1a9b      	subs	r3, r3, r2
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	4423      	add	r3, r4
 80022f2:	3306      	adds	r3, #6
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	4403      	add	r3, r0
 80022f8:	3304      	adds	r3, #4
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	008b      	lsls	r3, r1, #2
 80022fe:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002302:	440b      	add	r3, r1
 8002304:	3b30      	subs	r3, #48	; 0x30
 8002306:	601a      	str	r2, [r3, #0]
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 8002308:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800230c:	3301      	adds	r3, #1
 800230e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002312:	e7de      	b.n	80022d2 <_ZN10LineSensor18updateSensorValuesEv+0x1e>
		}

		//std::sort(temp_val, temp_val + AD_DATA_SIZE);
		// sort
		for(uint8_t i = 0; i < 10; i++){
 8002314:	2300      	movs	r3, #0
 8002316:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800231a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800231e:	2b09      	cmp	r3, #9
 8002320:	d84d      	bhi.n	80023be <_ZN10LineSensor18updateSensorValuesEv+0x10a>
			for (uint8_t j = i+1; j < 10; j++) {
 8002322:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002326:	3301      	adds	r3, #1
 8002328:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 800232c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002330:	2b09      	cmp	r3, #9
 8002332:	d83e      	bhi.n	80023b2 <_ZN10LineSensor18updateSensorValuesEv+0xfe>
				if(temp_val[i] < temp_val[j]){
 8002334:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800233e:	4413      	add	r3, r2
 8002340:	3b30      	subs	r3, #48	; 0x30
 8002342:	ed93 7a00 	vldr	s14, [r3]
 8002346:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002350:	4413      	add	r3, r2
 8002352:	3b30      	subs	r3, #48	; 0x30
 8002354:	edd3 7a00 	vldr	s15, [r3]
 8002358:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800235c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002360:	d521      	bpl.n	80023a6 <_ZN10LineSensor18updateSensorValuesEv+0xf2>
					float tmp = temp_val[j];
 8002362:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800236c:	4413      	add	r3, r2
 800236e:	3b30      	subs	r3, #48	; 0x30
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	633b      	str	r3, [r7, #48]	; 0x30
					temp_val[j] = temp_val[i];
 8002374:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8002378:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800237c:	0092      	lsls	r2, r2, #2
 800237e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002382:	440a      	add	r2, r1
 8002384:	3a30      	subs	r2, #48	; 0x30
 8002386:	6812      	ldr	r2, [r2, #0]
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800238e:	440b      	add	r3, r1
 8002390:	3b30      	subs	r3, #48	; 0x30
 8002392:	601a      	str	r2, [r3, #0]
					temp_val[i] = tmp;
 8002394:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800239e:	4413      	add	r3, r2
 80023a0:	3b30      	subs	r3, #48	; 0x30
 80023a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023a4:	601a      	str	r2, [r3, #0]
			for (uint8_t j = i+1; j < 10; j++) {
 80023a6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80023aa:	3301      	adds	r3, #1
 80023ac:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80023b0:	e7bc      	b.n	800232c <_ZN10LineSensor18updateSensorValuesEv+0x78>
		for(uint8_t i = 0; i < 10; i++){
 80023b2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80023b6:	3301      	adds	r3, #1
 80023b8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80023bc:	e7ad      	b.n	800231a <_ZN10LineSensor18updateSensorValuesEv+0x66>
				}
			}
		}

		sensor[ad_cnt] = temp_val[5];
 80023be:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80023c2:	69fa      	ldr	r2, [r7, #28]
 80023c4:	6879      	ldr	r1, [r7, #4]
 80023c6:	33b0      	adds	r3, #176	; 0xb0
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	440b      	add	r3, r1
 80023cc:	601a      	str	r2, [r3, #0]
	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 80023ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80023d2:	3301      	adds	r3, #1
 80023d4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80023d8:	e773      	b.n	80022c2 <_ZN10LineSensor18updateSensorValuesEv+0xe>
	}
}
 80023da:	bf00      	nop
 80023dc:	3738      	adds	r7, #56	; 0x38
 80023de:	46bd      	mov	sp, r7
 80023e0:	bc90      	pop	{r4, r7}
 80023e2:	4770      	bx	lr

080023e4 <_ZN10LineSensor11calibrationEv>:

void LineSensor::calibration()
{
 80023e4:	b590      	push	{r4, r7, lr}
 80023e6:	b0a9      	sub	sp, #164	; 0xa4
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);
 80023ec:	2064      	movs	r0, #100	; 0x64
 80023ee:	f003 fcfb 	bl	8005de8 <HAL_Delay>

	float max_values[AD_DATA_SIZE];
	float min_values[AD_DATA_SIZE];

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80023f2:	2300      	movs	r3, #0
 80023f4:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 80023f8:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80023fc:	2b0d      	cmp	r3, #13
 80023fe:	d823      	bhi.n	8002448 <_ZN10LineSensor11calibrationEv+0x64>
		max_values[i] = sensor[i];
 8002400:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 8002404:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002408:	6879      	ldr	r1, [r7, #4]
 800240a:	32b0      	adds	r2, #176	; 0xb0
 800240c:	0092      	lsls	r2, r2, #2
 800240e:	440a      	add	r2, r1
 8002410:	6812      	ldr	r2, [r2, #0]
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8002418:	440b      	add	r3, r1
 800241a:	3b60      	subs	r3, #96	; 0x60
 800241c:	601a      	str	r2, [r3, #0]
		min_values[i] = sensor[i];
 800241e:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 8002422:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002426:	6879      	ldr	r1, [r7, #4]
 8002428:	32b0      	adds	r2, #176	; 0xb0
 800242a:	0092      	lsls	r2, r2, #2
 800242c:	440a      	add	r2, r1
 800242e:	6812      	ldr	r2, [r2, #0]
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8002436:	440b      	add	r3, r1
 8002438:	3b98      	subs	r3, #152	; 0x98
 800243a:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800243c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002440:	3301      	adds	r3, #1
 8002442:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 8002446:	e7d7      	b.n	80023f8 <_ZN10LineSensor11calibrationEv+0x14>
	}

	while(joy_stick_.getValue() != JOY_C){
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 800244e:	4618      	mov	r0, r3
 8002450:	f7ff fd12 	bl	8001e78 <_ZN8JoyStick8getValueEv>
 8002454:	4603      	mov	r3, r0
 8002456:	2b02      	cmp	r3, #2
 8002458:	bf14      	ite	ne
 800245a:	2301      	movne	r3, #1
 800245c:	2300      	moveq	r3, #0
 800245e:	b2db      	uxtb	r3, r3
 8002460:	2b00      	cmp	r3, #0
 8002462:	d079      	beq.n	8002558 <_ZN10LineSensor11calibrationEv+0x174>

		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002464:	2300      	movs	r3, #0
 8002466:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 800246a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800246e:	2b0d      	cmp	r3, #13
 8002470:	d850      	bhi.n	8002514 <_ZN10LineSensor11calibrationEv+0x130>
			if(max_values[i] < sensor[i]){
 8002472:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800247c:	4413      	add	r3, r2
 800247e:	3b60      	subs	r3, #96	; 0x60
 8002480:	ed93 7a00 	vldr	s14, [r3]
 8002484:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	33b0      	adds	r3, #176	; 0xb0
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	4413      	add	r3, r2
 8002490:	edd3 7a00 	vldr	s15, [r3]
 8002494:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800249c:	d50f      	bpl.n	80024be <_ZN10LineSensor11calibrationEv+0xda>
				max_values[i] = sensor[i];
 800249e:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 80024a2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80024a6:	6879      	ldr	r1, [r7, #4]
 80024a8:	32b0      	adds	r2, #176	; 0xb0
 80024aa:	0092      	lsls	r2, r2, #2
 80024ac:	440a      	add	r2, r1
 80024ae:	6812      	ldr	r2, [r2, #0]
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 80024b6:	440b      	add	r3, r1
 80024b8:	3b60      	subs	r3, #96	; 0x60
 80024ba:	601a      	str	r2, [r3, #0]
 80024bc:	e024      	b.n	8002508 <_ZN10LineSensor11calibrationEv+0x124>
			}
			else if(min_values[i] > sensor[i]){
 80024be:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80024c8:	4413      	add	r3, r2
 80024ca:	3b98      	subs	r3, #152	; 0x98
 80024cc:	ed93 7a00 	vldr	s14, [r3]
 80024d0:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	33b0      	adds	r3, #176	; 0xb0
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	4413      	add	r3, r2
 80024dc:	edd3 7a00 	vldr	s15, [r3]
 80024e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024e8:	dd0e      	ble.n	8002508 <_ZN10LineSensor11calibrationEv+0x124>
				min_values[i] = sensor[i];
 80024ea:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 80024ee:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80024f2:	6879      	ldr	r1, [r7, #4]
 80024f4:	32b0      	adds	r2, #176	; 0xb0
 80024f6:	0092      	lsls	r2, r2, #2
 80024f8:	440a      	add	r2, r1
 80024fa:	6812      	ldr	r2, [r2, #0]
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8002502:	440b      	add	r3, r1
 8002504:	3b98      	subs	r3, #152	; 0x98
 8002506:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002508:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800250c:	3301      	adds	r3, #1
 800250e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8002512:	e7aa      	b.n	800246a <_ZN10LineSensor11calibrationEv+0x86>
			}
		}

		if(rotary_switch_.getValue() == 0){
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f203 23be 	addw	r3, r3, #702	; 0x2be
 800251a:	4618      	mov	r0, r3
 800251c:	f000 fe8a 	bl	8003234 <_ZN12RotarySwitch8getValueEv>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	bf0c      	ite	eq
 8002526:	2301      	moveq	r3, #1
 8002528:	2300      	movne	r3, #0
 800252a:	b2db      	uxtb	r3, r3
 800252c:	2b00      	cmp	r3, #0
 800252e:	d009      	beq.n	8002544 <_ZN10LineSensor11calibrationEv+0x160>
			led_.LR(-1, 1);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8002536:	2201      	movs	r2, #1
 8002538:	f04f 31ff 	mov.w	r1, #4294967295
 800253c:	4618      	mov	r0, r3
 800253e:	f7ff fdbb 	bl	80020b8 <_ZN3LED2LREaa>
 8002542:	e781      	b.n	8002448 <_ZN10LineSensor11calibrationEv+0x64>

		}
		else{
			led_.LR(-1, 0);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 800254a:	2200      	movs	r2, #0
 800254c:	f04f 31ff 	mov.w	r1, #4294967295
 8002550:	4618      	mov	r0, r3
 8002552:	f7ff fdb1 	bl	80020b8 <_ZN3LED2LREaa>
	while(joy_stick_.getValue() != JOY_C){
 8002556:	e777      	b.n	8002448 <_ZN10LineSensor11calibrationEv+0x64>

		}
	}

	for(const auto &m : max_values){
 8002558:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800255c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002560:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002564:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002568:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800256c:	3338      	adds	r3, #56	; 0x38
 800256e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002572:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002576:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800257a:	429a      	cmp	r2, r3
 800257c:	d016      	beq.n	80025ac <_ZN10LineSensor11calibrationEv+0x1c8>
 800257e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002582:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		printf("%f, ", m);
 8002586:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4618      	mov	r0, r3
 800258e:	f7fd fff3 	bl	8000578 <__aeabi_f2d>
 8002592:	4603      	mov	r3, r0
 8002594:	460c      	mov	r4, r1
 8002596:	461a      	mov	r2, r3
 8002598:	4623      	mov	r3, r4
 800259a:	4842      	ldr	r0, [pc, #264]	; (80026a4 <_ZN10LineSensor11calibrationEv+0x2c0>)
 800259c:	f010 fd86 	bl	80130ac <iprintf>
	for(const auto &m : max_values){
 80025a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80025a4:	3304      	adds	r3, #4
 80025a6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80025aa:	e7e2      	b.n	8002572 <_ZN10LineSensor11calibrationEv+0x18e>
	}
		printf("\n");
 80025ac:	200a      	movs	r0, #10
 80025ae:	f010 fd95 	bl	80130dc <putchar>
	for(const auto &m : min_values){
 80025b2:	f107 0308 	add.w	r3, r7, #8
 80025b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80025ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80025c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025c6:	3338      	adds	r3, #56	; 0x38
 80025c8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80025ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80025ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d014      	beq.n	80025fe <_ZN10LineSensor11calibrationEv+0x21a>
 80025d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80025d8:	67bb      	str	r3, [r7, #120]	; 0x78
		printf("%f, ", m);
 80025da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4618      	mov	r0, r3
 80025e0:	f7fd ffca 	bl	8000578 <__aeabi_f2d>
 80025e4:	4603      	mov	r3, r0
 80025e6:	460c      	mov	r4, r1
 80025e8:	461a      	mov	r2, r3
 80025ea:	4623      	mov	r3, r4
 80025ec:	482d      	ldr	r0, [pc, #180]	; (80026a4 <_ZN10LineSensor11calibrationEv+0x2c0>)
 80025ee:	f010 fd5d 	bl	80130ac <iprintf>
	for(const auto &m : min_values){
 80025f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80025f6:	3304      	adds	r3, #4
 80025f8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80025fc:	e7e5      	b.n	80025ca <_ZN10LineSensor11calibrationEv+0x1e6>
	}
		printf("\n");
 80025fe:	200a      	movs	r0, #10
 8002600:	f010 fd6c 	bl	80130dc <putchar>


	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002604:	2300      	movs	r3, #0
 8002606:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 800260a:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800260e:	2b0d      	cmp	r3, #13
 8002610:	d826      	bhi.n	8002660 <_ZN10LineSensor11calibrationEv+0x27c>
		sensor_coefficient_[i] = 1000 / (max_values[i] - min_values[i]);
 8002612:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800261c:	4413      	add	r3, r2
 800261e:	3b60      	subs	r3, #96	; 0x60
 8002620:	ed93 7a00 	vldr	s14, [r3]
 8002624:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800262e:	4413      	add	r3, r2
 8002630:	3b98      	subs	r3, #152	; 0x98
 8002632:	edd3 7a00 	vldr	s15, [r3]
 8002636:	ee37 7a67 	vsub.f32	s14, s14, s15
 800263a:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800263e:	eddf 6a1a 	vldr	s13, [pc, #104]	; 80026a8 <_ZN10LineSensor11calibrationEv+0x2c4>
 8002642:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	3392      	adds	r3, #146	; 0x92
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	4413      	add	r3, r2
 800264e:	3304      	adds	r3, #4
 8002650:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002654:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8002658:	3301      	adds	r3, #1
 800265a:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 800265e:	e7d4      	b.n	800260a <_ZN10LineSensor11calibrationEv+0x226>
	}
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002660:	2300      	movs	r3, #0
 8002662:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 8002666:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 800266a:	2b0d      	cmp	r3, #13
 800266c:	d815      	bhi.n	800269a <_ZN10LineSensor11calibrationEv+0x2b6>
		offset_values_[i] = min_values[i];
 800266e:	f8b7 2090 	ldrh.w	r2, [r7, #144]	; 0x90
 8002672:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 8002676:	0092      	lsls	r2, r2, #2
 8002678:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 800267c:	440a      	add	r2, r1
 800267e:	3a98      	subs	r2, #152	; 0x98
 8002680:	6812      	ldr	r2, [r2, #0]
 8002682:	6879      	ldr	r1, [r7, #4]
 8002684:	33a0      	adds	r3, #160	; 0xa0
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	440b      	add	r3, r1
 800268a:	3304      	adds	r3, #4
 800268c:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800268e:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 8002692:	3301      	adds	r3, #1
 8002694:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 8002698:	e7e5      	b.n	8002666 <_ZN10LineSensor11calibrationEv+0x282>
	}


}
 800269a:	bf00      	nop
 800269c:	37a4      	adds	r7, #164	; 0xa4
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd90      	pop	{r4, r7, pc}
 80026a2:	bf00      	nop
 80026a4:	080172b8 	.word	0x080172b8
 80026a8:	447a0000 	.word	0x447a0000

080026ac <_ZN10LineSensor13emergencyStopEv>:
	printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n", sensor[0], sensor[1], sensor[2], sensor[3], sensor[4], sensor[5], sensor[6], sensor[7], sensor[8], sensor[9], sensor[10], sensor[11], sensor[12], sensor[13]);

}

bool LineSensor::emergencyStop()
{
 80026ac:	b480      	push	{r7}
 80026ae:	b089      	sub	sp, #36	; 0x24
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
	uint8_t cnt = 0;
 80026b4:	2300      	movs	r3, #0
 80026b6:	77fb      	strb	r3, [r7, #31]

	for(const auto & s : sensor){
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 80026be:	613b      	str	r3, [r7, #16]
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	61bb      	str	r3, [r7, #24]
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	3338      	adds	r3, #56	; 0x38
 80026c8:	60fb      	str	r3, [r7, #12]
 80026ca:	69ba      	ldr	r2, [r7, #24]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d012      	beq.n	80026f8 <_ZN10LineSensor13emergencyStopEv+0x4c>
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	60bb      	str	r3, [r7, #8]
		if(s >= 600) cnt++;
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	edd3 7a00 	vldr	s15, [r3]
 80026dc:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002718 <_ZN10LineSensor13emergencyStopEv+0x6c>
 80026e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026e8:	db02      	blt.n	80026f0 <_ZN10LineSensor13emergencyStopEv+0x44>
 80026ea:	7ffb      	ldrb	r3, [r7, #31]
 80026ec:	3301      	adds	r3, #1
 80026ee:	77fb      	strb	r3, [r7, #31]
	for(const auto & s : sensor){
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	3304      	adds	r3, #4
 80026f4:	61bb      	str	r3, [r7, #24]
 80026f6:	e7e8      	b.n	80026ca <_ZN10LineSensor13emergencyStopEv+0x1e>
	}

	bool flag;
	if(cnt >= AD_DATA_SIZE) flag = true;
 80026f8:	7ffb      	ldrb	r3, [r7, #31]
 80026fa:	2b0d      	cmp	r3, #13
 80026fc:	d902      	bls.n	8002704 <_ZN10LineSensor13emergencyStopEv+0x58>
 80026fe:	2301      	movs	r3, #1
 8002700:	75fb      	strb	r3, [r7, #23]
 8002702:	e001      	b.n	8002708 <_ZN10LineSensor13emergencyStopEv+0x5c>
	else flag = false;
 8002704:	2300      	movs	r3, #0
 8002706:	75fb      	strb	r3, [r7, #23]

	return flag;
 8002708:	7dfb      	ldrb	r3, [r7, #23]

}
 800270a:	4618      	mov	r0, r3
 800270c:	3724      	adds	r7, #36	; 0x24
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	44160000 	.word	0x44160000

0800271c <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrl>:
float monitor_delta_theta;
float monitor_steering_angle;
float monitor_target_omega;
float monitor_r;

LineTrace::LineTrace(Motor *motor, LineSensor *line_sensor, VelocityCtrl *velocity_ctrl) : kp_(0), kd_(0), ki_(0), excution_flag_(false), normal_ratio_(0){
 800271c:	b480      	push	{r7}
 800271e:	b085      	sub	sp, #20
 8002720:	af00      	add	r7, sp, #0
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	60b9      	str	r1, [r7, #8]
 8002726:	607a      	str	r2, [r7, #4]
 8002728:	603b      	str	r3, [r7, #0]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	f04f 0200 	mov.w	r2, #0
 8002730:	611a      	str	r2, [r3, #16]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	f04f 0200 	mov.w	r2, #0
 8002738:	615a      	str	r2, [r3, #20]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	f04f 0200 	mov.w	r2, #0
 8002740:	619a      	str	r2, [r3, #24]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2200      	movs	r2, #0
 8002746:	771a      	strb	r2, [r3, #28]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f04f 0200 	mov.w	r2, #0
 800274e:	621a      	str	r2, [r3, #32]
	motor_ = motor;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	68ba      	ldr	r2, [r7, #8]
 8002754:	601a      	str	r2, [r3, #0]
	line_sensor_ = line_sensor;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	683a      	ldr	r2, [r7, #0]
 8002760:	609a      	str	r2, [r3, #8]
}
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	4618      	mov	r0, r3
 8002766:	3714      	adds	r7, #20
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr

08002770 <_ZN9LineTrace9calcErrorEv>:

// --------private--------- //
float LineTrace::calcError()
{
 8002770:	b480      	push	{r7}
 8002772:	b085      	sub	sp, #20
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8002788:	ee37 7a27 	vadd.f32	s14, s14, s15
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8002794:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	edd3 7ab3 	vldr	s15, [r3, #716]	; 0x2cc
 80027a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 80027ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	edd3 7ab5 	vldr	s15, [r3, #724]	; 0x2d4
 80027b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	edd3 7ab6 	vldr	s15, [r3, #728]	; 0x2d8
 80027c4:	ee37 7a27 	vadd.f32	s14, s14, s15
			- (line_sensor_->sensor[7] + line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10] + line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	edd3 6ab7 	vldr	s13, [r3, #732]	; 0x2dc
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 80027d8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	edd3 7ab9 	vldr	s15, [r3, #740]	; 0x2e4
 80027e4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 80027f0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	edd3 7abb 	vldr	s15, [r3, #748]	; 0x2ec
 80027fc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 8002808:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 8002814:	ee76 7aa7 	vadd.f32	s15, s13, s15
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 8002818:	ee77 7a67 	vsub.f32	s15, s14, s15
 800281c:	edc7 7a03 	vstr	s15, [r7, #12]

	return diff;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	ee07 3a90 	vmov	s15, r3

}
 8002826:	eeb0 0a67 	vmov.f32	s0, s15
 800282a:	3714      	adds	r7, #20
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr
 8002834:	0000      	movs	r0, r0
	...

08002838 <_ZN9LineTrace3pidEv>:
	float phi = atan2(norm_l - norm_r, 1.0);
	delta_theta = (phi * ANGLE_BETWEEN_SENSORS/2) / (PI / 4);
}

void LineTrace::pid()
{
 8002838:	b5f0      	push	{r4, r5, r6, r7, lr}
 800283a:	b089      	sub	sp, #36	; 0x24
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
	float diff = calcError();
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f7ff ff95 	bl	8002770 <_ZN9LineTrace9calcErrorEv>
 8002846:	ed87 0a07 	vstr	s0, [r7, #28]
	static float pre_diff = 0;
	float p, d;
	static float i;

	p = kp_ * diff;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002850:	ed97 7a07 	vldr	s14, [r7, #28]
 8002854:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002858:	edc7 7a06 	vstr	s15, [r7, #24]
	d = kd_ * (diff - pre_diff) / DELTA_T;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	ed93 7a05 	vldr	s14, [r3, #20]
 8002862:	4b41      	ldr	r3, [pc, #260]	; (8002968 <_ZN9LineTrace3pidEv+0x130>)
 8002864:	edd3 7a00 	vldr	s15, [r3]
 8002868:	edd7 6a07 	vldr	s13, [r7, #28]
 800286c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002870:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002874:	ee17 0a90 	vmov	r0, s15
 8002878:	f7fd fe7e 	bl	8000578 <__aeabi_f2d>
 800287c:	a338      	add	r3, pc, #224	; (adr r3, 8002960 <_ZN9LineTrace3pidEv+0x128>)
 800287e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002882:	f7fd fffb 	bl	800087c <__aeabi_ddiv>
 8002886:	4603      	mov	r3, r0
 8002888:	460c      	mov	r4, r1
 800288a:	4618      	mov	r0, r3
 800288c:	4621      	mov	r1, r4
 800288e:	f7fe f9c3 	bl	8000c18 <__aeabi_d2f>
 8002892:	4603      	mov	r3, r0
 8002894:	617b      	str	r3, [r7, #20]
	i += ki_ * diff * DELTA_T;
 8002896:	4b35      	ldr	r3, [pc, #212]	; (800296c <_ZN9LineTrace3pidEv+0x134>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4618      	mov	r0, r3
 800289c:	f7fd fe6c 	bl	8000578 <__aeabi_f2d>
 80028a0:	4604      	mov	r4, r0
 80028a2:	460d      	mov	r5, r1
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	ed93 7a06 	vldr	s14, [r3, #24]
 80028aa:	edd7 7a07 	vldr	s15, [r7, #28]
 80028ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028b2:	ee17 0a90 	vmov	r0, s15
 80028b6:	f7fd fe5f 	bl	8000578 <__aeabi_f2d>
 80028ba:	a329      	add	r3, pc, #164	; (adr r3, 8002960 <_ZN9LineTrace3pidEv+0x128>)
 80028bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028c0:	f7fd feb2 	bl	8000628 <__aeabi_dmul>
 80028c4:	4602      	mov	r2, r0
 80028c6:	460b      	mov	r3, r1
 80028c8:	4620      	mov	r0, r4
 80028ca:	4629      	mov	r1, r5
 80028cc:	f7fd fcf6 	bl	80002bc <__adddf3>
 80028d0:	4603      	mov	r3, r0
 80028d2:	460c      	mov	r4, r1
 80028d4:	4618      	mov	r0, r3
 80028d6:	4621      	mov	r1, r4
 80028d8:	f7fe f99e 	bl	8000c18 <__aeabi_d2f>
 80028dc:	4602      	mov	r2, r0
 80028de:	4b23      	ldr	r3, [pc, #140]	; (800296c <_ZN9LineTrace3pidEv+0x134>)
 80028e0:	601a      	str	r2, [r3, #0]

	float left_ratio = normal_ratio_ + (p + d + i);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	ed93 7a08 	vldr	s14, [r3, #32]
 80028e8:	edd7 6a06 	vldr	s13, [r7, #24]
 80028ec:	edd7 7a05 	vldr	s15, [r7, #20]
 80028f0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80028f4:	4b1d      	ldr	r3, [pc, #116]	; (800296c <_ZN9LineTrace3pidEv+0x134>)
 80028f6:	edd3 7a00 	vldr	s15, [r3]
 80028fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80028fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002902:	edc7 7a04 	vstr	s15, [r7, #16]
	float right_ratio = normal_ratio_ - (p + d + i);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	ed93 7a08 	vldr	s14, [r3, #32]
 800290c:	edd7 6a06 	vldr	s13, [r7, #24]
 8002910:	edd7 7a05 	vldr	s15, [r7, #20]
 8002914:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002918:	4b14      	ldr	r3, [pc, #80]	; (800296c <_ZN9LineTrace3pidEv+0x134>)
 800291a:	edd3 7a00 	vldr	s15, [r3]
 800291e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002922:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002926:	edc7 7a03 	vstr	s15, [r7, #12]

	motor_->setRatio(left_ratio, right_ratio);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681c      	ldr	r4, [r3, #0]
 800292e:	6938      	ldr	r0, [r7, #16]
 8002930:	f7fd fe22 	bl	8000578 <__aeabi_f2d>
 8002934:	4605      	mov	r5, r0
 8002936:	460e      	mov	r6, r1
 8002938:	68f8      	ldr	r0, [r7, #12]
 800293a:	f7fd fe1d 	bl	8000578 <__aeabi_f2d>
 800293e:	4602      	mov	r2, r0
 8002940:	460b      	mov	r3, r1
 8002942:	ec43 2b11 	vmov	d1, r2, r3
 8002946:	ec46 5b10 	vmov	d0, r5, r6
 800294a:	4620      	mov	r0, r4
 800294c:	f000 fa5c 	bl	8002e08 <_ZN5Motor8setRatioEdd>

	pre_diff = diff;
 8002950:	4a05      	ldr	r2, [pc, #20]	; (8002968 <_ZN9LineTrace3pidEv+0x130>)
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	6013      	str	r3, [r2, #0]

}
 8002956:	bf00      	nop
 8002958:	3724      	adds	r7, #36	; 0x24
 800295a:	46bd      	mov	sp, r7
 800295c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800295e:	bf00      	nop
 8002960:	d2f1a9fc 	.word	0xd2f1a9fc
 8002964:	3f50624d 	.word	0x3f50624d
 8002968:	20000204 	.word	0x20000204
 800296c:	20000208 	.word	0x20000208

08002970 <_ZN9LineTrace7setGainEfff>:
{

}

void LineTrace::setGain(float kp, float kd, float ki)
{
 8002970:	b480      	push	{r7}
 8002972:	b085      	sub	sp, #20
 8002974:	af00      	add	r7, sp, #0
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	ed87 0a02 	vstr	s0, [r7, #8]
 800297c:	edc7 0a01 	vstr	s1, [r7, #4]
 8002980:	ed87 1a00 	vstr	s2, [r7]
	kp_ = kp;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	68ba      	ldr	r2, [r7, #8]
 8002988:	611a      	str	r2, [r3, #16]
	kd_ = kd;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	615a      	str	r2, [r3, #20]
	ki_ = ki;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	683a      	ldr	r2, [r7, #0]
 8002994:	619a      	str	r2, [r3, #24]
}
 8002996:	bf00      	nop
 8002998:	3714      	adds	r7, #20
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr

080029a2 <_ZN9LineTrace14setNormalRatioEf>:

void LineTrace::setNormalRatio(float ratio)
{
 80029a2:	b480      	push	{r7}
 80029a4:	b083      	sub	sp, #12
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
 80029aa:	ed87 0a00 	vstr	s0, [r7]
	normal_ratio_ = ratio;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	683a      	ldr	r2, [r7, #0]
 80029b2:	621a      	str	r2, [r3, #32]
}
 80029b4:	bf00      	nop
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr

080029c0 <_ZN9LineTrace17setTargetVelocityEf>:

void LineTrace::setTargetVelocity(float velocity)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	ed87 0a00 	vstr	s0, [r7]
	target_velocity_ = velocity;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	683a      	ldr	r2, [r7, #0]
 80029d0:	659a      	str	r2, [r3, #88]	; 0x58
}
 80029d2:	bf00      	nop
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
	...

080029e0 <_ZN9LineTrace4flipEv>:

void LineTrace::flip()
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]

	if(excution_flag_ == true){
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	7f1b      	ldrb	r3, [r3, #28]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d002      	beq.n	80029f6 <_ZN9LineTrace4flipEv+0x16>
		pid();
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f7ff ff21 	bl	8002838 <_ZN9LineTrace3pidEv>
		//steeringAngleTrace();
	}
	if(line_sensor_->emergencyStop() == true){
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7ff fe56 	bl	80026ac <_ZN10LineSensor13emergencyStopEv>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d011      	beq.n	8002a2a <_ZN9LineTrace4flipEv+0x4a>
		motor_->setRatio(0, 0);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 8002a48 <_ZN9LineTrace4flipEv+0x68>
 8002a0e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8002a48 <_ZN9LineTrace4flipEv+0x68>
 8002a12:	4618      	mov	r0, r3
 8002a14:	f000 f9f8 	bl	8002e08 <_ZN5Motor8setRatioEdd>
		led_.LR(1, -1);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	330c      	adds	r3, #12
 8002a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a20:	2101      	movs	r1, #1
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7ff fb48 	bl	80020b8 <_ZN3LED2LREaa>
	else{
		led_.LR(0, -1);

	}

}
 8002a28:	e007      	b.n	8002a3a <_ZN9LineTrace4flipEv+0x5a>
		led_.LR(0, -1);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	330c      	adds	r3, #12
 8002a2e:	f04f 32ff 	mov.w	r2, #4294967295
 8002a32:	2100      	movs	r1, #0
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7ff fb3f 	bl	80020b8 <_ZN3LED2LREaa>
}
 8002a3a:	bf00      	nop
 8002a3c:	3708      	adds	r7, #8
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	f3af 8000 	nop.w
	...

08002a50 <_ZN9LineTrace5startEv>:

void LineTrace::start()
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	771a      	strb	r2, [r3, #28]
}
 8002a5e:	bf00      	nop
 8002a60:	370c      	adds	r7, #12
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
 8002a6a:	0000      	movs	r0, r0
 8002a6c:	0000      	movs	r0, r0
	...

08002a70 <_ZN9LineTrace4stopEv>:

void LineTrace::stop()
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	771a      	strb	r2, [r3, #28]
	motor_->setRatio(0, 0);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	ed9f 1b05 	vldr	d1, [pc, #20]	; 8002a98 <_ZN9LineTrace4stopEv+0x28>
 8002a86:	ed9f 0b04 	vldr	d0, [pc, #16]	; 8002a98 <_ZN9LineTrace4stopEv+0x28>
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f000 f9bc 	bl	8002e08 <_ZN5Motor8setRatioEdd>
}
 8002a90:	bf00      	nop
 8002a92:	3708      	adds	r7, #8
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
	...

08002aa0 <_ZN6LoggerC1Ev>:
#include "Logger.hpp"
#include "HAL_SDcard_lib.h"
#include <stdio.h>
#include "Macro.h"

Logger::Logger() : recording_flag_(false), log_index_tim_(0), log_index_dis_(0){}
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8002aae:	3330      	adds	r3, #48	; 0x30
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	701a      	strb	r2, [r3, #0]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8002aba:	3332      	adds	r3, #50	; 0x32
 8002abc:	2200      	movs	r2, #0
 8002abe:	801a      	strh	r2, [r3, #0]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8002ac6:	3334      	adds	r3, #52	; 0x34
 8002ac8:	2200      	movs	r2, #0
 8002aca:	801a      	strh	r2, [r3, #0]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	4618      	mov	r0, r3
 8002ad0:	370c      	adds	r7, #12
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
	...

08002adc <_ZN6Logger10sdCardInitEv>:

bool Logger::sdCardInit()
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b088      	sub	sp, #32
 8002ae0:	af02      	add	r7, sp, #8
 8002ae2:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	75fb      	strb	r3, [r7, #23]

	if(sd_mount() == 1){
 8002ae8:	f7fe fea0 	bl	800182c <sd_mount>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	bf0c      	ite	eq
 8002af2:	2301      	moveq	r3, #1
 8002af4:	2300      	movne	r3, #0
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d005      	beq.n	8002b08 <_ZN6Logger10sdCardInitEv+0x2c>
	  printf("mount success\r\n");
 8002afc:	4816      	ldr	r0, [pc, #88]	; (8002b58 <_ZN6Logger10sdCardInitEv+0x7c>)
 8002afe:	f010 fb5d 	bl	80131bc <puts>
	  ret = true;
 8002b02:	2301      	movs	r3, #1
 8002b04:	75fb      	strb	r3, [r7, #23]
 8002b06:	e004      	b.n	8002b12 <_ZN6Logger10sdCardInitEv+0x36>
	}
	else{
	  printf("mount error\r\n");
 8002b08:	4814      	ldr	r0, [pc, #80]	; (8002b5c <_ZN6Logger10sdCardInitEv+0x80>)
 8002b0a:	f010 fb57 	bl	80131bc <puts>
	  ret = false;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	75fb      	strb	r3, [r7, #23]
	}

	int	data[1];
	int temp[1];

	data[0] = 100;
 8002b12:	2364      	movs	r3, #100	; 0x64
 8002b14:	613b      	str	r3, [r7, #16]
	sd_write_array_int("sdio", "write1.txt", DATA_SIZE, data, ADD_WRITE); //write
 8002b16:	f107 0210 	add.w	r2, r7, #16
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	9300      	str	r3, [sp, #0]
 8002b1e:	4613      	mov	r3, r2
 8002b20:	2201      	movs	r2, #1
 8002b22:	490f      	ldr	r1, [pc, #60]	; (8002b60 <_ZN6Logger10sdCardInitEv+0x84>)
 8002b24:	480f      	ldr	r0, [pc, #60]	; (8002b64 <_ZN6Logger10sdCardInitEv+0x88>)
 8002b26:	f7fe fddd 	bl	80016e4 <sd_write_array_int>
	sd_read_array_int("sdio", "write1.txt", DATA_SIZE, temp); //read
 8002b2a:	f107 030c 	add.w	r3, r7, #12
 8002b2e:	2201      	movs	r2, #1
 8002b30:	490b      	ldr	r1, [pc, #44]	; (8002b60 <_ZN6Logger10sdCardInitEv+0x84>)
 8002b32:	480c      	ldr	r0, [pc, #48]	; (8002b64 <_ZN6Logger10sdCardInitEv+0x88>)
 8002b34:	f7fe fe34 	bl	80017a0 <sd_read_array_int>
	sd_write_array_int("sdio", "write2.txt", DATA_SIZE, temp, ADD_WRITE); //write
 8002b38:	f107 020c 	add.w	r2, r7, #12
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	9300      	str	r3, [sp, #0]
 8002b40:	4613      	mov	r3, r2
 8002b42:	2201      	movs	r2, #1
 8002b44:	4908      	ldr	r1, [pc, #32]	; (8002b68 <_ZN6Logger10sdCardInitEv+0x8c>)
 8002b46:	4807      	ldr	r0, [pc, #28]	; (8002b64 <_ZN6Logger10sdCardInitEv+0x88>)
 8002b48:	f7fe fdcc 	bl	80016e4 <sd_write_array_int>

	return ret;
 8002b4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3718      	adds	r7, #24
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	080172f8 	.word	0x080172f8
 8002b5c:	08017308 	.word	0x08017308
 8002b60:	08017318 	.word	0x08017318
 8002b64:	08017324 	.word	0x08017324
 8002b68:	0801732c 	.word	0x0801732c

08002b6c <_ZN6Logger8storeLogEf>:

	}

}
void Logger::storeLog(float data)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8002b7e:	3330      	adds	r3, #48	; 0x30
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d024      	beq.n	8002bd0 <_ZN6Logger8storeLogEf+0x64>
		store_data_float_[log_index_tim_] = data;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8002b8c:	3332      	adds	r3, #50	; 0x32
 8002b8e:	881b      	ldrh	r3, [r3, #0]
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	4413      	add	r3, r2
 8002b96:	683a      	ldr	r2, [r7, #0]
 8002b98:	601a      	str	r2, [r3, #0]

		log_index_tim_++;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8002ba0:	3332      	adds	r3, #50	; 0x32
 8002ba2:	881b      	ldrh	r3, [r3, #0]
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	b29a      	uxth	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8002bae:	3332      	adds	r3, #50	; 0x32
 8002bb0:	801a      	strh	r2, [r3, #0]

		if(log_index_tim_ >= LOG_DATA_SIZE_TIM) log_index_tim_ = 0;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8002bb8:	3332      	adds	r3, #50	; 0x32
 8002bba:	881b      	ldrh	r3, [r3, #0]
 8002bbc:	f241 3287 	movw	r2, #4999	; 0x1387
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d905      	bls.n	8002bd0 <_ZN6Logger8storeLogEf+0x64>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8002bca:	3332      	adds	r3, #50	; 0x32
 8002bcc:	2200      	movs	r2, #0
 8002bce:	801a      	strh	r2, [r3, #0]
	}
}
 8002bd0:	bf00      	nop
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <_ZN6Logger21storeDistanceAndThetaEdd>:
{

}

void Logger::storeDistanceAndTheta(double distance, double theta)
{
 8002bdc:	b490      	push	{r4, r7}
 8002bde:	b086      	sub	sp, #24
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6178      	str	r0, [r7, #20]
 8002be4:	ed87 0b02 	vstr	d0, [r7, #8]
 8002be8:	ed87 1b00 	vstr	d1, [r7]
	if(recording_flag_ == true){
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8002bf2:	3330      	adds	r3, #48	; 0x30
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d037      	beq.n	8002c6a <_ZN6Logger21storeDistanceAndThetaEdd+0x8e>
		store_distance_[log_index_dis_] = distance;
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8002c00:	3334      	adds	r3, #52	; 0x34
 8002c02:	881b      	ldrh	r3, [r3, #0]
 8002c04:	697a      	ldr	r2, [r7, #20]
 8002c06:	f603 63a6 	addw	r3, r3, #3750	; 0xea6
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	441a      	add	r2, r3
 8002c0e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002c12:	e9c2 3400 	strd	r3, r4, [r2]
		store_theta_[log_index_dis_] = theta;
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8002c1c:	3334      	adds	r3, #52	; 0x34
 8002c1e:	881b      	ldrh	r3, [r3, #0]
 8002c20:	697a      	ldr	r2, [r7, #20]
 8002c22:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8002c26:	3316      	adds	r3, #22
 8002c28:	00db      	lsls	r3, r3, #3
 8002c2a:	441a      	add	r2, r3
 8002c2c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002c30:	e9c2 3400 	strd	r3, r4, [r2]

		log_index_dis_++;
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8002c3a:	3334      	adds	r3, #52	; 0x34
 8002c3c:	881b      	ldrh	r3, [r3, #0]
 8002c3e:	3301      	adds	r3, #1
 8002c40:	b29a      	uxth	r2, r3
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8002c48:	3334      	adds	r3, #52	; 0x34
 8002c4a:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8002c52:	3334      	adds	r3, #52	; 0x34
 8002c54:	881b      	ldrh	r3, [r3, #0]
 8002c56:	f241 726f 	movw	r2, #5999	; 0x176f
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d905      	bls.n	8002c6a <_ZN6Logger21storeDistanceAndThetaEdd+0x8e>
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8002c64:	3334      	adds	r3, #52	; 0x34
 8002c66:	2200      	movs	r2, #0
 8002c68:	801a      	strh	r2, [r3, #0]
	}
}
 8002c6a:	bf00      	nop
 8002c6c:	3718      	adds	r7, #24
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bc90      	pop	{r4, r7}
 8002c72:	4770      	bx	lr

08002c74 <_ZN6Logger8saveLogsEPKcS1_>:

void Logger::saveLogs(const char *folder_name, const char *file_name)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b086      	sub	sp, #24
 8002c78:	af02      	add	r7, sp, #8
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM, store_data_float_, OVER_WRITE); //write
 8002c80:	68fa      	ldr	r2, [r7, #12]
 8002c82:	2300      	movs	r3, #0
 8002c84:	9300      	str	r3, [sp, #0]
 8002c86:	4613      	mov	r3, r2
 8002c88:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c8c:	6879      	ldr	r1, [r7, #4]
 8002c8e:	68b8      	ldr	r0, [r7, #8]
 8002c90:	f7fe fc60 	bl	8001554 <sd_write_array_float>
}
 8002c94:	bf00      	nop
 8002c96:	3710      	adds	r7, #16
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>:

void Logger::saveDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b086      	sub	sp, #24
 8002ca0:	af02      	add	r7, sp, #8
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	60b9      	str	r1, [r7, #8]
 8002ca6:	607a      	str	r2, [r7, #4]
 8002ca8:	603b      	str	r3, [r7, #0]
	sd_write_array_double(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_, OVER_WRITE); //write
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 8002cb0:	3330      	adds	r3, #48	; 0x30
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	9200      	str	r2, [sp, #0]
 8002cb6:	f241 7270 	movw	r2, #6000	; 0x1770
 8002cba:	6879      	ldr	r1, [r7, #4]
 8002cbc:	68b8      	ldr	r0, [r7, #8]
 8002cbe:	f7fe fcaf 	bl	8001620 <sd_write_array_double>
	sd_write_array_double(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_, OVER_WRITE); //write
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	f503 3398 	add.w	r3, r3, #77824	; 0x13000
 8002cc8:	33b0      	adds	r3, #176	; 0xb0
 8002cca:	2200      	movs	r2, #0
 8002ccc:	9200      	str	r2, [sp, #0]
 8002cce:	f241 7270 	movw	r2, #6000	; 0x1770
 8002cd2:	6839      	ldr	r1, [r7, #0]
 8002cd4:	68b8      	ldr	r0, [r7, #8]
 8002cd6:	f7fe fca3 	bl	8001620 <sd_write_array_double>
}
 8002cda:	bf00      	nop
 8002cdc:	3710      	adds	r7, #16
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <_ZN6Logger5startEv>:
	log_index_tim_ = 0;
	log_index_dis_ = 0;
}

void Logger::start()
{
 8002ce2:	b480      	push	{r7}
 8002ce4:	b083      	sub	sp, #12
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
	recording_flag_ = true;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8002cf0:	3330      	adds	r3, #48	; 0x30
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	701a      	strb	r2, [r3, #0]
}
 8002cf6:	bf00      	nop
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr

08002d02 <_ZN6Logger4stopEv>:

void Logger::stop()
{
 8002d02:	b480      	push	{r7}
 8002d04:	b083      	sub	sp, #12
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
	recording_flag_ = false;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8002d10:	3330      	adds	r3, #48	; 0x30
 8002d12:	2200      	movs	r2, #0
 8002d14:	701a      	strb	r2, [r3, #0]
}
 8002d16:	bf00      	nop
 8002d18:	370c      	adds	r7, #12
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr

08002d22 <_ZN5MotorC1Ev>:

#include "Motor.hpp"
#include "G_variables.h"


Motor::Motor() : temp_left_counter_period_(0), temp_right_counter_period_(0){}
 8002d22:	b480      	push	{r7}
 8002d24:	b083      	sub	sp, #12
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	801a      	strh	r2, [r3, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	805a      	strh	r2, [r3, #2]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4618      	mov	r0, r3
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <_ZN5Motor4initEv>:

void Motor::init()
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
	//PWM start
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8002d4c:	2108      	movs	r1, #8
 8002d4e:	4805      	ldr	r0, [pc, #20]	; (8002d64 <_ZN5Motor4initEv+0x20>)
 8002d50:	f008 fa12 	bl	800b178 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8002d54:	210c      	movs	r1, #12
 8002d56:	4803      	ldr	r0, [pc, #12]	; (8002d64 <_ZN5Motor4initEv+0x20>)
 8002d58:	f008 fa0e 	bl	800b178 <HAL_TIM_PWM_Start>

}
 8002d5c:	bf00      	nop
 8002d5e:	3708      	adds	r7, #8
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	20021908 	.word	0x20021908

08002d68 <_ZN5Motor9motorCtrlEv>:

void Motor::motorCtrl()
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
	uint16_t left_counter_period, right_counter_period;

	if(temp_left_counter_period_ < 0) {
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	da0d      	bge.n	8002d96 <_ZN5Motor9motorCtrlEv+0x2e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d80:	481f      	ldr	r0, [pc, #124]	; (8002e00 <_ZN5Motor9motorCtrlEv+0x98>)
 8002d82:	f004 fac7 	bl	8007314 <HAL_GPIO_WritePin>
		left_counter_period = -1 * temp_left_counter_period_;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	425b      	negs	r3, r3
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	81fb      	strh	r3, [r7, #14]
 8002d94:	e00a      	b.n	8002dac <_ZN5Motor9motorCtrlEv+0x44>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8002d96:	2201      	movs	r2, #1
 8002d98:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d9c:	4818      	ldr	r0, [pc, #96]	; (8002e00 <_ZN5Motor9motorCtrlEv+0x98>)
 8002d9e:	f004 fab9 	bl	8007314 <HAL_GPIO_WritePin>
		left_counter_period = temp_left_counter_period_;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	81fb      	strh	r3, [r7, #14]
	}

	if(temp_right_counter_period_ < 0) {
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	da0d      	bge.n	8002dd2 <_ZN5Motor9motorCtrlEv+0x6a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8002db6:	2201      	movs	r2, #1
 8002db8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002dbc:	4810      	ldr	r0, [pc, #64]	; (8002e00 <_ZN5Motor9motorCtrlEv+0x98>)
 8002dbe:	f004 faa9 	bl	8007314 <HAL_GPIO_WritePin>
		right_counter_period = -1 * temp_right_counter_period_;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	425b      	negs	r3, r3
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	81bb      	strh	r3, [r7, #12]
 8002dd0:	e00a      	b.n	8002de8 <_ZN5Motor9motorCtrlEv+0x80>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002dd8:	4809      	ldr	r0, [pc, #36]	; (8002e00 <_ZN5Motor9motorCtrlEv+0x98>)
 8002dda:	f004 fa9b 	bl	8007314 <HAL_GPIO_WritePin>
		right_counter_period = temp_right_counter_period_;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	81bb      	strh	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, left_counter_period);
 8002de8:	89fa      	ldrh	r2, [r7, #14]
 8002dea:	4b06      	ldr	r3, [pc, #24]	; (8002e04 <_ZN5Motor9motorCtrlEv+0x9c>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, right_counter_period);
 8002df0:	89ba      	ldrh	r2, [r7, #12]
 8002df2:	4b04      	ldr	r3, [pc, #16]	; (8002e04 <_ZN5Motor9motorCtrlEv+0x9c>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002df8:	bf00      	nop
 8002dfa:	3710      	adds	r7, #16
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	40020c00 	.word	0x40020c00
 8002e04:	20021908 	.word	0x20021908

08002e08 <_ZN5Motor8setRatioEdd>:

void Motor::setRatio(double left_ratio, double right_ratio)
{
 8002e08:	b590      	push	{r4, r7, lr}
 8002e0a:	b087      	sub	sp, #28
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6178      	str	r0, [r7, #20]
 8002e10:	ed87 0b02 	vstr	d0, [r7, #8]
 8002e14:	ed87 1b00 	vstr	d1, [r7]
	if(left_ratio > 1) left_ratio = 1;
 8002e18:	f04f 0200 	mov.w	r2, #0
 8002e1c:	4b30      	ldr	r3, [pc, #192]	; (8002ee0 <_ZN5Motor8setRatioEdd+0xd8>)
 8002e1e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002e22:	f7fd fe91 	bl	8000b48 <__aeabi_dcmpgt>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d005      	beq.n	8002e38 <_ZN5Motor8setRatioEdd+0x30>
 8002e2c:	f04f 0300 	mov.w	r3, #0
 8002e30:	4c2b      	ldr	r4, [pc, #172]	; (8002ee0 <_ZN5Motor8setRatioEdd+0xd8>)
 8002e32:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8002e36:	e00e      	b.n	8002e56 <_ZN5Motor8setRatioEdd+0x4e>
	else if(left_ratio < -1) left_ratio = -1;
 8002e38:	f04f 0200 	mov.w	r2, #0
 8002e3c:	4b29      	ldr	r3, [pc, #164]	; (8002ee4 <_ZN5Motor8setRatioEdd+0xdc>)
 8002e3e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002e42:	f7fd fe63 	bl	8000b0c <__aeabi_dcmplt>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d004      	beq.n	8002e56 <_ZN5Motor8setRatioEdd+0x4e>
 8002e4c:	f04f 0300 	mov.w	r3, #0
 8002e50:	4c24      	ldr	r4, [pc, #144]	; (8002ee4 <_ZN5Motor8setRatioEdd+0xdc>)
 8002e52:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if(right_ratio > 1) right_ratio = 1;
 8002e56:	f04f 0200 	mov.w	r2, #0
 8002e5a:	4b21      	ldr	r3, [pc, #132]	; (8002ee0 <_ZN5Motor8setRatioEdd+0xd8>)
 8002e5c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002e60:	f7fd fe72 	bl	8000b48 <__aeabi_dcmpgt>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d005      	beq.n	8002e76 <_ZN5Motor8setRatioEdd+0x6e>
 8002e6a:	f04f 0300 	mov.w	r3, #0
 8002e6e:	4c1c      	ldr	r4, [pc, #112]	; (8002ee0 <_ZN5Motor8setRatioEdd+0xd8>)
 8002e70:	e9c7 3400 	strd	r3, r4, [r7]
 8002e74:	e00e      	b.n	8002e94 <_ZN5Motor8setRatioEdd+0x8c>
	else if(right_ratio < -1) right_ratio = -1;
 8002e76:	f04f 0200 	mov.w	r2, #0
 8002e7a:	4b1a      	ldr	r3, [pc, #104]	; (8002ee4 <_ZN5Motor8setRatioEdd+0xdc>)
 8002e7c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002e80:	f7fd fe44 	bl	8000b0c <__aeabi_dcmplt>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d004      	beq.n	8002e94 <_ZN5Motor8setRatioEdd+0x8c>
 8002e8a:	f04f 0300 	mov.w	r3, #0
 8002e8e:	4c15      	ldr	r4, [pc, #84]	; (8002ee4 <_ZN5Motor8setRatioEdd+0xdc>)
 8002e90:	e9c7 3400 	strd	r3, r4, [r7]

	temp_left_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * left_ratio);
 8002e94:	f04f 0200 	mov.w	r2, #0
 8002e98:	4b13      	ldr	r3, [pc, #76]	; (8002ee8 <_ZN5Motor8setRatioEdd+0xe0>)
 8002e9a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002e9e:	f7fd fbc3 	bl	8000628 <__aeabi_dmul>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	460c      	mov	r4, r1
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	4621      	mov	r1, r4
 8002eaa:	f7fd fe6d 	bl	8000b88 <__aeabi_d2iz>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	b21a      	sxth	r2, r3
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	801a      	strh	r2, [r3, #0]
	temp_right_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * right_ratio);
 8002eb6:	f04f 0200 	mov.w	r2, #0
 8002eba:	4b0b      	ldr	r3, [pc, #44]	; (8002ee8 <_ZN5Motor8setRatioEdd+0xe0>)
 8002ebc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002ec0:	f7fd fbb2 	bl	8000628 <__aeabi_dmul>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	460c      	mov	r4, r1
 8002ec8:	4618      	mov	r0, r3
 8002eca:	4621      	mov	r1, r4
 8002ecc:	f7fd fe5c 	bl	8000b88 <__aeabi_d2iz>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	b21a      	sxth	r2, r3
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	805a      	strh	r2, [r3, #2]

}
 8002ed8:	bf00      	nop
 8002eda:	371c      	adds	r7, #28
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd90      	pop	{r4, r7, pc}
 8002ee0:	3ff00000 	.word	0x3ff00000
 8002ee4:	bff00000 	.word	0xbff00000
 8002ee8:	409c2000 	.word	0x409c2000

08002eec <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>:

#define DELTA_T 0.001

float monitor_x, monitor_y, monitor_theta;

Odometry::Odometry(Encoder *encoder, IMU *imu, VelocityCtrl *velocity_ctrl) : x_(0), y_(0), theta_(0)
 8002eec:	b490      	push	{r4, r7}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	60b9      	str	r1, [r7, #8]
 8002ef6:	607a      	str	r2, [r7, #4]
 8002ef8:	603b      	str	r3, [r7, #0]
 8002efa:	68fa      	ldr	r2, [r7, #12]
 8002efc:	f04f 0300 	mov.w	r3, #0
 8002f00:	f04f 0400 	mov.w	r4, #0
 8002f04:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8002f08:	68fa      	ldr	r2, [r7, #12]
 8002f0a:	f04f 0300 	mov.w	r3, #0
 8002f0e:	f04f 0400 	mov.w	r4, #0
 8002f12:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8002f16:	68fa      	ldr	r2, [r7, #12]
 8002f18:	f04f 0300 	mov.w	r3, #0
 8002f1c:	f04f 0400 	mov.w	r4, #0
 8002f20:	e9c2 3408 	strd	r3, r4, [r2, #32]
{
	encoder_ = encoder;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	68ba      	ldr	r2, [r7, #8]
 8002f28:	601a      	str	r2, [r3, #0]
	imu_ = imu;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	683a      	ldr	r2, [r7, #0]
 8002f34:	609a      	str	r2, [r3, #8]
}
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3710      	adds	r7, #16
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bc90      	pop	{r4, r7}
 8002f40:	4770      	bx	lr
 8002f42:	0000      	movs	r0, r0
 8002f44:	0000      	movs	r0, r0
	...

08002f48 <_ZN8Odometry12calcPotitionEv>:


void Odometry::calcPotition()
{
 8002f48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f4c:	b086      	sub	sp, #24
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
	//float current_velocity = velocity_ctrl_->getCurrentVelocity();
	double current_omega = imu_->getOmega();
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7fe fe36 	bl	8001bc8 <_ZN3IMU8getOmegaEv>
 8002f5c:	ed87 0b04 	vstr	d0, [r7, #16]
	float distance = encoder_->getDistance();
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4618      	mov	r0, r3
 8002f66:	f7fe fa06 	bl	8001376 <_ZN7Encoder11getDistanceEv>
 8002f6a:	ec54 3b10 	vmov	r3, r4, d0
 8002f6e:	4618      	mov	r0, r3
 8002f70:	4621      	mov	r1, r4
 8002f72:	f7fd fe51 	bl	8000c18 <__aeabi_d2f>
 8002f76:	4603      	mov	r3, r0
 8002f78:	60fb      	str	r3, [r7, #12]

	delta_theta_ = current_omega * DELTA_T;
 8002f7a:	a358      	add	r3, pc, #352	; (adr r3, 80030dc <_ZN8Odometry12calcPotitionEv+0x194>)
 8002f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f80:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002f84:	f7fd fb50 	bl	8000628 <__aeabi_dmul>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	460c      	mov	r4, r1
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28

	x_ = x_ + distance * cos(theta_ + delta_theta_ / 2);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8002f98:	68f8      	ldr	r0, [r7, #12]
 8002f9a:	f7fd faed 	bl	8000578 <__aeabi_f2d>
 8002f9e:	4682      	mov	sl, r0
 8002fa0:	468b      	mov	fp, r1
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002fae:	f04f 0200 	mov.w	r2, #0
 8002fb2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002fb6:	f7fd fc61 	bl	800087c <__aeabi_ddiv>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	4640      	mov	r0, r8
 8002fc0:	4649      	mov	r1, r9
 8002fc2:	f7fd f97b 	bl	80002bc <__adddf3>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	460b      	mov	r3, r1
 8002fca:	ec43 2b17 	vmov	d7, r2, r3
 8002fce:	eeb0 0a47 	vmov.f32	s0, s14
 8002fd2:	eef0 0a67 	vmov.f32	s1, s15
 8002fd6:	f00e f9a3 	bl	8011320 <cos>
 8002fda:	ec53 2b10 	vmov	r2, r3, d0
 8002fde:	4650      	mov	r0, sl
 8002fe0:	4659      	mov	r1, fp
 8002fe2:	f7fd fb21 	bl	8000628 <__aeabi_dmul>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	460b      	mov	r3, r1
 8002fea:	4620      	mov	r0, r4
 8002fec:	4629      	mov	r1, r5
 8002fee:	f7fd f965 	bl	80002bc <__adddf3>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	460c      	mov	r4, r1
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	e9c2 3404 	strd	r3, r4, [r2, #16]
	y_ = y_ + distance * sin(theta_ + delta_theta_ / 2);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8003002:	68f8      	ldr	r0, [r7, #12]
 8003004:	f7fd fab8 	bl	8000578 <__aeabi_f2d>
 8003008:	4682      	mov	sl, r0
 800300a:	468b      	mov	fp, r1
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8003018:	f04f 0200 	mov.w	r2, #0
 800301c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003020:	f7fd fc2c 	bl	800087c <__aeabi_ddiv>
 8003024:	4602      	mov	r2, r0
 8003026:	460b      	mov	r3, r1
 8003028:	4640      	mov	r0, r8
 800302a:	4649      	mov	r1, r9
 800302c:	f7fd f946 	bl	80002bc <__adddf3>
 8003030:	4602      	mov	r2, r0
 8003032:	460b      	mov	r3, r1
 8003034:	ec43 2b17 	vmov	d7, r2, r3
 8003038:	eeb0 0a47 	vmov.f32	s0, s14
 800303c:	eef0 0a67 	vmov.f32	s1, s15
 8003040:	f00e f9b2 	bl	80113a8 <sin>
 8003044:	ec53 2b10 	vmov	r2, r3, d0
 8003048:	4650      	mov	r0, sl
 800304a:	4659      	mov	r1, fp
 800304c:	f7fd faec 	bl	8000628 <__aeabi_dmul>
 8003050:	4602      	mov	r2, r0
 8003052:	460b      	mov	r3, r1
 8003054:	4620      	mov	r0, r4
 8003056:	4629      	mov	r1, r5
 8003058:	f7fd f930 	bl	80002bc <__adddf3>
 800305c:	4603      	mov	r3, r0
 800305e:	460c      	mov	r4, r1
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	e9c2 3406 	strd	r3, r4, [r2, #24]
	theta_ = theta_ + delta_theta_;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8003072:	461a      	mov	r2, r3
 8003074:	4623      	mov	r3, r4
 8003076:	f7fd f921 	bl	80002bc <__adddf3>
 800307a:	4603      	mov	r3, r0
 800307c:	460c      	mov	r4, r1
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	e9c2 3408 	strd	r3, r4, [r2, #32]


	monitor_x = x_;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800308a:	4618      	mov	r0, r3
 800308c:	4621      	mov	r1, r4
 800308e:	f7fd fdc3 	bl	8000c18 <__aeabi_d2f>
 8003092:	4602      	mov	r2, r0
 8003094:	4b0e      	ldr	r3, [pc, #56]	; (80030d0 <_ZN8Odometry12calcPotitionEv+0x188>)
 8003096:	601a      	str	r2, [r3, #0]
	monitor_y = y_;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 800309e:	4618      	mov	r0, r3
 80030a0:	4621      	mov	r1, r4
 80030a2:	f7fd fdb9 	bl	8000c18 <__aeabi_d2f>
 80030a6:	4602      	mov	r2, r0
 80030a8:	4b0a      	ldr	r3, [pc, #40]	; (80030d4 <_ZN8Odometry12calcPotitionEv+0x18c>)
 80030aa:	601a      	str	r2, [r3, #0]
	monitor_theta = theta_;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 80030b2:	4618      	mov	r0, r3
 80030b4:	4621      	mov	r1, r4
 80030b6:	f7fd fdaf 	bl	8000c18 <__aeabi_d2f>
 80030ba:	4602      	mov	r2, r0
 80030bc:	4b06      	ldr	r3, [pc, #24]	; (80030d8 <_ZN8Odometry12calcPotitionEv+0x190>)
 80030be:	601a      	str	r2, [r3, #0]


}
 80030c0:	bf00      	nop
 80030c2:	3718      	adds	r7, #24
 80030c4:	46bd      	mov	sp, r7
 80030c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030ca:	bf00      	nop
 80030cc:	f3af 8000 	nop.w
 80030d0:	2000020c 	.word	0x2000020c
 80030d4:	20000210 	.word	0x20000210
 80030d8:	20000214 	.word	0x20000214
 80030dc:	d2f1a9fc 	.word	0xd2f1a9fc
 80030e0:	3f50624d 	.word	0x3f50624d

080030e4 <_ZN8Odometry4flipEv>:

void Odometry::flip()
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
	calcPotition();
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f7ff ff2b 	bl	8002f48 <_ZN8Odometry12calcPotitionEv>
}
 80030f2:	bf00      	nop
 80030f4:	3708      	adds	r7, #8
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}

080030fa <_ZN8Odometry8getThetaEv>:
{
	return y_;
}

double Odometry::getTheta()
{
 80030fa:	b490      	push	{r4, r7}
 80030fc:	b082      	sub	sp, #8
 80030fe:	af00      	add	r7, sp, #0
 8003100:	6078      	str	r0, [r7, #4]
	return theta_;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8003108:	ec44 3b17 	vmov	d7, r3, r4
}
 800310c:	eeb0 0a47 	vmov.f32	s0, s14
 8003110:	eef0 0a67 	vmov.f32	s1, s15
 8003114:	3708      	adds	r7, #8
 8003116:	46bd      	mov	sp, r7
 8003118:	bc90      	pop	{r4, r7}
 800311a:	4770      	bx	lr

0800311c <_ZN8Odometry13clearPotitionEv>:
{
	return delta_theta_;
}

void Odometry::clearPotition()
{
 800311c:	b490      	push	{r4, r7}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
	x_ = 0;
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	f04f 0300 	mov.w	r3, #0
 800312a:	f04f 0400 	mov.w	r4, #0
 800312e:	e9c2 3404 	strd	r3, r4, [r2, #16]
	y_ = 0;
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	f04f 0300 	mov.w	r3, #0
 8003138:	f04f 0400 	mov.w	r4, #0
 800313c:	e9c2 3406 	strd	r3, r4, [r2, #24]
	theta_ = 0;
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	f04f 0300 	mov.w	r3, #0
 8003146:	f04f 0400 	mov.w	r4, #0
 800314a:	e9c2 3408 	strd	r3, r4, [r2, #32]
}
 800314e:	bf00      	nop
 8003150:	3708      	adds	r7, #8
 8003152:	46bd      	mov	sp, r7
 8003154:	bc90      	pop	{r4, r7}
 8003156:	4770      	bx	lr

08003158 <_ZN11PowerSensor4initEv>:
#define LOW_VOLTAGE_THRESHOLD 7.4

float monitor_voltage;

void PowerSensor::init()
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT);
 8003160:	2088      	movs	r0, #136	; 0x88
 8003162:	f7fe fe6e 	bl	8001e42 <INA260_init>
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT);
 8003166:	2080      	movs	r0, #128	; 0x80
 8003168:	f7fe fe6b 	bl	8001e42 <INA260_init>
}
 800316c:	bf00      	nop
 800316e:	3708      	adds	r7, #8
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}
 8003174:	0000      	movs	r0, r0
	...

08003178 <_ZN11PowerSensor12updateValuesEv>:

void PowerSensor::updateValues()
{
 8003178:	b590      	push	{r4, r7, lr}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
	//current_l_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
	//current_r_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT) * 0.00125;
	buttery_voltage_ = INA260_read(0x02, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
 8003180:	2188      	movs	r1, #136	; 0x88
 8003182:	2002      	movs	r0, #2
 8003184:	f7fe fdfa 	bl	8001d7c <INA260_read>
 8003188:	4603      	mov	r3, r0
 800318a:	4618      	mov	r0, r3
 800318c:	f7fd f9e2 	bl	8000554 <__aeabi_i2d>
 8003190:	a30c      	add	r3, pc, #48	; (adr r3, 80031c4 <_ZN11PowerSensor12updateValuesEv+0x4c>)
 8003192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003196:	f7fd fa47 	bl	8000628 <__aeabi_dmul>
 800319a:	4603      	mov	r3, r0
 800319c:	460c      	mov	r4, r1
 800319e:	4618      	mov	r0, r3
 80031a0:	4621      	mov	r1, r4
 80031a2:	f7fd fd39 	bl	8000c18 <__aeabi_d2f>
 80031a6:	4602      	mov	r2, r0
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	609a      	str	r2, [r3, #8]

	monitor_voltage = buttery_voltage_;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	4a03      	ldr	r2, [pc, #12]	; (80031c0 <_ZN11PowerSensor12updateValuesEv+0x48>)
 80031b2:	6013      	str	r3, [r2, #0]
}
 80031b4:	bf00      	nop
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd90      	pop	{r4, r7, pc}
 80031bc:	f3af 8000 	nop.w
 80031c0:	20000218 	.word	0x20000218
 80031c4:	47ae147b 	.word	0x47ae147b
 80031c8:	3f547ae1 	.word	0x3f547ae1
 80031cc:	00000000 	.word	0x00000000

080031d0 <_ZN11PowerSensor12butteryCheckEv>:
	return buttery_voltage_;

}

bool PowerSensor::butteryCheck()
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
	static uint16_t cnt;
	bool ret = false;
 80031d8:	2300      	movs	r3, #0
 80031da:	73fb      	strb	r3, [r7, #15]

	if(buttery_voltage_ < LOW_VOLTAGE_THRESHOLD) cnt++;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7fd f9c9 	bl	8000578 <__aeabi_f2d>
 80031e6:	a311      	add	r3, pc, #68	; (adr r3, 800322c <_ZN11PowerSensor12butteryCheckEv+0x5c>)
 80031e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ec:	f7fd fc8e 	bl	8000b0c <__aeabi_dcmplt>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d006      	beq.n	8003204 <_ZN11PowerSensor12butteryCheckEv+0x34>
 80031f6:	4b0c      	ldr	r3, [pc, #48]	; (8003228 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 80031f8:	881b      	ldrh	r3, [r3, #0]
 80031fa:	3301      	adds	r3, #1
 80031fc:	b29a      	uxth	r2, r3
 80031fe:	4b0a      	ldr	r3, [pc, #40]	; (8003228 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003200:	801a      	strh	r2, [r3, #0]
 8003202:	e002      	b.n	800320a <_ZN11PowerSensor12butteryCheckEv+0x3a>
	else cnt = 0;
 8003204:	4b08      	ldr	r3, [pc, #32]	; (8003228 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003206:	2200      	movs	r2, #0
 8003208:	801a      	strh	r2, [r3, #0]

	if(cnt >= 1) {
 800320a:	4b07      	ldr	r3, [pc, #28]	; (8003228 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 800320c:	881b      	ldrh	r3, [r3, #0]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d004      	beq.n	800321c <_ZN11PowerSensor12butteryCheckEv+0x4c>
		ret = true;
 8003212:	2301      	movs	r3, #1
 8003214:	73fb      	strb	r3, [r7, #15]
		cnt = 1;
 8003216:	4b04      	ldr	r3, [pc, #16]	; (8003228 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003218:	2201      	movs	r2, #1
 800321a:	801a      	strh	r2, [r3, #0]
	}

	return ret;
 800321c:	7bfb      	ldrb	r3, [r7, #15]
}
 800321e:	4618      	mov	r0, r3
 8003220:	3710      	adds	r7, #16
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	2000021c 	.word	0x2000021c
 800322c:	9999999a 	.word	0x9999999a
 8003230:	401d9999 	.word	0x401d9999

08003234 <_ZN12RotarySwitch8getValueEv>:

#include "RotarySwitch.hpp"


uint16_t RotarySwitch::getValue()
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 800323c:	2300      	movs	r3, #0
 800323e:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_1))	ret_value |= 0x01;
 8003240:	2102      	movs	r1, #2
 8003242:	4822      	ldr	r0, [pc, #136]	; (80032cc <_ZN12RotarySwitch8getValueEv+0x98>)
 8003244:	f004 f84e 	bl	80072e4 <HAL_GPIO_ReadPin>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	bf0c      	ite	eq
 800324e:	2301      	moveq	r3, #1
 8003250:	2300      	movne	r3, #0
 8003252:	b2db      	uxtb	r3, r3
 8003254:	2b00      	cmp	r3, #0
 8003256:	d003      	beq.n	8003260 <_ZN12RotarySwitch8getValueEv+0x2c>
 8003258:	89fb      	ldrh	r3, [r7, #14]
 800325a:	f043 0301 	orr.w	r3, r3, #1
 800325e:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_3))	ret_value |= 0x02;
 8003260:	2108      	movs	r1, #8
 8003262:	481a      	ldr	r0, [pc, #104]	; (80032cc <_ZN12RotarySwitch8getValueEv+0x98>)
 8003264:	f004 f83e 	bl	80072e4 <HAL_GPIO_ReadPin>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	bf0c      	ite	eq
 800326e:	2301      	moveq	r3, #1
 8003270:	2300      	movne	r3, #0
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2b00      	cmp	r3, #0
 8003276:	d003      	beq.n	8003280 <_ZN12RotarySwitch8getValueEv+0x4c>
 8003278:	89fb      	ldrh	r3, [r7, #14]
 800327a:	f043 0302 	orr.w	r3, r3, #2
 800327e:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_4))	ret_value |= 0x04;
 8003280:	2110      	movs	r1, #16
 8003282:	4812      	ldr	r0, [pc, #72]	; (80032cc <_ZN12RotarySwitch8getValueEv+0x98>)
 8003284:	f004 f82e 	bl	80072e4 <HAL_GPIO_ReadPin>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	bf0c      	ite	eq
 800328e:	2301      	moveq	r3, #1
 8003290:	2300      	movne	r3, #0
 8003292:	b2db      	uxtb	r3, r3
 8003294:	2b00      	cmp	r3, #0
 8003296:	d003      	beq.n	80032a0 <_ZN12RotarySwitch8getValueEv+0x6c>
 8003298:	89fb      	ldrh	r3, [r7, #14]
 800329a:	f043 0304 	orr.w	r3, r3, #4
 800329e:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7))	ret_value |= 0x08;
 80032a0:	2180      	movs	r1, #128	; 0x80
 80032a2:	480a      	ldr	r0, [pc, #40]	; (80032cc <_ZN12RotarySwitch8getValueEv+0x98>)
 80032a4:	f004 f81e 	bl	80072e4 <HAL_GPIO_ReadPin>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	bf0c      	ite	eq
 80032ae:	2301      	moveq	r3, #1
 80032b0:	2300      	movne	r3, #0
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d003      	beq.n	80032c0 <_ZN12RotarySwitch8getValueEv+0x8c>
 80032b8:	89fb      	ldrh	r3, [r7, #14]
 80032ba:	f043 0308 	orr.w	r3, r3, #8
 80032be:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 80032c0:	89fb      	ldrh	r3, [r7, #14]

}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3710      	adds	r7, #16
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	40020c00 	.word	0x40020c00

080032d0 <_ZN10SideSensorC1Ev>:
 *      Author: under
 */

#include "SideSensor.hpp"

SideSensor::SideSensor()
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
{

}
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4618      	mov	r0, r3
 80032dc:	370c      	adds	r7, #12
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr
	...

080032e8 <_ZN10SideSensor12updateStatusEt>:


void SideSensor::updateStatus(uint16_t gpio_pin)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	460b      	mov	r3, r1
 80032f2:	807b      	strh	r3, [r7, #2]
	static bool white_flag1 = false;
	static bool white_flag2 = false;

	if (gpio_pin == GPIO_PIN_2 && white_flag1 == false){
 80032f4:	887b      	ldrh	r3, [r7, #2]
 80032f6:	2b04      	cmp	r3, #4
 80032f8:	d111      	bne.n	800331e <_ZN10SideSensor12updateStatusEt+0x36>
 80032fa:	4b28      	ldr	r3, [pc, #160]	; (800339c <_ZN10SideSensor12updateStatusEt+0xb4>)
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	f083 0301 	eor.w	r3, r3, #1
 8003302:	b2db      	uxtb	r3, r3
 8003304:	2b00      	cmp	r3, #0
 8003306:	d00a      	beq.n	800331e <_ZN10SideSensor12updateStatusEt+0x36>
		status_ |= 0x01;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	881b      	ldrh	r3, [r3, #0]
 800330c:	f043 0301 	orr.w	r3, r3, #1
 8003310:	b29a      	uxth	r2, r3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	801a      	strh	r2, [r3, #0]
		white_flag1 = true;
 8003316:	4b21      	ldr	r3, [pc, #132]	; (800339c <_ZN10SideSensor12updateStatusEt+0xb4>)
 8003318:	2201      	movs	r2, #1
 800331a:	701a      	strb	r2, [r3, #0]
 800331c:	e010      	b.n	8003340 <_ZN10SideSensor12updateStatusEt+0x58>
	}
	else if(gpio_pin == GPIO_PIN_2 && white_flag1 == true){
 800331e:	887b      	ldrh	r3, [r7, #2]
 8003320:	2b04      	cmp	r3, #4
 8003322:	d10d      	bne.n	8003340 <_ZN10SideSensor12updateStatusEt+0x58>
 8003324:	4b1d      	ldr	r3, [pc, #116]	; (800339c <_ZN10SideSensor12updateStatusEt+0xb4>)
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d009      	beq.n	8003340 <_ZN10SideSensor12updateStatusEt+0x58>
		status_ ^= 0x01;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	881b      	ldrh	r3, [r3, #0]
 8003330:	f083 0301 	eor.w	r3, r3, #1
 8003334:	b29a      	uxth	r2, r3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	801a      	strh	r2, [r3, #0]
		white_flag1 = false;
 800333a:	4b18      	ldr	r3, [pc, #96]	; (800339c <_ZN10SideSensor12updateStatusEt+0xb4>)
 800333c:	2200      	movs	r2, #0
 800333e:	701a      	strb	r2, [r3, #0]

	}

	if (gpio_pin == GPIO_PIN_8 && white_flag2 == false){
 8003340:	887b      	ldrh	r3, [r7, #2]
 8003342:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003346:	d111      	bne.n	800336c <_ZN10SideSensor12updateStatusEt+0x84>
 8003348:	4b15      	ldr	r3, [pc, #84]	; (80033a0 <_ZN10SideSensor12updateStatusEt+0xb8>)
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	f083 0301 	eor.w	r3, r3, #1
 8003350:	b2db      	uxtb	r3, r3
 8003352:	2b00      	cmp	r3, #0
 8003354:	d00a      	beq.n	800336c <_ZN10SideSensor12updateStatusEt+0x84>
		status_ |= 0x02;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	881b      	ldrh	r3, [r3, #0]
 800335a:	f043 0302 	orr.w	r3, r3, #2
 800335e:	b29a      	uxth	r2, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	801a      	strh	r2, [r3, #0]
		white_flag2 = true;
 8003364:	4b0e      	ldr	r3, [pc, #56]	; (80033a0 <_ZN10SideSensor12updateStatusEt+0xb8>)
 8003366:	2201      	movs	r2, #1
 8003368:	701a      	strb	r2, [r3, #0]
	else if(gpio_pin == GPIO_PIN_8 && white_flag2 == true){
		status_ ^= 0x02;
		white_flag2 = false;
	}

}
 800336a:	e011      	b.n	8003390 <_ZN10SideSensor12updateStatusEt+0xa8>
	else if(gpio_pin == GPIO_PIN_8 && white_flag2 == true){
 800336c:	887b      	ldrh	r3, [r7, #2]
 800336e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003372:	d10d      	bne.n	8003390 <_ZN10SideSensor12updateStatusEt+0xa8>
 8003374:	4b0a      	ldr	r3, [pc, #40]	; (80033a0 <_ZN10SideSensor12updateStatusEt+0xb8>)
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d009      	beq.n	8003390 <_ZN10SideSensor12updateStatusEt+0xa8>
		status_ ^= 0x02;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	881b      	ldrh	r3, [r3, #0]
 8003380:	f083 0302 	eor.w	r3, r3, #2
 8003384:	b29a      	uxth	r2, r3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	801a      	strh	r2, [r3, #0]
		white_flag2 = false;
 800338a:	4b05      	ldr	r3, [pc, #20]	; (80033a0 <_ZN10SideSensor12updateStatusEt+0xb8>)
 800338c:	2200      	movs	r2, #0
 800338e:	701a      	strb	r2, [r3, #0]
}
 8003390:	bf00      	nop
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr
 800339c:	2000021e 	.word	0x2000021e
 80033a0:	2000021f 	.word	0x2000021f

080033a4 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>:

#include "VelocityCtrl.hpp"
//#include "ICM_20648.h"
#include <stdio.h>

VelocityCtrl::VelocityCtrl(Motor *motor, Encoder *encoder, IMU *imu) :
 80033a4:	b490      	push	{r4, r7}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	607a      	str	r2, [r7, #4]
 80033b0:	603b      	str	r3, [r7, #0]
target_velocity_(0), target_omega_(0), current_velocity_(0), current_omega_(0), v_kp_(0), v_kd_(0), v_ki_(0),
	o_kp_(0), o_kd_(0), o_ki_(0), excution_flag_(false)
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	f04f 0200 	mov.w	r2, #0
 80033b8:	601a      	str	r2, [r3, #0]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f04f 0200 	mov.w	r2, #0
 80033c0:	605a      	str	r2, [r3, #4]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	f04f 0200 	mov.w	r2, #0
 80033c8:	609a      	str	r2, [r3, #8]
 80033ca:	68fa      	ldr	r2, [r7, #12]
 80033cc:	f04f 0300 	mov.w	r3, #0
 80033d0:	f04f 0400 	mov.w	r4, #0
 80033d4:	e9c2 3404 	strd	r3, r4, [r2, #16]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f04f 0200 	mov.w	r2, #0
 80033de:	619a      	str	r2, [r3, #24]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f04f 0200 	mov.w	r2, #0
 80033e6:	61da      	str	r2, [r3, #28]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f04f 0200 	mov.w	r2, #0
 80033ee:	621a      	str	r2, [r3, #32]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f04f 0200 	mov.w	r2, #0
 80033f6:	625a      	str	r2, [r3, #36]	; 0x24
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f04f 0200 	mov.w	r2, #0
 80033fe:	629a      	str	r2, [r3, #40]	; 0x28
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f04f 0200 	mov.w	r2, #0
 8003406:	62da      	str	r2, [r3, #44]	; 0x2c
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2200      	movs	r2, #0
 800340c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
{
	motor_ = motor;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	68ba      	ldr	r2, [r7, #8]
 8003414:	635a      	str	r2, [r3, #52]	; 0x34
	encoder_ = encoder;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	639a      	str	r2, [r3, #56]	; 0x38
	imu_ = imu;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	683a      	ldr	r2, [r7, #0]
 8003420:	63da      	str	r2, [r3, #60]	; 0x3c

}
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	4618      	mov	r0, r3
 8003426:	3710      	adds	r7, #16
 8003428:	46bd      	mov	sp, r7
 800342a:	bc90      	pop	{r4, r7}
 800342c:	4770      	bx	lr
	...

08003430 <_ZN12VelocityCtrl12calcVelocityEv>:

// ---------private ---------//

double VelocityCtrl::calcVelocity()
{
 8003430:	b590      	push	{r4, r7, lr}
 8003432:	b089      	sub	sp, #36	; 0x24
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
	double enc_l, enc_r;
	encoder_->getCnt(enc_l, enc_r);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800343c:	f107 0208 	add.w	r2, r7, #8
 8003440:	f107 0110 	add.w	r1, r7, #16
 8003444:	4618      	mov	r0, r3
 8003446:	f7fd ff7f 	bl	8001348 <_ZN7Encoder6getCntERdS0_>
	double enc_cnt = (enc_l + enc_r) / 2;
 800344a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800344e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003452:	461a      	mov	r2, r3
 8003454:	4623      	mov	r3, r4
 8003456:	f7fc ff31 	bl	80002bc <__adddf3>
 800345a:	4603      	mov	r3, r0
 800345c:	460c      	mov	r4, r1
 800345e:	4618      	mov	r0, r3
 8003460:	4621      	mov	r1, r4
 8003462:	f04f 0200 	mov.w	r2, #0
 8003466:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800346a:	f7fd fa07 	bl	800087c <__aeabi_ddiv>
 800346e:	4603      	mov	r3, r0
 8003470:	460c      	mov	r4, r1
 8003472:	e9c7 3406 	strd	r3, r4, [r7, #24]

	current_velocity_ = VELOCITY_PER_CNT * enc_cnt;
 8003476:	a310      	add	r3, pc, #64	; (adr r3, 80034b8 <_ZN12VelocityCtrl12calcVelocityEv+0x88>)
 8003478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800347c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003480:	f7fd f8d2 	bl	8000628 <__aeabi_dmul>
 8003484:	4603      	mov	r3, r0
 8003486:	460c      	mov	r4, r1
 8003488:	4618      	mov	r0, r3
 800348a:	4621      	mov	r1, r4
 800348c:	f7fd fbc4 	bl	8000c18 <__aeabi_d2f>
 8003490:	4602      	mov	r2, r0
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	609a      	str	r2, [r3, #8]

	return current_velocity_;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	4618      	mov	r0, r3
 800349c:	f7fd f86c 	bl	8000578 <__aeabi_f2d>
 80034a0:	4603      	mov	r3, r0
 80034a2:	460c      	mov	r4, r1
 80034a4:	ec44 3b17 	vmov	d7, r3, r4
}
 80034a8:	eeb0 0a47 	vmov.f32	s0, s14
 80034ac:	eef0 0a67 	vmov.f32	s1, s15
 80034b0:	3724      	adds	r7, #36	; 0x24
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd90      	pop	{r4, r7, pc}
 80034b6:	bf00      	nop
 80034b8:	1ab1d998 	.word	0x1ab1d998
 80034bc:	3f7830b5 	.word	0x3f7830b5

080034c0 <_ZN12VelocityCtrl3pidEv>:
	return current_omega_;
}
*/

void VelocityCtrl::pid()
{
 80034c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034c2:	b08d      	sub	sp, #52	; 0x34
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
	float static v_pre_diff, o_pre_diff;
	float v_diff = target_velocity_ - current_velocity_;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	ed93 7a00 	vldr	s14, [r3]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	edd3 7a02 	vldr	s15, [r3, #8]
 80034d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034d8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	float o_diff = target_omega_- imu_->getOmega();
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7fd f849 	bl	8000578 <__aeabi_f2d>
 80034e6:	4604      	mov	r4, r0
 80034e8:	460d      	mov	r5, r1
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ee:	4618      	mov	r0, r3
 80034f0:	f7fe fb6a 	bl	8001bc8 <_ZN3IMU8getOmegaEv>
 80034f4:	ec53 2b10 	vmov	r2, r3, d0
 80034f8:	4620      	mov	r0, r4
 80034fa:	4629      	mov	r1, r5
 80034fc:	f7fc fedc 	bl	80002b8 <__aeabi_dsub>
 8003500:	4603      	mov	r3, r0
 8003502:	460c      	mov	r4, r1
 8003504:	4618      	mov	r0, r3
 8003506:	4621      	mov	r1, r4
 8003508:	f7fd fb86 	bl	8000c18 <__aeabi_d2f>
 800350c:	4603      	mov	r3, r0
 800350e:	62bb      	str	r3, [r7, #40]	; 0x28

	float v_p, v_d, o_p, o_d;
	static float v_i, o_i;

	v_p = v_kp_ * v_diff;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	edd3 7a06 	vldr	s15, [r3, #24]
 8003516:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800351a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800351e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	v_d = v_kd_ * (v_diff - v_pre_diff) * DELTA_T;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	ed93 7a07 	vldr	s14, [r3, #28]
 8003528:	4b73      	ldr	r3, [pc, #460]	; (80036f8 <_ZN12VelocityCtrl3pidEv+0x238>)
 800352a:	edd3 7a00 	vldr	s15, [r3]
 800352e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8003532:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003536:	ee67 7a27 	vmul.f32	s15, s14, s15
 800353a:	ee17 0a90 	vmov	r0, s15
 800353e:	f7fd f81b 	bl	8000578 <__aeabi_f2d>
 8003542:	a36b      	add	r3, pc, #428	; (adr r3, 80036f0 <_ZN12VelocityCtrl3pidEv+0x230>)
 8003544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003548:	f7fd f86e 	bl	8000628 <__aeabi_dmul>
 800354c:	4603      	mov	r3, r0
 800354e:	460c      	mov	r4, r1
 8003550:	4618      	mov	r0, r3
 8003552:	4621      	mov	r1, r4
 8003554:	f7fd fb60 	bl	8000c18 <__aeabi_d2f>
 8003558:	4603      	mov	r3, r0
 800355a:	623b      	str	r3, [r7, #32]
	v_i += v_ki_ * v_diff * DELTA_T;
 800355c:	4b67      	ldr	r3, [pc, #412]	; (80036fc <_ZN12VelocityCtrl3pidEv+0x23c>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4618      	mov	r0, r3
 8003562:	f7fd f809 	bl	8000578 <__aeabi_f2d>
 8003566:	4604      	mov	r4, r0
 8003568:	460d      	mov	r5, r1
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	ed93 7a08 	vldr	s14, [r3, #32]
 8003570:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003574:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003578:	ee17 0a90 	vmov	r0, s15
 800357c:	f7fc fffc 	bl	8000578 <__aeabi_f2d>
 8003580:	a35b      	add	r3, pc, #364	; (adr r3, 80036f0 <_ZN12VelocityCtrl3pidEv+0x230>)
 8003582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003586:	f7fd f84f 	bl	8000628 <__aeabi_dmul>
 800358a:	4602      	mov	r2, r0
 800358c:	460b      	mov	r3, r1
 800358e:	4620      	mov	r0, r4
 8003590:	4629      	mov	r1, r5
 8003592:	f7fc fe93 	bl	80002bc <__adddf3>
 8003596:	4603      	mov	r3, r0
 8003598:	460c      	mov	r4, r1
 800359a:	4618      	mov	r0, r3
 800359c:	4621      	mov	r1, r4
 800359e:	f7fd fb3b 	bl	8000c18 <__aeabi_d2f>
 80035a2:	4602      	mov	r2, r0
 80035a4:	4b55      	ldr	r3, [pc, #340]	; (80036fc <_ZN12VelocityCtrl3pidEv+0x23c>)
 80035a6:	601a      	str	r2, [r3, #0]

	o_p = o_kp_ * o_diff;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80035ae:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80035b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035b6:	edc7 7a07 	vstr	s15, [r7, #28]
	o_d = o_kd_ * (o_diff - o_pre_diff) * DELTA_T;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80035c0:	4b4f      	ldr	r3, [pc, #316]	; (8003700 <_ZN12VelocityCtrl3pidEv+0x240>)
 80035c2:	edd3 7a00 	vldr	s15, [r3]
 80035c6:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80035ca:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80035ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035d2:	ee17 0a90 	vmov	r0, s15
 80035d6:	f7fc ffcf 	bl	8000578 <__aeabi_f2d>
 80035da:	a345      	add	r3, pc, #276	; (adr r3, 80036f0 <_ZN12VelocityCtrl3pidEv+0x230>)
 80035dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e0:	f7fd f822 	bl	8000628 <__aeabi_dmul>
 80035e4:	4603      	mov	r3, r0
 80035e6:	460c      	mov	r4, r1
 80035e8:	4618      	mov	r0, r3
 80035ea:	4621      	mov	r1, r4
 80035ec:	f7fd fb14 	bl	8000c18 <__aeabi_d2f>
 80035f0:	4603      	mov	r3, r0
 80035f2:	61bb      	str	r3, [r7, #24]
	o_i += o_ki_ * o_diff * DELTA_T;
 80035f4:	4b43      	ldr	r3, [pc, #268]	; (8003704 <_ZN12VelocityCtrl3pidEv+0x244>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4618      	mov	r0, r3
 80035fa:	f7fc ffbd 	bl	8000578 <__aeabi_f2d>
 80035fe:	4604      	mov	r4, r0
 8003600:	460d      	mov	r5, r1
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8003608:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800360c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003610:	ee17 0a90 	vmov	r0, s15
 8003614:	f7fc ffb0 	bl	8000578 <__aeabi_f2d>
 8003618:	a335      	add	r3, pc, #212	; (adr r3, 80036f0 <_ZN12VelocityCtrl3pidEv+0x230>)
 800361a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800361e:	f7fd f803 	bl	8000628 <__aeabi_dmul>
 8003622:	4602      	mov	r2, r0
 8003624:	460b      	mov	r3, r1
 8003626:	4620      	mov	r0, r4
 8003628:	4629      	mov	r1, r5
 800362a:	f7fc fe47 	bl	80002bc <__adddf3>
 800362e:	4603      	mov	r3, r0
 8003630:	460c      	mov	r4, r1
 8003632:	4618      	mov	r0, r3
 8003634:	4621      	mov	r1, r4
 8003636:	f7fd faef 	bl	8000c18 <__aeabi_d2f>
 800363a:	4602      	mov	r2, r0
 800363c:	4b31      	ldr	r3, [pc, #196]	; (8003704 <_ZN12VelocityCtrl3pidEv+0x244>)
 800363e:	601a      	str	r2, [r3, #0]

	float v_left_ratio, v_right_ratio, o_left_ratio, o_right_ratio;

	v_left_ratio = v_right_ratio =  v_p + v_d + v_i;
 8003640:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003644:	edd7 7a08 	vldr	s15, [r7, #32]
 8003648:	ee37 7a27 	vadd.f32	s14, s14, s15
 800364c:	4b2b      	ldr	r3, [pc, #172]	; (80036fc <_ZN12VelocityCtrl3pidEv+0x23c>)
 800364e:	edd3 7a00 	vldr	s15, [r3]
 8003652:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003656:	edc7 7a05 	vstr	s15, [r7, #20]
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	613b      	str	r3, [r7, #16]

	o_left_ratio = o_p + o_d + o_i;
 800365e:	ed97 7a07 	vldr	s14, [r7, #28]
 8003662:	edd7 7a06 	vldr	s15, [r7, #24]
 8003666:	ee37 7a27 	vadd.f32	s14, s14, s15
 800366a:	4b26      	ldr	r3, [pc, #152]	; (8003704 <_ZN12VelocityCtrl3pidEv+0x244>)
 800366c:	edd3 7a00 	vldr	s15, [r3]
 8003670:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003674:	edc7 7a03 	vstr	s15, [r7, #12]
	o_right_ratio = -(o_p + o_d + o_i);
 8003678:	ed97 7a07 	vldr	s14, [r7, #28]
 800367c:	edd7 7a06 	vldr	s15, [r7, #24]
 8003680:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003684:	4b1f      	ldr	r3, [pc, #124]	; (8003704 <_ZN12VelocityCtrl3pidEv+0x244>)
 8003686:	edd3 7a00 	vldr	s15, [r3]
 800368a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800368e:	eef1 7a67 	vneg.f32	s15, s15
 8003692:	edc7 7a02 	vstr	s15, [r7, #8]

	motor_->setRatio(v_left_ratio + o_left_ratio, v_right_ratio + o_right_ratio);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800369a:	ed97 7a04 	vldr	s14, [r7, #16]
 800369e:	edd7 7a03 	vldr	s15, [r7, #12]
 80036a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036a6:	ee17 0a90 	vmov	r0, s15
 80036aa:	f7fc ff65 	bl	8000578 <__aeabi_f2d>
 80036ae:	4605      	mov	r5, r0
 80036b0:	460e      	mov	r6, r1
 80036b2:	ed97 7a05 	vldr	s14, [r7, #20]
 80036b6:	edd7 7a02 	vldr	s15, [r7, #8]
 80036ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036be:	ee17 0a90 	vmov	r0, s15
 80036c2:	f7fc ff59 	bl	8000578 <__aeabi_f2d>
 80036c6:	4602      	mov	r2, r0
 80036c8:	460b      	mov	r3, r1
 80036ca:	ec43 2b11 	vmov	d1, r2, r3
 80036ce:	ec46 5b10 	vmov	d0, r5, r6
 80036d2:	4620      	mov	r0, r4
 80036d4:	f7ff fb98 	bl	8002e08 <_ZN5Motor8setRatioEdd>

	v_pre_diff = v_diff;
 80036d8:	4a07      	ldr	r2, [pc, #28]	; (80036f8 <_ZN12VelocityCtrl3pidEv+0x238>)
 80036da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036dc:	6013      	str	r3, [r2, #0]
	o_pre_diff = o_diff;
 80036de:	4a08      	ldr	r2, [pc, #32]	; (8003700 <_ZN12VelocityCtrl3pidEv+0x240>)
 80036e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036e2:	6013      	str	r3, [r2, #0]
}
 80036e4:	bf00      	nop
 80036e6:	3734      	adds	r7, #52	; 0x34
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036ec:	f3af 8000 	nop.w
 80036f0:	d2f1a9fc 	.word	0xd2f1a9fc
 80036f4:	3f50624d 	.word	0x3f50624d
 80036f8:	20000220 	.word	0x20000220
 80036fc:	20000228 	.word	0x20000228
 8003700:	20000224 	.word	0x20000224
 8003704:	2000022c 	.word	0x2000022c

08003708 <_ZN12VelocityCtrl11setVelocityEff>:
{

}

void VelocityCtrl::setVelocity(float velocity, float omega)
{
 8003708:	b480      	push	{r7}
 800370a:	b085      	sub	sp, #20
 800370c:	af00      	add	r7, sp, #0
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	ed87 0a02 	vstr	s0, [r7, #8]
 8003714:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	68ba      	ldr	r2, [r7, #8]
 800371c:	601a      	str	r2, [r3, #0]
	target_omega_= omega;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	605a      	str	r2, [r3, #4]
}
 8003724:	bf00      	nop
 8003726:	3714      	adds	r7, #20
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <_ZN12VelocityCtrl15setVelocityGainEfff>:

void VelocityCtrl::setVelocityGain(float kp, float kd, float ki)
{
 8003730:	b480      	push	{r7}
 8003732:	b085      	sub	sp, #20
 8003734:	af00      	add	r7, sp, #0
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	ed87 0a02 	vstr	s0, [r7, #8]
 800373c:	edc7 0a01 	vstr	s1, [r7, #4]
 8003740:	ed87 1a00 	vstr	s2, [r7]
	v_kp_ = kp;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	68ba      	ldr	r2, [r7, #8]
 8003748:	619a      	str	r2, [r3, #24]
	v_kd_ = kd;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	61da      	str	r2, [r3, #28]
	v_ki_ = ki;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	683a      	ldr	r2, [r7, #0]
 8003754:	621a      	str	r2, [r3, #32]
}
 8003756:	bf00      	nop
 8003758:	3714      	adds	r7, #20
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr

08003762 <_ZN12VelocityCtrl12setOmegaGainEfff>:

void VelocityCtrl::setOmegaGain(float kp, float kd, float ki)
{
 8003762:	b480      	push	{r7}
 8003764:	b085      	sub	sp, #20
 8003766:	af00      	add	r7, sp, #0
 8003768:	60f8      	str	r0, [r7, #12]
 800376a:	ed87 0a02 	vstr	s0, [r7, #8]
 800376e:	edc7 0a01 	vstr	s1, [r7, #4]
 8003772:	ed87 1a00 	vstr	s2, [r7]
	o_kp_ = kp;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	68ba      	ldr	r2, [r7, #8]
 800377a:	625a      	str	r2, [r3, #36]	; 0x24
	o_kd_ = kd;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	629a      	str	r2, [r3, #40]	; 0x28
	o_ki_ = ki;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	683a      	ldr	r2, [r7, #0]
 8003786:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003788:	bf00      	nop
 800378a:	3714      	adds	r7, #20
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <_ZN12VelocityCtrl4flipEv>:

void VelocityCtrl::flip()
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b082      	sub	sp, #8
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
    calcVelocity();
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f7ff fe47 	bl	8003430 <_ZN12VelocityCtrl12calcVelocityEv>
	//calcOmega();

	if(excution_flag_ == true){
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d002      	beq.n	80037b2 <_ZN12VelocityCtrl4flipEv+0x1e>
		pid();
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f7ff fe87 	bl	80034c0 <_ZN12VelocityCtrl3pidEv>
	}


}
 80037b2:	bf00      	nop
 80037b4:	3708      	adds	r7, #8
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}

080037ba <_ZN12VelocityCtrl5startEv>:

void VelocityCtrl::start()
{
 80037ba:	b480      	push	{r7}
 80037bc:	b083      	sub	sp, #12
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2201      	movs	r2, #1
 80037c6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	//calcOmega();
}
 80037ca:	bf00      	nop
 80037cc:	370c      	adds	r7, #12
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr
	...

080037d8 <_ZN12VelocityCtrl4stopEv>:

void VelocityCtrl::stop()
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	motor_->setRatio(0, 0);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037ec:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8003808 <_ZN12VelocityCtrl4stopEv+0x30>
 80037f0:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8003808 <_ZN12VelocityCtrl4stopEv+0x30>
 80037f4:	4618      	mov	r0, r3
 80037f6:	f7ff fb07 	bl	8002e08 <_ZN5Motor8setRatioEdd>

}
 80037fa:	bf00      	nop
 80037fc:	3708      	adds	r7, #8
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	f3af 8000 	nop.w
	...

08003810 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003818:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800381c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8003820:	f003 0301 	and.w	r3, r3, #1
 8003824:	2b00      	cmp	r3, #0
 8003826:	d013      	beq.n	8003850 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8003828:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800382c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8003830:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003834:	2b00      	cmp	r3, #0
 8003836:	d00b      	beq.n	8003850 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8003838:	e000      	b.n	800383c <ITM_SendChar+0x2c>
    {
      __NOP();
 800383a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800383c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d0f9      	beq.n	800383a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8003846:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	b2d2      	uxtb	r2, r2
 800384e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8003850:	687b      	ldr	r3, [r7, #4]
}
 8003852:	4618      	mov	r0, r3
 8003854:	370c      	adds	r7, #12
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr

0800385e <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


int _write(int file, char *ptr, int len)
{
 800385e:	b580      	push	{r7, lr}
 8003860:	b086      	sub	sp, #24
 8003862:	af00      	add	r7, sp, #0
 8003864:	60f8      	str	r0, [r7, #12]
 8003866:	60b9      	str	r1, [r7, #8]
 8003868:	607a      	str	r2, [r7, #4]
  int DataIdx;
  for(DataIdx=0; DataIdx<len; DataIdx++)
 800386a:	2300      	movs	r3, #0
 800386c:	617b      	str	r3, [r7, #20]
 800386e:	e009      	b.n	8003884 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	1c5a      	adds	r2, r3, #1
 8003874:	60ba      	str	r2, [r7, #8]
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	4618      	mov	r0, r3
 800387a:	f7ff ffc9 	bl	8003810 <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	3301      	adds	r3, #1
 8003882:	617b      	str	r3, [r7, #20]
 8003884:	697a      	ldr	r2, [r7, #20]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	429a      	cmp	r2, r3
 800388a:	dbf1      	blt.n	8003870 <_write+0x12>
  }
  return len;
 800388c:	687b      	ldr	r3, [r7, #4]
}
 800388e:	4618      	mov	r0, r3
 8003890:	3718      	adds	r7, #24
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}

08003896 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003896:	b580      	push	{r7, lr}
 8003898:	b082      	sub	sp, #8
 800389a:	af00      	add	r7, sp, #0
 800389c:	4603      	mov	r3, r0
 800389e:	80fb      	strh	r3, [r7, #6]
	cppExit(GPIO_Pin);
 80038a0:	88fb      	ldrh	r3, [r7, #6]
 80038a2:	4618      	mov	r0, r3
 80038a4:	f001 fef6 	bl	8005694 <cppExit>
}
 80038a8:	bf00      	nop
 80038aa:	3708      	adds	r7, #8
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6){
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a1e      	ldr	r2, [pc, #120]	; (8003938 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d10e      	bne.n	80038e0 <HAL_TIM_PeriodElapsedCallback+0x30>
		cppFlip1ms();
 80038c2:	f001 fe67 	bl	8005594 <cppFlip1ms>

		tim6_timer++;
 80038c6:	4b1d      	ldr	r3, [pc, #116]	; (800393c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	3301      	adds	r3, #1
 80038cc:	4a1b      	ldr	r2, [pc, #108]	; (800393c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80038ce:	6013      	str	r3, [r2, #0]
		if(tim6_timer >= 100000) tim6_timer = 0;
 80038d0:	4b1a      	ldr	r3, [pc, #104]	; (800393c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a1a      	ldr	r2, [pc, #104]	; (8003940 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d902      	bls.n	80038e0 <HAL_TIM_PeriodElapsedCallback+0x30>
 80038da:	4b18      	ldr	r3, [pc, #96]	; (800393c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80038dc:	2200      	movs	r2, #0
 80038de:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM7){
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a17      	ldr	r2, [pc, #92]	; (8003944 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d10e      	bne.n	8003908 <HAL_TIM_PeriodElapsedCallback+0x58>
		cppFlip100ns();
 80038ea:	f001 feb9 	bl	8005660 <cppFlip100ns>

		tim7_timer++;
 80038ee:	4b16      	ldr	r3, [pc, #88]	; (8003948 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	3301      	adds	r3, #1
 80038f4:	4a14      	ldr	r2, [pc, #80]	; (8003948 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80038f6:	6013      	str	r3, [r2, #0]
		if(tim7_timer >= 100000) tim7_timer = 0;
 80038f8:	4b13      	ldr	r3, [pc, #76]	; (8003948 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a10      	ldr	r2, [pc, #64]	; (8003940 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d902      	bls.n	8003908 <HAL_TIM_PeriodElapsedCallback+0x58>
 8003902:	4b11      	ldr	r3, [pc, #68]	; (8003948 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8003904:	2200      	movs	r2, #0
 8003906:	601a      	str	r2, [r3, #0]
	}
	if(htim->Instance == TIM13){
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a0f      	ldr	r2, [pc, #60]	; (800394c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d10e      	bne.n	8003930 <HAL_TIM_PeriodElapsedCallback+0x80>
		cppFlip10ms();
 8003912:	f001 feaf 	bl	8005674 <cppFlip10ms>

		tim13_timer++;
 8003916:	4b0e      	ldr	r3, [pc, #56]	; (8003950 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	3301      	adds	r3, #1
 800391c:	4a0c      	ldr	r2, [pc, #48]	; (8003950 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800391e:	6013      	str	r3, [r2, #0]
		if(tim13_timer >= 100000) tim13_timer = 0;
 8003920:	4b0b      	ldr	r3, [pc, #44]	; (8003950 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a06      	ldr	r2, [pc, #24]	; (8003940 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d902      	bls.n	8003930 <HAL_TIM_PeriodElapsedCallback+0x80>
 800392a:	4b09      	ldr	r3, [pc, #36]	; (8003950 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800392c:	2200      	movs	r2, #0
 800392e:	601a      	str	r2, [r3, #0]
	}

}
 8003930:	bf00      	nop
 8003932:	3708      	adds	r7, #8
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	40001000 	.word	0x40001000
 800393c:	20021a78 	.word	0x20021a78
 8003940:	0001869f 	.word	0x0001869f
 8003944:	40001400 	.word	0x40001400
 8003948:	20021abc 	.word	0x20021abc
 800394c:	40001c00 	.word	0x40001c00
 8003950:	20021ac0 	.word	0x20021ac0

08003954 <init>:

void init()
{
 8003954:	b580      	push	{r7, lr}
 8003956:	af00      	add	r7, sp, #0
	// ------initialize------//
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET); // sensor led ON
 8003958:	2201      	movs	r2, #1
 800395a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800395e:	4808      	ldr	r0, [pc, #32]	; (8003980 <init+0x2c>)
 8003960:	f003 fcd8 	bl	8007314 <HAL_GPIO_WritePin>

	// timer interrpt in start
	HAL_TIM_Base_Start_IT(&htim6);
 8003964:	4807      	ldr	r0, [pc, #28]	; (8003984 <init+0x30>)
 8003966:	f007 fbb8 	bl	800b0da <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 800396a:	4807      	ldr	r0, [pc, #28]	; (8003988 <init+0x34>)
 800396c:	f007 fbb5 	bl	800b0da <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 8003970:	4806      	ldr	r0, [pc, #24]	; (800398c <init+0x38>)
 8003972:	f007 fbb2 	bl	800b0da <HAL_TIM_Base_Start_IT>

	cppInit();
 8003976:	f001 fd8b 	bl	8005490 <cppInit>

}
 800397a:	bf00      	nop
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	40021000 	.word	0x40021000
 8003984:	20021ba4 	.word	0x20021ba4
 8003988:	20021d48 	.word	0x20021d48
 800398c:	20021ac4 	.word	0x20021ac4

08003990 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003994:	f002 f9b6 	bl	8005d04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003998:	f000 f82a 	bl	80039f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800399c:	f000 fdbc 	bl	8004518 <MX_GPIO_Init>
  MX_DMA_Init();
 80039a0:	f000 fd8a 	bl	80044b8 <MX_DMA_Init>
  MX_I2C2_Init();
 80039a4:	f000 f9e8 	bl	8003d78 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 80039a8:	f000 fa14 	bl	8003dd4 <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 80039ac:	f000 fa32 	bl	8003e14 <MX_SPI2_Init>
  MX_TIM1_Init();
 80039b0:	f000 fa66 	bl	8003e80 <MX_TIM1_Init>
  MX_TIM4_Init();
 80039b4:	f000 fb70 	bl	8004098 <MX_TIM4_Init>
  MX_TIM8_Init();
 80039b8:	f000 fc3c 	bl	8004234 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 80039bc:	f000 fd52 	bl	8004464 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 80039c0:	f009 fb5e 	bl	800d080 <MX_FATFS_Init>
  MX_TIM6_Init();
 80039c4:	f000 fbcc 	bl	8004160 <MX_TIM6_Init>
  MX_I2C1_Init();
 80039c8:	f000 f9a8 	bl	8003d1c <MX_I2C1_Init>
  MX_TIM3_Init();
 80039cc:	f000 fb00 	bl	8003fd0 <MX_TIM3_Init>
  MX_TIM10_Init();
 80039d0:	f000 fc88 	bl	80042e4 <MX_TIM10_Init>
  MX_TIM11_Init();
 80039d4:	f000 fcd4 	bl	8004380 <MX_TIM11_Init>
  MX_ADC2_Init();
 80039d8:	f000 f898 	bl	8003b0c <MX_ADC2_Init>
  MX_TIM7_Init();
 80039dc:	f000 fbf6 	bl	80041cc <MX_TIM7_Init>
  MX_TIM13_Init();
 80039e0:	f000 fd1c 	bl	800441c <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  init();
 80039e4:	f7ff ffb6 	bl	8003954 <init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  cppLoop();
 80039e8:	f001 fe66 	bl	80056b8 <cppLoop>
 80039ec:	e7fc      	b.n	80039e8 <main+0x58>
	...

080039f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b0a4      	sub	sp, #144	; 0x90
 80039f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80039f6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80039fa:	2234      	movs	r2, #52	; 0x34
 80039fc:	2100      	movs	r1, #0
 80039fe:	4618      	mov	r0, r3
 8003a00:	f00e fd0e 	bl	8012420 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003a04:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003a08:	2200      	movs	r2, #0
 8003a0a:	601a      	str	r2, [r3, #0]
 8003a0c:	605a      	str	r2, [r3, #4]
 8003a0e:	609a      	str	r2, [r3, #8]
 8003a10:	60da      	str	r2, [r3, #12]
 8003a12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003a14:	f107 030c 	add.w	r3, r7, #12
 8003a18:	223c      	movs	r2, #60	; 0x3c
 8003a1a:	2100      	movs	r1, #0
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f00e fcff 	bl	8012420 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a22:	2300      	movs	r3, #0
 8003a24:	60bb      	str	r3, [r7, #8]
 8003a26:	4b37      	ldr	r3, [pc, #220]	; (8003b04 <SystemClock_Config+0x114>)
 8003a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2a:	4a36      	ldr	r2, [pc, #216]	; (8003b04 <SystemClock_Config+0x114>)
 8003a2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a30:	6413      	str	r3, [r2, #64]	; 0x40
 8003a32:	4b34      	ldr	r3, [pc, #208]	; (8003b04 <SystemClock_Config+0x114>)
 8003a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a3a:	60bb      	str	r3, [r7, #8]
 8003a3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a3e:	2300      	movs	r3, #0
 8003a40:	607b      	str	r3, [r7, #4]
 8003a42:	4b31      	ldr	r3, [pc, #196]	; (8003b08 <SystemClock_Config+0x118>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a30      	ldr	r2, [pc, #192]	; (8003b08 <SystemClock_Config+0x118>)
 8003a48:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a4c:	6013      	str	r3, [r2, #0]
 8003a4e:	4b2e      	ldr	r3, [pc, #184]	; (8003b08 <SystemClock_Config+0x118>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003a56:	607b      	str	r3, [r7, #4]
 8003a58:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003a5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a62:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003a64:	2302      	movs	r3, #2
 8003a66:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003a68:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003a6c:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003a6e:	2308      	movs	r3, #8
 8003a70:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8003a72:	23b4      	movs	r3, #180	; 0xb4
 8003a74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003a78:	2302      	movs	r3, #2
 8003a7a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8003a7e:	2308      	movs	r3, #8
 8003a80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003a84:	2302      	movs	r3, #2
 8003a86:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003a8a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f005 f87a 	bl	8008b88 <HAL_RCC_OscConfig>
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d001      	beq.n	8003a9e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8003a9a:	f000 fe93 	bl	80047c4 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003a9e:	f004 fbf5 	bl	800828c <HAL_PWREx_EnableOverDrive>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d001      	beq.n	8003aac <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8003aa8:	f000 fe8c 	bl	80047c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003aac:	230f      	movs	r3, #15
 8003aae:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003ab8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003abc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003abe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ac2:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003ac4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003ac8:	2105      	movs	r1, #5
 8003aca:	4618      	mov	r0, r3
 8003acc:	f004 fc2e 	bl	800832c <HAL_RCC_ClockConfig>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d001      	beq.n	8003ada <SystemClock_Config+0xea>
  {
    Error_Handler();
 8003ad6:	f000 fe75 	bl	80047c4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8003ada:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003ade:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003ae8:	f107 030c 	add.w	r3, r7, #12
 8003aec:	4618      	mov	r0, r3
 8003aee:	f004 fe0d 	bl	800870c <HAL_RCCEx_PeriphCLKConfig>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d001      	beq.n	8003afc <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8003af8:	f000 fe64 	bl	80047c4 <Error_Handler>
  }
}
 8003afc:	bf00      	nop
 8003afe:	3790      	adds	r7, #144	; 0x90
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	40023800 	.word	0x40023800
 8003b08:	40007000 	.word	0x40007000

08003b0c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b084      	sub	sp, #16
 8003b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003b12:	463b      	mov	r3, r7
 8003b14:	2200      	movs	r2, #0
 8003b16:	601a      	str	r2, [r3, #0]
 8003b18:	605a      	str	r2, [r3, #4]
 8003b1a:	609a      	str	r2, [r3, #8]
 8003b1c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8003b1e:	4b7c      	ldr	r3, [pc, #496]	; (8003d10 <MX_ADC2_Init+0x204>)
 8003b20:	4a7c      	ldr	r2, [pc, #496]	; (8003d14 <MX_ADC2_Init+0x208>)
 8003b22:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003b24:	4b7a      	ldr	r3, [pc, #488]	; (8003d10 <MX_ADC2_Init+0x204>)
 8003b26:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003b2a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8003b2c:	4b78      	ldr	r3, [pc, #480]	; (8003d10 <MX_ADC2_Init+0x204>)
 8003b2e:	2200      	movs	r2, #0
 8003b30:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8003b32:	4b77      	ldr	r3, [pc, #476]	; (8003d10 <MX_ADC2_Init+0x204>)
 8003b34:	2201      	movs	r2, #1
 8003b36:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8003b38:	4b75      	ldr	r3, [pc, #468]	; (8003d10 <MX_ADC2_Init+0x204>)
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003b3e:	4b74      	ldr	r3, [pc, #464]	; (8003d10 <MX_ADC2_Init+0x204>)
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003b46:	4b72      	ldr	r3, [pc, #456]	; (8003d10 <MX_ADC2_Init+0x204>)
 8003b48:	2200      	movs	r2, #0
 8003b4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003b4c:	4b70      	ldr	r3, [pc, #448]	; (8003d10 <MX_ADC2_Init+0x204>)
 8003b4e:	4a72      	ldr	r2, [pc, #456]	; (8003d18 <MX_ADC2_Init+0x20c>)
 8003b50:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003b52:	4b6f      	ldr	r3, [pc, #444]	; (8003d10 <MX_ADC2_Init+0x204>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 14;
 8003b58:	4b6d      	ldr	r3, [pc, #436]	; (8003d10 <MX_ADC2_Init+0x204>)
 8003b5a:	220e      	movs	r2, #14
 8003b5c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8003b5e:	4b6c      	ldr	r3, [pc, #432]	; (8003d10 <MX_ADC2_Init+0x204>)
 8003b60:	2201      	movs	r2, #1
 8003b62:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003b66:	4b6a      	ldr	r3, [pc, #424]	; (8003d10 <MX_ADC2_Init+0x204>)
 8003b68:	2201      	movs	r2, #1
 8003b6a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003b6c:	4868      	ldr	r0, [pc, #416]	; (8003d10 <MX_ADC2_Init+0x204>)
 8003b6e:	f002 f95d 	bl	8005e2c <HAL_ADC_Init>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d001      	beq.n	8003b7c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8003b78:	f000 fe24 	bl	80047c4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8003b7c:	230a      	movs	r3, #10
 8003b7e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003b80:	2301      	movs	r3, #1
 8003b82:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8003b84:	2306      	movs	r3, #6
 8003b86:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003b88:	463b      	mov	r3, r7
 8003b8a:	4619      	mov	r1, r3
 8003b8c:	4860      	ldr	r0, [pc, #384]	; (8003d10 <MX_ADC2_Init+0x204>)
 8003b8e:	f002 faa1 	bl	80060d4 <HAL_ADC_ConfigChannel>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d001      	beq.n	8003b9c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8003b98:	f000 fe14 	bl	80047c4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8003b9c:	230b      	movs	r3, #11
 8003b9e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8003ba0:	2302      	movs	r3, #2
 8003ba2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003ba4:	463b      	mov	r3, r7
 8003ba6:	4619      	mov	r1, r3
 8003ba8:	4859      	ldr	r0, [pc, #356]	; (8003d10 <MX_ADC2_Init+0x204>)
 8003baa:	f002 fa93 	bl	80060d4 <HAL_ADC_ConfigChannel>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d001      	beq.n	8003bb8 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8003bb4:	f000 fe06 	bl	80047c4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8003bb8:	230c      	movs	r3, #12
 8003bba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003bc0:	463b      	mov	r3, r7
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	4852      	ldr	r0, [pc, #328]	; (8003d10 <MX_ADC2_Init+0x204>)
 8003bc6:	f002 fa85 	bl	80060d4 <HAL_ADC_ConfigChannel>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d001      	beq.n	8003bd4 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8003bd0:	f000 fdf8 	bl	80047c4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8003bd4:	230d      	movs	r3, #13
 8003bd6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8003bd8:	2304      	movs	r3, #4
 8003bda:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003bdc:	463b      	mov	r3, r7
 8003bde:	4619      	mov	r1, r3
 8003be0:	484b      	ldr	r0, [pc, #300]	; (8003d10 <MX_ADC2_Init+0x204>)
 8003be2:	f002 fa77 	bl	80060d4 <HAL_ADC_ConfigChannel>
 8003be6:	4603      	mov	r3, r0
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d001      	beq.n	8003bf0 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8003bec:	f000 fdea 	bl	80047c4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8003bf4:	2305      	movs	r3, #5
 8003bf6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003bf8:	463b      	mov	r3, r7
 8003bfa:	4619      	mov	r1, r3
 8003bfc:	4844      	ldr	r0, [pc, #272]	; (8003d10 <MX_ADC2_Init+0x204>)
 8003bfe:	f002 fa69 	bl	80060d4 <HAL_ADC_ConfigChannel>
 8003c02:	4603      	mov	r3, r0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d001      	beq.n	8003c0c <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8003c08:	f000 fddc 	bl	80047c4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8003c10:	2306      	movs	r3, #6
 8003c12:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003c14:	463b      	mov	r3, r7
 8003c16:	4619      	mov	r1, r3
 8003c18:	483d      	ldr	r0, [pc, #244]	; (8003d10 <MX_ADC2_Init+0x204>)
 8003c1a:	f002 fa5b 	bl	80060d4 <HAL_ADC_ConfigChannel>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d001      	beq.n	8003c28 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 8003c24:	f000 fdce 	bl	80047c4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8003c28:	2302      	movs	r3, #2
 8003c2a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8003c2c:	2307      	movs	r3, #7
 8003c2e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003c30:	463b      	mov	r3, r7
 8003c32:	4619      	mov	r1, r3
 8003c34:	4836      	ldr	r0, [pc, #216]	; (8003d10 <MX_ADC2_Init+0x204>)
 8003c36:	f002 fa4d 	bl	80060d4 <HAL_ADC_ConfigChannel>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d001      	beq.n	8003c44 <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 8003c40:	f000 fdc0 	bl	80047c4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003c44:	2303      	movs	r3, #3
 8003c46:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8003c48:	2308      	movs	r3, #8
 8003c4a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003c4c:	463b      	mov	r3, r7
 8003c4e:	4619      	mov	r1, r3
 8003c50:	482f      	ldr	r0, [pc, #188]	; (8003d10 <MX_ADC2_Init+0x204>)
 8003c52:	f002 fa3f 	bl	80060d4 <HAL_ADC_ConfigChannel>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d001      	beq.n	8003c60 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 8003c5c:	f000 fdb2 	bl	80047c4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8003c60:	2304      	movs	r3, #4
 8003c62:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8003c64:	2309      	movs	r3, #9
 8003c66:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003c68:	463b      	mov	r3, r7
 8003c6a:	4619      	mov	r1, r3
 8003c6c:	4828      	ldr	r0, [pc, #160]	; (8003d10 <MX_ADC2_Init+0x204>)
 8003c6e:	f002 fa31 	bl	80060d4 <HAL_ADC_ConfigChannel>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d001      	beq.n	8003c7c <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 8003c78:	f000 fda4 	bl	80047c4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8003c7c:	2305      	movs	r3, #5
 8003c7e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8003c80:	230a      	movs	r3, #10
 8003c82:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003c84:	463b      	mov	r3, r7
 8003c86:	4619      	mov	r1, r3
 8003c88:	4821      	ldr	r0, [pc, #132]	; (8003d10 <MX_ADC2_Init+0x204>)
 8003c8a:	f002 fa23 	bl	80060d4 <HAL_ADC_ConfigChannel>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d001      	beq.n	8003c98 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 8003c94:	f000 fd96 	bl	80047c4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8003c98:	2306      	movs	r3, #6
 8003c9a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8003c9c:	230b      	movs	r3, #11
 8003c9e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003ca0:	463b      	mov	r3, r7
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	481a      	ldr	r0, [pc, #104]	; (8003d10 <MX_ADC2_Init+0x204>)
 8003ca6:	f002 fa15 	bl	80060d4 <HAL_ADC_ConfigChannel>
 8003caa:	4603      	mov	r3, r0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d001      	beq.n	8003cb4 <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 8003cb0:	f000 fd88 	bl	80047c4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8003cb4:	2307      	movs	r3, #7
 8003cb6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8003cb8:	230c      	movs	r3, #12
 8003cba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003cbc:	463b      	mov	r3, r7
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	4813      	ldr	r0, [pc, #76]	; (8003d10 <MX_ADC2_Init+0x204>)
 8003cc2:	f002 fa07 	bl	80060d4 <HAL_ADC_ConfigChannel>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d001      	beq.n	8003cd0 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 8003ccc:	f000 fd7a 	bl	80047c4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8003cd0:	2308      	movs	r3, #8
 8003cd2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8003cd4:	230d      	movs	r3, #13
 8003cd6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003cd8:	463b      	mov	r3, r7
 8003cda:	4619      	mov	r1, r3
 8003cdc:	480c      	ldr	r0, [pc, #48]	; (8003d10 <MX_ADC2_Init+0x204>)
 8003cde:	f002 f9f9 	bl	80060d4 <HAL_ADC_ConfigChannel>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d001      	beq.n	8003cec <MX_ADC2_Init+0x1e0>
  {
    Error_Handler();
 8003ce8:	f000 fd6c 	bl	80047c4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8003cec:	2309      	movs	r3, #9
 8003cee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8003cf0:	230e      	movs	r3, #14
 8003cf2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003cf4:	463b      	mov	r3, r7
 8003cf6:	4619      	mov	r1, r3
 8003cf8:	4805      	ldr	r0, [pc, #20]	; (8003d10 <MX_ADC2_Init+0x204>)
 8003cfa:	f002 f9eb 	bl	80060d4 <HAL_ADC_ConfigChannel>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d001      	beq.n	8003d08 <MX_ADC2_Init+0x1fc>
  {
    Error_Handler();
 8003d04:	f000 fd5e 	bl	80047c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8003d08:	bf00      	nop
 8003d0a:	3710      	adds	r7, #16
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	20021948 	.word	0x20021948
 8003d14:	40012100 	.word	0x40012100
 8003d18:	0f000001 	.word	0x0f000001

08003d1c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003d20:	4b12      	ldr	r3, [pc, #72]	; (8003d6c <MX_I2C1_Init+0x50>)
 8003d22:	4a13      	ldr	r2, [pc, #76]	; (8003d70 <MX_I2C1_Init+0x54>)
 8003d24:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003d26:	4b11      	ldr	r3, [pc, #68]	; (8003d6c <MX_I2C1_Init+0x50>)
 8003d28:	4a12      	ldr	r2, [pc, #72]	; (8003d74 <MX_I2C1_Init+0x58>)
 8003d2a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003d2c:	4b0f      	ldr	r3, [pc, #60]	; (8003d6c <MX_I2C1_Init+0x50>)
 8003d2e:	2200      	movs	r2, #0
 8003d30:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003d32:	4b0e      	ldr	r3, [pc, #56]	; (8003d6c <MX_I2C1_Init+0x50>)
 8003d34:	2200      	movs	r2, #0
 8003d36:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003d38:	4b0c      	ldr	r3, [pc, #48]	; (8003d6c <MX_I2C1_Init+0x50>)
 8003d3a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003d3e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003d40:	4b0a      	ldr	r3, [pc, #40]	; (8003d6c <MX_I2C1_Init+0x50>)
 8003d42:	2200      	movs	r2, #0
 8003d44:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003d46:	4b09      	ldr	r3, [pc, #36]	; (8003d6c <MX_I2C1_Init+0x50>)
 8003d48:	2200      	movs	r2, #0
 8003d4a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003d4c:	4b07      	ldr	r3, [pc, #28]	; (8003d6c <MX_I2C1_Init+0x50>)
 8003d4e:	2200      	movs	r2, #0
 8003d50:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8003d52:	4b06      	ldr	r3, [pc, #24]	; (8003d6c <MX_I2C1_Init+0x50>)
 8003d54:	2280      	movs	r2, #128	; 0x80
 8003d56:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003d58:	4804      	ldr	r0, [pc, #16]	; (8003d6c <MX_I2C1_Init+0x50>)
 8003d5a:	f003 fb0d 	bl	8007378 <HAL_I2C_Init>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d001      	beq.n	8003d68 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003d64:	f000 fd2e 	bl	80047c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003d68:	bf00      	nop
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	20021990 	.word	0x20021990
 8003d70:	40005400 	.word	0x40005400
 8003d74:	000186a0 	.word	0x000186a0

08003d78 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003d7c:	4b12      	ldr	r3, [pc, #72]	; (8003dc8 <MX_I2C2_Init+0x50>)
 8003d7e:	4a13      	ldr	r2, [pc, #76]	; (8003dcc <MX_I2C2_Init+0x54>)
 8003d80:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8003d82:	4b11      	ldr	r3, [pc, #68]	; (8003dc8 <MX_I2C2_Init+0x50>)
 8003d84:	4a12      	ldr	r2, [pc, #72]	; (8003dd0 <MX_I2C2_Init+0x58>)
 8003d86:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003d88:	4b0f      	ldr	r3, [pc, #60]	; (8003dc8 <MX_I2C2_Init+0x50>)
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8003d8e:	4b0e      	ldr	r3, [pc, #56]	; (8003dc8 <MX_I2C2_Init+0x50>)
 8003d90:	2200      	movs	r2, #0
 8003d92:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003d94:	4b0c      	ldr	r3, [pc, #48]	; (8003dc8 <MX_I2C2_Init+0x50>)
 8003d96:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003d9a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003d9c:	4b0a      	ldr	r3, [pc, #40]	; (8003dc8 <MX_I2C2_Init+0x50>)
 8003d9e:	2200      	movs	r2, #0
 8003da0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8003da2:	4b09      	ldr	r3, [pc, #36]	; (8003dc8 <MX_I2C2_Init+0x50>)
 8003da4:	2200      	movs	r2, #0
 8003da6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003da8:	4b07      	ldr	r3, [pc, #28]	; (8003dc8 <MX_I2C2_Init+0x50>)
 8003daa:	2200      	movs	r2, #0
 8003dac:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8003dae:	4b06      	ldr	r3, [pc, #24]	; (8003dc8 <MX_I2C2_Init+0x50>)
 8003db0:	2280      	movs	r2, #128	; 0x80
 8003db2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003db4:	4804      	ldr	r0, [pc, #16]	; (8003dc8 <MX_I2C2_Init+0x50>)
 8003db6:	f003 fadf 	bl	8007378 <HAL_I2C_Init>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d001      	beq.n	8003dc4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8003dc0:	f000 fd00 	bl	80047c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003dc4:	bf00      	nop
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	20021a24 	.word	0x20021a24
 8003dcc:	40005800 	.word	0x40005800
 8003dd0:	000186a0 	.word	0x000186a0

08003dd4 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8003dd8:	4b0c      	ldr	r3, [pc, #48]	; (8003e0c <MX_SDIO_SD_Init+0x38>)
 8003dda:	4a0d      	ldr	r2, [pc, #52]	; (8003e10 <MX_SDIO_SD_Init+0x3c>)
 8003ddc:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8003dde:	4b0b      	ldr	r3, [pc, #44]	; (8003e0c <MX_SDIO_SD_Init+0x38>)
 8003de0:	2200      	movs	r2, #0
 8003de2:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8003de4:	4b09      	ldr	r3, [pc, #36]	; (8003e0c <MX_SDIO_SD_Init+0x38>)
 8003de6:	2200      	movs	r2, #0
 8003de8:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003dea:	4b08      	ldr	r3, [pc, #32]	; (8003e0c <MX_SDIO_SD_Init+0x38>)
 8003dec:	2200      	movs	r2, #0
 8003dee:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8003df0:	4b06      	ldr	r3, [pc, #24]	; (8003e0c <MX_SDIO_SD_Init+0x38>)
 8003df2:	2200      	movs	r2, #0
 8003df4:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003df6:	4b05      	ldr	r3, [pc, #20]	; (8003e0c <MX_SDIO_SD_Init+0x38>)
 8003df8:	2200      	movs	r2, #0
 8003dfa:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8003dfc:	4b03      	ldr	r3, [pc, #12]	; (8003e0c <MX_SDIO_SD_Init+0x38>)
 8003dfe:	2200      	movs	r2, #0
 8003e00:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8003e02:	bf00      	nop
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr
 8003e0c:	20021c24 	.word	0x20021c24
 8003e10:	40012c00 	.word	0x40012c00

08003e14 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003e18:	4b17      	ldr	r3, [pc, #92]	; (8003e78 <MX_SPI2_Init+0x64>)
 8003e1a:	4a18      	ldr	r2, [pc, #96]	; (8003e7c <MX_SPI2_Init+0x68>)
 8003e1c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003e1e:	4b16      	ldr	r3, [pc, #88]	; (8003e78 <MX_SPI2_Init+0x64>)
 8003e20:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003e24:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003e26:	4b14      	ldr	r3, [pc, #80]	; (8003e78 <MX_SPI2_Init+0x64>)
 8003e28:	2200      	movs	r2, #0
 8003e2a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003e2c:	4b12      	ldr	r3, [pc, #72]	; (8003e78 <MX_SPI2_Init+0x64>)
 8003e2e:	2200      	movs	r2, #0
 8003e30:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003e32:	4b11      	ldr	r3, [pc, #68]	; (8003e78 <MX_SPI2_Init+0x64>)
 8003e34:	2202      	movs	r2, #2
 8003e36:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003e38:	4b0f      	ldr	r3, [pc, #60]	; (8003e78 <MX_SPI2_Init+0x64>)
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003e3e:	4b0e      	ldr	r3, [pc, #56]	; (8003e78 <MX_SPI2_Init+0x64>)
 8003e40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e44:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003e46:	4b0c      	ldr	r3, [pc, #48]	; (8003e78 <MX_SPI2_Init+0x64>)
 8003e48:	2228      	movs	r2, #40	; 0x28
 8003e4a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003e4c:	4b0a      	ldr	r3, [pc, #40]	; (8003e78 <MX_SPI2_Init+0x64>)
 8003e4e:	2200      	movs	r2, #0
 8003e50:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003e52:	4b09      	ldr	r3, [pc, #36]	; (8003e78 <MX_SPI2_Init+0x64>)
 8003e54:	2200      	movs	r2, #0
 8003e56:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e58:	4b07      	ldr	r3, [pc, #28]	; (8003e78 <MX_SPI2_Init+0x64>)
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003e5e:	4b06      	ldr	r3, [pc, #24]	; (8003e78 <MX_SPI2_Init+0x64>)
 8003e60:	220a      	movs	r2, #10
 8003e62:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003e64:	4804      	ldr	r0, [pc, #16]	; (8003e78 <MX_SPI2_Init+0x64>)
 8003e66:	f006 fbb9 	bl	800a5dc <HAL_SPI_Init>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d001      	beq.n	8003e74 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003e70:	f000 fca8 	bl	80047c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003e74:	bf00      	nop
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	20021870 	.word	0x20021870
 8003e7c:	40003800 	.word	0x40003800

08003e80 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b09a      	sub	sp, #104	; 0x68
 8003e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003e86:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003e8a:	2224      	movs	r2, #36	; 0x24
 8003e8c:	2100      	movs	r1, #0
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f00e fac6 	bl	8012420 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e94:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003e98:	2200      	movs	r2, #0
 8003e9a:	601a      	str	r2, [r3, #0]
 8003e9c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003e9e:	f107 0320 	add.w	r3, r7, #32
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	601a      	str	r2, [r3, #0]
 8003ea6:	605a      	str	r2, [r3, #4]
 8003ea8:	609a      	str	r2, [r3, #8]
 8003eaa:	60da      	str	r2, [r3, #12]
 8003eac:	611a      	str	r2, [r3, #16]
 8003eae:	615a      	str	r2, [r3, #20]
 8003eb0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003eb2:	463b      	mov	r3, r7
 8003eb4:	2220      	movs	r2, #32
 8003eb6:	2100      	movs	r1, #0
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f00e fab1 	bl	8012420 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003ebe:	4b42      	ldr	r3, [pc, #264]	; (8003fc8 <MX_TIM1_Init+0x148>)
 8003ec0:	4a42      	ldr	r2, [pc, #264]	; (8003fcc <MX_TIM1_Init+0x14c>)
 8003ec2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003ec4:	4b40      	ldr	r3, [pc, #256]	; (8003fc8 <MX_TIM1_Init+0x148>)
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003eca:	4b3f      	ldr	r3, [pc, #252]	; (8003fc8 <MX_TIM1_Init+0x148>)
 8003ecc:	2200      	movs	r2, #0
 8003ece:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003ed0:	4b3d      	ldr	r3, [pc, #244]	; (8003fc8 <MX_TIM1_Init+0x148>)
 8003ed2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ed6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ed8:	4b3b      	ldr	r3, [pc, #236]	; (8003fc8 <MX_TIM1_Init+0x148>)
 8003eda:	2200      	movs	r2, #0
 8003edc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003ede:	4b3a      	ldr	r3, [pc, #232]	; (8003fc8 <MX_TIM1_Init+0x148>)
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ee4:	4b38      	ldr	r3, [pc, #224]	; (8003fc8 <MX_TIM1_Init+0x148>)
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003eea:	4837      	ldr	r0, [pc, #220]	; (8003fc8 <MX_TIM1_Init+0x148>)
 8003eec:	f007 f919 	bl	800b122 <HAL_TIM_PWM_Init>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d001      	beq.n	8003efa <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8003ef6:	f000 fc65 	bl	80047c4 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003efa:	2303      	movs	r3, #3
 8003efc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003efe:	2300      	movs	r3, #0
 8003f00:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003f02:	2301      	movs	r3, #1
 8003f04:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003f06:	2300      	movs	r3, #0
 8003f08:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003f12:	2301      	movs	r3, #1
 8003f14:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003f16:	2300      	movs	r3, #0
 8003f18:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8003f1e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003f22:	4619      	mov	r1, r3
 8003f24:	4828      	ldr	r0, [pc, #160]	; (8003fc8 <MX_TIM1_Init+0x148>)
 8003f26:	f007 f965 	bl	800b1f4 <HAL_TIM_Encoder_Init>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d001      	beq.n	8003f34 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8003f30:	f000 fc48 	bl	80047c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f34:	2300      	movs	r3, #0
 8003f36:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003f3c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003f40:	4619      	mov	r1, r3
 8003f42:	4821      	ldr	r0, [pc, #132]	; (8003fc8 <MX_TIM1_Init+0x148>)
 8003f44:	f007 fe8c 	bl	800bc60 <HAL_TIMEx_MasterConfigSynchronization>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d001      	beq.n	8003f52 <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 8003f4e:	f000 fc39 	bl	80047c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003f52:	2360      	movs	r3, #96	; 0x60
 8003f54:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 8003f56:	2300      	movs	r3, #0
 8003f58:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003f62:	2300      	movs	r3, #0
 8003f64:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003f66:	2300      	movs	r3, #0
 8003f68:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003f6e:	f107 0320 	add.w	r3, r7, #32
 8003f72:	2208      	movs	r2, #8
 8003f74:	4619      	mov	r1, r3
 8003f76:	4814      	ldr	r0, [pc, #80]	; (8003fc8 <MX_TIM1_Init+0x148>)
 8003f78:	f007 fb0e 	bl	800b598 <HAL_TIM_PWM_ConfigChannel>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d001      	beq.n	8003f86 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8003f82:	f000 fc1f 	bl	80047c4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003f86:	2300      	movs	r3, #0
 8003f88:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003f92:	2300      	movs	r3, #0
 8003f94:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003f96:	2300      	movs	r3, #0
 8003f98:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003f9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f9e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003fa4:	463b      	mov	r3, r7
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	4807      	ldr	r0, [pc, #28]	; (8003fc8 <MX_TIM1_Init+0x148>)
 8003faa:	f007 fed5 	bl	800bd58 <HAL_TIMEx_ConfigBreakDeadTime>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d001      	beq.n	8003fb8 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8003fb4:	f000 fc06 	bl	80047c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003fb8:	4803      	ldr	r0, [pc, #12]	; (8003fc8 <MX_TIM1_Init+0x148>)
 8003fba:	f000 ffeb 	bl	8004f94 <HAL_TIM_MspPostInit>

}
 8003fbe:	bf00      	nop
 8003fc0:	3768      	adds	r7, #104	; 0x68
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	20021be4 	.word	0x20021be4
 8003fcc:	40010000 	.word	0x40010000

08003fd0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b08a      	sub	sp, #40	; 0x28
 8003fd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003fd6:	f107 0320 	add.w	r3, r7, #32
 8003fda:	2200      	movs	r2, #0
 8003fdc:	601a      	str	r2, [r3, #0]
 8003fde:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003fe0:	1d3b      	adds	r3, r7, #4
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	601a      	str	r2, [r3, #0]
 8003fe6:	605a      	str	r2, [r3, #4]
 8003fe8:	609a      	str	r2, [r3, #8]
 8003fea:	60da      	str	r2, [r3, #12]
 8003fec:	611a      	str	r2, [r3, #16]
 8003fee:	615a      	str	r2, [r3, #20]
 8003ff0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003ff2:	4b27      	ldr	r3, [pc, #156]	; (8004090 <MX_TIM3_Init+0xc0>)
 8003ff4:	4a27      	ldr	r2, [pc, #156]	; (8004094 <MX_TIM3_Init+0xc4>)
 8003ff6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003ff8:	4b25      	ldr	r3, [pc, #148]	; (8004090 <MX_TIM3_Init+0xc0>)
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ffe:	4b24      	ldr	r3, [pc, #144]	; (8004090 <MX_TIM3_Init+0xc0>)
 8004000:	2200      	movs	r2, #0
 8004002:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004004:	4b22      	ldr	r3, [pc, #136]	; (8004090 <MX_TIM3_Init+0xc0>)
 8004006:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800400a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800400c:	4b20      	ldr	r3, [pc, #128]	; (8004090 <MX_TIM3_Init+0xc0>)
 800400e:	2200      	movs	r2, #0
 8004010:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004012:	4b1f      	ldr	r3, [pc, #124]	; (8004090 <MX_TIM3_Init+0xc0>)
 8004014:	2200      	movs	r2, #0
 8004016:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004018:	481d      	ldr	r0, [pc, #116]	; (8004090 <MX_TIM3_Init+0xc0>)
 800401a:	f007 f882 	bl	800b122 <HAL_TIM_PWM_Init>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d001      	beq.n	8004028 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8004024:	f000 fbce 	bl	80047c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004028:	2300      	movs	r3, #0
 800402a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800402c:	2300      	movs	r3, #0
 800402e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004030:	f107 0320 	add.w	r3, r7, #32
 8004034:	4619      	mov	r1, r3
 8004036:	4816      	ldr	r0, [pc, #88]	; (8004090 <MX_TIM3_Init+0xc0>)
 8004038:	f007 fe12 	bl	800bc60 <HAL_TIMEx_MasterConfigSynchronization>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d001      	beq.n	8004046 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8004042:	f000 fbbf 	bl	80047c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004046:	2360      	movs	r3, #96	; 0x60
 8004048:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800404a:	2300      	movs	r3, #0
 800404c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800404e:	2300      	movs	r3, #0
 8004050:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004052:	2300      	movs	r3, #0
 8004054:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004056:	1d3b      	adds	r3, r7, #4
 8004058:	2200      	movs	r2, #0
 800405a:	4619      	mov	r1, r3
 800405c:	480c      	ldr	r0, [pc, #48]	; (8004090 <MX_TIM3_Init+0xc0>)
 800405e:	f007 fa9b 	bl	800b598 <HAL_TIM_PWM_ConfigChannel>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d001      	beq.n	800406c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8004068:	f000 fbac 	bl	80047c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800406c:	1d3b      	adds	r3, r7, #4
 800406e:	2204      	movs	r2, #4
 8004070:	4619      	mov	r1, r3
 8004072:	4807      	ldr	r0, [pc, #28]	; (8004090 <MX_TIM3_Init+0xc0>)
 8004074:	f007 fa90 	bl	800b598 <HAL_TIM_PWM_ConfigChannel>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d001      	beq.n	8004082 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800407e:	f000 fba1 	bl	80047c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004082:	4803      	ldr	r0, [pc, #12]	; (8004090 <MX_TIM3_Init+0xc0>)
 8004084:	f000 ff86 	bl	8004f94 <HAL_TIM_MspPostInit>

}
 8004088:	bf00      	nop
 800408a:	3728      	adds	r7, #40	; 0x28
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}
 8004090:	20021a7c 	.word	0x20021a7c
 8004094:	40000400 	.word	0x40000400

08004098 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b08a      	sub	sp, #40	; 0x28
 800409c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800409e:	f107 0320 	add.w	r3, r7, #32
 80040a2:	2200      	movs	r2, #0
 80040a4:	601a      	str	r2, [r3, #0]
 80040a6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80040a8:	1d3b      	adds	r3, r7, #4
 80040aa:	2200      	movs	r2, #0
 80040ac:	601a      	str	r2, [r3, #0]
 80040ae:	605a      	str	r2, [r3, #4]
 80040b0:	609a      	str	r2, [r3, #8]
 80040b2:	60da      	str	r2, [r3, #12]
 80040b4:	611a      	str	r2, [r3, #16]
 80040b6:	615a      	str	r2, [r3, #20]
 80040b8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80040ba:	4b27      	ldr	r3, [pc, #156]	; (8004158 <MX_TIM4_Init+0xc0>)
 80040bc:	4a27      	ldr	r2, [pc, #156]	; (800415c <MX_TIM4_Init+0xc4>)
 80040be:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80040c0:	4b25      	ldr	r3, [pc, #148]	; (8004158 <MX_TIM4_Init+0xc0>)
 80040c2:	2200      	movs	r2, #0
 80040c4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040c6:	4b24      	ldr	r3, [pc, #144]	; (8004158 <MX_TIM4_Init+0xc0>)
 80040c8:	2200      	movs	r2, #0
 80040ca:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 80040cc:	4b22      	ldr	r3, [pc, #136]	; (8004158 <MX_TIM4_Init+0xc0>)
 80040ce:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80040d2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040d4:	4b20      	ldr	r3, [pc, #128]	; (8004158 <MX_TIM4_Init+0xc0>)
 80040d6:	2200      	movs	r2, #0
 80040d8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040da:	4b1f      	ldr	r3, [pc, #124]	; (8004158 <MX_TIM4_Init+0xc0>)
 80040dc:	2200      	movs	r2, #0
 80040de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80040e0:	481d      	ldr	r0, [pc, #116]	; (8004158 <MX_TIM4_Init+0xc0>)
 80040e2:	f007 f81e 	bl	800b122 <HAL_TIM_PWM_Init>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d001      	beq.n	80040f0 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80040ec:	f000 fb6a 	bl	80047c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80040f0:	2300      	movs	r3, #0
 80040f2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80040f4:	2300      	movs	r3, #0
 80040f6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80040f8:	f107 0320 	add.w	r3, r7, #32
 80040fc:	4619      	mov	r1, r3
 80040fe:	4816      	ldr	r0, [pc, #88]	; (8004158 <MX_TIM4_Init+0xc0>)
 8004100:	f007 fdae 	bl	800bc60 <HAL_TIMEx_MasterConfigSynchronization>
 8004104:	4603      	mov	r3, r0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d001      	beq.n	800410e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800410a:	f000 fb5b 	bl	80047c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800410e:	2360      	movs	r3, #96	; 0x60
 8004110:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004112:	2300      	movs	r3, #0
 8004114:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004116:	2300      	movs	r3, #0
 8004118:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800411a:	2300      	movs	r3, #0
 800411c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800411e:	1d3b      	adds	r3, r7, #4
 8004120:	2208      	movs	r2, #8
 8004122:	4619      	mov	r1, r3
 8004124:	480c      	ldr	r0, [pc, #48]	; (8004158 <MX_TIM4_Init+0xc0>)
 8004126:	f007 fa37 	bl	800b598 <HAL_TIM_PWM_ConfigChannel>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d001      	beq.n	8004134 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8004130:	f000 fb48 	bl	80047c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004134:	1d3b      	adds	r3, r7, #4
 8004136:	220c      	movs	r2, #12
 8004138:	4619      	mov	r1, r3
 800413a:	4807      	ldr	r0, [pc, #28]	; (8004158 <MX_TIM4_Init+0xc0>)
 800413c:	f007 fa2c 	bl	800b598 <HAL_TIM_PWM_ConfigChannel>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d001      	beq.n	800414a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8004146:	f000 fb3d 	bl	80047c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800414a:	4803      	ldr	r0, [pc, #12]	; (8004158 <MX_TIM4_Init+0xc0>)
 800414c:	f000 ff22 	bl	8004f94 <HAL_TIM_MspPostInit>

}
 8004150:	bf00      	nop
 8004152:	3728      	adds	r7, #40	; 0x28
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}
 8004158:	20021908 	.word	0x20021908
 800415c:	40000800 	.word	0x40000800

08004160 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b082      	sub	sp, #8
 8004164:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004166:	463b      	mov	r3, r7
 8004168:	2200      	movs	r2, #0
 800416a:	601a      	str	r2, [r3, #0]
 800416c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800416e:	4b15      	ldr	r3, [pc, #84]	; (80041c4 <MX_TIM6_Init+0x64>)
 8004170:	4a15      	ldr	r2, [pc, #84]	; (80041c8 <MX_TIM6_Init+0x68>)
 8004172:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 8004174:	4b13      	ldr	r3, [pc, #76]	; (80041c4 <MX_TIM6_Init+0x64>)
 8004176:	2259      	movs	r2, #89	; 0x59
 8004178:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800417a:	4b12      	ldr	r3, [pc, #72]	; (80041c4 <MX_TIM6_Init+0x64>)
 800417c:	2200      	movs	r2, #0
 800417e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8004180:	4b10      	ldr	r3, [pc, #64]	; (80041c4 <MX_TIM6_Init+0x64>)
 8004182:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004186:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004188:	4b0e      	ldr	r3, [pc, #56]	; (80041c4 <MX_TIM6_Init+0x64>)
 800418a:	2280      	movs	r2, #128	; 0x80
 800418c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800418e:	480d      	ldr	r0, [pc, #52]	; (80041c4 <MX_TIM6_Init+0x64>)
 8004190:	f006 ff78 	bl	800b084 <HAL_TIM_Base_Init>
 8004194:	4603      	mov	r3, r0
 8004196:	2b00      	cmp	r3, #0
 8004198:	d001      	beq.n	800419e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800419a:	f000 fb13 	bl	80047c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800419e:	2300      	movs	r3, #0
 80041a0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80041a2:	2300      	movs	r3, #0
 80041a4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80041a6:	463b      	mov	r3, r7
 80041a8:	4619      	mov	r1, r3
 80041aa:	4806      	ldr	r0, [pc, #24]	; (80041c4 <MX_TIM6_Init+0x64>)
 80041ac:	f007 fd58 	bl	800bc60 <HAL_TIMEx_MasterConfigSynchronization>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d001      	beq.n	80041ba <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80041b6:	f000 fb05 	bl	80047c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80041ba:	bf00      	nop
 80041bc:	3708      	adds	r7, #8
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	20021ba4 	.word	0x20021ba4
 80041c8:	40001000 	.word	0x40001000

080041cc <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b082      	sub	sp, #8
 80041d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80041d2:	463b      	mov	r3, r7
 80041d4:	2200      	movs	r2, #0
 80041d6:	601a      	str	r2, [r3, #0]
 80041d8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80041da:	4b14      	ldr	r3, [pc, #80]	; (800422c <MX_TIM7_Init+0x60>)
 80041dc:	4a14      	ldr	r2, [pc, #80]	; (8004230 <MX_TIM7_Init+0x64>)
 80041de:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 179;
 80041e0:	4b12      	ldr	r3, [pc, #72]	; (800422c <MX_TIM7_Init+0x60>)
 80041e2:	22b3      	movs	r2, #179	; 0xb3
 80041e4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041e6:	4b11      	ldr	r3, [pc, #68]	; (800422c <MX_TIM7_Init+0x60>)
 80041e8:	2200      	movs	r2, #0
 80041ea:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49;
 80041ec:	4b0f      	ldr	r3, [pc, #60]	; (800422c <MX_TIM7_Init+0x60>)
 80041ee:	2231      	movs	r2, #49	; 0x31
 80041f0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80041f2:	4b0e      	ldr	r3, [pc, #56]	; (800422c <MX_TIM7_Init+0x60>)
 80041f4:	2280      	movs	r2, #128	; 0x80
 80041f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80041f8:	480c      	ldr	r0, [pc, #48]	; (800422c <MX_TIM7_Init+0x60>)
 80041fa:	f006 ff43 	bl	800b084 <HAL_TIM_Base_Init>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b00      	cmp	r3, #0
 8004202:	d001      	beq.n	8004208 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8004204:	f000 fade 	bl	80047c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004208:	2300      	movs	r3, #0
 800420a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800420c:	2300      	movs	r3, #0
 800420e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004210:	463b      	mov	r3, r7
 8004212:	4619      	mov	r1, r3
 8004214:	4805      	ldr	r0, [pc, #20]	; (800422c <MX_TIM7_Init+0x60>)
 8004216:	f007 fd23 	bl	800bc60 <HAL_TIMEx_MasterConfigSynchronization>
 800421a:	4603      	mov	r3, r0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d001      	beq.n	8004224 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8004220:	f000 fad0 	bl	80047c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004224:	bf00      	nop
 8004226:	3708      	adds	r7, #8
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}
 800422c:	20021d48 	.word	0x20021d48
 8004230:	40001400 	.word	0x40001400

08004234 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b08c      	sub	sp, #48	; 0x30
 8004238:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800423a:	f107 030c 	add.w	r3, r7, #12
 800423e:	2224      	movs	r2, #36	; 0x24
 8004240:	2100      	movs	r1, #0
 8004242:	4618      	mov	r0, r3
 8004244:	f00e f8ec 	bl	8012420 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004248:	1d3b      	adds	r3, r7, #4
 800424a:	2200      	movs	r2, #0
 800424c:	601a      	str	r2, [r3, #0]
 800424e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8004250:	4b22      	ldr	r3, [pc, #136]	; (80042dc <MX_TIM8_Init+0xa8>)
 8004252:	4a23      	ldr	r2, [pc, #140]	; (80042e0 <MX_TIM8_Init+0xac>)
 8004254:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8004256:	4b21      	ldr	r3, [pc, #132]	; (80042dc <MX_TIM8_Init+0xa8>)
 8004258:	2200      	movs	r2, #0
 800425a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 800425c:	4b1f      	ldr	r3, [pc, #124]	; (80042dc <MX_TIM8_Init+0xa8>)
 800425e:	2210      	movs	r2, #16
 8004260:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8004262:	4b1e      	ldr	r3, [pc, #120]	; (80042dc <MX_TIM8_Init+0xa8>)
 8004264:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004268:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800426a:	4b1c      	ldr	r3, [pc, #112]	; (80042dc <MX_TIM8_Init+0xa8>)
 800426c:	2200      	movs	r2, #0
 800426e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8004270:	4b1a      	ldr	r3, [pc, #104]	; (80042dc <MX_TIM8_Init+0xa8>)
 8004272:	2200      	movs	r2, #0
 8004274:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004276:	4b19      	ldr	r3, [pc, #100]	; (80042dc <MX_TIM8_Init+0xa8>)
 8004278:	2200      	movs	r2, #0
 800427a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800427c:	2303      	movs	r3, #3
 800427e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004280:	2300      	movs	r3, #0
 8004282:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004284:	2301      	movs	r3, #1
 8004286:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004288:	2300      	movs	r3, #0
 800428a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800428c:	2300      	movs	r3, #0
 800428e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004290:	2300      	movs	r3, #0
 8004292:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004294:	2301      	movs	r3, #1
 8004296:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004298:	2300      	movs	r3, #0
 800429a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800429c:	2300      	movs	r3, #0
 800429e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80042a0:	f107 030c 	add.w	r3, r7, #12
 80042a4:	4619      	mov	r1, r3
 80042a6:	480d      	ldr	r0, [pc, #52]	; (80042dc <MX_TIM8_Init+0xa8>)
 80042a8:	f006 ffa4 	bl	800b1f4 <HAL_TIM_Encoder_Init>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d001      	beq.n	80042b6 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 80042b2:	f000 fa87 	bl	80047c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80042b6:	2300      	movs	r3, #0
 80042b8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80042ba:	2300      	movs	r3, #0
 80042bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80042be:	1d3b      	adds	r3, r7, #4
 80042c0:	4619      	mov	r1, r3
 80042c2:	4806      	ldr	r0, [pc, #24]	; (80042dc <MX_TIM8_Init+0xa8>)
 80042c4:	f007 fccc 	bl	800bc60 <HAL_TIMEx_MasterConfigSynchronization>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d001      	beq.n	80042d2 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 80042ce:	f000 fa79 	bl	80047c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80042d2:	bf00      	nop
 80042d4:	3730      	adds	r7, #48	; 0x30
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	200218c8 	.word	0x200218c8
 80042e0:	40010400 	.word	0x40010400

080042e4 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b088      	sub	sp, #32
 80042e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80042ea:	1d3b      	adds	r3, r7, #4
 80042ec:	2200      	movs	r2, #0
 80042ee:	601a      	str	r2, [r3, #0]
 80042f0:	605a      	str	r2, [r3, #4]
 80042f2:	609a      	str	r2, [r3, #8]
 80042f4:	60da      	str	r2, [r3, #12]
 80042f6:	611a      	str	r2, [r3, #16]
 80042f8:	615a      	str	r2, [r3, #20]
 80042fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80042fc:	4b1e      	ldr	r3, [pc, #120]	; (8004378 <MX_TIM10_Init+0x94>)
 80042fe:	4a1f      	ldr	r2, [pc, #124]	; (800437c <MX_TIM10_Init+0x98>)
 8004300:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8004302:	4b1d      	ldr	r3, [pc, #116]	; (8004378 <MX_TIM10_Init+0x94>)
 8004304:	2200      	movs	r2, #0
 8004306:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004308:	4b1b      	ldr	r3, [pc, #108]	; (8004378 <MX_TIM10_Init+0x94>)
 800430a:	2200      	movs	r2, #0
 800430c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 800430e:	4b1a      	ldr	r3, [pc, #104]	; (8004378 <MX_TIM10_Init+0x94>)
 8004310:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004314:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004316:	4b18      	ldr	r3, [pc, #96]	; (8004378 <MX_TIM10_Init+0x94>)
 8004318:	2200      	movs	r2, #0
 800431a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800431c:	4b16      	ldr	r3, [pc, #88]	; (8004378 <MX_TIM10_Init+0x94>)
 800431e:	2200      	movs	r2, #0
 8004320:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8004322:	4815      	ldr	r0, [pc, #84]	; (8004378 <MX_TIM10_Init+0x94>)
 8004324:	f006 feae 	bl	800b084 <HAL_TIM_Base_Init>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d001      	beq.n	8004332 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 800432e:	f000 fa49 	bl	80047c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8004332:	4811      	ldr	r0, [pc, #68]	; (8004378 <MX_TIM10_Init+0x94>)
 8004334:	f006 fef5 	bl	800b122 <HAL_TIM_PWM_Init>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d001      	beq.n	8004342 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 800433e:	f000 fa41 	bl	80047c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004342:	2360      	movs	r3, #96	; 0x60
 8004344:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004346:	2300      	movs	r3, #0
 8004348:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800434a:	2300      	movs	r3, #0
 800434c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800434e:	2300      	movs	r3, #0
 8004350:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004352:	1d3b      	adds	r3, r7, #4
 8004354:	2200      	movs	r2, #0
 8004356:	4619      	mov	r1, r3
 8004358:	4807      	ldr	r0, [pc, #28]	; (8004378 <MX_TIM10_Init+0x94>)
 800435a:	f007 f91d 	bl	800b598 <HAL_TIM_PWM_ConfigChannel>
 800435e:	4603      	mov	r3, r0
 8004360:	2b00      	cmp	r3, #0
 8004362:	d001      	beq.n	8004368 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8004364:	f000 fa2e 	bl	80047c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8004368:	4803      	ldr	r0, [pc, #12]	; (8004378 <MX_TIM10_Init+0x94>)
 800436a:	f000 fe13 	bl	8004f94 <HAL_TIM_MspPostInit>

}
 800436e:	bf00      	nop
 8004370:	3720      	adds	r7, #32
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	200219e4 	.word	0x200219e4
 800437c:	40014400 	.word	0x40014400

08004380 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b088      	sub	sp, #32
 8004384:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8004386:	1d3b      	adds	r3, r7, #4
 8004388:	2200      	movs	r2, #0
 800438a:	601a      	str	r2, [r3, #0]
 800438c:	605a      	str	r2, [r3, #4]
 800438e:	609a      	str	r2, [r3, #8]
 8004390:	60da      	str	r2, [r3, #12]
 8004392:	611a      	str	r2, [r3, #16]
 8004394:	615a      	str	r2, [r3, #20]
 8004396:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8004398:	4b1e      	ldr	r3, [pc, #120]	; (8004414 <MX_TIM11_Init+0x94>)
 800439a:	4a1f      	ldr	r2, [pc, #124]	; (8004418 <MX_TIM11_Init+0x98>)
 800439c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 800439e:	4b1d      	ldr	r3, [pc, #116]	; (8004414 <MX_TIM11_Init+0x94>)
 80043a0:	2200      	movs	r2, #0
 80043a2:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80043a4:	4b1b      	ldr	r3, [pc, #108]	; (8004414 <MX_TIM11_Init+0x94>)
 80043a6:	2200      	movs	r2, #0
 80043a8:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80043aa:	4b1a      	ldr	r3, [pc, #104]	; (8004414 <MX_TIM11_Init+0x94>)
 80043ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80043b0:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80043b2:	4b18      	ldr	r3, [pc, #96]	; (8004414 <MX_TIM11_Init+0x94>)
 80043b4:	2200      	movs	r2, #0
 80043b6:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80043b8:	4b16      	ldr	r3, [pc, #88]	; (8004414 <MX_TIM11_Init+0x94>)
 80043ba:	2200      	movs	r2, #0
 80043bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80043be:	4815      	ldr	r0, [pc, #84]	; (8004414 <MX_TIM11_Init+0x94>)
 80043c0:	f006 fe60 	bl	800b084 <HAL_TIM_Base_Init>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d001      	beq.n	80043ce <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 80043ca:	f000 f9fb 	bl	80047c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 80043ce:	4811      	ldr	r0, [pc, #68]	; (8004414 <MX_TIM11_Init+0x94>)
 80043d0:	f006 fea7 	bl	800b122 <HAL_TIM_PWM_Init>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d001      	beq.n	80043de <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 80043da:	f000 f9f3 	bl	80047c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80043de:	2360      	movs	r3, #96	; 0x60
 80043e0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80043e2:	2300      	movs	r3, #0
 80043e4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80043e6:	2300      	movs	r3, #0
 80043e8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80043ea:	2300      	movs	r3, #0
 80043ec:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80043ee:	1d3b      	adds	r3, r7, #4
 80043f0:	2200      	movs	r2, #0
 80043f2:	4619      	mov	r1, r3
 80043f4:	4807      	ldr	r0, [pc, #28]	; (8004414 <MX_TIM11_Init+0x94>)
 80043f6:	f007 f8cf 	bl	800b598 <HAL_TIM_PWM_ConfigChannel>
 80043fa:	4603      	mov	r3, r0
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d001      	beq.n	8004404 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8004400:	f000 f9e0 	bl	80047c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8004404:	4803      	ldr	r0, [pc, #12]	; (8004414 <MX_TIM11_Init+0x94>)
 8004406:	f000 fdc5 	bl	8004f94 <HAL_TIM_MspPostInit>

}
 800440a:	bf00      	nop
 800440c:	3720      	adds	r7, #32
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	20021b04 	.word	0x20021b04
 8004418:	40014800 	.word	0x40014800

0800441c <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8004420:	4b0e      	ldr	r3, [pc, #56]	; (800445c <MX_TIM13_Init+0x40>)
 8004422:	4a0f      	ldr	r2, [pc, #60]	; (8004460 <MX_TIM13_Init+0x44>)
 8004424:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 89;
 8004426:	4b0d      	ldr	r3, [pc, #52]	; (800445c <MX_TIM13_Init+0x40>)
 8004428:	2259      	movs	r2, #89	; 0x59
 800442a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800442c:	4b0b      	ldr	r3, [pc, #44]	; (800445c <MX_TIM13_Init+0x40>)
 800442e:	2200      	movs	r2, #0
 8004430:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 8004432:	4b0a      	ldr	r3, [pc, #40]	; (800445c <MX_TIM13_Init+0x40>)
 8004434:	f242 720f 	movw	r2, #9999	; 0x270f
 8004438:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800443a:	4b08      	ldr	r3, [pc, #32]	; (800445c <MX_TIM13_Init+0x40>)
 800443c:	2200      	movs	r2, #0
 800443e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004440:	4b06      	ldr	r3, [pc, #24]	; (800445c <MX_TIM13_Init+0x40>)
 8004442:	2280      	movs	r2, #128	; 0x80
 8004444:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8004446:	4805      	ldr	r0, [pc, #20]	; (800445c <MX_TIM13_Init+0x40>)
 8004448:	f006 fe1c 	bl	800b084 <HAL_TIM_Base_Init>
 800444c:	4603      	mov	r3, r0
 800444e:	2b00      	cmp	r3, #0
 8004450:	d001      	beq.n	8004456 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8004452:	f000 f9b7 	bl	80047c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8004456:	bf00      	nop
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	20021ac4 	.word	0x20021ac4
 8004460:	40001c00 	.word	0x40001c00

08004464 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004468:	4b11      	ldr	r3, [pc, #68]	; (80044b0 <MX_USART2_UART_Init+0x4c>)
 800446a:	4a12      	ldr	r2, [pc, #72]	; (80044b4 <MX_USART2_UART_Init+0x50>)
 800446c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800446e:	4b10      	ldr	r3, [pc, #64]	; (80044b0 <MX_USART2_UART_Init+0x4c>)
 8004470:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004474:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004476:	4b0e      	ldr	r3, [pc, #56]	; (80044b0 <MX_USART2_UART_Init+0x4c>)
 8004478:	2200      	movs	r2, #0
 800447a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800447c:	4b0c      	ldr	r3, [pc, #48]	; (80044b0 <MX_USART2_UART_Init+0x4c>)
 800447e:	2200      	movs	r2, #0
 8004480:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004482:	4b0b      	ldr	r3, [pc, #44]	; (80044b0 <MX_USART2_UART_Init+0x4c>)
 8004484:	2200      	movs	r2, #0
 8004486:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004488:	4b09      	ldr	r3, [pc, #36]	; (80044b0 <MX_USART2_UART_Init+0x4c>)
 800448a:	220c      	movs	r2, #12
 800448c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800448e:	4b08      	ldr	r3, [pc, #32]	; (80044b0 <MX_USART2_UART_Init+0x4c>)
 8004490:	2200      	movs	r2, #0
 8004492:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004494:	4b06      	ldr	r3, [pc, #24]	; (80044b0 <MX_USART2_UART_Init+0x4c>)
 8004496:	2200      	movs	r2, #0
 8004498:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800449a:	4805      	ldr	r0, [pc, #20]	; (80044b0 <MX_USART2_UART_Init+0x4c>)
 800449c:	f007 fcc2 	bl	800be24 <HAL_UART_Init>
 80044a0:	4603      	mov	r3, r0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d001      	beq.n	80044aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80044a6:	f000 f98d 	bl	80047c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80044aa:	bf00      	nop
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	20021ca8 	.word	0x20021ca8
 80044b4:	40004400 	.word	0x40004400

080044b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b082      	sub	sp, #8
 80044bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80044be:	2300      	movs	r3, #0
 80044c0:	607b      	str	r3, [r7, #4]
 80044c2:	4b14      	ldr	r3, [pc, #80]	; (8004514 <MX_DMA_Init+0x5c>)
 80044c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c6:	4a13      	ldr	r2, [pc, #76]	; (8004514 <MX_DMA_Init+0x5c>)
 80044c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80044cc:	6313      	str	r3, [r2, #48]	; 0x30
 80044ce:	4b11      	ldr	r3, [pc, #68]	; (8004514 <MX_DMA_Init+0x5c>)
 80044d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044d6:	607b      	str	r3, [r7, #4]
 80044d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80044da:	2200      	movs	r2, #0
 80044dc:	2100      	movs	r1, #0
 80044de:	203a      	movs	r0, #58	; 0x3a
 80044e0:	f002 f983 	bl	80067ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80044e4:	203a      	movs	r0, #58	; 0x3a
 80044e6:	f002 f99c 	bl	8006822 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80044ea:	2200      	movs	r2, #0
 80044ec:	2100      	movs	r1, #0
 80044ee:	203b      	movs	r0, #59	; 0x3b
 80044f0:	f002 f97b 	bl	80067ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80044f4:	203b      	movs	r0, #59	; 0x3b
 80044f6:	f002 f994 	bl	8006822 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80044fa:	2200      	movs	r2, #0
 80044fc:	2100      	movs	r1, #0
 80044fe:	2045      	movs	r0, #69	; 0x45
 8004500:	f002 f973 	bl	80067ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8004504:	2045      	movs	r0, #69	; 0x45
 8004506:	f002 f98c 	bl	8006822 <HAL_NVIC_EnableIRQ>

}
 800450a:	bf00      	nop
 800450c:	3708      	adds	r7, #8
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	40023800 	.word	0x40023800

08004518 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b08c      	sub	sp, #48	; 0x30
 800451c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800451e:	f107 031c 	add.w	r3, r7, #28
 8004522:	2200      	movs	r2, #0
 8004524:	601a      	str	r2, [r3, #0]
 8004526:	605a      	str	r2, [r3, #4]
 8004528:	609a      	str	r2, [r3, #8]
 800452a:	60da      	str	r2, [r3, #12]
 800452c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800452e:	2300      	movs	r3, #0
 8004530:	61bb      	str	r3, [r7, #24]
 8004532:	4b9c      	ldr	r3, [pc, #624]	; (80047a4 <MX_GPIO_Init+0x28c>)
 8004534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004536:	4a9b      	ldr	r2, [pc, #620]	; (80047a4 <MX_GPIO_Init+0x28c>)
 8004538:	f043 0310 	orr.w	r3, r3, #16
 800453c:	6313      	str	r3, [r2, #48]	; 0x30
 800453e:	4b99      	ldr	r3, [pc, #612]	; (80047a4 <MX_GPIO_Init+0x28c>)
 8004540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004542:	f003 0310 	and.w	r3, r3, #16
 8004546:	61bb      	str	r3, [r7, #24]
 8004548:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800454a:	2300      	movs	r3, #0
 800454c:	617b      	str	r3, [r7, #20]
 800454e:	4b95      	ldr	r3, [pc, #596]	; (80047a4 <MX_GPIO_Init+0x28c>)
 8004550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004552:	4a94      	ldr	r2, [pc, #592]	; (80047a4 <MX_GPIO_Init+0x28c>)
 8004554:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004558:	6313      	str	r3, [r2, #48]	; 0x30
 800455a:	4b92      	ldr	r3, [pc, #584]	; (80047a4 <MX_GPIO_Init+0x28c>)
 800455c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800455e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004562:	617b      	str	r3, [r7, #20]
 8004564:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004566:	2300      	movs	r3, #0
 8004568:	613b      	str	r3, [r7, #16]
 800456a:	4b8e      	ldr	r3, [pc, #568]	; (80047a4 <MX_GPIO_Init+0x28c>)
 800456c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800456e:	4a8d      	ldr	r2, [pc, #564]	; (80047a4 <MX_GPIO_Init+0x28c>)
 8004570:	f043 0304 	orr.w	r3, r3, #4
 8004574:	6313      	str	r3, [r2, #48]	; 0x30
 8004576:	4b8b      	ldr	r3, [pc, #556]	; (80047a4 <MX_GPIO_Init+0x28c>)
 8004578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800457a:	f003 0304 	and.w	r3, r3, #4
 800457e:	613b      	str	r3, [r7, #16]
 8004580:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004582:	2300      	movs	r3, #0
 8004584:	60fb      	str	r3, [r7, #12]
 8004586:	4b87      	ldr	r3, [pc, #540]	; (80047a4 <MX_GPIO_Init+0x28c>)
 8004588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800458a:	4a86      	ldr	r2, [pc, #536]	; (80047a4 <MX_GPIO_Init+0x28c>)
 800458c:	f043 0301 	orr.w	r3, r3, #1
 8004590:	6313      	str	r3, [r2, #48]	; 0x30
 8004592:	4b84      	ldr	r3, [pc, #528]	; (80047a4 <MX_GPIO_Init+0x28c>)
 8004594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004596:	f003 0301 	and.w	r3, r3, #1
 800459a:	60fb      	str	r3, [r7, #12]
 800459c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800459e:	2300      	movs	r3, #0
 80045a0:	60bb      	str	r3, [r7, #8]
 80045a2:	4b80      	ldr	r3, [pc, #512]	; (80047a4 <MX_GPIO_Init+0x28c>)
 80045a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a6:	4a7f      	ldr	r2, [pc, #508]	; (80047a4 <MX_GPIO_Init+0x28c>)
 80045a8:	f043 0302 	orr.w	r3, r3, #2
 80045ac:	6313      	str	r3, [r2, #48]	; 0x30
 80045ae:	4b7d      	ldr	r3, [pc, #500]	; (80047a4 <MX_GPIO_Init+0x28c>)
 80045b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b2:	f003 0302 	and.w	r3, r3, #2
 80045b6:	60bb      	str	r3, [r7, #8]
 80045b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80045ba:	2300      	movs	r3, #0
 80045bc:	607b      	str	r3, [r7, #4]
 80045be:	4b79      	ldr	r3, [pc, #484]	; (80047a4 <MX_GPIO_Init+0x28c>)
 80045c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c2:	4a78      	ldr	r2, [pc, #480]	; (80047a4 <MX_GPIO_Init+0x28c>)
 80045c4:	f043 0308 	orr.w	r3, r3, #8
 80045c8:	6313      	str	r3, [r2, #48]	; 0x30
 80045ca:	4b76      	ldr	r3, [pc, #472]	; (80047a4 <MX_GPIO_Init+0x28c>)
 80045cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ce:	f003 0308 	and.w	r3, r3, #8
 80045d2:	607b      	str	r3, [r7, #4]
 80045d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 80045d6:	2200      	movs	r2, #0
 80045d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80045dc:	4872      	ldr	r0, [pc, #456]	; (80047a8 <MX_GPIO_Init+0x290>)
 80045de:	f002 fe99 	bl	8007314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80045e2:	2200      	movs	r2, #0
 80045e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80045e8:	4870      	ldr	r0, [pc, #448]	; (80047ac <MX_GPIO_Init+0x294>)
 80045ea:	f002 fe93 	bl	8007314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 80045ee:	2200      	movs	r2, #0
 80045f0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80045f4:	486e      	ldr	r0, [pc, #440]	; (80047b0 <MX_GPIO_Init+0x298>)
 80045f6:	f002 fe8d 	bl	8007314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80045fa:	2200      	movs	r2, #0
 80045fc:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8004600:	486c      	ldr	r0, [pc, #432]	; (80047b4 <MX_GPIO_Init+0x29c>)
 8004602:	f002 fe87 	bl	8007314 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004606:	2304      	movs	r3, #4
 8004608:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800460a:	4b6b      	ldr	r3, [pc, #428]	; (80047b8 <MX_GPIO_Init+0x2a0>)
 800460c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800460e:	2300      	movs	r3, #0
 8004610:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004612:	f107 031c 	add.w	r3, r7, #28
 8004616:	4619      	mov	r1, r3
 8004618:	4863      	ldr	r0, [pc, #396]	; (80047a8 <MX_GPIO_Init+0x290>)
 800461a:	f002 fcb9 	bl	8006f90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800461e:	230f      	movs	r3, #15
 8004620:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004622:	2303      	movs	r3, #3
 8004624:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004626:	2300      	movs	r3, #0
 8004628:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800462a:	f107 031c 	add.w	r3, r7, #28
 800462e:	4619      	mov	r1, r3
 8004630:	4862      	ldr	r0, [pc, #392]	; (80047bc <MX_GPIO_Init+0x2a4>)
 8004632:	f002 fcad 	bl	8006f90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004636:	23e1      	movs	r3, #225	; 0xe1
 8004638:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800463a:	2303      	movs	r3, #3
 800463c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800463e:	2300      	movs	r3, #0
 8004640:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004642:	f107 031c 	add.w	r3, r7, #28
 8004646:	4619      	mov	r1, r3
 8004648:	485a      	ldr	r0, [pc, #360]	; (80047b4 <MX_GPIO_Init+0x29c>)
 800464a:	f002 fca1 	bl	8006f90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800464e:	2303      	movs	r3, #3
 8004650:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004652:	2303      	movs	r3, #3
 8004654:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004656:	2300      	movs	r3, #0
 8004658:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800465a:	f107 031c 	add.w	r3, r7, #28
 800465e:	4619      	mov	r1, r3
 8004660:	4852      	ldr	r0, [pc, #328]	; (80047ac <MX_GPIO_Init+0x294>)
 8004662:	f002 fc95 	bl	8006f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004666:	2304      	movs	r3, #4
 8004668:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800466a:	2300      	movs	r3, #0
 800466c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800466e:	2301      	movs	r3, #1
 8004670:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004672:	f107 031c 	add.w	r3, r7, #28
 8004676:	4619      	mov	r1, r3
 8004678:	484c      	ldr	r0, [pc, #304]	; (80047ac <MX_GPIO_Init+0x294>)
 800467a:	f002 fc89 	bl	8006f90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 800467e:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 8004682:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004684:	2300      	movs	r3, #0
 8004686:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004688:	2301      	movs	r3, #1
 800468a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800468c:	f107 031c 	add.w	r3, r7, #28
 8004690:	4619      	mov	r1, r3
 8004692:	4845      	ldr	r0, [pc, #276]	; (80047a8 <MX_GPIO_Init+0x290>)
 8004694:	f002 fc7c 	bl	8006f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8004698:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800469c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800469e:	2301      	movs	r3, #1
 80046a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046a2:	2300      	movs	r3, #0
 80046a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046a6:	2300      	movs	r3, #0
 80046a8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80046aa:	f107 031c 	add.w	r3, r7, #28
 80046ae:	4619      	mov	r1, r3
 80046b0:	483d      	ldr	r0, [pc, #244]	; (80047a8 <MX_GPIO_Init+0x290>)
 80046b2:	f002 fc6d 	bl	8006f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80046b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80046ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80046bc:	2301      	movs	r3, #1
 80046be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046c0:	2300      	movs	r3, #0
 80046c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046c4:	2300      	movs	r3, #0
 80046c6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046c8:	f107 031c 	add.w	r3, r7, #28
 80046cc:	4619      	mov	r1, r3
 80046ce:	4837      	ldr	r0, [pc, #220]	; (80047ac <MX_GPIO_Init+0x294>)
 80046d0:	f002 fc5e 	bl	8006f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80046d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80046d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80046da:	4b39      	ldr	r3, [pc, #228]	; (80047c0 <MX_GPIO_Init+0x2a8>)
 80046dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046de:	2300      	movs	r3, #0
 80046e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80046e2:	f107 031c 	add.w	r3, r7, #28
 80046e6:	4619      	mov	r1, r3
 80046e8:	4831      	ldr	r0, [pc, #196]	; (80047b0 <MX_GPIO_Init+0x298>)
 80046ea:	f002 fc51 	bl	8006f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80046ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80046f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80046f4:	2301      	movs	r3, #1
 80046f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046f8:	2300      	movs	r3, #0
 80046fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046fc:	2300      	movs	r3, #0
 80046fe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004700:	f107 031c 	add.w	r3, r7, #28
 8004704:	4619      	mov	r1, r3
 8004706:	482a      	ldr	r0, [pc, #168]	; (80047b0 <MX_GPIO_Init+0x298>)
 8004708:	f002 fc42 	bl	8006f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800470c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004710:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004712:	2301      	movs	r3, #1
 8004714:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004716:	2301      	movs	r3, #1
 8004718:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800471a:	2300      	movs	r3, #0
 800471c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800471e:	f107 031c 	add.w	r3, r7, #28
 8004722:	4619      	mov	r1, r3
 8004724:	4822      	ldr	r0, [pc, #136]	; (80047b0 <MX_GPIO_Init+0x298>)
 8004726:	f002 fc33 	bl	8006f90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800472a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800472e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004730:	2301      	movs	r3, #1
 8004732:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004734:	2300      	movs	r3, #0
 8004736:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004738:	2300      	movs	r3, #0
 800473a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800473c:	f107 031c 	add.w	r3, r7, #28
 8004740:	4619      	mov	r1, r3
 8004742:	481c      	ldr	r0, [pc, #112]	; (80047b4 <MX_GPIO_Init+0x29c>)
 8004744:	f002 fc24 	bl	8006f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004748:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800474c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800474e:	2300      	movs	r3, #0
 8004750:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004752:	2300      	movs	r3, #0
 8004754:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004756:	f107 031c 	add.w	r3, r7, #28
 800475a:	4619      	mov	r1, r3
 800475c:	4815      	ldr	r0, [pc, #84]	; (80047b4 <MX_GPIO_Init+0x29c>)
 800475e:	f002 fc17 	bl	8006f90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8004762:	239b      	movs	r3, #155	; 0x9b
 8004764:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004766:	2300      	movs	r3, #0
 8004768:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800476a:	2301      	movs	r3, #1
 800476c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800476e:	f107 031c 	add.w	r3, r7, #28
 8004772:	4619      	mov	r1, r3
 8004774:	480e      	ldr	r0, [pc, #56]	; (80047b0 <MX_GPIO_Init+0x298>)
 8004776:	f002 fc0b 	bl	8006f90 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800477a:	2200      	movs	r2, #0
 800477c:	2100      	movs	r1, #0
 800477e:	2008      	movs	r0, #8
 8004780:	f002 f833 	bl	80067ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8004784:	2008      	movs	r0, #8
 8004786:	f002 f84c 	bl	8006822 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800478a:	2200      	movs	r2, #0
 800478c:	2100      	movs	r1, #0
 800478e:	2017      	movs	r0, #23
 8004790:	f002 f82b 	bl	80067ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004794:	2017      	movs	r0, #23
 8004796:	f002 f844 	bl	8006822 <HAL_NVIC_EnableIRQ>

}
 800479a:	bf00      	nop
 800479c:	3730      	adds	r7, #48	; 0x30
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	40023800 	.word	0x40023800
 80047a8:	40021000 	.word	0x40021000
 80047ac:	40020400 	.word	0x40020400
 80047b0:	40020c00 	.word	0x40020c00
 80047b4:	40020000 	.word	0x40020000
 80047b8:	10310000 	.word	0x10310000
 80047bc:	40020800 	.word	0x40020800
 80047c0:	10110000 	.word	0x10110000

080047c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80047c4:	b480      	push	{r7}
 80047c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80047c8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80047ca:	e7fe      	b.n	80047ca <Error_Handler+0x6>

080047cc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047d2:	2300      	movs	r3, #0
 80047d4:	607b      	str	r3, [r7, #4]
 80047d6:	4b10      	ldr	r3, [pc, #64]	; (8004818 <HAL_MspInit+0x4c>)
 80047d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047da:	4a0f      	ldr	r2, [pc, #60]	; (8004818 <HAL_MspInit+0x4c>)
 80047dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047e0:	6453      	str	r3, [r2, #68]	; 0x44
 80047e2:	4b0d      	ldr	r3, [pc, #52]	; (8004818 <HAL_MspInit+0x4c>)
 80047e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047ea:	607b      	str	r3, [r7, #4]
 80047ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80047ee:	2300      	movs	r3, #0
 80047f0:	603b      	str	r3, [r7, #0]
 80047f2:	4b09      	ldr	r3, [pc, #36]	; (8004818 <HAL_MspInit+0x4c>)
 80047f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f6:	4a08      	ldr	r2, [pc, #32]	; (8004818 <HAL_MspInit+0x4c>)
 80047f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047fc:	6413      	str	r3, [r2, #64]	; 0x40
 80047fe:	4b06      	ldr	r3, [pc, #24]	; (8004818 <HAL_MspInit+0x4c>)
 8004800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004806:	603b      	str	r3, [r7, #0]
 8004808:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800480a:	bf00      	nop
 800480c:	370c      	adds	r7, #12
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop
 8004818:	40023800 	.word	0x40023800

0800481c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b08c      	sub	sp, #48	; 0x30
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004824:	f107 031c 	add.w	r3, r7, #28
 8004828:	2200      	movs	r2, #0
 800482a:	601a      	str	r2, [r3, #0]
 800482c:	605a      	str	r2, [r3, #4]
 800482e:	609a      	str	r2, [r3, #8]
 8004830:	60da      	str	r2, [r3, #12]
 8004832:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a4a      	ldr	r2, [pc, #296]	; (8004964 <HAL_ADC_MspInit+0x148>)
 800483a:	4293      	cmp	r3, r2
 800483c:	f040 808e 	bne.w	800495c <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8004840:	2300      	movs	r3, #0
 8004842:	61bb      	str	r3, [r7, #24]
 8004844:	4b48      	ldr	r3, [pc, #288]	; (8004968 <HAL_ADC_MspInit+0x14c>)
 8004846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004848:	4a47      	ldr	r2, [pc, #284]	; (8004968 <HAL_ADC_MspInit+0x14c>)
 800484a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800484e:	6453      	str	r3, [r2, #68]	; 0x44
 8004850:	4b45      	ldr	r3, [pc, #276]	; (8004968 <HAL_ADC_MspInit+0x14c>)
 8004852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004854:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004858:	61bb      	str	r3, [r7, #24]
 800485a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800485c:	2300      	movs	r3, #0
 800485e:	617b      	str	r3, [r7, #20]
 8004860:	4b41      	ldr	r3, [pc, #260]	; (8004968 <HAL_ADC_MspInit+0x14c>)
 8004862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004864:	4a40      	ldr	r2, [pc, #256]	; (8004968 <HAL_ADC_MspInit+0x14c>)
 8004866:	f043 0304 	orr.w	r3, r3, #4
 800486a:	6313      	str	r3, [r2, #48]	; 0x30
 800486c:	4b3e      	ldr	r3, [pc, #248]	; (8004968 <HAL_ADC_MspInit+0x14c>)
 800486e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004870:	f003 0304 	and.w	r3, r3, #4
 8004874:	617b      	str	r3, [r7, #20]
 8004876:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004878:	2300      	movs	r3, #0
 800487a:	613b      	str	r3, [r7, #16]
 800487c:	4b3a      	ldr	r3, [pc, #232]	; (8004968 <HAL_ADC_MspInit+0x14c>)
 800487e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004880:	4a39      	ldr	r2, [pc, #228]	; (8004968 <HAL_ADC_MspInit+0x14c>)
 8004882:	f043 0301 	orr.w	r3, r3, #1
 8004886:	6313      	str	r3, [r2, #48]	; 0x30
 8004888:	4b37      	ldr	r3, [pc, #220]	; (8004968 <HAL_ADC_MspInit+0x14c>)
 800488a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800488c:	f003 0301 	and.w	r3, r3, #1
 8004890:	613b      	str	r3, [r7, #16]
 8004892:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004894:	2300      	movs	r3, #0
 8004896:	60fb      	str	r3, [r7, #12]
 8004898:	4b33      	ldr	r3, [pc, #204]	; (8004968 <HAL_ADC_MspInit+0x14c>)
 800489a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800489c:	4a32      	ldr	r2, [pc, #200]	; (8004968 <HAL_ADC_MspInit+0x14c>)
 800489e:	f043 0302 	orr.w	r3, r3, #2
 80048a2:	6313      	str	r3, [r2, #48]	; 0x30
 80048a4:	4b30      	ldr	r3, [pc, #192]	; (8004968 <HAL_ADC_MspInit+0x14c>)
 80048a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a8:	f003 0302 	and.w	r3, r3, #2
 80048ac:	60fb      	str	r3, [r7, #12]
 80048ae:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC2_IN6
    PA7     ------> ADC2_IN7
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80048b0:	230f      	movs	r3, #15
 80048b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80048b4:	2303      	movs	r3, #3
 80048b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048b8:	2300      	movs	r3, #0
 80048ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80048bc:	f107 031c 	add.w	r3, r7, #28
 80048c0:	4619      	mov	r1, r3
 80048c2:	482a      	ldr	r0, [pc, #168]	; (800496c <HAL_ADC_MspInit+0x150>)
 80048c4:	f002 fb64 	bl	8006f90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80048c8:	23ff      	movs	r3, #255	; 0xff
 80048ca:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80048cc:	2303      	movs	r3, #3
 80048ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048d0:	2300      	movs	r3, #0
 80048d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048d4:	f107 031c 	add.w	r3, r7, #28
 80048d8:	4619      	mov	r1, r3
 80048da:	4825      	ldr	r0, [pc, #148]	; (8004970 <HAL_ADC_MspInit+0x154>)
 80048dc:	f002 fb58 	bl	8006f90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80048e0:	2303      	movs	r3, #3
 80048e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80048e4:	2303      	movs	r3, #3
 80048e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048e8:	2300      	movs	r3, #0
 80048ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048ec:	f107 031c 	add.w	r3, r7, #28
 80048f0:	4619      	mov	r1, r3
 80048f2:	4820      	ldr	r0, [pc, #128]	; (8004974 <HAL_ADC_MspInit+0x158>)
 80048f4:	f002 fb4c 	bl	8006f90 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 80048f8:	4b1f      	ldr	r3, [pc, #124]	; (8004978 <HAL_ADC_MspInit+0x15c>)
 80048fa:	4a20      	ldr	r2, [pc, #128]	; (800497c <HAL_ADC_MspInit+0x160>)
 80048fc:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 80048fe:	4b1e      	ldr	r3, [pc, #120]	; (8004978 <HAL_ADC_MspInit+0x15c>)
 8004900:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004904:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004906:	4b1c      	ldr	r3, [pc, #112]	; (8004978 <HAL_ADC_MspInit+0x15c>)
 8004908:	2200      	movs	r2, #0
 800490a:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800490c:	4b1a      	ldr	r3, [pc, #104]	; (8004978 <HAL_ADC_MspInit+0x15c>)
 800490e:	2200      	movs	r2, #0
 8004910:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8004912:	4b19      	ldr	r3, [pc, #100]	; (8004978 <HAL_ADC_MspInit+0x15c>)
 8004914:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004918:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800491a:	4b17      	ldr	r3, [pc, #92]	; (8004978 <HAL_ADC_MspInit+0x15c>)
 800491c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004920:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004922:	4b15      	ldr	r3, [pc, #84]	; (8004978 <HAL_ADC_MspInit+0x15c>)
 8004924:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004928:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800492a:	4b13      	ldr	r3, [pc, #76]	; (8004978 <HAL_ADC_MspInit+0x15c>)
 800492c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004930:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004932:	4b11      	ldr	r3, [pc, #68]	; (8004978 <HAL_ADC_MspInit+0x15c>)
 8004934:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004938:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800493a:	4b0f      	ldr	r3, [pc, #60]	; (8004978 <HAL_ADC_MspInit+0x15c>)
 800493c:	2200      	movs	r2, #0
 800493e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8004940:	480d      	ldr	r0, [pc, #52]	; (8004978 <HAL_ADC_MspInit+0x15c>)
 8004942:	f001 ff89 	bl	8006858 <HAL_DMA_Init>
 8004946:	4603      	mov	r3, r0
 8004948:	2b00      	cmp	r3, #0
 800494a:	d001      	beq.n	8004950 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 800494c:	f7ff ff3a 	bl	80047c4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	4a09      	ldr	r2, [pc, #36]	; (8004978 <HAL_ADC_MspInit+0x15c>)
 8004954:	639a      	str	r2, [r3, #56]	; 0x38
 8004956:	4a08      	ldr	r2, [pc, #32]	; (8004978 <HAL_ADC_MspInit+0x15c>)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800495c:	bf00      	nop
 800495e:	3730      	adds	r7, #48	; 0x30
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}
 8004964:	40012100 	.word	0x40012100
 8004968:	40023800 	.word	0x40023800
 800496c:	40020800 	.word	0x40020800
 8004970:	40020000 	.word	0x40020000
 8004974:	40020400 	.word	0x40020400
 8004978:	20021ce8 	.word	0x20021ce8
 800497c:	40026440 	.word	0x40026440

08004980 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b08c      	sub	sp, #48	; 0x30
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004988:	f107 031c 	add.w	r3, r7, #28
 800498c:	2200      	movs	r2, #0
 800498e:	601a      	str	r2, [r3, #0]
 8004990:	605a      	str	r2, [r3, #4]
 8004992:	609a      	str	r2, [r3, #8]
 8004994:	60da      	str	r2, [r3, #12]
 8004996:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a32      	ldr	r2, [pc, #200]	; (8004a68 <HAL_I2C_MspInit+0xe8>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d12c      	bne.n	80049fc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80049a2:	2300      	movs	r3, #0
 80049a4:	61bb      	str	r3, [r7, #24]
 80049a6:	4b31      	ldr	r3, [pc, #196]	; (8004a6c <HAL_I2C_MspInit+0xec>)
 80049a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049aa:	4a30      	ldr	r2, [pc, #192]	; (8004a6c <HAL_I2C_MspInit+0xec>)
 80049ac:	f043 0302 	orr.w	r3, r3, #2
 80049b0:	6313      	str	r3, [r2, #48]	; 0x30
 80049b2:	4b2e      	ldr	r3, [pc, #184]	; (8004a6c <HAL_I2C_MspInit+0xec>)
 80049b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b6:	f003 0302 	and.w	r3, r3, #2
 80049ba:	61bb      	str	r3, [r7, #24]
 80049bc:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80049be:	23c0      	movs	r3, #192	; 0xc0
 80049c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80049c2:	2312      	movs	r3, #18
 80049c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80049c6:	2301      	movs	r3, #1
 80049c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049ca:	2303      	movs	r3, #3
 80049cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80049ce:	2304      	movs	r3, #4
 80049d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049d2:	f107 031c 	add.w	r3, r7, #28
 80049d6:	4619      	mov	r1, r3
 80049d8:	4825      	ldr	r0, [pc, #148]	; (8004a70 <HAL_I2C_MspInit+0xf0>)
 80049da:	f002 fad9 	bl	8006f90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80049de:	2300      	movs	r3, #0
 80049e0:	617b      	str	r3, [r7, #20]
 80049e2:	4b22      	ldr	r3, [pc, #136]	; (8004a6c <HAL_I2C_MspInit+0xec>)
 80049e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e6:	4a21      	ldr	r2, [pc, #132]	; (8004a6c <HAL_I2C_MspInit+0xec>)
 80049e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80049ec:	6413      	str	r3, [r2, #64]	; 0x40
 80049ee:	4b1f      	ldr	r3, [pc, #124]	; (8004a6c <HAL_I2C_MspInit+0xec>)
 80049f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049f6:	617b      	str	r3, [r7, #20]
 80049f8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80049fa:	e031      	b.n	8004a60 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a1c      	ldr	r2, [pc, #112]	; (8004a74 <HAL_I2C_MspInit+0xf4>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d12c      	bne.n	8004a60 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a06:	2300      	movs	r3, #0
 8004a08:	613b      	str	r3, [r7, #16]
 8004a0a:	4b18      	ldr	r3, [pc, #96]	; (8004a6c <HAL_I2C_MspInit+0xec>)
 8004a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a0e:	4a17      	ldr	r2, [pc, #92]	; (8004a6c <HAL_I2C_MspInit+0xec>)
 8004a10:	f043 0302 	orr.w	r3, r3, #2
 8004a14:	6313      	str	r3, [r2, #48]	; 0x30
 8004a16:	4b15      	ldr	r3, [pc, #84]	; (8004a6c <HAL_I2C_MspInit+0xec>)
 8004a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a1a:	f003 0302 	and.w	r3, r3, #2
 8004a1e:	613b      	str	r3, [r7, #16]
 8004a20:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004a22:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004a26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004a28:	2312      	movs	r3, #18
 8004a2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a30:	2303      	movs	r3, #3
 8004a32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004a34:	2304      	movs	r3, #4
 8004a36:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a38:	f107 031c 	add.w	r3, r7, #28
 8004a3c:	4619      	mov	r1, r3
 8004a3e:	480c      	ldr	r0, [pc, #48]	; (8004a70 <HAL_I2C_MspInit+0xf0>)
 8004a40:	f002 faa6 	bl	8006f90 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004a44:	2300      	movs	r3, #0
 8004a46:	60fb      	str	r3, [r7, #12]
 8004a48:	4b08      	ldr	r3, [pc, #32]	; (8004a6c <HAL_I2C_MspInit+0xec>)
 8004a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4c:	4a07      	ldr	r2, [pc, #28]	; (8004a6c <HAL_I2C_MspInit+0xec>)
 8004a4e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004a52:	6413      	str	r3, [r2, #64]	; 0x40
 8004a54:	4b05      	ldr	r3, [pc, #20]	; (8004a6c <HAL_I2C_MspInit+0xec>)
 8004a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a5c:	60fb      	str	r3, [r7, #12]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
}
 8004a60:	bf00      	nop
 8004a62:	3730      	adds	r7, #48	; 0x30
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	40005400 	.word	0x40005400
 8004a6c:	40023800 	.word	0x40023800
 8004a70:	40020400 	.word	0x40020400
 8004a74:	40005800 	.word	0x40005800

08004a78 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b08a      	sub	sp, #40	; 0x28
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a80:	f107 0314 	add.w	r3, r7, #20
 8004a84:	2200      	movs	r2, #0
 8004a86:	601a      	str	r2, [r3, #0]
 8004a88:	605a      	str	r2, [r3, #4]
 8004a8a:	609a      	str	r2, [r3, #8]
 8004a8c:	60da      	str	r2, [r3, #12]
 8004a8e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a69      	ldr	r2, [pc, #420]	; (8004c3c <HAL_SD_MspInit+0x1c4>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	f040 80cb 	bne.w	8004c32 <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	613b      	str	r3, [r7, #16]
 8004aa0:	4b67      	ldr	r3, [pc, #412]	; (8004c40 <HAL_SD_MspInit+0x1c8>)
 8004aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aa4:	4a66      	ldr	r2, [pc, #408]	; (8004c40 <HAL_SD_MspInit+0x1c8>)
 8004aa6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004aaa:	6453      	str	r3, [r2, #68]	; 0x44
 8004aac:	4b64      	ldr	r3, [pc, #400]	; (8004c40 <HAL_SD_MspInit+0x1c8>)
 8004aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ab0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ab4:	613b      	str	r3, [r7, #16]
 8004ab6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ab8:	2300      	movs	r3, #0
 8004aba:	60fb      	str	r3, [r7, #12]
 8004abc:	4b60      	ldr	r3, [pc, #384]	; (8004c40 <HAL_SD_MspInit+0x1c8>)
 8004abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac0:	4a5f      	ldr	r2, [pc, #380]	; (8004c40 <HAL_SD_MspInit+0x1c8>)
 8004ac2:	f043 0304 	orr.w	r3, r3, #4
 8004ac6:	6313      	str	r3, [r2, #48]	; 0x30
 8004ac8:	4b5d      	ldr	r3, [pc, #372]	; (8004c40 <HAL_SD_MspInit+0x1c8>)
 8004aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004acc:	f003 0304 	and.w	r3, r3, #4
 8004ad0:	60fb      	str	r3, [r7, #12]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	60bb      	str	r3, [r7, #8]
 8004ad8:	4b59      	ldr	r3, [pc, #356]	; (8004c40 <HAL_SD_MspInit+0x1c8>)
 8004ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004adc:	4a58      	ldr	r2, [pc, #352]	; (8004c40 <HAL_SD_MspInit+0x1c8>)
 8004ade:	f043 0308 	orr.w	r3, r3, #8
 8004ae2:	6313      	str	r3, [r2, #48]	; 0x30
 8004ae4:	4b56      	ldr	r3, [pc, #344]	; (8004c40 <HAL_SD_MspInit+0x1c8>)
 8004ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae8:	f003 0308 	and.w	r3, r3, #8
 8004aec:	60bb      	str	r3, [r7, #8]
 8004aee:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8004af0:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8004af4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004af6:	2302      	movs	r3, #2
 8004af8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004afa:	2300      	movs	r3, #0
 8004afc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004afe:	2303      	movs	r3, #3
 8004b00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8004b02:	230c      	movs	r3, #12
 8004b04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b06:	f107 0314 	add.w	r3, r7, #20
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	484d      	ldr	r0, [pc, #308]	; (8004c44 <HAL_SD_MspInit+0x1cc>)
 8004b0e:	f002 fa3f 	bl	8006f90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004b12:	2304      	movs	r3, #4
 8004b14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b16:	2302      	movs	r3, #2
 8004b18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8004b22:	230c      	movs	r3, #12
 8004b24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004b26:	f107 0314 	add.w	r3, r7, #20
 8004b2a:	4619      	mov	r1, r3
 8004b2c:	4846      	ldr	r0, [pc, #280]	; (8004c48 <HAL_SD_MspInit+0x1d0>)
 8004b2e:	f002 fa2f 	bl	8006f90 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8004b32:	4b46      	ldr	r3, [pc, #280]	; (8004c4c <HAL_SD_MspInit+0x1d4>)
 8004b34:	4a46      	ldr	r2, [pc, #280]	; (8004c50 <HAL_SD_MspInit+0x1d8>)
 8004b36:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8004b38:	4b44      	ldr	r3, [pc, #272]	; (8004c4c <HAL_SD_MspInit+0x1d4>)
 8004b3a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004b3e:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004b40:	4b42      	ldr	r3, [pc, #264]	; (8004c4c <HAL_SD_MspInit+0x1d4>)
 8004b42:	2200      	movs	r2, #0
 8004b44:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004b46:	4b41      	ldr	r3, [pc, #260]	; (8004c4c <HAL_SD_MspInit+0x1d4>)
 8004b48:	2200      	movs	r2, #0
 8004b4a:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004b4c:	4b3f      	ldr	r3, [pc, #252]	; (8004c4c <HAL_SD_MspInit+0x1d4>)
 8004b4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004b52:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004b54:	4b3d      	ldr	r3, [pc, #244]	; (8004c4c <HAL_SD_MspInit+0x1d4>)
 8004b56:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004b5a:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004b5c:	4b3b      	ldr	r3, [pc, #236]	; (8004c4c <HAL_SD_MspInit+0x1d4>)
 8004b5e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004b62:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8004b64:	4b39      	ldr	r3, [pc, #228]	; (8004c4c <HAL_SD_MspInit+0x1d4>)
 8004b66:	2220      	movs	r2, #32
 8004b68:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8004b6a:	4b38      	ldr	r3, [pc, #224]	; (8004c4c <HAL_SD_MspInit+0x1d4>)
 8004b6c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004b70:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004b72:	4b36      	ldr	r3, [pc, #216]	; (8004c4c <HAL_SD_MspInit+0x1d4>)
 8004b74:	2204      	movs	r2, #4
 8004b76:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004b78:	4b34      	ldr	r3, [pc, #208]	; (8004c4c <HAL_SD_MspInit+0x1d4>)
 8004b7a:	2203      	movs	r2, #3
 8004b7c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8004b7e:	4b33      	ldr	r3, [pc, #204]	; (8004c4c <HAL_SD_MspInit+0x1d4>)
 8004b80:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004b84:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8004b86:	4b31      	ldr	r3, [pc, #196]	; (8004c4c <HAL_SD_MspInit+0x1d4>)
 8004b88:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004b8c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8004b8e:	482f      	ldr	r0, [pc, #188]	; (8004c4c <HAL_SD_MspInit+0x1d4>)
 8004b90:	f001 fe62 	bl	8006858 <HAL_DMA_Init>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d001      	beq.n	8004b9e <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 8004b9a:	f7ff fe13 	bl	80047c4 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4a2a      	ldr	r2, [pc, #168]	; (8004c4c <HAL_SD_MspInit+0x1d4>)
 8004ba2:	641a      	str	r2, [r3, #64]	; 0x40
 8004ba4:	4a29      	ldr	r2, [pc, #164]	; (8004c4c <HAL_SD_MspInit+0x1d4>)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8004baa:	4b2a      	ldr	r3, [pc, #168]	; (8004c54 <HAL_SD_MspInit+0x1dc>)
 8004bac:	4a2a      	ldr	r2, [pc, #168]	; (8004c58 <HAL_SD_MspInit+0x1e0>)
 8004bae:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8004bb0:	4b28      	ldr	r3, [pc, #160]	; (8004c54 <HAL_SD_MspInit+0x1dc>)
 8004bb2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004bb6:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004bb8:	4b26      	ldr	r3, [pc, #152]	; (8004c54 <HAL_SD_MspInit+0x1dc>)
 8004bba:	2240      	movs	r2, #64	; 0x40
 8004bbc:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004bbe:	4b25      	ldr	r3, [pc, #148]	; (8004c54 <HAL_SD_MspInit+0x1dc>)
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004bc4:	4b23      	ldr	r3, [pc, #140]	; (8004c54 <HAL_SD_MspInit+0x1dc>)
 8004bc6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004bca:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004bcc:	4b21      	ldr	r3, [pc, #132]	; (8004c54 <HAL_SD_MspInit+0x1dc>)
 8004bce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004bd2:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004bd4:	4b1f      	ldr	r3, [pc, #124]	; (8004c54 <HAL_SD_MspInit+0x1dc>)
 8004bd6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004bda:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8004bdc:	4b1d      	ldr	r3, [pc, #116]	; (8004c54 <HAL_SD_MspInit+0x1dc>)
 8004bde:	2220      	movs	r2, #32
 8004be0:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8004be2:	4b1c      	ldr	r3, [pc, #112]	; (8004c54 <HAL_SD_MspInit+0x1dc>)
 8004be4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004be8:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004bea:	4b1a      	ldr	r3, [pc, #104]	; (8004c54 <HAL_SD_MspInit+0x1dc>)
 8004bec:	2204      	movs	r2, #4
 8004bee:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004bf0:	4b18      	ldr	r3, [pc, #96]	; (8004c54 <HAL_SD_MspInit+0x1dc>)
 8004bf2:	2203      	movs	r2, #3
 8004bf4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8004bf6:	4b17      	ldr	r3, [pc, #92]	; (8004c54 <HAL_SD_MspInit+0x1dc>)
 8004bf8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004bfc:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8004bfe:	4b15      	ldr	r3, [pc, #84]	; (8004c54 <HAL_SD_MspInit+0x1dc>)
 8004c00:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004c04:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8004c06:	4813      	ldr	r0, [pc, #76]	; (8004c54 <HAL_SD_MspInit+0x1dc>)
 8004c08:	f001 fe26 	bl	8006858 <HAL_DMA_Init>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d001      	beq.n	8004c16 <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 8004c12:	f7ff fdd7 	bl	80047c4 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4a0e      	ldr	r2, [pc, #56]	; (8004c54 <HAL_SD_MspInit+0x1dc>)
 8004c1a:	63da      	str	r2, [r3, #60]	; 0x3c
 8004c1c:	4a0d      	ldr	r2, [pc, #52]	; (8004c54 <HAL_SD_MspInit+0x1dc>)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8004c22:	2200      	movs	r2, #0
 8004c24:	2100      	movs	r1, #0
 8004c26:	2031      	movs	r0, #49	; 0x31
 8004c28:	f001 fddf 	bl	80067ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8004c2c:	2031      	movs	r0, #49	; 0x31
 8004c2e:	f001 fdf8 	bl	8006822 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8004c32:	bf00      	nop
 8004c34:	3728      	adds	r7, #40	; 0x28
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	40012c00 	.word	0x40012c00
 8004c40:	40023800 	.word	0x40023800
 8004c44:	40020800 	.word	0x40020800
 8004c48:	40020c00 	.word	0x40020c00
 8004c4c:	20021810 	.word	0x20021810
 8004c50:	40026458 	.word	0x40026458
 8004c54:	20021b44 	.word	0x20021b44
 8004c58:	400264a0 	.word	0x400264a0

08004c5c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b08a      	sub	sp, #40	; 0x28
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c64:	f107 0314 	add.w	r3, r7, #20
 8004c68:	2200      	movs	r2, #0
 8004c6a:	601a      	str	r2, [r3, #0]
 8004c6c:	605a      	str	r2, [r3, #4]
 8004c6e:	609a      	str	r2, [r3, #8]
 8004c70:	60da      	str	r2, [r3, #12]
 8004c72:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a19      	ldr	r2, [pc, #100]	; (8004ce0 <HAL_SPI_MspInit+0x84>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d12c      	bne.n	8004cd8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004c7e:	2300      	movs	r3, #0
 8004c80:	613b      	str	r3, [r7, #16]
 8004c82:	4b18      	ldr	r3, [pc, #96]	; (8004ce4 <HAL_SPI_MspInit+0x88>)
 8004c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c86:	4a17      	ldr	r2, [pc, #92]	; (8004ce4 <HAL_SPI_MspInit+0x88>)
 8004c88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c8c:	6413      	str	r3, [r2, #64]	; 0x40
 8004c8e:	4b15      	ldr	r3, [pc, #84]	; (8004ce4 <HAL_SPI_MspInit+0x88>)
 8004c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c96:	613b      	str	r3, [r7, #16]
 8004c98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	60fb      	str	r3, [r7, #12]
 8004c9e:	4b11      	ldr	r3, [pc, #68]	; (8004ce4 <HAL_SPI_MspInit+0x88>)
 8004ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ca2:	4a10      	ldr	r2, [pc, #64]	; (8004ce4 <HAL_SPI_MspInit+0x88>)
 8004ca4:	f043 0302 	orr.w	r3, r3, #2
 8004ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8004caa:	4b0e      	ldr	r3, [pc, #56]	; (8004ce4 <HAL_SPI_MspInit+0x88>)
 8004cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cae:	f003 0302 	and.w	r3, r3, #2
 8004cb2:	60fb      	str	r3, [r7, #12]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8004cb6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8004cba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cbc:	2302      	movs	r3, #2
 8004cbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cc4:	2303      	movs	r3, #3
 8004cc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004cc8:	2305      	movs	r3, #5
 8004cca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ccc:	f107 0314 	add.w	r3, r7, #20
 8004cd0:	4619      	mov	r1, r3
 8004cd2:	4805      	ldr	r0, [pc, #20]	; (8004ce8 <HAL_SPI_MspInit+0x8c>)
 8004cd4:	f002 f95c 	bl	8006f90 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004cd8:	bf00      	nop
 8004cda:	3728      	adds	r7, #40	; 0x28
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	40003800 	.word	0x40003800
 8004ce4:	40023800 	.word	0x40023800
 8004ce8:	40020400 	.word	0x40020400

08004cec <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b08c      	sub	sp, #48	; 0x30
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cf4:	f107 031c 	add.w	r3, r7, #28
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	601a      	str	r2, [r3, #0]
 8004cfc:	605a      	str	r2, [r3, #4]
 8004cfe:	609a      	str	r2, [r3, #8]
 8004d00:	60da      	str	r2, [r3, #12]
 8004d02:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a2d      	ldr	r2, [pc, #180]	; (8004dc0 <HAL_TIM_PWM_MspInit+0xd4>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d12d      	bne.n	8004d6a <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004d0e:	2300      	movs	r3, #0
 8004d10:	61bb      	str	r3, [r7, #24]
 8004d12:	4b2c      	ldr	r3, [pc, #176]	; (8004dc4 <HAL_TIM_PWM_MspInit+0xd8>)
 8004d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d16:	4a2b      	ldr	r2, [pc, #172]	; (8004dc4 <HAL_TIM_PWM_MspInit+0xd8>)
 8004d18:	f043 0301 	orr.w	r3, r3, #1
 8004d1c:	6453      	str	r3, [r2, #68]	; 0x44
 8004d1e:	4b29      	ldr	r3, [pc, #164]	; (8004dc4 <HAL_TIM_PWM_MspInit+0xd8>)
 8004d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d22:	f003 0301 	and.w	r3, r3, #1
 8004d26:	61bb      	str	r3, [r7, #24]
 8004d28:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	617b      	str	r3, [r7, #20]
 8004d2e:	4b25      	ldr	r3, [pc, #148]	; (8004dc4 <HAL_TIM_PWM_MspInit+0xd8>)
 8004d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d32:	4a24      	ldr	r2, [pc, #144]	; (8004dc4 <HAL_TIM_PWM_MspInit+0xd8>)
 8004d34:	f043 0310 	orr.w	r3, r3, #16
 8004d38:	6313      	str	r3, [r2, #48]	; 0x30
 8004d3a:	4b22      	ldr	r3, [pc, #136]	; (8004dc4 <HAL_TIM_PWM_MspInit+0xd8>)
 8004d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d3e:	f003 0310 	and.w	r3, r3, #16
 8004d42:	617b      	str	r3, [r7, #20]
 8004d44:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8004d46:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8004d4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d4c:	2302      	movs	r3, #2
 8004d4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d50:	2300      	movs	r3, #0
 8004d52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d54:	2300      	movs	r3, #0
 8004d56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004d5c:	f107 031c 	add.w	r3, r7, #28
 8004d60:	4619      	mov	r1, r3
 8004d62:	4819      	ldr	r0, [pc, #100]	; (8004dc8 <HAL_TIM_PWM_MspInit+0xdc>)
 8004d64:	f002 f914 	bl	8006f90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004d68:	e026      	b.n	8004db8 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM3)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a17      	ldr	r2, [pc, #92]	; (8004dcc <HAL_TIM_PWM_MspInit+0xe0>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d10e      	bne.n	8004d92 <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004d74:	2300      	movs	r3, #0
 8004d76:	613b      	str	r3, [r7, #16]
 8004d78:	4b12      	ldr	r3, [pc, #72]	; (8004dc4 <HAL_TIM_PWM_MspInit+0xd8>)
 8004d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d7c:	4a11      	ldr	r2, [pc, #68]	; (8004dc4 <HAL_TIM_PWM_MspInit+0xd8>)
 8004d7e:	f043 0302 	orr.w	r3, r3, #2
 8004d82:	6413      	str	r3, [r2, #64]	; 0x40
 8004d84:	4b0f      	ldr	r3, [pc, #60]	; (8004dc4 <HAL_TIM_PWM_MspInit+0xd8>)
 8004d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d88:	f003 0302 	and.w	r3, r3, #2
 8004d8c:	613b      	str	r3, [r7, #16]
 8004d8e:	693b      	ldr	r3, [r7, #16]
}
 8004d90:	e012      	b.n	8004db8 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM4)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a0e      	ldr	r2, [pc, #56]	; (8004dd0 <HAL_TIM_PWM_MspInit+0xe4>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d10d      	bne.n	8004db8 <HAL_TIM_PWM_MspInit+0xcc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	60fb      	str	r3, [r7, #12]
 8004da0:	4b08      	ldr	r3, [pc, #32]	; (8004dc4 <HAL_TIM_PWM_MspInit+0xd8>)
 8004da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da4:	4a07      	ldr	r2, [pc, #28]	; (8004dc4 <HAL_TIM_PWM_MspInit+0xd8>)
 8004da6:	f043 0304 	orr.w	r3, r3, #4
 8004daa:	6413      	str	r3, [r2, #64]	; 0x40
 8004dac:	4b05      	ldr	r3, [pc, #20]	; (8004dc4 <HAL_TIM_PWM_MspInit+0xd8>)
 8004dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db0:	f003 0304 	and.w	r3, r3, #4
 8004db4:	60fb      	str	r3, [r7, #12]
 8004db6:	68fb      	ldr	r3, [r7, #12]
}
 8004db8:	bf00      	nop
 8004dba:	3730      	adds	r7, #48	; 0x30
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	40010000 	.word	0x40010000
 8004dc4:	40023800 	.word	0x40023800
 8004dc8:	40021000 	.word	0x40021000
 8004dcc:	40000400 	.word	0x40000400
 8004dd0:	40000800 	.word	0x40000800

08004dd4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b088      	sub	sp, #32
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a3e      	ldr	r2, [pc, #248]	; (8004edc <HAL_TIM_Base_MspInit+0x108>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d116      	bne.n	8004e14 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004de6:	2300      	movs	r3, #0
 8004de8:	61fb      	str	r3, [r7, #28]
 8004dea:	4b3d      	ldr	r3, [pc, #244]	; (8004ee0 <HAL_TIM_Base_MspInit+0x10c>)
 8004dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dee:	4a3c      	ldr	r2, [pc, #240]	; (8004ee0 <HAL_TIM_Base_MspInit+0x10c>)
 8004df0:	f043 0310 	orr.w	r3, r3, #16
 8004df4:	6413      	str	r3, [r2, #64]	; 0x40
 8004df6:	4b3a      	ldr	r3, [pc, #232]	; (8004ee0 <HAL_TIM_Base_MspInit+0x10c>)
 8004df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfa:	f003 0310 	and.w	r3, r3, #16
 8004dfe:	61fb      	str	r3, [r7, #28]
 8004e00:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8004e02:	2200      	movs	r2, #0
 8004e04:	2101      	movs	r1, #1
 8004e06:	2036      	movs	r0, #54	; 0x36
 8004e08:	f001 fcef 	bl	80067ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004e0c:	2036      	movs	r0, #54	; 0x36
 8004e0e:	f001 fd08 	bl	8006822 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8004e12:	e05e      	b.n	8004ed2 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM7)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a32      	ldr	r2, [pc, #200]	; (8004ee4 <HAL_TIM_Base_MspInit+0x110>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d116      	bne.n	8004e4c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004e1e:	2300      	movs	r3, #0
 8004e20:	61bb      	str	r3, [r7, #24]
 8004e22:	4b2f      	ldr	r3, [pc, #188]	; (8004ee0 <HAL_TIM_Base_MspInit+0x10c>)
 8004e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e26:	4a2e      	ldr	r2, [pc, #184]	; (8004ee0 <HAL_TIM_Base_MspInit+0x10c>)
 8004e28:	f043 0320 	orr.w	r3, r3, #32
 8004e2c:	6413      	str	r3, [r2, #64]	; 0x40
 8004e2e:	4b2c      	ldr	r3, [pc, #176]	; (8004ee0 <HAL_TIM_Base_MspInit+0x10c>)
 8004e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e32:	f003 0320 	and.w	r3, r3, #32
 8004e36:	61bb      	str	r3, [r7, #24]
 8004e38:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	2100      	movs	r1, #0
 8004e3e:	2037      	movs	r0, #55	; 0x37
 8004e40:	f001 fcd3 	bl	80067ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004e44:	2037      	movs	r0, #55	; 0x37
 8004e46:	f001 fcec 	bl	8006822 <HAL_NVIC_EnableIRQ>
}
 8004e4a:	e042      	b.n	8004ed2 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM10)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a25      	ldr	r2, [pc, #148]	; (8004ee8 <HAL_TIM_Base_MspInit+0x114>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d10e      	bne.n	8004e74 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8004e56:	2300      	movs	r3, #0
 8004e58:	617b      	str	r3, [r7, #20]
 8004e5a:	4b21      	ldr	r3, [pc, #132]	; (8004ee0 <HAL_TIM_Base_MspInit+0x10c>)
 8004e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e5e:	4a20      	ldr	r2, [pc, #128]	; (8004ee0 <HAL_TIM_Base_MspInit+0x10c>)
 8004e60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e64:	6453      	str	r3, [r2, #68]	; 0x44
 8004e66:	4b1e      	ldr	r3, [pc, #120]	; (8004ee0 <HAL_TIM_Base_MspInit+0x10c>)
 8004e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e6e:	617b      	str	r3, [r7, #20]
 8004e70:	697b      	ldr	r3, [r7, #20]
}
 8004e72:	e02e      	b.n	8004ed2 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM11)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a1c      	ldr	r2, [pc, #112]	; (8004eec <HAL_TIM_Base_MspInit+0x118>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d10e      	bne.n	8004e9c <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8004e7e:	2300      	movs	r3, #0
 8004e80:	613b      	str	r3, [r7, #16]
 8004e82:	4b17      	ldr	r3, [pc, #92]	; (8004ee0 <HAL_TIM_Base_MspInit+0x10c>)
 8004e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e86:	4a16      	ldr	r2, [pc, #88]	; (8004ee0 <HAL_TIM_Base_MspInit+0x10c>)
 8004e88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e8c:	6453      	str	r3, [r2, #68]	; 0x44
 8004e8e:	4b14      	ldr	r3, [pc, #80]	; (8004ee0 <HAL_TIM_Base_MspInit+0x10c>)
 8004e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e96:	613b      	str	r3, [r7, #16]
 8004e98:	693b      	ldr	r3, [r7, #16]
}
 8004e9a:	e01a      	b.n	8004ed2 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM13)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a13      	ldr	r2, [pc, #76]	; (8004ef0 <HAL_TIM_Base_MspInit+0x11c>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d115      	bne.n	8004ed2 <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	60fb      	str	r3, [r7, #12]
 8004eaa:	4b0d      	ldr	r3, [pc, #52]	; (8004ee0 <HAL_TIM_Base_MspInit+0x10c>)
 8004eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eae:	4a0c      	ldr	r2, [pc, #48]	; (8004ee0 <HAL_TIM_Base_MspInit+0x10c>)
 8004eb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004eb4:	6413      	str	r3, [r2, #64]	; 0x40
 8004eb6:	4b0a      	ldr	r3, [pc, #40]	; (8004ee0 <HAL_TIM_Base_MspInit+0x10c>)
 8004eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ebe:	60fb      	str	r3, [r7, #12]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	2100      	movs	r1, #0
 8004ec6:	202c      	movs	r0, #44	; 0x2c
 8004ec8:	f001 fc8f 	bl	80067ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8004ecc:	202c      	movs	r0, #44	; 0x2c
 8004ece:	f001 fca8 	bl	8006822 <HAL_NVIC_EnableIRQ>
}
 8004ed2:	bf00      	nop
 8004ed4:	3720      	adds	r7, #32
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}
 8004eda:	bf00      	nop
 8004edc:	40001000 	.word	0x40001000
 8004ee0:	40023800 	.word	0x40023800
 8004ee4:	40001400 	.word	0x40001400
 8004ee8:	40014400 	.word	0x40014400
 8004eec:	40014800 	.word	0x40014800
 8004ef0:	40001c00 	.word	0x40001c00

08004ef4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b08a      	sub	sp, #40	; 0x28
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004efc:	f107 0314 	add.w	r3, r7, #20
 8004f00:	2200      	movs	r2, #0
 8004f02:	601a      	str	r2, [r3, #0]
 8004f04:	605a      	str	r2, [r3, #4]
 8004f06:	609a      	str	r2, [r3, #8]
 8004f08:	60da      	str	r2, [r3, #12]
 8004f0a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a1d      	ldr	r2, [pc, #116]	; (8004f88 <HAL_TIM_Encoder_MspInit+0x94>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d133      	bne.n	8004f7e <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004f16:	2300      	movs	r3, #0
 8004f18:	613b      	str	r3, [r7, #16]
 8004f1a:	4b1c      	ldr	r3, [pc, #112]	; (8004f8c <HAL_TIM_Encoder_MspInit+0x98>)
 8004f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f1e:	4a1b      	ldr	r2, [pc, #108]	; (8004f8c <HAL_TIM_Encoder_MspInit+0x98>)
 8004f20:	f043 0302 	orr.w	r3, r3, #2
 8004f24:	6453      	str	r3, [r2, #68]	; 0x44
 8004f26:	4b19      	ldr	r3, [pc, #100]	; (8004f8c <HAL_TIM_Encoder_MspInit+0x98>)
 8004f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f2a:	f003 0302 	and.w	r3, r3, #2
 8004f2e:	613b      	str	r3, [r7, #16]
 8004f30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f32:	2300      	movs	r3, #0
 8004f34:	60fb      	str	r3, [r7, #12]
 8004f36:	4b15      	ldr	r3, [pc, #84]	; (8004f8c <HAL_TIM_Encoder_MspInit+0x98>)
 8004f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f3a:	4a14      	ldr	r2, [pc, #80]	; (8004f8c <HAL_TIM_Encoder_MspInit+0x98>)
 8004f3c:	f043 0304 	orr.w	r3, r3, #4
 8004f40:	6313      	str	r3, [r2, #48]	; 0x30
 8004f42:	4b12      	ldr	r3, [pc, #72]	; (8004f8c <HAL_TIM_Encoder_MspInit+0x98>)
 8004f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f46:	f003 0304 	and.w	r3, r3, #4
 8004f4a:	60fb      	str	r3, [r7, #12]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004f4e:	23c0      	movs	r3, #192	; 0xc0
 8004f50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f52:	2302      	movs	r3, #2
 8004f54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f56:	2300      	movs	r3, #0
 8004f58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f62:	f107 0314 	add.w	r3, r7, #20
 8004f66:	4619      	mov	r1, r3
 8004f68:	4809      	ldr	r0, [pc, #36]	; (8004f90 <HAL_TIM_Encoder_MspInit+0x9c>)
 8004f6a:	f002 f811 	bl	8006f90 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8004f6e:	2200      	movs	r2, #0
 8004f70:	2100      	movs	r1, #0
 8004f72:	202c      	movs	r0, #44	; 0x2c
 8004f74:	f001 fc39 	bl	80067ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8004f78:	202c      	movs	r0, #44	; 0x2c
 8004f7a:	f001 fc52 	bl	8006822 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8004f7e:	bf00      	nop
 8004f80:	3728      	adds	r7, #40	; 0x28
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}
 8004f86:	bf00      	nop
 8004f88:	40010400 	.word	0x40010400
 8004f8c:	40023800 	.word	0x40023800
 8004f90:	40020800 	.word	0x40020800

08004f94 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b08c      	sub	sp, #48	; 0x30
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f9c:	f107 031c 	add.w	r3, r7, #28
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	601a      	str	r2, [r3, #0]
 8004fa4:	605a      	str	r2, [r3, #4]
 8004fa6:	609a      	str	r2, [r3, #8]
 8004fa8:	60da      	str	r2, [r3, #12]
 8004faa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a5c      	ldr	r2, [pc, #368]	; (8005124 <HAL_TIM_MspPostInit+0x190>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d11f      	bne.n	8004ff6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	61bb      	str	r3, [r7, #24]
 8004fba:	4b5b      	ldr	r3, [pc, #364]	; (8005128 <HAL_TIM_MspPostInit+0x194>)
 8004fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fbe:	4a5a      	ldr	r2, [pc, #360]	; (8005128 <HAL_TIM_MspPostInit+0x194>)
 8004fc0:	f043 0310 	orr.w	r3, r3, #16
 8004fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8004fc6:	4b58      	ldr	r3, [pc, #352]	; (8005128 <HAL_TIM_MspPostInit+0x194>)
 8004fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fca:	f003 0310 	and.w	r3, r3, #16
 8004fce:	61bb      	str	r3, [r7, #24]
 8004fd0:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004fd2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004fd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fd8:	2302      	movs	r3, #2
 8004fda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004fe8:	f107 031c 	add.w	r3, r7, #28
 8004fec:	4619      	mov	r1, r3
 8004fee:	484f      	ldr	r0, [pc, #316]	; (800512c <HAL_TIM_MspPostInit+0x198>)
 8004ff0:	f001 ffce 	bl	8006f90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8004ff4:	e091      	b.n	800511a <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM3)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a4d      	ldr	r2, [pc, #308]	; (8005130 <HAL_TIM_MspPostInit+0x19c>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d11e      	bne.n	800503e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005000:	2300      	movs	r3, #0
 8005002:	617b      	str	r3, [r7, #20]
 8005004:	4b48      	ldr	r3, [pc, #288]	; (8005128 <HAL_TIM_MspPostInit+0x194>)
 8005006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005008:	4a47      	ldr	r2, [pc, #284]	; (8005128 <HAL_TIM_MspPostInit+0x194>)
 800500a:	f043 0302 	orr.w	r3, r3, #2
 800500e:	6313      	str	r3, [r2, #48]	; 0x30
 8005010:	4b45      	ldr	r3, [pc, #276]	; (8005128 <HAL_TIM_MspPostInit+0x194>)
 8005012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005014:	f003 0302 	and.w	r3, r3, #2
 8005018:	617b      	str	r3, [r7, #20]
 800501a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800501c:	2330      	movs	r3, #48	; 0x30
 800501e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005020:	2302      	movs	r3, #2
 8005022:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005024:	2300      	movs	r3, #0
 8005026:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005028:	2300      	movs	r3, #0
 800502a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800502c:	2302      	movs	r3, #2
 800502e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005030:	f107 031c 	add.w	r3, r7, #28
 8005034:	4619      	mov	r1, r3
 8005036:	483f      	ldr	r0, [pc, #252]	; (8005134 <HAL_TIM_MspPostInit+0x1a0>)
 8005038:	f001 ffaa 	bl	8006f90 <HAL_GPIO_Init>
}
 800503c:	e06d      	b.n	800511a <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM4)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a3d      	ldr	r2, [pc, #244]	; (8005138 <HAL_TIM_MspPostInit+0x1a4>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d11f      	bne.n	8005088 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005048:	2300      	movs	r3, #0
 800504a:	613b      	str	r3, [r7, #16]
 800504c:	4b36      	ldr	r3, [pc, #216]	; (8005128 <HAL_TIM_MspPostInit+0x194>)
 800504e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005050:	4a35      	ldr	r2, [pc, #212]	; (8005128 <HAL_TIM_MspPostInit+0x194>)
 8005052:	f043 0308 	orr.w	r3, r3, #8
 8005056:	6313      	str	r3, [r2, #48]	; 0x30
 8005058:	4b33      	ldr	r3, [pc, #204]	; (8005128 <HAL_TIM_MspPostInit+0x194>)
 800505a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800505c:	f003 0308 	and.w	r3, r3, #8
 8005060:	613b      	str	r3, [r7, #16]
 8005062:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8005064:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8005068:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800506a:	2302      	movs	r3, #2
 800506c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800506e:	2300      	movs	r3, #0
 8005070:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005072:	2300      	movs	r3, #0
 8005074:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005076:	2302      	movs	r3, #2
 8005078:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800507a:	f107 031c 	add.w	r3, r7, #28
 800507e:	4619      	mov	r1, r3
 8005080:	482e      	ldr	r0, [pc, #184]	; (800513c <HAL_TIM_MspPostInit+0x1a8>)
 8005082:	f001 ff85 	bl	8006f90 <HAL_GPIO_Init>
}
 8005086:	e048      	b.n	800511a <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM10)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a2c      	ldr	r2, [pc, #176]	; (8005140 <HAL_TIM_MspPostInit+0x1ac>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d11f      	bne.n	80050d2 <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005092:	2300      	movs	r3, #0
 8005094:	60fb      	str	r3, [r7, #12]
 8005096:	4b24      	ldr	r3, [pc, #144]	; (8005128 <HAL_TIM_MspPostInit+0x194>)
 8005098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800509a:	4a23      	ldr	r2, [pc, #140]	; (8005128 <HAL_TIM_MspPostInit+0x194>)
 800509c:	f043 0302 	orr.w	r3, r3, #2
 80050a0:	6313      	str	r3, [r2, #48]	; 0x30
 80050a2:	4b21      	ldr	r3, [pc, #132]	; (8005128 <HAL_TIM_MspPostInit+0x194>)
 80050a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a6:	f003 0302 	and.w	r3, r3, #2
 80050aa:	60fb      	str	r3, [r7, #12]
 80050ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80050ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80050b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050b4:	2302      	movs	r3, #2
 80050b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050b8:	2300      	movs	r3, #0
 80050ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050bc:	2300      	movs	r3, #0
 80050be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 80050c0:	2303      	movs	r3, #3
 80050c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050c4:	f107 031c 	add.w	r3, r7, #28
 80050c8:	4619      	mov	r1, r3
 80050ca:	481a      	ldr	r0, [pc, #104]	; (8005134 <HAL_TIM_MspPostInit+0x1a0>)
 80050cc:	f001 ff60 	bl	8006f90 <HAL_GPIO_Init>
}
 80050d0:	e023      	b.n	800511a <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM11)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a1b      	ldr	r2, [pc, #108]	; (8005144 <HAL_TIM_MspPostInit+0x1b0>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d11e      	bne.n	800511a <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80050dc:	2300      	movs	r3, #0
 80050de:	60bb      	str	r3, [r7, #8]
 80050e0:	4b11      	ldr	r3, [pc, #68]	; (8005128 <HAL_TIM_MspPostInit+0x194>)
 80050e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e4:	4a10      	ldr	r2, [pc, #64]	; (8005128 <HAL_TIM_MspPostInit+0x194>)
 80050e6:	f043 0302 	orr.w	r3, r3, #2
 80050ea:	6313      	str	r3, [r2, #48]	; 0x30
 80050ec:	4b0e      	ldr	r3, [pc, #56]	; (8005128 <HAL_TIM_MspPostInit+0x194>)
 80050ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f0:	f003 0302 	and.w	r3, r3, #2
 80050f4:	60bb      	str	r3, [r7, #8]
 80050f6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80050f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80050fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050fe:	2302      	movs	r3, #2
 8005100:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005102:	2300      	movs	r3, #0
 8005104:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005106:	2300      	movs	r3, #0
 8005108:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 800510a:	2303      	movs	r3, #3
 800510c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800510e:	f107 031c 	add.w	r3, r7, #28
 8005112:	4619      	mov	r1, r3
 8005114:	4807      	ldr	r0, [pc, #28]	; (8005134 <HAL_TIM_MspPostInit+0x1a0>)
 8005116:	f001 ff3b 	bl	8006f90 <HAL_GPIO_Init>
}
 800511a:	bf00      	nop
 800511c:	3730      	adds	r7, #48	; 0x30
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
 8005122:	bf00      	nop
 8005124:	40010000 	.word	0x40010000
 8005128:	40023800 	.word	0x40023800
 800512c:	40021000 	.word	0x40021000
 8005130:	40000400 	.word	0x40000400
 8005134:	40020400 	.word	0x40020400
 8005138:	40000800 	.word	0x40000800
 800513c:	40020c00 	.word	0x40020c00
 8005140:	40014400 	.word	0x40014400
 8005144:	40014800 	.word	0x40014800

08005148 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b08a      	sub	sp, #40	; 0x28
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005150:	f107 0314 	add.w	r3, r7, #20
 8005154:	2200      	movs	r2, #0
 8005156:	601a      	str	r2, [r3, #0]
 8005158:	605a      	str	r2, [r3, #4]
 800515a:	609a      	str	r2, [r3, #8]
 800515c:	60da      	str	r2, [r3, #12]
 800515e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a19      	ldr	r2, [pc, #100]	; (80051cc <HAL_UART_MspInit+0x84>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d12b      	bne.n	80051c2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800516a:	2300      	movs	r3, #0
 800516c:	613b      	str	r3, [r7, #16]
 800516e:	4b18      	ldr	r3, [pc, #96]	; (80051d0 <HAL_UART_MspInit+0x88>)
 8005170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005172:	4a17      	ldr	r2, [pc, #92]	; (80051d0 <HAL_UART_MspInit+0x88>)
 8005174:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005178:	6413      	str	r3, [r2, #64]	; 0x40
 800517a:	4b15      	ldr	r3, [pc, #84]	; (80051d0 <HAL_UART_MspInit+0x88>)
 800517c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800517e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005182:	613b      	str	r3, [r7, #16]
 8005184:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005186:	2300      	movs	r3, #0
 8005188:	60fb      	str	r3, [r7, #12]
 800518a:	4b11      	ldr	r3, [pc, #68]	; (80051d0 <HAL_UART_MspInit+0x88>)
 800518c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800518e:	4a10      	ldr	r2, [pc, #64]	; (80051d0 <HAL_UART_MspInit+0x88>)
 8005190:	f043 0308 	orr.w	r3, r3, #8
 8005194:	6313      	str	r3, [r2, #48]	; 0x30
 8005196:	4b0e      	ldr	r3, [pc, #56]	; (80051d0 <HAL_UART_MspInit+0x88>)
 8005198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800519a:	f003 0308 	and.w	r3, r3, #8
 800519e:	60fb      	str	r3, [r7, #12]
 80051a0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80051a2:	2360      	movs	r3, #96	; 0x60
 80051a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051a6:	2302      	movs	r3, #2
 80051a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051aa:	2300      	movs	r3, #0
 80051ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051ae:	2303      	movs	r3, #3
 80051b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80051b2:	2307      	movs	r3, #7
 80051b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80051b6:	f107 0314 	add.w	r3, r7, #20
 80051ba:	4619      	mov	r1, r3
 80051bc:	4805      	ldr	r0, [pc, #20]	; (80051d4 <HAL_UART_MspInit+0x8c>)
 80051be:	f001 fee7 	bl	8006f90 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80051c2:	bf00      	nop
 80051c4:	3728      	adds	r7, #40	; 0x28
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	bf00      	nop
 80051cc:	40004400 	.word	0x40004400
 80051d0:	40023800 	.word	0x40023800
 80051d4:	40020c00 	.word	0x40020c00

080051d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80051d8:	b480      	push	{r7}
 80051da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80051dc:	e7fe      	b.n	80051dc <NMI_Handler+0x4>

080051de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80051de:	b480      	push	{r7}
 80051e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80051e2:	e7fe      	b.n	80051e2 <HardFault_Handler+0x4>

080051e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80051e4:	b480      	push	{r7}
 80051e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80051e8:	e7fe      	b.n	80051e8 <MemManage_Handler+0x4>

080051ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80051ea:	b480      	push	{r7}
 80051ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80051ee:	e7fe      	b.n	80051ee <BusFault_Handler+0x4>

080051f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80051f0:	b480      	push	{r7}
 80051f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80051f4:	e7fe      	b.n	80051f4 <UsageFault_Handler+0x4>

080051f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80051f6:	b480      	push	{r7}
 80051f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80051fa:	bf00      	nop
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr

08005204 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005204:	b480      	push	{r7}
 8005206:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005208:	bf00      	nop
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr

08005212 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005212:	b480      	push	{r7}
 8005214:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005216:	bf00      	nop
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr

08005220 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005224:	f000 fdc0 	bl	8005da8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005228:	bf00      	nop
 800522a:	bd80      	pop	{r7, pc}

0800522c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8005230:	2004      	movs	r0, #4
 8005232:	f002 f889 	bl	8007348 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8005236:	bf00      	nop
 8005238:	bd80      	pop	{r7, pc}

0800523a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800523a:	b580      	push	{r7, lr}
 800523c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800523e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005242:	f002 f881 	bl	8007348 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005246:	bf00      	nop
 8005248:	bd80      	pop	{r7, pc}
	...

0800524c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8005250:	4803      	ldr	r0, [pc, #12]	; (8005260 <TIM8_UP_TIM13_IRQHandler+0x14>)
 8005252:	f006 f898 	bl	800b386 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 8005256:	4803      	ldr	r0, [pc, #12]	; (8005264 <TIM8_UP_TIM13_IRQHandler+0x18>)
 8005258:	f006 f895 	bl	800b386 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800525c:	bf00      	nop
 800525e:	bd80      	pop	{r7, pc}
 8005260:	200218c8 	.word	0x200218c8
 8005264:	20021ac4 	.word	0x20021ac4

08005268 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 800526c:	4802      	ldr	r0, [pc, #8]	; (8005278 <SDIO_IRQHandler+0x10>)
 800526e:	f004 f931 	bl	80094d4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8005272:	bf00      	nop
 8005274:	bd80      	pop	{r7, pc}
 8005276:	bf00      	nop
 8005278:	20021c24 	.word	0x20021c24

0800527c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005280:	4802      	ldr	r0, [pc, #8]	; (800528c <TIM6_DAC_IRQHandler+0x10>)
 8005282:	f006 f880 	bl	800b386 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005286:	bf00      	nop
 8005288:	bd80      	pop	{r7, pc}
 800528a:	bf00      	nop
 800528c:	20021ba4 	.word	0x20021ba4

08005290 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8005294:	4802      	ldr	r0, [pc, #8]	; (80052a0 <TIM7_IRQHandler+0x10>)
 8005296:	f006 f876 	bl	800b386 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800529a:	bf00      	nop
 800529c:	bd80      	pop	{r7, pc}
 800529e:	bf00      	nop
 80052a0:	20021d48 	.word	0x20021d48

080052a4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80052a8:	4802      	ldr	r0, [pc, #8]	; (80052b4 <DMA2_Stream2_IRQHandler+0x10>)
 80052aa:	f001 fbfd 	bl	8006aa8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80052ae:	bf00      	nop
 80052b0:	bd80      	pop	{r7, pc}
 80052b2:	bf00      	nop
 80052b4:	20021ce8 	.word	0x20021ce8

080052b8 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 80052bc:	4802      	ldr	r0, [pc, #8]	; (80052c8 <DMA2_Stream3_IRQHandler+0x10>)
 80052be:	f001 fbf3 	bl	8006aa8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80052c2:	bf00      	nop
 80052c4:	bd80      	pop	{r7, pc}
 80052c6:	bf00      	nop
 80052c8:	20021810 	.word	0x20021810

080052cc <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 80052d0:	4802      	ldr	r0, [pc, #8]	; (80052dc <DMA2_Stream6_IRQHandler+0x10>)
 80052d2:	f001 fbe9 	bl	8006aa8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80052d6:	bf00      	nop
 80052d8:	bd80      	pop	{r7, pc}
 80052da:	bf00      	nop
 80052dc:	20021b44 	.word	0x20021b44

080052e0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b086      	sub	sp, #24
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80052ec:	2300      	movs	r3, #0
 80052ee:	617b      	str	r3, [r7, #20]
 80052f0:	e00a      	b.n	8005308 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80052f2:	f3af 8000 	nop.w
 80052f6:	4601      	mov	r1, r0
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	1c5a      	adds	r2, r3, #1
 80052fc:	60ba      	str	r2, [r7, #8]
 80052fe:	b2ca      	uxtb	r2, r1
 8005300:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	3301      	adds	r3, #1
 8005306:	617b      	str	r3, [r7, #20]
 8005308:	697a      	ldr	r2, [r7, #20]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	429a      	cmp	r2, r3
 800530e:	dbf0      	blt.n	80052f2 <_read+0x12>
	}

return len;
 8005310:	687b      	ldr	r3, [r7, #4]
}
 8005312:	4618      	mov	r0, r3
 8005314:	3718      	adds	r7, #24
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}

0800531a <_close>:
	}
	return len;
}

int _close(int file)
{
 800531a:	b480      	push	{r7}
 800531c:	b083      	sub	sp, #12
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
	return -1;
 8005322:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005326:	4618      	mov	r0, r3
 8005328:	370c      	adds	r7, #12
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr

08005332 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005332:	b480      	push	{r7}
 8005334:	b083      	sub	sp, #12
 8005336:	af00      	add	r7, sp, #0
 8005338:	6078      	str	r0, [r7, #4]
 800533a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005342:	605a      	str	r2, [r3, #4]
	return 0;
 8005344:	2300      	movs	r3, #0
}
 8005346:	4618      	mov	r0, r3
 8005348:	370c      	adds	r7, #12
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr

08005352 <_isatty>:

int _isatty(int file)
{
 8005352:	b480      	push	{r7}
 8005354:	b083      	sub	sp, #12
 8005356:	af00      	add	r7, sp, #0
 8005358:	6078      	str	r0, [r7, #4]
	return 1;
 800535a:	2301      	movs	r3, #1
}
 800535c:	4618      	mov	r0, r3
 800535e:	370c      	adds	r7, #12
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr

08005368 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005368:	b480      	push	{r7}
 800536a:	b085      	sub	sp, #20
 800536c:	af00      	add	r7, sp, #0
 800536e:	60f8      	str	r0, [r7, #12]
 8005370:	60b9      	str	r1, [r7, #8]
 8005372:	607a      	str	r2, [r7, #4]
	return 0;
 8005374:	2300      	movs	r3, #0
}
 8005376:	4618      	mov	r0, r3
 8005378:	3714      	adds	r7, #20
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr
	...

08005384 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b086      	sub	sp, #24
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800538c:	4a14      	ldr	r2, [pc, #80]	; (80053e0 <_sbrk+0x5c>)
 800538e:	4b15      	ldr	r3, [pc, #84]	; (80053e4 <_sbrk+0x60>)
 8005390:	1ad3      	subs	r3, r2, r3
 8005392:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005398:	4b13      	ldr	r3, [pc, #76]	; (80053e8 <_sbrk+0x64>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d102      	bne.n	80053a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80053a0:	4b11      	ldr	r3, [pc, #68]	; (80053e8 <_sbrk+0x64>)
 80053a2:	4a12      	ldr	r2, [pc, #72]	; (80053ec <_sbrk+0x68>)
 80053a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80053a6:	4b10      	ldr	r3, [pc, #64]	; (80053e8 <_sbrk+0x64>)
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4413      	add	r3, r2
 80053ae:	693a      	ldr	r2, [r7, #16]
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d207      	bcs.n	80053c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80053b4:	f00d f80a 	bl	80123cc <__errno>
 80053b8:	4602      	mov	r2, r0
 80053ba:	230c      	movs	r3, #12
 80053bc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80053be:	f04f 33ff 	mov.w	r3, #4294967295
 80053c2:	e009      	b.n	80053d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80053c4:	4b08      	ldr	r3, [pc, #32]	; (80053e8 <_sbrk+0x64>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80053ca:	4b07      	ldr	r3, [pc, #28]	; (80053e8 <_sbrk+0x64>)
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4413      	add	r3, r2
 80053d2:	4a05      	ldr	r2, [pc, #20]	; (80053e8 <_sbrk+0x64>)
 80053d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80053d6:	68fb      	ldr	r3, [r7, #12]
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3718      	adds	r7, #24
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}
 80053e0:	20050000 	.word	0x20050000
 80053e4:	00000400 	.word	0x00000400
 80053e8:	20000230 	.word	0x20000230
 80053ec:	20023e08 	.word	0x20023e08

080053f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80053f0:	b480      	push	{r7}
 80053f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80053f4:	4b08      	ldr	r3, [pc, #32]	; (8005418 <SystemInit+0x28>)
 80053f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053fa:	4a07      	ldr	r2, [pc, #28]	; (8005418 <SystemInit+0x28>)
 80053fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005400:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005404:	4b04      	ldr	r3, [pc, #16]	; (8005418 <SystemInit+0x28>)
 8005406:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800540a:	609a      	str	r2, [r3, #8]
#endif
}
 800540c:	bf00      	nop
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr
 8005416:	bf00      	nop
 8005418:	e000ed00 	.word	0xe000ed00

0800541c <batteryLowMode>:
Odometry odometry(&encoder, &imu, &velocity_ctrl);

double mon_f, mon_d;

void batteryLowMode()
{
 800541c:	b580      	push	{r7, lr}
 800541e:	af00      	add	r7, sp, #0
	lcd_clear();
 8005420:	f7fb fe3e 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8005424:	2100      	movs	r1, #0
 8005426:	2000      	movs	r0, #0
 8005428:	f7fb fe4a 	bl	80010c0 <lcd_locate>
	lcd_printf("Battery");
 800542c:	4814      	ldr	r0, [pc, #80]	; (8005480 <batteryLowMode+0x64>)
 800542e:	f7fb fe71 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8005432:	2101      	movs	r1, #1
 8005434:	2000      	movs	r0, #0
 8005436:	f7fb fe43 	bl	80010c0 <lcd_locate>
	lcd_printf("Low");
 800543a:	4812      	ldr	r0, [pc, #72]	; (8005484 <batteryLowMode+0x68>)
 800543c:	f7fb fe6a 	bl	8001114 <lcd_printf>

	while(1){
		led.fullColor('R');
 8005440:	2152      	movs	r1, #82	; 0x52
 8005442:	4811      	ldr	r0, [pc, #68]	; (8005488 <batteryLowMode+0x6c>)
 8005444:	f7fc fd7c 	bl	8001f40 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8005448:	2064      	movs	r0, #100	; 0x64
 800544a:	f000 fccd 	bl	8005de8 <HAL_Delay>
		led.fullColor('Y');
 800544e:	2159      	movs	r1, #89	; 0x59
 8005450:	480d      	ldr	r0, [pc, #52]	; (8005488 <batteryLowMode+0x6c>)
 8005452:	f7fc fd75 	bl	8001f40 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8005456:	2064      	movs	r0, #100	; 0x64
 8005458:	f000 fcc6 	bl	8005de8 <HAL_Delay>

		if(joy_stick.getValue() == JOY_C){
 800545c:	480b      	ldr	r0, [pc, #44]	; (800548c <batteryLowMode+0x70>)
 800545e:	f7fc fd0b 	bl	8001e78 <_ZN8JoyStick8getValueEv>
 8005462:	4603      	mov	r3, r0
 8005464:	2b02      	cmp	r3, #2
 8005466:	bf0c      	ite	eq
 8005468:	2301      	moveq	r3, #1
 800546a:	2300      	movne	r3, #0
 800546c:	b2db      	uxtb	r3, r3
 800546e:	2b00      	cmp	r3, #0
 8005470:	d0e6      	beq.n	8005440 <batteryLowMode+0x24>
			HAL_Delay(500);
 8005472:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005476:	f000 fcb7 	bl	8005de8 <HAL_Delay>
			break;
 800547a:	bf00      	nop
		}
	}
}
 800547c:	bf00      	nop
 800547e:	bd80      	pop	{r7, pc}
 8005480:	08017338 	.word	0x08017338
 8005484:	08017340 	.word	0x08017340
 8005488:	2000053c 	.word	0x2000053c
 800548c:	20000530 	.word	0x20000530

08005490 <cppInit>:

void cppInit(void)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	af00      	add	r7, sp, #0
	lcd_init();
 8005494:	f7fb fdc0 	bl	8001018 <lcd_init>

	//---------- Buttery Check ----------//
	power_sensor.init();
 8005498:	4831      	ldr	r0, [pc, #196]	; (8005560 <cppInit+0xd0>)
 800549a:	f7fd fe5d 	bl	8003158 <_ZN11PowerSensor4initEv>
	HAL_Delay(100);
 800549e:	2064      	movs	r0, #100	; 0x64
 80054a0:	f000 fca2 	bl	8005de8 <HAL_Delay>
	power_sensor.updateValues();
 80054a4:	482e      	ldr	r0, [pc, #184]	; (8005560 <cppInit+0xd0>)
 80054a6:	f7fd fe67 	bl	8003178 <_ZN11PowerSensor12updateValuesEv>
	if(power_sensor.butteryCheck() == true) batteryLowMode(); //if battery low, informed
 80054aa:	482d      	ldr	r0, [pc, #180]	; (8005560 <cppInit+0xd0>)
 80054ac:	f7fd fe90 	bl	80031d0 <_ZN11PowerSensor12butteryCheckEv>
 80054b0:	4603      	mov	r3, r0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d001      	beq.n	80054ba <cppInit+0x2a>
 80054b6:	f7ff ffb1 	bl	800541c <batteryLowMode>

	// -----------initialize-------//
	if(logger.sdCardInit() == true){ //sd mount successfull
 80054ba:	482a      	ldr	r0, [pc, #168]	; (8005564 <cppInit+0xd4>)
 80054bc:	f7fd fb0e 	bl	8002adc <_ZN6Logger10sdCardInitEv>
 80054c0:	4603      	mov	r3, r0
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d007      	beq.n	80054d6 <cppInit+0x46>
		led.fullColor('G');
 80054c6:	2147      	movs	r1, #71	; 0x47
 80054c8:	4827      	ldr	r0, [pc, #156]	; (8005568 <cppInit+0xd8>)
 80054ca:	f7fc fd39 	bl	8001f40 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 80054ce:	2064      	movs	r0, #100	; 0x64
 80054d0:	f000 fc8a 	bl	8005de8 <HAL_Delay>
 80054d4:	e006      	b.n	80054e4 <cppInit+0x54>
	}
	else{ //sd mount fali
		led.fullColor('R');
 80054d6:	2152      	movs	r1, #82	; 0x52
 80054d8:	4823      	ldr	r0, [pc, #140]	; (8005568 <cppInit+0xd8>)
 80054da:	f7fc fd31 	bl	8001f40 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 80054de:	2064      	movs	r0, #100	; 0x64
 80054e0:	f000 fc82 	bl	8005de8 <HAL_Delay>
	}

	line_sensor.ADCStart();
 80054e4:	4821      	ldr	r0, [pc, #132]	; (800556c <cppInit+0xdc>)
 80054e6:	f7fc fe87 	bl	80021f8 <_ZN10LineSensor8ADCStartEv>
	motor.init();
 80054ea:	4821      	ldr	r0, [pc, #132]	; (8005570 <cppInit+0xe0>)
 80054ec:	f7fd fc2a 	bl	8002d44 <_ZN5Motor4initEv>
	encoder.init();
 80054f0:	4820      	ldr	r0, [pc, #128]	; (8005574 <cppInit+0xe4>)
 80054f2:	f7fb fe63 	bl	80011bc <_ZN7Encoder4initEv>
	imu.init();
 80054f6:	4820      	ldr	r0, [pc, #128]	; (8005578 <cppInit+0xe8>)
 80054f8:	f7fc fb1a 	bl	8001b30 <_ZN3IMU4initEv>

	line_sensor.calibration();
 80054fc:	481b      	ldr	r0, [pc, #108]	; (800556c <cppInit+0xdc>)
 80054fe:	f7fc ff71 	bl	80023e4 <_ZN10LineSensor11calibrationEv>
	HAL_Delay(1000);
 8005502:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005506:	f000 fc6f 	bl	8005de8 <HAL_Delay>

	led.fullColor('M');
 800550a:	214d      	movs	r1, #77	; 0x4d
 800550c:	4816      	ldr	r0, [pc, #88]	; (8005568 <cppInit+0xd8>)
 800550e:	f7fc fd17 	bl	8001f40 <_ZN3LED9fullColorEc>
	imu.calibration();
 8005512:	4819      	ldr	r0, [pc, #100]	; (8005578 <cppInit+0xe8>)
 8005514:	f7fc fb9e 	bl	8001c54 <_ZN3IMU11calibrationEv>

	//line_trace.setGain(0.0005, 0.000003, 0);
	line_trace.setGain(0.0005, 0.000002, 0);
 8005518:	ed9f 1a18 	vldr	s2, [pc, #96]	; 800557c <cppInit+0xec>
 800551c:	eddf 0a18 	vldr	s1, [pc, #96]	; 8005580 <cppInit+0xf0>
 8005520:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8005584 <cppInit+0xf4>
 8005524:	4818      	ldr	r0, [pc, #96]	; (8005588 <cppInit+0xf8>)
 8005526:	f7fd fa23 	bl	8002970 <_ZN9LineTrace7setGainEfff>

	//velocity_ctrl.setVelocityGain(1.5, 0, 20);
	velocity_ctrl.setVelocityGain(0, 0, 0);
 800552a:	ed9f 1a14 	vldr	s2, [pc, #80]	; 800557c <cppInit+0xec>
 800552e:	eddf 0a13 	vldr	s1, [pc, #76]	; 800557c <cppInit+0xec>
 8005532:	ed9f 0a12 	vldr	s0, [pc, #72]	; 800557c <cppInit+0xec>
 8005536:	4815      	ldr	r0, [pc, #84]	; (800558c <cppInit+0xfc>)
 8005538:	f7fe f8fa 	bl	8003730 <_ZN12VelocityCtrl15setVelocityGainEfff>
	//velocity_ctrl.setOmegaGain(0.05, 0, 7);
	velocity_ctrl.setOmegaGain(0.0, 0, 0);
 800553c:	ed9f 1a0f 	vldr	s2, [pc, #60]	; 800557c <cppInit+0xec>
 8005540:	eddf 0a0e 	vldr	s1, [pc, #56]	; 800557c <cppInit+0xec>
 8005544:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800557c <cppInit+0xec>
 8005548:	4810      	ldr	r0, [pc, #64]	; (800558c <cppInit+0xfc>)
 800554a:	f7fe f90a 	bl	8003762 <_ZN12VelocityCtrl12setOmegaGainEfff>


	encoder.clearDistance();
 800554e:	4809      	ldr	r0, [pc, #36]	; (8005574 <cppInit+0xe4>)
 8005550:	f7fb ff33 	bl	80013ba <_ZN7Encoder13clearDistanceEv>
	odometry.clearPotition();
 8005554:	480e      	ldr	r0, [pc, #56]	; (8005590 <cppInit+0x100>)
 8005556:	f7fd fde1 	bl	800311c <_ZN8Odometry13clearPotitionEv>

}
 800555a:	bf00      	nop
 800555c:	bd80      	pop	{r7, pc}
 800555e:	bf00      	nop
 8005560:	20000540 	.word	0x20000540
 8005564:	20000570 	.word	0x20000570
 8005568:	2000053c 	.word	0x2000053c
 800556c:	20000234 	.word	0x20000234
 8005570:	20000538 	.word	0x20000538
 8005574:	2001f1a8 	.word	0x2001f1a8
 8005578:	20000550 	.word	0x20000550
 800557c:	00000000 	.word	0x00000000
 8005580:	360637bd 	.word	0x360637bd
 8005584:	3a03126f 	.word	0x3a03126f
 8005588:	2001f218 	.word	0x2001f218
 800558c:	2001f1d8 	.word	0x2001f1d8
 8005590:	2001f278 	.word	0x2001f278

08005594 <cppFlip1ms>:

void cppFlip1ms(void)
{
 8005594:	b598      	push	{r3, r4, r7, lr}
 8005596:	ed2d 8b02 	vpush	{d8}
 800559a:	af00      	add	r7, sp, #0
	line_sensor.updateSensorValues();
 800559c:	4827      	ldr	r0, [pc, #156]	; (800563c <cppFlip1ms+0xa8>)
 800559e:	f7fc fe89 	bl	80022b4 <_ZN10LineSensor18updateSensorValuesEv>
	imu.updateValues();
 80055a2:	4827      	ldr	r0, [pc, #156]	; (8005640 <cppFlip1ms+0xac>)
 80055a4:	f7fc fad8 	bl	8001b58 <_ZN3IMU12updateValuesEv>
	encoder.updateCnt();
 80055a8:	4826      	ldr	r0, [pc, #152]	; (8005644 <cppFlip1ms+0xb0>)
 80055aa:	f7fb fe29 	bl	8001200 <_ZN7Encoder9updateCntEv>

	line_trace.flip();
 80055ae:	4826      	ldr	r0, [pc, #152]	; (8005648 <cppFlip1ms+0xb4>)
 80055b0:	f7fd fa16 	bl	80029e0 <_ZN9LineTrace4flipEv>
	velocity_ctrl.flip();
 80055b4:	4825      	ldr	r0, [pc, #148]	; (800564c <cppFlip1ms+0xb8>)
 80055b6:	f7fe f8ed 	bl	8003794 <_ZN12VelocityCtrl4flipEv>
	odometry.flip();
 80055ba:	4825      	ldr	r0, [pc, #148]	; (8005650 <cppFlip1ms+0xbc>)
 80055bc:	f7fd fd92 	bl	80030e4 <_ZN8Odometry4flipEv>

	motor.motorCtrl();
 80055c0:	4824      	ldr	r0, [pc, #144]	; (8005654 <cppFlip1ms+0xc0>)
 80055c2:	f7fd fbd1 	bl	8002d68 <_ZN5Motor9motorCtrlEv>

	if(encoder.getTotalDistance() >= 10){
 80055c6:	481f      	ldr	r0, [pc, #124]	; (8005644 <cppFlip1ms+0xb0>)
 80055c8:	f7fb fee6 	bl	8001398 <_ZN7Encoder16getTotalDistanceEv>
 80055cc:	ec51 0b10 	vmov	r0, r1, d0
 80055d0:	2301      	movs	r3, #1
 80055d2:	461c      	mov	r4, r3
 80055d4:	f04f 0200 	mov.w	r2, #0
 80055d8:	4b1f      	ldr	r3, [pc, #124]	; (8005658 <cppFlip1ms+0xc4>)
 80055da:	f7fb faab 	bl	8000b34 <__aeabi_dcmpge>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d101      	bne.n	80055e8 <cppFlip1ms+0x54>
 80055e4:	2300      	movs	r3, #0
 80055e6:	461c      	mov	r4, r3
 80055e8:	b2e3      	uxtb	r3, r4
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d01e      	beq.n	800562c <cppFlip1ms+0x98>
		logger.storeDistanceAndTheta(encoder.getTotalDistance(), odometry.getTheta());
 80055ee:	4815      	ldr	r0, [pc, #84]	; (8005644 <cppFlip1ms+0xb0>)
 80055f0:	f7fb fed2 	bl	8001398 <_ZN7Encoder16getTotalDistanceEv>
 80055f4:	eeb0 8a40 	vmov.f32	s16, s0
 80055f8:	eef0 8a60 	vmov.f32	s17, s1
 80055fc:	4814      	ldr	r0, [pc, #80]	; (8005650 <cppFlip1ms+0xbc>)
 80055fe:	f7fd fd7c 	bl	80030fa <_ZN8Odometry8getThetaEv>
 8005602:	eeb0 7a40 	vmov.f32	s14, s0
 8005606:	eef0 7a60 	vmov.f32	s15, s1
 800560a:	eeb0 1a47 	vmov.f32	s2, s14
 800560e:	eef0 1a67 	vmov.f32	s3, s15
 8005612:	eeb0 0a48 	vmov.f32	s0, s16
 8005616:	eef0 0a68 	vmov.f32	s1, s17
 800561a:	4810      	ldr	r0, [pc, #64]	; (800565c <cppFlip1ms+0xc8>)
 800561c:	f7fd fade 	bl	8002bdc <_ZN6Logger21storeDistanceAndThetaEdd>
		encoder.clearTotalCnt();
 8005620:	4808      	ldr	r0, [pc, #32]	; (8005644 <cppFlip1ms+0xb0>)
 8005622:	f7fb ff05 	bl	8001430 <_ZN7Encoder13clearTotalCntEv>
		odometry.clearPotition();
 8005626:	480a      	ldr	r0, [pc, #40]	; (8005650 <cppFlip1ms+0xbc>)
 8005628:	f7fd fd78 	bl	800311c <_ZN8Odometry13clearPotitionEv>
	}

	encoder.clearCnt();
 800562c:	4805      	ldr	r0, [pc, #20]	; (8005644 <cppFlip1ms+0xb0>)
 800562e:	f7fb fed5 	bl	80013dc <_ZN7Encoder8clearCntEv>

	//Buttery Check
	//power_sensor.updateValues();
	//if(power_sensor.butteryCheck() == true) led.fullColor('R');

}
 8005632:	bf00      	nop
 8005634:	46bd      	mov	sp, r7
 8005636:	ecbd 8b02 	vpop	{d8}
 800563a:	bd98      	pop	{r3, r4, r7, pc}
 800563c:	20000234 	.word	0x20000234
 8005640:	20000550 	.word	0x20000550
 8005644:	2001f1a8 	.word	0x2001f1a8
 8005648:	2001f218 	.word	0x2001f218
 800564c:	2001f1d8 	.word	0x2001f1d8
 8005650:	2001f278 	.word	0x2001f278
 8005654:	20000538 	.word	0x20000538
 8005658:	40240000 	.word	0x40240000
 800565c:	20000570 	.word	0x20000570

08005660 <cppFlip100ns>:

void cppFlip100ns(void)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	af00      	add	r7, sp, #0
	line_sensor.storeSensorValues();
 8005664:	4802      	ldr	r0, [pc, #8]	; (8005670 <cppFlip100ns+0x10>)
 8005666:	f7fc fdd7 	bl	8002218 <_ZN10LineSensor17storeSensorValuesEv>
}
 800566a:	bf00      	nop
 800566c:	bd80      	pop	{r7, pc}
 800566e:	bf00      	nop
 8005670:	20000234 	.word	0x20000234

08005674 <cppFlip10ms>:

void cppFlip10ms(void)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	af00      	add	r7, sp, #0
	logger.storeLog(line_sensor.sensor[7]);
 8005678:	4b04      	ldr	r3, [pc, #16]	; (800568c <cppFlip10ms+0x18>)
 800567a:	edd3 7ab7 	vldr	s15, [r3, #732]	; 0x2dc
 800567e:	eeb0 0a67 	vmov.f32	s0, s15
 8005682:	4803      	ldr	r0, [pc, #12]	; (8005690 <cppFlip10ms+0x1c>)
 8005684:	f7fd fa72 	bl	8002b6c <_ZN6Logger8storeLogEf>
	//logger.storeDistanceAndTheta(encoder.getDistance(), velocity_ctrl.getCurrentOmega()*DELTA_T);
}
 8005688:	bf00      	nop
 800568a:	bd80      	pop	{r7, pc}
 800568c:	20000234 	.word	0x20000234
 8005690:	20000570 	.word	0x20000570

08005694 <cppExit>:

void cppExit(uint16_t gpio_pin)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b082      	sub	sp, #8
 8005698:	af00      	add	r7, sp, #0
 800569a:	4603      	mov	r3, r0
 800569c:	80fb      	strh	r3, [r7, #6]
	side_sensor.updateStatus(gpio_pin);
 800569e:	88fb      	ldrh	r3, [r7, #6]
 80056a0:	4619      	mov	r1, r3
 80056a2:	4803      	ldr	r0, [pc, #12]	; (80056b0 <cppExit+0x1c>)
 80056a4:	f7fd fe20 	bl	80032e8 <_ZN10SideSensor12updateStatusEt>
}
 80056a8:	bf00      	nop
 80056aa:	3708      	adds	r7, #8
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}
 80056b0:	2000052c 	.word	0x2000052c
 80056b4:	00000000 	.word	0x00000000

080056b8 <cppLoop>:

void cppLoop(void)
{
 80056b8:	b590      	push	{r4, r7, lr}
 80056ba:	b089      	sub	sp, #36	; 0x24
 80056bc:	af02      	add	r7, sp, #8
	switch(rotary_switch.getValue()){
 80056be:	48be      	ldr	r0, [pc, #760]	; (80059b8 <cppLoop+0x300>)
 80056c0:	f7fd fdb8 	bl	8003234 <_ZN12RotarySwitch8getValueEv>
 80056c4:	4603      	mov	r3, r0
 80056c6:	2b0f      	cmp	r3, #15
 80056c8:	f200 8269 	bhi.w	8005b9e <cppLoop+0x4e6>
 80056cc:	a201      	add	r2, pc, #4	; (adr r2, 80056d4 <cppLoop+0x1c>)
 80056ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056d2:	bf00      	nop
 80056d4:	08005715 	.word	0x08005715
 80056d8:	08005737 	.word	0x08005737
 80056dc:	080057bf 	.word	0x080057bf
 80056e0:	0800586b 	.word	0x0800586b
 80056e4:	08005923 	.word	0x08005923
 80056e8:	08005a1d 	.word	0x08005a1d
 80056ec:	08005ae7 	.word	0x08005ae7
 80056f0:	08005b9f 	.word	0x08005b9f
 80056f4:	08005b9f 	.word	0x08005b9f
 80056f8:	08005b9f 	.word	0x08005b9f
 80056fc:	08005b9f 	.word	0x08005b9f
 8005700:	08005b9f 	.word	0x08005b9f
 8005704:	08005b9f 	.word	0x08005b9f
 8005708:	08005b9f 	.word	0x08005b9f
 800570c:	08005b9f 	.word	0x08005b9f
 8005710:	08005b9f 	.word	0x08005b9f

	case 0:
		lcd_clear();
 8005714:	f7fb fcc4 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8005718:	2100      	movs	r1, #0
 800571a:	2000      	movs	r0, #0
 800571c:	f7fb fcd0 	bl	80010c0 <lcd_locate>
		lcd_printf("LCD");
 8005720:	48a6      	ldr	r0, [pc, #664]	; (80059bc <cppLoop+0x304>)
 8005722:	f7fb fcf7 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8005726:	2101      	movs	r1, #1
 8005728:	2000      	movs	r0, #0
 800572a:	f7fb fcc9 	bl	80010c0 <lcd_locate>
		lcd_printf("TEST0");
 800572e:	48a4      	ldr	r0, [pc, #656]	; (80059c0 <cppLoop+0x308>)
 8005730:	f7fb fcf0 	bl	8001114 <lcd_printf>
		break;
 8005734:	e240      	b.n	8005bb8 <cppLoop+0x500>

	case 1:
		lcd_clear();
 8005736:	f7fb fcb3 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800573a:	2100      	movs	r1, #0
 800573c:	2000      	movs	r0, #0
 800573e:	f7fb fcbf 	bl	80010c0 <lcd_locate>
		lcd_printf("velocity");
 8005742:	48a0      	ldr	r0, [pc, #640]	; (80059c4 <cppLoop+0x30c>)
 8005744:	f7fb fce6 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8005748:	2101      	movs	r1, #1
 800574a:	2000      	movs	r0, #0
 800574c:	f7fb fcb8 	bl	80010c0 <lcd_locate>
		lcd_printf("test");
 8005750:	489d      	ldr	r0, [pc, #628]	; (80059c8 <cppLoop+0x310>)
 8005752:	f7fb fcdf 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8005756:	489d      	ldr	r0, [pc, #628]	; (80059cc <cppLoop+0x314>)
 8005758:	f7fc fb8e 	bl	8001e78 <_ZN8JoyStick8getValueEv>
 800575c:	4603      	mov	r3, r0
 800575e:	2b02      	cmp	r3, #2
 8005760:	bf0c      	ite	eq
 8005762:	2301      	moveq	r3, #1
 8005764:	2300      	movne	r3, #0
 8005766:	b2db      	uxtb	r3, r3
 8005768:	2b00      	cmp	r3, #0
 800576a:	f000 821a 	beq.w	8005ba2 <cppLoop+0x4ea>
			HAL_Delay(500);
 800576e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005772:	f000 fb39 	bl	8005de8 <HAL_Delay>

			logger.start();
 8005776:	4896      	ldr	r0, [pc, #600]	; (80059d0 <cppLoop+0x318>)
 8005778:	f7fd fab3 	bl	8002ce2 <_ZN6Logger5startEv>
			velocity_ctrl.start();
 800577c:	4895      	ldr	r0, [pc, #596]	; (80059d4 <cppLoop+0x31c>)
 800577e:	f7fe f81c 	bl	80037ba <_ZN12VelocityCtrl5startEv>
			velocity_ctrl.setVelocity(0.0, 0.0);
 8005782:	eddf 0a95 	vldr	s1, [pc, #596]	; 80059d8 <cppLoop+0x320>
 8005786:	ed9f 0a94 	vldr	s0, [pc, #592]	; 80059d8 <cppLoop+0x320>
 800578a:	4892      	ldr	r0, [pc, #584]	; (80059d4 <cppLoop+0x31c>)
 800578c:	f7fd ffbc 	bl	8003708 <_ZN12VelocityCtrl11setVelocityEff>
			led.LR(1, -1);
 8005790:	f04f 32ff 	mov.w	r2, #4294967295
 8005794:	2101      	movs	r1, #1
 8005796:	4891      	ldr	r0, [pc, #580]	; (80059dc <cppLoop+0x324>)
 8005798:	f7fc fc8e 	bl	80020b8 <_ZN3LED2LREaa>

			HAL_Delay(3000);
 800579c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80057a0:	f000 fb22 	bl	8005de8 <HAL_Delay>

			velocity_ctrl.stop();
 80057a4:	488b      	ldr	r0, [pc, #556]	; (80059d4 <cppLoop+0x31c>)
 80057a6:	f7fe f817 	bl	80037d8 <_ZN12VelocityCtrl4stopEv>
			led.LR(0, -1);
 80057aa:	f04f 32ff 	mov.w	r2, #4294967295
 80057ae:	2100      	movs	r1, #0
 80057b0:	488a      	ldr	r0, [pc, #552]	; (80059dc <cppLoop+0x324>)
 80057b2:	f7fc fc81 	bl	80020b8 <_ZN3LED2LREaa>

			logger.stop();
 80057b6:	4886      	ldr	r0, [pc, #536]	; (80059d0 <cppLoop+0x318>)
 80057b8:	f7fd faa3 	bl	8002d02 <_ZN6Logger4stopEv>
		}

		break;
 80057bc:	e1f1      	b.n	8005ba2 <cppLoop+0x4ea>

	case 2:
		lcd_clear();
 80057be:	f7fb fc6f 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80057c2:	2100      	movs	r1, #0
 80057c4:	2000      	movs	r0, #0
 80057c6:	f7fb fc7b 	bl	80010c0 <lcd_locate>
		lcd_printf("LOG");
 80057ca:	4885      	ldr	r0, [pc, #532]	; (80059e0 <cppLoop+0x328>)
 80057cc:	f7fb fca2 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80057d0:	2101      	movs	r1, #1
 80057d2:	2000      	movs	r0, #0
 80057d4:	f7fb fc74 	bl	80010c0 <lcd_locate>
		lcd_printf("SAVE");
 80057d8:	4882      	ldr	r0, [pc, #520]	; (80059e4 <cppLoop+0x32c>)
 80057da:	f7fb fc9b 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80057de:	487b      	ldr	r0, [pc, #492]	; (80059cc <cppLoop+0x314>)
 80057e0:	f7fc fb4a 	bl	8001e78 <_ZN8JoyStick8getValueEv>
 80057e4:	4603      	mov	r3, r0
 80057e6:	2b02      	cmp	r3, #2
 80057e8:	bf0c      	ite	eq
 80057ea:	2301      	moveq	r3, #1
 80057ec:	2300      	movne	r3, #0
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	f000 81d8 	beq.w	8005ba6 <cppLoop+0x4ee>
			led.LR(-1, 1);
 80057f6:	2201      	movs	r2, #1
 80057f8:	f04f 31ff 	mov.w	r1, #4294967295
 80057fc:	4877      	ldr	r0, [pc, #476]	; (80059dc <cppLoop+0x324>)
 80057fe:	f7fc fc5b 	bl	80020b8 <_ZN3LED2LREaa>

			HAL_Delay(1000);
 8005802:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005806:	f000 faef 	bl	8005de8 <HAL_Delay>
			float f = 0.123456789123456789123456789;
 800580a:	4b77      	ldr	r3, [pc, #476]	; (80059e8 <cppLoop+0x330>)
 800580c:	617b      	str	r3, [r7, #20]
			double d = 0.123456789123456789123456789;
 800580e:	a468      	add	r4, pc, #416	; (adr r4, 80059b0 <cppLoop+0x2f8>)
 8005810:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005814:	e9c7 3402 	strd	r3, r4, [r7, #8]
			mon_f = f;
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	4618      	mov	r0, r3
 800581c:	f7fa feac 	bl	8000578 <__aeabi_f2d>
 8005820:	4603      	mov	r3, r0
 8005822:	460c      	mov	r4, r1
 8005824:	4a71      	ldr	r2, [pc, #452]	; (80059ec <cppLoop+0x334>)
 8005826:	e9c2 3400 	strd	r3, r4, [r2]
			mon_d = d;
 800582a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800582e:	4a70      	ldr	r2, [pc, #448]	; (80059f0 <cppLoop+0x338>)
 8005830:	e9c2 3400 	strd	r3, r4, [r2]
			sd_write_array_float("type test", "float.txt", 1, &f, OVER_WRITE);
 8005834:	f107 0214 	add.w	r2, r7, #20
 8005838:	2300      	movs	r3, #0
 800583a:	9300      	str	r3, [sp, #0]
 800583c:	4613      	mov	r3, r2
 800583e:	2201      	movs	r2, #1
 8005840:	496c      	ldr	r1, [pc, #432]	; (80059f4 <cppLoop+0x33c>)
 8005842:	486d      	ldr	r0, [pc, #436]	; (80059f8 <cppLoop+0x340>)
 8005844:	f7fb fe86 	bl	8001554 <sd_write_array_float>
			sd_write_array_double("type test", "double.txt", 1, &d, OVER_WRITE);
 8005848:	f107 0208 	add.w	r2, r7, #8
 800584c:	2300      	movs	r3, #0
 800584e:	9300      	str	r3, [sp, #0]
 8005850:	4613      	mov	r3, r2
 8005852:	2201      	movs	r2, #1
 8005854:	4969      	ldr	r1, [pc, #420]	; (80059fc <cppLoop+0x344>)
 8005856:	4868      	ldr	r0, [pc, #416]	; (80059f8 <cppLoop+0x340>)
 8005858:	f7fb fee2 	bl	8001620 <sd_write_array_double>

			led.LR(-1, 0);
 800585c:	2200      	movs	r2, #0
 800585e:	f04f 31ff 	mov.w	r1, #4294967295
 8005862:	485e      	ldr	r0, [pc, #376]	; (80059dc <cppLoop+0x324>)
 8005864:	f7fc fc28 	bl	80020b8 <_ZN3LED2LREaa>
		}
		break;
 8005868:	e19d      	b.n	8005ba6 <cppLoop+0x4ee>

	case 3:
		led.fullColor('C');
 800586a:	2143      	movs	r1, #67	; 0x43
 800586c:	485b      	ldr	r0, [pc, #364]	; (80059dc <cppLoop+0x324>)
 800586e:	f7fc fb67 	bl	8001f40 <_ZN3LED9fullColorEc>

		lcd_clear();
 8005872:	f7fb fc15 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8005876:	2100      	movs	r1, #0
 8005878:	2000      	movs	r0, #0
 800587a:	f7fb fc21 	bl	80010c0 <lcd_locate>
		lcd_printf("Line");
 800587e:	4860      	ldr	r0, [pc, #384]	; (8005a00 <cppLoop+0x348>)
 8005880:	f7fb fc48 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8005884:	2101      	movs	r1, #1
 8005886:	2000      	movs	r0, #0
 8005888:	f7fb fc1a 	bl	80010c0 <lcd_locate>
		lcd_printf("Trace");
 800588c:	485d      	ldr	r0, [pc, #372]	; (8005a04 <cppLoop+0x34c>)
 800588e:	f7fb fc41 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8005892:	484e      	ldr	r0, [pc, #312]	; (80059cc <cppLoop+0x314>)
 8005894:	f7fc faf0 	bl	8001e78 <_ZN8JoyStick8getValueEv>
 8005898:	4603      	mov	r3, r0
 800589a:	2b02      	cmp	r3, #2
 800589c:	bf0c      	ite	eq
 800589e:	2301      	moveq	r3, #1
 80058a0:	2300      	movne	r3, #0
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	f000 8180 	beq.w	8005baa <cppLoop+0x4f2>
			led.LR(-1, 1);
 80058aa:	2201      	movs	r2, #1
 80058ac:	f04f 31ff 	mov.w	r1, #4294967295
 80058b0:	484a      	ldr	r0, [pc, #296]	; (80059dc <cppLoop+0x324>)
 80058b2:	f7fc fc01 	bl	80020b8 <_ZN3LED2LREaa>
			HAL_Delay(500);
 80058b6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80058ba:	f000 fa95 	bl	8005de8 <HAL_Delay>

			logger.start();
 80058be:	4844      	ldr	r0, [pc, #272]	; (80059d0 <cppLoop+0x318>)
 80058c0:	f7fd fa0f 	bl	8002ce2 <_ZN6Logger5startEv>
			line_trace.setNormalRatio(0.1);
 80058c4:	ed9f 0a50 	vldr	s0, [pc, #320]	; 8005a08 <cppLoop+0x350>
 80058c8:	4850      	ldr	r0, [pc, #320]	; (8005a0c <cppLoop+0x354>)
 80058ca:	f7fd f86a 	bl	80029a2 <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 80058ce:	484f      	ldr	r0, [pc, #316]	; (8005a0c <cppLoop+0x354>)
 80058d0:	f7fd f8be 	bl	8002a50 <_ZN9LineTrace5startEv>

			HAL_Delay(5000);
 80058d4:	f241 3088 	movw	r0, #5000	; 0x1388
 80058d8:	f000 fa86 	bl	8005de8 <HAL_Delay>

			logger.stop();
 80058dc:	483c      	ldr	r0, [pc, #240]	; (80059d0 <cppLoop+0x318>)
 80058de:	f7fd fa10 	bl	8002d02 <_ZN6Logger4stopEv>
			line_trace.setNormalRatio(0.1);
 80058e2:	ed9f 0a49 	vldr	s0, [pc, #292]	; 8005a08 <cppLoop+0x350>
 80058e6:	4849      	ldr	r0, [pc, #292]	; (8005a0c <cppLoop+0x354>)
 80058e8:	f7fd f85b 	bl	80029a2 <_ZN9LineTrace14setNormalRatioEf>
			line_trace.stop();
 80058ec:	4847      	ldr	r0, [pc, #284]	; (8005a0c <cppLoop+0x354>)
 80058ee:	f7fd f8bf 	bl	8002a70 <_ZN9LineTrace4stopEv>

			led.LR(1, -1);
 80058f2:	f04f 32ff 	mov.w	r2, #4294967295
 80058f6:	2101      	movs	r1, #1
 80058f8:	4838      	ldr	r0, [pc, #224]	; (80059dc <cppLoop+0x324>)
 80058fa:	f7fc fbdd 	bl	80020b8 <_ZN3LED2LREaa>
			logger.saveLogs("line_sensors", "sensor7.csv");
 80058fe:	4a44      	ldr	r2, [pc, #272]	; (8005a10 <cppLoop+0x358>)
 8005900:	4944      	ldr	r1, [pc, #272]	; (8005a14 <cppLoop+0x35c>)
 8005902:	4833      	ldr	r0, [pc, #204]	; (80059d0 <cppLoop+0x318>)
 8005904:	f7fd f9b6 	bl	8002c74 <_ZN6Logger8saveLogsEPKcS1_>
			led.LR(0, -1);
 8005908:	f04f 32ff 	mov.w	r2, #4294967295
 800590c:	2100      	movs	r1, #0
 800590e:	4833      	ldr	r0, [pc, #204]	; (80059dc <cppLoop+0x324>)
 8005910:	f7fc fbd2 	bl	80020b8 <_ZN3LED2LREaa>

			led.LR(-1, 0);
 8005914:	2200      	movs	r2, #0
 8005916:	f04f 31ff 	mov.w	r1, #4294967295
 800591a:	4830      	ldr	r0, [pc, #192]	; (80059dc <cppLoop+0x324>)
 800591c:	f7fc fbcc 	bl	80020b8 <_ZN3LED2LREaa>
		}

		break;
 8005920:	e143      	b.n	8005baa <cppLoop+0x4f2>

	case 4:
		led.fullColor('M');
 8005922:	214d      	movs	r1, #77	; 0x4d
 8005924:	482d      	ldr	r0, [pc, #180]	; (80059dc <cppLoop+0x324>)
 8005926:	f7fc fb0b 	bl	8001f40 <_ZN3LED9fullColorEc>

		lcd_clear();
 800592a:	f7fb fbb9 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800592e:	2100      	movs	r1, #0
 8005930:	2000      	movs	r0, #0
 8005932:	f7fb fbc5 	bl	80010c0 <lcd_locate>
		lcd_printf("Steering");
 8005936:	4838      	ldr	r0, [pc, #224]	; (8005a18 <cppLoop+0x360>)
 8005938:	f7fb fbec 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800593c:	2101      	movs	r1, #1
 800593e:	2000      	movs	r0, #0
 8005940:	f7fb fbbe 	bl	80010c0 <lcd_locate>
		lcd_printf("Trace");
 8005944:	482f      	ldr	r0, [pc, #188]	; (8005a04 <cppLoop+0x34c>)
 8005946:	f7fb fbe5 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800594a:	4820      	ldr	r0, [pc, #128]	; (80059cc <cppLoop+0x314>)
 800594c:	f7fc fa94 	bl	8001e78 <_ZN8JoyStick8getValueEv>
 8005950:	4603      	mov	r3, r0
 8005952:	2b02      	cmp	r3, #2
 8005954:	bf0c      	ite	eq
 8005956:	2301      	moveq	r3, #1
 8005958:	2300      	movne	r3, #0
 800595a:	b2db      	uxtb	r3, r3
 800595c:	2b00      	cmp	r3, #0
 800595e:	f000 8126 	beq.w	8005bae <cppLoop+0x4f6>
			led.LR(-1, 1);
 8005962:	2201      	movs	r2, #1
 8005964:	f04f 31ff 	mov.w	r1, #4294967295
 8005968:	481c      	ldr	r0, [pc, #112]	; (80059dc <cppLoop+0x324>)
 800596a:	f7fc fba5 	bl	80020b8 <_ZN3LED2LREaa>
			HAL_Delay(500);
 800596e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005972:	f000 fa39 	bl	8005de8 <HAL_Delay>

			line_trace.setTargetVelocity(0.1);
 8005976:	ed9f 0a24 	vldr	s0, [pc, #144]	; 8005a08 <cppLoop+0x350>
 800597a:	4824      	ldr	r0, [pc, #144]	; (8005a0c <cppLoop+0x354>)
 800597c:	f7fd f820 	bl	80029c0 <_ZN9LineTrace17setTargetVelocityEf>
			velocity_ctrl.start();
 8005980:	4814      	ldr	r0, [pc, #80]	; (80059d4 <cppLoop+0x31c>)
 8005982:	f7fd ff1a 	bl	80037ba <_ZN12VelocityCtrl5startEv>
			line_trace.start();
 8005986:	4821      	ldr	r0, [pc, #132]	; (8005a0c <cppLoop+0x354>)
 8005988:	f7fd f862 	bl	8002a50 <_ZN9LineTrace5startEv>

			HAL_Delay(10000);
 800598c:	f242 7010 	movw	r0, #10000	; 0x2710
 8005990:	f000 fa2a 	bl	8005de8 <HAL_Delay>

			line_trace.stop();
 8005994:	481d      	ldr	r0, [pc, #116]	; (8005a0c <cppLoop+0x354>)
 8005996:	f7fd f86b 	bl	8002a70 <_ZN9LineTrace4stopEv>
			velocity_ctrl.stop();
 800599a:	480e      	ldr	r0, [pc, #56]	; (80059d4 <cppLoop+0x31c>)
 800599c:	f7fd ff1c 	bl	80037d8 <_ZN12VelocityCtrl4stopEv>


			led.LR(-1, 0);
 80059a0:	2200      	movs	r2, #0
 80059a2:	f04f 31ff 	mov.w	r1, #4294967295
 80059a6:	480d      	ldr	r0, [pc, #52]	; (80059dc <cppLoop+0x324>)
 80059a8:	f7fc fb86 	bl	80020b8 <_ZN3LED2LREaa>
		}
		break;
 80059ac:	e0ff      	b.n	8005bae <cppLoop+0x4f6>
 80059ae:	bf00      	nop
 80059b0:	37c1215e 	.word	0x37c1215e
 80059b4:	3fbf9add 	.word	0x3fbf9add
 80059b8:	20000534 	.word	0x20000534
 80059bc:	08017344 	.word	0x08017344
 80059c0:	08017348 	.word	0x08017348
 80059c4:	08017350 	.word	0x08017350
 80059c8:	0801735c 	.word	0x0801735c
 80059cc:	20000530 	.word	0x20000530
 80059d0:	20000570 	.word	0x20000570
 80059d4:	2001f1d8 	.word	0x2001f1d8
 80059d8:	00000000 	.word	0x00000000
 80059dc:	2000053c 	.word	0x2000053c
 80059e0:	08017364 	.word	0x08017364
 80059e4:	08017368 	.word	0x08017368
 80059e8:	3dfcd6ea 	.word	0x3dfcd6ea
 80059ec:	2001f2a8 	.word	0x2001f2a8
 80059f0:	2001f2b0 	.word	0x2001f2b0
 80059f4:	08017370 	.word	0x08017370
 80059f8:	0801737c 	.word	0x0801737c
 80059fc:	08017388 	.word	0x08017388
 8005a00:	08017394 	.word	0x08017394
 8005a04:	0801739c 	.word	0x0801739c
 8005a08:	3dcccccd 	.word	0x3dcccccd
 8005a0c:	2001f218 	.word	0x2001f218
 8005a10:	080173a4 	.word	0x080173a4
 8005a14:	080173b0 	.word	0x080173b0
 8005a18:	080173c0 	.word	0x080173c0

	case 5:
		led.fullColor('Y');
 8005a1c:	2159      	movs	r1, #89	; 0x59
 8005a1e:	486a      	ldr	r0, [pc, #424]	; (8005bc8 <cppLoop+0x510>)
 8005a20:	f7fc fa8e 	bl	8001f40 <_ZN3LED9fullColorEc>

		lcd_clear();
 8005a24:	f7fb fb3c 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8005a28:	2100      	movs	r1, #0
 8005a2a:	2000      	movs	r0, #0
 8005a2c:	f7fb fb48 	bl	80010c0 <lcd_locate>
		lcd_printf("Teoshi");
 8005a30:	4866      	ldr	r0, [pc, #408]	; (8005bcc <cppLoop+0x514>)
 8005a32:	f7fb fb6f 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8005a36:	2101      	movs	r1, #1
 8005a38:	2000      	movs	r0, #0
 8005a3a:	f7fb fb41 	bl	80010c0 <lcd_locate>
		lcd_printf("Following");
 8005a3e:	4864      	ldr	r0, [pc, #400]	; (8005bd0 <cppLoop+0x518>)
 8005a40:	f7fb fb68 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8005a44:	4863      	ldr	r0, [pc, #396]	; (8005bd4 <cppLoop+0x51c>)
 8005a46:	f7fc fa17 	bl	8001e78 <_ZN8JoyStick8getValueEv>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	2b02      	cmp	r3, #2
 8005a4e:	bf0c      	ite	eq
 8005a50:	2301      	moveq	r3, #1
 8005a52:	2300      	movne	r3, #0
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	f000 80ab 	beq.w	8005bb2 <cppLoop+0x4fa>
			led.LR(-1, 1);
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	f04f 31ff 	mov.w	r1, #4294967295
 8005a62:	4859      	ldr	r0, [pc, #356]	; (8005bc8 <cppLoop+0x510>)
 8005a64:	f7fc fb28 	bl	80020b8 <_ZN3LED2LREaa>
			HAL_Delay(500);
 8005a68:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005a6c:	f000 f9bc 	bl	8005de8 <HAL_Delay>

			line_trace.setNormalRatio(0.0);
 8005a70:	ed9f 0a59 	vldr	s0, [pc, #356]	; 8005bd8 <cppLoop+0x520>
 8005a74:	4859      	ldr	r0, [pc, #356]	; (8005bdc <cppLoop+0x524>)
 8005a76:	f7fc ff94 	bl	80029a2 <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 8005a7a:	4858      	ldr	r0, [pc, #352]	; (8005bdc <cppLoop+0x524>)
 8005a7c:	f7fc ffe8 	bl	8002a50 <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 8005a80:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005a84:	f000 f9b0 	bl	8005de8 <HAL_Delay>

			led.fullColor('R');
 8005a88:	2152      	movs	r1, #82	; 0x52
 8005a8a:	484f      	ldr	r0, [pc, #316]	; (8005bc8 <cppLoop+0x510>)
 8005a8c:	f7fc fa58 	bl	8001f40 <_ZN3LED9fullColorEc>
			encoder.clearTotalCnt();
 8005a90:	4853      	ldr	r0, [pc, #332]	; (8005be0 <cppLoop+0x528>)
 8005a92:	f7fb fccd 	bl	8001430 <_ZN7Encoder13clearTotalCntEv>
			encoder.clearDistance();
 8005a96:	4852      	ldr	r0, [pc, #328]	; (8005be0 <cppLoop+0x528>)
 8005a98:	f7fb fc8f 	bl	80013ba <_ZN7Encoder13clearDistanceEv>

			HAL_Delay(10000);
 8005a9c:	f242 7010 	movw	r0, #10000	; 0x2710
 8005aa0:	f000 f9a2 	bl	8005de8 <HAL_Delay>

			line_trace.stop();
 8005aa4:	484d      	ldr	r0, [pc, #308]	; (8005bdc <cppLoop+0x524>)
 8005aa6:	f7fc ffe3 	bl	8002a70 <_ZN9LineTrace4stopEv>
			//long total = encoder.getTotalCnt();

			//user_fopen("total_cnts", "cnts.txt");
			user_fopen("distance", "1m.txt");
 8005aaa:	494e      	ldr	r1, [pc, #312]	; (8005be4 <cppLoop+0x52c>)
 8005aac:	484e      	ldr	r0, [pc, #312]	; (8005be8 <cppLoop+0x530>)
 8005aae:	f7fb fcdd 	bl	800146c <user_fopen>
			float d = encoder.getDistance();
 8005ab2:	484b      	ldr	r0, [pc, #300]	; (8005be0 <cppLoop+0x528>)
 8005ab4:	f7fb fc5f 	bl	8001376 <_ZN7Encoder11getDistanceEv>
 8005ab8:	ec54 3b10 	vmov	r3, r4, d0
 8005abc:	4618      	mov	r0, r3
 8005abe:	4621      	mov	r1, r4
 8005ac0:	f7fb f8aa 	bl	8000c18 <__aeabi_d2f>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	607b      	str	r3, [r7, #4]
			sd_write(1, &d, ADD_WRITE);
 8005ac8:	1d3b      	adds	r3, r7, #4
 8005aca:	2201      	movs	r2, #1
 8005acc:	4619      	mov	r1, r3
 8005ace:	2001      	movs	r0, #1
 8005ad0:	f7fb fcee 	bl	80014b0 <sd_write>
			user_fclose();
 8005ad4:	f7fb fcdc 	bl	8001490 <user_fclose>

			led.LR(-1, 0);
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f04f 31ff 	mov.w	r1, #4294967295
 8005ade:	483a      	ldr	r0, [pc, #232]	; (8005bc8 <cppLoop+0x510>)
 8005ae0:	f7fc faea 	bl	80020b8 <_ZN3LED2LREaa>
		}

		break;
 8005ae4:	e065      	b.n	8005bb2 <cppLoop+0x4fa>

	case 6:
		led.fullColor('C');
 8005ae6:	2143      	movs	r1, #67	; 0x43
 8005ae8:	4837      	ldr	r0, [pc, #220]	; (8005bc8 <cppLoop+0x510>)
 8005aea:	f7fc fa29 	bl	8001f40 <_ZN3LED9fullColorEc>

		lcd_clear();
 8005aee:	f7fb fad7 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8005af2:	2100      	movs	r1, #0
 8005af4:	2000      	movs	r0, #0
 8005af6:	f7fb fae3 	bl	80010c0 <lcd_locate>
		lcd_printf("Position");
 8005afa:	483c      	ldr	r0, [pc, #240]	; (8005bec <cppLoop+0x534>)
 8005afc:	f7fb fb0a 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8005b00:	2101      	movs	r1, #1
 8005b02:	2000      	movs	r0, #0
 8005b04:	f7fb fadc 	bl	80010c0 <lcd_locate>
		lcd_printf("Record");
 8005b08:	4839      	ldr	r0, [pc, #228]	; (8005bf0 <cppLoop+0x538>)
 8005b0a:	f7fb fb03 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8005b0e:	4831      	ldr	r0, [pc, #196]	; (8005bd4 <cppLoop+0x51c>)
 8005b10:	f7fc f9b2 	bl	8001e78 <_ZN8JoyStick8getValueEv>
 8005b14:	4603      	mov	r3, r0
 8005b16:	2b02      	cmp	r3, #2
 8005b18:	bf0c      	ite	eq
 8005b1a:	2301      	moveq	r3, #1
 8005b1c:	2300      	movne	r3, #0
 8005b1e:	b2db      	uxtb	r3, r3
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d048      	beq.n	8005bb6 <cppLoop+0x4fe>
			HAL_Delay(500);
 8005b24:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005b28:	f000 f95e 	bl	8005de8 <HAL_Delay>
			led.LR(-1, 1);
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	f04f 31ff 	mov.w	r1, #4294967295
 8005b32:	4825      	ldr	r0, [pc, #148]	; (8005bc8 <cppLoop+0x510>)
 8005b34:	f7fc fac0 	bl	80020b8 <_ZN3LED2LREaa>

			line_trace.setNormalRatio(0.1);
 8005b38:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 8005bf4 <cppLoop+0x53c>
 8005b3c:	4827      	ldr	r0, [pc, #156]	; (8005bdc <cppLoop+0x524>)
 8005b3e:	f7fc ff30 	bl	80029a2 <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 8005b42:	4826      	ldr	r0, [pc, #152]	; (8005bdc <cppLoop+0x524>)
 8005b44:	f7fc ff84 	bl	8002a50 <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 8005b48:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005b4c:	f000 f94c 	bl	8005de8 <HAL_Delay>

			led.fullColor('R');
 8005b50:	2152      	movs	r1, #82	; 0x52
 8005b52:	481d      	ldr	r0, [pc, #116]	; (8005bc8 <cppLoop+0x510>)
 8005b54:	f7fc f9f4 	bl	8001f40 <_ZN3LED9fullColorEc>
			encoder.clearTotalCnt();
 8005b58:	4821      	ldr	r0, [pc, #132]	; (8005be0 <cppLoop+0x528>)
 8005b5a:	f7fb fc69 	bl	8001430 <_ZN7Encoder13clearTotalCntEv>
			encoder.clearDistance();
 8005b5e:	4820      	ldr	r0, [pc, #128]	; (8005be0 <cppLoop+0x528>)
 8005b60:	f7fb fc2b 	bl	80013ba <_ZN7Encoder13clearDistanceEv>
			odometry.clearPotition();
 8005b64:	4824      	ldr	r0, [pc, #144]	; (8005bf8 <cppLoop+0x540>)
 8005b66:	f7fd fad9 	bl	800311c <_ZN8Odometry13clearPotitionEv>
			logger.start();
 8005b6a:	4824      	ldr	r0, [pc, #144]	; (8005bfc <cppLoop+0x544>)
 8005b6c:	f7fd f8b9 	bl	8002ce2 <_ZN6Logger5startEv>

			HAL_Delay(10000);
 8005b70:	f242 7010 	movw	r0, #10000	; 0x2710
 8005b74:	f000 f938 	bl	8005de8 <HAL_Delay>

			line_trace.stop();
 8005b78:	4818      	ldr	r0, [pc, #96]	; (8005bdc <cppLoop+0x524>)
 8005b7a:	f7fc ff79 	bl	8002a70 <_ZN9LineTrace4stopEv>
			logger.stop();
 8005b7e:	481f      	ldr	r0, [pc, #124]	; (8005bfc <cppLoop+0x544>)
 8005b80:	f7fd f8bf 	bl	8002d02 <_ZN6Logger4stopEv>

			logger.saveDistanceAndTheta("Position", "delta_distance.txt", "delta_theta.txt");
 8005b84:	4b1e      	ldr	r3, [pc, #120]	; (8005c00 <cppLoop+0x548>)
 8005b86:	4a1f      	ldr	r2, [pc, #124]	; (8005c04 <cppLoop+0x54c>)
 8005b88:	4918      	ldr	r1, [pc, #96]	; (8005bec <cppLoop+0x534>)
 8005b8a:	481c      	ldr	r0, [pc, #112]	; (8005bfc <cppLoop+0x544>)
 8005b8c:	f7fd f886 	bl	8002c9c <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>

			led.LR(-1, 0);
 8005b90:	2200      	movs	r2, #0
 8005b92:	f04f 31ff 	mov.w	r1, #4294967295
 8005b96:	480c      	ldr	r0, [pc, #48]	; (8005bc8 <cppLoop+0x510>)
 8005b98:	f7fc fa8e 	bl	80020b8 <_ZN3LED2LREaa>
		}

		break;
 8005b9c:	e00b      	b.n	8005bb6 <cppLoop+0x4fe>
	case 15:

		break;

	default:
		break;
 8005b9e:	bf00      	nop
 8005ba0:	e00a      	b.n	8005bb8 <cppLoop+0x500>
		break;
 8005ba2:	bf00      	nop
 8005ba4:	e008      	b.n	8005bb8 <cppLoop+0x500>
		break;
 8005ba6:	bf00      	nop
 8005ba8:	e006      	b.n	8005bb8 <cppLoop+0x500>
		break;
 8005baa:	bf00      	nop
 8005bac:	e004      	b.n	8005bb8 <cppLoop+0x500>
		break;
 8005bae:	bf00      	nop
 8005bb0:	e002      	b.n	8005bb8 <cppLoop+0x500>
		break;
 8005bb2:	bf00      	nop
 8005bb4:	e000      	b.n	8005bb8 <cppLoop+0x500>
		break;
 8005bb6:	bf00      	nop

	}

	HAL_Delay(10);
 8005bb8:	200a      	movs	r0, #10
 8005bba:	f000 f915 	bl	8005de8 <HAL_Delay>

}
 8005bbe:	bf00      	nop
 8005bc0:	371c      	adds	r7, #28
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd90      	pop	{r4, r7, pc}
 8005bc6:	bf00      	nop
 8005bc8:	2000053c 	.word	0x2000053c
 8005bcc:	080173cc 	.word	0x080173cc
 8005bd0:	080173d4 	.word	0x080173d4
 8005bd4:	20000530 	.word	0x20000530
 8005bd8:	00000000 	.word	0x00000000
 8005bdc:	2001f218 	.word	0x2001f218
 8005be0:	2001f1a8 	.word	0x2001f1a8
 8005be4:	080173e0 	.word	0x080173e0
 8005be8:	080173e8 	.word	0x080173e8
 8005bec:	080173f4 	.word	0x080173f4
 8005bf0:	08017400 	.word	0x08017400
 8005bf4:	3dcccccd 	.word	0x3dcccccd
 8005bf8:	2001f278 	.word	0x2001f278
 8005bfc:	20000570 	.word	0x20000570
 8005c00:	08017408 	.word	0x08017408
 8005c04:	08017418 	.word	0x08017418

08005c08 <_Z41__static_initialization_and_destruction_0ii>:
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b082      	sub	sp, #8
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	6039      	str	r1, [r7, #0]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d12b      	bne.n	8005c70 <_Z41__static_initialization_and_destruction_0ii+0x68>
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d126      	bne.n	8005c70 <_Z41__static_initialization_and_destruction_0ii+0x68>
LineSensor line_sensor;
 8005c22:	4815      	ldr	r0, [pc, #84]	; (8005c78 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8005c24:	f7fc fa80 	bl	8002128 <_ZN10LineSensorC1Ev>
SideSensor side_sensor;
 8005c28:	4814      	ldr	r0, [pc, #80]	; (8005c7c <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8005c2a:	f7fd fb51 	bl	80032d0 <_ZN10SideSensorC1Ev>
JoyStick joy_stick;
 8005c2e:	4814      	ldr	r0, [pc, #80]	; (8005c80 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8005c30:	f7fc f916 	bl	8001e60 <_ZN8JoyStickC1Ev>
Motor motor;
 8005c34:	4813      	ldr	r0, [pc, #76]	; (8005c84 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8005c36:	f7fd f874 	bl	8002d22 <_ZN5MotorC1Ev>
IMU imu;
 8005c3a:	4813      	ldr	r0, [pc, #76]	; (8005c88 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8005c3c:	f7fb ff54 	bl	8001ae8 <_ZN3IMUC1Ev>
Logger logger;
 8005c40:	4812      	ldr	r0, [pc, #72]	; (8005c8c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8005c42:	f7fc ff2d 	bl	8002aa0 <_ZN6LoggerC1Ev>
Encoder encoder;
 8005c46:	4812      	ldr	r0, [pc, #72]	; (8005c90 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8005c48:	f7fb fa84 	bl	8001154 <_ZN7EncoderC1Ev>
VelocityCtrl velocity_ctrl(&motor, &encoder, &imu);
 8005c4c:	4b0e      	ldr	r3, [pc, #56]	; (8005c88 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8005c4e:	4a10      	ldr	r2, [pc, #64]	; (8005c90 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8005c50:	490c      	ldr	r1, [pc, #48]	; (8005c84 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8005c52:	4810      	ldr	r0, [pc, #64]	; (8005c94 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8005c54:	f7fd fba6 	bl	80033a4 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>
LineTrace line_trace(&motor, &line_sensor, &velocity_ctrl);
 8005c58:	4b0e      	ldr	r3, [pc, #56]	; (8005c94 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8005c5a:	4a07      	ldr	r2, [pc, #28]	; (8005c78 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8005c5c:	4909      	ldr	r1, [pc, #36]	; (8005c84 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8005c5e:	480e      	ldr	r0, [pc, #56]	; (8005c98 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8005c60:	f7fc fd5c 	bl	800271c <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrl>
Odometry odometry(&encoder, &imu, &velocity_ctrl);
 8005c64:	4b0b      	ldr	r3, [pc, #44]	; (8005c94 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8005c66:	4a08      	ldr	r2, [pc, #32]	; (8005c88 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8005c68:	4909      	ldr	r1, [pc, #36]	; (8005c90 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8005c6a:	480c      	ldr	r0, [pc, #48]	; (8005c9c <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8005c6c:	f7fd f93e 	bl	8002eec <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>
}
 8005c70:	bf00      	nop
 8005c72:	3708      	adds	r7, #8
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}
 8005c78:	20000234 	.word	0x20000234
 8005c7c:	2000052c 	.word	0x2000052c
 8005c80:	20000530 	.word	0x20000530
 8005c84:	20000538 	.word	0x20000538
 8005c88:	20000550 	.word	0x20000550
 8005c8c:	20000570 	.word	0x20000570
 8005c90:	2001f1a8 	.word	0x2001f1a8
 8005c94:	2001f1d8 	.word	0x2001f1d8
 8005c98:	2001f218 	.word	0x2001f218
 8005c9c:	2001f278 	.word	0x2001f278

08005ca0 <_GLOBAL__sub_I_line_sensor>:
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005ca8:	2001      	movs	r0, #1
 8005caa:	f7ff ffad 	bl	8005c08 <_Z41__static_initialization_and_destruction_0ii>
 8005cae:	bd80      	pop	{r7, pc}

08005cb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005cb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005ce8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005cb4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005cb6:	e003      	b.n	8005cc0 <LoopCopyDataInit>

08005cb8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005cb8:	4b0c      	ldr	r3, [pc, #48]	; (8005cec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005cba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005cbc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005cbe:	3104      	adds	r1, #4

08005cc0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005cc0:	480b      	ldr	r0, [pc, #44]	; (8005cf0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005cc2:	4b0c      	ldr	r3, [pc, #48]	; (8005cf4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005cc4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005cc6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005cc8:	d3f6      	bcc.n	8005cb8 <CopyDataInit>
  ldr  r2, =_sbss
 8005cca:	4a0b      	ldr	r2, [pc, #44]	; (8005cf8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005ccc:	e002      	b.n	8005cd4 <LoopFillZerobss>

08005cce <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005cce:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005cd0:	f842 3b04 	str.w	r3, [r2], #4

08005cd4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005cd4:	4b09      	ldr	r3, [pc, #36]	; (8005cfc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005cd6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005cd8:	d3f9      	bcc.n	8005cce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005cda:	f7ff fb89 	bl	80053f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005cde:	f00c fb7b 	bl	80123d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005ce2:	f7fd fe55 	bl	8003990 <main>
  bx  lr    
 8005ce6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005ce8:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8005cec:	08017e20 	.word	0x08017e20
  ldr  r0, =_sdata
 8005cf0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005cf4:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8005cf8:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8005cfc:	20023e04 	.word	0x20023e04

08005d00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005d00:	e7fe      	b.n	8005d00 <ADC_IRQHandler>
	...

08005d04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005d08:	4b0e      	ldr	r3, [pc, #56]	; (8005d44 <HAL_Init+0x40>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a0d      	ldr	r2, [pc, #52]	; (8005d44 <HAL_Init+0x40>)
 8005d0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005d12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005d14:	4b0b      	ldr	r3, [pc, #44]	; (8005d44 <HAL_Init+0x40>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a0a      	ldr	r2, [pc, #40]	; (8005d44 <HAL_Init+0x40>)
 8005d1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005d1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005d20:	4b08      	ldr	r3, [pc, #32]	; (8005d44 <HAL_Init+0x40>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a07      	ldr	r2, [pc, #28]	; (8005d44 <HAL_Init+0x40>)
 8005d26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005d2c:	2003      	movs	r0, #3
 8005d2e:	f000 fd51 	bl	80067d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005d32:	2000      	movs	r0, #0
 8005d34:	f000 f808 	bl	8005d48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005d38:	f7fe fd48 	bl	80047cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005d3c:	2300      	movs	r3, #0
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	bd80      	pop	{r7, pc}
 8005d42:	bf00      	nop
 8005d44:	40023c00 	.word	0x40023c00

08005d48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b082      	sub	sp, #8
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005d50:	4b12      	ldr	r3, [pc, #72]	; (8005d9c <HAL_InitTick+0x54>)
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	4b12      	ldr	r3, [pc, #72]	; (8005da0 <HAL_InitTick+0x58>)
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	4619      	mov	r1, r3
 8005d5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005d5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d66:	4618      	mov	r0, r3
 8005d68:	f000 fd69 	bl	800683e <HAL_SYSTICK_Config>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d001      	beq.n	8005d76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005d72:	2301      	movs	r3, #1
 8005d74:	e00e      	b.n	8005d94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2b0f      	cmp	r3, #15
 8005d7a:	d80a      	bhi.n	8005d92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	6879      	ldr	r1, [r7, #4]
 8005d80:	f04f 30ff 	mov.w	r0, #4294967295
 8005d84:	f000 fd31 	bl	80067ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005d88:	4a06      	ldr	r2, [pc, #24]	; (8005da4 <HAL_InitTick+0x5c>)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	e000      	b.n	8005d94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005d92:	2301      	movs	r3, #1
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3708      	adds	r7, #8
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}
 8005d9c:	20000000 	.word	0x20000000
 8005da0:	20000008 	.word	0x20000008
 8005da4:	20000004 	.word	0x20000004

08005da8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005da8:	b480      	push	{r7}
 8005daa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005dac:	4b06      	ldr	r3, [pc, #24]	; (8005dc8 <HAL_IncTick+0x20>)
 8005dae:	781b      	ldrb	r3, [r3, #0]
 8005db0:	461a      	mov	r2, r3
 8005db2:	4b06      	ldr	r3, [pc, #24]	; (8005dcc <HAL_IncTick+0x24>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4413      	add	r3, r2
 8005db8:	4a04      	ldr	r2, [pc, #16]	; (8005dcc <HAL_IncTick+0x24>)
 8005dba:	6013      	str	r3, [r2, #0]
}
 8005dbc:	bf00      	nop
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr
 8005dc6:	bf00      	nop
 8005dc8:	20000008 	.word	0x20000008
 8005dcc:	20021d88 	.word	0x20021d88

08005dd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	af00      	add	r7, sp, #0
  return uwTick;
 8005dd4:	4b03      	ldr	r3, [pc, #12]	; (8005de4 <HAL_GetTick+0x14>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de0:	4770      	bx	lr
 8005de2:	bf00      	nop
 8005de4:	20021d88 	.word	0x20021d88

08005de8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b084      	sub	sp, #16
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005df0:	f7ff ffee 	bl	8005dd0 <HAL_GetTick>
 8005df4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e00:	d005      	beq.n	8005e0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005e02:	4b09      	ldr	r3, [pc, #36]	; (8005e28 <HAL_Delay+0x40>)
 8005e04:	781b      	ldrb	r3, [r3, #0]
 8005e06:	461a      	mov	r2, r3
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	4413      	add	r3, r2
 8005e0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005e0e:	bf00      	nop
 8005e10:	f7ff ffde 	bl	8005dd0 <HAL_GetTick>
 8005e14:	4602      	mov	r2, r0
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	1ad3      	subs	r3, r2, r3
 8005e1a:	68fa      	ldr	r2, [r7, #12]
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d8f7      	bhi.n	8005e10 <HAL_Delay+0x28>
  {
  }
}
 8005e20:	bf00      	nop
 8005e22:	3710      	adds	r7, #16
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}
 8005e28:	20000008 	.word	0x20000008

08005e2c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b084      	sub	sp, #16
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005e34:	2300      	movs	r3, #0
 8005e36:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d101      	bne.n	8005e42 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e033      	b.n	8005eaa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d109      	bne.n	8005e5e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f7fe fce6 	bl	800481c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2200      	movs	r2, #0
 8005e54:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e62:	f003 0310 	and.w	r3, r3, #16
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d118      	bne.n	8005e9c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e6e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005e72:	f023 0302 	bic.w	r3, r3, #2
 8005e76:	f043 0202 	orr.w	r2, r3, #2
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f000 fa5a 	bl	8006338 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2200      	movs	r2, #0
 8005e88:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e8e:	f023 0303 	bic.w	r3, r3, #3
 8005e92:	f043 0201 	orr.w	r2, r3, #1
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	641a      	str	r2, [r3, #64]	; 0x40
 8005e9a:	e001      	b.n	8005ea0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3710      	adds	r7, #16
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}
	...

08005eb4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b086      	sub	sp, #24
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	60f8      	str	r0, [r7, #12]
 8005ebc:	60b9      	str	r1, [r7, #8]
 8005ebe:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	d101      	bne.n	8005ed2 <HAL_ADC_Start_DMA+0x1e>
 8005ece:	2302      	movs	r3, #2
 8005ed0:	e0cc      	b.n	800606c <HAL_ADC_Start_DMA+0x1b8>
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	f003 0301 	and.w	r3, r3, #1
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d018      	beq.n	8005f1a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	689a      	ldr	r2, [r3, #8]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f042 0201 	orr.w	r2, r2, #1
 8005ef6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005ef8:	4b5e      	ldr	r3, [pc, #376]	; (8006074 <HAL_ADC_Start_DMA+0x1c0>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a5e      	ldr	r2, [pc, #376]	; (8006078 <HAL_ADC_Start_DMA+0x1c4>)
 8005efe:	fba2 2303 	umull	r2, r3, r2, r3
 8005f02:	0c9a      	lsrs	r2, r3, #18
 8005f04:	4613      	mov	r3, r2
 8005f06:	005b      	lsls	r3, r3, #1
 8005f08:	4413      	add	r3, r2
 8005f0a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8005f0c:	e002      	b.n	8005f14 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	3b01      	subs	r3, #1
 8005f12:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d1f9      	bne.n	8005f0e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	f003 0301 	and.w	r3, r3, #1
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	f040 80a0 	bne.w	800606a <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005f32:	f023 0301 	bic.w	r3, r3, #1
 8005f36:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d007      	beq.n	8005f5c <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f50:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005f54:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f68:	d106      	bne.n	8005f78 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f6e:	f023 0206 	bic.w	r2, r3, #6
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	645a      	str	r2, [r3, #68]	; 0x44
 8005f76:	e002      	b.n	8005f7e <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2200      	movs	r2, #0
 8005f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005f86:	4b3d      	ldr	r3, [pc, #244]	; (800607c <HAL_ADC_Start_DMA+0x1c8>)
 8005f88:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f8e:	4a3c      	ldr	r2, [pc, #240]	; (8006080 <HAL_ADC_Start_DMA+0x1cc>)
 8005f90:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f96:	4a3b      	ldr	r2, [pc, #236]	; (8006084 <HAL_ADC_Start_DMA+0x1d0>)
 8005f98:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f9e:	4a3a      	ldr	r2, [pc, #232]	; (8006088 <HAL_ADC_Start_DMA+0x1d4>)
 8005fa0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005faa:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	685a      	ldr	r2, [r3, #4]
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005fba:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	689a      	ldr	r2, [r3, #8]
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005fca:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	334c      	adds	r3, #76	; 0x4c
 8005fd6:	4619      	mov	r1, r3
 8005fd8:	68ba      	ldr	r2, [r7, #8]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f000 fcea 	bl	80069b4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	f003 031f 	and.w	r3, r3, #31
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d12a      	bne.n	8006042 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a26      	ldr	r2, [pc, #152]	; (800608c <HAL_ADC_Start_DMA+0x1d8>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d015      	beq.n	8006022 <HAL_ADC_Start_DMA+0x16e>
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a25      	ldr	r2, [pc, #148]	; (8006090 <HAL_ADC_Start_DMA+0x1dc>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d105      	bne.n	800600c <HAL_ADC_Start_DMA+0x158>
 8006000:	4b1e      	ldr	r3, [pc, #120]	; (800607c <HAL_ADC_Start_DMA+0x1c8>)
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	f003 031f 	and.w	r3, r3, #31
 8006008:	2b00      	cmp	r3, #0
 800600a:	d00a      	beq.n	8006022 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a20      	ldr	r2, [pc, #128]	; (8006094 <HAL_ADC_Start_DMA+0x1e0>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d129      	bne.n	800606a <HAL_ADC_Start_DMA+0x1b6>
 8006016:	4b19      	ldr	r3, [pc, #100]	; (800607c <HAL_ADC_Start_DMA+0x1c8>)
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	f003 031f 	and.w	r3, r3, #31
 800601e:	2b0f      	cmp	r3, #15
 8006020:	d823      	bhi.n	800606a <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	689b      	ldr	r3, [r3, #8]
 8006028:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800602c:	2b00      	cmp	r3, #0
 800602e:	d11c      	bne.n	800606a <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	689a      	ldr	r2, [r3, #8]
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800603e:	609a      	str	r2, [r3, #8]
 8006040:	e013      	b.n	800606a <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a11      	ldr	r2, [pc, #68]	; (800608c <HAL_ADC_Start_DMA+0x1d8>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d10e      	bne.n	800606a <HAL_ADC_Start_DMA+0x1b6>
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006056:	2b00      	cmp	r3, #0
 8006058:	d107      	bne.n	800606a <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	689a      	ldr	r2, [r3, #8]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006068:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800606a:	2300      	movs	r3, #0
}
 800606c:	4618      	mov	r0, r3
 800606e:	3718      	adds	r7, #24
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}
 8006074:	20000000 	.word	0x20000000
 8006078:	431bde83 	.word	0x431bde83
 800607c:	40012300 	.word	0x40012300
 8006080:	08006531 	.word	0x08006531
 8006084:	080065eb 	.word	0x080065eb
 8006088:	08006607 	.word	0x08006607
 800608c:	40012000 	.word	0x40012000
 8006090:	40012100 	.word	0x40012100
 8006094:	40012200 	.word	0x40012200

08006098 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006098:	b480      	push	{r7}
 800609a:	b083      	sub	sp, #12
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80060a0:	bf00      	nop
 80060a2:	370c      	adds	r7, #12
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr

080060ac <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b083      	sub	sp, #12
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80060b4:	bf00      	nop
 80060b6:	370c      	adds	r7, #12
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr

080060c0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b083      	sub	sp, #12
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80060c8:	bf00      	nop
 80060ca:	370c      	adds	r7, #12
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b085      	sub	sp, #20
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80060de:	2300      	movs	r3, #0
 80060e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d101      	bne.n	80060f0 <HAL_ADC_ConfigChannel+0x1c>
 80060ec:	2302      	movs	r3, #2
 80060ee:	e113      	b.n	8006318 <HAL_ADC_ConfigChannel+0x244>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2201      	movs	r2, #1
 80060f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	2b09      	cmp	r3, #9
 80060fe:	d925      	bls.n	800614c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	68d9      	ldr	r1, [r3, #12]
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	b29b      	uxth	r3, r3
 800610c:	461a      	mov	r2, r3
 800610e:	4613      	mov	r3, r2
 8006110:	005b      	lsls	r3, r3, #1
 8006112:	4413      	add	r3, r2
 8006114:	3b1e      	subs	r3, #30
 8006116:	2207      	movs	r2, #7
 8006118:	fa02 f303 	lsl.w	r3, r2, r3
 800611c:	43da      	mvns	r2, r3
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	400a      	ands	r2, r1
 8006124:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	68d9      	ldr	r1, [r3, #12]
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	689a      	ldr	r2, [r3, #8]
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	b29b      	uxth	r3, r3
 8006136:	4618      	mov	r0, r3
 8006138:	4603      	mov	r3, r0
 800613a:	005b      	lsls	r3, r3, #1
 800613c:	4403      	add	r3, r0
 800613e:	3b1e      	subs	r3, #30
 8006140:	409a      	lsls	r2, r3
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	430a      	orrs	r2, r1
 8006148:	60da      	str	r2, [r3, #12]
 800614a:	e022      	b.n	8006192 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	6919      	ldr	r1, [r3, #16]
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	b29b      	uxth	r3, r3
 8006158:	461a      	mov	r2, r3
 800615a:	4613      	mov	r3, r2
 800615c:	005b      	lsls	r3, r3, #1
 800615e:	4413      	add	r3, r2
 8006160:	2207      	movs	r2, #7
 8006162:	fa02 f303 	lsl.w	r3, r2, r3
 8006166:	43da      	mvns	r2, r3
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	400a      	ands	r2, r1
 800616e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	6919      	ldr	r1, [r3, #16]
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	689a      	ldr	r2, [r3, #8]
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	b29b      	uxth	r3, r3
 8006180:	4618      	mov	r0, r3
 8006182:	4603      	mov	r3, r0
 8006184:	005b      	lsls	r3, r3, #1
 8006186:	4403      	add	r3, r0
 8006188:	409a      	lsls	r2, r3
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	430a      	orrs	r2, r1
 8006190:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	2b06      	cmp	r3, #6
 8006198:	d824      	bhi.n	80061e4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	685a      	ldr	r2, [r3, #4]
 80061a4:	4613      	mov	r3, r2
 80061a6:	009b      	lsls	r3, r3, #2
 80061a8:	4413      	add	r3, r2
 80061aa:	3b05      	subs	r3, #5
 80061ac:	221f      	movs	r2, #31
 80061ae:	fa02 f303 	lsl.w	r3, r2, r3
 80061b2:	43da      	mvns	r2, r3
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	400a      	ands	r2, r1
 80061ba:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	4618      	mov	r0, r3
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	685a      	ldr	r2, [r3, #4]
 80061ce:	4613      	mov	r3, r2
 80061d0:	009b      	lsls	r3, r3, #2
 80061d2:	4413      	add	r3, r2
 80061d4:	3b05      	subs	r3, #5
 80061d6:	fa00 f203 	lsl.w	r2, r0, r3
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	430a      	orrs	r2, r1
 80061e0:	635a      	str	r2, [r3, #52]	; 0x34
 80061e2:	e04c      	b.n	800627e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	2b0c      	cmp	r3, #12
 80061ea:	d824      	bhi.n	8006236 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	685a      	ldr	r2, [r3, #4]
 80061f6:	4613      	mov	r3, r2
 80061f8:	009b      	lsls	r3, r3, #2
 80061fa:	4413      	add	r3, r2
 80061fc:	3b23      	subs	r3, #35	; 0x23
 80061fe:	221f      	movs	r2, #31
 8006200:	fa02 f303 	lsl.w	r3, r2, r3
 8006204:	43da      	mvns	r2, r3
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	400a      	ands	r2, r1
 800620c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	b29b      	uxth	r3, r3
 800621a:	4618      	mov	r0, r3
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	685a      	ldr	r2, [r3, #4]
 8006220:	4613      	mov	r3, r2
 8006222:	009b      	lsls	r3, r3, #2
 8006224:	4413      	add	r3, r2
 8006226:	3b23      	subs	r3, #35	; 0x23
 8006228:	fa00 f203 	lsl.w	r2, r0, r3
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	430a      	orrs	r2, r1
 8006232:	631a      	str	r2, [r3, #48]	; 0x30
 8006234:	e023      	b.n	800627e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	685a      	ldr	r2, [r3, #4]
 8006240:	4613      	mov	r3, r2
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	4413      	add	r3, r2
 8006246:	3b41      	subs	r3, #65	; 0x41
 8006248:	221f      	movs	r2, #31
 800624a:	fa02 f303 	lsl.w	r3, r2, r3
 800624e:	43da      	mvns	r2, r3
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	400a      	ands	r2, r1
 8006256:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	b29b      	uxth	r3, r3
 8006264:	4618      	mov	r0, r3
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	685a      	ldr	r2, [r3, #4]
 800626a:	4613      	mov	r3, r2
 800626c:	009b      	lsls	r3, r3, #2
 800626e:	4413      	add	r3, r2
 8006270:	3b41      	subs	r3, #65	; 0x41
 8006272:	fa00 f203 	lsl.w	r2, r0, r3
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	430a      	orrs	r2, r1
 800627c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800627e:	4b29      	ldr	r3, [pc, #164]	; (8006324 <HAL_ADC_ConfigChannel+0x250>)
 8006280:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a28      	ldr	r2, [pc, #160]	; (8006328 <HAL_ADC_ConfigChannel+0x254>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d10f      	bne.n	80062ac <HAL_ADC_ConfigChannel+0x1d8>
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	2b12      	cmp	r3, #18
 8006292:	d10b      	bne.n	80062ac <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a1d      	ldr	r2, [pc, #116]	; (8006328 <HAL_ADC_ConfigChannel+0x254>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d12b      	bne.n	800630e <HAL_ADC_ConfigChannel+0x23a>
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a1c      	ldr	r2, [pc, #112]	; (800632c <HAL_ADC_ConfigChannel+0x258>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d003      	beq.n	80062c8 <HAL_ADC_ConfigChannel+0x1f4>
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	2b11      	cmp	r3, #17
 80062c6:	d122      	bne.n	800630e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a11      	ldr	r2, [pc, #68]	; (800632c <HAL_ADC_ConfigChannel+0x258>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d111      	bne.n	800630e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80062ea:	4b11      	ldr	r3, [pc, #68]	; (8006330 <HAL_ADC_ConfigChannel+0x25c>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a11      	ldr	r2, [pc, #68]	; (8006334 <HAL_ADC_ConfigChannel+0x260>)
 80062f0:	fba2 2303 	umull	r2, r3, r2, r3
 80062f4:	0c9a      	lsrs	r2, r3, #18
 80062f6:	4613      	mov	r3, r2
 80062f8:	009b      	lsls	r3, r3, #2
 80062fa:	4413      	add	r3, r2
 80062fc:	005b      	lsls	r3, r3, #1
 80062fe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006300:	e002      	b.n	8006308 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	3b01      	subs	r3, #1
 8006306:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d1f9      	bne.n	8006302 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2200      	movs	r2, #0
 8006312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006316:	2300      	movs	r3, #0
}
 8006318:	4618      	mov	r0, r3
 800631a:	3714      	adds	r7, #20
 800631c:	46bd      	mov	sp, r7
 800631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006322:	4770      	bx	lr
 8006324:	40012300 	.word	0x40012300
 8006328:	40012000 	.word	0x40012000
 800632c:	10000012 	.word	0x10000012
 8006330:	20000000 	.word	0x20000000
 8006334:	431bde83 	.word	0x431bde83

08006338 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006338:	b480      	push	{r7}
 800633a:	b085      	sub	sp, #20
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006340:	4b79      	ldr	r3, [pc, #484]	; (8006528 <ADC_Init+0x1f0>)
 8006342:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	685a      	ldr	r2, [r3, #4]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	431a      	orrs	r2, r3
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	685a      	ldr	r2, [r3, #4]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800636c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	6859      	ldr	r1, [r3, #4]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	691b      	ldr	r3, [r3, #16]
 8006378:	021a      	lsls	r2, r3, #8
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	430a      	orrs	r2, r1
 8006380:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	685a      	ldr	r2, [r3, #4]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006390:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	6859      	ldr	r1, [r3, #4]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	689a      	ldr	r2, [r3, #8]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	430a      	orrs	r2, r1
 80063a2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	689a      	ldr	r2, [r3, #8]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80063b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	6899      	ldr	r1, [r3, #8]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	68da      	ldr	r2, [r3, #12]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	430a      	orrs	r2, r1
 80063c4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ca:	4a58      	ldr	r2, [pc, #352]	; (800652c <ADC_Init+0x1f4>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d022      	beq.n	8006416 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	689a      	ldr	r2, [r3, #8]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80063de:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	6899      	ldr	r1, [r3, #8]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	430a      	orrs	r2, r1
 80063f0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	689a      	ldr	r2, [r3, #8]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006400:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	6899      	ldr	r1, [r3, #8]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	430a      	orrs	r2, r1
 8006412:	609a      	str	r2, [r3, #8]
 8006414:	e00f      	b.n	8006436 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	689a      	ldr	r2, [r3, #8]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006424:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	689a      	ldr	r2, [r3, #8]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006434:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	689a      	ldr	r2, [r3, #8]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f022 0202 	bic.w	r2, r2, #2
 8006444:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	6899      	ldr	r1, [r3, #8]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	7e1b      	ldrb	r3, [r3, #24]
 8006450:	005a      	lsls	r2, r3, #1
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	430a      	orrs	r2, r1
 8006458:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d01b      	beq.n	800649c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	685a      	ldr	r2, [r3, #4]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006472:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	685a      	ldr	r2, [r3, #4]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006482:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	6859      	ldr	r1, [r3, #4]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800648e:	3b01      	subs	r3, #1
 8006490:	035a      	lsls	r2, r3, #13
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	430a      	orrs	r2, r1
 8006498:	605a      	str	r2, [r3, #4]
 800649a:	e007      	b.n	80064ac <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	685a      	ldr	r2, [r3, #4]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80064aa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80064ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	69db      	ldr	r3, [r3, #28]
 80064c6:	3b01      	subs	r3, #1
 80064c8:	051a      	lsls	r2, r3, #20
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	430a      	orrs	r2, r1
 80064d0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	689a      	ldr	r2, [r3, #8]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80064e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	6899      	ldr	r1, [r3, #8]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80064ee:	025a      	lsls	r2, r3, #9
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	430a      	orrs	r2, r1
 80064f6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	689a      	ldr	r2, [r3, #8]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006506:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	6899      	ldr	r1, [r3, #8]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	695b      	ldr	r3, [r3, #20]
 8006512:	029a      	lsls	r2, r3, #10
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	430a      	orrs	r2, r1
 800651a:	609a      	str	r2, [r3, #8]
}
 800651c:	bf00      	nop
 800651e:	3714      	adds	r7, #20
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr
 8006528:	40012300 	.word	0x40012300
 800652c:	0f000001 	.word	0x0f000001

08006530 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b084      	sub	sp, #16
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800653c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006542:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006546:	2b00      	cmp	r3, #0
 8006548:	d13c      	bne.n	80065c4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800654e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	689b      	ldr	r3, [r3, #8]
 800655c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006560:	2b00      	cmp	r3, #0
 8006562:	d12b      	bne.n	80065bc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006568:	2b00      	cmp	r3, #0
 800656a:	d127      	bne.n	80065bc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006572:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006576:	2b00      	cmp	r3, #0
 8006578:	d006      	beq.n	8006588 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006584:	2b00      	cmp	r3, #0
 8006586:	d119      	bne.n	80065bc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	685a      	ldr	r2, [r3, #4]
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f022 0220 	bic.w	r2, r2, #32
 8006596:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800659c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d105      	bne.n	80065bc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b4:	f043 0201 	orr.w	r2, r3, #1
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80065bc:	68f8      	ldr	r0, [r7, #12]
 80065be:	f7ff fd6b 	bl	8006098 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80065c2:	e00e      	b.n	80065e2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c8:	f003 0310 	and.w	r3, r3, #16
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d003      	beq.n	80065d8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80065d0:	68f8      	ldr	r0, [r7, #12]
 80065d2:	f7ff fd75 	bl	80060c0 <HAL_ADC_ErrorCallback>
}
 80065d6:	e004      	b.n	80065e2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	4798      	blx	r3
}
 80065e2:	bf00      	nop
 80065e4:	3710      	adds	r7, #16
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}

080065ea <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80065ea:	b580      	push	{r7, lr}
 80065ec:	b084      	sub	sp, #16
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065f6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80065f8:	68f8      	ldr	r0, [r7, #12]
 80065fa:	f7ff fd57 	bl	80060ac <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80065fe:	bf00      	nop
 8006600:	3710      	adds	r7, #16
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}

08006606 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8006606:	b580      	push	{r7, lr}
 8006608:	b084      	sub	sp, #16
 800660a:	af00      	add	r7, sp, #0
 800660c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006612:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2240      	movs	r2, #64	; 0x40
 8006618:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800661e:	f043 0204 	orr.w	r2, r3, #4
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006626:	68f8      	ldr	r0, [r7, #12]
 8006628:	f7ff fd4a 	bl	80060c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800662c:	bf00      	nop
 800662e:	3710      	adds	r7, #16
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}

08006634 <__NVIC_SetPriorityGrouping>:
{
 8006634:	b480      	push	{r7}
 8006636:	b085      	sub	sp, #20
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f003 0307 	and.w	r3, r3, #7
 8006642:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006644:	4b0c      	ldr	r3, [pc, #48]	; (8006678 <__NVIC_SetPriorityGrouping+0x44>)
 8006646:	68db      	ldr	r3, [r3, #12]
 8006648:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800664a:	68ba      	ldr	r2, [r7, #8]
 800664c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006650:	4013      	ands	r3, r2
 8006652:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800665c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006660:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006664:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006666:	4a04      	ldr	r2, [pc, #16]	; (8006678 <__NVIC_SetPriorityGrouping+0x44>)
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	60d3      	str	r3, [r2, #12]
}
 800666c:	bf00      	nop
 800666e:	3714      	adds	r7, #20
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr
 8006678:	e000ed00 	.word	0xe000ed00

0800667c <__NVIC_GetPriorityGrouping>:
{
 800667c:	b480      	push	{r7}
 800667e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006680:	4b04      	ldr	r3, [pc, #16]	; (8006694 <__NVIC_GetPriorityGrouping+0x18>)
 8006682:	68db      	ldr	r3, [r3, #12]
 8006684:	0a1b      	lsrs	r3, r3, #8
 8006686:	f003 0307 	and.w	r3, r3, #7
}
 800668a:	4618      	mov	r0, r3
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr
 8006694:	e000ed00 	.word	0xe000ed00

08006698 <__NVIC_EnableIRQ>:
{
 8006698:	b480      	push	{r7}
 800669a:	b083      	sub	sp, #12
 800669c:	af00      	add	r7, sp, #0
 800669e:	4603      	mov	r3, r0
 80066a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80066a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	db0b      	blt.n	80066c2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80066aa:	79fb      	ldrb	r3, [r7, #7]
 80066ac:	f003 021f 	and.w	r2, r3, #31
 80066b0:	4907      	ldr	r1, [pc, #28]	; (80066d0 <__NVIC_EnableIRQ+0x38>)
 80066b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066b6:	095b      	lsrs	r3, r3, #5
 80066b8:	2001      	movs	r0, #1
 80066ba:	fa00 f202 	lsl.w	r2, r0, r2
 80066be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80066c2:	bf00      	nop
 80066c4:	370c      	adds	r7, #12
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr
 80066ce:	bf00      	nop
 80066d0:	e000e100 	.word	0xe000e100

080066d4 <__NVIC_SetPriority>:
{
 80066d4:	b480      	push	{r7}
 80066d6:	b083      	sub	sp, #12
 80066d8:	af00      	add	r7, sp, #0
 80066da:	4603      	mov	r3, r0
 80066dc:	6039      	str	r1, [r7, #0]
 80066de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80066e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	db0a      	blt.n	80066fe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	b2da      	uxtb	r2, r3
 80066ec:	490c      	ldr	r1, [pc, #48]	; (8006720 <__NVIC_SetPriority+0x4c>)
 80066ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066f2:	0112      	lsls	r2, r2, #4
 80066f4:	b2d2      	uxtb	r2, r2
 80066f6:	440b      	add	r3, r1
 80066f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80066fc:	e00a      	b.n	8006714 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	b2da      	uxtb	r2, r3
 8006702:	4908      	ldr	r1, [pc, #32]	; (8006724 <__NVIC_SetPriority+0x50>)
 8006704:	79fb      	ldrb	r3, [r7, #7]
 8006706:	f003 030f 	and.w	r3, r3, #15
 800670a:	3b04      	subs	r3, #4
 800670c:	0112      	lsls	r2, r2, #4
 800670e:	b2d2      	uxtb	r2, r2
 8006710:	440b      	add	r3, r1
 8006712:	761a      	strb	r2, [r3, #24]
}
 8006714:	bf00      	nop
 8006716:	370c      	adds	r7, #12
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr
 8006720:	e000e100 	.word	0xe000e100
 8006724:	e000ed00 	.word	0xe000ed00

08006728 <NVIC_EncodePriority>:
{
 8006728:	b480      	push	{r7}
 800672a:	b089      	sub	sp, #36	; 0x24
 800672c:	af00      	add	r7, sp, #0
 800672e:	60f8      	str	r0, [r7, #12]
 8006730:	60b9      	str	r1, [r7, #8]
 8006732:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f003 0307 	and.w	r3, r3, #7
 800673a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800673c:	69fb      	ldr	r3, [r7, #28]
 800673e:	f1c3 0307 	rsb	r3, r3, #7
 8006742:	2b04      	cmp	r3, #4
 8006744:	bf28      	it	cs
 8006746:	2304      	movcs	r3, #4
 8006748:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800674a:	69fb      	ldr	r3, [r7, #28]
 800674c:	3304      	adds	r3, #4
 800674e:	2b06      	cmp	r3, #6
 8006750:	d902      	bls.n	8006758 <NVIC_EncodePriority+0x30>
 8006752:	69fb      	ldr	r3, [r7, #28]
 8006754:	3b03      	subs	r3, #3
 8006756:	e000      	b.n	800675a <NVIC_EncodePriority+0x32>
 8006758:	2300      	movs	r3, #0
 800675a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800675c:	f04f 32ff 	mov.w	r2, #4294967295
 8006760:	69bb      	ldr	r3, [r7, #24]
 8006762:	fa02 f303 	lsl.w	r3, r2, r3
 8006766:	43da      	mvns	r2, r3
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	401a      	ands	r2, r3
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006770:	f04f 31ff 	mov.w	r1, #4294967295
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	fa01 f303 	lsl.w	r3, r1, r3
 800677a:	43d9      	mvns	r1, r3
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006780:	4313      	orrs	r3, r2
}
 8006782:	4618      	mov	r0, r3
 8006784:	3724      	adds	r7, #36	; 0x24
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr
	...

08006790 <SysTick_Config>:
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b082      	sub	sp, #8
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	3b01      	subs	r3, #1
 800679c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80067a0:	d301      	bcc.n	80067a6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80067a2:	2301      	movs	r3, #1
 80067a4:	e00f      	b.n	80067c6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80067a6:	4a0a      	ldr	r2, [pc, #40]	; (80067d0 <SysTick_Config+0x40>)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	3b01      	subs	r3, #1
 80067ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80067ae:	210f      	movs	r1, #15
 80067b0:	f04f 30ff 	mov.w	r0, #4294967295
 80067b4:	f7ff ff8e 	bl	80066d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80067b8:	4b05      	ldr	r3, [pc, #20]	; (80067d0 <SysTick_Config+0x40>)
 80067ba:	2200      	movs	r2, #0
 80067bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80067be:	4b04      	ldr	r3, [pc, #16]	; (80067d0 <SysTick_Config+0x40>)
 80067c0:	2207      	movs	r2, #7
 80067c2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80067c4:	2300      	movs	r3, #0
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3708      	adds	r7, #8
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}
 80067ce:	bf00      	nop
 80067d0:	e000e010 	.word	0xe000e010

080067d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b082      	sub	sp, #8
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	f7ff ff29 	bl	8006634 <__NVIC_SetPriorityGrouping>
}
 80067e2:	bf00      	nop
 80067e4:	3708      	adds	r7, #8
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}

080067ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80067ea:	b580      	push	{r7, lr}
 80067ec:	b086      	sub	sp, #24
 80067ee:	af00      	add	r7, sp, #0
 80067f0:	4603      	mov	r3, r0
 80067f2:	60b9      	str	r1, [r7, #8]
 80067f4:	607a      	str	r2, [r7, #4]
 80067f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80067f8:	2300      	movs	r3, #0
 80067fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80067fc:	f7ff ff3e 	bl	800667c <__NVIC_GetPriorityGrouping>
 8006800:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	68b9      	ldr	r1, [r7, #8]
 8006806:	6978      	ldr	r0, [r7, #20]
 8006808:	f7ff ff8e 	bl	8006728 <NVIC_EncodePriority>
 800680c:	4602      	mov	r2, r0
 800680e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006812:	4611      	mov	r1, r2
 8006814:	4618      	mov	r0, r3
 8006816:	f7ff ff5d 	bl	80066d4 <__NVIC_SetPriority>
}
 800681a:	bf00      	nop
 800681c:	3718      	adds	r7, #24
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}

08006822 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006822:	b580      	push	{r7, lr}
 8006824:	b082      	sub	sp, #8
 8006826:	af00      	add	r7, sp, #0
 8006828:	4603      	mov	r3, r0
 800682a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800682c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006830:	4618      	mov	r0, r3
 8006832:	f7ff ff31 	bl	8006698 <__NVIC_EnableIRQ>
}
 8006836:	bf00      	nop
 8006838:	3708      	adds	r7, #8
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}

0800683e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800683e:	b580      	push	{r7, lr}
 8006840:	b082      	sub	sp, #8
 8006842:	af00      	add	r7, sp, #0
 8006844:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f7ff ffa2 	bl	8006790 <SysTick_Config>
 800684c:	4603      	mov	r3, r0
}
 800684e:	4618      	mov	r0, r3
 8006850:	3708      	adds	r7, #8
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}
	...

08006858 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b086      	sub	sp, #24
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006860:	2300      	movs	r3, #0
 8006862:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006864:	f7ff fab4 	bl	8005dd0 <HAL_GetTick>
 8006868:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d101      	bne.n	8006874 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006870:	2301      	movs	r3, #1
 8006872:	e099      	b.n	80069a8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2200      	movs	r2, #0
 8006878:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2202      	movs	r2, #2
 8006880:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	681a      	ldr	r2, [r3, #0]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f022 0201 	bic.w	r2, r2, #1
 8006892:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006894:	e00f      	b.n	80068b6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006896:	f7ff fa9b 	bl	8005dd0 <HAL_GetTick>
 800689a:	4602      	mov	r2, r0
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	1ad3      	subs	r3, r2, r3
 80068a0:	2b05      	cmp	r3, #5
 80068a2:	d908      	bls.n	80068b6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2220      	movs	r2, #32
 80068a8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2203      	movs	r2, #3
 80068ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80068b2:	2303      	movs	r3, #3
 80068b4:	e078      	b.n	80069a8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f003 0301 	and.w	r3, r3, #1
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d1e8      	bne.n	8006896 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80068cc:	697a      	ldr	r2, [r7, #20]
 80068ce:	4b38      	ldr	r3, [pc, #224]	; (80069b0 <HAL_DMA_Init+0x158>)
 80068d0:	4013      	ands	r3, r2
 80068d2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	685a      	ldr	r2, [r3, #4]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	689b      	ldr	r3, [r3, #8]
 80068dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80068e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	691b      	ldr	r3, [r3, #16]
 80068e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80068ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	699b      	ldr	r3, [r3, #24]
 80068f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80068fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6a1b      	ldr	r3, [r3, #32]
 8006900:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006902:	697a      	ldr	r2, [r7, #20]
 8006904:	4313      	orrs	r3, r2
 8006906:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800690c:	2b04      	cmp	r3, #4
 800690e:	d107      	bne.n	8006920 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006918:	4313      	orrs	r3, r2
 800691a:	697a      	ldr	r2, [r7, #20]
 800691c:	4313      	orrs	r3, r2
 800691e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	697a      	ldr	r2, [r7, #20]
 8006926:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	695b      	ldr	r3, [r3, #20]
 800692e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	f023 0307 	bic.w	r3, r3, #7
 8006936:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800693c:	697a      	ldr	r2, [r7, #20]
 800693e:	4313      	orrs	r3, r2
 8006940:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006946:	2b04      	cmp	r3, #4
 8006948:	d117      	bne.n	800697a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800694e:	697a      	ldr	r2, [r7, #20]
 8006950:	4313      	orrs	r3, r2
 8006952:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006958:	2b00      	cmp	r3, #0
 800695a:	d00e      	beq.n	800697a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f000 fa9d 	bl	8006e9c <DMA_CheckFifoParam>
 8006962:	4603      	mov	r3, r0
 8006964:	2b00      	cmp	r3, #0
 8006966:	d008      	beq.n	800697a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2240      	movs	r2, #64	; 0x40
 800696c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2201      	movs	r2, #1
 8006972:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006976:	2301      	movs	r3, #1
 8006978:	e016      	b.n	80069a8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	697a      	ldr	r2, [r7, #20]
 8006980:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f000 fa54 	bl	8006e30 <DMA_CalcBaseAndBitshift>
 8006988:	4603      	mov	r3, r0
 800698a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006990:	223f      	movs	r2, #63	; 0x3f
 8006992:	409a      	lsls	r2, r3
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2200      	movs	r2, #0
 800699c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2201      	movs	r2, #1
 80069a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80069a6:	2300      	movs	r3, #0
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3718      	adds	r7, #24
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}
 80069b0:	f010803f 	.word	0xf010803f

080069b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b086      	sub	sp, #24
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	60f8      	str	r0, [r7, #12]
 80069bc:	60b9      	str	r1, [r7, #8]
 80069be:	607a      	str	r2, [r7, #4]
 80069c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80069c2:	2300      	movs	r3, #0
 80069c4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069ca:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80069d2:	2b01      	cmp	r3, #1
 80069d4:	d101      	bne.n	80069da <HAL_DMA_Start_IT+0x26>
 80069d6:	2302      	movs	r3, #2
 80069d8:	e040      	b.n	8006a5c <HAL_DMA_Start_IT+0xa8>
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2201      	movs	r2, #1
 80069de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80069e8:	b2db      	uxtb	r3, r3
 80069ea:	2b01      	cmp	r3, #1
 80069ec:	d12f      	bne.n	8006a4e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2202      	movs	r2, #2
 80069f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2200      	movs	r2, #0
 80069fa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	687a      	ldr	r2, [r7, #4]
 8006a00:	68b9      	ldr	r1, [r7, #8]
 8006a02:	68f8      	ldr	r0, [r7, #12]
 8006a04:	f000 f9e6 	bl	8006dd4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a0c:	223f      	movs	r2, #63	; 0x3f
 8006a0e:	409a      	lsls	r2, r3
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f042 0216 	orr.w	r2, r2, #22
 8006a22:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d007      	beq.n	8006a3c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	681a      	ldr	r2, [r3, #0]
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f042 0208 	orr.w	r2, r2, #8
 8006a3a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	681a      	ldr	r2, [r3, #0]
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f042 0201 	orr.w	r2, r2, #1
 8006a4a:	601a      	str	r2, [r3, #0]
 8006a4c:	e005      	b.n	8006a5a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2200      	movs	r2, #0
 8006a52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006a56:	2302      	movs	r3, #2
 8006a58:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006a5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3718      	adds	r7, #24
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b083      	sub	sp, #12
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006a72:	b2db      	uxtb	r3, r3
 8006a74:	2b02      	cmp	r3, #2
 8006a76:	d004      	beq.n	8006a82 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2280      	movs	r2, #128	; 0x80
 8006a7c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	e00c      	b.n	8006a9c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2205      	movs	r2, #5
 8006a86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	681a      	ldr	r2, [r3, #0]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f022 0201 	bic.w	r2, r2, #1
 8006a98:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006a9a:	2300      	movs	r3, #0
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	370c      	adds	r7, #12
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa6:	4770      	bx	lr

08006aa8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b086      	sub	sp, #24
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006ab4:	4b92      	ldr	r3, [pc, #584]	; (8006d00 <HAL_DMA_IRQHandler+0x258>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a92      	ldr	r2, [pc, #584]	; (8006d04 <HAL_DMA_IRQHandler+0x25c>)
 8006aba:	fba2 2303 	umull	r2, r3, r2, r3
 8006abe:	0a9b      	lsrs	r3, r3, #10
 8006ac0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ac6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ad2:	2208      	movs	r2, #8
 8006ad4:	409a      	lsls	r2, r3
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	4013      	ands	r3, r2
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d01a      	beq.n	8006b14 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f003 0304 	and.w	r3, r3, #4
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d013      	beq.n	8006b14 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	681a      	ldr	r2, [r3, #0]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f022 0204 	bic.w	r2, r2, #4
 8006afa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b00:	2208      	movs	r2, #8
 8006b02:	409a      	lsls	r2, r3
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b0c:	f043 0201 	orr.w	r2, r3, #1
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b18:	2201      	movs	r2, #1
 8006b1a:	409a      	lsls	r2, r3
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	4013      	ands	r3, r2
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d012      	beq.n	8006b4a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	695b      	ldr	r3, [r3, #20]
 8006b2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d00b      	beq.n	8006b4a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b36:	2201      	movs	r2, #1
 8006b38:	409a      	lsls	r2, r3
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b42:	f043 0202 	orr.w	r2, r3, #2
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b4e:	2204      	movs	r2, #4
 8006b50:	409a      	lsls	r2, r3
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	4013      	ands	r3, r2
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d012      	beq.n	8006b80 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f003 0302 	and.w	r3, r3, #2
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d00b      	beq.n	8006b80 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b6c:	2204      	movs	r2, #4
 8006b6e:	409a      	lsls	r2, r3
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b78:	f043 0204 	orr.w	r2, r3, #4
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b84:	2210      	movs	r2, #16
 8006b86:	409a      	lsls	r2, r3
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	4013      	ands	r3, r2
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d043      	beq.n	8006c18 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f003 0308 	and.w	r3, r3, #8
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d03c      	beq.n	8006c18 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ba2:	2210      	movs	r2, #16
 8006ba4:	409a      	lsls	r2, r3
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d018      	beq.n	8006bea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d108      	bne.n	8006bd8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d024      	beq.n	8006c18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	4798      	blx	r3
 8006bd6:	e01f      	b.n	8006c18 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d01b      	beq.n	8006c18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	4798      	blx	r3
 8006be8:	e016      	b.n	8006c18 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d107      	bne.n	8006c08 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	681a      	ldr	r2, [r3, #0]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f022 0208 	bic.w	r2, r2, #8
 8006c06:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d003      	beq.n	8006c18 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c1c:	2220      	movs	r2, #32
 8006c1e:	409a      	lsls	r2, r3
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	4013      	ands	r3, r2
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	f000 808e 	beq.w	8006d46 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f003 0310 	and.w	r3, r3, #16
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	f000 8086 	beq.w	8006d46 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c3e:	2220      	movs	r2, #32
 8006c40:	409a      	lsls	r2, r3
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006c4c:	b2db      	uxtb	r3, r3
 8006c4e:	2b05      	cmp	r3, #5
 8006c50:	d136      	bne.n	8006cc0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f022 0216 	bic.w	r2, r2, #22
 8006c60:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	695a      	ldr	r2, [r3, #20]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006c70:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d103      	bne.n	8006c82 <HAL_DMA_IRQHandler+0x1da>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d007      	beq.n	8006c92 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	681a      	ldr	r2, [r3, #0]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f022 0208 	bic.w	r2, r2, #8
 8006c90:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c96:	223f      	movs	r2, #63	; 0x3f
 8006c98:	409a      	lsls	r2, r3
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2201      	movs	r2, #1
 8006caa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d07d      	beq.n	8006db2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	4798      	blx	r3
        }
        return;
 8006cbe:	e078      	b.n	8006db2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d01c      	beq.n	8006d08 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d108      	bne.n	8006cee <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d030      	beq.n	8006d46 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	4798      	blx	r3
 8006cec:	e02b      	b.n	8006d46 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d027      	beq.n	8006d46 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	4798      	blx	r3
 8006cfe:	e022      	b.n	8006d46 <HAL_DMA_IRQHandler+0x29e>
 8006d00:	20000000 	.word	0x20000000
 8006d04:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d10f      	bne.n	8006d36 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	681a      	ldr	r2, [r3, #0]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f022 0210 	bic.w	r2, r2, #16
 8006d24:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2201      	movs	r2, #1
 8006d32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d003      	beq.n	8006d46 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d032      	beq.n	8006db4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d52:	f003 0301 	and.w	r3, r3, #1
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d022      	beq.n	8006da0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2205      	movs	r2, #5
 8006d5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	681a      	ldr	r2, [r3, #0]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f022 0201 	bic.w	r2, r2, #1
 8006d70:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	3301      	adds	r3, #1
 8006d76:	60bb      	str	r3, [r7, #8]
 8006d78:	697a      	ldr	r2, [r7, #20]
 8006d7a:	429a      	cmp	r2, r3
 8006d7c:	d307      	bcc.n	8006d8e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f003 0301 	and.w	r3, r3, #1
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d1f2      	bne.n	8006d72 <HAL_DMA_IRQHandler+0x2ca>
 8006d8c:	e000      	b.n	8006d90 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8006d8e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2200      	movs	r2, #0
 8006d94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d005      	beq.n	8006db4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	4798      	blx	r3
 8006db0:	e000      	b.n	8006db4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8006db2:	bf00      	nop
    }
  }
}
 8006db4:	3718      	adds	r7, #24
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}
 8006dba:	bf00      	nop

08006dbc <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b083      	sub	sp, #12
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	370c      	adds	r7, #12
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr

08006dd4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b085      	sub	sp, #20
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	60f8      	str	r0, [r7, #12]
 8006ddc:	60b9      	str	r1, [r7, #8]
 8006dde:	607a      	str	r2, [r7, #4]
 8006de0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	681a      	ldr	r2, [r3, #0]
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006df0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	683a      	ldr	r2, [r7, #0]
 8006df8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	2b40      	cmp	r3, #64	; 0x40
 8006e00:	d108      	bne.n	8006e14 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	687a      	ldr	r2, [r7, #4]
 8006e08:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	68ba      	ldr	r2, [r7, #8]
 8006e10:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006e12:	e007      	b.n	8006e24 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	68ba      	ldr	r2, [r7, #8]
 8006e1a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	687a      	ldr	r2, [r7, #4]
 8006e22:	60da      	str	r2, [r3, #12]
}
 8006e24:	bf00      	nop
 8006e26:	3714      	adds	r7, #20
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2e:	4770      	bx	lr

08006e30 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b085      	sub	sp, #20
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	b2db      	uxtb	r3, r3
 8006e3e:	3b10      	subs	r3, #16
 8006e40:	4a14      	ldr	r2, [pc, #80]	; (8006e94 <DMA_CalcBaseAndBitshift+0x64>)
 8006e42:	fba2 2303 	umull	r2, r3, r2, r3
 8006e46:	091b      	lsrs	r3, r3, #4
 8006e48:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006e4a:	4a13      	ldr	r2, [pc, #76]	; (8006e98 <DMA_CalcBaseAndBitshift+0x68>)
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	4413      	add	r3, r2
 8006e50:	781b      	ldrb	r3, [r3, #0]
 8006e52:	461a      	mov	r2, r3
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2b03      	cmp	r3, #3
 8006e5c:	d909      	bls.n	8006e72 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006e66:	f023 0303 	bic.w	r3, r3, #3
 8006e6a:	1d1a      	adds	r2, r3, #4
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	659a      	str	r2, [r3, #88]	; 0x58
 8006e70:	e007      	b.n	8006e82 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006e7a:	f023 0303 	bic.w	r3, r3, #3
 8006e7e:	687a      	ldr	r2, [r7, #4]
 8006e80:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3714      	adds	r7, #20
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e90:	4770      	bx	lr
 8006e92:	bf00      	nop
 8006e94:	aaaaaaab 	.word	0xaaaaaaab
 8006e98:	08017498 	.word	0x08017498

08006e9c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b085      	sub	sp, #20
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	699b      	ldr	r3, [r3, #24]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d11f      	bne.n	8006ef6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	2b03      	cmp	r3, #3
 8006eba:	d855      	bhi.n	8006f68 <DMA_CheckFifoParam+0xcc>
 8006ebc:	a201      	add	r2, pc, #4	; (adr r2, 8006ec4 <DMA_CheckFifoParam+0x28>)
 8006ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ec2:	bf00      	nop
 8006ec4:	08006ed5 	.word	0x08006ed5
 8006ec8:	08006ee7 	.word	0x08006ee7
 8006ecc:	08006ed5 	.word	0x08006ed5
 8006ed0:	08006f69 	.word	0x08006f69
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ed8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d045      	beq.n	8006f6c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006ee4:	e042      	b.n	8006f6c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006eee:	d13f      	bne.n	8006f70 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006ef4:	e03c      	b.n	8006f70 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	699b      	ldr	r3, [r3, #24]
 8006efa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006efe:	d121      	bne.n	8006f44 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	2b03      	cmp	r3, #3
 8006f04:	d836      	bhi.n	8006f74 <DMA_CheckFifoParam+0xd8>
 8006f06:	a201      	add	r2, pc, #4	; (adr r2, 8006f0c <DMA_CheckFifoParam+0x70>)
 8006f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f0c:	08006f1d 	.word	0x08006f1d
 8006f10:	08006f23 	.word	0x08006f23
 8006f14:	08006f1d 	.word	0x08006f1d
 8006f18:	08006f35 	.word	0x08006f35
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	73fb      	strb	r3, [r7, #15]
      break;
 8006f20:	e02f      	b.n	8006f82 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d024      	beq.n	8006f78 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006f32:	e021      	b.n	8006f78 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f38:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006f3c:	d11e      	bne.n	8006f7c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8006f3e:	2301      	movs	r3, #1
 8006f40:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006f42:	e01b      	b.n	8006f7c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	2b02      	cmp	r3, #2
 8006f48:	d902      	bls.n	8006f50 <DMA_CheckFifoParam+0xb4>
 8006f4a:	2b03      	cmp	r3, #3
 8006f4c:	d003      	beq.n	8006f56 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006f4e:	e018      	b.n	8006f82 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8006f50:	2301      	movs	r3, #1
 8006f52:	73fb      	strb	r3, [r7, #15]
      break;
 8006f54:	e015      	b.n	8006f82 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d00e      	beq.n	8006f80 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8006f62:	2301      	movs	r3, #1
 8006f64:	73fb      	strb	r3, [r7, #15]
      break;
 8006f66:	e00b      	b.n	8006f80 <DMA_CheckFifoParam+0xe4>
      break;
 8006f68:	bf00      	nop
 8006f6a:	e00a      	b.n	8006f82 <DMA_CheckFifoParam+0xe6>
      break;
 8006f6c:	bf00      	nop
 8006f6e:	e008      	b.n	8006f82 <DMA_CheckFifoParam+0xe6>
      break;
 8006f70:	bf00      	nop
 8006f72:	e006      	b.n	8006f82 <DMA_CheckFifoParam+0xe6>
      break;
 8006f74:	bf00      	nop
 8006f76:	e004      	b.n	8006f82 <DMA_CheckFifoParam+0xe6>
      break;
 8006f78:	bf00      	nop
 8006f7a:	e002      	b.n	8006f82 <DMA_CheckFifoParam+0xe6>
      break;   
 8006f7c:	bf00      	nop
 8006f7e:	e000      	b.n	8006f82 <DMA_CheckFifoParam+0xe6>
      break;
 8006f80:	bf00      	nop
    }
  } 
  
  return status; 
 8006f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3714      	adds	r7, #20
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr

08006f90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b089      	sub	sp, #36	; 0x24
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	61fb      	str	r3, [r7, #28]
 8006faa:	e177      	b.n	800729c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006fac:	2201      	movs	r2, #1
 8006fae:	69fb      	ldr	r3, [r7, #28]
 8006fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8006fb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	697a      	ldr	r2, [r7, #20]
 8006fbc:	4013      	ands	r3, r2
 8006fbe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006fc0:	693a      	ldr	r2, [r7, #16]
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	f040 8166 	bne.w	8007296 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	2b01      	cmp	r3, #1
 8006fd0:	d00b      	beq.n	8006fea <HAL_GPIO_Init+0x5a>
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	2b02      	cmp	r3, #2
 8006fd8:	d007      	beq.n	8006fea <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006fde:	2b11      	cmp	r3, #17
 8006fe0:	d003      	beq.n	8006fea <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	2b12      	cmp	r3, #18
 8006fe8:	d130      	bne.n	800704c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006ff0:	69fb      	ldr	r3, [r7, #28]
 8006ff2:	005b      	lsls	r3, r3, #1
 8006ff4:	2203      	movs	r2, #3
 8006ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8006ffa:	43db      	mvns	r3, r3
 8006ffc:	69ba      	ldr	r2, [r7, #24]
 8006ffe:	4013      	ands	r3, r2
 8007000:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	68da      	ldr	r2, [r3, #12]
 8007006:	69fb      	ldr	r3, [r7, #28]
 8007008:	005b      	lsls	r3, r3, #1
 800700a:	fa02 f303 	lsl.w	r3, r2, r3
 800700e:	69ba      	ldr	r2, [r7, #24]
 8007010:	4313      	orrs	r3, r2
 8007012:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	69ba      	ldr	r2, [r7, #24]
 8007018:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007020:	2201      	movs	r2, #1
 8007022:	69fb      	ldr	r3, [r7, #28]
 8007024:	fa02 f303 	lsl.w	r3, r2, r3
 8007028:	43db      	mvns	r3, r3
 800702a:	69ba      	ldr	r2, [r7, #24]
 800702c:	4013      	ands	r3, r2
 800702e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	091b      	lsrs	r3, r3, #4
 8007036:	f003 0201 	and.w	r2, r3, #1
 800703a:	69fb      	ldr	r3, [r7, #28]
 800703c:	fa02 f303 	lsl.w	r3, r2, r3
 8007040:	69ba      	ldr	r2, [r7, #24]
 8007042:	4313      	orrs	r3, r2
 8007044:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	69ba      	ldr	r2, [r7, #24]
 800704a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	68db      	ldr	r3, [r3, #12]
 8007050:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007052:	69fb      	ldr	r3, [r7, #28]
 8007054:	005b      	lsls	r3, r3, #1
 8007056:	2203      	movs	r2, #3
 8007058:	fa02 f303 	lsl.w	r3, r2, r3
 800705c:	43db      	mvns	r3, r3
 800705e:	69ba      	ldr	r2, [r7, #24]
 8007060:	4013      	ands	r3, r2
 8007062:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	689a      	ldr	r2, [r3, #8]
 8007068:	69fb      	ldr	r3, [r7, #28]
 800706a:	005b      	lsls	r3, r3, #1
 800706c:	fa02 f303 	lsl.w	r3, r2, r3
 8007070:	69ba      	ldr	r2, [r7, #24]
 8007072:	4313      	orrs	r3, r2
 8007074:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	69ba      	ldr	r2, [r7, #24]
 800707a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	2b02      	cmp	r3, #2
 8007082:	d003      	beq.n	800708c <HAL_GPIO_Init+0xfc>
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	2b12      	cmp	r3, #18
 800708a:	d123      	bne.n	80070d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800708c:	69fb      	ldr	r3, [r7, #28]
 800708e:	08da      	lsrs	r2, r3, #3
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	3208      	adds	r2, #8
 8007094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007098:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800709a:	69fb      	ldr	r3, [r7, #28]
 800709c:	f003 0307 	and.w	r3, r3, #7
 80070a0:	009b      	lsls	r3, r3, #2
 80070a2:	220f      	movs	r2, #15
 80070a4:	fa02 f303 	lsl.w	r3, r2, r3
 80070a8:	43db      	mvns	r3, r3
 80070aa:	69ba      	ldr	r2, [r7, #24]
 80070ac:	4013      	ands	r3, r2
 80070ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	691a      	ldr	r2, [r3, #16]
 80070b4:	69fb      	ldr	r3, [r7, #28]
 80070b6:	f003 0307 	and.w	r3, r3, #7
 80070ba:	009b      	lsls	r3, r3, #2
 80070bc:	fa02 f303 	lsl.w	r3, r2, r3
 80070c0:	69ba      	ldr	r2, [r7, #24]
 80070c2:	4313      	orrs	r3, r2
 80070c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80070c6:	69fb      	ldr	r3, [r7, #28]
 80070c8:	08da      	lsrs	r2, r3, #3
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	3208      	adds	r2, #8
 80070ce:	69b9      	ldr	r1, [r7, #24]
 80070d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80070da:	69fb      	ldr	r3, [r7, #28]
 80070dc:	005b      	lsls	r3, r3, #1
 80070de:	2203      	movs	r2, #3
 80070e0:	fa02 f303 	lsl.w	r3, r2, r3
 80070e4:	43db      	mvns	r3, r3
 80070e6:	69ba      	ldr	r2, [r7, #24]
 80070e8:	4013      	ands	r3, r2
 80070ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	f003 0203 	and.w	r2, r3, #3
 80070f4:	69fb      	ldr	r3, [r7, #28]
 80070f6:	005b      	lsls	r3, r3, #1
 80070f8:	fa02 f303 	lsl.w	r3, r2, r3
 80070fc:	69ba      	ldr	r2, [r7, #24]
 80070fe:	4313      	orrs	r3, r2
 8007100:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	69ba      	ldr	r2, [r7, #24]
 8007106:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007110:	2b00      	cmp	r3, #0
 8007112:	f000 80c0 	beq.w	8007296 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007116:	2300      	movs	r3, #0
 8007118:	60fb      	str	r3, [r7, #12]
 800711a:	4b65      	ldr	r3, [pc, #404]	; (80072b0 <HAL_GPIO_Init+0x320>)
 800711c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800711e:	4a64      	ldr	r2, [pc, #400]	; (80072b0 <HAL_GPIO_Init+0x320>)
 8007120:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007124:	6453      	str	r3, [r2, #68]	; 0x44
 8007126:	4b62      	ldr	r3, [pc, #392]	; (80072b0 <HAL_GPIO_Init+0x320>)
 8007128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800712a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800712e:	60fb      	str	r3, [r7, #12]
 8007130:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007132:	4a60      	ldr	r2, [pc, #384]	; (80072b4 <HAL_GPIO_Init+0x324>)
 8007134:	69fb      	ldr	r3, [r7, #28]
 8007136:	089b      	lsrs	r3, r3, #2
 8007138:	3302      	adds	r3, #2
 800713a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800713e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007140:	69fb      	ldr	r3, [r7, #28]
 8007142:	f003 0303 	and.w	r3, r3, #3
 8007146:	009b      	lsls	r3, r3, #2
 8007148:	220f      	movs	r2, #15
 800714a:	fa02 f303 	lsl.w	r3, r2, r3
 800714e:	43db      	mvns	r3, r3
 8007150:	69ba      	ldr	r2, [r7, #24]
 8007152:	4013      	ands	r3, r2
 8007154:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	4a57      	ldr	r2, [pc, #348]	; (80072b8 <HAL_GPIO_Init+0x328>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d037      	beq.n	80071ce <HAL_GPIO_Init+0x23e>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	4a56      	ldr	r2, [pc, #344]	; (80072bc <HAL_GPIO_Init+0x32c>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d031      	beq.n	80071ca <HAL_GPIO_Init+0x23a>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	4a55      	ldr	r2, [pc, #340]	; (80072c0 <HAL_GPIO_Init+0x330>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d02b      	beq.n	80071c6 <HAL_GPIO_Init+0x236>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	4a54      	ldr	r2, [pc, #336]	; (80072c4 <HAL_GPIO_Init+0x334>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d025      	beq.n	80071c2 <HAL_GPIO_Init+0x232>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	4a53      	ldr	r2, [pc, #332]	; (80072c8 <HAL_GPIO_Init+0x338>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d01f      	beq.n	80071be <HAL_GPIO_Init+0x22e>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	4a52      	ldr	r2, [pc, #328]	; (80072cc <HAL_GPIO_Init+0x33c>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d019      	beq.n	80071ba <HAL_GPIO_Init+0x22a>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	4a51      	ldr	r2, [pc, #324]	; (80072d0 <HAL_GPIO_Init+0x340>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d013      	beq.n	80071b6 <HAL_GPIO_Init+0x226>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	4a50      	ldr	r2, [pc, #320]	; (80072d4 <HAL_GPIO_Init+0x344>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d00d      	beq.n	80071b2 <HAL_GPIO_Init+0x222>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	4a4f      	ldr	r2, [pc, #316]	; (80072d8 <HAL_GPIO_Init+0x348>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d007      	beq.n	80071ae <HAL_GPIO_Init+0x21e>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	4a4e      	ldr	r2, [pc, #312]	; (80072dc <HAL_GPIO_Init+0x34c>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d101      	bne.n	80071aa <HAL_GPIO_Init+0x21a>
 80071a6:	2309      	movs	r3, #9
 80071a8:	e012      	b.n	80071d0 <HAL_GPIO_Init+0x240>
 80071aa:	230a      	movs	r3, #10
 80071ac:	e010      	b.n	80071d0 <HAL_GPIO_Init+0x240>
 80071ae:	2308      	movs	r3, #8
 80071b0:	e00e      	b.n	80071d0 <HAL_GPIO_Init+0x240>
 80071b2:	2307      	movs	r3, #7
 80071b4:	e00c      	b.n	80071d0 <HAL_GPIO_Init+0x240>
 80071b6:	2306      	movs	r3, #6
 80071b8:	e00a      	b.n	80071d0 <HAL_GPIO_Init+0x240>
 80071ba:	2305      	movs	r3, #5
 80071bc:	e008      	b.n	80071d0 <HAL_GPIO_Init+0x240>
 80071be:	2304      	movs	r3, #4
 80071c0:	e006      	b.n	80071d0 <HAL_GPIO_Init+0x240>
 80071c2:	2303      	movs	r3, #3
 80071c4:	e004      	b.n	80071d0 <HAL_GPIO_Init+0x240>
 80071c6:	2302      	movs	r3, #2
 80071c8:	e002      	b.n	80071d0 <HAL_GPIO_Init+0x240>
 80071ca:	2301      	movs	r3, #1
 80071cc:	e000      	b.n	80071d0 <HAL_GPIO_Init+0x240>
 80071ce:	2300      	movs	r3, #0
 80071d0:	69fa      	ldr	r2, [r7, #28]
 80071d2:	f002 0203 	and.w	r2, r2, #3
 80071d6:	0092      	lsls	r2, r2, #2
 80071d8:	4093      	lsls	r3, r2
 80071da:	69ba      	ldr	r2, [r7, #24]
 80071dc:	4313      	orrs	r3, r2
 80071de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80071e0:	4934      	ldr	r1, [pc, #208]	; (80072b4 <HAL_GPIO_Init+0x324>)
 80071e2:	69fb      	ldr	r3, [r7, #28]
 80071e4:	089b      	lsrs	r3, r3, #2
 80071e6:	3302      	adds	r3, #2
 80071e8:	69ba      	ldr	r2, [r7, #24]
 80071ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80071ee:	4b3c      	ldr	r3, [pc, #240]	; (80072e0 <HAL_GPIO_Init+0x350>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	43db      	mvns	r3, r3
 80071f8:	69ba      	ldr	r2, [r7, #24]
 80071fa:	4013      	ands	r3, r2
 80071fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007206:	2b00      	cmp	r3, #0
 8007208:	d003      	beq.n	8007212 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800720a:	69ba      	ldr	r2, [r7, #24]
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	4313      	orrs	r3, r2
 8007210:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007212:	4a33      	ldr	r2, [pc, #204]	; (80072e0 <HAL_GPIO_Init+0x350>)
 8007214:	69bb      	ldr	r3, [r7, #24]
 8007216:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007218:	4b31      	ldr	r3, [pc, #196]	; (80072e0 <HAL_GPIO_Init+0x350>)
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	43db      	mvns	r3, r3
 8007222:	69ba      	ldr	r2, [r7, #24]
 8007224:	4013      	ands	r3, r2
 8007226:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007230:	2b00      	cmp	r3, #0
 8007232:	d003      	beq.n	800723c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007234:	69ba      	ldr	r2, [r7, #24]
 8007236:	693b      	ldr	r3, [r7, #16]
 8007238:	4313      	orrs	r3, r2
 800723a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800723c:	4a28      	ldr	r2, [pc, #160]	; (80072e0 <HAL_GPIO_Init+0x350>)
 800723e:	69bb      	ldr	r3, [r7, #24]
 8007240:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007242:	4b27      	ldr	r3, [pc, #156]	; (80072e0 <HAL_GPIO_Init+0x350>)
 8007244:	689b      	ldr	r3, [r3, #8]
 8007246:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	43db      	mvns	r3, r3
 800724c:	69ba      	ldr	r2, [r7, #24]
 800724e:	4013      	ands	r3, r2
 8007250:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	685b      	ldr	r3, [r3, #4]
 8007256:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800725a:	2b00      	cmp	r3, #0
 800725c:	d003      	beq.n	8007266 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800725e:	69ba      	ldr	r2, [r7, #24]
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	4313      	orrs	r3, r2
 8007264:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007266:	4a1e      	ldr	r2, [pc, #120]	; (80072e0 <HAL_GPIO_Init+0x350>)
 8007268:	69bb      	ldr	r3, [r7, #24]
 800726a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800726c:	4b1c      	ldr	r3, [pc, #112]	; (80072e0 <HAL_GPIO_Init+0x350>)
 800726e:	68db      	ldr	r3, [r3, #12]
 8007270:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	43db      	mvns	r3, r3
 8007276:	69ba      	ldr	r2, [r7, #24]
 8007278:	4013      	ands	r3, r2
 800727a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007284:	2b00      	cmp	r3, #0
 8007286:	d003      	beq.n	8007290 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8007288:	69ba      	ldr	r2, [r7, #24]
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	4313      	orrs	r3, r2
 800728e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007290:	4a13      	ldr	r2, [pc, #76]	; (80072e0 <HAL_GPIO_Init+0x350>)
 8007292:	69bb      	ldr	r3, [r7, #24]
 8007294:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007296:	69fb      	ldr	r3, [r7, #28]
 8007298:	3301      	adds	r3, #1
 800729a:	61fb      	str	r3, [r7, #28]
 800729c:	69fb      	ldr	r3, [r7, #28]
 800729e:	2b0f      	cmp	r3, #15
 80072a0:	f67f ae84 	bls.w	8006fac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80072a4:	bf00      	nop
 80072a6:	3724      	adds	r7, #36	; 0x24
 80072a8:	46bd      	mov	sp, r7
 80072aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ae:	4770      	bx	lr
 80072b0:	40023800 	.word	0x40023800
 80072b4:	40013800 	.word	0x40013800
 80072b8:	40020000 	.word	0x40020000
 80072bc:	40020400 	.word	0x40020400
 80072c0:	40020800 	.word	0x40020800
 80072c4:	40020c00 	.word	0x40020c00
 80072c8:	40021000 	.word	0x40021000
 80072cc:	40021400 	.word	0x40021400
 80072d0:	40021800 	.word	0x40021800
 80072d4:	40021c00 	.word	0x40021c00
 80072d8:	40022000 	.word	0x40022000
 80072dc:	40022400 	.word	0x40022400
 80072e0:	40013c00 	.word	0x40013c00

080072e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b085      	sub	sp, #20
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	460b      	mov	r3, r1
 80072ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	691a      	ldr	r2, [r3, #16]
 80072f4:	887b      	ldrh	r3, [r7, #2]
 80072f6:	4013      	ands	r3, r2
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d002      	beq.n	8007302 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80072fc:	2301      	movs	r3, #1
 80072fe:	73fb      	strb	r3, [r7, #15]
 8007300:	e001      	b.n	8007306 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007302:	2300      	movs	r3, #0
 8007304:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007306:	7bfb      	ldrb	r3, [r7, #15]
}
 8007308:	4618      	mov	r0, r3
 800730a:	3714      	adds	r7, #20
 800730c:	46bd      	mov	sp, r7
 800730e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007312:	4770      	bx	lr

08007314 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007314:	b480      	push	{r7}
 8007316:	b083      	sub	sp, #12
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	460b      	mov	r3, r1
 800731e:	807b      	strh	r3, [r7, #2]
 8007320:	4613      	mov	r3, r2
 8007322:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007324:	787b      	ldrb	r3, [r7, #1]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d003      	beq.n	8007332 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800732a:	887a      	ldrh	r2, [r7, #2]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007330:	e003      	b.n	800733a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007332:	887b      	ldrh	r3, [r7, #2]
 8007334:	041a      	lsls	r2, r3, #16
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	619a      	str	r2, [r3, #24]
}
 800733a:	bf00      	nop
 800733c:	370c      	adds	r7, #12
 800733e:	46bd      	mov	sp, r7
 8007340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007344:	4770      	bx	lr
	...

08007348 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b082      	sub	sp, #8
 800734c:	af00      	add	r7, sp, #0
 800734e:	4603      	mov	r3, r0
 8007350:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007352:	4b08      	ldr	r3, [pc, #32]	; (8007374 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007354:	695a      	ldr	r2, [r3, #20]
 8007356:	88fb      	ldrh	r3, [r7, #6]
 8007358:	4013      	ands	r3, r2
 800735a:	2b00      	cmp	r3, #0
 800735c:	d006      	beq.n	800736c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800735e:	4a05      	ldr	r2, [pc, #20]	; (8007374 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007360:	88fb      	ldrh	r3, [r7, #6]
 8007362:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007364:	88fb      	ldrh	r3, [r7, #6]
 8007366:	4618      	mov	r0, r3
 8007368:	f7fc fa95 	bl	8003896 <HAL_GPIO_EXTI_Callback>
  }
}
 800736c:	bf00      	nop
 800736e:	3708      	adds	r7, #8
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}
 8007374:	40013c00 	.word	0x40013c00

08007378 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b084      	sub	sp, #16
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d101      	bne.n	800738a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007386:	2301      	movs	r3, #1
 8007388:	e11f      	b.n	80075ca <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007390:	b2db      	uxtb	r3, r3
 8007392:	2b00      	cmp	r3, #0
 8007394:	d106      	bne.n	80073a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2200      	movs	r2, #0
 800739a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f7fd faee 	bl	8004980 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2224      	movs	r2, #36	; 0x24
 80073a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	681a      	ldr	r2, [r3, #0]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f022 0201 	bic.w	r2, r2, #1
 80073ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	681a      	ldr	r2, [r3, #0]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80073ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	681a      	ldr	r2, [r3, #0]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80073da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80073dc:	f001 f96e 	bl	80086bc <HAL_RCC_GetPCLK1Freq>
 80073e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	685b      	ldr	r3, [r3, #4]
 80073e6:	4a7b      	ldr	r2, [pc, #492]	; (80075d4 <HAL_I2C_Init+0x25c>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d807      	bhi.n	80073fc <HAL_I2C_Init+0x84>
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	4a7a      	ldr	r2, [pc, #488]	; (80075d8 <HAL_I2C_Init+0x260>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	bf94      	ite	ls
 80073f4:	2301      	movls	r3, #1
 80073f6:	2300      	movhi	r3, #0
 80073f8:	b2db      	uxtb	r3, r3
 80073fa:	e006      	b.n	800740a <HAL_I2C_Init+0x92>
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	4a77      	ldr	r2, [pc, #476]	; (80075dc <HAL_I2C_Init+0x264>)
 8007400:	4293      	cmp	r3, r2
 8007402:	bf94      	ite	ls
 8007404:	2301      	movls	r3, #1
 8007406:	2300      	movhi	r3, #0
 8007408:	b2db      	uxtb	r3, r3
 800740a:	2b00      	cmp	r3, #0
 800740c:	d001      	beq.n	8007412 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800740e:	2301      	movs	r3, #1
 8007410:	e0db      	b.n	80075ca <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	4a72      	ldr	r2, [pc, #456]	; (80075e0 <HAL_I2C_Init+0x268>)
 8007416:	fba2 2303 	umull	r2, r3, r2, r3
 800741a:	0c9b      	lsrs	r3, r3, #18
 800741c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	685b      	ldr	r3, [r3, #4]
 8007424:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	68ba      	ldr	r2, [r7, #8]
 800742e:	430a      	orrs	r2, r1
 8007430:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	6a1b      	ldr	r3, [r3, #32]
 8007438:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	4a64      	ldr	r2, [pc, #400]	; (80075d4 <HAL_I2C_Init+0x25c>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d802      	bhi.n	800744c <HAL_I2C_Init+0xd4>
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	3301      	adds	r3, #1
 800744a:	e009      	b.n	8007460 <HAL_I2C_Init+0xe8>
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007452:	fb02 f303 	mul.w	r3, r2, r3
 8007456:	4a63      	ldr	r2, [pc, #396]	; (80075e4 <HAL_I2C_Init+0x26c>)
 8007458:	fba2 2303 	umull	r2, r3, r2, r3
 800745c:	099b      	lsrs	r3, r3, #6
 800745e:	3301      	adds	r3, #1
 8007460:	687a      	ldr	r2, [r7, #4]
 8007462:	6812      	ldr	r2, [r2, #0]
 8007464:	430b      	orrs	r3, r1
 8007466:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	69db      	ldr	r3, [r3, #28]
 800746e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007472:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	4956      	ldr	r1, [pc, #344]	; (80075d4 <HAL_I2C_Init+0x25c>)
 800747c:	428b      	cmp	r3, r1
 800747e:	d80d      	bhi.n	800749c <HAL_I2C_Init+0x124>
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	1e59      	subs	r1, r3, #1
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	005b      	lsls	r3, r3, #1
 800748a:	fbb1 f3f3 	udiv	r3, r1, r3
 800748e:	3301      	adds	r3, #1
 8007490:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007494:	2b04      	cmp	r3, #4
 8007496:	bf38      	it	cc
 8007498:	2304      	movcc	r3, #4
 800749a:	e04f      	b.n	800753c <HAL_I2C_Init+0x1c4>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	689b      	ldr	r3, [r3, #8]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d111      	bne.n	80074c8 <HAL_I2C_Init+0x150>
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	1e58      	subs	r0, r3, #1
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6859      	ldr	r1, [r3, #4]
 80074ac:	460b      	mov	r3, r1
 80074ae:	005b      	lsls	r3, r3, #1
 80074b0:	440b      	add	r3, r1
 80074b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80074b6:	3301      	adds	r3, #1
 80074b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80074bc:	2b00      	cmp	r3, #0
 80074be:	bf0c      	ite	eq
 80074c0:	2301      	moveq	r3, #1
 80074c2:	2300      	movne	r3, #0
 80074c4:	b2db      	uxtb	r3, r3
 80074c6:	e012      	b.n	80074ee <HAL_I2C_Init+0x176>
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	1e58      	subs	r0, r3, #1
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6859      	ldr	r1, [r3, #4]
 80074d0:	460b      	mov	r3, r1
 80074d2:	009b      	lsls	r3, r3, #2
 80074d4:	440b      	add	r3, r1
 80074d6:	0099      	lsls	r1, r3, #2
 80074d8:	440b      	add	r3, r1
 80074da:	fbb0 f3f3 	udiv	r3, r0, r3
 80074de:	3301      	adds	r3, #1
 80074e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	bf0c      	ite	eq
 80074e8:	2301      	moveq	r3, #1
 80074ea:	2300      	movne	r3, #0
 80074ec:	b2db      	uxtb	r3, r3
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d001      	beq.n	80074f6 <HAL_I2C_Init+0x17e>
 80074f2:	2301      	movs	r3, #1
 80074f4:	e022      	b.n	800753c <HAL_I2C_Init+0x1c4>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	689b      	ldr	r3, [r3, #8]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d10e      	bne.n	800751c <HAL_I2C_Init+0x1a4>
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	1e58      	subs	r0, r3, #1
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6859      	ldr	r1, [r3, #4]
 8007506:	460b      	mov	r3, r1
 8007508:	005b      	lsls	r3, r3, #1
 800750a:	440b      	add	r3, r1
 800750c:	fbb0 f3f3 	udiv	r3, r0, r3
 8007510:	3301      	adds	r3, #1
 8007512:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007516:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800751a:	e00f      	b.n	800753c <HAL_I2C_Init+0x1c4>
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	1e58      	subs	r0, r3, #1
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6859      	ldr	r1, [r3, #4]
 8007524:	460b      	mov	r3, r1
 8007526:	009b      	lsls	r3, r3, #2
 8007528:	440b      	add	r3, r1
 800752a:	0099      	lsls	r1, r3, #2
 800752c:	440b      	add	r3, r1
 800752e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007532:	3301      	adds	r3, #1
 8007534:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007538:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800753c:	6879      	ldr	r1, [r7, #4]
 800753e:	6809      	ldr	r1, [r1, #0]
 8007540:	4313      	orrs	r3, r2
 8007542:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	69da      	ldr	r2, [r3, #28]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6a1b      	ldr	r3, [r3, #32]
 8007556:	431a      	orrs	r2, r3
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	430a      	orrs	r2, r1
 800755e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800756a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800756e:	687a      	ldr	r2, [r7, #4]
 8007570:	6911      	ldr	r1, [r2, #16]
 8007572:	687a      	ldr	r2, [r7, #4]
 8007574:	68d2      	ldr	r2, [r2, #12]
 8007576:	4311      	orrs	r1, r2
 8007578:	687a      	ldr	r2, [r7, #4]
 800757a:	6812      	ldr	r2, [r2, #0]
 800757c:	430b      	orrs	r3, r1
 800757e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	68db      	ldr	r3, [r3, #12]
 8007586:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	695a      	ldr	r2, [r3, #20]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	699b      	ldr	r3, [r3, #24]
 8007592:	431a      	orrs	r2, r3
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	430a      	orrs	r2, r1
 800759a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	681a      	ldr	r2, [r3, #0]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f042 0201 	orr.w	r2, r2, #1
 80075aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2200      	movs	r2, #0
 80075b0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2220      	movs	r2, #32
 80075b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2200      	movs	r2, #0
 80075be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2200      	movs	r2, #0
 80075c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80075c8:	2300      	movs	r3, #0
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	3710      	adds	r7, #16
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}
 80075d2:	bf00      	nop
 80075d4:	000186a0 	.word	0x000186a0
 80075d8:	001e847f 	.word	0x001e847f
 80075dc:	003d08ff 	.word	0x003d08ff
 80075e0:	431bde83 	.word	0x431bde83
 80075e4:	10624dd3 	.word	0x10624dd3

080075e8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b088      	sub	sp, #32
 80075ec:	af02      	add	r7, sp, #8
 80075ee:	60f8      	str	r0, [r7, #12]
 80075f0:	607a      	str	r2, [r7, #4]
 80075f2:	461a      	mov	r2, r3
 80075f4:	460b      	mov	r3, r1
 80075f6:	817b      	strh	r3, [r7, #10]
 80075f8:	4613      	mov	r3, r2
 80075fa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80075fc:	f7fe fbe8 	bl	8005dd0 <HAL_GetTick>
 8007600:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007608:	b2db      	uxtb	r3, r3
 800760a:	2b20      	cmp	r3, #32
 800760c:	f040 80e0 	bne.w	80077d0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	9300      	str	r3, [sp, #0]
 8007614:	2319      	movs	r3, #25
 8007616:	2201      	movs	r2, #1
 8007618:	4970      	ldr	r1, [pc, #448]	; (80077dc <HAL_I2C_Master_Transmit+0x1f4>)
 800761a:	68f8      	ldr	r0, [r7, #12]
 800761c:	f000 fc58 	bl	8007ed0 <I2C_WaitOnFlagUntilTimeout>
 8007620:	4603      	mov	r3, r0
 8007622:	2b00      	cmp	r3, #0
 8007624:	d001      	beq.n	800762a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8007626:	2302      	movs	r3, #2
 8007628:	e0d3      	b.n	80077d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007630:	2b01      	cmp	r3, #1
 8007632:	d101      	bne.n	8007638 <HAL_I2C_Master_Transmit+0x50>
 8007634:	2302      	movs	r3, #2
 8007636:	e0cc      	b.n	80077d2 <HAL_I2C_Master_Transmit+0x1ea>
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	2201      	movs	r2, #1
 800763c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f003 0301 	and.w	r3, r3, #1
 800764a:	2b01      	cmp	r3, #1
 800764c:	d007      	beq.n	800765e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	681a      	ldr	r2, [r3, #0]
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f042 0201 	orr.w	r2, r2, #1
 800765c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	681a      	ldr	r2, [r3, #0]
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800766c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2221      	movs	r2, #33	; 0x21
 8007672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	2210      	movs	r2, #16
 800767a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	2200      	movs	r2, #0
 8007682:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	687a      	ldr	r2, [r7, #4]
 8007688:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	893a      	ldrh	r2, [r7, #8]
 800768e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007694:	b29a      	uxth	r2, r3
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	4a50      	ldr	r2, [pc, #320]	; (80077e0 <HAL_I2C_Master_Transmit+0x1f8>)
 800769e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80076a0:	8979      	ldrh	r1, [r7, #10]
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	6a3a      	ldr	r2, [r7, #32]
 80076a6:	68f8      	ldr	r0, [r7, #12]
 80076a8:	f000 fac2 	bl	8007c30 <I2C_MasterRequestWrite>
 80076ac:	4603      	mov	r3, r0
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d001      	beq.n	80076b6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80076b2:	2301      	movs	r3, #1
 80076b4:	e08d      	b.n	80077d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80076b6:	2300      	movs	r3, #0
 80076b8:	613b      	str	r3, [r7, #16]
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	695b      	ldr	r3, [r3, #20]
 80076c0:	613b      	str	r3, [r7, #16]
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	699b      	ldr	r3, [r3, #24]
 80076c8:	613b      	str	r3, [r7, #16]
 80076ca:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80076cc:	e066      	b.n	800779c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80076ce:	697a      	ldr	r2, [r7, #20]
 80076d0:	6a39      	ldr	r1, [r7, #32]
 80076d2:	68f8      	ldr	r0, [r7, #12]
 80076d4:	f000 fcd2 	bl	800807c <I2C_WaitOnTXEFlagUntilTimeout>
 80076d8:	4603      	mov	r3, r0
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d00d      	beq.n	80076fa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076e2:	2b04      	cmp	r3, #4
 80076e4:	d107      	bne.n	80076f6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	681a      	ldr	r2, [r3, #0]
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80076f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80076f6:	2301      	movs	r3, #1
 80076f8:	e06b      	b.n	80077d2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076fe:	781a      	ldrb	r2, [r3, #0]
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800770a:	1c5a      	adds	r2, r3, #1
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007714:	b29b      	uxth	r3, r3
 8007716:	3b01      	subs	r3, #1
 8007718:	b29a      	uxth	r2, r3
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007722:	3b01      	subs	r3, #1
 8007724:	b29a      	uxth	r2, r3
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	695b      	ldr	r3, [r3, #20]
 8007730:	f003 0304 	and.w	r3, r3, #4
 8007734:	2b04      	cmp	r3, #4
 8007736:	d11b      	bne.n	8007770 <HAL_I2C_Master_Transmit+0x188>
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800773c:	2b00      	cmp	r3, #0
 800773e:	d017      	beq.n	8007770 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007744:	781a      	ldrb	r2, [r3, #0]
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007750:	1c5a      	adds	r2, r3, #1
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800775a:	b29b      	uxth	r3, r3
 800775c:	3b01      	subs	r3, #1
 800775e:	b29a      	uxth	r2, r3
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007768:	3b01      	subs	r3, #1
 800776a:	b29a      	uxth	r2, r3
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007770:	697a      	ldr	r2, [r7, #20]
 8007772:	6a39      	ldr	r1, [r7, #32]
 8007774:	68f8      	ldr	r0, [r7, #12]
 8007776:	f000 fcc2 	bl	80080fe <I2C_WaitOnBTFFlagUntilTimeout>
 800777a:	4603      	mov	r3, r0
 800777c:	2b00      	cmp	r3, #0
 800777e:	d00d      	beq.n	800779c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007784:	2b04      	cmp	r3, #4
 8007786:	d107      	bne.n	8007798 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	681a      	ldr	r2, [r3, #0]
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007796:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007798:	2301      	movs	r3, #1
 800779a:	e01a      	b.n	80077d2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d194      	bne.n	80076ce <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	681a      	ldr	r2, [r3, #0]
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	2220      	movs	r2, #32
 80077b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	2200      	movs	r2, #0
 80077c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	2200      	movs	r2, #0
 80077c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80077cc:	2300      	movs	r3, #0
 80077ce:	e000      	b.n	80077d2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80077d0:	2302      	movs	r3, #2
  }
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	3718      	adds	r7, #24
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}
 80077da:	bf00      	nop
 80077dc:	00100002 	.word	0x00100002
 80077e0:	ffff0000 	.word	0xffff0000

080077e4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b08c      	sub	sp, #48	; 0x30
 80077e8:	af02      	add	r7, sp, #8
 80077ea:	60f8      	str	r0, [r7, #12]
 80077ec:	607a      	str	r2, [r7, #4]
 80077ee:	461a      	mov	r2, r3
 80077f0:	460b      	mov	r3, r1
 80077f2:	817b      	strh	r3, [r7, #10]
 80077f4:	4613      	mov	r3, r2
 80077f6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80077f8:	f7fe faea 	bl	8005dd0 <HAL_GetTick>
 80077fc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007804:	b2db      	uxtb	r3, r3
 8007806:	2b20      	cmp	r3, #32
 8007808:	f040 820b 	bne.w	8007c22 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800780c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800780e:	9300      	str	r3, [sp, #0]
 8007810:	2319      	movs	r3, #25
 8007812:	2201      	movs	r2, #1
 8007814:	497c      	ldr	r1, [pc, #496]	; (8007a08 <HAL_I2C_Master_Receive+0x224>)
 8007816:	68f8      	ldr	r0, [r7, #12]
 8007818:	f000 fb5a 	bl	8007ed0 <I2C_WaitOnFlagUntilTimeout>
 800781c:	4603      	mov	r3, r0
 800781e:	2b00      	cmp	r3, #0
 8007820:	d001      	beq.n	8007826 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8007822:	2302      	movs	r3, #2
 8007824:	e1fe      	b.n	8007c24 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800782c:	2b01      	cmp	r3, #1
 800782e:	d101      	bne.n	8007834 <HAL_I2C_Master_Receive+0x50>
 8007830:	2302      	movs	r3, #2
 8007832:	e1f7      	b.n	8007c24 <HAL_I2C_Master_Receive+0x440>
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	2201      	movs	r2, #1
 8007838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f003 0301 	and.w	r3, r3, #1
 8007846:	2b01      	cmp	r3, #1
 8007848:	d007      	beq.n	800785a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	681a      	ldr	r2, [r3, #0]
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f042 0201 	orr.w	r2, r2, #1
 8007858:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	681a      	ldr	r2, [r3, #0]
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007868:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2222      	movs	r2, #34	; 0x22
 800786e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	2210      	movs	r2, #16
 8007876:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2200      	movs	r2, #0
 800787e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	687a      	ldr	r2, [r7, #4]
 8007884:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	893a      	ldrh	r2, [r7, #8]
 800788a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007890:	b29a      	uxth	r2, r3
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	4a5c      	ldr	r2, [pc, #368]	; (8007a0c <HAL_I2C_Master_Receive+0x228>)
 800789a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800789c:	8979      	ldrh	r1, [r7, #10]
 800789e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078a2:	68f8      	ldr	r0, [r7, #12]
 80078a4:	f000 fa46 	bl	8007d34 <I2C_MasterRequestRead>
 80078a8:	4603      	mov	r3, r0
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d001      	beq.n	80078b2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80078ae:	2301      	movs	r3, #1
 80078b0:	e1b8      	b.n	8007c24 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d113      	bne.n	80078e2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80078ba:	2300      	movs	r3, #0
 80078bc:	623b      	str	r3, [r7, #32]
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	695b      	ldr	r3, [r3, #20]
 80078c4:	623b      	str	r3, [r7, #32]
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	699b      	ldr	r3, [r3, #24]
 80078cc:	623b      	str	r3, [r7, #32]
 80078ce:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	681a      	ldr	r2, [r3, #0]
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078de:	601a      	str	r2, [r3, #0]
 80078e0:	e18c      	b.n	8007bfc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078e6:	2b01      	cmp	r3, #1
 80078e8:	d11b      	bne.n	8007922 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	681a      	ldr	r2, [r3, #0]
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80078fa:	2300      	movs	r3, #0
 80078fc:	61fb      	str	r3, [r7, #28]
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	695b      	ldr	r3, [r3, #20]
 8007904:	61fb      	str	r3, [r7, #28]
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	699b      	ldr	r3, [r3, #24]
 800790c:	61fb      	str	r3, [r7, #28]
 800790e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	681a      	ldr	r2, [r3, #0]
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800791e:	601a      	str	r2, [r3, #0]
 8007920:	e16c      	b.n	8007bfc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007926:	2b02      	cmp	r3, #2
 8007928:	d11b      	bne.n	8007962 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	681a      	ldr	r2, [r3, #0]
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007938:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	681a      	ldr	r2, [r3, #0]
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007948:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800794a:	2300      	movs	r3, #0
 800794c:	61bb      	str	r3, [r7, #24]
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	695b      	ldr	r3, [r3, #20]
 8007954:	61bb      	str	r3, [r7, #24]
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	699b      	ldr	r3, [r3, #24]
 800795c:	61bb      	str	r3, [r7, #24]
 800795e:	69bb      	ldr	r3, [r7, #24]
 8007960:	e14c      	b.n	8007bfc <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	681a      	ldr	r2, [r3, #0]
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007970:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007972:	2300      	movs	r3, #0
 8007974:	617b      	str	r3, [r7, #20]
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	695b      	ldr	r3, [r3, #20]
 800797c:	617b      	str	r3, [r7, #20]
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	699b      	ldr	r3, [r3, #24]
 8007984:	617b      	str	r3, [r7, #20]
 8007986:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007988:	e138      	b.n	8007bfc <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800798e:	2b03      	cmp	r3, #3
 8007990:	f200 80f1 	bhi.w	8007b76 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007998:	2b01      	cmp	r3, #1
 800799a:	d123      	bne.n	80079e4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800799c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800799e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80079a0:	68f8      	ldr	r0, [r7, #12]
 80079a2:	f000 fbed 	bl	8008180 <I2C_WaitOnRXNEFlagUntilTimeout>
 80079a6:	4603      	mov	r3, r0
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d001      	beq.n	80079b0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80079ac:	2301      	movs	r3, #1
 80079ae:	e139      	b.n	8007c24 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	691a      	ldr	r2, [r3, #16]
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ba:	b2d2      	uxtb	r2, r2
 80079bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c2:	1c5a      	adds	r2, r3, #1
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079cc:	3b01      	subs	r3, #1
 80079ce:	b29a      	uxth	r2, r3
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079d8:	b29b      	uxth	r3, r3
 80079da:	3b01      	subs	r3, #1
 80079dc:	b29a      	uxth	r2, r3
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80079e2:	e10b      	b.n	8007bfc <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079e8:	2b02      	cmp	r3, #2
 80079ea:	d14e      	bne.n	8007a8a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80079ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ee:	9300      	str	r3, [sp, #0]
 80079f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f2:	2200      	movs	r2, #0
 80079f4:	4906      	ldr	r1, [pc, #24]	; (8007a10 <HAL_I2C_Master_Receive+0x22c>)
 80079f6:	68f8      	ldr	r0, [r7, #12]
 80079f8:	f000 fa6a 	bl	8007ed0 <I2C_WaitOnFlagUntilTimeout>
 80079fc:	4603      	mov	r3, r0
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d008      	beq.n	8007a14 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8007a02:	2301      	movs	r3, #1
 8007a04:	e10e      	b.n	8007c24 <HAL_I2C_Master_Receive+0x440>
 8007a06:	bf00      	nop
 8007a08:	00100002 	.word	0x00100002
 8007a0c:	ffff0000 	.word	0xffff0000
 8007a10:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	681a      	ldr	r2, [r3, #0]
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	691a      	ldr	r2, [r3, #16]
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a2e:	b2d2      	uxtb	r2, r2
 8007a30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a36:	1c5a      	adds	r2, r3, #1
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a40:	3b01      	subs	r3, #1
 8007a42:	b29a      	uxth	r2, r3
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a4c:	b29b      	uxth	r3, r3
 8007a4e:	3b01      	subs	r3, #1
 8007a50:	b29a      	uxth	r2, r3
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	691a      	ldr	r2, [r3, #16]
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a60:	b2d2      	uxtb	r2, r2
 8007a62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a68:	1c5a      	adds	r2, r3, #1
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a72:	3b01      	subs	r3, #1
 8007a74:	b29a      	uxth	r2, r3
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a7e:	b29b      	uxth	r3, r3
 8007a80:	3b01      	subs	r3, #1
 8007a82:	b29a      	uxth	r2, r3
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007a88:	e0b8      	b.n	8007bfc <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a8c:	9300      	str	r3, [sp, #0]
 8007a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a90:	2200      	movs	r2, #0
 8007a92:	4966      	ldr	r1, [pc, #408]	; (8007c2c <HAL_I2C_Master_Receive+0x448>)
 8007a94:	68f8      	ldr	r0, [r7, #12]
 8007a96:	f000 fa1b 	bl	8007ed0 <I2C_WaitOnFlagUntilTimeout>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d001      	beq.n	8007aa4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	e0bf      	b.n	8007c24 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	681a      	ldr	r2, [r3, #0]
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ab2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	691a      	ldr	r2, [r3, #16]
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007abe:	b2d2      	uxtb	r2, r2
 8007ac0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac6:	1c5a      	adds	r2, r3, #1
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ad0:	3b01      	subs	r3, #1
 8007ad2:	b29a      	uxth	r2, r3
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007adc:	b29b      	uxth	r3, r3
 8007ade:	3b01      	subs	r3, #1
 8007ae0:	b29a      	uxth	r2, r3
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae8:	9300      	str	r3, [sp, #0]
 8007aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aec:	2200      	movs	r2, #0
 8007aee:	494f      	ldr	r1, [pc, #316]	; (8007c2c <HAL_I2C_Master_Receive+0x448>)
 8007af0:	68f8      	ldr	r0, [r7, #12]
 8007af2:	f000 f9ed 	bl	8007ed0 <I2C_WaitOnFlagUntilTimeout>
 8007af6:	4603      	mov	r3, r0
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d001      	beq.n	8007b00 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8007afc:	2301      	movs	r3, #1
 8007afe:	e091      	b.n	8007c24 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	681a      	ldr	r2, [r3, #0]
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	691a      	ldr	r2, [r3, #16]
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b1a:	b2d2      	uxtb	r2, r2
 8007b1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b22:	1c5a      	adds	r2, r3, #1
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b2c:	3b01      	subs	r3, #1
 8007b2e:	b29a      	uxth	r2, r3
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b38:	b29b      	uxth	r3, r3
 8007b3a:	3b01      	subs	r3, #1
 8007b3c:	b29a      	uxth	r2, r3
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	691a      	ldr	r2, [r3, #16]
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b4c:	b2d2      	uxtb	r2, r2
 8007b4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b54:	1c5a      	adds	r2, r3, #1
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b5e:	3b01      	subs	r3, #1
 8007b60:	b29a      	uxth	r2, r3
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	3b01      	subs	r3, #1
 8007b6e:	b29a      	uxth	r2, r3
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007b74:	e042      	b.n	8007bfc <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007b76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b78:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007b7a:	68f8      	ldr	r0, [r7, #12]
 8007b7c:	f000 fb00 	bl	8008180 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007b80:	4603      	mov	r3, r0
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d001      	beq.n	8007b8a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8007b86:	2301      	movs	r3, #1
 8007b88:	e04c      	b.n	8007c24 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	691a      	ldr	r2, [r3, #16]
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b94:	b2d2      	uxtb	r2, r2
 8007b96:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b9c:	1c5a      	adds	r2, r3, #1
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ba6:	3b01      	subs	r3, #1
 8007ba8:	b29a      	uxth	r2, r3
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bb2:	b29b      	uxth	r3, r3
 8007bb4:	3b01      	subs	r3, #1
 8007bb6:	b29a      	uxth	r2, r3
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	695b      	ldr	r3, [r3, #20]
 8007bc2:	f003 0304 	and.w	r3, r3, #4
 8007bc6:	2b04      	cmp	r3, #4
 8007bc8:	d118      	bne.n	8007bfc <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	691a      	ldr	r2, [r3, #16]
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bd4:	b2d2      	uxtb	r2, r2
 8007bd6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bdc:	1c5a      	adds	r2, r3, #1
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007be6:	3b01      	subs	r3, #1
 8007be8:	b29a      	uxth	r2, r3
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bf2:	b29b      	uxth	r3, r3
 8007bf4:	3b01      	subs	r3, #1
 8007bf6:	b29a      	uxth	r2, r3
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	f47f aec2 	bne.w	800798a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	2220      	movs	r2, #32
 8007c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	2200      	movs	r2, #0
 8007c12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	e000      	b.n	8007c24 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007c22:	2302      	movs	r3, #2
  }
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	3728      	adds	r7, #40	; 0x28
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}
 8007c2c:	00010004 	.word	0x00010004

08007c30 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b088      	sub	sp, #32
 8007c34:	af02      	add	r7, sp, #8
 8007c36:	60f8      	str	r0, [r7, #12]
 8007c38:	607a      	str	r2, [r7, #4]
 8007c3a:	603b      	str	r3, [r7, #0]
 8007c3c:	460b      	mov	r3, r1
 8007c3e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c44:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	2b08      	cmp	r3, #8
 8007c4a:	d006      	beq.n	8007c5a <I2C_MasterRequestWrite+0x2a>
 8007c4c:	697b      	ldr	r3, [r7, #20]
 8007c4e:	2b01      	cmp	r3, #1
 8007c50:	d003      	beq.n	8007c5a <I2C_MasterRequestWrite+0x2a>
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007c58:	d108      	bne.n	8007c6c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	681a      	ldr	r2, [r3, #0]
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007c68:	601a      	str	r2, [r3, #0]
 8007c6a:	e00b      	b.n	8007c84 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c70:	2b12      	cmp	r3, #18
 8007c72:	d107      	bne.n	8007c84 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	681a      	ldr	r2, [r3, #0]
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007c82:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	9300      	str	r3, [sp, #0]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007c90:	68f8      	ldr	r0, [r7, #12]
 8007c92:	f000 f91d 	bl	8007ed0 <I2C_WaitOnFlagUntilTimeout>
 8007c96:	4603      	mov	r3, r0
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d00d      	beq.n	8007cb8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ca6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007caa:	d103      	bne.n	8007cb4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007cb2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007cb4:	2303      	movs	r3, #3
 8007cb6:	e035      	b.n	8007d24 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	691b      	ldr	r3, [r3, #16]
 8007cbc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007cc0:	d108      	bne.n	8007cd4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007cc2:	897b      	ldrh	r3, [r7, #10]
 8007cc4:	b2db      	uxtb	r3, r3
 8007cc6:	461a      	mov	r2, r3
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007cd0:	611a      	str	r2, [r3, #16]
 8007cd2:	e01b      	b.n	8007d0c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007cd4:	897b      	ldrh	r3, [r7, #10]
 8007cd6:	11db      	asrs	r3, r3, #7
 8007cd8:	b2db      	uxtb	r3, r3
 8007cda:	f003 0306 	and.w	r3, r3, #6
 8007cde:	b2db      	uxtb	r3, r3
 8007ce0:	f063 030f 	orn	r3, r3, #15
 8007ce4:	b2da      	uxtb	r2, r3
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	687a      	ldr	r2, [r7, #4]
 8007cf0:	490e      	ldr	r1, [pc, #56]	; (8007d2c <I2C_MasterRequestWrite+0xfc>)
 8007cf2:	68f8      	ldr	r0, [r7, #12]
 8007cf4:	f000 f943 	bl	8007f7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d001      	beq.n	8007d02 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007cfe:	2301      	movs	r3, #1
 8007d00:	e010      	b.n	8007d24 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007d02:	897b      	ldrh	r3, [r7, #10]
 8007d04:	b2da      	uxtb	r2, r3
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	687a      	ldr	r2, [r7, #4]
 8007d10:	4907      	ldr	r1, [pc, #28]	; (8007d30 <I2C_MasterRequestWrite+0x100>)
 8007d12:	68f8      	ldr	r0, [r7, #12]
 8007d14:	f000 f933 	bl	8007f7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d001      	beq.n	8007d22 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8007d1e:	2301      	movs	r3, #1
 8007d20:	e000      	b.n	8007d24 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8007d22:	2300      	movs	r3, #0
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	3718      	adds	r7, #24
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}
 8007d2c:	00010008 	.word	0x00010008
 8007d30:	00010002 	.word	0x00010002

08007d34 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b088      	sub	sp, #32
 8007d38:	af02      	add	r7, sp, #8
 8007d3a:	60f8      	str	r0, [r7, #12]
 8007d3c:	607a      	str	r2, [r7, #4]
 8007d3e:	603b      	str	r3, [r7, #0]
 8007d40:	460b      	mov	r3, r1
 8007d42:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d48:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	681a      	ldr	r2, [r3, #0]
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007d58:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007d5a:	697b      	ldr	r3, [r7, #20]
 8007d5c:	2b08      	cmp	r3, #8
 8007d5e:	d006      	beq.n	8007d6e <I2C_MasterRequestRead+0x3a>
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	2b01      	cmp	r3, #1
 8007d64:	d003      	beq.n	8007d6e <I2C_MasterRequestRead+0x3a>
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007d6c:	d108      	bne.n	8007d80 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	681a      	ldr	r2, [r3, #0]
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007d7c:	601a      	str	r2, [r3, #0]
 8007d7e:	e00b      	b.n	8007d98 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d84:	2b11      	cmp	r3, #17
 8007d86:	d107      	bne.n	8007d98 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	681a      	ldr	r2, [r3, #0]
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007d96:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	9300      	str	r3, [sp, #0]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007da4:	68f8      	ldr	r0, [r7, #12]
 8007da6:	f000 f893 	bl	8007ed0 <I2C_WaitOnFlagUntilTimeout>
 8007daa:	4603      	mov	r3, r0
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d00d      	beq.n	8007dcc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dbe:	d103      	bne.n	8007dc8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007dc6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007dc8:	2303      	movs	r3, #3
 8007dca:	e079      	b.n	8007ec0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	691b      	ldr	r3, [r3, #16]
 8007dd0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007dd4:	d108      	bne.n	8007de8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007dd6:	897b      	ldrh	r3, [r7, #10]
 8007dd8:	b2db      	uxtb	r3, r3
 8007dda:	f043 0301 	orr.w	r3, r3, #1
 8007dde:	b2da      	uxtb	r2, r3
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	611a      	str	r2, [r3, #16]
 8007de6:	e05f      	b.n	8007ea8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007de8:	897b      	ldrh	r3, [r7, #10]
 8007dea:	11db      	asrs	r3, r3, #7
 8007dec:	b2db      	uxtb	r3, r3
 8007dee:	f003 0306 	and.w	r3, r3, #6
 8007df2:	b2db      	uxtb	r3, r3
 8007df4:	f063 030f 	orn	r3, r3, #15
 8007df8:	b2da      	uxtb	r2, r3
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	687a      	ldr	r2, [r7, #4]
 8007e04:	4930      	ldr	r1, [pc, #192]	; (8007ec8 <I2C_MasterRequestRead+0x194>)
 8007e06:	68f8      	ldr	r0, [r7, #12]
 8007e08:	f000 f8b9 	bl	8007f7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d001      	beq.n	8007e16 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8007e12:	2301      	movs	r3, #1
 8007e14:	e054      	b.n	8007ec0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007e16:	897b      	ldrh	r3, [r7, #10]
 8007e18:	b2da      	uxtb	r2, r3
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	687a      	ldr	r2, [r7, #4]
 8007e24:	4929      	ldr	r1, [pc, #164]	; (8007ecc <I2C_MasterRequestRead+0x198>)
 8007e26:	68f8      	ldr	r0, [r7, #12]
 8007e28:	f000 f8a9 	bl	8007f7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d001      	beq.n	8007e36 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8007e32:	2301      	movs	r3, #1
 8007e34:	e044      	b.n	8007ec0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e36:	2300      	movs	r3, #0
 8007e38:	613b      	str	r3, [r7, #16]
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	695b      	ldr	r3, [r3, #20]
 8007e40:	613b      	str	r3, [r7, #16]
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	699b      	ldr	r3, [r3, #24]
 8007e48:	613b      	str	r3, [r7, #16]
 8007e4a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	681a      	ldr	r2, [r3, #0]
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e5a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	9300      	str	r3, [sp, #0]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2200      	movs	r2, #0
 8007e64:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007e68:	68f8      	ldr	r0, [r7, #12]
 8007e6a:	f000 f831 	bl	8007ed0 <I2C_WaitOnFlagUntilTimeout>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d00d      	beq.n	8007e90 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e82:	d103      	bne.n	8007e8c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e8a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8007e8c:	2303      	movs	r3, #3
 8007e8e:	e017      	b.n	8007ec0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8007e90:	897b      	ldrh	r3, [r7, #10]
 8007e92:	11db      	asrs	r3, r3, #7
 8007e94:	b2db      	uxtb	r3, r3
 8007e96:	f003 0306 	and.w	r3, r3, #6
 8007e9a:	b2db      	uxtb	r3, r3
 8007e9c:	f063 030e 	orn	r3, r3, #14
 8007ea0:	b2da      	uxtb	r2, r3
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	687a      	ldr	r2, [r7, #4]
 8007eac:	4907      	ldr	r1, [pc, #28]	; (8007ecc <I2C_MasterRequestRead+0x198>)
 8007eae:	68f8      	ldr	r0, [r7, #12]
 8007eb0:	f000 f865 	bl	8007f7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d001      	beq.n	8007ebe <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8007eba:	2301      	movs	r3, #1
 8007ebc:	e000      	b.n	8007ec0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8007ebe:	2300      	movs	r3, #0
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3718      	adds	r7, #24
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}
 8007ec8:	00010008 	.word	0x00010008
 8007ecc:	00010002 	.word	0x00010002

08007ed0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b084      	sub	sp, #16
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	60f8      	str	r0, [r7, #12]
 8007ed8:	60b9      	str	r1, [r7, #8]
 8007eda:	603b      	str	r3, [r7, #0]
 8007edc:	4613      	mov	r3, r2
 8007ede:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007ee0:	e025      	b.n	8007f2e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ee8:	d021      	beq.n	8007f2e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007eea:	f7fd ff71 	bl	8005dd0 <HAL_GetTick>
 8007eee:	4602      	mov	r2, r0
 8007ef0:	69bb      	ldr	r3, [r7, #24]
 8007ef2:	1ad3      	subs	r3, r2, r3
 8007ef4:	683a      	ldr	r2, [r7, #0]
 8007ef6:	429a      	cmp	r2, r3
 8007ef8:	d302      	bcc.n	8007f00 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d116      	bne.n	8007f2e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	2200      	movs	r2, #0
 8007f04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	2220      	movs	r2, #32
 8007f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	2200      	movs	r2, #0
 8007f12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f1a:	f043 0220 	orr.w	r2, r3, #32
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	2200      	movs	r2, #0
 8007f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	e023      	b.n	8007f76 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	0c1b      	lsrs	r3, r3, #16
 8007f32:	b2db      	uxtb	r3, r3
 8007f34:	2b01      	cmp	r3, #1
 8007f36:	d10d      	bne.n	8007f54 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	695b      	ldr	r3, [r3, #20]
 8007f3e:	43da      	mvns	r2, r3
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	4013      	ands	r3, r2
 8007f44:	b29b      	uxth	r3, r3
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	bf0c      	ite	eq
 8007f4a:	2301      	moveq	r3, #1
 8007f4c:	2300      	movne	r3, #0
 8007f4e:	b2db      	uxtb	r3, r3
 8007f50:	461a      	mov	r2, r3
 8007f52:	e00c      	b.n	8007f6e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	699b      	ldr	r3, [r3, #24]
 8007f5a:	43da      	mvns	r2, r3
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	4013      	ands	r3, r2
 8007f60:	b29b      	uxth	r3, r3
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	bf0c      	ite	eq
 8007f66:	2301      	moveq	r3, #1
 8007f68:	2300      	movne	r3, #0
 8007f6a:	b2db      	uxtb	r3, r3
 8007f6c:	461a      	mov	r2, r3
 8007f6e:	79fb      	ldrb	r3, [r7, #7]
 8007f70:	429a      	cmp	r2, r3
 8007f72:	d0b6      	beq.n	8007ee2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007f74:	2300      	movs	r3, #0
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	3710      	adds	r7, #16
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}

08007f7e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007f7e:	b580      	push	{r7, lr}
 8007f80:	b084      	sub	sp, #16
 8007f82:	af00      	add	r7, sp, #0
 8007f84:	60f8      	str	r0, [r7, #12]
 8007f86:	60b9      	str	r1, [r7, #8]
 8007f88:	607a      	str	r2, [r7, #4]
 8007f8a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007f8c:	e051      	b.n	8008032 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	695b      	ldr	r3, [r3, #20]
 8007f94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f9c:	d123      	bne.n	8007fe6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	681a      	ldr	r2, [r3, #0]
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007fac:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007fb6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	2220      	movs	r2, #32
 8007fc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fd2:	f043 0204 	orr.w	r2, r3, #4
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	e046      	b.n	8008074 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fec:	d021      	beq.n	8008032 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007fee:	f7fd feef 	bl	8005dd0 <HAL_GetTick>
 8007ff2:	4602      	mov	r2, r0
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	1ad3      	subs	r3, r2, r3
 8007ff8:	687a      	ldr	r2, [r7, #4]
 8007ffa:	429a      	cmp	r2, r3
 8007ffc:	d302      	bcc.n	8008004 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d116      	bne.n	8008032 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2200      	movs	r2, #0
 8008008:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	2220      	movs	r2, #32
 800800e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	2200      	movs	r2, #0
 8008016:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800801e:	f043 0220 	orr.w	r2, r3, #32
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	2200      	movs	r2, #0
 800802a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800802e:	2301      	movs	r3, #1
 8008030:	e020      	b.n	8008074 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	0c1b      	lsrs	r3, r3, #16
 8008036:	b2db      	uxtb	r3, r3
 8008038:	2b01      	cmp	r3, #1
 800803a:	d10c      	bne.n	8008056 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	695b      	ldr	r3, [r3, #20]
 8008042:	43da      	mvns	r2, r3
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	4013      	ands	r3, r2
 8008048:	b29b      	uxth	r3, r3
 800804a:	2b00      	cmp	r3, #0
 800804c:	bf14      	ite	ne
 800804e:	2301      	movne	r3, #1
 8008050:	2300      	moveq	r3, #0
 8008052:	b2db      	uxtb	r3, r3
 8008054:	e00b      	b.n	800806e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	699b      	ldr	r3, [r3, #24]
 800805c:	43da      	mvns	r2, r3
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	4013      	ands	r3, r2
 8008062:	b29b      	uxth	r3, r3
 8008064:	2b00      	cmp	r3, #0
 8008066:	bf14      	ite	ne
 8008068:	2301      	movne	r3, #1
 800806a:	2300      	moveq	r3, #0
 800806c:	b2db      	uxtb	r3, r3
 800806e:	2b00      	cmp	r3, #0
 8008070:	d18d      	bne.n	8007f8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008072:	2300      	movs	r3, #0
}
 8008074:	4618      	mov	r0, r3
 8008076:	3710      	adds	r7, #16
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}

0800807c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b084      	sub	sp, #16
 8008080:	af00      	add	r7, sp, #0
 8008082:	60f8      	str	r0, [r7, #12]
 8008084:	60b9      	str	r1, [r7, #8]
 8008086:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008088:	e02d      	b.n	80080e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800808a:	68f8      	ldr	r0, [r7, #12]
 800808c:	f000 f8ce 	bl	800822c <I2C_IsAcknowledgeFailed>
 8008090:	4603      	mov	r3, r0
 8008092:	2b00      	cmp	r3, #0
 8008094:	d001      	beq.n	800809a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008096:	2301      	movs	r3, #1
 8008098:	e02d      	b.n	80080f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080a0:	d021      	beq.n	80080e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80080a2:	f7fd fe95 	bl	8005dd0 <HAL_GetTick>
 80080a6:	4602      	mov	r2, r0
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	1ad3      	subs	r3, r2, r3
 80080ac:	68ba      	ldr	r2, [r7, #8]
 80080ae:	429a      	cmp	r2, r3
 80080b0:	d302      	bcc.n	80080b8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d116      	bne.n	80080e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	2200      	movs	r2, #0
 80080bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	2220      	movs	r2, #32
 80080c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	2200      	movs	r2, #0
 80080ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080d2:	f043 0220 	orr.w	r2, r3, #32
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	2200      	movs	r2, #0
 80080de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80080e2:	2301      	movs	r3, #1
 80080e4:	e007      	b.n	80080f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	695b      	ldr	r3, [r3, #20]
 80080ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080f0:	2b80      	cmp	r3, #128	; 0x80
 80080f2:	d1ca      	bne.n	800808a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80080f4:	2300      	movs	r3, #0
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	3710      	adds	r7, #16
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}

080080fe <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80080fe:	b580      	push	{r7, lr}
 8008100:	b084      	sub	sp, #16
 8008102:	af00      	add	r7, sp, #0
 8008104:	60f8      	str	r0, [r7, #12]
 8008106:	60b9      	str	r1, [r7, #8]
 8008108:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800810a:	e02d      	b.n	8008168 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800810c:	68f8      	ldr	r0, [r7, #12]
 800810e:	f000 f88d 	bl	800822c <I2C_IsAcknowledgeFailed>
 8008112:	4603      	mov	r3, r0
 8008114:	2b00      	cmp	r3, #0
 8008116:	d001      	beq.n	800811c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008118:	2301      	movs	r3, #1
 800811a:	e02d      	b.n	8008178 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008122:	d021      	beq.n	8008168 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008124:	f7fd fe54 	bl	8005dd0 <HAL_GetTick>
 8008128:	4602      	mov	r2, r0
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	1ad3      	subs	r3, r2, r3
 800812e:	68ba      	ldr	r2, [r7, #8]
 8008130:	429a      	cmp	r2, r3
 8008132:	d302      	bcc.n	800813a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d116      	bne.n	8008168 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	2200      	movs	r2, #0
 800813e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	2220      	movs	r2, #32
 8008144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	2200      	movs	r2, #0
 800814c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008154:	f043 0220 	orr.w	r2, r3, #32
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	2200      	movs	r2, #0
 8008160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008164:	2301      	movs	r3, #1
 8008166:	e007      	b.n	8008178 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	695b      	ldr	r3, [r3, #20]
 800816e:	f003 0304 	and.w	r3, r3, #4
 8008172:	2b04      	cmp	r3, #4
 8008174:	d1ca      	bne.n	800810c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008176:	2300      	movs	r3, #0
}
 8008178:	4618      	mov	r0, r3
 800817a:	3710      	adds	r7, #16
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}

08008180 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b084      	sub	sp, #16
 8008184:	af00      	add	r7, sp, #0
 8008186:	60f8      	str	r0, [r7, #12]
 8008188:	60b9      	str	r1, [r7, #8]
 800818a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800818c:	e042      	b.n	8008214 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	695b      	ldr	r3, [r3, #20]
 8008194:	f003 0310 	and.w	r3, r3, #16
 8008198:	2b10      	cmp	r3, #16
 800819a:	d119      	bne.n	80081d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f06f 0210 	mvn.w	r2, #16
 80081a4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	2200      	movs	r2, #0
 80081aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	2220      	movs	r2, #32
 80081b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	2200      	movs	r2, #0
 80081b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	2200      	movs	r2, #0
 80081c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80081cc:	2301      	movs	r3, #1
 80081ce:	e029      	b.n	8008224 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081d0:	f7fd fdfe 	bl	8005dd0 <HAL_GetTick>
 80081d4:	4602      	mov	r2, r0
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	1ad3      	subs	r3, r2, r3
 80081da:	68ba      	ldr	r2, [r7, #8]
 80081dc:	429a      	cmp	r2, r3
 80081de:	d302      	bcc.n	80081e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d116      	bne.n	8008214 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	2200      	movs	r2, #0
 80081ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	2220      	movs	r2, #32
 80081f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	2200      	movs	r2, #0
 80081f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008200:	f043 0220 	orr.w	r2, r3, #32
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	2200      	movs	r2, #0
 800820c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008210:	2301      	movs	r3, #1
 8008212:	e007      	b.n	8008224 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	695b      	ldr	r3, [r3, #20]
 800821a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800821e:	2b40      	cmp	r3, #64	; 0x40
 8008220:	d1b5      	bne.n	800818e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008222:	2300      	movs	r3, #0
}
 8008224:	4618      	mov	r0, r3
 8008226:	3710      	adds	r7, #16
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}

0800822c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800822c:	b480      	push	{r7}
 800822e:	b083      	sub	sp, #12
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	695b      	ldr	r3, [r3, #20]
 800823a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800823e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008242:	d11b      	bne.n	800827c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800824c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2200      	movs	r2, #0
 8008252:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2220      	movs	r2, #32
 8008258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2200      	movs	r2, #0
 8008260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008268:	f043 0204 	orr.w	r2, r3, #4
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2200      	movs	r2, #0
 8008274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008278:	2301      	movs	r3, #1
 800827a:	e000      	b.n	800827e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800827c:	2300      	movs	r3, #0
}
 800827e:	4618      	mov	r0, r3
 8008280:	370c      	adds	r7, #12
 8008282:	46bd      	mov	sp, r7
 8008284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008288:	4770      	bx	lr
	...

0800828c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b082      	sub	sp, #8
 8008290:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8008292:	2300      	movs	r3, #0
 8008294:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8008296:	2300      	movs	r3, #0
 8008298:	603b      	str	r3, [r7, #0]
 800829a:	4b20      	ldr	r3, [pc, #128]	; (800831c <HAL_PWREx_EnableOverDrive+0x90>)
 800829c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800829e:	4a1f      	ldr	r2, [pc, #124]	; (800831c <HAL_PWREx_EnableOverDrive+0x90>)
 80082a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082a4:	6413      	str	r3, [r2, #64]	; 0x40
 80082a6:	4b1d      	ldr	r3, [pc, #116]	; (800831c <HAL_PWREx_EnableOverDrive+0x90>)
 80082a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082ae:	603b      	str	r3, [r7, #0]
 80082b0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80082b2:	4b1b      	ldr	r3, [pc, #108]	; (8008320 <HAL_PWREx_EnableOverDrive+0x94>)
 80082b4:	2201      	movs	r2, #1
 80082b6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80082b8:	f7fd fd8a 	bl	8005dd0 <HAL_GetTick>
 80082bc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80082be:	e009      	b.n	80082d4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80082c0:	f7fd fd86 	bl	8005dd0 <HAL_GetTick>
 80082c4:	4602      	mov	r2, r0
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	1ad3      	subs	r3, r2, r3
 80082ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80082ce:	d901      	bls.n	80082d4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80082d0:	2303      	movs	r3, #3
 80082d2:	e01f      	b.n	8008314 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80082d4:	4b13      	ldr	r3, [pc, #76]	; (8008324 <HAL_PWREx_EnableOverDrive+0x98>)
 80082d6:	685b      	ldr	r3, [r3, #4]
 80082d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80082dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082e0:	d1ee      	bne.n	80082c0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80082e2:	4b11      	ldr	r3, [pc, #68]	; (8008328 <HAL_PWREx_EnableOverDrive+0x9c>)
 80082e4:	2201      	movs	r2, #1
 80082e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80082e8:	f7fd fd72 	bl	8005dd0 <HAL_GetTick>
 80082ec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80082ee:	e009      	b.n	8008304 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80082f0:	f7fd fd6e 	bl	8005dd0 <HAL_GetTick>
 80082f4:	4602      	mov	r2, r0
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	1ad3      	subs	r3, r2, r3
 80082fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80082fe:	d901      	bls.n	8008304 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8008300:	2303      	movs	r3, #3
 8008302:	e007      	b.n	8008314 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008304:	4b07      	ldr	r3, [pc, #28]	; (8008324 <HAL_PWREx_EnableOverDrive+0x98>)
 8008306:	685b      	ldr	r3, [r3, #4]
 8008308:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800830c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008310:	d1ee      	bne.n	80082f0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8008312:	2300      	movs	r3, #0
}
 8008314:	4618      	mov	r0, r3
 8008316:	3708      	adds	r7, #8
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}
 800831c:	40023800 	.word	0x40023800
 8008320:	420e0040 	.word	0x420e0040
 8008324:	40007000 	.word	0x40007000
 8008328:	420e0044 	.word	0x420e0044

0800832c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b084      	sub	sp, #16
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
 8008334:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d101      	bne.n	8008340 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800833c:	2301      	movs	r3, #1
 800833e:	e0cc      	b.n	80084da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008340:	4b68      	ldr	r3, [pc, #416]	; (80084e4 <HAL_RCC_ClockConfig+0x1b8>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f003 030f 	and.w	r3, r3, #15
 8008348:	683a      	ldr	r2, [r7, #0]
 800834a:	429a      	cmp	r2, r3
 800834c:	d90c      	bls.n	8008368 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800834e:	4b65      	ldr	r3, [pc, #404]	; (80084e4 <HAL_RCC_ClockConfig+0x1b8>)
 8008350:	683a      	ldr	r2, [r7, #0]
 8008352:	b2d2      	uxtb	r2, r2
 8008354:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008356:	4b63      	ldr	r3, [pc, #396]	; (80084e4 <HAL_RCC_ClockConfig+0x1b8>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f003 030f 	and.w	r3, r3, #15
 800835e:	683a      	ldr	r2, [r7, #0]
 8008360:	429a      	cmp	r2, r3
 8008362:	d001      	beq.n	8008368 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008364:	2301      	movs	r3, #1
 8008366:	e0b8      	b.n	80084da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f003 0302 	and.w	r3, r3, #2
 8008370:	2b00      	cmp	r3, #0
 8008372:	d020      	beq.n	80083b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f003 0304 	and.w	r3, r3, #4
 800837c:	2b00      	cmp	r3, #0
 800837e:	d005      	beq.n	800838c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008380:	4b59      	ldr	r3, [pc, #356]	; (80084e8 <HAL_RCC_ClockConfig+0x1bc>)
 8008382:	689b      	ldr	r3, [r3, #8]
 8008384:	4a58      	ldr	r2, [pc, #352]	; (80084e8 <HAL_RCC_ClockConfig+0x1bc>)
 8008386:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800838a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f003 0308 	and.w	r3, r3, #8
 8008394:	2b00      	cmp	r3, #0
 8008396:	d005      	beq.n	80083a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008398:	4b53      	ldr	r3, [pc, #332]	; (80084e8 <HAL_RCC_ClockConfig+0x1bc>)
 800839a:	689b      	ldr	r3, [r3, #8]
 800839c:	4a52      	ldr	r2, [pc, #328]	; (80084e8 <HAL_RCC_ClockConfig+0x1bc>)
 800839e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80083a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80083a4:	4b50      	ldr	r3, [pc, #320]	; (80084e8 <HAL_RCC_ClockConfig+0x1bc>)
 80083a6:	689b      	ldr	r3, [r3, #8]
 80083a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	689b      	ldr	r3, [r3, #8]
 80083b0:	494d      	ldr	r1, [pc, #308]	; (80084e8 <HAL_RCC_ClockConfig+0x1bc>)
 80083b2:	4313      	orrs	r3, r2
 80083b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f003 0301 	and.w	r3, r3, #1
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d044      	beq.n	800844c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	685b      	ldr	r3, [r3, #4]
 80083c6:	2b01      	cmp	r3, #1
 80083c8:	d107      	bne.n	80083da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80083ca:	4b47      	ldr	r3, [pc, #284]	; (80084e8 <HAL_RCC_ClockConfig+0x1bc>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d119      	bne.n	800840a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80083d6:	2301      	movs	r3, #1
 80083d8:	e07f      	b.n	80084da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	685b      	ldr	r3, [r3, #4]
 80083de:	2b02      	cmp	r3, #2
 80083e0:	d003      	beq.n	80083ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80083e6:	2b03      	cmp	r3, #3
 80083e8:	d107      	bne.n	80083fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80083ea:	4b3f      	ldr	r3, [pc, #252]	; (80084e8 <HAL_RCC_ClockConfig+0x1bc>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d109      	bne.n	800840a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80083f6:	2301      	movs	r3, #1
 80083f8:	e06f      	b.n	80084da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80083fa:	4b3b      	ldr	r3, [pc, #236]	; (80084e8 <HAL_RCC_ClockConfig+0x1bc>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f003 0302 	and.w	r3, r3, #2
 8008402:	2b00      	cmp	r3, #0
 8008404:	d101      	bne.n	800840a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008406:	2301      	movs	r3, #1
 8008408:	e067      	b.n	80084da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800840a:	4b37      	ldr	r3, [pc, #220]	; (80084e8 <HAL_RCC_ClockConfig+0x1bc>)
 800840c:	689b      	ldr	r3, [r3, #8]
 800840e:	f023 0203 	bic.w	r2, r3, #3
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	685b      	ldr	r3, [r3, #4]
 8008416:	4934      	ldr	r1, [pc, #208]	; (80084e8 <HAL_RCC_ClockConfig+0x1bc>)
 8008418:	4313      	orrs	r3, r2
 800841a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800841c:	f7fd fcd8 	bl	8005dd0 <HAL_GetTick>
 8008420:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008422:	e00a      	b.n	800843a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008424:	f7fd fcd4 	bl	8005dd0 <HAL_GetTick>
 8008428:	4602      	mov	r2, r0
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	1ad3      	subs	r3, r2, r3
 800842e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008432:	4293      	cmp	r3, r2
 8008434:	d901      	bls.n	800843a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008436:	2303      	movs	r3, #3
 8008438:	e04f      	b.n	80084da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800843a:	4b2b      	ldr	r3, [pc, #172]	; (80084e8 <HAL_RCC_ClockConfig+0x1bc>)
 800843c:	689b      	ldr	r3, [r3, #8]
 800843e:	f003 020c 	and.w	r2, r3, #12
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	685b      	ldr	r3, [r3, #4]
 8008446:	009b      	lsls	r3, r3, #2
 8008448:	429a      	cmp	r2, r3
 800844a:	d1eb      	bne.n	8008424 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800844c:	4b25      	ldr	r3, [pc, #148]	; (80084e4 <HAL_RCC_ClockConfig+0x1b8>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f003 030f 	and.w	r3, r3, #15
 8008454:	683a      	ldr	r2, [r7, #0]
 8008456:	429a      	cmp	r2, r3
 8008458:	d20c      	bcs.n	8008474 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800845a:	4b22      	ldr	r3, [pc, #136]	; (80084e4 <HAL_RCC_ClockConfig+0x1b8>)
 800845c:	683a      	ldr	r2, [r7, #0]
 800845e:	b2d2      	uxtb	r2, r2
 8008460:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008462:	4b20      	ldr	r3, [pc, #128]	; (80084e4 <HAL_RCC_ClockConfig+0x1b8>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f003 030f 	and.w	r3, r3, #15
 800846a:	683a      	ldr	r2, [r7, #0]
 800846c:	429a      	cmp	r2, r3
 800846e:	d001      	beq.n	8008474 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008470:	2301      	movs	r3, #1
 8008472:	e032      	b.n	80084da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f003 0304 	and.w	r3, r3, #4
 800847c:	2b00      	cmp	r3, #0
 800847e:	d008      	beq.n	8008492 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008480:	4b19      	ldr	r3, [pc, #100]	; (80084e8 <HAL_RCC_ClockConfig+0x1bc>)
 8008482:	689b      	ldr	r3, [r3, #8]
 8008484:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	68db      	ldr	r3, [r3, #12]
 800848c:	4916      	ldr	r1, [pc, #88]	; (80084e8 <HAL_RCC_ClockConfig+0x1bc>)
 800848e:	4313      	orrs	r3, r2
 8008490:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f003 0308 	and.w	r3, r3, #8
 800849a:	2b00      	cmp	r3, #0
 800849c:	d009      	beq.n	80084b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800849e:	4b12      	ldr	r3, [pc, #72]	; (80084e8 <HAL_RCC_ClockConfig+0x1bc>)
 80084a0:	689b      	ldr	r3, [r3, #8]
 80084a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	691b      	ldr	r3, [r3, #16]
 80084aa:	00db      	lsls	r3, r3, #3
 80084ac:	490e      	ldr	r1, [pc, #56]	; (80084e8 <HAL_RCC_ClockConfig+0x1bc>)
 80084ae:	4313      	orrs	r3, r2
 80084b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80084b2:	f000 f821 	bl	80084f8 <HAL_RCC_GetSysClockFreq>
 80084b6:	4601      	mov	r1, r0
 80084b8:	4b0b      	ldr	r3, [pc, #44]	; (80084e8 <HAL_RCC_ClockConfig+0x1bc>)
 80084ba:	689b      	ldr	r3, [r3, #8]
 80084bc:	091b      	lsrs	r3, r3, #4
 80084be:	f003 030f 	and.w	r3, r3, #15
 80084c2:	4a0a      	ldr	r2, [pc, #40]	; (80084ec <HAL_RCC_ClockConfig+0x1c0>)
 80084c4:	5cd3      	ldrb	r3, [r2, r3]
 80084c6:	fa21 f303 	lsr.w	r3, r1, r3
 80084ca:	4a09      	ldr	r2, [pc, #36]	; (80084f0 <HAL_RCC_ClockConfig+0x1c4>)
 80084cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80084ce:	4b09      	ldr	r3, [pc, #36]	; (80084f4 <HAL_RCC_ClockConfig+0x1c8>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	4618      	mov	r0, r3
 80084d4:	f7fd fc38 	bl	8005d48 <HAL_InitTick>

  return HAL_OK;
 80084d8:	2300      	movs	r3, #0
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3710      	adds	r7, #16
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}
 80084e2:	bf00      	nop
 80084e4:	40023c00 	.word	0x40023c00
 80084e8:	40023800 	.word	0x40023800
 80084ec:	08017480 	.word	0x08017480
 80084f0:	20000000 	.word	0x20000000
 80084f4:	20000004 	.word	0x20000004

080084f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80084f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80084fa:	b085      	sub	sp, #20
 80084fc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80084fe:	2300      	movs	r3, #0
 8008500:	607b      	str	r3, [r7, #4]
 8008502:	2300      	movs	r3, #0
 8008504:	60fb      	str	r3, [r7, #12]
 8008506:	2300      	movs	r3, #0
 8008508:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800850a:	2300      	movs	r3, #0
 800850c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800850e:	4b63      	ldr	r3, [pc, #396]	; (800869c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008510:	689b      	ldr	r3, [r3, #8]
 8008512:	f003 030c 	and.w	r3, r3, #12
 8008516:	2b04      	cmp	r3, #4
 8008518:	d007      	beq.n	800852a <HAL_RCC_GetSysClockFreq+0x32>
 800851a:	2b08      	cmp	r3, #8
 800851c:	d008      	beq.n	8008530 <HAL_RCC_GetSysClockFreq+0x38>
 800851e:	2b00      	cmp	r3, #0
 8008520:	f040 80b4 	bne.w	800868c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008524:	4b5e      	ldr	r3, [pc, #376]	; (80086a0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8008526:	60bb      	str	r3, [r7, #8]
       break;
 8008528:	e0b3      	b.n	8008692 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800852a:	4b5d      	ldr	r3, [pc, #372]	; (80086a0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800852c:	60bb      	str	r3, [r7, #8]
      break;
 800852e:	e0b0      	b.n	8008692 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008530:	4b5a      	ldr	r3, [pc, #360]	; (800869c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008532:	685b      	ldr	r3, [r3, #4]
 8008534:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008538:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800853a:	4b58      	ldr	r3, [pc, #352]	; (800869c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800853c:	685b      	ldr	r3, [r3, #4]
 800853e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008542:	2b00      	cmp	r3, #0
 8008544:	d04a      	beq.n	80085dc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008546:	4b55      	ldr	r3, [pc, #340]	; (800869c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008548:	685b      	ldr	r3, [r3, #4]
 800854a:	099b      	lsrs	r3, r3, #6
 800854c:	f04f 0400 	mov.w	r4, #0
 8008550:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008554:	f04f 0200 	mov.w	r2, #0
 8008558:	ea03 0501 	and.w	r5, r3, r1
 800855c:	ea04 0602 	and.w	r6, r4, r2
 8008560:	4629      	mov	r1, r5
 8008562:	4632      	mov	r2, r6
 8008564:	f04f 0300 	mov.w	r3, #0
 8008568:	f04f 0400 	mov.w	r4, #0
 800856c:	0154      	lsls	r4, r2, #5
 800856e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008572:	014b      	lsls	r3, r1, #5
 8008574:	4619      	mov	r1, r3
 8008576:	4622      	mov	r2, r4
 8008578:	1b49      	subs	r1, r1, r5
 800857a:	eb62 0206 	sbc.w	r2, r2, r6
 800857e:	f04f 0300 	mov.w	r3, #0
 8008582:	f04f 0400 	mov.w	r4, #0
 8008586:	0194      	lsls	r4, r2, #6
 8008588:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800858c:	018b      	lsls	r3, r1, #6
 800858e:	1a5b      	subs	r3, r3, r1
 8008590:	eb64 0402 	sbc.w	r4, r4, r2
 8008594:	f04f 0100 	mov.w	r1, #0
 8008598:	f04f 0200 	mov.w	r2, #0
 800859c:	00e2      	lsls	r2, r4, #3
 800859e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80085a2:	00d9      	lsls	r1, r3, #3
 80085a4:	460b      	mov	r3, r1
 80085a6:	4614      	mov	r4, r2
 80085a8:	195b      	adds	r3, r3, r5
 80085aa:	eb44 0406 	adc.w	r4, r4, r6
 80085ae:	f04f 0100 	mov.w	r1, #0
 80085b2:	f04f 0200 	mov.w	r2, #0
 80085b6:	02a2      	lsls	r2, r4, #10
 80085b8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80085bc:	0299      	lsls	r1, r3, #10
 80085be:	460b      	mov	r3, r1
 80085c0:	4614      	mov	r4, r2
 80085c2:	4618      	mov	r0, r3
 80085c4:	4621      	mov	r1, r4
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f04f 0400 	mov.w	r4, #0
 80085cc:	461a      	mov	r2, r3
 80085ce:	4623      	mov	r3, r4
 80085d0:	f7f8 fb72 	bl	8000cb8 <__aeabi_uldivmod>
 80085d4:	4603      	mov	r3, r0
 80085d6:	460c      	mov	r4, r1
 80085d8:	60fb      	str	r3, [r7, #12]
 80085da:	e049      	b.n	8008670 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80085dc:	4b2f      	ldr	r3, [pc, #188]	; (800869c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80085de:	685b      	ldr	r3, [r3, #4]
 80085e0:	099b      	lsrs	r3, r3, #6
 80085e2:	f04f 0400 	mov.w	r4, #0
 80085e6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80085ea:	f04f 0200 	mov.w	r2, #0
 80085ee:	ea03 0501 	and.w	r5, r3, r1
 80085f2:	ea04 0602 	and.w	r6, r4, r2
 80085f6:	4629      	mov	r1, r5
 80085f8:	4632      	mov	r2, r6
 80085fa:	f04f 0300 	mov.w	r3, #0
 80085fe:	f04f 0400 	mov.w	r4, #0
 8008602:	0154      	lsls	r4, r2, #5
 8008604:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008608:	014b      	lsls	r3, r1, #5
 800860a:	4619      	mov	r1, r3
 800860c:	4622      	mov	r2, r4
 800860e:	1b49      	subs	r1, r1, r5
 8008610:	eb62 0206 	sbc.w	r2, r2, r6
 8008614:	f04f 0300 	mov.w	r3, #0
 8008618:	f04f 0400 	mov.w	r4, #0
 800861c:	0194      	lsls	r4, r2, #6
 800861e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008622:	018b      	lsls	r3, r1, #6
 8008624:	1a5b      	subs	r3, r3, r1
 8008626:	eb64 0402 	sbc.w	r4, r4, r2
 800862a:	f04f 0100 	mov.w	r1, #0
 800862e:	f04f 0200 	mov.w	r2, #0
 8008632:	00e2      	lsls	r2, r4, #3
 8008634:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008638:	00d9      	lsls	r1, r3, #3
 800863a:	460b      	mov	r3, r1
 800863c:	4614      	mov	r4, r2
 800863e:	195b      	adds	r3, r3, r5
 8008640:	eb44 0406 	adc.w	r4, r4, r6
 8008644:	f04f 0100 	mov.w	r1, #0
 8008648:	f04f 0200 	mov.w	r2, #0
 800864c:	02a2      	lsls	r2, r4, #10
 800864e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8008652:	0299      	lsls	r1, r3, #10
 8008654:	460b      	mov	r3, r1
 8008656:	4614      	mov	r4, r2
 8008658:	4618      	mov	r0, r3
 800865a:	4621      	mov	r1, r4
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f04f 0400 	mov.w	r4, #0
 8008662:	461a      	mov	r2, r3
 8008664:	4623      	mov	r3, r4
 8008666:	f7f8 fb27 	bl	8000cb8 <__aeabi_uldivmod>
 800866a:	4603      	mov	r3, r0
 800866c:	460c      	mov	r4, r1
 800866e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008670:	4b0a      	ldr	r3, [pc, #40]	; (800869c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008672:	685b      	ldr	r3, [r3, #4]
 8008674:	0c1b      	lsrs	r3, r3, #16
 8008676:	f003 0303 	and.w	r3, r3, #3
 800867a:	3301      	adds	r3, #1
 800867c:	005b      	lsls	r3, r3, #1
 800867e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008680:	68fa      	ldr	r2, [r7, #12]
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	fbb2 f3f3 	udiv	r3, r2, r3
 8008688:	60bb      	str	r3, [r7, #8]
      break;
 800868a:	e002      	b.n	8008692 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800868c:	4b04      	ldr	r3, [pc, #16]	; (80086a0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800868e:	60bb      	str	r3, [r7, #8]
      break;
 8008690:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008692:	68bb      	ldr	r3, [r7, #8]
}
 8008694:	4618      	mov	r0, r3
 8008696:	3714      	adds	r7, #20
 8008698:	46bd      	mov	sp, r7
 800869a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800869c:	40023800 	.word	0x40023800
 80086a0:	00f42400 	.word	0x00f42400

080086a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80086a4:	b480      	push	{r7}
 80086a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80086a8:	4b03      	ldr	r3, [pc, #12]	; (80086b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80086aa:	681b      	ldr	r3, [r3, #0]
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	46bd      	mov	sp, r7
 80086b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b4:	4770      	bx	lr
 80086b6:	bf00      	nop
 80086b8:	20000000 	.word	0x20000000

080086bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80086c0:	f7ff fff0 	bl	80086a4 <HAL_RCC_GetHCLKFreq>
 80086c4:	4601      	mov	r1, r0
 80086c6:	4b05      	ldr	r3, [pc, #20]	; (80086dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80086c8:	689b      	ldr	r3, [r3, #8]
 80086ca:	0a9b      	lsrs	r3, r3, #10
 80086cc:	f003 0307 	and.w	r3, r3, #7
 80086d0:	4a03      	ldr	r2, [pc, #12]	; (80086e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80086d2:	5cd3      	ldrb	r3, [r2, r3]
 80086d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80086d8:	4618      	mov	r0, r3
 80086da:	bd80      	pop	{r7, pc}
 80086dc:	40023800 	.word	0x40023800
 80086e0:	08017490 	.word	0x08017490

080086e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80086e8:	f7ff ffdc 	bl	80086a4 <HAL_RCC_GetHCLKFreq>
 80086ec:	4601      	mov	r1, r0
 80086ee:	4b05      	ldr	r3, [pc, #20]	; (8008704 <HAL_RCC_GetPCLK2Freq+0x20>)
 80086f0:	689b      	ldr	r3, [r3, #8]
 80086f2:	0b5b      	lsrs	r3, r3, #13
 80086f4:	f003 0307 	and.w	r3, r3, #7
 80086f8:	4a03      	ldr	r2, [pc, #12]	; (8008708 <HAL_RCC_GetPCLK2Freq+0x24>)
 80086fa:	5cd3      	ldrb	r3, [r2, r3]
 80086fc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008700:	4618      	mov	r0, r3
 8008702:	bd80      	pop	{r7, pc}
 8008704:	40023800 	.word	0x40023800
 8008708:	08017490 	.word	0x08017490

0800870c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b088      	sub	sp, #32
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008714:	2300      	movs	r3, #0
 8008716:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 8008718:	2300      	movs	r3, #0
 800871a:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 800871c:	2300      	movs	r3, #0
 800871e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 8008720:	2300      	movs	r3, #0
 8008722:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 8008724:	2300      	movs	r3, #0
 8008726:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008730:	2b00      	cmp	r3, #0
 8008732:	d00a      	beq.n	800874a <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008734:	4b66      	ldr	r3, [pc, #408]	; (80088d0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008736:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800873a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008742:	4963      	ldr	r1, [pc, #396]	; (80088d0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008744:	4313      	orrs	r3, r2
 8008746:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008752:	2b00      	cmp	r3, #0
 8008754:	d00a      	beq.n	800876c <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8008756:	4b5e      	ldr	r3, [pc, #376]	; (80088d0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008758:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800875c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008764:	495a      	ldr	r1, [pc, #360]	; (80088d0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008766:	4313      	orrs	r3, r2
 8008768:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f003 0301 	and.w	r3, r3, #1
 8008774:	2b00      	cmp	r3, #0
 8008776:	d10b      	bne.n	8008790 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008780:	2b00      	cmp	r3, #0
 8008782:	d105      	bne.n	8008790 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800878c:	2b00      	cmp	r3, #0
 800878e:	d075      	beq.n	800887c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008790:	4b50      	ldr	r3, [pc, #320]	; (80088d4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8008792:	2200      	movs	r2, #0
 8008794:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008796:	f7fd fb1b 	bl	8005dd0 <HAL_GetTick>
 800879a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800879c:	e008      	b.n	80087b0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800879e:	f7fd fb17 	bl	8005dd0 <HAL_GetTick>
 80087a2:	4602      	mov	r2, r0
 80087a4:	69fb      	ldr	r3, [r7, #28]
 80087a6:	1ad3      	subs	r3, r2, r3
 80087a8:	2b02      	cmp	r3, #2
 80087aa:	d901      	bls.n	80087b0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80087ac:	2303      	movs	r3, #3
 80087ae:	e1dc      	b.n	8008b6a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80087b0:	4b47      	ldr	r3, [pc, #284]	; (80088d0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d1f0      	bne.n	800879e <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f003 0301 	and.w	r3, r3, #1
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d009      	beq.n	80087dc <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	685b      	ldr	r3, [r3, #4]
 80087cc:	019a      	lsls	r2, r3, #6
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	689b      	ldr	r3, [r3, #8]
 80087d2:	071b      	lsls	r3, r3, #28
 80087d4:	493e      	ldr	r1, [pc, #248]	; (80088d0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80087d6:	4313      	orrs	r3, r2
 80087d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f003 0302 	and.w	r3, r3, #2
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d01f      	beq.n	8008828 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80087e8:	4b39      	ldr	r3, [pc, #228]	; (80088d0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80087ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087ee:	0f1b      	lsrs	r3, r3, #28
 80087f0:	f003 0307 	and.w	r3, r3, #7
 80087f4:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	685b      	ldr	r3, [r3, #4]
 80087fa:	019a      	lsls	r2, r3, #6
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	68db      	ldr	r3, [r3, #12]
 8008800:	061b      	lsls	r3, r3, #24
 8008802:	431a      	orrs	r2, r3
 8008804:	69bb      	ldr	r3, [r7, #24]
 8008806:	071b      	lsls	r3, r3, #28
 8008808:	4931      	ldr	r1, [pc, #196]	; (80088d0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800880a:	4313      	orrs	r3, r2
 800880c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008810:	4b2f      	ldr	r3, [pc, #188]	; (80088d0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008812:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008816:	f023 021f 	bic.w	r2, r3, #31
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6a1b      	ldr	r3, [r3, #32]
 800881e:	3b01      	subs	r3, #1
 8008820:	492b      	ldr	r1, [pc, #172]	; (80088d0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008822:	4313      	orrs	r3, r2
 8008824:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008830:	2b00      	cmp	r3, #0
 8008832:	d00d      	beq.n	8008850 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	685b      	ldr	r3, [r3, #4]
 8008838:	019a      	lsls	r2, r3, #6
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	68db      	ldr	r3, [r3, #12]
 800883e:	061b      	lsls	r3, r3, #24
 8008840:	431a      	orrs	r2, r3
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	689b      	ldr	r3, [r3, #8]
 8008846:	071b      	lsls	r3, r3, #28
 8008848:	4921      	ldr	r1, [pc, #132]	; (80088d0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800884a:	4313      	orrs	r3, r2
 800884c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008850:	4b20      	ldr	r3, [pc, #128]	; (80088d4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8008852:	2201      	movs	r2, #1
 8008854:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008856:	f7fd fabb 	bl	8005dd0 <HAL_GetTick>
 800885a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800885c:	e008      	b.n	8008870 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800885e:	f7fd fab7 	bl	8005dd0 <HAL_GetTick>
 8008862:	4602      	mov	r2, r0
 8008864:	69fb      	ldr	r3, [r7, #28]
 8008866:	1ad3      	subs	r3, r2, r3
 8008868:	2b02      	cmp	r3, #2
 800886a:	d901      	bls.n	8008870 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800886c:	2303      	movs	r3, #3
 800886e:	e17c      	b.n	8008b6a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008870:	4b17      	ldr	r3, [pc, #92]	; (80088d0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008878:	2b00      	cmp	r3, #0
 800887a:	d0f0      	beq.n	800885e <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f003 0304 	and.w	r3, r3, #4
 8008884:	2b00      	cmp	r3, #0
 8008886:	d112      	bne.n	80088ae <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8008890:	2b00      	cmp	r3, #0
 8008892:	d10c      	bne.n	80088ae <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800889c:	2b00      	cmp	r3, #0
 800889e:	f000 80ce 	beq.w	8008a3e <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 80088a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80088aa:	f040 80c8 	bne.w	8008a3e <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80088ae:	4b0a      	ldr	r3, [pc, #40]	; (80088d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80088b0:	2200      	movs	r2, #0
 80088b2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80088b4:	f7fd fa8c 	bl	8005dd0 <HAL_GetTick>
 80088b8:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80088ba:	e00f      	b.n	80088dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80088bc:	f7fd fa88 	bl	8005dd0 <HAL_GetTick>
 80088c0:	4602      	mov	r2, r0
 80088c2:	69fb      	ldr	r3, [r7, #28]
 80088c4:	1ad3      	subs	r3, r2, r3
 80088c6:	2b02      	cmp	r3, #2
 80088c8:	d908      	bls.n	80088dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80088ca:	2303      	movs	r3, #3
 80088cc:	e14d      	b.n	8008b6a <HAL_RCCEx_PeriphCLKConfig+0x45e>
 80088ce:	bf00      	nop
 80088d0:	40023800 	.word	0x40023800
 80088d4:	42470068 	.word	0x42470068
 80088d8:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80088dc:	4ba5      	ldr	r3, [pc, #660]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80088e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80088e8:	d0e8      	beq.n	80088bc <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f003 0304 	and.w	r3, r3, #4
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d02e      	beq.n	8008954 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80088f6:	4b9f      	ldr	r3, [pc, #636]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80088f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088fc:	0c1b      	lsrs	r3, r3, #16
 80088fe:	f003 0303 	and.w	r3, r3, #3
 8008902:	3301      	adds	r3, #1
 8008904:	005b      	lsls	r3, r3, #1
 8008906:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008908:	4b9a      	ldr	r3, [pc, #616]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800890a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800890e:	0f1b      	lsrs	r3, r3, #28
 8008910:	f003 0307 	and.w	r3, r3, #7
 8008914:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	691b      	ldr	r3, [r3, #16]
 800891a:	019a      	lsls	r2, r3, #6
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	085b      	lsrs	r3, r3, #1
 8008920:	3b01      	subs	r3, #1
 8008922:	041b      	lsls	r3, r3, #16
 8008924:	431a      	orrs	r2, r3
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	699b      	ldr	r3, [r3, #24]
 800892a:	061b      	lsls	r3, r3, #24
 800892c:	431a      	orrs	r2, r3
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	071b      	lsls	r3, r3, #28
 8008932:	4990      	ldr	r1, [pc, #576]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008934:	4313      	orrs	r3, r2
 8008936:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800893a:	4b8e      	ldr	r3, [pc, #568]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800893c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008940:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008948:	3b01      	subs	r3, #1
 800894a:	021b      	lsls	r3, r3, #8
 800894c:	4989      	ldr	r1, [pc, #548]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800894e:	4313      	orrs	r3, r2
 8008950:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f003 0308 	and.w	r3, r3, #8
 800895c:	2b00      	cmp	r3, #0
 800895e:	d02c      	beq.n	80089ba <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8008960:	4b84      	ldr	r3, [pc, #528]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008966:	0c1b      	lsrs	r3, r3, #16
 8008968:	f003 0303 	and.w	r3, r3, #3
 800896c:	3301      	adds	r3, #1
 800896e:	005b      	lsls	r3, r3, #1
 8008970:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008972:	4b80      	ldr	r3, [pc, #512]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008974:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008978:	0e1b      	lsrs	r3, r3, #24
 800897a:	f003 030f 	and.w	r3, r3, #15
 800897e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	691b      	ldr	r3, [r3, #16]
 8008984:	019a      	lsls	r2, r3, #6
 8008986:	697b      	ldr	r3, [r7, #20]
 8008988:	085b      	lsrs	r3, r3, #1
 800898a:	3b01      	subs	r3, #1
 800898c:	041b      	lsls	r3, r3, #16
 800898e:	431a      	orrs	r2, r3
 8008990:	693b      	ldr	r3, [r7, #16]
 8008992:	061b      	lsls	r3, r3, #24
 8008994:	431a      	orrs	r2, r3
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	69db      	ldr	r3, [r3, #28]
 800899a:	071b      	lsls	r3, r3, #28
 800899c:	4975      	ldr	r1, [pc, #468]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800899e:	4313      	orrs	r3, r2
 80089a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80089a4:	4b73      	ldr	r3, [pc, #460]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80089a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80089aa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089b2:	4970      	ldr	r1, [pc, #448]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80089b4:	4313      	orrs	r3, r2
 80089b6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d024      	beq.n	8008a10 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 80089ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80089ce:	d11f      	bne.n	8008a10 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80089d0:	4b68      	ldr	r3, [pc, #416]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80089d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089d6:	0e1b      	lsrs	r3, r3, #24
 80089d8:	f003 030f 	and.w	r3, r3, #15
 80089dc:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80089de:	4b65      	ldr	r3, [pc, #404]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80089e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089e4:	0f1b      	lsrs	r3, r3, #28
 80089e6:	f003 0307 	and.w	r3, r3, #7
 80089ea:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	691b      	ldr	r3, [r3, #16]
 80089f0:	019a      	lsls	r2, r3, #6
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	695b      	ldr	r3, [r3, #20]
 80089f6:	085b      	lsrs	r3, r3, #1
 80089f8:	3b01      	subs	r3, #1
 80089fa:	041b      	lsls	r3, r3, #16
 80089fc:	431a      	orrs	r2, r3
 80089fe:	693b      	ldr	r3, [r7, #16]
 8008a00:	061b      	lsls	r3, r3, #24
 8008a02:	431a      	orrs	r2, r3
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	071b      	lsls	r3, r3, #28
 8008a08:	495a      	ldr	r1, [pc, #360]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008a0a:	4313      	orrs	r3, r2
 8008a0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008a10:	4b59      	ldr	r3, [pc, #356]	; (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8008a12:	2201      	movs	r2, #1
 8008a14:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008a16:	f7fd f9db 	bl	8005dd0 <HAL_GetTick>
 8008a1a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008a1c:	e008      	b.n	8008a30 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8008a1e:	f7fd f9d7 	bl	8005dd0 <HAL_GetTick>
 8008a22:	4602      	mov	r2, r0
 8008a24:	69fb      	ldr	r3, [r7, #28]
 8008a26:	1ad3      	subs	r3, r2, r3
 8008a28:	2b02      	cmp	r3, #2
 8008a2a:	d901      	bls.n	8008a30 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008a2c:	2303      	movs	r3, #3
 8008a2e:	e09c      	b.n	8008b6a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008a30:	4b50      	ldr	r3, [pc, #320]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a3c:	d1ef      	bne.n	8008a1e <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f003 0320 	and.w	r3, r3, #32
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	f000 8083 	beq.w	8008b52 <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	60bb      	str	r3, [r7, #8]
 8008a50:	4b48      	ldr	r3, [pc, #288]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a54:	4a47      	ldr	r2, [pc, #284]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008a56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a5a:	6413      	str	r3, [r2, #64]	; 0x40
 8008a5c:	4b45      	ldr	r3, [pc, #276]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a64:	60bb      	str	r3, [r7, #8]
 8008a66:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008a68:	4b44      	ldr	r3, [pc, #272]	; (8008b7c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	4a43      	ldr	r2, [pc, #268]	; (8008b7c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8008a6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a72:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008a74:	f7fd f9ac 	bl	8005dd0 <HAL_GetTick>
 8008a78:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008a7a:	e008      	b.n	8008a8e <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008a7c:	f7fd f9a8 	bl	8005dd0 <HAL_GetTick>
 8008a80:	4602      	mov	r2, r0
 8008a82:	69fb      	ldr	r3, [r7, #28]
 8008a84:	1ad3      	subs	r3, r2, r3
 8008a86:	2b02      	cmp	r3, #2
 8008a88:	d901      	bls.n	8008a8e <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 8008a8a:	2303      	movs	r3, #3
 8008a8c:	e06d      	b.n	8008b6a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008a8e:	4b3b      	ldr	r3, [pc, #236]	; (8008b7c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d0f0      	beq.n	8008a7c <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008a9a:	4b36      	ldr	r3, [pc, #216]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008aa2:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008aa4:	69bb      	ldr	r3, [r7, #24]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d02f      	beq.n	8008b0a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ab2:	69ba      	ldr	r2, [r7, #24]
 8008ab4:	429a      	cmp	r2, r3
 8008ab6:	d028      	beq.n	8008b0a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008ab8:	4b2e      	ldr	r3, [pc, #184]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008abc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ac0:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008ac2:	4b2f      	ldr	r3, [pc, #188]	; (8008b80 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008ac4:	2201      	movs	r2, #1
 8008ac6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008ac8:	4b2d      	ldr	r3, [pc, #180]	; (8008b80 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008aca:	2200      	movs	r2, #0
 8008acc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008ace:	4a29      	ldr	r2, [pc, #164]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008ad0:	69bb      	ldr	r3, [r7, #24]
 8008ad2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008ad4:	4b27      	ldr	r3, [pc, #156]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ad8:	f003 0301 	and.w	r3, r3, #1
 8008adc:	2b01      	cmp	r3, #1
 8008ade:	d114      	bne.n	8008b0a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008ae0:	f7fd f976 	bl	8005dd0 <HAL_GetTick>
 8008ae4:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008ae6:	e00a      	b.n	8008afe <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008ae8:	f7fd f972 	bl	8005dd0 <HAL_GetTick>
 8008aec:	4602      	mov	r2, r0
 8008aee:	69fb      	ldr	r3, [r7, #28]
 8008af0:	1ad3      	subs	r3, r2, r3
 8008af2:	f241 3288 	movw	r2, #5000	; 0x1388
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d901      	bls.n	8008afe <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 8008afa:	2303      	movs	r3, #3
 8008afc:	e035      	b.n	8008b6a <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008afe:	4b1d      	ldr	r3, [pc, #116]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b02:	f003 0302 	and.w	r3, r3, #2
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d0ee      	beq.n	8008ae8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b16:	d10d      	bne.n	8008b34 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8008b18:	4b16      	ldr	r3, [pc, #88]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008b1a:	689b      	ldr	r3, [r3, #8]
 8008b1c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b24:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008b28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b2c:	4911      	ldr	r1, [pc, #68]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008b2e:	4313      	orrs	r3, r2
 8008b30:	608b      	str	r3, [r1, #8]
 8008b32:	e005      	b.n	8008b40 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8008b34:	4b0f      	ldr	r3, [pc, #60]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008b36:	689b      	ldr	r3, [r3, #8]
 8008b38:	4a0e      	ldr	r2, [pc, #56]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008b3a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008b3e:	6093      	str	r3, [r2, #8]
 8008b40:	4b0c      	ldr	r3, [pc, #48]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008b42:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008b4c:	4909      	ldr	r1, [pc, #36]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008b4e:	4313      	orrs	r3, r2
 8008b50:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f003 0310 	and.w	r3, r3, #16
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d004      	beq.n	8008b68 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8008b64:	4b07      	ldr	r3, [pc, #28]	; (8008b84 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 8008b66:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8008b68:	2300      	movs	r3, #0
}
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	3720      	adds	r7, #32
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bd80      	pop	{r7, pc}
 8008b72:	bf00      	nop
 8008b74:	40023800 	.word	0x40023800
 8008b78:	42470070 	.word	0x42470070
 8008b7c:	40007000 	.word	0x40007000
 8008b80:	42470e40 	.word	0x42470e40
 8008b84:	424711e0 	.word	0x424711e0

08008b88 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b086      	sub	sp, #24
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008b90:	2300      	movs	r3, #0
 8008b92:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f003 0301 	and.w	r3, r3, #1
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d075      	beq.n	8008c8c <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008ba0:	4ba2      	ldr	r3, [pc, #648]	; (8008e2c <HAL_RCC_OscConfig+0x2a4>)
 8008ba2:	689b      	ldr	r3, [r3, #8]
 8008ba4:	f003 030c 	and.w	r3, r3, #12
 8008ba8:	2b04      	cmp	r3, #4
 8008baa:	d00c      	beq.n	8008bc6 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008bac:	4b9f      	ldr	r3, [pc, #636]	; (8008e2c <HAL_RCC_OscConfig+0x2a4>)
 8008bae:	689b      	ldr	r3, [r3, #8]
 8008bb0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008bb4:	2b08      	cmp	r3, #8
 8008bb6:	d112      	bne.n	8008bde <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008bb8:	4b9c      	ldr	r3, [pc, #624]	; (8008e2c <HAL_RCC_OscConfig+0x2a4>)
 8008bba:	685b      	ldr	r3, [r3, #4]
 8008bbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008bc0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008bc4:	d10b      	bne.n	8008bde <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008bc6:	4b99      	ldr	r3, [pc, #612]	; (8008e2c <HAL_RCC_OscConfig+0x2a4>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d05b      	beq.n	8008c8a <HAL_RCC_OscConfig+0x102>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	685b      	ldr	r3, [r3, #4]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d157      	bne.n	8008c8a <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8008bda:	2301      	movs	r3, #1
 8008bdc:	e20b      	b.n	8008ff6 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	685b      	ldr	r3, [r3, #4]
 8008be2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008be6:	d106      	bne.n	8008bf6 <HAL_RCC_OscConfig+0x6e>
 8008be8:	4b90      	ldr	r3, [pc, #576]	; (8008e2c <HAL_RCC_OscConfig+0x2a4>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	4a8f      	ldr	r2, [pc, #572]	; (8008e2c <HAL_RCC_OscConfig+0x2a4>)
 8008bee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008bf2:	6013      	str	r3, [r2, #0]
 8008bf4:	e01d      	b.n	8008c32 <HAL_RCC_OscConfig+0xaa>
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	685b      	ldr	r3, [r3, #4]
 8008bfa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008bfe:	d10c      	bne.n	8008c1a <HAL_RCC_OscConfig+0x92>
 8008c00:	4b8a      	ldr	r3, [pc, #552]	; (8008e2c <HAL_RCC_OscConfig+0x2a4>)
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	4a89      	ldr	r2, [pc, #548]	; (8008e2c <HAL_RCC_OscConfig+0x2a4>)
 8008c06:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008c0a:	6013      	str	r3, [r2, #0]
 8008c0c:	4b87      	ldr	r3, [pc, #540]	; (8008e2c <HAL_RCC_OscConfig+0x2a4>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	4a86      	ldr	r2, [pc, #536]	; (8008e2c <HAL_RCC_OscConfig+0x2a4>)
 8008c12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c16:	6013      	str	r3, [r2, #0]
 8008c18:	e00b      	b.n	8008c32 <HAL_RCC_OscConfig+0xaa>
 8008c1a:	4b84      	ldr	r3, [pc, #528]	; (8008e2c <HAL_RCC_OscConfig+0x2a4>)
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	4a83      	ldr	r2, [pc, #524]	; (8008e2c <HAL_RCC_OscConfig+0x2a4>)
 8008c20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c24:	6013      	str	r3, [r2, #0]
 8008c26:	4b81      	ldr	r3, [pc, #516]	; (8008e2c <HAL_RCC_OscConfig+0x2a4>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	4a80      	ldr	r2, [pc, #512]	; (8008e2c <HAL_RCC_OscConfig+0x2a4>)
 8008c2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008c30:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	685b      	ldr	r3, [r3, #4]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d013      	beq.n	8008c62 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c3a:	f7fd f8c9 	bl	8005dd0 <HAL_GetTick>
 8008c3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008c40:	e008      	b.n	8008c54 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008c42:	f7fd f8c5 	bl	8005dd0 <HAL_GetTick>
 8008c46:	4602      	mov	r2, r0
 8008c48:	693b      	ldr	r3, [r7, #16]
 8008c4a:	1ad3      	subs	r3, r2, r3
 8008c4c:	2b64      	cmp	r3, #100	; 0x64
 8008c4e:	d901      	bls.n	8008c54 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8008c50:	2303      	movs	r3, #3
 8008c52:	e1d0      	b.n	8008ff6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008c54:	4b75      	ldr	r3, [pc, #468]	; (8008e2c <HAL_RCC_OscConfig+0x2a4>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d0f0      	beq.n	8008c42 <HAL_RCC_OscConfig+0xba>
 8008c60:	e014      	b.n	8008c8c <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c62:	f7fd f8b5 	bl	8005dd0 <HAL_GetTick>
 8008c66:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008c68:	e008      	b.n	8008c7c <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008c6a:	f7fd f8b1 	bl	8005dd0 <HAL_GetTick>
 8008c6e:	4602      	mov	r2, r0
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	1ad3      	subs	r3, r2, r3
 8008c74:	2b64      	cmp	r3, #100	; 0x64
 8008c76:	d901      	bls.n	8008c7c <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8008c78:	2303      	movs	r3, #3
 8008c7a:	e1bc      	b.n	8008ff6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008c7c:	4b6b      	ldr	r3, [pc, #428]	; (8008e2c <HAL_RCC_OscConfig+0x2a4>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d1f0      	bne.n	8008c6a <HAL_RCC_OscConfig+0xe2>
 8008c88:	e000      	b.n	8008c8c <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c8a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f003 0302 	and.w	r3, r3, #2
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d063      	beq.n	8008d60 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008c98:	4b64      	ldr	r3, [pc, #400]	; (8008e2c <HAL_RCC_OscConfig+0x2a4>)
 8008c9a:	689b      	ldr	r3, [r3, #8]
 8008c9c:	f003 030c 	and.w	r3, r3, #12
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d00b      	beq.n	8008cbc <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008ca4:	4b61      	ldr	r3, [pc, #388]	; (8008e2c <HAL_RCC_OscConfig+0x2a4>)
 8008ca6:	689b      	ldr	r3, [r3, #8]
 8008ca8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008cac:	2b08      	cmp	r3, #8
 8008cae:	d11c      	bne.n	8008cea <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008cb0:	4b5e      	ldr	r3, [pc, #376]	; (8008e2c <HAL_RCC_OscConfig+0x2a4>)
 8008cb2:	685b      	ldr	r3, [r3, #4]
 8008cb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d116      	bne.n	8008cea <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008cbc:	4b5b      	ldr	r3, [pc, #364]	; (8008e2c <HAL_RCC_OscConfig+0x2a4>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f003 0302 	and.w	r3, r3, #2
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d005      	beq.n	8008cd4 <HAL_RCC_OscConfig+0x14c>
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	68db      	ldr	r3, [r3, #12]
 8008ccc:	2b01      	cmp	r3, #1
 8008cce:	d001      	beq.n	8008cd4 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	e190      	b.n	8008ff6 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008cd4:	4b55      	ldr	r3, [pc, #340]	; (8008e2c <HAL_RCC_OscConfig+0x2a4>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	691b      	ldr	r3, [r3, #16]
 8008ce0:	00db      	lsls	r3, r3, #3
 8008ce2:	4952      	ldr	r1, [pc, #328]	; (8008e2c <HAL_RCC_OscConfig+0x2a4>)
 8008ce4:	4313      	orrs	r3, r2
 8008ce6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008ce8:	e03a      	b.n	8008d60 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	68db      	ldr	r3, [r3, #12]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d020      	beq.n	8008d34 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008cf2:	4b4f      	ldr	r3, [pc, #316]	; (8008e30 <HAL_RCC_OscConfig+0x2a8>)
 8008cf4:	2201      	movs	r2, #1
 8008cf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cf8:	f7fd f86a 	bl	8005dd0 <HAL_GetTick>
 8008cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008cfe:	e008      	b.n	8008d12 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008d00:	f7fd f866 	bl	8005dd0 <HAL_GetTick>
 8008d04:	4602      	mov	r2, r0
 8008d06:	693b      	ldr	r3, [r7, #16]
 8008d08:	1ad3      	subs	r3, r2, r3
 8008d0a:	2b02      	cmp	r3, #2
 8008d0c:	d901      	bls.n	8008d12 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8008d0e:	2303      	movs	r3, #3
 8008d10:	e171      	b.n	8008ff6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008d12:	4b46      	ldr	r3, [pc, #280]	; (8008e2c <HAL_RCC_OscConfig+0x2a4>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f003 0302 	and.w	r3, r3, #2
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d0f0      	beq.n	8008d00 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d1e:	4b43      	ldr	r3, [pc, #268]	; (8008e2c <HAL_RCC_OscConfig+0x2a4>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	691b      	ldr	r3, [r3, #16]
 8008d2a:	00db      	lsls	r3, r3, #3
 8008d2c:	493f      	ldr	r1, [pc, #252]	; (8008e2c <HAL_RCC_OscConfig+0x2a4>)
 8008d2e:	4313      	orrs	r3, r2
 8008d30:	600b      	str	r3, [r1, #0]
 8008d32:	e015      	b.n	8008d60 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008d34:	4b3e      	ldr	r3, [pc, #248]	; (8008e30 <HAL_RCC_OscConfig+0x2a8>)
 8008d36:	2200      	movs	r2, #0
 8008d38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d3a:	f7fd f849 	bl	8005dd0 <HAL_GetTick>
 8008d3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008d40:	e008      	b.n	8008d54 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008d42:	f7fd f845 	bl	8005dd0 <HAL_GetTick>
 8008d46:	4602      	mov	r2, r0
 8008d48:	693b      	ldr	r3, [r7, #16]
 8008d4a:	1ad3      	subs	r3, r2, r3
 8008d4c:	2b02      	cmp	r3, #2
 8008d4e:	d901      	bls.n	8008d54 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8008d50:	2303      	movs	r3, #3
 8008d52:	e150      	b.n	8008ff6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008d54:	4b35      	ldr	r3, [pc, #212]	; (8008e2c <HAL_RCC_OscConfig+0x2a4>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f003 0302 	and.w	r3, r3, #2
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d1f0      	bne.n	8008d42 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f003 0308 	and.w	r3, r3, #8
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d030      	beq.n	8008dce <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	695b      	ldr	r3, [r3, #20]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d016      	beq.n	8008da2 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008d74:	4b2f      	ldr	r3, [pc, #188]	; (8008e34 <HAL_RCC_OscConfig+0x2ac>)
 8008d76:	2201      	movs	r2, #1
 8008d78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d7a:	f7fd f829 	bl	8005dd0 <HAL_GetTick>
 8008d7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008d80:	e008      	b.n	8008d94 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008d82:	f7fd f825 	bl	8005dd0 <HAL_GetTick>
 8008d86:	4602      	mov	r2, r0
 8008d88:	693b      	ldr	r3, [r7, #16]
 8008d8a:	1ad3      	subs	r3, r2, r3
 8008d8c:	2b02      	cmp	r3, #2
 8008d8e:	d901      	bls.n	8008d94 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8008d90:	2303      	movs	r3, #3
 8008d92:	e130      	b.n	8008ff6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008d94:	4b25      	ldr	r3, [pc, #148]	; (8008e2c <HAL_RCC_OscConfig+0x2a4>)
 8008d96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d98:	f003 0302 	and.w	r3, r3, #2
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d0f0      	beq.n	8008d82 <HAL_RCC_OscConfig+0x1fa>
 8008da0:	e015      	b.n	8008dce <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008da2:	4b24      	ldr	r3, [pc, #144]	; (8008e34 <HAL_RCC_OscConfig+0x2ac>)
 8008da4:	2200      	movs	r2, #0
 8008da6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008da8:	f7fd f812 	bl	8005dd0 <HAL_GetTick>
 8008dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008dae:	e008      	b.n	8008dc2 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008db0:	f7fd f80e 	bl	8005dd0 <HAL_GetTick>
 8008db4:	4602      	mov	r2, r0
 8008db6:	693b      	ldr	r3, [r7, #16]
 8008db8:	1ad3      	subs	r3, r2, r3
 8008dba:	2b02      	cmp	r3, #2
 8008dbc:	d901      	bls.n	8008dc2 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 8008dbe:	2303      	movs	r3, #3
 8008dc0:	e119      	b.n	8008ff6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008dc2:	4b1a      	ldr	r3, [pc, #104]	; (8008e2c <HAL_RCC_OscConfig+0x2a4>)
 8008dc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008dc6:	f003 0302 	and.w	r3, r3, #2
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d1f0      	bne.n	8008db0 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f003 0304 	and.w	r3, r3, #4
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	f000 809f 	beq.w	8008f1a <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008ddc:	2300      	movs	r3, #0
 8008dde:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008de0:	4b12      	ldr	r3, [pc, #72]	; (8008e2c <HAL_RCC_OscConfig+0x2a4>)
 8008de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008de4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d10f      	bne.n	8008e0c <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008dec:	2300      	movs	r3, #0
 8008dee:	60fb      	str	r3, [r7, #12]
 8008df0:	4b0e      	ldr	r3, [pc, #56]	; (8008e2c <HAL_RCC_OscConfig+0x2a4>)
 8008df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008df4:	4a0d      	ldr	r2, [pc, #52]	; (8008e2c <HAL_RCC_OscConfig+0x2a4>)
 8008df6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008dfa:	6413      	str	r3, [r2, #64]	; 0x40
 8008dfc:	4b0b      	ldr	r3, [pc, #44]	; (8008e2c <HAL_RCC_OscConfig+0x2a4>)
 8008dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e04:	60fb      	str	r3, [r7, #12]
 8008e06:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008e08:	2301      	movs	r3, #1
 8008e0a:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008e0c:	4b0a      	ldr	r3, [pc, #40]	; (8008e38 <HAL_RCC_OscConfig+0x2b0>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d120      	bne.n	8008e5a <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008e18:	4b07      	ldr	r3, [pc, #28]	; (8008e38 <HAL_RCC_OscConfig+0x2b0>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	4a06      	ldr	r2, [pc, #24]	; (8008e38 <HAL_RCC_OscConfig+0x2b0>)
 8008e1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e22:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008e24:	f7fc ffd4 	bl	8005dd0 <HAL_GetTick>
 8008e28:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008e2a:	e010      	b.n	8008e4e <HAL_RCC_OscConfig+0x2c6>
 8008e2c:	40023800 	.word	0x40023800
 8008e30:	42470000 	.word	0x42470000
 8008e34:	42470e80 	.word	0x42470e80
 8008e38:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008e3c:	f7fc ffc8 	bl	8005dd0 <HAL_GetTick>
 8008e40:	4602      	mov	r2, r0
 8008e42:	693b      	ldr	r3, [r7, #16]
 8008e44:	1ad3      	subs	r3, r2, r3
 8008e46:	2b02      	cmp	r3, #2
 8008e48:	d901      	bls.n	8008e4e <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 8008e4a:	2303      	movs	r3, #3
 8008e4c:	e0d3      	b.n	8008ff6 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008e4e:	4b6c      	ldr	r3, [pc, #432]	; (8009000 <HAL_RCC_OscConfig+0x478>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d0f0      	beq.n	8008e3c <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	689b      	ldr	r3, [r3, #8]
 8008e5e:	2b01      	cmp	r3, #1
 8008e60:	d106      	bne.n	8008e70 <HAL_RCC_OscConfig+0x2e8>
 8008e62:	4b68      	ldr	r3, [pc, #416]	; (8009004 <HAL_RCC_OscConfig+0x47c>)
 8008e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e66:	4a67      	ldr	r2, [pc, #412]	; (8009004 <HAL_RCC_OscConfig+0x47c>)
 8008e68:	f043 0301 	orr.w	r3, r3, #1
 8008e6c:	6713      	str	r3, [r2, #112]	; 0x70
 8008e6e:	e01c      	b.n	8008eaa <HAL_RCC_OscConfig+0x322>
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	689b      	ldr	r3, [r3, #8]
 8008e74:	2b05      	cmp	r3, #5
 8008e76:	d10c      	bne.n	8008e92 <HAL_RCC_OscConfig+0x30a>
 8008e78:	4b62      	ldr	r3, [pc, #392]	; (8009004 <HAL_RCC_OscConfig+0x47c>)
 8008e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e7c:	4a61      	ldr	r2, [pc, #388]	; (8009004 <HAL_RCC_OscConfig+0x47c>)
 8008e7e:	f043 0304 	orr.w	r3, r3, #4
 8008e82:	6713      	str	r3, [r2, #112]	; 0x70
 8008e84:	4b5f      	ldr	r3, [pc, #380]	; (8009004 <HAL_RCC_OscConfig+0x47c>)
 8008e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e88:	4a5e      	ldr	r2, [pc, #376]	; (8009004 <HAL_RCC_OscConfig+0x47c>)
 8008e8a:	f043 0301 	orr.w	r3, r3, #1
 8008e8e:	6713      	str	r3, [r2, #112]	; 0x70
 8008e90:	e00b      	b.n	8008eaa <HAL_RCC_OscConfig+0x322>
 8008e92:	4b5c      	ldr	r3, [pc, #368]	; (8009004 <HAL_RCC_OscConfig+0x47c>)
 8008e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e96:	4a5b      	ldr	r2, [pc, #364]	; (8009004 <HAL_RCC_OscConfig+0x47c>)
 8008e98:	f023 0301 	bic.w	r3, r3, #1
 8008e9c:	6713      	str	r3, [r2, #112]	; 0x70
 8008e9e:	4b59      	ldr	r3, [pc, #356]	; (8009004 <HAL_RCC_OscConfig+0x47c>)
 8008ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ea2:	4a58      	ldr	r2, [pc, #352]	; (8009004 <HAL_RCC_OscConfig+0x47c>)
 8008ea4:	f023 0304 	bic.w	r3, r3, #4
 8008ea8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	689b      	ldr	r3, [r3, #8]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d015      	beq.n	8008ede <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008eb2:	f7fc ff8d 	bl	8005dd0 <HAL_GetTick>
 8008eb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008eb8:	e00a      	b.n	8008ed0 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008eba:	f7fc ff89 	bl	8005dd0 <HAL_GetTick>
 8008ebe:	4602      	mov	r2, r0
 8008ec0:	693b      	ldr	r3, [r7, #16]
 8008ec2:	1ad3      	subs	r3, r2, r3
 8008ec4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ec8:	4293      	cmp	r3, r2
 8008eca:	d901      	bls.n	8008ed0 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8008ecc:	2303      	movs	r3, #3
 8008ece:	e092      	b.n	8008ff6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008ed0:	4b4c      	ldr	r3, [pc, #304]	; (8009004 <HAL_RCC_OscConfig+0x47c>)
 8008ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ed4:	f003 0302 	and.w	r3, r3, #2
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d0ee      	beq.n	8008eba <HAL_RCC_OscConfig+0x332>
 8008edc:	e014      	b.n	8008f08 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ede:	f7fc ff77 	bl	8005dd0 <HAL_GetTick>
 8008ee2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008ee4:	e00a      	b.n	8008efc <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008ee6:	f7fc ff73 	bl	8005dd0 <HAL_GetTick>
 8008eea:	4602      	mov	r2, r0
 8008eec:	693b      	ldr	r3, [r7, #16]
 8008eee:	1ad3      	subs	r3, r2, r3
 8008ef0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ef4:	4293      	cmp	r3, r2
 8008ef6:	d901      	bls.n	8008efc <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8008ef8:	2303      	movs	r3, #3
 8008efa:	e07c      	b.n	8008ff6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008efc:	4b41      	ldr	r3, [pc, #260]	; (8009004 <HAL_RCC_OscConfig+0x47c>)
 8008efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f00:	f003 0302 	and.w	r3, r3, #2
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d1ee      	bne.n	8008ee6 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008f08:	7dfb      	ldrb	r3, [r7, #23]
 8008f0a:	2b01      	cmp	r3, #1
 8008f0c:	d105      	bne.n	8008f1a <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008f0e:	4b3d      	ldr	r3, [pc, #244]	; (8009004 <HAL_RCC_OscConfig+0x47c>)
 8008f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f12:	4a3c      	ldr	r2, [pc, #240]	; (8009004 <HAL_RCC_OscConfig+0x47c>)
 8008f14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008f18:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	699b      	ldr	r3, [r3, #24]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d068      	beq.n	8008ff4 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008f22:	4b38      	ldr	r3, [pc, #224]	; (8009004 <HAL_RCC_OscConfig+0x47c>)
 8008f24:	689b      	ldr	r3, [r3, #8]
 8008f26:	f003 030c 	and.w	r3, r3, #12
 8008f2a:	2b08      	cmp	r3, #8
 8008f2c:	d060      	beq.n	8008ff0 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	699b      	ldr	r3, [r3, #24]
 8008f32:	2b02      	cmp	r3, #2
 8008f34:	d145      	bne.n	8008fc2 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008f36:	4b34      	ldr	r3, [pc, #208]	; (8009008 <HAL_RCC_OscConfig+0x480>)
 8008f38:	2200      	movs	r2, #0
 8008f3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f3c:	f7fc ff48 	bl	8005dd0 <HAL_GetTick>
 8008f40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f42:	e008      	b.n	8008f56 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008f44:	f7fc ff44 	bl	8005dd0 <HAL_GetTick>
 8008f48:	4602      	mov	r2, r0
 8008f4a:	693b      	ldr	r3, [r7, #16]
 8008f4c:	1ad3      	subs	r3, r2, r3
 8008f4e:	2b02      	cmp	r3, #2
 8008f50:	d901      	bls.n	8008f56 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 8008f52:	2303      	movs	r3, #3
 8008f54:	e04f      	b.n	8008ff6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f56:	4b2b      	ldr	r3, [pc, #172]	; (8009004 <HAL_RCC_OscConfig+0x47c>)
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d1f0      	bne.n	8008f44 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	69da      	ldr	r2, [r3, #28]
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6a1b      	ldr	r3, [r3, #32]
 8008f6a:	431a      	orrs	r2, r3
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f70:	019b      	lsls	r3, r3, #6
 8008f72:	431a      	orrs	r2, r3
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f78:	085b      	lsrs	r3, r3, #1
 8008f7a:	3b01      	subs	r3, #1
 8008f7c:	041b      	lsls	r3, r3, #16
 8008f7e:	431a      	orrs	r2, r3
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f84:	061b      	lsls	r3, r3, #24
 8008f86:	431a      	orrs	r2, r3
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f8c:	071b      	lsls	r3, r3, #28
 8008f8e:	491d      	ldr	r1, [pc, #116]	; (8009004 <HAL_RCC_OscConfig+0x47c>)
 8008f90:	4313      	orrs	r3, r2
 8008f92:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008f94:	4b1c      	ldr	r3, [pc, #112]	; (8009008 <HAL_RCC_OscConfig+0x480>)
 8008f96:	2201      	movs	r2, #1
 8008f98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f9a:	f7fc ff19 	bl	8005dd0 <HAL_GetTick>
 8008f9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008fa0:	e008      	b.n	8008fb4 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008fa2:	f7fc ff15 	bl	8005dd0 <HAL_GetTick>
 8008fa6:	4602      	mov	r2, r0
 8008fa8:	693b      	ldr	r3, [r7, #16]
 8008faa:	1ad3      	subs	r3, r2, r3
 8008fac:	2b02      	cmp	r3, #2
 8008fae:	d901      	bls.n	8008fb4 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8008fb0:	2303      	movs	r3, #3
 8008fb2:	e020      	b.n	8008ff6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008fb4:	4b13      	ldr	r3, [pc, #76]	; (8009004 <HAL_RCC_OscConfig+0x47c>)
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d0f0      	beq.n	8008fa2 <HAL_RCC_OscConfig+0x41a>
 8008fc0:	e018      	b.n	8008ff4 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008fc2:	4b11      	ldr	r3, [pc, #68]	; (8009008 <HAL_RCC_OscConfig+0x480>)
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fc8:	f7fc ff02 	bl	8005dd0 <HAL_GetTick>
 8008fcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008fce:	e008      	b.n	8008fe2 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008fd0:	f7fc fefe 	bl	8005dd0 <HAL_GetTick>
 8008fd4:	4602      	mov	r2, r0
 8008fd6:	693b      	ldr	r3, [r7, #16]
 8008fd8:	1ad3      	subs	r3, r2, r3
 8008fda:	2b02      	cmp	r3, #2
 8008fdc:	d901      	bls.n	8008fe2 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8008fde:	2303      	movs	r3, #3
 8008fe0:	e009      	b.n	8008ff6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008fe2:	4b08      	ldr	r3, [pc, #32]	; (8009004 <HAL_RCC_OscConfig+0x47c>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d1f0      	bne.n	8008fd0 <HAL_RCC_OscConfig+0x448>
 8008fee:	e001      	b.n	8008ff4 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8008ff0:	2301      	movs	r3, #1
 8008ff2:	e000      	b.n	8008ff6 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8008ff4:	2300      	movs	r3, #0
}
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	3718      	adds	r7, #24
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bd80      	pop	{r7, pc}
 8008ffe:	bf00      	nop
 8009000:	40007000 	.word	0x40007000
 8009004:	40023800 	.word	0x40023800
 8009008:	42470060 	.word	0x42470060

0800900c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b082      	sub	sp, #8
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d101      	bne.n	800901e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800901a:	2301      	movs	r3, #1
 800901c:	e022      	b.n	8009064 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009024:	b2db      	uxtb	r3, r3
 8009026:	2b00      	cmp	r3, #0
 8009028:	d105      	bne.n	8009036 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2200      	movs	r2, #0
 800902e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f7fb fd21 	bl	8004a78 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2203      	movs	r2, #3
 800903a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f000 f814 	bl	800906c <HAL_SD_InitCard>
 8009044:	4603      	mov	r3, r0
 8009046:	2b00      	cmp	r3, #0
 8009048:	d001      	beq.n	800904e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800904a:	2301      	movs	r3, #1
 800904c:	e00a      	b.n	8009064 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2200      	movs	r2, #0
 8009052:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2200      	movs	r2, #0
 8009058:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2201      	movs	r2, #1
 800905e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8009062:	2300      	movs	r3, #0
}
 8009064:	4618      	mov	r0, r3
 8009066:	3708      	adds	r7, #8
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}

0800906c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800906c:	b5b0      	push	{r4, r5, r7, lr}
 800906e:	b08e      	sub	sp, #56	; 0x38
 8009070:	af04      	add	r7, sp, #16
 8009072:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8009074:	2300      	movs	r3, #0
 8009076:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8009078:	2300      	movs	r3, #0
 800907a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800907c:	2300      	movs	r3, #0
 800907e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8009080:	2300      	movs	r3, #0
 8009082:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8009084:	2300      	movs	r3, #0
 8009086:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8009088:	2376      	movs	r3, #118	; 0x76
 800908a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681d      	ldr	r5, [r3, #0]
 8009090:	466c      	mov	r4, sp
 8009092:	f107 0314 	add.w	r3, r7, #20
 8009096:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800909a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800909e:	f107 0308 	add.w	r3, r7, #8
 80090a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80090a4:	4628      	mov	r0, r5
 80090a6:	f003 fa87 	bl	800c5b8 <SDIO_Init>
 80090aa:	4603      	mov	r3, r0
 80090ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80090b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d001      	beq.n	80090bc <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80090b8:	2301      	movs	r3, #1
 80090ba:	e031      	b.n	8009120 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80090bc:	4b1a      	ldr	r3, [pc, #104]	; (8009128 <HAL_SD_InitCard+0xbc>)
 80090be:	2200      	movs	r2, #0
 80090c0:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	4618      	mov	r0, r3
 80090c8:	f003 fabf 	bl	800c64a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80090cc:	4b16      	ldr	r3, [pc, #88]	; (8009128 <HAL_SD_InitCard+0xbc>)
 80090ce:	2201      	movs	r2, #1
 80090d0:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f000 ffc6 	bl	800a064 <SD_PowerON>
 80090d8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80090da:	6a3b      	ldr	r3, [r7, #32]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d00b      	beq.n	80090f8 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2201      	movs	r2, #1
 80090e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090ec:	6a3b      	ldr	r3, [r7, #32]
 80090ee:	431a      	orrs	r2, r3
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80090f4:	2301      	movs	r3, #1
 80090f6:	e013      	b.n	8009120 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f000 fee5 	bl	8009ec8 <SD_InitCard>
 80090fe:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009100:	6a3b      	ldr	r3, [r7, #32]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d00b      	beq.n	800911e <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2201      	movs	r2, #1
 800910a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009112:	6a3b      	ldr	r3, [r7, #32]
 8009114:	431a      	orrs	r2, r3
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800911a:	2301      	movs	r3, #1
 800911c:	e000      	b.n	8009120 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800911e:	2300      	movs	r3, #0
}
 8009120:	4618      	mov	r0, r3
 8009122:	3728      	adds	r7, #40	; 0x28
 8009124:	46bd      	mov	sp, r7
 8009126:	bdb0      	pop	{r4, r5, r7, pc}
 8009128:	422580a0 	.word	0x422580a0

0800912c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b08c      	sub	sp, #48	; 0x30
 8009130:	af00      	add	r7, sp, #0
 8009132:	60f8      	str	r0, [r7, #12]
 8009134:	60b9      	str	r1, [r7, #8]
 8009136:	607a      	str	r2, [r7, #4]
 8009138:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d107      	bne.n	8009154 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009148:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009150:	2301      	movs	r3, #1
 8009152:	e0c7      	b.n	80092e4 <HAL_SD_ReadBlocks_DMA+0x1b8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800915a:	b2db      	uxtb	r3, r3
 800915c:	2b01      	cmp	r3, #1
 800915e:	f040 80c0 	bne.w	80092e2 <HAL_SD_ReadBlocks_DMA+0x1b6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	2200      	movs	r2, #0
 8009166:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009168:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	441a      	add	r2, r3
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009172:	429a      	cmp	r2, r3
 8009174:	d907      	bls.n	8009186 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800917a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8009182:	2301      	movs	r3, #1
 8009184:	e0ae      	b.n	80092e4 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	2203      	movs	r2, #3
 800918a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	2200      	movs	r2, #0
 8009194:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 80091a4:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091aa:	4a50      	ldr	r2, [pc, #320]	; (80092ec <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80091ac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091b2:	4a4f      	ldr	r2, [pc, #316]	; (80092f0 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 80091b4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091ba:	2200      	movs	r2, #0
 80091bc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	3380      	adds	r3, #128	; 0x80
 80091c8:	4619      	mov	r1, r3
 80091ca:	68ba      	ldr	r2, [r7, #8]
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	025b      	lsls	r3, r3, #9
 80091d0:	089b      	lsrs	r3, r3, #2
 80091d2:	f7fd fbef 	bl	80069b4 <HAL_DMA_Start_IT>
 80091d6:	4603      	mov	r3, r0
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d017      	beq.n	800920c <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80091ea:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	4a40      	ldr	r2, [pc, #256]	; (80092f4 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 80091f2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091f8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	2201      	movs	r2, #1
 8009204:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8009208:	2301      	movs	r3, #1
 800920a:	e06b      	b.n	80092e4 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800920c:	4b3a      	ldr	r3, [pc, #232]	; (80092f8 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800920e:	2201      	movs	r2, #1
 8009210:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009216:	2b01      	cmp	r3, #1
 8009218:	d002      	beq.n	8009220 <HAL_SD_ReadBlocks_DMA+0xf4>
      {
        add *= 512U;
 800921a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800921c:	025b      	lsls	r3, r3, #9
 800921e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009228:	4618      	mov	r0, r3
 800922a:	f003 faa1 	bl	800c770 <SDMMC_CmdBlockLength>
 800922e:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 8009230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009232:	2b00      	cmp	r3, #0
 8009234:	d00f      	beq.n	8009256 <HAL_SD_ReadBlocks_DMA+0x12a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	4a2e      	ldr	r2, [pc, #184]	; (80092f4 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800923c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009244:	431a      	orrs	r2, r3
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	2201      	movs	r2, #1
 800924e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8009252:	2301      	movs	r3, #1
 8009254:	e046      	b.n	80092e4 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009256:	f04f 33ff 	mov.w	r3, #4294967295
 800925a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	025b      	lsls	r3, r3, #9
 8009260:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8009262:	2390      	movs	r3, #144	; 0x90
 8009264:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8009266:	2302      	movs	r3, #2
 8009268:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800926a:	2300      	movs	r3, #0
 800926c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800926e:	2301      	movs	r3, #1
 8009270:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f107 0210 	add.w	r2, r7, #16
 800927a:	4611      	mov	r1, r2
 800927c:	4618      	mov	r0, r3
 800927e:	f003 fa4b 	bl	800c718 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	2b01      	cmp	r3, #1
 8009286:	d90a      	bls.n	800929e <HAL_SD_ReadBlocks_DMA+0x172>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	2282      	movs	r2, #130	; 0x82
 800928c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009294:	4618      	mov	r0, r3
 8009296:	f003 faaf 	bl	800c7f8 <SDMMC_CmdReadMultiBlock>
 800929a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800929c:	e009      	b.n	80092b2 <HAL_SD_ReadBlocks_DMA+0x186>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	2281      	movs	r2, #129	; 0x81
 80092a2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80092aa:	4618      	mov	r0, r3
 80092ac:	f003 fa82 	bl	800c7b4 <SDMMC_CmdReadSingleBlock>
 80092b0:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80092b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d012      	beq.n	80092de <HAL_SD_ReadBlocks_DMA+0x1b2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	4a0d      	ldr	r2, [pc, #52]	; (80092f4 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 80092be:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092c6:	431a      	orrs	r2, r3
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	2201      	movs	r2, #1
 80092d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	2200      	movs	r2, #0
 80092d8:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80092da:	2301      	movs	r3, #1
 80092dc:	e002      	b.n	80092e4 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      return HAL_OK;
 80092de:	2300      	movs	r3, #0
 80092e0:	e000      	b.n	80092e4 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
  }
  else
  {
    return HAL_BUSY;
 80092e2:	2302      	movs	r3, #2
  }
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	3730      	adds	r7, #48	; 0x30
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bd80      	pop	{r7, pc}
 80092ec:	08009cd7 	.word	0x08009cd7
 80092f0:	08009d49 	.word	0x08009d49
 80092f4:	004005ff 	.word	0x004005ff
 80092f8:	4225858c 	.word	0x4225858c

080092fc <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b08c      	sub	sp, #48	; 0x30
 8009300:	af00      	add	r7, sp, #0
 8009302:	60f8      	str	r0, [r7, #12]
 8009304:	60b9      	str	r1, [r7, #8]
 8009306:	607a      	str	r2, [r7, #4]
 8009308:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800930e:	68bb      	ldr	r3, [r7, #8]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d107      	bne.n	8009324 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009318:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009320:	2301      	movs	r3, #1
 8009322:	e0ca      	b.n	80094ba <HAL_SD_WriteBlocks_DMA+0x1be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800932a:	b2db      	uxtb	r3, r3
 800932c:	2b01      	cmp	r3, #1
 800932e:	f040 80c3 	bne.w	80094b8 <HAL_SD_WriteBlocks_DMA+0x1bc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	2200      	movs	r2, #0
 8009336:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009338:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	441a      	add	r2, r3
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009342:	429a      	cmp	r2, r3
 8009344:	d907      	bls.n	8009356 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800934a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8009352:	2301      	movs	r3, #1
 8009354:	e0b1      	b.n	80094ba <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	2203      	movs	r2, #3
 800935a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	2200      	movs	r2, #0
 8009364:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f042 021a 	orr.w	r2, r2, #26
 8009374:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800937a:	4a52      	ldr	r2, [pc, #328]	; (80094c4 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800937c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009382:	4a51      	ldr	r2, [pc, #324]	; (80094c8 <HAL_SD_WriteBlocks_DMA+0x1cc>)
 8009384:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800938a:	2200      	movs	r2, #0
 800938c:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009392:	2b01      	cmp	r3, #1
 8009394:	d002      	beq.n	800939c <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8009396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009398:	025b      	lsls	r3, r3, #9
 800939a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80093a4:	4618      	mov	r0, r3
 80093a6:	f003 f9e3 	bl	800c770 <SDMMC_CmdBlockLength>
 80093aa:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 80093ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d00f      	beq.n	80093d2 <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	4a45      	ldr	r2, [pc, #276]	; (80094cc <HAL_SD_WriteBlocks_DMA+0x1d0>)
 80093b8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80093be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093c0:	431a      	orrs	r2, r3
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	2201      	movs	r2, #1
 80093ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80093ce:	2301      	movs	r3, #1
 80093d0:	e073      	b.n	80094ba <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	2b01      	cmp	r3, #1
 80093d6:	d90a      	bls.n	80093ee <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	22a0      	movs	r2, #160	; 0xa0
 80093dc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80093e4:	4618      	mov	r0, r3
 80093e6:	f003 fa4b 	bl	800c880 <SDMMC_CmdWriteMultiBlock>
 80093ea:	62f8      	str	r0, [r7, #44]	; 0x2c
 80093ec:	e009      	b.n	8009402 <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	2290      	movs	r2, #144	; 0x90
 80093f2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80093fa:	4618      	mov	r0, r3
 80093fc:	f003 fa1e 	bl	800c83c <SDMMC_CmdWriteSingleBlock>
 8009400:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8009402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009404:	2b00      	cmp	r3, #0
 8009406:	d012      	beq.n	800942e <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	4a2f      	ldr	r2, [pc, #188]	; (80094cc <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800940e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009416:	431a      	orrs	r2, r3
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	2201      	movs	r2, #1
 8009420:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	2200      	movs	r2, #0
 8009428:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800942a:	2301      	movs	r3, #1
 800942c:	e045      	b.n	80094ba <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800942e:	4b28      	ldr	r3, [pc, #160]	; (80094d0 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 8009430:	2201      	movs	r2, #1
 8009432:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8009438:	68b9      	ldr	r1, [r7, #8]
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	3380      	adds	r3, #128	; 0x80
 8009440:	461a      	mov	r2, r3
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	025b      	lsls	r3, r3, #9
 8009446:	089b      	lsrs	r3, r3, #2
 8009448:	f7fd fab4 	bl	80069b4 <HAL_DMA_Start_IT>
 800944c:	4603      	mov	r3, r0
 800944e:	2b00      	cmp	r3, #0
 8009450:	d01a      	beq.n	8009488 <HAL_SD_WriteBlocks_DMA+0x18c>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f022 021a 	bic.w	r2, r2, #26
 8009460:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	4a19      	ldr	r2, [pc, #100]	; (80094cc <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8009468:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800946e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	2201      	movs	r2, #1
 800947a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	2200      	movs	r2, #0
 8009482:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009484:	2301      	movs	r3, #1
 8009486:	e018      	b.n	80094ba <HAL_SD_WriteBlocks_DMA+0x1be>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009488:	f04f 33ff 	mov.w	r3, #4294967295
 800948c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	025b      	lsls	r3, r3, #9
 8009492:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8009494:	2390      	movs	r3, #144	; 0x90
 8009496:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8009498:	2300      	movs	r3, #0
 800949a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800949c:	2300      	movs	r3, #0
 800949e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80094a0:	2301      	movs	r3, #1
 80094a2:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f107 0210 	add.w	r2, r7, #16
 80094ac:	4611      	mov	r1, r2
 80094ae:	4618      	mov	r0, r3
 80094b0:	f003 f932 	bl	800c718 <SDIO_ConfigData>

      return HAL_OK;
 80094b4:	2300      	movs	r3, #0
 80094b6:	e000      	b.n	80094ba <HAL_SD_WriteBlocks_DMA+0x1be>
    }
  }
  else
  {
    return HAL_BUSY;
 80094b8:	2302      	movs	r3, #2
  }
}
 80094ba:	4618      	mov	r0, r3
 80094bc:	3730      	adds	r7, #48	; 0x30
 80094be:	46bd      	mov	sp, r7
 80094c0:	bd80      	pop	{r7, pc}
 80094c2:	bf00      	nop
 80094c4:	08009cad 	.word	0x08009cad
 80094c8:	08009d49 	.word	0x08009d49
 80094cc:	004005ff 	.word	0x004005ff
 80094d0:	4225858c 	.word	0x4225858c

080094d4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b084      	sub	sp, #16
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094e0:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d008      	beq.n	8009502 <HAL_SD_IRQHandler+0x2e>
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	f003 0308 	and.w	r3, r3, #8
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d003      	beq.n	8009502 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f000 ffc8 	bl	800a490 <SD_Read_IT>
 8009500:	e155      	b.n	80097ae <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800950c:	2b00      	cmp	r3, #0
 800950e:	f000 808f 	beq.w	8009630 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f44f 7280 	mov.w	r2, #256	; 0x100
 800951a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009522:	687a      	ldr	r2, [r7, #4]
 8009524:	6812      	ldr	r2, [r2, #0]
 8009526:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800952a:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800952e:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	f022 0201 	bic.w	r2, r2, #1
 800953e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	f003 0308 	and.w	r3, r3, #8
 8009546:	2b00      	cmp	r3, #0
 8009548:	d039      	beq.n	80095be <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	f003 0302 	and.w	r3, r3, #2
 8009550:	2b00      	cmp	r3, #0
 8009552:	d104      	bne.n	800955e <HAL_SD_IRQHandler+0x8a>
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	f003 0320 	and.w	r3, r3, #32
 800955a:	2b00      	cmp	r3, #0
 800955c:	d011      	beq.n	8009582 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	4618      	mov	r0, r3
 8009564:	f003 f9ae 	bl	800c8c4 <SDMMC_CmdStopTransfer>
 8009568:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d008      	beq.n	8009582 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009574:	68bb      	ldr	r3, [r7, #8]
 8009576:	431a      	orrs	r2, r3
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	f000 f91f 	bl	80097c0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	f240 523a 	movw	r2, #1338	; 0x53a
 800958a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2201      	movs	r2, #1
 8009590:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2200      	movs	r2, #0
 8009598:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	f003 0301 	and.w	r3, r3, #1
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d104      	bne.n	80095ae <HAL_SD_IRQHandler+0xda>
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	f003 0302 	and.w	r3, r3, #2
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d003      	beq.n	80095b6 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	f003 fe0c 	bl	800d1cc <HAL_SD_RxCpltCallback>
 80095b4:	e0fb      	b.n	80097ae <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f003 fdfe 	bl	800d1b8 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80095bc:	e0f7      	b.n	80097ae <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	f000 80f2 	beq.w	80097ae <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	f003 0320 	and.w	r3, r3, #32
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d011      	beq.n	80095f8 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	4618      	mov	r0, r3
 80095da:	f003 f973 	bl	800c8c4 <SDMMC_CmdStopTransfer>
 80095de:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80095e0:	68bb      	ldr	r3, [r7, #8]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d008      	beq.n	80095f8 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80095ea:	68bb      	ldr	r3, [r7, #8]
 80095ec:	431a      	orrs	r2, r3
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	f000 f8e4 	bl	80097c0 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	f003 0301 	and.w	r3, r3, #1
 80095fe:	2b00      	cmp	r3, #0
 8009600:	f040 80d5 	bne.w	80097ae <HAL_SD_IRQHandler+0x2da>
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	f003 0302 	and.w	r3, r3, #2
 800960a:	2b00      	cmp	r3, #0
 800960c:	f040 80cf 	bne.w	80097ae <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f022 0208 	bic.w	r2, r2, #8
 800961e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2201      	movs	r2, #1
 8009624:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8009628:	6878      	ldr	r0, [r7, #4]
 800962a:	f003 fdc5 	bl	800d1b8 <HAL_SD_TxCpltCallback>
}
 800962e:	e0be      	b.n	80097ae <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009636:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800963a:	2b00      	cmp	r3, #0
 800963c:	d008      	beq.n	8009650 <HAL_SD_IRQHandler+0x17c>
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	f003 0308 	and.w	r3, r3, #8
 8009644:	2b00      	cmp	r3, #0
 8009646:	d003      	beq.n	8009650 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f000 ff72 	bl	800a532 <SD_Write_IT>
 800964e:	e0ae      	b.n	80097ae <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009656:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800965a:	2b00      	cmp	r3, #0
 800965c:	f000 80a7 	beq.w	80097ae <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009666:	f003 0302 	and.w	r3, r3, #2
 800966a:	2b00      	cmp	r3, #0
 800966c:	d005      	beq.n	800967a <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009672:	f043 0202 	orr.w	r2, r3, #2
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009680:	f003 0308 	and.w	r3, r3, #8
 8009684:	2b00      	cmp	r3, #0
 8009686:	d005      	beq.n	8009694 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800968c:	f043 0208 	orr.w	r2, r3, #8
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800969a:	f003 0320 	and.w	r3, r3, #32
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d005      	beq.n	80096ae <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096a6:	f043 0220 	orr.w	r2, r3, #32
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096b4:	f003 0310 	and.w	r3, r3, #16
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d005      	beq.n	80096c8 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096c0:	f043 0210 	orr.w	r2, r3, #16
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	f240 523a 	movw	r2, #1338	; 0x53a
 80096d0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80096e0:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	4618      	mov	r0, r3
 80096e8:	f003 f8ec 	bl	800c8c4 <SDMMC_CmdStopTransfer>
 80096ec:	4602      	mov	r2, r0
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096f2:	431a      	orrs	r2, r3
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	f003 0308 	and.w	r3, r3, #8
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d00a      	beq.n	8009718 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2201      	movs	r2, #1
 8009706:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	2200      	movs	r2, #0
 800970e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f000 f855 	bl	80097c0 <HAL_SD_ErrorCallback>
}
 8009716:	e04a      	b.n	80097ae <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800971e:	2b00      	cmp	r3, #0
 8009720:	d045      	beq.n	80097ae <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	f003 0310 	and.w	r3, r3, #16
 8009728:	2b00      	cmp	r3, #0
 800972a:	d104      	bne.n	8009736 <HAL_SD_IRQHandler+0x262>
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	f003 0320 	and.w	r3, r3, #32
 8009732:	2b00      	cmp	r3, #0
 8009734:	d011      	beq.n	800975a <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800973a:	4a1f      	ldr	r2, [pc, #124]	; (80097b8 <HAL_SD_IRQHandler+0x2e4>)
 800973c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009742:	4618      	mov	r0, r3
 8009744:	f7fd f98e 	bl	8006a64 <HAL_DMA_Abort_IT>
 8009748:	4603      	mov	r3, r0
 800974a:	2b00      	cmp	r3, #0
 800974c:	d02f      	beq.n	80097ae <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009752:	4618      	mov	r0, r3
 8009754:	f000 fb4a 	bl	8009dec <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8009758:	e029      	b.n	80097ae <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	f003 0301 	and.w	r3, r3, #1
 8009760:	2b00      	cmp	r3, #0
 8009762:	d104      	bne.n	800976e <HAL_SD_IRQHandler+0x29a>
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	f003 0302 	and.w	r3, r3, #2
 800976a:	2b00      	cmp	r3, #0
 800976c:	d011      	beq.n	8009792 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009772:	4a12      	ldr	r2, [pc, #72]	; (80097bc <HAL_SD_IRQHandler+0x2e8>)
 8009774:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800977a:	4618      	mov	r0, r3
 800977c:	f7fd f972 	bl	8006a64 <HAL_DMA_Abort_IT>
 8009780:	4603      	mov	r3, r0
 8009782:	2b00      	cmp	r3, #0
 8009784:	d013      	beq.n	80097ae <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800978a:	4618      	mov	r0, r3
 800978c:	f000 fb65 	bl	8009e5a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8009790:	e00d      	b.n	80097ae <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2200      	movs	r2, #0
 8009796:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2201      	movs	r2, #1
 800979c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2200      	movs	r2, #0
 80097a4:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f003 fcfc 	bl	800d1a4 <HAL_SD_AbortCallback>
}
 80097ac:	e7ff      	b.n	80097ae <HAL_SD_IRQHandler+0x2da>
 80097ae:	bf00      	nop
 80097b0:	3710      	adds	r7, #16
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bd80      	pop	{r7, pc}
 80097b6:	bf00      	nop
 80097b8:	08009ded 	.word	0x08009ded
 80097bc:	08009e5b 	.word	0x08009e5b

080097c0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80097c0:	b480      	push	{r7}
 80097c2:	b083      	sub	sp, #12
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80097c8:	bf00      	nop
 80097ca:	370c      	adds	r7, #12
 80097cc:	46bd      	mov	sp, r7
 80097ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d2:	4770      	bx	lr

080097d4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80097d4:	b480      	push	{r7}
 80097d6:	b083      	sub	sp, #12
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
 80097dc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80097e2:	0f9b      	lsrs	r3, r3, #30
 80097e4:	b2da      	uxtb	r2, r3
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80097ee:	0e9b      	lsrs	r3, r3, #26
 80097f0:	b2db      	uxtb	r3, r3
 80097f2:	f003 030f 	and.w	r3, r3, #15
 80097f6:	b2da      	uxtb	r2, r3
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009800:	0e1b      	lsrs	r3, r3, #24
 8009802:	b2db      	uxtb	r3, r3
 8009804:	f003 0303 	and.w	r3, r3, #3
 8009808:	b2da      	uxtb	r2, r3
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009812:	0c1b      	lsrs	r3, r3, #16
 8009814:	b2da      	uxtb	r2, r3
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800981e:	0a1b      	lsrs	r3, r3, #8
 8009820:	b2da      	uxtb	r2, r3
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800982a:	b2da      	uxtb	r2, r3
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009834:	0d1b      	lsrs	r3, r3, #20
 8009836:	b29a      	uxth	r2, r3
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009840:	0c1b      	lsrs	r3, r3, #16
 8009842:	b2db      	uxtb	r3, r3
 8009844:	f003 030f 	and.w	r3, r3, #15
 8009848:	b2da      	uxtb	r2, r3
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009852:	0bdb      	lsrs	r3, r3, #15
 8009854:	b2db      	uxtb	r3, r3
 8009856:	f003 0301 	and.w	r3, r3, #1
 800985a:	b2da      	uxtb	r2, r3
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009864:	0b9b      	lsrs	r3, r3, #14
 8009866:	b2db      	uxtb	r3, r3
 8009868:	f003 0301 	and.w	r3, r3, #1
 800986c:	b2da      	uxtb	r2, r3
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009876:	0b5b      	lsrs	r3, r3, #13
 8009878:	b2db      	uxtb	r3, r3
 800987a:	f003 0301 	and.w	r3, r3, #1
 800987e:	b2da      	uxtb	r2, r3
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009888:	0b1b      	lsrs	r3, r3, #12
 800988a:	b2db      	uxtb	r3, r3
 800988c:	f003 0301 	and.w	r3, r3, #1
 8009890:	b2da      	uxtb	r2, r3
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	2200      	movs	r2, #0
 800989a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d163      	bne.n	800996c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80098a8:	009a      	lsls	r2, r3, #2
 80098aa:	f640 73fc 	movw	r3, #4092	; 0xffc
 80098ae:	4013      	ands	r3, r2
 80098b0:	687a      	ldr	r2, [r7, #4]
 80098b2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80098b4:	0f92      	lsrs	r2, r2, #30
 80098b6:	431a      	orrs	r2, r3
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098c0:	0edb      	lsrs	r3, r3, #27
 80098c2:	b2db      	uxtb	r3, r3
 80098c4:	f003 0307 	and.w	r3, r3, #7
 80098c8:	b2da      	uxtb	r2, r3
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098d2:	0e1b      	lsrs	r3, r3, #24
 80098d4:	b2db      	uxtb	r3, r3
 80098d6:	f003 0307 	and.w	r3, r3, #7
 80098da:	b2da      	uxtb	r2, r3
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098e4:	0d5b      	lsrs	r3, r3, #21
 80098e6:	b2db      	uxtb	r3, r3
 80098e8:	f003 0307 	and.w	r3, r3, #7
 80098ec:	b2da      	uxtb	r2, r3
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098f6:	0c9b      	lsrs	r3, r3, #18
 80098f8:	b2db      	uxtb	r3, r3
 80098fa:	f003 0307 	and.w	r3, r3, #7
 80098fe:	b2da      	uxtb	r2, r3
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009908:	0bdb      	lsrs	r3, r3, #15
 800990a:	b2db      	uxtb	r3, r3
 800990c:	f003 0307 	and.w	r3, r3, #7
 8009910:	b2da      	uxtb	r2, r3
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	691b      	ldr	r3, [r3, #16]
 800991a:	1c5a      	adds	r2, r3, #1
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	7e1b      	ldrb	r3, [r3, #24]
 8009924:	b2db      	uxtb	r3, r3
 8009926:	f003 0307 	and.w	r3, r3, #7
 800992a:	3302      	adds	r3, #2
 800992c:	2201      	movs	r2, #1
 800992e:	fa02 f303 	lsl.w	r3, r2, r3
 8009932:	687a      	ldr	r2, [r7, #4]
 8009934:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8009936:	fb02 f203 	mul.w	r2, r2, r3
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	7a1b      	ldrb	r3, [r3, #8]
 8009942:	b2db      	uxtb	r3, r3
 8009944:	f003 030f 	and.w	r3, r3, #15
 8009948:	2201      	movs	r2, #1
 800994a:	409a      	lsls	r2, r3
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009954:	687a      	ldr	r2, [r7, #4]
 8009956:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8009958:	0a52      	lsrs	r2, r2, #9
 800995a:	fb02 f203 	mul.w	r2, r2, r3
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009968:	661a      	str	r2, [r3, #96]	; 0x60
 800996a:	e031      	b.n	80099d0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009970:	2b01      	cmp	r3, #1
 8009972:	d11d      	bne.n	80099b0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009978:	041b      	lsls	r3, r3, #16
 800997a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009982:	0c1b      	lsrs	r3, r3, #16
 8009984:	431a      	orrs	r2, r3
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	691b      	ldr	r3, [r3, #16]
 800998e:	3301      	adds	r3, #1
 8009990:	029a      	lsls	r2, r3, #10
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80099a4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	661a      	str	r2, [r3, #96]	; 0x60
 80099ae:	e00f      	b.n	80099d0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	4a58      	ldr	r2, [pc, #352]	; (8009b18 <HAL_SD_GetCardCSD+0x344>)
 80099b6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099bc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2201      	movs	r2, #1
 80099c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80099cc:	2301      	movs	r3, #1
 80099ce:	e09d      	b.n	8009b0c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80099d4:	0b9b      	lsrs	r3, r3, #14
 80099d6:	b2db      	uxtb	r3, r3
 80099d8:	f003 0301 	and.w	r3, r3, #1
 80099dc:	b2da      	uxtb	r2, r3
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80099e6:	09db      	lsrs	r3, r3, #7
 80099e8:	b2db      	uxtb	r3, r3
 80099ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099ee:	b2da      	uxtb	r2, r3
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80099f8:	b2db      	uxtb	r3, r3
 80099fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099fe:	b2da      	uxtb	r2, r3
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a08:	0fdb      	lsrs	r3, r3, #31
 8009a0a:	b2da      	uxtb	r2, r3
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a14:	0f5b      	lsrs	r3, r3, #29
 8009a16:	b2db      	uxtb	r3, r3
 8009a18:	f003 0303 	and.w	r3, r3, #3
 8009a1c:	b2da      	uxtb	r2, r3
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a26:	0e9b      	lsrs	r3, r3, #26
 8009a28:	b2db      	uxtb	r3, r3
 8009a2a:	f003 0307 	and.w	r3, r3, #7
 8009a2e:	b2da      	uxtb	r2, r3
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a38:	0d9b      	lsrs	r3, r3, #22
 8009a3a:	b2db      	uxtb	r3, r3
 8009a3c:	f003 030f 	and.w	r3, r3, #15
 8009a40:	b2da      	uxtb	r2, r3
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a4a:	0d5b      	lsrs	r3, r3, #21
 8009a4c:	b2db      	uxtb	r3, r3
 8009a4e:	f003 0301 	and.w	r3, r3, #1
 8009a52:	b2da      	uxtb	r2, r3
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a66:	0c1b      	lsrs	r3, r3, #16
 8009a68:	b2db      	uxtb	r3, r3
 8009a6a:	f003 0301 	and.w	r3, r3, #1
 8009a6e:	b2da      	uxtb	r2, r3
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a7a:	0bdb      	lsrs	r3, r3, #15
 8009a7c:	b2db      	uxtb	r3, r3
 8009a7e:	f003 0301 	and.w	r3, r3, #1
 8009a82:	b2da      	uxtb	r2, r3
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a8e:	0b9b      	lsrs	r3, r3, #14
 8009a90:	b2db      	uxtb	r3, r3
 8009a92:	f003 0301 	and.w	r3, r3, #1
 8009a96:	b2da      	uxtb	r2, r3
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009aa2:	0b5b      	lsrs	r3, r3, #13
 8009aa4:	b2db      	uxtb	r3, r3
 8009aa6:	f003 0301 	and.w	r3, r3, #1
 8009aaa:	b2da      	uxtb	r2, r3
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ab6:	0b1b      	lsrs	r3, r3, #12
 8009ab8:	b2db      	uxtb	r3, r3
 8009aba:	f003 0301 	and.w	r3, r3, #1
 8009abe:	b2da      	uxtb	r2, r3
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009aca:	0a9b      	lsrs	r3, r3, #10
 8009acc:	b2db      	uxtb	r3, r3
 8009ace:	f003 0303 	and.w	r3, r3, #3
 8009ad2:	b2da      	uxtb	r2, r3
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ade:	0a1b      	lsrs	r3, r3, #8
 8009ae0:	b2db      	uxtb	r3, r3
 8009ae2:	f003 0303 	and.w	r3, r3, #3
 8009ae6:	b2da      	uxtb	r2, r3
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009af2:	085b      	lsrs	r3, r3, #1
 8009af4:	b2db      	uxtb	r3, r3
 8009af6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009afa:	b2da      	uxtb	r2, r3
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	2201      	movs	r2, #1
 8009b06:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8009b0a:	2300      	movs	r3, #0
}
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	370c      	adds	r7, #12
 8009b10:	46bd      	mov	sp, r7
 8009b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b16:	4770      	bx	lr
 8009b18:	004005ff 	.word	0x004005ff

08009b1c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009b1c:	b480      	push	{r7}
 8009b1e:	b083      	sub	sp, #12
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
 8009b24:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8009b66:	2300      	movs	r3, #0
}
 8009b68:	4618      	mov	r0, r3
 8009b6a:	370c      	adds	r7, #12
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b72:	4770      	bx	lr

08009b74 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8009b74:	b5b0      	push	{r4, r5, r7, lr}
 8009b76:	b08e      	sub	sp, #56	; 0x38
 8009b78:	af04      	add	r7, sp, #16
 8009b7a:	6078      	str	r0, [r7, #4]
 8009b7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	2203      	movs	r2, #3
 8009b82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b8a:	2b03      	cmp	r3, #3
 8009b8c:	d02e      	beq.n	8009bec <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8009b8e:	683b      	ldr	r3, [r7, #0]
 8009b90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b94:	d106      	bne.n	8009ba4 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b9a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	639a      	str	r2, [r3, #56]	; 0x38
 8009ba2:	e029      	b.n	8009bf8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009baa:	d10a      	bne.n	8009bc2 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f000 fb0f 	bl	800a1d0 <SD_WideBus_Enable>
 8009bb2:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bba:	431a      	orrs	r2, r3
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	639a      	str	r2, [r3, #56]	; 0x38
 8009bc0:	e01a      	b.n	8009bf8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d10a      	bne.n	8009bde <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8009bc8:	6878      	ldr	r0, [r7, #4]
 8009bca:	f000 fb4c 	bl	800a266 <SD_WideBus_Disable>
 8009bce:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bd6:	431a      	orrs	r2, r3
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	639a      	str	r2, [r3, #56]	; 0x38
 8009bdc:	e00c      	b.n	8009bf8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009be2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	639a      	str	r2, [r3, #56]	; 0x38
 8009bea:	e005      	b.n	8009bf8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bf0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d009      	beq.n	8009c14 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	4a18      	ldr	r2, [pc, #96]	; (8009c68 <HAL_SD_ConfigWideBusOperation+0xf4>)
 8009c06:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2201      	movs	r2, #1
 8009c0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009c10:	2301      	movs	r3, #1
 8009c12:	e024      	b.n	8009c5e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	685b      	ldr	r3, [r3, #4]
 8009c18:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	689b      	ldr	r3, [r3, #8]
 8009c1e:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	68db      	ldr	r3, [r3, #12]
 8009c24:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	695b      	ldr	r3, [r3, #20]
 8009c2e:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	699b      	ldr	r3, [r3, #24]
 8009c34:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681d      	ldr	r5, [r3, #0]
 8009c3a:	466c      	mov	r4, sp
 8009c3c:	f107 0318 	add.w	r3, r7, #24
 8009c40:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009c44:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009c48:	f107 030c 	add.w	r3, r7, #12
 8009c4c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009c4e:	4628      	mov	r0, r5
 8009c50:	f002 fcb2 	bl	800c5b8 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2201      	movs	r2, #1
 8009c58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8009c5c:	2300      	movs	r3, #0
}
 8009c5e:	4618      	mov	r0, r3
 8009c60:	3728      	adds	r7, #40	; 0x28
 8009c62:	46bd      	mov	sp, r7
 8009c64:	bdb0      	pop	{r4, r5, r7, pc}
 8009c66:	bf00      	nop
 8009c68:	004005ff 	.word	0x004005ff

08009c6c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b086      	sub	sp, #24
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009c74:	2300      	movs	r3, #0
 8009c76:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009c78:	f107 030c 	add.w	r3, r7, #12
 8009c7c:	4619      	mov	r1, r3
 8009c7e:	6878      	ldr	r0, [r7, #4]
 8009c80:	f000 fa7e 	bl	800a180 <SD_SendStatus>
 8009c84:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009c86:	697b      	ldr	r3, [r7, #20]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d005      	beq.n	8009c98 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c90:	697b      	ldr	r3, [r7, #20]
 8009c92:	431a      	orrs	r2, r3
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	0a5b      	lsrs	r3, r3, #9
 8009c9c:	f003 030f 	and.w	r3, r3, #15
 8009ca0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009ca2:	693b      	ldr	r3, [r7, #16]
}
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	3718      	adds	r7, #24
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	bd80      	pop	{r7, pc}

08009cac <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009cac:	b480      	push	{r7}
 8009cae:	b085      	sub	sp, #20
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cb8:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009cc8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8009cca:	bf00      	nop
 8009ccc:	3714      	adds	r7, #20
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd4:	4770      	bx	lr

08009cd6 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009cd6:	b580      	push	{r7, lr}
 8009cd8:	b084      	sub	sp, #16
 8009cda:	af00      	add	r7, sp, #0
 8009cdc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ce2:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ce8:	2b82      	cmp	r3, #130	; 0x82
 8009cea:	d111      	bne.n	8009d10 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	f002 fde7 	bl	800c8c4 <SDMMC_CmdStopTransfer>
 8009cf6:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d008      	beq.n	8009d10 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d02:	68bb      	ldr	r3, [r7, #8]
 8009d04:	431a      	orrs	r2, r3
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8009d0a:	68f8      	ldr	r0, [r7, #12]
 8009d0c:	f7ff fd58 	bl	80097c0 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	f022 0208 	bic.w	r2, r2, #8
 8009d1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	f240 523a 	movw	r2, #1338	; 0x53a
 8009d28:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	2201      	movs	r2, #1
 8009d2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	2200      	movs	r2, #0
 8009d36:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8009d38:	68f8      	ldr	r0, [r7, #12]
 8009d3a:	f003 fa47 	bl	800d1cc <HAL_SD_RxCpltCallback>
#endif
}
 8009d3e:	bf00      	nop
 8009d40:	3710      	adds	r7, #16
 8009d42:	46bd      	mov	sp, r7
 8009d44:	bd80      	pop	{r7, pc}
	...

08009d48 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b086      	sub	sp, #24
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d54:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8009d56:	6878      	ldr	r0, [r7, #4]
 8009d58:	f7fd f830 	bl	8006dbc <HAL_DMA_GetError>
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	2b02      	cmp	r3, #2
 8009d60:	d03e      	beq.n	8009de0 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8009d62:	697b      	ldr	r3, [r7, #20]
 8009d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d68:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8009d6a:	697b      	ldr	r3, [r7, #20]
 8009d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d70:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8009d72:	693b      	ldr	r3, [r7, #16]
 8009d74:	2b01      	cmp	r3, #1
 8009d76:	d002      	beq.n	8009d7e <SD_DMAError+0x36>
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	2b01      	cmp	r3, #1
 8009d7c:	d12d      	bne.n	8009dda <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009d7e:	697b      	ldr	r3, [r7, #20]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	4a19      	ldr	r2, [pc, #100]	; (8009de8 <SD_DMAError+0xa0>)
 8009d84:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8009d86:	697b      	ldr	r3, [r7, #20]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009d8c:	697b      	ldr	r3, [r7, #20]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8009d94:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009d96:	697b      	ldr	r3, [r7, #20]
 8009d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d9a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009d9e:	697b      	ldr	r3, [r7, #20]
 8009da0:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8009da2:	6978      	ldr	r0, [r7, #20]
 8009da4:	f7ff ff62 	bl	8009c6c <HAL_SD_GetCardState>
 8009da8:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	2b06      	cmp	r3, #6
 8009dae:	d002      	beq.n	8009db6 <SD_DMAError+0x6e>
 8009db0:	68bb      	ldr	r3, [r7, #8]
 8009db2:	2b05      	cmp	r3, #5
 8009db4:	d10a      	bne.n	8009dcc <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009db6:	697b      	ldr	r3, [r7, #20]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	4618      	mov	r0, r3
 8009dbc:	f002 fd82 	bl	800c8c4 <SDMMC_CmdStopTransfer>
 8009dc0:	4602      	mov	r2, r0
 8009dc2:	697b      	ldr	r3, [r7, #20]
 8009dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dc6:	431a      	orrs	r2, r3
 8009dc8:	697b      	ldr	r3, [r7, #20]
 8009dca:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8009dcc:	697b      	ldr	r3, [r7, #20]
 8009dce:	2201      	movs	r2, #1
 8009dd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009dd4:	697b      	ldr	r3, [r7, #20]
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8009dda:	6978      	ldr	r0, [r7, #20]
 8009ddc:	f7ff fcf0 	bl	80097c0 <HAL_SD_ErrorCallback>
#endif
  }
}
 8009de0:	bf00      	nop
 8009de2:	3718      	adds	r7, #24
 8009de4:	46bd      	mov	sp, r7
 8009de6:	bd80      	pop	{r7, pc}
 8009de8:	004005ff 	.word	0x004005ff

08009dec <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b084      	sub	sp, #16
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009df8:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	f240 523a 	movw	r2, #1338	; 0x53a
 8009e02:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8009e04:	68f8      	ldr	r0, [r7, #12]
 8009e06:	f7ff ff31 	bl	8009c6c <HAL_SD_GetCardState>
 8009e0a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	2201      	movs	r2, #1
 8009e10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	2200      	movs	r2, #0
 8009e18:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009e1a:	68bb      	ldr	r3, [r7, #8]
 8009e1c:	2b06      	cmp	r3, #6
 8009e1e:	d002      	beq.n	8009e26 <SD_DMATxAbort+0x3a>
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	2b05      	cmp	r3, #5
 8009e24:	d10a      	bne.n	8009e3c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	f002 fd4a 	bl	800c8c4 <SDMMC_CmdStopTransfer>
 8009e30:	4602      	mov	r2, r0
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e36:	431a      	orrs	r2, r3
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d103      	bne.n	8009e4c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8009e44:	68f8      	ldr	r0, [r7, #12]
 8009e46:	f003 f9ad 	bl	800d1a4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8009e4a:	e002      	b.n	8009e52 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8009e4c:	68f8      	ldr	r0, [r7, #12]
 8009e4e:	f7ff fcb7 	bl	80097c0 <HAL_SD_ErrorCallback>
}
 8009e52:	bf00      	nop
 8009e54:	3710      	adds	r7, #16
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bd80      	pop	{r7, pc}

08009e5a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8009e5a:	b580      	push	{r7, lr}
 8009e5c:	b084      	sub	sp, #16
 8009e5e:	af00      	add	r7, sp, #0
 8009e60:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e66:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	f240 523a 	movw	r2, #1338	; 0x53a
 8009e70:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8009e72:	68f8      	ldr	r0, [r7, #12]
 8009e74:	f7ff fefa 	bl	8009c6c <HAL_SD_GetCardState>
 8009e78:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	2201      	movs	r2, #1
 8009e7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	2200      	movs	r2, #0
 8009e86:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	2b06      	cmp	r3, #6
 8009e8c:	d002      	beq.n	8009e94 <SD_DMARxAbort+0x3a>
 8009e8e:	68bb      	ldr	r3, [r7, #8]
 8009e90:	2b05      	cmp	r3, #5
 8009e92:	d10a      	bne.n	8009eaa <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	4618      	mov	r0, r3
 8009e9a:	f002 fd13 	bl	800c8c4 <SDMMC_CmdStopTransfer>
 8009e9e:	4602      	mov	r2, r0
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ea4:	431a      	orrs	r2, r3
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d103      	bne.n	8009eba <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8009eb2:	68f8      	ldr	r0, [r7, #12]
 8009eb4:	f003 f976 	bl	800d1a4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8009eb8:	e002      	b.n	8009ec0 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8009eba:	68f8      	ldr	r0, [r7, #12]
 8009ebc:	f7ff fc80 	bl	80097c0 <HAL_SD_ErrorCallback>
}
 8009ec0:	bf00      	nop
 8009ec2:	3710      	adds	r7, #16
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	bd80      	pop	{r7, pc}

08009ec8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009ec8:	b5b0      	push	{r4, r5, r7, lr}
 8009eca:	b094      	sub	sp, #80	; 0x50
 8009ecc:	af04      	add	r7, sp, #16
 8009ece:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009ed0:	2301      	movs	r3, #1
 8009ed2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	4618      	mov	r0, r3
 8009eda:	f002 fbc5 	bl	800c668 <SDIO_GetPowerState>
 8009ede:	4603      	mov	r3, r0
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d102      	bne.n	8009eea <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009ee4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009ee8:	e0b7      	b.n	800a05a <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009eee:	2b03      	cmp	r3, #3
 8009ef0:	d02f      	beq.n	8009f52 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	f002 fdee 	bl	800cad8 <SDMMC_CmdSendCID>
 8009efc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009efe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d001      	beq.n	8009f08 <SD_InitCard+0x40>
    {
      return errorstate;
 8009f04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f06:	e0a8      	b.n	800a05a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	2100      	movs	r1, #0
 8009f0e:	4618      	mov	r0, r3
 8009f10:	f002 fbef 	bl	800c6f2 <SDIO_GetResponse>
 8009f14:	4602      	mov	r2, r0
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	2104      	movs	r1, #4
 8009f20:	4618      	mov	r0, r3
 8009f22:	f002 fbe6 	bl	800c6f2 <SDIO_GetResponse>
 8009f26:	4602      	mov	r2, r0
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	2108      	movs	r1, #8
 8009f32:	4618      	mov	r0, r3
 8009f34:	f002 fbdd 	bl	800c6f2 <SDIO_GetResponse>
 8009f38:	4602      	mov	r2, r0
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	210c      	movs	r1, #12
 8009f44:	4618      	mov	r0, r3
 8009f46:	f002 fbd4 	bl	800c6f2 <SDIO_GetResponse>
 8009f4a:	4602      	mov	r2, r0
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f56:	2b03      	cmp	r3, #3
 8009f58:	d00d      	beq.n	8009f76 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	f107 020e 	add.w	r2, r7, #14
 8009f62:	4611      	mov	r1, r2
 8009f64:	4618      	mov	r0, r3
 8009f66:	f002 fdf4 	bl	800cb52 <SDMMC_CmdSetRelAdd>
 8009f6a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009f6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d001      	beq.n	8009f76 <SD_InitCard+0xae>
    {
      return errorstate;
 8009f72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f74:	e071      	b.n	800a05a <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f7a:	2b03      	cmp	r3, #3
 8009f7c:	d036      	beq.n	8009fec <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009f7e:	89fb      	ldrh	r3, [r7, #14]
 8009f80:	461a      	mov	r2, r3
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681a      	ldr	r2, [r3, #0]
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f8e:	041b      	lsls	r3, r3, #16
 8009f90:	4619      	mov	r1, r3
 8009f92:	4610      	mov	r0, r2
 8009f94:	f002 fdbe 	bl	800cb14 <SDMMC_CmdSendCSD>
 8009f98:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009f9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d001      	beq.n	8009fa4 <SD_InitCard+0xdc>
    {
      return errorstate;
 8009fa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fa2:	e05a      	b.n	800a05a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	2100      	movs	r1, #0
 8009faa:	4618      	mov	r0, r3
 8009fac:	f002 fba1 	bl	800c6f2 <SDIO_GetResponse>
 8009fb0:	4602      	mov	r2, r0
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	2104      	movs	r1, #4
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	f002 fb98 	bl	800c6f2 <SDIO_GetResponse>
 8009fc2:	4602      	mov	r2, r0
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	2108      	movs	r1, #8
 8009fce:	4618      	mov	r0, r3
 8009fd0:	f002 fb8f 	bl	800c6f2 <SDIO_GetResponse>
 8009fd4:	4602      	mov	r2, r0
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	210c      	movs	r1, #12
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	f002 fb86 	bl	800c6f2 <SDIO_GetResponse>
 8009fe6:	4602      	mov	r2, r0
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	2104      	movs	r1, #4
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	f002 fb7d 	bl	800c6f2 <SDIO_GetResponse>
 8009ff8:	4603      	mov	r3, r0
 8009ffa:	0d1a      	lsrs	r2, r3, #20
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800a000:	f107 0310 	add.w	r3, r7, #16
 800a004:	4619      	mov	r1, r3
 800a006:	6878      	ldr	r0, [r7, #4]
 800a008:	f7ff fbe4 	bl	80097d4 <HAL_SD_GetCardCSD>
 800a00c:	4603      	mov	r3, r0
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d002      	beq.n	800a018 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a012:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a016:	e020      	b.n	800a05a <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	6819      	ldr	r1, [r3, #0]
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a020:	041b      	lsls	r3, r3, #16
 800a022:	f04f 0400 	mov.w	r4, #0
 800a026:	461a      	mov	r2, r3
 800a028:	4623      	mov	r3, r4
 800a02a:	4608      	mov	r0, r1
 800a02c:	f002 fc6c 	bl	800c908 <SDMMC_CmdSelDesel>
 800a030:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800a032:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a034:	2b00      	cmp	r3, #0
 800a036:	d001      	beq.n	800a03c <SD_InitCard+0x174>
  {
    return errorstate;
 800a038:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a03a:	e00e      	b.n	800a05a <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681d      	ldr	r5, [r3, #0]
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	466c      	mov	r4, sp
 800a044:	f103 0210 	add.w	r2, r3, #16
 800a048:	ca07      	ldmia	r2, {r0, r1, r2}
 800a04a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a04e:	3304      	adds	r3, #4
 800a050:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a052:	4628      	mov	r0, r5
 800a054:	f002 fab0 	bl	800c5b8 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800a058:	2300      	movs	r3, #0
}
 800a05a:	4618      	mov	r0, r3
 800a05c:	3740      	adds	r7, #64	; 0x40
 800a05e:	46bd      	mov	sp, r7
 800a060:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800a064 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b086      	sub	sp, #24
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a06c:	2300      	movs	r3, #0
 800a06e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800a070:	2300      	movs	r3, #0
 800a072:	617b      	str	r3, [r7, #20]
 800a074:	2300      	movs	r3, #0
 800a076:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	4618      	mov	r0, r3
 800a07e:	f002 fc66 	bl	800c94e <SDMMC_CmdGoIdleState>
 800a082:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d001      	beq.n	800a08e <SD_PowerON+0x2a>
  {
    return errorstate;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	e072      	b.n	800a174 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	4618      	mov	r0, r3
 800a094:	f002 fc79 	bl	800c98a <SDMMC_CmdOperCond>
 800a098:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d00d      	beq.n	800a0bc <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	f002 fc4f 	bl	800c94e <SDMMC_CmdGoIdleState>
 800a0b0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d004      	beq.n	800a0c2 <SD_PowerON+0x5e>
    {
      return errorstate;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	e05b      	b.n	800a174 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2201      	movs	r2, #1
 800a0c0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a0c6:	2b01      	cmp	r3, #1
 800a0c8:	d137      	bne.n	800a13a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	2100      	movs	r1, #0
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	f002 fc79 	bl	800c9c8 <SDMMC_CmdAppCommand>
 800a0d6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d02d      	beq.n	800a13a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a0de:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a0e2:	e047      	b.n	800a174 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	2100      	movs	r1, #0
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	f002 fc6c 	bl	800c9c8 <SDMMC_CmdAppCommand>
 800a0f0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d001      	beq.n	800a0fc <SD_PowerON+0x98>
    {
      return errorstate;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	e03b      	b.n	800a174 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	491e      	ldr	r1, [pc, #120]	; (800a17c <SD_PowerON+0x118>)
 800a102:	4618      	mov	r0, r3
 800a104:	f002 fc82 	bl	800ca0c <SDMMC_CmdAppOperCommand>
 800a108:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d002      	beq.n	800a116 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a110:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a114:	e02e      	b.n	800a174 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	2100      	movs	r1, #0
 800a11c:	4618      	mov	r0, r3
 800a11e:	f002 fae8 	bl	800c6f2 <SDIO_GetResponse>
 800a122:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800a124:	697b      	ldr	r3, [r7, #20]
 800a126:	0fdb      	lsrs	r3, r3, #31
 800a128:	2b01      	cmp	r3, #1
 800a12a:	d101      	bne.n	800a130 <SD_PowerON+0xcc>
 800a12c:	2301      	movs	r3, #1
 800a12e:	e000      	b.n	800a132 <SD_PowerON+0xce>
 800a130:	2300      	movs	r3, #0
 800a132:	613b      	str	r3, [r7, #16]

    count++;
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	3301      	adds	r3, #1
 800a138:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a13a:	68bb      	ldr	r3, [r7, #8]
 800a13c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a140:	4293      	cmp	r3, r2
 800a142:	d802      	bhi.n	800a14a <SD_PowerON+0xe6>
 800a144:	693b      	ldr	r3, [r7, #16]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d0cc      	beq.n	800a0e4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a150:	4293      	cmp	r3, r2
 800a152:	d902      	bls.n	800a15a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a154:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a158:	e00c      	b.n	800a174 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800a15a:	697b      	ldr	r3, [r7, #20]
 800a15c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a160:	2b00      	cmp	r3, #0
 800a162:	d003      	beq.n	800a16c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2201      	movs	r2, #1
 800a168:	645a      	str	r2, [r3, #68]	; 0x44
 800a16a:	e002      	b.n	800a172 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2200      	movs	r2, #0
 800a170:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800a172:	2300      	movs	r3, #0
}
 800a174:	4618      	mov	r0, r3
 800a176:	3718      	adds	r7, #24
 800a178:	46bd      	mov	sp, r7
 800a17a:	bd80      	pop	{r7, pc}
 800a17c:	c1100000 	.word	0xc1100000

0800a180 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b084      	sub	sp, #16
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
 800a188:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d102      	bne.n	800a196 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800a190:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a194:	e018      	b.n	800a1c8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681a      	ldr	r2, [r3, #0]
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a19e:	041b      	lsls	r3, r3, #16
 800a1a0:	4619      	mov	r1, r3
 800a1a2:	4610      	mov	r0, r2
 800a1a4:	f002 fcf6 	bl	800cb94 <SDMMC_CmdSendStatus>
 800a1a8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d001      	beq.n	800a1b4 <SD_SendStatus+0x34>
  {
    return errorstate;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	e009      	b.n	800a1c8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	2100      	movs	r1, #0
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	f002 fa99 	bl	800c6f2 <SDIO_GetResponse>
 800a1c0:	4602      	mov	r2, r0
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800a1c6:	2300      	movs	r3, #0
}
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	3710      	adds	r7, #16
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	bd80      	pop	{r7, pc}

0800a1d0 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b086      	sub	sp, #24
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800a1d8:	2300      	movs	r3, #0
 800a1da:	60fb      	str	r3, [r7, #12]
 800a1dc:	2300      	movs	r3, #0
 800a1de:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	2100      	movs	r1, #0
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	f002 fa83 	bl	800c6f2 <SDIO_GetResponse>
 800a1ec:	4603      	mov	r3, r0
 800a1ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a1f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a1f6:	d102      	bne.n	800a1fe <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a1f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a1fc:	e02f      	b.n	800a25e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a1fe:	f107 030c 	add.w	r3, r7, #12
 800a202:	4619      	mov	r1, r3
 800a204:	6878      	ldr	r0, [r7, #4]
 800a206:	f000 f879 	bl	800a2fc <SD_FindSCR>
 800a20a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a20c:	697b      	ldr	r3, [r7, #20]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d001      	beq.n	800a216 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800a212:	697b      	ldr	r3, [r7, #20]
 800a214:	e023      	b.n	800a25e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a216:	693b      	ldr	r3, [r7, #16]
 800a218:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d01c      	beq.n	800a25a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681a      	ldr	r2, [r3, #0]
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a228:	041b      	lsls	r3, r3, #16
 800a22a:	4619      	mov	r1, r3
 800a22c:	4610      	mov	r0, r2
 800a22e:	f002 fbcb 	bl	800c9c8 <SDMMC_CmdAppCommand>
 800a232:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a234:	697b      	ldr	r3, [r7, #20]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d001      	beq.n	800a23e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800a23a:	697b      	ldr	r3, [r7, #20]
 800a23c:	e00f      	b.n	800a25e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	2102      	movs	r1, #2
 800a244:	4618      	mov	r0, r3
 800a246:	f002 fc04 	bl	800ca52 <SDMMC_CmdBusWidth>
 800a24a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a24c:	697b      	ldr	r3, [r7, #20]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d001      	beq.n	800a256 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800a252:	697b      	ldr	r3, [r7, #20]
 800a254:	e003      	b.n	800a25e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a256:	2300      	movs	r3, #0
 800a258:	e001      	b.n	800a25e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a25a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800a25e:	4618      	mov	r0, r3
 800a260:	3718      	adds	r7, #24
 800a262:	46bd      	mov	sp, r7
 800a264:	bd80      	pop	{r7, pc}

0800a266 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800a266:	b580      	push	{r7, lr}
 800a268:	b086      	sub	sp, #24
 800a26a:	af00      	add	r7, sp, #0
 800a26c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800a26e:	2300      	movs	r3, #0
 800a270:	60fb      	str	r3, [r7, #12]
 800a272:	2300      	movs	r3, #0
 800a274:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	2100      	movs	r1, #0
 800a27c:	4618      	mov	r0, r3
 800a27e:	f002 fa38 	bl	800c6f2 <SDIO_GetResponse>
 800a282:	4603      	mov	r3, r0
 800a284:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a288:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a28c:	d102      	bne.n	800a294 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a28e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a292:	e02f      	b.n	800a2f4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a294:	f107 030c 	add.w	r3, r7, #12
 800a298:	4619      	mov	r1, r3
 800a29a:	6878      	ldr	r0, [r7, #4]
 800a29c:	f000 f82e 	bl	800a2fc <SD_FindSCR>
 800a2a0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a2a2:	697b      	ldr	r3, [r7, #20]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d001      	beq.n	800a2ac <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800a2a8:	697b      	ldr	r3, [r7, #20]
 800a2aa:	e023      	b.n	800a2f4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a2ac:	693b      	ldr	r3, [r7, #16]
 800a2ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d01c      	beq.n	800a2f0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681a      	ldr	r2, [r3, #0]
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2be:	041b      	lsls	r3, r3, #16
 800a2c0:	4619      	mov	r1, r3
 800a2c2:	4610      	mov	r0, r2
 800a2c4:	f002 fb80 	bl	800c9c8 <SDMMC_CmdAppCommand>
 800a2c8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a2ca:	697b      	ldr	r3, [r7, #20]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d001      	beq.n	800a2d4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800a2d0:	697b      	ldr	r3, [r7, #20]
 800a2d2:	e00f      	b.n	800a2f4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	2100      	movs	r1, #0
 800a2da:	4618      	mov	r0, r3
 800a2dc:	f002 fbb9 	bl	800ca52 <SDMMC_CmdBusWidth>
 800a2e0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a2e2:	697b      	ldr	r3, [r7, #20]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d001      	beq.n	800a2ec <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800a2e8:	697b      	ldr	r3, [r7, #20]
 800a2ea:	e003      	b.n	800a2f4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	e001      	b.n	800a2f4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a2f0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	3718      	adds	r7, #24
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	bd80      	pop	{r7, pc}

0800a2fc <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800a2fc:	b590      	push	{r4, r7, lr}
 800a2fe:	b08f      	sub	sp, #60	; 0x3c
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
 800a304:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a306:	f7fb fd63 	bl	8005dd0 <HAL_GetTick>
 800a30a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800a30c:	2300      	movs	r3, #0
 800a30e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800a310:	2300      	movs	r3, #0
 800a312:	60bb      	str	r3, [r7, #8]
 800a314:	2300      	movs	r3, #0
 800a316:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	2108      	movs	r1, #8
 800a322:	4618      	mov	r0, r3
 800a324:	f002 fa24 	bl	800c770 <SDMMC_CmdBlockLength>
 800a328:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a32a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d001      	beq.n	800a334 <SD_FindSCR+0x38>
  {
    return errorstate;
 800a330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a332:	e0a9      	b.n	800a488 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681a      	ldr	r2, [r3, #0]
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a33c:	041b      	lsls	r3, r3, #16
 800a33e:	4619      	mov	r1, r3
 800a340:	4610      	mov	r0, r2
 800a342:	f002 fb41 	bl	800c9c8 <SDMMC_CmdAppCommand>
 800a346:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d001      	beq.n	800a352 <SD_FindSCR+0x56>
  {
    return errorstate;
 800a34e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a350:	e09a      	b.n	800a488 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a352:	f04f 33ff 	mov.w	r3, #4294967295
 800a356:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800a358:	2308      	movs	r3, #8
 800a35a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800a35c:	2330      	movs	r3, #48	; 0x30
 800a35e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800a360:	2302      	movs	r3, #2
 800a362:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800a364:	2300      	movs	r3, #0
 800a366:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800a368:	2301      	movs	r3, #1
 800a36a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	f107 0210 	add.w	r2, r7, #16
 800a374:	4611      	mov	r1, r2
 800a376:	4618      	mov	r0, r3
 800a378:	f002 f9ce 	bl	800c718 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	4618      	mov	r0, r3
 800a382:	f002 fb88 	bl	800ca96 <SDMMC_CmdSendSCR>
 800a386:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d022      	beq.n	800a3d4 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800a38e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a390:	e07a      	b.n	800a488 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a398:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d00e      	beq.n	800a3be <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	6819      	ldr	r1, [r3, #0]
 800a3a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3a6:	009b      	lsls	r3, r3, #2
 800a3a8:	f107 0208 	add.w	r2, r7, #8
 800a3ac:	18d4      	adds	r4, r2, r3
 800a3ae:	4608      	mov	r0, r1
 800a3b0:	f002 f92d 	bl	800c60e <SDIO_ReadFIFO>
 800a3b4:	4603      	mov	r3, r0
 800a3b6:	6023      	str	r3, [r4, #0]
      index++;
 800a3b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3ba:	3301      	adds	r3, #1
 800a3bc:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a3be:	f7fb fd07 	bl	8005dd0 <HAL_GetTick>
 800a3c2:	4602      	mov	r2, r0
 800a3c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3c6:	1ad3      	subs	r3, r2, r3
 800a3c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3cc:	d102      	bne.n	800a3d4 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a3ce:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a3d2:	e059      	b.n	800a488 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a3da:	f240 432a 	movw	r3, #1066	; 0x42a
 800a3de:	4013      	ands	r3, r2
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d0d6      	beq.n	800a392 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3ea:	f003 0308 	and.w	r3, r3, #8
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d005      	beq.n	800a3fe <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	2208      	movs	r2, #8
 800a3f8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a3fa:	2308      	movs	r3, #8
 800a3fc:	e044      	b.n	800a488 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a404:	f003 0302 	and.w	r3, r3, #2
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d005      	beq.n	800a418 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	2202      	movs	r2, #2
 800a412:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a414:	2302      	movs	r3, #2
 800a416:	e037      	b.n	800a488 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a41e:	f003 0320 	and.w	r3, r3, #32
 800a422:	2b00      	cmp	r3, #0
 800a424:	d005      	beq.n	800a432 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	2220      	movs	r2, #32
 800a42c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800a42e:	2320      	movs	r3, #32
 800a430:	e02a      	b.n	800a488 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	f240 523a 	movw	r2, #1338	; 0x53a
 800a43a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	061a      	lsls	r2, r3, #24
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	021b      	lsls	r3, r3, #8
 800a444:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a448:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	0a1b      	lsrs	r3, r3, #8
 800a44e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a452:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	0e1b      	lsrs	r3, r3, #24
 800a458:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a45a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a45c:	601a      	str	r2, [r3, #0]
    scr++;
 800a45e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a460:	3304      	adds	r3, #4
 800a462:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	061a      	lsls	r2, r3, #24
 800a468:	68bb      	ldr	r3, [r7, #8]
 800a46a:	021b      	lsls	r3, r3, #8
 800a46c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a470:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a472:	68bb      	ldr	r3, [r7, #8]
 800a474:	0a1b      	lsrs	r3, r3, #8
 800a476:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a47a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a47c:	68bb      	ldr	r3, [r7, #8]
 800a47e:	0e1b      	lsrs	r3, r3, #24
 800a480:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a484:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800a486:	2300      	movs	r3, #0
}
 800a488:	4618      	mov	r0, r3
 800a48a:	373c      	adds	r7, #60	; 0x3c
 800a48c:	46bd      	mov	sp, r7
 800a48e:	bd90      	pop	{r4, r7, pc}

0800a490 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b086      	sub	sp, #24
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a49c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4a2:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800a4a4:	693b      	ldr	r3, [r7, #16]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d03f      	beq.n	800a52a <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	617b      	str	r3, [r7, #20]
 800a4ae:	e033      	b.n	800a518 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	f002 f8aa 	bl	800c60e <SDIO_ReadFIFO>
 800a4ba:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	b2da      	uxtb	r2, r3
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	3301      	adds	r3, #1
 800a4c8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a4ca:	693b      	ldr	r3, [r7, #16]
 800a4cc:	3b01      	subs	r3, #1
 800a4ce:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800a4d0:	68bb      	ldr	r3, [r7, #8]
 800a4d2:	0a1b      	lsrs	r3, r3, #8
 800a4d4:	b2da      	uxtb	r2, r3
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	3301      	adds	r3, #1
 800a4de:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a4e0:	693b      	ldr	r3, [r7, #16]
 800a4e2:	3b01      	subs	r3, #1
 800a4e4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800a4e6:	68bb      	ldr	r3, [r7, #8]
 800a4e8:	0c1b      	lsrs	r3, r3, #16
 800a4ea:	b2da      	uxtb	r2, r3
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	3301      	adds	r3, #1
 800a4f4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a4f6:	693b      	ldr	r3, [r7, #16]
 800a4f8:	3b01      	subs	r3, #1
 800a4fa:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800a4fc:	68bb      	ldr	r3, [r7, #8]
 800a4fe:	0e1b      	lsrs	r3, r3, #24
 800a500:	b2da      	uxtb	r2, r3
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	3301      	adds	r3, #1
 800a50a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a50c:	693b      	ldr	r3, [r7, #16]
 800a50e:	3b01      	subs	r3, #1
 800a510:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800a512:	697b      	ldr	r3, [r7, #20]
 800a514:	3301      	adds	r3, #1
 800a516:	617b      	str	r3, [r7, #20]
 800a518:	697b      	ldr	r3, [r7, #20]
 800a51a:	2b07      	cmp	r3, #7
 800a51c:	d9c8      	bls.n	800a4b0 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	68fa      	ldr	r2, [r7, #12]
 800a522:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	693a      	ldr	r2, [r7, #16]
 800a528:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800a52a:	bf00      	nop
 800a52c:	3718      	adds	r7, #24
 800a52e:	46bd      	mov	sp, r7
 800a530:	bd80      	pop	{r7, pc}

0800a532 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800a532:	b580      	push	{r7, lr}
 800a534:	b086      	sub	sp, #24
 800a536:	af00      	add	r7, sp, #0
 800a538:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	6a1b      	ldr	r3, [r3, #32]
 800a53e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a544:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800a546:	693b      	ldr	r3, [r7, #16]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d043      	beq.n	800a5d4 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800a54c:	2300      	movs	r3, #0
 800a54e:	617b      	str	r3, [r7, #20]
 800a550:	e037      	b.n	800a5c2 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	781b      	ldrb	r3, [r3, #0]
 800a556:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	3301      	adds	r3, #1
 800a55c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a55e:	693b      	ldr	r3, [r7, #16]
 800a560:	3b01      	subs	r3, #1
 800a562:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	781b      	ldrb	r3, [r3, #0]
 800a568:	021a      	lsls	r2, r3, #8
 800a56a:	68bb      	ldr	r3, [r7, #8]
 800a56c:	4313      	orrs	r3, r2
 800a56e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	3301      	adds	r3, #1
 800a574:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a576:	693b      	ldr	r3, [r7, #16]
 800a578:	3b01      	subs	r3, #1
 800a57a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	781b      	ldrb	r3, [r3, #0]
 800a580:	041a      	lsls	r2, r3, #16
 800a582:	68bb      	ldr	r3, [r7, #8]
 800a584:	4313      	orrs	r3, r2
 800a586:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	3301      	adds	r3, #1
 800a58c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a58e:	693b      	ldr	r3, [r7, #16]
 800a590:	3b01      	subs	r3, #1
 800a592:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	781b      	ldrb	r3, [r3, #0]
 800a598:	061a      	lsls	r2, r3, #24
 800a59a:	68bb      	ldr	r3, [r7, #8]
 800a59c:	4313      	orrs	r3, r2
 800a59e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	3301      	adds	r3, #1
 800a5a4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a5a6:	693b      	ldr	r3, [r7, #16]
 800a5a8:	3b01      	subs	r3, #1
 800a5aa:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	f107 0208 	add.w	r2, r7, #8
 800a5b4:	4611      	mov	r1, r2
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	f002 f836 	bl	800c628 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800a5bc:	697b      	ldr	r3, [r7, #20]
 800a5be:	3301      	adds	r3, #1
 800a5c0:	617b      	str	r3, [r7, #20]
 800a5c2:	697b      	ldr	r3, [r7, #20]
 800a5c4:	2b07      	cmp	r3, #7
 800a5c6:	d9c4      	bls.n	800a552 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	68fa      	ldr	r2, [r7, #12]
 800a5cc:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	693a      	ldr	r2, [r7, #16]
 800a5d2:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800a5d4:	bf00      	nop
 800a5d6:	3718      	adds	r7, #24
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	bd80      	pop	{r7, pc}

0800a5dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b082      	sub	sp, #8
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d101      	bne.n	800a5ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a5ea:	2301      	movs	r3, #1
 800a5ec:	e056      	b.n	800a69c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a5fa:	b2db      	uxtb	r3, r3
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d106      	bne.n	800a60e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2200      	movs	r2, #0
 800a604:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a608:	6878      	ldr	r0, [r7, #4]
 800a60a:	f7fa fb27 	bl	8004c5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	2202      	movs	r2, #2
 800a612:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	681a      	ldr	r2, [r3, #0]
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a624:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	685a      	ldr	r2, [r3, #4]
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	689b      	ldr	r3, [r3, #8]
 800a62e:	431a      	orrs	r2, r3
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	68db      	ldr	r3, [r3, #12]
 800a634:	431a      	orrs	r2, r3
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	691b      	ldr	r3, [r3, #16]
 800a63a:	431a      	orrs	r2, r3
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	695b      	ldr	r3, [r3, #20]
 800a640:	431a      	orrs	r2, r3
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	699b      	ldr	r3, [r3, #24]
 800a646:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a64a:	431a      	orrs	r2, r3
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	69db      	ldr	r3, [r3, #28]
 800a650:	431a      	orrs	r2, r3
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	6a1b      	ldr	r3, [r3, #32]
 800a656:	ea42 0103 	orr.w	r1, r2, r3
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	430a      	orrs	r2, r1
 800a664:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	699b      	ldr	r3, [r3, #24]
 800a66a:	0c1b      	lsrs	r3, r3, #16
 800a66c:	f003 0104 	and.w	r1, r3, #4
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	430a      	orrs	r2, r1
 800a67a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	69da      	ldr	r2, [r3, #28]
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a68a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	2200      	movs	r2, #0
 800a690:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	2201      	movs	r2, #1
 800a696:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800a69a:	2300      	movs	r3, #0
}
 800a69c:	4618      	mov	r0, r3
 800a69e:	3708      	adds	r7, #8
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	bd80      	pop	{r7, pc}

0800a6a4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b088      	sub	sp, #32
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	60f8      	str	r0, [r7, #12]
 800a6ac:	60b9      	str	r1, [r7, #8]
 800a6ae:	603b      	str	r3, [r7, #0]
 800a6b0:	4613      	mov	r3, r2
 800a6b2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a6be:	2b01      	cmp	r3, #1
 800a6c0:	d101      	bne.n	800a6c6 <HAL_SPI_Transmit+0x22>
 800a6c2:	2302      	movs	r3, #2
 800a6c4:	e11e      	b.n	800a904 <HAL_SPI_Transmit+0x260>
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	2201      	movs	r2, #1
 800a6ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a6ce:	f7fb fb7f 	bl	8005dd0 <HAL_GetTick>
 800a6d2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800a6d4:	88fb      	ldrh	r3, [r7, #6]
 800a6d6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a6de:	b2db      	uxtb	r3, r3
 800a6e0:	2b01      	cmp	r3, #1
 800a6e2:	d002      	beq.n	800a6ea <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800a6e4:	2302      	movs	r3, #2
 800a6e6:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a6e8:	e103      	b.n	800a8f2 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800a6ea:	68bb      	ldr	r3, [r7, #8]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d002      	beq.n	800a6f6 <HAL_SPI_Transmit+0x52>
 800a6f0:	88fb      	ldrh	r3, [r7, #6]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d102      	bne.n	800a6fc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800a6f6:	2301      	movs	r3, #1
 800a6f8:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a6fa:	e0fa      	b.n	800a8f2 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	2203      	movs	r2, #3
 800a700:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	2200      	movs	r2, #0
 800a708:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	68ba      	ldr	r2, [r7, #8]
 800a70e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	88fa      	ldrh	r2, [r7, #6]
 800a714:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	88fa      	ldrh	r2, [r7, #6]
 800a71a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	2200      	movs	r2, #0
 800a720:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	2200      	movs	r2, #0
 800a726:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	2200      	movs	r2, #0
 800a72c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	2200      	movs	r2, #0
 800a732:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	2200      	movs	r2, #0
 800a738:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	689b      	ldr	r3, [r3, #8]
 800a73e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a742:	d107      	bne.n	800a754 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	681a      	ldr	r2, [r3, #0]
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a752:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a75e:	2b40      	cmp	r3, #64	; 0x40
 800a760:	d007      	beq.n	800a772 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	681a      	ldr	r2, [r3, #0]
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a770:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	68db      	ldr	r3, [r3, #12]
 800a776:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a77a:	d14b      	bne.n	800a814 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	685b      	ldr	r3, [r3, #4]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d002      	beq.n	800a78a <HAL_SPI_Transmit+0xe6>
 800a784:	8afb      	ldrh	r3, [r7, #22]
 800a786:	2b01      	cmp	r3, #1
 800a788:	d13e      	bne.n	800a808 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a78e:	881a      	ldrh	r2, [r3, #0]
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a79a:	1c9a      	adds	r2, r3, #2
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a7a4:	b29b      	uxth	r3, r3
 800a7a6:	3b01      	subs	r3, #1
 800a7a8:	b29a      	uxth	r2, r3
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a7ae:	e02b      	b.n	800a808 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	689b      	ldr	r3, [r3, #8]
 800a7b6:	f003 0302 	and.w	r3, r3, #2
 800a7ba:	2b02      	cmp	r3, #2
 800a7bc:	d112      	bne.n	800a7e4 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7c2:	881a      	ldrh	r2, [r3, #0]
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7ce:	1c9a      	adds	r2, r3, #2
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a7d8:	b29b      	uxth	r3, r3
 800a7da:	3b01      	subs	r3, #1
 800a7dc:	b29a      	uxth	r2, r3
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	86da      	strh	r2, [r3, #54]	; 0x36
 800a7e2:	e011      	b.n	800a808 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a7e4:	f7fb faf4 	bl	8005dd0 <HAL_GetTick>
 800a7e8:	4602      	mov	r2, r0
 800a7ea:	69bb      	ldr	r3, [r7, #24]
 800a7ec:	1ad3      	subs	r3, r2, r3
 800a7ee:	683a      	ldr	r2, [r7, #0]
 800a7f0:	429a      	cmp	r2, r3
 800a7f2:	d803      	bhi.n	800a7fc <HAL_SPI_Transmit+0x158>
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7fa:	d102      	bne.n	800a802 <HAL_SPI_Transmit+0x15e>
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d102      	bne.n	800a808 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800a802:	2303      	movs	r3, #3
 800a804:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a806:	e074      	b.n	800a8f2 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a80c:	b29b      	uxth	r3, r3
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d1ce      	bne.n	800a7b0 <HAL_SPI_Transmit+0x10c>
 800a812:	e04c      	b.n	800a8ae <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	685b      	ldr	r3, [r3, #4]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d002      	beq.n	800a822 <HAL_SPI_Transmit+0x17e>
 800a81c:	8afb      	ldrh	r3, [r7, #22]
 800a81e:	2b01      	cmp	r3, #1
 800a820:	d140      	bne.n	800a8a4 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	330c      	adds	r3, #12
 800a82c:	7812      	ldrb	r2, [r2, #0]
 800a82e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a834:	1c5a      	adds	r2, r3, #1
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a83e:	b29b      	uxth	r3, r3
 800a840:	3b01      	subs	r3, #1
 800a842:	b29a      	uxth	r2, r3
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800a848:	e02c      	b.n	800a8a4 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	689b      	ldr	r3, [r3, #8]
 800a850:	f003 0302 	and.w	r3, r3, #2
 800a854:	2b02      	cmp	r3, #2
 800a856:	d113      	bne.n	800a880 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	330c      	adds	r3, #12
 800a862:	7812      	ldrb	r2, [r2, #0]
 800a864:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a86a:	1c5a      	adds	r2, r3, #1
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a874:	b29b      	uxth	r3, r3
 800a876:	3b01      	subs	r3, #1
 800a878:	b29a      	uxth	r2, r3
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	86da      	strh	r2, [r3, #54]	; 0x36
 800a87e:	e011      	b.n	800a8a4 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a880:	f7fb faa6 	bl	8005dd0 <HAL_GetTick>
 800a884:	4602      	mov	r2, r0
 800a886:	69bb      	ldr	r3, [r7, #24]
 800a888:	1ad3      	subs	r3, r2, r3
 800a88a:	683a      	ldr	r2, [r7, #0]
 800a88c:	429a      	cmp	r2, r3
 800a88e:	d803      	bhi.n	800a898 <HAL_SPI_Transmit+0x1f4>
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a896:	d102      	bne.n	800a89e <HAL_SPI_Transmit+0x1fa>
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d102      	bne.n	800a8a4 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800a89e:	2303      	movs	r3, #3
 800a8a0:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a8a2:	e026      	b.n	800a8f2 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a8a8:	b29b      	uxth	r3, r3
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d1cd      	bne.n	800a84a <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a8ae:	69ba      	ldr	r2, [r7, #24]
 800a8b0:	6839      	ldr	r1, [r7, #0]
 800a8b2:	68f8      	ldr	r0, [r7, #12]
 800a8b4:	f000 fba4 	bl	800b000 <SPI_EndRxTxTransaction>
 800a8b8:	4603      	mov	r3, r0
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d002      	beq.n	800a8c4 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	2220      	movs	r2, #32
 800a8c2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	689b      	ldr	r3, [r3, #8]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d10a      	bne.n	800a8e2 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	613b      	str	r3, [r7, #16]
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	68db      	ldr	r3, [r3, #12]
 800a8d6:	613b      	str	r3, [r7, #16]
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	689b      	ldr	r3, [r3, #8]
 800a8de:	613b      	str	r3, [r7, #16]
 800a8e0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d002      	beq.n	800a8f0 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800a8ea:	2301      	movs	r3, #1
 800a8ec:	77fb      	strb	r3, [r7, #31]
 800a8ee:	e000      	b.n	800a8f2 <HAL_SPI_Transmit+0x24e>
  }

error:
 800a8f0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	2201      	movs	r2, #1
 800a8f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a902:	7ffb      	ldrb	r3, [r7, #31]
}
 800a904:	4618      	mov	r0, r3
 800a906:	3720      	adds	r7, #32
 800a908:	46bd      	mov	sp, r7
 800a90a:	bd80      	pop	{r7, pc}

0800a90c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b088      	sub	sp, #32
 800a910:	af02      	add	r7, sp, #8
 800a912:	60f8      	str	r0, [r7, #12]
 800a914:	60b9      	str	r1, [r7, #8]
 800a916:	603b      	str	r3, [r7, #0]
 800a918:	4613      	mov	r3, r2
 800a91a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a91c:	2300      	movs	r3, #0
 800a91e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	685b      	ldr	r3, [r3, #4]
 800a924:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a928:	d112      	bne.n	800a950 <HAL_SPI_Receive+0x44>
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	689b      	ldr	r3, [r3, #8]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d10e      	bne.n	800a950 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	2204      	movs	r2, #4
 800a936:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800a93a:	88fa      	ldrh	r2, [r7, #6]
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	9300      	str	r3, [sp, #0]
 800a940:	4613      	mov	r3, r2
 800a942:	68ba      	ldr	r2, [r7, #8]
 800a944:	68b9      	ldr	r1, [r7, #8]
 800a946:	68f8      	ldr	r0, [r7, #12]
 800a948:	f000 f8e9 	bl	800ab1e <HAL_SPI_TransmitReceive>
 800a94c:	4603      	mov	r3, r0
 800a94e:	e0e2      	b.n	800ab16 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a956:	2b01      	cmp	r3, #1
 800a958:	d101      	bne.n	800a95e <HAL_SPI_Receive+0x52>
 800a95a:	2302      	movs	r3, #2
 800a95c:	e0db      	b.n	800ab16 <HAL_SPI_Receive+0x20a>
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	2201      	movs	r2, #1
 800a962:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a966:	f7fb fa33 	bl	8005dd0 <HAL_GetTick>
 800a96a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a972:	b2db      	uxtb	r3, r3
 800a974:	2b01      	cmp	r3, #1
 800a976:	d002      	beq.n	800a97e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800a978:	2302      	movs	r3, #2
 800a97a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a97c:	e0c2      	b.n	800ab04 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800a97e:	68bb      	ldr	r3, [r7, #8]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d002      	beq.n	800a98a <HAL_SPI_Receive+0x7e>
 800a984:	88fb      	ldrh	r3, [r7, #6]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d102      	bne.n	800a990 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800a98a:	2301      	movs	r3, #1
 800a98c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a98e:	e0b9      	b.n	800ab04 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	2204      	movs	r2, #4
 800a994:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	2200      	movs	r2, #0
 800a99c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	68ba      	ldr	r2, [r7, #8]
 800a9a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	88fa      	ldrh	r2, [r7, #6]
 800a9a8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	88fa      	ldrh	r2, [r7, #6]
 800a9ae:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	2200      	movs	r2, #0
 800a9c0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	689b      	ldr	r3, [r3, #8]
 800a9d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a9d6:	d107      	bne.n	800a9e8 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	681a      	ldr	r2, [r3, #0]
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a9e6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9f2:	2b40      	cmp	r3, #64	; 0x40
 800a9f4:	d007      	beq.n	800aa06 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	681a      	ldr	r2, [r3, #0]
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aa04:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	68db      	ldr	r3, [r3, #12]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d162      	bne.n	800aad4 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800aa0e:	e02e      	b.n	800aa6e <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	689b      	ldr	r3, [r3, #8]
 800aa16:	f003 0301 	and.w	r3, r3, #1
 800aa1a:	2b01      	cmp	r3, #1
 800aa1c:	d115      	bne.n	800aa4a <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	f103 020c 	add.w	r2, r3, #12
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa2a:	7812      	ldrb	r2, [r2, #0]
 800aa2c:	b2d2      	uxtb	r2, r2
 800aa2e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa34:	1c5a      	adds	r2, r3, #1
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aa3e:	b29b      	uxth	r3, r3
 800aa40:	3b01      	subs	r3, #1
 800aa42:	b29a      	uxth	r2, r3
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	87da      	strh	r2, [r3, #62]	; 0x3e
 800aa48:	e011      	b.n	800aa6e <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800aa4a:	f7fb f9c1 	bl	8005dd0 <HAL_GetTick>
 800aa4e:	4602      	mov	r2, r0
 800aa50:	693b      	ldr	r3, [r7, #16]
 800aa52:	1ad3      	subs	r3, r2, r3
 800aa54:	683a      	ldr	r2, [r7, #0]
 800aa56:	429a      	cmp	r2, r3
 800aa58:	d803      	bhi.n	800aa62 <HAL_SPI_Receive+0x156>
 800aa5a:	683b      	ldr	r3, [r7, #0]
 800aa5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa60:	d102      	bne.n	800aa68 <HAL_SPI_Receive+0x15c>
 800aa62:	683b      	ldr	r3, [r7, #0]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d102      	bne.n	800aa6e <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800aa68:	2303      	movs	r3, #3
 800aa6a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800aa6c:	e04a      	b.n	800ab04 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aa72:	b29b      	uxth	r3, r3
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d1cb      	bne.n	800aa10 <HAL_SPI_Receive+0x104>
 800aa78:	e031      	b.n	800aade <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	689b      	ldr	r3, [r3, #8]
 800aa80:	f003 0301 	and.w	r3, r3, #1
 800aa84:	2b01      	cmp	r3, #1
 800aa86:	d113      	bne.n	800aab0 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	68da      	ldr	r2, [r3, #12]
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa92:	b292      	uxth	r2, r2
 800aa94:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa9a:	1c9a      	adds	r2, r3, #2
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aaa4:	b29b      	uxth	r3, r3
 800aaa6:	3b01      	subs	r3, #1
 800aaa8:	b29a      	uxth	r2, r3
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	87da      	strh	r2, [r3, #62]	; 0x3e
 800aaae:	e011      	b.n	800aad4 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800aab0:	f7fb f98e 	bl	8005dd0 <HAL_GetTick>
 800aab4:	4602      	mov	r2, r0
 800aab6:	693b      	ldr	r3, [r7, #16]
 800aab8:	1ad3      	subs	r3, r2, r3
 800aaba:	683a      	ldr	r2, [r7, #0]
 800aabc:	429a      	cmp	r2, r3
 800aabe:	d803      	bhi.n	800aac8 <HAL_SPI_Receive+0x1bc>
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aac6:	d102      	bne.n	800aace <HAL_SPI_Receive+0x1c2>
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d102      	bne.n	800aad4 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800aace:	2303      	movs	r3, #3
 800aad0:	75fb      	strb	r3, [r7, #23]
          goto error;
 800aad2:	e017      	b.n	800ab04 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aad8:	b29b      	uxth	r3, r3
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d1cd      	bne.n	800aa7a <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800aade:	693a      	ldr	r2, [r7, #16]
 800aae0:	6839      	ldr	r1, [r7, #0]
 800aae2:	68f8      	ldr	r0, [r7, #12]
 800aae4:	f000 fa27 	bl	800af36 <SPI_EndRxTransaction>
 800aae8:	4603      	mov	r3, r0
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d002      	beq.n	800aaf4 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	2220      	movs	r2, #32
 800aaf2:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d002      	beq.n	800ab02 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800aafc:	2301      	movs	r3, #1
 800aafe:	75fb      	strb	r3, [r7, #23]
 800ab00:	e000      	b.n	800ab04 <HAL_SPI_Receive+0x1f8>
  }

error :
 800ab02:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	2201      	movs	r2, #1
 800ab08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	2200      	movs	r2, #0
 800ab10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ab14:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab16:	4618      	mov	r0, r3
 800ab18:	3718      	adds	r7, #24
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	bd80      	pop	{r7, pc}

0800ab1e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800ab1e:	b580      	push	{r7, lr}
 800ab20:	b08c      	sub	sp, #48	; 0x30
 800ab22:	af00      	add	r7, sp, #0
 800ab24:	60f8      	str	r0, [r7, #12]
 800ab26:	60b9      	str	r1, [r7, #8]
 800ab28:	607a      	str	r2, [r7, #4]
 800ab2a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800ab2c:	2301      	movs	r3, #1
 800ab2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800ab30:	2300      	movs	r3, #0
 800ab32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ab3c:	2b01      	cmp	r3, #1
 800ab3e:	d101      	bne.n	800ab44 <HAL_SPI_TransmitReceive+0x26>
 800ab40:	2302      	movs	r3, #2
 800ab42:	e18a      	b.n	800ae5a <HAL_SPI_TransmitReceive+0x33c>
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	2201      	movs	r2, #1
 800ab48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ab4c:	f7fb f940 	bl	8005dd0 <HAL_GetTick>
 800ab50:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ab58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	685b      	ldr	r3, [r3, #4]
 800ab60:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800ab62:	887b      	ldrh	r3, [r7, #2]
 800ab64:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800ab66:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ab6a:	2b01      	cmp	r3, #1
 800ab6c:	d00f      	beq.n	800ab8e <HAL_SPI_TransmitReceive+0x70>
 800ab6e:	69fb      	ldr	r3, [r7, #28]
 800ab70:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ab74:	d107      	bne.n	800ab86 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	689b      	ldr	r3, [r3, #8]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d103      	bne.n	800ab86 <HAL_SPI_TransmitReceive+0x68>
 800ab7e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ab82:	2b04      	cmp	r3, #4
 800ab84:	d003      	beq.n	800ab8e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800ab86:	2302      	movs	r3, #2
 800ab88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800ab8c:	e15b      	b.n	800ae46 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800ab8e:	68bb      	ldr	r3, [r7, #8]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d005      	beq.n	800aba0 <HAL_SPI_TransmitReceive+0x82>
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d002      	beq.n	800aba0 <HAL_SPI_TransmitReceive+0x82>
 800ab9a:	887b      	ldrh	r3, [r7, #2]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d103      	bne.n	800aba8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800aba0:	2301      	movs	r3, #1
 800aba2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800aba6:	e14e      	b.n	800ae46 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800abae:	b2db      	uxtb	r3, r3
 800abb0:	2b04      	cmp	r3, #4
 800abb2:	d003      	beq.n	800abbc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	2205      	movs	r2, #5
 800abb8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	2200      	movs	r2, #0
 800abc0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	687a      	ldr	r2, [r7, #4]
 800abc6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	887a      	ldrh	r2, [r7, #2]
 800abcc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	887a      	ldrh	r2, [r7, #2]
 800abd2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	68ba      	ldr	r2, [r7, #8]
 800abd8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	887a      	ldrh	r2, [r7, #2]
 800abde:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	887a      	ldrh	r2, [r7, #2]
 800abe4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	2200      	movs	r2, #0
 800abea:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	2200      	movs	r2, #0
 800abf0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abfc:	2b40      	cmp	r3, #64	; 0x40
 800abfe:	d007      	beq.n	800ac10 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	681a      	ldr	r2, [r3, #0]
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ac0e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	68db      	ldr	r3, [r3, #12]
 800ac14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ac18:	d178      	bne.n	800ad0c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	685b      	ldr	r3, [r3, #4]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d002      	beq.n	800ac28 <HAL_SPI_TransmitReceive+0x10a>
 800ac22:	8b7b      	ldrh	r3, [r7, #26]
 800ac24:	2b01      	cmp	r3, #1
 800ac26:	d166      	bne.n	800acf6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac2c:	881a      	ldrh	r2, [r3, #0]
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac38:	1c9a      	adds	r2, r3, #2
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ac42:	b29b      	uxth	r3, r3
 800ac44:	3b01      	subs	r3, #1
 800ac46:	b29a      	uxth	r2, r3
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ac4c:	e053      	b.n	800acf6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	689b      	ldr	r3, [r3, #8]
 800ac54:	f003 0302 	and.w	r3, r3, #2
 800ac58:	2b02      	cmp	r3, #2
 800ac5a:	d11b      	bne.n	800ac94 <HAL_SPI_TransmitReceive+0x176>
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ac60:	b29b      	uxth	r3, r3
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d016      	beq.n	800ac94 <HAL_SPI_TransmitReceive+0x176>
 800ac66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac68:	2b01      	cmp	r3, #1
 800ac6a:	d113      	bne.n	800ac94 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac70:	881a      	ldrh	r2, [r3, #0]
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac7c:	1c9a      	adds	r2, r3, #2
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ac86:	b29b      	uxth	r3, r3
 800ac88:	3b01      	subs	r3, #1
 800ac8a:	b29a      	uxth	r2, r3
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ac90:	2300      	movs	r3, #0
 800ac92:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	689b      	ldr	r3, [r3, #8]
 800ac9a:	f003 0301 	and.w	r3, r3, #1
 800ac9e:	2b01      	cmp	r3, #1
 800aca0:	d119      	bne.n	800acd6 <HAL_SPI_TransmitReceive+0x1b8>
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aca6:	b29b      	uxth	r3, r3
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d014      	beq.n	800acd6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	68da      	ldr	r2, [r3, #12]
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acb6:	b292      	uxth	r2, r2
 800acb8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acbe:	1c9a      	adds	r2, r3, #2
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800acc8:	b29b      	uxth	r3, r3
 800acca:	3b01      	subs	r3, #1
 800accc:	b29a      	uxth	r2, r3
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800acd2:	2301      	movs	r3, #1
 800acd4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800acd6:	f7fb f87b 	bl	8005dd0 <HAL_GetTick>
 800acda:	4602      	mov	r2, r0
 800acdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acde:	1ad3      	subs	r3, r2, r3
 800ace0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ace2:	429a      	cmp	r2, r3
 800ace4:	d807      	bhi.n	800acf6 <HAL_SPI_TransmitReceive+0x1d8>
 800ace6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ace8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acec:	d003      	beq.n	800acf6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800acee:	2303      	movs	r3, #3
 800acf0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800acf4:	e0a7      	b.n	800ae46 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800acfa:	b29b      	uxth	r3, r3
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d1a6      	bne.n	800ac4e <HAL_SPI_TransmitReceive+0x130>
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ad04:	b29b      	uxth	r3, r3
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d1a1      	bne.n	800ac4e <HAL_SPI_TransmitReceive+0x130>
 800ad0a:	e07c      	b.n	800ae06 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	685b      	ldr	r3, [r3, #4]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d002      	beq.n	800ad1a <HAL_SPI_TransmitReceive+0x1fc>
 800ad14:	8b7b      	ldrh	r3, [r7, #26]
 800ad16:	2b01      	cmp	r3, #1
 800ad18:	d16b      	bne.n	800adf2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	330c      	adds	r3, #12
 800ad24:	7812      	ldrb	r2, [r2, #0]
 800ad26:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad2c:	1c5a      	adds	r2, r3, #1
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ad36:	b29b      	uxth	r3, r3
 800ad38:	3b01      	subs	r3, #1
 800ad3a:	b29a      	uxth	r2, r3
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ad40:	e057      	b.n	800adf2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	689b      	ldr	r3, [r3, #8]
 800ad48:	f003 0302 	and.w	r3, r3, #2
 800ad4c:	2b02      	cmp	r3, #2
 800ad4e:	d11c      	bne.n	800ad8a <HAL_SPI_TransmitReceive+0x26c>
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ad54:	b29b      	uxth	r3, r3
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d017      	beq.n	800ad8a <HAL_SPI_TransmitReceive+0x26c>
 800ad5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad5c:	2b01      	cmp	r3, #1
 800ad5e:	d114      	bne.n	800ad8a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	330c      	adds	r3, #12
 800ad6a:	7812      	ldrb	r2, [r2, #0]
 800ad6c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad72:	1c5a      	adds	r2, r3, #1
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ad7c:	b29b      	uxth	r3, r3
 800ad7e:	3b01      	subs	r3, #1
 800ad80:	b29a      	uxth	r2, r3
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ad86:	2300      	movs	r3, #0
 800ad88:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	689b      	ldr	r3, [r3, #8]
 800ad90:	f003 0301 	and.w	r3, r3, #1
 800ad94:	2b01      	cmp	r3, #1
 800ad96:	d119      	bne.n	800adcc <HAL_SPI_TransmitReceive+0x2ae>
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ad9c:	b29b      	uxth	r3, r3
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d014      	beq.n	800adcc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	68da      	ldr	r2, [r3, #12]
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adac:	b2d2      	uxtb	r2, r2
 800adae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adb4:	1c5a      	adds	r2, r3, #1
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800adbe:	b29b      	uxth	r3, r3
 800adc0:	3b01      	subs	r3, #1
 800adc2:	b29a      	uxth	r2, r3
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800adc8:	2301      	movs	r3, #1
 800adca:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800adcc:	f7fb f800 	bl	8005dd0 <HAL_GetTick>
 800add0:	4602      	mov	r2, r0
 800add2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800add4:	1ad3      	subs	r3, r2, r3
 800add6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800add8:	429a      	cmp	r2, r3
 800adda:	d803      	bhi.n	800ade4 <HAL_SPI_TransmitReceive+0x2c6>
 800addc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adde:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ade2:	d102      	bne.n	800adea <HAL_SPI_TransmitReceive+0x2cc>
 800ade4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d103      	bne.n	800adf2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800adea:	2303      	movs	r3, #3
 800adec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800adf0:	e029      	b.n	800ae46 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800adf6:	b29b      	uxth	r3, r3
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d1a2      	bne.n	800ad42 <HAL_SPI_TransmitReceive+0x224>
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ae00:	b29b      	uxth	r3, r3
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d19d      	bne.n	800ad42 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ae06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae08:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ae0a:	68f8      	ldr	r0, [r7, #12]
 800ae0c:	f000 f8f8 	bl	800b000 <SPI_EndRxTxTransaction>
 800ae10:	4603      	mov	r3, r0
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d006      	beq.n	800ae24 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800ae16:	2301      	movs	r3, #1
 800ae18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	2220      	movs	r2, #32
 800ae20:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800ae22:	e010      	b.n	800ae46 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	689b      	ldr	r3, [r3, #8]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d10b      	bne.n	800ae44 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	617b      	str	r3, [r7, #20]
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	68db      	ldr	r3, [r3, #12]
 800ae36:	617b      	str	r3, [r7, #20]
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	689b      	ldr	r3, [r3, #8]
 800ae3e:	617b      	str	r3, [r7, #20]
 800ae40:	697b      	ldr	r3, [r7, #20]
 800ae42:	e000      	b.n	800ae46 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800ae44:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	2201      	movs	r2, #1
 800ae4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	2200      	movs	r2, #0
 800ae52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ae56:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	3730      	adds	r7, #48	; 0x30
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	bd80      	pop	{r7, pc}

0800ae62 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ae62:	b580      	push	{r7, lr}
 800ae64:	b084      	sub	sp, #16
 800ae66:	af00      	add	r7, sp, #0
 800ae68:	60f8      	str	r0, [r7, #12]
 800ae6a:	60b9      	str	r1, [r7, #8]
 800ae6c:	603b      	str	r3, [r7, #0]
 800ae6e:	4613      	mov	r3, r2
 800ae70:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ae72:	e04c      	b.n	800af0e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ae74:	683b      	ldr	r3, [r7, #0]
 800ae76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae7a:	d048      	beq.n	800af0e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800ae7c:	f7fa ffa8 	bl	8005dd0 <HAL_GetTick>
 800ae80:	4602      	mov	r2, r0
 800ae82:	69bb      	ldr	r3, [r7, #24]
 800ae84:	1ad3      	subs	r3, r2, r3
 800ae86:	683a      	ldr	r2, [r7, #0]
 800ae88:	429a      	cmp	r2, r3
 800ae8a:	d902      	bls.n	800ae92 <SPI_WaitFlagStateUntilTimeout+0x30>
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d13d      	bne.n	800af0e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	685a      	ldr	r2, [r3, #4]
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800aea0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	685b      	ldr	r3, [r3, #4]
 800aea6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800aeaa:	d111      	bne.n	800aed0 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	689b      	ldr	r3, [r3, #8]
 800aeb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aeb4:	d004      	beq.n	800aec0 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	689b      	ldr	r3, [r3, #8]
 800aeba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aebe:	d107      	bne.n	800aed0 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	681a      	ldr	r2, [r3, #0]
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aece:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aed4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aed8:	d10f      	bne.n	800aefa <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	681a      	ldr	r2, [r3, #0]
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800aee8:	601a      	str	r2, [r3, #0]
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	681a      	ldr	r2, [r3, #0]
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800aef8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	2201      	movs	r2, #1
 800aefe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	2200      	movs	r2, #0
 800af06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800af0a:	2303      	movs	r3, #3
 800af0c:	e00f      	b.n	800af2e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	689a      	ldr	r2, [r3, #8]
 800af14:	68bb      	ldr	r3, [r7, #8]
 800af16:	4013      	ands	r3, r2
 800af18:	68ba      	ldr	r2, [r7, #8]
 800af1a:	429a      	cmp	r2, r3
 800af1c:	bf0c      	ite	eq
 800af1e:	2301      	moveq	r3, #1
 800af20:	2300      	movne	r3, #0
 800af22:	b2db      	uxtb	r3, r3
 800af24:	461a      	mov	r2, r3
 800af26:	79fb      	ldrb	r3, [r7, #7]
 800af28:	429a      	cmp	r2, r3
 800af2a:	d1a3      	bne.n	800ae74 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800af2c:	2300      	movs	r3, #0
}
 800af2e:	4618      	mov	r0, r3
 800af30:	3710      	adds	r7, #16
 800af32:	46bd      	mov	sp, r7
 800af34:	bd80      	pop	{r7, pc}

0800af36 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800af36:	b580      	push	{r7, lr}
 800af38:	b086      	sub	sp, #24
 800af3a:	af02      	add	r7, sp, #8
 800af3c:	60f8      	str	r0, [r7, #12]
 800af3e:	60b9      	str	r1, [r7, #8]
 800af40:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	685b      	ldr	r3, [r3, #4]
 800af46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800af4a:	d111      	bne.n	800af70 <SPI_EndRxTransaction+0x3a>
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	689b      	ldr	r3, [r3, #8]
 800af50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800af54:	d004      	beq.n	800af60 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	689b      	ldr	r3, [r3, #8]
 800af5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800af5e:	d107      	bne.n	800af70 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	681a      	ldr	r2, [r3, #0]
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800af6e:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	685b      	ldr	r3, [r3, #4]
 800af74:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800af78:	d12a      	bne.n	800afd0 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	689b      	ldr	r3, [r3, #8]
 800af7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800af82:	d012      	beq.n	800afaa <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	9300      	str	r3, [sp, #0]
 800af88:	68bb      	ldr	r3, [r7, #8]
 800af8a:	2200      	movs	r2, #0
 800af8c:	2180      	movs	r1, #128	; 0x80
 800af8e:	68f8      	ldr	r0, [r7, #12]
 800af90:	f7ff ff67 	bl	800ae62 <SPI_WaitFlagStateUntilTimeout>
 800af94:	4603      	mov	r3, r0
 800af96:	2b00      	cmp	r3, #0
 800af98:	d02d      	beq.n	800aff6 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af9e:	f043 0220 	orr.w	r2, r3, #32
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800afa6:	2303      	movs	r3, #3
 800afa8:	e026      	b.n	800aff8 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	9300      	str	r3, [sp, #0]
 800afae:	68bb      	ldr	r3, [r7, #8]
 800afb0:	2200      	movs	r2, #0
 800afb2:	2101      	movs	r1, #1
 800afb4:	68f8      	ldr	r0, [r7, #12]
 800afb6:	f7ff ff54 	bl	800ae62 <SPI_WaitFlagStateUntilTimeout>
 800afba:	4603      	mov	r3, r0
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d01a      	beq.n	800aff6 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800afc4:	f043 0220 	orr.w	r2, r3, #32
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800afcc:	2303      	movs	r3, #3
 800afce:	e013      	b.n	800aff8 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	9300      	str	r3, [sp, #0]
 800afd4:	68bb      	ldr	r3, [r7, #8]
 800afd6:	2200      	movs	r2, #0
 800afd8:	2101      	movs	r1, #1
 800afda:	68f8      	ldr	r0, [r7, #12]
 800afdc:	f7ff ff41 	bl	800ae62 <SPI_WaitFlagStateUntilTimeout>
 800afe0:	4603      	mov	r3, r0
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d007      	beq.n	800aff6 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800afea:	f043 0220 	orr.w	r2, r3, #32
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800aff2:	2303      	movs	r3, #3
 800aff4:	e000      	b.n	800aff8 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800aff6:	2300      	movs	r3, #0
}
 800aff8:	4618      	mov	r0, r3
 800affa:	3710      	adds	r7, #16
 800affc:	46bd      	mov	sp, r7
 800affe:	bd80      	pop	{r7, pc}

0800b000 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b088      	sub	sp, #32
 800b004:	af02      	add	r7, sp, #8
 800b006:	60f8      	str	r0, [r7, #12]
 800b008:	60b9      	str	r1, [r7, #8]
 800b00a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800b00c:	4b1b      	ldr	r3, [pc, #108]	; (800b07c <SPI_EndRxTxTransaction+0x7c>)
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	4a1b      	ldr	r2, [pc, #108]	; (800b080 <SPI_EndRxTxTransaction+0x80>)
 800b012:	fba2 2303 	umull	r2, r3, r2, r3
 800b016:	0d5b      	lsrs	r3, r3, #21
 800b018:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b01c:	fb02 f303 	mul.w	r3, r2, r3
 800b020:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	685b      	ldr	r3, [r3, #4]
 800b026:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b02a:	d112      	bne.n	800b052 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	9300      	str	r3, [sp, #0]
 800b030:	68bb      	ldr	r3, [r7, #8]
 800b032:	2200      	movs	r2, #0
 800b034:	2180      	movs	r1, #128	; 0x80
 800b036:	68f8      	ldr	r0, [r7, #12]
 800b038:	f7ff ff13 	bl	800ae62 <SPI_WaitFlagStateUntilTimeout>
 800b03c:	4603      	mov	r3, r0
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d016      	beq.n	800b070 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b046:	f043 0220 	orr.w	r2, r3, #32
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800b04e:	2303      	movs	r3, #3
 800b050:	e00f      	b.n	800b072 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800b052:	697b      	ldr	r3, [r7, #20]
 800b054:	2b00      	cmp	r3, #0
 800b056:	d00a      	beq.n	800b06e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800b058:	697b      	ldr	r3, [r7, #20]
 800b05a:	3b01      	subs	r3, #1
 800b05c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	689b      	ldr	r3, [r3, #8]
 800b064:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b068:	2b80      	cmp	r3, #128	; 0x80
 800b06a:	d0f2      	beq.n	800b052 <SPI_EndRxTxTransaction+0x52>
 800b06c:	e000      	b.n	800b070 <SPI_EndRxTxTransaction+0x70>
        break;
 800b06e:	bf00      	nop
  }

  return HAL_OK;
 800b070:	2300      	movs	r3, #0
}
 800b072:	4618      	mov	r0, r3
 800b074:	3718      	adds	r7, #24
 800b076:	46bd      	mov	sp, r7
 800b078:	bd80      	pop	{r7, pc}
 800b07a:	bf00      	nop
 800b07c:	20000000 	.word	0x20000000
 800b080:	165e9f81 	.word	0x165e9f81

0800b084 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b084:	b580      	push	{r7, lr}
 800b086:	b082      	sub	sp, #8
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d101      	bne.n	800b096 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b092:	2301      	movs	r3, #1
 800b094:	e01d      	b.n	800b0d2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b09c:	b2db      	uxtb	r3, r3
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d106      	bne.n	800b0b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b0aa:	6878      	ldr	r0, [r7, #4]
 800b0ac:	f7f9 fe92 	bl	8004dd4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	2202      	movs	r2, #2
 800b0b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681a      	ldr	r2, [r3, #0]
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	3304      	adds	r3, #4
 800b0c0:	4619      	mov	r1, r3
 800b0c2:	4610      	mov	r0, r2
 800b0c4:	f000 fb56 	bl	800b774 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	2201      	movs	r2, #1
 800b0cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b0d0:	2300      	movs	r3, #0
}
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	3708      	adds	r7, #8
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	bd80      	pop	{r7, pc}

0800b0da <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b0da:	b480      	push	{r7}
 800b0dc:	b085      	sub	sp, #20
 800b0de:	af00      	add	r7, sp, #0
 800b0e0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	68da      	ldr	r2, [r3, #12]
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	f042 0201 	orr.w	r2, r2, #1
 800b0f0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	689b      	ldr	r3, [r3, #8]
 800b0f8:	f003 0307 	and.w	r3, r3, #7
 800b0fc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	2b06      	cmp	r3, #6
 800b102:	d007      	beq.n	800b114 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	681a      	ldr	r2, [r3, #0]
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	f042 0201 	orr.w	r2, r2, #1
 800b112:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b114:	2300      	movs	r3, #0
}
 800b116:	4618      	mov	r0, r3
 800b118:	3714      	adds	r7, #20
 800b11a:	46bd      	mov	sp, r7
 800b11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b120:	4770      	bx	lr

0800b122 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b122:	b580      	push	{r7, lr}
 800b124:	b082      	sub	sp, #8
 800b126:	af00      	add	r7, sp, #0
 800b128:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d101      	bne.n	800b134 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b130:	2301      	movs	r3, #1
 800b132:	e01d      	b.n	800b170 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b13a:	b2db      	uxtb	r3, r3
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d106      	bne.n	800b14e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2200      	movs	r2, #0
 800b144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b148:	6878      	ldr	r0, [r7, #4]
 800b14a:	f7f9 fdcf 	bl	8004cec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	2202      	movs	r2, #2
 800b152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	681a      	ldr	r2, [r3, #0]
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	3304      	adds	r3, #4
 800b15e:	4619      	mov	r1, r3
 800b160:	4610      	mov	r0, r2
 800b162:	f000 fb07 	bl	800b774 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	2201      	movs	r2, #1
 800b16a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b16e:	2300      	movs	r3, #0
}
 800b170:	4618      	mov	r0, r3
 800b172:	3708      	adds	r7, #8
 800b174:	46bd      	mov	sp, r7
 800b176:	bd80      	pop	{r7, pc}

0800b178 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b178:	b580      	push	{r7, lr}
 800b17a:	b084      	sub	sp, #16
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
 800b180:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	2201      	movs	r2, #1
 800b188:	6839      	ldr	r1, [r7, #0]
 800b18a:	4618      	mov	r0, r3
 800b18c:	f000 fd42 	bl	800bc14 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	4a15      	ldr	r2, [pc, #84]	; (800b1ec <HAL_TIM_PWM_Start+0x74>)
 800b196:	4293      	cmp	r3, r2
 800b198:	d004      	beq.n	800b1a4 <HAL_TIM_PWM_Start+0x2c>
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	4a14      	ldr	r2, [pc, #80]	; (800b1f0 <HAL_TIM_PWM_Start+0x78>)
 800b1a0:	4293      	cmp	r3, r2
 800b1a2:	d101      	bne.n	800b1a8 <HAL_TIM_PWM_Start+0x30>
 800b1a4:	2301      	movs	r3, #1
 800b1a6:	e000      	b.n	800b1aa <HAL_TIM_PWM_Start+0x32>
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d007      	beq.n	800b1be <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b1bc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	689b      	ldr	r3, [r3, #8]
 800b1c4:	f003 0307 	and.w	r3, r3, #7
 800b1c8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	2b06      	cmp	r3, #6
 800b1ce:	d007      	beq.n	800b1e0 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	681a      	ldr	r2, [r3, #0]
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	f042 0201 	orr.w	r2, r2, #1
 800b1de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b1e0:	2300      	movs	r3, #0
}
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	3710      	adds	r7, #16
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	bd80      	pop	{r7, pc}
 800b1ea:	bf00      	nop
 800b1ec:	40010000 	.word	0x40010000
 800b1f0:	40010400 	.word	0x40010400

0800b1f4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b086      	sub	sp, #24
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
 800b1fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d101      	bne.n	800b208 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800b204:	2301      	movs	r3, #1
 800b206:	e083      	b.n	800b310 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b20e:	b2db      	uxtb	r3, r3
 800b210:	2b00      	cmp	r3, #0
 800b212:	d106      	bne.n	800b222 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	2200      	movs	r2, #0
 800b218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800b21c:	6878      	ldr	r0, [r7, #4]
 800b21e:	f7f9 fe69 	bl	8004ef4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	2202      	movs	r2, #2
 800b226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	689b      	ldr	r3, [r3, #8]
 800b230:	687a      	ldr	r2, [r7, #4]
 800b232:	6812      	ldr	r2, [r2, #0]
 800b234:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b238:	f023 0307 	bic.w	r3, r3, #7
 800b23c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681a      	ldr	r2, [r3, #0]
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	3304      	adds	r3, #4
 800b246:	4619      	mov	r1, r3
 800b248:	4610      	mov	r0, r2
 800b24a:	f000 fa93 	bl	800b774 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	689b      	ldr	r3, [r3, #8]
 800b254:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	699b      	ldr	r3, [r3, #24]
 800b25c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	6a1b      	ldr	r3, [r3, #32]
 800b264:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800b266:	683b      	ldr	r3, [r7, #0]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	697a      	ldr	r2, [r7, #20]
 800b26c:	4313      	orrs	r3, r2
 800b26e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800b270:	693b      	ldr	r3, [r7, #16]
 800b272:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b276:	f023 0303 	bic.w	r3, r3, #3
 800b27a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800b27c:	683b      	ldr	r3, [r7, #0]
 800b27e:	689a      	ldr	r2, [r3, #8]
 800b280:	683b      	ldr	r3, [r7, #0]
 800b282:	699b      	ldr	r3, [r3, #24]
 800b284:	021b      	lsls	r3, r3, #8
 800b286:	4313      	orrs	r3, r2
 800b288:	693a      	ldr	r2, [r7, #16]
 800b28a:	4313      	orrs	r3, r2
 800b28c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800b28e:	693b      	ldr	r3, [r7, #16]
 800b290:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800b294:	f023 030c 	bic.w	r3, r3, #12
 800b298:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800b29a:	693b      	ldr	r3, [r7, #16]
 800b29c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b2a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b2a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800b2a6:	683b      	ldr	r3, [r7, #0]
 800b2a8:	68da      	ldr	r2, [r3, #12]
 800b2aa:	683b      	ldr	r3, [r7, #0]
 800b2ac:	69db      	ldr	r3, [r3, #28]
 800b2ae:	021b      	lsls	r3, r3, #8
 800b2b0:	4313      	orrs	r3, r2
 800b2b2:	693a      	ldr	r2, [r7, #16]
 800b2b4:	4313      	orrs	r3, r2
 800b2b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b2b8:	683b      	ldr	r3, [r7, #0]
 800b2ba:	691b      	ldr	r3, [r3, #16]
 800b2bc:	011a      	lsls	r2, r3, #4
 800b2be:	683b      	ldr	r3, [r7, #0]
 800b2c0:	6a1b      	ldr	r3, [r3, #32]
 800b2c2:	031b      	lsls	r3, r3, #12
 800b2c4:	4313      	orrs	r3, r2
 800b2c6:	693a      	ldr	r2, [r7, #16]
 800b2c8:	4313      	orrs	r3, r2
 800b2ca:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800b2d2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800b2da:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800b2dc:	683b      	ldr	r3, [r7, #0]
 800b2de:	685a      	ldr	r2, [r3, #4]
 800b2e0:	683b      	ldr	r3, [r7, #0]
 800b2e2:	695b      	ldr	r3, [r3, #20]
 800b2e4:	011b      	lsls	r3, r3, #4
 800b2e6:	4313      	orrs	r3, r2
 800b2e8:	68fa      	ldr	r2, [r7, #12]
 800b2ea:	4313      	orrs	r3, r2
 800b2ec:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	697a      	ldr	r2, [r7, #20]
 800b2f4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	693a      	ldr	r2, [r7, #16]
 800b2fc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	68fa      	ldr	r2, [r7, #12]
 800b304:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	2201      	movs	r2, #1
 800b30a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b30e:	2300      	movs	r3, #0
}
 800b310:	4618      	mov	r0, r3
 800b312:	3718      	adds	r7, #24
 800b314:	46bd      	mov	sp, r7
 800b316:	bd80      	pop	{r7, pc}

0800b318 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b318:	b580      	push	{r7, lr}
 800b31a:	b082      	sub	sp, #8
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
 800b320:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800b322:	683b      	ldr	r3, [r7, #0]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d002      	beq.n	800b32e <HAL_TIM_Encoder_Start+0x16>
 800b328:	2b04      	cmp	r3, #4
 800b32a:	d008      	beq.n	800b33e <HAL_TIM_Encoder_Start+0x26>
 800b32c:	e00f      	b.n	800b34e <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	2201      	movs	r2, #1
 800b334:	2100      	movs	r1, #0
 800b336:	4618      	mov	r0, r3
 800b338:	f000 fc6c 	bl	800bc14 <TIM_CCxChannelCmd>
      break;
 800b33c:	e016      	b.n	800b36c <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	2201      	movs	r2, #1
 800b344:	2104      	movs	r1, #4
 800b346:	4618      	mov	r0, r3
 800b348:	f000 fc64 	bl	800bc14 <TIM_CCxChannelCmd>
      break;
 800b34c:	e00e      	b.n	800b36c <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	2201      	movs	r2, #1
 800b354:	2100      	movs	r1, #0
 800b356:	4618      	mov	r0, r3
 800b358:	f000 fc5c 	bl	800bc14 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	2201      	movs	r2, #1
 800b362:	2104      	movs	r1, #4
 800b364:	4618      	mov	r0, r3
 800b366:	f000 fc55 	bl	800bc14 <TIM_CCxChannelCmd>
      break;
 800b36a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	681a      	ldr	r2, [r3, #0]
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	f042 0201 	orr.w	r2, r2, #1
 800b37a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800b37c:	2300      	movs	r3, #0
}
 800b37e:	4618      	mov	r0, r3
 800b380:	3708      	adds	r7, #8
 800b382:	46bd      	mov	sp, r7
 800b384:	bd80      	pop	{r7, pc}

0800b386 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b386:	b580      	push	{r7, lr}
 800b388:	b082      	sub	sp, #8
 800b38a:	af00      	add	r7, sp, #0
 800b38c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	691b      	ldr	r3, [r3, #16]
 800b394:	f003 0302 	and.w	r3, r3, #2
 800b398:	2b02      	cmp	r3, #2
 800b39a:	d122      	bne.n	800b3e2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	68db      	ldr	r3, [r3, #12]
 800b3a2:	f003 0302 	and.w	r3, r3, #2
 800b3a6:	2b02      	cmp	r3, #2
 800b3a8:	d11b      	bne.n	800b3e2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	f06f 0202 	mvn.w	r2, #2
 800b3b2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	2201      	movs	r2, #1
 800b3b8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	699b      	ldr	r3, [r3, #24]
 800b3c0:	f003 0303 	and.w	r3, r3, #3
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d003      	beq.n	800b3d0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b3c8:	6878      	ldr	r0, [r7, #4]
 800b3ca:	f000 f9b5 	bl	800b738 <HAL_TIM_IC_CaptureCallback>
 800b3ce:	e005      	b.n	800b3dc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b3d0:	6878      	ldr	r0, [r7, #4]
 800b3d2:	f000 f9a7 	bl	800b724 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b3d6:	6878      	ldr	r0, [r7, #4]
 800b3d8:	f000 f9b8 	bl	800b74c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	2200      	movs	r2, #0
 800b3e0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	691b      	ldr	r3, [r3, #16]
 800b3e8:	f003 0304 	and.w	r3, r3, #4
 800b3ec:	2b04      	cmp	r3, #4
 800b3ee:	d122      	bne.n	800b436 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	68db      	ldr	r3, [r3, #12]
 800b3f6:	f003 0304 	and.w	r3, r3, #4
 800b3fa:	2b04      	cmp	r3, #4
 800b3fc:	d11b      	bne.n	800b436 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	f06f 0204 	mvn.w	r2, #4
 800b406:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	2202      	movs	r2, #2
 800b40c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	699b      	ldr	r3, [r3, #24]
 800b414:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d003      	beq.n	800b424 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b41c:	6878      	ldr	r0, [r7, #4]
 800b41e:	f000 f98b 	bl	800b738 <HAL_TIM_IC_CaptureCallback>
 800b422:	e005      	b.n	800b430 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b424:	6878      	ldr	r0, [r7, #4]
 800b426:	f000 f97d 	bl	800b724 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b42a:	6878      	ldr	r0, [r7, #4]
 800b42c:	f000 f98e 	bl	800b74c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	2200      	movs	r2, #0
 800b434:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	691b      	ldr	r3, [r3, #16]
 800b43c:	f003 0308 	and.w	r3, r3, #8
 800b440:	2b08      	cmp	r3, #8
 800b442:	d122      	bne.n	800b48a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	68db      	ldr	r3, [r3, #12]
 800b44a:	f003 0308 	and.w	r3, r3, #8
 800b44e:	2b08      	cmp	r3, #8
 800b450:	d11b      	bne.n	800b48a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	f06f 0208 	mvn.w	r2, #8
 800b45a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	2204      	movs	r2, #4
 800b460:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	69db      	ldr	r3, [r3, #28]
 800b468:	f003 0303 	and.w	r3, r3, #3
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d003      	beq.n	800b478 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b470:	6878      	ldr	r0, [r7, #4]
 800b472:	f000 f961 	bl	800b738 <HAL_TIM_IC_CaptureCallback>
 800b476:	e005      	b.n	800b484 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b478:	6878      	ldr	r0, [r7, #4]
 800b47a:	f000 f953 	bl	800b724 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b47e:	6878      	ldr	r0, [r7, #4]
 800b480:	f000 f964 	bl	800b74c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	2200      	movs	r2, #0
 800b488:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	691b      	ldr	r3, [r3, #16]
 800b490:	f003 0310 	and.w	r3, r3, #16
 800b494:	2b10      	cmp	r3, #16
 800b496:	d122      	bne.n	800b4de <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	68db      	ldr	r3, [r3, #12]
 800b49e:	f003 0310 	and.w	r3, r3, #16
 800b4a2:	2b10      	cmp	r3, #16
 800b4a4:	d11b      	bne.n	800b4de <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	f06f 0210 	mvn.w	r2, #16
 800b4ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	2208      	movs	r2, #8
 800b4b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	69db      	ldr	r3, [r3, #28]
 800b4bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d003      	beq.n	800b4cc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b4c4:	6878      	ldr	r0, [r7, #4]
 800b4c6:	f000 f937 	bl	800b738 <HAL_TIM_IC_CaptureCallback>
 800b4ca:	e005      	b.n	800b4d8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b4cc:	6878      	ldr	r0, [r7, #4]
 800b4ce:	f000 f929 	bl	800b724 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b4d2:	6878      	ldr	r0, [r7, #4]
 800b4d4:	f000 f93a 	bl	800b74c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	2200      	movs	r2, #0
 800b4dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	691b      	ldr	r3, [r3, #16]
 800b4e4:	f003 0301 	and.w	r3, r3, #1
 800b4e8:	2b01      	cmp	r3, #1
 800b4ea:	d10e      	bne.n	800b50a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	68db      	ldr	r3, [r3, #12]
 800b4f2:	f003 0301 	and.w	r3, r3, #1
 800b4f6:	2b01      	cmp	r3, #1
 800b4f8:	d107      	bne.n	800b50a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	f06f 0201 	mvn.w	r2, #1
 800b502:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b504:	6878      	ldr	r0, [r7, #4]
 800b506:	f7f8 f9d3 	bl	80038b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	691b      	ldr	r3, [r3, #16]
 800b510:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b514:	2b80      	cmp	r3, #128	; 0x80
 800b516:	d10e      	bne.n	800b536 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	68db      	ldr	r3, [r3, #12]
 800b51e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b522:	2b80      	cmp	r3, #128	; 0x80
 800b524:	d107      	bne.n	800b536 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b52e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b530:	6878      	ldr	r0, [r7, #4]
 800b532:	f000 fc6d 	bl	800be10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	691b      	ldr	r3, [r3, #16]
 800b53c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b540:	2b40      	cmp	r3, #64	; 0x40
 800b542:	d10e      	bne.n	800b562 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	68db      	ldr	r3, [r3, #12]
 800b54a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b54e:	2b40      	cmp	r3, #64	; 0x40
 800b550:	d107      	bne.n	800b562 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b55a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b55c:	6878      	ldr	r0, [r7, #4]
 800b55e:	f000 f8ff 	bl	800b760 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	691b      	ldr	r3, [r3, #16]
 800b568:	f003 0320 	and.w	r3, r3, #32
 800b56c:	2b20      	cmp	r3, #32
 800b56e:	d10e      	bne.n	800b58e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	68db      	ldr	r3, [r3, #12]
 800b576:	f003 0320 	and.w	r3, r3, #32
 800b57a:	2b20      	cmp	r3, #32
 800b57c:	d107      	bne.n	800b58e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	f06f 0220 	mvn.w	r2, #32
 800b586:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b588:	6878      	ldr	r0, [r7, #4]
 800b58a:	f000 fc37 	bl	800bdfc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b58e:	bf00      	nop
 800b590:	3708      	adds	r7, #8
 800b592:	46bd      	mov	sp, r7
 800b594:	bd80      	pop	{r7, pc}
	...

0800b598 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b598:	b580      	push	{r7, lr}
 800b59a:	b084      	sub	sp, #16
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	60f8      	str	r0, [r7, #12]
 800b5a0:	60b9      	str	r1, [r7, #8]
 800b5a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b5aa:	2b01      	cmp	r3, #1
 800b5ac:	d101      	bne.n	800b5b2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800b5ae:	2302      	movs	r3, #2
 800b5b0:	e0b4      	b.n	800b71c <HAL_TIM_PWM_ConfigChannel+0x184>
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	2201      	movs	r2, #1
 800b5b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	2202      	movs	r2, #2
 800b5be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	2b0c      	cmp	r3, #12
 800b5c6:	f200 809f 	bhi.w	800b708 <HAL_TIM_PWM_ConfigChannel+0x170>
 800b5ca:	a201      	add	r2, pc, #4	; (adr r2, 800b5d0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800b5cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5d0:	0800b605 	.word	0x0800b605
 800b5d4:	0800b709 	.word	0x0800b709
 800b5d8:	0800b709 	.word	0x0800b709
 800b5dc:	0800b709 	.word	0x0800b709
 800b5e0:	0800b645 	.word	0x0800b645
 800b5e4:	0800b709 	.word	0x0800b709
 800b5e8:	0800b709 	.word	0x0800b709
 800b5ec:	0800b709 	.word	0x0800b709
 800b5f0:	0800b687 	.word	0x0800b687
 800b5f4:	0800b709 	.word	0x0800b709
 800b5f8:	0800b709 	.word	0x0800b709
 800b5fc:	0800b709 	.word	0x0800b709
 800b600:	0800b6c7 	.word	0x0800b6c7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	68b9      	ldr	r1, [r7, #8]
 800b60a:	4618      	mov	r0, r3
 800b60c:	f000 f952 	bl	800b8b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	699a      	ldr	r2, [r3, #24]
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	f042 0208 	orr.w	r2, r2, #8
 800b61e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	699a      	ldr	r2, [r3, #24]
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	f022 0204 	bic.w	r2, r2, #4
 800b62e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	6999      	ldr	r1, [r3, #24]
 800b636:	68bb      	ldr	r3, [r7, #8]
 800b638:	691a      	ldr	r2, [r3, #16]
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	430a      	orrs	r2, r1
 800b640:	619a      	str	r2, [r3, #24]
      break;
 800b642:	e062      	b.n	800b70a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	68b9      	ldr	r1, [r7, #8]
 800b64a:	4618      	mov	r0, r3
 800b64c:	f000 f9a2 	bl	800b994 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	699a      	ldr	r2, [r3, #24]
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b65e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	699a      	ldr	r2, [r3, #24]
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b66e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	6999      	ldr	r1, [r3, #24]
 800b676:	68bb      	ldr	r3, [r7, #8]
 800b678:	691b      	ldr	r3, [r3, #16]
 800b67a:	021a      	lsls	r2, r3, #8
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	430a      	orrs	r2, r1
 800b682:	619a      	str	r2, [r3, #24]
      break;
 800b684:	e041      	b.n	800b70a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	68b9      	ldr	r1, [r7, #8]
 800b68c:	4618      	mov	r0, r3
 800b68e:	f000 f9f7 	bl	800ba80 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	69da      	ldr	r2, [r3, #28]
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	f042 0208 	orr.w	r2, r2, #8
 800b6a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	69da      	ldr	r2, [r3, #28]
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	f022 0204 	bic.w	r2, r2, #4
 800b6b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	69d9      	ldr	r1, [r3, #28]
 800b6b8:	68bb      	ldr	r3, [r7, #8]
 800b6ba:	691a      	ldr	r2, [r3, #16]
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	430a      	orrs	r2, r1
 800b6c2:	61da      	str	r2, [r3, #28]
      break;
 800b6c4:	e021      	b.n	800b70a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	68b9      	ldr	r1, [r7, #8]
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	f000 fa4b 	bl	800bb68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	69da      	ldr	r2, [r3, #28]
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b6e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	69da      	ldr	r2, [r3, #28]
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b6f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	69d9      	ldr	r1, [r3, #28]
 800b6f8:	68bb      	ldr	r3, [r7, #8]
 800b6fa:	691b      	ldr	r3, [r3, #16]
 800b6fc:	021a      	lsls	r2, r3, #8
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	430a      	orrs	r2, r1
 800b704:	61da      	str	r2, [r3, #28]
      break;
 800b706:	e000      	b.n	800b70a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800b708:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	2201      	movs	r2, #1
 800b70e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	2200      	movs	r2, #0
 800b716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b71a:	2300      	movs	r3, #0
}
 800b71c:	4618      	mov	r0, r3
 800b71e:	3710      	adds	r7, #16
 800b720:	46bd      	mov	sp, r7
 800b722:	bd80      	pop	{r7, pc}

0800b724 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b724:	b480      	push	{r7}
 800b726:	b083      	sub	sp, #12
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b72c:	bf00      	nop
 800b72e:	370c      	adds	r7, #12
 800b730:	46bd      	mov	sp, r7
 800b732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b736:	4770      	bx	lr

0800b738 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b738:	b480      	push	{r7}
 800b73a:	b083      	sub	sp, #12
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b740:	bf00      	nop
 800b742:	370c      	adds	r7, #12
 800b744:	46bd      	mov	sp, r7
 800b746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74a:	4770      	bx	lr

0800b74c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b74c:	b480      	push	{r7}
 800b74e:	b083      	sub	sp, #12
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b754:	bf00      	nop
 800b756:	370c      	adds	r7, #12
 800b758:	46bd      	mov	sp, r7
 800b75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75e:	4770      	bx	lr

0800b760 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b760:	b480      	push	{r7}
 800b762:	b083      	sub	sp, #12
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b768:	bf00      	nop
 800b76a:	370c      	adds	r7, #12
 800b76c:	46bd      	mov	sp, r7
 800b76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b772:	4770      	bx	lr

0800b774 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b774:	b480      	push	{r7}
 800b776:	b085      	sub	sp, #20
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
 800b77c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	4a40      	ldr	r2, [pc, #256]	; (800b888 <TIM_Base_SetConfig+0x114>)
 800b788:	4293      	cmp	r3, r2
 800b78a:	d013      	beq.n	800b7b4 <TIM_Base_SetConfig+0x40>
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b792:	d00f      	beq.n	800b7b4 <TIM_Base_SetConfig+0x40>
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	4a3d      	ldr	r2, [pc, #244]	; (800b88c <TIM_Base_SetConfig+0x118>)
 800b798:	4293      	cmp	r3, r2
 800b79a:	d00b      	beq.n	800b7b4 <TIM_Base_SetConfig+0x40>
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	4a3c      	ldr	r2, [pc, #240]	; (800b890 <TIM_Base_SetConfig+0x11c>)
 800b7a0:	4293      	cmp	r3, r2
 800b7a2:	d007      	beq.n	800b7b4 <TIM_Base_SetConfig+0x40>
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	4a3b      	ldr	r2, [pc, #236]	; (800b894 <TIM_Base_SetConfig+0x120>)
 800b7a8:	4293      	cmp	r3, r2
 800b7aa:	d003      	beq.n	800b7b4 <TIM_Base_SetConfig+0x40>
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	4a3a      	ldr	r2, [pc, #232]	; (800b898 <TIM_Base_SetConfig+0x124>)
 800b7b0:	4293      	cmp	r3, r2
 800b7b2:	d108      	bne.n	800b7c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b7ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b7bc:	683b      	ldr	r3, [r7, #0]
 800b7be:	685b      	ldr	r3, [r3, #4]
 800b7c0:	68fa      	ldr	r2, [r7, #12]
 800b7c2:	4313      	orrs	r3, r2
 800b7c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	4a2f      	ldr	r2, [pc, #188]	; (800b888 <TIM_Base_SetConfig+0x114>)
 800b7ca:	4293      	cmp	r3, r2
 800b7cc:	d02b      	beq.n	800b826 <TIM_Base_SetConfig+0xb2>
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b7d4:	d027      	beq.n	800b826 <TIM_Base_SetConfig+0xb2>
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	4a2c      	ldr	r2, [pc, #176]	; (800b88c <TIM_Base_SetConfig+0x118>)
 800b7da:	4293      	cmp	r3, r2
 800b7dc:	d023      	beq.n	800b826 <TIM_Base_SetConfig+0xb2>
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	4a2b      	ldr	r2, [pc, #172]	; (800b890 <TIM_Base_SetConfig+0x11c>)
 800b7e2:	4293      	cmp	r3, r2
 800b7e4:	d01f      	beq.n	800b826 <TIM_Base_SetConfig+0xb2>
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	4a2a      	ldr	r2, [pc, #168]	; (800b894 <TIM_Base_SetConfig+0x120>)
 800b7ea:	4293      	cmp	r3, r2
 800b7ec:	d01b      	beq.n	800b826 <TIM_Base_SetConfig+0xb2>
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	4a29      	ldr	r2, [pc, #164]	; (800b898 <TIM_Base_SetConfig+0x124>)
 800b7f2:	4293      	cmp	r3, r2
 800b7f4:	d017      	beq.n	800b826 <TIM_Base_SetConfig+0xb2>
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	4a28      	ldr	r2, [pc, #160]	; (800b89c <TIM_Base_SetConfig+0x128>)
 800b7fa:	4293      	cmp	r3, r2
 800b7fc:	d013      	beq.n	800b826 <TIM_Base_SetConfig+0xb2>
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	4a27      	ldr	r2, [pc, #156]	; (800b8a0 <TIM_Base_SetConfig+0x12c>)
 800b802:	4293      	cmp	r3, r2
 800b804:	d00f      	beq.n	800b826 <TIM_Base_SetConfig+0xb2>
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	4a26      	ldr	r2, [pc, #152]	; (800b8a4 <TIM_Base_SetConfig+0x130>)
 800b80a:	4293      	cmp	r3, r2
 800b80c:	d00b      	beq.n	800b826 <TIM_Base_SetConfig+0xb2>
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	4a25      	ldr	r2, [pc, #148]	; (800b8a8 <TIM_Base_SetConfig+0x134>)
 800b812:	4293      	cmp	r3, r2
 800b814:	d007      	beq.n	800b826 <TIM_Base_SetConfig+0xb2>
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	4a24      	ldr	r2, [pc, #144]	; (800b8ac <TIM_Base_SetConfig+0x138>)
 800b81a:	4293      	cmp	r3, r2
 800b81c:	d003      	beq.n	800b826 <TIM_Base_SetConfig+0xb2>
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	4a23      	ldr	r2, [pc, #140]	; (800b8b0 <TIM_Base_SetConfig+0x13c>)
 800b822:	4293      	cmp	r3, r2
 800b824:	d108      	bne.n	800b838 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b82c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b82e:	683b      	ldr	r3, [r7, #0]
 800b830:	68db      	ldr	r3, [r3, #12]
 800b832:	68fa      	ldr	r2, [r7, #12]
 800b834:	4313      	orrs	r3, r2
 800b836:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b83e:	683b      	ldr	r3, [r7, #0]
 800b840:	695b      	ldr	r3, [r3, #20]
 800b842:	4313      	orrs	r3, r2
 800b844:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	68fa      	ldr	r2, [r7, #12]
 800b84a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b84c:	683b      	ldr	r3, [r7, #0]
 800b84e:	689a      	ldr	r2, [r3, #8]
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b854:	683b      	ldr	r3, [r7, #0]
 800b856:	681a      	ldr	r2, [r3, #0]
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	4a0a      	ldr	r2, [pc, #40]	; (800b888 <TIM_Base_SetConfig+0x114>)
 800b860:	4293      	cmp	r3, r2
 800b862:	d003      	beq.n	800b86c <TIM_Base_SetConfig+0xf8>
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	4a0c      	ldr	r2, [pc, #48]	; (800b898 <TIM_Base_SetConfig+0x124>)
 800b868:	4293      	cmp	r3, r2
 800b86a:	d103      	bne.n	800b874 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b86c:	683b      	ldr	r3, [r7, #0]
 800b86e:	691a      	ldr	r2, [r3, #16]
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	2201      	movs	r2, #1
 800b878:	615a      	str	r2, [r3, #20]
}
 800b87a:	bf00      	nop
 800b87c:	3714      	adds	r7, #20
 800b87e:	46bd      	mov	sp, r7
 800b880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b884:	4770      	bx	lr
 800b886:	bf00      	nop
 800b888:	40010000 	.word	0x40010000
 800b88c:	40000400 	.word	0x40000400
 800b890:	40000800 	.word	0x40000800
 800b894:	40000c00 	.word	0x40000c00
 800b898:	40010400 	.word	0x40010400
 800b89c:	40014000 	.word	0x40014000
 800b8a0:	40014400 	.word	0x40014400
 800b8a4:	40014800 	.word	0x40014800
 800b8a8:	40001800 	.word	0x40001800
 800b8ac:	40001c00 	.word	0x40001c00
 800b8b0:	40002000 	.word	0x40002000

0800b8b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b8b4:	b480      	push	{r7}
 800b8b6:	b087      	sub	sp, #28
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
 800b8bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	6a1b      	ldr	r3, [r3, #32]
 800b8c2:	f023 0201 	bic.w	r2, r3, #1
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	6a1b      	ldr	r3, [r3, #32]
 800b8ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	685b      	ldr	r3, [r3, #4]
 800b8d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	699b      	ldr	r3, [r3, #24]
 800b8da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b8e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	f023 0303 	bic.w	r3, r3, #3
 800b8ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b8ec:	683b      	ldr	r3, [r7, #0]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	68fa      	ldr	r2, [r7, #12]
 800b8f2:	4313      	orrs	r3, r2
 800b8f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b8f6:	697b      	ldr	r3, [r7, #20]
 800b8f8:	f023 0302 	bic.w	r3, r3, #2
 800b8fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b8fe:	683b      	ldr	r3, [r7, #0]
 800b900:	689b      	ldr	r3, [r3, #8]
 800b902:	697a      	ldr	r2, [r7, #20]
 800b904:	4313      	orrs	r3, r2
 800b906:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	4a20      	ldr	r2, [pc, #128]	; (800b98c <TIM_OC1_SetConfig+0xd8>)
 800b90c:	4293      	cmp	r3, r2
 800b90e:	d003      	beq.n	800b918 <TIM_OC1_SetConfig+0x64>
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	4a1f      	ldr	r2, [pc, #124]	; (800b990 <TIM_OC1_SetConfig+0xdc>)
 800b914:	4293      	cmp	r3, r2
 800b916:	d10c      	bne.n	800b932 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b918:	697b      	ldr	r3, [r7, #20]
 800b91a:	f023 0308 	bic.w	r3, r3, #8
 800b91e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b920:	683b      	ldr	r3, [r7, #0]
 800b922:	68db      	ldr	r3, [r3, #12]
 800b924:	697a      	ldr	r2, [r7, #20]
 800b926:	4313      	orrs	r3, r2
 800b928:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b92a:	697b      	ldr	r3, [r7, #20]
 800b92c:	f023 0304 	bic.w	r3, r3, #4
 800b930:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	4a15      	ldr	r2, [pc, #84]	; (800b98c <TIM_OC1_SetConfig+0xd8>)
 800b936:	4293      	cmp	r3, r2
 800b938:	d003      	beq.n	800b942 <TIM_OC1_SetConfig+0x8e>
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	4a14      	ldr	r2, [pc, #80]	; (800b990 <TIM_OC1_SetConfig+0xdc>)
 800b93e:	4293      	cmp	r3, r2
 800b940:	d111      	bne.n	800b966 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b942:	693b      	ldr	r3, [r7, #16]
 800b944:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b948:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b94a:	693b      	ldr	r3, [r7, #16]
 800b94c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b950:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b952:	683b      	ldr	r3, [r7, #0]
 800b954:	695b      	ldr	r3, [r3, #20]
 800b956:	693a      	ldr	r2, [r7, #16]
 800b958:	4313      	orrs	r3, r2
 800b95a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b95c:	683b      	ldr	r3, [r7, #0]
 800b95e:	699b      	ldr	r3, [r3, #24]
 800b960:	693a      	ldr	r2, [r7, #16]
 800b962:	4313      	orrs	r3, r2
 800b964:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	693a      	ldr	r2, [r7, #16]
 800b96a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	68fa      	ldr	r2, [r7, #12]
 800b970:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b972:	683b      	ldr	r3, [r7, #0]
 800b974:	685a      	ldr	r2, [r3, #4]
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	697a      	ldr	r2, [r7, #20]
 800b97e:	621a      	str	r2, [r3, #32]
}
 800b980:	bf00      	nop
 800b982:	371c      	adds	r7, #28
 800b984:	46bd      	mov	sp, r7
 800b986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98a:	4770      	bx	lr
 800b98c:	40010000 	.word	0x40010000
 800b990:	40010400 	.word	0x40010400

0800b994 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b994:	b480      	push	{r7}
 800b996:	b087      	sub	sp, #28
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]
 800b99c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	6a1b      	ldr	r3, [r3, #32]
 800b9a2:	f023 0210 	bic.w	r2, r3, #16
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	6a1b      	ldr	r3, [r3, #32]
 800b9ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	685b      	ldr	r3, [r3, #4]
 800b9b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	699b      	ldr	r3, [r3, #24]
 800b9ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b9c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b9ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b9cc:	683b      	ldr	r3, [r7, #0]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	021b      	lsls	r3, r3, #8
 800b9d2:	68fa      	ldr	r2, [r7, #12]
 800b9d4:	4313      	orrs	r3, r2
 800b9d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b9d8:	697b      	ldr	r3, [r7, #20]
 800b9da:	f023 0320 	bic.w	r3, r3, #32
 800b9de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b9e0:	683b      	ldr	r3, [r7, #0]
 800b9e2:	689b      	ldr	r3, [r3, #8]
 800b9e4:	011b      	lsls	r3, r3, #4
 800b9e6:	697a      	ldr	r2, [r7, #20]
 800b9e8:	4313      	orrs	r3, r2
 800b9ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	4a22      	ldr	r2, [pc, #136]	; (800ba78 <TIM_OC2_SetConfig+0xe4>)
 800b9f0:	4293      	cmp	r3, r2
 800b9f2:	d003      	beq.n	800b9fc <TIM_OC2_SetConfig+0x68>
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	4a21      	ldr	r2, [pc, #132]	; (800ba7c <TIM_OC2_SetConfig+0xe8>)
 800b9f8:	4293      	cmp	r3, r2
 800b9fa:	d10d      	bne.n	800ba18 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b9fc:	697b      	ldr	r3, [r7, #20]
 800b9fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ba02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ba04:	683b      	ldr	r3, [r7, #0]
 800ba06:	68db      	ldr	r3, [r3, #12]
 800ba08:	011b      	lsls	r3, r3, #4
 800ba0a:	697a      	ldr	r2, [r7, #20]
 800ba0c:	4313      	orrs	r3, r2
 800ba0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ba10:	697b      	ldr	r3, [r7, #20]
 800ba12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ba16:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	4a17      	ldr	r2, [pc, #92]	; (800ba78 <TIM_OC2_SetConfig+0xe4>)
 800ba1c:	4293      	cmp	r3, r2
 800ba1e:	d003      	beq.n	800ba28 <TIM_OC2_SetConfig+0x94>
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	4a16      	ldr	r2, [pc, #88]	; (800ba7c <TIM_OC2_SetConfig+0xe8>)
 800ba24:	4293      	cmp	r3, r2
 800ba26:	d113      	bne.n	800ba50 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ba28:	693b      	ldr	r3, [r7, #16]
 800ba2a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ba2e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ba30:	693b      	ldr	r3, [r7, #16]
 800ba32:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ba36:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ba38:	683b      	ldr	r3, [r7, #0]
 800ba3a:	695b      	ldr	r3, [r3, #20]
 800ba3c:	009b      	lsls	r3, r3, #2
 800ba3e:	693a      	ldr	r2, [r7, #16]
 800ba40:	4313      	orrs	r3, r2
 800ba42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ba44:	683b      	ldr	r3, [r7, #0]
 800ba46:	699b      	ldr	r3, [r3, #24]
 800ba48:	009b      	lsls	r3, r3, #2
 800ba4a:	693a      	ldr	r2, [r7, #16]
 800ba4c:	4313      	orrs	r3, r2
 800ba4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	693a      	ldr	r2, [r7, #16]
 800ba54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	68fa      	ldr	r2, [r7, #12]
 800ba5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ba5c:	683b      	ldr	r3, [r7, #0]
 800ba5e:	685a      	ldr	r2, [r3, #4]
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	697a      	ldr	r2, [r7, #20]
 800ba68:	621a      	str	r2, [r3, #32]
}
 800ba6a:	bf00      	nop
 800ba6c:	371c      	adds	r7, #28
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba74:	4770      	bx	lr
 800ba76:	bf00      	nop
 800ba78:	40010000 	.word	0x40010000
 800ba7c:	40010400 	.word	0x40010400

0800ba80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ba80:	b480      	push	{r7}
 800ba82:	b087      	sub	sp, #28
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
 800ba88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	6a1b      	ldr	r3, [r3, #32]
 800ba8e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	6a1b      	ldr	r3, [r3, #32]
 800ba9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	685b      	ldr	r3, [r3, #4]
 800baa0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	69db      	ldr	r3, [r3, #28]
 800baa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800baae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	f023 0303 	bic.w	r3, r3, #3
 800bab6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bab8:	683b      	ldr	r3, [r7, #0]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	68fa      	ldr	r2, [r7, #12]
 800babe:	4313      	orrs	r3, r2
 800bac0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bac2:	697b      	ldr	r3, [r7, #20]
 800bac4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bac8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800baca:	683b      	ldr	r3, [r7, #0]
 800bacc:	689b      	ldr	r3, [r3, #8]
 800bace:	021b      	lsls	r3, r3, #8
 800bad0:	697a      	ldr	r2, [r7, #20]
 800bad2:	4313      	orrs	r3, r2
 800bad4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	4a21      	ldr	r2, [pc, #132]	; (800bb60 <TIM_OC3_SetConfig+0xe0>)
 800bada:	4293      	cmp	r3, r2
 800badc:	d003      	beq.n	800bae6 <TIM_OC3_SetConfig+0x66>
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	4a20      	ldr	r2, [pc, #128]	; (800bb64 <TIM_OC3_SetConfig+0xe4>)
 800bae2:	4293      	cmp	r3, r2
 800bae4:	d10d      	bne.n	800bb02 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bae6:	697b      	ldr	r3, [r7, #20]
 800bae8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800baec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800baee:	683b      	ldr	r3, [r7, #0]
 800baf0:	68db      	ldr	r3, [r3, #12]
 800baf2:	021b      	lsls	r3, r3, #8
 800baf4:	697a      	ldr	r2, [r7, #20]
 800baf6:	4313      	orrs	r3, r2
 800baf8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bafa:	697b      	ldr	r3, [r7, #20]
 800bafc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bb00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	4a16      	ldr	r2, [pc, #88]	; (800bb60 <TIM_OC3_SetConfig+0xe0>)
 800bb06:	4293      	cmp	r3, r2
 800bb08:	d003      	beq.n	800bb12 <TIM_OC3_SetConfig+0x92>
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	4a15      	ldr	r2, [pc, #84]	; (800bb64 <TIM_OC3_SetConfig+0xe4>)
 800bb0e:	4293      	cmp	r3, r2
 800bb10:	d113      	bne.n	800bb3a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bb12:	693b      	ldr	r3, [r7, #16]
 800bb14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bb18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bb1a:	693b      	ldr	r3, [r7, #16]
 800bb1c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bb20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bb22:	683b      	ldr	r3, [r7, #0]
 800bb24:	695b      	ldr	r3, [r3, #20]
 800bb26:	011b      	lsls	r3, r3, #4
 800bb28:	693a      	ldr	r2, [r7, #16]
 800bb2a:	4313      	orrs	r3, r2
 800bb2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bb2e:	683b      	ldr	r3, [r7, #0]
 800bb30:	699b      	ldr	r3, [r3, #24]
 800bb32:	011b      	lsls	r3, r3, #4
 800bb34:	693a      	ldr	r2, [r7, #16]
 800bb36:	4313      	orrs	r3, r2
 800bb38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	693a      	ldr	r2, [r7, #16]
 800bb3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	68fa      	ldr	r2, [r7, #12]
 800bb44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	685a      	ldr	r2, [r3, #4]
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	697a      	ldr	r2, [r7, #20]
 800bb52:	621a      	str	r2, [r3, #32]
}
 800bb54:	bf00      	nop
 800bb56:	371c      	adds	r7, #28
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5e:	4770      	bx	lr
 800bb60:	40010000 	.word	0x40010000
 800bb64:	40010400 	.word	0x40010400

0800bb68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bb68:	b480      	push	{r7}
 800bb6a:	b087      	sub	sp, #28
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
 800bb70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	6a1b      	ldr	r3, [r3, #32]
 800bb76:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	6a1b      	ldr	r3, [r3, #32]
 800bb82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	685b      	ldr	r3, [r3, #4]
 800bb88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	69db      	ldr	r3, [r3, #28]
 800bb8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bb96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bb9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bba0:	683b      	ldr	r3, [r7, #0]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	021b      	lsls	r3, r3, #8
 800bba6:	68fa      	ldr	r2, [r7, #12]
 800bba8:	4313      	orrs	r3, r2
 800bbaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bbac:	693b      	ldr	r3, [r7, #16]
 800bbae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bbb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bbb4:	683b      	ldr	r3, [r7, #0]
 800bbb6:	689b      	ldr	r3, [r3, #8]
 800bbb8:	031b      	lsls	r3, r3, #12
 800bbba:	693a      	ldr	r2, [r7, #16]
 800bbbc:	4313      	orrs	r3, r2
 800bbbe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	4a12      	ldr	r2, [pc, #72]	; (800bc0c <TIM_OC4_SetConfig+0xa4>)
 800bbc4:	4293      	cmp	r3, r2
 800bbc6:	d003      	beq.n	800bbd0 <TIM_OC4_SetConfig+0x68>
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	4a11      	ldr	r2, [pc, #68]	; (800bc10 <TIM_OC4_SetConfig+0xa8>)
 800bbcc:	4293      	cmp	r3, r2
 800bbce:	d109      	bne.n	800bbe4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bbd0:	697b      	ldr	r3, [r7, #20]
 800bbd2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bbd6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bbd8:	683b      	ldr	r3, [r7, #0]
 800bbda:	695b      	ldr	r3, [r3, #20]
 800bbdc:	019b      	lsls	r3, r3, #6
 800bbde:	697a      	ldr	r2, [r7, #20]
 800bbe0:	4313      	orrs	r3, r2
 800bbe2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	697a      	ldr	r2, [r7, #20]
 800bbe8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	68fa      	ldr	r2, [r7, #12]
 800bbee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bbf0:	683b      	ldr	r3, [r7, #0]
 800bbf2:	685a      	ldr	r2, [r3, #4]
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	693a      	ldr	r2, [r7, #16]
 800bbfc:	621a      	str	r2, [r3, #32]
}
 800bbfe:	bf00      	nop
 800bc00:	371c      	adds	r7, #28
 800bc02:	46bd      	mov	sp, r7
 800bc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc08:	4770      	bx	lr
 800bc0a:	bf00      	nop
 800bc0c:	40010000 	.word	0x40010000
 800bc10:	40010400 	.word	0x40010400

0800bc14 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bc14:	b480      	push	{r7}
 800bc16:	b087      	sub	sp, #28
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	60f8      	str	r0, [r7, #12]
 800bc1c:	60b9      	str	r1, [r7, #8]
 800bc1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bc20:	68bb      	ldr	r3, [r7, #8]
 800bc22:	f003 031f 	and.w	r3, r3, #31
 800bc26:	2201      	movs	r2, #1
 800bc28:	fa02 f303 	lsl.w	r3, r2, r3
 800bc2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	6a1a      	ldr	r2, [r3, #32]
 800bc32:	697b      	ldr	r3, [r7, #20]
 800bc34:	43db      	mvns	r3, r3
 800bc36:	401a      	ands	r2, r3
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	6a1a      	ldr	r2, [r3, #32]
 800bc40:	68bb      	ldr	r3, [r7, #8]
 800bc42:	f003 031f 	and.w	r3, r3, #31
 800bc46:	6879      	ldr	r1, [r7, #4]
 800bc48:	fa01 f303 	lsl.w	r3, r1, r3
 800bc4c:	431a      	orrs	r2, r3
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	621a      	str	r2, [r3, #32]
}
 800bc52:	bf00      	nop
 800bc54:	371c      	adds	r7, #28
 800bc56:	46bd      	mov	sp, r7
 800bc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5c:	4770      	bx	lr
	...

0800bc60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bc60:	b480      	push	{r7}
 800bc62:	b085      	sub	sp, #20
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
 800bc68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bc70:	2b01      	cmp	r3, #1
 800bc72:	d101      	bne.n	800bc78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bc74:	2302      	movs	r3, #2
 800bc76:	e05a      	b.n	800bd2e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	2201      	movs	r2, #1
 800bc7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	2202      	movs	r2, #2
 800bc84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	685b      	ldr	r3, [r3, #4]
 800bc8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	689b      	ldr	r3, [r3, #8]
 800bc96:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bca0:	683b      	ldr	r3, [r7, #0]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	68fa      	ldr	r2, [r7, #12]
 800bca6:	4313      	orrs	r3, r2
 800bca8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	68fa      	ldr	r2, [r7, #12]
 800bcb0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	4a21      	ldr	r2, [pc, #132]	; (800bd3c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800bcb8:	4293      	cmp	r3, r2
 800bcba:	d022      	beq.n	800bd02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bcc4:	d01d      	beq.n	800bd02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	4a1d      	ldr	r2, [pc, #116]	; (800bd40 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800bccc:	4293      	cmp	r3, r2
 800bcce:	d018      	beq.n	800bd02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	4a1b      	ldr	r2, [pc, #108]	; (800bd44 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800bcd6:	4293      	cmp	r3, r2
 800bcd8:	d013      	beq.n	800bd02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	4a1a      	ldr	r2, [pc, #104]	; (800bd48 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800bce0:	4293      	cmp	r3, r2
 800bce2:	d00e      	beq.n	800bd02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	4a18      	ldr	r2, [pc, #96]	; (800bd4c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800bcea:	4293      	cmp	r3, r2
 800bcec:	d009      	beq.n	800bd02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	4a17      	ldr	r2, [pc, #92]	; (800bd50 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800bcf4:	4293      	cmp	r3, r2
 800bcf6:	d004      	beq.n	800bd02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	4a15      	ldr	r2, [pc, #84]	; (800bd54 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800bcfe:	4293      	cmp	r3, r2
 800bd00:	d10c      	bne.n	800bd1c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bd02:	68bb      	ldr	r3, [r7, #8]
 800bd04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bd08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bd0a:	683b      	ldr	r3, [r7, #0]
 800bd0c:	685b      	ldr	r3, [r3, #4]
 800bd0e:	68ba      	ldr	r2, [r7, #8]
 800bd10:	4313      	orrs	r3, r2
 800bd12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	68ba      	ldr	r2, [r7, #8]
 800bd1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	2201      	movs	r2, #1
 800bd20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	2200      	movs	r2, #0
 800bd28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bd2c:	2300      	movs	r3, #0
}
 800bd2e:	4618      	mov	r0, r3
 800bd30:	3714      	adds	r7, #20
 800bd32:	46bd      	mov	sp, r7
 800bd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd38:	4770      	bx	lr
 800bd3a:	bf00      	nop
 800bd3c:	40010000 	.word	0x40010000
 800bd40:	40000400 	.word	0x40000400
 800bd44:	40000800 	.word	0x40000800
 800bd48:	40000c00 	.word	0x40000c00
 800bd4c:	40010400 	.word	0x40010400
 800bd50:	40014000 	.word	0x40014000
 800bd54:	40001800 	.word	0x40001800

0800bd58 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800bd58:	b480      	push	{r7}
 800bd5a:	b085      	sub	sp, #20
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	6078      	str	r0, [r7, #4]
 800bd60:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800bd62:	2300      	movs	r3, #0
 800bd64:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bd6c:	2b01      	cmp	r3, #1
 800bd6e:	d101      	bne.n	800bd74 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800bd70:	2302      	movs	r3, #2
 800bd72:	e03d      	b.n	800bdf0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	2201      	movs	r2, #1
 800bd78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800bd82:	683b      	ldr	r3, [r7, #0]
 800bd84:	68db      	ldr	r3, [r3, #12]
 800bd86:	4313      	orrs	r3, r2
 800bd88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bd90:	683b      	ldr	r3, [r7, #0]
 800bd92:	689b      	ldr	r3, [r3, #8]
 800bd94:	4313      	orrs	r3, r2
 800bd96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800bd9e:	683b      	ldr	r3, [r7, #0]
 800bda0:	685b      	ldr	r3, [r3, #4]
 800bda2:	4313      	orrs	r3, r2
 800bda4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800bdac:	683b      	ldr	r3, [r7, #0]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	4313      	orrs	r3, r2
 800bdb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bdba:	683b      	ldr	r3, [r7, #0]
 800bdbc:	691b      	ldr	r3, [r3, #16]
 800bdbe:	4313      	orrs	r3, r2
 800bdc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800bdc8:	683b      	ldr	r3, [r7, #0]
 800bdca:	695b      	ldr	r3, [r3, #20]
 800bdcc:	4313      	orrs	r3, r2
 800bdce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800bdd6:	683b      	ldr	r3, [r7, #0]
 800bdd8:	69db      	ldr	r3, [r3, #28]
 800bdda:	4313      	orrs	r3, r2
 800bddc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	68fa      	ldr	r2, [r7, #12]
 800bde4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	2200      	movs	r2, #0
 800bdea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bdee:	2300      	movs	r3, #0
}
 800bdf0:	4618      	mov	r0, r3
 800bdf2:	3714      	adds	r7, #20
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfa:	4770      	bx	lr

0800bdfc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bdfc:	b480      	push	{r7}
 800bdfe:	b083      	sub	sp, #12
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800be04:	bf00      	nop
 800be06:	370c      	adds	r7, #12
 800be08:	46bd      	mov	sp, r7
 800be0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0e:	4770      	bx	lr

0800be10 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800be10:	b480      	push	{r7}
 800be12:	b083      	sub	sp, #12
 800be14:	af00      	add	r7, sp, #0
 800be16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800be18:	bf00      	nop
 800be1a:	370c      	adds	r7, #12
 800be1c:	46bd      	mov	sp, r7
 800be1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be22:	4770      	bx	lr

0800be24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800be24:	b580      	push	{r7, lr}
 800be26:	b082      	sub	sp, #8
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d101      	bne.n	800be36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800be32:	2301      	movs	r3, #1
 800be34:	e03f      	b.n	800beb6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800be3c:	b2db      	uxtb	r3, r3
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d106      	bne.n	800be50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	2200      	movs	r2, #0
 800be46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800be4a:	6878      	ldr	r0, [r7, #4]
 800be4c:	f7f9 f97c 	bl	8005148 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	2224      	movs	r2, #36	; 0x24
 800be54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	68da      	ldr	r2, [r3, #12]
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800be66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800be68:	6878      	ldr	r0, [r7, #4]
 800be6a:	f000 f829 	bl	800bec0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	691a      	ldr	r2, [r3, #16]
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800be7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	695a      	ldr	r2, [r3, #20]
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800be8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	68da      	ldr	r2, [r3, #12]
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800be9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	2200      	movs	r2, #0
 800bea2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	2220      	movs	r2, #32
 800bea8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	2220      	movs	r2, #32
 800beb0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800beb4:	2300      	movs	r3, #0
}
 800beb6:	4618      	mov	r0, r3
 800beb8:	3708      	adds	r7, #8
 800beba:	46bd      	mov	sp, r7
 800bebc:	bd80      	pop	{r7, pc}
	...

0800bec0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bec4:	b085      	sub	sp, #20
 800bec6:	af00      	add	r7, sp, #0
 800bec8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	691b      	ldr	r3, [r3, #16]
 800bed0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	68da      	ldr	r2, [r3, #12]
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	430a      	orrs	r2, r1
 800bede:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	689a      	ldr	r2, [r3, #8]
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	691b      	ldr	r3, [r3, #16]
 800bee8:	431a      	orrs	r2, r3
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	695b      	ldr	r3, [r3, #20]
 800beee:	431a      	orrs	r2, r3
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	69db      	ldr	r3, [r3, #28]
 800bef4:	4313      	orrs	r3, r2
 800bef6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	68db      	ldr	r3, [r3, #12]
 800befe:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800bf02:	f023 030c 	bic.w	r3, r3, #12
 800bf06:	687a      	ldr	r2, [r7, #4]
 800bf08:	6812      	ldr	r2, [r2, #0]
 800bf0a:	68f9      	ldr	r1, [r7, #12]
 800bf0c:	430b      	orrs	r3, r1
 800bf0e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	695b      	ldr	r3, [r3, #20]
 800bf16:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	699a      	ldr	r2, [r3, #24]
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	430a      	orrs	r2, r1
 800bf24:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	69db      	ldr	r3, [r3, #28]
 800bf2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bf2e:	f040 818b 	bne.w	800c248 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	4ac1      	ldr	r2, [pc, #772]	; (800c23c <UART_SetConfig+0x37c>)
 800bf38:	4293      	cmp	r3, r2
 800bf3a:	d005      	beq.n	800bf48 <UART_SetConfig+0x88>
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	4abf      	ldr	r2, [pc, #764]	; (800c240 <UART_SetConfig+0x380>)
 800bf42:	4293      	cmp	r3, r2
 800bf44:	f040 80bd 	bne.w	800c0c2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800bf48:	f7fc fbcc 	bl	80086e4 <HAL_RCC_GetPCLK2Freq>
 800bf4c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800bf4e:	68bb      	ldr	r3, [r7, #8]
 800bf50:	461d      	mov	r5, r3
 800bf52:	f04f 0600 	mov.w	r6, #0
 800bf56:	46a8      	mov	r8, r5
 800bf58:	46b1      	mov	r9, r6
 800bf5a:	eb18 0308 	adds.w	r3, r8, r8
 800bf5e:	eb49 0409 	adc.w	r4, r9, r9
 800bf62:	4698      	mov	r8, r3
 800bf64:	46a1      	mov	r9, r4
 800bf66:	eb18 0805 	adds.w	r8, r8, r5
 800bf6a:	eb49 0906 	adc.w	r9, r9, r6
 800bf6e:	f04f 0100 	mov.w	r1, #0
 800bf72:	f04f 0200 	mov.w	r2, #0
 800bf76:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800bf7a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800bf7e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800bf82:	4688      	mov	r8, r1
 800bf84:	4691      	mov	r9, r2
 800bf86:	eb18 0005 	adds.w	r0, r8, r5
 800bf8a:	eb49 0106 	adc.w	r1, r9, r6
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	685b      	ldr	r3, [r3, #4]
 800bf92:	461d      	mov	r5, r3
 800bf94:	f04f 0600 	mov.w	r6, #0
 800bf98:	196b      	adds	r3, r5, r5
 800bf9a:	eb46 0406 	adc.w	r4, r6, r6
 800bf9e:	461a      	mov	r2, r3
 800bfa0:	4623      	mov	r3, r4
 800bfa2:	f7f4 fe89 	bl	8000cb8 <__aeabi_uldivmod>
 800bfa6:	4603      	mov	r3, r0
 800bfa8:	460c      	mov	r4, r1
 800bfaa:	461a      	mov	r2, r3
 800bfac:	4ba5      	ldr	r3, [pc, #660]	; (800c244 <UART_SetConfig+0x384>)
 800bfae:	fba3 2302 	umull	r2, r3, r3, r2
 800bfb2:	095b      	lsrs	r3, r3, #5
 800bfb4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800bfb8:	68bb      	ldr	r3, [r7, #8]
 800bfba:	461d      	mov	r5, r3
 800bfbc:	f04f 0600 	mov.w	r6, #0
 800bfc0:	46a9      	mov	r9, r5
 800bfc2:	46b2      	mov	sl, r6
 800bfc4:	eb19 0309 	adds.w	r3, r9, r9
 800bfc8:	eb4a 040a 	adc.w	r4, sl, sl
 800bfcc:	4699      	mov	r9, r3
 800bfce:	46a2      	mov	sl, r4
 800bfd0:	eb19 0905 	adds.w	r9, r9, r5
 800bfd4:	eb4a 0a06 	adc.w	sl, sl, r6
 800bfd8:	f04f 0100 	mov.w	r1, #0
 800bfdc:	f04f 0200 	mov.w	r2, #0
 800bfe0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bfe4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800bfe8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800bfec:	4689      	mov	r9, r1
 800bfee:	4692      	mov	sl, r2
 800bff0:	eb19 0005 	adds.w	r0, r9, r5
 800bff4:	eb4a 0106 	adc.w	r1, sl, r6
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	685b      	ldr	r3, [r3, #4]
 800bffc:	461d      	mov	r5, r3
 800bffe:	f04f 0600 	mov.w	r6, #0
 800c002:	196b      	adds	r3, r5, r5
 800c004:	eb46 0406 	adc.w	r4, r6, r6
 800c008:	461a      	mov	r2, r3
 800c00a:	4623      	mov	r3, r4
 800c00c:	f7f4 fe54 	bl	8000cb8 <__aeabi_uldivmod>
 800c010:	4603      	mov	r3, r0
 800c012:	460c      	mov	r4, r1
 800c014:	461a      	mov	r2, r3
 800c016:	4b8b      	ldr	r3, [pc, #556]	; (800c244 <UART_SetConfig+0x384>)
 800c018:	fba3 1302 	umull	r1, r3, r3, r2
 800c01c:	095b      	lsrs	r3, r3, #5
 800c01e:	2164      	movs	r1, #100	; 0x64
 800c020:	fb01 f303 	mul.w	r3, r1, r3
 800c024:	1ad3      	subs	r3, r2, r3
 800c026:	00db      	lsls	r3, r3, #3
 800c028:	3332      	adds	r3, #50	; 0x32
 800c02a:	4a86      	ldr	r2, [pc, #536]	; (800c244 <UART_SetConfig+0x384>)
 800c02c:	fba2 2303 	umull	r2, r3, r2, r3
 800c030:	095b      	lsrs	r3, r3, #5
 800c032:	005b      	lsls	r3, r3, #1
 800c034:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c038:	4498      	add	r8, r3
 800c03a:	68bb      	ldr	r3, [r7, #8]
 800c03c:	461d      	mov	r5, r3
 800c03e:	f04f 0600 	mov.w	r6, #0
 800c042:	46a9      	mov	r9, r5
 800c044:	46b2      	mov	sl, r6
 800c046:	eb19 0309 	adds.w	r3, r9, r9
 800c04a:	eb4a 040a 	adc.w	r4, sl, sl
 800c04e:	4699      	mov	r9, r3
 800c050:	46a2      	mov	sl, r4
 800c052:	eb19 0905 	adds.w	r9, r9, r5
 800c056:	eb4a 0a06 	adc.w	sl, sl, r6
 800c05a:	f04f 0100 	mov.w	r1, #0
 800c05e:	f04f 0200 	mov.w	r2, #0
 800c062:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c066:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800c06a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800c06e:	4689      	mov	r9, r1
 800c070:	4692      	mov	sl, r2
 800c072:	eb19 0005 	adds.w	r0, r9, r5
 800c076:	eb4a 0106 	adc.w	r1, sl, r6
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	685b      	ldr	r3, [r3, #4]
 800c07e:	461d      	mov	r5, r3
 800c080:	f04f 0600 	mov.w	r6, #0
 800c084:	196b      	adds	r3, r5, r5
 800c086:	eb46 0406 	adc.w	r4, r6, r6
 800c08a:	461a      	mov	r2, r3
 800c08c:	4623      	mov	r3, r4
 800c08e:	f7f4 fe13 	bl	8000cb8 <__aeabi_uldivmod>
 800c092:	4603      	mov	r3, r0
 800c094:	460c      	mov	r4, r1
 800c096:	461a      	mov	r2, r3
 800c098:	4b6a      	ldr	r3, [pc, #424]	; (800c244 <UART_SetConfig+0x384>)
 800c09a:	fba3 1302 	umull	r1, r3, r3, r2
 800c09e:	095b      	lsrs	r3, r3, #5
 800c0a0:	2164      	movs	r1, #100	; 0x64
 800c0a2:	fb01 f303 	mul.w	r3, r1, r3
 800c0a6:	1ad3      	subs	r3, r2, r3
 800c0a8:	00db      	lsls	r3, r3, #3
 800c0aa:	3332      	adds	r3, #50	; 0x32
 800c0ac:	4a65      	ldr	r2, [pc, #404]	; (800c244 <UART_SetConfig+0x384>)
 800c0ae:	fba2 2303 	umull	r2, r3, r2, r3
 800c0b2:	095b      	lsrs	r3, r3, #5
 800c0b4:	f003 0207 	and.w	r2, r3, #7
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	4442      	add	r2, r8
 800c0be:	609a      	str	r2, [r3, #8]
 800c0c0:	e26f      	b.n	800c5a2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c0c2:	f7fc fafb 	bl	80086bc <HAL_RCC_GetPCLK1Freq>
 800c0c6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c0c8:	68bb      	ldr	r3, [r7, #8]
 800c0ca:	461d      	mov	r5, r3
 800c0cc:	f04f 0600 	mov.w	r6, #0
 800c0d0:	46a8      	mov	r8, r5
 800c0d2:	46b1      	mov	r9, r6
 800c0d4:	eb18 0308 	adds.w	r3, r8, r8
 800c0d8:	eb49 0409 	adc.w	r4, r9, r9
 800c0dc:	4698      	mov	r8, r3
 800c0de:	46a1      	mov	r9, r4
 800c0e0:	eb18 0805 	adds.w	r8, r8, r5
 800c0e4:	eb49 0906 	adc.w	r9, r9, r6
 800c0e8:	f04f 0100 	mov.w	r1, #0
 800c0ec:	f04f 0200 	mov.w	r2, #0
 800c0f0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800c0f4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800c0f8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800c0fc:	4688      	mov	r8, r1
 800c0fe:	4691      	mov	r9, r2
 800c100:	eb18 0005 	adds.w	r0, r8, r5
 800c104:	eb49 0106 	adc.w	r1, r9, r6
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	685b      	ldr	r3, [r3, #4]
 800c10c:	461d      	mov	r5, r3
 800c10e:	f04f 0600 	mov.w	r6, #0
 800c112:	196b      	adds	r3, r5, r5
 800c114:	eb46 0406 	adc.w	r4, r6, r6
 800c118:	461a      	mov	r2, r3
 800c11a:	4623      	mov	r3, r4
 800c11c:	f7f4 fdcc 	bl	8000cb8 <__aeabi_uldivmod>
 800c120:	4603      	mov	r3, r0
 800c122:	460c      	mov	r4, r1
 800c124:	461a      	mov	r2, r3
 800c126:	4b47      	ldr	r3, [pc, #284]	; (800c244 <UART_SetConfig+0x384>)
 800c128:	fba3 2302 	umull	r2, r3, r3, r2
 800c12c:	095b      	lsrs	r3, r3, #5
 800c12e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800c132:	68bb      	ldr	r3, [r7, #8]
 800c134:	461d      	mov	r5, r3
 800c136:	f04f 0600 	mov.w	r6, #0
 800c13a:	46a9      	mov	r9, r5
 800c13c:	46b2      	mov	sl, r6
 800c13e:	eb19 0309 	adds.w	r3, r9, r9
 800c142:	eb4a 040a 	adc.w	r4, sl, sl
 800c146:	4699      	mov	r9, r3
 800c148:	46a2      	mov	sl, r4
 800c14a:	eb19 0905 	adds.w	r9, r9, r5
 800c14e:	eb4a 0a06 	adc.w	sl, sl, r6
 800c152:	f04f 0100 	mov.w	r1, #0
 800c156:	f04f 0200 	mov.w	r2, #0
 800c15a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c15e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800c162:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800c166:	4689      	mov	r9, r1
 800c168:	4692      	mov	sl, r2
 800c16a:	eb19 0005 	adds.w	r0, r9, r5
 800c16e:	eb4a 0106 	adc.w	r1, sl, r6
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	685b      	ldr	r3, [r3, #4]
 800c176:	461d      	mov	r5, r3
 800c178:	f04f 0600 	mov.w	r6, #0
 800c17c:	196b      	adds	r3, r5, r5
 800c17e:	eb46 0406 	adc.w	r4, r6, r6
 800c182:	461a      	mov	r2, r3
 800c184:	4623      	mov	r3, r4
 800c186:	f7f4 fd97 	bl	8000cb8 <__aeabi_uldivmod>
 800c18a:	4603      	mov	r3, r0
 800c18c:	460c      	mov	r4, r1
 800c18e:	461a      	mov	r2, r3
 800c190:	4b2c      	ldr	r3, [pc, #176]	; (800c244 <UART_SetConfig+0x384>)
 800c192:	fba3 1302 	umull	r1, r3, r3, r2
 800c196:	095b      	lsrs	r3, r3, #5
 800c198:	2164      	movs	r1, #100	; 0x64
 800c19a:	fb01 f303 	mul.w	r3, r1, r3
 800c19e:	1ad3      	subs	r3, r2, r3
 800c1a0:	00db      	lsls	r3, r3, #3
 800c1a2:	3332      	adds	r3, #50	; 0x32
 800c1a4:	4a27      	ldr	r2, [pc, #156]	; (800c244 <UART_SetConfig+0x384>)
 800c1a6:	fba2 2303 	umull	r2, r3, r2, r3
 800c1aa:	095b      	lsrs	r3, r3, #5
 800c1ac:	005b      	lsls	r3, r3, #1
 800c1ae:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c1b2:	4498      	add	r8, r3
 800c1b4:	68bb      	ldr	r3, [r7, #8]
 800c1b6:	461d      	mov	r5, r3
 800c1b8:	f04f 0600 	mov.w	r6, #0
 800c1bc:	46a9      	mov	r9, r5
 800c1be:	46b2      	mov	sl, r6
 800c1c0:	eb19 0309 	adds.w	r3, r9, r9
 800c1c4:	eb4a 040a 	adc.w	r4, sl, sl
 800c1c8:	4699      	mov	r9, r3
 800c1ca:	46a2      	mov	sl, r4
 800c1cc:	eb19 0905 	adds.w	r9, r9, r5
 800c1d0:	eb4a 0a06 	adc.w	sl, sl, r6
 800c1d4:	f04f 0100 	mov.w	r1, #0
 800c1d8:	f04f 0200 	mov.w	r2, #0
 800c1dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c1e0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800c1e4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800c1e8:	4689      	mov	r9, r1
 800c1ea:	4692      	mov	sl, r2
 800c1ec:	eb19 0005 	adds.w	r0, r9, r5
 800c1f0:	eb4a 0106 	adc.w	r1, sl, r6
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	685b      	ldr	r3, [r3, #4]
 800c1f8:	461d      	mov	r5, r3
 800c1fa:	f04f 0600 	mov.w	r6, #0
 800c1fe:	196b      	adds	r3, r5, r5
 800c200:	eb46 0406 	adc.w	r4, r6, r6
 800c204:	461a      	mov	r2, r3
 800c206:	4623      	mov	r3, r4
 800c208:	f7f4 fd56 	bl	8000cb8 <__aeabi_uldivmod>
 800c20c:	4603      	mov	r3, r0
 800c20e:	460c      	mov	r4, r1
 800c210:	461a      	mov	r2, r3
 800c212:	4b0c      	ldr	r3, [pc, #48]	; (800c244 <UART_SetConfig+0x384>)
 800c214:	fba3 1302 	umull	r1, r3, r3, r2
 800c218:	095b      	lsrs	r3, r3, #5
 800c21a:	2164      	movs	r1, #100	; 0x64
 800c21c:	fb01 f303 	mul.w	r3, r1, r3
 800c220:	1ad3      	subs	r3, r2, r3
 800c222:	00db      	lsls	r3, r3, #3
 800c224:	3332      	adds	r3, #50	; 0x32
 800c226:	4a07      	ldr	r2, [pc, #28]	; (800c244 <UART_SetConfig+0x384>)
 800c228:	fba2 2303 	umull	r2, r3, r2, r3
 800c22c:	095b      	lsrs	r3, r3, #5
 800c22e:	f003 0207 	and.w	r2, r3, #7
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	4442      	add	r2, r8
 800c238:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800c23a:	e1b2      	b.n	800c5a2 <UART_SetConfig+0x6e2>
 800c23c:	40011000 	.word	0x40011000
 800c240:	40011400 	.word	0x40011400
 800c244:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	4ad7      	ldr	r2, [pc, #860]	; (800c5ac <UART_SetConfig+0x6ec>)
 800c24e:	4293      	cmp	r3, r2
 800c250:	d005      	beq.n	800c25e <UART_SetConfig+0x39e>
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	4ad6      	ldr	r2, [pc, #856]	; (800c5b0 <UART_SetConfig+0x6f0>)
 800c258:	4293      	cmp	r3, r2
 800c25a:	f040 80d1 	bne.w	800c400 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800c25e:	f7fc fa41 	bl	80086e4 <HAL_RCC_GetPCLK2Freq>
 800c262:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c264:	68bb      	ldr	r3, [r7, #8]
 800c266:	469a      	mov	sl, r3
 800c268:	f04f 0b00 	mov.w	fp, #0
 800c26c:	46d0      	mov	r8, sl
 800c26e:	46d9      	mov	r9, fp
 800c270:	eb18 0308 	adds.w	r3, r8, r8
 800c274:	eb49 0409 	adc.w	r4, r9, r9
 800c278:	4698      	mov	r8, r3
 800c27a:	46a1      	mov	r9, r4
 800c27c:	eb18 080a 	adds.w	r8, r8, sl
 800c280:	eb49 090b 	adc.w	r9, r9, fp
 800c284:	f04f 0100 	mov.w	r1, #0
 800c288:	f04f 0200 	mov.w	r2, #0
 800c28c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800c290:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800c294:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800c298:	4688      	mov	r8, r1
 800c29a:	4691      	mov	r9, r2
 800c29c:	eb1a 0508 	adds.w	r5, sl, r8
 800c2a0:	eb4b 0609 	adc.w	r6, fp, r9
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	685b      	ldr	r3, [r3, #4]
 800c2a8:	4619      	mov	r1, r3
 800c2aa:	f04f 0200 	mov.w	r2, #0
 800c2ae:	f04f 0300 	mov.w	r3, #0
 800c2b2:	f04f 0400 	mov.w	r4, #0
 800c2b6:	0094      	lsls	r4, r2, #2
 800c2b8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800c2bc:	008b      	lsls	r3, r1, #2
 800c2be:	461a      	mov	r2, r3
 800c2c0:	4623      	mov	r3, r4
 800c2c2:	4628      	mov	r0, r5
 800c2c4:	4631      	mov	r1, r6
 800c2c6:	f7f4 fcf7 	bl	8000cb8 <__aeabi_uldivmod>
 800c2ca:	4603      	mov	r3, r0
 800c2cc:	460c      	mov	r4, r1
 800c2ce:	461a      	mov	r2, r3
 800c2d0:	4bb8      	ldr	r3, [pc, #736]	; (800c5b4 <UART_SetConfig+0x6f4>)
 800c2d2:	fba3 2302 	umull	r2, r3, r3, r2
 800c2d6:	095b      	lsrs	r3, r3, #5
 800c2d8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800c2dc:	68bb      	ldr	r3, [r7, #8]
 800c2de:	469b      	mov	fp, r3
 800c2e0:	f04f 0c00 	mov.w	ip, #0
 800c2e4:	46d9      	mov	r9, fp
 800c2e6:	46e2      	mov	sl, ip
 800c2e8:	eb19 0309 	adds.w	r3, r9, r9
 800c2ec:	eb4a 040a 	adc.w	r4, sl, sl
 800c2f0:	4699      	mov	r9, r3
 800c2f2:	46a2      	mov	sl, r4
 800c2f4:	eb19 090b 	adds.w	r9, r9, fp
 800c2f8:	eb4a 0a0c 	adc.w	sl, sl, ip
 800c2fc:	f04f 0100 	mov.w	r1, #0
 800c300:	f04f 0200 	mov.w	r2, #0
 800c304:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c308:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800c30c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800c310:	4689      	mov	r9, r1
 800c312:	4692      	mov	sl, r2
 800c314:	eb1b 0509 	adds.w	r5, fp, r9
 800c318:	eb4c 060a 	adc.w	r6, ip, sl
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	685b      	ldr	r3, [r3, #4]
 800c320:	4619      	mov	r1, r3
 800c322:	f04f 0200 	mov.w	r2, #0
 800c326:	f04f 0300 	mov.w	r3, #0
 800c32a:	f04f 0400 	mov.w	r4, #0
 800c32e:	0094      	lsls	r4, r2, #2
 800c330:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800c334:	008b      	lsls	r3, r1, #2
 800c336:	461a      	mov	r2, r3
 800c338:	4623      	mov	r3, r4
 800c33a:	4628      	mov	r0, r5
 800c33c:	4631      	mov	r1, r6
 800c33e:	f7f4 fcbb 	bl	8000cb8 <__aeabi_uldivmod>
 800c342:	4603      	mov	r3, r0
 800c344:	460c      	mov	r4, r1
 800c346:	461a      	mov	r2, r3
 800c348:	4b9a      	ldr	r3, [pc, #616]	; (800c5b4 <UART_SetConfig+0x6f4>)
 800c34a:	fba3 1302 	umull	r1, r3, r3, r2
 800c34e:	095b      	lsrs	r3, r3, #5
 800c350:	2164      	movs	r1, #100	; 0x64
 800c352:	fb01 f303 	mul.w	r3, r1, r3
 800c356:	1ad3      	subs	r3, r2, r3
 800c358:	011b      	lsls	r3, r3, #4
 800c35a:	3332      	adds	r3, #50	; 0x32
 800c35c:	4a95      	ldr	r2, [pc, #596]	; (800c5b4 <UART_SetConfig+0x6f4>)
 800c35e:	fba2 2303 	umull	r2, r3, r2, r3
 800c362:	095b      	lsrs	r3, r3, #5
 800c364:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c368:	4498      	add	r8, r3
 800c36a:	68bb      	ldr	r3, [r7, #8]
 800c36c:	469b      	mov	fp, r3
 800c36e:	f04f 0c00 	mov.w	ip, #0
 800c372:	46d9      	mov	r9, fp
 800c374:	46e2      	mov	sl, ip
 800c376:	eb19 0309 	adds.w	r3, r9, r9
 800c37a:	eb4a 040a 	adc.w	r4, sl, sl
 800c37e:	4699      	mov	r9, r3
 800c380:	46a2      	mov	sl, r4
 800c382:	eb19 090b 	adds.w	r9, r9, fp
 800c386:	eb4a 0a0c 	adc.w	sl, sl, ip
 800c38a:	f04f 0100 	mov.w	r1, #0
 800c38e:	f04f 0200 	mov.w	r2, #0
 800c392:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c396:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800c39a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800c39e:	4689      	mov	r9, r1
 800c3a0:	4692      	mov	sl, r2
 800c3a2:	eb1b 0509 	adds.w	r5, fp, r9
 800c3a6:	eb4c 060a 	adc.w	r6, ip, sl
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	685b      	ldr	r3, [r3, #4]
 800c3ae:	4619      	mov	r1, r3
 800c3b0:	f04f 0200 	mov.w	r2, #0
 800c3b4:	f04f 0300 	mov.w	r3, #0
 800c3b8:	f04f 0400 	mov.w	r4, #0
 800c3bc:	0094      	lsls	r4, r2, #2
 800c3be:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800c3c2:	008b      	lsls	r3, r1, #2
 800c3c4:	461a      	mov	r2, r3
 800c3c6:	4623      	mov	r3, r4
 800c3c8:	4628      	mov	r0, r5
 800c3ca:	4631      	mov	r1, r6
 800c3cc:	f7f4 fc74 	bl	8000cb8 <__aeabi_uldivmod>
 800c3d0:	4603      	mov	r3, r0
 800c3d2:	460c      	mov	r4, r1
 800c3d4:	461a      	mov	r2, r3
 800c3d6:	4b77      	ldr	r3, [pc, #476]	; (800c5b4 <UART_SetConfig+0x6f4>)
 800c3d8:	fba3 1302 	umull	r1, r3, r3, r2
 800c3dc:	095b      	lsrs	r3, r3, #5
 800c3de:	2164      	movs	r1, #100	; 0x64
 800c3e0:	fb01 f303 	mul.w	r3, r1, r3
 800c3e4:	1ad3      	subs	r3, r2, r3
 800c3e6:	011b      	lsls	r3, r3, #4
 800c3e8:	3332      	adds	r3, #50	; 0x32
 800c3ea:	4a72      	ldr	r2, [pc, #456]	; (800c5b4 <UART_SetConfig+0x6f4>)
 800c3ec:	fba2 2303 	umull	r2, r3, r2, r3
 800c3f0:	095b      	lsrs	r3, r3, #5
 800c3f2:	f003 020f 	and.w	r2, r3, #15
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	4442      	add	r2, r8
 800c3fc:	609a      	str	r2, [r3, #8]
 800c3fe:	e0d0      	b.n	800c5a2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800c400:	f7fc f95c 	bl	80086bc <HAL_RCC_GetPCLK1Freq>
 800c404:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c406:	68bb      	ldr	r3, [r7, #8]
 800c408:	469a      	mov	sl, r3
 800c40a:	f04f 0b00 	mov.w	fp, #0
 800c40e:	46d0      	mov	r8, sl
 800c410:	46d9      	mov	r9, fp
 800c412:	eb18 0308 	adds.w	r3, r8, r8
 800c416:	eb49 0409 	adc.w	r4, r9, r9
 800c41a:	4698      	mov	r8, r3
 800c41c:	46a1      	mov	r9, r4
 800c41e:	eb18 080a 	adds.w	r8, r8, sl
 800c422:	eb49 090b 	adc.w	r9, r9, fp
 800c426:	f04f 0100 	mov.w	r1, #0
 800c42a:	f04f 0200 	mov.w	r2, #0
 800c42e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800c432:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800c436:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800c43a:	4688      	mov	r8, r1
 800c43c:	4691      	mov	r9, r2
 800c43e:	eb1a 0508 	adds.w	r5, sl, r8
 800c442:	eb4b 0609 	adc.w	r6, fp, r9
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	685b      	ldr	r3, [r3, #4]
 800c44a:	4619      	mov	r1, r3
 800c44c:	f04f 0200 	mov.w	r2, #0
 800c450:	f04f 0300 	mov.w	r3, #0
 800c454:	f04f 0400 	mov.w	r4, #0
 800c458:	0094      	lsls	r4, r2, #2
 800c45a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800c45e:	008b      	lsls	r3, r1, #2
 800c460:	461a      	mov	r2, r3
 800c462:	4623      	mov	r3, r4
 800c464:	4628      	mov	r0, r5
 800c466:	4631      	mov	r1, r6
 800c468:	f7f4 fc26 	bl	8000cb8 <__aeabi_uldivmod>
 800c46c:	4603      	mov	r3, r0
 800c46e:	460c      	mov	r4, r1
 800c470:	461a      	mov	r2, r3
 800c472:	4b50      	ldr	r3, [pc, #320]	; (800c5b4 <UART_SetConfig+0x6f4>)
 800c474:	fba3 2302 	umull	r2, r3, r3, r2
 800c478:	095b      	lsrs	r3, r3, #5
 800c47a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800c47e:	68bb      	ldr	r3, [r7, #8]
 800c480:	469b      	mov	fp, r3
 800c482:	f04f 0c00 	mov.w	ip, #0
 800c486:	46d9      	mov	r9, fp
 800c488:	46e2      	mov	sl, ip
 800c48a:	eb19 0309 	adds.w	r3, r9, r9
 800c48e:	eb4a 040a 	adc.w	r4, sl, sl
 800c492:	4699      	mov	r9, r3
 800c494:	46a2      	mov	sl, r4
 800c496:	eb19 090b 	adds.w	r9, r9, fp
 800c49a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800c49e:	f04f 0100 	mov.w	r1, #0
 800c4a2:	f04f 0200 	mov.w	r2, #0
 800c4a6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c4aa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800c4ae:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800c4b2:	4689      	mov	r9, r1
 800c4b4:	4692      	mov	sl, r2
 800c4b6:	eb1b 0509 	adds.w	r5, fp, r9
 800c4ba:	eb4c 060a 	adc.w	r6, ip, sl
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	685b      	ldr	r3, [r3, #4]
 800c4c2:	4619      	mov	r1, r3
 800c4c4:	f04f 0200 	mov.w	r2, #0
 800c4c8:	f04f 0300 	mov.w	r3, #0
 800c4cc:	f04f 0400 	mov.w	r4, #0
 800c4d0:	0094      	lsls	r4, r2, #2
 800c4d2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800c4d6:	008b      	lsls	r3, r1, #2
 800c4d8:	461a      	mov	r2, r3
 800c4da:	4623      	mov	r3, r4
 800c4dc:	4628      	mov	r0, r5
 800c4de:	4631      	mov	r1, r6
 800c4e0:	f7f4 fbea 	bl	8000cb8 <__aeabi_uldivmod>
 800c4e4:	4603      	mov	r3, r0
 800c4e6:	460c      	mov	r4, r1
 800c4e8:	461a      	mov	r2, r3
 800c4ea:	4b32      	ldr	r3, [pc, #200]	; (800c5b4 <UART_SetConfig+0x6f4>)
 800c4ec:	fba3 1302 	umull	r1, r3, r3, r2
 800c4f0:	095b      	lsrs	r3, r3, #5
 800c4f2:	2164      	movs	r1, #100	; 0x64
 800c4f4:	fb01 f303 	mul.w	r3, r1, r3
 800c4f8:	1ad3      	subs	r3, r2, r3
 800c4fa:	011b      	lsls	r3, r3, #4
 800c4fc:	3332      	adds	r3, #50	; 0x32
 800c4fe:	4a2d      	ldr	r2, [pc, #180]	; (800c5b4 <UART_SetConfig+0x6f4>)
 800c500:	fba2 2303 	umull	r2, r3, r2, r3
 800c504:	095b      	lsrs	r3, r3, #5
 800c506:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c50a:	4498      	add	r8, r3
 800c50c:	68bb      	ldr	r3, [r7, #8]
 800c50e:	469b      	mov	fp, r3
 800c510:	f04f 0c00 	mov.w	ip, #0
 800c514:	46d9      	mov	r9, fp
 800c516:	46e2      	mov	sl, ip
 800c518:	eb19 0309 	adds.w	r3, r9, r9
 800c51c:	eb4a 040a 	adc.w	r4, sl, sl
 800c520:	4699      	mov	r9, r3
 800c522:	46a2      	mov	sl, r4
 800c524:	eb19 090b 	adds.w	r9, r9, fp
 800c528:	eb4a 0a0c 	adc.w	sl, sl, ip
 800c52c:	f04f 0100 	mov.w	r1, #0
 800c530:	f04f 0200 	mov.w	r2, #0
 800c534:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c538:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800c53c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800c540:	4689      	mov	r9, r1
 800c542:	4692      	mov	sl, r2
 800c544:	eb1b 0509 	adds.w	r5, fp, r9
 800c548:	eb4c 060a 	adc.w	r6, ip, sl
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	685b      	ldr	r3, [r3, #4]
 800c550:	4619      	mov	r1, r3
 800c552:	f04f 0200 	mov.w	r2, #0
 800c556:	f04f 0300 	mov.w	r3, #0
 800c55a:	f04f 0400 	mov.w	r4, #0
 800c55e:	0094      	lsls	r4, r2, #2
 800c560:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800c564:	008b      	lsls	r3, r1, #2
 800c566:	461a      	mov	r2, r3
 800c568:	4623      	mov	r3, r4
 800c56a:	4628      	mov	r0, r5
 800c56c:	4631      	mov	r1, r6
 800c56e:	f7f4 fba3 	bl	8000cb8 <__aeabi_uldivmod>
 800c572:	4603      	mov	r3, r0
 800c574:	460c      	mov	r4, r1
 800c576:	461a      	mov	r2, r3
 800c578:	4b0e      	ldr	r3, [pc, #56]	; (800c5b4 <UART_SetConfig+0x6f4>)
 800c57a:	fba3 1302 	umull	r1, r3, r3, r2
 800c57e:	095b      	lsrs	r3, r3, #5
 800c580:	2164      	movs	r1, #100	; 0x64
 800c582:	fb01 f303 	mul.w	r3, r1, r3
 800c586:	1ad3      	subs	r3, r2, r3
 800c588:	011b      	lsls	r3, r3, #4
 800c58a:	3332      	adds	r3, #50	; 0x32
 800c58c:	4a09      	ldr	r2, [pc, #36]	; (800c5b4 <UART_SetConfig+0x6f4>)
 800c58e:	fba2 2303 	umull	r2, r3, r2, r3
 800c592:	095b      	lsrs	r3, r3, #5
 800c594:	f003 020f 	and.w	r2, r3, #15
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	4442      	add	r2, r8
 800c59e:	609a      	str	r2, [r3, #8]
}
 800c5a0:	e7ff      	b.n	800c5a2 <UART_SetConfig+0x6e2>
 800c5a2:	bf00      	nop
 800c5a4:	3714      	adds	r7, #20
 800c5a6:	46bd      	mov	sp, r7
 800c5a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5ac:	40011000 	.word	0x40011000
 800c5b0:	40011400 	.word	0x40011400
 800c5b4:	51eb851f 	.word	0x51eb851f

0800c5b8 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800c5b8:	b084      	sub	sp, #16
 800c5ba:	b480      	push	{r7}
 800c5bc:	b085      	sub	sp, #20
 800c5be:	af00      	add	r7, sp, #0
 800c5c0:	6078      	str	r0, [r7, #4]
 800c5c2:	f107 001c 	add.w	r0, r7, #28
 800c5c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800c5ce:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800c5d0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800c5d2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800c5d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800c5d6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800c5d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800c5da:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800c5dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800c5de:	431a      	orrs	r2, r3
             Init.ClockDiv
 800c5e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800c5e2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800c5e4:	68fa      	ldr	r2, [r7, #12]
 800c5e6:	4313      	orrs	r3, r2
 800c5e8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	685b      	ldr	r3, [r3, #4]
 800c5ee:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800c5f2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c5f6:	68fa      	ldr	r2, [r7, #12]
 800c5f8:	431a      	orrs	r2, r3
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800c5fe:	2300      	movs	r3, #0
}
 800c600:	4618      	mov	r0, r3
 800c602:	3714      	adds	r7, #20
 800c604:	46bd      	mov	sp, r7
 800c606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60a:	b004      	add	sp, #16
 800c60c:	4770      	bx	lr

0800c60e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800c60e:	b480      	push	{r7}
 800c610:	b083      	sub	sp, #12
 800c612:	af00      	add	r7, sp, #0
 800c614:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800c61c:	4618      	mov	r0, r3
 800c61e:	370c      	adds	r7, #12
 800c620:	46bd      	mov	sp, r7
 800c622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c626:	4770      	bx	lr

0800c628 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800c628:	b480      	push	{r7}
 800c62a:	b083      	sub	sp, #12
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	6078      	str	r0, [r7, #4]
 800c630:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800c632:	683b      	ldr	r3, [r7, #0]
 800c634:	681a      	ldr	r2, [r3, #0]
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c63c:	2300      	movs	r3, #0
}
 800c63e:	4618      	mov	r0, r3
 800c640:	370c      	adds	r7, #12
 800c642:	46bd      	mov	sp, r7
 800c644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c648:	4770      	bx	lr

0800c64a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800c64a:	b580      	push	{r7, lr}
 800c64c:	b082      	sub	sp, #8
 800c64e:	af00      	add	r7, sp, #0
 800c650:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	2203      	movs	r2, #3
 800c656:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800c658:	2002      	movs	r0, #2
 800c65a:	f7f9 fbc5 	bl	8005de8 <HAL_Delay>
  
  return HAL_OK;
 800c65e:	2300      	movs	r3, #0
}
 800c660:	4618      	mov	r0, r3
 800c662:	3708      	adds	r7, #8
 800c664:	46bd      	mov	sp, r7
 800c666:	bd80      	pop	{r7, pc}

0800c668 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800c668:	b480      	push	{r7}
 800c66a:	b083      	sub	sp, #12
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	f003 0303 	and.w	r3, r3, #3
}
 800c678:	4618      	mov	r0, r3
 800c67a:	370c      	adds	r7, #12
 800c67c:	46bd      	mov	sp, r7
 800c67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c682:	4770      	bx	lr

0800c684 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800c684:	b480      	push	{r7}
 800c686:	b085      	sub	sp, #20
 800c688:	af00      	add	r7, sp, #0
 800c68a:	6078      	str	r0, [r7, #4]
 800c68c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c68e:	2300      	movs	r3, #0
 800c690:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800c692:	683b      	ldr	r3, [r7, #0]
 800c694:	681a      	ldr	r2, [r3, #0]
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c69a:	683b      	ldr	r3, [r7, #0]
 800c69c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800c69e:	683b      	ldr	r3, [r7, #0]
 800c6a0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c6a2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800c6a4:	683b      	ldr	r3, [r7, #0]
 800c6a6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800c6a8:	431a      	orrs	r2, r3
                       Command->CPSM);
 800c6aa:	683b      	ldr	r3, [r7, #0]
 800c6ac:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800c6ae:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c6b0:	68fa      	ldr	r2, [r7, #12]
 800c6b2:	4313      	orrs	r3, r2
 800c6b4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	68db      	ldr	r3, [r3, #12]
 800c6ba:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800c6be:	f023 030f 	bic.w	r3, r3, #15
 800c6c2:	68fa      	ldr	r2, [r7, #12]
 800c6c4:	431a      	orrs	r2, r3
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800c6ca:	2300      	movs	r3, #0
}
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	3714      	adds	r7, #20
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d6:	4770      	bx	lr

0800c6d8 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800c6d8:	b480      	push	{r7}
 800c6da:	b083      	sub	sp, #12
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	691b      	ldr	r3, [r3, #16]
 800c6e4:	b2db      	uxtb	r3, r3
}
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	370c      	adds	r7, #12
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f0:	4770      	bx	lr

0800c6f2 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800c6f2:	b480      	push	{r7}
 800c6f4:	b085      	sub	sp, #20
 800c6f6:	af00      	add	r7, sp, #0
 800c6f8:	6078      	str	r0, [r7, #4]
 800c6fa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	3314      	adds	r3, #20
 800c700:	461a      	mov	r2, r3
 800c702:	683b      	ldr	r3, [r7, #0]
 800c704:	4413      	add	r3, r2
 800c706:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	681b      	ldr	r3, [r3, #0]
}  
 800c70c:	4618      	mov	r0, r3
 800c70e:	3714      	adds	r7, #20
 800c710:	46bd      	mov	sp, r7
 800c712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c716:	4770      	bx	lr

0800c718 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800c718:	b480      	push	{r7}
 800c71a:	b085      	sub	sp, #20
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	6078      	str	r0, [r7, #4]
 800c720:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c722:	2300      	movs	r3, #0
 800c724:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800c726:	683b      	ldr	r3, [r7, #0]
 800c728:	681a      	ldr	r2, [r3, #0]
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800c72e:	683b      	ldr	r3, [r7, #0]
 800c730:	685a      	ldr	r2, [r3, #4]
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c736:	683b      	ldr	r3, [r7, #0]
 800c738:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800c73a:	683b      	ldr	r3, [r7, #0]
 800c73c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c73e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800c740:	683b      	ldr	r3, [r7, #0]
 800c742:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800c744:	431a      	orrs	r2, r3
                       Data->DPSM);
 800c746:	683b      	ldr	r3, [r7, #0]
 800c748:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800c74a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c74c:	68fa      	ldr	r2, [r7, #12]
 800c74e:	4313      	orrs	r3, r2
 800c750:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c756:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	431a      	orrs	r2, r3
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800c762:	2300      	movs	r3, #0

}
 800c764:	4618      	mov	r0, r3
 800c766:	3714      	adds	r7, #20
 800c768:	46bd      	mov	sp, r7
 800c76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76e:	4770      	bx	lr

0800c770 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800c770:	b580      	push	{r7, lr}
 800c772:	b088      	sub	sp, #32
 800c774:	af00      	add	r7, sp, #0
 800c776:	6078      	str	r0, [r7, #4]
 800c778:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800c77a:	683b      	ldr	r3, [r7, #0]
 800c77c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800c77e:	2310      	movs	r3, #16
 800c780:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c782:	2340      	movs	r3, #64	; 0x40
 800c784:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c786:	2300      	movs	r3, #0
 800c788:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c78a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c78e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c790:	f107 0308 	add.w	r3, r7, #8
 800c794:	4619      	mov	r1, r3
 800c796:	6878      	ldr	r0, [r7, #4]
 800c798:	f7ff ff74 	bl	800c684 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800c79c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c7a0:	2110      	movs	r1, #16
 800c7a2:	6878      	ldr	r0, [r7, #4]
 800c7a4:	f000 fa40 	bl	800cc28 <SDMMC_GetCmdResp1>
 800c7a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c7aa:	69fb      	ldr	r3, [r7, #28]
}
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	3720      	adds	r7, #32
 800c7b0:	46bd      	mov	sp, r7
 800c7b2:	bd80      	pop	{r7, pc}

0800c7b4 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800c7b4:	b580      	push	{r7, lr}
 800c7b6:	b088      	sub	sp, #32
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	6078      	str	r0, [r7, #4]
 800c7bc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c7be:	683b      	ldr	r3, [r7, #0]
 800c7c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800c7c2:	2311      	movs	r3, #17
 800c7c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c7c6:	2340      	movs	r3, #64	; 0x40
 800c7c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c7ca:	2300      	movs	r3, #0
 800c7cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c7ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c7d2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c7d4:	f107 0308 	add.w	r3, r7, #8
 800c7d8:	4619      	mov	r1, r3
 800c7da:	6878      	ldr	r0, [r7, #4]
 800c7dc:	f7ff ff52 	bl	800c684 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800c7e0:	f241 3288 	movw	r2, #5000	; 0x1388
 800c7e4:	2111      	movs	r1, #17
 800c7e6:	6878      	ldr	r0, [r7, #4]
 800c7e8:	f000 fa1e 	bl	800cc28 <SDMMC_GetCmdResp1>
 800c7ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c7ee:	69fb      	ldr	r3, [r7, #28]
}
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	3720      	adds	r7, #32
 800c7f4:	46bd      	mov	sp, r7
 800c7f6:	bd80      	pop	{r7, pc}

0800c7f8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800c7f8:	b580      	push	{r7, lr}
 800c7fa:	b088      	sub	sp, #32
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	6078      	str	r0, [r7, #4]
 800c800:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c802:	683b      	ldr	r3, [r7, #0]
 800c804:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800c806:	2312      	movs	r3, #18
 800c808:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c80a:	2340      	movs	r3, #64	; 0x40
 800c80c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c80e:	2300      	movs	r3, #0
 800c810:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c812:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c816:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c818:	f107 0308 	add.w	r3, r7, #8
 800c81c:	4619      	mov	r1, r3
 800c81e:	6878      	ldr	r0, [r7, #4]
 800c820:	f7ff ff30 	bl	800c684 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800c824:	f241 3288 	movw	r2, #5000	; 0x1388
 800c828:	2112      	movs	r1, #18
 800c82a:	6878      	ldr	r0, [r7, #4]
 800c82c:	f000 f9fc 	bl	800cc28 <SDMMC_GetCmdResp1>
 800c830:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c832:	69fb      	ldr	r3, [r7, #28]
}
 800c834:	4618      	mov	r0, r3
 800c836:	3720      	adds	r7, #32
 800c838:	46bd      	mov	sp, r7
 800c83a:	bd80      	pop	{r7, pc}

0800c83c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b088      	sub	sp, #32
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]
 800c844:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c846:	683b      	ldr	r3, [r7, #0]
 800c848:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800c84a:	2318      	movs	r3, #24
 800c84c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c84e:	2340      	movs	r3, #64	; 0x40
 800c850:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c852:	2300      	movs	r3, #0
 800c854:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c856:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c85a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c85c:	f107 0308 	add.w	r3, r7, #8
 800c860:	4619      	mov	r1, r3
 800c862:	6878      	ldr	r0, [r7, #4]
 800c864:	f7ff ff0e 	bl	800c684 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800c868:	f241 3288 	movw	r2, #5000	; 0x1388
 800c86c:	2118      	movs	r1, #24
 800c86e:	6878      	ldr	r0, [r7, #4]
 800c870:	f000 f9da 	bl	800cc28 <SDMMC_GetCmdResp1>
 800c874:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c876:	69fb      	ldr	r3, [r7, #28]
}
 800c878:	4618      	mov	r0, r3
 800c87a:	3720      	adds	r7, #32
 800c87c:	46bd      	mov	sp, r7
 800c87e:	bd80      	pop	{r7, pc}

0800c880 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800c880:	b580      	push	{r7, lr}
 800c882:	b088      	sub	sp, #32
 800c884:	af00      	add	r7, sp, #0
 800c886:	6078      	str	r0, [r7, #4]
 800c888:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c88a:	683b      	ldr	r3, [r7, #0]
 800c88c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800c88e:	2319      	movs	r3, #25
 800c890:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c892:	2340      	movs	r3, #64	; 0x40
 800c894:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c896:	2300      	movs	r3, #0
 800c898:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c89a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c89e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c8a0:	f107 0308 	add.w	r3, r7, #8
 800c8a4:	4619      	mov	r1, r3
 800c8a6:	6878      	ldr	r0, [r7, #4]
 800c8a8:	f7ff feec 	bl	800c684 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800c8ac:	f241 3288 	movw	r2, #5000	; 0x1388
 800c8b0:	2119      	movs	r1, #25
 800c8b2:	6878      	ldr	r0, [r7, #4]
 800c8b4:	f000 f9b8 	bl	800cc28 <SDMMC_GetCmdResp1>
 800c8b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c8ba:	69fb      	ldr	r3, [r7, #28]
}
 800c8bc:	4618      	mov	r0, r3
 800c8be:	3720      	adds	r7, #32
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	bd80      	pop	{r7, pc}

0800c8c4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800c8c4:	b580      	push	{r7, lr}
 800c8c6:	b088      	sub	sp, #32
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800c8d0:	230c      	movs	r3, #12
 800c8d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c8d4:	2340      	movs	r3, #64	; 0x40
 800c8d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c8d8:	2300      	movs	r3, #0
 800c8da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c8dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c8e0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c8e2:	f107 0308 	add.w	r3, r7, #8
 800c8e6:	4619      	mov	r1, r3
 800c8e8:	6878      	ldr	r0, [r7, #4]
 800c8ea:	f7ff fecb 	bl	800c684 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800c8ee:	4a05      	ldr	r2, [pc, #20]	; (800c904 <SDMMC_CmdStopTransfer+0x40>)
 800c8f0:	210c      	movs	r1, #12
 800c8f2:	6878      	ldr	r0, [r7, #4]
 800c8f4:	f000 f998 	bl	800cc28 <SDMMC_GetCmdResp1>
 800c8f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c8fa:	69fb      	ldr	r3, [r7, #28]
}
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	3720      	adds	r7, #32
 800c900:	46bd      	mov	sp, r7
 800c902:	bd80      	pop	{r7, pc}
 800c904:	05f5e100 	.word	0x05f5e100

0800c908 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800c908:	b580      	push	{r7, lr}
 800c90a:	b08a      	sub	sp, #40	; 0x28
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	60f8      	str	r0, [r7, #12]
 800c910:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800c914:	683b      	ldr	r3, [r7, #0]
 800c916:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800c918:	2307      	movs	r3, #7
 800c91a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c91c:	2340      	movs	r3, #64	; 0x40
 800c91e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c920:	2300      	movs	r3, #0
 800c922:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c924:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c928:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c92a:	f107 0310 	add.w	r3, r7, #16
 800c92e:	4619      	mov	r1, r3
 800c930:	68f8      	ldr	r0, [r7, #12]
 800c932:	f7ff fea7 	bl	800c684 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800c936:	f241 3288 	movw	r2, #5000	; 0x1388
 800c93a:	2107      	movs	r1, #7
 800c93c:	68f8      	ldr	r0, [r7, #12]
 800c93e:	f000 f973 	bl	800cc28 <SDMMC_GetCmdResp1>
 800c942:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800c944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c946:	4618      	mov	r0, r3
 800c948:	3728      	adds	r7, #40	; 0x28
 800c94a:	46bd      	mov	sp, r7
 800c94c:	bd80      	pop	{r7, pc}

0800c94e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800c94e:	b580      	push	{r7, lr}
 800c950:	b088      	sub	sp, #32
 800c952:	af00      	add	r7, sp, #0
 800c954:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800c956:	2300      	movs	r3, #0
 800c958:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800c95a:	2300      	movs	r3, #0
 800c95c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800c95e:	2300      	movs	r3, #0
 800c960:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c962:	2300      	movs	r3, #0
 800c964:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c966:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c96a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c96c:	f107 0308 	add.w	r3, r7, #8
 800c970:	4619      	mov	r1, r3
 800c972:	6878      	ldr	r0, [r7, #4]
 800c974:	f7ff fe86 	bl	800c684 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800c978:	6878      	ldr	r0, [r7, #4]
 800c97a:	f000 f92d 	bl	800cbd8 <SDMMC_GetCmdError>
 800c97e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c980:	69fb      	ldr	r3, [r7, #28]
}
 800c982:	4618      	mov	r0, r3
 800c984:	3720      	adds	r7, #32
 800c986:	46bd      	mov	sp, r7
 800c988:	bd80      	pop	{r7, pc}

0800c98a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800c98a:	b580      	push	{r7, lr}
 800c98c:	b088      	sub	sp, #32
 800c98e:	af00      	add	r7, sp, #0
 800c990:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800c992:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800c996:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800c998:	2308      	movs	r3, #8
 800c99a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c99c:	2340      	movs	r3, #64	; 0x40
 800c99e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c9a0:	2300      	movs	r3, #0
 800c9a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c9a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c9a8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c9aa:	f107 0308 	add.w	r3, r7, #8
 800c9ae:	4619      	mov	r1, r3
 800c9b0:	6878      	ldr	r0, [r7, #4]
 800c9b2:	f7ff fe67 	bl	800c684 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800c9b6:	6878      	ldr	r0, [r7, #4]
 800c9b8:	f000 fb16 	bl	800cfe8 <SDMMC_GetCmdResp7>
 800c9bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c9be:	69fb      	ldr	r3, [r7, #28]
}
 800c9c0:	4618      	mov	r0, r3
 800c9c2:	3720      	adds	r7, #32
 800c9c4:	46bd      	mov	sp, r7
 800c9c6:	bd80      	pop	{r7, pc}

0800c9c8 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c9c8:	b580      	push	{r7, lr}
 800c9ca:	b088      	sub	sp, #32
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	6078      	str	r0, [r7, #4]
 800c9d0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800c9d2:	683b      	ldr	r3, [r7, #0]
 800c9d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800c9d6:	2337      	movs	r3, #55	; 0x37
 800c9d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c9da:	2340      	movs	r3, #64	; 0x40
 800c9dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c9de:	2300      	movs	r3, #0
 800c9e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c9e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c9e6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c9e8:	f107 0308 	add.w	r3, r7, #8
 800c9ec:	4619      	mov	r1, r3
 800c9ee:	6878      	ldr	r0, [r7, #4]
 800c9f0:	f7ff fe48 	bl	800c684 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800c9f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800c9f8:	2137      	movs	r1, #55	; 0x37
 800c9fa:	6878      	ldr	r0, [r7, #4]
 800c9fc:	f000 f914 	bl	800cc28 <SDMMC_GetCmdResp1>
 800ca00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ca02:	69fb      	ldr	r3, [r7, #28]
}
 800ca04:	4618      	mov	r0, r3
 800ca06:	3720      	adds	r7, #32
 800ca08:	46bd      	mov	sp, r7
 800ca0a:	bd80      	pop	{r7, pc}

0800ca0c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	b088      	sub	sp, #32
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	6078      	str	r0, [r7, #4]
 800ca14:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800ca16:	683b      	ldr	r3, [r7, #0]
 800ca18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ca1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ca20:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800ca22:	2329      	movs	r3, #41	; 0x29
 800ca24:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ca26:	2340      	movs	r3, #64	; 0x40
 800ca28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ca2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca32:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ca34:	f107 0308 	add.w	r3, r7, #8
 800ca38:	4619      	mov	r1, r3
 800ca3a:	6878      	ldr	r0, [r7, #4]
 800ca3c:	f7ff fe22 	bl	800c684 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800ca40:	6878      	ldr	r0, [r7, #4]
 800ca42:	f000 fa23 	bl	800ce8c <SDMMC_GetCmdResp3>
 800ca46:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ca48:	69fb      	ldr	r3, [r7, #28]
}
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	3720      	adds	r7, #32
 800ca4e:	46bd      	mov	sp, r7
 800ca50:	bd80      	pop	{r7, pc}

0800ca52 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800ca52:	b580      	push	{r7, lr}
 800ca54:	b088      	sub	sp, #32
 800ca56:	af00      	add	r7, sp, #0
 800ca58:	6078      	str	r0, [r7, #4]
 800ca5a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800ca5c:	683b      	ldr	r3, [r7, #0]
 800ca5e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800ca60:	2306      	movs	r3, #6
 800ca62:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ca64:	2340      	movs	r3, #64	; 0x40
 800ca66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ca68:	2300      	movs	r3, #0
 800ca6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ca6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca70:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ca72:	f107 0308 	add.w	r3, r7, #8
 800ca76:	4619      	mov	r1, r3
 800ca78:	6878      	ldr	r0, [r7, #4]
 800ca7a:	f7ff fe03 	bl	800c684 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800ca7e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca82:	2106      	movs	r1, #6
 800ca84:	6878      	ldr	r0, [r7, #4]
 800ca86:	f000 f8cf 	bl	800cc28 <SDMMC_GetCmdResp1>
 800ca8a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ca8c:	69fb      	ldr	r3, [r7, #28]
}
 800ca8e:	4618      	mov	r0, r3
 800ca90:	3720      	adds	r7, #32
 800ca92:	46bd      	mov	sp, r7
 800ca94:	bd80      	pop	{r7, pc}

0800ca96 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800ca96:	b580      	push	{r7, lr}
 800ca98:	b088      	sub	sp, #32
 800ca9a:	af00      	add	r7, sp, #0
 800ca9c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800ca9e:	2300      	movs	r3, #0
 800caa0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800caa2:	2333      	movs	r3, #51	; 0x33
 800caa4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800caa6:	2340      	movs	r3, #64	; 0x40
 800caa8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800caaa:	2300      	movs	r3, #0
 800caac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800caae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cab2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cab4:	f107 0308 	add.w	r3, r7, #8
 800cab8:	4619      	mov	r1, r3
 800caba:	6878      	ldr	r0, [r7, #4]
 800cabc:	f7ff fde2 	bl	800c684 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800cac0:	f241 3288 	movw	r2, #5000	; 0x1388
 800cac4:	2133      	movs	r1, #51	; 0x33
 800cac6:	6878      	ldr	r0, [r7, #4]
 800cac8:	f000 f8ae 	bl	800cc28 <SDMMC_GetCmdResp1>
 800cacc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cace:	69fb      	ldr	r3, [r7, #28]
}
 800cad0:	4618      	mov	r0, r3
 800cad2:	3720      	adds	r7, #32
 800cad4:	46bd      	mov	sp, r7
 800cad6:	bd80      	pop	{r7, pc}

0800cad8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800cad8:	b580      	push	{r7, lr}
 800cada:	b088      	sub	sp, #32
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800cae0:	2300      	movs	r3, #0
 800cae2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800cae4:	2302      	movs	r3, #2
 800cae6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800cae8:	23c0      	movs	r3, #192	; 0xc0
 800caea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800caec:	2300      	movs	r3, #0
 800caee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800caf0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800caf4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800caf6:	f107 0308 	add.w	r3, r7, #8
 800cafa:	4619      	mov	r1, r3
 800cafc:	6878      	ldr	r0, [r7, #4]
 800cafe:	f7ff fdc1 	bl	800c684 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800cb02:	6878      	ldr	r0, [r7, #4]
 800cb04:	f000 f97c 	bl	800ce00 <SDMMC_GetCmdResp2>
 800cb08:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cb0a:	69fb      	ldr	r3, [r7, #28]
}
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	3720      	adds	r7, #32
 800cb10:	46bd      	mov	sp, r7
 800cb12:	bd80      	pop	{r7, pc}

0800cb14 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800cb14:	b580      	push	{r7, lr}
 800cb16:	b088      	sub	sp, #32
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	6078      	str	r0, [r7, #4]
 800cb1c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800cb1e:	683b      	ldr	r3, [r7, #0]
 800cb20:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800cb22:	2309      	movs	r3, #9
 800cb24:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800cb26:	23c0      	movs	r3, #192	; 0xc0
 800cb28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cb2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb32:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cb34:	f107 0308 	add.w	r3, r7, #8
 800cb38:	4619      	mov	r1, r3
 800cb3a:	6878      	ldr	r0, [r7, #4]
 800cb3c:	f7ff fda2 	bl	800c684 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800cb40:	6878      	ldr	r0, [r7, #4]
 800cb42:	f000 f95d 	bl	800ce00 <SDMMC_GetCmdResp2>
 800cb46:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cb48:	69fb      	ldr	r3, [r7, #28]
}
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	3720      	adds	r7, #32
 800cb4e:	46bd      	mov	sp, r7
 800cb50:	bd80      	pop	{r7, pc}

0800cb52 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800cb52:	b580      	push	{r7, lr}
 800cb54:	b088      	sub	sp, #32
 800cb56:	af00      	add	r7, sp, #0
 800cb58:	6078      	str	r0, [r7, #4]
 800cb5a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800cb5c:	2300      	movs	r3, #0
 800cb5e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800cb60:	2303      	movs	r3, #3
 800cb62:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cb64:	2340      	movs	r3, #64	; 0x40
 800cb66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cb68:	2300      	movs	r3, #0
 800cb6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cb6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb70:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cb72:	f107 0308 	add.w	r3, r7, #8
 800cb76:	4619      	mov	r1, r3
 800cb78:	6878      	ldr	r0, [r7, #4]
 800cb7a:	f7ff fd83 	bl	800c684 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800cb7e:	683a      	ldr	r2, [r7, #0]
 800cb80:	2103      	movs	r1, #3
 800cb82:	6878      	ldr	r0, [r7, #4]
 800cb84:	f000 f9bc 	bl	800cf00 <SDMMC_GetCmdResp6>
 800cb88:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cb8a:	69fb      	ldr	r3, [r7, #28]
}
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	3720      	adds	r7, #32
 800cb90:	46bd      	mov	sp, r7
 800cb92:	bd80      	pop	{r7, pc}

0800cb94 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800cb94:	b580      	push	{r7, lr}
 800cb96:	b088      	sub	sp, #32
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	6078      	str	r0, [r7, #4]
 800cb9c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800cb9e:	683b      	ldr	r3, [r7, #0]
 800cba0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800cba2:	230d      	movs	r3, #13
 800cba4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cba6:	2340      	movs	r3, #64	; 0x40
 800cba8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cbaa:	2300      	movs	r3, #0
 800cbac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cbae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cbb2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cbb4:	f107 0308 	add.w	r3, r7, #8
 800cbb8:	4619      	mov	r1, r3
 800cbba:	6878      	ldr	r0, [r7, #4]
 800cbbc:	f7ff fd62 	bl	800c684 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800cbc0:	f241 3288 	movw	r2, #5000	; 0x1388
 800cbc4:	210d      	movs	r1, #13
 800cbc6:	6878      	ldr	r0, [r7, #4]
 800cbc8:	f000 f82e 	bl	800cc28 <SDMMC_GetCmdResp1>
 800cbcc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cbce:	69fb      	ldr	r3, [r7, #28]
}
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	3720      	adds	r7, #32
 800cbd4:	46bd      	mov	sp, r7
 800cbd6:	bd80      	pop	{r7, pc}

0800cbd8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800cbd8:	b490      	push	{r4, r7}
 800cbda:	b082      	sub	sp, #8
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cbe0:	4b0f      	ldr	r3, [pc, #60]	; (800cc20 <SDMMC_GetCmdError+0x48>)
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	4a0f      	ldr	r2, [pc, #60]	; (800cc24 <SDMMC_GetCmdError+0x4c>)
 800cbe6:	fba2 2303 	umull	r2, r3, r2, r3
 800cbea:	0a5b      	lsrs	r3, r3, #9
 800cbec:	f241 3288 	movw	r2, #5000	; 0x1388
 800cbf0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800cbf4:	4623      	mov	r3, r4
 800cbf6:	1e5c      	subs	r4, r3, #1
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d102      	bne.n	800cc02 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cbfc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cc00:	e009      	b.n	800cc16 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d0f2      	beq.n	800cbf4 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	22c5      	movs	r2, #197	; 0xc5
 800cc12:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800cc14:	2300      	movs	r3, #0
}
 800cc16:	4618      	mov	r0, r3
 800cc18:	3708      	adds	r7, #8
 800cc1a:	46bd      	mov	sp, r7
 800cc1c:	bc90      	pop	{r4, r7}
 800cc1e:	4770      	bx	lr
 800cc20:	20000000 	.word	0x20000000
 800cc24:	10624dd3 	.word	0x10624dd3

0800cc28 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800cc28:	b590      	push	{r4, r7, lr}
 800cc2a:	b087      	sub	sp, #28
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	60f8      	str	r0, [r7, #12]
 800cc30:	460b      	mov	r3, r1
 800cc32:	607a      	str	r2, [r7, #4]
 800cc34:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800cc36:	4b6f      	ldr	r3, [pc, #444]	; (800cdf4 <SDMMC_GetCmdResp1+0x1cc>)
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	4a6f      	ldr	r2, [pc, #444]	; (800cdf8 <SDMMC_GetCmdResp1+0x1d0>)
 800cc3c:	fba2 2303 	umull	r2, r3, r2, r3
 800cc40:	0a5b      	lsrs	r3, r3, #9
 800cc42:	687a      	ldr	r2, [r7, #4]
 800cc44:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800cc48:	4623      	mov	r3, r4
 800cc4a:	1e5c      	subs	r4, r3, #1
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d102      	bne.n	800cc56 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cc50:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cc54:	e0c9      	b.n	800cdea <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc5a:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cc5c:	697b      	ldr	r3, [r7, #20]
 800cc5e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d0f0      	beq.n	800cc48 <SDMMC_GetCmdResp1+0x20>
 800cc66:	697b      	ldr	r3, [r7, #20]
 800cc68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d1eb      	bne.n	800cc48 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc74:	f003 0304 	and.w	r3, r3, #4
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d004      	beq.n	800cc86 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	2204      	movs	r2, #4
 800cc80:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cc82:	2304      	movs	r3, #4
 800cc84:	e0b1      	b.n	800cdea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc8a:	f003 0301 	and.w	r3, r3, #1
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d004      	beq.n	800cc9c <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	2201      	movs	r2, #1
 800cc96:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cc98:	2301      	movs	r3, #1
 800cc9a:	e0a6      	b.n	800cdea <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	22c5      	movs	r2, #197	; 0xc5
 800cca0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800cca2:	68f8      	ldr	r0, [r7, #12]
 800cca4:	f7ff fd18 	bl	800c6d8 <SDIO_GetCommandResponse>
 800cca8:	4603      	mov	r3, r0
 800ccaa:	461a      	mov	r2, r3
 800ccac:	7afb      	ldrb	r3, [r7, #11]
 800ccae:	4293      	cmp	r3, r2
 800ccb0:	d001      	beq.n	800ccb6 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ccb2:	2301      	movs	r3, #1
 800ccb4:	e099      	b.n	800cdea <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800ccb6:	2100      	movs	r1, #0
 800ccb8:	68f8      	ldr	r0, [r7, #12]
 800ccba:	f7ff fd1a 	bl	800c6f2 <SDIO_GetResponse>
 800ccbe:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ccc0:	693a      	ldr	r2, [r7, #16]
 800ccc2:	4b4e      	ldr	r3, [pc, #312]	; (800cdfc <SDMMC_GetCmdResp1+0x1d4>)
 800ccc4:	4013      	ands	r3, r2
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d101      	bne.n	800ccce <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800ccca:	2300      	movs	r3, #0
 800cccc:	e08d      	b.n	800cdea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800ccce:	693b      	ldr	r3, [r7, #16]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	da02      	bge.n	800ccda <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800ccd4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ccd8:	e087      	b.n	800cdea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ccda:	693b      	ldr	r3, [r7, #16]
 800ccdc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d001      	beq.n	800cce8 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800cce4:	2340      	movs	r3, #64	; 0x40
 800cce6:	e080      	b.n	800cdea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800cce8:	693b      	ldr	r3, [r7, #16]
 800ccea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d001      	beq.n	800ccf6 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800ccf2:	2380      	movs	r3, #128	; 0x80
 800ccf4:	e079      	b.n	800cdea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ccf6:	693b      	ldr	r3, [r7, #16]
 800ccf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d002      	beq.n	800cd06 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800cd00:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cd04:	e071      	b.n	800cdea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800cd06:	693b      	ldr	r3, [r7, #16]
 800cd08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d002      	beq.n	800cd16 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800cd10:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cd14:	e069      	b.n	800cdea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800cd16:	693b      	ldr	r3, [r7, #16]
 800cd18:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d002      	beq.n	800cd26 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800cd20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cd24:	e061      	b.n	800cdea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800cd26:	693b      	ldr	r3, [r7, #16]
 800cd28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d002      	beq.n	800cd36 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800cd30:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cd34:	e059      	b.n	800cdea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800cd36:	693b      	ldr	r3, [r7, #16]
 800cd38:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d002      	beq.n	800cd46 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800cd40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cd44:	e051      	b.n	800cdea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800cd46:	693b      	ldr	r3, [r7, #16]
 800cd48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d002      	beq.n	800cd56 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800cd50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cd54:	e049      	b.n	800cdea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800cd56:	693b      	ldr	r3, [r7, #16]
 800cd58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d002      	beq.n	800cd66 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800cd60:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800cd64:	e041      	b.n	800cdea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800cd66:	693b      	ldr	r3, [r7, #16]
 800cd68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d002      	beq.n	800cd76 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800cd70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cd74:	e039      	b.n	800cdea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800cd76:	693b      	ldr	r3, [r7, #16]
 800cd78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d002      	beq.n	800cd86 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800cd80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800cd84:	e031      	b.n	800cdea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800cd86:	693b      	ldr	r3, [r7, #16]
 800cd88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d002      	beq.n	800cd96 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800cd90:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800cd94:	e029      	b.n	800cdea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800cd96:	693b      	ldr	r3, [r7, #16]
 800cd98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d002      	beq.n	800cda6 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800cda0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800cda4:	e021      	b.n	800cdea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800cda6:	693b      	ldr	r3, [r7, #16]
 800cda8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d002      	beq.n	800cdb6 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800cdb0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800cdb4:	e019      	b.n	800cdea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800cdb6:	693b      	ldr	r3, [r7, #16]
 800cdb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d002      	beq.n	800cdc6 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800cdc0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800cdc4:	e011      	b.n	800cdea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800cdc6:	693b      	ldr	r3, [r7, #16]
 800cdc8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d002      	beq.n	800cdd6 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800cdd0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800cdd4:	e009      	b.n	800cdea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800cdd6:	693b      	ldr	r3, [r7, #16]
 800cdd8:	f003 0308 	and.w	r3, r3, #8
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d002      	beq.n	800cde6 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800cde0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800cde4:	e001      	b.n	800cdea <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800cde6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800cdea:	4618      	mov	r0, r3
 800cdec:	371c      	adds	r7, #28
 800cdee:	46bd      	mov	sp, r7
 800cdf0:	bd90      	pop	{r4, r7, pc}
 800cdf2:	bf00      	nop
 800cdf4:	20000000 	.word	0x20000000
 800cdf8:	10624dd3 	.word	0x10624dd3
 800cdfc:	fdffe008 	.word	0xfdffe008

0800ce00 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800ce00:	b490      	push	{r4, r7}
 800ce02:	b084      	sub	sp, #16
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ce08:	4b1e      	ldr	r3, [pc, #120]	; (800ce84 <SDMMC_GetCmdResp2+0x84>)
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	4a1e      	ldr	r2, [pc, #120]	; (800ce88 <SDMMC_GetCmdResp2+0x88>)
 800ce0e:	fba2 2303 	umull	r2, r3, r2, r3
 800ce12:	0a5b      	lsrs	r3, r3, #9
 800ce14:	f241 3288 	movw	r2, #5000	; 0x1388
 800ce18:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800ce1c:	4623      	mov	r3, r4
 800ce1e:	1e5c      	subs	r4, r3, #1
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d102      	bne.n	800ce2a <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ce24:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ce28:	e026      	b.n	800ce78 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce2e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d0f0      	beq.n	800ce1c <SDMMC_GetCmdResp2+0x1c>
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d1eb      	bne.n	800ce1c <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce48:	f003 0304 	and.w	r3, r3, #4
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d004      	beq.n	800ce5a <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	2204      	movs	r2, #4
 800ce54:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ce56:	2304      	movs	r3, #4
 800ce58:	e00e      	b.n	800ce78 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce5e:	f003 0301 	and.w	r3, r3, #1
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d004      	beq.n	800ce70 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	2201      	movs	r2, #1
 800ce6a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ce6c:	2301      	movs	r3, #1
 800ce6e:	e003      	b.n	800ce78 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	22c5      	movs	r2, #197	; 0xc5
 800ce74:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800ce76:	2300      	movs	r3, #0
}
 800ce78:	4618      	mov	r0, r3
 800ce7a:	3710      	adds	r7, #16
 800ce7c:	46bd      	mov	sp, r7
 800ce7e:	bc90      	pop	{r4, r7}
 800ce80:	4770      	bx	lr
 800ce82:	bf00      	nop
 800ce84:	20000000 	.word	0x20000000
 800ce88:	10624dd3 	.word	0x10624dd3

0800ce8c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800ce8c:	b490      	push	{r4, r7}
 800ce8e:	b084      	sub	sp, #16
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ce94:	4b18      	ldr	r3, [pc, #96]	; (800cef8 <SDMMC_GetCmdResp3+0x6c>)
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	4a18      	ldr	r2, [pc, #96]	; (800cefc <SDMMC_GetCmdResp3+0x70>)
 800ce9a:	fba2 2303 	umull	r2, r3, r2, r3
 800ce9e:	0a5b      	lsrs	r3, r3, #9
 800cea0:	f241 3288 	movw	r2, #5000	; 0x1388
 800cea4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800cea8:	4623      	mov	r3, r4
 800ceaa:	1e5c      	subs	r4, r3, #1
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d102      	bne.n	800ceb6 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ceb0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ceb4:	e01b      	b.n	800ceee <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ceba:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d0f0      	beq.n	800cea8 <SDMMC_GetCmdResp3+0x1c>
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d1eb      	bne.n	800cea8 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ced4:	f003 0304 	and.w	r3, r3, #4
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d004      	beq.n	800cee6 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	2204      	movs	r2, #4
 800cee0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cee2:	2304      	movs	r3, #4
 800cee4:	e003      	b.n	800ceee <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	22c5      	movs	r2, #197	; 0xc5
 800ceea:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800ceec:	2300      	movs	r3, #0
}
 800ceee:	4618      	mov	r0, r3
 800cef0:	3710      	adds	r7, #16
 800cef2:	46bd      	mov	sp, r7
 800cef4:	bc90      	pop	{r4, r7}
 800cef6:	4770      	bx	lr
 800cef8:	20000000 	.word	0x20000000
 800cefc:	10624dd3 	.word	0x10624dd3

0800cf00 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800cf00:	b590      	push	{r4, r7, lr}
 800cf02:	b087      	sub	sp, #28
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	60f8      	str	r0, [r7, #12]
 800cf08:	460b      	mov	r3, r1
 800cf0a:	607a      	str	r2, [r7, #4]
 800cf0c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cf0e:	4b34      	ldr	r3, [pc, #208]	; (800cfe0 <SDMMC_GetCmdResp6+0xe0>)
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	4a34      	ldr	r2, [pc, #208]	; (800cfe4 <SDMMC_GetCmdResp6+0xe4>)
 800cf14:	fba2 2303 	umull	r2, r3, r2, r3
 800cf18:	0a5b      	lsrs	r3, r3, #9
 800cf1a:	f241 3288 	movw	r2, #5000	; 0x1388
 800cf1e:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800cf22:	4623      	mov	r3, r4
 800cf24:	1e5c      	subs	r4, r3, #1
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d102      	bne.n	800cf30 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cf2a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cf2e:	e052      	b.n	800cfd6 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf34:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cf36:	697b      	ldr	r3, [r7, #20]
 800cf38:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d0f0      	beq.n	800cf22 <SDMMC_GetCmdResp6+0x22>
 800cf40:	697b      	ldr	r3, [r7, #20]
 800cf42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d1eb      	bne.n	800cf22 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf4e:	f003 0304 	and.w	r3, r3, #4
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d004      	beq.n	800cf60 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	2204      	movs	r2, #4
 800cf5a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cf5c:	2304      	movs	r3, #4
 800cf5e:	e03a      	b.n	800cfd6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf64:	f003 0301 	and.w	r3, r3, #1
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d004      	beq.n	800cf76 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	2201      	movs	r2, #1
 800cf70:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cf72:	2301      	movs	r3, #1
 800cf74:	e02f      	b.n	800cfd6 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800cf76:	68f8      	ldr	r0, [r7, #12]
 800cf78:	f7ff fbae 	bl	800c6d8 <SDIO_GetCommandResponse>
 800cf7c:	4603      	mov	r3, r0
 800cf7e:	461a      	mov	r2, r3
 800cf80:	7afb      	ldrb	r3, [r7, #11]
 800cf82:	4293      	cmp	r3, r2
 800cf84:	d001      	beq.n	800cf8a <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cf86:	2301      	movs	r3, #1
 800cf88:	e025      	b.n	800cfd6 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	22c5      	movs	r2, #197	; 0xc5
 800cf8e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800cf90:	2100      	movs	r1, #0
 800cf92:	68f8      	ldr	r0, [r7, #12]
 800cf94:	f7ff fbad 	bl	800c6f2 <SDIO_GetResponse>
 800cf98:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800cf9a:	693b      	ldr	r3, [r7, #16]
 800cf9c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d106      	bne.n	800cfb2 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800cfa4:	693b      	ldr	r3, [r7, #16]
 800cfa6:	0c1b      	lsrs	r3, r3, #16
 800cfa8:	b29a      	uxth	r2, r3
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800cfae:	2300      	movs	r3, #0
 800cfb0:	e011      	b.n	800cfd6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800cfb2:	693b      	ldr	r3, [r7, #16]
 800cfb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d002      	beq.n	800cfc2 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800cfbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cfc0:	e009      	b.n	800cfd6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800cfc2:	693b      	ldr	r3, [r7, #16]
 800cfc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d002      	beq.n	800cfd2 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800cfcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cfd0:	e001      	b.n	800cfd6 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800cfd2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	371c      	adds	r7, #28
 800cfda:	46bd      	mov	sp, r7
 800cfdc:	bd90      	pop	{r4, r7, pc}
 800cfde:	bf00      	nop
 800cfe0:	20000000 	.word	0x20000000
 800cfe4:	10624dd3 	.word	0x10624dd3

0800cfe8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800cfe8:	b490      	push	{r4, r7}
 800cfea:	b084      	sub	sp, #16
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cff0:	4b21      	ldr	r3, [pc, #132]	; (800d078 <SDMMC_GetCmdResp7+0x90>)
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	4a21      	ldr	r2, [pc, #132]	; (800d07c <SDMMC_GetCmdResp7+0x94>)
 800cff6:	fba2 2303 	umull	r2, r3, r2, r3
 800cffa:	0a5b      	lsrs	r3, r3, #9
 800cffc:	f241 3288 	movw	r2, #5000	; 0x1388
 800d000:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800d004:	4623      	mov	r3, r4
 800d006:	1e5c      	subs	r4, r3, #1
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d102      	bne.n	800d012 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d00c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d010:	e02c      	b.n	800d06c <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d016:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d0f0      	beq.n	800d004 <SDMMC_GetCmdResp7+0x1c>
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d1eb      	bne.n	800d004 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d030:	f003 0304 	and.w	r3, r3, #4
 800d034:	2b00      	cmp	r3, #0
 800d036:	d004      	beq.n	800d042 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	2204      	movs	r2, #4
 800d03c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d03e:	2304      	movs	r3, #4
 800d040:	e014      	b.n	800d06c <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d046:	f003 0301 	and.w	r3, r3, #1
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d004      	beq.n	800d058 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	2201      	movs	r2, #1
 800d052:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d054:	2301      	movs	r3, #1
 800d056:	e009      	b.n	800d06c <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d05c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d060:	2b00      	cmp	r3, #0
 800d062:	d002      	beq.n	800d06a <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	2240      	movs	r2, #64	; 0x40
 800d068:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800d06a:	2300      	movs	r3, #0
  
}
 800d06c:	4618      	mov	r0, r3
 800d06e:	3710      	adds	r7, #16
 800d070:	46bd      	mov	sp, r7
 800d072:	bc90      	pop	{r4, r7}
 800d074:	4770      	bx	lr
 800d076:	bf00      	nop
 800d078:	20000000 	.word	0x20000000
 800d07c:	10624dd3 	.word	0x10624dd3

0800d080 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d080:	b580      	push	{r7, lr}
 800d082:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800d084:	4904      	ldr	r1, [pc, #16]	; (800d098 <MX_FATFS_Init+0x18>)
 800d086:	4805      	ldr	r0, [pc, #20]	; (800d09c <MX_FATFS_Init+0x1c>)
 800d088:	f004 f874 	bl	8011174 <FATFS_LinkDriver>
 800d08c:	4603      	mov	r3, r0
 800d08e:	461a      	mov	r2, r3
 800d090:	4b03      	ldr	r3, [pc, #12]	; (800d0a0 <MX_FATFS_Init+0x20>)
 800d092:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800d094:	bf00      	nop
 800d096:	bd80      	pop	{r7, pc}
 800d098:	20021d90 	.word	0x20021d90
 800d09c:	080174a0 	.word	0x080174a0
 800d0a0:	20021d8c 	.word	0x20021d8c

0800d0a4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800d0a4:	b480      	push	{r7}
 800d0a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800d0a8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800d0aa:	4618      	mov	r0, r3
 800d0ac:	46bd      	mov	sp, r7
 800d0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b2:	4770      	bx	lr

0800d0b4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800d0b4:	b580      	push	{r7, lr}
 800d0b6:	b082      	sub	sp, #8
 800d0b8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800d0ba:	2300      	movs	r3, #0
 800d0bc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800d0be:	f000 f896 	bl	800d1ee <BSP_SD_IsDetected>
 800d0c2:	4603      	mov	r3, r0
 800d0c4:	2b01      	cmp	r3, #1
 800d0c6:	d001      	beq.n	800d0cc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800d0c8:	2301      	movs	r3, #1
 800d0ca:	e012      	b.n	800d0f2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800d0cc:	480b      	ldr	r0, [pc, #44]	; (800d0fc <BSP_SD_Init+0x48>)
 800d0ce:	f7fb ff9d 	bl	800900c <HAL_SD_Init>
 800d0d2:	4603      	mov	r3, r0
 800d0d4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800d0d6:	79fb      	ldrb	r3, [r7, #7]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d109      	bne.n	800d0f0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800d0dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800d0e0:	4806      	ldr	r0, [pc, #24]	; (800d0fc <BSP_SD_Init+0x48>)
 800d0e2:	f7fc fd47 	bl	8009b74 <HAL_SD_ConfigWideBusOperation>
 800d0e6:	4603      	mov	r3, r0
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d001      	beq.n	800d0f0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800d0ec:	2301      	movs	r3, #1
 800d0ee:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800d0f0:	79fb      	ldrb	r3, [r7, #7]
}
 800d0f2:	4618      	mov	r0, r3
 800d0f4:	3708      	adds	r7, #8
 800d0f6:	46bd      	mov	sp, r7
 800d0f8:	bd80      	pop	{r7, pc}
 800d0fa:	bf00      	nop
 800d0fc:	20021c24 	.word	0x20021c24

0800d100 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800d100:	b580      	push	{r7, lr}
 800d102:	b086      	sub	sp, #24
 800d104:	af00      	add	r7, sp, #0
 800d106:	60f8      	str	r0, [r7, #12]
 800d108:	60b9      	str	r1, [r7, #8]
 800d10a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800d10c:	2300      	movs	r3, #0
 800d10e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	68ba      	ldr	r2, [r7, #8]
 800d114:	68f9      	ldr	r1, [r7, #12]
 800d116:	4806      	ldr	r0, [pc, #24]	; (800d130 <BSP_SD_ReadBlocks_DMA+0x30>)
 800d118:	f7fc f808 	bl	800912c <HAL_SD_ReadBlocks_DMA>
 800d11c:	4603      	mov	r3, r0
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d001      	beq.n	800d126 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800d122:	2301      	movs	r3, #1
 800d124:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d126:	7dfb      	ldrb	r3, [r7, #23]
}
 800d128:	4618      	mov	r0, r3
 800d12a:	3718      	adds	r7, #24
 800d12c:	46bd      	mov	sp, r7
 800d12e:	bd80      	pop	{r7, pc}
 800d130:	20021c24 	.word	0x20021c24

0800d134 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800d134:	b580      	push	{r7, lr}
 800d136:	b086      	sub	sp, #24
 800d138:	af00      	add	r7, sp, #0
 800d13a:	60f8      	str	r0, [r7, #12]
 800d13c:	60b9      	str	r1, [r7, #8]
 800d13e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800d140:	2300      	movs	r3, #0
 800d142:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	68ba      	ldr	r2, [r7, #8]
 800d148:	68f9      	ldr	r1, [r7, #12]
 800d14a:	4806      	ldr	r0, [pc, #24]	; (800d164 <BSP_SD_WriteBlocks_DMA+0x30>)
 800d14c:	f7fc f8d6 	bl	80092fc <HAL_SD_WriteBlocks_DMA>
 800d150:	4603      	mov	r3, r0
 800d152:	2b00      	cmp	r3, #0
 800d154:	d001      	beq.n	800d15a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800d156:	2301      	movs	r3, #1
 800d158:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d15a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d15c:	4618      	mov	r0, r3
 800d15e:	3718      	adds	r7, #24
 800d160:	46bd      	mov	sp, r7
 800d162:	bd80      	pop	{r7, pc}
 800d164:	20021c24 	.word	0x20021c24

0800d168 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800d168:	b580      	push	{r7, lr}
 800d16a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800d16c:	4805      	ldr	r0, [pc, #20]	; (800d184 <BSP_SD_GetCardState+0x1c>)
 800d16e:	f7fc fd7d 	bl	8009c6c <HAL_SD_GetCardState>
 800d172:	4603      	mov	r3, r0
 800d174:	2b04      	cmp	r3, #4
 800d176:	bf14      	ite	ne
 800d178:	2301      	movne	r3, #1
 800d17a:	2300      	moveq	r3, #0
 800d17c:	b2db      	uxtb	r3, r3
}
 800d17e:	4618      	mov	r0, r3
 800d180:	bd80      	pop	{r7, pc}
 800d182:	bf00      	nop
 800d184:	20021c24 	.word	0x20021c24

0800d188 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800d188:	b580      	push	{r7, lr}
 800d18a:	b082      	sub	sp, #8
 800d18c:	af00      	add	r7, sp, #0
 800d18e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800d190:	6879      	ldr	r1, [r7, #4]
 800d192:	4803      	ldr	r0, [pc, #12]	; (800d1a0 <BSP_SD_GetCardInfo+0x18>)
 800d194:	f7fc fcc2 	bl	8009b1c <HAL_SD_GetCardInfo>
}
 800d198:	bf00      	nop
 800d19a:	3708      	adds	r7, #8
 800d19c:	46bd      	mov	sp, r7
 800d19e:	bd80      	pop	{r7, pc}
 800d1a0:	20021c24 	.word	0x20021c24

0800d1a4 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800d1a4:	b580      	push	{r7, lr}
 800d1a6:	b082      	sub	sp, #8
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800d1ac:	f000 f818 	bl	800d1e0 <BSP_SD_AbortCallback>
}
 800d1b0:	bf00      	nop
 800d1b2:	3708      	adds	r7, #8
 800d1b4:	46bd      	mov	sp, r7
 800d1b6:	bd80      	pop	{r7, pc}

0800d1b8 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800d1b8:	b580      	push	{r7, lr}
 800d1ba:	b082      	sub	sp, #8
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800d1c0:	f000 f9a8 	bl	800d514 <BSP_SD_WriteCpltCallback>
}
 800d1c4:	bf00      	nop
 800d1c6:	3708      	adds	r7, #8
 800d1c8:	46bd      	mov	sp, r7
 800d1ca:	bd80      	pop	{r7, pc}

0800d1cc <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800d1cc:	b580      	push	{r7, lr}
 800d1ce:	b082      	sub	sp, #8
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800d1d4:	f000 f9aa 	bl	800d52c <BSP_SD_ReadCpltCallback>
}
 800d1d8:	bf00      	nop
 800d1da:	3708      	adds	r7, #8
 800d1dc:	46bd      	mov	sp, r7
 800d1de:	bd80      	pop	{r7, pc}

0800d1e0 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800d1e0:	b480      	push	{r7}
 800d1e2:	af00      	add	r7, sp, #0

}
 800d1e4:	bf00      	nop
 800d1e6:	46bd      	mov	sp, r7
 800d1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ec:	4770      	bx	lr

0800d1ee <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800d1ee:	b580      	push	{r7, lr}
 800d1f0:	b082      	sub	sp, #8
 800d1f2:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800d1f4:	2301      	movs	r3, #1
 800d1f6:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800d1f8:	f000 f80c 	bl	800d214 <BSP_PlatformIsDetected>
 800d1fc:	4603      	mov	r3, r0
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d101      	bne.n	800d206 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800d202:	2300      	movs	r3, #0
 800d204:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800d206:	79fb      	ldrb	r3, [r7, #7]
 800d208:	b2db      	uxtb	r3, r3
}
 800d20a:	4618      	mov	r0, r3
 800d20c:	3708      	adds	r7, #8
 800d20e:	46bd      	mov	sp, r7
 800d210:	bd80      	pop	{r7, pc}
	...

0800d214 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800d214:	b580      	push	{r7, lr}
 800d216:	b082      	sub	sp, #8
 800d218:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800d21a:	2301      	movs	r3, #1
 800d21c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800d21e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800d222:	4806      	ldr	r0, [pc, #24]	; (800d23c <BSP_PlatformIsDetected+0x28>)
 800d224:	f7fa f85e 	bl	80072e4 <HAL_GPIO_ReadPin>
 800d228:	4603      	mov	r3, r0
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d001      	beq.n	800d232 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800d22e:	2300      	movs	r3, #0
 800d230:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800d232:	79fb      	ldrb	r3, [r7, #7]
}
 800d234:	4618      	mov	r0, r3
 800d236:	3708      	adds	r7, #8
 800d238:	46bd      	mov	sp, r7
 800d23a:	bd80      	pop	{r7, pc}
 800d23c:	40020000 	.word	0x40020000

0800d240 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800d240:	b580      	push	{r7, lr}
 800d242:	b084      	sub	sp, #16
 800d244:	af00      	add	r7, sp, #0
 800d246:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800d248:	f7f8 fdc2 	bl	8005dd0 <HAL_GetTick>
 800d24c:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800d24e:	e006      	b.n	800d25e <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d250:	f7ff ff8a 	bl	800d168 <BSP_SD_GetCardState>
 800d254:	4603      	mov	r3, r0
 800d256:	2b00      	cmp	r3, #0
 800d258:	d101      	bne.n	800d25e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800d25a:	2300      	movs	r3, #0
 800d25c:	e009      	b.n	800d272 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800d25e:	f7f8 fdb7 	bl	8005dd0 <HAL_GetTick>
 800d262:	4602      	mov	r2, r0
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	1ad3      	subs	r3, r2, r3
 800d268:	687a      	ldr	r2, [r7, #4]
 800d26a:	429a      	cmp	r2, r3
 800d26c:	d8f0      	bhi.n	800d250 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800d26e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d272:	4618      	mov	r0, r3
 800d274:	3710      	adds	r7, #16
 800d276:	46bd      	mov	sp, r7
 800d278:	bd80      	pop	{r7, pc}
	...

0800d27c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800d27c:	b580      	push	{r7, lr}
 800d27e:	b082      	sub	sp, #8
 800d280:	af00      	add	r7, sp, #0
 800d282:	4603      	mov	r3, r0
 800d284:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800d286:	4b0b      	ldr	r3, [pc, #44]	; (800d2b4 <SD_CheckStatus+0x38>)
 800d288:	2201      	movs	r2, #1
 800d28a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800d28c:	f7ff ff6c 	bl	800d168 <BSP_SD_GetCardState>
 800d290:	4603      	mov	r3, r0
 800d292:	2b00      	cmp	r3, #0
 800d294:	d107      	bne.n	800d2a6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800d296:	4b07      	ldr	r3, [pc, #28]	; (800d2b4 <SD_CheckStatus+0x38>)
 800d298:	781b      	ldrb	r3, [r3, #0]
 800d29a:	b2db      	uxtb	r3, r3
 800d29c:	f023 0301 	bic.w	r3, r3, #1
 800d2a0:	b2da      	uxtb	r2, r3
 800d2a2:	4b04      	ldr	r3, [pc, #16]	; (800d2b4 <SD_CheckStatus+0x38>)
 800d2a4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800d2a6:	4b03      	ldr	r3, [pc, #12]	; (800d2b4 <SD_CheckStatus+0x38>)
 800d2a8:	781b      	ldrb	r3, [r3, #0]
 800d2aa:	b2db      	uxtb	r3, r3
}
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	3708      	adds	r7, #8
 800d2b0:	46bd      	mov	sp, r7
 800d2b2:	bd80      	pop	{r7, pc}
 800d2b4:	20000009 	.word	0x20000009

0800d2b8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800d2b8:	b580      	push	{r7, lr}
 800d2ba:	b082      	sub	sp, #8
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	4603      	mov	r3, r0
 800d2c0:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800d2c2:	f7ff fef7 	bl	800d0b4 <BSP_SD_Init>
 800d2c6:	4603      	mov	r3, r0
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d107      	bne.n	800d2dc <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800d2cc:	79fb      	ldrb	r3, [r7, #7]
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	f7ff ffd4 	bl	800d27c <SD_CheckStatus>
 800d2d4:	4603      	mov	r3, r0
 800d2d6:	461a      	mov	r2, r3
 800d2d8:	4b04      	ldr	r3, [pc, #16]	; (800d2ec <SD_initialize+0x34>)
 800d2da:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800d2dc:	4b03      	ldr	r3, [pc, #12]	; (800d2ec <SD_initialize+0x34>)
 800d2de:	781b      	ldrb	r3, [r3, #0]
 800d2e0:	b2db      	uxtb	r3, r3
}
 800d2e2:	4618      	mov	r0, r3
 800d2e4:	3708      	adds	r7, #8
 800d2e6:	46bd      	mov	sp, r7
 800d2e8:	bd80      	pop	{r7, pc}
 800d2ea:	bf00      	nop
 800d2ec:	20000009 	.word	0x20000009

0800d2f0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800d2f0:	b580      	push	{r7, lr}
 800d2f2:	b082      	sub	sp, #8
 800d2f4:	af00      	add	r7, sp, #0
 800d2f6:	4603      	mov	r3, r0
 800d2f8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800d2fa:	79fb      	ldrb	r3, [r7, #7]
 800d2fc:	4618      	mov	r0, r3
 800d2fe:	f7ff ffbd 	bl	800d27c <SD_CheckStatus>
 800d302:	4603      	mov	r3, r0
}
 800d304:	4618      	mov	r0, r3
 800d306:	3708      	adds	r7, #8
 800d308:	46bd      	mov	sp, r7
 800d30a:	bd80      	pop	{r7, pc}

0800d30c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800d30c:	b580      	push	{r7, lr}
 800d30e:	b086      	sub	sp, #24
 800d310:	af00      	add	r7, sp, #0
 800d312:	60b9      	str	r1, [r7, #8]
 800d314:	607a      	str	r2, [r7, #4]
 800d316:	603b      	str	r3, [r7, #0]
 800d318:	4603      	mov	r3, r0
 800d31a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d31c:	2301      	movs	r3, #1
 800d31e:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800d320:	f247 5030 	movw	r0, #30000	; 0x7530
 800d324:	f7ff ff8c 	bl	800d240 <SD_CheckStatusWithTimeout>
 800d328:	4603      	mov	r3, r0
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	da01      	bge.n	800d332 <SD_read+0x26>
  {
    return res;
 800d32e:	7dfb      	ldrb	r3, [r7, #23]
 800d330:	e03b      	b.n	800d3aa <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800d332:	683a      	ldr	r2, [r7, #0]
 800d334:	6879      	ldr	r1, [r7, #4]
 800d336:	68b8      	ldr	r0, [r7, #8]
 800d338:	f7ff fee2 	bl	800d100 <BSP_SD_ReadBlocks_DMA>
 800d33c:	4603      	mov	r3, r0
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d132      	bne.n	800d3a8 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800d342:	4b1c      	ldr	r3, [pc, #112]	; (800d3b4 <SD_read+0xa8>)
 800d344:	2200      	movs	r2, #0
 800d346:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800d348:	f7f8 fd42 	bl	8005dd0 <HAL_GetTick>
 800d34c:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800d34e:	bf00      	nop
 800d350:	4b18      	ldr	r3, [pc, #96]	; (800d3b4 <SD_read+0xa8>)
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	2b00      	cmp	r3, #0
 800d356:	d108      	bne.n	800d36a <SD_read+0x5e>
 800d358:	f7f8 fd3a 	bl	8005dd0 <HAL_GetTick>
 800d35c:	4602      	mov	r2, r0
 800d35e:	693b      	ldr	r3, [r7, #16]
 800d360:	1ad3      	subs	r3, r2, r3
 800d362:	f247 522f 	movw	r2, #29999	; 0x752f
 800d366:	4293      	cmp	r3, r2
 800d368:	d9f2      	bls.n	800d350 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 800d36a:	4b12      	ldr	r3, [pc, #72]	; (800d3b4 <SD_read+0xa8>)
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d102      	bne.n	800d378 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800d372:	2301      	movs	r3, #1
 800d374:	75fb      	strb	r3, [r7, #23]
 800d376:	e017      	b.n	800d3a8 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800d378:	4b0e      	ldr	r3, [pc, #56]	; (800d3b4 <SD_read+0xa8>)
 800d37a:	2200      	movs	r2, #0
 800d37c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800d37e:	f7f8 fd27 	bl	8005dd0 <HAL_GetTick>
 800d382:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d384:	e007      	b.n	800d396 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d386:	f7ff feef 	bl	800d168 <BSP_SD_GetCardState>
 800d38a:	4603      	mov	r3, r0
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d102      	bne.n	800d396 <SD_read+0x8a>
          {
            res = RES_OK;
 800d390:	2300      	movs	r3, #0
 800d392:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800d394:	e008      	b.n	800d3a8 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d396:	f7f8 fd1b 	bl	8005dd0 <HAL_GetTick>
 800d39a:	4602      	mov	r2, r0
 800d39c:	693b      	ldr	r3, [r7, #16]
 800d39e:	1ad3      	subs	r3, r2, r3
 800d3a0:	f247 522f 	movw	r2, #29999	; 0x752f
 800d3a4:	4293      	cmp	r3, r2
 800d3a6:	d9ee      	bls.n	800d386 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800d3a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d3aa:	4618      	mov	r0, r3
 800d3ac:	3718      	adds	r7, #24
 800d3ae:	46bd      	mov	sp, r7
 800d3b0:	bd80      	pop	{r7, pc}
 800d3b2:	bf00      	nop
 800d3b4:	2001f2bc 	.word	0x2001f2bc

0800d3b8 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800d3b8:	b580      	push	{r7, lr}
 800d3ba:	b086      	sub	sp, #24
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	60b9      	str	r1, [r7, #8]
 800d3c0:	607a      	str	r2, [r7, #4]
 800d3c2:	603b      	str	r3, [r7, #0]
 800d3c4:	4603      	mov	r3, r0
 800d3c6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d3c8:	2301      	movs	r3, #1
 800d3ca:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800d3cc:	4b24      	ldr	r3, [pc, #144]	; (800d460 <SD_write+0xa8>)
 800d3ce:	2200      	movs	r2, #0
 800d3d0:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800d3d2:	f247 5030 	movw	r0, #30000	; 0x7530
 800d3d6:	f7ff ff33 	bl	800d240 <SD_CheckStatusWithTimeout>
 800d3da:	4603      	mov	r3, r0
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	da01      	bge.n	800d3e4 <SD_write+0x2c>
  {
    return res;
 800d3e0:	7dfb      	ldrb	r3, [r7, #23]
 800d3e2:	e038      	b.n	800d456 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800d3e4:	683a      	ldr	r2, [r7, #0]
 800d3e6:	6879      	ldr	r1, [r7, #4]
 800d3e8:	68b8      	ldr	r0, [r7, #8]
 800d3ea:	f7ff fea3 	bl	800d134 <BSP_SD_WriteBlocks_DMA>
 800d3ee:	4603      	mov	r3, r0
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d12f      	bne.n	800d454 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800d3f4:	f7f8 fcec 	bl	8005dd0 <HAL_GetTick>
 800d3f8:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800d3fa:	bf00      	nop
 800d3fc:	4b18      	ldr	r3, [pc, #96]	; (800d460 <SD_write+0xa8>)
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	2b00      	cmp	r3, #0
 800d402:	d108      	bne.n	800d416 <SD_write+0x5e>
 800d404:	f7f8 fce4 	bl	8005dd0 <HAL_GetTick>
 800d408:	4602      	mov	r2, r0
 800d40a:	693b      	ldr	r3, [r7, #16]
 800d40c:	1ad3      	subs	r3, r2, r3
 800d40e:	f247 522f 	movw	r2, #29999	; 0x752f
 800d412:	4293      	cmp	r3, r2
 800d414:	d9f2      	bls.n	800d3fc <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 800d416:	4b12      	ldr	r3, [pc, #72]	; (800d460 <SD_write+0xa8>)
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d102      	bne.n	800d424 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800d41e:	2301      	movs	r3, #1
 800d420:	75fb      	strb	r3, [r7, #23]
 800d422:	e017      	b.n	800d454 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800d424:	4b0e      	ldr	r3, [pc, #56]	; (800d460 <SD_write+0xa8>)
 800d426:	2200      	movs	r2, #0
 800d428:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800d42a:	f7f8 fcd1 	bl	8005dd0 <HAL_GetTick>
 800d42e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d430:	e007      	b.n	800d442 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d432:	f7ff fe99 	bl	800d168 <BSP_SD_GetCardState>
 800d436:	4603      	mov	r3, r0
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d102      	bne.n	800d442 <SD_write+0x8a>
          {
            res = RES_OK;
 800d43c:	2300      	movs	r3, #0
 800d43e:	75fb      	strb	r3, [r7, #23]
            break;
 800d440:	e008      	b.n	800d454 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d442:	f7f8 fcc5 	bl	8005dd0 <HAL_GetTick>
 800d446:	4602      	mov	r2, r0
 800d448:	693b      	ldr	r3, [r7, #16]
 800d44a:	1ad3      	subs	r3, r2, r3
 800d44c:	f247 522f 	movw	r2, #29999	; 0x752f
 800d450:	4293      	cmp	r3, r2
 800d452:	d9ee      	bls.n	800d432 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800d454:	7dfb      	ldrb	r3, [r7, #23]
}
 800d456:	4618      	mov	r0, r3
 800d458:	3718      	adds	r7, #24
 800d45a:	46bd      	mov	sp, r7
 800d45c:	bd80      	pop	{r7, pc}
 800d45e:	bf00      	nop
 800d460:	2001f2b8 	.word	0x2001f2b8

0800d464 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800d464:	b580      	push	{r7, lr}
 800d466:	b08c      	sub	sp, #48	; 0x30
 800d468:	af00      	add	r7, sp, #0
 800d46a:	4603      	mov	r3, r0
 800d46c:	603a      	str	r2, [r7, #0]
 800d46e:	71fb      	strb	r3, [r7, #7]
 800d470:	460b      	mov	r3, r1
 800d472:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800d474:	2301      	movs	r3, #1
 800d476:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800d47a:	4b25      	ldr	r3, [pc, #148]	; (800d510 <SD_ioctl+0xac>)
 800d47c:	781b      	ldrb	r3, [r3, #0]
 800d47e:	b2db      	uxtb	r3, r3
 800d480:	f003 0301 	and.w	r3, r3, #1
 800d484:	2b00      	cmp	r3, #0
 800d486:	d001      	beq.n	800d48c <SD_ioctl+0x28>
 800d488:	2303      	movs	r3, #3
 800d48a:	e03c      	b.n	800d506 <SD_ioctl+0xa2>

  switch (cmd)
 800d48c:	79bb      	ldrb	r3, [r7, #6]
 800d48e:	2b03      	cmp	r3, #3
 800d490:	d834      	bhi.n	800d4fc <SD_ioctl+0x98>
 800d492:	a201      	add	r2, pc, #4	; (adr r2, 800d498 <SD_ioctl+0x34>)
 800d494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d498:	0800d4a9 	.word	0x0800d4a9
 800d49c:	0800d4b1 	.word	0x0800d4b1
 800d4a0:	0800d4c9 	.word	0x0800d4c9
 800d4a4:	0800d4e3 	.word	0x0800d4e3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800d4a8:	2300      	movs	r3, #0
 800d4aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d4ae:	e028      	b.n	800d502 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800d4b0:	f107 030c 	add.w	r3, r7, #12
 800d4b4:	4618      	mov	r0, r3
 800d4b6:	f7ff fe67 	bl	800d188 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800d4ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d4bc:	683b      	ldr	r3, [r7, #0]
 800d4be:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d4c0:	2300      	movs	r3, #0
 800d4c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d4c6:	e01c      	b.n	800d502 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d4c8:	f107 030c 	add.w	r3, r7, #12
 800d4cc:	4618      	mov	r0, r3
 800d4ce:	f7ff fe5b 	bl	800d188 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800d4d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4d4:	b29a      	uxth	r2, r3
 800d4d6:	683b      	ldr	r3, [r7, #0]
 800d4d8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800d4da:	2300      	movs	r3, #0
 800d4dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d4e0:	e00f      	b.n	800d502 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d4e2:	f107 030c 	add.w	r3, r7, #12
 800d4e6:	4618      	mov	r0, r3
 800d4e8:	f7ff fe4e 	bl	800d188 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800d4ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4ee:	0a5a      	lsrs	r2, r3, #9
 800d4f0:	683b      	ldr	r3, [r7, #0]
 800d4f2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d4f4:	2300      	movs	r3, #0
 800d4f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d4fa:	e002      	b.n	800d502 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800d4fc:	2304      	movs	r3, #4
 800d4fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800d502:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d506:	4618      	mov	r0, r3
 800d508:	3730      	adds	r7, #48	; 0x30
 800d50a:	46bd      	mov	sp, r7
 800d50c:	bd80      	pop	{r7, pc}
 800d50e:	bf00      	nop
 800d510:	20000009 	.word	0x20000009

0800d514 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800d514:	b480      	push	{r7}
 800d516:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800d518:	4b03      	ldr	r3, [pc, #12]	; (800d528 <BSP_SD_WriteCpltCallback+0x14>)
 800d51a:	2201      	movs	r2, #1
 800d51c:	601a      	str	r2, [r3, #0]
}
 800d51e:	bf00      	nop
 800d520:	46bd      	mov	sp, r7
 800d522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d526:	4770      	bx	lr
 800d528:	2001f2b8 	.word	0x2001f2b8

0800d52c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800d52c:	b480      	push	{r7}
 800d52e:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800d530:	4b03      	ldr	r3, [pc, #12]	; (800d540 <BSP_SD_ReadCpltCallback+0x14>)
 800d532:	2201      	movs	r2, #1
 800d534:	601a      	str	r2, [r3, #0]
}
 800d536:	bf00      	nop
 800d538:	46bd      	mov	sp, r7
 800d53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d53e:	4770      	bx	lr
 800d540:	2001f2bc 	.word	0x2001f2bc

0800d544 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800d544:	b580      	push	{r7, lr}
 800d546:	b084      	sub	sp, #16
 800d548:	af00      	add	r7, sp, #0
 800d54a:	4603      	mov	r3, r0
 800d54c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800d54e:	79fb      	ldrb	r3, [r7, #7]
 800d550:	4a08      	ldr	r2, [pc, #32]	; (800d574 <disk_status+0x30>)
 800d552:	009b      	lsls	r3, r3, #2
 800d554:	4413      	add	r3, r2
 800d556:	685b      	ldr	r3, [r3, #4]
 800d558:	685b      	ldr	r3, [r3, #4]
 800d55a:	79fa      	ldrb	r2, [r7, #7]
 800d55c:	4905      	ldr	r1, [pc, #20]	; (800d574 <disk_status+0x30>)
 800d55e:	440a      	add	r2, r1
 800d560:	7a12      	ldrb	r2, [r2, #8]
 800d562:	4610      	mov	r0, r2
 800d564:	4798      	blx	r3
 800d566:	4603      	mov	r3, r0
 800d568:	73fb      	strb	r3, [r7, #15]
  return stat;
 800d56a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d56c:	4618      	mov	r0, r3
 800d56e:	3710      	adds	r7, #16
 800d570:	46bd      	mov	sp, r7
 800d572:	bd80      	pop	{r7, pc}
 800d574:	2001f4e8 	.word	0x2001f4e8

0800d578 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800d578:	b580      	push	{r7, lr}
 800d57a:	b084      	sub	sp, #16
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	4603      	mov	r3, r0
 800d580:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800d582:	2300      	movs	r3, #0
 800d584:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800d586:	79fb      	ldrb	r3, [r7, #7]
 800d588:	4a0d      	ldr	r2, [pc, #52]	; (800d5c0 <disk_initialize+0x48>)
 800d58a:	5cd3      	ldrb	r3, [r2, r3]
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d111      	bne.n	800d5b4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800d590:	79fb      	ldrb	r3, [r7, #7]
 800d592:	4a0b      	ldr	r2, [pc, #44]	; (800d5c0 <disk_initialize+0x48>)
 800d594:	2101      	movs	r1, #1
 800d596:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800d598:	79fb      	ldrb	r3, [r7, #7]
 800d59a:	4a09      	ldr	r2, [pc, #36]	; (800d5c0 <disk_initialize+0x48>)
 800d59c:	009b      	lsls	r3, r3, #2
 800d59e:	4413      	add	r3, r2
 800d5a0:	685b      	ldr	r3, [r3, #4]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	79fa      	ldrb	r2, [r7, #7]
 800d5a6:	4906      	ldr	r1, [pc, #24]	; (800d5c0 <disk_initialize+0x48>)
 800d5a8:	440a      	add	r2, r1
 800d5aa:	7a12      	ldrb	r2, [r2, #8]
 800d5ac:	4610      	mov	r0, r2
 800d5ae:	4798      	blx	r3
 800d5b0:	4603      	mov	r3, r0
 800d5b2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800d5b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	3710      	adds	r7, #16
 800d5ba:	46bd      	mov	sp, r7
 800d5bc:	bd80      	pop	{r7, pc}
 800d5be:	bf00      	nop
 800d5c0:	2001f4e8 	.word	0x2001f4e8

0800d5c4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800d5c4:	b590      	push	{r4, r7, lr}
 800d5c6:	b087      	sub	sp, #28
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	60b9      	str	r1, [r7, #8]
 800d5cc:	607a      	str	r2, [r7, #4]
 800d5ce:	603b      	str	r3, [r7, #0]
 800d5d0:	4603      	mov	r3, r0
 800d5d2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800d5d4:	7bfb      	ldrb	r3, [r7, #15]
 800d5d6:	4a0a      	ldr	r2, [pc, #40]	; (800d600 <disk_read+0x3c>)
 800d5d8:	009b      	lsls	r3, r3, #2
 800d5da:	4413      	add	r3, r2
 800d5dc:	685b      	ldr	r3, [r3, #4]
 800d5de:	689c      	ldr	r4, [r3, #8]
 800d5e0:	7bfb      	ldrb	r3, [r7, #15]
 800d5e2:	4a07      	ldr	r2, [pc, #28]	; (800d600 <disk_read+0x3c>)
 800d5e4:	4413      	add	r3, r2
 800d5e6:	7a18      	ldrb	r0, [r3, #8]
 800d5e8:	683b      	ldr	r3, [r7, #0]
 800d5ea:	687a      	ldr	r2, [r7, #4]
 800d5ec:	68b9      	ldr	r1, [r7, #8]
 800d5ee:	47a0      	blx	r4
 800d5f0:	4603      	mov	r3, r0
 800d5f2:	75fb      	strb	r3, [r7, #23]
  return res;
 800d5f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d5f6:	4618      	mov	r0, r3
 800d5f8:	371c      	adds	r7, #28
 800d5fa:	46bd      	mov	sp, r7
 800d5fc:	bd90      	pop	{r4, r7, pc}
 800d5fe:	bf00      	nop
 800d600:	2001f4e8 	.word	0x2001f4e8

0800d604 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800d604:	b590      	push	{r4, r7, lr}
 800d606:	b087      	sub	sp, #28
 800d608:	af00      	add	r7, sp, #0
 800d60a:	60b9      	str	r1, [r7, #8]
 800d60c:	607a      	str	r2, [r7, #4]
 800d60e:	603b      	str	r3, [r7, #0]
 800d610:	4603      	mov	r3, r0
 800d612:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800d614:	7bfb      	ldrb	r3, [r7, #15]
 800d616:	4a0a      	ldr	r2, [pc, #40]	; (800d640 <disk_write+0x3c>)
 800d618:	009b      	lsls	r3, r3, #2
 800d61a:	4413      	add	r3, r2
 800d61c:	685b      	ldr	r3, [r3, #4]
 800d61e:	68dc      	ldr	r4, [r3, #12]
 800d620:	7bfb      	ldrb	r3, [r7, #15]
 800d622:	4a07      	ldr	r2, [pc, #28]	; (800d640 <disk_write+0x3c>)
 800d624:	4413      	add	r3, r2
 800d626:	7a18      	ldrb	r0, [r3, #8]
 800d628:	683b      	ldr	r3, [r7, #0]
 800d62a:	687a      	ldr	r2, [r7, #4]
 800d62c:	68b9      	ldr	r1, [r7, #8]
 800d62e:	47a0      	blx	r4
 800d630:	4603      	mov	r3, r0
 800d632:	75fb      	strb	r3, [r7, #23]
  return res;
 800d634:	7dfb      	ldrb	r3, [r7, #23]
}
 800d636:	4618      	mov	r0, r3
 800d638:	371c      	adds	r7, #28
 800d63a:	46bd      	mov	sp, r7
 800d63c:	bd90      	pop	{r4, r7, pc}
 800d63e:	bf00      	nop
 800d640:	2001f4e8 	.word	0x2001f4e8

0800d644 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800d644:	b580      	push	{r7, lr}
 800d646:	b084      	sub	sp, #16
 800d648:	af00      	add	r7, sp, #0
 800d64a:	4603      	mov	r3, r0
 800d64c:	603a      	str	r2, [r7, #0]
 800d64e:	71fb      	strb	r3, [r7, #7]
 800d650:	460b      	mov	r3, r1
 800d652:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800d654:	79fb      	ldrb	r3, [r7, #7]
 800d656:	4a09      	ldr	r2, [pc, #36]	; (800d67c <disk_ioctl+0x38>)
 800d658:	009b      	lsls	r3, r3, #2
 800d65a:	4413      	add	r3, r2
 800d65c:	685b      	ldr	r3, [r3, #4]
 800d65e:	691b      	ldr	r3, [r3, #16]
 800d660:	79fa      	ldrb	r2, [r7, #7]
 800d662:	4906      	ldr	r1, [pc, #24]	; (800d67c <disk_ioctl+0x38>)
 800d664:	440a      	add	r2, r1
 800d666:	7a10      	ldrb	r0, [r2, #8]
 800d668:	79b9      	ldrb	r1, [r7, #6]
 800d66a:	683a      	ldr	r2, [r7, #0]
 800d66c:	4798      	blx	r3
 800d66e:	4603      	mov	r3, r0
 800d670:	73fb      	strb	r3, [r7, #15]
  return res;
 800d672:	7bfb      	ldrb	r3, [r7, #15]
}
 800d674:	4618      	mov	r0, r3
 800d676:	3710      	adds	r7, #16
 800d678:	46bd      	mov	sp, r7
 800d67a:	bd80      	pop	{r7, pc}
 800d67c:	2001f4e8 	.word	0x2001f4e8

0800d680 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800d680:	b480      	push	{r7}
 800d682:	b085      	sub	sp, #20
 800d684:	af00      	add	r7, sp, #0
 800d686:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	3301      	adds	r3, #1
 800d68c:	781b      	ldrb	r3, [r3, #0]
 800d68e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800d690:	89fb      	ldrh	r3, [r7, #14]
 800d692:	021b      	lsls	r3, r3, #8
 800d694:	b21a      	sxth	r2, r3
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	781b      	ldrb	r3, [r3, #0]
 800d69a:	b21b      	sxth	r3, r3
 800d69c:	4313      	orrs	r3, r2
 800d69e:	b21b      	sxth	r3, r3
 800d6a0:	81fb      	strh	r3, [r7, #14]
	return rv;
 800d6a2:	89fb      	ldrh	r3, [r7, #14]
}
 800d6a4:	4618      	mov	r0, r3
 800d6a6:	3714      	adds	r7, #20
 800d6a8:	46bd      	mov	sp, r7
 800d6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ae:	4770      	bx	lr

0800d6b0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800d6b0:	b480      	push	{r7}
 800d6b2:	b085      	sub	sp, #20
 800d6b4:	af00      	add	r7, sp, #0
 800d6b6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	3303      	adds	r3, #3
 800d6bc:	781b      	ldrb	r3, [r3, #0]
 800d6be:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	021b      	lsls	r3, r3, #8
 800d6c4:	687a      	ldr	r2, [r7, #4]
 800d6c6:	3202      	adds	r2, #2
 800d6c8:	7812      	ldrb	r2, [r2, #0]
 800d6ca:	4313      	orrs	r3, r2
 800d6cc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	021b      	lsls	r3, r3, #8
 800d6d2:	687a      	ldr	r2, [r7, #4]
 800d6d4:	3201      	adds	r2, #1
 800d6d6:	7812      	ldrb	r2, [r2, #0]
 800d6d8:	4313      	orrs	r3, r2
 800d6da:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	021b      	lsls	r3, r3, #8
 800d6e0:	687a      	ldr	r2, [r7, #4]
 800d6e2:	7812      	ldrb	r2, [r2, #0]
 800d6e4:	4313      	orrs	r3, r2
 800d6e6:	60fb      	str	r3, [r7, #12]
	return rv;
 800d6e8:	68fb      	ldr	r3, [r7, #12]
}
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	3714      	adds	r7, #20
 800d6ee:	46bd      	mov	sp, r7
 800d6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f4:	4770      	bx	lr

0800d6f6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800d6f6:	b480      	push	{r7}
 800d6f8:	b083      	sub	sp, #12
 800d6fa:	af00      	add	r7, sp, #0
 800d6fc:	6078      	str	r0, [r7, #4]
 800d6fe:	460b      	mov	r3, r1
 800d700:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	1c5a      	adds	r2, r3, #1
 800d706:	607a      	str	r2, [r7, #4]
 800d708:	887a      	ldrh	r2, [r7, #2]
 800d70a:	b2d2      	uxtb	r2, r2
 800d70c:	701a      	strb	r2, [r3, #0]
 800d70e:	887b      	ldrh	r3, [r7, #2]
 800d710:	0a1b      	lsrs	r3, r3, #8
 800d712:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	1c5a      	adds	r2, r3, #1
 800d718:	607a      	str	r2, [r7, #4]
 800d71a:	887a      	ldrh	r2, [r7, #2]
 800d71c:	b2d2      	uxtb	r2, r2
 800d71e:	701a      	strb	r2, [r3, #0]
}
 800d720:	bf00      	nop
 800d722:	370c      	adds	r7, #12
 800d724:	46bd      	mov	sp, r7
 800d726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d72a:	4770      	bx	lr

0800d72c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800d72c:	b480      	push	{r7}
 800d72e:	b083      	sub	sp, #12
 800d730:	af00      	add	r7, sp, #0
 800d732:	6078      	str	r0, [r7, #4]
 800d734:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	1c5a      	adds	r2, r3, #1
 800d73a:	607a      	str	r2, [r7, #4]
 800d73c:	683a      	ldr	r2, [r7, #0]
 800d73e:	b2d2      	uxtb	r2, r2
 800d740:	701a      	strb	r2, [r3, #0]
 800d742:	683b      	ldr	r3, [r7, #0]
 800d744:	0a1b      	lsrs	r3, r3, #8
 800d746:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	1c5a      	adds	r2, r3, #1
 800d74c:	607a      	str	r2, [r7, #4]
 800d74e:	683a      	ldr	r2, [r7, #0]
 800d750:	b2d2      	uxtb	r2, r2
 800d752:	701a      	strb	r2, [r3, #0]
 800d754:	683b      	ldr	r3, [r7, #0]
 800d756:	0a1b      	lsrs	r3, r3, #8
 800d758:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	1c5a      	adds	r2, r3, #1
 800d75e:	607a      	str	r2, [r7, #4]
 800d760:	683a      	ldr	r2, [r7, #0]
 800d762:	b2d2      	uxtb	r2, r2
 800d764:	701a      	strb	r2, [r3, #0]
 800d766:	683b      	ldr	r3, [r7, #0]
 800d768:	0a1b      	lsrs	r3, r3, #8
 800d76a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	1c5a      	adds	r2, r3, #1
 800d770:	607a      	str	r2, [r7, #4]
 800d772:	683a      	ldr	r2, [r7, #0]
 800d774:	b2d2      	uxtb	r2, r2
 800d776:	701a      	strb	r2, [r3, #0]
}
 800d778:	bf00      	nop
 800d77a:	370c      	adds	r7, #12
 800d77c:	46bd      	mov	sp, r7
 800d77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d782:	4770      	bx	lr

0800d784 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800d784:	b480      	push	{r7}
 800d786:	b087      	sub	sp, #28
 800d788:	af00      	add	r7, sp, #0
 800d78a:	60f8      	str	r0, [r7, #12]
 800d78c:	60b9      	str	r1, [r7, #8]
 800d78e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800d794:	68bb      	ldr	r3, [r7, #8]
 800d796:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d00d      	beq.n	800d7ba <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800d79e:	693a      	ldr	r2, [r7, #16]
 800d7a0:	1c53      	adds	r3, r2, #1
 800d7a2:	613b      	str	r3, [r7, #16]
 800d7a4:	697b      	ldr	r3, [r7, #20]
 800d7a6:	1c59      	adds	r1, r3, #1
 800d7a8:	6179      	str	r1, [r7, #20]
 800d7aa:	7812      	ldrb	r2, [r2, #0]
 800d7ac:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	3b01      	subs	r3, #1
 800d7b2:	607b      	str	r3, [r7, #4]
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d1f1      	bne.n	800d79e <mem_cpy+0x1a>
	}
}
 800d7ba:	bf00      	nop
 800d7bc:	371c      	adds	r7, #28
 800d7be:	46bd      	mov	sp, r7
 800d7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c4:	4770      	bx	lr

0800d7c6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800d7c6:	b480      	push	{r7}
 800d7c8:	b087      	sub	sp, #28
 800d7ca:	af00      	add	r7, sp, #0
 800d7cc:	60f8      	str	r0, [r7, #12]
 800d7ce:	60b9      	str	r1, [r7, #8]
 800d7d0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800d7d6:	697b      	ldr	r3, [r7, #20]
 800d7d8:	1c5a      	adds	r2, r3, #1
 800d7da:	617a      	str	r2, [r7, #20]
 800d7dc:	68ba      	ldr	r2, [r7, #8]
 800d7de:	b2d2      	uxtb	r2, r2
 800d7e0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	3b01      	subs	r3, #1
 800d7e6:	607b      	str	r3, [r7, #4]
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d1f3      	bne.n	800d7d6 <mem_set+0x10>
}
 800d7ee:	bf00      	nop
 800d7f0:	371c      	adds	r7, #28
 800d7f2:	46bd      	mov	sp, r7
 800d7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f8:	4770      	bx	lr

0800d7fa <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800d7fa:	b480      	push	{r7}
 800d7fc:	b089      	sub	sp, #36	; 0x24
 800d7fe:	af00      	add	r7, sp, #0
 800d800:	60f8      	str	r0, [r7, #12]
 800d802:	60b9      	str	r1, [r7, #8]
 800d804:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	61fb      	str	r3, [r7, #28]
 800d80a:	68bb      	ldr	r3, [r7, #8]
 800d80c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800d80e:	2300      	movs	r3, #0
 800d810:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800d812:	69fb      	ldr	r3, [r7, #28]
 800d814:	1c5a      	adds	r2, r3, #1
 800d816:	61fa      	str	r2, [r7, #28]
 800d818:	781b      	ldrb	r3, [r3, #0]
 800d81a:	4619      	mov	r1, r3
 800d81c:	69bb      	ldr	r3, [r7, #24]
 800d81e:	1c5a      	adds	r2, r3, #1
 800d820:	61ba      	str	r2, [r7, #24]
 800d822:	781b      	ldrb	r3, [r3, #0]
 800d824:	1acb      	subs	r3, r1, r3
 800d826:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	3b01      	subs	r3, #1
 800d82c:	607b      	str	r3, [r7, #4]
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	2b00      	cmp	r3, #0
 800d832:	d002      	beq.n	800d83a <mem_cmp+0x40>
 800d834:	697b      	ldr	r3, [r7, #20]
 800d836:	2b00      	cmp	r3, #0
 800d838:	d0eb      	beq.n	800d812 <mem_cmp+0x18>

	return r;
 800d83a:	697b      	ldr	r3, [r7, #20]
}
 800d83c:	4618      	mov	r0, r3
 800d83e:	3724      	adds	r7, #36	; 0x24
 800d840:	46bd      	mov	sp, r7
 800d842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d846:	4770      	bx	lr

0800d848 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800d848:	b480      	push	{r7}
 800d84a:	b083      	sub	sp, #12
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	6078      	str	r0, [r7, #4]
 800d850:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800d852:	e002      	b.n	800d85a <chk_chr+0x12>
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	3301      	adds	r3, #1
 800d858:	607b      	str	r3, [r7, #4]
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	781b      	ldrb	r3, [r3, #0]
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d005      	beq.n	800d86e <chk_chr+0x26>
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	781b      	ldrb	r3, [r3, #0]
 800d866:	461a      	mov	r2, r3
 800d868:	683b      	ldr	r3, [r7, #0]
 800d86a:	4293      	cmp	r3, r2
 800d86c:	d1f2      	bne.n	800d854 <chk_chr+0xc>
	return *str;
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	781b      	ldrb	r3, [r3, #0]
}
 800d872:	4618      	mov	r0, r3
 800d874:	370c      	adds	r7, #12
 800d876:	46bd      	mov	sp, r7
 800d878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d87c:	4770      	bx	lr
	...

0800d880 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d880:	b480      	push	{r7}
 800d882:	b085      	sub	sp, #20
 800d884:	af00      	add	r7, sp, #0
 800d886:	6078      	str	r0, [r7, #4]
 800d888:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d88a:	2300      	movs	r3, #0
 800d88c:	60bb      	str	r3, [r7, #8]
 800d88e:	68bb      	ldr	r3, [r7, #8]
 800d890:	60fb      	str	r3, [r7, #12]
 800d892:	e029      	b.n	800d8e8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800d894:	4a27      	ldr	r2, [pc, #156]	; (800d934 <chk_lock+0xb4>)
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	011b      	lsls	r3, r3, #4
 800d89a:	4413      	add	r3, r2
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d01d      	beq.n	800d8de <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d8a2:	4a24      	ldr	r2, [pc, #144]	; (800d934 <chk_lock+0xb4>)
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	011b      	lsls	r3, r3, #4
 800d8a8:	4413      	add	r3, r2
 800d8aa:	681a      	ldr	r2, [r3, #0]
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	429a      	cmp	r2, r3
 800d8b2:	d116      	bne.n	800d8e2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800d8b4:	4a1f      	ldr	r2, [pc, #124]	; (800d934 <chk_lock+0xb4>)
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	011b      	lsls	r3, r3, #4
 800d8ba:	4413      	add	r3, r2
 800d8bc:	3304      	adds	r3, #4
 800d8be:	681a      	ldr	r2, [r3, #0]
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d8c4:	429a      	cmp	r2, r3
 800d8c6:	d10c      	bne.n	800d8e2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d8c8:	4a1a      	ldr	r2, [pc, #104]	; (800d934 <chk_lock+0xb4>)
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	011b      	lsls	r3, r3, #4
 800d8ce:	4413      	add	r3, r2
 800d8d0:	3308      	adds	r3, #8
 800d8d2:	681a      	ldr	r2, [r3, #0]
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800d8d8:	429a      	cmp	r2, r3
 800d8da:	d102      	bne.n	800d8e2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d8dc:	e007      	b.n	800d8ee <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800d8de:	2301      	movs	r3, #1
 800d8e0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	3301      	adds	r3, #1
 800d8e6:	60fb      	str	r3, [r7, #12]
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	2b01      	cmp	r3, #1
 800d8ec:	d9d2      	bls.n	800d894 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	2b02      	cmp	r3, #2
 800d8f2:	d109      	bne.n	800d908 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800d8f4:	68bb      	ldr	r3, [r7, #8]
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d102      	bne.n	800d900 <chk_lock+0x80>
 800d8fa:	683b      	ldr	r3, [r7, #0]
 800d8fc:	2b02      	cmp	r3, #2
 800d8fe:	d101      	bne.n	800d904 <chk_lock+0x84>
 800d900:	2300      	movs	r3, #0
 800d902:	e010      	b.n	800d926 <chk_lock+0xa6>
 800d904:	2312      	movs	r3, #18
 800d906:	e00e      	b.n	800d926 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800d908:	683b      	ldr	r3, [r7, #0]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d108      	bne.n	800d920 <chk_lock+0xa0>
 800d90e:	4a09      	ldr	r2, [pc, #36]	; (800d934 <chk_lock+0xb4>)
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	011b      	lsls	r3, r3, #4
 800d914:	4413      	add	r3, r2
 800d916:	330c      	adds	r3, #12
 800d918:	881b      	ldrh	r3, [r3, #0]
 800d91a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d91e:	d101      	bne.n	800d924 <chk_lock+0xa4>
 800d920:	2310      	movs	r3, #16
 800d922:	e000      	b.n	800d926 <chk_lock+0xa6>
 800d924:	2300      	movs	r3, #0
}
 800d926:	4618      	mov	r0, r3
 800d928:	3714      	adds	r7, #20
 800d92a:	46bd      	mov	sp, r7
 800d92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d930:	4770      	bx	lr
 800d932:	bf00      	nop
 800d934:	2001f2c8 	.word	0x2001f2c8

0800d938 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800d938:	b480      	push	{r7}
 800d93a:	b083      	sub	sp, #12
 800d93c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d93e:	2300      	movs	r3, #0
 800d940:	607b      	str	r3, [r7, #4]
 800d942:	e002      	b.n	800d94a <enq_lock+0x12>
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	3301      	adds	r3, #1
 800d948:	607b      	str	r3, [r7, #4]
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	2b01      	cmp	r3, #1
 800d94e:	d806      	bhi.n	800d95e <enq_lock+0x26>
 800d950:	4a09      	ldr	r2, [pc, #36]	; (800d978 <enq_lock+0x40>)
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	011b      	lsls	r3, r3, #4
 800d956:	4413      	add	r3, r2
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d1f2      	bne.n	800d944 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	2b02      	cmp	r3, #2
 800d962:	bf14      	ite	ne
 800d964:	2301      	movne	r3, #1
 800d966:	2300      	moveq	r3, #0
 800d968:	b2db      	uxtb	r3, r3
}
 800d96a:	4618      	mov	r0, r3
 800d96c:	370c      	adds	r7, #12
 800d96e:	46bd      	mov	sp, r7
 800d970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d974:	4770      	bx	lr
 800d976:	bf00      	nop
 800d978:	2001f2c8 	.word	0x2001f2c8

0800d97c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d97c:	b480      	push	{r7}
 800d97e:	b085      	sub	sp, #20
 800d980:	af00      	add	r7, sp, #0
 800d982:	6078      	str	r0, [r7, #4]
 800d984:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d986:	2300      	movs	r3, #0
 800d988:	60fb      	str	r3, [r7, #12]
 800d98a:	e01f      	b.n	800d9cc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800d98c:	4a41      	ldr	r2, [pc, #260]	; (800da94 <inc_lock+0x118>)
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	011b      	lsls	r3, r3, #4
 800d992:	4413      	add	r3, r2
 800d994:	681a      	ldr	r2, [r3, #0]
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	429a      	cmp	r2, r3
 800d99c:	d113      	bne.n	800d9c6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800d99e:	4a3d      	ldr	r2, [pc, #244]	; (800da94 <inc_lock+0x118>)
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	011b      	lsls	r3, r3, #4
 800d9a4:	4413      	add	r3, r2
 800d9a6:	3304      	adds	r3, #4
 800d9a8:	681a      	ldr	r2, [r3, #0]
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800d9ae:	429a      	cmp	r2, r3
 800d9b0:	d109      	bne.n	800d9c6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800d9b2:	4a38      	ldr	r2, [pc, #224]	; (800da94 <inc_lock+0x118>)
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	011b      	lsls	r3, r3, #4
 800d9b8:	4413      	add	r3, r2
 800d9ba:	3308      	adds	r3, #8
 800d9bc:	681a      	ldr	r2, [r3, #0]
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800d9c2:	429a      	cmp	r2, r3
 800d9c4:	d006      	beq.n	800d9d4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	3301      	adds	r3, #1
 800d9ca:	60fb      	str	r3, [r7, #12]
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	2b01      	cmp	r3, #1
 800d9d0:	d9dc      	bls.n	800d98c <inc_lock+0x10>
 800d9d2:	e000      	b.n	800d9d6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800d9d4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	2b02      	cmp	r3, #2
 800d9da:	d132      	bne.n	800da42 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d9dc:	2300      	movs	r3, #0
 800d9de:	60fb      	str	r3, [r7, #12]
 800d9e0:	e002      	b.n	800d9e8 <inc_lock+0x6c>
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	3301      	adds	r3, #1
 800d9e6:	60fb      	str	r3, [r7, #12]
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	2b01      	cmp	r3, #1
 800d9ec:	d806      	bhi.n	800d9fc <inc_lock+0x80>
 800d9ee:	4a29      	ldr	r2, [pc, #164]	; (800da94 <inc_lock+0x118>)
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	011b      	lsls	r3, r3, #4
 800d9f4:	4413      	add	r3, r2
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d1f2      	bne.n	800d9e2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	2b02      	cmp	r3, #2
 800da00:	d101      	bne.n	800da06 <inc_lock+0x8a>
 800da02:	2300      	movs	r3, #0
 800da04:	e040      	b.n	800da88 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	681a      	ldr	r2, [r3, #0]
 800da0a:	4922      	ldr	r1, [pc, #136]	; (800da94 <inc_lock+0x118>)
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	011b      	lsls	r3, r3, #4
 800da10:	440b      	add	r3, r1
 800da12:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	689a      	ldr	r2, [r3, #8]
 800da18:	491e      	ldr	r1, [pc, #120]	; (800da94 <inc_lock+0x118>)
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	011b      	lsls	r3, r3, #4
 800da1e:	440b      	add	r3, r1
 800da20:	3304      	adds	r3, #4
 800da22:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	695a      	ldr	r2, [r3, #20]
 800da28:	491a      	ldr	r1, [pc, #104]	; (800da94 <inc_lock+0x118>)
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	011b      	lsls	r3, r3, #4
 800da2e:	440b      	add	r3, r1
 800da30:	3308      	adds	r3, #8
 800da32:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800da34:	4a17      	ldr	r2, [pc, #92]	; (800da94 <inc_lock+0x118>)
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	011b      	lsls	r3, r3, #4
 800da3a:	4413      	add	r3, r2
 800da3c:	330c      	adds	r3, #12
 800da3e:	2200      	movs	r2, #0
 800da40:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800da42:	683b      	ldr	r3, [r7, #0]
 800da44:	2b00      	cmp	r3, #0
 800da46:	d009      	beq.n	800da5c <inc_lock+0xe0>
 800da48:	4a12      	ldr	r2, [pc, #72]	; (800da94 <inc_lock+0x118>)
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	011b      	lsls	r3, r3, #4
 800da4e:	4413      	add	r3, r2
 800da50:	330c      	adds	r3, #12
 800da52:	881b      	ldrh	r3, [r3, #0]
 800da54:	2b00      	cmp	r3, #0
 800da56:	d001      	beq.n	800da5c <inc_lock+0xe0>
 800da58:	2300      	movs	r3, #0
 800da5a:	e015      	b.n	800da88 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800da5c:	683b      	ldr	r3, [r7, #0]
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d108      	bne.n	800da74 <inc_lock+0xf8>
 800da62:	4a0c      	ldr	r2, [pc, #48]	; (800da94 <inc_lock+0x118>)
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	011b      	lsls	r3, r3, #4
 800da68:	4413      	add	r3, r2
 800da6a:	330c      	adds	r3, #12
 800da6c:	881b      	ldrh	r3, [r3, #0]
 800da6e:	3301      	adds	r3, #1
 800da70:	b29a      	uxth	r2, r3
 800da72:	e001      	b.n	800da78 <inc_lock+0xfc>
 800da74:	f44f 7280 	mov.w	r2, #256	; 0x100
 800da78:	4906      	ldr	r1, [pc, #24]	; (800da94 <inc_lock+0x118>)
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	011b      	lsls	r3, r3, #4
 800da7e:	440b      	add	r3, r1
 800da80:	330c      	adds	r3, #12
 800da82:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	3301      	adds	r3, #1
}
 800da88:	4618      	mov	r0, r3
 800da8a:	3714      	adds	r7, #20
 800da8c:	46bd      	mov	sp, r7
 800da8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da92:	4770      	bx	lr
 800da94:	2001f2c8 	.word	0x2001f2c8

0800da98 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800da98:	b480      	push	{r7}
 800da9a:	b085      	sub	sp, #20
 800da9c:	af00      	add	r7, sp, #0
 800da9e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	3b01      	subs	r3, #1
 800daa4:	607b      	str	r3, [r7, #4]
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	2b01      	cmp	r3, #1
 800daaa:	d825      	bhi.n	800daf8 <dec_lock+0x60>
		n = Files[i].ctr;
 800daac:	4a17      	ldr	r2, [pc, #92]	; (800db0c <dec_lock+0x74>)
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	011b      	lsls	r3, r3, #4
 800dab2:	4413      	add	r3, r2
 800dab4:	330c      	adds	r3, #12
 800dab6:	881b      	ldrh	r3, [r3, #0]
 800dab8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800daba:	89fb      	ldrh	r3, [r7, #14]
 800dabc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dac0:	d101      	bne.n	800dac6 <dec_lock+0x2e>
 800dac2:	2300      	movs	r3, #0
 800dac4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800dac6:	89fb      	ldrh	r3, [r7, #14]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d002      	beq.n	800dad2 <dec_lock+0x3a>
 800dacc:	89fb      	ldrh	r3, [r7, #14]
 800dace:	3b01      	subs	r3, #1
 800dad0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800dad2:	4a0e      	ldr	r2, [pc, #56]	; (800db0c <dec_lock+0x74>)
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	011b      	lsls	r3, r3, #4
 800dad8:	4413      	add	r3, r2
 800dada:	330c      	adds	r3, #12
 800dadc:	89fa      	ldrh	r2, [r7, #14]
 800dade:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800dae0:	89fb      	ldrh	r3, [r7, #14]
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d105      	bne.n	800daf2 <dec_lock+0x5a>
 800dae6:	4a09      	ldr	r2, [pc, #36]	; (800db0c <dec_lock+0x74>)
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	011b      	lsls	r3, r3, #4
 800daec:	4413      	add	r3, r2
 800daee:	2200      	movs	r2, #0
 800daf0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800daf2:	2300      	movs	r3, #0
 800daf4:	737b      	strb	r3, [r7, #13]
 800daf6:	e001      	b.n	800dafc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800daf8:	2302      	movs	r3, #2
 800dafa:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800dafc:	7b7b      	ldrb	r3, [r7, #13]
}
 800dafe:	4618      	mov	r0, r3
 800db00:	3714      	adds	r7, #20
 800db02:	46bd      	mov	sp, r7
 800db04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db08:	4770      	bx	lr
 800db0a:	bf00      	nop
 800db0c:	2001f2c8 	.word	0x2001f2c8

0800db10 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800db10:	b480      	push	{r7}
 800db12:	b085      	sub	sp, #20
 800db14:	af00      	add	r7, sp, #0
 800db16:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800db18:	2300      	movs	r3, #0
 800db1a:	60fb      	str	r3, [r7, #12]
 800db1c:	e010      	b.n	800db40 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800db1e:	4a0d      	ldr	r2, [pc, #52]	; (800db54 <clear_lock+0x44>)
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	011b      	lsls	r3, r3, #4
 800db24:	4413      	add	r3, r2
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	687a      	ldr	r2, [r7, #4]
 800db2a:	429a      	cmp	r2, r3
 800db2c:	d105      	bne.n	800db3a <clear_lock+0x2a>
 800db2e:	4a09      	ldr	r2, [pc, #36]	; (800db54 <clear_lock+0x44>)
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	011b      	lsls	r3, r3, #4
 800db34:	4413      	add	r3, r2
 800db36:	2200      	movs	r2, #0
 800db38:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	3301      	adds	r3, #1
 800db3e:	60fb      	str	r3, [r7, #12]
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	2b01      	cmp	r3, #1
 800db44:	d9eb      	bls.n	800db1e <clear_lock+0xe>
	}
}
 800db46:	bf00      	nop
 800db48:	3714      	adds	r7, #20
 800db4a:	46bd      	mov	sp, r7
 800db4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db50:	4770      	bx	lr
 800db52:	bf00      	nop
 800db54:	2001f2c8 	.word	0x2001f2c8

0800db58 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800db58:	b580      	push	{r7, lr}
 800db5a:	b086      	sub	sp, #24
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800db60:	2300      	movs	r3, #0
 800db62:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	78db      	ldrb	r3, [r3, #3]
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d034      	beq.n	800dbd6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db70:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	7858      	ldrb	r0, [r3, #1]
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800db7c:	2301      	movs	r3, #1
 800db7e:	697a      	ldr	r2, [r7, #20]
 800db80:	f7ff fd40 	bl	800d604 <disk_write>
 800db84:	4603      	mov	r3, r0
 800db86:	2b00      	cmp	r3, #0
 800db88:	d002      	beq.n	800db90 <sync_window+0x38>
			res = FR_DISK_ERR;
 800db8a:	2301      	movs	r3, #1
 800db8c:	73fb      	strb	r3, [r7, #15]
 800db8e:	e022      	b.n	800dbd6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	2200      	movs	r2, #0
 800db94:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db9a:	697a      	ldr	r2, [r7, #20]
 800db9c:	1ad2      	subs	r2, r2, r3
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dba2:	429a      	cmp	r2, r3
 800dba4:	d217      	bcs.n	800dbd6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	789b      	ldrb	r3, [r3, #2]
 800dbaa:	613b      	str	r3, [r7, #16]
 800dbac:	e010      	b.n	800dbd0 <sync_window+0x78>
					wsect += fs->fsize;
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbb2:	697a      	ldr	r2, [r7, #20]
 800dbb4:	4413      	add	r3, r2
 800dbb6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	7858      	ldrb	r0, [r3, #1]
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800dbc2:	2301      	movs	r3, #1
 800dbc4:	697a      	ldr	r2, [r7, #20]
 800dbc6:	f7ff fd1d 	bl	800d604 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800dbca:	693b      	ldr	r3, [r7, #16]
 800dbcc:	3b01      	subs	r3, #1
 800dbce:	613b      	str	r3, [r7, #16]
 800dbd0:	693b      	ldr	r3, [r7, #16]
 800dbd2:	2b01      	cmp	r3, #1
 800dbd4:	d8eb      	bhi.n	800dbae <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800dbd6:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbd8:	4618      	mov	r0, r3
 800dbda:	3718      	adds	r7, #24
 800dbdc:	46bd      	mov	sp, r7
 800dbde:	bd80      	pop	{r7, pc}

0800dbe0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800dbe0:	b580      	push	{r7, lr}
 800dbe2:	b084      	sub	sp, #16
 800dbe4:	af00      	add	r7, sp, #0
 800dbe6:	6078      	str	r0, [r7, #4]
 800dbe8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800dbea:	2300      	movs	r3, #0
 800dbec:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbf2:	683a      	ldr	r2, [r7, #0]
 800dbf4:	429a      	cmp	r2, r3
 800dbf6:	d01b      	beq.n	800dc30 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800dbf8:	6878      	ldr	r0, [r7, #4]
 800dbfa:	f7ff ffad 	bl	800db58 <sync_window>
 800dbfe:	4603      	mov	r3, r0
 800dc00:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800dc02:	7bfb      	ldrb	r3, [r7, #15]
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d113      	bne.n	800dc30 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	7858      	ldrb	r0, [r3, #1]
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800dc12:	2301      	movs	r3, #1
 800dc14:	683a      	ldr	r2, [r7, #0]
 800dc16:	f7ff fcd5 	bl	800d5c4 <disk_read>
 800dc1a:	4603      	mov	r3, r0
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d004      	beq.n	800dc2a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800dc20:	f04f 33ff 	mov.w	r3, #4294967295
 800dc24:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800dc26:	2301      	movs	r3, #1
 800dc28:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	683a      	ldr	r2, [r7, #0]
 800dc2e:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 800dc30:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc32:	4618      	mov	r0, r3
 800dc34:	3710      	adds	r7, #16
 800dc36:	46bd      	mov	sp, r7
 800dc38:	bd80      	pop	{r7, pc}
	...

0800dc3c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800dc3c:	b580      	push	{r7, lr}
 800dc3e:	b084      	sub	sp, #16
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800dc44:	6878      	ldr	r0, [r7, #4]
 800dc46:	f7ff ff87 	bl	800db58 <sync_window>
 800dc4a:	4603      	mov	r3, r0
 800dc4c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800dc4e:	7bfb      	ldrb	r3, [r7, #15]
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d159      	bne.n	800dd08 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	781b      	ldrb	r3, [r3, #0]
 800dc58:	2b03      	cmp	r3, #3
 800dc5a:	d149      	bne.n	800dcf0 <sync_fs+0xb4>
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	791b      	ldrb	r3, [r3, #4]
 800dc60:	2b01      	cmp	r3, #1
 800dc62:	d145      	bne.n	800dcf0 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	899b      	ldrh	r3, [r3, #12]
 800dc6e:	461a      	mov	r2, r3
 800dc70:	2100      	movs	r1, #0
 800dc72:	f7ff fda8 	bl	800d7c6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	333c      	adds	r3, #60	; 0x3c
 800dc7a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800dc7e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800dc82:	4618      	mov	r0, r3
 800dc84:	f7ff fd37 	bl	800d6f6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	333c      	adds	r3, #60	; 0x3c
 800dc8c:	4921      	ldr	r1, [pc, #132]	; (800dd14 <sync_fs+0xd8>)
 800dc8e:	4618      	mov	r0, r3
 800dc90:	f7ff fd4c 	bl	800d72c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	333c      	adds	r3, #60	; 0x3c
 800dc98:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800dc9c:	491e      	ldr	r1, [pc, #120]	; (800dd18 <sync_fs+0xdc>)
 800dc9e:	4618      	mov	r0, r3
 800dca0:	f7ff fd44 	bl	800d72c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	333c      	adds	r3, #60	; 0x3c
 800dca8:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	699b      	ldr	r3, [r3, #24]
 800dcb0:	4619      	mov	r1, r3
 800dcb2:	4610      	mov	r0, r2
 800dcb4:	f7ff fd3a 	bl	800d72c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	333c      	adds	r3, #60	; 0x3c
 800dcbc:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	695b      	ldr	r3, [r3, #20]
 800dcc4:	4619      	mov	r1, r3
 800dcc6:	4610      	mov	r0, r2
 800dcc8:	f7ff fd30 	bl	800d72c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcd0:	1c5a      	adds	r2, r3, #1
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	7858      	ldrb	r0, [r3, #1]
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dce4:	2301      	movs	r3, #1
 800dce6:	f7ff fc8d 	bl	800d604 <disk_write>
			fs->fsi_flag = 0;
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	2200      	movs	r2, #0
 800dcee:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	785b      	ldrb	r3, [r3, #1]
 800dcf4:	2200      	movs	r2, #0
 800dcf6:	2100      	movs	r1, #0
 800dcf8:	4618      	mov	r0, r3
 800dcfa:	f7ff fca3 	bl	800d644 <disk_ioctl>
 800dcfe:	4603      	mov	r3, r0
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d001      	beq.n	800dd08 <sync_fs+0xcc>
 800dd04:	2301      	movs	r3, #1
 800dd06:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800dd08:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	3710      	adds	r7, #16
 800dd0e:	46bd      	mov	sp, r7
 800dd10:	bd80      	pop	{r7, pc}
 800dd12:	bf00      	nop
 800dd14:	41615252 	.word	0x41615252
 800dd18:	61417272 	.word	0x61417272

0800dd1c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800dd1c:	b480      	push	{r7}
 800dd1e:	b083      	sub	sp, #12
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	6078      	str	r0, [r7, #4]
 800dd24:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800dd26:	683b      	ldr	r3, [r7, #0]
 800dd28:	3b02      	subs	r3, #2
 800dd2a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	6a1b      	ldr	r3, [r3, #32]
 800dd30:	3b02      	subs	r3, #2
 800dd32:	683a      	ldr	r2, [r7, #0]
 800dd34:	429a      	cmp	r2, r3
 800dd36:	d301      	bcc.n	800dd3c <clust2sect+0x20>
 800dd38:	2300      	movs	r3, #0
 800dd3a:	e008      	b.n	800dd4e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	895b      	ldrh	r3, [r3, #10]
 800dd40:	461a      	mov	r2, r3
 800dd42:	683b      	ldr	r3, [r7, #0]
 800dd44:	fb03 f202 	mul.w	r2, r3, r2
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd4c:	4413      	add	r3, r2
}
 800dd4e:	4618      	mov	r0, r3
 800dd50:	370c      	adds	r7, #12
 800dd52:	46bd      	mov	sp, r7
 800dd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd58:	4770      	bx	lr

0800dd5a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800dd5a:	b580      	push	{r7, lr}
 800dd5c:	b086      	sub	sp, #24
 800dd5e:	af00      	add	r7, sp, #0
 800dd60:	6078      	str	r0, [r7, #4]
 800dd62:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800dd6a:	683b      	ldr	r3, [r7, #0]
 800dd6c:	2b01      	cmp	r3, #1
 800dd6e:	d904      	bls.n	800dd7a <get_fat+0x20>
 800dd70:	693b      	ldr	r3, [r7, #16]
 800dd72:	6a1b      	ldr	r3, [r3, #32]
 800dd74:	683a      	ldr	r2, [r7, #0]
 800dd76:	429a      	cmp	r2, r3
 800dd78:	d302      	bcc.n	800dd80 <get_fat+0x26>
		val = 1;	/* Internal error */
 800dd7a:	2301      	movs	r3, #1
 800dd7c:	617b      	str	r3, [r7, #20]
 800dd7e:	e0b7      	b.n	800def0 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800dd80:	f04f 33ff 	mov.w	r3, #4294967295
 800dd84:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800dd86:	693b      	ldr	r3, [r7, #16]
 800dd88:	781b      	ldrb	r3, [r3, #0]
 800dd8a:	2b02      	cmp	r3, #2
 800dd8c:	d05a      	beq.n	800de44 <get_fat+0xea>
 800dd8e:	2b03      	cmp	r3, #3
 800dd90:	d07d      	beq.n	800de8e <get_fat+0x134>
 800dd92:	2b01      	cmp	r3, #1
 800dd94:	f040 80a2 	bne.w	800dedc <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800dd98:	683b      	ldr	r3, [r7, #0]
 800dd9a:	60fb      	str	r3, [r7, #12]
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	085b      	lsrs	r3, r3, #1
 800dda0:	68fa      	ldr	r2, [r7, #12]
 800dda2:	4413      	add	r3, r2
 800dda4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dda6:	693b      	ldr	r3, [r7, #16]
 800dda8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddaa:	693b      	ldr	r3, [r7, #16]
 800ddac:	899b      	ldrh	r3, [r3, #12]
 800ddae:	4619      	mov	r1, r3
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	fbb3 f3f1 	udiv	r3, r3, r1
 800ddb6:	4413      	add	r3, r2
 800ddb8:	4619      	mov	r1, r3
 800ddba:	6938      	ldr	r0, [r7, #16]
 800ddbc:	f7ff ff10 	bl	800dbe0 <move_window>
 800ddc0:	4603      	mov	r3, r0
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	f040 808d 	bne.w	800dee2 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	1c5a      	adds	r2, r3, #1
 800ddcc:	60fa      	str	r2, [r7, #12]
 800ddce:	693a      	ldr	r2, [r7, #16]
 800ddd0:	8992      	ldrh	r2, [r2, #12]
 800ddd2:	fbb3 f1f2 	udiv	r1, r3, r2
 800ddd6:	fb02 f201 	mul.w	r2, r2, r1
 800ddda:	1a9b      	subs	r3, r3, r2
 800dddc:	693a      	ldr	r2, [r7, #16]
 800ddde:	4413      	add	r3, r2
 800dde0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dde4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dde6:	693b      	ldr	r3, [r7, #16]
 800dde8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddea:	693b      	ldr	r3, [r7, #16]
 800ddec:	899b      	ldrh	r3, [r3, #12]
 800ddee:	4619      	mov	r1, r3
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	fbb3 f3f1 	udiv	r3, r3, r1
 800ddf6:	4413      	add	r3, r2
 800ddf8:	4619      	mov	r1, r3
 800ddfa:	6938      	ldr	r0, [r7, #16]
 800ddfc:	f7ff fef0 	bl	800dbe0 <move_window>
 800de00:	4603      	mov	r3, r0
 800de02:	2b00      	cmp	r3, #0
 800de04:	d16f      	bne.n	800dee6 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800de06:	693b      	ldr	r3, [r7, #16]
 800de08:	899b      	ldrh	r3, [r3, #12]
 800de0a:	461a      	mov	r2, r3
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	fbb3 f1f2 	udiv	r1, r3, r2
 800de12:	fb02 f201 	mul.w	r2, r2, r1
 800de16:	1a9b      	subs	r3, r3, r2
 800de18:	693a      	ldr	r2, [r7, #16]
 800de1a:	4413      	add	r3, r2
 800de1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800de20:	021b      	lsls	r3, r3, #8
 800de22:	461a      	mov	r2, r3
 800de24:	68bb      	ldr	r3, [r7, #8]
 800de26:	4313      	orrs	r3, r2
 800de28:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800de2a:	683b      	ldr	r3, [r7, #0]
 800de2c:	f003 0301 	and.w	r3, r3, #1
 800de30:	2b00      	cmp	r3, #0
 800de32:	d002      	beq.n	800de3a <get_fat+0xe0>
 800de34:	68bb      	ldr	r3, [r7, #8]
 800de36:	091b      	lsrs	r3, r3, #4
 800de38:	e002      	b.n	800de40 <get_fat+0xe6>
 800de3a:	68bb      	ldr	r3, [r7, #8]
 800de3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800de40:	617b      	str	r3, [r7, #20]
			break;
 800de42:	e055      	b.n	800def0 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800de44:	693b      	ldr	r3, [r7, #16]
 800de46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de48:	693b      	ldr	r3, [r7, #16]
 800de4a:	899b      	ldrh	r3, [r3, #12]
 800de4c:	085b      	lsrs	r3, r3, #1
 800de4e:	b29b      	uxth	r3, r3
 800de50:	4619      	mov	r1, r3
 800de52:	683b      	ldr	r3, [r7, #0]
 800de54:	fbb3 f3f1 	udiv	r3, r3, r1
 800de58:	4413      	add	r3, r2
 800de5a:	4619      	mov	r1, r3
 800de5c:	6938      	ldr	r0, [r7, #16]
 800de5e:	f7ff febf 	bl	800dbe0 <move_window>
 800de62:	4603      	mov	r3, r0
 800de64:	2b00      	cmp	r3, #0
 800de66:	d140      	bne.n	800deea <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800de68:	693b      	ldr	r3, [r7, #16]
 800de6a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800de6e:	683b      	ldr	r3, [r7, #0]
 800de70:	005b      	lsls	r3, r3, #1
 800de72:	693a      	ldr	r2, [r7, #16]
 800de74:	8992      	ldrh	r2, [r2, #12]
 800de76:	fbb3 f0f2 	udiv	r0, r3, r2
 800de7a:	fb02 f200 	mul.w	r2, r2, r0
 800de7e:	1a9b      	subs	r3, r3, r2
 800de80:	440b      	add	r3, r1
 800de82:	4618      	mov	r0, r3
 800de84:	f7ff fbfc 	bl	800d680 <ld_word>
 800de88:	4603      	mov	r3, r0
 800de8a:	617b      	str	r3, [r7, #20]
			break;
 800de8c:	e030      	b.n	800def0 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800de8e:	693b      	ldr	r3, [r7, #16]
 800de90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de92:	693b      	ldr	r3, [r7, #16]
 800de94:	899b      	ldrh	r3, [r3, #12]
 800de96:	089b      	lsrs	r3, r3, #2
 800de98:	b29b      	uxth	r3, r3
 800de9a:	4619      	mov	r1, r3
 800de9c:	683b      	ldr	r3, [r7, #0]
 800de9e:	fbb3 f3f1 	udiv	r3, r3, r1
 800dea2:	4413      	add	r3, r2
 800dea4:	4619      	mov	r1, r3
 800dea6:	6938      	ldr	r0, [r7, #16]
 800dea8:	f7ff fe9a 	bl	800dbe0 <move_window>
 800deac:	4603      	mov	r3, r0
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d11d      	bne.n	800deee <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800deb2:	693b      	ldr	r3, [r7, #16]
 800deb4:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800deb8:	683b      	ldr	r3, [r7, #0]
 800deba:	009b      	lsls	r3, r3, #2
 800debc:	693a      	ldr	r2, [r7, #16]
 800debe:	8992      	ldrh	r2, [r2, #12]
 800dec0:	fbb3 f0f2 	udiv	r0, r3, r2
 800dec4:	fb02 f200 	mul.w	r2, r2, r0
 800dec8:	1a9b      	subs	r3, r3, r2
 800deca:	440b      	add	r3, r1
 800decc:	4618      	mov	r0, r3
 800dece:	f7ff fbef 	bl	800d6b0 <ld_dword>
 800ded2:	4603      	mov	r3, r0
 800ded4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ded8:	617b      	str	r3, [r7, #20]
			break;
 800deda:	e009      	b.n	800def0 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800dedc:	2301      	movs	r3, #1
 800dede:	617b      	str	r3, [r7, #20]
 800dee0:	e006      	b.n	800def0 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dee2:	bf00      	nop
 800dee4:	e004      	b.n	800def0 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dee6:	bf00      	nop
 800dee8:	e002      	b.n	800def0 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800deea:	bf00      	nop
 800deec:	e000      	b.n	800def0 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800deee:	bf00      	nop
		}
	}

	return val;
 800def0:	697b      	ldr	r3, [r7, #20]
}
 800def2:	4618      	mov	r0, r3
 800def4:	3718      	adds	r7, #24
 800def6:	46bd      	mov	sp, r7
 800def8:	bd80      	pop	{r7, pc}

0800defa <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800defa:	b590      	push	{r4, r7, lr}
 800defc:	b089      	sub	sp, #36	; 0x24
 800defe:	af00      	add	r7, sp, #0
 800df00:	60f8      	str	r0, [r7, #12]
 800df02:	60b9      	str	r1, [r7, #8]
 800df04:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800df06:	2302      	movs	r3, #2
 800df08:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800df0a:	68bb      	ldr	r3, [r7, #8]
 800df0c:	2b01      	cmp	r3, #1
 800df0e:	f240 8106 	bls.w	800e11e <put_fat+0x224>
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	6a1b      	ldr	r3, [r3, #32]
 800df16:	68ba      	ldr	r2, [r7, #8]
 800df18:	429a      	cmp	r2, r3
 800df1a:	f080 8100 	bcs.w	800e11e <put_fat+0x224>
		switch (fs->fs_type) {
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	781b      	ldrb	r3, [r3, #0]
 800df22:	2b02      	cmp	r3, #2
 800df24:	f000 8088 	beq.w	800e038 <put_fat+0x13e>
 800df28:	2b03      	cmp	r3, #3
 800df2a:	f000 80b0 	beq.w	800e08e <put_fat+0x194>
 800df2e:	2b01      	cmp	r3, #1
 800df30:	f040 80f5 	bne.w	800e11e <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800df34:	68bb      	ldr	r3, [r7, #8]
 800df36:	61bb      	str	r3, [r7, #24]
 800df38:	69bb      	ldr	r3, [r7, #24]
 800df3a:	085b      	lsrs	r3, r3, #1
 800df3c:	69ba      	ldr	r2, [r7, #24]
 800df3e:	4413      	add	r3, r2
 800df40:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	899b      	ldrh	r3, [r3, #12]
 800df4a:	4619      	mov	r1, r3
 800df4c:	69bb      	ldr	r3, [r7, #24]
 800df4e:	fbb3 f3f1 	udiv	r3, r3, r1
 800df52:	4413      	add	r3, r2
 800df54:	4619      	mov	r1, r3
 800df56:	68f8      	ldr	r0, [r7, #12]
 800df58:	f7ff fe42 	bl	800dbe0 <move_window>
 800df5c:	4603      	mov	r3, r0
 800df5e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800df60:	7ffb      	ldrb	r3, [r7, #31]
 800df62:	2b00      	cmp	r3, #0
 800df64:	f040 80d4 	bne.w	800e110 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800df6e:	69bb      	ldr	r3, [r7, #24]
 800df70:	1c5a      	adds	r2, r3, #1
 800df72:	61ba      	str	r2, [r7, #24]
 800df74:	68fa      	ldr	r2, [r7, #12]
 800df76:	8992      	ldrh	r2, [r2, #12]
 800df78:	fbb3 f0f2 	udiv	r0, r3, r2
 800df7c:	fb02 f200 	mul.w	r2, r2, r0
 800df80:	1a9b      	subs	r3, r3, r2
 800df82:	440b      	add	r3, r1
 800df84:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800df86:	68bb      	ldr	r3, [r7, #8]
 800df88:	f003 0301 	and.w	r3, r3, #1
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d00d      	beq.n	800dfac <put_fat+0xb2>
 800df90:	697b      	ldr	r3, [r7, #20]
 800df92:	781b      	ldrb	r3, [r3, #0]
 800df94:	b25b      	sxtb	r3, r3
 800df96:	f003 030f 	and.w	r3, r3, #15
 800df9a:	b25a      	sxtb	r2, r3
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	b2db      	uxtb	r3, r3
 800dfa0:	011b      	lsls	r3, r3, #4
 800dfa2:	b25b      	sxtb	r3, r3
 800dfa4:	4313      	orrs	r3, r2
 800dfa6:	b25b      	sxtb	r3, r3
 800dfa8:	b2db      	uxtb	r3, r3
 800dfaa:	e001      	b.n	800dfb0 <put_fat+0xb6>
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	b2db      	uxtb	r3, r3
 800dfb0:	697a      	ldr	r2, [r7, #20]
 800dfb2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	2201      	movs	r2, #1
 800dfb8:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	899b      	ldrh	r3, [r3, #12]
 800dfc2:	4619      	mov	r1, r3
 800dfc4:	69bb      	ldr	r3, [r7, #24]
 800dfc6:	fbb3 f3f1 	udiv	r3, r3, r1
 800dfca:	4413      	add	r3, r2
 800dfcc:	4619      	mov	r1, r3
 800dfce:	68f8      	ldr	r0, [r7, #12]
 800dfd0:	f7ff fe06 	bl	800dbe0 <move_window>
 800dfd4:	4603      	mov	r3, r0
 800dfd6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dfd8:	7ffb      	ldrb	r3, [r7, #31]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	f040 809a 	bne.w	800e114 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	899b      	ldrh	r3, [r3, #12]
 800dfea:	461a      	mov	r2, r3
 800dfec:	69bb      	ldr	r3, [r7, #24]
 800dfee:	fbb3 f0f2 	udiv	r0, r3, r2
 800dff2:	fb02 f200 	mul.w	r2, r2, r0
 800dff6:	1a9b      	subs	r3, r3, r2
 800dff8:	440b      	add	r3, r1
 800dffa:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800dffc:	68bb      	ldr	r3, [r7, #8]
 800dffe:	f003 0301 	and.w	r3, r3, #1
 800e002:	2b00      	cmp	r3, #0
 800e004:	d003      	beq.n	800e00e <put_fat+0x114>
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	091b      	lsrs	r3, r3, #4
 800e00a:	b2db      	uxtb	r3, r3
 800e00c:	e00e      	b.n	800e02c <put_fat+0x132>
 800e00e:	697b      	ldr	r3, [r7, #20]
 800e010:	781b      	ldrb	r3, [r3, #0]
 800e012:	b25b      	sxtb	r3, r3
 800e014:	f023 030f 	bic.w	r3, r3, #15
 800e018:	b25a      	sxtb	r2, r3
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	0a1b      	lsrs	r3, r3, #8
 800e01e:	b25b      	sxtb	r3, r3
 800e020:	f003 030f 	and.w	r3, r3, #15
 800e024:	b25b      	sxtb	r3, r3
 800e026:	4313      	orrs	r3, r2
 800e028:	b25b      	sxtb	r3, r3
 800e02a:	b2db      	uxtb	r3, r3
 800e02c:	697a      	ldr	r2, [r7, #20]
 800e02e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	2201      	movs	r2, #1
 800e034:	70da      	strb	r2, [r3, #3]
			break;
 800e036:	e072      	b.n	800e11e <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	899b      	ldrh	r3, [r3, #12]
 800e040:	085b      	lsrs	r3, r3, #1
 800e042:	b29b      	uxth	r3, r3
 800e044:	4619      	mov	r1, r3
 800e046:	68bb      	ldr	r3, [r7, #8]
 800e048:	fbb3 f3f1 	udiv	r3, r3, r1
 800e04c:	4413      	add	r3, r2
 800e04e:	4619      	mov	r1, r3
 800e050:	68f8      	ldr	r0, [r7, #12]
 800e052:	f7ff fdc5 	bl	800dbe0 <move_window>
 800e056:	4603      	mov	r3, r0
 800e058:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e05a:	7ffb      	ldrb	r3, [r7, #31]
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d15b      	bne.n	800e118 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800e066:	68bb      	ldr	r3, [r7, #8]
 800e068:	005b      	lsls	r3, r3, #1
 800e06a:	68fa      	ldr	r2, [r7, #12]
 800e06c:	8992      	ldrh	r2, [r2, #12]
 800e06e:	fbb3 f0f2 	udiv	r0, r3, r2
 800e072:	fb02 f200 	mul.w	r2, r2, r0
 800e076:	1a9b      	subs	r3, r3, r2
 800e078:	440b      	add	r3, r1
 800e07a:	687a      	ldr	r2, [r7, #4]
 800e07c:	b292      	uxth	r2, r2
 800e07e:	4611      	mov	r1, r2
 800e080:	4618      	mov	r0, r3
 800e082:	f7ff fb38 	bl	800d6f6 <st_word>
			fs->wflag = 1;
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	2201      	movs	r2, #1
 800e08a:	70da      	strb	r2, [r3, #3]
			break;
 800e08c:	e047      	b.n	800e11e <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	899b      	ldrh	r3, [r3, #12]
 800e096:	089b      	lsrs	r3, r3, #2
 800e098:	b29b      	uxth	r3, r3
 800e09a:	4619      	mov	r1, r3
 800e09c:	68bb      	ldr	r3, [r7, #8]
 800e09e:	fbb3 f3f1 	udiv	r3, r3, r1
 800e0a2:	4413      	add	r3, r2
 800e0a4:	4619      	mov	r1, r3
 800e0a6:	68f8      	ldr	r0, [r7, #12]
 800e0a8:	f7ff fd9a 	bl	800dbe0 <move_window>
 800e0ac:	4603      	mov	r3, r0
 800e0ae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e0b0:	7ffb      	ldrb	r3, [r7, #31]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d132      	bne.n	800e11c <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800e0c2:	68bb      	ldr	r3, [r7, #8]
 800e0c4:	009b      	lsls	r3, r3, #2
 800e0c6:	68fa      	ldr	r2, [r7, #12]
 800e0c8:	8992      	ldrh	r2, [r2, #12]
 800e0ca:	fbb3 f0f2 	udiv	r0, r3, r2
 800e0ce:	fb02 f200 	mul.w	r2, r2, r0
 800e0d2:	1a9b      	subs	r3, r3, r2
 800e0d4:	440b      	add	r3, r1
 800e0d6:	4618      	mov	r0, r3
 800e0d8:	f7ff faea 	bl	800d6b0 <ld_dword>
 800e0dc:	4603      	mov	r3, r0
 800e0de:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800e0e2:	4323      	orrs	r3, r4
 800e0e4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800e0ec:	68bb      	ldr	r3, [r7, #8]
 800e0ee:	009b      	lsls	r3, r3, #2
 800e0f0:	68fa      	ldr	r2, [r7, #12]
 800e0f2:	8992      	ldrh	r2, [r2, #12]
 800e0f4:	fbb3 f0f2 	udiv	r0, r3, r2
 800e0f8:	fb02 f200 	mul.w	r2, r2, r0
 800e0fc:	1a9b      	subs	r3, r3, r2
 800e0fe:	440b      	add	r3, r1
 800e100:	6879      	ldr	r1, [r7, #4]
 800e102:	4618      	mov	r0, r3
 800e104:	f7ff fb12 	bl	800d72c <st_dword>
			fs->wflag = 1;
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	2201      	movs	r2, #1
 800e10c:	70da      	strb	r2, [r3, #3]
			break;
 800e10e:	e006      	b.n	800e11e <put_fat+0x224>
			if (res != FR_OK) break;
 800e110:	bf00      	nop
 800e112:	e004      	b.n	800e11e <put_fat+0x224>
			if (res != FR_OK) break;
 800e114:	bf00      	nop
 800e116:	e002      	b.n	800e11e <put_fat+0x224>
			if (res != FR_OK) break;
 800e118:	bf00      	nop
 800e11a:	e000      	b.n	800e11e <put_fat+0x224>
			if (res != FR_OK) break;
 800e11c:	bf00      	nop
		}
	}
	return res;
 800e11e:	7ffb      	ldrb	r3, [r7, #31]
}
 800e120:	4618      	mov	r0, r3
 800e122:	3724      	adds	r7, #36	; 0x24
 800e124:	46bd      	mov	sp, r7
 800e126:	bd90      	pop	{r4, r7, pc}

0800e128 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800e128:	b580      	push	{r7, lr}
 800e12a:	b088      	sub	sp, #32
 800e12c:	af00      	add	r7, sp, #0
 800e12e:	60f8      	str	r0, [r7, #12]
 800e130:	60b9      	str	r1, [r7, #8]
 800e132:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800e134:	2300      	movs	r3, #0
 800e136:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800e13e:	68bb      	ldr	r3, [r7, #8]
 800e140:	2b01      	cmp	r3, #1
 800e142:	d904      	bls.n	800e14e <remove_chain+0x26>
 800e144:	69bb      	ldr	r3, [r7, #24]
 800e146:	6a1b      	ldr	r3, [r3, #32]
 800e148:	68ba      	ldr	r2, [r7, #8]
 800e14a:	429a      	cmp	r2, r3
 800e14c:	d301      	bcc.n	800e152 <remove_chain+0x2a>
 800e14e:	2302      	movs	r3, #2
 800e150:	e04b      	b.n	800e1ea <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	2b00      	cmp	r3, #0
 800e156:	d00c      	beq.n	800e172 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800e158:	f04f 32ff 	mov.w	r2, #4294967295
 800e15c:	6879      	ldr	r1, [r7, #4]
 800e15e:	69b8      	ldr	r0, [r7, #24]
 800e160:	f7ff fecb 	bl	800defa <put_fat>
 800e164:	4603      	mov	r3, r0
 800e166:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800e168:	7ffb      	ldrb	r3, [r7, #31]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d001      	beq.n	800e172 <remove_chain+0x4a>
 800e16e:	7ffb      	ldrb	r3, [r7, #31]
 800e170:	e03b      	b.n	800e1ea <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800e172:	68b9      	ldr	r1, [r7, #8]
 800e174:	68f8      	ldr	r0, [r7, #12]
 800e176:	f7ff fdf0 	bl	800dd5a <get_fat>
 800e17a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800e17c:	697b      	ldr	r3, [r7, #20]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d031      	beq.n	800e1e6 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800e182:	697b      	ldr	r3, [r7, #20]
 800e184:	2b01      	cmp	r3, #1
 800e186:	d101      	bne.n	800e18c <remove_chain+0x64>
 800e188:	2302      	movs	r3, #2
 800e18a:	e02e      	b.n	800e1ea <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800e18c:	697b      	ldr	r3, [r7, #20]
 800e18e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e192:	d101      	bne.n	800e198 <remove_chain+0x70>
 800e194:	2301      	movs	r3, #1
 800e196:	e028      	b.n	800e1ea <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800e198:	2200      	movs	r2, #0
 800e19a:	68b9      	ldr	r1, [r7, #8]
 800e19c:	69b8      	ldr	r0, [r7, #24]
 800e19e:	f7ff feac 	bl	800defa <put_fat>
 800e1a2:	4603      	mov	r3, r0
 800e1a4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800e1a6:	7ffb      	ldrb	r3, [r7, #31]
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d001      	beq.n	800e1b0 <remove_chain+0x88>
 800e1ac:	7ffb      	ldrb	r3, [r7, #31]
 800e1ae:	e01c      	b.n	800e1ea <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800e1b0:	69bb      	ldr	r3, [r7, #24]
 800e1b2:	699a      	ldr	r2, [r3, #24]
 800e1b4:	69bb      	ldr	r3, [r7, #24]
 800e1b6:	6a1b      	ldr	r3, [r3, #32]
 800e1b8:	3b02      	subs	r3, #2
 800e1ba:	429a      	cmp	r2, r3
 800e1bc:	d20b      	bcs.n	800e1d6 <remove_chain+0xae>
			fs->free_clst++;
 800e1be:	69bb      	ldr	r3, [r7, #24]
 800e1c0:	699b      	ldr	r3, [r3, #24]
 800e1c2:	1c5a      	adds	r2, r3, #1
 800e1c4:	69bb      	ldr	r3, [r7, #24]
 800e1c6:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800e1c8:	69bb      	ldr	r3, [r7, #24]
 800e1ca:	791b      	ldrb	r3, [r3, #4]
 800e1cc:	f043 0301 	orr.w	r3, r3, #1
 800e1d0:	b2da      	uxtb	r2, r3
 800e1d2:	69bb      	ldr	r3, [r7, #24]
 800e1d4:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800e1d6:	697b      	ldr	r3, [r7, #20]
 800e1d8:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800e1da:	69bb      	ldr	r3, [r7, #24]
 800e1dc:	6a1b      	ldr	r3, [r3, #32]
 800e1de:	68ba      	ldr	r2, [r7, #8]
 800e1e0:	429a      	cmp	r2, r3
 800e1e2:	d3c6      	bcc.n	800e172 <remove_chain+0x4a>
 800e1e4:	e000      	b.n	800e1e8 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800e1e6:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800e1e8:	2300      	movs	r3, #0
}
 800e1ea:	4618      	mov	r0, r3
 800e1ec:	3720      	adds	r7, #32
 800e1ee:	46bd      	mov	sp, r7
 800e1f0:	bd80      	pop	{r7, pc}

0800e1f2 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800e1f2:	b580      	push	{r7, lr}
 800e1f4:	b088      	sub	sp, #32
 800e1f6:	af00      	add	r7, sp, #0
 800e1f8:	6078      	str	r0, [r7, #4]
 800e1fa:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800e202:	683b      	ldr	r3, [r7, #0]
 800e204:	2b00      	cmp	r3, #0
 800e206:	d10d      	bne.n	800e224 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800e208:	693b      	ldr	r3, [r7, #16]
 800e20a:	695b      	ldr	r3, [r3, #20]
 800e20c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800e20e:	69bb      	ldr	r3, [r7, #24]
 800e210:	2b00      	cmp	r3, #0
 800e212:	d004      	beq.n	800e21e <create_chain+0x2c>
 800e214:	693b      	ldr	r3, [r7, #16]
 800e216:	6a1b      	ldr	r3, [r3, #32]
 800e218:	69ba      	ldr	r2, [r7, #24]
 800e21a:	429a      	cmp	r2, r3
 800e21c:	d31b      	bcc.n	800e256 <create_chain+0x64>
 800e21e:	2301      	movs	r3, #1
 800e220:	61bb      	str	r3, [r7, #24]
 800e222:	e018      	b.n	800e256 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800e224:	6839      	ldr	r1, [r7, #0]
 800e226:	6878      	ldr	r0, [r7, #4]
 800e228:	f7ff fd97 	bl	800dd5a <get_fat>
 800e22c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	2b01      	cmp	r3, #1
 800e232:	d801      	bhi.n	800e238 <create_chain+0x46>
 800e234:	2301      	movs	r3, #1
 800e236:	e070      	b.n	800e31a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e23e:	d101      	bne.n	800e244 <create_chain+0x52>
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	e06a      	b.n	800e31a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800e244:	693b      	ldr	r3, [r7, #16]
 800e246:	6a1b      	ldr	r3, [r3, #32]
 800e248:	68fa      	ldr	r2, [r7, #12]
 800e24a:	429a      	cmp	r2, r3
 800e24c:	d201      	bcs.n	800e252 <create_chain+0x60>
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	e063      	b.n	800e31a <create_chain+0x128>
		scl = clst;
 800e252:	683b      	ldr	r3, [r7, #0]
 800e254:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800e256:	69bb      	ldr	r3, [r7, #24]
 800e258:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800e25a:	69fb      	ldr	r3, [r7, #28]
 800e25c:	3301      	adds	r3, #1
 800e25e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800e260:	693b      	ldr	r3, [r7, #16]
 800e262:	6a1b      	ldr	r3, [r3, #32]
 800e264:	69fa      	ldr	r2, [r7, #28]
 800e266:	429a      	cmp	r2, r3
 800e268:	d307      	bcc.n	800e27a <create_chain+0x88>
				ncl = 2;
 800e26a:	2302      	movs	r3, #2
 800e26c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800e26e:	69fa      	ldr	r2, [r7, #28]
 800e270:	69bb      	ldr	r3, [r7, #24]
 800e272:	429a      	cmp	r2, r3
 800e274:	d901      	bls.n	800e27a <create_chain+0x88>
 800e276:	2300      	movs	r3, #0
 800e278:	e04f      	b.n	800e31a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800e27a:	69f9      	ldr	r1, [r7, #28]
 800e27c:	6878      	ldr	r0, [r7, #4]
 800e27e:	f7ff fd6c 	bl	800dd5a <get_fat>
 800e282:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	2b00      	cmp	r3, #0
 800e288:	d00e      	beq.n	800e2a8 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	2b01      	cmp	r3, #1
 800e28e:	d003      	beq.n	800e298 <create_chain+0xa6>
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e296:	d101      	bne.n	800e29c <create_chain+0xaa>
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	e03e      	b.n	800e31a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800e29c:	69fa      	ldr	r2, [r7, #28]
 800e29e:	69bb      	ldr	r3, [r7, #24]
 800e2a0:	429a      	cmp	r2, r3
 800e2a2:	d1da      	bne.n	800e25a <create_chain+0x68>
 800e2a4:	2300      	movs	r3, #0
 800e2a6:	e038      	b.n	800e31a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800e2a8:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800e2aa:	f04f 32ff 	mov.w	r2, #4294967295
 800e2ae:	69f9      	ldr	r1, [r7, #28]
 800e2b0:	6938      	ldr	r0, [r7, #16]
 800e2b2:	f7ff fe22 	bl	800defa <put_fat>
 800e2b6:	4603      	mov	r3, r0
 800e2b8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800e2ba:	7dfb      	ldrb	r3, [r7, #23]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d109      	bne.n	800e2d4 <create_chain+0xe2>
 800e2c0:	683b      	ldr	r3, [r7, #0]
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d006      	beq.n	800e2d4 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800e2c6:	69fa      	ldr	r2, [r7, #28]
 800e2c8:	6839      	ldr	r1, [r7, #0]
 800e2ca:	6938      	ldr	r0, [r7, #16]
 800e2cc:	f7ff fe15 	bl	800defa <put_fat>
 800e2d0:	4603      	mov	r3, r0
 800e2d2:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800e2d4:	7dfb      	ldrb	r3, [r7, #23]
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d116      	bne.n	800e308 <create_chain+0x116>
		fs->last_clst = ncl;
 800e2da:	693b      	ldr	r3, [r7, #16]
 800e2dc:	69fa      	ldr	r2, [r7, #28]
 800e2de:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800e2e0:	693b      	ldr	r3, [r7, #16]
 800e2e2:	699a      	ldr	r2, [r3, #24]
 800e2e4:	693b      	ldr	r3, [r7, #16]
 800e2e6:	6a1b      	ldr	r3, [r3, #32]
 800e2e8:	3b02      	subs	r3, #2
 800e2ea:	429a      	cmp	r2, r3
 800e2ec:	d804      	bhi.n	800e2f8 <create_chain+0x106>
 800e2ee:	693b      	ldr	r3, [r7, #16]
 800e2f0:	699b      	ldr	r3, [r3, #24]
 800e2f2:	1e5a      	subs	r2, r3, #1
 800e2f4:	693b      	ldr	r3, [r7, #16]
 800e2f6:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800e2f8:	693b      	ldr	r3, [r7, #16]
 800e2fa:	791b      	ldrb	r3, [r3, #4]
 800e2fc:	f043 0301 	orr.w	r3, r3, #1
 800e300:	b2da      	uxtb	r2, r3
 800e302:	693b      	ldr	r3, [r7, #16]
 800e304:	711a      	strb	r2, [r3, #4]
 800e306:	e007      	b.n	800e318 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800e308:	7dfb      	ldrb	r3, [r7, #23]
 800e30a:	2b01      	cmp	r3, #1
 800e30c:	d102      	bne.n	800e314 <create_chain+0x122>
 800e30e:	f04f 33ff 	mov.w	r3, #4294967295
 800e312:	e000      	b.n	800e316 <create_chain+0x124>
 800e314:	2301      	movs	r3, #1
 800e316:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800e318:	69fb      	ldr	r3, [r7, #28]
}
 800e31a:	4618      	mov	r0, r3
 800e31c:	3720      	adds	r7, #32
 800e31e:	46bd      	mov	sp, r7
 800e320:	bd80      	pop	{r7, pc}

0800e322 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800e322:	b480      	push	{r7}
 800e324:	b087      	sub	sp, #28
 800e326:	af00      	add	r7, sp, #0
 800e328:	6078      	str	r0, [r7, #4]
 800e32a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e336:	3304      	adds	r3, #4
 800e338:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	899b      	ldrh	r3, [r3, #12]
 800e33e:	461a      	mov	r2, r3
 800e340:	683b      	ldr	r3, [r7, #0]
 800e342:	fbb3 f3f2 	udiv	r3, r3, r2
 800e346:	68fa      	ldr	r2, [r7, #12]
 800e348:	8952      	ldrh	r2, [r2, #10]
 800e34a:	fbb3 f3f2 	udiv	r3, r3, r2
 800e34e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e350:	693b      	ldr	r3, [r7, #16]
 800e352:	1d1a      	adds	r2, r3, #4
 800e354:	613a      	str	r2, [r7, #16]
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800e35a:	68bb      	ldr	r3, [r7, #8]
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d101      	bne.n	800e364 <clmt_clust+0x42>
 800e360:	2300      	movs	r3, #0
 800e362:	e010      	b.n	800e386 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800e364:	697a      	ldr	r2, [r7, #20]
 800e366:	68bb      	ldr	r3, [r7, #8]
 800e368:	429a      	cmp	r2, r3
 800e36a:	d307      	bcc.n	800e37c <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800e36c:	697a      	ldr	r2, [r7, #20]
 800e36e:	68bb      	ldr	r3, [r7, #8]
 800e370:	1ad3      	subs	r3, r2, r3
 800e372:	617b      	str	r3, [r7, #20]
 800e374:	693b      	ldr	r3, [r7, #16]
 800e376:	3304      	adds	r3, #4
 800e378:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e37a:	e7e9      	b.n	800e350 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800e37c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800e37e:	693b      	ldr	r3, [r7, #16]
 800e380:	681a      	ldr	r2, [r3, #0]
 800e382:	697b      	ldr	r3, [r7, #20]
 800e384:	4413      	add	r3, r2
}
 800e386:	4618      	mov	r0, r3
 800e388:	371c      	adds	r7, #28
 800e38a:	46bd      	mov	sp, r7
 800e38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e390:	4770      	bx	lr

0800e392 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800e392:	b580      	push	{r7, lr}
 800e394:	b086      	sub	sp, #24
 800e396:	af00      	add	r7, sp, #0
 800e398:	6078      	str	r0, [r7, #4]
 800e39a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800e3a2:	683b      	ldr	r3, [r7, #0]
 800e3a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e3a8:	d204      	bcs.n	800e3b4 <dir_sdi+0x22>
 800e3aa:	683b      	ldr	r3, [r7, #0]
 800e3ac:	f003 031f 	and.w	r3, r3, #31
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d001      	beq.n	800e3b8 <dir_sdi+0x26>
		return FR_INT_ERR;
 800e3b4:	2302      	movs	r3, #2
 800e3b6:	e071      	b.n	800e49c <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	683a      	ldr	r2, [r7, #0]
 800e3bc:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	689b      	ldr	r3, [r3, #8]
 800e3c2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800e3c4:	697b      	ldr	r3, [r7, #20]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d106      	bne.n	800e3d8 <dir_sdi+0x46>
 800e3ca:	693b      	ldr	r3, [r7, #16]
 800e3cc:	781b      	ldrb	r3, [r3, #0]
 800e3ce:	2b02      	cmp	r3, #2
 800e3d0:	d902      	bls.n	800e3d8 <dir_sdi+0x46>
		clst = fs->dirbase;
 800e3d2:	693b      	ldr	r3, [r7, #16]
 800e3d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3d6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800e3d8:	697b      	ldr	r3, [r7, #20]
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d10c      	bne.n	800e3f8 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800e3de:	683b      	ldr	r3, [r7, #0]
 800e3e0:	095b      	lsrs	r3, r3, #5
 800e3e2:	693a      	ldr	r2, [r7, #16]
 800e3e4:	8912      	ldrh	r2, [r2, #8]
 800e3e6:	4293      	cmp	r3, r2
 800e3e8:	d301      	bcc.n	800e3ee <dir_sdi+0x5c>
 800e3ea:	2302      	movs	r3, #2
 800e3ec:	e056      	b.n	800e49c <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800e3ee:	693b      	ldr	r3, [r7, #16]
 800e3f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	61da      	str	r2, [r3, #28]
 800e3f6:	e02d      	b.n	800e454 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800e3f8:	693b      	ldr	r3, [r7, #16]
 800e3fa:	895b      	ldrh	r3, [r3, #10]
 800e3fc:	461a      	mov	r2, r3
 800e3fe:	693b      	ldr	r3, [r7, #16]
 800e400:	899b      	ldrh	r3, [r3, #12]
 800e402:	fb03 f302 	mul.w	r3, r3, r2
 800e406:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e408:	e019      	b.n	800e43e <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	6979      	ldr	r1, [r7, #20]
 800e40e:	4618      	mov	r0, r3
 800e410:	f7ff fca3 	bl	800dd5a <get_fat>
 800e414:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e416:	697b      	ldr	r3, [r7, #20]
 800e418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e41c:	d101      	bne.n	800e422 <dir_sdi+0x90>
 800e41e:	2301      	movs	r3, #1
 800e420:	e03c      	b.n	800e49c <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800e422:	697b      	ldr	r3, [r7, #20]
 800e424:	2b01      	cmp	r3, #1
 800e426:	d904      	bls.n	800e432 <dir_sdi+0xa0>
 800e428:	693b      	ldr	r3, [r7, #16]
 800e42a:	6a1b      	ldr	r3, [r3, #32]
 800e42c:	697a      	ldr	r2, [r7, #20]
 800e42e:	429a      	cmp	r2, r3
 800e430:	d301      	bcc.n	800e436 <dir_sdi+0xa4>
 800e432:	2302      	movs	r3, #2
 800e434:	e032      	b.n	800e49c <dir_sdi+0x10a>
			ofs -= csz;
 800e436:	683a      	ldr	r2, [r7, #0]
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	1ad3      	subs	r3, r2, r3
 800e43c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e43e:	683a      	ldr	r2, [r7, #0]
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	429a      	cmp	r2, r3
 800e444:	d2e1      	bcs.n	800e40a <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800e446:	6979      	ldr	r1, [r7, #20]
 800e448:	6938      	ldr	r0, [r7, #16]
 800e44a:	f7ff fc67 	bl	800dd1c <clust2sect>
 800e44e:	4602      	mov	r2, r0
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	697a      	ldr	r2, [r7, #20]
 800e458:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	69db      	ldr	r3, [r3, #28]
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d101      	bne.n	800e466 <dir_sdi+0xd4>
 800e462:	2302      	movs	r3, #2
 800e464:	e01a      	b.n	800e49c <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	69da      	ldr	r2, [r3, #28]
 800e46a:	693b      	ldr	r3, [r7, #16]
 800e46c:	899b      	ldrh	r3, [r3, #12]
 800e46e:	4619      	mov	r1, r3
 800e470:	683b      	ldr	r3, [r7, #0]
 800e472:	fbb3 f3f1 	udiv	r3, r3, r1
 800e476:	441a      	add	r2, r3
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800e47c:	693b      	ldr	r3, [r7, #16]
 800e47e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800e482:	693b      	ldr	r3, [r7, #16]
 800e484:	899b      	ldrh	r3, [r3, #12]
 800e486:	461a      	mov	r2, r3
 800e488:	683b      	ldr	r3, [r7, #0]
 800e48a:	fbb3 f0f2 	udiv	r0, r3, r2
 800e48e:	fb02 f200 	mul.w	r2, r2, r0
 800e492:	1a9b      	subs	r3, r3, r2
 800e494:	18ca      	adds	r2, r1, r3
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e49a:	2300      	movs	r3, #0
}
 800e49c:	4618      	mov	r0, r3
 800e49e:	3718      	adds	r7, #24
 800e4a0:	46bd      	mov	sp, r7
 800e4a2:	bd80      	pop	{r7, pc}

0800e4a4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800e4a4:	b580      	push	{r7, lr}
 800e4a6:	b086      	sub	sp, #24
 800e4a8:	af00      	add	r7, sp, #0
 800e4aa:	6078      	str	r0, [r7, #4]
 800e4ac:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	695b      	ldr	r3, [r3, #20]
 800e4b8:	3320      	adds	r3, #32
 800e4ba:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	69db      	ldr	r3, [r3, #28]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d003      	beq.n	800e4cc <dir_next+0x28>
 800e4c4:	68bb      	ldr	r3, [r7, #8]
 800e4c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e4ca:	d301      	bcc.n	800e4d0 <dir_next+0x2c>
 800e4cc:	2304      	movs	r3, #4
 800e4ce:	e0bb      	b.n	800e648 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	899b      	ldrh	r3, [r3, #12]
 800e4d4:	461a      	mov	r2, r3
 800e4d6:	68bb      	ldr	r3, [r7, #8]
 800e4d8:	fbb3 f1f2 	udiv	r1, r3, r2
 800e4dc:	fb02 f201 	mul.w	r2, r2, r1
 800e4e0:	1a9b      	subs	r3, r3, r2
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	f040 809d 	bne.w	800e622 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	69db      	ldr	r3, [r3, #28]
 800e4ec:	1c5a      	adds	r2, r3, #1
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	699b      	ldr	r3, [r3, #24]
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d10b      	bne.n	800e512 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800e4fa:	68bb      	ldr	r3, [r7, #8]
 800e4fc:	095b      	lsrs	r3, r3, #5
 800e4fe:	68fa      	ldr	r2, [r7, #12]
 800e500:	8912      	ldrh	r2, [r2, #8]
 800e502:	4293      	cmp	r3, r2
 800e504:	f0c0 808d 	bcc.w	800e622 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	2200      	movs	r2, #0
 800e50c:	61da      	str	r2, [r3, #28]
 800e50e:	2304      	movs	r3, #4
 800e510:	e09a      	b.n	800e648 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	899b      	ldrh	r3, [r3, #12]
 800e516:	461a      	mov	r2, r3
 800e518:	68bb      	ldr	r3, [r7, #8]
 800e51a:	fbb3 f3f2 	udiv	r3, r3, r2
 800e51e:	68fa      	ldr	r2, [r7, #12]
 800e520:	8952      	ldrh	r2, [r2, #10]
 800e522:	3a01      	subs	r2, #1
 800e524:	4013      	ands	r3, r2
 800e526:	2b00      	cmp	r3, #0
 800e528:	d17b      	bne.n	800e622 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800e52a:	687a      	ldr	r2, [r7, #4]
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	699b      	ldr	r3, [r3, #24]
 800e530:	4619      	mov	r1, r3
 800e532:	4610      	mov	r0, r2
 800e534:	f7ff fc11 	bl	800dd5a <get_fat>
 800e538:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800e53a:	697b      	ldr	r3, [r7, #20]
 800e53c:	2b01      	cmp	r3, #1
 800e53e:	d801      	bhi.n	800e544 <dir_next+0xa0>
 800e540:	2302      	movs	r3, #2
 800e542:	e081      	b.n	800e648 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800e544:	697b      	ldr	r3, [r7, #20]
 800e546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e54a:	d101      	bne.n	800e550 <dir_next+0xac>
 800e54c:	2301      	movs	r3, #1
 800e54e:	e07b      	b.n	800e648 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	6a1b      	ldr	r3, [r3, #32]
 800e554:	697a      	ldr	r2, [r7, #20]
 800e556:	429a      	cmp	r2, r3
 800e558:	d359      	bcc.n	800e60e <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800e55a:	683b      	ldr	r3, [r7, #0]
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d104      	bne.n	800e56a <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	2200      	movs	r2, #0
 800e564:	61da      	str	r2, [r3, #28]
 800e566:	2304      	movs	r3, #4
 800e568:	e06e      	b.n	800e648 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800e56a:	687a      	ldr	r2, [r7, #4]
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	699b      	ldr	r3, [r3, #24]
 800e570:	4619      	mov	r1, r3
 800e572:	4610      	mov	r0, r2
 800e574:	f7ff fe3d 	bl	800e1f2 <create_chain>
 800e578:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800e57a:	697b      	ldr	r3, [r7, #20]
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d101      	bne.n	800e584 <dir_next+0xe0>
 800e580:	2307      	movs	r3, #7
 800e582:	e061      	b.n	800e648 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800e584:	697b      	ldr	r3, [r7, #20]
 800e586:	2b01      	cmp	r3, #1
 800e588:	d101      	bne.n	800e58e <dir_next+0xea>
 800e58a:	2302      	movs	r3, #2
 800e58c:	e05c      	b.n	800e648 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e58e:	697b      	ldr	r3, [r7, #20]
 800e590:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e594:	d101      	bne.n	800e59a <dir_next+0xf6>
 800e596:	2301      	movs	r3, #1
 800e598:	e056      	b.n	800e648 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800e59a:	68f8      	ldr	r0, [r7, #12]
 800e59c:	f7ff fadc 	bl	800db58 <sync_window>
 800e5a0:	4603      	mov	r3, r0
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d001      	beq.n	800e5aa <dir_next+0x106>
 800e5a6:	2301      	movs	r3, #1
 800e5a8:	e04e      	b.n	800e648 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	899b      	ldrh	r3, [r3, #12]
 800e5b4:	461a      	mov	r2, r3
 800e5b6:	2100      	movs	r1, #0
 800e5b8:	f7ff f905 	bl	800d7c6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e5bc:	2300      	movs	r3, #0
 800e5be:	613b      	str	r3, [r7, #16]
 800e5c0:	6979      	ldr	r1, [r7, #20]
 800e5c2:	68f8      	ldr	r0, [r7, #12]
 800e5c4:	f7ff fbaa 	bl	800dd1c <clust2sect>
 800e5c8:	4602      	mov	r2, r0
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	639a      	str	r2, [r3, #56]	; 0x38
 800e5ce:	e012      	b.n	800e5f6 <dir_next+0x152>
						fs->wflag = 1;
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	2201      	movs	r2, #1
 800e5d4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800e5d6:	68f8      	ldr	r0, [r7, #12]
 800e5d8:	f7ff fabe 	bl	800db58 <sync_window>
 800e5dc:	4603      	mov	r3, r0
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d001      	beq.n	800e5e6 <dir_next+0x142>
 800e5e2:	2301      	movs	r3, #1
 800e5e4:	e030      	b.n	800e648 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e5e6:	693b      	ldr	r3, [r7, #16]
 800e5e8:	3301      	adds	r3, #1
 800e5ea:	613b      	str	r3, [r7, #16]
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5f0:	1c5a      	adds	r2, r3, #1
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	639a      	str	r2, [r3, #56]	; 0x38
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	895b      	ldrh	r3, [r3, #10]
 800e5fa:	461a      	mov	r2, r3
 800e5fc:	693b      	ldr	r3, [r7, #16]
 800e5fe:	4293      	cmp	r3, r2
 800e600:	d3e6      	bcc.n	800e5d0 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e606:	693b      	ldr	r3, [r7, #16]
 800e608:	1ad2      	subs	r2, r2, r3
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	697a      	ldr	r2, [r7, #20]
 800e612:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800e614:	6979      	ldr	r1, [r7, #20]
 800e616:	68f8      	ldr	r0, [r7, #12]
 800e618:	f7ff fb80 	bl	800dd1c <clust2sect>
 800e61c:	4602      	mov	r2, r0
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	68ba      	ldr	r2, [r7, #8]
 800e626:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	899b      	ldrh	r3, [r3, #12]
 800e632:	461a      	mov	r2, r3
 800e634:	68bb      	ldr	r3, [r7, #8]
 800e636:	fbb3 f0f2 	udiv	r0, r3, r2
 800e63a:	fb02 f200 	mul.w	r2, r2, r0
 800e63e:	1a9b      	subs	r3, r3, r2
 800e640:	18ca      	adds	r2, r1, r3
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e646:	2300      	movs	r3, #0
}
 800e648:	4618      	mov	r0, r3
 800e64a:	3718      	adds	r7, #24
 800e64c:	46bd      	mov	sp, r7
 800e64e:	bd80      	pop	{r7, pc}

0800e650 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800e650:	b580      	push	{r7, lr}
 800e652:	b086      	sub	sp, #24
 800e654:	af00      	add	r7, sp, #0
 800e656:	6078      	str	r0, [r7, #4]
 800e658:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800e660:	2100      	movs	r1, #0
 800e662:	6878      	ldr	r0, [r7, #4]
 800e664:	f7ff fe95 	bl	800e392 <dir_sdi>
 800e668:	4603      	mov	r3, r0
 800e66a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e66c:	7dfb      	ldrb	r3, [r7, #23]
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d12b      	bne.n	800e6ca <dir_alloc+0x7a>
		n = 0;
 800e672:	2300      	movs	r3, #0
 800e674:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	69db      	ldr	r3, [r3, #28]
 800e67a:	4619      	mov	r1, r3
 800e67c:	68f8      	ldr	r0, [r7, #12]
 800e67e:	f7ff faaf 	bl	800dbe0 <move_window>
 800e682:	4603      	mov	r3, r0
 800e684:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e686:	7dfb      	ldrb	r3, [r7, #23]
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d11d      	bne.n	800e6c8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	6a1b      	ldr	r3, [r3, #32]
 800e690:	781b      	ldrb	r3, [r3, #0]
 800e692:	2be5      	cmp	r3, #229	; 0xe5
 800e694:	d004      	beq.n	800e6a0 <dir_alloc+0x50>
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	6a1b      	ldr	r3, [r3, #32]
 800e69a:	781b      	ldrb	r3, [r3, #0]
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d107      	bne.n	800e6b0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800e6a0:	693b      	ldr	r3, [r7, #16]
 800e6a2:	3301      	adds	r3, #1
 800e6a4:	613b      	str	r3, [r7, #16]
 800e6a6:	693a      	ldr	r2, [r7, #16]
 800e6a8:	683b      	ldr	r3, [r7, #0]
 800e6aa:	429a      	cmp	r2, r3
 800e6ac:	d102      	bne.n	800e6b4 <dir_alloc+0x64>
 800e6ae:	e00c      	b.n	800e6ca <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800e6b0:	2300      	movs	r3, #0
 800e6b2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800e6b4:	2101      	movs	r1, #1
 800e6b6:	6878      	ldr	r0, [r7, #4]
 800e6b8:	f7ff fef4 	bl	800e4a4 <dir_next>
 800e6bc:	4603      	mov	r3, r0
 800e6be:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800e6c0:	7dfb      	ldrb	r3, [r7, #23]
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d0d7      	beq.n	800e676 <dir_alloc+0x26>
 800e6c6:	e000      	b.n	800e6ca <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800e6c8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800e6ca:	7dfb      	ldrb	r3, [r7, #23]
 800e6cc:	2b04      	cmp	r3, #4
 800e6ce:	d101      	bne.n	800e6d4 <dir_alloc+0x84>
 800e6d0:	2307      	movs	r3, #7
 800e6d2:	75fb      	strb	r3, [r7, #23]
	return res;
 800e6d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800e6d6:	4618      	mov	r0, r3
 800e6d8:	3718      	adds	r7, #24
 800e6da:	46bd      	mov	sp, r7
 800e6dc:	bd80      	pop	{r7, pc}

0800e6de <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800e6de:	b580      	push	{r7, lr}
 800e6e0:	b084      	sub	sp, #16
 800e6e2:	af00      	add	r7, sp, #0
 800e6e4:	6078      	str	r0, [r7, #4]
 800e6e6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800e6e8:	683b      	ldr	r3, [r7, #0]
 800e6ea:	331a      	adds	r3, #26
 800e6ec:	4618      	mov	r0, r3
 800e6ee:	f7fe ffc7 	bl	800d680 <ld_word>
 800e6f2:	4603      	mov	r3, r0
 800e6f4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	781b      	ldrb	r3, [r3, #0]
 800e6fa:	2b03      	cmp	r3, #3
 800e6fc:	d109      	bne.n	800e712 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800e6fe:	683b      	ldr	r3, [r7, #0]
 800e700:	3314      	adds	r3, #20
 800e702:	4618      	mov	r0, r3
 800e704:	f7fe ffbc 	bl	800d680 <ld_word>
 800e708:	4603      	mov	r3, r0
 800e70a:	041b      	lsls	r3, r3, #16
 800e70c:	68fa      	ldr	r2, [r7, #12]
 800e70e:	4313      	orrs	r3, r2
 800e710:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800e712:	68fb      	ldr	r3, [r7, #12]
}
 800e714:	4618      	mov	r0, r3
 800e716:	3710      	adds	r7, #16
 800e718:	46bd      	mov	sp, r7
 800e71a:	bd80      	pop	{r7, pc}

0800e71c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800e71c:	b580      	push	{r7, lr}
 800e71e:	b084      	sub	sp, #16
 800e720:	af00      	add	r7, sp, #0
 800e722:	60f8      	str	r0, [r7, #12]
 800e724:	60b9      	str	r1, [r7, #8]
 800e726:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800e728:	68bb      	ldr	r3, [r7, #8]
 800e72a:	331a      	adds	r3, #26
 800e72c:	687a      	ldr	r2, [r7, #4]
 800e72e:	b292      	uxth	r2, r2
 800e730:	4611      	mov	r1, r2
 800e732:	4618      	mov	r0, r3
 800e734:	f7fe ffdf 	bl	800d6f6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	781b      	ldrb	r3, [r3, #0]
 800e73c:	2b03      	cmp	r3, #3
 800e73e:	d109      	bne.n	800e754 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800e740:	68bb      	ldr	r3, [r7, #8]
 800e742:	f103 0214 	add.w	r2, r3, #20
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	0c1b      	lsrs	r3, r3, #16
 800e74a:	b29b      	uxth	r3, r3
 800e74c:	4619      	mov	r1, r3
 800e74e:	4610      	mov	r0, r2
 800e750:	f7fe ffd1 	bl	800d6f6 <st_word>
	}
}
 800e754:	bf00      	nop
 800e756:	3710      	adds	r7, #16
 800e758:	46bd      	mov	sp, r7
 800e75a:	bd80      	pop	{r7, pc}

0800e75c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800e75c:	b590      	push	{r4, r7, lr}
 800e75e:	b087      	sub	sp, #28
 800e760:	af00      	add	r7, sp, #0
 800e762:	6078      	str	r0, [r7, #4]
 800e764:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800e766:	683b      	ldr	r3, [r7, #0]
 800e768:	331a      	adds	r3, #26
 800e76a:	4618      	mov	r0, r3
 800e76c:	f7fe ff88 	bl	800d680 <ld_word>
 800e770:	4603      	mov	r3, r0
 800e772:	2b00      	cmp	r3, #0
 800e774:	d001      	beq.n	800e77a <cmp_lfn+0x1e>
 800e776:	2300      	movs	r3, #0
 800e778:	e059      	b.n	800e82e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800e77a:	683b      	ldr	r3, [r7, #0]
 800e77c:	781b      	ldrb	r3, [r3, #0]
 800e77e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e782:	1e5a      	subs	r2, r3, #1
 800e784:	4613      	mov	r3, r2
 800e786:	005b      	lsls	r3, r3, #1
 800e788:	4413      	add	r3, r2
 800e78a:	009b      	lsls	r3, r3, #2
 800e78c:	4413      	add	r3, r2
 800e78e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e790:	2301      	movs	r3, #1
 800e792:	81fb      	strh	r3, [r7, #14]
 800e794:	2300      	movs	r3, #0
 800e796:	613b      	str	r3, [r7, #16]
 800e798:	e033      	b.n	800e802 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800e79a:	4a27      	ldr	r2, [pc, #156]	; (800e838 <cmp_lfn+0xdc>)
 800e79c:	693b      	ldr	r3, [r7, #16]
 800e79e:	4413      	add	r3, r2
 800e7a0:	781b      	ldrb	r3, [r3, #0]
 800e7a2:	461a      	mov	r2, r3
 800e7a4:	683b      	ldr	r3, [r7, #0]
 800e7a6:	4413      	add	r3, r2
 800e7a8:	4618      	mov	r0, r3
 800e7aa:	f7fe ff69 	bl	800d680 <ld_word>
 800e7ae:	4603      	mov	r3, r0
 800e7b0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800e7b2:	89fb      	ldrh	r3, [r7, #14]
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d01a      	beq.n	800e7ee <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800e7b8:	697b      	ldr	r3, [r7, #20]
 800e7ba:	2bfe      	cmp	r3, #254	; 0xfe
 800e7bc:	d812      	bhi.n	800e7e4 <cmp_lfn+0x88>
 800e7be:	89bb      	ldrh	r3, [r7, #12]
 800e7c0:	4618      	mov	r0, r3
 800e7c2:	f002 fd23 	bl	801120c <ff_wtoupper>
 800e7c6:	4603      	mov	r3, r0
 800e7c8:	461c      	mov	r4, r3
 800e7ca:	697b      	ldr	r3, [r7, #20]
 800e7cc:	1c5a      	adds	r2, r3, #1
 800e7ce:	617a      	str	r2, [r7, #20]
 800e7d0:	005b      	lsls	r3, r3, #1
 800e7d2:	687a      	ldr	r2, [r7, #4]
 800e7d4:	4413      	add	r3, r2
 800e7d6:	881b      	ldrh	r3, [r3, #0]
 800e7d8:	4618      	mov	r0, r3
 800e7da:	f002 fd17 	bl	801120c <ff_wtoupper>
 800e7de:	4603      	mov	r3, r0
 800e7e0:	429c      	cmp	r4, r3
 800e7e2:	d001      	beq.n	800e7e8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800e7e4:	2300      	movs	r3, #0
 800e7e6:	e022      	b.n	800e82e <cmp_lfn+0xd2>
			}
			wc = uc;
 800e7e8:	89bb      	ldrh	r3, [r7, #12]
 800e7ea:	81fb      	strh	r3, [r7, #14]
 800e7ec:	e006      	b.n	800e7fc <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800e7ee:	89bb      	ldrh	r3, [r7, #12]
 800e7f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e7f4:	4293      	cmp	r3, r2
 800e7f6:	d001      	beq.n	800e7fc <cmp_lfn+0xa0>
 800e7f8:	2300      	movs	r3, #0
 800e7fa:	e018      	b.n	800e82e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e7fc:	693b      	ldr	r3, [r7, #16]
 800e7fe:	3301      	adds	r3, #1
 800e800:	613b      	str	r3, [r7, #16]
 800e802:	693b      	ldr	r3, [r7, #16]
 800e804:	2b0c      	cmp	r3, #12
 800e806:	d9c8      	bls.n	800e79a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800e808:	683b      	ldr	r3, [r7, #0]
 800e80a:	781b      	ldrb	r3, [r3, #0]
 800e80c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e810:	2b00      	cmp	r3, #0
 800e812:	d00b      	beq.n	800e82c <cmp_lfn+0xd0>
 800e814:	89fb      	ldrh	r3, [r7, #14]
 800e816:	2b00      	cmp	r3, #0
 800e818:	d008      	beq.n	800e82c <cmp_lfn+0xd0>
 800e81a:	697b      	ldr	r3, [r7, #20]
 800e81c:	005b      	lsls	r3, r3, #1
 800e81e:	687a      	ldr	r2, [r7, #4]
 800e820:	4413      	add	r3, r2
 800e822:	881b      	ldrh	r3, [r3, #0]
 800e824:	2b00      	cmp	r3, #0
 800e826:	d001      	beq.n	800e82c <cmp_lfn+0xd0>
 800e828:	2300      	movs	r3, #0
 800e82a:	e000      	b.n	800e82e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800e82c:	2301      	movs	r3, #1
}
 800e82e:	4618      	mov	r0, r3
 800e830:	371c      	adds	r7, #28
 800e832:	46bd      	mov	sp, r7
 800e834:	bd90      	pop	{r4, r7, pc}
 800e836:	bf00      	nop
 800e838:	08017534 	.word	0x08017534

0800e83c <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800e83c:	b580      	push	{r7, lr}
 800e83e:	b086      	sub	sp, #24
 800e840:	af00      	add	r7, sp, #0
 800e842:	6078      	str	r0, [r7, #4]
 800e844:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800e846:	683b      	ldr	r3, [r7, #0]
 800e848:	331a      	adds	r3, #26
 800e84a:	4618      	mov	r0, r3
 800e84c:	f7fe ff18 	bl	800d680 <ld_word>
 800e850:	4603      	mov	r3, r0
 800e852:	2b00      	cmp	r3, #0
 800e854:	d001      	beq.n	800e85a <pick_lfn+0x1e>
 800e856:	2300      	movs	r3, #0
 800e858:	e04d      	b.n	800e8f6 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800e85a:	683b      	ldr	r3, [r7, #0]
 800e85c:	781b      	ldrb	r3, [r3, #0]
 800e85e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e862:	1e5a      	subs	r2, r3, #1
 800e864:	4613      	mov	r3, r2
 800e866:	005b      	lsls	r3, r3, #1
 800e868:	4413      	add	r3, r2
 800e86a:	009b      	lsls	r3, r3, #2
 800e86c:	4413      	add	r3, r2
 800e86e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e870:	2301      	movs	r3, #1
 800e872:	81fb      	strh	r3, [r7, #14]
 800e874:	2300      	movs	r3, #0
 800e876:	613b      	str	r3, [r7, #16]
 800e878:	e028      	b.n	800e8cc <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800e87a:	4a21      	ldr	r2, [pc, #132]	; (800e900 <pick_lfn+0xc4>)
 800e87c:	693b      	ldr	r3, [r7, #16]
 800e87e:	4413      	add	r3, r2
 800e880:	781b      	ldrb	r3, [r3, #0]
 800e882:	461a      	mov	r2, r3
 800e884:	683b      	ldr	r3, [r7, #0]
 800e886:	4413      	add	r3, r2
 800e888:	4618      	mov	r0, r3
 800e88a:	f7fe fef9 	bl	800d680 <ld_word>
 800e88e:	4603      	mov	r3, r0
 800e890:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800e892:	89fb      	ldrh	r3, [r7, #14]
 800e894:	2b00      	cmp	r3, #0
 800e896:	d00f      	beq.n	800e8b8 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800e898:	697b      	ldr	r3, [r7, #20]
 800e89a:	2bfe      	cmp	r3, #254	; 0xfe
 800e89c:	d901      	bls.n	800e8a2 <pick_lfn+0x66>
 800e89e:	2300      	movs	r3, #0
 800e8a0:	e029      	b.n	800e8f6 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800e8a2:	89bb      	ldrh	r3, [r7, #12]
 800e8a4:	81fb      	strh	r3, [r7, #14]
 800e8a6:	697b      	ldr	r3, [r7, #20]
 800e8a8:	1c5a      	adds	r2, r3, #1
 800e8aa:	617a      	str	r2, [r7, #20]
 800e8ac:	005b      	lsls	r3, r3, #1
 800e8ae:	687a      	ldr	r2, [r7, #4]
 800e8b0:	4413      	add	r3, r2
 800e8b2:	89fa      	ldrh	r2, [r7, #14]
 800e8b4:	801a      	strh	r2, [r3, #0]
 800e8b6:	e006      	b.n	800e8c6 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800e8b8:	89bb      	ldrh	r3, [r7, #12]
 800e8ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e8be:	4293      	cmp	r3, r2
 800e8c0:	d001      	beq.n	800e8c6 <pick_lfn+0x8a>
 800e8c2:	2300      	movs	r3, #0
 800e8c4:	e017      	b.n	800e8f6 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e8c6:	693b      	ldr	r3, [r7, #16]
 800e8c8:	3301      	adds	r3, #1
 800e8ca:	613b      	str	r3, [r7, #16]
 800e8cc:	693b      	ldr	r3, [r7, #16]
 800e8ce:	2b0c      	cmp	r3, #12
 800e8d0:	d9d3      	bls.n	800e87a <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800e8d2:	683b      	ldr	r3, [r7, #0]
 800e8d4:	781b      	ldrb	r3, [r3, #0]
 800e8d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d00a      	beq.n	800e8f4 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800e8de:	697b      	ldr	r3, [r7, #20]
 800e8e0:	2bfe      	cmp	r3, #254	; 0xfe
 800e8e2:	d901      	bls.n	800e8e8 <pick_lfn+0xac>
 800e8e4:	2300      	movs	r3, #0
 800e8e6:	e006      	b.n	800e8f6 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800e8e8:	697b      	ldr	r3, [r7, #20]
 800e8ea:	005b      	lsls	r3, r3, #1
 800e8ec:	687a      	ldr	r2, [r7, #4]
 800e8ee:	4413      	add	r3, r2
 800e8f0:	2200      	movs	r2, #0
 800e8f2:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800e8f4:	2301      	movs	r3, #1
}
 800e8f6:	4618      	mov	r0, r3
 800e8f8:	3718      	adds	r7, #24
 800e8fa:	46bd      	mov	sp, r7
 800e8fc:	bd80      	pop	{r7, pc}
 800e8fe:	bf00      	nop
 800e900:	08017534 	.word	0x08017534

0800e904 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800e904:	b580      	push	{r7, lr}
 800e906:	b088      	sub	sp, #32
 800e908:	af00      	add	r7, sp, #0
 800e90a:	60f8      	str	r0, [r7, #12]
 800e90c:	60b9      	str	r1, [r7, #8]
 800e90e:	4611      	mov	r1, r2
 800e910:	461a      	mov	r2, r3
 800e912:	460b      	mov	r3, r1
 800e914:	71fb      	strb	r3, [r7, #7]
 800e916:	4613      	mov	r3, r2
 800e918:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800e91a:	68bb      	ldr	r3, [r7, #8]
 800e91c:	330d      	adds	r3, #13
 800e91e:	79ba      	ldrb	r2, [r7, #6]
 800e920:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800e922:	68bb      	ldr	r3, [r7, #8]
 800e924:	330b      	adds	r3, #11
 800e926:	220f      	movs	r2, #15
 800e928:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800e92a:	68bb      	ldr	r3, [r7, #8]
 800e92c:	330c      	adds	r3, #12
 800e92e:	2200      	movs	r2, #0
 800e930:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800e932:	68bb      	ldr	r3, [r7, #8]
 800e934:	331a      	adds	r3, #26
 800e936:	2100      	movs	r1, #0
 800e938:	4618      	mov	r0, r3
 800e93a:	f7fe fedc 	bl	800d6f6 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800e93e:	79fb      	ldrb	r3, [r7, #7]
 800e940:	1e5a      	subs	r2, r3, #1
 800e942:	4613      	mov	r3, r2
 800e944:	005b      	lsls	r3, r3, #1
 800e946:	4413      	add	r3, r2
 800e948:	009b      	lsls	r3, r3, #2
 800e94a:	4413      	add	r3, r2
 800e94c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800e94e:	2300      	movs	r3, #0
 800e950:	82fb      	strh	r3, [r7, #22]
 800e952:	2300      	movs	r3, #0
 800e954:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800e956:	8afb      	ldrh	r3, [r7, #22]
 800e958:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e95c:	4293      	cmp	r3, r2
 800e95e:	d007      	beq.n	800e970 <put_lfn+0x6c>
 800e960:	69fb      	ldr	r3, [r7, #28]
 800e962:	1c5a      	adds	r2, r3, #1
 800e964:	61fa      	str	r2, [r7, #28]
 800e966:	005b      	lsls	r3, r3, #1
 800e968:	68fa      	ldr	r2, [r7, #12]
 800e96a:	4413      	add	r3, r2
 800e96c:	881b      	ldrh	r3, [r3, #0]
 800e96e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800e970:	4a17      	ldr	r2, [pc, #92]	; (800e9d0 <put_lfn+0xcc>)
 800e972:	69bb      	ldr	r3, [r7, #24]
 800e974:	4413      	add	r3, r2
 800e976:	781b      	ldrb	r3, [r3, #0]
 800e978:	461a      	mov	r2, r3
 800e97a:	68bb      	ldr	r3, [r7, #8]
 800e97c:	4413      	add	r3, r2
 800e97e:	8afa      	ldrh	r2, [r7, #22]
 800e980:	4611      	mov	r1, r2
 800e982:	4618      	mov	r0, r3
 800e984:	f7fe feb7 	bl	800d6f6 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800e988:	8afb      	ldrh	r3, [r7, #22]
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d102      	bne.n	800e994 <put_lfn+0x90>
 800e98e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e992:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800e994:	69bb      	ldr	r3, [r7, #24]
 800e996:	3301      	adds	r3, #1
 800e998:	61bb      	str	r3, [r7, #24]
 800e99a:	69bb      	ldr	r3, [r7, #24]
 800e99c:	2b0c      	cmp	r3, #12
 800e99e:	d9da      	bls.n	800e956 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800e9a0:	8afb      	ldrh	r3, [r7, #22]
 800e9a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e9a6:	4293      	cmp	r3, r2
 800e9a8:	d006      	beq.n	800e9b8 <put_lfn+0xb4>
 800e9aa:	69fb      	ldr	r3, [r7, #28]
 800e9ac:	005b      	lsls	r3, r3, #1
 800e9ae:	68fa      	ldr	r2, [r7, #12]
 800e9b0:	4413      	add	r3, r2
 800e9b2:	881b      	ldrh	r3, [r3, #0]
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d103      	bne.n	800e9c0 <put_lfn+0xbc>
 800e9b8:	79fb      	ldrb	r3, [r7, #7]
 800e9ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e9be:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800e9c0:	68bb      	ldr	r3, [r7, #8]
 800e9c2:	79fa      	ldrb	r2, [r7, #7]
 800e9c4:	701a      	strb	r2, [r3, #0]
}
 800e9c6:	bf00      	nop
 800e9c8:	3720      	adds	r7, #32
 800e9ca:	46bd      	mov	sp, r7
 800e9cc:	bd80      	pop	{r7, pc}
 800e9ce:	bf00      	nop
 800e9d0:	08017534 	.word	0x08017534

0800e9d4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800e9d4:	b580      	push	{r7, lr}
 800e9d6:	b08c      	sub	sp, #48	; 0x30
 800e9d8:	af00      	add	r7, sp, #0
 800e9da:	60f8      	str	r0, [r7, #12]
 800e9dc:	60b9      	str	r1, [r7, #8]
 800e9de:	607a      	str	r2, [r7, #4]
 800e9e0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800e9e2:	220b      	movs	r2, #11
 800e9e4:	68b9      	ldr	r1, [r7, #8]
 800e9e6:	68f8      	ldr	r0, [r7, #12]
 800e9e8:	f7fe fecc 	bl	800d784 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800e9ec:	683b      	ldr	r3, [r7, #0]
 800e9ee:	2b05      	cmp	r3, #5
 800e9f0:	d92b      	bls.n	800ea4a <gen_numname+0x76>
		sr = seq;
 800e9f2:	683b      	ldr	r3, [r7, #0]
 800e9f4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800e9f6:	e022      	b.n	800ea3e <gen_numname+0x6a>
			wc = *lfn++;
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	1c9a      	adds	r2, r3, #2
 800e9fc:	607a      	str	r2, [r7, #4]
 800e9fe:	881b      	ldrh	r3, [r3, #0]
 800ea00:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800ea02:	2300      	movs	r3, #0
 800ea04:	62bb      	str	r3, [r7, #40]	; 0x28
 800ea06:	e017      	b.n	800ea38 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800ea08:	69fb      	ldr	r3, [r7, #28]
 800ea0a:	005a      	lsls	r2, r3, #1
 800ea0c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ea0e:	f003 0301 	and.w	r3, r3, #1
 800ea12:	4413      	add	r3, r2
 800ea14:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800ea16:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ea18:	085b      	lsrs	r3, r3, #1
 800ea1a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800ea1c:	69fb      	ldr	r3, [r7, #28]
 800ea1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d005      	beq.n	800ea32 <gen_numname+0x5e>
 800ea26:	69fb      	ldr	r3, [r7, #28]
 800ea28:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800ea2c:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800ea30:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800ea32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea34:	3301      	adds	r3, #1
 800ea36:	62bb      	str	r3, [r7, #40]	; 0x28
 800ea38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea3a:	2b0f      	cmp	r3, #15
 800ea3c:	d9e4      	bls.n	800ea08 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	881b      	ldrh	r3, [r3, #0]
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d1d8      	bne.n	800e9f8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800ea46:	69fb      	ldr	r3, [r7, #28]
 800ea48:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800ea4a:	2307      	movs	r3, #7
 800ea4c:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800ea4e:	683b      	ldr	r3, [r7, #0]
 800ea50:	b2db      	uxtb	r3, r3
 800ea52:	f003 030f 	and.w	r3, r3, #15
 800ea56:	b2db      	uxtb	r3, r3
 800ea58:	3330      	adds	r3, #48	; 0x30
 800ea5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800ea5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ea62:	2b39      	cmp	r3, #57	; 0x39
 800ea64:	d904      	bls.n	800ea70 <gen_numname+0x9c>
 800ea66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ea6a:	3307      	adds	r3, #7
 800ea6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800ea70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea72:	1e5a      	subs	r2, r3, #1
 800ea74:	62ba      	str	r2, [r7, #40]	; 0x28
 800ea76:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800ea7a:	4413      	add	r3, r2
 800ea7c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800ea80:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800ea84:	683b      	ldr	r3, [r7, #0]
 800ea86:	091b      	lsrs	r3, r3, #4
 800ea88:	603b      	str	r3, [r7, #0]
	} while (seq);
 800ea8a:	683b      	ldr	r3, [r7, #0]
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d1de      	bne.n	800ea4e <gen_numname+0x7a>
	ns[i] = '~';
 800ea90:	f107 0214 	add.w	r2, r7, #20
 800ea94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea96:	4413      	add	r3, r2
 800ea98:	227e      	movs	r2, #126	; 0x7e
 800ea9a:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800ea9c:	2300      	movs	r3, #0
 800ea9e:	627b      	str	r3, [r7, #36]	; 0x24
 800eaa0:	e002      	b.n	800eaa8 <gen_numname+0xd4>
 800eaa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaa4:	3301      	adds	r3, #1
 800eaa6:	627b      	str	r3, [r7, #36]	; 0x24
 800eaa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eaaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaac:	429a      	cmp	r2, r3
 800eaae:	d205      	bcs.n	800eabc <gen_numname+0xe8>
 800eab0:	68fa      	ldr	r2, [r7, #12]
 800eab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eab4:	4413      	add	r3, r2
 800eab6:	781b      	ldrb	r3, [r3, #0]
 800eab8:	2b20      	cmp	r3, #32
 800eaba:	d1f2      	bne.n	800eaa2 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800eabc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eabe:	2b07      	cmp	r3, #7
 800eac0:	d808      	bhi.n	800ead4 <gen_numname+0x100>
 800eac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eac4:	1c5a      	adds	r2, r3, #1
 800eac6:	62ba      	str	r2, [r7, #40]	; 0x28
 800eac8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800eacc:	4413      	add	r3, r2
 800eace:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800ead2:	e000      	b.n	800ead6 <gen_numname+0x102>
 800ead4:	2120      	movs	r1, #32
 800ead6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ead8:	1c5a      	adds	r2, r3, #1
 800eada:	627a      	str	r2, [r7, #36]	; 0x24
 800eadc:	68fa      	ldr	r2, [r7, #12]
 800eade:	4413      	add	r3, r2
 800eae0:	460a      	mov	r2, r1
 800eae2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800eae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eae6:	2b07      	cmp	r3, #7
 800eae8:	d9e8      	bls.n	800eabc <gen_numname+0xe8>
}
 800eaea:	bf00      	nop
 800eaec:	3730      	adds	r7, #48	; 0x30
 800eaee:	46bd      	mov	sp, r7
 800eaf0:	bd80      	pop	{r7, pc}

0800eaf2 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800eaf2:	b480      	push	{r7}
 800eaf4:	b085      	sub	sp, #20
 800eaf6:	af00      	add	r7, sp, #0
 800eaf8:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800eafa:	2300      	movs	r3, #0
 800eafc:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800eafe:	230b      	movs	r3, #11
 800eb00:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800eb02:	7bfb      	ldrb	r3, [r7, #15]
 800eb04:	b2da      	uxtb	r2, r3
 800eb06:	0852      	lsrs	r2, r2, #1
 800eb08:	01db      	lsls	r3, r3, #7
 800eb0a:	4313      	orrs	r3, r2
 800eb0c:	b2da      	uxtb	r2, r3
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	1c59      	adds	r1, r3, #1
 800eb12:	6079      	str	r1, [r7, #4]
 800eb14:	781b      	ldrb	r3, [r3, #0]
 800eb16:	4413      	add	r3, r2
 800eb18:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800eb1a:	68bb      	ldr	r3, [r7, #8]
 800eb1c:	3b01      	subs	r3, #1
 800eb1e:	60bb      	str	r3, [r7, #8]
 800eb20:	68bb      	ldr	r3, [r7, #8]
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d1ed      	bne.n	800eb02 <sum_sfn+0x10>
	return sum;
 800eb26:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb28:	4618      	mov	r0, r3
 800eb2a:	3714      	adds	r7, #20
 800eb2c:	46bd      	mov	sp, r7
 800eb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb32:	4770      	bx	lr

0800eb34 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800eb34:	b580      	push	{r7, lr}
 800eb36:	b086      	sub	sp, #24
 800eb38:	af00      	add	r7, sp, #0
 800eb3a:	6078      	str	r0, [r7, #4]
 800eb3c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800eb3e:	2304      	movs	r3, #4
 800eb40:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800eb48:	23ff      	movs	r3, #255	; 0xff
 800eb4a:	757b      	strb	r3, [r7, #21]
 800eb4c:	23ff      	movs	r3, #255	; 0xff
 800eb4e:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800eb50:	e081      	b.n	800ec56 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	69db      	ldr	r3, [r3, #28]
 800eb56:	4619      	mov	r1, r3
 800eb58:	6938      	ldr	r0, [r7, #16]
 800eb5a:	f7ff f841 	bl	800dbe0 <move_window>
 800eb5e:	4603      	mov	r3, r0
 800eb60:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800eb62:	7dfb      	ldrb	r3, [r7, #23]
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d17c      	bne.n	800ec62 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	6a1b      	ldr	r3, [r3, #32]
 800eb6c:	781b      	ldrb	r3, [r3, #0]
 800eb6e:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800eb70:	7dbb      	ldrb	r3, [r7, #22]
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d102      	bne.n	800eb7c <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800eb76:	2304      	movs	r3, #4
 800eb78:	75fb      	strb	r3, [r7, #23]
 800eb7a:	e077      	b.n	800ec6c <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	6a1b      	ldr	r3, [r3, #32]
 800eb80:	330b      	adds	r3, #11
 800eb82:	781b      	ldrb	r3, [r3, #0]
 800eb84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800eb88:	73fb      	strb	r3, [r7, #15]
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	7bfa      	ldrb	r2, [r7, #15]
 800eb8e:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800eb90:	7dbb      	ldrb	r3, [r7, #22]
 800eb92:	2be5      	cmp	r3, #229	; 0xe5
 800eb94:	d00e      	beq.n	800ebb4 <dir_read+0x80>
 800eb96:	7dbb      	ldrb	r3, [r7, #22]
 800eb98:	2b2e      	cmp	r3, #46	; 0x2e
 800eb9a:	d00b      	beq.n	800ebb4 <dir_read+0x80>
 800eb9c:	7bfb      	ldrb	r3, [r7, #15]
 800eb9e:	f023 0320 	bic.w	r3, r3, #32
 800eba2:	2b08      	cmp	r3, #8
 800eba4:	bf0c      	ite	eq
 800eba6:	2301      	moveq	r3, #1
 800eba8:	2300      	movne	r3, #0
 800ebaa:	b2db      	uxtb	r3, r3
 800ebac:	461a      	mov	r2, r3
 800ebae:	683b      	ldr	r3, [r7, #0]
 800ebb0:	4293      	cmp	r3, r2
 800ebb2:	d002      	beq.n	800ebba <dir_read+0x86>
				ord = 0xFF;
 800ebb4:	23ff      	movs	r3, #255	; 0xff
 800ebb6:	757b      	strb	r3, [r7, #21]
 800ebb8:	e044      	b.n	800ec44 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800ebba:	7bfb      	ldrb	r3, [r7, #15]
 800ebbc:	2b0f      	cmp	r3, #15
 800ebbe:	d12f      	bne.n	800ec20 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800ebc0:	7dbb      	ldrb	r3, [r7, #22]
 800ebc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d00d      	beq.n	800ebe6 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	6a1b      	ldr	r3, [r3, #32]
 800ebce:	7b5b      	ldrb	r3, [r3, #13]
 800ebd0:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800ebd2:	7dbb      	ldrb	r3, [r7, #22]
 800ebd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ebd8:	75bb      	strb	r3, [r7, #22]
 800ebda:	7dbb      	ldrb	r3, [r7, #22]
 800ebdc:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	695a      	ldr	r2, [r3, #20]
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800ebe6:	7dba      	ldrb	r2, [r7, #22]
 800ebe8:	7d7b      	ldrb	r3, [r7, #21]
 800ebea:	429a      	cmp	r2, r3
 800ebec:	d115      	bne.n	800ec1a <dir_read+0xe6>
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	6a1b      	ldr	r3, [r3, #32]
 800ebf2:	330d      	adds	r3, #13
 800ebf4:	781b      	ldrb	r3, [r3, #0]
 800ebf6:	7d3a      	ldrb	r2, [r7, #20]
 800ebf8:	429a      	cmp	r2, r3
 800ebfa:	d10e      	bne.n	800ec1a <dir_read+0xe6>
 800ebfc:	693b      	ldr	r3, [r7, #16]
 800ebfe:	691a      	ldr	r2, [r3, #16]
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	6a1b      	ldr	r3, [r3, #32]
 800ec04:	4619      	mov	r1, r3
 800ec06:	4610      	mov	r0, r2
 800ec08:	f7ff fe18 	bl	800e83c <pick_lfn>
 800ec0c:	4603      	mov	r3, r0
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d003      	beq.n	800ec1a <dir_read+0xe6>
 800ec12:	7d7b      	ldrb	r3, [r7, #21]
 800ec14:	3b01      	subs	r3, #1
 800ec16:	b2db      	uxtb	r3, r3
 800ec18:	e000      	b.n	800ec1c <dir_read+0xe8>
 800ec1a:	23ff      	movs	r3, #255	; 0xff
 800ec1c:	757b      	strb	r3, [r7, #21]
 800ec1e:	e011      	b.n	800ec44 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800ec20:	7d7b      	ldrb	r3, [r7, #21]
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d109      	bne.n	800ec3a <dir_read+0x106>
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	6a1b      	ldr	r3, [r3, #32]
 800ec2a:	4618      	mov	r0, r3
 800ec2c:	f7ff ff61 	bl	800eaf2 <sum_sfn>
 800ec30:	4603      	mov	r3, r0
 800ec32:	461a      	mov	r2, r3
 800ec34:	7d3b      	ldrb	r3, [r7, #20]
 800ec36:	4293      	cmp	r3, r2
 800ec38:	d015      	beq.n	800ec66 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	f04f 32ff 	mov.w	r2, #4294967295
 800ec40:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 800ec42:	e010      	b.n	800ec66 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800ec44:	2100      	movs	r1, #0
 800ec46:	6878      	ldr	r0, [r7, #4]
 800ec48:	f7ff fc2c 	bl	800e4a4 <dir_next>
 800ec4c:	4603      	mov	r3, r0
 800ec4e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ec50:	7dfb      	ldrb	r3, [r7, #23]
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d109      	bne.n	800ec6a <dir_read+0x136>
	while (dp->sect) {
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	69db      	ldr	r3, [r3, #28]
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	f47f af79 	bne.w	800eb52 <dir_read+0x1e>
 800ec60:	e004      	b.n	800ec6c <dir_read+0x138>
		if (res != FR_OK) break;
 800ec62:	bf00      	nop
 800ec64:	e002      	b.n	800ec6c <dir_read+0x138>
					break;
 800ec66:	bf00      	nop
 800ec68:	e000      	b.n	800ec6c <dir_read+0x138>
		if (res != FR_OK) break;
 800ec6a:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800ec6c:	7dfb      	ldrb	r3, [r7, #23]
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d002      	beq.n	800ec78 <dir_read+0x144>
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	2200      	movs	r2, #0
 800ec76:	61da      	str	r2, [r3, #28]
	return res;
 800ec78:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec7a:	4618      	mov	r0, r3
 800ec7c:	3718      	adds	r7, #24
 800ec7e:	46bd      	mov	sp, r7
 800ec80:	bd80      	pop	{r7, pc}

0800ec82 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800ec82:	b580      	push	{r7, lr}
 800ec84:	b086      	sub	sp, #24
 800ec86:	af00      	add	r7, sp, #0
 800ec88:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800ec90:	2100      	movs	r1, #0
 800ec92:	6878      	ldr	r0, [r7, #4]
 800ec94:	f7ff fb7d 	bl	800e392 <dir_sdi>
 800ec98:	4603      	mov	r3, r0
 800ec9a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800ec9c:	7dfb      	ldrb	r3, [r7, #23]
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d001      	beq.n	800eca6 <dir_find+0x24>
 800eca2:	7dfb      	ldrb	r3, [r7, #23]
 800eca4:	e0a9      	b.n	800edfa <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800eca6:	23ff      	movs	r3, #255	; 0xff
 800eca8:	753b      	strb	r3, [r7, #20]
 800ecaa:	7d3b      	ldrb	r3, [r7, #20]
 800ecac:	757b      	strb	r3, [r7, #21]
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	f04f 32ff 	mov.w	r2, #4294967295
 800ecb4:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	69db      	ldr	r3, [r3, #28]
 800ecba:	4619      	mov	r1, r3
 800ecbc:	6938      	ldr	r0, [r7, #16]
 800ecbe:	f7fe ff8f 	bl	800dbe0 <move_window>
 800ecc2:	4603      	mov	r3, r0
 800ecc4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ecc6:	7dfb      	ldrb	r3, [r7, #23]
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	f040 8090 	bne.w	800edee <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	6a1b      	ldr	r3, [r3, #32]
 800ecd2:	781b      	ldrb	r3, [r3, #0]
 800ecd4:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ecd6:	7dbb      	ldrb	r3, [r7, #22]
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d102      	bne.n	800ece2 <dir_find+0x60>
 800ecdc:	2304      	movs	r3, #4
 800ecde:	75fb      	strb	r3, [r7, #23]
 800ece0:	e08a      	b.n	800edf8 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	6a1b      	ldr	r3, [r3, #32]
 800ece6:	330b      	adds	r3, #11
 800ece8:	781b      	ldrb	r3, [r3, #0]
 800ecea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ecee:	73fb      	strb	r3, [r7, #15]
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	7bfa      	ldrb	r2, [r7, #15]
 800ecf4:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800ecf6:	7dbb      	ldrb	r3, [r7, #22]
 800ecf8:	2be5      	cmp	r3, #229	; 0xe5
 800ecfa:	d007      	beq.n	800ed0c <dir_find+0x8a>
 800ecfc:	7bfb      	ldrb	r3, [r7, #15]
 800ecfe:	f003 0308 	and.w	r3, r3, #8
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d009      	beq.n	800ed1a <dir_find+0x98>
 800ed06:	7bfb      	ldrb	r3, [r7, #15]
 800ed08:	2b0f      	cmp	r3, #15
 800ed0a:	d006      	beq.n	800ed1a <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ed0c:	23ff      	movs	r3, #255	; 0xff
 800ed0e:	757b      	strb	r3, [r7, #21]
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	f04f 32ff 	mov.w	r2, #4294967295
 800ed16:	631a      	str	r2, [r3, #48]	; 0x30
 800ed18:	e05e      	b.n	800edd8 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800ed1a:	7bfb      	ldrb	r3, [r7, #15]
 800ed1c:	2b0f      	cmp	r3, #15
 800ed1e:	d136      	bne.n	800ed8e <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ed26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d154      	bne.n	800edd8 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800ed2e:	7dbb      	ldrb	r3, [r7, #22]
 800ed30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d00d      	beq.n	800ed54 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	6a1b      	ldr	r3, [r3, #32]
 800ed3c:	7b5b      	ldrb	r3, [r3, #13]
 800ed3e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800ed40:	7dbb      	ldrb	r3, [r7, #22]
 800ed42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ed46:	75bb      	strb	r3, [r7, #22]
 800ed48:	7dbb      	ldrb	r3, [r7, #22]
 800ed4a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	695a      	ldr	r2, [r3, #20]
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800ed54:	7dba      	ldrb	r2, [r7, #22]
 800ed56:	7d7b      	ldrb	r3, [r7, #21]
 800ed58:	429a      	cmp	r2, r3
 800ed5a:	d115      	bne.n	800ed88 <dir_find+0x106>
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	6a1b      	ldr	r3, [r3, #32]
 800ed60:	330d      	adds	r3, #13
 800ed62:	781b      	ldrb	r3, [r3, #0]
 800ed64:	7d3a      	ldrb	r2, [r7, #20]
 800ed66:	429a      	cmp	r2, r3
 800ed68:	d10e      	bne.n	800ed88 <dir_find+0x106>
 800ed6a:	693b      	ldr	r3, [r7, #16]
 800ed6c:	691a      	ldr	r2, [r3, #16]
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	6a1b      	ldr	r3, [r3, #32]
 800ed72:	4619      	mov	r1, r3
 800ed74:	4610      	mov	r0, r2
 800ed76:	f7ff fcf1 	bl	800e75c <cmp_lfn>
 800ed7a:	4603      	mov	r3, r0
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d003      	beq.n	800ed88 <dir_find+0x106>
 800ed80:	7d7b      	ldrb	r3, [r7, #21]
 800ed82:	3b01      	subs	r3, #1
 800ed84:	b2db      	uxtb	r3, r3
 800ed86:	e000      	b.n	800ed8a <dir_find+0x108>
 800ed88:	23ff      	movs	r3, #255	; 0xff
 800ed8a:	757b      	strb	r3, [r7, #21]
 800ed8c:	e024      	b.n	800edd8 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800ed8e:	7d7b      	ldrb	r3, [r7, #21]
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d109      	bne.n	800eda8 <dir_find+0x126>
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	6a1b      	ldr	r3, [r3, #32]
 800ed98:	4618      	mov	r0, r3
 800ed9a:	f7ff feaa 	bl	800eaf2 <sum_sfn>
 800ed9e:	4603      	mov	r3, r0
 800eda0:	461a      	mov	r2, r3
 800eda2:	7d3b      	ldrb	r3, [r7, #20]
 800eda4:	4293      	cmp	r3, r2
 800eda6:	d024      	beq.n	800edf2 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800edae:	f003 0301 	and.w	r3, r3, #1
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d10a      	bne.n	800edcc <dir_find+0x14a>
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	6a18      	ldr	r0, [r3, #32]
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	3324      	adds	r3, #36	; 0x24
 800edbe:	220b      	movs	r2, #11
 800edc0:	4619      	mov	r1, r3
 800edc2:	f7fe fd1a 	bl	800d7fa <mem_cmp>
 800edc6:	4603      	mov	r3, r0
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d014      	beq.n	800edf6 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800edcc:	23ff      	movs	r3, #255	; 0xff
 800edce:	757b      	strb	r3, [r7, #21]
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	f04f 32ff 	mov.w	r2, #4294967295
 800edd6:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800edd8:	2100      	movs	r1, #0
 800edda:	6878      	ldr	r0, [r7, #4]
 800eddc:	f7ff fb62 	bl	800e4a4 <dir_next>
 800ede0:	4603      	mov	r3, r0
 800ede2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800ede4:	7dfb      	ldrb	r3, [r7, #23]
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	f43f af65 	beq.w	800ecb6 <dir_find+0x34>
 800edec:	e004      	b.n	800edf8 <dir_find+0x176>
		if (res != FR_OK) break;
 800edee:	bf00      	nop
 800edf0:	e002      	b.n	800edf8 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800edf2:	bf00      	nop
 800edf4:	e000      	b.n	800edf8 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800edf6:	bf00      	nop

	return res;
 800edf8:	7dfb      	ldrb	r3, [r7, #23]
}
 800edfa:	4618      	mov	r0, r3
 800edfc:	3718      	adds	r7, #24
 800edfe:	46bd      	mov	sp, r7
 800ee00:	bd80      	pop	{r7, pc}
	...

0800ee04 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800ee04:	b580      	push	{r7, lr}
 800ee06:	b08c      	sub	sp, #48	; 0x30
 800ee08:	af00      	add	r7, sp, #0
 800ee0a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ee18:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d001      	beq.n	800ee24 <dir_register+0x20>
 800ee20:	2306      	movs	r3, #6
 800ee22:	e0e0      	b.n	800efe6 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800ee24:	2300      	movs	r3, #0
 800ee26:	627b      	str	r3, [r7, #36]	; 0x24
 800ee28:	e002      	b.n	800ee30 <dir_register+0x2c>
 800ee2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee2c:	3301      	adds	r3, #1
 800ee2e:	627b      	str	r3, [r7, #36]	; 0x24
 800ee30:	69fb      	ldr	r3, [r7, #28]
 800ee32:	691a      	ldr	r2, [r3, #16]
 800ee34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee36:	005b      	lsls	r3, r3, #1
 800ee38:	4413      	add	r3, r2
 800ee3a:	881b      	ldrh	r3, [r3, #0]
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d1f4      	bne.n	800ee2a <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800ee46:	f107 030c 	add.w	r3, r7, #12
 800ee4a:	220c      	movs	r2, #12
 800ee4c:	4618      	mov	r0, r3
 800ee4e:	f7fe fc99 	bl	800d784 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800ee52:	7dfb      	ldrb	r3, [r7, #23]
 800ee54:	f003 0301 	and.w	r3, r3, #1
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d032      	beq.n	800eec2 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	2240      	movs	r2, #64	; 0x40
 800ee60:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800ee64:	2301      	movs	r3, #1
 800ee66:	62bb      	str	r3, [r7, #40]	; 0x28
 800ee68:	e016      	b.n	800ee98 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800ee70:	69fb      	ldr	r3, [r7, #28]
 800ee72:	691a      	ldr	r2, [r3, #16]
 800ee74:	f107 010c 	add.w	r1, r7, #12
 800ee78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee7a:	f7ff fdab 	bl	800e9d4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800ee7e:	6878      	ldr	r0, [r7, #4]
 800ee80:	f7ff feff 	bl	800ec82 <dir_find>
 800ee84:	4603      	mov	r3, r0
 800ee86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800ee8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d106      	bne.n	800eea0 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800ee92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee94:	3301      	adds	r3, #1
 800ee96:	62bb      	str	r3, [r7, #40]	; 0x28
 800ee98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee9a:	2b63      	cmp	r3, #99	; 0x63
 800ee9c:	d9e5      	bls.n	800ee6a <dir_register+0x66>
 800ee9e:	e000      	b.n	800eea2 <dir_register+0x9e>
			if (res != FR_OK) break;
 800eea0:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800eea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eea4:	2b64      	cmp	r3, #100	; 0x64
 800eea6:	d101      	bne.n	800eeac <dir_register+0xa8>
 800eea8:	2307      	movs	r3, #7
 800eeaa:	e09c      	b.n	800efe6 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800eeac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800eeb0:	2b04      	cmp	r3, #4
 800eeb2:	d002      	beq.n	800eeba <dir_register+0xb6>
 800eeb4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800eeb8:	e095      	b.n	800efe6 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800eeba:	7dfa      	ldrb	r2, [r7, #23]
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800eec2:	7dfb      	ldrb	r3, [r7, #23]
 800eec4:	f003 0302 	and.w	r3, r3, #2
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d007      	beq.n	800eedc <dir_register+0xd8>
 800eecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eece:	330c      	adds	r3, #12
 800eed0:	4a47      	ldr	r2, [pc, #284]	; (800eff0 <dir_register+0x1ec>)
 800eed2:	fba2 2303 	umull	r2, r3, r2, r3
 800eed6:	089b      	lsrs	r3, r3, #2
 800eed8:	3301      	adds	r3, #1
 800eeda:	e000      	b.n	800eede <dir_register+0xda>
 800eedc:	2301      	movs	r3, #1
 800eede:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800eee0:	6a39      	ldr	r1, [r7, #32]
 800eee2:	6878      	ldr	r0, [r7, #4]
 800eee4:	f7ff fbb4 	bl	800e650 <dir_alloc>
 800eee8:	4603      	mov	r3, r0
 800eeea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800eeee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d148      	bne.n	800ef88 <dir_register+0x184>
 800eef6:	6a3b      	ldr	r3, [r7, #32]
 800eef8:	3b01      	subs	r3, #1
 800eefa:	623b      	str	r3, [r7, #32]
 800eefc:	6a3b      	ldr	r3, [r7, #32]
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d042      	beq.n	800ef88 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	695a      	ldr	r2, [r3, #20]
 800ef06:	6a3b      	ldr	r3, [r7, #32]
 800ef08:	015b      	lsls	r3, r3, #5
 800ef0a:	1ad3      	subs	r3, r2, r3
 800ef0c:	4619      	mov	r1, r3
 800ef0e:	6878      	ldr	r0, [r7, #4]
 800ef10:	f7ff fa3f 	bl	800e392 <dir_sdi>
 800ef14:	4603      	mov	r3, r0
 800ef16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800ef1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d132      	bne.n	800ef88 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	3324      	adds	r3, #36	; 0x24
 800ef26:	4618      	mov	r0, r3
 800ef28:	f7ff fde3 	bl	800eaf2 <sum_sfn>
 800ef2c:	4603      	mov	r3, r0
 800ef2e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	69db      	ldr	r3, [r3, #28]
 800ef34:	4619      	mov	r1, r3
 800ef36:	69f8      	ldr	r0, [r7, #28]
 800ef38:	f7fe fe52 	bl	800dbe0 <move_window>
 800ef3c:	4603      	mov	r3, r0
 800ef3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800ef42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d11d      	bne.n	800ef86 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800ef4a:	69fb      	ldr	r3, [r7, #28]
 800ef4c:	6918      	ldr	r0, [r3, #16]
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	6a19      	ldr	r1, [r3, #32]
 800ef52:	6a3b      	ldr	r3, [r7, #32]
 800ef54:	b2da      	uxtb	r2, r3
 800ef56:	7efb      	ldrb	r3, [r7, #27]
 800ef58:	f7ff fcd4 	bl	800e904 <put_lfn>
				fs->wflag = 1;
 800ef5c:	69fb      	ldr	r3, [r7, #28]
 800ef5e:	2201      	movs	r2, #1
 800ef60:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800ef62:	2100      	movs	r1, #0
 800ef64:	6878      	ldr	r0, [r7, #4]
 800ef66:	f7ff fa9d 	bl	800e4a4 <dir_next>
 800ef6a:	4603      	mov	r3, r0
 800ef6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800ef70:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d107      	bne.n	800ef88 <dir_register+0x184>
 800ef78:	6a3b      	ldr	r3, [r7, #32]
 800ef7a:	3b01      	subs	r3, #1
 800ef7c:	623b      	str	r3, [r7, #32]
 800ef7e:	6a3b      	ldr	r3, [r7, #32]
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d1d5      	bne.n	800ef30 <dir_register+0x12c>
 800ef84:	e000      	b.n	800ef88 <dir_register+0x184>
				if (res != FR_OK) break;
 800ef86:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800ef88:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d128      	bne.n	800efe2 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	69db      	ldr	r3, [r3, #28]
 800ef94:	4619      	mov	r1, r3
 800ef96:	69f8      	ldr	r0, [r7, #28]
 800ef98:	f7fe fe22 	bl	800dbe0 <move_window>
 800ef9c:	4603      	mov	r3, r0
 800ef9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800efa2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d11b      	bne.n	800efe2 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	6a1b      	ldr	r3, [r3, #32]
 800efae:	2220      	movs	r2, #32
 800efb0:	2100      	movs	r1, #0
 800efb2:	4618      	mov	r0, r3
 800efb4:	f7fe fc07 	bl	800d7c6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	6a18      	ldr	r0, [r3, #32]
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	3324      	adds	r3, #36	; 0x24
 800efc0:	220b      	movs	r2, #11
 800efc2:	4619      	mov	r1, r3
 800efc4:	f7fe fbde 	bl	800d784 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	6a1b      	ldr	r3, [r3, #32]
 800efd2:	330c      	adds	r3, #12
 800efd4:	f002 0218 	and.w	r2, r2, #24
 800efd8:	b2d2      	uxtb	r2, r2
 800efda:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800efdc:	69fb      	ldr	r3, [r7, #28]
 800efde:	2201      	movs	r2, #1
 800efe0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800efe2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800efe6:	4618      	mov	r0, r3
 800efe8:	3730      	adds	r7, #48	; 0x30
 800efea:	46bd      	mov	sp, r7
 800efec:	bd80      	pop	{r7, pc}
 800efee:	bf00      	nop
 800eff0:	4ec4ec4f 	.word	0x4ec4ec4f

0800eff4 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 800eff4:	b580      	push	{r7, lr}
 800eff6:	b086      	sub	sp, #24
 800eff8:	af00      	add	r7, sp, #0
 800effa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	695b      	ldr	r3, [r3, #20]
 800f006:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f00c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f010:	d007      	beq.n	800f022 <dir_remove+0x2e>
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f016:	4619      	mov	r1, r3
 800f018:	6878      	ldr	r0, [r7, #4]
 800f01a:	f7ff f9ba 	bl	800e392 <dir_sdi>
 800f01e:	4603      	mov	r3, r0
 800f020:	e000      	b.n	800f024 <dir_remove+0x30>
 800f022:	2300      	movs	r3, #0
 800f024:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f026:	7dfb      	ldrb	r3, [r7, #23]
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d128      	bne.n	800f07e <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	69db      	ldr	r3, [r3, #28]
 800f030:	4619      	mov	r1, r3
 800f032:	6938      	ldr	r0, [r7, #16]
 800f034:	f7fe fdd4 	bl	800dbe0 <move_window>
 800f038:	4603      	mov	r3, r0
 800f03a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f03c:	7dfb      	ldrb	r3, [r7, #23]
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d115      	bne.n	800f06e <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	6a1b      	ldr	r3, [r3, #32]
 800f046:	22e5      	movs	r2, #229	; 0xe5
 800f048:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 800f04a:	693b      	ldr	r3, [r7, #16]
 800f04c:	2201      	movs	r2, #1
 800f04e:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	695b      	ldr	r3, [r3, #20]
 800f054:	68fa      	ldr	r2, [r7, #12]
 800f056:	429a      	cmp	r2, r3
 800f058:	d90b      	bls.n	800f072 <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 800f05a:	2100      	movs	r1, #0
 800f05c:	6878      	ldr	r0, [r7, #4]
 800f05e:	f7ff fa21 	bl	800e4a4 <dir_next>
 800f062:	4603      	mov	r3, r0
 800f064:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 800f066:	7dfb      	ldrb	r3, [r7, #23]
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d0df      	beq.n	800f02c <dir_remove+0x38>
 800f06c:	e002      	b.n	800f074 <dir_remove+0x80>
			if (res != FR_OK) break;
 800f06e:	bf00      	nop
 800f070:	e000      	b.n	800f074 <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 800f072:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 800f074:	7dfb      	ldrb	r3, [r7, #23]
 800f076:	2b04      	cmp	r3, #4
 800f078:	d101      	bne.n	800f07e <dir_remove+0x8a>
 800f07a:	2302      	movs	r3, #2
 800f07c:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 800f07e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f080:	4618      	mov	r0, r3
 800f082:	3718      	adds	r7, #24
 800f084:	46bd      	mov	sp, r7
 800f086:	bd80      	pop	{r7, pc}

0800f088 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800f088:	b580      	push	{r7, lr}
 800f08a:	b08a      	sub	sp, #40	; 0x28
 800f08c:	af00      	add	r7, sp, #0
 800f08e:	6078      	str	r0, [r7, #4]
 800f090:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800f092:	683b      	ldr	r3, [r7, #0]
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	613b      	str	r3, [r7, #16]
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	691b      	ldr	r3, [r3, #16]
 800f09e:	60fb      	str	r3, [r7, #12]
 800f0a0:	2300      	movs	r3, #0
 800f0a2:	617b      	str	r3, [r7, #20]
 800f0a4:	697b      	ldr	r3, [r7, #20]
 800f0a6:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800f0a8:	69bb      	ldr	r3, [r7, #24]
 800f0aa:	1c5a      	adds	r2, r3, #1
 800f0ac:	61ba      	str	r2, [r7, #24]
 800f0ae:	693a      	ldr	r2, [r7, #16]
 800f0b0:	4413      	add	r3, r2
 800f0b2:	781b      	ldrb	r3, [r3, #0]
 800f0b4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800f0b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f0b8:	2b1f      	cmp	r3, #31
 800f0ba:	d940      	bls.n	800f13e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800f0bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f0be:	2b2f      	cmp	r3, #47	; 0x2f
 800f0c0:	d006      	beq.n	800f0d0 <create_name+0x48>
 800f0c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f0c4:	2b5c      	cmp	r3, #92	; 0x5c
 800f0c6:	d110      	bne.n	800f0ea <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800f0c8:	e002      	b.n	800f0d0 <create_name+0x48>
 800f0ca:	69bb      	ldr	r3, [r7, #24]
 800f0cc:	3301      	adds	r3, #1
 800f0ce:	61bb      	str	r3, [r7, #24]
 800f0d0:	693a      	ldr	r2, [r7, #16]
 800f0d2:	69bb      	ldr	r3, [r7, #24]
 800f0d4:	4413      	add	r3, r2
 800f0d6:	781b      	ldrb	r3, [r3, #0]
 800f0d8:	2b2f      	cmp	r3, #47	; 0x2f
 800f0da:	d0f6      	beq.n	800f0ca <create_name+0x42>
 800f0dc:	693a      	ldr	r2, [r7, #16]
 800f0de:	69bb      	ldr	r3, [r7, #24]
 800f0e0:	4413      	add	r3, r2
 800f0e2:	781b      	ldrb	r3, [r3, #0]
 800f0e4:	2b5c      	cmp	r3, #92	; 0x5c
 800f0e6:	d0f0      	beq.n	800f0ca <create_name+0x42>
			break;
 800f0e8:	e02a      	b.n	800f140 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800f0ea:	697b      	ldr	r3, [r7, #20]
 800f0ec:	2bfe      	cmp	r3, #254	; 0xfe
 800f0ee:	d901      	bls.n	800f0f4 <create_name+0x6c>
 800f0f0:	2306      	movs	r3, #6
 800f0f2:	e1c9      	b.n	800f488 <create_name+0x400>
#if !_LFN_UNICODE
		w &= 0xFF;
 800f0f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f0f6:	b2db      	uxtb	r3, r3
 800f0f8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800f0fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f0fc:	2101      	movs	r1, #1
 800f0fe:	4618      	mov	r0, r3
 800f100:	f002 f848 	bl	8011194 <ff_convert>
 800f104:	4603      	mov	r3, r0
 800f106:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800f108:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d101      	bne.n	800f112 <create_name+0x8a>
 800f10e:	2306      	movs	r3, #6
 800f110:	e1ba      	b.n	800f488 <create_name+0x400>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800f112:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f114:	2b7f      	cmp	r3, #127	; 0x7f
 800f116:	d809      	bhi.n	800f12c <create_name+0xa4>
 800f118:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f11a:	4619      	mov	r1, r3
 800f11c:	48a5      	ldr	r0, [pc, #660]	; (800f3b4 <create_name+0x32c>)
 800f11e:	f7fe fb93 	bl	800d848 <chk_chr>
 800f122:	4603      	mov	r3, r0
 800f124:	2b00      	cmp	r3, #0
 800f126:	d001      	beq.n	800f12c <create_name+0xa4>
 800f128:	2306      	movs	r3, #6
 800f12a:	e1ad      	b.n	800f488 <create_name+0x400>
		lfn[di++] = w;					/* Store the Unicode character */
 800f12c:	697b      	ldr	r3, [r7, #20]
 800f12e:	1c5a      	adds	r2, r3, #1
 800f130:	617a      	str	r2, [r7, #20]
 800f132:	005b      	lsls	r3, r3, #1
 800f134:	68fa      	ldr	r2, [r7, #12]
 800f136:	4413      	add	r3, r2
 800f138:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f13a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800f13c:	e7b4      	b.n	800f0a8 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800f13e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800f140:	693a      	ldr	r2, [r7, #16]
 800f142:	69bb      	ldr	r3, [r7, #24]
 800f144:	441a      	add	r2, r3
 800f146:	683b      	ldr	r3, [r7, #0]
 800f148:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800f14a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f14c:	2b1f      	cmp	r3, #31
 800f14e:	d801      	bhi.n	800f154 <create_name+0xcc>
 800f150:	2304      	movs	r3, #4
 800f152:	e000      	b.n	800f156 <create_name+0xce>
 800f154:	2300      	movs	r3, #0
 800f156:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if _FS_RPATH != 0
	if ((di == 1 && lfn[di - 1] == '.') ||
 800f15a:	697b      	ldr	r3, [r7, #20]
 800f15c:	2b01      	cmp	r3, #1
 800f15e:	d109      	bne.n	800f174 <create_name+0xec>
 800f160:	697b      	ldr	r3, [r7, #20]
 800f162:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f166:	3b01      	subs	r3, #1
 800f168:	005b      	lsls	r3, r3, #1
 800f16a:	68fa      	ldr	r2, [r7, #12]
 800f16c:	4413      	add	r3, r2
 800f16e:	881b      	ldrh	r3, [r3, #0]
 800f170:	2b2e      	cmp	r3, #46	; 0x2e
 800f172:	d016      	beq.n	800f1a2 <create_name+0x11a>
 800f174:	697b      	ldr	r3, [r7, #20]
 800f176:	2b02      	cmp	r3, #2
 800f178:	d14e      	bne.n	800f218 <create_name+0x190>
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
 800f17a:	697b      	ldr	r3, [r7, #20]
 800f17c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f180:	3b01      	subs	r3, #1
 800f182:	005b      	lsls	r3, r3, #1
 800f184:	68fa      	ldr	r2, [r7, #12]
 800f186:	4413      	add	r3, r2
 800f188:	881b      	ldrh	r3, [r3, #0]
 800f18a:	2b2e      	cmp	r3, #46	; 0x2e
 800f18c:	d144      	bne.n	800f218 <create_name+0x190>
 800f18e:	697b      	ldr	r3, [r7, #20]
 800f190:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f194:	3b02      	subs	r3, #2
 800f196:	005b      	lsls	r3, r3, #1
 800f198:	68fa      	ldr	r2, [r7, #12]
 800f19a:	4413      	add	r3, r2
 800f19c:	881b      	ldrh	r3, [r3, #0]
 800f19e:	2b2e      	cmp	r3, #46	; 0x2e
 800f1a0:	d13a      	bne.n	800f218 <create_name+0x190>
		lfn[di] = 0;
 800f1a2:	697b      	ldr	r3, [r7, #20]
 800f1a4:	005b      	lsls	r3, r3, #1
 800f1a6:	68fa      	ldr	r2, [r7, #12]
 800f1a8:	4413      	add	r3, r2
 800f1aa:	2200      	movs	r2, #0
 800f1ac:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 800f1ae:	2300      	movs	r3, #0
 800f1b0:	623b      	str	r3, [r7, #32]
 800f1b2:	e00f      	b.n	800f1d4 <create_name+0x14c>
			dp->fn[i] = (i < di) ? '.' : ' ';
 800f1b4:	6a3a      	ldr	r2, [r7, #32]
 800f1b6:	697b      	ldr	r3, [r7, #20]
 800f1b8:	429a      	cmp	r2, r3
 800f1ba:	d201      	bcs.n	800f1c0 <create_name+0x138>
 800f1bc:	212e      	movs	r1, #46	; 0x2e
 800f1be:	e000      	b.n	800f1c2 <create_name+0x13a>
 800f1c0:	2120      	movs	r1, #32
 800f1c2:	687a      	ldr	r2, [r7, #4]
 800f1c4:	6a3b      	ldr	r3, [r7, #32]
 800f1c6:	4413      	add	r3, r2
 800f1c8:	3324      	adds	r3, #36	; 0x24
 800f1ca:	460a      	mov	r2, r1
 800f1cc:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 800f1ce:	6a3b      	ldr	r3, [r7, #32]
 800f1d0:	3301      	adds	r3, #1
 800f1d2:	623b      	str	r3, [r7, #32]
 800f1d4:	6a3b      	ldr	r3, [r7, #32]
 800f1d6:	2b0a      	cmp	r3, #10
 800f1d8:	d9ec      	bls.n	800f1b4 <create_name+0x12c>
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
 800f1da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f1de:	f043 0320 	orr.w	r3, r3, #32
 800f1e2:	b2d9      	uxtb	r1, r3
 800f1e4:	687a      	ldr	r2, [r7, #4]
 800f1e6:	6a3b      	ldr	r3, [r7, #32]
 800f1e8:	4413      	add	r3, r2
 800f1ea:	3324      	adds	r3, #36	; 0x24
 800f1ec:	460a      	mov	r2, r1
 800f1ee:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 800f1f0:	2300      	movs	r3, #0
 800f1f2:	e149      	b.n	800f488 <create_name+0x400>
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
		w = lfn[di - 1];
 800f1f4:	697b      	ldr	r3, [r7, #20]
 800f1f6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f1fa:	3b01      	subs	r3, #1
 800f1fc:	005b      	lsls	r3, r3, #1
 800f1fe:	68fa      	ldr	r2, [r7, #12]
 800f200:	4413      	add	r3, r2
 800f202:	881b      	ldrh	r3, [r3, #0]
 800f204:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800f206:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f208:	2b20      	cmp	r3, #32
 800f20a:	d002      	beq.n	800f212 <create_name+0x18a>
 800f20c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f20e:	2b2e      	cmp	r3, #46	; 0x2e
 800f210:	d106      	bne.n	800f220 <create_name+0x198>
		di--;
 800f212:	697b      	ldr	r3, [r7, #20]
 800f214:	3b01      	subs	r3, #1
 800f216:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800f218:	697b      	ldr	r3, [r7, #20]
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d1ea      	bne.n	800f1f4 <create_name+0x16c>
 800f21e:	e000      	b.n	800f222 <create_name+0x19a>
		if (w != ' ' && w != '.') break;
 800f220:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800f222:	697b      	ldr	r3, [r7, #20]
 800f224:	005b      	lsls	r3, r3, #1
 800f226:	68fa      	ldr	r2, [r7, #12]
 800f228:	4413      	add	r3, r2
 800f22a:	2200      	movs	r2, #0
 800f22c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800f22e:	697b      	ldr	r3, [r7, #20]
 800f230:	2b00      	cmp	r3, #0
 800f232:	d101      	bne.n	800f238 <create_name+0x1b0>
 800f234:	2306      	movs	r3, #6
 800f236:	e127      	b.n	800f488 <create_name+0x400>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	3324      	adds	r3, #36	; 0x24
 800f23c:	220b      	movs	r2, #11
 800f23e:	2120      	movs	r1, #32
 800f240:	4618      	mov	r0, r3
 800f242:	f7fe fac0 	bl	800d7c6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800f246:	2300      	movs	r3, #0
 800f248:	61bb      	str	r3, [r7, #24]
 800f24a:	e002      	b.n	800f252 <create_name+0x1ca>
 800f24c:	69bb      	ldr	r3, [r7, #24]
 800f24e:	3301      	adds	r3, #1
 800f250:	61bb      	str	r3, [r7, #24]
 800f252:	69bb      	ldr	r3, [r7, #24]
 800f254:	005b      	lsls	r3, r3, #1
 800f256:	68fa      	ldr	r2, [r7, #12]
 800f258:	4413      	add	r3, r2
 800f25a:	881b      	ldrh	r3, [r3, #0]
 800f25c:	2b20      	cmp	r3, #32
 800f25e:	d0f5      	beq.n	800f24c <create_name+0x1c4>
 800f260:	69bb      	ldr	r3, [r7, #24]
 800f262:	005b      	lsls	r3, r3, #1
 800f264:	68fa      	ldr	r2, [r7, #12]
 800f266:	4413      	add	r3, r2
 800f268:	881b      	ldrh	r3, [r3, #0]
 800f26a:	2b2e      	cmp	r3, #46	; 0x2e
 800f26c:	d0ee      	beq.n	800f24c <create_name+0x1c4>
	if (si) cf |= NS_LOSS | NS_LFN;
 800f26e:	69bb      	ldr	r3, [r7, #24]
 800f270:	2b00      	cmp	r3, #0
 800f272:	d009      	beq.n	800f288 <create_name+0x200>
 800f274:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f278:	f043 0303 	orr.w	r3, r3, #3
 800f27c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800f280:	e002      	b.n	800f288 <create_name+0x200>
 800f282:	697b      	ldr	r3, [r7, #20]
 800f284:	3b01      	subs	r3, #1
 800f286:	617b      	str	r3, [r7, #20]
 800f288:	697b      	ldr	r3, [r7, #20]
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d009      	beq.n	800f2a2 <create_name+0x21a>
 800f28e:	697b      	ldr	r3, [r7, #20]
 800f290:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f294:	3b01      	subs	r3, #1
 800f296:	005b      	lsls	r3, r3, #1
 800f298:	68fa      	ldr	r2, [r7, #12]
 800f29a:	4413      	add	r3, r2
 800f29c:	881b      	ldrh	r3, [r3, #0]
 800f29e:	2b2e      	cmp	r3, #46	; 0x2e
 800f2a0:	d1ef      	bne.n	800f282 <create_name+0x1fa>

	i = b = 0; ni = 8;
 800f2a2:	2300      	movs	r3, #0
 800f2a4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f2a8:	2300      	movs	r3, #0
 800f2aa:	623b      	str	r3, [r7, #32]
 800f2ac:	2308      	movs	r3, #8
 800f2ae:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800f2b0:	69bb      	ldr	r3, [r7, #24]
 800f2b2:	1c5a      	adds	r2, r3, #1
 800f2b4:	61ba      	str	r2, [r7, #24]
 800f2b6:	005b      	lsls	r3, r3, #1
 800f2b8:	68fa      	ldr	r2, [r7, #12]
 800f2ba:	4413      	add	r3, r2
 800f2bc:	881b      	ldrh	r3, [r3, #0]
 800f2be:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800f2c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	f000 8096 	beq.w	800f3f4 <create_name+0x36c>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800f2c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f2ca:	2b20      	cmp	r3, #32
 800f2cc:	d006      	beq.n	800f2dc <create_name+0x254>
 800f2ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f2d0:	2b2e      	cmp	r3, #46	; 0x2e
 800f2d2:	d10a      	bne.n	800f2ea <create_name+0x262>
 800f2d4:	69ba      	ldr	r2, [r7, #24]
 800f2d6:	697b      	ldr	r3, [r7, #20]
 800f2d8:	429a      	cmp	r2, r3
 800f2da:	d006      	beq.n	800f2ea <create_name+0x262>
			cf |= NS_LOSS | NS_LFN; continue;
 800f2dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f2e0:	f043 0303 	orr.w	r3, r3, #3
 800f2e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f2e8:	e083      	b.n	800f3f2 <create_name+0x36a>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800f2ea:	6a3a      	ldr	r2, [r7, #32]
 800f2ec:	69fb      	ldr	r3, [r7, #28]
 800f2ee:	429a      	cmp	r2, r3
 800f2f0:	d203      	bcs.n	800f2fa <create_name+0x272>
 800f2f2:	69ba      	ldr	r2, [r7, #24]
 800f2f4:	697b      	ldr	r3, [r7, #20]
 800f2f6:	429a      	cmp	r2, r3
 800f2f8:	d123      	bne.n	800f342 <create_name+0x2ba>
			if (ni == 11) {				/* Long extension */
 800f2fa:	69fb      	ldr	r3, [r7, #28]
 800f2fc:	2b0b      	cmp	r3, #11
 800f2fe:	d106      	bne.n	800f30e <create_name+0x286>
				cf |= NS_LOSS | NS_LFN; break;
 800f300:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f304:	f043 0303 	orr.w	r3, r3, #3
 800f308:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f30c:	e075      	b.n	800f3fa <create_name+0x372>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800f30e:	69ba      	ldr	r2, [r7, #24]
 800f310:	697b      	ldr	r3, [r7, #20]
 800f312:	429a      	cmp	r2, r3
 800f314:	d005      	beq.n	800f322 <create_name+0x29a>
 800f316:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f31a:	f043 0303 	orr.w	r3, r3, #3
 800f31e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800f322:	69ba      	ldr	r2, [r7, #24]
 800f324:	697b      	ldr	r3, [r7, #20]
 800f326:	429a      	cmp	r2, r3
 800f328:	d866      	bhi.n	800f3f8 <create_name+0x370>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800f32a:	697b      	ldr	r3, [r7, #20]
 800f32c:	61bb      	str	r3, [r7, #24]
 800f32e:	2308      	movs	r3, #8
 800f330:	623b      	str	r3, [r7, #32]
 800f332:	230b      	movs	r3, #11
 800f334:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800f336:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f33a:	009b      	lsls	r3, r3, #2
 800f33c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f340:	e057      	b.n	800f3f2 <create_name+0x36a>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800f342:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f344:	2b7f      	cmp	r3, #127	; 0x7f
 800f346:	d914      	bls.n	800f372 <create_name+0x2ea>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800f348:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f34a:	2100      	movs	r1, #0
 800f34c:	4618      	mov	r0, r3
 800f34e:	f001 ff21 	bl	8011194 <ff_convert>
 800f352:	4603      	mov	r3, r0
 800f354:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800f356:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d004      	beq.n	800f366 <create_name+0x2de>
 800f35c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f35e:	3b80      	subs	r3, #128	; 0x80
 800f360:	4a15      	ldr	r2, [pc, #84]	; (800f3b8 <create_name+0x330>)
 800f362:	5cd3      	ldrb	r3, [r2, r3]
 800f364:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800f366:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f36a:	f043 0302 	orr.w	r3, r3, #2
 800f36e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800f372:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f374:	2b00      	cmp	r3, #0
 800f376:	d007      	beq.n	800f388 <create_name+0x300>
 800f378:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f37a:	4619      	mov	r1, r3
 800f37c:	480f      	ldr	r0, [pc, #60]	; (800f3bc <create_name+0x334>)
 800f37e:	f7fe fa63 	bl	800d848 <chk_chr>
 800f382:	4603      	mov	r3, r0
 800f384:	2b00      	cmp	r3, #0
 800f386:	d008      	beq.n	800f39a <create_name+0x312>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800f388:	235f      	movs	r3, #95	; 0x5f
 800f38a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800f38c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f390:	f043 0303 	orr.w	r3, r3, #3
 800f394:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f398:	e021      	b.n	800f3de <create_name+0x356>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800f39a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f39c:	2b40      	cmp	r3, #64	; 0x40
 800f39e:	d90f      	bls.n	800f3c0 <create_name+0x338>
 800f3a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f3a2:	2b5a      	cmp	r3, #90	; 0x5a
 800f3a4:	d80c      	bhi.n	800f3c0 <create_name+0x338>
					b |= 2;
 800f3a6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f3aa:	f043 0302 	orr.w	r3, r3, #2
 800f3ae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f3b2:	e014      	b.n	800f3de <create_name+0x356>
 800f3b4:	0801742c 	.word	0x0801742c
 800f3b8:	080174b4 	.word	0x080174b4
 800f3bc:	08017438 	.word	0x08017438
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800f3c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f3c2:	2b60      	cmp	r3, #96	; 0x60
 800f3c4:	d90b      	bls.n	800f3de <create_name+0x356>
 800f3c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f3c8:	2b7a      	cmp	r3, #122	; 0x7a
 800f3ca:	d808      	bhi.n	800f3de <create_name+0x356>
						b |= 1; w -= 0x20;
 800f3cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f3d0:	f043 0301 	orr.w	r3, r3, #1
 800f3d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f3d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f3da:	3b20      	subs	r3, #32
 800f3dc:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800f3de:	6a3b      	ldr	r3, [r7, #32]
 800f3e0:	1c5a      	adds	r2, r3, #1
 800f3e2:	623a      	str	r2, [r7, #32]
 800f3e4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f3e6:	b2d1      	uxtb	r1, r2
 800f3e8:	687a      	ldr	r2, [r7, #4]
 800f3ea:	4413      	add	r3, r2
 800f3ec:	460a      	mov	r2, r1
 800f3ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800f3f2:	e75d      	b.n	800f2b0 <create_name+0x228>
		if (!w) break;					/* Break on end of the LFN */
 800f3f4:	bf00      	nop
 800f3f6:	e000      	b.n	800f3fa <create_name+0x372>
			if (si > di) break;			/* No extension */
 800f3f8:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800f400:	2be5      	cmp	r3, #229	; 0xe5
 800f402:	d103      	bne.n	800f40c <create_name+0x384>
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	2205      	movs	r2, #5
 800f408:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800f40c:	69fb      	ldr	r3, [r7, #28]
 800f40e:	2b08      	cmp	r3, #8
 800f410:	d104      	bne.n	800f41c <create_name+0x394>
 800f412:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f416:	009b      	lsls	r3, r3, #2
 800f418:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800f41c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f420:	f003 030c 	and.w	r3, r3, #12
 800f424:	2b0c      	cmp	r3, #12
 800f426:	d005      	beq.n	800f434 <create_name+0x3ac>
 800f428:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f42c:	f003 0303 	and.w	r3, r3, #3
 800f430:	2b03      	cmp	r3, #3
 800f432:	d105      	bne.n	800f440 <create_name+0x3b8>
 800f434:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f438:	f043 0302 	orr.w	r3, r3, #2
 800f43c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800f440:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f444:	f003 0302 	and.w	r3, r3, #2
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d117      	bne.n	800f47c <create_name+0x3f4>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800f44c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f450:	f003 0303 	and.w	r3, r3, #3
 800f454:	2b01      	cmp	r3, #1
 800f456:	d105      	bne.n	800f464 <create_name+0x3dc>
 800f458:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f45c:	f043 0310 	orr.w	r3, r3, #16
 800f460:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800f464:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f468:	f003 030c 	and.w	r3, r3, #12
 800f46c:	2b04      	cmp	r3, #4
 800f46e:	d105      	bne.n	800f47c <create_name+0x3f4>
 800f470:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f474:	f043 0308 	orr.w	r3, r3, #8
 800f478:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800f482:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800f486:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800f488:	4618      	mov	r0, r3
 800f48a:	3728      	adds	r7, #40	; 0x28
 800f48c:	46bd      	mov	sp, r7
 800f48e:	bd80      	pop	{r7, pc}

0800f490 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800f490:	b580      	push	{r7, lr}
 800f492:	b086      	sub	sp, #24
 800f494:	af00      	add	r7, sp, #0
 800f496:	6078      	str	r0, [r7, #4]
 800f498:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800f49e:	693b      	ldr	r3, [r7, #16]
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 800f4a4:	683b      	ldr	r3, [r7, #0]
 800f4a6:	781b      	ldrb	r3, [r3, #0]
 800f4a8:	2b2f      	cmp	r3, #47	; 0x2f
 800f4aa:	d00b      	beq.n	800f4c4 <follow_path+0x34>
 800f4ac:	683b      	ldr	r3, [r7, #0]
 800f4ae:	781b      	ldrb	r3, [r3, #0]
 800f4b0:	2b5c      	cmp	r3, #92	; 0x5c
 800f4b2:	d007      	beq.n	800f4c4 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	69da      	ldr	r2, [r3, #28]
 800f4b8:	693b      	ldr	r3, [r7, #16]
 800f4ba:	609a      	str	r2, [r3, #8]
 800f4bc:	e00d      	b.n	800f4da <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800f4be:	683b      	ldr	r3, [r7, #0]
 800f4c0:	3301      	adds	r3, #1
 800f4c2:	603b      	str	r3, [r7, #0]
 800f4c4:	683b      	ldr	r3, [r7, #0]
 800f4c6:	781b      	ldrb	r3, [r3, #0]
 800f4c8:	2b2f      	cmp	r3, #47	; 0x2f
 800f4ca:	d0f8      	beq.n	800f4be <follow_path+0x2e>
 800f4cc:	683b      	ldr	r3, [r7, #0]
 800f4ce:	781b      	ldrb	r3, [r3, #0]
 800f4d0:	2b5c      	cmp	r3, #92	; 0x5c
 800f4d2:	d0f4      	beq.n	800f4be <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 800f4d4:	693b      	ldr	r3, [r7, #16]
 800f4d6:	2200      	movs	r2, #0
 800f4d8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800f4da:	683b      	ldr	r3, [r7, #0]
 800f4dc:	781b      	ldrb	r3, [r3, #0]
 800f4de:	2b1f      	cmp	r3, #31
 800f4e0:	d80a      	bhi.n	800f4f8 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	2280      	movs	r2, #128	; 0x80
 800f4e6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800f4ea:	2100      	movs	r1, #0
 800f4ec:	6878      	ldr	r0, [r7, #4]
 800f4ee:	f7fe ff50 	bl	800e392 <dir_sdi>
 800f4f2:	4603      	mov	r3, r0
 800f4f4:	75fb      	strb	r3, [r7, #23]
 800f4f6:	e05b      	b.n	800f5b0 <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f4f8:	463b      	mov	r3, r7
 800f4fa:	4619      	mov	r1, r3
 800f4fc:	6878      	ldr	r0, [r7, #4]
 800f4fe:	f7ff fdc3 	bl	800f088 <create_name>
 800f502:	4603      	mov	r3, r0
 800f504:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f506:	7dfb      	ldrb	r3, [r7, #23]
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d14c      	bne.n	800f5a6 <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 800f50c:	6878      	ldr	r0, [r7, #4]
 800f50e:	f7ff fbb8 	bl	800ec82 <dir_find>
 800f512:	4603      	mov	r3, r0
 800f514:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f51c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800f51e:	7dfb      	ldrb	r3, [r7, #23]
 800f520:	2b00      	cmp	r3, #0
 800f522:	d01b      	beq.n	800f55c <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800f524:	7dfb      	ldrb	r3, [r7, #23]
 800f526:	2b04      	cmp	r3, #4
 800f528:	d13f      	bne.n	800f5aa <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 800f52a:	7afb      	ldrb	r3, [r7, #11]
 800f52c:	f003 0320 	and.w	r3, r3, #32
 800f530:	2b00      	cmp	r3, #0
 800f532:	d00b      	beq.n	800f54c <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800f534:	7afb      	ldrb	r3, [r7, #11]
 800f536:	f003 0304 	and.w	r3, r3, #4
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d031      	beq.n	800f5a2 <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	2280      	movs	r2, #128	; 0x80
 800f542:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 800f546:	2300      	movs	r3, #0
 800f548:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 800f54a:	e02e      	b.n	800f5aa <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800f54c:	7afb      	ldrb	r3, [r7, #11]
 800f54e:	f003 0304 	and.w	r3, r3, #4
 800f552:	2b00      	cmp	r3, #0
 800f554:	d129      	bne.n	800f5aa <follow_path+0x11a>
 800f556:	2305      	movs	r3, #5
 800f558:	75fb      	strb	r3, [r7, #23]
				break;
 800f55a:	e026      	b.n	800f5aa <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f55c:	7afb      	ldrb	r3, [r7, #11]
 800f55e:	f003 0304 	and.w	r3, r3, #4
 800f562:	2b00      	cmp	r3, #0
 800f564:	d123      	bne.n	800f5ae <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800f566:	693b      	ldr	r3, [r7, #16]
 800f568:	799b      	ldrb	r3, [r3, #6]
 800f56a:	f003 0310 	and.w	r3, r3, #16
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d102      	bne.n	800f578 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 800f572:	2305      	movs	r3, #5
 800f574:	75fb      	strb	r3, [r7, #23]
 800f576:	e01b      	b.n	800f5b0 <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	695b      	ldr	r3, [r3, #20]
 800f582:	68fa      	ldr	r2, [r7, #12]
 800f584:	8992      	ldrh	r2, [r2, #12]
 800f586:	fbb3 f0f2 	udiv	r0, r3, r2
 800f58a:	fb02 f200 	mul.w	r2, r2, r0
 800f58e:	1a9b      	subs	r3, r3, r2
 800f590:	440b      	add	r3, r1
 800f592:	4619      	mov	r1, r3
 800f594:	68f8      	ldr	r0, [r7, #12]
 800f596:	f7ff f8a2 	bl	800e6de <ld_clust>
 800f59a:	4602      	mov	r2, r0
 800f59c:	693b      	ldr	r3, [r7, #16]
 800f59e:	609a      	str	r2, [r3, #8]
 800f5a0:	e7aa      	b.n	800f4f8 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800f5a2:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f5a4:	e7a8      	b.n	800f4f8 <follow_path+0x68>
			if (res != FR_OK) break;
 800f5a6:	bf00      	nop
 800f5a8:	e002      	b.n	800f5b0 <follow_path+0x120>
				break;
 800f5aa:	bf00      	nop
 800f5ac:	e000      	b.n	800f5b0 <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f5ae:	bf00      	nop
			}
		}
	}

	return res;
 800f5b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800f5b2:	4618      	mov	r0, r3
 800f5b4:	3718      	adds	r7, #24
 800f5b6:	46bd      	mov	sp, r7
 800f5b8:	bd80      	pop	{r7, pc}

0800f5ba <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800f5ba:	b480      	push	{r7}
 800f5bc:	b087      	sub	sp, #28
 800f5be:	af00      	add	r7, sp, #0
 800f5c0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800f5c2:	f04f 33ff 	mov.w	r3, #4294967295
 800f5c6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d031      	beq.n	800f634 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	617b      	str	r3, [r7, #20]
 800f5d6:	e002      	b.n	800f5de <get_ldnumber+0x24>
 800f5d8:	697b      	ldr	r3, [r7, #20]
 800f5da:	3301      	adds	r3, #1
 800f5dc:	617b      	str	r3, [r7, #20]
 800f5de:	697b      	ldr	r3, [r7, #20]
 800f5e0:	781b      	ldrb	r3, [r3, #0]
 800f5e2:	2b1f      	cmp	r3, #31
 800f5e4:	d903      	bls.n	800f5ee <get_ldnumber+0x34>
 800f5e6:	697b      	ldr	r3, [r7, #20]
 800f5e8:	781b      	ldrb	r3, [r3, #0]
 800f5ea:	2b3a      	cmp	r3, #58	; 0x3a
 800f5ec:	d1f4      	bne.n	800f5d8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800f5ee:	697b      	ldr	r3, [r7, #20]
 800f5f0:	781b      	ldrb	r3, [r3, #0]
 800f5f2:	2b3a      	cmp	r3, #58	; 0x3a
 800f5f4:	d11c      	bne.n	800f630 <get_ldnumber+0x76>
			tp = *path;
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	681b      	ldr	r3, [r3, #0]
 800f5fa:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	1c5a      	adds	r2, r3, #1
 800f600:	60fa      	str	r2, [r7, #12]
 800f602:	781b      	ldrb	r3, [r3, #0]
 800f604:	3b30      	subs	r3, #48	; 0x30
 800f606:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800f608:	68bb      	ldr	r3, [r7, #8]
 800f60a:	2b09      	cmp	r3, #9
 800f60c:	d80e      	bhi.n	800f62c <get_ldnumber+0x72>
 800f60e:	68fa      	ldr	r2, [r7, #12]
 800f610:	697b      	ldr	r3, [r7, #20]
 800f612:	429a      	cmp	r2, r3
 800f614:	d10a      	bne.n	800f62c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800f616:	68bb      	ldr	r3, [r7, #8]
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d107      	bne.n	800f62c <get_ldnumber+0x72>
					vol = (int)i;
 800f61c:	68bb      	ldr	r3, [r7, #8]
 800f61e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800f620:	697b      	ldr	r3, [r7, #20]
 800f622:	3301      	adds	r3, #1
 800f624:	617b      	str	r3, [r7, #20]
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	697a      	ldr	r2, [r7, #20]
 800f62a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800f62c:	693b      	ldr	r3, [r7, #16]
 800f62e:	e002      	b.n	800f636 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800f630:	2300      	movs	r3, #0
 800f632:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800f634:	693b      	ldr	r3, [r7, #16]
}
 800f636:	4618      	mov	r0, r3
 800f638:	371c      	adds	r7, #28
 800f63a:	46bd      	mov	sp, r7
 800f63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f640:	4770      	bx	lr
	...

0800f644 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800f644:	b580      	push	{r7, lr}
 800f646:	b082      	sub	sp, #8
 800f648:	af00      	add	r7, sp, #0
 800f64a:	6078      	str	r0, [r7, #4]
 800f64c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	2200      	movs	r2, #0
 800f652:	70da      	strb	r2, [r3, #3]
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	f04f 32ff 	mov.w	r2, #4294967295
 800f65a:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800f65c:	6839      	ldr	r1, [r7, #0]
 800f65e:	6878      	ldr	r0, [r7, #4]
 800f660:	f7fe fabe 	bl	800dbe0 <move_window>
 800f664:	4603      	mov	r3, r0
 800f666:	2b00      	cmp	r3, #0
 800f668:	d001      	beq.n	800f66e <check_fs+0x2a>
 800f66a:	2304      	movs	r3, #4
 800f66c:	e038      	b.n	800f6e0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	333c      	adds	r3, #60	; 0x3c
 800f672:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f676:	4618      	mov	r0, r3
 800f678:	f7fe f802 	bl	800d680 <ld_word>
 800f67c:	4603      	mov	r3, r0
 800f67e:	461a      	mov	r2, r3
 800f680:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f684:	429a      	cmp	r2, r3
 800f686:	d001      	beq.n	800f68c <check_fs+0x48>
 800f688:	2303      	movs	r3, #3
 800f68a:	e029      	b.n	800f6e0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f692:	2be9      	cmp	r3, #233	; 0xe9
 800f694:	d009      	beq.n	800f6aa <check_fs+0x66>
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f69c:	2beb      	cmp	r3, #235	; 0xeb
 800f69e:	d11e      	bne.n	800f6de <check_fs+0x9a>
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f6a6:	2b90      	cmp	r3, #144	; 0x90
 800f6a8:	d119      	bne.n	800f6de <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	333c      	adds	r3, #60	; 0x3c
 800f6ae:	3336      	adds	r3, #54	; 0x36
 800f6b0:	4618      	mov	r0, r3
 800f6b2:	f7fd fffd 	bl	800d6b0 <ld_dword>
 800f6b6:	4603      	mov	r3, r0
 800f6b8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800f6bc:	4a0a      	ldr	r2, [pc, #40]	; (800f6e8 <check_fs+0xa4>)
 800f6be:	4293      	cmp	r3, r2
 800f6c0:	d101      	bne.n	800f6c6 <check_fs+0x82>
 800f6c2:	2300      	movs	r3, #0
 800f6c4:	e00c      	b.n	800f6e0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	333c      	adds	r3, #60	; 0x3c
 800f6ca:	3352      	adds	r3, #82	; 0x52
 800f6cc:	4618      	mov	r0, r3
 800f6ce:	f7fd ffef 	bl	800d6b0 <ld_dword>
 800f6d2:	4602      	mov	r2, r0
 800f6d4:	4b05      	ldr	r3, [pc, #20]	; (800f6ec <check_fs+0xa8>)
 800f6d6:	429a      	cmp	r2, r3
 800f6d8:	d101      	bne.n	800f6de <check_fs+0x9a>
 800f6da:	2300      	movs	r3, #0
 800f6dc:	e000      	b.n	800f6e0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800f6de:	2302      	movs	r3, #2
}
 800f6e0:	4618      	mov	r0, r3
 800f6e2:	3708      	adds	r7, #8
 800f6e4:	46bd      	mov	sp, r7
 800f6e6:	bd80      	pop	{r7, pc}
 800f6e8:	00544146 	.word	0x00544146
 800f6ec:	33544146 	.word	0x33544146

0800f6f0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800f6f0:	b580      	push	{r7, lr}
 800f6f2:	b096      	sub	sp, #88	; 0x58
 800f6f4:	af00      	add	r7, sp, #0
 800f6f6:	60f8      	str	r0, [r7, #12]
 800f6f8:	60b9      	str	r1, [r7, #8]
 800f6fa:	4613      	mov	r3, r2
 800f6fc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800f6fe:	68bb      	ldr	r3, [r7, #8]
 800f700:	2200      	movs	r2, #0
 800f702:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800f704:	68f8      	ldr	r0, [r7, #12]
 800f706:	f7ff ff58 	bl	800f5ba <get_ldnumber>
 800f70a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800f70c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f70e:	2b00      	cmp	r3, #0
 800f710:	da01      	bge.n	800f716 <find_volume+0x26>
 800f712:	230b      	movs	r3, #11
 800f714:	e26b      	b.n	800fbee <find_volume+0x4fe>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800f716:	4ab0      	ldr	r2, [pc, #704]	; (800f9d8 <find_volume+0x2e8>)
 800f718:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f71a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f71e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800f720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f722:	2b00      	cmp	r3, #0
 800f724:	d101      	bne.n	800f72a <find_volume+0x3a>
 800f726:	230c      	movs	r3, #12
 800f728:	e261      	b.n	800fbee <find_volume+0x4fe>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800f72a:	68bb      	ldr	r3, [r7, #8]
 800f72c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f72e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800f730:	79fb      	ldrb	r3, [r7, #7]
 800f732:	f023 0301 	bic.w	r3, r3, #1
 800f736:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800f738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f73a:	781b      	ldrb	r3, [r3, #0]
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d01a      	beq.n	800f776 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800f740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f742:	785b      	ldrb	r3, [r3, #1]
 800f744:	4618      	mov	r0, r3
 800f746:	f7fd fefd 	bl	800d544 <disk_status>
 800f74a:	4603      	mov	r3, r0
 800f74c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800f750:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f754:	f003 0301 	and.w	r3, r3, #1
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d10c      	bne.n	800f776 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800f75c:	79fb      	ldrb	r3, [r7, #7]
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d007      	beq.n	800f772 <find_volume+0x82>
 800f762:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f766:	f003 0304 	and.w	r3, r3, #4
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d001      	beq.n	800f772 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800f76e:	230a      	movs	r3, #10
 800f770:	e23d      	b.n	800fbee <find_volume+0x4fe>
			}
			return FR_OK;				/* The file system object is valid */
 800f772:	2300      	movs	r3, #0
 800f774:	e23b      	b.n	800fbee <find_volume+0x4fe>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800f776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f778:	2200      	movs	r2, #0
 800f77a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800f77c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f77e:	b2da      	uxtb	r2, r3
 800f780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f782:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800f784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f786:	785b      	ldrb	r3, [r3, #1]
 800f788:	4618      	mov	r0, r3
 800f78a:	f7fd fef5 	bl	800d578 <disk_initialize>
 800f78e:	4603      	mov	r3, r0
 800f790:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800f794:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f798:	f003 0301 	and.w	r3, r3, #1
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d001      	beq.n	800f7a4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800f7a0:	2303      	movs	r3, #3
 800f7a2:	e224      	b.n	800fbee <find_volume+0x4fe>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800f7a4:	79fb      	ldrb	r3, [r7, #7]
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d007      	beq.n	800f7ba <find_volume+0xca>
 800f7aa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f7ae:	f003 0304 	and.w	r3, r3, #4
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d001      	beq.n	800f7ba <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800f7b6:	230a      	movs	r3, #10
 800f7b8:	e219      	b.n	800fbee <find_volume+0x4fe>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800f7ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7bc:	7858      	ldrb	r0, [r3, #1]
 800f7be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7c0:	330c      	adds	r3, #12
 800f7c2:	461a      	mov	r2, r3
 800f7c4:	2102      	movs	r1, #2
 800f7c6:	f7fd ff3d 	bl	800d644 <disk_ioctl>
 800f7ca:	4603      	mov	r3, r0
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d001      	beq.n	800f7d4 <find_volume+0xe4>
 800f7d0:	2301      	movs	r3, #1
 800f7d2:	e20c      	b.n	800fbee <find_volume+0x4fe>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800f7d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7d6:	899b      	ldrh	r3, [r3, #12]
 800f7d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f7dc:	d80d      	bhi.n	800f7fa <find_volume+0x10a>
 800f7de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7e0:	899b      	ldrh	r3, [r3, #12]
 800f7e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f7e6:	d308      	bcc.n	800f7fa <find_volume+0x10a>
 800f7e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7ea:	899b      	ldrh	r3, [r3, #12]
 800f7ec:	461a      	mov	r2, r3
 800f7ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7f0:	899b      	ldrh	r3, [r3, #12]
 800f7f2:	3b01      	subs	r3, #1
 800f7f4:	4013      	ands	r3, r2
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d001      	beq.n	800f7fe <find_volume+0x10e>
 800f7fa:	2301      	movs	r3, #1
 800f7fc:	e1f7      	b.n	800fbee <find_volume+0x4fe>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800f7fe:	2300      	movs	r3, #0
 800f800:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800f802:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f804:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f806:	f7ff ff1d 	bl	800f644 <check_fs>
 800f80a:	4603      	mov	r3, r0
 800f80c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800f810:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f814:	2b02      	cmp	r3, #2
 800f816:	d14b      	bne.n	800f8b0 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f818:	2300      	movs	r3, #0
 800f81a:	643b      	str	r3, [r7, #64]	; 0x40
 800f81c:	e01f      	b.n	800f85e <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800f81e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f820:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800f824:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f826:	011b      	lsls	r3, r3, #4
 800f828:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800f82c:	4413      	add	r3, r2
 800f82e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800f830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f832:	3304      	adds	r3, #4
 800f834:	781b      	ldrb	r3, [r3, #0]
 800f836:	2b00      	cmp	r3, #0
 800f838:	d006      	beq.n	800f848 <find_volume+0x158>
 800f83a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f83c:	3308      	adds	r3, #8
 800f83e:	4618      	mov	r0, r3
 800f840:	f7fd ff36 	bl	800d6b0 <ld_dword>
 800f844:	4602      	mov	r2, r0
 800f846:	e000      	b.n	800f84a <find_volume+0x15a>
 800f848:	2200      	movs	r2, #0
 800f84a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f84c:	009b      	lsls	r3, r3, #2
 800f84e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800f852:	440b      	add	r3, r1
 800f854:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f858:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f85a:	3301      	adds	r3, #1
 800f85c:	643b      	str	r3, [r7, #64]	; 0x40
 800f85e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f860:	2b03      	cmp	r3, #3
 800f862:	d9dc      	bls.n	800f81e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800f864:	2300      	movs	r3, #0
 800f866:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800f868:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d002      	beq.n	800f874 <find_volume+0x184>
 800f86e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f870:	3b01      	subs	r3, #1
 800f872:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800f874:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f876:	009b      	lsls	r3, r3, #2
 800f878:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800f87c:	4413      	add	r3, r2
 800f87e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800f882:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800f884:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f886:	2b00      	cmp	r3, #0
 800f888:	d005      	beq.n	800f896 <find_volume+0x1a6>
 800f88a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f88c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f88e:	f7ff fed9 	bl	800f644 <check_fs>
 800f892:	4603      	mov	r3, r0
 800f894:	e000      	b.n	800f898 <find_volume+0x1a8>
 800f896:	2303      	movs	r3, #3
 800f898:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800f89c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f8a0:	2b01      	cmp	r3, #1
 800f8a2:	d905      	bls.n	800f8b0 <find_volume+0x1c0>
 800f8a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f8a6:	3301      	adds	r3, #1
 800f8a8:	643b      	str	r3, [r7, #64]	; 0x40
 800f8aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f8ac:	2b03      	cmp	r3, #3
 800f8ae:	d9e1      	bls.n	800f874 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800f8b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f8b4:	2b04      	cmp	r3, #4
 800f8b6:	d101      	bne.n	800f8bc <find_volume+0x1cc>
 800f8b8:	2301      	movs	r3, #1
 800f8ba:	e198      	b.n	800fbee <find_volume+0x4fe>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800f8bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f8c0:	2b01      	cmp	r3, #1
 800f8c2:	d901      	bls.n	800f8c8 <find_volume+0x1d8>
 800f8c4:	230d      	movs	r3, #13
 800f8c6:	e192      	b.n	800fbee <find_volume+0x4fe>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800f8c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8ca:	333c      	adds	r3, #60	; 0x3c
 800f8cc:	330b      	adds	r3, #11
 800f8ce:	4618      	mov	r0, r3
 800f8d0:	f7fd fed6 	bl	800d680 <ld_word>
 800f8d4:	4603      	mov	r3, r0
 800f8d6:	461a      	mov	r2, r3
 800f8d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8da:	899b      	ldrh	r3, [r3, #12]
 800f8dc:	429a      	cmp	r2, r3
 800f8de:	d001      	beq.n	800f8e4 <find_volume+0x1f4>
 800f8e0:	230d      	movs	r3, #13
 800f8e2:	e184      	b.n	800fbee <find_volume+0x4fe>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800f8e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8e6:	333c      	adds	r3, #60	; 0x3c
 800f8e8:	3316      	adds	r3, #22
 800f8ea:	4618      	mov	r0, r3
 800f8ec:	f7fd fec8 	bl	800d680 <ld_word>
 800f8f0:	4603      	mov	r3, r0
 800f8f2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800f8f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d106      	bne.n	800f908 <find_volume+0x218>
 800f8fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8fc:	333c      	adds	r3, #60	; 0x3c
 800f8fe:	3324      	adds	r3, #36	; 0x24
 800f900:	4618      	mov	r0, r3
 800f902:	f7fd fed5 	bl	800d6b0 <ld_dword>
 800f906:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800f908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f90a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f90c:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800f90e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f910:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 800f914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f916:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800f918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f91a:	789b      	ldrb	r3, [r3, #2]
 800f91c:	2b01      	cmp	r3, #1
 800f91e:	d005      	beq.n	800f92c <find_volume+0x23c>
 800f920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f922:	789b      	ldrb	r3, [r3, #2]
 800f924:	2b02      	cmp	r3, #2
 800f926:	d001      	beq.n	800f92c <find_volume+0x23c>
 800f928:	230d      	movs	r3, #13
 800f92a:	e160      	b.n	800fbee <find_volume+0x4fe>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800f92c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f92e:	789b      	ldrb	r3, [r3, #2]
 800f930:	461a      	mov	r2, r3
 800f932:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f934:	fb02 f303 	mul.w	r3, r2, r3
 800f938:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800f93a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f93c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800f940:	b29a      	uxth	r2, r3
 800f942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f944:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800f946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f948:	895b      	ldrh	r3, [r3, #10]
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d008      	beq.n	800f960 <find_volume+0x270>
 800f94e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f950:	895b      	ldrh	r3, [r3, #10]
 800f952:	461a      	mov	r2, r3
 800f954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f956:	895b      	ldrh	r3, [r3, #10]
 800f958:	3b01      	subs	r3, #1
 800f95a:	4013      	ands	r3, r2
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d001      	beq.n	800f964 <find_volume+0x274>
 800f960:	230d      	movs	r3, #13
 800f962:	e144      	b.n	800fbee <find_volume+0x4fe>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800f964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f966:	333c      	adds	r3, #60	; 0x3c
 800f968:	3311      	adds	r3, #17
 800f96a:	4618      	mov	r0, r3
 800f96c:	f7fd fe88 	bl	800d680 <ld_word>
 800f970:	4603      	mov	r3, r0
 800f972:	461a      	mov	r2, r3
 800f974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f976:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800f978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f97a:	891b      	ldrh	r3, [r3, #8]
 800f97c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f97e:	8992      	ldrh	r2, [r2, #12]
 800f980:	0952      	lsrs	r2, r2, #5
 800f982:	b292      	uxth	r2, r2
 800f984:	fbb3 f1f2 	udiv	r1, r3, r2
 800f988:	fb02 f201 	mul.w	r2, r2, r1
 800f98c:	1a9b      	subs	r3, r3, r2
 800f98e:	b29b      	uxth	r3, r3
 800f990:	2b00      	cmp	r3, #0
 800f992:	d001      	beq.n	800f998 <find_volume+0x2a8>
 800f994:	230d      	movs	r3, #13
 800f996:	e12a      	b.n	800fbee <find_volume+0x4fe>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800f998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f99a:	333c      	adds	r3, #60	; 0x3c
 800f99c:	3313      	adds	r3, #19
 800f99e:	4618      	mov	r0, r3
 800f9a0:	f7fd fe6e 	bl	800d680 <ld_word>
 800f9a4:	4603      	mov	r3, r0
 800f9a6:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800f9a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d106      	bne.n	800f9bc <find_volume+0x2cc>
 800f9ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9b0:	333c      	adds	r3, #60	; 0x3c
 800f9b2:	3320      	adds	r3, #32
 800f9b4:	4618      	mov	r0, r3
 800f9b6:	f7fd fe7b 	bl	800d6b0 <ld_dword>
 800f9ba:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800f9bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9be:	333c      	adds	r3, #60	; 0x3c
 800f9c0:	330e      	adds	r3, #14
 800f9c2:	4618      	mov	r0, r3
 800f9c4:	f7fd fe5c 	bl	800d680 <ld_word>
 800f9c8:	4603      	mov	r3, r0
 800f9ca:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800f9cc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d104      	bne.n	800f9dc <find_volume+0x2ec>
 800f9d2:	230d      	movs	r3, #13
 800f9d4:	e10b      	b.n	800fbee <find_volume+0x4fe>
 800f9d6:	bf00      	nop
 800f9d8:	2001f2c0 	.word	0x2001f2c0

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800f9dc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f9de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f9e0:	4413      	add	r3, r2
 800f9e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f9e4:	8911      	ldrh	r1, [r2, #8]
 800f9e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f9e8:	8992      	ldrh	r2, [r2, #12]
 800f9ea:	0952      	lsrs	r2, r2, #5
 800f9ec:	b292      	uxth	r2, r2
 800f9ee:	fbb1 f2f2 	udiv	r2, r1, r2
 800f9f2:	b292      	uxth	r2, r2
 800f9f4:	4413      	add	r3, r2
 800f9f6:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800f9f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f9fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9fc:	429a      	cmp	r2, r3
 800f9fe:	d201      	bcs.n	800fa04 <find_volume+0x314>
 800fa00:	230d      	movs	r3, #13
 800fa02:	e0f4      	b.n	800fbee <find_volume+0x4fe>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800fa04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fa06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa08:	1ad3      	subs	r3, r2, r3
 800fa0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fa0c:	8952      	ldrh	r2, [r2, #10]
 800fa0e:	fbb3 f3f2 	udiv	r3, r3, r2
 800fa12:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800fa14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d101      	bne.n	800fa1e <find_volume+0x32e>
 800fa1a:	230d      	movs	r3, #13
 800fa1c:	e0e7      	b.n	800fbee <find_volume+0x4fe>
		fmt = FS_FAT32;
 800fa1e:	2303      	movs	r3, #3
 800fa20:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800fa24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa26:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800fa2a:	4293      	cmp	r3, r2
 800fa2c:	d802      	bhi.n	800fa34 <find_volume+0x344>
 800fa2e:	2302      	movs	r3, #2
 800fa30:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800fa34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa36:	f640 72f5 	movw	r2, #4085	; 0xff5
 800fa3a:	4293      	cmp	r3, r2
 800fa3c:	d802      	bhi.n	800fa44 <find_volume+0x354>
 800fa3e:	2301      	movs	r3, #1
 800fa40:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800fa44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa46:	1c9a      	adds	r2, r3, #2
 800fa48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa4a:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 800fa4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa4e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fa50:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800fa52:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800fa54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa56:	441a      	add	r2, r3
 800fa58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa5a:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 800fa5c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fa5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa60:	441a      	add	r2, r3
 800fa62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa64:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 800fa66:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fa6a:	2b03      	cmp	r3, #3
 800fa6c:	d11e      	bne.n	800faac <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800fa6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa70:	333c      	adds	r3, #60	; 0x3c
 800fa72:	332a      	adds	r3, #42	; 0x2a
 800fa74:	4618      	mov	r0, r3
 800fa76:	f7fd fe03 	bl	800d680 <ld_word>
 800fa7a:	4603      	mov	r3, r0
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d001      	beq.n	800fa84 <find_volume+0x394>
 800fa80:	230d      	movs	r3, #13
 800fa82:	e0b4      	b.n	800fbee <find_volume+0x4fe>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800fa84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa86:	891b      	ldrh	r3, [r3, #8]
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d001      	beq.n	800fa90 <find_volume+0x3a0>
 800fa8c:	230d      	movs	r3, #13
 800fa8e:	e0ae      	b.n	800fbee <find_volume+0x4fe>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800fa90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa92:	333c      	adds	r3, #60	; 0x3c
 800fa94:	332c      	adds	r3, #44	; 0x2c
 800fa96:	4618      	mov	r0, r3
 800fa98:	f7fd fe0a 	bl	800d6b0 <ld_dword>
 800fa9c:	4602      	mov	r2, r0
 800fa9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800faa0:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800faa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800faa4:	6a1b      	ldr	r3, [r3, #32]
 800faa6:	009b      	lsls	r3, r3, #2
 800faa8:	647b      	str	r3, [r7, #68]	; 0x44
 800faaa:	e01f      	b.n	800faec <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800faac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800faae:	891b      	ldrh	r3, [r3, #8]
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d101      	bne.n	800fab8 <find_volume+0x3c8>
 800fab4:	230d      	movs	r3, #13
 800fab6:	e09a      	b.n	800fbee <find_volume+0x4fe>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800fab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800faba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fabc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fabe:	441a      	add	r2, r3
 800fac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fac2:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800fac4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fac8:	2b02      	cmp	r3, #2
 800faca:	d103      	bne.n	800fad4 <find_volume+0x3e4>
 800facc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800face:	6a1b      	ldr	r3, [r3, #32]
 800fad0:	005b      	lsls	r3, r3, #1
 800fad2:	e00a      	b.n	800faea <find_volume+0x3fa>
 800fad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fad6:	6a1a      	ldr	r2, [r3, #32]
 800fad8:	4613      	mov	r3, r2
 800fada:	005b      	lsls	r3, r3, #1
 800fadc:	4413      	add	r3, r2
 800fade:	085a      	lsrs	r2, r3, #1
 800fae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fae2:	6a1b      	ldr	r3, [r3, #32]
 800fae4:	f003 0301 	and.w	r3, r3, #1
 800fae8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800faea:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800faec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800faee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800faf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800faf2:	899b      	ldrh	r3, [r3, #12]
 800faf4:	4619      	mov	r1, r3
 800faf6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800faf8:	440b      	add	r3, r1
 800fafa:	3b01      	subs	r3, #1
 800fafc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fafe:	8989      	ldrh	r1, [r1, #12]
 800fb00:	fbb3 f3f1 	udiv	r3, r3, r1
 800fb04:	429a      	cmp	r2, r3
 800fb06:	d201      	bcs.n	800fb0c <find_volume+0x41c>
 800fb08:	230d      	movs	r3, #13
 800fb0a:	e070      	b.n	800fbee <find_volume+0x4fe>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800fb0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb0e:	f04f 32ff 	mov.w	r2, #4294967295
 800fb12:	619a      	str	r2, [r3, #24]
 800fb14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb16:	699a      	ldr	r2, [r3, #24]
 800fb18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb1a:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800fb1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb1e:	2280      	movs	r2, #128	; 0x80
 800fb20:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800fb22:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fb26:	2b03      	cmp	r3, #3
 800fb28:	d149      	bne.n	800fbbe <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800fb2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb2c:	333c      	adds	r3, #60	; 0x3c
 800fb2e:	3330      	adds	r3, #48	; 0x30
 800fb30:	4618      	mov	r0, r3
 800fb32:	f7fd fda5 	bl	800d680 <ld_word>
 800fb36:	4603      	mov	r3, r0
 800fb38:	2b01      	cmp	r3, #1
 800fb3a:	d140      	bne.n	800fbbe <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 800fb3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fb3e:	3301      	adds	r3, #1
 800fb40:	4619      	mov	r1, r3
 800fb42:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fb44:	f7fe f84c 	bl	800dbe0 <move_window>
 800fb48:	4603      	mov	r3, r0
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d137      	bne.n	800fbbe <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800fb4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb50:	2200      	movs	r2, #0
 800fb52:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800fb54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb56:	333c      	adds	r3, #60	; 0x3c
 800fb58:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fb5c:	4618      	mov	r0, r3
 800fb5e:	f7fd fd8f 	bl	800d680 <ld_word>
 800fb62:	4603      	mov	r3, r0
 800fb64:	461a      	mov	r2, r3
 800fb66:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800fb6a:	429a      	cmp	r2, r3
 800fb6c:	d127      	bne.n	800fbbe <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800fb6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb70:	333c      	adds	r3, #60	; 0x3c
 800fb72:	4618      	mov	r0, r3
 800fb74:	f7fd fd9c 	bl	800d6b0 <ld_dword>
 800fb78:	4602      	mov	r2, r0
 800fb7a:	4b1f      	ldr	r3, [pc, #124]	; (800fbf8 <find_volume+0x508>)
 800fb7c:	429a      	cmp	r2, r3
 800fb7e:	d11e      	bne.n	800fbbe <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800fb80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb82:	333c      	adds	r3, #60	; 0x3c
 800fb84:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800fb88:	4618      	mov	r0, r3
 800fb8a:	f7fd fd91 	bl	800d6b0 <ld_dword>
 800fb8e:	4602      	mov	r2, r0
 800fb90:	4b1a      	ldr	r3, [pc, #104]	; (800fbfc <find_volume+0x50c>)
 800fb92:	429a      	cmp	r2, r3
 800fb94:	d113      	bne.n	800fbbe <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800fb96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb98:	333c      	adds	r3, #60	; 0x3c
 800fb9a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800fb9e:	4618      	mov	r0, r3
 800fba0:	f7fd fd86 	bl	800d6b0 <ld_dword>
 800fba4:	4602      	mov	r2, r0
 800fba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fba8:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800fbaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbac:	333c      	adds	r3, #60	; 0x3c
 800fbae:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800fbb2:	4618      	mov	r0, r3
 800fbb4:	f7fd fd7c 	bl	800d6b0 <ld_dword>
 800fbb8:	4602      	mov	r2, r0
 800fbba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbbc:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800fbbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbc0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800fbc4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800fbc6:	4b0e      	ldr	r3, [pc, #56]	; (800fc00 <find_volume+0x510>)
 800fbc8:	881b      	ldrh	r3, [r3, #0]
 800fbca:	3301      	adds	r3, #1
 800fbcc:	b29a      	uxth	r2, r3
 800fbce:	4b0c      	ldr	r3, [pc, #48]	; (800fc00 <find_volume+0x510>)
 800fbd0:	801a      	strh	r2, [r3, #0]
 800fbd2:	4b0b      	ldr	r3, [pc, #44]	; (800fc00 <find_volume+0x510>)
 800fbd4:	881a      	ldrh	r2, [r3, #0]
 800fbd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbd8:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800fbda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbdc:	4a09      	ldr	r2, [pc, #36]	; (800fc04 <find_volume+0x514>)
 800fbde:	611a      	str	r2, [r3, #16]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 800fbe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbe2:	2200      	movs	r2, #0
 800fbe4:	61da      	str	r2, [r3, #28]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800fbe6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fbe8:	f7fd ff92 	bl	800db10 <clear_lock>
#endif
	return FR_OK;
 800fbec:	2300      	movs	r3, #0
}
 800fbee:	4618      	mov	r0, r3
 800fbf0:	3758      	adds	r7, #88	; 0x58
 800fbf2:	46bd      	mov	sp, r7
 800fbf4:	bd80      	pop	{r7, pc}
 800fbf6:	bf00      	nop
 800fbf8:	41615252 	.word	0x41615252
 800fbfc:	61417272 	.word	0x61417272
 800fc00:	2001f2c4 	.word	0x2001f2c4
 800fc04:	2001f2e8 	.word	0x2001f2e8

0800fc08 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800fc08:	b580      	push	{r7, lr}
 800fc0a:	b084      	sub	sp, #16
 800fc0c:	af00      	add	r7, sp, #0
 800fc0e:	6078      	str	r0, [r7, #4]
 800fc10:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800fc12:	2309      	movs	r3, #9
 800fc14:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d01c      	beq.n	800fc56 <validate+0x4e>
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d018      	beq.n	800fc56 <validate+0x4e>
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	781b      	ldrb	r3, [r3, #0]
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d013      	beq.n	800fc56 <validate+0x4e>
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	889a      	ldrh	r2, [r3, #4]
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	88db      	ldrh	r3, [r3, #6]
 800fc38:	429a      	cmp	r2, r3
 800fc3a:	d10c      	bne.n	800fc56 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	785b      	ldrb	r3, [r3, #1]
 800fc42:	4618      	mov	r0, r3
 800fc44:	f7fd fc7e 	bl	800d544 <disk_status>
 800fc48:	4603      	mov	r3, r0
 800fc4a:	f003 0301 	and.w	r3, r3, #1
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d101      	bne.n	800fc56 <validate+0x4e>
			res = FR_OK;
 800fc52:	2300      	movs	r3, #0
 800fc54:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800fc56:	7bfb      	ldrb	r3, [r7, #15]
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d102      	bne.n	800fc62 <validate+0x5a>
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	e000      	b.n	800fc64 <validate+0x5c>
 800fc62:	2300      	movs	r3, #0
 800fc64:	683a      	ldr	r2, [r7, #0]
 800fc66:	6013      	str	r3, [r2, #0]
	return res;
 800fc68:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc6a:	4618      	mov	r0, r3
 800fc6c:	3710      	adds	r7, #16
 800fc6e:	46bd      	mov	sp, r7
 800fc70:	bd80      	pop	{r7, pc}
	...

0800fc74 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800fc74:	b580      	push	{r7, lr}
 800fc76:	b088      	sub	sp, #32
 800fc78:	af00      	add	r7, sp, #0
 800fc7a:	60f8      	str	r0, [r7, #12]
 800fc7c:	60b9      	str	r1, [r7, #8]
 800fc7e:	4613      	mov	r3, r2
 800fc80:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800fc82:	68bb      	ldr	r3, [r7, #8]
 800fc84:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800fc86:	f107 0310 	add.w	r3, r7, #16
 800fc8a:	4618      	mov	r0, r3
 800fc8c:	f7ff fc95 	bl	800f5ba <get_ldnumber>
 800fc90:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800fc92:	69fb      	ldr	r3, [r7, #28]
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	da01      	bge.n	800fc9c <f_mount+0x28>
 800fc98:	230b      	movs	r3, #11
 800fc9a:	e02b      	b.n	800fcf4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800fc9c:	4a17      	ldr	r2, [pc, #92]	; (800fcfc <f_mount+0x88>)
 800fc9e:	69fb      	ldr	r3, [r7, #28]
 800fca0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fca4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800fca6:	69bb      	ldr	r3, [r7, #24]
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d005      	beq.n	800fcb8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800fcac:	69b8      	ldr	r0, [r7, #24]
 800fcae:	f7fd ff2f 	bl	800db10 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800fcb2:	69bb      	ldr	r3, [r7, #24]
 800fcb4:	2200      	movs	r2, #0
 800fcb6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800fcb8:	68fb      	ldr	r3, [r7, #12]
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d002      	beq.n	800fcc4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800fcbe:	68fb      	ldr	r3, [r7, #12]
 800fcc0:	2200      	movs	r2, #0
 800fcc2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800fcc4:	68fa      	ldr	r2, [r7, #12]
 800fcc6:	490d      	ldr	r1, [pc, #52]	; (800fcfc <f_mount+0x88>)
 800fcc8:	69fb      	ldr	r3, [r7, #28]
 800fcca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d002      	beq.n	800fcda <f_mount+0x66>
 800fcd4:	79fb      	ldrb	r3, [r7, #7]
 800fcd6:	2b01      	cmp	r3, #1
 800fcd8:	d001      	beq.n	800fcde <f_mount+0x6a>
 800fcda:	2300      	movs	r3, #0
 800fcdc:	e00a      	b.n	800fcf4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800fcde:	f107 010c 	add.w	r1, r7, #12
 800fce2:	f107 0308 	add.w	r3, r7, #8
 800fce6:	2200      	movs	r2, #0
 800fce8:	4618      	mov	r0, r3
 800fcea:	f7ff fd01 	bl	800f6f0 <find_volume>
 800fcee:	4603      	mov	r3, r0
 800fcf0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800fcf2:	7dfb      	ldrb	r3, [r7, #23]
}
 800fcf4:	4618      	mov	r0, r3
 800fcf6:	3720      	adds	r7, #32
 800fcf8:	46bd      	mov	sp, r7
 800fcfa:	bd80      	pop	{r7, pc}
 800fcfc:	2001f2c0 	.word	0x2001f2c0

0800fd00 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800fd00:	b580      	push	{r7, lr}
 800fd02:	b09a      	sub	sp, #104	; 0x68
 800fd04:	af00      	add	r7, sp, #0
 800fd06:	60f8      	str	r0, [r7, #12]
 800fd08:	60b9      	str	r1, [r7, #8]
 800fd0a:	4613      	mov	r3, r2
 800fd0c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800fd0e:	68fb      	ldr	r3, [r7, #12]
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d101      	bne.n	800fd18 <f_open+0x18>
 800fd14:	2309      	movs	r3, #9
 800fd16:	e1bb      	b.n	8010090 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800fd18:	79fb      	ldrb	r3, [r7, #7]
 800fd1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fd1e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800fd20:	79fa      	ldrb	r2, [r7, #7]
 800fd22:	f107 0114 	add.w	r1, r7, #20
 800fd26:	f107 0308 	add.w	r3, r7, #8
 800fd2a:	4618      	mov	r0, r3
 800fd2c:	f7ff fce0 	bl	800f6f0 <find_volume>
 800fd30:	4603      	mov	r3, r0
 800fd32:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800fd36:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	f040 819f 	bne.w	801007e <f_open+0x37e>
		dj.obj.fs = fs;
 800fd40:	697b      	ldr	r3, [r7, #20]
 800fd42:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800fd44:	68ba      	ldr	r2, [r7, #8]
 800fd46:	f107 0318 	add.w	r3, r7, #24
 800fd4a:	4611      	mov	r1, r2
 800fd4c:	4618      	mov	r0, r3
 800fd4e:	f7ff fb9f 	bl	800f490 <follow_path>
 800fd52:	4603      	mov	r3, r0
 800fd54:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800fd58:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d11a      	bne.n	800fd96 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800fd60:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800fd64:	b25b      	sxtb	r3, r3
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	da03      	bge.n	800fd72 <f_open+0x72>
				res = FR_INVALID_NAME;
 800fd6a:	2306      	movs	r3, #6
 800fd6c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800fd70:	e011      	b.n	800fd96 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800fd72:	79fb      	ldrb	r3, [r7, #7]
 800fd74:	f023 0301 	bic.w	r3, r3, #1
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	bf14      	ite	ne
 800fd7c:	2301      	movne	r3, #1
 800fd7e:	2300      	moveq	r3, #0
 800fd80:	b2db      	uxtb	r3, r3
 800fd82:	461a      	mov	r2, r3
 800fd84:	f107 0318 	add.w	r3, r7, #24
 800fd88:	4611      	mov	r1, r2
 800fd8a:	4618      	mov	r0, r3
 800fd8c:	f7fd fd78 	bl	800d880 <chk_lock>
 800fd90:	4603      	mov	r3, r0
 800fd92:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800fd96:	79fb      	ldrb	r3, [r7, #7]
 800fd98:	f003 031c 	and.w	r3, r3, #28
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d07f      	beq.n	800fea0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800fda0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d017      	beq.n	800fdd8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800fda8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fdac:	2b04      	cmp	r3, #4
 800fdae:	d10e      	bne.n	800fdce <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800fdb0:	f7fd fdc2 	bl	800d938 <enq_lock>
 800fdb4:	4603      	mov	r3, r0
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d006      	beq.n	800fdc8 <f_open+0xc8>
 800fdba:	f107 0318 	add.w	r3, r7, #24
 800fdbe:	4618      	mov	r0, r3
 800fdc0:	f7ff f820 	bl	800ee04 <dir_register>
 800fdc4:	4603      	mov	r3, r0
 800fdc6:	e000      	b.n	800fdca <f_open+0xca>
 800fdc8:	2312      	movs	r3, #18
 800fdca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800fdce:	79fb      	ldrb	r3, [r7, #7]
 800fdd0:	f043 0308 	orr.w	r3, r3, #8
 800fdd4:	71fb      	strb	r3, [r7, #7]
 800fdd6:	e010      	b.n	800fdfa <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800fdd8:	7fbb      	ldrb	r3, [r7, #30]
 800fdda:	f003 0311 	and.w	r3, r3, #17
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d003      	beq.n	800fdea <f_open+0xea>
					res = FR_DENIED;
 800fde2:	2307      	movs	r3, #7
 800fde4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800fde8:	e007      	b.n	800fdfa <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800fdea:	79fb      	ldrb	r3, [r7, #7]
 800fdec:	f003 0304 	and.w	r3, r3, #4
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d002      	beq.n	800fdfa <f_open+0xfa>
 800fdf4:	2308      	movs	r3, #8
 800fdf6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800fdfa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d168      	bne.n	800fed4 <f_open+0x1d4>
 800fe02:	79fb      	ldrb	r3, [r7, #7]
 800fe04:	f003 0308 	and.w	r3, r3, #8
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d063      	beq.n	800fed4 <f_open+0x1d4>
				dw = GET_FATTIME();
 800fe0c:	f7fd f94a 	bl	800d0a4 <get_fattime>
 800fe10:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800fe12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe14:	330e      	adds	r3, #14
 800fe16:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800fe18:	4618      	mov	r0, r3
 800fe1a:	f7fd fc87 	bl	800d72c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800fe1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe20:	3316      	adds	r3, #22
 800fe22:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800fe24:	4618      	mov	r0, r3
 800fe26:	f7fd fc81 	bl	800d72c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800fe2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe2c:	330b      	adds	r3, #11
 800fe2e:	2220      	movs	r2, #32
 800fe30:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800fe32:	697b      	ldr	r3, [r7, #20]
 800fe34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fe36:	4611      	mov	r1, r2
 800fe38:	4618      	mov	r0, r3
 800fe3a:	f7fe fc50 	bl	800e6de <ld_clust>
 800fe3e:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800fe40:	697b      	ldr	r3, [r7, #20]
 800fe42:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fe44:	2200      	movs	r2, #0
 800fe46:	4618      	mov	r0, r3
 800fe48:	f7fe fc68 	bl	800e71c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800fe4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe4e:	331c      	adds	r3, #28
 800fe50:	2100      	movs	r1, #0
 800fe52:	4618      	mov	r0, r3
 800fe54:	f7fd fc6a 	bl	800d72c <st_dword>
					fs->wflag = 1;
 800fe58:	697b      	ldr	r3, [r7, #20]
 800fe5a:	2201      	movs	r2, #1
 800fe5c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800fe5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d037      	beq.n	800fed4 <f_open+0x1d4>
						dw = fs->winsect;
 800fe64:	697b      	ldr	r3, [r7, #20]
 800fe66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe68:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800fe6a:	f107 0318 	add.w	r3, r7, #24
 800fe6e:	2200      	movs	r2, #0
 800fe70:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fe72:	4618      	mov	r0, r3
 800fe74:	f7fe f958 	bl	800e128 <remove_chain>
 800fe78:	4603      	mov	r3, r0
 800fe7a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800fe7e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d126      	bne.n	800fed4 <f_open+0x1d4>
							res = move_window(fs, dw);
 800fe86:	697b      	ldr	r3, [r7, #20]
 800fe88:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800fe8a:	4618      	mov	r0, r3
 800fe8c:	f7fd fea8 	bl	800dbe0 <move_window>
 800fe90:	4603      	mov	r3, r0
 800fe92:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800fe96:	697b      	ldr	r3, [r7, #20]
 800fe98:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fe9a:	3a01      	subs	r2, #1
 800fe9c:	615a      	str	r2, [r3, #20]
 800fe9e:	e019      	b.n	800fed4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800fea0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d115      	bne.n	800fed4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800fea8:	7fbb      	ldrb	r3, [r7, #30]
 800feaa:	f003 0310 	and.w	r3, r3, #16
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d003      	beq.n	800feba <f_open+0x1ba>
					res = FR_NO_FILE;
 800feb2:	2304      	movs	r3, #4
 800feb4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800feb8:	e00c      	b.n	800fed4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800feba:	79fb      	ldrb	r3, [r7, #7]
 800febc:	f003 0302 	and.w	r3, r3, #2
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d007      	beq.n	800fed4 <f_open+0x1d4>
 800fec4:	7fbb      	ldrb	r3, [r7, #30]
 800fec6:	f003 0301 	and.w	r3, r3, #1
 800feca:	2b00      	cmp	r3, #0
 800fecc:	d002      	beq.n	800fed4 <f_open+0x1d4>
						res = FR_DENIED;
 800fece:	2307      	movs	r3, #7
 800fed0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800fed4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d128      	bne.n	800ff2e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800fedc:	79fb      	ldrb	r3, [r7, #7]
 800fede:	f003 0308 	and.w	r3, r3, #8
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d003      	beq.n	800feee <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800fee6:	79fb      	ldrb	r3, [r7, #7]
 800fee8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800feec:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800feee:	697b      	ldr	r3, [r7, #20]
 800fef0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fef2:	68fb      	ldr	r3, [r7, #12]
 800fef4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800fef6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fef8:	68fb      	ldr	r3, [r7, #12]
 800fefa:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800fefc:	79fb      	ldrb	r3, [r7, #7]
 800fefe:	f023 0301 	bic.w	r3, r3, #1
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	bf14      	ite	ne
 800ff06:	2301      	movne	r3, #1
 800ff08:	2300      	moveq	r3, #0
 800ff0a:	b2db      	uxtb	r3, r3
 800ff0c:	461a      	mov	r2, r3
 800ff0e:	f107 0318 	add.w	r3, r7, #24
 800ff12:	4611      	mov	r1, r2
 800ff14:	4618      	mov	r0, r3
 800ff16:	f7fd fd31 	bl	800d97c <inc_lock>
 800ff1a:	4602      	mov	r2, r0
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800ff20:	68fb      	ldr	r3, [r7, #12]
 800ff22:	691b      	ldr	r3, [r3, #16]
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d102      	bne.n	800ff2e <f_open+0x22e>
 800ff28:	2302      	movs	r3, #2
 800ff2a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800ff2e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	f040 80a3 	bne.w	801007e <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800ff38:	697b      	ldr	r3, [r7, #20]
 800ff3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ff3c:	4611      	mov	r1, r2
 800ff3e:	4618      	mov	r0, r3
 800ff40:	f7fe fbcd 	bl	800e6de <ld_clust>
 800ff44:	4602      	mov	r2, r0
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800ff4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff4c:	331c      	adds	r3, #28
 800ff4e:	4618      	mov	r0, r3
 800ff50:	f7fd fbae 	bl	800d6b0 <ld_dword>
 800ff54:	4602      	mov	r2, r0
 800ff56:	68fb      	ldr	r3, [r7, #12]
 800ff58:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800ff5a:	68fb      	ldr	r3, [r7, #12]
 800ff5c:	2200      	movs	r2, #0
 800ff5e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800ff60:	697a      	ldr	r2, [r7, #20]
 800ff62:	68fb      	ldr	r3, [r7, #12]
 800ff64:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800ff66:	697b      	ldr	r3, [r7, #20]
 800ff68:	88da      	ldrh	r2, [r3, #6]
 800ff6a:	68fb      	ldr	r3, [r7, #12]
 800ff6c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800ff6e:	68fb      	ldr	r3, [r7, #12]
 800ff70:	79fa      	ldrb	r2, [r7, #7]
 800ff72:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800ff74:	68fb      	ldr	r3, [r7, #12]
 800ff76:	2200      	movs	r2, #0
 800ff78:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800ff7a:	68fb      	ldr	r3, [r7, #12]
 800ff7c:	2200      	movs	r2, #0
 800ff7e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800ff80:	68fb      	ldr	r3, [r7, #12]
 800ff82:	2200      	movs	r2, #0
 800ff84:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800ff86:	68fb      	ldr	r3, [r7, #12]
 800ff88:	3330      	adds	r3, #48	; 0x30
 800ff8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ff8e:	2100      	movs	r1, #0
 800ff90:	4618      	mov	r0, r3
 800ff92:	f7fd fc18 	bl	800d7c6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800ff96:	79fb      	ldrb	r3, [r7, #7]
 800ff98:	f003 0320 	and.w	r3, r3, #32
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d06e      	beq.n	801007e <f_open+0x37e>
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	68db      	ldr	r3, [r3, #12]
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d06a      	beq.n	801007e <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800ffa8:	68fb      	ldr	r3, [r7, #12]
 800ffaa:	68da      	ldr	r2, [r3, #12]
 800ffac:	68fb      	ldr	r3, [r7, #12]
 800ffae:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800ffb0:	697b      	ldr	r3, [r7, #20]
 800ffb2:	895b      	ldrh	r3, [r3, #10]
 800ffb4:	461a      	mov	r2, r3
 800ffb6:	697b      	ldr	r3, [r7, #20]
 800ffb8:	899b      	ldrh	r3, [r3, #12]
 800ffba:	fb03 f302 	mul.w	r3, r3, r2
 800ffbe:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800ffc0:	68fb      	ldr	r3, [r7, #12]
 800ffc2:	689b      	ldr	r3, [r3, #8]
 800ffc4:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ffc6:	68fb      	ldr	r3, [r7, #12]
 800ffc8:	68db      	ldr	r3, [r3, #12]
 800ffca:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ffcc:	e016      	b.n	800fffc <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800ffce:	68fb      	ldr	r3, [r7, #12]
 800ffd0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ffd2:	4618      	mov	r0, r3
 800ffd4:	f7fd fec1 	bl	800dd5a <get_fat>
 800ffd8:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800ffda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ffdc:	2b01      	cmp	r3, #1
 800ffde:	d802      	bhi.n	800ffe6 <f_open+0x2e6>
 800ffe0:	2302      	movs	r3, #2
 800ffe2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ffe6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ffe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ffec:	d102      	bne.n	800fff4 <f_open+0x2f4>
 800ffee:	2301      	movs	r3, #1
 800fff0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800fff4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fff6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fff8:	1ad3      	subs	r3, r2, r3
 800fffa:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fffc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010000:	2b00      	cmp	r3, #0
 8010002:	d103      	bne.n	801000c <f_open+0x30c>
 8010004:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010006:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010008:	429a      	cmp	r2, r3
 801000a:	d8e0      	bhi.n	800ffce <f_open+0x2ce>
				}
				fp->clust = clst;
 801000c:	68fb      	ldr	r3, [r7, #12]
 801000e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010010:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8010012:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010016:	2b00      	cmp	r3, #0
 8010018:	d131      	bne.n	801007e <f_open+0x37e>
 801001a:	697b      	ldr	r3, [r7, #20]
 801001c:	899b      	ldrh	r3, [r3, #12]
 801001e:	461a      	mov	r2, r3
 8010020:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010022:	fbb3 f1f2 	udiv	r1, r3, r2
 8010026:	fb02 f201 	mul.w	r2, r2, r1
 801002a:	1a9b      	subs	r3, r3, r2
 801002c:	2b00      	cmp	r3, #0
 801002e:	d026      	beq.n	801007e <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8010030:	697b      	ldr	r3, [r7, #20]
 8010032:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8010034:	4618      	mov	r0, r3
 8010036:	f7fd fe71 	bl	800dd1c <clust2sect>
 801003a:	64f8      	str	r0, [r7, #76]	; 0x4c
 801003c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801003e:	2b00      	cmp	r3, #0
 8010040:	d103      	bne.n	801004a <f_open+0x34a>
						res = FR_INT_ERR;
 8010042:	2302      	movs	r3, #2
 8010044:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8010048:	e019      	b.n	801007e <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801004a:	697b      	ldr	r3, [r7, #20]
 801004c:	899b      	ldrh	r3, [r3, #12]
 801004e:	461a      	mov	r2, r3
 8010050:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010052:	fbb3 f2f2 	udiv	r2, r3, r2
 8010056:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010058:	441a      	add	r2, r3
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801005e:	697b      	ldr	r3, [r7, #20]
 8010060:	7858      	ldrb	r0, [r3, #1]
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	6a1a      	ldr	r2, [r3, #32]
 801006c:	2301      	movs	r3, #1
 801006e:	f7fd faa9 	bl	800d5c4 <disk_read>
 8010072:	4603      	mov	r3, r0
 8010074:	2b00      	cmp	r3, #0
 8010076:	d002      	beq.n	801007e <f_open+0x37e>
 8010078:	2301      	movs	r3, #1
 801007a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801007e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010082:	2b00      	cmp	r3, #0
 8010084:	d002      	beq.n	801008c <f_open+0x38c>
 8010086:	68fb      	ldr	r3, [r7, #12]
 8010088:	2200      	movs	r2, #0
 801008a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801008c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8010090:	4618      	mov	r0, r3
 8010092:	3768      	adds	r7, #104	; 0x68
 8010094:	46bd      	mov	sp, r7
 8010096:	bd80      	pop	{r7, pc}

08010098 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8010098:	b580      	push	{r7, lr}
 801009a:	b08e      	sub	sp, #56	; 0x38
 801009c:	af00      	add	r7, sp, #0
 801009e:	60f8      	str	r0, [r7, #12]
 80100a0:	60b9      	str	r1, [r7, #8]
 80100a2:	607a      	str	r2, [r7, #4]
 80100a4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80100a6:	68bb      	ldr	r3, [r7, #8]
 80100a8:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80100aa:	683b      	ldr	r3, [r7, #0]
 80100ac:	2200      	movs	r2, #0
 80100ae:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80100b0:	68fb      	ldr	r3, [r7, #12]
 80100b2:	f107 0214 	add.w	r2, r7, #20
 80100b6:	4611      	mov	r1, r2
 80100b8:	4618      	mov	r0, r3
 80100ba:	f7ff fda5 	bl	800fc08 <validate>
 80100be:	4603      	mov	r3, r0
 80100c0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80100c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d107      	bne.n	80100dc <f_read+0x44>
 80100cc:	68fb      	ldr	r3, [r7, #12]
 80100ce:	7d5b      	ldrb	r3, [r3, #21]
 80100d0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80100d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d002      	beq.n	80100e2 <f_read+0x4a>
 80100dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80100e0:	e135      	b.n	801034e <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80100e2:	68fb      	ldr	r3, [r7, #12]
 80100e4:	7d1b      	ldrb	r3, [r3, #20]
 80100e6:	f003 0301 	and.w	r3, r3, #1
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d101      	bne.n	80100f2 <f_read+0x5a>
 80100ee:	2307      	movs	r3, #7
 80100f0:	e12d      	b.n	801034e <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 80100f2:	68fb      	ldr	r3, [r7, #12]
 80100f4:	68da      	ldr	r2, [r3, #12]
 80100f6:	68fb      	ldr	r3, [r7, #12]
 80100f8:	699b      	ldr	r3, [r3, #24]
 80100fa:	1ad3      	subs	r3, r2, r3
 80100fc:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80100fe:	687a      	ldr	r2, [r7, #4]
 8010100:	6a3b      	ldr	r3, [r7, #32]
 8010102:	429a      	cmp	r2, r3
 8010104:	f240 811e 	bls.w	8010344 <f_read+0x2ac>
 8010108:	6a3b      	ldr	r3, [r7, #32]
 801010a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 801010c:	e11a      	b.n	8010344 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 801010e:	68fb      	ldr	r3, [r7, #12]
 8010110:	699b      	ldr	r3, [r3, #24]
 8010112:	697a      	ldr	r2, [r7, #20]
 8010114:	8992      	ldrh	r2, [r2, #12]
 8010116:	fbb3 f1f2 	udiv	r1, r3, r2
 801011a:	fb02 f201 	mul.w	r2, r2, r1
 801011e:	1a9b      	subs	r3, r3, r2
 8010120:	2b00      	cmp	r3, #0
 8010122:	f040 80d5 	bne.w	80102d0 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	699b      	ldr	r3, [r3, #24]
 801012a:	697a      	ldr	r2, [r7, #20]
 801012c:	8992      	ldrh	r2, [r2, #12]
 801012e:	fbb3 f3f2 	udiv	r3, r3, r2
 8010132:	697a      	ldr	r2, [r7, #20]
 8010134:	8952      	ldrh	r2, [r2, #10]
 8010136:	3a01      	subs	r2, #1
 8010138:	4013      	ands	r3, r2
 801013a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 801013c:	69fb      	ldr	r3, [r7, #28]
 801013e:	2b00      	cmp	r3, #0
 8010140:	d12f      	bne.n	80101a2 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	699b      	ldr	r3, [r3, #24]
 8010146:	2b00      	cmp	r3, #0
 8010148:	d103      	bne.n	8010152 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 801014a:	68fb      	ldr	r3, [r7, #12]
 801014c:	689b      	ldr	r3, [r3, #8]
 801014e:	633b      	str	r3, [r7, #48]	; 0x30
 8010150:	e013      	b.n	801017a <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010156:	2b00      	cmp	r3, #0
 8010158:	d007      	beq.n	801016a <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	699b      	ldr	r3, [r3, #24]
 801015e:	4619      	mov	r1, r3
 8010160:	68f8      	ldr	r0, [r7, #12]
 8010162:	f7fe f8de 	bl	800e322 <clmt_clust>
 8010166:	6338      	str	r0, [r7, #48]	; 0x30
 8010168:	e007      	b.n	801017a <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 801016a:	68fa      	ldr	r2, [r7, #12]
 801016c:	68fb      	ldr	r3, [r7, #12]
 801016e:	69db      	ldr	r3, [r3, #28]
 8010170:	4619      	mov	r1, r3
 8010172:	4610      	mov	r0, r2
 8010174:	f7fd fdf1 	bl	800dd5a <get_fat>
 8010178:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 801017a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801017c:	2b01      	cmp	r3, #1
 801017e:	d804      	bhi.n	801018a <f_read+0xf2>
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	2202      	movs	r2, #2
 8010184:	755a      	strb	r2, [r3, #21]
 8010186:	2302      	movs	r3, #2
 8010188:	e0e1      	b.n	801034e <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801018a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801018c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010190:	d104      	bne.n	801019c <f_read+0x104>
 8010192:	68fb      	ldr	r3, [r7, #12]
 8010194:	2201      	movs	r2, #1
 8010196:	755a      	strb	r2, [r3, #21]
 8010198:	2301      	movs	r3, #1
 801019a:	e0d8      	b.n	801034e <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 801019c:	68fb      	ldr	r3, [r7, #12]
 801019e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80101a0:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80101a2:	697a      	ldr	r2, [r7, #20]
 80101a4:	68fb      	ldr	r3, [r7, #12]
 80101a6:	69db      	ldr	r3, [r3, #28]
 80101a8:	4619      	mov	r1, r3
 80101aa:	4610      	mov	r0, r2
 80101ac:	f7fd fdb6 	bl	800dd1c <clust2sect>
 80101b0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80101b2:	69bb      	ldr	r3, [r7, #24]
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d104      	bne.n	80101c2 <f_read+0x12a>
 80101b8:	68fb      	ldr	r3, [r7, #12]
 80101ba:	2202      	movs	r2, #2
 80101bc:	755a      	strb	r2, [r3, #21]
 80101be:	2302      	movs	r3, #2
 80101c0:	e0c5      	b.n	801034e <f_read+0x2b6>
			sect += csect;
 80101c2:	69ba      	ldr	r2, [r7, #24]
 80101c4:	69fb      	ldr	r3, [r7, #28]
 80101c6:	4413      	add	r3, r2
 80101c8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80101ca:	697b      	ldr	r3, [r7, #20]
 80101cc:	899b      	ldrh	r3, [r3, #12]
 80101ce:	461a      	mov	r2, r3
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80101d6:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80101d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d041      	beq.n	8010262 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80101de:	69fa      	ldr	r2, [r7, #28]
 80101e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101e2:	4413      	add	r3, r2
 80101e4:	697a      	ldr	r2, [r7, #20]
 80101e6:	8952      	ldrh	r2, [r2, #10]
 80101e8:	4293      	cmp	r3, r2
 80101ea:	d905      	bls.n	80101f8 <f_read+0x160>
					cc = fs->csize - csect;
 80101ec:	697b      	ldr	r3, [r7, #20]
 80101ee:	895b      	ldrh	r3, [r3, #10]
 80101f0:	461a      	mov	r2, r3
 80101f2:	69fb      	ldr	r3, [r7, #28]
 80101f4:	1ad3      	subs	r3, r2, r3
 80101f6:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80101f8:	697b      	ldr	r3, [r7, #20]
 80101fa:	7858      	ldrb	r0, [r3, #1]
 80101fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101fe:	69ba      	ldr	r2, [r7, #24]
 8010200:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010202:	f7fd f9df 	bl	800d5c4 <disk_read>
 8010206:	4603      	mov	r3, r0
 8010208:	2b00      	cmp	r3, #0
 801020a:	d004      	beq.n	8010216 <f_read+0x17e>
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	2201      	movs	r2, #1
 8010210:	755a      	strb	r2, [r3, #21]
 8010212:	2301      	movs	r3, #1
 8010214:	e09b      	b.n	801034e <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	7d1b      	ldrb	r3, [r3, #20]
 801021a:	b25b      	sxtb	r3, r3
 801021c:	2b00      	cmp	r3, #0
 801021e:	da18      	bge.n	8010252 <f_read+0x1ba>
 8010220:	68fb      	ldr	r3, [r7, #12]
 8010222:	6a1a      	ldr	r2, [r3, #32]
 8010224:	69bb      	ldr	r3, [r7, #24]
 8010226:	1ad3      	subs	r3, r2, r3
 8010228:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801022a:	429a      	cmp	r2, r3
 801022c:	d911      	bls.n	8010252 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	6a1a      	ldr	r2, [r3, #32]
 8010232:	69bb      	ldr	r3, [r7, #24]
 8010234:	1ad3      	subs	r3, r2, r3
 8010236:	697a      	ldr	r2, [r7, #20]
 8010238:	8992      	ldrh	r2, [r2, #12]
 801023a:	fb02 f303 	mul.w	r3, r2, r3
 801023e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010240:	18d0      	adds	r0, r2, r3
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010248:	697b      	ldr	r3, [r7, #20]
 801024a:	899b      	ldrh	r3, [r3, #12]
 801024c:	461a      	mov	r2, r3
 801024e:	f7fd fa99 	bl	800d784 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8010252:	697b      	ldr	r3, [r7, #20]
 8010254:	899b      	ldrh	r3, [r3, #12]
 8010256:	461a      	mov	r2, r3
 8010258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801025a:	fb02 f303 	mul.w	r3, r2, r3
 801025e:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8010260:	e05c      	b.n	801031c <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	6a1b      	ldr	r3, [r3, #32]
 8010266:	69ba      	ldr	r2, [r7, #24]
 8010268:	429a      	cmp	r2, r3
 801026a:	d02e      	beq.n	80102ca <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801026c:	68fb      	ldr	r3, [r7, #12]
 801026e:	7d1b      	ldrb	r3, [r3, #20]
 8010270:	b25b      	sxtb	r3, r3
 8010272:	2b00      	cmp	r3, #0
 8010274:	da18      	bge.n	80102a8 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010276:	697b      	ldr	r3, [r7, #20]
 8010278:	7858      	ldrb	r0, [r3, #1]
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	6a1a      	ldr	r2, [r3, #32]
 8010284:	2301      	movs	r3, #1
 8010286:	f7fd f9bd 	bl	800d604 <disk_write>
 801028a:	4603      	mov	r3, r0
 801028c:	2b00      	cmp	r3, #0
 801028e:	d004      	beq.n	801029a <f_read+0x202>
 8010290:	68fb      	ldr	r3, [r7, #12]
 8010292:	2201      	movs	r2, #1
 8010294:	755a      	strb	r2, [r3, #21]
 8010296:	2301      	movs	r3, #1
 8010298:	e059      	b.n	801034e <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 801029a:	68fb      	ldr	r3, [r7, #12]
 801029c:	7d1b      	ldrb	r3, [r3, #20]
 801029e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80102a2:	b2da      	uxtb	r2, r3
 80102a4:	68fb      	ldr	r3, [r7, #12]
 80102a6:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80102a8:	697b      	ldr	r3, [r7, #20]
 80102aa:	7858      	ldrb	r0, [r3, #1]
 80102ac:	68fb      	ldr	r3, [r7, #12]
 80102ae:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80102b2:	2301      	movs	r3, #1
 80102b4:	69ba      	ldr	r2, [r7, #24]
 80102b6:	f7fd f985 	bl	800d5c4 <disk_read>
 80102ba:	4603      	mov	r3, r0
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d004      	beq.n	80102ca <f_read+0x232>
 80102c0:	68fb      	ldr	r3, [r7, #12]
 80102c2:	2201      	movs	r2, #1
 80102c4:	755a      	strb	r2, [r3, #21]
 80102c6:	2301      	movs	r3, #1
 80102c8:	e041      	b.n	801034e <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 80102ca:	68fb      	ldr	r3, [r7, #12]
 80102cc:	69ba      	ldr	r2, [r7, #24]
 80102ce:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80102d0:	697b      	ldr	r3, [r7, #20]
 80102d2:	899b      	ldrh	r3, [r3, #12]
 80102d4:	4618      	mov	r0, r3
 80102d6:	68fb      	ldr	r3, [r7, #12]
 80102d8:	699b      	ldr	r3, [r3, #24]
 80102da:	697a      	ldr	r2, [r7, #20]
 80102dc:	8992      	ldrh	r2, [r2, #12]
 80102de:	fbb3 f1f2 	udiv	r1, r3, r2
 80102e2:	fb02 f201 	mul.w	r2, r2, r1
 80102e6:	1a9b      	subs	r3, r3, r2
 80102e8:	1ac3      	subs	r3, r0, r3
 80102ea:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80102ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	429a      	cmp	r2, r3
 80102f2:	d901      	bls.n	80102f8 <f_read+0x260>
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80102f8:	68fb      	ldr	r3, [r7, #12]
 80102fa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80102fe:	68fb      	ldr	r3, [r7, #12]
 8010300:	699b      	ldr	r3, [r3, #24]
 8010302:	697a      	ldr	r2, [r7, #20]
 8010304:	8992      	ldrh	r2, [r2, #12]
 8010306:	fbb3 f0f2 	udiv	r0, r3, r2
 801030a:	fb02 f200 	mul.w	r2, r2, r0
 801030e:	1a9b      	subs	r3, r3, r2
 8010310:	440b      	add	r3, r1
 8010312:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010314:	4619      	mov	r1, r3
 8010316:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010318:	f7fd fa34 	bl	800d784 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 801031c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801031e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010320:	4413      	add	r3, r2
 8010322:	627b      	str	r3, [r7, #36]	; 0x24
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	699a      	ldr	r2, [r3, #24]
 8010328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801032a:	441a      	add	r2, r3
 801032c:	68fb      	ldr	r3, [r7, #12]
 801032e:	619a      	str	r2, [r3, #24]
 8010330:	683b      	ldr	r3, [r7, #0]
 8010332:	681a      	ldr	r2, [r3, #0]
 8010334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010336:	441a      	add	r2, r3
 8010338:	683b      	ldr	r3, [r7, #0]
 801033a:	601a      	str	r2, [r3, #0]
 801033c:	687a      	ldr	r2, [r7, #4]
 801033e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010340:	1ad3      	subs	r3, r2, r3
 8010342:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	2b00      	cmp	r3, #0
 8010348:	f47f aee1 	bne.w	801010e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 801034c:	2300      	movs	r3, #0
}
 801034e:	4618      	mov	r0, r3
 8010350:	3738      	adds	r7, #56	; 0x38
 8010352:	46bd      	mov	sp, r7
 8010354:	bd80      	pop	{r7, pc}

08010356 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8010356:	b580      	push	{r7, lr}
 8010358:	b08c      	sub	sp, #48	; 0x30
 801035a:	af00      	add	r7, sp, #0
 801035c:	60f8      	str	r0, [r7, #12]
 801035e:	60b9      	str	r1, [r7, #8]
 8010360:	607a      	str	r2, [r7, #4]
 8010362:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8010364:	68bb      	ldr	r3, [r7, #8]
 8010366:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8010368:	683b      	ldr	r3, [r7, #0]
 801036a:	2200      	movs	r2, #0
 801036c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801036e:	68fb      	ldr	r3, [r7, #12]
 8010370:	f107 0210 	add.w	r2, r7, #16
 8010374:	4611      	mov	r1, r2
 8010376:	4618      	mov	r0, r3
 8010378:	f7ff fc46 	bl	800fc08 <validate>
 801037c:	4603      	mov	r3, r0
 801037e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8010382:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010386:	2b00      	cmp	r3, #0
 8010388:	d107      	bne.n	801039a <f_write+0x44>
 801038a:	68fb      	ldr	r3, [r7, #12]
 801038c:	7d5b      	ldrb	r3, [r3, #21]
 801038e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8010392:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010396:	2b00      	cmp	r3, #0
 8010398:	d002      	beq.n	80103a0 <f_write+0x4a>
 801039a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801039e:	e16a      	b.n	8010676 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	7d1b      	ldrb	r3, [r3, #20]
 80103a4:	f003 0302 	and.w	r3, r3, #2
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d101      	bne.n	80103b0 <f_write+0x5a>
 80103ac:	2307      	movs	r3, #7
 80103ae:	e162      	b.n	8010676 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80103b0:	68fb      	ldr	r3, [r7, #12]
 80103b2:	699a      	ldr	r2, [r3, #24]
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	441a      	add	r2, r3
 80103b8:	68fb      	ldr	r3, [r7, #12]
 80103ba:	699b      	ldr	r3, [r3, #24]
 80103bc:	429a      	cmp	r2, r3
 80103be:	f080 814c 	bcs.w	801065a <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80103c2:	68fb      	ldr	r3, [r7, #12]
 80103c4:	699b      	ldr	r3, [r3, #24]
 80103c6:	43db      	mvns	r3, r3
 80103c8:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80103ca:	e146      	b.n	801065a <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80103cc:	68fb      	ldr	r3, [r7, #12]
 80103ce:	699b      	ldr	r3, [r3, #24]
 80103d0:	693a      	ldr	r2, [r7, #16]
 80103d2:	8992      	ldrh	r2, [r2, #12]
 80103d4:	fbb3 f1f2 	udiv	r1, r3, r2
 80103d8:	fb02 f201 	mul.w	r2, r2, r1
 80103dc:	1a9b      	subs	r3, r3, r2
 80103de:	2b00      	cmp	r3, #0
 80103e0:	f040 80f1 	bne.w	80105c6 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80103e4:	68fb      	ldr	r3, [r7, #12]
 80103e6:	699b      	ldr	r3, [r3, #24]
 80103e8:	693a      	ldr	r2, [r7, #16]
 80103ea:	8992      	ldrh	r2, [r2, #12]
 80103ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80103f0:	693a      	ldr	r2, [r7, #16]
 80103f2:	8952      	ldrh	r2, [r2, #10]
 80103f4:	3a01      	subs	r2, #1
 80103f6:	4013      	ands	r3, r2
 80103f8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80103fa:	69bb      	ldr	r3, [r7, #24]
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d143      	bne.n	8010488 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8010400:	68fb      	ldr	r3, [r7, #12]
 8010402:	699b      	ldr	r3, [r3, #24]
 8010404:	2b00      	cmp	r3, #0
 8010406:	d10c      	bne.n	8010422 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8010408:	68fb      	ldr	r3, [r7, #12]
 801040a:	689b      	ldr	r3, [r3, #8]
 801040c:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801040e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010410:	2b00      	cmp	r3, #0
 8010412:	d11a      	bne.n	801044a <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8010414:	68fb      	ldr	r3, [r7, #12]
 8010416:	2100      	movs	r1, #0
 8010418:	4618      	mov	r0, r3
 801041a:	f7fd feea 	bl	800e1f2 <create_chain>
 801041e:	62b8      	str	r0, [r7, #40]	; 0x28
 8010420:	e013      	b.n	801044a <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8010422:	68fb      	ldr	r3, [r7, #12]
 8010424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010426:	2b00      	cmp	r3, #0
 8010428:	d007      	beq.n	801043a <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	699b      	ldr	r3, [r3, #24]
 801042e:	4619      	mov	r1, r3
 8010430:	68f8      	ldr	r0, [r7, #12]
 8010432:	f7fd ff76 	bl	800e322 <clmt_clust>
 8010436:	62b8      	str	r0, [r7, #40]	; 0x28
 8010438:	e007      	b.n	801044a <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801043a:	68fa      	ldr	r2, [r7, #12]
 801043c:	68fb      	ldr	r3, [r7, #12]
 801043e:	69db      	ldr	r3, [r3, #28]
 8010440:	4619      	mov	r1, r3
 8010442:	4610      	mov	r0, r2
 8010444:	f7fd fed5 	bl	800e1f2 <create_chain>
 8010448:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801044a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801044c:	2b00      	cmp	r3, #0
 801044e:	f000 8109 	beq.w	8010664 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8010452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010454:	2b01      	cmp	r3, #1
 8010456:	d104      	bne.n	8010462 <f_write+0x10c>
 8010458:	68fb      	ldr	r3, [r7, #12]
 801045a:	2202      	movs	r2, #2
 801045c:	755a      	strb	r2, [r3, #21]
 801045e:	2302      	movs	r3, #2
 8010460:	e109      	b.n	8010676 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010468:	d104      	bne.n	8010474 <f_write+0x11e>
 801046a:	68fb      	ldr	r3, [r7, #12]
 801046c:	2201      	movs	r2, #1
 801046e:	755a      	strb	r2, [r3, #21]
 8010470:	2301      	movs	r3, #1
 8010472:	e100      	b.n	8010676 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8010474:	68fb      	ldr	r3, [r7, #12]
 8010476:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010478:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801047a:	68fb      	ldr	r3, [r7, #12]
 801047c:	689b      	ldr	r3, [r3, #8]
 801047e:	2b00      	cmp	r3, #0
 8010480:	d102      	bne.n	8010488 <f_write+0x132>
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010486:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	7d1b      	ldrb	r3, [r3, #20]
 801048c:	b25b      	sxtb	r3, r3
 801048e:	2b00      	cmp	r3, #0
 8010490:	da18      	bge.n	80104c4 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010492:	693b      	ldr	r3, [r7, #16]
 8010494:	7858      	ldrb	r0, [r3, #1]
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801049c:	68fb      	ldr	r3, [r7, #12]
 801049e:	6a1a      	ldr	r2, [r3, #32]
 80104a0:	2301      	movs	r3, #1
 80104a2:	f7fd f8af 	bl	800d604 <disk_write>
 80104a6:	4603      	mov	r3, r0
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d004      	beq.n	80104b6 <f_write+0x160>
 80104ac:	68fb      	ldr	r3, [r7, #12]
 80104ae:	2201      	movs	r2, #1
 80104b0:	755a      	strb	r2, [r3, #21]
 80104b2:	2301      	movs	r3, #1
 80104b4:	e0df      	b.n	8010676 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 80104b6:	68fb      	ldr	r3, [r7, #12]
 80104b8:	7d1b      	ldrb	r3, [r3, #20]
 80104ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80104be:	b2da      	uxtb	r2, r3
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80104c4:	693a      	ldr	r2, [r7, #16]
 80104c6:	68fb      	ldr	r3, [r7, #12]
 80104c8:	69db      	ldr	r3, [r3, #28]
 80104ca:	4619      	mov	r1, r3
 80104cc:	4610      	mov	r0, r2
 80104ce:	f7fd fc25 	bl	800dd1c <clust2sect>
 80104d2:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80104d4:	697b      	ldr	r3, [r7, #20]
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	d104      	bne.n	80104e4 <f_write+0x18e>
 80104da:	68fb      	ldr	r3, [r7, #12]
 80104dc:	2202      	movs	r2, #2
 80104de:	755a      	strb	r2, [r3, #21]
 80104e0:	2302      	movs	r3, #2
 80104e2:	e0c8      	b.n	8010676 <f_write+0x320>
			sect += csect;
 80104e4:	697a      	ldr	r2, [r7, #20]
 80104e6:	69bb      	ldr	r3, [r7, #24]
 80104e8:	4413      	add	r3, r2
 80104ea:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80104ec:	693b      	ldr	r3, [r7, #16]
 80104ee:	899b      	ldrh	r3, [r3, #12]
 80104f0:	461a      	mov	r2, r3
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80104f8:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80104fa:	6a3b      	ldr	r3, [r7, #32]
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d043      	beq.n	8010588 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8010500:	69ba      	ldr	r2, [r7, #24]
 8010502:	6a3b      	ldr	r3, [r7, #32]
 8010504:	4413      	add	r3, r2
 8010506:	693a      	ldr	r2, [r7, #16]
 8010508:	8952      	ldrh	r2, [r2, #10]
 801050a:	4293      	cmp	r3, r2
 801050c:	d905      	bls.n	801051a <f_write+0x1c4>
					cc = fs->csize - csect;
 801050e:	693b      	ldr	r3, [r7, #16]
 8010510:	895b      	ldrh	r3, [r3, #10]
 8010512:	461a      	mov	r2, r3
 8010514:	69bb      	ldr	r3, [r7, #24]
 8010516:	1ad3      	subs	r3, r2, r3
 8010518:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801051a:	693b      	ldr	r3, [r7, #16]
 801051c:	7858      	ldrb	r0, [r3, #1]
 801051e:	6a3b      	ldr	r3, [r7, #32]
 8010520:	697a      	ldr	r2, [r7, #20]
 8010522:	69f9      	ldr	r1, [r7, #28]
 8010524:	f7fd f86e 	bl	800d604 <disk_write>
 8010528:	4603      	mov	r3, r0
 801052a:	2b00      	cmp	r3, #0
 801052c:	d004      	beq.n	8010538 <f_write+0x1e2>
 801052e:	68fb      	ldr	r3, [r7, #12]
 8010530:	2201      	movs	r2, #1
 8010532:	755a      	strb	r2, [r3, #21]
 8010534:	2301      	movs	r3, #1
 8010536:	e09e      	b.n	8010676 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8010538:	68fb      	ldr	r3, [r7, #12]
 801053a:	6a1a      	ldr	r2, [r3, #32]
 801053c:	697b      	ldr	r3, [r7, #20]
 801053e:	1ad3      	subs	r3, r2, r3
 8010540:	6a3a      	ldr	r2, [r7, #32]
 8010542:	429a      	cmp	r2, r3
 8010544:	d918      	bls.n	8010578 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8010546:	68fb      	ldr	r3, [r7, #12]
 8010548:	f103 0030 	add.w	r0, r3, #48	; 0x30
 801054c:	68fb      	ldr	r3, [r7, #12]
 801054e:	6a1a      	ldr	r2, [r3, #32]
 8010550:	697b      	ldr	r3, [r7, #20]
 8010552:	1ad3      	subs	r3, r2, r3
 8010554:	693a      	ldr	r2, [r7, #16]
 8010556:	8992      	ldrh	r2, [r2, #12]
 8010558:	fb02 f303 	mul.w	r3, r2, r3
 801055c:	69fa      	ldr	r2, [r7, #28]
 801055e:	18d1      	adds	r1, r2, r3
 8010560:	693b      	ldr	r3, [r7, #16]
 8010562:	899b      	ldrh	r3, [r3, #12]
 8010564:	461a      	mov	r2, r3
 8010566:	f7fd f90d 	bl	800d784 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801056a:	68fb      	ldr	r3, [r7, #12]
 801056c:	7d1b      	ldrb	r3, [r3, #20]
 801056e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010572:	b2da      	uxtb	r2, r3
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8010578:	693b      	ldr	r3, [r7, #16]
 801057a:	899b      	ldrh	r3, [r3, #12]
 801057c:	461a      	mov	r2, r3
 801057e:	6a3b      	ldr	r3, [r7, #32]
 8010580:	fb02 f303 	mul.w	r3, r2, r3
 8010584:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8010586:	e04b      	b.n	8010620 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010588:	68fb      	ldr	r3, [r7, #12]
 801058a:	6a1b      	ldr	r3, [r3, #32]
 801058c:	697a      	ldr	r2, [r7, #20]
 801058e:	429a      	cmp	r2, r3
 8010590:	d016      	beq.n	80105c0 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8010592:	68fb      	ldr	r3, [r7, #12]
 8010594:	699a      	ldr	r2, [r3, #24]
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801059a:	429a      	cmp	r2, r3
 801059c:	d210      	bcs.n	80105c0 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801059e:	693b      	ldr	r3, [r7, #16]
 80105a0:	7858      	ldrb	r0, [r3, #1]
 80105a2:	68fb      	ldr	r3, [r7, #12]
 80105a4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80105a8:	2301      	movs	r3, #1
 80105aa:	697a      	ldr	r2, [r7, #20]
 80105ac:	f7fd f80a 	bl	800d5c4 <disk_read>
 80105b0:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d004      	beq.n	80105c0 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	2201      	movs	r2, #1
 80105ba:	755a      	strb	r2, [r3, #21]
 80105bc:	2301      	movs	r3, #1
 80105be:	e05a      	b.n	8010676 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 80105c0:	68fb      	ldr	r3, [r7, #12]
 80105c2:	697a      	ldr	r2, [r7, #20]
 80105c4:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80105c6:	693b      	ldr	r3, [r7, #16]
 80105c8:	899b      	ldrh	r3, [r3, #12]
 80105ca:	4618      	mov	r0, r3
 80105cc:	68fb      	ldr	r3, [r7, #12]
 80105ce:	699b      	ldr	r3, [r3, #24]
 80105d0:	693a      	ldr	r2, [r7, #16]
 80105d2:	8992      	ldrh	r2, [r2, #12]
 80105d4:	fbb3 f1f2 	udiv	r1, r3, r2
 80105d8:	fb02 f201 	mul.w	r2, r2, r1
 80105dc:	1a9b      	subs	r3, r3, r2
 80105de:	1ac3      	subs	r3, r0, r3
 80105e0:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80105e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	429a      	cmp	r2, r3
 80105e8:	d901      	bls.n	80105ee <f_write+0x298>
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80105ee:	68fb      	ldr	r3, [r7, #12]
 80105f0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80105f4:	68fb      	ldr	r3, [r7, #12]
 80105f6:	699b      	ldr	r3, [r3, #24]
 80105f8:	693a      	ldr	r2, [r7, #16]
 80105fa:	8992      	ldrh	r2, [r2, #12]
 80105fc:	fbb3 f0f2 	udiv	r0, r3, r2
 8010600:	fb02 f200 	mul.w	r2, r2, r0
 8010604:	1a9b      	subs	r3, r3, r2
 8010606:	440b      	add	r3, r1
 8010608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801060a:	69f9      	ldr	r1, [r7, #28]
 801060c:	4618      	mov	r0, r3
 801060e:	f7fd f8b9 	bl	800d784 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8010612:	68fb      	ldr	r3, [r7, #12]
 8010614:	7d1b      	ldrb	r3, [r3, #20]
 8010616:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801061a:	b2da      	uxtb	r2, r3
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8010620:	69fa      	ldr	r2, [r7, #28]
 8010622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010624:	4413      	add	r3, r2
 8010626:	61fb      	str	r3, [r7, #28]
 8010628:	68fb      	ldr	r3, [r7, #12]
 801062a:	699a      	ldr	r2, [r3, #24]
 801062c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801062e:	441a      	add	r2, r3
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	619a      	str	r2, [r3, #24]
 8010634:	68fb      	ldr	r3, [r7, #12]
 8010636:	68da      	ldr	r2, [r3, #12]
 8010638:	68fb      	ldr	r3, [r7, #12]
 801063a:	699b      	ldr	r3, [r3, #24]
 801063c:	429a      	cmp	r2, r3
 801063e:	bf38      	it	cc
 8010640:	461a      	movcc	r2, r3
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	60da      	str	r2, [r3, #12]
 8010646:	683b      	ldr	r3, [r7, #0]
 8010648:	681a      	ldr	r2, [r3, #0]
 801064a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801064c:	441a      	add	r2, r3
 801064e:	683b      	ldr	r3, [r7, #0]
 8010650:	601a      	str	r2, [r3, #0]
 8010652:	687a      	ldr	r2, [r7, #4]
 8010654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010656:	1ad3      	subs	r3, r2, r3
 8010658:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	2b00      	cmp	r3, #0
 801065e:	f47f aeb5 	bne.w	80103cc <f_write+0x76>
 8010662:	e000      	b.n	8010666 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010664:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	7d1b      	ldrb	r3, [r3, #20]
 801066a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801066e:	b2da      	uxtb	r2, r3
 8010670:	68fb      	ldr	r3, [r7, #12]
 8010672:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8010674:	2300      	movs	r3, #0
}
 8010676:	4618      	mov	r0, r3
 8010678:	3730      	adds	r7, #48	; 0x30
 801067a:	46bd      	mov	sp, r7
 801067c:	bd80      	pop	{r7, pc}

0801067e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801067e:	b580      	push	{r7, lr}
 8010680:	b086      	sub	sp, #24
 8010682:	af00      	add	r7, sp, #0
 8010684:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	f107 0208 	add.w	r2, r7, #8
 801068c:	4611      	mov	r1, r2
 801068e:	4618      	mov	r0, r3
 8010690:	f7ff faba 	bl	800fc08 <validate>
 8010694:	4603      	mov	r3, r0
 8010696:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010698:	7dfb      	ldrb	r3, [r7, #23]
 801069a:	2b00      	cmp	r3, #0
 801069c:	d168      	bne.n	8010770 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	7d1b      	ldrb	r3, [r3, #20]
 80106a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d062      	beq.n	8010770 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	7d1b      	ldrb	r3, [r3, #20]
 80106ae:	b25b      	sxtb	r3, r3
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	da15      	bge.n	80106e0 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80106b4:	68bb      	ldr	r3, [r7, #8]
 80106b6:	7858      	ldrb	r0, [r3, #1]
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	6a1a      	ldr	r2, [r3, #32]
 80106c2:	2301      	movs	r3, #1
 80106c4:	f7fc ff9e 	bl	800d604 <disk_write>
 80106c8:	4603      	mov	r3, r0
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d001      	beq.n	80106d2 <f_sync+0x54>
 80106ce:	2301      	movs	r3, #1
 80106d0:	e04f      	b.n	8010772 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	7d1b      	ldrb	r3, [r3, #20]
 80106d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80106da:	b2da      	uxtb	r2, r3
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80106e0:	f7fc fce0 	bl	800d0a4 <get_fattime>
 80106e4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80106e6:	68ba      	ldr	r2, [r7, #8]
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106ec:	4619      	mov	r1, r3
 80106ee:	4610      	mov	r0, r2
 80106f0:	f7fd fa76 	bl	800dbe0 <move_window>
 80106f4:	4603      	mov	r3, r0
 80106f6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80106f8:	7dfb      	ldrb	r3, [r7, #23]
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d138      	bne.n	8010770 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010702:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	330b      	adds	r3, #11
 8010708:	781a      	ldrb	r2, [r3, #0]
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	330b      	adds	r3, #11
 801070e:	f042 0220 	orr.w	r2, r2, #32
 8010712:	b2d2      	uxtb	r2, r2
 8010714:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	6818      	ldr	r0, [r3, #0]
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	689b      	ldr	r3, [r3, #8]
 801071e:	461a      	mov	r2, r3
 8010720:	68f9      	ldr	r1, [r7, #12]
 8010722:	f7fd fffb 	bl	800e71c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8010726:	68fb      	ldr	r3, [r7, #12]
 8010728:	f103 021c 	add.w	r2, r3, #28
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	68db      	ldr	r3, [r3, #12]
 8010730:	4619      	mov	r1, r3
 8010732:	4610      	mov	r0, r2
 8010734:	f7fc fffa 	bl	800d72c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8010738:	68fb      	ldr	r3, [r7, #12]
 801073a:	3316      	adds	r3, #22
 801073c:	6939      	ldr	r1, [r7, #16]
 801073e:	4618      	mov	r0, r3
 8010740:	f7fc fff4 	bl	800d72c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8010744:	68fb      	ldr	r3, [r7, #12]
 8010746:	3312      	adds	r3, #18
 8010748:	2100      	movs	r1, #0
 801074a:	4618      	mov	r0, r3
 801074c:	f7fc ffd3 	bl	800d6f6 <st_word>
					fs->wflag = 1;
 8010750:	68bb      	ldr	r3, [r7, #8]
 8010752:	2201      	movs	r2, #1
 8010754:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8010756:	68bb      	ldr	r3, [r7, #8]
 8010758:	4618      	mov	r0, r3
 801075a:	f7fd fa6f 	bl	800dc3c <sync_fs>
 801075e:	4603      	mov	r3, r0
 8010760:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	7d1b      	ldrb	r3, [r3, #20]
 8010766:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801076a:	b2da      	uxtb	r2, r3
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8010770:	7dfb      	ldrb	r3, [r7, #23]
}
 8010772:	4618      	mov	r0, r3
 8010774:	3718      	adds	r7, #24
 8010776:	46bd      	mov	sp, r7
 8010778:	bd80      	pop	{r7, pc}

0801077a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801077a:	b580      	push	{r7, lr}
 801077c:	b084      	sub	sp, #16
 801077e:	af00      	add	r7, sp, #0
 8010780:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8010782:	6878      	ldr	r0, [r7, #4]
 8010784:	f7ff ff7b 	bl	801067e <f_sync>
 8010788:	4603      	mov	r3, r0
 801078a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801078c:	7bfb      	ldrb	r3, [r7, #15]
 801078e:	2b00      	cmp	r3, #0
 8010790:	d118      	bne.n	80107c4 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	f107 0208 	add.w	r2, r7, #8
 8010798:	4611      	mov	r1, r2
 801079a:	4618      	mov	r0, r3
 801079c:	f7ff fa34 	bl	800fc08 <validate>
 80107a0:	4603      	mov	r3, r0
 80107a2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80107a4:	7bfb      	ldrb	r3, [r7, #15]
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d10c      	bne.n	80107c4 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	691b      	ldr	r3, [r3, #16]
 80107ae:	4618      	mov	r0, r3
 80107b0:	f7fd f972 	bl	800da98 <dec_lock>
 80107b4:	4603      	mov	r3, r0
 80107b6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80107b8:	7bfb      	ldrb	r3, [r7, #15]
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	d102      	bne.n	80107c4 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	2200      	movs	r2, #0
 80107c2:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80107c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80107c6:	4618      	mov	r0, r3
 80107c8:	3710      	adds	r7, #16
 80107ca:	46bd      	mov	sp, r7
 80107cc:	bd80      	pop	{r7, pc}

080107ce <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 80107ce:	b590      	push	{r4, r7, lr}
 80107d0:	b093      	sub	sp, #76	; 0x4c
 80107d2:	af00      	add	r7, sp, #0
 80107d4:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 80107d6:	f107 010c 	add.w	r1, r7, #12
 80107da:	1d3b      	adds	r3, r7, #4
 80107dc:	2200      	movs	r2, #0
 80107de:	4618      	mov	r0, r3
 80107e0:	f7fe ff86 	bl	800f6f0 <find_volume>
 80107e4:	4603      	mov	r3, r0
 80107e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 80107ea:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d131      	bne.n	8010856 <f_chdir+0x88>
		dj.obj.fs = fs;
 80107f2:	68fb      	ldr	r3, [r7, #12]
 80107f4:	613b      	str	r3, [r7, #16]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 80107f6:	687a      	ldr	r2, [r7, #4]
 80107f8:	f107 0310 	add.w	r3, r7, #16
 80107fc:	4611      	mov	r1, r2
 80107fe:	4618      	mov	r0, r3
 8010800:	f7fe fe46 	bl	800f490 <follow_path>
 8010804:	4603      	mov	r3, r0
 8010806:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (res == FR_OK) {					/* Follow completed */
 801080a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801080e:	2b00      	cmp	r3, #0
 8010810:	d11a      	bne.n	8010848 <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8010812:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010816:	b25b      	sxtb	r3, r3
 8010818:	2b00      	cmp	r3, #0
 801081a:	da03      	bge.n	8010824 <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 801081c:	68fb      	ldr	r3, [r7, #12]
 801081e:	69ba      	ldr	r2, [r7, #24]
 8010820:	61da      	str	r2, [r3, #28]
 8010822:	e011      	b.n	8010848 <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 8010824:	7dbb      	ldrb	r3, [r7, #22]
 8010826:	f003 0310 	and.w	r3, r3, #16
 801082a:	2b00      	cmp	r3, #0
 801082c:	d009      	beq.n	8010842 <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 801082e:	68fb      	ldr	r3, [r7, #12]
 8010830:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010832:	68fc      	ldr	r4, [r7, #12]
 8010834:	4611      	mov	r1, r2
 8010836:	4618      	mov	r0, r3
 8010838:	f7fd ff51 	bl	800e6de <ld_clust>
 801083c:	4603      	mov	r3, r0
 801083e:	61e3      	str	r3, [r4, #28]
 8010840:	e002      	b.n	8010848 <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 8010842:	2305      	movs	r3, #5
 8010844:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8010848:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801084c:	2b04      	cmp	r3, #4
 801084e:	d102      	bne.n	8010856 <f_chdir+0x88>
 8010850:	2305      	movs	r3, #5
 8010852:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	}

	LEAVE_FF(fs, res);
 8010856:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 801085a:	4618      	mov	r0, r3
 801085c:	374c      	adds	r7, #76	; 0x4c
 801085e:	46bd      	mov	sp, r7
 8010860:	bd90      	pop	{r4, r7, pc}

08010862 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8010862:	b580      	push	{r7, lr}
 8010864:	b090      	sub	sp, #64	; 0x40
 8010866:	af00      	add	r7, sp, #0
 8010868:	6078      	str	r0, [r7, #4]
 801086a:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	f107 0208 	add.w	r2, r7, #8
 8010872:	4611      	mov	r1, r2
 8010874:	4618      	mov	r0, r3
 8010876:	f7ff f9c7 	bl	800fc08 <validate>
 801087a:	4603      	mov	r3, r0
 801087c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8010880:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010884:	2b00      	cmp	r3, #0
 8010886:	d103      	bne.n	8010890 <f_lseek+0x2e>
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	7d5b      	ldrb	r3, [r3, #21]
 801088c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8010890:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010894:	2b00      	cmp	r3, #0
 8010896:	d002      	beq.n	801089e <f_lseek+0x3c>
 8010898:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801089c:	e201      	b.n	8010ca2 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	f000 80d9 	beq.w	8010a5a <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80108a8:	683b      	ldr	r3, [r7, #0]
 80108aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80108ae:	d15a      	bne.n	8010966 <f_lseek+0x104>
			tbl = fp->cltbl;
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80108b4:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80108b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108b8:	1d1a      	adds	r2, r3, #4
 80108ba:	627a      	str	r2, [r7, #36]	; 0x24
 80108bc:	681b      	ldr	r3, [r3, #0]
 80108be:	617b      	str	r3, [r7, #20]
 80108c0:	2302      	movs	r3, #2
 80108c2:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	689b      	ldr	r3, [r3, #8]
 80108c8:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 80108ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d03a      	beq.n	8010946 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80108d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108d2:	613b      	str	r3, [r7, #16]
 80108d4:	2300      	movs	r3, #0
 80108d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80108d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108da:	3302      	adds	r3, #2
 80108dc:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 80108de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108e0:	60fb      	str	r3, [r7, #12]
 80108e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108e4:	3301      	adds	r3, #1
 80108e6:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80108ec:	4618      	mov	r0, r3
 80108ee:	f7fd fa34 	bl	800dd5a <get_fat>
 80108f2:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 80108f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108f6:	2b01      	cmp	r3, #1
 80108f8:	d804      	bhi.n	8010904 <f_lseek+0xa2>
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	2202      	movs	r2, #2
 80108fe:	755a      	strb	r2, [r3, #21]
 8010900:	2302      	movs	r3, #2
 8010902:	e1ce      	b.n	8010ca2 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010906:	f1b3 3fff 	cmp.w	r3, #4294967295
 801090a:	d104      	bne.n	8010916 <f_lseek+0xb4>
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	2201      	movs	r2, #1
 8010910:	755a      	strb	r2, [r3, #21]
 8010912:	2301      	movs	r3, #1
 8010914:	e1c5      	b.n	8010ca2 <f_lseek+0x440>
					} while (cl == pcl + 1);
 8010916:	68fb      	ldr	r3, [r7, #12]
 8010918:	3301      	adds	r3, #1
 801091a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801091c:	429a      	cmp	r2, r3
 801091e:	d0de      	beq.n	80108de <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8010920:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010922:	697b      	ldr	r3, [r7, #20]
 8010924:	429a      	cmp	r2, r3
 8010926:	d809      	bhi.n	801093c <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8010928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801092a:	1d1a      	adds	r2, r3, #4
 801092c:	627a      	str	r2, [r7, #36]	; 0x24
 801092e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010930:	601a      	str	r2, [r3, #0]
 8010932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010934:	1d1a      	adds	r2, r3, #4
 8010936:	627a      	str	r2, [r7, #36]	; 0x24
 8010938:	693a      	ldr	r2, [r7, #16]
 801093a:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 801093c:	68bb      	ldr	r3, [r7, #8]
 801093e:	6a1b      	ldr	r3, [r3, #32]
 8010940:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010942:	429a      	cmp	r2, r3
 8010944:	d3c4      	bcc.n	80108d0 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801094a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801094c:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 801094e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010950:	697b      	ldr	r3, [r7, #20]
 8010952:	429a      	cmp	r2, r3
 8010954:	d803      	bhi.n	801095e <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8010956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010958:	2200      	movs	r2, #0
 801095a:	601a      	str	r2, [r3, #0]
 801095c:	e19f      	b.n	8010c9e <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 801095e:	2311      	movs	r3, #17
 8010960:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8010964:	e19b      	b.n	8010c9e <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	68db      	ldr	r3, [r3, #12]
 801096a:	683a      	ldr	r2, [r7, #0]
 801096c:	429a      	cmp	r2, r3
 801096e:	d902      	bls.n	8010976 <f_lseek+0x114>
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	68db      	ldr	r3, [r3, #12]
 8010974:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	683a      	ldr	r2, [r7, #0]
 801097a:	619a      	str	r2, [r3, #24]
			if (ofs) {
 801097c:	683b      	ldr	r3, [r7, #0]
 801097e:	2b00      	cmp	r3, #0
 8010980:	f000 818d 	beq.w	8010c9e <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8010984:	683b      	ldr	r3, [r7, #0]
 8010986:	3b01      	subs	r3, #1
 8010988:	4619      	mov	r1, r3
 801098a:	6878      	ldr	r0, [r7, #4]
 801098c:	f7fd fcc9 	bl	800e322 <clmt_clust>
 8010990:	4602      	mov	r2, r0
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8010996:	68ba      	ldr	r2, [r7, #8]
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	69db      	ldr	r3, [r3, #28]
 801099c:	4619      	mov	r1, r3
 801099e:	4610      	mov	r0, r2
 80109a0:	f7fd f9bc 	bl	800dd1c <clust2sect>
 80109a4:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80109a6:	69bb      	ldr	r3, [r7, #24]
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d104      	bne.n	80109b6 <f_lseek+0x154>
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	2202      	movs	r2, #2
 80109b0:	755a      	strb	r2, [r3, #21]
 80109b2:	2302      	movs	r3, #2
 80109b4:	e175      	b.n	8010ca2 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80109b6:	683b      	ldr	r3, [r7, #0]
 80109b8:	3b01      	subs	r3, #1
 80109ba:	68ba      	ldr	r2, [r7, #8]
 80109bc:	8992      	ldrh	r2, [r2, #12]
 80109be:	fbb3 f3f2 	udiv	r3, r3, r2
 80109c2:	68ba      	ldr	r2, [r7, #8]
 80109c4:	8952      	ldrh	r2, [r2, #10]
 80109c6:	3a01      	subs	r2, #1
 80109c8:	4013      	ands	r3, r2
 80109ca:	69ba      	ldr	r2, [r7, #24]
 80109cc:	4413      	add	r3, r2
 80109ce:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	699b      	ldr	r3, [r3, #24]
 80109d4:	68ba      	ldr	r2, [r7, #8]
 80109d6:	8992      	ldrh	r2, [r2, #12]
 80109d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80109dc:	fb02 f201 	mul.w	r2, r2, r1
 80109e0:	1a9b      	subs	r3, r3, r2
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	f000 815b 	beq.w	8010c9e <f_lseek+0x43c>
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	6a1b      	ldr	r3, [r3, #32]
 80109ec:	69ba      	ldr	r2, [r7, #24]
 80109ee:	429a      	cmp	r2, r3
 80109f0:	f000 8155 	beq.w	8010c9e <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	7d1b      	ldrb	r3, [r3, #20]
 80109f8:	b25b      	sxtb	r3, r3
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	da18      	bge.n	8010a30 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80109fe:	68bb      	ldr	r3, [r7, #8]
 8010a00:	7858      	ldrb	r0, [r3, #1]
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	6a1a      	ldr	r2, [r3, #32]
 8010a0c:	2301      	movs	r3, #1
 8010a0e:	f7fc fdf9 	bl	800d604 <disk_write>
 8010a12:	4603      	mov	r3, r0
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d004      	beq.n	8010a22 <f_lseek+0x1c0>
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	2201      	movs	r2, #1
 8010a1c:	755a      	strb	r2, [r3, #21]
 8010a1e:	2301      	movs	r3, #1
 8010a20:	e13f      	b.n	8010ca2 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	7d1b      	ldrb	r3, [r3, #20]
 8010a26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010a2a:	b2da      	uxtb	r2, r3
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8010a30:	68bb      	ldr	r3, [r7, #8]
 8010a32:	7858      	ldrb	r0, [r3, #1]
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010a3a:	2301      	movs	r3, #1
 8010a3c:	69ba      	ldr	r2, [r7, #24]
 8010a3e:	f7fc fdc1 	bl	800d5c4 <disk_read>
 8010a42:	4603      	mov	r3, r0
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d004      	beq.n	8010a52 <f_lseek+0x1f0>
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	2201      	movs	r2, #1
 8010a4c:	755a      	strb	r2, [r3, #21]
 8010a4e:	2301      	movs	r3, #1
 8010a50:	e127      	b.n	8010ca2 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	69ba      	ldr	r2, [r7, #24]
 8010a56:	621a      	str	r2, [r3, #32]
 8010a58:	e121      	b.n	8010c9e <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	68db      	ldr	r3, [r3, #12]
 8010a5e:	683a      	ldr	r2, [r7, #0]
 8010a60:	429a      	cmp	r2, r3
 8010a62:	d908      	bls.n	8010a76 <f_lseek+0x214>
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	7d1b      	ldrb	r3, [r3, #20]
 8010a68:	f003 0302 	and.w	r3, r3, #2
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d102      	bne.n	8010a76 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	68db      	ldr	r3, [r3, #12]
 8010a74:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	699b      	ldr	r3, [r3, #24]
 8010a7a:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8010a7c:	2300      	movs	r3, #0
 8010a7e:	637b      	str	r3, [r7, #52]	; 0x34
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010a84:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8010a86:	683b      	ldr	r3, [r7, #0]
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	f000 80b5 	beq.w	8010bf8 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8010a8e:	68bb      	ldr	r3, [r7, #8]
 8010a90:	895b      	ldrh	r3, [r3, #10]
 8010a92:	461a      	mov	r2, r3
 8010a94:	68bb      	ldr	r3, [r7, #8]
 8010a96:	899b      	ldrh	r3, [r3, #12]
 8010a98:	fb03 f302 	mul.w	r3, r3, r2
 8010a9c:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8010a9e:	6a3b      	ldr	r3, [r7, #32]
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d01b      	beq.n	8010adc <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8010aa4:	683b      	ldr	r3, [r7, #0]
 8010aa6:	1e5a      	subs	r2, r3, #1
 8010aa8:	69fb      	ldr	r3, [r7, #28]
 8010aaa:	fbb2 f2f3 	udiv	r2, r2, r3
 8010aae:	6a3b      	ldr	r3, [r7, #32]
 8010ab0:	1e59      	subs	r1, r3, #1
 8010ab2:	69fb      	ldr	r3, [r7, #28]
 8010ab4:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8010ab8:	429a      	cmp	r2, r3
 8010aba:	d30f      	bcc.n	8010adc <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8010abc:	6a3b      	ldr	r3, [r7, #32]
 8010abe:	1e5a      	subs	r2, r3, #1
 8010ac0:	69fb      	ldr	r3, [r7, #28]
 8010ac2:	425b      	negs	r3, r3
 8010ac4:	401a      	ands	r2, r3
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	699b      	ldr	r3, [r3, #24]
 8010ace:	683a      	ldr	r2, [r7, #0]
 8010ad0:	1ad3      	subs	r3, r2, r3
 8010ad2:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	69db      	ldr	r3, [r3, #28]
 8010ad8:	63bb      	str	r3, [r7, #56]	; 0x38
 8010ada:	e022      	b.n	8010b22 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	689b      	ldr	r3, [r3, #8]
 8010ae0:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8010ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d119      	bne.n	8010b1c <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	2100      	movs	r1, #0
 8010aec:	4618      	mov	r0, r3
 8010aee:	f7fd fb80 	bl	800e1f2 <create_chain>
 8010af2:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8010af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010af6:	2b01      	cmp	r3, #1
 8010af8:	d104      	bne.n	8010b04 <f_lseek+0x2a2>
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	2202      	movs	r2, #2
 8010afe:	755a      	strb	r2, [r3, #21]
 8010b00:	2302      	movs	r3, #2
 8010b02:	e0ce      	b.n	8010ca2 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b0a:	d104      	bne.n	8010b16 <f_lseek+0x2b4>
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	2201      	movs	r2, #1
 8010b10:	755a      	strb	r2, [r3, #21]
 8010b12:	2301      	movs	r3, #1
 8010b14:	e0c5      	b.n	8010ca2 <f_lseek+0x440>
					fp->obj.sclust = clst;
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010b1a:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010b20:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8010b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d067      	beq.n	8010bf8 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8010b28:	e03a      	b.n	8010ba0 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8010b2a:	683a      	ldr	r2, [r7, #0]
 8010b2c:	69fb      	ldr	r3, [r7, #28]
 8010b2e:	1ad3      	subs	r3, r2, r3
 8010b30:	603b      	str	r3, [r7, #0]
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	699a      	ldr	r2, [r3, #24]
 8010b36:	69fb      	ldr	r3, [r7, #28]
 8010b38:	441a      	add	r2, r3
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	7d1b      	ldrb	r3, [r3, #20]
 8010b42:	f003 0302 	and.w	r3, r3, #2
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d00b      	beq.n	8010b62 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010b4e:	4618      	mov	r0, r3
 8010b50:	f7fd fb4f 	bl	800e1f2 <create_chain>
 8010b54:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8010b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d108      	bne.n	8010b6e <f_lseek+0x30c>
							ofs = 0; break;
 8010b5c:	2300      	movs	r3, #0
 8010b5e:	603b      	str	r3, [r7, #0]
 8010b60:	e022      	b.n	8010ba8 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010b66:	4618      	mov	r0, r3
 8010b68:	f7fd f8f7 	bl	800dd5a <get_fat>
 8010b6c:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b74:	d104      	bne.n	8010b80 <f_lseek+0x31e>
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	2201      	movs	r2, #1
 8010b7a:	755a      	strb	r2, [r3, #21]
 8010b7c:	2301      	movs	r3, #1
 8010b7e:	e090      	b.n	8010ca2 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8010b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b82:	2b01      	cmp	r3, #1
 8010b84:	d904      	bls.n	8010b90 <f_lseek+0x32e>
 8010b86:	68bb      	ldr	r3, [r7, #8]
 8010b88:	6a1b      	ldr	r3, [r3, #32]
 8010b8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010b8c:	429a      	cmp	r2, r3
 8010b8e:	d304      	bcc.n	8010b9a <f_lseek+0x338>
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	2202      	movs	r2, #2
 8010b94:	755a      	strb	r2, [r3, #21]
 8010b96:	2302      	movs	r3, #2
 8010b98:	e083      	b.n	8010ca2 <f_lseek+0x440>
					fp->clust = clst;
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010b9e:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8010ba0:	683a      	ldr	r2, [r7, #0]
 8010ba2:	69fb      	ldr	r3, [r7, #28]
 8010ba4:	429a      	cmp	r2, r3
 8010ba6:	d8c0      	bhi.n	8010b2a <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	699a      	ldr	r2, [r3, #24]
 8010bac:	683b      	ldr	r3, [r7, #0]
 8010bae:	441a      	add	r2, r3
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8010bb4:	68bb      	ldr	r3, [r7, #8]
 8010bb6:	899b      	ldrh	r3, [r3, #12]
 8010bb8:	461a      	mov	r2, r3
 8010bba:	683b      	ldr	r3, [r7, #0]
 8010bbc:	fbb3 f1f2 	udiv	r1, r3, r2
 8010bc0:	fb02 f201 	mul.w	r2, r2, r1
 8010bc4:	1a9b      	subs	r3, r3, r2
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d016      	beq.n	8010bf8 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8010bca:	68bb      	ldr	r3, [r7, #8]
 8010bcc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010bce:	4618      	mov	r0, r3
 8010bd0:	f7fd f8a4 	bl	800dd1c <clust2sect>
 8010bd4:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8010bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d104      	bne.n	8010be6 <f_lseek+0x384>
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	2202      	movs	r2, #2
 8010be0:	755a      	strb	r2, [r3, #21]
 8010be2:	2302      	movs	r3, #2
 8010be4:	e05d      	b.n	8010ca2 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8010be6:	68bb      	ldr	r3, [r7, #8]
 8010be8:	899b      	ldrh	r3, [r3, #12]
 8010bea:	461a      	mov	r2, r3
 8010bec:	683b      	ldr	r3, [r7, #0]
 8010bee:	fbb3 f3f2 	udiv	r3, r3, r2
 8010bf2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010bf4:	4413      	add	r3, r2
 8010bf6:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	699a      	ldr	r2, [r3, #24]
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	68db      	ldr	r3, [r3, #12]
 8010c00:	429a      	cmp	r2, r3
 8010c02:	d90a      	bls.n	8010c1a <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	699a      	ldr	r2, [r3, #24]
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	7d1b      	ldrb	r3, [r3, #20]
 8010c10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010c14:	b2da      	uxtb	r2, r3
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	699b      	ldr	r3, [r3, #24]
 8010c1e:	68ba      	ldr	r2, [r7, #8]
 8010c20:	8992      	ldrh	r2, [r2, #12]
 8010c22:	fbb3 f1f2 	udiv	r1, r3, r2
 8010c26:	fb02 f201 	mul.w	r2, r2, r1
 8010c2a:	1a9b      	subs	r3, r3, r2
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d036      	beq.n	8010c9e <f_lseek+0x43c>
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	6a1b      	ldr	r3, [r3, #32]
 8010c34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010c36:	429a      	cmp	r2, r3
 8010c38:	d031      	beq.n	8010c9e <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	7d1b      	ldrb	r3, [r3, #20]
 8010c3e:	b25b      	sxtb	r3, r3
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	da18      	bge.n	8010c76 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010c44:	68bb      	ldr	r3, [r7, #8]
 8010c46:	7858      	ldrb	r0, [r3, #1]
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	6a1a      	ldr	r2, [r3, #32]
 8010c52:	2301      	movs	r3, #1
 8010c54:	f7fc fcd6 	bl	800d604 <disk_write>
 8010c58:	4603      	mov	r3, r0
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	d004      	beq.n	8010c68 <f_lseek+0x406>
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	2201      	movs	r2, #1
 8010c62:	755a      	strb	r2, [r3, #21]
 8010c64:	2301      	movs	r3, #1
 8010c66:	e01c      	b.n	8010ca2 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	7d1b      	ldrb	r3, [r3, #20]
 8010c6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010c70:	b2da      	uxtb	r2, r3
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8010c76:	68bb      	ldr	r3, [r7, #8]
 8010c78:	7858      	ldrb	r0, [r3, #1]
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010c80:	2301      	movs	r3, #1
 8010c82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010c84:	f7fc fc9e 	bl	800d5c4 <disk_read>
 8010c88:	4603      	mov	r3, r0
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d004      	beq.n	8010c98 <f_lseek+0x436>
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	2201      	movs	r2, #1
 8010c92:	755a      	strb	r2, [r3, #21]
 8010c94:	2301      	movs	r3, #1
 8010c96:	e004      	b.n	8010ca2 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010c9c:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8010c9e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8010ca2:	4618      	mov	r0, r3
 8010ca4:	3740      	adds	r7, #64	; 0x40
 8010ca6:	46bd      	mov	sp, r7
 8010ca8:	bd80      	pop	{r7, pc}

08010caa <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8010caa:	b580      	push	{r7, lr}
 8010cac:	b0a0      	sub	sp, #128	; 0x80
 8010cae:	af00      	add	r7, sp, #0
 8010cb0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8010cb2:	2300      	movs	r3, #0
 8010cb4:	67bb      	str	r3, [r7, #120]	; 0x78
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8010cb6:	f107 010c 	add.w	r1, r7, #12
 8010cba:	1d3b      	adds	r3, r7, #4
 8010cbc:	2202      	movs	r2, #2
 8010cbe:	4618      	mov	r0, r3
 8010cc0:	f7fe fd16 	bl	800f6f0 <find_volume>
 8010cc4:	4603      	mov	r3, r0
 8010cc6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	dj.obj.fs = fs;
 8010cca:	68fb      	ldr	r3, [r7, #12]
 8010ccc:	647b      	str	r3, [r7, #68]	; 0x44
	if (res == FR_OK) {
 8010cce:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	f040 80a4 	bne.w	8010e20 <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8010cd8:	687a      	ldr	r2, [r7, #4]
 8010cda:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8010cde:	4611      	mov	r1, r2
 8010ce0:	4618      	mov	r0, r3
 8010ce2:	f7fe fbd5 	bl	800f490 <follow_path>
 8010ce6:	4603      	mov	r3, r0
 8010ce8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 8010cec:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	d108      	bne.n	8010d06 <f_unlink+0x5c>
 8010cf4:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8010cf8:	f003 0320 	and.w	r3, r3, #32
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d002      	beq.n	8010d06 <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 8010d00:	2306      	movs	r3, #6
 8010d02:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8010d06:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d108      	bne.n	8010d20 <f_unlink+0x76>
 8010d0e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8010d12:	2102      	movs	r1, #2
 8010d14:	4618      	mov	r0, r3
 8010d16:	f7fc fdb3 	bl	800d880 <chk_lock>
 8010d1a:	4603      	mov	r3, r0
 8010d1c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8010d20:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d17b      	bne.n	8010e20 <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8010d28:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8010d2c:	b25b      	sxtb	r3, r3
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	da03      	bge.n	8010d3a <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8010d32:	2306      	movs	r3, #6
 8010d34:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8010d38:	e008      	b.n	8010d4c <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8010d3a:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8010d3e:	f003 0301 	and.w	r3, r3, #1
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d002      	beq.n	8010d4c <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8010d46:	2307      	movs	r3, #7
 8010d48:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				}
			}
			if (res == FR_OK) {
 8010d4c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	d13d      	bne.n	8010dd0 <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8010d54:	68fb      	ldr	r3, [r7, #12]
 8010d56:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010d58:	4611      	mov	r1, r2
 8010d5a:	4618      	mov	r0, r3
 8010d5c:	f7fd fcbf 	bl	800e6de <ld_clust>
 8010d60:	67b8      	str	r0, [r7, #120]	; 0x78
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8010d62:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8010d66:	f003 0310 	and.w	r3, r3, #16
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	d030      	beq.n	8010dd0 <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 8010d6e:	68fb      	ldr	r3, [r7, #12]
 8010d70:	69db      	ldr	r3, [r3, #28]
 8010d72:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8010d74:	429a      	cmp	r2, r3
 8010d76:	d103      	bne.n	8010d80 <f_unlink+0xd6>
						res = FR_DENIED;
 8010d78:	2307      	movs	r3, #7
 8010d7a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8010d7e:	e027      	b.n	8010dd0 <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8010d80:	68fb      	ldr	r3, [r7, #12]
 8010d82:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8010d84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010d86:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8010d88:	f107 0310 	add.w	r3, r7, #16
 8010d8c:	2100      	movs	r1, #0
 8010d8e:	4618      	mov	r0, r3
 8010d90:	f7fd faff 	bl	800e392 <dir_sdi>
 8010d94:	4603      	mov	r3, r0
 8010d96:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						if (res == FR_OK) {
 8010d9a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	d116      	bne.n	8010dd0 <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 8010da2:	f107 0310 	add.w	r3, r7, #16
 8010da6:	2100      	movs	r1, #0
 8010da8:	4618      	mov	r0, r3
 8010daa:	f7fd fec3 	bl	800eb34 <dir_read>
 8010dae:	4603      	mov	r3, r0
 8010db0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8010db4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	d102      	bne.n	8010dc2 <f_unlink+0x118>
 8010dbc:	2307      	movs	r3, #7
 8010dbe:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8010dc2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8010dc6:	2b04      	cmp	r3, #4
 8010dc8:	d102      	bne.n	8010dd0 <f_unlink+0x126>
 8010dca:	2300      	movs	r3, #0
 8010dcc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						}
					}
				}
			}
			if (res == FR_OK) {
 8010dd0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d123      	bne.n	8010e20 <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8010dd8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8010ddc:	4618      	mov	r0, r3
 8010dde:	f7fe f909 	bl	800eff4 <dir_remove>
 8010de2:	4603      	mov	r3, r0
 8010de4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8010de8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d10c      	bne.n	8010e0a <f_unlink+0x160>
 8010df0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	d009      	beq.n	8010e0a <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8010df6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8010dfa:	2200      	movs	r2, #0
 8010dfc:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8010dfe:	4618      	mov	r0, r3
 8010e00:	f7fd f992 	bl	800e128 <remove_chain>
 8010e04:	4603      	mov	r3, r0
 8010e06:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8010e0a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	d106      	bne.n	8010e20 <f_unlink+0x176>
 8010e12:	68fb      	ldr	r3, [r7, #12]
 8010e14:	4618      	mov	r0, r3
 8010e16:	f7fc ff11 	bl	800dc3c <sync_fs>
 8010e1a:	4603      	mov	r3, r0
 8010e1c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8010e20:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8010e24:	4618      	mov	r0, r3
 8010e26:	3780      	adds	r7, #128	; 0x80
 8010e28:	46bd      	mov	sp, r7
 8010e2a:	bd80      	pop	{r7, pc}

08010e2c <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8010e2c:	b580      	push	{r7, lr}
 8010e2e:	b098      	sub	sp, #96	; 0x60
 8010e30:	af00      	add	r7, sp, #0
 8010e32:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8010e34:	f107 010c 	add.w	r1, r7, #12
 8010e38:	1d3b      	adds	r3, r7, #4
 8010e3a:	2202      	movs	r2, #2
 8010e3c:	4618      	mov	r0, r3
 8010e3e:	f7fe fc57 	bl	800f6f0 <find_volume>
 8010e42:	4603      	mov	r3, r0
 8010e44:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	dj.obj.fs = fs;
 8010e48:	68fb      	ldr	r3, [r7, #12]
 8010e4a:	613b      	str	r3, [r7, #16]
	if (res == FR_OK) {
 8010e4c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	f040 80ff 	bne.w	8011054 <f_mkdir+0x228>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8010e56:	687a      	ldr	r2, [r7, #4]
 8010e58:	f107 0310 	add.w	r3, r7, #16
 8010e5c:	4611      	mov	r1, r2
 8010e5e:	4618      	mov	r0, r3
 8010e60:	f7fe fb16 	bl	800f490 <follow_path>
 8010e64:	4603      	mov	r3, r0
 8010e66:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8010e6a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d102      	bne.n	8010e78 <f_mkdir+0x4c>
 8010e72:	2308      	movs	r3, #8
 8010e74:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 8010e78:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010e7c:	2b04      	cmp	r3, #4
 8010e7e:	d108      	bne.n	8010e92 <f_mkdir+0x66>
 8010e80:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010e84:	f003 0320 	and.w	r3, r3, #32
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d002      	beq.n	8010e92 <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 8010e8c:	2306      	movs	r3, #6
 8010e8e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8010e92:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010e96:	2b04      	cmp	r3, #4
 8010e98:	f040 80dc 	bne.w	8011054 <f_mkdir+0x228>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8010e9c:	f107 0310 	add.w	r3, r7, #16
 8010ea0:	2100      	movs	r1, #0
 8010ea2:	4618      	mov	r0, r3
 8010ea4:	f7fd f9a5 	bl	800e1f2 <create_chain>
 8010ea8:	64f8      	str	r0, [r7, #76]	; 0x4c
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8010eaa:	68fb      	ldr	r3, [r7, #12]
 8010eac:	895b      	ldrh	r3, [r3, #10]
 8010eae:	461a      	mov	r2, r3
 8010eb0:	68fb      	ldr	r3, [r7, #12]
 8010eb2:	899b      	ldrh	r3, [r3, #12]
 8010eb4:	fb03 f302 	mul.w	r3, r3, r2
 8010eb8:	61fb      	str	r3, [r7, #28]
			res = FR_OK;
 8010eba:	2300      	movs	r3, #0
 8010ebc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8010ec0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d102      	bne.n	8010ecc <f_mkdir+0xa0>
 8010ec6:	2307      	movs	r3, #7
 8010ec8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 1) res = FR_INT_ERR;
 8010ecc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ece:	2b01      	cmp	r3, #1
 8010ed0:	d102      	bne.n	8010ed8 <f_mkdir+0xac>
 8010ed2:	2302      	movs	r3, #2
 8010ed4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8010ed8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ede:	d102      	bne.n	8010ee6 <f_mkdir+0xba>
 8010ee0:	2301      	movs	r3, #1
 8010ee2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8010ee6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d106      	bne.n	8010efc <f_mkdir+0xd0>
 8010eee:	68fb      	ldr	r3, [r7, #12]
 8010ef0:	4618      	mov	r0, r3
 8010ef2:	f7fc fe31 	bl	800db58 <sync_window>
 8010ef6:	4603      	mov	r3, r0
 8010ef8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			tm = GET_FATTIME();
 8010efc:	f7fc f8d2 	bl	800d0a4 <get_fattime>
 8010f00:	64b8      	str	r0, [r7, #72]	; 0x48
			if (res == FR_OK) {					/* Initialize the new directory table */
 8010f02:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d16c      	bne.n	8010fe4 <f_mkdir+0x1b8>
				dsc = clust2sect(fs, dcl);
 8010f0a:	68fb      	ldr	r3, [r7, #12]
 8010f0c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8010f0e:	4618      	mov	r0, r3
 8010f10:	f7fc ff04 	bl	800dd1c <clust2sect>
 8010f14:	6578      	str	r0, [r7, #84]	; 0x54
				dir = fs->win;
 8010f16:	68fb      	ldr	r3, [r7, #12]
 8010f18:	333c      	adds	r3, #60	; 0x3c
 8010f1a:	647b      	str	r3, [r7, #68]	; 0x44
				mem_set(dir, 0, SS(fs));
 8010f1c:	68fb      	ldr	r3, [r7, #12]
 8010f1e:	899b      	ldrh	r3, [r3, #12]
 8010f20:	461a      	mov	r2, r3
 8010f22:	2100      	movs	r1, #0
 8010f24:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010f26:	f7fc fc4e 	bl	800d7c6 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8010f2a:	220b      	movs	r2, #11
 8010f2c:	2120      	movs	r1, #32
 8010f2e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010f30:	f7fc fc49 	bl	800d7c6 <mem_set>
					dir[DIR_Name] = '.';
 8010f34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010f36:	222e      	movs	r2, #46	; 0x2e
 8010f38:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8010f3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010f3c:	330b      	adds	r3, #11
 8010f3e:	2210      	movs	r2, #16
 8010f40:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8010f42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010f44:	3316      	adds	r3, #22
 8010f46:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8010f48:	4618      	mov	r0, r3
 8010f4a:	f7fc fbef 	bl	800d72c <st_dword>
					st_clust(fs, dir, dcl);
 8010f4e:	68fb      	ldr	r3, [r7, #12]
 8010f50:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010f52:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010f54:	4618      	mov	r0, r3
 8010f56:	f7fd fbe1 	bl	800e71c <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8010f5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010f5c:	3320      	adds	r3, #32
 8010f5e:	2220      	movs	r2, #32
 8010f60:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010f62:	4618      	mov	r0, r3
 8010f64:	f7fc fc0e 	bl	800d784 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8010f68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010f6a:	3321      	adds	r3, #33	; 0x21
 8010f6c:	222e      	movs	r2, #46	; 0x2e
 8010f6e:	701a      	strb	r2, [r3, #0]
 8010f70:	69bb      	ldr	r3, [r7, #24]
 8010f72:	653b      	str	r3, [r7, #80]	; 0x50
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8010f74:	68fb      	ldr	r3, [r7, #12]
 8010f76:	781b      	ldrb	r3, [r3, #0]
 8010f78:	2b03      	cmp	r3, #3
 8010f7a:	d106      	bne.n	8010f8a <f_mkdir+0x15e>
 8010f7c:	68fb      	ldr	r3, [r7, #12]
 8010f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f80:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010f82:	429a      	cmp	r2, r3
 8010f84:	d101      	bne.n	8010f8a <f_mkdir+0x15e>
 8010f86:	2300      	movs	r3, #0
 8010f88:	653b      	str	r3, [r7, #80]	; 0x50
					st_clust(fs, dir + SZDIRE, pcl);
 8010f8a:	68f8      	ldr	r0, [r7, #12]
 8010f8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010f8e:	3320      	adds	r3, #32
 8010f90:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010f92:	4619      	mov	r1, r3
 8010f94:	f7fd fbc2 	bl	800e71c <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8010f98:	68fb      	ldr	r3, [r7, #12]
 8010f9a:	895b      	ldrh	r3, [r3, #10]
 8010f9c:	65bb      	str	r3, [r7, #88]	; 0x58
 8010f9e:	e01c      	b.n	8010fda <f_mkdir+0x1ae>
					fs->winsect = dsc++;
 8010fa0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010fa2:	1c5a      	adds	r2, r3, #1
 8010fa4:	657a      	str	r2, [r7, #84]	; 0x54
 8010fa6:	68fa      	ldr	r2, [r7, #12]
 8010fa8:	6393      	str	r3, [r2, #56]	; 0x38
					fs->wflag = 1;
 8010faa:	68fb      	ldr	r3, [r7, #12]
 8010fac:	2201      	movs	r2, #1
 8010fae:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8010fb0:	68fb      	ldr	r3, [r7, #12]
 8010fb2:	4618      	mov	r0, r3
 8010fb4:	f7fc fdd0 	bl	800db58 <sync_window>
 8010fb8:	4603      	mov	r3, r0
 8010fba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (res != FR_OK) break;
 8010fbe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d10d      	bne.n	8010fe2 <f_mkdir+0x1b6>
					mem_set(dir, 0, SS(fs));
 8010fc6:	68fb      	ldr	r3, [r7, #12]
 8010fc8:	899b      	ldrh	r3, [r3, #12]
 8010fca:	461a      	mov	r2, r3
 8010fcc:	2100      	movs	r1, #0
 8010fce:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010fd0:	f7fc fbf9 	bl	800d7c6 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8010fd4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010fd6:	3b01      	subs	r3, #1
 8010fd8:	65bb      	str	r3, [r7, #88]	; 0x58
 8010fda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d1df      	bne.n	8010fa0 <f_mkdir+0x174>
 8010fe0:	e000      	b.n	8010fe4 <f_mkdir+0x1b8>
					if (res != FR_OK) break;
 8010fe2:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8010fe4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	d107      	bne.n	8010ffc <f_mkdir+0x1d0>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8010fec:	f107 0310 	add.w	r3, r7, #16
 8010ff0:	4618      	mov	r0, r3
 8010ff2:	f7fd ff07 	bl	800ee04 <dir_register>
 8010ff6:	4603      	mov	r3, r0
 8010ff8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
			if (res == FR_OK) {
 8010ffc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011000:	2b00      	cmp	r3, #0
 8011002:	d120      	bne.n	8011046 <f_mkdir+0x21a>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8011004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011006:	647b      	str	r3, [r7, #68]	; 0x44
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8011008:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801100a:	3316      	adds	r3, #22
 801100c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801100e:	4618      	mov	r0, r3
 8011010:	f7fc fb8c 	bl	800d72c <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8011014:	68fb      	ldr	r3, [r7, #12]
 8011016:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011018:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801101a:	4618      	mov	r0, r3
 801101c:	f7fd fb7e 	bl	800e71c <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8011020:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011022:	330b      	adds	r3, #11
 8011024:	2210      	movs	r2, #16
 8011026:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8011028:	68fb      	ldr	r3, [r7, #12]
 801102a:	2201      	movs	r2, #1
 801102c:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 801102e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011032:	2b00      	cmp	r3, #0
 8011034:	d10e      	bne.n	8011054 <f_mkdir+0x228>
					res = sync_fs(fs);
 8011036:	68fb      	ldr	r3, [r7, #12]
 8011038:	4618      	mov	r0, r3
 801103a:	f7fc fdff 	bl	800dc3c <sync_fs>
 801103e:	4603      	mov	r3, r0
 8011040:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8011044:	e006      	b.n	8011054 <f_mkdir+0x228>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8011046:	f107 0310 	add.w	r3, r7, #16
 801104a:	2200      	movs	r2, #0
 801104c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801104e:	4618      	mov	r0, r3
 8011050:	f7fd f86a 	bl	800e128 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8011054:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8011058:	4618      	mov	r0, r3
 801105a:	3760      	adds	r7, #96	; 0x60
 801105c:	46bd      	mov	sp, r7
 801105e:	bd80      	pop	{r7, pc}

08011060 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8011060:	b580      	push	{r7, lr}
 8011062:	b088      	sub	sp, #32
 8011064:	af00      	add	r7, sp, #0
 8011066:	60f8      	str	r0, [r7, #12]
 8011068:	60b9      	str	r1, [r7, #8]
 801106a:	607a      	str	r2, [r7, #4]
	int n = 0;
 801106c:	2300      	movs	r3, #0
 801106e:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8011070:	68fb      	ldr	r3, [r7, #12]
 8011072:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8011074:	e01b      	b.n	80110ae <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8011076:	f107 0310 	add.w	r3, r7, #16
 801107a:	f107 0114 	add.w	r1, r7, #20
 801107e:	2201      	movs	r2, #1
 8011080:	6878      	ldr	r0, [r7, #4]
 8011082:	f7ff f809 	bl	8010098 <f_read>
		if (rc != 1) break;
 8011086:	693b      	ldr	r3, [r7, #16]
 8011088:	2b01      	cmp	r3, #1
 801108a:	d116      	bne.n	80110ba <f_gets+0x5a>
		c = s[0];
 801108c:	7d3b      	ldrb	r3, [r7, #20]
 801108e:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8011090:	7dfb      	ldrb	r3, [r7, #23]
 8011092:	2b0d      	cmp	r3, #13
 8011094:	d100      	bne.n	8011098 <f_gets+0x38>
 8011096:	e00a      	b.n	80110ae <f_gets+0x4e>
		*p++ = c;
 8011098:	69bb      	ldr	r3, [r7, #24]
 801109a:	1c5a      	adds	r2, r3, #1
 801109c:	61ba      	str	r2, [r7, #24]
 801109e:	7dfa      	ldrb	r2, [r7, #23]
 80110a0:	701a      	strb	r2, [r3, #0]
		n++;
 80110a2:	69fb      	ldr	r3, [r7, #28]
 80110a4:	3301      	adds	r3, #1
 80110a6:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 80110a8:	7dfb      	ldrb	r3, [r7, #23]
 80110aa:	2b0a      	cmp	r3, #10
 80110ac:	d007      	beq.n	80110be <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80110ae:	68bb      	ldr	r3, [r7, #8]
 80110b0:	3b01      	subs	r3, #1
 80110b2:	69fa      	ldr	r2, [r7, #28]
 80110b4:	429a      	cmp	r2, r3
 80110b6:	dbde      	blt.n	8011076 <f_gets+0x16>
 80110b8:	e002      	b.n	80110c0 <f_gets+0x60>
		if (rc != 1) break;
 80110ba:	bf00      	nop
 80110bc:	e000      	b.n	80110c0 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 80110be:	bf00      	nop
	}
	*p = 0;
 80110c0:	69bb      	ldr	r3, [r7, #24]
 80110c2:	2200      	movs	r2, #0
 80110c4:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 80110c6:	69fb      	ldr	r3, [r7, #28]
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	d001      	beq.n	80110d0 <f_gets+0x70>
 80110cc:	68fb      	ldr	r3, [r7, #12]
 80110ce:	e000      	b.n	80110d2 <f_gets+0x72>
 80110d0:	2300      	movs	r3, #0
}
 80110d2:	4618      	mov	r0, r3
 80110d4:	3720      	adds	r7, #32
 80110d6:	46bd      	mov	sp, r7
 80110d8:	bd80      	pop	{r7, pc}
	...

080110dc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80110dc:	b480      	push	{r7}
 80110de:	b087      	sub	sp, #28
 80110e0:	af00      	add	r7, sp, #0
 80110e2:	60f8      	str	r0, [r7, #12]
 80110e4:	60b9      	str	r1, [r7, #8]
 80110e6:	4613      	mov	r3, r2
 80110e8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80110ea:	2301      	movs	r3, #1
 80110ec:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80110ee:	2300      	movs	r3, #0
 80110f0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80110f2:	4b1f      	ldr	r3, [pc, #124]	; (8011170 <FATFS_LinkDriverEx+0x94>)
 80110f4:	7a5b      	ldrb	r3, [r3, #9]
 80110f6:	b2db      	uxtb	r3, r3
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d131      	bne.n	8011160 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80110fc:	4b1c      	ldr	r3, [pc, #112]	; (8011170 <FATFS_LinkDriverEx+0x94>)
 80110fe:	7a5b      	ldrb	r3, [r3, #9]
 8011100:	b2db      	uxtb	r3, r3
 8011102:	461a      	mov	r2, r3
 8011104:	4b1a      	ldr	r3, [pc, #104]	; (8011170 <FATFS_LinkDriverEx+0x94>)
 8011106:	2100      	movs	r1, #0
 8011108:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801110a:	4b19      	ldr	r3, [pc, #100]	; (8011170 <FATFS_LinkDriverEx+0x94>)
 801110c:	7a5b      	ldrb	r3, [r3, #9]
 801110e:	b2db      	uxtb	r3, r3
 8011110:	4a17      	ldr	r2, [pc, #92]	; (8011170 <FATFS_LinkDriverEx+0x94>)
 8011112:	009b      	lsls	r3, r3, #2
 8011114:	4413      	add	r3, r2
 8011116:	68fa      	ldr	r2, [r7, #12]
 8011118:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801111a:	4b15      	ldr	r3, [pc, #84]	; (8011170 <FATFS_LinkDriverEx+0x94>)
 801111c:	7a5b      	ldrb	r3, [r3, #9]
 801111e:	b2db      	uxtb	r3, r3
 8011120:	461a      	mov	r2, r3
 8011122:	4b13      	ldr	r3, [pc, #76]	; (8011170 <FATFS_LinkDriverEx+0x94>)
 8011124:	4413      	add	r3, r2
 8011126:	79fa      	ldrb	r2, [r7, #7]
 8011128:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801112a:	4b11      	ldr	r3, [pc, #68]	; (8011170 <FATFS_LinkDriverEx+0x94>)
 801112c:	7a5b      	ldrb	r3, [r3, #9]
 801112e:	b2db      	uxtb	r3, r3
 8011130:	1c5a      	adds	r2, r3, #1
 8011132:	b2d1      	uxtb	r1, r2
 8011134:	4a0e      	ldr	r2, [pc, #56]	; (8011170 <FATFS_LinkDriverEx+0x94>)
 8011136:	7251      	strb	r1, [r2, #9]
 8011138:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801113a:	7dbb      	ldrb	r3, [r7, #22]
 801113c:	3330      	adds	r3, #48	; 0x30
 801113e:	b2da      	uxtb	r2, r3
 8011140:	68bb      	ldr	r3, [r7, #8]
 8011142:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8011144:	68bb      	ldr	r3, [r7, #8]
 8011146:	3301      	adds	r3, #1
 8011148:	223a      	movs	r2, #58	; 0x3a
 801114a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801114c:	68bb      	ldr	r3, [r7, #8]
 801114e:	3302      	adds	r3, #2
 8011150:	222f      	movs	r2, #47	; 0x2f
 8011152:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8011154:	68bb      	ldr	r3, [r7, #8]
 8011156:	3303      	adds	r3, #3
 8011158:	2200      	movs	r2, #0
 801115a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801115c:	2300      	movs	r3, #0
 801115e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8011160:	7dfb      	ldrb	r3, [r7, #23]
}
 8011162:	4618      	mov	r0, r3
 8011164:	371c      	adds	r7, #28
 8011166:	46bd      	mov	sp, r7
 8011168:	f85d 7b04 	ldr.w	r7, [sp], #4
 801116c:	4770      	bx	lr
 801116e:	bf00      	nop
 8011170:	2001f4e8 	.word	0x2001f4e8

08011174 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8011174:	b580      	push	{r7, lr}
 8011176:	b082      	sub	sp, #8
 8011178:	af00      	add	r7, sp, #0
 801117a:	6078      	str	r0, [r7, #4]
 801117c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801117e:	2200      	movs	r2, #0
 8011180:	6839      	ldr	r1, [r7, #0]
 8011182:	6878      	ldr	r0, [r7, #4]
 8011184:	f7ff ffaa 	bl	80110dc <FATFS_LinkDriverEx>
 8011188:	4603      	mov	r3, r0
}
 801118a:	4618      	mov	r0, r3
 801118c:	3708      	adds	r7, #8
 801118e:	46bd      	mov	sp, r7
 8011190:	bd80      	pop	{r7, pc}
	...

08011194 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8011194:	b480      	push	{r7}
 8011196:	b085      	sub	sp, #20
 8011198:	af00      	add	r7, sp, #0
 801119a:	4603      	mov	r3, r0
 801119c:	6039      	str	r1, [r7, #0]
 801119e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80111a0:	88fb      	ldrh	r3, [r7, #6]
 80111a2:	2b7f      	cmp	r3, #127	; 0x7f
 80111a4:	d802      	bhi.n	80111ac <ff_convert+0x18>
		c = chr;
 80111a6:	88fb      	ldrh	r3, [r7, #6]
 80111a8:	81fb      	strh	r3, [r7, #14]
 80111aa:	e025      	b.n	80111f8 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80111ac:	683b      	ldr	r3, [r7, #0]
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	d00b      	beq.n	80111ca <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80111b2:	88fb      	ldrh	r3, [r7, #6]
 80111b4:	2bff      	cmp	r3, #255	; 0xff
 80111b6:	d805      	bhi.n	80111c4 <ff_convert+0x30>
 80111b8:	88fb      	ldrh	r3, [r7, #6]
 80111ba:	3b80      	subs	r3, #128	; 0x80
 80111bc:	4a12      	ldr	r2, [pc, #72]	; (8011208 <ff_convert+0x74>)
 80111be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80111c2:	e000      	b.n	80111c6 <ff_convert+0x32>
 80111c4:	2300      	movs	r3, #0
 80111c6:	81fb      	strh	r3, [r7, #14]
 80111c8:	e016      	b.n	80111f8 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80111ca:	2300      	movs	r3, #0
 80111cc:	81fb      	strh	r3, [r7, #14]
 80111ce:	e009      	b.n	80111e4 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80111d0:	89fb      	ldrh	r3, [r7, #14]
 80111d2:	4a0d      	ldr	r2, [pc, #52]	; (8011208 <ff_convert+0x74>)
 80111d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80111d8:	88fa      	ldrh	r2, [r7, #6]
 80111da:	429a      	cmp	r2, r3
 80111dc:	d006      	beq.n	80111ec <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80111de:	89fb      	ldrh	r3, [r7, #14]
 80111e0:	3301      	adds	r3, #1
 80111e2:	81fb      	strh	r3, [r7, #14]
 80111e4:	89fb      	ldrh	r3, [r7, #14]
 80111e6:	2b7f      	cmp	r3, #127	; 0x7f
 80111e8:	d9f2      	bls.n	80111d0 <ff_convert+0x3c>
 80111ea:	e000      	b.n	80111ee <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80111ec:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80111ee:	89fb      	ldrh	r3, [r7, #14]
 80111f0:	3380      	adds	r3, #128	; 0x80
 80111f2:	b29b      	uxth	r3, r3
 80111f4:	b2db      	uxtb	r3, r3
 80111f6:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80111f8:	89fb      	ldrh	r3, [r7, #14]
}
 80111fa:	4618      	mov	r0, r3
 80111fc:	3714      	adds	r7, #20
 80111fe:	46bd      	mov	sp, r7
 8011200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011204:	4770      	bx	lr
 8011206:	bf00      	nop
 8011208:	08017544 	.word	0x08017544

0801120c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 801120c:	b480      	push	{r7}
 801120e:	b087      	sub	sp, #28
 8011210:	af00      	add	r7, sp, #0
 8011212:	4603      	mov	r3, r0
 8011214:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8011216:	88fb      	ldrh	r3, [r7, #6]
 8011218:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801121c:	d201      	bcs.n	8011222 <ff_wtoupper+0x16>
 801121e:	4b3e      	ldr	r3, [pc, #248]	; (8011318 <ff_wtoupper+0x10c>)
 8011220:	e000      	b.n	8011224 <ff_wtoupper+0x18>
 8011222:	4b3e      	ldr	r3, [pc, #248]	; (801131c <ff_wtoupper+0x110>)
 8011224:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8011226:	697b      	ldr	r3, [r7, #20]
 8011228:	1c9a      	adds	r2, r3, #2
 801122a:	617a      	str	r2, [r7, #20]
 801122c:	881b      	ldrh	r3, [r3, #0]
 801122e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8011230:	8a7b      	ldrh	r3, [r7, #18]
 8011232:	2b00      	cmp	r3, #0
 8011234:	d068      	beq.n	8011308 <ff_wtoupper+0xfc>
 8011236:	88fa      	ldrh	r2, [r7, #6]
 8011238:	8a7b      	ldrh	r3, [r7, #18]
 801123a:	429a      	cmp	r2, r3
 801123c:	d364      	bcc.n	8011308 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801123e:	697b      	ldr	r3, [r7, #20]
 8011240:	1c9a      	adds	r2, r3, #2
 8011242:	617a      	str	r2, [r7, #20]
 8011244:	881b      	ldrh	r3, [r3, #0]
 8011246:	823b      	strh	r3, [r7, #16]
 8011248:	8a3b      	ldrh	r3, [r7, #16]
 801124a:	0a1b      	lsrs	r3, r3, #8
 801124c:	81fb      	strh	r3, [r7, #14]
 801124e:	8a3b      	ldrh	r3, [r7, #16]
 8011250:	b2db      	uxtb	r3, r3
 8011252:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8011254:	88fa      	ldrh	r2, [r7, #6]
 8011256:	8a79      	ldrh	r1, [r7, #18]
 8011258:	8a3b      	ldrh	r3, [r7, #16]
 801125a:	440b      	add	r3, r1
 801125c:	429a      	cmp	r2, r3
 801125e:	da49      	bge.n	80112f4 <ff_wtoupper+0xe8>
			switch (cmd) {
 8011260:	89fb      	ldrh	r3, [r7, #14]
 8011262:	2b08      	cmp	r3, #8
 8011264:	d84f      	bhi.n	8011306 <ff_wtoupper+0xfa>
 8011266:	a201      	add	r2, pc, #4	; (adr r2, 801126c <ff_wtoupper+0x60>)
 8011268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801126c:	08011291 	.word	0x08011291
 8011270:	080112a3 	.word	0x080112a3
 8011274:	080112b9 	.word	0x080112b9
 8011278:	080112c1 	.word	0x080112c1
 801127c:	080112c9 	.word	0x080112c9
 8011280:	080112d1 	.word	0x080112d1
 8011284:	080112d9 	.word	0x080112d9
 8011288:	080112e1 	.word	0x080112e1
 801128c:	080112e9 	.word	0x080112e9
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8011290:	88fa      	ldrh	r2, [r7, #6]
 8011292:	8a7b      	ldrh	r3, [r7, #18]
 8011294:	1ad3      	subs	r3, r2, r3
 8011296:	005b      	lsls	r3, r3, #1
 8011298:	697a      	ldr	r2, [r7, #20]
 801129a:	4413      	add	r3, r2
 801129c:	881b      	ldrh	r3, [r3, #0]
 801129e:	80fb      	strh	r3, [r7, #6]
 80112a0:	e027      	b.n	80112f2 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80112a2:	88fa      	ldrh	r2, [r7, #6]
 80112a4:	8a7b      	ldrh	r3, [r7, #18]
 80112a6:	1ad3      	subs	r3, r2, r3
 80112a8:	b29b      	uxth	r3, r3
 80112aa:	f003 0301 	and.w	r3, r3, #1
 80112ae:	b29b      	uxth	r3, r3
 80112b0:	88fa      	ldrh	r2, [r7, #6]
 80112b2:	1ad3      	subs	r3, r2, r3
 80112b4:	80fb      	strh	r3, [r7, #6]
 80112b6:	e01c      	b.n	80112f2 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80112b8:	88fb      	ldrh	r3, [r7, #6]
 80112ba:	3b10      	subs	r3, #16
 80112bc:	80fb      	strh	r3, [r7, #6]
 80112be:	e018      	b.n	80112f2 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80112c0:	88fb      	ldrh	r3, [r7, #6]
 80112c2:	3b20      	subs	r3, #32
 80112c4:	80fb      	strh	r3, [r7, #6]
 80112c6:	e014      	b.n	80112f2 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80112c8:	88fb      	ldrh	r3, [r7, #6]
 80112ca:	3b30      	subs	r3, #48	; 0x30
 80112cc:	80fb      	strh	r3, [r7, #6]
 80112ce:	e010      	b.n	80112f2 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80112d0:	88fb      	ldrh	r3, [r7, #6]
 80112d2:	3b1a      	subs	r3, #26
 80112d4:	80fb      	strh	r3, [r7, #6]
 80112d6:	e00c      	b.n	80112f2 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80112d8:	88fb      	ldrh	r3, [r7, #6]
 80112da:	3308      	adds	r3, #8
 80112dc:	80fb      	strh	r3, [r7, #6]
 80112de:	e008      	b.n	80112f2 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80112e0:	88fb      	ldrh	r3, [r7, #6]
 80112e2:	3b50      	subs	r3, #80	; 0x50
 80112e4:	80fb      	strh	r3, [r7, #6]
 80112e6:	e004      	b.n	80112f2 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80112e8:	88fb      	ldrh	r3, [r7, #6]
 80112ea:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 80112ee:	80fb      	strh	r3, [r7, #6]
 80112f0:	bf00      	nop
			}
			break;
 80112f2:	e008      	b.n	8011306 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80112f4:	89fb      	ldrh	r3, [r7, #14]
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d195      	bne.n	8011226 <ff_wtoupper+0x1a>
 80112fa:	8a3b      	ldrh	r3, [r7, #16]
 80112fc:	005b      	lsls	r3, r3, #1
 80112fe:	697a      	ldr	r2, [r7, #20]
 8011300:	4413      	add	r3, r2
 8011302:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8011304:	e78f      	b.n	8011226 <ff_wtoupper+0x1a>
			break;
 8011306:	bf00      	nop
	}

	return chr;
 8011308:	88fb      	ldrh	r3, [r7, #6]
}
 801130a:	4618      	mov	r0, r3
 801130c:	371c      	adds	r7, #28
 801130e:	46bd      	mov	sp, r7
 8011310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011314:	4770      	bx	lr
 8011316:	bf00      	nop
 8011318:	08017644 	.word	0x08017644
 801131c:	08017838 	.word	0x08017838

08011320 <cos>:
 8011320:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011322:	ec51 0b10 	vmov	r0, r1, d0
 8011326:	4a1e      	ldr	r2, [pc, #120]	; (80113a0 <cos+0x80>)
 8011328:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801132c:	4293      	cmp	r3, r2
 801132e:	dc06      	bgt.n	801133e <cos+0x1e>
 8011330:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8011398 <cos+0x78>
 8011334:	f000 fa74 	bl	8011820 <__kernel_cos>
 8011338:	ec51 0b10 	vmov	r0, r1, d0
 801133c:	e007      	b.n	801134e <cos+0x2e>
 801133e:	4a19      	ldr	r2, [pc, #100]	; (80113a4 <cos+0x84>)
 8011340:	4293      	cmp	r3, r2
 8011342:	dd09      	ble.n	8011358 <cos+0x38>
 8011344:	ee10 2a10 	vmov	r2, s0
 8011348:	460b      	mov	r3, r1
 801134a:	f7ee ffb5 	bl	80002b8 <__aeabi_dsub>
 801134e:	ec41 0b10 	vmov	d0, r0, r1
 8011352:	b005      	add	sp, #20
 8011354:	f85d fb04 	ldr.w	pc, [sp], #4
 8011358:	4668      	mov	r0, sp
 801135a:	f000 f86d 	bl	8011438 <__ieee754_rem_pio2>
 801135e:	f000 0003 	and.w	r0, r0, #3
 8011362:	2801      	cmp	r0, #1
 8011364:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011368:	ed9d 0b00 	vldr	d0, [sp]
 801136c:	d007      	beq.n	801137e <cos+0x5e>
 801136e:	2802      	cmp	r0, #2
 8011370:	d00e      	beq.n	8011390 <cos+0x70>
 8011372:	2800      	cmp	r0, #0
 8011374:	d0de      	beq.n	8011334 <cos+0x14>
 8011376:	2001      	movs	r0, #1
 8011378:	f000 fe5a 	bl	8012030 <__kernel_sin>
 801137c:	e7dc      	b.n	8011338 <cos+0x18>
 801137e:	f000 fe57 	bl	8012030 <__kernel_sin>
 8011382:	ec53 2b10 	vmov	r2, r3, d0
 8011386:	ee10 0a10 	vmov	r0, s0
 801138a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801138e:	e7de      	b.n	801134e <cos+0x2e>
 8011390:	f000 fa46 	bl	8011820 <__kernel_cos>
 8011394:	e7f5      	b.n	8011382 <cos+0x62>
 8011396:	bf00      	nop
	...
 80113a0:	3fe921fb 	.word	0x3fe921fb
 80113a4:	7fefffff 	.word	0x7fefffff

080113a8 <sin>:
 80113a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80113aa:	ec51 0b10 	vmov	r0, r1, d0
 80113ae:	4a20      	ldr	r2, [pc, #128]	; (8011430 <sin+0x88>)
 80113b0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80113b4:	4293      	cmp	r3, r2
 80113b6:	dc07      	bgt.n	80113c8 <sin+0x20>
 80113b8:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8011428 <sin+0x80>
 80113bc:	2000      	movs	r0, #0
 80113be:	f000 fe37 	bl	8012030 <__kernel_sin>
 80113c2:	ec51 0b10 	vmov	r0, r1, d0
 80113c6:	e007      	b.n	80113d8 <sin+0x30>
 80113c8:	4a1a      	ldr	r2, [pc, #104]	; (8011434 <sin+0x8c>)
 80113ca:	4293      	cmp	r3, r2
 80113cc:	dd09      	ble.n	80113e2 <sin+0x3a>
 80113ce:	ee10 2a10 	vmov	r2, s0
 80113d2:	460b      	mov	r3, r1
 80113d4:	f7ee ff70 	bl	80002b8 <__aeabi_dsub>
 80113d8:	ec41 0b10 	vmov	d0, r0, r1
 80113dc:	b005      	add	sp, #20
 80113de:	f85d fb04 	ldr.w	pc, [sp], #4
 80113e2:	4668      	mov	r0, sp
 80113e4:	f000 f828 	bl	8011438 <__ieee754_rem_pio2>
 80113e8:	f000 0003 	and.w	r0, r0, #3
 80113ec:	2801      	cmp	r0, #1
 80113ee:	ed9d 1b02 	vldr	d1, [sp, #8]
 80113f2:	ed9d 0b00 	vldr	d0, [sp]
 80113f6:	d004      	beq.n	8011402 <sin+0x5a>
 80113f8:	2802      	cmp	r0, #2
 80113fa:	d005      	beq.n	8011408 <sin+0x60>
 80113fc:	b970      	cbnz	r0, 801141c <sin+0x74>
 80113fe:	2001      	movs	r0, #1
 8011400:	e7dd      	b.n	80113be <sin+0x16>
 8011402:	f000 fa0d 	bl	8011820 <__kernel_cos>
 8011406:	e7dc      	b.n	80113c2 <sin+0x1a>
 8011408:	2001      	movs	r0, #1
 801140a:	f000 fe11 	bl	8012030 <__kernel_sin>
 801140e:	ec53 2b10 	vmov	r2, r3, d0
 8011412:	ee10 0a10 	vmov	r0, s0
 8011416:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801141a:	e7dd      	b.n	80113d8 <sin+0x30>
 801141c:	f000 fa00 	bl	8011820 <__kernel_cos>
 8011420:	e7f5      	b.n	801140e <sin+0x66>
 8011422:	bf00      	nop
 8011424:	f3af 8000 	nop.w
	...
 8011430:	3fe921fb 	.word	0x3fe921fb
 8011434:	7fefffff 	.word	0x7fefffff

08011438 <__ieee754_rem_pio2>:
 8011438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801143c:	ec57 6b10 	vmov	r6, r7, d0
 8011440:	4bc3      	ldr	r3, [pc, #780]	; (8011750 <__ieee754_rem_pio2+0x318>)
 8011442:	b08d      	sub	sp, #52	; 0x34
 8011444:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8011448:	4598      	cmp	r8, r3
 801144a:	4604      	mov	r4, r0
 801144c:	9704      	str	r7, [sp, #16]
 801144e:	dc07      	bgt.n	8011460 <__ieee754_rem_pio2+0x28>
 8011450:	2200      	movs	r2, #0
 8011452:	2300      	movs	r3, #0
 8011454:	ed84 0b00 	vstr	d0, [r4]
 8011458:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801145c:	2500      	movs	r5, #0
 801145e:	e027      	b.n	80114b0 <__ieee754_rem_pio2+0x78>
 8011460:	4bbc      	ldr	r3, [pc, #752]	; (8011754 <__ieee754_rem_pio2+0x31c>)
 8011462:	4598      	cmp	r8, r3
 8011464:	dc75      	bgt.n	8011552 <__ieee754_rem_pio2+0x11a>
 8011466:	9b04      	ldr	r3, [sp, #16]
 8011468:	4dbb      	ldr	r5, [pc, #748]	; (8011758 <__ieee754_rem_pio2+0x320>)
 801146a:	2b00      	cmp	r3, #0
 801146c:	ee10 0a10 	vmov	r0, s0
 8011470:	a3a9      	add	r3, pc, #676	; (adr r3, 8011718 <__ieee754_rem_pio2+0x2e0>)
 8011472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011476:	4639      	mov	r1, r7
 8011478:	dd36      	ble.n	80114e8 <__ieee754_rem_pio2+0xb0>
 801147a:	f7ee ff1d 	bl	80002b8 <__aeabi_dsub>
 801147e:	45a8      	cmp	r8, r5
 8011480:	4606      	mov	r6, r0
 8011482:	460f      	mov	r7, r1
 8011484:	d018      	beq.n	80114b8 <__ieee754_rem_pio2+0x80>
 8011486:	a3a6      	add	r3, pc, #664	; (adr r3, 8011720 <__ieee754_rem_pio2+0x2e8>)
 8011488:	e9d3 2300 	ldrd	r2, r3, [r3]
 801148c:	f7ee ff14 	bl	80002b8 <__aeabi_dsub>
 8011490:	4602      	mov	r2, r0
 8011492:	460b      	mov	r3, r1
 8011494:	e9c4 2300 	strd	r2, r3, [r4]
 8011498:	4630      	mov	r0, r6
 801149a:	4639      	mov	r1, r7
 801149c:	f7ee ff0c 	bl	80002b8 <__aeabi_dsub>
 80114a0:	a39f      	add	r3, pc, #636	; (adr r3, 8011720 <__ieee754_rem_pio2+0x2e8>)
 80114a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114a6:	f7ee ff07 	bl	80002b8 <__aeabi_dsub>
 80114aa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80114ae:	2501      	movs	r5, #1
 80114b0:	4628      	mov	r0, r5
 80114b2:	b00d      	add	sp, #52	; 0x34
 80114b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114b8:	a39b      	add	r3, pc, #620	; (adr r3, 8011728 <__ieee754_rem_pio2+0x2f0>)
 80114ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114be:	f7ee fefb 	bl	80002b8 <__aeabi_dsub>
 80114c2:	a39b      	add	r3, pc, #620	; (adr r3, 8011730 <__ieee754_rem_pio2+0x2f8>)
 80114c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114c8:	4606      	mov	r6, r0
 80114ca:	460f      	mov	r7, r1
 80114cc:	f7ee fef4 	bl	80002b8 <__aeabi_dsub>
 80114d0:	4602      	mov	r2, r0
 80114d2:	460b      	mov	r3, r1
 80114d4:	e9c4 2300 	strd	r2, r3, [r4]
 80114d8:	4630      	mov	r0, r6
 80114da:	4639      	mov	r1, r7
 80114dc:	f7ee feec 	bl	80002b8 <__aeabi_dsub>
 80114e0:	a393      	add	r3, pc, #588	; (adr r3, 8011730 <__ieee754_rem_pio2+0x2f8>)
 80114e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114e6:	e7de      	b.n	80114a6 <__ieee754_rem_pio2+0x6e>
 80114e8:	f7ee fee8 	bl	80002bc <__adddf3>
 80114ec:	45a8      	cmp	r8, r5
 80114ee:	4606      	mov	r6, r0
 80114f0:	460f      	mov	r7, r1
 80114f2:	d016      	beq.n	8011522 <__ieee754_rem_pio2+0xea>
 80114f4:	a38a      	add	r3, pc, #552	; (adr r3, 8011720 <__ieee754_rem_pio2+0x2e8>)
 80114f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114fa:	f7ee fedf 	bl	80002bc <__adddf3>
 80114fe:	4602      	mov	r2, r0
 8011500:	460b      	mov	r3, r1
 8011502:	e9c4 2300 	strd	r2, r3, [r4]
 8011506:	4630      	mov	r0, r6
 8011508:	4639      	mov	r1, r7
 801150a:	f7ee fed5 	bl	80002b8 <__aeabi_dsub>
 801150e:	a384      	add	r3, pc, #528	; (adr r3, 8011720 <__ieee754_rem_pio2+0x2e8>)
 8011510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011514:	f7ee fed2 	bl	80002bc <__adddf3>
 8011518:	f04f 35ff 	mov.w	r5, #4294967295
 801151c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011520:	e7c6      	b.n	80114b0 <__ieee754_rem_pio2+0x78>
 8011522:	a381      	add	r3, pc, #516	; (adr r3, 8011728 <__ieee754_rem_pio2+0x2f0>)
 8011524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011528:	f7ee fec8 	bl	80002bc <__adddf3>
 801152c:	a380      	add	r3, pc, #512	; (adr r3, 8011730 <__ieee754_rem_pio2+0x2f8>)
 801152e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011532:	4606      	mov	r6, r0
 8011534:	460f      	mov	r7, r1
 8011536:	f7ee fec1 	bl	80002bc <__adddf3>
 801153a:	4602      	mov	r2, r0
 801153c:	460b      	mov	r3, r1
 801153e:	e9c4 2300 	strd	r2, r3, [r4]
 8011542:	4630      	mov	r0, r6
 8011544:	4639      	mov	r1, r7
 8011546:	f7ee feb7 	bl	80002b8 <__aeabi_dsub>
 801154a:	a379      	add	r3, pc, #484	; (adr r3, 8011730 <__ieee754_rem_pio2+0x2f8>)
 801154c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011550:	e7e0      	b.n	8011514 <__ieee754_rem_pio2+0xdc>
 8011552:	4b82      	ldr	r3, [pc, #520]	; (801175c <__ieee754_rem_pio2+0x324>)
 8011554:	4598      	cmp	r8, r3
 8011556:	f300 80d0 	bgt.w	80116fa <__ieee754_rem_pio2+0x2c2>
 801155a:	f000 fe23 	bl	80121a4 <fabs>
 801155e:	ec57 6b10 	vmov	r6, r7, d0
 8011562:	ee10 0a10 	vmov	r0, s0
 8011566:	a374      	add	r3, pc, #464	; (adr r3, 8011738 <__ieee754_rem_pio2+0x300>)
 8011568:	e9d3 2300 	ldrd	r2, r3, [r3]
 801156c:	4639      	mov	r1, r7
 801156e:	f7ef f85b 	bl	8000628 <__aeabi_dmul>
 8011572:	2200      	movs	r2, #0
 8011574:	4b7a      	ldr	r3, [pc, #488]	; (8011760 <__ieee754_rem_pio2+0x328>)
 8011576:	f7ee fea1 	bl	80002bc <__adddf3>
 801157a:	f7ef fb05 	bl	8000b88 <__aeabi_d2iz>
 801157e:	4605      	mov	r5, r0
 8011580:	f7ee ffe8 	bl	8000554 <__aeabi_i2d>
 8011584:	a364      	add	r3, pc, #400	; (adr r3, 8011718 <__ieee754_rem_pio2+0x2e0>)
 8011586:	e9d3 2300 	ldrd	r2, r3, [r3]
 801158a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801158e:	f7ef f84b 	bl	8000628 <__aeabi_dmul>
 8011592:	4602      	mov	r2, r0
 8011594:	460b      	mov	r3, r1
 8011596:	4630      	mov	r0, r6
 8011598:	4639      	mov	r1, r7
 801159a:	f7ee fe8d 	bl	80002b8 <__aeabi_dsub>
 801159e:	a360      	add	r3, pc, #384	; (adr r3, 8011720 <__ieee754_rem_pio2+0x2e8>)
 80115a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115a4:	4682      	mov	sl, r0
 80115a6:	468b      	mov	fp, r1
 80115a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80115ac:	f7ef f83c 	bl	8000628 <__aeabi_dmul>
 80115b0:	2d1f      	cmp	r5, #31
 80115b2:	4606      	mov	r6, r0
 80115b4:	460f      	mov	r7, r1
 80115b6:	dc0c      	bgt.n	80115d2 <__ieee754_rem_pio2+0x19a>
 80115b8:	1e6a      	subs	r2, r5, #1
 80115ba:	4b6a      	ldr	r3, [pc, #424]	; (8011764 <__ieee754_rem_pio2+0x32c>)
 80115bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80115c0:	4543      	cmp	r3, r8
 80115c2:	d006      	beq.n	80115d2 <__ieee754_rem_pio2+0x19a>
 80115c4:	4632      	mov	r2, r6
 80115c6:	463b      	mov	r3, r7
 80115c8:	4650      	mov	r0, sl
 80115ca:	4659      	mov	r1, fp
 80115cc:	f7ee fe74 	bl	80002b8 <__aeabi_dsub>
 80115d0:	e00e      	b.n	80115f0 <__ieee754_rem_pio2+0x1b8>
 80115d2:	4632      	mov	r2, r6
 80115d4:	463b      	mov	r3, r7
 80115d6:	4650      	mov	r0, sl
 80115d8:	4659      	mov	r1, fp
 80115da:	f7ee fe6d 	bl	80002b8 <__aeabi_dsub>
 80115de:	ea4f 5328 	mov.w	r3, r8, asr #20
 80115e2:	9305      	str	r3, [sp, #20]
 80115e4:	9a05      	ldr	r2, [sp, #20]
 80115e6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80115ea:	1ad3      	subs	r3, r2, r3
 80115ec:	2b10      	cmp	r3, #16
 80115ee:	dc02      	bgt.n	80115f6 <__ieee754_rem_pio2+0x1be>
 80115f0:	e9c4 0100 	strd	r0, r1, [r4]
 80115f4:	e039      	b.n	801166a <__ieee754_rem_pio2+0x232>
 80115f6:	a34c      	add	r3, pc, #304	; (adr r3, 8011728 <__ieee754_rem_pio2+0x2f0>)
 80115f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011600:	f7ef f812 	bl	8000628 <__aeabi_dmul>
 8011604:	4606      	mov	r6, r0
 8011606:	460f      	mov	r7, r1
 8011608:	4602      	mov	r2, r0
 801160a:	460b      	mov	r3, r1
 801160c:	4650      	mov	r0, sl
 801160e:	4659      	mov	r1, fp
 8011610:	f7ee fe52 	bl	80002b8 <__aeabi_dsub>
 8011614:	4602      	mov	r2, r0
 8011616:	460b      	mov	r3, r1
 8011618:	4680      	mov	r8, r0
 801161a:	4689      	mov	r9, r1
 801161c:	4650      	mov	r0, sl
 801161e:	4659      	mov	r1, fp
 8011620:	f7ee fe4a 	bl	80002b8 <__aeabi_dsub>
 8011624:	4632      	mov	r2, r6
 8011626:	463b      	mov	r3, r7
 8011628:	f7ee fe46 	bl	80002b8 <__aeabi_dsub>
 801162c:	a340      	add	r3, pc, #256	; (adr r3, 8011730 <__ieee754_rem_pio2+0x2f8>)
 801162e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011632:	4606      	mov	r6, r0
 8011634:	460f      	mov	r7, r1
 8011636:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801163a:	f7ee fff5 	bl	8000628 <__aeabi_dmul>
 801163e:	4632      	mov	r2, r6
 8011640:	463b      	mov	r3, r7
 8011642:	f7ee fe39 	bl	80002b8 <__aeabi_dsub>
 8011646:	4602      	mov	r2, r0
 8011648:	460b      	mov	r3, r1
 801164a:	4606      	mov	r6, r0
 801164c:	460f      	mov	r7, r1
 801164e:	4640      	mov	r0, r8
 8011650:	4649      	mov	r1, r9
 8011652:	f7ee fe31 	bl	80002b8 <__aeabi_dsub>
 8011656:	9a05      	ldr	r2, [sp, #20]
 8011658:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801165c:	1ad3      	subs	r3, r2, r3
 801165e:	2b31      	cmp	r3, #49	; 0x31
 8011660:	dc20      	bgt.n	80116a4 <__ieee754_rem_pio2+0x26c>
 8011662:	e9c4 0100 	strd	r0, r1, [r4]
 8011666:	46c2      	mov	sl, r8
 8011668:	46cb      	mov	fp, r9
 801166a:	e9d4 8900 	ldrd	r8, r9, [r4]
 801166e:	4650      	mov	r0, sl
 8011670:	4642      	mov	r2, r8
 8011672:	464b      	mov	r3, r9
 8011674:	4659      	mov	r1, fp
 8011676:	f7ee fe1f 	bl	80002b8 <__aeabi_dsub>
 801167a:	463b      	mov	r3, r7
 801167c:	4632      	mov	r2, r6
 801167e:	f7ee fe1b 	bl	80002b8 <__aeabi_dsub>
 8011682:	9b04      	ldr	r3, [sp, #16]
 8011684:	2b00      	cmp	r3, #0
 8011686:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801168a:	f6bf af11 	bge.w	80114b0 <__ieee754_rem_pio2+0x78>
 801168e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8011692:	6063      	str	r3, [r4, #4]
 8011694:	f8c4 8000 	str.w	r8, [r4]
 8011698:	60a0      	str	r0, [r4, #8]
 801169a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801169e:	60e3      	str	r3, [r4, #12]
 80116a0:	426d      	negs	r5, r5
 80116a2:	e705      	b.n	80114b0 <__ieee754_rem_pio2+0x78>
 80116a4:	a326      	add	r3, pc, #152	; (adr r3, 8011740 <__ieee754_rem_pio2+0x308>)
 80116a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80116ae:	f7ee ffbb 	bl	8000628 <__aeabi_dmul>
 80116b2:	4606      	mov	r6, r0
 80116b4:	460f      	mov	r7, r1
 80116b6:	4602      	mov	r2, r0
 80116b8:	460b      	mov	r3, r1
 80116ba:	4640      	mov	r0, r8
 80116bc:	4649      	mov	r1, r9
 80116be:	f7ee fdfb 	bl	80002b8 <__aeabi_dsub>
 80116c2:	4602      	mov	r2, r0
 80116c4:	460b      	mov	r3, r1
 80116c6:	4682      	mov	sl, r0
 80116c8:	468b      	mov	fp, r1
 80116ca:	4640      	mov	r0, r8
 80116cc:	4649      	mov	r1, r9
 80116ce:	f7ee fdf3 	bl	80002b8 <__aeabi_dsub>
 80116d2:	4632      	mov	r2, r6
 80116d4:	463b      	mov	r3, r7
 80116d6:	f7ee fdef 	bl	80002b8 <__aeabi_dsub>
 80116da:	a31b      	add	r3, pc, #108	; (adr r3, 8011748 <__ieee754_rem_pio2+0x310>)
 80116dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116e0:	4606      	mov	r6, r0
 80116e2:	460f      	mov	r7, r1
 80116e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80116e8:	f7ee ff9e 	bl	8000628 <__aeabi_dmul>
 80116ec:	4632      	mov	r2, r6
 80116ee:	463b      	mov	r3, r7
 80116f0:	f7ee fde2 	bl	80002b8 <__aeabi_dsub>
 80116f4:	4606      	mov	r6, r0
 80116f6:	460f      	mov	r7, r1
 80116f8:	e764      	b.n	80115c4 <__ieee754_rem_pio2+0x18c>
 80116fa:	4b1b      	ldr	r3, [pc, #108]	; (8011768 <__ieee754_rem_pio2+0x330>)
 80116fc:	4598      	cmp	r8, r3
 80116fe:	dd35      	ble.n	801176c <__ieee754_rem_pio2+0x334>
 8011700:	ee10 2a10 	vmov	r2, s0
 8011704:	463b      	mov	r3, r7
 8011706:	4630      	mov	r0, r6
 8011708:	4639      	mov	r1, r7
 801170a:	f7ee fdd5 	bl	80002b8 <__aeabi_dsub>
 801170e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011712:	e9c4 0100 	strd	r0, r1, [r4]
 8011716:	e6a1      	b.n	801145c <__ieee754_rem_pio2+0x24>
 8011718:	54400000 	.word	0x54400000
 801171c:	3ff921fb 	.word	0x3ff921fb
 8011720:	1a626331 	.word	0x1a626331
 8011724:	3dd0b461 	.word	0x3dd0b461
 8011728:	1a600000 	.word	0x1a600000
 801172c:	3dd0b461 	.word	0x3dd0b461
 8011730:	2e037073 	.word	0x2e037073
 8011734:	3ba3198a 	.word	0x3ba3198a
 8011738:	6dc9c883 	.word	0x6dc9c883
 801173c:	3fe45f30 	.word	0x3fe45f30
 8011740:	2e000000 	.word	0x2e000000
 8011744:	3ba3198a 	.word	0x3ba3198a
 8011748:	252049c1 	.word	0x252049c1
 801174c:	397b839a 	.word	0x397b839a
 8011750:	3fe921fb 	.word	0x3fe921fb
 8011754:	4002d97b 	.word	0x4002d97b
 8011758:	3ff921fb 	.word	0x3ff921fb
 801175c:	413921fb 	.word	0x413921fb
 8011760:	3fe00000 	.word	0x3fe00000
 8011764:	080178f4 	.word	0x080178f4
 8011768:	7fefffff 	.word	0x7fefffff
 801176c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8011770:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8011774:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8011778:	4630      	mov	r0, r6
 801177a:	460f      	mov	r7, r1
 801177c:	f7ef fa04 	bl	8000b88 <__aeabi_d2iz>
 8011780:	f7ee fee8 	bl	8000554 <__aeabi_i2d>
 8011784:	4602      	mov	r2, r0
 8011786:	460b      	mov	r3, r1
 8011788:	4630      	mov	r0, r6
 801178a:	4639      	mov	r1, r7
 801178c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011790:	f7ee fd92 	bl	80002b8 <__aeabi_dsub>
 8011794:	2200      	movs	r2, #0
 8011796:	4b1f      	ldr	r3, [pc, #124]	; (8011814 <__ieee754_rem_pio2+0x3dc>)
 8011798:	f7ee ff46 	bl	8000628 <__aeabi_dmul>
 801179c:	460f      	mov	r7, r1
 801179e:	4606      	mov	r6, r0
 80117a0:	f7ef f9f2 	bl	8000b88 <__aeabi_d2iz>
 80117a4:	f7ee fed6 	bl	8000554 <__aeabi_i2d>
 80117a8:	4602      	mov	r2, r0
 80117aa:	460b      	mov	r3, r1
 80117ac:	4630      	mov	r0, r6
 80117ae:	4639      	mov	r1, r7
 80117b0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80117b4:	f7ee fd80 	bl	80002b8 <__aeabi_dsub>
 80117b8:	2200      	movs	r2, #0
 80117ba:	4b16      	ldr	r3, [pc, #88]	; (8011814 <__ieee754_rem_pio2+0x3dc>)
 80117bc:	f7ee ff34 	bl	8000628 <__aeabi_dmul>
 80117c0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80117c4:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 80117c8:	f04f 0803 	mov.w	r8, #3
 80117cc:	2600      	movs	r6, #0
 80117ce:	2700      	movs	r7, #0
 80117d0:	4632      	mov	r2, r6
 80117d2:	463b      	mov	r3, r7
 80117d4:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80117d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80117dc:	f7ef f98c 	bl	8000af8 <__aeabi_dcmpeq>
 80117e0:	b9b0      	cbnz	r0, 8011810 <__ieee754_rem_pio2+0x3d8>
 80117e2:	4b0d      	ldr	r3, [pc, #52]	; (8011818 <__ieee754_rem_pio2+0x3e0>)
 80117e4:	9301      	str	r3, [sp, #4]
 80117e6:	2302      	movs	r3, #2
 80117e8:	9300      	str	r3, [sp, #0]
 80117ea:	462a      	mov	r2, r5
 80117ec:	4643      	mov	r3, r8
 80117ee:	4621      	mov	r1, r4
 80117f0:	a806      	add	r0, sp, #24
 80117f2:	f000 f8dd 	bl	80119b0 <__kernel_rem_pio2>
 80117f6:	9b04      	ldr	r3, [sp, #16]
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	4605      	mov	r5, r0
 80117fc:	f6bf ae58 	bge.w	80114b0 <__ieee754_rem_pio2+0x78>
 8011800:	6863      	ldr	r3, [r4, #4]
 8011802:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011806:	6063      	str	r3, [r4, #4]
 8011808:	68e3      	ldr	r3, [r4, #12]
 801180a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801180e:	e746      	b.n	801169e <__ieee754_rem_pio2+0x266>
 8011810:	46d0      	mov	r8, sl
 8011812:	e7dd      	b.n	80117d0 <__ieee754_rem_pio2+0x398>
 8011814:	41700000 	.word	0x41700000
 8011818:	08017974 	.word	0x08017974
 801181c:	00000000 	.word	0x00000000

08011820 <__kernel_cos>:
 8011820:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011824:	ec59 8b10 	vmov	r8, r9, d0
 8011828:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 801182c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8011830:	ed2d 8b02 	vpush	{d8}
 8011834:	eeb0 8a41 	vmov.f32	s16, s2
 8011838:	eef0 8a61 	vmov.f32	s17, s3
 801183c:	da07      	bge.n	801184e <__kernel_cos+0x2e>
 801183e:	ee10 0a10 	vmov	r0, s0
 8011842:	4649      	mov	r1, r9
 8011844:	f7ef f9a0 	bl	8000b88 <__aeabi_d2iz>
 8011848:	2800      	cmp	r0, #0
 801184a:	f000 8089 	beq.w	8011960 <__kernel_cos+0x140>
 801184e:	4642      	mov	r2, r8
 8011850:	464b      	mov	r3, r9
 8011852:	4640      	mov	r0, r8
 8011854:	4649      	mov	r1, r9
 8011856:	f7ee fee7 	bl	8000628 <__aeabi_dmul>
 801185a:	2200      	movs	r2, #0
 801185c:	4b4e      	ldr	r3, [pc, #312]	; (8011998 <__kernel_cos+0x178>)
 801185e:	4604      	mov	r4, r0
 8011860:	460d      	mov	r5, r1
 8011862:	f7ee fee1 	bl	8000628 <__aeabi_dmul>
 8011866:	a340      	add	r3, pc, #256	; (adr r3, 8011968 <__kernel_cos+0x148>)
 8011868:	e9d3 2300 	ldrd	r2, r3, [r3]
 801186c:	4682      	mov	sl, r0
 801186e:	468b      	mov	fp, r1
 8011870:	4620      	mov	r0, r4
 8011872:	4629      	mov	r1, r5
 8011874:	f7ee fed8 	bl	8000628 <__aeabi_dmul>
 8011878:	a33d      	add	r3, pc, #244	; (adr r3, 8011970 <__kernel_cos+0x150>)
 801187a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801187e:	f7ee fd1d 	bl	80002bc <__adddf3>
 8011882:	4622      	mov	r2, r4
 8011884:	462b      	mov	r3, r5
 8011886:	f7ee fecf 	bl	8000628 <__aeabi_dmul>
 801188a:	a33b      	add	r3, pc, #236	; (adr r3, 8011978 <__kernel_cos+0x158>)
 801188c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011890:	f7ee fd12 	bl	80002b8 <__aeabi_dsub>
 8011894:	4622      	mov	r2, r4
 8011896:	462b      	mov	r3, r5
 8011898:	f7ee fec6 	bl	8000628 <__aeabi_dmul>
 801189c:	a338      	add	r3, pc, #224	; (adr r3, 8011980 <__kernel_cos+0x160>)
 801189e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118a2:	f7ee fd0b 	bl	80002bc <__adddf3>
 80118a6:	4622      	mov	r2, r4
 80118a8:	462b      	mov	r3, r5
 80118aa:	f7ee febd 	bl	8000628 <__aeabi_dmul>
 80118ae:	a336      	add	r3, pc, #216	; (adr r3, 8011988 <__kernel_cos+0x168>)
 80118b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118b4:	f7ee fd00 	bl	80002b8 <__aeabi_dsub>
 80118b8:	4622      	mov	r2, r4
 80118ba:	462b      	mov	r3, r5
 80118bc:	f7ee feb4 	bl	8000628 <__aeabi_dmul>
 80118c0:	a333      	add	r3, pc, #204	; (adr r3, 8011990 <__kernel_cos+0x170>)
 80118c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118c6:	f7ee fcf9 	bl	80002bc <__adddf3>
 80118ca:	4622      	mov	r2, r4
 80118cc:	462b      	mov	r3, r5
 80118ce:	f7ee feab 	bl	8000628 <__aeabi_dmul>
 80118d2:	4622      	mov	r2, r4
 80118d4:	462b      	mov	r3, r5
 80118d6:	f7ee fea7 	bl	8000628 <__aeabi_dmul>
 80118da:	ec53 2b18 	vmov	r2, r3, d8
 80118de:	4604      	mov	r4, r0
 80118e0:	460d      	mov	r5, r1
 80118e2:	4640      	mov	r0, r8
 80118e4:	4649      	mov	r1, r9
 80118e6:	f7ee fe9f 	bl	8000628 <__aeabi_dmul>
 80118ea:	460b      	mov	r3, r1
 80118ec:	4602      	mov	r2, r0
 80118ee:	4629      	mov	r1, r5
 80118f0:	4620      	mov	r0, r4
 80118f2:	f7ee fce1 	bl	80002b8 <__aeabi_dsub>
 80118f6:	4b29      	ldr	r3, [pc, #164]	; (801199c <__kernel_cos+0x17c>)
 80118f8:	429e      	cmp	r6, r3
 80118fa:	4680      	mov	r8, r0
 80118fc:	4689      	mov	r9, r1
 80118fe:	dc11      	bgt.n	8011924 <__kernel_cos+0x104>
 8011900:	4602      	mov	r2, r0
 8011902:	460b      	mov	r3, r1
 8011904:	4650      	mov	r0, sl
 8011906:	4659      	mov	r1, fp
 8011908:	f7ee fcd6 	bl	80002b8 <__aeabi_dsub>
 801190c:	460b      	mov	r3, r1
 801190e:	4924      	ldr	r1, [pc, #144]	; (80119a0 <__kernel_cos+0x180>)
 8011910:	4602      	mov	r2, r0
 8011912:	2000      	movs	r0, #0
 8011914:	f7ee fcd0 	bl	80002b8 <__aeabi_dsub>
 8011918:	ecbd 8b02 	vpop	{d8}
 801191c:	ec41 0b10 	vmov	d0, r0, r1
 8011920:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011924:	4b1f      	ldr	r3, [pc, #124]	; (80119a4 <__kernel_cos+0x184>)
 8011926:	491e      	ldr	r1, [pc, #120]	; (80119a0 <__kernel_cos+0x180>)
 8011928:	429e      	cmp	r6, r3
 801192a:	bfcc      	ite	gt
 801192c:	4d1e      	ldrgt	r5, [pc, #120]	; (80119a8 <__kernel_cos+0x188>)
 801192e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8011932:	2400      	movs	r4, #0
 8011934:	4622      	mov	r2, r4
 8011936:	462b      	mov	r3, r5
 8011938:	2000      	movs	r0, #0
 801193a:	f7ee fcbd 	bl	80002b8 <__aeabi_dsub>
 801193e:	4622      	mov	r2, r4
 8011940:	4606      	mov	r6, r0
 8011942:	460f      	mov	r7, r1
 8011944:	462b      	mov	r3, r5
 8011946:	4650      	mov	r0, sl
 8011948:	4659      	mov	r1, fp
 801194a:	f7ee fcb5 	bl	80002b8 <__aeabi_dsub>
 801194e:	4642      	mov	r2, r8
 8011950:	464b      	mov	r3, r9
 8011952:	f7ee fcb1 	bl	80002b8 <__aeabi_dsub>
 8011956:	4602      	mov	r2, r0
 8011958:	460b      	mov	r3, r1
 801195a:	4630      	mov	r0, r6
 801195c:	4639      	mov	r1, r7
 801195e:	e7d9      	b.n	8011914 <__kernel_cos+0xf4>
 8011960:	2000      	movs	r0, #0
 8011962:	490f      	ldr	r1, [pc, #60]	; (80119a0 <__kernel_cos+0x180>)
 8011964:	e7d8      	b.n	8011918 <__kernel_cos+0xf8>
 8011966:	bf00      	nop
 8011968:	be8838d4 	.word	0xbe8838d4
 801196c:	bda8fae9 	.word	0xbda8fae9
 8011970:	bdb4b1c4 	.word	0xbdb4b1c4
 8011974:	3e21ee9e 	.word	0x3e21ee9e
 8011978:	809c52ad 	.word	0x809c52ad
 801197c:	3e927e4f 	.word	0x3e927e4f
 8011980:	19cb1590 	.word	0x19cb1590
 8011984:	3efa01a0 	.word	0x3efa01a0
 8011988:	16c15177 	.word	0x16c15177
 801198c:	3f56c16c 	.word	0x3f56c16c
 8011990:	5555554c 	.word	0x5555554c
 8011994:	3fa55555 	.word	0x3fa55555
 8011998:	3fe00000 	.word	0x3fe00000
 801199c:	3fd33332 	.word	0x3fd33332
 80119a0:	3ff00000 	.word	0x3ff00000
 80119a4:	3fe90000 	.word	0x3fe90000
 80119a8:	3fd20000 	.word	0x3fd20000
 80119ac:	00000000 	.word	0x00000000

080119b0 <__kernel_rem_pio2>:
 80119b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119b4:	ed2d 8b02 	vpush	{d8}
 80119b8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80119bc:	1ed4      	subs	r4, r2, #3
 80119be:	9308      	str	r3, [sp, #32]
 80119c0:	9101      	str	r1, [sp, #4]
 80119c2:	4bc5      	ldr	r3, [pc, #788]	; (8011cd8 <__kernel_rem_pio2+0x328>)
 80119c4:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80119c6:	9009      	str	r0, [sp, #36]	; 0x24
 80119c8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80119cc:	9304      	str	r3, [sp, #16]
 80119ce:	9b08      	ldr	r3, [sp, #32]
 80119d0:	3b01      	subs	r3, #1
 80119d2:	9307      	str	r3, [sp, #28]
 80119d4:	2318      	movs	r3, #24
 80119d6:	fb94 f4f3 	sdiv	r4, r4, r3
 80119da:	f06f 0317 	mvn.w	r3, #23
 80119de:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80119e2:	fb04 3303 	mla	r3, r4, r3, r3
 80119e6:	eb03 0a02 	add.w	sl, r3, r2
 80119ea:	9b04      	ldr	r3, [sp, #16]
 80119ec:	9a07      	ldr	r2, [sp, #28]
 80119ee:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8011cc8 <__kernel_rem_pio2+0x318>
 80119f2:	eb03 0802 	add.w	r8, r3, r2
 80119f6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80119f8:	1aa7      	subs	r7, r4, r2
 80119fa:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80119fe:	ae22      	add	r6, sp, #136	; 0x88
 8011a00:	2500      	movs	r5, #0
 8011a02:	4545      	cmp	r5, r8
 8011a04:	dd13      	ble.n	8011a2e <__kernel_rem_pio2+0x7e>
 8011a06:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8011cc8 <__kernel_rem_pio2+0x318>
 8011a0a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8011a0e:	2600      	movs	r6, #0
 8011a10:	9b04      	ldr	r3, [sp, #16]
 8011a12:	429e      	cmp	r6, r3
 8011a14:	dc32      	bgt.n	8011a7c <__kernel_rem_pio2+0xcc>
 8011a16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011a18:	9302      	str	r3, [sp, #8]
 8011a1a:	9b08      	ldr	r3, [sp, #32]
 8011a1c:	199d      	adds	r5, r3, r6
 8011a1e:	ab22      	add	r3, sp, #136	; 0x88
 8011a20:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8011a24:	9306      	str	r3, [sp, #24]
 8011a26:	ec59 8b18 	vmov	r8, r9, d8
 8011a2a:	2700      	movs	r7, #0
 8011a2c:	e01f      	b.n	8011a6e <__kernel_rem_pio2+0xbe>
 8011a2e:	42ef      	cmn	r7, r5
 8011a30:	d407      	bmi.n	8011a42 <__kernel_rem_pio2+0x92>
 8011a32:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8011a36:	f7ee fd8d 	bl	8000554 <__aeabi_i2d>
 8011a3a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8011a3e:	3501      	adds	r5, #1
 8011a40:	e7df      	b.n	8011a02 <__kernel_rem_pio2+0x52>
 8011a42:	ec51 0b18 	vmov	r0, r1, d8
 8011a46:	e7f8      	b.n	8011a3a <__kernel_rem_pio2+0x8a>
 8011a48:	9906      	ldr	r1, [sp, #24]
 8011a4a:	9d02      	ldr	r5, [sp, #8]
 8011a4c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8011a50:	9106      	str	r1, [sp, #24]
 8011a52:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8011a56:	9502      	str	r5, [sp, #8]
 8011a58:	f7ee fde6 	bl	8000628 <__aeabi_dmul>
 8011a5c:	4602      	mov	r2, r0
 8011a5e:	460b      	mov	r3, r1
 8011a60:	4640      	mov	r0, r8
 8011a62:	4649      	mov	r1, r9
 8011a64:	f7ee fc2a 	bl	80002bc <__adddf3>
 8011a68:	3701      	adds	r7, #1
 8011a6a:	4680      	mov	r8, r0
 8011a6c:	4689      	mov	r9, r1
 8011a6e:	9b07      	ldr	r3, [sp, #28]
 8011a70:	429f      	cmp	r7, r3
 8011a72:	dde9      	ble.n	8011a48 <__kernel_rem_pio2+0x98>
 8011a74:	e8eb 8902 	strd	r8, r9, [fp], #8
 8011a78:	3601      	adds	r6, #1
 8011a7a:	e7c9      	b.n	8011a10 <__kernel_rem_pio2+0x60>
 8011a7c:	9b04      	ldr	r3, [sp, #16]
 8011a7e:	aa0e      	add	r2, sp, #56	; 0x38
 8011a80:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011a84:	930c      	str	r3, [sp, #48]	; 0x30
 8011a86:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8011a88:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8011a8c:	9c04      	ldr	r4, [sp, #16]
 8011a8e:	930b      	str	r3, [sp, #44]	; 0x2c
 8011a90:	ab9a      	add	r3, sp, #616	; 0x268
 8011a92:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8011a96:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011a9a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011a9e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8011aa2:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8011aa6:	ab9a      	add	r3, sp, #616	; 0x268
 8011aa8:	445b      	add	r3, fp
 8011aaa:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8011aae:	2500      	movs	r5, #0
 8011ab0:	1b63      	subs	r3, r4, r5
 8011ab2:	2b00      	cmp	r3, #0
 8011ab4:	dc78      	bgt.n	8011ba8 <__kernel_rem_pio2+0x1f8>
 8011ab6:	4650      	mov	r0, sl
 8011ab8:	ec49 8b10 	vmov	d0, r8, r9
 8011abc:	f000 fc00 	bl	80122c0 <scalbn>
 8011ac0:	ec57 6b10 	vmov	r6, r7, d0
 8011ac4:	2200      	movs	r2, #0
 8011ac6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8011aca:	ee10 0a10 	vmov	r0, s0
 8011ace:	4639      	mov	r1, r7
 8011ad0:	f7ee fdaa 	bl	8000628 <__aeabi_dmul>
 8011ad4:	ec41 0b10 	vmov	d0, r0, r1
 8011ad8:	f000 fb6e 	bl	80121b8 <floor>
 8011adc:	2200      	movs	r2, #0
 8011ade:	ec51 0b10 	vmov	r0, r1, d0
 8011ae2:	4b7e      	ldr	r3, [pc, #504]	; (8011cdc <__kernel_rem_pio2+0x32c>)
 8011ae4:	f7ee fda0 	bl	8000628 <__aeabi_dmul>
 8011ae8:	4602      	mov	r2, r0
 8011aea:	460b      	mov	r3, r1
 8011aec:	4630      	mov	r0, r6
 8011aee:	4639      	mov	r1, r7
 8011af0:	f7ee fbe2 	bl	80002b8 <__aeabi_dsub>
 8011af4:	460f      	mov	r7, r1
 8011af6:	4606      	mov	r6, r0
 8011af8:	f7ef f846 	bl	8000b88 <__aeabi_d2iz>
 8011afc:	9006      	str	r0, [sp, #24]
 8011afe:	f7ee fd29 	bl	8000554 <__aeabi_i2d>
 8011b02:	4602      	mov	r2, r0
 8011b04:	460b      	mov	r3, r1
 8011b06:	4630      	mov	r0, r6
 8011b08:	4639      	mov	r1, r7
 8011b0a:	f7ee fbd5 	bl	80002b8 <__aeabi_dsub>
 8011b0e:	f1ba 0f00 	cmp.w	sl, #0
 8011b12:	4606      	mov	r6, r0
 8011b14:	460f      	mov	r7, r1
 8011b16:	dd6c      	ble.n	8011bf2 <__kernel_rem_pio2+0x242>
 8011b18:	1e62      	subs	r2, r4, #1
 8011b1a:	ab0e      	add	r3, sp, #56	; 0x38
 8011b1c:	f1ca 0118 	rsb	r1, sl, #24
 8011b20:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8011b24:	9d06      	ldr	r5, [sp, #24]
 8011b26:	fa40 f301 	asr.w	r3, r0, r1
 8011b2a:	441d      	add	r5, r3
 8011b2c:	408b      	lsls	r3, r1
 8011b2e:	1ac0      	subs	r0, r0, r3
 8011b30:	ab0e      	add	r3, sp, #56	; 0x38
 8011b32:	9506      	str	r5, [sp, #24]
 8011b34:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8011b38:	f1ca 0317 	rsb	r3, sl, #23
 8011b3c:	fa40 f303 	asr.w	r3, r0, r3
 8011b40:	9302      	str	r3, [sp, #8]
 8011b42:	9b02      	ldr	r3, [sp, #8]
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	dd62      	ble.n	8011c0e <__kernel_rem_pio2+0x25e>
 8011b48:	9b06      	ldr	r3, [sp, #24]
 8011b4a:	2200      	movs	r2, #0
 8011b4c:	3301      	adds	r3, #1
 8011b4e:	9306      	str	r3, [sp, #24]
 8011b50:	4615      	mov	r5, r2
 8011b52:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8011b56:	4294      	cmp	r4, r2
 8011b58:	f300 8095 	bgt.w	8011c86 <__kernel_rem_pio2+0x2d6>
 8011b5c:	f1ba 0f00 	cmp.w	sl, #0
 8011b60:	dd07      	ble.n	8011b72 <__kernel_rem_pio2+0x1c2>
 8011b62:	f1ba 0f01 	cmp.w	sl, #1
 8011b66:	f000 80a2 	beq.w	8011cae <__kernel_rem_pio2+0x2fe>
 8011b6a:	f1ba 0f02 	cmp.w	sl, #2
 8011b6e:	f000 80c1 	beq.w	8011cf4 <__kernel_rem_pio2+0x344>
 8011b72:	9b02      	ldr	r3, [sp, #8]
 8011b74:	2b02      	cmp	r3, #2
 8011b76:	d14a      	bne.n	8011c0e <__kernel_rem_pio2+0x25e>
 8011b78:	4632      	mov	r2, r6
 8011b7a:	463b      	mov	r3, r7
 8011b7c:	2000      	movs	r0, #0
 8011b7e:	4958      	ldr	r1, [pc, #352]	; (8011ce0 <__kernel_rem_pio2+0x330>)
 8011b80:	f7ee fb9a 	bl	80002b8 <__aeabi_dsub>
 8011b84:	4606      	mov	r6, r0
 8011b86:	460f      	mov	r7, r1
 8011b88:	2d00      	cmp	r5, #0
 8011b8a:	d040      	beq.n	8011c0e <__kernel_rem_pio2+0x25e>
 8011b8c:	4650      	mov	r0, sl
 8011b8e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8011cd0 <__kernel_rem_pio2+0x320>
 8011b92:	f000 fb95 	bl	80122c0 <scalbn>
 8011b96:	4630      	mov	r0, r6
 8011b98:	4639      	mov	r1, r7
 8011b9a:	ec53 2b10 	vmov	r2, r3, d0
 8011b9e:	f7ee fb8b 	bl	80002b8 <__aeabi_dsub>
 8011ba2:	4606      	mov	r6, r0
 8011ba4:	460f      	mov	r7, r1
 8011ba6:	e032      	b.n	8011c0e <__kernel_rem_pio2+0x25e>
 8011ba8:	2200      	movs	r2, #0
 8011baa:	4b4e      	ldr	r3, [pc, #312]	; (8011ce4 <__kernel_rem_pio2+0x334>)
 8011bac:	4640      	mov	r0, r8
 8011bae:	4649      	mov	r1, r9
 8011bb0:	f7ee fd3a 	bl	8000628 <__aeabi_dmul>
 8011bb4:	f7ee ffe8 	bl	8000b88 <__aeabi_d2iz>
 8011bb8:	f7ee fccc 	bl	8000554 <__aeabi_i2d>
 8011bbc:	2200      	movs	r2, #0
 8011bbe:	4b4a      	ldr	r3, [pc, #296]	; (8011ce8 <__kernel_rem_pio2+0x338>)
 8011bc0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011bc4:	f7ee fd30 	bl	8000628 <__aeabi_dmul>
 8011bc8:	4602      	mov	r2, r0
 8011bca:	460b      	mov	r3, r1
 8011bcc:	4640      	mov	r0, r8
 8011bce:	4649      	mov	r1, r9
 8011bd0:	f7ee fb72 	bl	80002b8 <__aeabi_dsub>
 8011bd4:	f7ee ffd8 	bl	8000b88 <__aeabi_d2iz>
 8011bd8:	ab0e      	add	r3, sp, #56	; 0x38
 8011bda:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8011bde:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8011be2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011be6:	f7ee fb69 	bl	80002bc <__adddf3>
 8011bea:	3501      	adds	r5, #1
 8011bec:	4680      	mov	r8, r0
 8011bee:	4689      	mov	r9, r1
 8011bf0:	e75e      	b.n	8011ab0 <__kernel_rem_pio2+0x100>
 8011bf2:	d105      	bne.n	8011c00 <__kernel_rem_pio2+0x250>
 8011bf4:	1e63      	subs	r3, r4, #1
 8011bf6:	aa0e      	add	r2, sp, #56	; 0x38
 8011bf8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8011bfc:	15c3      	asrs	r3, r0, #23
 8011bfe:	e79f      	b.n	8011b40 <__kernel_rem_pio2+0x190>
 8011c00:	2200      	movs	r2, #0
 8011c02:	4b3a      	ldr	r3, [pc, #232]	; (8011cec <__kernel_rem_pio2+0x33c>)
 8011c04:	f7ee ff96 	bl	8000b34 <__aeabi_dcmpge>
 8011c08:	2800      	cmp	r0, #0
 8011c0a:	d139      	bne.n	8011c80 <__kernel_rem_pio2+0x2d0>
 8011c0c:	9002      	str	r0, [sp, #8]
 8011c0e:	2200      	movs	r2, #0
 8011c10:	2300      	movs	r3, #0
 8011c12:	4630      	mov	r0, r6
 8011c14:	4639      	mov	r1, r7
 8011c16:	f7ee ff6f 	bl	8000af8 <__aeabi_dcmpeq>
 8011c1a:	2800      	cmp	r0, #0
 8011c1c:	f000 80c7 	beq.w	8011dae <__kernel_rem_pio2+0x3fe>
 8011c20:	1e65      	subs	r5, r4, #1
 8011c22:	462b      	mov	r3, r5
 8011c24:	2200      	movs	r2, #0
 8011c26:	9904      	ldr	r1, [sp, #16]
 8011c28:	428b      	cmp	r3, r1
 8011c2a:	da6a      	bge.n	8011d02 <__kernel_rem_pio2+0x352>
 8011c2c:	2a00      	cmp	r2, #0
 8011c2e:	f000 8088 	beq.w	8011d42 <__kernel_rem_pio2+0x392>
 8011c32:	ab0e      	add	r3, sp, #56	; 0x38
 8011c34:	f1aa 0a18 	sub.w	sl, sl, #24
 8011c38:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	f000 80b4 	beq.w	8011daa <__kernel_rem_pio2+0x3fa>
 8011c42:	4650      	mov	r0, sl
 8011c44:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8011cd0 <__kernel_rem_pio2+0x320>
 8011c48:	f000 fb3a 	bl	80122c0 <scalbn>
 8011c4c:	00ec      	lsls	r4, r5, #3
 8011c4e:	ab72      	add	r3, sp, #456	; 0x1c8
 8011c50:	191e      	adds	r6, r3, r4
 8011c52:	ec59 8b10 	vmov	r8, r9, d0
 8011c56:	f106 0a08 	add.w	sl, r6, #8
 8011c5a:	462f      	mov	r7, r5
 8011c5c:	2f00      	cmp	r7, #0
 8011c5e:	f280 80df 	bge.w	8011e20 <__kernel_rem_pio2+0x470>
 8011c62:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8011cc8 <__kernel_rem_pio2+0x318>
 8011c66:	f04f 0a00 	mov.w	sl, #0
 8011c6a:	eba5 030a 	sub.w	r3, r5, sl
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	f2c0 810a 	blt.w	8011e88 <__kernel_rem_pio2+0x4d8>
 8011c74:	f8df b078 	ldr.w	fp, [pc, #120]	; 8011cf0 <__kernel_rem_pio2+0x340>
 8011c78:	ec59 8b18 	vmov	r8, r9, d8
 8011c7c:	2700      	movs	r7, #0
 8011c7e:	e0f5      	b.n	8011e6c <__kernel_rem_pio2+0x4bc>
 8011c80:	2302      	movs	r3, #2
 8011c82:	9302      	str	r3, [sp, #8]
 8011c84:	e760      	b.n	8011b48 <__kernel_rem_pio2+0x198>
 8011c86:	ab0e      	add	r3, sp, #56	; 0x38
 8011c88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011c8c:	b94d      	cbnz	r5, 8011ca2 <__kernel_rem_pio2+0x2f2>
 8011c8e:	b12b      	cbz	r3, 8011c9c <__kernel_rem_pio2+0x2ec>
 8011c90:	a80e      	add	r0, sp, #56	; 0x38
 8011c92:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8011c96:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8011c9a:	2301      	movs	r3, #1
 8011c9c:	3201      	adds	r2, #1
 8011c9e:	461d      	mov	r5, r3
 8011ca0:	e759      	b.n	8011b56 <__kernel_rem_pio2+0x1a6>
 8011ca2:	a80e      	add	r0, sp, #56	; 0x38
 8011ca4:	1acb      	subs	r3, r1, r3
 8011ca6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8011caa:	462b      	mov	r3, r5
 8011cac:	e7f6      	b.n	8011c9c <__kernel_rem_pio2+0x2ec>
 8011cae:	1e62      	subs	r2, r4, #1
 8011cb0:	ab0e      	add	r3, sp, #56	; 0x38
 8011cb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011cb6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8011cba:	a90e      	add	r1, sp, #56	; 0x38
 8011cbc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8011cc0:	e757      	b.n	8011b72 <__kernel_rem_pio2+0x1c2>
 8011cc2:	bf00      	nop
 8011cc4:	f3af 8000 	nop.w
	...
 8011cd4:	3ff00000 	.word	0x3ff00000
 8011cd8:	08017ac0 	.word	0x08017ac0
 8011cdc:	40200000 	.word	0x40200000
 8011ce0:	3ff00000 	.word	0x3ff00000
 8011ce4:	3e700000 	.word	0x3e700000
 8011ce8:	41700000 	.word	0x41700000
 8011cec:	3fe00000 	.word	0x3fe00000
 8011cf0:	08017a80 	.word	0x08017a80
 8011cf4:	1e62      	subs	r2, r4, #1
 8011cf6:	ab0e      	add	r3, sp, #56	; 0x38
 8011cf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011cfc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8011d00:	e7db      	b.n	8011cba <__kernel_rem_pio2+0x30a>
 8011d02:	a90e      	add	r1, sp, #56	; 0x38
 8011d04:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8011d08:	3b01      	subs	r3, #1
 8011d0a:	430a      	orrs	r2, r1
 8011d0c:	e78b      	b.n	8011c26 <__kernel_rem_pio2+0x276>
 8011d0e:	3301      	adds	r3, #1
 8011d10:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8011d14:	2900      	cmp	r1, #0
 8011d16:	d0fa      	beq.n	8011d0e <__kernel_rem_pio2+0x35e>
 8011d18:	9a08      	ldr	r2, [sp, #32]
 8011d1a:	4422      	add	r2, r4
 8011d1c:	00d2      	lsls	r2, r2, #3
 8011d1e:	a922      	add	r1, sp, #136	; 0x88
 8011d20:	18e3      	adds	r3, r4, r3
 8011d22:	9206      	str	r2, [sp, #24]
 8011d24:	440a      	add	r2, r1
 8011d26:	9302      	str	r3, [sp, #8]
 8011d28:	f10b 0108 	add.w	r1, fp, #8
 8011d2c:	f102 0308 	add.w	r3, r2, #8
 8011d30:	1c66      	adds	r6, r4, #1
 8011d32:	910a      	str	r1, [sp, #40]	; 0x28
 8011d34:	2500      	movs	r5, #0
 8011d36:	930d      	str	r3, [sp, #52]	; 0x34
 8011d38:	9b02      	ldr	r3, [sp, #8]
 8011d3a:	42b3      	cmp	r3, r6
 8011d3c:	da04      	bge.n	8011d48 <__kernel_rem_pio2+0x398>
 8011d3e:	461c      	mov	r4, r3
 8011d40:	e6a6      	b.n	8011a90 <__kernel_rem_pio2+0xe0>
 8011d42:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011d44:	2301      	movs	r3, #1
 8011d46:	e7e3      	b.n	8011d10 <__kernel_rem_pio2+0x360>
 8011d48:	9b06      	ldr	r3, [sp, #24]
 8011d4a:	18ef      	adds	r7, r5, r3
 8011d4c:	ab22      	add	r3, sp, #136	; 0x88
 8011d4e:	441f      	add	r7, r3
 8011d50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011d52:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8011d56:	f7ee fbfd 	bl	8000554 <__aeabi_i2d>
 8011d5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011d5c:	461c      	mov	r4, r3
 8011d5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011d60:	e9c7 0100 	strd	r0, r1, [r7]
 8011d64:	eb03 0b05 	add.w	fp, r3, r5
 8011d68:	2700      	movs	r7, #0
 8011d6a:	f04f 0800 	mov.w	r8, #0
 8011d6e:	f04f 0900 	mov.w	r9, #0
 8011d72:	9b07      	ldr	r3, [sp, #28]
 8011d74:	429f      	cmp	r7, r3
 8011d76:	dd08      	ble.n	8011d8a <__kernel_rem_pio2+0x3da>
 8011d78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011d7a:	aa72      	add	r2, sp, #456	; 0x1c8
 8011d7c:	18eb      	adds	r3, r5, r3
 8011d7e:	4413      	add	r3, r2
 8011d80:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8011d84:	3601      	adds	r6, #1
 8011d86:	3508      	adds	r5, #8
 8011d88:	e7d6      	b.n	8011d38 <__kernel_rem_pio2+0x388>
 8011d8a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8011d8e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8011d92:	f7ee fc49 	bl	8000628 <__aeabi_dmul>
 8011d96:	4602      	mov	r2, r0
 8011d98:	460b      	mov	r3, r1
 8011d9a:	4640      	mov	r0, r8
 8011d9c:	4649      	mov	r1, r9
 8011d9e:	f7ee fa8d 	bl	80002bc <__adddf3>
 8011da2:	3701      	adds	r7, #1
 8011da4:	4680      	mov	r8, r0
 8011da6:	4689      	mov	r9, r1
 8011da8:	e7e3      	b.n	8011d72 <__kernel_rem_pio2+0x3c2>
 8011daa:	3d01      	subs	r5, #1
 8011dac:	e741      	b.n	8011c32 <__kernel_rem_pio2+0x282>
 8011dae:	f1ca 0000 	rsb	r0, sl, #0
 8011db2:	ec47 6b10 	vmov	d0, r6, r7
 8011db6:	f000 fa83 	bl	80122c0 <scalbn>
 8011dba:	ec57 6b10 	vmov	r6, r7, d0
 8011dbe:	2200      	movs	r2, #0
 8011dc0:	4b99      	ldr	r3, [pc, #612]	; (8012028 <__kernel_rem_pio2+0x678>)
 8011dc2:	ee10 0a10 	vmov	r0, s0
 8011dc6:	4639      	mov	r1, r7
 8011dc8:	f7ee feb4 	bl	8000b34 <__aeabi_dcmpge>
 8011dcc:	b1f8      	cbz	r0, 8011e0e <__kernel_rem_pio2+0x45e>
 8011dce:	2200      	movs	r2, #0
 8011dd0:	4b96      	ldr	r3, [pc, #600]	; (801202c <__kernel_rem_pio2+0x67c>)
 8011dd2:	4630      	mov	r0, r6
 8011dd4:	4639      	mov	r1, r7
 8011dd6:	f7ee fc27 	bl	8000628 <__aeabi_dmul>
 8011dda:	f7ee fed5 	bl	8000b88 <__aeabi_d2iz>
 8011dde:	4680      	mov	r8, r0
 8011de0:	f7ee fbb8 	bl	8000554 <__aeabi_i2d>
 8011de4:	2200      	movs	r2, #0
 8011de6:	4b90      	ldr	r3, [pc, #576]	; (8012028 <__kernel_rem_pio2+0x678>)
 8011de8:	f7ee fc1e 	bl	8000628 <__aeabi_dmul>
 8011dec:	460b      	mov	r3, r1
 8011dee:	4602      	mov	r2, r0
 8011df0:	4639      	mov	r1, r7
 8011df2:	4630      	mov	r0, r6
 8011df4:	f7ee fa60 	bl	80002b8 <__aeabi_dsub>
 8011df8:	f7ee fec6 	bl	8000b88 <__aeabi_d2iz>
 8011dfc:	1c65      	adds	r5, r4, #1
 8011dfe:	ab0e      	add	r3, sp, #56	; 0x38
 8011e00:	f10a 0a18 	add.w	sl, sl, #24
 8011e04:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8011e08:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8011e0c:	e719      	b.n	8011c42 <__kernel_rem_pio2+0x292>
 8011e0e:	4630      	mov	r0, r6
 8011e10:	4639      	mov	r1, r7
 8011e12:	f7ee feb9 	bl	8000b88 <__aeabi_d2iz>
 8011e16:	ab0e      	add	r3, sp, #56	; 0x38
 8011e18:	4625      	mov	r5, r4
 8011e1a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8011e1e:	e710      	b.n	8011c42 <__kernel_rem_pio2+0x292>
 8011e20:	ab0e      	add	r3, sp, #56	; 0x38
 8011e22:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8011e26:	f7ee fb95 	bl	8000554 <__aeabi_i2d>
 8011e2a:	4642      	mov	r2, r8
 8011e2c:	464b      	mov	r3, r9
 8011e2e:	f7ee fbfb 	bl	8000628 <__aeabi_dmul>
 8011e32:	2200      	movs	r2, #0
 8011e34:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8011e38:	4b7c      	ldr	r3, [pc, #496]	; (801202c <__kernel_rem_pio2+0x67c>)
 8011e3a:	4640      	mov	r0, r8
 8011e3c:	4649      	mov	r1, r9
 8011e3e:	f7ee fbf3 	bl	8000628 <__aeabi_dmul>
 8011e42:	3f01      	subs	r7, #1
 8011e44:	4680      	mov	r8, r0
 8011e46:	4689      	mov	r9, r1
 8011e48:	e708      	b.n	8011c5c <__kernel_rem_pio2+0x2ac>
 8011e4a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8011e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e52:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8011e56:	f7ee fbe7 	bl	8000628 <__aeabi_dmul>
 8011e5a:	4602      	mov	r2, r0
 8011e5c:	460b      	mov	r3, r1
 8011e5e:	4640      	mov	r0, r8
 8011e60:	4649      	mov	r1, r9
 8011e62:	f7ee fa2b 	bl	80002bc <__adddf3>
 8011e66:	3701      	adds	r7, #1
 8011e68:	4680      	mov	r8, r0
 8011e6a:	4689      	mov	r9, r1
 8011e6c:	9b04      	ldr	r3, [sp, #16]
 8011e6e:	429f      	cmp	r7, r3
 8011e70:	dc01      	bgt.n	8011e76 <__kernel_rem_pio2+0x4c6>
 8011e72:	45ba      	cmp	sl, r7
 8011e74:	dae9      	bge.n	8011e4a <__kernel_rem_pio2+0x49a>
 8011e76:	ab4a      	add	r3, sp, #296	; 0x128
 8011e78:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8011e7c:	e9c3 8900 	strd	r8, r9, [r3]
 8011e80:	f10a 0a01 	add.w	sl, sl, #1
 8011e84:	3e08      	subs	r6, #8
 8011e86:	e6f0      	b.n	8011c6a <__kernel_rem_pio2+0x2ba>
 8011e88:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8011e8a:	2b03      	cmp	r3, #3
 8011e8c:	d85b      	bhi.n	8011f46 <__kernel_rem_pio2+0x596>
 8011e8e:	e8df f003 	tbb	[pc, r3]
 8011e92:	264a      	.short	0x264a
 8011e94:	0226      	.short	0x0226
 8011e96:	ab9a      	add	r3, sp, #616	; 0x268
 8011e98:	441c      	add	r4, r3
 8011e9a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8011e9e:	46a2      	mov	sl, r4
 8011ea0:	46ab      	mov	fp, r5
 8011ea2:	f1bb 0f00 	cmp.w	fp, #0
 8011ea6:	dc6c      	bgt.n	8011f82 <__kernel_rem_pio2+0x5d2>
 8011ea8:	46a2      	mov	sl, r4
 8011eaa:	46ab      	mov	fp, r5
 8011eac:	f1bb 0f01 	cmp.w	fp, #1
 8011eb0:	f300 8086 	bgt.w	8011fc0 <__kernel_rem_pio2+0x610>
 8011eb4:	2000      	movs	r0, #0
 8011eb6:	2100      	movs	r1, #0
 8011eb8:	2d01      	cmp	r5, #1
 8011eba:	f300 80a0 	bgt.w	8011ffe <__kernel_rem_pio2+0x64e>
 8011ebe:	9b02      	ldr	r3, [sp, #8]
 8011ec0:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8011ec4:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	f040 809e 	bne.w	801200a <__kernel_rem_pio2+0x65a>
 8011ece:	9b01      	ldr	r3, [sp, #4]
 8011ed0:	e9c3 7800 	strd	r7, r8, [r3]
 8011ed4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8011ed8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8011edc:	e033      	b.n	8011f46 <__kernel_rem_pio2+0x596>
 8011ede:	3408      	adds	r4, #8
 8011ee0:	ab4a      	add	r3, sp, #296	; 0x128
 8011ee2:	441c      	add	r4, r3
 8011ee4:	462e      	mov	r6, r5
 8011ee6:	2000      	movs	r0, #0
 8011ee8:	2100      	movs	r1, #0
 8011eea:	2e00      	cmp	r6, #0
 8011eec:	da3a      	bge.n	8011f64 <__kernel_rem_pio2+0x5b4>
 8011eee:	9b02      	ldr	r3, [sp, #8]
 8011ef0:	2b00      	cmp	r3, #0
 8011ef2:	d03d      	beq.n	8011f70 <__kernel_rem_pio2+0x5c0>
 8011ef4:	4602      	mov	r2, r0
 8011ef6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011efa:	9c01      	ldr	r4, [sp, #4]
 8011efc:	e9c4 2300 	strd	r2, r3, [r4]
 8011f00:	4602      	mov	r2, r0
 8011f02:	460b      	mov	r3, r1
 8011f04:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8011f08:	f7ee f9d6 	bl	80002b8 <__aeabi_dsub>
 8011f0c:	ae4c      	add	r6, sp, #304	; 0x130
 8011f0e:	2401      	movs	r4, #1
 8011f10:	42a5      	cmp	r5, r4
 8011f12:	da30      	bge.n	8011f76 <__kernel_rem_pio2+0x5c6>
 8011f14:	9b02      	ldr	r3, [sp, #8]
 8011f16:	b113      	cbz	r3, 8011f1e <__kernel_rem_pio2+0x56e>
 8011f18:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011f1c:	4619      	mov	r1, r3
 8011f1e:	9b01      	ldr	r3, [sp, #4]
 8011f20:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8011f24:	e00f      	b.n	8011f46 <__kernel_rem_pio2+0x596>
 8011f26:	ab9a      	add	r3, sp, #616	; 0x268
 8011f28:	441c      	add	r4, r3
 8011f2a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8011f2e:	2000      	movs	r0, #0
 8011f30:	2100      	movs	r1, #0
 8011f32:	2d00      	cmp	r5, #0
 8011f34:	da10      	bge.n	8011f58 <__kernel_rem_pio2+0x5a8>
 8011f36:	9b02      	ldr	r3, [sp, #8]
 8011f38:	b113      	cbz	r3, 8011f40 <__kernel_rem_pio2+0x590>
 8011f3a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011f3e:	4619      	mov	r1, r3
 8011f40:	9b01      	ldr	r3, [sp, #4]
 8011f42:	e9c3 0100 	strd	r0, r1, [r3]
 8011f46:	9b06      	ldr	r3, [sp, #24]
 8011f48:	f003 0007 	and.w	r0, r3, #7
 8011f4c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8011f50:	ecbd 8b02 	vpop	{d8}
 8011f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f58:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011f5c:	f7ee f9ae 	bl	80002bc <__adddf3>
 8011f60:	3d01      	subs	r5, #1
 8011f62:	e7e6      	b.n	8011f32 <__kernel_rem_pio2+0x582>
 8011f64:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011f68:	f7ee f9a8 	bl	80002bc <__adddf3>
 8011f6c:	3e01      	subs	r6, #1
 8011f6e:	e7bc      	b.n	8011eea <__kernel_rem_pio2+0x53a>
 8011f70:	4602      	mov	r2, r0
 8011f72:	460b      	mov	r3, r1
 8011f74:	e7c1      	b.n	8011efa <__kernel_rem_pio2+0x54a>
 8011f76:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8011f7a:	f7ee f99f 	bl	80002bc <__adddf3>
 8011f7e:	3401      	adds	r4, #1
 8011f80:	e7c6      	b.n	8011f10 <__kernel_rem_pio2+0x560>
 8011f82:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8011f86:	ed3a 7b02 	vldmdb	sl!, {d7}
 8011f8a:	4640      	mov	r0, r8
 8011f8c:	ec53 2b17 	vmov	r2, r3, d7
 8011f90:	4649      	mov	r1, r9
 8011f92:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011f96:	f7ee f991 	bl	80002bc <__adddf3>
 8011f9a:	4602      	mov	r2, r0
 8011f9c:	460b      	mov	r3, r1
 8011f9e:	4606      	mov	r6, r0
 8011fa0:	460f      	mov	r7, r1
 8011fa2:	4640      	mov	r0, r8
 8011fa4:	4649      	mov	r1, r9
 8011fa6:	f7ee f987 	bl	80002b8 <__aeabi_dsub>
 8011faa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011fae:	f7ee f985 	bl	80002bc <__adddf3>
 8011fb2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011fb6:	e9ca 0100 	strd	r0, r1, [sl]
 8011fba:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8011fbe:	e770      	b.n	8011ea2 <__kernel_rem_pio2+0x4f2>
 8011fc0:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8011fc4:	ed3a 7b02 	vldmdb	sl!, {d7}
 8011fc8:	4630      	mov	r0, r6
 8011fca:	ec53 2b17 	vmov	r2, r3, d7
 8011fce:	4639      	mov	r1, r7
 8011fd0:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011fd4:	f7ee f972 	bl	80002bc <__adddf3>
 8011fd8:	4602      	mov	r2, r0
 8011fda:	460b      	mov	r3, r1
 8011fdc:	4680      	mov	r8, r0
 8011fde:	4689      	mov	r9, r1
 8011fe0:	4630      	mov	r0, r6
 8011fe2:	4639      	mov	r1, r7
 8011fe4:	f7ee f968 	bl	80002b8 <__aeabi_dsub>
 8011fe8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011fec:	f7ee f966 	bl	80002bc <__adddf3>
 8011ff0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011ff4:	e9ca 0100 	strd	r0, r1, [sl]
 8011ff8:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8011ffc:	e756      	b.n	8011eac <__kernel_rem_pio2+0x4fc>
 8011ffe:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012002:	f7ee f95b 	bl	80002bc <__adddf3>
 8012006:	3d01      	subs	r5, #1
 8012008:	e756      	b.n	8011eb8 <__kernel_rem_pio2+0x508>
 801200a:	9b01      	ldr	r3, [sp, #4]
 801200c:	9a01      	ldr	r2, [sp, #4]
 801200e:	601f      	str	r7, [r3, #0]
 8012010:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8012014:	605c      	str	r4, [r3, #4]
 8012016:	609d      	str	r5, [r3, #8]
 8012018:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801201c:	60d3      	str	r3, [r2, #12]
 801201e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012022:	6110      	str	r0, [r2, #16]
 8012024:	6153      	str	r3, [r2, #20]
 8012026:	e78e      	b.n	8011f46 <__kernel_rem_pio2+0x596>
 8012028:	41700000 	.word	0x41700000
 801202c:	3e700000 	.word	0x3e700000

08012030 <__kernel_sin>:
 8012030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012034:	ec55 4b10 	vmov	r4, r5, d0
 8012038:	b085      	sub	sp, #20
 801203a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801203e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8012042:	ed8d 1b00 	vstr	d1, [sp]
 8012046:	9002      	str	r0, [sp, #8]
 8012048:	da06      	bge.n	8012058 <__kernel_sin+0x28>
 801204a:	ee10 0a10 	vmov	r0, s0
 801204e:	4629      	mov	r1, r5
 8012050:	f7ee fd9a 	bl	8000b88 <__aeabi_d2iz>
 8012054:	2800      	cmp	r0, #0
 8012056:	d051      	beq.n	80120fc <__kernel_sin+0xcc>
 8012058:	4622      	mov	r2, r4
 801205a:	462b      	mov	r3, r5
 801205c:	4620      	mov	r0, r4
 801205e:	4629      	mov	r1, r5
 8012060:	f7ee fae2 	bl	8000628 <__aeabi_dmul>
 8012064:	4682      	mov	sl, r0
 8012066:	468b      	mov	fp, r1
 8012068:	4602      	mov	r2, r0
 801206a:	460b      	mov	r3, r1
 801206c:	4620      	mov	r0, r4
 801206e:	4629      	mov	r1, r5
 8012070:	f7ee fada 	bl	8000628 <__aeabi_dmul>
 8012074:	a341      	add	r3, pc, #260	; (adr r3, 801217c <__kernel_sin+0x14c>)
 8012076:	e9d3 2300 	ldrd	r2, r3, [r3]
 801207a:	4680      	mov	r8, r0
 801207c:	4689      	mov	r9, r1
 801207e:	4650      	mov	r0, sl
 8012080:	4659      	mov	r1, fp
 8012082:	f7ee fad1 	bl	8000628 <__aeabi_dmul>
 8012086:	a33f      	add	r3, pc, #252	; (adr r3, 8012184 <__kernel_sin+0x154>)
 8012088:	e9d3 2300 	ldrd	r2, r3, [r3]
 801208c:	f7ee f914 	bl	80002b8 <__aeabi_dsub>
 8012090:	4652      	mov	r2, sl
 8012092:	465b      	mov	r3, fp
 8012094:	f7ee fac8 	bl	8000628 <__aeabi_dmul>
 8012098:	a33c      	add	r3, pc, #240	; (adr r3, 801218c <__kernel_sin+0x15c>)
 801209a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801209e:	f7ee f90d 	bl	80002bc <__adddf3>
 80120a2:	4652      	mov	r2, sl
 80120a4:	465b      	mov	r3, fp
 80120a6:	f7ee fabf 	bl	8000628 <__aeabi_dmul>
 80120aa:	a33a      	add	r3, pc, #232	; (adr r3, 8012194 <__kernel_sin+0x164>)
 80120ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120b0:	f7ee f902 	bl	80002b8 <__aeabi_dsub>
 80120b4:	4652      	mov	r2, sl
 80120b6:	465b      	mov	r3, fp
 80120b8:	f7ee fab6 	bl	8000628 <__aeabi_dmul>
 80120bc:	a337      	add	r3, pc, #220	; (adr r3, 801219c <__kernel_sin+0x16c>)
 80120be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120c2:	f7ee f8fb 	bl	80002bc <__adddf3>
 80120c6:	9b02      	ldr	r3, [sp, #8]
 80120c8:	4606      	mov	r6, r0
 80120ca:	460f      	mov	r7, r1
 80120cc:	b9db      	cbnz	r3, 8012106 <__kernel_sin+0xd6>
 80120ce:	4602      	mov	r2, r0
 80120d0:	460b      	mov	r3, r1
 80120d2:	4650      	mov	r0, sl
 80120d4:	4659      	mov	r1, fp
 80120d6:	f7ee faa7 	bl	8000628 <__aeabi_dmul>
 80120da:	a325      	add	r3, pc, #148	; (adr r3, 8012170 <__kernel_sin+0x140>)
 80120dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120e0:	f7ee f8ea 	bl	80002b8 <__aeabi_dsub>
 80120e4:	4642      	mov	r2, r8
 80120e6:	464b      	mov	r3, r9
 80120e8:	f7ee fa9e 	bl	8000628 <__aeabi_dmul>
 80120ec:	4602      	mov	r2, r0
 80120ee:	460b      	mov	r3, r1
 80120f0:	4620      	mov	r0, r4
 80120f2:	4629      	mov	r1, r5
 80120f4:	f7ee f8e2 	bl	80002bc <__adddf3>
 80120f8:	4604      	mov	r4, r0
 80120fa:	460d      	mov	r5, r1
 80120fc:	ec45 4b10 	vmov	d0, r4, r5
 8012100:	b005      	add	sp, #20
 8012102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012106:	2200      	movs	r2, #0
 8012108:	4b1b      	ldr	r3, [pc, #108]	; (8012178 <__kernel_sin+0x148>)
 801210a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801210e:	f7ee fa8b 	bl	8000628 <__aeabi_dmul>
 8012112:	4632      	mov	r2, r6
 8012114:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012118:	463b      	mov	r3, r7
 801211a:	4640      	mov	r0, r8
 801211c:	4649      	mov	r1, r9
 801211e:	f7ee fa83 	bl	8000628 <__aeabi_dmul>
 8012122:	4602      	mov	r2, r0
 8012124:	460b      	mov	r3, r1
 8012126:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801212a:	f7ee f8c5 	bl	80002b8 <__aeabi_dsub>
 801212e:	4652      	mov	r2, sl
 8012130:	465b      	mov	r3, fp
 8012132:	f7ee fa79 	bl	8000628 <__aeabi_dmul>
 8012136:	e9dd 2300 	ldrd	r2, r3, [sp]
 801213a:	f7ee f8bd 	bl	80002b8 <__aeabi_dsub>
 801213e:	a30c      	add	r3, pc, #48	; (adr r3, 8012170 <__kernel_sin+0x140>)
 8012140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012144:	4606      	mov	r6, r0
 8012146:	460f      	mov	r7, r1
 8012148:	4640      	mov	r0, r8
 801214a:	4649      	mov	r1, r9
 801214c:	f7ee fa6c 	bl	8000628 <__aeabi_dmul>
 8012150:	4602      	mov	r2, r0
 8012152:	460b      	mov	r3, r1
 8012154:	4630      	mov	r0, r6
 8012156:	4639      	mov	r1, r7
 8012158:	f7ee f8b0 	bl	80002bc <__adddf3>
 801215c:	4602      	mov	r2, r0
 801215e:	460b      	mov	r3, r1
 8012160:	4620      	mov	r0, r4
 8012162:	4629      	mov	r1, r5
 8012164:	f7ee f8a8 	bl	80002b8 <__aeabi_dsub>
 8012168:	e7c6      	b.n	80120f8 <__kernel_sin+0xc8>
 801216a:	bf00      	nop
 801216c:	f3af 8000 	nop.w
 8012170:	55555549 	.word	0x55555549
 8012174:	3fc55555 	.word	0x3fc55555
 8012178:	3fe00000 	.word	0x3fe00000
 801217c:	5acfd57c 	.word	0x5acfd57c
 8012180:	3de5d93a 	.word	0x3de5d93a
 8012184:	8a2b9ceb 	.word	0x8a2b9ceb
 8012188:	3e5ae5e6 	.word	0x3e5ae5e6
 801218c:	57b1fe7d 	.word	0x57b1fe7d
 8012190:	3ec71de3 	.word	0x3ec71de3
 8012194:	19c161d5 	.word	0x19c161d5
 8012198:	3f2a01a0 	.word	0x3f2a01a0
 801219c:	1110f8a6 	.word	0x1110f8a6
 80121a0:	3f811111 	.word	0x3f811111

080121a4 <fabs>:
 80121a4:	ec51 0b10 	vmov	r0, r1, d0
 80121a8:	ee10 2a10 	vmov	r2, s0
 80121ac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80121b0:	ec43 2b10 	vmov	d0, r2, r3
 80121b4:	4770      	bx	lr
	...

080121b8 <floor>:
 80121b8:	ec51 0b10 	vmov	r0, r1, d0
 80121bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80121c0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80121c4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80121c8:	2e13      	cmp	r6, #19
 80121ca:	460c      	mov	r4, r1
 80121cc:	ee10 5a10 	vmov	r5, s0
 80121d0:	4680      	mov	r8, r0
 80121d2:	dc34      	bgt.n	801223e <floor+0x86>
 80121d4:	2e00      	cmp	r6, #0
 80121d6:	da16      	bge.n	8012206 <floor+0x4e>
 80121d8:	a335      	add	r3, pc, #212	; (adr r3, 80122b0 <floor+0xf8>)
 80121da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121de:	f7ee f86d 	bl	80002bc <__adddf3>
 80121e2:	2200      	movs	r2, #0
 80121e4:	2300      	movs	r3, #0
 80121e6:	f7ee fcaf 	bl	8000b48 <__aeabi_dcmpgt>
 80121ea:	b148      	cbz	r0, 8012200 <floor+0x48>
 80121ec:	2c00      	cmp	r4, #0
 80121ee:	da59      	bge.n	80122a4 <floor+0xec>
 80121f0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80121f4:	4a30      	ldr	r2, [pc, #192]	; (80122b8 <floor+0x100>)
 80121f6:	432b      	orrs	r3, r5
 80121f8:	2500      	movs	r5, #0
 80121fa:	42ab      	cmp	r3, r5
 80121fc:	bf18      	it	ne
 80121fe:	4614      	movne	r4, r2
 8012200:	4621      	mov	r1, r4
 8012202:	4628      	mov	r0, r5
 8012204:	e025      	b.n	8012252 <floor+0x9a>
 8012206:	4f2d      	ldr	r7, [pc, #180]	; (80122bc <floor+0x104>)
 8012208:	4137      	asrs	r7, r6
 801220a:	ea01 0307 	and.w	r3, r1, r7
 801220e:	4303      	orrs	r3, r0
 8012210:	d01f      	beq.n	8012252 <floor+0x9a>
 8012212:	a327      	add	r3, pc, #156	; (adr r3, 80122b0 <floor+0xf8>)
 8012214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012218:	f7ee f850 	bl	80002bc <__adddf3>
 801221c:	2200      	movs	r2, #0
 801221e:	2300      	movs	r3, #0
 8012220:	f7ee fc92 	bl	8000b48 <__aeabi_dcmpgt>
 8012224:	2800      	cmp	r0, #0
 8012226:	d0eb      	beq.n	8012200 <floor+0x48>
 8012228:	2c00      	cmp	r4, #0
 801222a:	bfbe      	ittt	lt
 801222c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8012230:	fa43 f606 	asrlt.w	r6, r3, r6
 8012234:	19a4      	addlt	r4, r4, r6
 8012236:	ea24 0407 	bic.w	r4, r4, r7
 801223a:	2500      	movs	r5, #0
 801223c:	e7e0      	b.n	8012200 <floor+0x48>
 801223e:	2e33      	cmp	r6, #51	; 0x33
 8012240:	dd0b      	ble.n	801225a <floor+0xa2>
 8012242:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8012246:	d104      	bne.n	8012252 <floor+0x9a>
 8012248:	ee10 2a10 	vmov	r2, s0
 801224c:	460b      	mov	r3, r1
 801224e:	f7ee f835 	bl	80002bc <__adddf3>
 8012252:	ec41 0b10 	vmov	d0, r0, r1
 8012256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801225a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801225e:	f04f 33ff 	mov.w	r3, #4294967295
 8012262:	fa23 f707 	lsr.w	r7, r3, r7
 8012266:	4207      	tst	r7, r0
 8012268:	d0f3      	beq.n	8012252 <floor+0x9a>
 801226a:	a311      	add	r3, pc, #68	; (adr r3, 80122b0 <floor+0xf8>)
 801226c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012270:	f7ee f824 	bl	80002bc <__adddf3>
 8012274:	2200      	movs	r2, #0
 8012276:	2300      	movs	r3, #0
 8012278:	f7ee fc66 	bl	8000b48 <__aeabi_dcmpgt>
 801227c:	2800      	cmp	r0, #0
 801227e:	d0bf      	beq.n	8012200 <floor+0x48>
 8012280:	2c00      	cmp	r4, #0
 8012282:	da02      	bge.n	801228a <floor+0xd2>
 8012284:	2e14      	cmp	r6, #20
 8012286:	d103      	bne.n	8012290 <floor+0xd8>
 8012288:	3401      	adds	r4, #1
 801228a:	ea25 0507 	bic.w	r5, r5, r7
 801228e:	e7b7      	b.n	8012200 <floor+0x48>
 8012290:	2301      	movs	r3, #1
 8012292:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8012296:	fa03 f606 	lsl.w	r6, r3, r6
 801229a:	4435      	add	r5, r6
 801229c:	4545      	cmp	r5, r8
 801229e:	bf38      	it	cc
 80122a0:	18e4      	addcc	r4, r4, r3
 80122a2:	e7f2      	b.n	801228a <floor+0xd2>
 80122a4:	2500      	movs	r5, #0
 80122a6:	462c      	mov	r4, r5
 80122a8:	e7aa      	b.n	8012200 <floor+0x48>
 80122aa:	bf00      	nop
 80122ac:	f3af 8000 	nop.w
 80122b0:	8800759c 	.word	0x8800759c
 80122b4:	7e37e43c 	.word	0x7e37e43c
 80122b8:	bff00000 	.word	0xbff00000
 80122bc:	000fffff 	.word	0x000fffff

080122c0 <scalbn>:
 80122c0:	b570      	push	{r4, r5, r6, lr}
 80122c2:	ec55 4b10 	vmov	r4, r5, d0
 80122c6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80122ca:	4606      	mov	r6, r0
 80122cc:	462b      	mov	r3, r5
 80122ce:	b9aa      	cbnz	r2, 80122fc <scalbn+0x3c>
 80122d0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80122d4:	4323      	orrs	r3, r4
 80122d6:	d03b      	beq.n	8012350 <scalbn+0x90>
 80122d8:	4b31      	ldr	r3, [pc, #196]	; (80123a0 <scalbn+0xe0>)
 80122da:	4629      	mov	r1, r5
 80122dc:	2200      	movs	r2, #0
 80122de:	ee10 0a10 	vmov	r0, s0
 80122e2:	f7ee f9a1 	bl	8000628 <__aeabi_dmul>
 80122e6:	4b2f      	ldr	r3, [pc, #188]	; (80123a4 <scalbn+0xe4>)
 80122e8:	429e      	cmp	r6, r3
 80122ea:	4604      	mov	r4, r0
 80122ec:	460d      	mov	r5, r1
 80122ee:	da12      	bge.n	8012316 <scalbn+0x56>
 80122f0:	a327      	add	r3, pc, #156	; (adr r3, 8012390 <scalbn+0xd0>)
 80122f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122f6:	f7ee f997 	bl	8000628 <__aeabi_dmul>
 80122fa:	e009      	b.n	8012310 <scalbn+0x50>
 80122fc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8012300:	428a      	cmp	r2, r1
 8012302:	d10c      	bne.n	801231e <scalbn+0x5e>
 8012304:	ee10 2a10 	vmov	r2, s0
 8012308:	4620      	mov	r0, r4
 801230a:	4629      	mov	r1, r5
 801230c:	f7ed ffd6 	bl	80002bc <__adddf3>
 8012310:	4604      	mov	r4, r0
 8012312:	460d      	mov	r5, r1
 8012314:	e01c      	b.n	8012350 <scalbn+0x90>
 8012316:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801231a:	460b      	mov	r3, r1
 801231c:	3a36      	subs	r2, #54	; 0x36
 801231e:	4432      	add	r2, r6
 8012320:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8012324:	428a      	cmp	r2, r1
 8012326:	dd0b      	ble.n	8012340 <scalbn+0x80>
 8012328:	ec45 4b11 	vmov	d1, r4, r5
 801232c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8012398 <scalbn+0xd8>
 8012330:	f000 f83c 	bl	80123ac <copysign>
 8012334:	a318      	add	r3, pc, #96	; (adr r3, 8012398 <scalbn+0xd8>)
 8012336:	e9d3 2300 	ldrd	r2, r3, [r3]
 801233a:	ec51 0b10 	vmov	r0, r1, d0
 801233e:	e7da      	b.n	80122f6 <scalbn+0x36>
 8012340:	2a00      	cmp	r2, #0
 8012342:	dd08      	ble.n	8012356 <scalbn+0x96>
 8012344:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012348:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801234c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012350:	ec45 4b10 	vmov	d0, r4, r5
 8012354:	bd70      	pop	{r4, r5, r6, pc}
 8012356:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801235a:	da0d      	bge.n	8012378 <scalbn+0xb8>
 801235c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8012360:	429e      	cmp	r6, r3
 8012362:	ec45 4b11 	vmov	d1, r4, r5
 8012366:	dce1      	bgt.n	801232c <scalbn+0x6c>
 8012368:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8012390 <scalbn+0xd0>
 801236c:	f000 f81e 	bl	80123ac <copysign>
 8012370:	a307      	add	r3, pc, #28	; (adr r3, 8012390 <scalbn+0xd0>)
 8012372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012376:	e7e0      	b.n	801233a <scalbn+0x7a>
 8012378:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801237c:	3236      	adds	r2, #54	; 0x36
 801237e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012382:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012386:	4620      	mov	r0, r4
 8012388:	4629      	mov	r1, r5
 801238a:	2200      	movs	r2, #0
 801238c:	4b06      	ldr	r3, [pc, #24]	; (80123a8 <scalbn+0xe8>)
 801238e:	e7b2      	b.n	80122f6 <scalbn+0x36>
 8012390:	c2f8f359 	.word	0xc2f8f359
 8012394:	01a56e1f 	.word	0x01a56e1f
 8012398:	8800759c 	.word	0x8800759c
 801239c:	7e37e43c 	.word	0x7e37e43c
 80123a0:	43500000 	.word	0x43500000
 80123a4:	ffff3cb0 	.word	0xffff3cb0
 80123a8:	3c900000 	.word	0x3c900000

080123ac <copysign>:
 80123ac:	ec51 0b10 	vmov	r0, r1, d0
 80123b0:	ee11 0a90 	vmov	r0, s3
 80123b4:	ee10 2a10 	vmov	r2, s0
 80123b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80123bc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80123c0:	ea41 0300 	orr.w	r3, r1, r0
 80123c4:	ec43 2b10 	vmov	d0, r2, r3
 80123c8:	4770      	bx	lr
	...

080123cc <__errno>:
 80123cc:	4b01      	ldr	r3, [pc, #4]	; (80123d4 <__errno+0x8>)
 80123ce:	6818      	ldr	r0, [r3, #0]
 80123d0:	4770      	bx	lr
 80123d2:	bf00      	nop
 80123d4:	2000000c 	.word	0x2000000c

080123d8 <__libc_init_array>:
 80123d8:	b570      	push	{r4, r5, r6, lr}
 80123da:	4e0d      	ldr	r6, [pc, #52]	; (8012410 <__libc_init_array+0x38>)
 80123dc:	4c0d      	ldr	r4, [pc, #52]	; (8012414 <__libc_init_array+0x3c>)
 80123de:	1ba4      	subs	r4, r4, r6
 80123e0:	10a4      	asrs	r4, r4, #2
 80123e2:	2500      	movs	r5, #0
 80123e4:	42a5      	cmp	r5, r4
 80123e6:	d109      	bne.n	80123fc <__libc_init_array+0x24>
 80123e8:	4e0b      	ldr	r6, [pc, #44]	; (8012418 <__libc_init_array+0x40>)
 80123ea:	4c0c      	ldr	r4, [pc, #48]	; (801241c <__libc_init_array+0x44>)
 80123ec:	f004 ff36 	bl	801725c <_init>
 80123f0:	1ba4      	subs	r4, r4, r6
 80123f2:	10a4      	asrs	r4, r4, #2
 80123f4:	2500      	movs	r5, #0
 80123f6:	42a5      	cmp	r5, r4
 80123f8:	d105      	bne.n	8012406 <__libc_init_array+0x2e>
 80123fa:	bd70      	pop	{r4, r5, r6, pc}
 80123fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012400:	4798      	blx	r3
 8012402:	3501      	adds	r5, #1
 8012404:	e7ee      	b.n	80123e4 <__libc_init_array+0xc>
 8012406:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801240a:	4798      	blx	r3
 801240c:	3501      	adds	r5, #1
 801240e:	e7f2      	b.n	80123f6 <__libc_init_array+0x1e>
 8012410:	08017e14 	.word	0x08017e14
 8012414:	08017e14 	.word	0x08017e14
 8012418:	08017e14 	.word	0x08017e14
 801241c:	08017e1c 	.word	0x08017e1c

08012420 <memset>:
 8012420:	4402      	add	r2, r0
 8012422:	4603      	mov	r3, r0
 8012424:	4293      	cmp	r3, r2
 8012426:	d100      	bne.n	801242a <memset+0xa>
 8012428:	4770      	bx	lr
 801242a:	f803 1b01 	strb.w	r1, [r3], #1
 801242e:	e7f9      	b.n	8012424 <memset+0x4>

08012430 <__cvt>:
 8012430:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012434:	ec55 4b10 	vmov	r4, r5, d0
 8012438:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801243a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801243e:	2d00      	cmp	r5, #0
 8012440:	460e      	mov	r6, r1
 8012442:	4691      	mov	r9, r2
 8012444:	4619      	mov	r1, r3
 8012446:	bfb8      	it	lt
 8012448:	4622      	movlt	r2, r4
 801244a:	462b      	mov	r3, r5
 801244c:	f027 0720 	bic.w	r7, r7, #32
 8012450:	bfbb      	ittet	lt
 8012452:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8012456:	461d      	movlt	r5, r3
 8012458:	2300      	movge	r3, #0
 801245a:	232d      	movlt	r3, #45	; 0x2d
 801245c:	bfb8      	it	lt
 801245e:	4614      	movlt	r4, r2
 8012460:	2f46      	cmp	r7, #70	; 0x46
 8012462:	700b      	strb	r3, [r1, #0]
 8012464:	d004      	beq.n	8012470 <__cvt+0x40>
 8012466:	2f45      	cmp	r7, #69	; 0x45
 8012468:	d100      	bne.n	801246c <__cvt+0x3c>
 801246a:	3601      	adds	r6, #1
 801246c:	2102      	movs	r1, #2
 801246e:	e000      	b.n	8012472 <__cvt+0x42>
 8012470:	2103      	movs	r1, #3
 8012472:	ab03      	add	r3, sp, #12
 8012474:	9301      	str	r3, [sp, #4]
 8012476:	ab02      	add	r3, sp, #8
 8012478:	9300      	str	r3, [sp, #0]
 801247a:	4632      	mov	r2, r6
 801247c:	4653      	mov	r3, sl
 801247e:	ec45 4b10 	vmov	d0, r4, r5
 8012482:	f001 ffb1 	bl	80143e8 <_dtoa_r>
 8012486:	2f47      	cmp	r7, #71	; 0x47
 8012488:	4680      	mov	r8, r0
 801248a:	d102      	bne.n	8012492 <__cvt+0x62>
 801248c:	f019 0f01 	tst.w	r9, #1
 8012490:	d026      	beq.n	80124e0 <__cvt+0xb0>
 8012492:	2f46      	cmp	r7, #70	; 0x46
 8012494:	eb08 0906 	add.w	r9, r8, r6
 8012498:	d111      	bne.n	80124be <__cvt+0x8e>
 801249a:	f898 3000 	ldrb.w	r3, [r8]
 801249e:	2b30      	cmp	r3, #48	; 0x30
 80124a0:	d10a      	bne.n	80124b8 <__cvt+0x88>
 80124a2:	2200      	movs	r2, #0
 80124a4:	2300      	movs	r3, #0
 80124a6:	4620      	mov	r0, r4
 80124a8:	4629      	mov	r1, r5
 80124aa:	f7ee fb25 	bl	8000af8 <__aeabi_dcmpeq>
 80124ae:	b918      	cbnz	r0, 80124b8 <__cvt+0x88>
 80124b0:	f1c6 0601 	rsb	r6, r6, #1
 80124b4:	f8ca 6000 	str.w	r6, [sl]
 80124b8:	f8da 3000 	ldr.w	r3, [sl]
 80124bc:	4499      	add	r9, r3
 80124be:	2200      	movs	r2, #0
 80124c0:	2300      	movs	r3, #0
 80124c2:	4620      	mov	r0, r4
 80124c4:	4629      	mov	r1, r5
 80124c6:	f7ee fb17 	bl	8000af8 <__aeabi_dcmpeq>
 80124ca:	b938      	cbnz	r0, 80124dc <__cvt+0xac>
 80124cc:	2230      	movs	r2, #48	; 0x30
 80124ce:	9b03      	ldr	r3, [sp, #12]
 80124d0:	454b      	cmp	r3, r9
 80124d2:	d205      	bcs.n	80124e0 <__cvt+0xb0>
 80124d4:	1c59      	adds	r1, r3, #1
 80124d6:	9103      	str	r1, [sp, #12]
 80124d8:	701a      	strb	r2, [r3, #0]
 80124da:	e7f8      	b.n	80124ce <__cvt+0x9e>
 80124dc:	f8cd 900c 	str.w	r9, [sp, #12]
 80124e0:	9b03      	ldr	r3, [sp, #12]
 80124e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80124e4:	eba3 0308 	sub.w	r3, r3, r8
 80124e8:	4640      	mov	r0, r8
 80124ea:	6013      	str	r3, [r2, #0]
 80124ec:	b004      	add	sp, #16
 80124ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080124f2 <__exponent>:
 80124f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80124f4:	2900      	cmp	r1, #0
 80124f6:	4604      	mov	r4, r0
 80124f8:	bfba      	itte	lt
 80124fa:	4249      	neglt	r1, r1
 80124fc:	232d      	movlt	r3, #45	; 0x2d
 80124fe:	232b      	movge	r3, #43	; 0x2b
 8012500:	2909      	cmp	r1, #9
 8012502:	f804 2b02 	strb.w	r2, [r4], #2
 8012506:	7043      	strb	r3, [r0, #1]
 8012508:	dd20      	ble.n	801254c <__exponent+0x5a>
 801250a:	f10d 0307 	add.w	r3, sp, #7
 801250e:	461f      	mov	r7, r3
 8012510:	260a      	movs	r6, #10
 8012512:	fb91 f5f6 	sdiv	r5, r1, r6
 8012516:	fb06 1115 	mls	r1, r6, r5, r1
 801251a:	3130      	adds	r1, #48	; 0x30
 801251c:	2d09      	cmp	r5, #9
 801251e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8012522:	f103 32ff 	add.w	r2, r3, #4294967295
 8012526:	4629      	mov	r1, r5
 8012528:	dc09      	bgt.n	801253e <__exponent+0x4c>
 801252a:	3130      	adds	r1, #48	; 0x30
 801252c:	3b02      	subs	r3, #2
 801252e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8012532:	42bb      	cmp	r3, r7
 8012534:	4622      	mov	r2, r4
 8012536:	d304      	bcc.n	8012542 <__exponent+0x50>
 8012538:	1a10      	subs	r0, r2, r0
 801253a:	b003      	add	sp, #12
 801253c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801253e:	4613      	mov	r3, r2
 8012540:	e7e7      	b.n	8012512 <__exponent+0x20>
 8012542:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012546:	f804 2b01 	strb.w	r2, [r4], #1
 801254a:	e7f2      	b.n	8012532 <__exponent+0x40>
 801254c:	2330      	movs	r3, #48	; 0x30
 801254e:	4419      	add	r1, r3
 8012550:	7083      	strb	r3, [r0, #2]
 8012552:	1d02      	adds	r2, r0, #4
 8012554:	70c1      	strb	r1, [r0, #3]
 8012556:	e7ef      	b.n	8012538 <__exponent+0x46>

08012558 <_printf_float>:
 8012558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801255c:	b08d      	sub	sp, #52	; 0x34
 801255e:	460c      	mov	r4, r1
 8012560:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8012564:	4616      	mov	r6, r2
 8012566:	461f      	mov	r7, r3
 8012568:	4605      	mov	r5, r0
 801256a:	f003 f9a9 	bl	80158c0 <_localeconv_r>
 801256e:	6803      	ldr	r3, [r0, #0]
 8012570:	9304      	str	r3, [sp, #16]
 8012572:	4618      	mov	r0, r3
 8012574:	f7ed fe44 	bl	8000200 <strlen>
 8012578:	2300      	movs	r3, #0
 801257a:	930a      	str	r3, [sp, #40]	; 0x28
 801257c:	f8d8 3000 	ldr.w	r3, [r8]
 8012580:	9005      	str	r0, [sp, #20]
 8012582:	3307      	adds	r3, #7
 8012584:	f023 0307 	bic.w	r3, r3, #7
 8012588:	f103 0208 	add.w	r2, r3, #8
 801258c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8012590:	f8d4 b000 	ldr.w	fp, [r4]
 8012594:	f8c8 2000 	str.w	r2, [r8]
 8012598:	e9d3 2300 	ldrd	r2, r3, [r3]
 801259c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80125a0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80125a4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80125a8:	9307      	str	r3, [sp, #28]
 80125aa:	f8cd 8018 	str.w	r8, [sp, #24]
 80125ae:	f04f 32ff 	mov.w	r2, #4294967295
 80125b2:	4ba7      	ldr	r3, [pc, #668]	; (8012850 <_printf_float+0x2f8>)
 80125b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80125b8:	f7ee fad0 	bl	8000b5c <__aeabi_dcmpun>
 80125bc:	bb70      	cbnz	r0, 801261c <_printf_float+0xc4>
 80125be:	f04f 32ff 	mov.w	r2, #4294967295
 80125c2:	4ba3      	ldr	r3, [pc, #652]	; (8012850 <_printf_float+0x2f8>)
 80125c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80125c8:	f7ee faaa 	bl	8000b20 <__aeabi_dcmple>
 80125cc:	bb30      	cbnz	r0, 801261c <_printf_float+0xc4>
 80125ce:	2200      	movs	r2, #0
 80125d0:	2300      	movs	r3, #0
 80125d2:	4640      	mov	r0, r8
 80125d4:	4649      	mov	r1, r9
 80125d6:	f7ee fa99 	bl	8000b0c <__aeabi_dcmplt>
 80125da:	b110      	cbz	r0, 80125e2 <_printf_float+0x8a>
 80125dc:	232d      	movs	r3, #45	; 0x2d
 80125de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80125e2:	4a9c      	ldr	r2, [pc, #624]	; (8012854 <_printf_float+0x2fc>)
 80125e4:	4b9c      	ldr	r3, [pc, #624]	; (8012858 <_printf_float+0x300>)
 80125e6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80125ea:	bf8c      	ite	hi
 80125ec:	4690      	movhi	r8, r2
 80125ee:	4698      	movls	r8, r3
 80125f0:	2303      	movs	r3, #3
 80125f2:	f02b 0204 	bic.w	r2, fp, #4
 80125f6:	6123      	str	r3, [r4, #16]
 80125f8:	6022      	str	r2, [r4, #0]
 80125fa:	f04f 0900 	mov.w	r9, #0
 80125fe:	9700      	str	r7, [sp, #0]
 8012600:	4633      	mov	r3, r6
 8012602:	aa0b      	add	r2, sp, #44	; 0x2c
 8012604:	4621      	mov	r1, r4
 8012606:	4628      	mov	r0, r5
 8012608:	f000 f9e6 	bl	80129d8 <_printf_common>
 801260c:	3001      	adds	r0, #1
 801260e:	f040 808d 	bne.w	801272c <_printf_float+0x1d4>
 8012612:	f04f 30ff 	mov.w	r0, #4294967295
 8012616:	b00d      	add	sp, #52	; 0x34
 8012618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801261c:	4642      	mov	r2, r8
 801261e:	464b      	mov	r3, r9
 8012620:	4640      	mov	r0, r8
 8012622:	4649      	mov	r1, r9
 8012624:	f7ee fa9a 	bl	8000b5c <__aeabi_dcmpun>
 8012628:	b110      	cbz	r0, 8012630 <_printf_float+0xd8>
 801262a:	4a8c      	ldr	r2, [pc, #560]	; (801285c <_printf_float+0x304>)
 801262c:	4b8c      	ldr	r3, [pc, #560]	; (8012860 <_printf_float+0x308>)
 801262e:	e7da      	b.n	80125e6 <_printf_float+0x8e>
 8012630:	6861      	ldr	r1, [r4, #4]
 8012632:	1c4b      	adds	r3, r1, #1
 8012634:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8012638:	a80a      	add	r0, sp, #40	; 0x28
 801263a:	d13e      	bne.n	80126ba <_printf_float+0x162>
 801263c:	2306      	movs	r3, #6
 801263e:	6063      	str	r3, [r4, #4]
 8012640:	2300      	movs	r3, #0
 8012642:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8012646:	ab09      	add	r3, sp, #36	; 0x24
 8012648:	9300      	str	r3, [sp, #0]
 801264a:	ec49 8b10 	vmov	d0, r8, r9
 801264e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8012652:	6022      	str	r2, [r4, #0]
 8012654:	f8cd a004 	str.w	sl, [sp, #4]
 8012658:	6861      	ldr	r1, [r4, #4]
 801265a:	4628      	mov	r0, r5
 801265c:	f7ff fee8 	bl	8012430 <__cvt>
 8012660:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8012664:	2b47      	cmp	r3, #71	; 0x47
 8012666:	4680      	mov	r8, r0
 8012668:	d109      	bne.n	801267e <_printf_float+0x126>
 801266a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801266c:	1cd8      	adds	r0, r3, #3
 801266e:	db02      	blt.n	8012676 <_printf_float+0x11e>
 8012670:	6862      	ldr	r2, [r4, #4]
 8012672:	4293      	cmp	r3, r2
 8012674:	dd47      	ble.n	8012706 <_printf_float+0x1ae>
 8012676:	f1aa 0a02 	sub.w	sl, sl, #2
 801267a:	fa5f fa8a 	uxtb.w	sl, sl
 801267e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8012682:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012684:	d824      	bhi.n	80126d0 <_printf_float+0x178>
 8012686:	3901      	subs	r1, #1
 8012688:	4652      	mov	r2, sl
 801268a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801268e:	9109      	str	r1, [sp, #36]	; 0x24
 8012690:	f7ff ff2f 	bl	80124f2 <__exponent>
 8012694:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012696:	1813      	adds	r3, r2, r0
 8012698:	2a01      	cmp	r2, #1
 801269a:	4681      	mov	r9, r0
 801269c:	6123      	str	r3, [r4, #16]
 801269e:	dc02      	bgt.n	80126a6 <_printf_float+0x14e>
 80126a0:	6822      	ldr	r2, [r4, #0]
 80126a2:	07d1      	lsls	r1, r2, #31
 80126a4:	d501      	bpl.n	80126aa <_printf_float+0x152>
 80126a6:	3301      	adds	r3, #1
 80126a8:	6123      	str	r3, [r4, #16]
 80126aa:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80126ae:	2b00      	cmp	r3, #0
 80126b0:	d0a5      	beq.n	80125fe <_printf_float+0xa6>
 80126b2:	232d      	movs	r3, #45	; 0x2d
 80126b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80126b8:	e7a1      	b.n	80125fe <_printf_float+0xa6>
 80126ba:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80126be:	f000 8177 	beq.w	80129b0 <_printf_float+0x458>
 80126c2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80126c6:	d1bb      	bne.n	8012640 <_printf_float+0xe8>
 80126c8:	2900      	cmp	r1, #0
 80126ca:	d1b9      	bne.n	8012640 <_printf_float+0xe8>
 80126cc:	2301      	movs	r3, #1
 80126ce:	e7b6      	b.n	801263e <_printf_float+0xe6>
 80126d0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80126d4:	d119      	bne.n	801270a <_printf_float+0x1b2>
 80126d6:	2900      	cmp	r1, #0
 80126d8:	6863      	ldr	r3, [r4, #4]
 80126da:	dd0c      	ble.n	80126f6 <_printf_float+0x19e>
 80126dc:	6121      	str	r1, [r4, #16]
 80126de:	b913      	cbnz	r3, 80126e6 <_printf_float+0x18e>
 80126e0:	6822      	ldr	r2, [r4, #0]
 80126e2:	07d2      	lsls	r2, r2, #31
 80126e4:	d502      	bpl.n	80126ec <_printf_float+0x194>
 80126e6:	3301      	adds	r3, #1
 80126e8:	440b      	add	r3, r1
 80126ea:	6123      	str	r3, [r4, #16]
 80126ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80126ee:	65a3      	str	r3, [r4, #88]	; 0x58
 80126f0:	f04f 0900 	mov.w	r9, #0
 80126f4:	e7d9      	b.n	80126aa <_printf_float+0x152>
 80126f6:	b913      	cbnz	r3, 80126fe <_printf_float+0x1a6>
 80126f8:	6822      	ldr	r2, [r4, #0]
 80126fa:	07d0      	lsls	r0, r2, #31
 80126fc:	d501      	bpl.n	8012702 <_printf_float+0x1aa>
 80126fe:	3302      	adds	r3, #2
 8012700:	e7f3      	b.n	80126ea <_printf_float+0x192>
 8012702:	2301      	movs	r3, #1
 8012704:	e7f1      	b.n	80126ea <_printf_float+0x192>
 8012706:	f04f 0a67 	mov.w	sl, #103	; 0x67
 801270a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801270e:	4293      	cmp	r3, r2
 8012710:	db05      	blt.n	801271e <_printf_float+0x1c6>
 8012712:	6822      	ldr	r2, [r4, #0]
 8012714:	6123      	str	r3, [r4, #16]
 8012716:	07d1      	lsls	r1, r2, #31
 8012718:	d5e8      	bpl.n	80126ec <_printf_float+0x194>
 801271a:	3301      	adds	r3, #1
 801271c:	e7e5      	b.n	80126ea <_printf_float+0x192>
 801271e:	2b00      	cmp	r3, #0
 8012720:	bfd4      	ite	le
 8012722:	f1c3 0302 	rsble	r3, r3, #2
 8012726:	2301      	movgt	r3, #1
 8012728:	4413      	add	r3, r2
 801272a:	e7de      	b.n	80126ea <_printf_float+0x192>
 801272c:	6823      	ldr	r3, [r4, #0]
 801272e:	055a      	lsls	r2, r3, #21
 8012730:	d407      	bmi.n	8012742 <_printf_float+0x1ea>
 8012732:	6923      	ldr	r3, [r4, #16]
 8012734:	4642      	mov	r2, r8
 8012736:	4631      	mov	r1, r6
 8012738:	4628      	mov	r0, r5
 801273a:	47b8      	blx	r7
 801273c:	3001      	adds	r0, #1
 801273e:	d12b      	bne.n	8012798 <_printf_float+0x240>
 8012740:	e767      	b.n	8012612 <_printf_float+0xba>
 8012742:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8012746:	f240 80dc 	bls.w	8012902 <_printf_float+0x3aa>
 801274a:	2200      	movs	r2, #0
 801274c:	2300      	movs	r3, #0
 801274e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012752:	f7ee f9d1 	bl	8000af8 <__aeabi_dcmpeq>
 8012756:	2800      	cmp	r0, #0
 8012758:	d033      	beq.n	80127c2 <_printf_float+0x26a>
 801275a:	2301      	movs	r3, #1
 801275c:	4a41      	ldr	r2, [pc, #260]	; (8012864 <_printf_float+0x30c>)
 801275e:	4631      	mov	r1, r6
 8012760:	4628      	mov	r0, r5
 8012762:	47b8      	blx	r7
 8012764:	3001      	adds	r0, #1
 8012766:	f43f af54 	beq.w	8012612 <_printf_float+0xba>
 801276a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801276e:	429a      	cmp	r2, r3
 8012770:	db02      	blt.n	8012778 <_printf_float+0x220>
 8012772:	6823      	ldr	r3, [r4, #0]
 8012774:	07d8      	lsls	r0, r3, #31
 8012776:	d50f      	bpl.n	8012798 <_printf_float+0x240>
 8012778:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801277c:	4631      	mov	r1, r6
 801277e:	4628      	mov	r0, r5
 8012780:	47b8      	blx	r7
 8012782:	3001      	adds	r0, #1
 8012784:	f43f af45 	beq.w	8012612 <_printf_float+0xba>
 8012788:	f04f 0800 	mov.w	r8, #0
 801278c:	f104 091a 	add.w	r9, r4, #26
 8012790:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012792:	3b01      	subs	r3, #1
 8012794:	4543      	cmp	r3, r8
 8012796:	dc09      	bgt.n	80127ac <_printf_float+0x254>
 8012798:	6823      	ldr	r3, [r4, #0]
 801279a:	079b      	lsls	r3, r3, #30
 801279c:	f100 8103 	bmi.w	80129a6 <_printf_float+0x44e>
 80127a0:	68e0      	ldr	r0, [r4, #12]
 80127a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80127a4:	4298      	cmp	r0, r3
 80127a6:	bfb8      	it	lt
 80127a8:	4618      	movlt	r0, r3
 80127aa:	e734      	b.n	8012616 <_printf_float+0xbe>
 80127ac:	2301      	movs	r3, #1
 80127ae:	464a      	mov	r2, r9
 80127b0:	4631      	mov	r1, r6
 80127b2:	4628      	mov	r0, r5
 80127b4:	47b8      	blx	r7
 80127b6:	3001      	adds	r0, #1
 80127b8:	f43f af2b 	beq.w	8012612 <_printf_float+0xba>
 80127bc:	f108 0801 	add.w	r8, r8, #1
 80127c0:	e7e6      	b.n	8012790 <_printf_float+0x238>
 80127c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	dc2b      	bgt.n	8012820 <_printf_float+0x2c8>
 80127c8:	2301      	movs	r3, #1
 80127ca:	4a26      	ldr	r2, [pc, #152]	; (8012864 <_printf_float+0x30c>)
 80127cc:	4631      	mov	r1, r6
 80127ce:	4628      	mov	r0, r5
 80127d0:	47b8      	blx	r7
 80127d2:	3001      	adds	r0, #1
 80127d4:	f43f af1d 	beq.w	8012612 <_printf_float+0xba>
 80127d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80127da:	b923      	cbnz	r3, 80127e6 <_printf_float+0x28e>
 80127dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80127de:	b913      	cbnz	r3, 80127e6 <_printf_float+0x28e>
 80127e0:	6823      	ldr	r3, [r4, #0]
 80127e2:	07d9      	lsls	r1, r3, #31
 80127e4:	d5d8      	bpl.n	8012798 <_printf_float+0x240>
 80127e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80127ea:	4631      	mov	r1, r6
 80127ec:	4628      	mov	r0, r5
 80127ee:	47b8      	blx	r7
 80127f0:	3001      	adds	r0, #1
 80127f2:	f43f af0e 	beq.w	8012612 <_printf_float+0xba>
 80127f6:	f04f 0900 	mov.w	r9, #0
 80127fa:	f104 0a1a 	add.w	sl, r4, #26
 80127fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012800:	425b      	negs	r3, r3
 8012802:	454b      	cmp	r3, r9
 8012804:	dc01      	bgt.n	801280a <_printf_float+0x2b2>
 8012806:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012808:	e794      	b.n	8012734 <_printf_float+0x1dc>
 801280a:	2301      	movs	r3, #1
 801280c:	4652      	mov	r2, sl
 801280e:	4631      	mov	r1, r6
 8012810:	4628      	mov	r0, r5
 8012812:	47b8      	blx	r7
 8012814:	3001      	adds	r0, #1
 8012816:	f43f aefc 	beq.w	8012612 <_printf_float+0xba>
 801281a:	f109 0901 	add.w	r9, r9, #1
 801281e:	e7ee      	b.n	80127fe <_printf_float+0x2a6>
 8012820:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012822:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012824:	429a      	cmp	r2, r3
 8012826:	bfa8      	it	ge
 8012828:	461a      	movge	r2, r3
 801282a:	2a00      	cmp	r2, #0
 801282c:	4691      	mov	r9, r2
 801282e:	dd07      	ble.n	8012840 <_printf_float+0x2e8>
 8012830:	4613      	mov	r3, r2
 8012832:	4631      	mov	r1, r6
 8012834:	4642      	mov	r2, r8
 8012836:	4628      	mov	r0, r5
 8012838:	47b8      	blx	r7
 801283a:	3001      	adds	r0, #1
 801283c:	f43f aee9 	beq.w	8012612 <_printf_float+0xba>
 8012840:	f104 031a 	add.w	r3, r4, #26
 8012844:	f04f 0b00 	mov.w	fp, #0
 8012848:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801284c:	9306      	str	r3, [sp, #24]
 801284e:	e015      	b.n	801287c <_printf_float+0x324>
 8012850:	7fefffff 	.word	0x7fefffff
 8012854:	08017ad8 	.word	0x08017ad8
 8012858:	08017ad4 	.word	0x08017ad4
 801285c:	08017ae0 	.word	0x08017ae0
 8012860:	08017adc 	.word	0x08017adc
 8012864:	08017d03 	.word	0x08017d03
 8012868:	2301      	movs	r3, #1
 801286a:	9a06      	ldr	r2, [sp, #24]
 801286c:	4631      	mov	r1, r6
 801286e:	4628      	mov	r0, r5
 8012870:	47b8      	blx	r7
 8012872:	3001      	adds	r0, #1
 8012874:	f43f aecd 	beq.w	8012612 <_printf_float+0xba>
 8012878:	f10b 0b01 	add.w	fp, fp, #1
 801287c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8012880:	ebaa 0309 	sub.w	r3, sl, r9
 8012884:	455b      	cmp	r3, fp
 8012886:	dcef      	bgt.n	8012868 <_printf_float+0x310>
 8012888:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801288c:	429a      	cmp	r2, r3
 801288e:	44d0      	add	r8, sl
 8012890:	db15      	blt.n	80128be <_printf_float+0x366>
 8012892:	6823      	ldr	r3, [r4, #0]
 8012894:	07da      	lsls	r2, r3, #31
 8012896:	d412      	bmi.n	80128be <_printf_float+0x366>
 8012898:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801289a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801289c:	eba3 020a 	sub.w	r2, r3, sl
 80128a0:	eba3 0a01 	sub.w	sl, r3, r1
 80128a4:	4592      	cmp	sl, r2
 80128a6:	bfa8      	it	ge
 80128a8:	4692      	movge	sl, r2
 80128aa:	f1ba 0f00 	cmp.w	sl, #0
 80128ae:	dc0e      	bgt.n	80128ce <_printf_float+0x376>
 80128b0:	f04f 0800 	mov.w	r8, #0
 80128b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80128b8:	f104 091a 	add.w	r9, r4, #26
 80128bc:	e019      	b.n	80128f2 <_printf_float+0x39a>
 80128be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80128c2:	4631      	mov	r1, r6
 80128c4:	4628      	mov	r0, r5
 80128c6:	47b8      	blx	r7
 80128c8:	3001      	adds	r0, #1
 80128ca:	d1e5      	bne.n	8012898 <_printf_float+0x340>
 80128cc:	e6a1      	b.n	8012612 <_printf_float+0xba>
 80128ce:	4653      	mov	r3, sl
 80128d0:	4642      	mov	r2, r8
 80128d2:	4631      	mov	r1, r6
 80128d4:	4628      	mov	r0, r5
 80128d6:	47b8      	blx	r7
 80128d8:	3001      	adds	r0, #1
 80128da:	d1e9      	bne.n	80128b0 <_printf_float+0x358>
 80128dc:	e699      	b.n	8012612 <_printf_float+0xba>
 80128de:	2301      	movs	r3, #1
 80128e0:	464a      	mov	r2, r9
 80128e2:	4631      	mov	r1, r6
 80128e4:	4628      	mov	r0, r5
 80128e6:	47b8      	blx	r7
 80128e8:	3001      	adds	r0, #1
 80128ea:	f43f ae92 	beq.w	8012612 <_printf_float+0xba>
 80128ee:	f108 0801 	add.w	r8, r8, #1
 80128f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80128f6:	1a9b      	subs	r3, r3, r2
 80128f8:	eba3 030a 	sub.w	r3, r3, sl
 80128fc:	4543      	cmp	r3, r8
 80128fe:	dcee      	bgt.n	80128de <_printf_float+0x386>
 8012900:	e74a      	b.n	8012798 <_printf_float+0x240>
 8012902:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012904:	2a01      	cmp	r2, #1
 8012906:	dc01      	bgt.n	801290c <_printf_float+0x3b4>
 8012908:	07db      	lsls	r3, r3, #31
 801290a:	d53a      	bpl.n	8012982 <_printf_float+0x42a>
 801290c:	2301      	movs	r3, #1
 801290e:	4642      	mov	r2, r8
 8012910:	4631      	mov	r1, r6
 8012912:	4628      	mov	r0, r5
 8012914:	47b8      	blx	r7
 8012916:	3001      	adds	r0, #1
 8012918:	f43f ae7b 	beq.w	8012612 <_printf_float+0xba>
 801291c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012920:	4631      	mov	r1, r6
 8012922:	4628      	mov	r0, r5
 8012924:	47b8      	blx	r7
 8012926:	3001      	adds	r0, #1
 8012928:	f108 0801 	add.w	r8, r8, #1
 801292c:	f43f ae71 	beq.w	8012612 <_printf_float+0xba>
 8012930:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012932:	2200      	movs	r2, #0
 8012934:	f103 3aff 	add.w	sl, r3, #4294967295
 8012938:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801293c:	2300      	movs	r3, #0
 801293e:	f7ee f8db 	bl	8000af8 <__aeabi_dcmpeq>
 8012942:	b9c8      	cbnz	r0, 8012978 <_printf_float+0x420>
 8012944:	4653      	mov	r3, sl
 8012946:	4642      	mov	r2, r8
 8012948:	4631      	mov	r1, r6
 801294a:	4628      	mov	r0, r5
 801294c:	47b8      	blx	r7
 801294e:	3001      	adds	r0, #1
 8012950:	d10e      	bne.n	8012970 <_printf_float+0x418>
 8012952:	e65e      	b.n	8012612 <_printf_float+0xba>
 8012954:	2301      	movs	r3, #1
 8012956:	4652      	mov	r2, sl
 8012958:	4631      	mov	r1, r6
 801295a:	4628      	mov	r0, r5
 801295c:	47b8      	blx	r7
 801295e:	3001      	adds	r0, #1
 8012960:	f43f ae57 	beq.w	8012612 <_printf_float+0xba>
 8012964:	f108 0801 	add.w	r8, r8, #1
 8012968:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801296a:	3b01      	subs	r3, #1
 801296c:	4543      	cmp	r3, r8
 801296e:	dcf1      	bgt.n	8012954 <_printf_float+0x3fc>
 8012970:	464b      	mov	r3, r9
 8012972:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8012976:	e6de      	b.n	8012736 <_printf_float+0x1de>
 8012978:	f04f 0800 	mov.w	r8, #0
 801297c:	f104 0a1a 	add.w	sl, r4, #26
 8012980:	e7f2      	b.n	8012968 <_printf_float+0x410>
 8012982:	2301      	movs	r3, #1
 8012984:	e7df      	b.n	8012946 <_printf_float+0x3ee>
 8012986:	2301      	movs	r3, #1
 8012988:	464a      	mov	r2, r9
 801298a:	4631      	mov	r1, r6
 801298c:	4628      	mov	r0, r5
 801298e:	47b8      	blx	r7
 8012990:	3001      	adds	r0, #1
 8012992:	f43f ae3e 	beq.w	8012612 <_printf_float+0xba>
 8012996:	f108 0801 	add.w	r8, r8, #1
 801299a:	68e3      	ldr	r3, [r4, #12]
 801299c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801299e:	1a9b      	subs	r3, r3, r2
 80129a0:	4543      	cmp	r3, r8
 80129a2:	dcf0      	bgt.n	8012986 <_printf_float+0x42e>
 80129a4:	e6fc      	b.n	80127a0 <_printf_float+0x248>
 80129a6:	f04f 0800 	mov.w	r8, #0
 80129aa:	f104 0919 	add.w	r9, r4, #25
 80129ae:	e7f4      	b.n	801299a <_printf_float+0x442>
 80129b0:	2900      	cmp	r1, #0
 80129b2:	f43f ae8b 	beq.w	80126cc <_printf_float+0x174>
 80129b6:	2300      	movs	r3, #0
 80129b8:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80129bc:	ab09      	add	r3, sp, #36	; 0x24
 80129be:	9300      	str	r3, [sp, #0]
 80129c0:	ec49 8b10 	vmov	d0, r8, r9
 80129c4:	6022      	str	r2, [r4, #0]
 80129c6:	f8cd a004 	str.w	sl, [sp, #4]
 80129ca:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80129ce:	4628      	mov	r0, r5
 80129d0:	f7ff fd2e 	bl	8012430 <__cvt>
 80129d4:	4680      	mov	r8, r0
 80129d6:	e648      	b.n	801266a <_printf_float+0x112>

080129d8 <_printf_common>:
 80129d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80129dc:	4691      	mov	r9, r2
 80129de:	461f      	mov	r7, r3
 80129e0:	688a      	ldr	r2, [r1, #8]
 80129e2:	690b      	ldr	r3, [r1, #16]
 80129e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80129e8:	4293      	cmp	r3, r2
 80129ea:	bfb8      	it	lt
 80129ec:	4613      	movlt	r3, r2
 80129ee:	f8c9 3000 	str.w	r3, [r9]
 80129f2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80129f6:	4606      	mov	r6, r0
 80129f8:	460c      	mov	r4, r1
 80129fa:	b112      	cbz	r2, 8012a02 <_printf_common+0x2a>
 80129fc:	3301      	adds	r3, #1
 80129fe:	f8c9 3000 	str.w	r3, [r9]
 8012a02:	6823      	ldr	r3, [r4, #0]
 8012a04:	0699      	lsls	r1, r3, #26
 8012a06:	bf42      	ittt	mi
 8012a08:	f8d9 3000 	ldrmi.w	r3, [r9]
 8012a0c:	3302      	addmi	r3, #2
 8012a0e:	f8c9 3000 	strmi.w	r3, [r9]
 8012a12:	6825      	ldr	r5, [r4, #0]
 8012a14:	f015 0506 	ands.w	r5, r5, #6
 8012a18:	d107      	bne.n	8012a2a <_printf_common+0x52>
 8012a1a:	f104 0a19 	add.w	sl, r4, #25
 8012a1e:	68e3      	ldr	r3, [r4, #12]
 8012a20:	f8d9 2000 	ldr.w	r2, [r9]
 8012a24:	1a9b      	subs	r3, r3, r2
 8012a26:	42ab      	cmp	r3, r5
 8012a28:	dc28      	bgt.n	8012a7c <_printf_common+0xa4>
 8012a2a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8012a2e:	6822      	ldr	r2, [r4, #0]
 8012a30:	3300      	adds	r3, #0
 8012a32:	bf18      	it	ne
 8012a34:	2301      	movne	r3, #1
 8012a36:	0692      	lsls	r2, r2, #26
 8012a38:	d42d      	bmi.n	8012a96 <_printf_common+0xbe>
 8012a3a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012a3e:	4639      	mov	r1, r7
 8012a40:	4630      	mov	r0, r6
 8012a42:	47c0      	blx	r8
 8012a44:	3001      	adds	r0, #1
 8012a46:	d020      	beq.n	8012a8a <_printf_common+0xb2>
 8012a48:	6823      	ldr	r3, [r4, #0]
 8012a4a:	68e5      	ldr	r5, [r4, #12]
 8012a4c:	f8d9 2000 	ldr.w	r2, [r9]
 8012a50:	f003 0306 	and.w	r3, r3, #6
 8012a54:	2b04      	cmp	r3, #4
 8012a56:	bf08      	it	eq
 8012a58:	1aad      	subeq	r5, r5, r2
 8012a5a:	68a3      	ldr	r3, [r4, #8]
 8012a5c:	6922      	ldr	r2, [r4, #16]
 8012a5e:	bf0c      	ite	eq
 8012a60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012a64:	2500      	movne	r5, #0
 8012a66:	4293      	cmp	r3, r2
 8012a68:	bfc4      	itt	gt
 8012a6a:	1a9b      	subgt	r3, r3, r2
 8012a6c:	18ed      	addgt	r5, r5, r3
 8012a6e:	f04f 0900 	mov.w	r9, #0
 8012a72:	341a      	adds	r4, #26
 8012a74:	454d      	cmp	r5, r9
 8012a76:	d11a      	bne.n	8012aae <_printf_common+0xd6>
 8012a78:	2000      	movs	r0, #0
 8012a7a:	e008      	b.n	8012a8e <_printf_common+0xb6>
 8012a7c:	2301      	movs	r3, #1
 8012a7e:	4652      	mov	r2, sl
 8012a80:	4639      	mov	r1, r7
 8012a82:	4630      	mov	r0, r6
 8012a84:	47c0      	blx	r8
 8012a86:	3001      	adds	r0, #1
 8012a88:	d103      	bne.n	8012a92 <_printf_common+0xba>
 8012a8a:	f04f 30ff 	mov.w	r0, #4294967295
 8012a8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012a92:	3501      	adds	r5, #1
 8012a94:	e7c3      	b.n	8012a1e <_printf_common+0x46>
 8012a96:	18e1      	adds	r1, r4, r3
 8012a98:	1c5a      	adds	r2, r3, #1
 8012a9a:	2030      	movs	r0, #48	; 0x30
 8012a9c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012aa0:	4422      	add	r2, r4
 8012aa2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012aa6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012aaa:	3302      	adds	r3, #2
 8012aac:	e7c5      	b.n	8012a3a <_printf_common+0x62>
 8012aae:	2301      	movs	r3, #1
 8012ab0:	4622      	mov	r2, r4
 8012ab2:	4639      	mov	r1, r7
 8012ab4:	4630      	mov	r0, r6
 8012ab6:	47c0      	blx	r8
 8012ab8:	3001      	adds	r0, #1
 8012aba:	d0e6      	beq.n	8012a8a <_printf_common+0xb2>
 8012abc:	f109 0901 	add.w	r9, r9, #1
 8012ac0:	e7d8      	b.n	8012a74 <_printf_common+0x9c>
	...

08012ac4 <_printf_i>:
 8012ac4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012ac8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8012acc:	460c      	mov	r4, r1
 8012ace:	7e09      	ldrb	r1, [r1, #24]
 8012ad0:	b085      	sub	sp, #20
 8012ad2:	296e      	cmp	r1, #110	; 0x6e
 8012ad4:	4617      	mov	r7, r2
 8012ad6:	4606      	mov	r6, r0
 8012ad8:	4698      	mov	r8, r3
 8012ada:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012adc:	f000 80b3 	beq.w	8012c46 <_printf_i+0x182>
 8012ae0:	d822      	bhi.n	8012b28 <_printf_i+0x64>
 8012ae2:	2963      	cmp	r1, #99	; 0x63
 8012ae4:	d036      	beq.n	8012b54 <_printf_i+0x90>
 8012ae6:	d80a      	bhi.n	8012afe <_printf_i+0x3a>
 8012ae8:	2900      	cmp	r1, #0
 8012aea:	f000 80b9 	beq.w	8012c60 <_printf_i+0x19c>
 8012aee:	2958      	cmp	r1, #88	; 0x58
 8012af0:	f000 8083 	beq.w	8012bfa <_printf_i+0x136>
 8012af4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012af8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8012afc:	e032      	b.n	8012b64 <_printf_i+0xa0>
 8012afe:	2964      	cmp	r1, #100	; 0x64
 8012b00:	d001      	beq.n	8012b06 <_printf_i+0x42>
 8012b02:	2969      	cmp	r1, #105	; 0x69
 8012b04:	d1f6      	bne.n	8012af4 <_printf_i+0x30>
 8012b06:	6820      	ldr	r0, [r4, #0]
 8012b08:	6813      	ldr	r3, [r2, #0]
 8012b0a:	0605      	lsls	r5, r0, #24
 8012b0c:	f103 0104 	add.w	r1, r3, #4
 8012b10:	d52a      	bpl.n	8012b68 <_printf_i+0xa4>
 8012b12:	681b      	ldr	r3, [r3, #0]
 8012b14:	6011      	str	r1, [r2, #0]
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	da03      	bge.n	8012b22 <_printf_i+0x5e>
 8012b1a:	222d      	movs	r2, #45	; 0x2d
 8012b1c:	425b      	negs	r3, r3
 8012b1e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8012b22:	486f      	ldr	r0, [pc, #444]	; (8012ce0 <_printf_i+0x21c>)
 8012b24:	220a      	movs	r2, #10
 8012b26:	e039      	b.n	8012b9c <_printf_i+0xd8>
 8012b28:	2973      	cmp	r1, #115	; 0x73
 8012b2a:	f000 809d 	beq.w	8012c68 <_printf_i+0x1a4>
 8012b2e:	d808      	bhi.n	8012b42 <_printf_i+0x7e>
 8012b30:	296f      	cmp	r1, #111	; 0x6f
 8012b32:	d020      	beq.n	8012b76 <_printf_i+0xb2>
 8012b34:	2970      	cmp	r1, #112	; 0x70
 8012b36:	d1dd      	bne.n	8012af4 <_printf_i+0x30>
 8012b38:	6823      	ldr	r3, [r4, #0]
 8012b3a:	f043 0320 	orr.w	r3, r3, #32
 8012b3e:	6023      	str	r3, [r4, #0]
 8012b40:	e003      	b.n	8012b4a <_printf_i+0x86>
 8012b42:	2975      	cmp	r1, #117	; 0x75
 8012b44:	d017      	beq.n	8012b76 <_printf_i+0xb2>
 8012b46:	2978      	cmp	r1, #120	; 0x78
 8012b48:	d1d4      	bne.n	8012af4 <_printf_i+0x30>
 8012b4a:	2378      	movs	r3, #120	; 0x78
 8012b4c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012b50:	4864      	ldr	r0, [pc, #400]	; (8012ce4 <_printf_i+0x220>)
 8012b52:	e055      	b.n	8012c00 <_printf_i+0x13c>
 8012b54:	6813      	ldr	r3, [r2, #0]
 8012b56:	1d19      	adds	r1, r3, #4
 8012b58:	681b      	ldr	r3, [r3, #0]
 8012b5a:	6011      	str	r1, [r2, #0]
 8012b5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012b60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012b64:	2301      	movs	r3, #1
 8012b66:	e08c      	b.n	8012c82 <_printf_i+0x1be>
 8012b68:	681b      	ldr	r3, [r3, #0]
 8012b6a:	6011      	str	r1, [r2, #0]
 8012b6c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012b70:	bf18      	it	ne
 8012b72:	b21b      	sxthne	r3, r3
 8012b74:	e7cf      	b.n	8012b16 <_printf_i+0x52>
 8012b76:	6813      	ldr	r3, [r2, #0]
 8012b78:	6825      	ldr	r5, [r4, #0]
 8012b7a:	1d18      	adds	r0, r3, #4
 8012b7c:	6010      	str	r0, [r2, #0]
 8012b7e:	0628      	lsls	r0, r5, #24
 8012b80:	d501      	bpl.n	8012b86 <_printf_i+0xc2>
 8012b82:	681b      	ldr	r3, [r3, #0]
 8012b84:	e002      	b.n	8012b8c <_printf_i+0xc8>
 8012b86:	0668      	lsls	r0, r5, #25
 8012b88:	d5fb      	bpl.n	8012b82 <_printf_i+0xbe>
 8012b8a:	881b      	ldrh	r3, [r3, #0]
 8012b8c:	4854      	ldr	r0, [pc, #336]	; (8012ce0 <_printf_i+0x21c>)
 8012b8e:	296f      	cmp	r1, #111	; 0x6f
 8012b90:	bf14      	ite	ne
 8012b92:	220a      	movne	r2, #10
 8012b94:	2208      	moveq	r2, #8
 8012b96:	2100      	movs	r1, #0
 8012b98:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012b9c:	6865      	ldr	r5, [r4, #4]
 8012b9e:	60a5      	str	r5, [r4, #8]
 8012ba0:	2d00      	cmp	r5, #0
 8012ba2:	f2c0 8095 	blt.w	8012cd0 <_printf_i+0x20c>
 8012ba6:	6821      	ldr	r1, [r4, #0]
 8012ba8:	f021 0104 	bic.w	r1, r1, #4
 8012bac:	6021      	str	r1, [r4, #0]
 8012bae:	2b00      	cmp	r3, #0
 8012bb0:	d13d      	bne.n	8012c2e <_printf_i+0x16a>
 8012bb2:	2d00      	cmp	r5, #0
 8012bb4:	f040 808e 	bne.w	8012cd4 <_printf_i+0x210>
 8012bb8:	4665      	mov	r5, ip
 8012bba:	2a08      	cmp	r2, #8
 8012bbc:	d10b      	bne.n	8012bd6 <_printf_i+0x112>
 8012bbe:	6823      	ldr	r3, [r4, #0]
 8012bc0:	07db      	lsls	r3, r3, #31
 8012bc2:	d508      	bpl.n	8012bd6 <_printf_i+0x112>
 8012bc4:	6923      	ldr	r3, [r4, #16]
 8012bc6:	6862      	ldr	r2, [r4, #4]
 8012bc8:	429a      	cmp	r2, r3
 8012bca:	bfde      	ittt	le
 8012bcc:	2330      	movle	r3, #48	; 0x30
 8012bce:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012bd2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012bd6:	ebac 0305 	sub.w	r3, ip, r5
 8012bda:	6123      	str	r3, [r4, #16]
 8012bdc:	f8cd 8000 	str.w	r8, [sp]
 8012be0:	463b      	mov	r3, r7
 8012be2:	aa03      	add	r2, sp, #12
 8012be4:	4621      	mov	r1, r4
 8012be6:	4630      	mov	r0, r6
 8012be8:	f7ff fef6 	bl	80129d8 <_printf_common>
 8012bec:	3001      	adds	r0, #1
 8012bee:	d14d      	bne.n	8012c8c <_printf_i+0x1c8>
 8012bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8012bf4:	b005      	add	sp, #20
 8012bf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012bfa:	4839      	ldr	r0, [pc, #228]	; (8012ce0 <_printf_i+0x21c>)
 8012bfc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8012c00:	6813      	ldr	r3, [r2, #0]
 8012c02:	6821      	ldr	r1, [r4, #0]
 8012c04:	1d1d      	adds	r5, r3, #4
 8012c06:	681b      	ldr	r3, [r3, #0]
 8012c08:	6015      	str	r5, [r2, #0]
 8012c0a:	060a      	lsls	r2, r1, #24
 8012c0c:	d50b      	bpl.n	8012c26 <_printf_i+0x162>
 8012c0e:	07ca      	lsls	r2, r1, #31
 8012c10:	bf44      	itt	mi
 8012c12:	f041 0120 	orrmi.w	r1, r1, #32
 8012c16:	6021      	strmi	r1, [r4, #0]
 8012c18:	b91b      	cbnz	r3, 8012c22 <_printf_i+0x15e>
 8012c1a:	6822      	ldr	r2, [r4, #0]
 8012c1c:	f022 0220 	bic.w	r2, r2, #32
 8012c20:	6022      	str	r2, [r4, #0]
 8012c22:	2210      	movs	r2, #16
 8012c24:	e7b7      	b.n	8012b96 <_printf_i+0xd2>
 8012c26:	064d      	lsls	r5, r1, #25
 8012c28:	bf48      	it	mi
 8012c2a:	b29b      	uxthmi	r3, r3
 8012c2c:	e7ef      	b.n	8012c0e <_printf_i+0x14a>
 8012c2e:	4665      	mov	r5, ip
 8012c30:	fbb3 f1f2 	udiv	r1, r3, r2
 8012c34:	fb02 3311 	mls	r3, r2, r1, r3
 8012c38:	5cc3      	ldrb	r3, [r0, r3]
 8012c3a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8012c3e:	460b      	mov	r3, r1
 8012c40:	2900      	cmp	r1, #0
 8012c42:	d1f5      	bne.n	8012c30 <_printf_i+0x16c>
 8012c44:	e7b9      	b.n	8012bba <_printf_i+0xf6>
 8012c46:	6813      	ldr	r3, [r2, #0]
 8012c48:	6825      	ldr	r5, [r4, #0]
 8012c4a:	6961      	ldr	r1, [r4, #20]
 8012c4c:	1d18      	adds	r0, r3, #4
 8012c4e:	6010      	str	r0, [r2, #0]
 8012c50:	0628      	lsls	r0, r5, #24
 8012c52:	681b      	ldr	r3, [r3, #0]
 8012c54:	d501      	bpl.n	8012c5a <_printf_i+0x196>
 8012c56:	6019      	str	r1, [r3, #0]
 8012c58:	e002      	b.n	8012c60 <_printf_i+0x19c>
 8012c5a:	066a      	lsls	r2, r5, #25
 8012c5c:	d5fb      	bpl.n	8012c56 <_printf_i+0x192>
 8012c5e:	8019      	strh	r1, [r3, #0]
 8012c60:	2300      	movs	r3, #0
 8012c62:	6123      	str	r3, [r4, #16]
 8012c64:	4665      	mov	r5, ip
 8012c66:	e7b9      	b.n	8012bdc <_printf_i+0x118>
 8012c68:	6813      	ldr	r3, [r2, #0]
 8012c6a:	1d19      	adds	r1, r3, #4
 8012c6c:	6011      	str	r1, [r2, #0]
 8012c6e:	681d      	ldr	r5, [r3, #0]
 8012c70:	6862      	ldr	r2, [r4, #4]
 8012c72:	2100      	movs	r1, #0
 8012c74:	4628      	mov	r0, r5
 8012c76:	f7ed facb 	bl	8000210 <memchr>
 8012c7a:	b108      	cbz	r0, 8012c80 <_printf_i+0x1bc>
 8012c7c:	1b40      	subs	r0, r0, r5
 8012c7e:	6060      	str	r0, [r4, #4]
 8012c80:	6863      	ldr	r3, [r4, #4]
 8012c82:	6123      	str	r3, [r4, #16]
 8012c84:	2300      	movs	r3, #0
 8012c86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012c8a:	e7a7      	b.n	8012bdc <_printf_i+0x118>
 8012c8c:	6923      	ldr	r3, [r4, #16]
 8012c8e:	462a      	mov	r2, r5
 8012c90:	4639      	mov	r1, r7
 8012c92:	4630      	mov	r0, r6
 8012c94:	47c0      	blx	r8
 8012c96:	3001      	adds	r0, #1
 8012c98:	d0aa      	beq.n	8012bf0 <_printf_i+0x12c>
 8012c9a:	6823      	ldr	r3, [r4, #0]
 8012c9c:	079b      	lsls	r3, r3, #30
 8012c9e:	d413      	bmi.n	8012cc8 <_printf_i+0x204>
 8012ca0:	68e0      	ldr	r0, [r4, #12]
 8012ca2:	9b03      	ldr	r3, [sp, #12]
 8012ca4:	4298      	cmp	r0, r3
 8012ca6:	bfb8      	it	lt
 8012ca8:	4618      	movlt	r0, r3
 8012caa:	e7a3      	b.n	8012bf4 <_printf_i+0x130>
 8012cac:	2301      	movs	r3, #1
 8012cae:	464a      	mov	r2, r9
 8012cb0:	4639      	mov	r1, r7
 8012cb2:	4630      	mov	r0, r6
 8012cb4:	47c0      	blx	r8
 8012cb6:	3001      	adds	r0, #1
 8012cb8:	d09a      	beq.n	8012bf0 <_printf_i+0x12c>
 8012cba:	3501      	adds	r5, #1
 8012cbc:	68e3      	ldr	r3, [r4, #12]
 8012cbe:	9a03      	ldr	r2, [sp, #12]
 8012cc0:	1a9b      	subs	r3, r3, r2
 8012cc2:	42ab      	cmp	r3, r5
 8012cc4:	dcf2      	bgt.n	8012cac <_printf_i+0x1e8>
 8012cc6:	e7eb      	b.n	8012ca0 <_printf_i+0x1dc>
 8012cc8:	2500      	movs	r5, #0
 8012cca:	f104 0919 	add.w	r9, r4, #25
 8012cce:	e7f5      	b.n	8012cbc <_printf_i+0x1f8>
 8012cd0:	2b00      	cmp	r3, #0
 8012cd2:	d1ac      	bne.n	8012c2e <_printf_i+0x16a>
 8012cd4:	7803      	ldrb	r3, [r0, #0]
 8012cd6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012cda:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012cde:	e76c      	b.n	8012bba <_printf_i+0xf6>
 8012ce0:	08017ae4 	.word	0x08017ae4
 8012ce4:	08017af5 	.word	0x08017af5

08012ce8 <_scanf_float>:
 8012ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012cec:	469a      	mov	sl, r3
 8012cee:	688b      	ldr	r3, [r1, #8]
 8012cf0:	4616      	mov	r6, r2
 8012cf2:	1e5a      	subs	r2, r3, #1
 8012cf4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8012cf8:	b087      	sub	sp, #28
 8012cfa:	bf83      	ittte	hi
 8012cfc:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8012d00:	189b      	addhi	r3, r3, r2
 8012d02:	9301      	strhi	r3, [sp, #4]
 8012d04:	2300      	movls	r3, #0
 8012d06:	bf86      	itte	hi
 8012d08:	f240 135d 	movwhi	r3, #349	; 0x15d
 8012d0c:	608b      	strhi	r3, [r1, #8]
 8012d0e:	9301      	strls	r3, [sp, #4]
 8012d10:	680b      	ldr	r3, [r1, #0]
 8012d12:	4688      	mov	r8, r1
 8012d14:	f04f 0b00 	mov.w	fp, #0
 8012d18:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8012d1c:	f848 3b1c 	str.w	r3, [r8], #28
 8012d20:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8012d24:	4607      	mov	r7, r0
 8012d26:	460c      	mov	r4, r1
 8012d28:	4645      	mov	r5, r8
 8012d2a:	465a      	mov	r2, fp
 8012d2c:	46d9      	mov	r9, fp
 8012d2e:	f8cd b008 	str.w	fp, [sp, #8]
 8012d32:	68a1      	ldr	r1, [r4, #8]
 8012d34:	b181      	cbz	r1, 8012d58 <_scanf_float+0x70>
 8012d36:	6833      	ldr	r3, [r6, #0]
 8012d38:	781b      	ldrb	r3, [r3, #0]
 8012d3a:	2b49      	cmp	r3, #73	; 0x49
 8012d3c:	d071      	beq.n	8012e22 <_scanf_float+0x13a>
 8012d3e:	d84d      	bhi.n	8012ddc <_scanf_float+0xf4>
 8012d40:	2b39      	cmp	r3, #57	; 0x39
 8012d42:	d840      	bhi.n	8012dc6 <_scanf_float+0xde>
 8012d44:	2b31      	cmp	r3, #49	; 0x31
 8012d46:	f080 8088 	bcs.w	8012e5a <_scanf_float+0x172>
 8012d4a:	2b2d      	cmp	r3, #45	; 0x2d
 8012d4c:	f000 8090 	beq.w	8012e70 <_scanf_float+0x188>
 8012d50:	d815      	bhi.n	8012d7e <_scanf_float+0x96>
 8012d52:	2b2b      	cmp	r3, #43	; 0x2b
 8012d54:	f000 808c 	beq.w	8012e70 <_scanf_float+0x188>
 8012d58:	f1b9 0f00 	cmp.w	r9, #0
 8012d5c:	d003      	beq.n	8012d66 <_scanf_float+0x7e>
 8012d5e:	6823      	ldr	r3, [r4, #0]
 8012d60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012d64:	6023      	str	r3, [r4, #0]
 8012d66:	3a01      	subs	r2, #1
 8012d68:	2a01      	cmp	r2, #1
 8012d6a:	f200 80ea 	bhi.w	8012f42 <_scanf_float+0x25a>
 8012d6e:	4545      	cmp	r5, r8
 8012d70:	f200 80dc 	bhi.w	8012f2c <_scanf_float+0x244>
 8012d74:	2601      	movs	r6, #1
 8012d76:	4630      	mov	r0, r6
 8012d78:	b007      	add	sp, #28
 8012d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d7e:	2b2e      	cmp	r3, #46	; 0x2e
 8012d80:	f000 809f 	beq.w	8012ec2 <_scanf_float+0x1da>
 8012d84:	2b30      	cmp	r3, #48	; 0x30
 8012d86:	d1e7      	bne.n	8012d58 <_scanf_float+0x70>
 8012d88:	6820      	ldr	r0, [r4, #0]
 8012d8a:	f410 7f80 	tst.w	r0, #256	; 0x100
 8012d8e:	d064      	beq.n	8012e5a <_scanf_float+0x172>
 8012d90:	9b01      	ldr	r3, [sp, #4]
 8012d92:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8012d96:	6020      	str	r0, [r4, #0]
 8012d98:	f109 0901 	add.w	r9, r9, #1
 8012d9c:	b11b      	cbz	r3, 8012da6 <_scanf_float+0xbe>
 8012d9e:	3b01      	subs	r3, #1
 8012da0:	3101      	adds	r1, #1
 8012da2:	9301      	str	r3, [sp, #4]
 8012da4:	60a1      	str	r1, [r4, #8]
 8012da6:	68a3      	ldr	r3, [r4, #8]
 8012da8:	3b01      	subs	r3, #1
 8012daa:	60a3      	str	r3, [r4, #8]
 8012dac:	6923      	ldr	r3, [r4, #16]
 8012dae:	3301      	adds	r3, #1
 8012db0:	6123      	str	r3, [r4, #16]
 8012db2:	6873      	ldr	r3, [r6, #4]
 8012db4:	3b01      	subs	r3, #1
 8012db6:	2b00      	cmp	r3, #0
 8012db8:	6073      	str	r3, [r6, #4]
 8012dba:	f340 80ac 	ble.w	8012f16 <_scanf_float+0x22e>
 8012dbe:	6833      	ldr	r3, [r6, #0]
 8012dc0:	3301      	adds	r3, #1
 8012dc2:	6033      	str	r3, [r6, #0]
 8012dc4:	e7b5      	b.n	8012d32 <_scanf_float+0x4a>
 8012dc6:	2b45      	cmp	r3, #69	; 0x45
 8012dc8:	f000 8085 	beq.w	8012ed6 <_scanf_float+0x1ee>
 8012dcc:	2b46      	cmp	r3, #70	; 0x46
 8012dce:	d06a      	beq.n	8012ea6 <_scanf_float+0x1be>
 8012dd0:	2b41      	cmp	r3, #65	; 0x41
 8012dd2:	d1c1      	bne.n	8012d58 <_scanf_float+0x70>
 8012dd4:	2a01      	cmp	r2, #1
 8012dd6:	d1bf      	bne.n	8012d58 <_scanf_float+0x70>
 8012dd8:	2202      	movs	r2, #2
 8012dda:	e046      	b.n	8012e6a <_scanf_float+0x182>
 8012ddc:	2b65      	cmp	r3, #101	; 0x65
 8012dde:	d07a      	beq.n	8012ed6 <_scanf_float+0x1ee>
 8012de0:	d818      	bhi.n	8012e14 <_scanf_float+0x12c>
 8012de2:	2b54      	cmp	r3, #84	; 0x54
 8012de4:	d066      	beq.n	8012eb4 <_scanf_float+0x1cc>
 8012de6:	d811      	bhi.n	8012e0c <_scanf_float+0x124>
 8012de8:	2b4e      	cmp	r3, #78	; 0x4e
 8012dea:	d1b5      	bne.n	8012d58 <_scanf_float+0x70>
 8012dec:	2a00      	cmp	r2, #0
 8012dee:	d146      	bne.n	8012e7e <_scanf_float+0x196>
 8012df0:	f1b9 0f00 	cmp.w	r9, #0
 8012df4:	d145      	bne.n	8012e82 <_scanf_float+0x19a>
 8012df6:	6821      	ldr	r1, [r4, #0]
 8012df8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8012dfc:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8012e00:	d13f      	bne.n	8012e82 <_scanf_float+0x19a>
 8012e02:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8012e06:	6021      	str	r1, [r4, #0]
 8012e08:	2201      	movs	r2, #1
 8012e0a:	e02e      	b.n	8012e6a <_scanf_float+0x182>
 8012e0c:	2b59      	cmp	r3, #89	; 0x59
 8012e0e:	d01e      	beq.n	8012e4e <_scanf_float+0x166>
 8012e10:	2b61      	cmp	r3, #97	; 0x61
 8012e12:	e7de      	b.n	8012dd2 <_scanf_float+0xea>
 8012e14:	2b6e      	cmp	r3, #110	; 0x6e
 8012e16:	d0e9      	beq.n	8012dec <_scanf_float+0x104>
 8012e18:	d815      	bhi.n	8012e46 <_scanf_float+0x15e>
 8012e1a:	2b66      	cmp	r3, #102	; 0x66
 8012e1c:	d043      	beq.n	8012ea6 <_scanf_float+0x1be>
 8012e1e:	2b69      	cmp	r3, #105	; 0x69
 8012e20:	d19a      	bne.n	8012d58 <_scanf_float+0x70>
 8012e22:	f1bb 0f00 	cmp.w	fp, #0
 8012e26:	d138      	bne.n	8012e9a <_scanf_float+0x1b2>
 8012e28:	f1b9 0f00 	cmp.w	r9, #0
 8012e2c:	d197      	bne.n	8012d5e <_scanf_float+0x76>
 8012e2e:	6821      	ldr	r1, [r4, #0]
 8012e30:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8012e34:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8012e38:	d195      	bne.n	8012d66 <_scanf_float+0x7e>
 8012e3a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8012e3e:	6021      	str	r1, [r4, #0]
 8012e40:	f04f 0b01 	mov.w	fp, #1
 8012e44:	e011      	b.n	8012e6a <_scanf_float+0x182>
 8012e46:	2b74      	cmp	r3, #116	; 0x74
 8012e48:	d034      	beq.n	8012eb4 <_scanf_float+0x1cc>
 8012e4a:	2b79      	cmp	r3, #121	; 0x79
 8012e4c:	d184      	bne.n	8012d58 <_scanf_float+0x70>
 8012e4e:	f1bb 0f07 	cmp.w	fp, #7
 8012e52:	d181      	bne.n	8012d58 <_scanf_float+0x70>
 8012e54:	f04f 0b08 	mov.w	fp, #8
 8012e58:	e007      	b.n	8012e6a <_scanf_float+0x182>
 8012e5a:	eb12 0f0b 	cmn.w	r2, fp
 8012e5e:	f47f af7b 	bne.w	8012d58 <_scanf_float+0x70>
 8012e62:	6821      	ldr	r1, [r4, #0]
 8012e64:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8012e68:	6021      	str	r1, [r4, #0]
 8012e6a:	702b      	strb	r3, [r5, #0]
 8012e6c:	3501      	adds	r5, #1
 8012e6e:	e79a      	b.n	8012da6 <_scanf_float+0xbe>
 8012e70:	6821      	ldr	r1, [r4, #0]
 8012e72:	0608      	lsls	r0, r1, #24
 8012e74:	f57f af70 	bpl.w	8012d58 <_scanf_float+0x70>
 8012e78:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8012e7c:	e7f4      	b.n	8012e68 <_scanf_float+0x180>
 8012e7e:	2a02      	cmp	r2, #2
 8012e80:	d047      	beq.n	8012f12 <_scanf_float+0x22a>
 8012e82:	f1bb 0f01 	cmp.w	fp, #1
 8012e86:	d003      	beq.n	8012e90 <_scanf_float+0x1a8>
 8012e88:	f1bb 0f04 	cmp.w	fp, #4
 8012e8c:	f47f af64 	bne.w	8012d58 <_scanf_float+0x70>
 8012e90:	f10b 0b01 	add.w	fp, fp, #1
 8012e94:	fa5f fb8b 	uxtb.w	fp, fp
 8012e98:	e7e7      	b.n	8012e6a <_scanf_float+0x182>
 8012e9a:	f1bb 0f03 	cmp.w	fp, #3
 8012e9e:	d0f7      	beq.n	8012e90 <_scanf_float+0x1a8>
 8012ea0:	f1bb 0f05 	cmp.w	fp, #5
 8012ea4:	e7f2      	b.n	8012e8c <_scanf_float+0x1a4>
 8012ea6:	f1bb 0f02 	cmp.w	fp, #2
 8012eaa:	f47f af55 	bne.w	8012d58 <_scanf_float+0x70>
 8012eae:	f04f 0b03 	mov.w	fp, #3
 8012eb2:	e7da      	b.n	8012e6a <_scanf_float+0x182>
 8012eb4:	f1bb 0f06 	cmp.w	fp, #6
 8012eb8:	f47f af4e 	bne.w	8012d58 <_scanf_float+0x70>
 8012ebc:	f04f 0b07 	mov.w	fp, #7
 8012ec0:	e7d3      	b.n	8012e6a <_scanf_float+0x182>
 8012ec2:	6821      	ldr	r1, [r4, #0]
 8012ec4:	0588      	lsls	r0, r1, #22
 8012ec6:	f57f af47 	bpl.w	8012d58 <_scanf_float+0x70>
 8012eca:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8012ece:	6021      	str	r1, [r4, #0]
 8012ed0:	f8cd 9008 	str.w	r9, [sp, #8]
 8012ed4:	e7c9      	b.n	8012e6a <_scanf_float+0x182>
 8012ed6:	6821      	ldr	r1, [r4, #0]
 8012ed8:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8012edc:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8012ee0:	d006      	beq.n	8012ef0 <_scanf_float+0x208>
 8012ee2:	0548      	lsls	r0, r1, #21
 8012ee4:	f57f af38 	bpl.w	8012d58 <_scanf_float+0x70>
 8012ee8:	f1b9 0f00 	cmp.w	r9, #0
 8012eec:	f43f af3b 	beq.w	8012d66 <_scanf_float+0x7e>
 8012ef0:	0588      	lsls	r0, r1, #22
 8012ef2:	bf58      	it	pl
 8012ef4:	9802      	ldrpl	r0, [sp, #8]
 8012ef6:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8012efa:	bf58      	it	pl
 8012efc:	eba9 0000 	subpl.w	r0, r9, r0
 8012f00:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8012f04:	bf58      	it	pl
 8012f06:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8012f0a:	6021      	str	r1, [r4, #0]
 8012f0c:	f04f 0900 	mov.w	r9, #0
 8012f10:	e7ab      	b.n	8012e6a <_scanf_float+0x182>
 8012f12:	2203      	movs	r2, #3
 8012f14:	e7a9      	b.n	8012e6a <_scanf_float+0x182>
 8012f16:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8012f1a:	9205      	str	r2, [sp, #20]
 8012f1c:	4631      	mov	r1, r6
 8012f1e:	4638      	mov	r0, r7
 8012f20:	4798      	blx	r3
 8012f22:	9a05      	ldr	r2, [sp, #20]
 8012f24:	2800      	cmp	r0, #0
 8012f26:	f43f af04 	beq.w	8012d32 <_scanf_float+0x4a>
 8012f2a:	e715      	b.n	8012d58 <_scanf_float+0x70>
 8012f2c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012f30:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8012f34:	4632      	mov	r2, r6
 8012f36:	4638      	mov	r0, r7
 8012f38:	4798      	blx	r3
 8012f3a:	6923      	ldr	r3, [r4, #16]
 8012f3c:	3b01      	subs	r3, #1
 8012f3e:	6123      	str	r3, [r4, #16]
 8012f40:	e715      	b.n	8012d6e <_scanf_float+0x86>
 8012f42:	f10b 33ff 	add.w	r3, fp, #4294967295
 8012f46:	2b06      	cmp	r3, #6
 8012f48:	d80a      	bhi.n	8012f60 <_scanf_float+0x278>
 8012f4a:	f1bb 0f02 	cmp.w	fp, #2
 8012f4e:	d968      	bls.n	8013022 <_scanf_float+0x33a>
 8012f50:	f1ab 0b03 	sub.w	fp, fp, #3
 8012f54:	fa5f fb8b 	uxtb.w	fp, fp
 8012f58:	eba5 0b0b 	sub.w	fp, r5, fp
 8012f5c:	455d      	cmp	r5, fp
 8012f5e:	d14b      	bne.n	8012ff8 <_scanf_float+0x310>
 8012f60:	6823      	ldr	r3, [r4, #0]
 8012f62:	05da      	lsls	r2, r3, #23
 8012f64:	d51f      	bpl.n	8012fa6 <_scanf_float+0x2be>
 8012f66:	055b      	lsls	r3, r3, #21
 8012f68:	d468      	bmi.n	801303c <_scanf_float+0x354>
 8012f6a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8012f6e:	6923      	ldr	r3, [r4, #16]
 8012f70:	2965      	cmp	r1, #101	; 0x65
 8012f72:	f103 33ff 	add.w	r3, r3, #4294967295
 8012f76:	f105 3bff 	add.w	fp, r5, #4294967295
 8012f7a:	6123      	str	r3, [r4, #16]
 8012f7c:	d00d      	beq.n	8012f9a <_scanf_float+0x2b2>
 8012f7e:	2945      	cmp	r1, #69	; 0x45
 8012f80:	d00b      	beq.n	8012f9a <_scanf_float+0x2b2>
 8012f82:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012f86:	4632      	mov	r2, r6
 8012f88:	4638      	mov	r0, r7
 8012f8a:	4798      	blx	r3
 8012f8c:	6923      	ldr	r3, [r4, #16]
 8012f8e:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8012f92:	3b01      	subs	r3, #1
 8012f94:	f1a5 0b02 	sub.w	fp, r5, #2
 8012f98:	6123      	str	r3, [r4, #16]
 8012f9a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012f9e:	4632      	mov	r2, r6
 8012fa0:	4638      	mov	r0, r7
 8012fa2:	4798      	blx	r3
 8012fa4:	465d      	mov	r5, fp
 8012fa6:	6826      	ldr	r6, [r4, #0]
 8012fa8:	f016 0610 	ands.w	r6, r6, #16
 8012fac:	d17a      	bne.n	80130a4 <_scanf_float+0x3bc>
 8012fae:	702e      	strb	r6, [r5, #0]
 8012fb0:	6823      	ldr	r3, [r4, #0]
 8012fb2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8012fb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012fba:	d142      	bne.n	8013042 <_scanf_float+0x35a>
 8012fbc:	9b02      	ldr	r3, [sp, #8]
 8012fbe:	eba9 0303 	sub.w	r3, r9, r3
 8012fc2:	425a      	negs	r2, r3
 8012fc4:	2b00      	cmp	r3, #0
 8012fc6:	d149      	bne.n	801305c <_scanf_float+0x374>
 8012fc8:	2200      	movs	r2, #0
 8012fca:	4641      	mov	r1, r8
 8012fcc:	4638      	mov	r0, r7
 8012fce:	f000 ffdf 	bl	8013f90 <_strtod_r>
 8012fd2:	6825      	ldr	r5, [r4, #0]
 8012fd4:	f8da 3000 	ldr.w	r3, [sl]
 8012fd8:	f015 0f02 	tst.w	r5, #2
 8012fdc:	f103 0204 	add.w	r2, r3, #4
 8012fe0:	ec59 8b10 	vmov	r8, r9, d0
 8012fe4:	f8ca 2000 	str.w	r2, [sl]
 8012fe8:	d043      	beq.n	8013072 <_scanf_float+0x38a>
 8012fea:	681b      	ldr	r3, [r3, #0]
 8012fec:	e9c3 8900 	strd	r8, r9, [r3]
 8012ff0:	68e3      	ldr	r3, [r4, #12]
 8012ff2:	3301      	adds	r3, #1
 8012ff4:	60e3      	str	r3, [r4, #12]
 8012ff6:	e6be      	b.n	8012d76 <_scanf_float+0x8e>
 8012ff8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012ffc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8013000:	4632      	mov	r2, r6
 8013002:	4638      	mov	r0, r7
 8013004:	4798      	blx	r3
 8013006:	6923      	ldr	r3, [r4, #16]
 8013008:	3b01      	subs	r3, #1
 801300a:	6123      	str	r3, [r4, #16]
 801300c:	e7a6      	b.n	8012f5c <_scanf_float+0x274>
 801300e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013012:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8013016:	4632      	mov	r2, r6
 8013018:	4638      	mov	r0, r7
 801301a:	4798      	blx	r3
 801301c:	6923      	ldr	r3, [r4, #16]
 801301e:	3b01      	subs	r3, #1
 8013020:	6123      	str	r3, [r4, #16]
 8013022:	4545      	cmp	r5, r8
 8013024:	d8f3      	bhi.n	801300e <_scanf_float+0x326>
 8013026:	e6a5      	b.n	8012d74 <_scanf_float+0x8c>
 8013028:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801302c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8013030:	4632      	mov	r2, r6
 8013032:	4638      	mov	r0, r7
 8013034:	4798      	blx	r3
 8013036:	6923      	ldr	r3, [r4, #16]
 8013038:	3b01      	subs	r3, #1
 801303a:	6123      	str	r3, [r4, #16]
 801303c:	4545      	cmp	r5, r8
 801303e:	d8f3      	bhi.n	8013028 <_scanf_float+0x340>
 8013040:	e698      	b.n	8012d74 <_scanf_float+0x8c>
 8013042:	9b03      	ldr	r3, [sp, #12]
 8013044:	2b00      	cmp	r3, #0
 8013046:	d0bf      	beq.n	8012fc8 <_scanf_float+0x2e0>
 8013048:	9904      	ldr	r1, [sp, #16]
 801304a:	230a      	movs	r3, #10
 801304c:	4632      	mov	r2, r6
 801304e:	3101      	adds	r1, #1
 8013050:	4638      	mov	r0, r7
 8013052:	f001 f829 	bl	80140a8 <_strtol_r>
 8013056:	9b03      	ldr	r3, [sp, #12]
 8013058:	9d04      	ldr	r5, [sp, #16]
 801305a:	1ac2      	subs	r2, r0, r3
 801305c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8013060:	429d      	cmp	r5, r3
 8013062:	bf28      	it	cs
 8013064:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8013068:	490f      	ldr	r1, [pc, #60]	; (80130a8 <_scanf_float+0x3c0>)
 801306a:	4628      	mov	r0, r5
 801306c:	f000 f8e8 	bl	8013240 <siprintf>
 8013070:	e7aa      	b.n	8012fc8 <_scanf_float+0x2e0>
 8013072:	f015 0504 	ands.w	r5, r5, #4
 8013076:	d1b8      	bne.n	8012fea <_scanf_float+0x302>
 8013078:	681f      	ldr	r7, [r3, #0]
 801307a:	ee10 2a10 	vmov	r2, s0
 801307e:	464b      	mov	r3, r9
 8013080:	ee10 0a10 	vmov	r0, s0
 8013084:	4649      	mov	r1, r9
 8013086:	f7ed fd69 	bl	8000b5c <__aeabi_dcmpun>
 801308a:	b128      	cbz	r0, 8013098 <_scanf_float+0x3b0>
 801308c:	4628      	mov	r0, r5
 801308e:	f000 f89d 	bl	80131cc <nanf>
 8013092:	ed87 0a00 	vstr	s0, [r7]
 8013096:	e7ab      	b.n	8012ff0 <_scanf_float+0x308>
 8013098:	4640      	mov	r0, r8
 801309a:	4649      	mov	r1, r9
 801309c:	f7ed fdbc 	bl	8000c18 <__aeabi_d2f>
 80130a0:	6038      	str	r0, [r7, #0]
 80130a2:	e7a5      	b.n	8012ff0 <_scanf_float+0x308>
 80130a4:	2600      	movs	r6, #0
 80130a6:	e666      	b.n	8012d76 <_scanf_float+0x8e>
 80130a8:	08017b06 	.word	0x08017b06

080130ac <iprintf>:
 80130ac:	b40f      	push	{r0, r1, r2, r3}
 80130ae:	4b0a      	ldr	r3, [pc, #40]	; (80130d8 <iprintf+0x2c>)
 80130b0:	b513      	push	{r0, r1, r4, lr}
 80130b2:	681c      	ldr	r4, [r3, #0]
 80130b4:	b124      	cbz	r4, 80130c0 <iprintf+0x14>
 80130b6:	69a3      	ldr	r3, [r4, #24]
 80130b8:	b913      	cbnz	r3, 80130c0 <iprintf+0x14>
 80130ba:	4620      	mov	r0, r4
 80130bc:	f002 f83c 	bl	8015138 <__sinit>
 80130c0:	ab05      	add	r3, sp, #20
 80130c2:	9a04      	ldr	r2, [sp, #16]
 80130c4:	68a1      	ldr	r1, [r4, #8]
 80130c6:	9301      	str	r3, [sp, #4]
 80130c8:	4620      	mov	r0, r4
 80130ca:	f003 fc7d 	bl	80169c8 <_vfiprintf_r>
 80130ce:	b002      	add	sp, #8
 80130d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80130d4:	b004      	add	sp, #16
 80130d6:	4770      	bx	lr
 80130d8:	2000000c 	.word	0x2000000c

080130dc <putchar>:
 80130dc:	b538      	push	{r3, r4, r5, lr}
 80130de:	4b08      	ldr	r3, [pc, #32]	; (8013100 <putchar+0x24>)
 80130e0:	681c      	ldr	r4, [r3, #0]
 80130e2:	4605      	mov	r5, r0
 80130e4:	b124      	cbz	r4, 80130f0 <putchar+0x14>
 80130e6:	69a3      	ldr	r3, [r4, #24]
 80130e8:	b913      	cbnz	r3, 80130f0 <putchar+0x14>
 80130ea:	4620      	mov	r0, r4
 80130ec:	f002 f824 	bl	8015138 <__sinit>
 80130f0:	68a2      	ldr	r2, [r4, #8]
 80130f2:	4629      	mov	r1, r5
 80130f4:	4620      	mov	r0, r4
 80130f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80130fa:	f003 bed3 	b.w	8016ea4 <_putc_r>
 80130fe:	bf00      	nop
 8013100:	2000000c 	.word	0x2000000c

08013104 <_puts_r>:
 8013104:	b570      	push	{r4, r5, r6, lr}
 8013106:	460e      	mov	r6, r1
 8013108:	4605      	mov	r5, r0
 801310a:	b118      	cbz	r0, 8013114 <_puts_r+0x10>
 801310c:	6983      	ldr	r3, [r0, #24]
 801310e:	b90b      	cbnz	r3, 8013114 <_puts_r+0x10>
 8013110:	f002 f812 	bl	8015138 <__sinit>
 8013114:	69ab      	ldr	r3, [r5, #24]
 8013116:	68ac      	ldr	r4, [r5, #8]
 8013118:	b913      	cbnz	r3, 8013120 <_puts_r+0x1c>
 801311a:	4628      	mov	r0, r5
 801311c:	f002 f80c 	bl	8015138 <__sinit>
 8013120:	4b23      	ldr	r3, [pc, #140]	; (80131b0 <_puts_r+0xac>)
 8013122:	429c      	cmp	r4, r3
 8013124:	d117      	bne.n	8013156 <_puts_r+0x52>
 8013126:	686c      	ldr	r4, [r5, #4]
 8013128:	89a3      	ldrh	r3, [r4, #12]
 801312a:	071b      	lsls	r3, r3, #28
 801312c:	d51d      	bpl.n	801316a <_puts_r+0x66>
 801312e:	6923      	ldr	r3, [r4, #16]
 8013130:	b1db      	cbz	r3, 801316a <_puts_r+0x66>
 8013132:	3e01      	subs	r6, #1
 8013134:	68a3      	ldr	r3, [r4, #8]
 8013136:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801313a:	3b01      	subs	r3, #1
 801313c:	60a3      	str	r3, [r4, #8]
 801313e:	b9e9      	cbnz	r1, 801317c <_puts_r+0x78>
 8013140:	2b00      	cmp	r3, #0
 8013142:	da2e      	bge.n	80131a2 <_puts_r+0x9e>
 8013144:	4622      	mov	r2, r4
 8013146:	210a      	movs	r1, #10
 8013148:	4628      	mov	r0, r5
 801314a:	f000 ffdf 	bl	801410c <__swbuf_r>
 801314e:	3001      	adds	r0, #1
 8013150:	d011      	beq.n	8013176 <_puts_r+0x72>
 8013152:	200a      	movs	r0, #10
 8013154:	e011      	b.n	801317a <_puts_r+0x76>
 8013156:	4b17      	ldr	r3, [pc, #92]	; (80131b4 <_puts_r+0xb0>)
 8013158:	429c      	cmp	r4, r3
 801315a:	d101      	bne.n	8013160 <_puts_r+0x5c>
 801315c:	68ac      	ldr	r4, [r5, #8]
 801315e:	e7e3      	b.n	8013128 <_puts_r+0x24>
 8013160:	4b15      	ldr	r3, [pc, #84]	; (80131b8 <_puts_r+0xb4>)
 8013162:	429c      	cmp	r4, r3
 8013164:	bf08      	it	eq
 8013166:	68ec      	ldreq	r4, [r5, #12]
 8013168:	e7de      	b.n	8013128 <_puts_r+0x24>
 801316a:	4621      	mov	r1, r4
 801316c:	4628      	mov	r0, r5
 801316e:	f001 f831 	bl	80141d4 <__swsetup_r>
 8013172:	2800      	cmp	r0, #0
 8013174:	d0dd      	beq.n	8013132 <_puts_r+0x2e>
 8013176:	f04f 30ff 	mov.w	r0, #4294967295
 801317a:	bd70      	pop	{r4, r5, r6, pc}
 801317c:	2b00      	cmp	r3, #0
 801317e:	da04      	bge.n	801318a <_puts_r+0x86>
 8013180:	69a2      	ldr	r2, [r4, #24]
 8013182:	429a      	cmp	r2, r3
 8013184:	dc06      	bgt.n	8013194 <_puts_r+0x90>
 8013186:	290a      	cmp	r1, #10
 8013188:	d004      	beq.n	8013194 <_puts_r+0x90>
 801318a:	6823      	ldr	r3, [r4, #0]
 801318c:	1c5a      	adds	r2, r3, #1
 801318e:	6022      	str	r2, [r4, #0]
 8013190:	7019      	strb	r1, [r3, #0]
 8013192:	e7cf      	b.n	8013134 <_puts_r+0x30>
 8013194:	4622      	mov	r2, r4
 8013196:	4628      	mov	r0, r5
 8013198:	f000 ffb8 	bl	801410c <__swbuf_r>
 801319c:	3001      	adds	r0, #1
 801319e:	d1c9      	bne.n	8013134 <_puts_r+0x30>
 80131a0:	e7e9      	b.n	8013176 <_puts_r+0x72>
 80131a2:	6823      	ldr	r3, [r4, #0]
 80131a4:	200a      	movs	r0, #10
 80131a6:	1c5a      	adds	r2, r3, #1
 80131a8:	6022      	str	r2, [r4, #0]
 80131aa:	7018      	strb	r0, [r3, #0]
 80131ac:	e7e5      	b.n	801317a <_puts_r+0x76>
 80131ae:	bf00      	nop
 80131b0:	08017b90 	.word	0x08017b90
 80131b4:	08017bb0 	.word	0x08017bb0
 80131b8:	08017b70 	.word	0x08017b70

080131bc <puts>:
 80131bc:	4b02      	ldr	r3, [pc, #8]	; (80131c8 <puts+0xc>)
 80131be:	4601      	mov	r1, r0
 80131c0:	6818      	ldr	r0, [r3, #0]
 80131c2:	f7ff bf9f 	b.w	8013104 <_puts_r>
 80131c6:	bf00      	nop
 80131c8:	2000000c 	.word	0x2000000c

080131cc <nanf>:
 80131cc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80131d4 <nanf+0x8>
 80131d0:	4770      	bx	lr
 80131d2:	bf00      	nop
 80131d4:	7fc00000 	.word	0x7fc00000

080131d8 <sniprintf>:
 80131d8:	b40c      	push	{r2, r3}
 80131da:	b530      	push	{r4, r5, lr}
 80131dc:	4b17      	ldr	r3, [pc, #92]	; (801323c <sniprintf+0x64>)
 80131de:	1e0c      	subs	r4, r1, #0
 80131e0:	b09d      	sub	sp, #116	; 0x74
 80131e2:	681d      	ldr	r5, [r3, #0]
 80131e4:	da08      	bge.n	80131f8 <sniprintf+0x20>
 80131e6:	238b      	movs	r3, #139	; 0x8b
 80131e8:	602b      	str	r3, [r5, #0]
 80131ea:	f04f 30ff 	mov.w	r0, #4294967295
 80131ee:	b01d      	add	sp, #116	; 0x74
 80131f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80131f4:	b002      	add	sp, #8
 80131f6:	4770      	bx	lr
 80131f8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80131fc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013200:	bf14      	ite	ne
 8013202:	f104 33ff 	addne.w	r3, r4, #4294967295
 8013206:	4623      	moveq	r3, r4
 8013208:	9304      	str	r3, [sp, #16]
 801320a:	9307      	str	r3, [sp, #28]
 801320c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013210:	9002      	str	r0, [sp, #8]
 8013212:	9006      	str	r0, [sp, #24]
 8013214:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013218:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801321a:	ab21      	add	r3, sp, #132	; 0x84
 801321c:	a902      	add	r1, sp, #8
 801321e:	4628      	mov	r0, r5
 8013220:	9301      	str	r3, [sp, #4]
 8013222:	f003 f905 	bl	8016430 <_svfiprintf_r>
 8013226:	1c43      	adds	r3, r0, #1
 8013228:	bfbc      	itt	lt
 801322a:	238b      	movlt	r3, #139	; 0x8b
 801322c:	602b      	strlt	r3, [r5, #0]
 801322e:	2c00      	cmp	r4, #0
 8013230:	d0dd      	beq.n	80131ee <sniprintf+0x16>
 8013232:	9b02      	ldr	r3, [sp, #8]
 8013234:	2200      	movs	r2, #0
 8013236:	701a      	strb	r2, [r3, #0]
 8013238:	e7d9      	b.n	80131ee <sniprintf+0x16>
 801323a:	bf00      	nop
 801323c:	2000000c 	.word	0x2000000c

08013240 <siprintf>:
 8013240:	b40e      	push	{r1, r2, r3}
 8013242:	b500      	push	{lr}
 8013244:	b09c      	sub	sp, #112	; 0x70
 8013246:	ab1d      	add	r3, sp, #116	; 0x74
 8013248:	9002      	str	r0, [sp, #8]
 801324a:	9006      	str	r0, [sp, #24]
 801324c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013250:	4809      	ldr	r0, [pc, #36]	; (8013278 <siprintf+0x38>)
 8013252:	9107      	str	r1, [sp, #28]
 8013254:	9104      	str	r1, [sp, #16]
 8013256:	4909      	ldr	r1, [pc, #36]	; (801327c <siprintf+0x3c>)
 8013258:	f853 2b04 	ldr.w	r2, [r3], #4
 801325c:	9105      	str	r1, [sp, #20]
 801325e:	6800      	ldr	r0, [r0, #0]
 8013260:	9301      	str	r3, [sp, #4]
 8013262:	a902      	add	r1, sp, #8
 8013264:	f003 f8e4 	bl	8016430 <_svfiprintf_r>
 8013268:	9b02      	ldr	r3, [sp, #8]
 801326a:	2200      	movs	r2, #0
 801326c:	701a      	strb	r2, [r3, #0]
 801326e:	b01c      	add	sp, #112	; 0x70
 8013270:	f85d eb04 	ldr.w	lr, [sp], #4
 8013274:	b003      	add	sp, #12
 8013276:	4770      	bx	lr
 8013278:	2000000c 	.word	0x2000000c
 801327c:	ffff0208 	.word	0xffff0208

08013280 <siscanf>:
 8013280:	b40e      	push	{r1, r2, r3}
 8013282:	b530      	push	{r4, r5, lr}
 8013284:	b09c      	sub	sp, #112	; 0x70
 8013286:	ac1f      	add	r4, sp, #124	; 0x7c
 8013288:	f44f 7201 	mov.w	r2, #516	; 0x204
 801328c:	f854 5b04 	ldr.w	r5, [r4], #4
 8013290:	f8ad 2014 	strh.w	r2, [sp, #20]
 8013294:	9002      	str	r0, [sp, #8]
 8013296:	9006      	str	r0, [sp, #24]
 8013298:	f7ec ffb2 	bl	8000200 <strlen>
 801329c:	4b0b      	ldr	r3, [pc, #44]	; (80132cc <siscanf+0x4c>)
 801329e:	9003      	str	r0, [sp, #12]
 80132a0:	9007      	str	r0, [sp, #28]
 80132a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80132a4:	480a      	ldr	r0, [pc, #40]	; (80132d0 <siscanf+0x50>)
 80132a6:	9401      	str	r4, [sp, #4]
 80132a8:	2300      	movs	r3, #0
 80132aa:	930f      	str	r3, [sp, #60]	; 0x3c
 80132ac:	9314      	str	r3, [sp, #80]	; 0x50
 80132ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80132b2:	f8ad 3016 	strh.w	r3, [sp, #22]
 80132b6:	462a      	mov	r2, r5
 80132b8:	4623      	mov	r3, r4
 80132ba:	a902      	add	r1, sp, #8
 80132bc:	6800      	ldr	r0, [r0, #0]
 80132be:	f003 fa09 	bl	80166d4 <__ssvfiscanf_r>
 80132c2:	b01c      	add	sp, #112	; 0x70
 80132c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80132c8:	b003      	add	sp, #12
 80132ca:	4770      	bx	lr
 80132cc:	080132f7 	.word	0x080132f7
 80132d0:	2000000c 	.word	0x2000000c

080132d4 <__sread>:
 80132d4:	b510      	push	{r4, lr}
 80132d6:	460c      	mov	r4, r1
 80132d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80132dc:	f003 fe18 	bl	8016f10 <_read_r>
 80132e0:	2800      	cmp	r0, #0
 80132e2:	bfab      	itete	ge
 80132e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80132e6:	89a3      	ldrhlt	r3, [r4, #12]
 80132e8:	181b      	addge	r3, r3, r0
 80132ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80132ee:	bfac      	ite	ge
 80132f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80132f2:	81a3      	strhlt	r3, [r4, #12]
 80132f4:	bd10      	pop	{r4, pc}

080132f6 <__seofread>:
 80132f6:	2000      	movs	r0, #0
 80132f8:	4770      	bx	lr

080132fa <__swrite>:
 80132fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80132fe:	461f      	mov	r7, r3
 8013300:	898b      	ldrh	r3, [r1, #12]
 8013302:	05db      	lsls	r3, r3, #23
 8013304:	4605      	mov	r5, r0
 8013306:	460c      	mov	r4, r1
 8013308:	4616      	mov	r6, r2
 801330a:	d505      	bpl.n	8013318 <__swrite+0x1e>
 801330c:	2302      	movs	r3, #2
 801330e:	2200      	movs	r2, #0
 8013310:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013314:	f002 fae2 	bl	80158dc <_lseek_r>
 8013318:	89a3      	ldrh	r3, [r4, #12]
 801331a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801331e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013322:	81a3      	strh	r3, [r4, #12]
 8013324:	4632      	mov	r2, r6
 8013326:	463b      	mov	r3, r7
 8013328:	4628      	mov	r0, r5
 801332a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801332e:	f000 bf3f 	b.w	80141b0 <_write_r>

08013332 <__sseek>:
 8013332:	b510      	push	{r4, lr}
 8013334:	460c      	mov	r4, r1
 8013336:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801333a:	f002 facf 	bl	80158dc <_lseek_r>
 801333e:	1c43      	adds	r3, r0, #1
 8013340:	89a3      	ldrh	r3, [r4, #12]
 8013342:	bf15      	itete	ne
 8013344:	6560      	strne	r0, [r4, #84]	; 0x54
 8013346:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801334a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801334e:	81a3      	strheq	r3, [r4, #12]
 8013350:	bf18      	it	ne
 8013352:	81a3      	strhne	r3, [r4, #12]
 8013354:	bd10      	pop	{r4, pc}

08013356 <__sclose>:
 8013356:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801335a:	f000 bfa9 	b.w	80142b0 <_close_r>

0801335e <strcpy>:
 801335e:	4603      	mov	r3, r0
 8013360:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013364:	f803 2b01 	strb.w	r2, [r3], #1
 8013368:	2a00      	cmp	r2, #0
 801336a:	d1f9      	bne.n	8013360 <strcpy+0x2>
 801336c:	4770      	bx	lr

0801336e <sulp>:
 801336e:	b570      	push	{r4, r5, r6, lr}
 8013370:	4604      	mov	r4, r0
 8013372:	460d      	mov	r5, r1
 8013374:	ec45 4b10 	vmov	d0, r4, r5
 8013378:	4616      	mov	r6, r2
 801337a:	f002 fe15 	bl	8015fa8 <__ulp>
 801337e:	ec51 0b10 	vmov	r0, r1, d0
 8013382:	b17e      	cbz	r6, 80133a4 <sulp+0x36>
 8013384:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8013388:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801338c:	2b00      	cmp	r3, #0
 801338e:	dd09      	ble.n	80133a4 <sulp+0x36>
 8013390:	051b      	lsls	r3, r3, #20
 8013392:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8013396:	2400      	movs	r4, #0
 8013398:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801339c:	4622      	mov	r2, r4
 801339e:	462b      	mov	r3, r5
 80133a0:	f7ed f942 	bl	8000628 <__aeabi_dmul>
 80133a4:	bd70      	pop	{r4, r5, r6, pc}
	...

080133a8 <_strtod_l>:
 80133a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133ac:	461f      	mov	r7, r3
 80133ae:	b0a1      	sub	sp, #132	; 0x84
 80133b0:	2300      	movs	r3, #0
 80133b2:	4681      	mov	r9, r0
 80133b4:	4638      	mov	r0, r7
 80133b6:	460e      	mov	r6, r1
 80133b8:	9217      	str	r2, [sp, #92]	; 0x5c
 80133ba:	931c      	str	r3, [sp, #112]	; 0x70
 80133bc:	f002 fa7e 	bl	80158bc <__localeconv_l>
 80133c0:	4680      	mov	r8, r0
 80133c2:	6800      	ldr	r0, [r0, #0]
 80133c4:	f7ec ff1c 	bl	8000200 <strlen>
 80133c8:	f04f 0a00 	mov.w	sl, #0
 80133cc:	4604      	mov	r4, r0
 80133ce:	f04f 0b00 	mov.w	fp, #0
 80133d2:	961b      	str	r6, [sp, #108]	; 0x6c
 80133d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80133d6:	781a      	ldrb	r2, [r3, #0]
 80133d8:	2a0d      	cmp	r2, #13
 80133da:	d832      	bhi.n	8013442 <_strtod_l+0x9a>
 80133dc:	2a09      	cmp	r2, #9
 80133de:	d236      	bcs.n	801344e <_strtod_l+0xa6>
 80133e0:	2a00      	cmp	r2, #0
 80133e2:	d03e      	beq.n	8013462 <_strtod_l+0xba>
 80133e4:	2300      	movs	r3, #0
 80133e6:	930d      	str	r3, [sp, #52]	; 0x34
 80133e8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80133ea:	782b      	ldrb	r3, [r5, #0]
 80133ec:	2b30      	cmp	r3, #48	; 0x30
 80133ee:	f040 80ac 	bne.w	801354a <_strtod_l+0x1a2>
 80133f2:	786b      	ldrb	r3, [r5, #1]
 80133f4:	2b58      	cmp	r3, #88	; 0x58
 80133f6:	d001      	beq.n	80133fc <_strtod_l+0x54>
 80133f8:	2b78      	cmp	r3, #120	; 0x78
 80133fa:	d167      	bne.n	80134cc <_strtod_l+0x124>
 80133fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80133fe:	9301      	str	r3, [sp, #4]
 8013400:	ab1c      	add	r3, sp, #112	; 0x70
 8013402:	9300      	str	r3, [sp, #0]
 8013404:	9702      	str	r7, [sp, #8]
 8013406:	ab1d      	add	r3, sp, #116	; 0x74
 8013408:	4a88      	ldr	r2, [pc, #544]	; (801362c <_strtod_l+0x284>)
 801340a:	a91b      	add	r1, sp, #108	; 0x6c
 801340c:	4648      	mov	r0, r9
 801340e:	f001 ff6c 	bl	80152ea <__gethex>
 8013412:	f010 0407 	ands.w	r4, r0, #7
 8013416:	4606      	mov	r6, r0
 8013418:	d005      	beq.n	8013426 <_strtod_l+0x7e>
 801341a:	2c06      	cmp	r4, #6
 801341c:	d12b      	bne.n	8013476 <_strtod_l+0xce>
 801341e:	3501      	adds	r5, #1
 8013420:	2300      	movs	r3, #0
 8013422:	951b      	str	r5, [sp, #108]	; 0x6c
 8013424:	930d      	str	r3, [sp, #52]	; 0x34
 8013426:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013428:	2b00      	cmp	r3, #0
 801342a:	f040 859a 	bne.w	8013f62 <_strtod_l+0xbba>
 801342e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013430:	b1e3      	cbz	r3, 801346c <_strtod_l+0xc4>
 8013432:	4652      	mov	r2, sl
 8013434:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8013438:	ec43 2b10 	vmov	d0, r2, r3
 801343c:	b021      	add	sp, #132	; 0x84
 801343e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013442:	2a2b      	cmp	r2, #43	; 0x2b
 8013444:	d015      	beq.n	8013472 <_strtod_l+0xca>
 8013446:	2a2d      	cmp	r2, #45	; 0x2d
 8013448:	d004      	beq.n	8013454 <_strtod_l+0xac>
 801344a:	2a20      	cmp	r2, #32
 801344c:	d1ca      	bne.n	80133e4 <_strtod_l+0x3c>
 801344e:	3301      	adds	r3, #1
 8013450:	931b      	str	r3, [sp, #108]	; 0x6c
 8013452:	e7bf      	b.n	80133d4 <_strtod_l+0x2c>
 8013454:	2201      	movs	r2, #1
 8013456:	920d      	str	r2, [sp, #52]	; 0x34
 8013458:	1c5a      	adds	r2, r3, #1
 801345a:	921b      	str	r2, [sp, #108]	; 0x6c
 801345c:	785b      	ldrb	r3, [r3, #1]
 801345e:	2b00      	cmp	r3, #0
 8013460:	d1c2      	bne.n	80133e8 <_strtod_l+0x40>
 8013462:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013464:	961b      	str	r6, [sp, #108]	; 0x6c
 8013466:	2b00      	cmp	r3, #0
 8013468:	f040 8579 	bne.w	8013f5e <_strtod_l+0xbb6>
 801346c:	4652      	mov	r2, sl
 801346e:	465b      	mov	r3, fp
 8013470:	e7e2      	b.n	8013438 <_strtod_l+0x90>
 8013472:	2200      	movs	r2, #0
 8013474:	e7ef      	b.n	8013456 <_strtod_l+0xae>
 8013476:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8013478:	b13a      	cbz	r2, 801348a <_strtod_l+0xe2>
 801347a:	2135      	movs	r1, #53	; 0x35
 801347c:	a81e      	add	r0, sp, #120	; 0x78
 801347e:	f002 fe8b 	bl	8016198 <__copybits>
 8013482:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013484:	4648      	mov	r0, r9
 8013486:	f002 faf8 	bl	8015a7a <_Bfree>
 801348a:	3c01      	subs	r4, #1
 801348c:	2c04      	cmp	r4, #4
 801348e:	d806      	bhi.n	801349e <_strtod_l+0xf6>
 8013490:	e8df f004 	tbb	[pc, r4]
 8013494:	1714030a 	.word	0x1714030a
 8013498:	0a          	.byte	0x0a
 8013499:	00          	.byte	0x00
 801349a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 801349e:	0730      	lsls	r0, r6, #28
 80134a0:	d5c1      	bpl.n	8013426 <_strtod_l+0x7e>
 80134a2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80134a6:	e7be      	b.n	8013426 <_strtod_l+0x7e>
 80134a8:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 80134ac:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80134ae:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80134b2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80134b6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80134ba:	e7f0      	b.n	801349e <_strtod_l+0xf6>
 80134bc:	f8df b170 	ldr.w	fp, [pc, #368]	; 8013630 <_strtod_l+0x288>
 80134c0:	e7ed      	b.n	801349e <_strtod_l+0xf6>
 80134c2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80134c6:	f04f 3aff 	mov.w	sl, #4294967295
 80134ca:	e7e8      	b.n	801349e <_strtod_l+0xf6>
 80134cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80134ce:	1c5a      	adds	r2, r3, #1
 80134d0:	921b      	str	r2, [sp, #108]	; 0x6c
 80134d2:	785b      	ldrb	r3, [r3, #1]
 80134d4:	2b30      	cmp	r3, #48	; 0x30
 80134d6:	d0f9      	beq.n	80134cc <_strtod_l+0x124>
 80134d8:	2b00      	cmp	r3, #0
 80134da:	d0a4      	beq.n	8013426 <_strtod_l+0x7e>
 80134dc:	2301      	movs	r3, #1
 80134de:	2500      	movs	r5, #0
 80134e0:	9306      	str	r3, [sp, #24]
 80134e2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80134e4:	9308      	str	r3, [sp, #32]
 80134e6:	9507      	str	r5, [sp, #28]
 80134e8:	9505      	str	r5, [sp, #20]
 80134ea:	220a      	movs	r2, #10
 80134ec:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80134ee:	7807      	ldrb	r7, [r0, #0]
 80134f0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80134f4:	b2d9      	uxtb	r1, r3
 80134f6:	2909      	cmp	r1, #9
 80134f8:	d929      	bls.n	801354e <_strtod_l+0x1a6>
 80134fa:	4622      	mov	r2, r4
 80134fc:	f8d8 1000 	ldr.w	r1, [r8]
 8013500:	f003 fd5a 	bl	8016fb8 <strncmp>
 8013504:	2800      	cmp	r0, #0
 8013506:	d031      	beq.n	801356c <_strtod_l+0x1c4>
 8013508:	2000      	movs	r0, #0
 801350a:	9c05      	ldr	r4, [sp, #20]
 801350c:	9004      	str	r0, [sp, #16]
 801350e:	463b      	mov	r3, r7
 8013510:	4602      	mov	r2, r0
 8013512:	2b65      	cmp	r3, #101	; 0x65
 8013514:	d001      	beq.n	801351a <_strtod_l+0x172>
 8013516:	2b45      	cmp	r3, #69	; 0x45
 8013518:	d114      	bne.n	8013544 <_strtod_l+0x19c>
 801351a:	b924      	cbnz	r4, 8013526 <_strtod_l+0x17e>
 801351c:	b910      	cbnz	r0, 8013524 <_strtod_l+0x17c>
 801351e:	9b06      	ldr	r3, [sp, #24]
 8013520:	2b00      	cmp	r3, #0
 8013522:	d09e      	beq.n	8013462 <_strtod_l+0xba>
 8013524:	2400      	movs	r4, #0
 8013526:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8013528:	1c73      	adds	r3, r6, #1
 801352a:	931b      	str	r3, [sp, #108]	; 0x6c
 801352c:	7873      	ldrb	r3, [r6, #1]
 801352e:	2b2b      	cmp	r3, #43	; 0x2b
 8013530:	d078      	beq.n	8013624 <_strtod_l+0x27c>
 8013532:	2b2d      	cmp	r3, #45	; 0x2d
 8013534:	d070      	beq.n	8013618 <_strtod_l+0x270>
 8013536:	f04f 0c00 	mov.w	ip, #0
 801353a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 801353e:	2f09      	cmp	r7, #9
 8013540:	d97c      	bls.n	801363c <_strtod_l+0x294>
 8013542:	961b      	str	r6, [sp, #108]	; 0x6c
 8013544:	f04f 0e00 	mov.w	lr, #0
 8013548:	e09a      	b.n	8013680 <_strtod_l+0x2d8>
 801354a:	2300      	movs	r3, #0
 801354c:	e7c7      	b.n	80134de <_strtod_l+0x136>
 801354e:	9905      	ldr	r1, [sp, #20]
 8013550:	2908      	cmp	r1, #8
 8013552:	bfdd      	ittte	le
 8013554:	9907      	ldrle	r1, [sp, #28]
 8013556:	fb02 3301 	mlale	r3, r2, r1, r3
 801355a:	9307      	strle	r3, [sp, #28]
 801355c:	fb02 3505 	mlagt	r5, r2, r5, r3
 8013560:	9b05      	ldr	r3, [sp, #20]
 8013562:	3001      	adds	r0, #1
 8013564:	3301      	adds	r3, #1
 8013566:	9305      	str	r3, [sp, #20]
 8013568:	901b      	str	r0, [sp, #108]	; 0x6c
 801356a:	e7bf      	b.n	80134ec <_strtod_l+0x144>
 801356c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801356e:	191a      	adds	r2, r3, r4
 8013570:	921b      	str	r2, [sp, #108]	; 0x6c
 8013572:	9a05      	ldr	r2, [sp, #20]
 8013574:	5d1b      	ldrb	r3, [r3, r4]
 8013576:	2a00      	cmp	r2, #0
 8013578:	d037      	beq.n	80135ea <_strtod_l+0x242>
 801357a:	9c05      	ldr	r4, [sp, #20]
 801357c:	4602      	mov	r2, r0
 801357e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8013582:	2909      	cmp	r1, #9
 8013584:	d913      	bls.n	80135ae <_strtod_l+0x206>
 8013586:	2101      	movs	r1, #1
 8013588:	9104      	str	r1, [sp, #16]
 801358a:	e7c2      	b.n	8013512 <_strtod_l+0x16a>
 801358c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801358e:	1c5a      	adds	r2, r3, #1
 8013590:	921b      	str	r2, [sp, #108]	; 0x6c
 8013592:	785b      	ldrb	r3, [r3, #1]
 8013594:	3001      	adds	r0, #1
 8013596:	2b30      	cmp	r3, #48	; 0x30
 8013598:	d0f8      	beq.n	801358c <_strtod_l+0x1e4>
 801359a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801359e:	2a08      	cmp	r2, #8
 80135a0:	f200 84e4 	bhi.w	8013f6c <_strtod_l+0xbc4>
 80135a4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80135a6:	9208      	str	r2, [sp, #32]
 80135a8:	4602      	mov	r2, r0
 80135aa:	2000      	movs	r0, #0
 80135ac:	4604      	mov	r4, r0
 80135ae:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80135b2:	f100 0101 	add.w	r1, r0, #1
 80135b6:	d012      	beq.n	80135de <_strtod_l+0x236>
 80135b8:	440a      	add	r2, r1
 80135ba:	eb00 0c04 	add.w	ip, r0, r4
 80135be:	4621      	mov	r1, r4
 80135c0:	270a      	movs	r7, #10
 80135c2:	458c      	cmp	ip, r1
 80135c4:	d113      	bne.n	80135ee <_strtod_l+0x246>
 80135c6:	1821      	adds	r1, r4, r0
 80135c8:	2908      	cmp	r1, #8
 80135ca:	f104 0401 	add.w	r4, r4, #1
 80135ce:	4404      	add	r4, r0
 80135d0:	dc19      	bgt.n	8013606 <_strtod_l+0x25e>
 80135d2:	9b07      	ldr	r3, [sp, #28]
 80135d4:	210a      	movs	r1, #10
 80135d6:	fb01 e303 	mla	r3, r1, r3, lr
 80135da:	9307      	str	r3, [sp, #28]
 80135dc:	2100      	movs	r1, #0
 80135de:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80135e0:	1c58      	adds	r0, r3, #1
 80135e2:	901b      	str	r0, [sp, #108]	; 0x6c
 80135e4:	785b      	ldrb	r3, [r3, #1]
 80135e6:	4608      	mov	r0, r1
 80135e8:	e7c9      	b.n	801357e <_strtod_l+0x1d6>
 80135ea:	9805      	ldr	r0, [sp, #20]
 80135ec:	e7d3      	b.n	8013596 <_strtod_l+0x1ee>
 80135ee:	2908      	cmp	r1, #8
 80135f0:	f101 0101 	add.w	r1, r1, #1
 80135f4:	dc03      	bgt.n	80135fe <_strtod_l+0x256>
 80135f6:	9b07      	ldr	r3, [sp, #28]
 80135f8:	437b      	muls	r3, r7
 80135fa:	9307      	str	r3, [sp, #28]
 80135fc:	e7e1      	b.n	80135c2 <_strtod_l+0x21a>
 80135fe:	2910      	cmp	r1, #16
 8013600:	bfd8      	it	le
 8013602:	437d      	mulle	r5, r7
 8013604:	e7dd      	b.n	80135c2 <_strtod_l+0x21a>
 8013606:	2c10      	cmp	r4, #16
 8013608:	bfdc      	itt	le
 801360a:	210a      	movle	r1, #10
 801360c:	fb01 e505 	mlale	r5, r1, r5, lr
 8013610:	e7e4      	b.n	80135dc <_strtod_l+0x234>
 8013612:	2301      	movs	r3, #1
 8013614:	9304      	str	r3, [sp, #16]
 8013616:	e781      	b.n	801351c <_strtod_l+0x174>
 8013618:	f04f 0c01 	mov.w	ip, #1
 801361c:	1cb3      	adds	r3, r6, #2
 801361e:	931b      	str	r3, [sp, #108]	; 0x6c
 8013620:	78b3      	ldrb	r3, [r6, #2]
 8013622:	e78a      	b.n	801353a <_strtod_l+0x192>
 8013624:	f04f 0c00 	mov.w	ip, #0
 8013628:	e7f8      	b.n	801361c <_strtod_l+0x274>
 801362a:	bf00      	nop
 801362c:	08017b0c 	.word	0x08017b0c
 8013630:	7ff00000 	.word	0x7ff00000
 8013634:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013636:	1c5f      	adds	r7, r3, #1
 8013638:	971b      	str	r7, [sp, #108]	; 0x6c
 801363a:	785b      	ldrb	r3, [r3, #1]
 801363c:	2b30      	cmp	r3, #48	; 0x30
 801363e:	d0f9      	beq.n	8013634 <_strtod_l+0x28c>
 8013640:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8013644:	2f08      	cmp	r7, #8
 8013646:	f63f af7d 	bhi.w	8013544 <_strtod_l+0x19c>
 801364a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801364e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013650:	930a      	str	r3, [sp, #40]	; 0x28
 8013652:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013654:	1c5f      	adds	r7, r3, #1
 8013656:	971b      	str	r7, [sp, #108]	; 0x6c
 8013658:	785b      	ldrb	r3, [r3, #1]
 801365a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 801365e:	f1b8 0f09 	cmp.w	r8, #9
 8013662:	d937      	bls.n	80136d4 <_strtod_l+0x32c>
 8013664:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013666:	1a7f      	subs	r7, r7, r1
 8013668:	2f08      	cmp	r7, #8
 801366a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 801366e:	dc37      	bgt.n	80136e0 <_strtod_l+0x338>
 8013670:	45be      	cmp	lr, r7
 8013672:	bfa8      	it	ge
 8013674:	46be      	movge	lr, r7
 8013676:	f1bc 0f00 	cmp.w	ip, #0
 801367a:	d001      	beq.n	8013680 <_strtod_l+0x2d8>
 801367c:	f1ce 0e00 	rsb	lr, lr, #0
 8013680:	2c00      	cmp	r4, #0
 8013682:	d151      	bne.n	8013728 <_strtod_l+0x380>
 8013684:	2800      	cmp	r0, #0
 8013686:	f47f aece 	bne.w	8013426 <_strtod_l+0x7e>
 801368a:	9a06      	ldr	r2, [sp, #24]
 801368c:	2a00      	cmp	r2, #0
 801368e:	f47f aeca 	bne.w	8013426 <_strtod_l+0x7e>
 8013692:	9a04      	ldr	r2, [sp, #16]
 8013694:	2a00      	cmp	r2, #0
 8013696:	f47f aee4 	bne.w	8013462 <_strtod_l+0xba>
 801369a:	2b4e      	cmp	r3, #78	; 0x4e
 801369c:	d027      	beq.n	80136ee <_strtod_l+0x346>
 801369e:	dc21      	bgt.n	80136e4 <_strtod_l+0x33c>
 80136a0:	2b49      	cmp	r3, #73	; 0x49
 80136a2:	f47f aede 	bne.w	8013462 <_strtod_l+0xba>
 80136a6:	49a0      	ldr	r1, [pc, #640]	; (8013928 <_strtod_l+0x580>)
 80136a8:	a81b      	add	r0, sp, #108	; 0x6c
 80136aa:	f002 f851 	bl	8015750 <__match>
 80136ae:	2800      	cmp	r0, #0
 80136b0:	f43f aed7 	beq.w	8013462 <_strtod_l+0xba>
 80136b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80136b6:	499d      	ldr	r1, [pc, #628]	; (801392c <_strtod_l+0x584>)
 80136b8:	3b01      	subs	r3, #1
 80136ba:	a81b      	add	r0, sp, #108	; 0x6c
 80136bc:	931b      	str	r3, [sp, #108]	; 0x6c
 80136be:	f002 f847 	bl	8015750 <__match>
 80136c2:	b910      	cbnz	r0, 80136ca <_strtod_l+0x322>
 80136c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80136c6:	3301      	adds	r3, #1
 80136c8:	931b      	str	r3, [sp, #108]	; 0x6c
 80136ca:	f8df b274 	ldr.w	fp, [pc, #628]	; 8013940 <_strtod_l+0x598>
 80136ce:	f04f 0a00 	mov.w	sl, #0
 80136d2:	e6a8      	b.n	8013426 <_strtod_l+0x7e>
 80136d4:	210a      	movs	r1, #10
 80136d6:	fb01 3e0e 	mla	lr, r1, lr, r3
 80136da:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80136de:	e7b8      	b.n	8013652 <_strtod_l+0x2aa>
 80136e0:	46be      	mov	lr, r7
 80136e2:	e7c8      	b.n	8013676 <_strtod_l+0x2ce>
 80136e4:	2b69      	cmp	r3, #105	; 0x69
 80136e6:	d0de      	beq.n	80136a6 <_strtod_l+0x2fe>
 80136e8:	2b6e      	cmp	r3, #110	; 0x6e
 80136ea:	f47f aeba 	bne.w	8013462 <_strtod_l+0xba>
 80136ee:	4990      	ldr	r1, [pc, #576]	; (8013930 <_strtod_l+0x588>)
 80136f0:	a81b      	add	r0, sp, #108	; 0x6c
 80136f2:	f002 f82d 	bl	8015750 <__match>
 80136f6:	2800      	cmp	r0, #0
 80136f8:	f43f aeb3 	beq.w	8013462 <_strtod_l+0xba>
 80136fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80136fe:	781b      	ldrb	r3, [r3, #0]
 8013700:	2b28      	cmp	r3, #40	; 0x28
 8013702:	d10e      	bne.n	8013722 <_strtod_l+0x37a>
 8013704:	aa1e      	add	r2, sp, #120	; 0x78
 8013706:	498b      	ldr	r1, [pc, #556]	; (8013934 <_strtod_l+0x58c>)
 8013708:	a81b      	add	r0, sp, #108	; 0x6c
 801370a:	f002 f835 	bl	8015778 <__hexnan>
 801370e:	2805      	cmp	r0, #5
 8013710:	d107      	bne.n	8013722 <_strtod_l+0x37a>
 8013712:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013714:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8013718:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801371c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8013720:	e681      	b.n	8013426 <_strtod_l+0x7e>
 8013722:	f8df b224 	ldr.w	fp, [pc, #548]	; 8013948 <_strtod_l+0x5a0>
 8013726:	e7d2      	b.n	80136ce <_strtod_l+0x326>
 8013728:	ebae 0302 	sub.w	r3, lr, r2
 801372c:	9306      	str	r3, [sp, #24]
 801372e:	9b05      	ldr	r3, [sp, #20]
 8013730:	9807      	ldr	r0, [sp, #28]
 8013732:	2b00      	cmp	r3, #0
 8013734:	bf08      	it	eq
 8013736:	4623      	moveq	r3, r4
 8013738:	2c10      	cmp	r4, #16
 801373a:	9305      	str	r3, [sp, #20]
 801373c:	46a0      	mov	r8, r4
 801373e:	bfa8      	it	ge
 8013740:	f04f 0810 	movge.w	r8, #16
 8013744:	f7ec fef6 	bl	8000534 <__aeabi_ui2d>
 8013748:	2c09      	cmp	r4, #9
 801374a:	4682      	mov	sl, r0
 801374c:	468b      	mov	fp, r1
 801374e:	dc13      	bgt.n	8013778 <_strtod_l+0x3d0>
 8013750:	9b06      	ldr	r3, [sp, #24]
 8013752:	2b00      	cmp	r3, #0
 8013754:	f43f ae67 	beq.w	8013426 <_strtod_l+0x7e>
 8013758:	9b06      	ldr	r3, [sp, #24]
 801375a:	dd7a      	ble.n	8013852 <_strtod_l+0x4aa>
 801375c:	2b16      	cmp	r3, #22
 801375e:	dc61      	bgt.n	8013824 <_strtod_l+0x47c>
 8013760:	4a75      	ldr	r2, [pc, #468]	; (8013938 <_strtod_l+0x590>)
 8013762:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8013766:	e9de 0100 	ldrd	r0, r1, [lr]
 801376a:	4652      	mov	r2, sl
 801376c:	465b      	mov	r3, fp
 801376e:	f7ec ff5b 	bl	8000628 <__aeabi_dmul>
 8013772:	4682      	mov	sl, r0
 8013774:	468b      	mov	fp, r1
 8013776:	e656      	b.n	8013426 <_strtod_l+0x7e>
 8013778:	4b6f      	ldr	r3, [pc, #444]	; (8013938 <_strtod_l+0x590>)
 801377a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801377e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8013782:	f7ec ff51 	bl	8000628 <__aeabi_dmul>
 8013786:	4606      	mov	r6, r0
 8013788:	4628      	mov	r0, r5
 801378a:	460f      	mov	r7, r1
 801378c:	f7ec fed2 	bl	8000534 <__aeabi_ui2d>
 8013790:	4602      	mov	r2, r0
 8013792:	460b      	mov	r3, r1
 8013794:	4630      	mov	r0, r6
 8013796:	4639      	mov	r1, r7
 8013798:	f7ec fd90 	bl	80002bc <__adddf3>
 801379c:	2c0f      	cmp	r4, #15
 801379e:	4682      	mov	sl, r0
 80137a0:	468b      	mov	fp, r1
 80137a2:	ddd5      	ble.n	8013750 <_strtod_l+0x3a8>
 80137a4:	9b06      	ldr	r3, [sp, #24]
 80137a6:	eba4 0808 	sub.w	r8, r4, r8
 80137aa:	4498      	add	r8, r3
 80137ac:	f1b8 0f00 	cmp.w	r8, #0
 80137b0:	f340 8096 	ble.w	80138e0 <_strtod_l+0x538>
 80137b4:	f018 030f 	ands.w	r3, r8, #15
 80137b8:	d00a      	beq.n	80137d0 <_strtod_l+0x428>
 80137ba:	495f      	ldr	r1, [pc, #380]	; (8013938 <_strtod_l+0x590>)
 80137bc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80137c0:	4652      	mov	r2, sl
 80137c2:	465b      	mov	r3, fp
 80137c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80137c8:	f7ec ff2e 	bl	8000628 <__aeabi_dmul>
 80137cc:	4682      	mov	sl, r0
 80137ce:	468b      	mov	fp, r1
 80137d0:	f038 080f 	bics.w	r8, r8, #15
 80137d4:	d073      	beq.n	80138be <_strtod_l+0x516>
 80137d6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80137da:	dd47      	ble.n	801386c <_strtod_l+0x4c4>
 80137dc:	2400      	movs	r4, #0
 80137de:	46a0      	mov	r8, r4
 80137e0:	9407      	str	r4, [sp, #28]
 80137e2:	9405      	str	r4, [sp, #20]
 80137e4:	2322      	movs	r3, #34	; 0x22
 80137e6:	f8df b158 	ldr.w	fp, [pc, #344]	; 8013940 <_strtod_l+0x598>
 80137ea:	f8c9 3000 	str.w	r3, [r9]
 80137ee:	f04f 0a00 	mov.w	sl, #0
 80137f2:	9b07      	ldr	r3, [sp, #28]
 80137f4:	2b00      	cmp	r3, #0
 80137f6:	f43f ae16 	beq.w	8013426 <_strtod_l+0x7e>
 80137fa:	991c      	ldr	r1, [sp, #112]	; 0x70
 80137fc:	4648      	mov	r0, r9
 80137fe:	f002 f93c 	bl	8015a7a <_Bfree>
 8013802:	9905      	ldr	r1, [sp, #20]
 8013804:	4648      	mov	r0, r9
 8013806:	f002 f938 	bl	8015a7a <_Bfree>
 801380a:	4641      	mov	r1, r8
 801380c:	4648      	mov	r0, r9
 801380e:	f002 f934 	bl	8015a7a <_Bfree>
 8013812:	9907      	ldr	r1, [sp, #28]
 8013814:	4648      	mov	r0, r9
 8013816:	f002 f930 	bl	8015a7a <_Bfree>
 801381a:	4621      	mov	r1, r4
 801381c:	4648      	mov	r0, r9
 801381e:	f002 f92c 	bl	8015a7a <_Bfree>
 8013822:	e600      	b.n	8013426 <_strtod_l+0x7e>
 8013824:	9a06      	ldr	r2, [sp, #24]
 8013826:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 801382a:	4293      	cmp	r3, r2
 801382c:	dbba      	blt.n	80137a4 <_strtod_l+0x3fc>
 801382e:	4d42      	ldr	r5, [pc, #264]	; (8013938 <_strtod_l+0x590>)
 8013830:	f1c4 040f 	rsb	r4, r4, #15
 8013834:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8013838:	4652      	mov	r2, sl
 801383a:	465b      	mov	r3, fp
 801383c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013840:	f7ec fef2 	bl	8000628 <__aeabi_dmul>
 8013844:	9b06      	ldr	r3, [sp, #24]
 8013846:	1b1c      	subs	r4, r3, r4
 8013848:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 801384c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013850:	e78d      	b.n	801376e <_strtod_l+0x3c6>
 8013852:	f113 0f16 	cmn.w	r3, #22
 8013856:	dba5      	blt.n	80137a4 <_strtod_l+0x3fc>
 8013858:	4a37      	ldr	r2, [pc, #220]	; (8013938 <_strtod_l+0x590>)
 801385a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 801385e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8013862:	4650      	mov	r0, sl
 8013864:	4659      	mov	r1, fp
 8013866:	f7ed f809 	bl	800087c <__aeabi_ddiv>
 801386a:	e782      	b.n	8013772 <_strtod_l+0x3ca>
 801386c:	2300      	movs	r3, #0
 801386e:	4e33      	ldr	r6, [pc, #204]	; (801393c <_strtod_l+0x594>)
 8013870:	ea4f 1828 	mov.w	r8, r8, asr #4
 8013874:	4650      	mov	r0, sl
 8013876:	4659      	mov	r1, fp
 8013878:	461d      	mov	r5, r3
 801387a:	f1b8 0f01 	cmp.w	r8, #1
 801387e:	dc21      	bgt.n	80138c4 <_strtod_l+0x51c>
 8013880:	b10b      	cbz	r3, 8013886 <_strtod_l+0x4de>
 8013882:	4682      	mov	sl, r0
 8013884:	468b      	mov	fp, r1
 8013886:	4b2d      	ldr	r3, [pc, #180]	; (801393c <_strtod_l+0x594>)
 8013888:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801388c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8013890:	4652      	mov	r2, sl
 8013892:	465b      	mov	r3, fp
 8013894:	e9d5 0100 	ldrd	r0, r1, [r5]
 8013898:	f7ec fec6 	bl	8000628 <__aeabi_dmul>
 801389c:	4b28      	ldr	r3, [pc, #160]	; (8013940 <_strtod_l+0x598>)
 801389e:	460a      	mov	r2, r1
 80138a0:	400b      	ands	r3, r1
 80138a2:	4928      	ldr	r1, [pc, #160]	; (8013944 <_strtod_l+0x59c>)
 80138a4:	428b      	cmp	r3, r1
 80138a6:	4682      	mov	sl, r0
 80138a8:	d898      	bhi.n	80137dc <_strtod_l+0x434>
 80138aa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80138ae:	428b      	cmp	r3, r1
 80138b0:	bf86      	itte	hi
 80138b2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801394c <_strtod_l+0x5a4>
 80138b6:	f04f 3aff 	movhi.w	sl, #4294967295
 80138ba:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80138be:	2300      	movs	r3, #0
 80138c0:	9304      	str	r3, [sp, #16]
 80138c2:	e077      	b.n	80139b4 <_strtod_l+0x60c>
 80138c4:	f018 0f01 	tst.w	r8, #1
 80138c8:	d006      	beq.n	80138d8 <_strtod_l+0x530>
 80138ca:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80138ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138d2:	f7ec fea9 	bl	8000628 <__aeabi_dmul>
 80138d6:	2301      	movs	r3, #1
 80138d8:	3501      	adds	r5, #1
 80138da:	ea4f 0868 	mov.w	r8, r8, asr #1
 80138de:	e7cc      	b.n	801387a <_strtod_l+0x4d2>
 80138e0:	d0ed      	beq.n	80138be <_strtod_l+0x516>
 80138e2:	f1c8 0800 	rsb	r8, r8, #0
 80138e6:	f018 020f 	ands.w	r2, r8, #15
 80138ea:	d00a      	beq.n	8013902 <_strtod_l+0x55a>
 80138ec:	4b12      	ldr	r3, [pc, #72]	; (8013938 <_strtod_l+0x590>)
 80138ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80138f2:	4650      	mov	r0, sl
 80138f4:	4659      	mov	r1, fp
 80138f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138fa:	f7ec ffbf 	bl	800087c <__aeabi_ddiv>
 80138fe:	4682      	mov	sl, r0
 8013900:	468b      	mov	fp, r1
 8013902:	ea5f 1828 	movs.w	r8, r8, asr #4
 8013906:	d0da      	beq.n	80138be <_strtod_l+0x516>
 8013908:	f1b8 0f1f 	cmp.w	r8, #31
 801390c:	dd20      	ble.n	8013950 <_strtod_l+0x5a8>
 801390e:	2400      	movs	r4, #0
 8013910:	46a0      	mov	r8, r4
 8013912:	9407      	str	r4, [sp, #28]
 8013914:	9405      	str	r4, [sp, #20]
 8013916:	2322      	movs	r3, #34	; 0x22
 8013918:	f04f 0a00 	mov.w	sl, #0
 801391c:	f04f 0b00 	mov.w	fp, #0
 8013920:	f8c9 3000 	str.w	r3, [r9]
 8013924:	e765      	b.n	80137f2 <_strtod_l+0x44a>
 8013926:	bf00      	nop
 8013928:	08017ad9 	.word	0x08017ad9
 801392c:	08017b63 	.word	0x08017b63
 8013930:	08017ae1 	.word	0x08017ae1
 8013934:	08017b20 	.word	0x08017b20
 8013938:	08017c08 	.word	0x08017c08
 801393c:	08017be0 	.word	0x08017be0
 8013940:	7ff00000 	.word	0x7ff00000
 8013944:	7ca00000 	.word	0x7ca00000
 8013948:	fff80000 	.word	0xfff80000
 801394c:	7fefffff 	.word	0x7fefffff
 8013950:	f018 0310 	ands.w	r3, r8, #16
 8013954:	bf18      	it	ne
 8013956:	236a      	movne	r3, #106	; 0x6a
 8013958:	4da0      	ldr	r5, [pc, #640]	; (8013bdc <_strtod_l+0x834>)
 801395a:	9304      	str	r3, [sp, #16]
 801395c:	4650      	mov	r0, sl
 801395e:	4659      	mov	r1, fp
 8013960:	2300      	movs	r3, #0
 8013962:	f1b8 0f00 	cmp.w	r8, #0
 8013966:	f300 810a 	bgt.w	8013b7e <_strtod_l+0x7d6>
 801396a:	b10b      	cbz	r3, 8013970 <_strtod_l+0x5c8>
 801396c:	4682      	mov	sl, r0
 801396e:	468b      	mov	fp, r1
 8013970:	9b04      	ldr	r3, [sp, #16]
 8013972:	b1bb      	cbz	r3, 80139a4 <_strtod_l+0x5fc>
 8013974:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8013978:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801397c:	2b00      	cmp	r3, #0
 801397e:	4659      	mov	r1, fp
 8013980:	dd10      	ble.n	80139a4 <_strtod_l+0x5fc>
 8013982:	2b1f      	cmp	r3, #31
 8013984:	f340 8107 	ble.w	8013b96 <_strtod_l+0x7ee>
 8013988:	2b34      	cmp	r3, #52	; 0x34
 801398a:	bfde      	ittt	le
 801398c:	3b20      	suble	r3, #32
 801398e:	f04f 32ff 	movle.w	r2, #4294967295
 8013992:	fa02 f303 	lslle.w	r3, r2, r3
 8013996:	f04f 0a00 	mov.w	sl, #0
 801399a:	bfcc      	ite	gt
 801399c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80139a0:	ea03 0b01 	andle.w	fp, r3, r1
 80139a4:	2200      	movs	r2, #0
 80139a6:	2300      	movs	r3, #0
 80139a8:	4650      	mov	r0, sl
 80139aa:	4659      	mov	r1, fp
 80139ac:	f7ed f8a4 	bl	8000af8 <__aeabi_dcmpeq>
 80139b0:	2800      	cmp	r0, #0
 80139b2:	d1ac      	bne.n	801390e <_strtod_l+0x566>
 80139b4:	9b07      	ldr	r3, [sp, #28]
 80139b6:	9300      	str	r3, [sp, #0]
 80139b8:	9a05      	ldr	r2, [sp, #20]
 80139ba:	9908      	ldr	r1, [sp, #32]
 80139bc:	4623      	mov	r3, r4
 80139be:	4648      	mov	r0, r9
 80139c0:	f002 f8ad 	bl	8015b1e <__s2b>
 80139c4:	9007      	str	r0, [sp, #28]
 80139c6:	2800      	cmp	r0, #0
 80139c8:	f43f af08 	beq.w	80137dc <_strtod_l+0x434>
 80139cc:	9a06      	ldr	r2, [sp, #24]
 80139ce:	9b06      	ldr	r3, [sp, #24]
 80139d0:	2a00      	cmp	r2, #0
 80139d2:	f1c3 0300 	rsb	r3, r3, #0
 80139d6:	bfa8      	it	ge
 80139d8:	2300      	movge	r3, #0
 80139da:	930e      	str	r3, [sp, #56]	; 0x38
 80139dc:	2400      	movs	r4, #0
 80139de:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80139e2:	9316      	str	r3, [sp, #88]	; 0x58
 80139e4:	46a0      	mov	r8, r4
 80139e6:	9b07      	ldr	r3, [sp, #28]
 80139e8:	4648      	mov	r0, r9
 80139ea:	6859      	ldr	r1, [r3, #4]
 80139ec:	f002 f811 	bl	8015a12 <_Balloc>
 80139f0:	9005      	str	r0, [sp, #20]
 80139f2:	2800      	cmp	r0, #0
 80139f4:	f43f aef6 	beq.w	80137e4 <_strtod_l+0x43c>
 80139f8:	9b07      	ldr	r3, [sp, #28]
 80139fa:	691a      	ldr	r2, [r3, #16]
 80139fc:	3202      	adds	r2, #2
 80139fe:	f103 010c 	add.w	r1, r3, #12
 8013a02:	0092      	lsls	r2, r2, #2
 8013a04:	300c      	adds	r0, #12
 8013a06:	f001 fff9 	bl	80159fc <memcpy>
 8013a0a:	aa1e      	add	r2, sp, #120	; 0x78
 8013a0c:	a91d      	add	r1, sp, #116	; 0x74
 8013a0e:	ec4b ab10 	vmov	d0, sl, fp
 8013a12:	4648      	mov	r0, r9
 8013a14:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8013a18:	f002 fb3c 	bl	8016094 <__d2b>
 8013a1c:	901c      	str	r0, [sp, #112]	; 0x70
 8013a1e:	2800      	cmp	r0, #0
 8013a20:	f43f aee0 	beq.w	80137e4 <_strtod_l+0x43c>
 8013a24:	2101      	movs	r1, #1
 8013a26:	4648      	mov	r0, r9
 8013a28:	f002 f905 	bl	8015c36 <__i2b>
 8013a2c:	4680      	mov	r8, r0
 8013a2e:	2800      	cmp	r0, #0
 8013a30:	f43f aed8 	beq.w	80137e4 <_strtod_l+0x43c>
 8013a34:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8013a36:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8013a38:	2e00      	cmp	r6, #0
 8013a3a:	bfab      	itete	ge
 8013a3c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8013a3e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8013a40:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8013a42:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8013a44:	bfac      	ite	ge
 8013a46:	18f7      	addge	r7, r6, r3
 8013a48:	1b9d      	sublt	r5, r3, r6
 8013a4a:	9b04      	ldr	r3, [sp, #16]
 8013a4c:	1af6      	subs	r6, r6, r3
 8013a4e:	4416      	add	r6, r2
 8013a50:	4b63      	ldr	r3, [pc, #396]	; (8013be0 <_strtod_l+0x838>)
 8013a52:	3e01      	subs	r6, #1
 8013a54:	429e      	cmp	r6, r3
 8013a56:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8013a5a:	f280 80af 	bge.w	8013bbc <_strtod_l+0x814>
 8013a5e:	1b9b      	subs	r3, r3, r6
 8013a60:	2b1f      	cmp	r3, #31
 8013a62:	eba2 0203 	sub.w	r2, r2, r3
 8013a66:	f04f 0101 	mov.w	r1, #1
 8013a6a:	f300 809b 	bgt.w	8013ba4 <_strtod_l+0x7fc>
 8013a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8013a72:	930f      	str	r3, [sp, #60]	; 0x3c
 8013a74:	2300      	movs	r3, #0
 8013a76:	930a      	str	r3, [sp, #40]	; 0x28
 8013a78:	18be      	adds	r6, r7, r2
 8013a7a:	9b04      	ldr	r3, [sp, #16]
 8013a7c:	42b7      	cmp	r7, r6
 8013a7e:	4415      	add	r5, r2
 8013a80:	441d      	add	r5, r3
 8013a82:	463b      	mov	r3, r7
 8013a84:	bfa8      	it	ge
 8013a86:	4633      	movge	r3, r6
 8013a88:	42ab      	cmp	r3, r5
 8013a8a:	bfa8      	it	ge
 8013a8c:	462b      	movge	r3, r5
 8013a8e:	2b00      	cmp	r3, #0
 8013a90:	bfc2      	ittt	gt
 8013a92:	1af6      	subgt	r6, r6, r3
 8013a94:	1aed      	subgt	r5, r5, r3
 8013a96:	1aff      	subgt	r7, r7, r3
 8013a98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013a9a:	b1bb      	cbz	r3, 8013acc <_strtod_l+0x724>
 8013a9c:	4641      	mov	r1, r8
 8013a9e:	461a      	mov	r2, r3
 8013aa0:	4648      	mov	r0, r9
 8013aa2:	f002 f967 	bl	8015d74 <__pow5mult>
 8013aa6:	4680      	mov	r8, r0
 8013aa8:	2800      	cmp	r0, #0
 8013aaa:	f43f ae9b 	beq.w	80137e4 <_strtod_l+0x43c>
 8013aae:	4601      	mov	r1, r0
 8013ab0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8013ab2:	4648      	mov	r0, r9
 8013ab4:	f002 f8c8 	bl	8015c48 <__multiply>
 8013ab8:	900c      	str	r0, [sp, #48]	; 0x30
 8013aba:	2800      	cmp	r0, #0
 8013abc:	f43f ae92 	beq.w	80137e4 <_strtod_l+0x43c>
 8013ac0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013ac2:	4648      	mov	r0, r9
 8013ac4:	f001 ffd9 	bl	8015a7a <_Bfree>
 8013ac8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013aca:	931c      	str	r3, [sp, #112]	; 0x70
 8013acc:	2e00      	cmp	r6, #0
 8013ace:	dc7a      	bgt.n	8013bc6 <_strtod_l+0x81e>
 8013ad0:	9b06      	ldr	r3, [sp, #24]
 8013ad2:	2b00      	cmp	r3, #0
 8013ad4:	dd08      	ble.n	8013ae8 <_strtod_l+0x740>
 8013ad6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8013ad8:	9905      	ldr	r1, [sp, #20]
 8013ada:	4648      	mov	r0, r9
 8013adc:	f002 f94a 	bl	8015d74 <__pow5mult>
 8013ae0:	9005      	str	r0, [sp, #20]
 8013ae2:	2800      	cmp	r0, #0
 8013ae4:	f43f ae7e 	beq.w	80137e4 <_strtod_l+0x43c>
 8013ae8:	2d00      	cmp	r5, #0
 8013aea:	dd08      	ble.n	8013afe <_strtod_l+0x756>
 8013aec:	462a      	mov	r2, r5
 8013aee:	9905      	ldr	r1, [sp, #20]
 8013af0:	4648      	mov	r0, r9
 8013af2:	f002 f98d 	bl	8015e10 <__lshift>
 8013af6:	9005      	str	r0, [sp, #20]
 8013af8:	2800      	cmp	r0, #0
 8013afa:	f43f ae73 	beq.w	80137e4 <_strtod_l+0x43c>
 8013afe:	2f00      	cmp	r7, #0
 8013b00:	dd08      	ble.n	8013b14 <_strtod_l+0x76c>
 8013b02:	4641      	mov	r1, r8
 8013b04:	463a      	mov	r2, r7
 8013b06:	4648      	mov	r0, r9
 8013b08:	f002 f982 	bl	8015e10 <__lshift>
 8013b0c:	4680      	mov	r8, r0
 8013b0e:	2800      	cmp	r0, #0
 8013b10:	f43f ae68 	beq.w	80137e4 <_strtod_l+0x43c>
 8013b14:	9a05      	ldr	r2, [sp, #20]
 8013b16:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013b18:	4648      	mov	r0, r9
 8013b1a:	f002 f9e7 	bl	8015eec <__mdiff>
 8013b1e:	4604      	mov	r4, r0
 8013b20:	2800      	cmp	r0, #0
 8013b22:	f43f ae5f 	beq.w	80137e4 <_strtod_l+0x43c>
 8013b26:	68c3      	ldr	r3, [r0, #12]
 8013b28:	930c      	str	r3, [sp, #48]	; 0x30
 8013b2a:	2300      	movs	r3, #0
 8013b2c:	60c3      	str	r3, [r0, #12]
 8013b2e:	4641      	mov	r1, r8
 8013b30:	f002 f9c2 	bl	8015eb8 <__mcmp>
 8013b34:	2800      	cmp	r0, #0
 8013b36:	da55      	bge.n	8013be4 <_strtod_l+0x83c>
 8013b38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013b3a:	b9e3      	cbnz	r3, 8013b76 <_strtod_l+0x7ce>
 8013b3c:	f1ba 0f00 	cmp.w	sl, #0
 8013b40:	d119      	bne.n	8013b76 <_strtod_l+0x7ce>
 8013b42:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013b46:	b9b3      	cbnz	r3, 8013b76 <_strtod_l+0x7ce>
 8013b48:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013b4c:	0d1b      	lsrs	r3, r3, #20
 8013b4e:	051b      	lsls	r3, r3, #20
 8013b50:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8013b54:	d90f      	bls.n	8013b76 <_strtod_l+0x7ce>
 8013b56:	6963      	ldr	r3, [r4, #20]
 8013b58:	b913      	cbnz	r3, 8013b60 <_strtod_l+0x7b8>
 8013b5a:	6923      	ldr	r3, [r4, #16]
 8013b5c:	2b01      	cmp	r3, #1
 8013b5e:	dd0a      	ble.n	8013b76 <_strtod_l+0x7ce>
 8013b60:	4621      	mov	r1, r4
 8013b62:	2201      	movs	r2, #1
 8013b64:	4648      	mov	r0, r9
 8013b66:	f002 f953 	bl	8015e10 <__lshift>
 8013b6a:	4641      	mov	r1, r8
 8013b6c:	4604      	mov	r4, r0
 8013b6e:	f002 f9a3 	bl	8015eb8 <__mcmp>
 8013b72:	2800      	cmp	r0, #0
 8013b74:	dc67      	bgt.n	8013c46 <_strtod_l+0x89e>
 8013b76:	9b04      	ldr	r3, [sp, #16]
 8013b78:	2b00      	cmp	r3, #0
 8013b7a:	d171      	bne.n	8013c60 <_strtod_l+0x8b8>
 8013b7c:	e63d      	b.n	80137fa <_strtod_l+0x452>
 8013b7e:	f018 0f01 	tst.w	r8, #1
 8013b82:	d004      	beq.n	8013b8e <_strtod_l+0x7e6>
 8013b84:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013b88:	f7ec fd4e 	bl	8000628 <__aeabi_dmul>
 8013b8c:	2301      	movs	r3, #1
 8013b8e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8013b92:	3508      	adds	r5, #8
 8013b94:	e6e5      	b.n	8013962 <_strtod_l+0x5ba>
 8013b96:	f04f 32ff 	mov.w	r2, #4294967295
 8013b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8013b9e:	ea03 0a0a 	and.w	sl, r3, sl
 8013ba2:	e6ff      	b.n	80139a4 <_strtod_l+0x5fc>
 8013ba4:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8013ba8:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8013bac:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8013bb0:	36e2      	adds	r6, #226	; 0xe2
 8013bb2:	fa01 f306 	lsl.w	r3, r1, r6
 8013bb6:	930a      	str	r3, [sp, #40]	; 0x28
 8013bb8:	910f      	str	r1, [sp, #60]	; 0x3c
 8013bba:	e75d      	b.n	8013a78 <_strtod_l+0x6d0>
 8013bbc:	2300      	movs	r3, #0
 8013bbe:	930a      	str	r3, [sp, #40]	; 0x28
 8013bc0:	2301      	movs	r3, #1
 8013bc2:	930f      	str	r3, [sp, #60]	; 0x3c
 8013bc4:	e758      	b.n	8013a78 <_strtod_l+0x6d0>
 8013bc6:	4632      	mov	r2, r6
 8013bc8:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013bca:	4648      	mov	r0, r9
 8013bcc:	f002 f920 	bl	8015e10 <__lshift>
 8013bd0:	901c      	str	r0, [sp, #112]	; 0x70
 8013bd2:	2800      	cmp	r0, #0
 8013bd4:	f47f af7c 	bne.w	8013ad0 <_strtod_l+0x728>
 8013bd8:	e604      	b.n	80137e4 <_strtod_l+0x43c>
 8013bda:	bf00      	nop
 8013bdc:	08017b38 	.word	0x08017b38
 8013be0:	fffffc02 	.word	0xfffffc02
 8013be4:	465d      	mov	r5, fp
 8013be6:	f040 8086 	bne.w	8013cf6 <_strtod_l+0x94e>
 8013bea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013bec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013bf0:	b32a      	cbz	r2, 8013c3e <_strtod_l+0x896>
 8013bf2:	4aaf      	ldr	r2, [pc, #700]	; (8013eb0 <_strtod_l+0xb08>)
 8013bf4:	4293      	cmp	r3, r2
 8013bf6:	d153      	bne.n	8013ca0 <_strtod_l+0x8f8>
 8013bf8:	9b04      	ldr	r3, [sp, #16]
 8013bfa:	4650      	mov	r0, sl
 8013bfc:	b1d3      	cbz	r3, 8013c34 <_strtod_l+0x88c>
 8013bfe:	4aad      	ldr	r2, [pc, #692]	; (8013eb4 <_strtod_l+0xb0c>)
 8013c00:	402a      	ands	r2, r5
 8013c02:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8013c06:	f04f 31ff 	mov.w	r1, #4294967295
 8013c0a:	d816      	bhi.n	8013c3a <_strtod_l+0x892>
 8013c0c:	0d12      	lsrs	r2, r2, #20
 8013c0e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8013c12:	fa01 f303 	lsl.w	r3, r1, r3
 8013c16:	4298      	cmp	r0, r3
 8013c18:	d142      	bne.n	8013ca0 <_strtod_l+0x8f8>
 8013c1a:	4ba7      	ldr	r3, [pc, #668]	; (8013eb8 <_strtod_l+0xb10>)
 8013c1c:	429d      	cmp	r5, r3
 8013c1e:	d102      	bne.n	8013c26 <_strtod_l+0x87e>
 8013c20:	3001      	adds	r0, #1
 8013c22:	f43f addf 	beq.w	80137e4 <_strtod_l+0x43c>
 8013c26:	4ba3      	ldr	r3, [pc, #652]	; (8013eb4 <_strtod_l+0xb0c>)
 8013c28:	402b      	ands	r3, r5
 8013c2a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8013c2e:	f04f 0a00 	mov.w	sl, #0
 8013c32:	e7a0      	b.n	8013b76 <_strtod_l+0x7ce>
 8013c34:	f04f 33ff 	mov.w	r3, #4294967295
 8013c38:	e7ed      	b.n	8013c16 <_strtod_l+0x86e>
 8013c3a:	460b      	mov	r3, r1
 8013c3c:	e7eb      	b.n	8013c16 <_strtod_l+0x86e>
 8013c3e:	bb7b      	cbnz	r3, 8013ca0 <_strtod_l+0x8f8>
 8013c40:	f1ba 0f00 	cmp.w	sl, #0
 8013c44:	d12c      	bne.n	8013ca0 <_strtod_l+0x8f8>
 8013c46:	9904      	ldr	r1, [sp, #16]
 8013c48:	4a9a      	ldr	r2, [pc, #616]	; (8013eb4 <_strtod_l+0xb0c>)
 8013c4a:	465b      	mov	r3, fp
 8013c4c:	b1f1      	cbz	r1, 8013c8c <_strtod_l+0x8e4>
 8013c4e:	ea02 010b 	and.w	r1, r2, fp
 8013c52:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8013c56:	dc19      	bgt.n	8013c8c <_strtod_l+0x8e4>
 8013c58:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8013c5c:	f77f ae5b 	ble.w	8013916 <_strtod_l+0x56e>
 8013c60:	4a96      	ldr	r2, [pc, #600]	; (8013ebc <_strtod_l+0xb14>)
 8013c62:	2300      	movs	r3, #0
 8013c64:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8013c68:	4650      	mov	r0, sl
 8013c6a:	4659      	mov	r1, fp
 8013c6c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8013c70:	f7ec fcda 	bl	8000628 <__aeabi_dmul>
 8013c74:	4682      	mov	sl, r0
 8013c76:	468b      	mov	fp, r1
 8013c78:	2900      	cmp	r1, #0
 8013c7a:	f47f adbe 	bne.w	80137fa <_strtod_l+0x452>
 8013c7e:	2800      	cmp	r0, #0
 8013c80:	f47f adbb 	bne.w	80137fa <_strtod_l+0x452>
 8013c84:	2322      	movs	r3, #34	; 0x22
 8013c86:	f8c9 3000 	str.w	r3, [r9]
 8013c8a:	e5b6      	b.n	80137fa <_strtod_l+0x452>
 8013c8c:	4013      	ands	r3, r2
 8013c8e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8013c92:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8013c96:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8013c9a:	f04f 3aff 	mov.w	sl, #4294967295
 8013c9e:	e76a      	b.n	8013b76 <_strtod_l+0x7ce>
 8013ca0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013ca2:	b193      	cbz	r3, 8013cca <_strtod_l+0x922>
 8013ca4:	422b      	tst	r3, r5
 8013ca6:	f43f af66 	beq.w	8013b76 <_strtod_l+0x7ce>
 8013caa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013cac:	9a04      	ldr	r2, [sp, #16]
 8013cae:	4650      	mov	r0, sl
 8013cb0:	4659      	mov	r1, fp
 8013cb2:	b173      	cbz	r3, 8013cd2 <_strtod_l+0x92a>
 8013cb4:	f7ff fb5b 	bl	801336e <sulp>
 8013cb8:	4602      	mov	r2, r0
 8013cba:	460b      	mov	r3, r1
 8013cbc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013cc0:	f7ec fafc 	bl	80002bc <__adddf3>
 8013cc4:	4682      	mov	sl, r0
 8013cc6:	468b      	mov	fp, r1
 8013cc8:	e755      	b.n	8013b76 <_strtod_l+0x7ce>
 8013cca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013ccc:	ea13 0f0a 	tst.w	r3, sl
 8013cd0:	e7e9      	b.n	8013ca6 <_strtod_l+0x8fe>
 8013cd2:	f7ff fb4c 	bl	801336e <sulp>
 8013cd6:	4602      	mov	r2, r0
 8013cd8:	460b      	mov	r3, r1
 8013cda:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013cde:	f7ec faeb 	bl	80002b8 <__aeabi_dsub>
 8013ce2:	2200      	movs	r2, #0
 8013ce4:	2300      	movs	r3, #0
 8013ce6:	4682      	mov	sl, r0
 8013ce8:	468b      	mov	fp, r1
 8013cea:	f7ec ff05 	bl	8000af8 <__aeabi_dcmpeq>
 8013cee:	2800      	cmp	r0, #0
 8013cf0:	f47f ae11 	bne.w	8013916 <_strtod_l+0x56e>
 8013cf4:	e73f      	b.n	8013b76 <_strtod_l+0x7ce>
 8013cf6:	4641      	mov	r1, r8
 8013cf8:	4620      	mov	r0, r4
 8013cfa:	f002 fa1a 	bl	8016132 <__ratio>
 8013cfe:	ec57 6b10 	vmov	r6, r7, d0
 8013d02:	2200      	movs	r2, #0
 8013d04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013d08:	ee10 0a10 	vmov	r0, s0
 8013d0c:	4639      	mov	r1, r7
 8013d0e:	f7ec ff07 	bl	8000b20 <__aeabi_dcmple>
 8013d12:	2800      	cmp	r0, #0
 8013d14:	d077      	beq.n	8013e06 <_strtod_l+0xa5e>
 8013d16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	d04a      	beq.n	8013db2 <_strtod_l+0xa0a>
 8013d1c:	4b68      	ldr	r3, [pc, #416]	; (8013ec0 <_strtod_l+0xb18>)
 8013d1e:	2200      	movs	r2, #0
 8013d20:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8013d24:	4f66      	ldr	r7, [pc, #408]	; (8013ec0 <_strtod_l+0xb18>)
 8013d26:	2600      	movs	r6, #0
 8013d28:	4b62      	ldr	r3, [pc, #392]	; (8013eb4 <_strtod_l+0xb0c>)
 8013d2a:	402b      	ands	r3, r5
 8013d2c:	930f      	str	r3, [sp, #60]	; 0x3c
 8013d2e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013d30:	4b64      	ldr	r3, [pc, #400]	; (8013ec4 <_strtod_l+0xb1c>)
 8013d32:	429a      	cmp	r2, r3
 8013d34:	f040 80ce 	bne.w	8013ed4 <_strtod_l+0xb2c>
 8013d38:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013d3c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013d40:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8013d44:	ec4b ab10 	vmov	d0, sl, fp
 8013d48:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8013d4c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8013d50:	f002 f92a 	bl	8015fa8 <__ulp>
 8013d54:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013d58:	ec53 2b10 	vmov	r2, r3, d0
 8013d5c:	f7ec fc64 	bl	8000628 <__aeabi_dmul>
 8013d60:	4652      	mov	r2, sl
 8013d62:	465b      	mov	r3, fp
 8013d64:	f7ec faaa 	bl	80002bc <__adddf3>
 8013d68:	460b      	mov	r3, r1
 8013d6a:	4952      	ldr	r1, [pc, #328]	; (8013eb4 <_strtod_l+0xb0c>)
 8013d6c:	4a56      	ldr	r2, [pc, #344]	; (8013ec8 <_strtod_l+0xb20>)
 8013d6e:	4019      	ands	r1, r3
 8013d70:	4291      	cmp	r1, r2
 8013d72:	4682      	mov	sl, r0
 8013d74:	d95b      	bls.n	8013e2e <_strtod_l+0xa86>
 8013d76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d78:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8013d7c:	4293      	cmp	r3, r2
 8013d7e:	d103      	bne.n	8013d88 <_strtod_l+0x9e0>
 8013d80:	9b08      	ldr	r3, [sp, #32]
 8013d82:	3301      	adds	r3, #1
 8013d84:	f43f ad2e 	beq.w	80137e4 <_strtod_l+0x43c>
 8013d88:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8013eb8 <_strtod_l+0xb10>
 8013d8c:	f04f 3aff 	mov.w	sl, #4294967295
 8013d90:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013d92:	4648      	mov	r0, r9
 8013d94:	f001 fe71 	bl	8015a7a <_Bfree>
 8013d98:	9905      	ldr	r1, [sp, #20]
 8013d9a:	4648      	mov	r0, r9
 8013d9c:	f001 fe6d 	bl	8015a7a <_Bfree>
 8013da0:	4641      	mov	r1, r8
 8013da2:	4648      	mov	r0, r9
 8013da4:	f001 fe69 	bl	8015a7a <_Bfree>
 8013da8:	4621      	mov	r1, r4
 8013daa:	4648      	mov	r0, r9
 8013dac:	f001 fe65 	bl	8015a7a <_Bfree>
 8013db0:	e619      	b.n	80139e6 <_strtod_l+0x63e>
 8013db2:	f1ba 0f00 	cmp.w	sl, #0
 8013db6:	d11a      	bne.n	8013dee <_strtod_l+0xa46>
 8013db8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013dbc:	b9eb      	cbnz	r3, 8013dfa <_strtod_l+0xa52>
 8013dbe:	2200      	movs	r2, #0
 8013dc0:	4b3f      	ldr	r3, [pc, #252]	; (8013ec0 <_strtod_l+0xb18>)
 8013dc2:	4630      	mov	r0, r6
 8013dc4:	4639      	mov	r1, r7
 8013dc6:	f7ec fea1 	bl	8000b0c <__aeabi_dcmplt>
 8013dca:	b9c8      	cbnz	r0, 8013e00 <_strtod_l+0xa58>
 8013dcc:	4630      	mov	r0, r6
 8013dce:	4639      	mov	r1, r7
 8013dd0:	2200      	movs	r2, #0
 8013dd2:	4b3e      	ldr	r3, [pc, #248]	; (8013ecc <_strtod_l+0xb24>)
 8013dd4:	f7ec fc28 	bl	8000628 <__aeabi_dmul>
 8013dd8:	4606      	mov	r6, r0
 8013dda:	460f      	mov	r7, r1
 8013ddc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8013de0:	9618      	str	r6, [sp, #96]	; 0x60
 8013de2:	9319      	str	r3, [sp, #100]	; 0x64
 8013de4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8013de8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8013dec:	e79c      	b.n	8013d28 <_strtod_l+0x980>
 8013dee:	f1ba 0f01 	cmp.w	sl, #1
 8013df2:	d102      	bne.n	8013dfa <_strtod_l+0xa52>
 8013df4:	2d00      	cmp	r5, #0
 8013df6:	f43f ad8e 	beq.w	8013916 <_strtod_l+0x56e>
 8013dfa:	2200      	movs	r2, #0
 8013dfc:	4b34      	ldr	r3, [pc, #208]	; (8013ed0 <_strtod_l+0xb28>)
 8013dfe:	e78f      	b.n	8013d20 <_strtod_l+0x978>
 8013e00:	2600      	movs	r6, #0
 8013e02:	4f32      	ldr	r7, [pc, #200]	; (8013ecc <_strtod_l+0xb24>)
 8013e04:	e7ea      	b.n	8013ddc <_strtod_l+0xa34>
 8013e06:	4b31      	ldr	r3, [pc, #196]	; (8013ecc <_strtod_l+0xb24>)
 8013e08:	4630      	mov	r0, r6
 8013e0a:	4639      	mov	r1, r7
 8013e0c:	2200      	movs	r2, #0
 8013e0e:	f7ec fc0b 	bl	8000628 <__aeabi_dmul>
 8013e12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013e14:	4606      	mov	r6, r0
 8013e16:	460f      	mov	r7, r1
 8013e18:	b933      	cbnz	r3, 8013e28 <_strtod_l+0xa80>
 8013e1a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013e1e:	9010      	str	r0, [sp, #64]	; 0x40
 8013e20:	9311      	str	r3, [sp, #68]	; 0x44
 8013e22:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8013e26:	e7df      	b.n	8013de8 <_strtod_l+0xa40>
 8013e28:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8013e2c:	e7f9      	b.n	8013e22 <_strtod_l+0xa7a>
 8013e2e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8013e32:	9b04      	ldr	r3, [sp, #16]
 8013e34:	2b00      	cmp	r3, #0
 8013e36:	d1ab      	bne.n	8013d90 <_strtod_l+0x9e8>
 8013e38:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013e3c:	0d1b      	lsrs	r3, r3, #20
 8013e3e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013e40:	051b      	lsls	r3, r3, #20
 8013e42:	429a      	cmp	r2, r3
 8013e44:	465d      	mov	r5, fp
 8013e46:	d1a3      	bne.n	8013d90 <_strtod_l+0x9e8>
 8013e48:	4639      	mov	r1, r7
 8013e4a:	4630      	mov	r0, r6
 8013e4c:	f7ec fe9c 	bl	8000b88 <__aeabi_d2iz>
 8013e50:	f7ec fb80 	bl	8000554 <__aeabi_i2d>
 8013e54:	460b      	mov	r3, r1
 8013e56:	4602      	mov	r2, r0
 8013e58:	4639      	mov	r1, r7
 8013e5a:	4630      	mov	r0, r6
 8013e5c:	f7ec fa2c 	bl	80002b8 <__aeabi_dsub>
 8013e60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013e62:	4606      	mov	r6, r0
 8013e64:	460f      	mov	r7, r1
 8013e66:	b933      	cbnz	r3, 8013e76 <_strtod_l+0xace>
 8013e68:	f1ba 0f00 	cmp.w	sl, #0
 8013e6c:	d103      	bne.n	8013e76 <_strtod_l+0xace>
 8013e6e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8013e72:	2d00      	cmp	r5, #0
 8013e74:	d06d      	beq.n	8013f52 <_strtod_l+0xbaa>
 8013e76:	a30a      	add	r3, pc, #40	; (adr r3, 8013ea0 <_strtod_l+0xaf8>)
 8013e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e7c:	4630      	mov	r0, r6
 8013e7e:	4639      	mov	r1, r7
 8013e80:	f7ec fe44 	bl	8000b0c <__aeabi_dcmplt>
 8013e84:	2800      	cmp	r0, #0
 8013e86:	f47f acb8 	bne.w	80137fa <_strtod_l+0x452>
 8013e8a:	a307      	add	r3, pc, #28	; (adr r3, 8013ea8 <_strtod_l+0xb00>)
 8013e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e90:	4630      	mov	r0, r6
 8013e92:	4639      	mov	r1, r7
 8013e94:	f7ec fe58 	bl	8000b48 <__aeabi_dcmpgt>
 8013e98:	2800      	cmp	r0, #0
 8013e9a:	f43f af79 	beq.w	8013d90 <_strtod_l+0x9e8>
 8013e9e:	e4ac      	b.n	80137fa <_strtod_l+0x452>
 8013ea0:	94a03595 	.word	0x94a03595
 8013ea4:	3fdfffff 	.word	0x3fdfffff
 8013ea8:	35afe535 	.word	0x35afe535
 8013eac:	3fe00000 	.word	0x3fe00000
 8013eb0:	000fffff 	.word	0x000fffff
 8013eb4:	7ff00000 	.word	0x7ff00000
 8013eb8:	7fefffff 	.word	0x7fefffff
 8013ebc:	39500000 	.word	0x39500000
 8013ec0:	3ff00000 	.word	0x3ff00000
 8013ec4:	7fe00000 	.word	0x7fe00000
 8013ec8:	7c9fffff 	.word	0x7c9fffff
 8013ecc:	3fe00000 	.word	0x3fe00000
 8013ed0:	bff00000 	.word	0xbff00000
 8013ed4:	9b04      	ldr	r3, [sp, #16]
 8013ed6:	b333      	cbz	r3, 8013f26 <_strtod_l+0xb7e>
 8013ed8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013eda:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8013ede:	d822      	bhi.n	8013f26 <_strtod_l+0xb7e>
 8013ee0:	a327      	add	r3, pc, #156	; (adr r3, 8013f80 <_strtod_l+0xbd8>)
 8013ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ee6:	4630      	mov	r0, r6
 8013ee8:	4639      	mov	r1, r7
 8013eea:	f7ec fe19 	bl	8000b20 <__aeabi_dcmple>
 8013eee:	b1a0      	cbz	r0, 8013f1a <_strtod_l+0xb72>
 8013ef0:	4639      	mov	r1, r7
 8013ef2:	4630      	mov	r0, r6
 8013ef4:	f7ec fe70 	bl	8000bd8 <__aeabi_d2uiz>
 8013ef8:	2800      	cmp	r0, #0
 8013efa:	bf08      	it	eq
 8013efc:	2001      	moveq	r0, #1
 8013efe:	f7ec fb19 	bl	8000534 <__aeabi_ui2d>
 8013f02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013f04:	4606      	mov	r6, r0
 8013f06:	460f      	mov	r7, r1
 8013f08:	bb03      	cbnz	r3, 8013f4c <_strtod_l+0xba4>
 8013f0a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013f0e:	9012      	str	r0, [sp, #72]	; 0x48
 8013f10:	9313      	str	r3, [sp, #76]	; 0x4c
 8013f12:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8013f16:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8013f1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013f1c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013f1e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8013f22:	1a9b      	subs	r3, r3, r2
 8013f24:	930b      	str	r3, [sp, #44]	; 0x2c
 8013f26:	ed9d 0b08 	vldr	d0, [sp, #32]
 8013f2a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8013f2e:	f002 f83b 	bl	8015fa8 <__ulp>
 8013f32:	4650      	mov	r0, sl
 8013f34:	ec53 2b10 	vmov	r2, r3, d0
 8013f38:	4659      	mov	r1, fp
 8013f3a:	f7ec fb75 	bl	8000628 <__aeabi_dmul>
 8013f3e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013f42:	f7ec f9bb 	bl	80002bc <__adddf3>
 8013f46:	4682      	mov	sl, r0
 8013f48:	468b      	mov	fp, r1
 8013f4a:	e772      	b.n	8013e32 <_strtod_l+0xa8a>
 8013f4c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8013f50:	e7df      	b.n	8013f12 <_strtod_l+0xb6a>
 8013f52:	a30d      	add	r3, pc, #52	; (adr r3, 8013f88 <_strtod_l+0xbe0>)
 8013f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f58:	f7ec fdd8 	bl	8000b0c <__aeabi_dcmplt>
 8013f5c:	e79c      	b.n	8013e98 <_strtod_l+0xaf0>
 8013f5e:	2300      	movs	r3, #0
 8013f60:	930d      	str	r3, [sp, #52]	; 0x34
 8013f62:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8013f64:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013f66:	6013      	str	r3, [r2, #0]
 8013f68:	f7ff ba61 	b.w	801342e <_strtod_l+0x86>
 8013f6c:	2b65      	cmp	r3, #101	; 0x65
 8013f6e:	f04f 0200 	mov.w	r2, #0
 8013f72:	f43f ab4e 	beq.w	8013612 <_strtod_l+0x26a>
 8013f76:	2101      	movs	r1, #1
 8013f78:	4614      	mov	r4, r2
 8013f7a:	9104      	str	r1, [sp, #16]
 8013f7c:	f7ff bacb 	b.w	8013516 <_strtod_l+0x16e>
 8013f80:	ffc00000 	.word	0xffc00000
 8013f84:	41dfffff 	.word	0x41dfffff
 8013f88:	94a03595 	.word	0x94a03595
 8013f8c:	3fcfffff 	.word	0x3fcfffff

08013f90 <_strtod_r>:
 8013f90:	4b05      	ldr	r3, [pc, #20]	; (8013fa8 <_strtod_r+0x18>)
 8013f92:	681b      	ldr	r3, [r3, #0]
 8013f94:	b410      	push	{r4}
 8013f96:	6a1b      	ldr	r3, [r3, #32]
 8013f98:	4c04      	ldr	r4, [pc, #16]	; (8013fac <_strtod_r+0x1c>)
 8013f9a:	2b00      	cmp	r3, #0
 8013f9c:	bf08      	it	eq
 8013f9e:	4623      	moveq	r3, r4
 8013fa0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013fa4:	f7ff ba00 	b.w	80133a8 <_strtod_l>
 8013fa8:	2000000c 	.word	0x2000000c
 8013fac:	20000070 	.word	0x20000070

08013fb0 <_strtol_l.isra.0>:
 8013fb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013fb4:	4680      	mov	r8, r0
 8013fb6:	4689      	mov	r9, r1
 8013fb8:	4692      	mov	sl, r2
 8013fba:	461e      	mov	r6, r3
 8013fbc:	460f      	mov	r7, r1
 8013fbe:	463d      	mov	r5, r7
 8013fc0:	9808      	ldr	r0, [sp, #32]
 8013fc2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013fc6:	f001 fc67 	bl	8015898 <__locale_ctype_ptr_l>
 8013fca:	4420      	add	r0, r4
 8013fcc:	7843      	ldrb	r3, [r0, #1]
 8013fce:	f013 0308 	ands.w	r3, r3, #8
 8013fd2:	d132      	bne.n	801403a <_strtol_l.isra.0+0x8a>
 8013fd4:	2c2d      	cmp	r4, #45	; 0x2d
 8013fd6:	d132      	bne.n	801403e <_strtol_l.isra.0+0x8e>
 8013fd8:	787c      	ldrb	r4, [r7, #1]
 8013fda:	1cbd      	adds	r5, r7, #2
 8013fdc:	2201      	movs	r2, #1
 8013fde:	2e00      	cmp	r6, #0
 8013fe0:	d05d      	beq.n	801409e <_strtol_l.isra.0+0xee>
 8013fe2:	2e10      	cmp	r6, #16
 8013fe4:	d109      	bne.n	8013ffa <_strtol_l.isra.0+0x4a>
 8013fe6:	2c30      	cmp	r4, #48	; 0x30
 8013fe8:	d107      	bne.n	8013ffa <_strtol_l.isra.0+0x4a>
 8013fea:	782b      	ldrb	r3, [r5, #0]
 8013fec:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8013ff0:	2b58      	cmp	r3, #88	; 0x58
 8013ff2:	d14f      	bne.n	8014094 <_strtol_l.isra.0+0xe4>
 8013ff4:	786c      	ldrb	r4, [r5, #1]
 8013ff6:	2610      	movs	r6, #16
 8013ff8:	3502      	adds	r5, #2
 8013ffa:	2a00      	cmp	r2, #0
 8013ffc:	bf14      	ite	ne
 8013ffe:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8014002:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8014006:	2700      	movs	r7, #0
 8014008:	fbb1 fcf6 	udiv	ip, r1, r6
 801400c:	4638      	mov	r0, r7
 801400e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8014012:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8014016:	2b09      	cmp	r3, #9
 8014018:	d817      	bhi.n	801404a <_strtol_l.isra.0+0x9a>
 801401a:	461c      	mov	r4, r3
 801401c:	42a6      	cmp	r6, r4
 801401e:	dd23      	ble.n	8014068 <_strtol_l.isra.0+0xb8>
 8014020:	1c7b      	adds	r3, r7, #1
 8014022:	d007      	beq.n	8014034 <_strtol_l.isra.0+0x84>
 8014024:	4584      	cmp	ip, r0
 8014026:	d31c      	bcc.n	8014062 <_strtol_l.isra.0+0xb2>
 8014028:	d101      	bne.n	801402e <_strtol_l.isra.0+0x7e>
 801402a:	45a6      	cmp	lr, r4
 801402c:	db19      	blt.n	8014062 <_strtol_l.isra.0+0xb2>
 801402e:	fb00 4006 	mla	r0, r0, r6, r4
 8014032:	2701      	movs	r7, #1
 8014034:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014038:	e7eb      	b.n	8014012 <_strtol_l.isra.0+0x62>
 801403a:	462f      	mov	r7, r5
 801403c:	e7bf      	b.n	8013fbe <_strtol_l.isra.0+0xe>
 801403e:	2c2b      	cmp	r4, #43	; 0x2b
 8014040:	bf04      	itt	eq
 8014042:	1cbd      	addeq	r5, r7, #2
 8014044:	787c      	ldrbeq	r4, [r7, #1]
 8014046:	461a      	mov	r2, r3
 8014048:	e7c9      	b.n	8013fde <_strtol_l.isra.0+0x2e>
 801404a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 801404e:	2b19      	cmp	r3, #25
 8014050:	d801      	bhi.n	8014056 <_strtol_l.isra.0+0xa6>
 8014052:	3c37      	subs	r4, #55	; 0x37
 8014054:	e7e2      	b.n	801401c <_strtol_l.isra.0+0x6c>
 8014056:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 801405a:	2b19      	cmp	r3, #25
 801405c:	d804      	bhi.n	8014068 <_strtol_l.isra.0+0xb8>
 801405e:	3c57      	subs	r4, #87	; 0x57
 8014060:	e7dc      	b.n	801401c <_strtol_l.isra.0+0x6c>
 8014062:	f04f 37ff 	mov.w	r7, #4294967295
 8014066:	e7e5      	b.n	8014034 <_strtol_l.isra.0+0x84>
 8014068:	1c7b      	adds	r3, r7, #1
 801406a:	d108      	bne.n	801407e <_strtol_l.isra.0+0xce>
 801406c:	2322      	movs	r3, #34	; 0x22
 801406e:	f8c8 3000 	str.w	r3, [r8]
 8014072:	4608      	mov	r0, r1
 8014074:	f1ba 0f00 	cmp.w	sl, #0
 8014078:	d107      	bne.n	801408a <_strtol_l.isra.0+0xda>
 801407a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801407e:	b102      	cbz	r2, 8014082 <_strtol_l.isra.0+0xd2>
 8014080:	4240      	negs	r0, r0
 8014082:	f1ba 0f00 	cmp.w	sl, #0
 8014086:	d0f8      	beq.n	801407a <_strtol_l.isra.0+0xca>
 8014088:	b10f      	cbz	r7, 801408e <_strtol_l.isra.0+0xde>
 801408a:	f105 39ff 	add.w	r9, r5, #4294967295
 801408e:	f8ca 9000 	str.w	r9, [sl]
 8014092:	e7f2      	b.n	801407a <_strtol_l.isra.0+0xca>
 8014094:	2430      	movs	r4, #48	; 0x30
 8014096:	2e00      	cmp	r6, #0
 8014098:	d1af      	bne.n	8013ffa <_strtol_l.isra.0+0x4a>
 801409a:	2608      	movs	r6, #8
 801409c:	e7ad      	b.n	8013ffa <_strtol_l.isra.0+0x4a>
 801409e:	2c30      	cmp	r4, #48	; 0x30
 80140a0:	d0a3      	beq.n	8013fea <_strtol_l.isra.0+0x3a>
 80140a2:	260a      	movs	r6, #10
 80140a4:	e7a9      	b.n	8013ffa <_strtol_l.isra.0+0x4a>
	...

080140a8 <_strtol_r>:
 80140a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80140aa:	4c06      	ldr	r4, [pc, #24]	; (80140c4 <_strtol_r+0x1c>)
 80140ac:	4d06      	ldr	r5, [pc, #24]	; (80140c8 <_strtol_r+0x20>)
 80140ae:	6824      	ldr	r4, [r4, #0]
 80140b0:	6a24      	ldr	r4, [r4, #32]
 80140b2:	2c00      	cmp	r4, #0
 80140b4:	bf08      	it	eq
 80140b6:	462c      	moveq	r4, r5
 80140b8:	9400      	str	r4, [sp, #0]
 80140ba:	f7ff ff79 	bl	8013fb0 <_strtol_l.isra.0>
 80140be:	b003      	add	sp, #12
 80140c0:	bd30      	pop	{r4, r5, pc}
 80140c2:	bf00      	nop
 80140c4:	2000000c 	.word	0x2000000c
 80140c8:	20000070 	.word	0x20000070

080140cc <_vsiprintf_r>:
 80140cc:	b500      	push	{lr}
 80140ce:	b09b      	sub	sp, #108	; 0x6c
 80140d0:	9100      	str	r1, [sp, #0]
 80140d2:	9104      	str	r1, [sp, #16]
 80140d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80140d8:	9105      	str	r1, [sp, #20]
 80140da:	9102      	str	r1, [sp, #8]
 80140dc:	4905      	ldr	r1, [pc, #20]	; (80140f4 <_vsiprintf_r+0x28>)
 80140de:	9103      	str	r1, [sp, #12]
 80140e0:	4669      	mov	r1, sp
 80140e2:	f002 f9a5 	bl	8016430 <_svfiprintf_r>
 80140e6:	9b00      	ldr	r3, [sp, #0]
 80140e8:	2200      	movs	r2, #0
 80140ea:	701a      	strb	r2, [r3, #0]
 80140ec:	b01b      	add	sp, #108	; 0x6c
 80140ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80140f2:	bf00      	nop
 80140f4:	ffff0208 	.word	0xffff0208

080140f8 <vsiprintf>:
 80140f8:	4613      	mov	r3, r2
 80140fa:	460a      	mov	r2, r1
 80140fc:	4601      	mov	r1, r0
 80140fe:	4802      	ldr	r0, [pc, #8]	; (8014108 <vsiprintf+0x10>)
 8014100:	6800      	ldr	r0, [r0, #0]
 8014102:	f7ff bfe3 	b.w	80140cc <_vsiprintf_r>
 8014106:	bf00      	nop
 8014108:	2000000c 	.word	0x2000000c

0801410c <__swbuf_r>:
 801410c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801410e:	460e      	mov	r6, r1
 8014110:	4614      	mov	r4, r2
 8014112:	4605      	mov	r5, r0
 8014114:	b118      	cbz	r0, 801411e <__swbuf_r+0x12>
 8014116:	6983      	ldr	r3, [r0, #24]
 8014118:	b90b      	cbnz	r3, 801411e <__swbuf_r+0x12>
 801411a:	f001 f80d 	bl	8015138 <__sinit>
 801411e:	4b21      	ldr	r3, [pc, #132]	; (80141a4 <__swbuf_r+0x98>)
 8014120:	429c      	cmp	r4, r3
 8014122:	d12a      	bne.n	801417a <__swbuf_r+0x6e>
 8014124:	686c      	ldr	r4, [r5, #4]
 8014126:	69a3      	ldr	r3, [r4, #24]
 8014128:	60a3      	str	r3, [r4, #8]
 801412a:	89a3      	ldrh	r3, [r4, #12]
 801412c:	071a      	lsls	r2, r3, #28
 801412e:	d52e      	bpl.n	801418e <__swbuf_r+0x82>
 8014130:	6923      	ldr	r3, [r4, #16]
 8014132:	b363      	cbz	r3, 801418e <__swbuf_r+0x82>
 8014134:	6923      	ldr	r3, [r4, #16]
 8014136:	6820      	ldr	r0, [r4, #0]
 8014138:	1ac0      	subs	r0, r0, r3
 801413a:	6963      	ldr	r3, [r4, #20]
 801413c:	b2f6      	uxtb	r6, r6
 801413e:	4283      	cmp	r3, r0
 8014140:	4637      	mov	r7, r6
 8014142:	dc04      	bgt.n	801414e <__swbuf_r+0x42>
 8014144:	4621      	mov	r1, r4
 8014146:	4628      	mov	r0, r5
 8014148:	f000 ff8c 	bl	8015064 <_fflush_r>
 801414c:	bb28      	cbnz	r0, 801419a <__swbuf_r+0x8e>
 801414e:	68a3      	ldr	r3, [r4, #8]
 8014150:	3b01      	subs	r3, #1
 8014152:	60a3      	str	r3, [r4, #8]
 8014154:	6823      	ldr	r3, [r4, #0]
 8014156:	1c5a      	adds	r2, r3, #1
 8014158:	6022      	str	r2, [r4, #0]
 801415a:	701e      	strb	r6, [r3, #0]
 801415c:	6963      	ldr	r3, [r4, #20]
 801415e:	3001      	adds	r0, #1
 8014160:	4283      	cmp	r3, r0
 8014162:	d004      	beq.n	801416e <__swbuf_r+0x62>
 8014164:	89a3      	ldrh	r3, [r4, #12]
 8014166:	07db      	lsls	r3, r3, #31
 8014168:	d519      	bpl.n	801419e <__swbuf_r+0x92>
 801416a:	2e0a      	cmp	r6, #10
 801416c:	d117      	bne.n	801419e <__swbuf_r+0x92>
 801416e:	4621      	mov	r1, r4
 8014170:	4628      	mov	r0, r5
 8014172:	f000 ff77 	bl	8015064 <_fflush_r>
 8014176:	b190      	cbz	r0, 801419e <__swbuf_r+0x92>
 8014178:	e00f      	b.n	801419a <__swbuf_r+0x8e>
 801417a:	4b0b      	ldr	r3, [pc, #44]	; (80141a8 <__swbuf_r+0x9c>)
 801417c:	429c      	cmp	r4, r3
 801417e:	d101      	bne.n	8014184 <__swbuf_r+0x78>
 8014180:	68ac      	ldr	r4, [r5, #8]
 8014182:	e7d0      	b.n	8014126 <__swbuf_r+0x1a>
 8014184:	4b09      	ldr	r3, [pc, #36]	; (80141ac <__swbuf_r+0xa0>)
 8014186:	429c      	cmp	r4, r3
 8014188:	bf08      	it	eq
 801418a:	68ec      	ldreq	r4, [r5, #12]
 801418c:	e7cb      	b.n	8014126 <__swbuf_r+0x1a>
 801418e:	4621      	mov	r1, r4
 8014190:	4628      	mov	r0, r5
 8014192:	f000 f81f 	bl	80141d4 <__swsetup_r>
 8014196:	2800      	cmp	r0, #0
 8014198:	d0cc      	beq.n	8014134 <__swbuf_r+0x28>
 801419a:	f04f 37ff 	mov.w	r7, #4294967295
 801419e:	4638      	mov	r0, r7
 80141a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80141a2:	bf00      	nop
 80141a4:	08017b90 	.word	0x08017b90
 80141a8:	08017bb0 	.word	0x08017bb0
 80141ac:	08017b70 	.word	0x08017b70

080141b0 <_write_r>:
 80141b0:	b538      	push	{r3, r4, r5, lr}
 80141b2:	4c07      	ldr	r4, [pc, #28]	; (80141d0 <_write_r+0x20>)
 80141b4:	4605      	mov	r5, r0
 80141b6:	4608      	mov	r0, r1
 80141b8:	4611      	mov	r1, r2
 80141ba:	2200      	movs	r2, #0
 80141bc:	6022      	str	r2, [r4, #0]
 80141be:	461a      	mov	r2, r3
 80141c0:	f7ef fb4d 	bl	800385e <_write>
 80141c4:	1c43      	adds	r3, r0, #1
 80141c6:	d102      	bne.n	80141ce <_write_r+0x1e>
 80141c8:	6823      	ldr	r3, [r4, #0]
 80141ca:	b103      	cbz	r3, 80141ce <_write_r+0x1e>
 80141cc:	602b      	str	r3, [r5, #0]
 80141ce:	bd38      	pop	{r3, r4, r5, pc}
 80141d0:	20023e00 	.word	0x20023e00

080141d4 <__swsetup_r>:
 80141d4:	4b32      	ldr	r3, [pc, #200]	; (80142a0 <__swsetup_r+0xcc>)
 80141d6:	b570      	push	{r4, r5, r6, lr}
 80141d8:	681d      	ldr	r5, [r3, #0]
 80141da:	4606      	mov	r6, r0
 80141dc:	460c      	mov	r4, r1
 80141de:	b125      	cbz	r5, 80141ea <__swsetup_r+0x16>
 80141e0:	69ab      	ldr	r3, [r5, #24]
 80141e2:	b913      	cbnz	r3, 80141ea <__swsetup_r+0x16>
 80141e4:	4628      	mov	r0, r5
 80141e6:	f000 ffa7 	bl	8015138 <__sinit>
 80141ea:	4b2e      	ldr	r3, [pc, #184]	; (80142a4 <__swsetup_r+0xd0>)
 80141ec:	429c      	cmp	r4, r3
 80141ee:	d10f      	bne.n	8014210 <__swsetup_r+0x3c>
 80141f0:	686c      	ldr	r4, [r5, #4]
 80141f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80141f6:	b29a      	uxth	r2, r3
 80141f8:	0715      	lsls	r5, r2, #28
 80141fa:	d42c      	bmi.n	8014256 <__swsetup_r+0x82>
 80141fc:	06d0      	lsls	r0, r2, #27
 80141fe:	d411      	bmi.n	8014224 <__swsetup_r+0x50>
 8014200:	2209      	movs	r2, #9
 8014202:	6032      	str	r2, [r6, #0]
 8014204:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014208:	81a3      	strh	r3, [r4, #12]
 801420a:	f04f 30ff 	mov.w	r0, #4294967295
 801420e:	e03e      	b.n	801428e <__swsetup_r+0xba>
 8014210:	4b25      	ldr	r3, [pc, #148]	; (80142a8 <__swsetup_r+0xd4>)
 8014212:	429c      	cmp	r4, r3
 8014214:	d101      	bne.n	801421a <__swsetup_r+0x46>
 8014216:	68ac      	ldr	r4, [r5, #8]
 8014218:	e7eb      	b.n	80141f2 <__swsetup_r+0x1e>
 801421a:	4b24      	ldr	r3, [pc, #144]	; (80142ac <__swsetup_r+0xd8>)
 801421c:	429c      	cmp	r4, r3
 801421e:	bf08      	it	eq
 8014220:	68ec      	ldreq	r4, [r5, #12]
 8014222:	e7e6      	b.n	80141f2 <__swsetup_r+0x1e>
 8014224:	0751      	lsls	r1, r2, #29
 8014226:	d512      	bpl.n	801424e <__swsetup_r+0x7a>
 8014228:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801422a:	b141      	cbz	r1, 801423e <__swsetup_r+0x6a>
 801422c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014230:	4299      	cmp	r1, r3
 8014232:	d002      	beq.n	801423a <__swsetup_r+0x66>
 8014234:	4630      	mov	r0, r6
 8014236:	f001 fff9 	bl	801622c <_free_r>
 801423a:	2300      	movs	r3, #0
 801423c:	6363      	str	r3, [r4, #52]	; 0x34
 801423e:	89a3      	ldrh	r3, [r4, #12]
 8014240:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014244:	81a3      	strh	r3, [r4, #12]
 8014246:	2300      	movs	r3, #0
 8014248:	6063      	str	r3, [r4, #4]
 801424a:	6923      	ldr	r3, [r4, #16]
 801424c:	6023      	str	r3, [r4, #0]
 801424e:	89a3      	ldrh	r3, [r4, #12]
 8014250:	f043 0308 	orr.w	r3, r3, #8
 8014254:	81a3      	strh	r3, [r4, #12]
 8014256:	6923      	ldr	r3, [r4, #16]
 8014258:	b94b      	cbnz	r3, 801426e <__swsetup_r+0x9a>
 801425a:	89a3      	ldrh	r3, [r4, #12]
 801425c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014260:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014264:	d003      	beq.n	801426e <__swsetup_r+0x9a>
 8014266:	4621      	mov	r1, r4
 8014268:	4630      	mov	r0, r6
 801426a:	f001 fb6d 	bl	8015948 <__smakebuf_r>
 801426e:	89a2      	ldrh	r2, [r4, #12]
 8014270:	f012 0301 	ands.w	r3, r2, #1
 8014274:	d00c      	beq.n	8014290 <__swsetup_r+0xbc>
 8014276:	2300      	movs	r3, #0
 8014278:	60a3      	str	r3, [r4, #8]
 801427a:	6963      	ldr	r3, [r4, #20]
 801427c:	425b      	negs	r3, r3
 801427e:	61a3      	str	r3, [r4, #24]
 8014280:	6923      	ldr	r3, [r4, #16]
 8014282:	b953      	cbnz	r3, 801429a <__swsetup_r+0xc6>
 8014284:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014288:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801428c:	d1ba      	bne.n	8014204 <__swsetup_r+0x30>
 801428e:	bd70      	pop	{r4, r5, r6, pc}
 8014290:	0792      	lsls	r2, r2, #30
 8014292:	bf58      	it	pl
 8014294:	6963      	ldrpl	r3, [r4, #20]
 8014296:	60a3      	str	r3, [r4, #8]
 8014298:	e7f2      	b.n	8014280 <__swsetup_r+0xac>
 801429a:	2000      	movs	r0, #0
 801429c:	e7f7      	b.n	801428e <__swsetup_r+0xba>
 801429e:	bf00      	nop
 80142a0:	2000000c 	.word	0x2000000c
 80142a4:	08017b90 	.word	0x08017b90
 80142a8:	08017bb0 	.word	0x08017bb0
 80142ac:	08017b70 	.word	0x08017b70

080142b0 <_close_r>:
 80142b0:	b538      	push	{r3, r4, r5, lr}
 80142b2:	4c06      	ldr	r4, [pc, #24]	; (80142cc <_close_r+0x1c>)
 80142b4:	2300      	movs	r3, #0
 80142b6:	4605      	mov	r5, r0
 80142b8:	4608      	mov	r0, r1
 80142ba:	6023      	str	r3, [r4, #0]
 80142bc:	f7f1 f82d 	bl	800531a <_close>
 80142c0:	1c43      	adds	r3, r0, #1
 80142c2:	d102      	bne.n	80142ca <_close_r+0x1a>
 80142c4:	6823      	ldr	r3, [r4, #0]
 80142c6:	b103      	cbz	r3, 80142ca <_close_r+0x1a>
 80142c8:	602b      	str	r3, [r5, #0]
 80142ca:	bd38      	pop	{r3, r4, r5, pc}
 80142cc:	20023e00 	.word	0x20023e00

080142d0 <quorem>:
 80142d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142d4:	6903      	ldr	r3, [r0, #16]
 80142d6:	690c      	ldr	r4, [r1, #16]
 80142d8:	42a3      	cmp	r3, r4
 80142da:	4680      	mov	r8, r0
 80142dc:	f2c0 8082 	blt.w	80143e4 <quorem+0x114>
 80142e0:	3c01      	subs	r4, #1
 80142e2:	f101 0714 	add.w	r7, r1, #20
 80142e6:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80142ea:	f100 0614 	add.w	r6, r0, #20
 80142ee:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80142f2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80142f6:	eb06 030c 	add.w	r3, r6, ip
 80142fa:	3501      	adds	r5, #1
 80142fc:	eb07 090c 	add.w	r9, r7, ip
 8014300:	9301      	str	r3, [sp, #4]
 8014302:	fbb0 f5f5 	udiv	r5, r0, r5
 8014306:	b395      	cbz	r5, 801436e <quorem+0x9e>
 8014308:	f04f 0a00 	mov.w	sl, #0
 801430c:	4638      	mov	r0, r7
 801430e:	46b6      	mov	lr, r6
 8014310:	46d3      	mov	fp, sl
 8014312:	f850 2b04 	ldr.w	r2, [r0], #4
 8014316:	b293      	uxth	r3, r2
 8014318:	fb05 a303 	mla	r3, r5, r3, sl
 801431c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014320:	b29b      	uxth	r3, r3
 8014322:	ebab 0303 	sub.w	r3, fp, r3
 8014326:	0c12      	lsrs	r2, r2, #16
 8014328:	f8de b000 	ldr.w	fp, [lr]
 801432c:	fb05 a202 	mla	r2, r5, r2, sl
 8014330:	fa13 f38b 	uxtah	r3, r3, fp
 8014334:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8014338:	fa1f fb82 	uxth.w	fp, r2
 801433c:	f8de 2000 	ldr.w	r2, [lr]
 8014340:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8014344:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014348:	b29b      	uxth	r3, r3
 801434a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801434e:	4581      	cmp	r9, r0
 8014350:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8014354:	f84e 3b04 	str.w	r3, [lr], #4
 8014358:	d2db      	bcs.n	8014312 <quorem+0x42>
 801435a:	f856 300c 	ldr.w	r3, [r6, ip]
 801435e:	b933      	cbnz	r3, 801436e <quorem+0x9e>
 8014360:	9b01      	ldr	r3, [sp, #4]
 8014362:	3b04      	subs	r3, #4
 8014364:	429e      	cmp	r6, r3
 8014366:	461a      	mov	r2, r3
 8014368:	d330      	bcc.n	80143cc <quorem+0xfc>
 801436a:	f8c8 4010 	str.w	r4, [r8, #16]
 801436e:	4640      	mov	r0, r8
 8014370:	f001 fda2 	bl	8015eb8 <__mcmp>
 8014374:	2800      	cmp	r0, #0
 8014376:	db25      	blt.n	80143c4 <quorem+0xf4>
 8014378:	3501      	adds	r5, #1
 801437a:	4630      	mov	r0, r6
 801437c:	f04f 0c00 	mov.w	ip, #0
 8014380:	f857 2b04 	ldr.w	r2, [r7], #4
 8014384:	f8d0 e000 	ldr.w	lr, [r0]
 8014388:	b293      	uxth	r3, r2
 801438a:	ebac 0303 	sub.w	r3, ip, r3
 801438e:	0c12      	lsrs	r2, r2, #16
 8014390:	fa13 f38e 	uxtah	r3, r3, lr
 8014394:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8014398:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801439c:	b29b      	uxth	r3, r3
 801439e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80143a2:	45b9      	cmp	r9, r7
 80143a4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80143a8:	f840 3b04 	str.w	r3, [r0], #4
 80143ac:	d2e8      	bcs.n	8014380 <quorem+0xb0>
 80143ae:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80143b2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80143b6:	b92a      	cbnz	r2, 80143c4 <quorem+0xf4>
 80143b8:	3b04      	subs	r3, #4
 80143ba:	429e      	cmp	r6, r3
 80143bc:	461a      	mov	r2, r3
 80143be:	d30b      	bcc.n	80143d8 <quorem+0x108>
 80143c0:	f8c8 4010 	str.w	r4, [r8, #16]
 80143c4:	4628      	mov	r0, r5
 80143c6:	b003      	add	sp, #12
 80143c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80143cc:	6812      	ldr	r2, [r2, #0]
 80143ce:	3b04      	subs	r3, #4
 80143d0:	2a00      	cmp	r2, #0
 80143d2:	d1ca      	bne.n	801436a <quorem+0x9a>
 80143d4:	3c01      	subs	r4, #1
 80143d6:	e7c5      	b.n	8014364 <quorem+0x94>
 80143d8:	6812      	ldr	r2, [r2, #0]
 80143da:	3b04      	subs	r3, #4
 80143dc:	2a00      	cmp	r2, #0
 80143de:	d1ef      	bne.n	80143c0 <quorem+0xf0>
 80143e0:	3c01      	subs	r4, #1
 80143e2:	e7ea      	b.n	80143ba <quorem+0xea>
 80143e4:	2000      	movs	r0, #0
 80143e6:	e7ee      	b.n	80143c6 <quorem+0xf6>

080143e8 <_dtoa_r>:
 80143e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143ec:	ec57 6b10 	vmov	r6, r7, d0
 80143f0:	b097      	sub	sp, #92	; 0x5c
 80143f2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80143f4:	9106      	str	r1, [sp, #24]
 80143f6:	4604      	mov	r4, r0
 80143f8:	920b      	str	r2, [sp, #44]	; 0x2c
 80143fa:	9312      	str	r3, [sp, #72]	; 0x48
 80143fc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8014400:	e9cd 6700 	strd	r6, r7, [sp]
 8014404:	b93d      	cbnz	r5, 8014416 <_dtoa_r+0x2e>
 8014406:	2010      	movs	r0, #16
 8014408:	f001 fade 	bl	80159c8 <malloc>
 801440c:	6260      	str	r0, [r4, #36]	; 0x24
 801440e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8014412:	6005      	str	r5, [r0, #0]
 8014414:	60c5      	str	r5, [r0, #12]
 8014416:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014418:	6819      	ldr	r1, [r3, #0]
 801441a:	b151      	cbz	r1, 8014432 <_dtoa_r+0x4a>
 801441c:	685a      	ldr	r2, [r3, #4]
 801441e:	604a      	str	r2, [r1, #4]
 8014420:	2301      	movs	r3, #1
 8014422:	4093      	lsls	r3, r2
 8014424:	608b      	str	r3, [r1, #8]
 8014426:	4620      	mov	r0, r4
 8014428:	f001 fb27 	bl	8015a7a <_Bfree>
 801442c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801442e:	2200      	movs	r2, #0
 8014430:	601a      	str	r2, [r3, #0]
 8014432:	1e3b      	subs	r3, r7, #0
 8014434:	bfbb      	ittet	lt
 8014436:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801443a:	9301      	strlt	r3, [sp, #4]
 801443c:	2300      	movge	r3, #0
 801443e:	2201      	movlt	r2, #1
 8014440:	bfac      	ite	ge
 8014442:	f8c8 3000 	strge.w	r3, [r8]
 8014446:	f8c8 2000 	strlt.w	r2, [r8]
 801444a:	4baf      	ldr	r3, [pc, #700]	; (8014708 <_dtoa_r+0x320>)
 801444c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8014450:	ea33 0308 	bics.w	r3, r3, r8
 8014454:	d114      	bne.n	8014480 <_dtoa_r+0x98>
 8014456:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014458:	f242 730f 	movw	r3, #9999	; 0x270f
 801445c:	6013      	str	r3, [r2, #0]
 801445e:	9b00      	ldr	r3, [sp, #0]
 8014460:	b923      	cbnz	r3, 801446c <_dtoa_r+0x84>
 8014462:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8014466:	2800      	cmp	r0, #0
 8014468:	f000 8542 	beq.w	8014ef0 <_dtoa_r+0xb08>
 801446c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801446e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 801471c <_dtoa_r+0x334>
 8014472:	2b00      	cmp	r3, #0
 8014474:	f000 8544 	beq.w	8014f00 <_dtoa_r+0xb18>
 8014478:	f10b 0303 	add.w	r3, fp, #3
 801447c:	f000 bd3e 	b.w	8014efc <_dtoa_r+0xb14>
 8014480:	e9dd 6700 	ldrd	r6, r7, [sp]
 8014484:	2200      	movs	r2, #0
 8014486:	2300      	movs	r3, #0
 8014488:	4630      	mov	r0, r6
 801448a:	4639      	mov	r1, r7
 801448c:	f7ec fb34 	bl	8000af8 <__aeabi_dcmpeq>
 8014490:	4681      	mov	r9, r0
 8014492:	b168      	cbz	r0, 80144b0 <_dtoa_r+0xc8>
 8014494:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014496:	2301      	movs	r3, #1
 8014498:	6013      	str	r3, [r2, #0]
 801449a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801449c:	2b00      	cmp	r3, #0
 801449e:	f000 8524 	beq.w	8014eea <_dtoa_r+0xb02>
 80144a2:	4b9a      	ldr	r3, [pc, #616]	; (801470c <_dtoa_r+0x324>)
 80144a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80144a6:	f103 3bff 	add.w	fp, r3, #4294967295
 80144aa:	6013      	str	r3, [r2, #0]
 80144ac:	f000 bd28 	b.w	8014f00 <_dtoa_r+0xb18>
 80144b0:	aa14      	add	r2, sp, #80	; 0x50
 80144b2:	a915      	add	r1, sp, #84	; 0x54
 80144b4:	ec47 6b10 	vmov	d0, r6, r7
 80144b8:	4620      	mov	r0, r4
 80144ba:	f001 fdeb 	bl	8016094 <__d2b>
 80144be:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80144c2:	9004      	str	r0, [sp, #16]
 80144c4:	2d00      	cmp	r5, #0
 80144c6:	d07c      	beq.n	80145c2 <_dtoa_r+0x1da>
 80144c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80144cc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80144d0:	46b2      	mov	sl, r6
 80144d2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80144d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80144da:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80144de:	2200      	movs	r2, #0
 80144e0:	4b8b      	ldr	r3, [pc, #556]	; (8014710 <_dtoa_r+0x328>)
 80144e2:	4650      	mov	r0, sl
 80144e4:	4659      	mov	r1, fp
 80144e6:	f7eb fee7 	bl	80002b8 <__aeabi_dsub>
 80144ea:	a381      	add	r3, pc, #516	; (adr r3, 80146f0 <_dtoa_r+0x308>)
 80144ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144f0:	f7ec f89a 	bl	8000628 <__aeabi_dmul>
 80144f4:	a380      	add	r3, pc, #512	; (adr r3, 80146f8 <_dtoa_r+0x310>)
 80144f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144fa:	f7eb fedf 	bl	80002bc <__adddf3>
 80144fe:	4606      	mov	r6, r0
 8014500:	4628      	mov	r0, r5
 8014502:	460f      	mov	r7, r1
 8014504:	f7ec f826 	bl	8000554 <__aeabi_i2d>
 8014508:	a37d      	add	r3, pc, #500	; (adr r3, 8014700 <_dtoa_r+0x318>)
 801450a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801450e:	f7ec f88b 	bl	8000628 <__aeabi_dmul>
 8014512:	4602      	mov	r2, r0
 8014514:	460b      	mov	r3, r1
 8014516:	4630      	mov	r0, r6
 8014518:	4639      	mov	r1, r7
 801451a:	f7eb fecf 	bl	80002bc <__adddf3>
 801451e:	4606      	mov	r6, r0
 8014520:	460f      	mov	r7, r1
 8014522:	f7ec fb31 	bl	8000b88 <__aeabi_d2iz>
 8014526:	2200      	movs	r2, #0
 8014528:	4682      	mov	sl, r0
 801452a:	2300      	movs	r3, #0
 801452c:	4630      	mov	r0, r6
 801452e:	4639      	mov	r1, r7
 8014530:	f7ec faec 	bl	8000b0c <__aeabi_dcmplt>
 8014534:	b148      	cbz	r0, 801454a <_dtoa_r+0x162>
 8014536:	4650      	mov	r0, sl
 8014538:	f7ec f80c 	bl	8000554 <__aeabi_i2d>
 801453c:	4632      	mov	r2, r6
 801453e:	463b      	mov	r3, r7
 8014540:	f7ec fada 	bl	8000af8 <__aeabi_dcmpeq>
 8014544:	b908      	cbnz	r0, 801454a <_dtoa_r+0x162>
 8014546:	f10a 3aff 	add.w	sl, sl, #4294967295
 801454a:	f1ba 0f16 	cmp.w	sl, #22
 801454e:	d859      	bhi.n	8014604 <_dtoa_r+0x21c>
 8014550:	4970      	ldr	r1, [pc, #448]	; (8014714 <_dtoa_r+0x32c>)
 8014552:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8014556:	e9dd 2300 	ldrd	r2, r3, [sp]
 801455a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801455e:	f7ec faf3 	bl	8000b48 <__aeabi_dcmpgt>
 8014562:	2800      	cmp	r0, #0
 8014564:	d050      	beq.n	8014608 <_dtoa_r+0x220>
 8014566:	f10a 3aff 	add.w	sl, sl, #4294967295
 801456a:	2300      	movs	r3, #0
 801456c:	930f      	str	r3, [sp, #60]	; 0x3c
 801456e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014570:	1b5d      	subs	r5, r3, r5
 8014572:	f1b5 0801 	subs.w	r8, r5, #1
 8014576:	bf49      	itett	mi
 8014578:	f1c5 0301 	rsbmi	r3, r5, #1
 801457c:	2300      	movpl	r3, #0
 801457e:	9305      	strmi	r3, [sp, #20]
 8014580:	f04f 0800 	movmi.w	r8, #0
 8014584:	bf58      	it	pl
 8014586:	9305      	strpl	r3, [sp, #20]
 8014588:	f1ba 0f00 	cmp.w	sl, #0
 801458c:	db3e      	blt.n	801460c <_dtoa_r+0x224>
 801458e:	2300      	movs	r3, #0
 8014590:	44d0      	add	r8, sl
 8014592:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8014596:	9307      	str	r3, [sp, #28]
 8014598:	9b06      	ldr	r3, [sp, #24]
 801459a:	2b09      	cmp	r3, #9
 801459c:	f200 8090 	bhi.w	80146c0 <_dtoa_r+0x2d8>
 80145a0:	2b05      	cmp	r3, #5
 80145a2:	bfc4      	itt	gt
 80145a4:	3b04      	subgt	r3, #4
 80145a6:	9306      	strgt	r3, [sp, #24]
 80145a8:	9b06      	ldr	r3, [sp, #24]
 80145aa:	f1a3 0302 	sub.w	r3, r3, #2
 80145ae:	bfcc      	ite	gt
 80145b0:	2500      	movgt	r5, #0
 80145b2:	2501      	movle	r5, #1
 80145b4:	2b03      	cmp	r3, #3
 80145b6:	f200 808f 	bhi.w	80146d8 <_dtoa_r+0x2f0>
 80145ba:	e8df f003 	tbb	[pc, r3]
 80145be:	7f7d      	.short	0x7f7d
 80145c0:	7131      	.short	0x7131
 80145c2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80145c6:	441d      	add	r5, r3
 80145c8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80145cc:	2820      	cmp	r0, #32
 80145ce:	dd13      	ble.n	80145f8 <_dtoa_r+0x210>
 80145d0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80145d4:	9b00      	ldr	r3, [sp, #0]
 80145d6:	fa08 f800 	lsl.w	r8, r8, r0
 80145da:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80145de:	fa23 f000 	lsr.w	r0, r3, r0
 80145e2:	ea48 0000 	orr.w	r0, r8, r0
 80145e6:	f7eb ffa5 	bl	8000534 <__aeabi_ui2d>
 80145ea:	2301      	movs	r3, #1
 80145ec:	4682      	mov	sl, r0
 80145ee:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80145f2:	3d01      	subs	r5, #1
 80145f4:	9313      	str	r3, [sp, #76]	; 0x4c
 80145f6:	e772      	b.n	80144de <_dtoa_r+0xf6>
 80145f8:	9b00      	ldr	r3, [sp, #0]
 80145fa:	f1c0 0020 	rsb	r0, r0, #32
 80145fe:	fa03 f000 	lsl.w	r0, r3, r0
 8014602:	e7f0      	b.n	80145e6 <_dtoa_r+0x1fe>
 8014604:	2301      	movs	r3, #1
 8014606:	e7b1      	b.n	801456c <_dtoa_r+0x184>
 8014608:	900f      	str	r0, [sp, #60]	; 0x3c
 801460a:	e7b0      	b.n	801456e <_dtoa_r+0x186>
 801460c:	9b05      	ldr	r3, [sp, #20]
 801460e:	eba3 030a 	sub.w	r3, r3, sl
 8014612:	9305      	str	r3, [sp, #20]
 8014614:	f1ca 0300 	rsb	r3, sl, #0
 8014618:	9307      	str	r3, [sp, #28]
 801461a:	2300      	movs	r3, #0
 801461c:	930e      	str	r3, [sp, #56]	; 0x38
 801461e:	e7bb      	b.n	8014598 <_dtoa_r+0x1b0>
 8014620:	2301      	movs	r3, #1
 8014622:	930a      	str	r3, [sp, #40]	; 0x28
 8014624:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014626:	2b00      	cmp	r3, #0
 8014628:	dd59      	ble.n	80146de <_dtoa_r+0x2f6>
 801462a:	9302      	str	r3, [sp, #8]
 801462c:	4699      	mov	r9, r3
 801462e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8014630:	2200      	movs	r2, #0
 8014632:	6072      	str	r2, [r6, #4]
 8014634:	2204      	movs	r2, #4
 8014636:	f102 0014 	add.w	r0, r2, #20
 801463a:	4298      	cmp	r0, r3
 801463c:	6871      	ldr	r1, [r6, #4]
 801463e:	d953      	bls.n	80146e8 <_dtoa_r+0x300>
 8014640:	4620      	mov	r0, r4
 8014642:	f001 f9e6 	bl	8015a12 <_Balloc>
 8014646:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014648:	6030      	str	r0, [r6, #0]
 801464a:	f1b9 0f0e 	cmp.w	r9, #14
 801464e:	f8d3 b000 	ldr.w	fp, [r3]
 8014652:	f200 80e6 	bhi.w	8014822 <_dtoa_r+0x43a>
 8014656:	2d00      	cmp	r5, #0
 8014658:	f000 80e3 	beq.w	8014822 <_dtoa_r+0x43a>
 801465c:	ed9d 7b00 	vldr	d7, [sp]
 8014660:	f1ba 0f00 	cmp.w	sl, #0
 8014664:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8014668:	dd74      	ble.n	8014754 <_dtoa_r+0x36c>
 801466a:	4a2a      	ldr	r2, [pc, #168]	; (8014714 <_dtoa_r+0x32c>)
 801466c:	f00a 030f 	and.w	r3, sl, #15
 8014670:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8014674:	ed93 7b00 	vldr	d7, [r3]
 8014678:	ea4f 162a 	mov.w	r6, sl, asr #4
 801467c:	06f0      	lsls	r0, r6, #27
 801467e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8014682:	d565      	bpl.n	8014750 <_dtoa_r+0x368>
 8014684:	4b24      	ldr	r3, [pc, #144]	; (8014718 <_dtoa_r+0x330>)
 8014686:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801468a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801468e:	f7ec f8f5 	bl	800087c <__aeabi_ddiv>
 8014692:	e9cd 0100 	strd	r0, r1, [sp]
 8014696:	f006 060f 	and.w	r6, r6, #15
 801469a:	2503      	movs	r5, #3
 801469c:	4f1e      	ldr	r7, [pc, #120]	; (8014718 <_dtoa_r+0x330>)
 801469e:	e04c      	b.n	801473a <_dtoa_r+0x352>
 80146a0:	2301      	movs	r3, #1
 80146a2:	930a      	str	r3, [sp, #40]	; 0x28
 80146a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80146a6:	4453      	add	r3, sl
 80146a8:	f103 0901 	add.w	r9, r3, #1
 80146ac:	9302      	str	r3, [sp, #8]
 80146ae:	464b      	mov	r3, r9
 80146b0:	2b01      	cmp	r3, #1
 80146b2:	bfb8      	it	lt
 80146b4:	2301      	movlt	r3, #1
 80146b6:	e7ba      	b.n	801462e <_dtoa_r+0x246>
 80146b8:	2300      	movs	r3, #0
 80146ba:	e7b2      	b.n	8014622 <_dtoa_r+0x23a>
 80146bc:	2300      	movs	r3, #0
 80146be:	e7f0      	b.n	80146a2 <_dtoa_r+0x2ba>
 80146c0:	2501      	movs	r5, #1
 80146c2:	2300      	movs	r3, #0
 80146c4:	9306      	str	r3, [sp, #24]
 80146c6:	950a      	str	r5, [sp, #40]	; 0x28
 80146c8:	f04f 33ff 	mov.w	r3, #4294967295
 80146cc:	9302      	str	r3, [sp, #8]
 80146ce:	4699      	mov	r9, r3
 80146d0:	2200      	movs	r2, #0
 80146d2:	2312      	movs	r3, #18
 80146d4:	920b      	str	r2, [sp, #44]	; 0x2c
 80146d6:	e7aa      	b.n	801462e <_dtoa_r+0x246>
 80146d8:	2301      	movs	r3, #1
 80146da:	930a      	str	r3, [sp, #40]	; 0x28
 80146dc:	e7f4      	b.n	80146c8 <_dtoa_r+0x2e0>
 80146de:	2301      	movs	r3, #1
 80146e0:	9302      	str	r3, [sp, #8]
 80146e2:	4699      	mov	r9, r3
 80146e4:	461a      	mov	r2, r3
 80146e6:	e7f5      	b.n	80146d4 <_dtoa_r+0x2ec>
 80146e8:	3101      	adds	r1, #1
 80146ea:	6071      	str	r1, [r6, #4]
 80146ec:	0052      	lsls	r2, r2, #1
 80146ee:	e7a2      	b.n	8014636 <_dtoa_r+0x24e>
 80146f0:	636f4361 	.word	0x636f4361
 80146f4:	3fd287a7 	.word	0x3fd287a7
 80146f8:	8b60c8b3 	.word	0x8b60c8b3
 80146fc:	3fc68a28 	.word	0x3fc68a28
 8014700:	509f79fb 	.word	0x509f79fb
 8014704:	3fd34413 	.word	0x3fd34413
 8014708:	7ff00000 	.word	0x7ff00000
 801470c:	08017d04 	.word	0x08017d04
 8014710:	3ff80000 	.word	0x3ff80000
 8014714:	08017c08 	.word	0x08017c08
 8014718:	08017be0 	.word	0x08017be0
 801471c:	08017b69 	.word	0x08017b69
 8014720:	07f1      	lsls	r1, r6, #31
 8014722:	d508      	bpl.n	8014736 <_dtoa_r+0x34e>
 8014724:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014728:	e9d7 2300 	ldrd	r2, r3, [r7]
 801472c:	f7eb ff7c 	bl	8000628 <__aeabi_dmul>
 8014730:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014734:	3501      	adds	r5, #1
 8014736:	1076      	asrs	r6, r6, #1
 8014738:	3708      	adds	r7, #8
 801473a:	2e00      	cmp	r6, #0
 801473c:	d1f0      	bne.n	8014720 <_dtoa_r+0x338>
 801473e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014742:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014746:	f7ec f899 	bl	800087c <__aeabi_ddiv>
 801474a:	e9cd 0100 	strd	r0, r1, [sp]
 801474e:	e01a      	b.n	8014786 <_dtoa_r+0x39e>
 8014750:	2502      	movs	r5, #2
 8014752:	e7a3      	b.n	801469c <_dtoa_r+0x2b4>
 8014754:	f000 80a0 	beq.w	8014898 <_dtoa_r+0x4b0>
 8014758:	f1ca 0600 	rsb	r6, sl, #0
 801475c:	4b9f      	ldr	r3, [pc, #636]	; (80149dc <_dtoa_r+0x5f4>)
 801475e:	4fa0      	ldr	r7, [pc, #640]	; (80149e0 <_dtoa_r+0x5f8>)
 8014760:	f006 020f 	and.w	r2, r6, #15
 8014764:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014768:	e9d3 2300 	ldrd	r2, r3, [r3]
 801476c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8014770:	f7eb ff5a 	bl	8000628 <__aeabi_dmul>
 8014774:	e9cd 0100 	strd	r0, r1, [sp]
 8014778:	1136      	asrs	r6, r6, #4
 801477a:	2300      	movs	r3, #0
 801477c:	2502      	movs	r5, #2
 801477e:	2e00      	cmp	r6, #0
 8014780:	d17f      	bne.n	8014882 <_dtoa_r+0x49a>
 8014782:	2b00      	cmp	r3, #0
 8014784:	d1e1      	bne.n	801474a <_dtoa_r+0x362>
 8014786:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014788:	2b00      	cmp	r3, #0
 801478a:	f000 8087 	beq.w	801489c <_dtoa_r+0x4b4>
 801478e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8014792:	2200      	movs	r2, #0
 8014794:	4b93      	ldr	r3, [pc, #588]	; (80149e4 <_dtoa_r+0x5fc>)
 8014796:	4630      	mov	r0, r6
 8014798:	4639      	mov	r1, r7
 801479a:	f7ec f9b7 	bl	8000b0c <__aeabi_dcmplt>
 801479e:	2800      	cmp	r0, #0
 80147a0:	d07c      	beq.n	801489c <_dtoa_r+0x4b4>
 80147a2:	f1b9 0f00 	cmp.w	r9, #0
 80147a6:	d079      	beq.n	801489c <_dtoa_r+0x4b4>
 80147a8:	9b02      	ldr	r3, [sp, #8]
 80147aa:	2b00      	cmp	r3, #0
 80147ac:	dd35      	ble.n	801481a <_dtoa_r+0x432>
 80147ae:	f10a 33ff 	add.w	r3, sl, #4294967295
 80147b2:	9308      	str	r3, [sp, #32]
 80147b4:	4639      	mov	r1, r7
 80147b6:	2200      	movs	r2, #0
 80147b8:	4b8b      	ldr	r3, [pc, #556]	; (80149e8 <_dtoa_r+0x600>)
 80147ba:	4630      	mov	r0, r6
 80147bc:	f7eb ff34 	bl	8000628 <__aeabi_dmul>
 80147c0:	e9cd 0100 	strd	r0, r1, [sp]
 80147c4:	9f02      	ldr	r7, [sp, #8]
 80147c6:	3501      	adds	r5, #1
 80147c8:	4628      	mov	r0, r5
 80147ca:	f7eb fec3 	bl	8000554 <__aeabi_i2d>
 80147ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80147d2:	f7eb ff29 	bl	8000628 <__aeabi_dmul>
 80147d6:	2200      	movs	r2, #0
 80147d8:	4b84      	ldr	r3, [pc, #528]	; (80149ec <_dtoa_r+0x604>)
 80147da:	f7eb fd6f 	bl	80002bc <__adddf3>
 80147de:	4605      	mov	r5, r0
 80147e0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80147e4:	2f00      	cmp	r7, #0
 80147e6:	d15d      	bne.n	80148a4 <_dtoa_r+0x4bc>
 80147e8:	2200      	movs	r2, #0
 80147ea:	4b81      	ldr	r3, [pc, #516]	; (80149f0 <_dtoa_r+0x608>)
 80147ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80147f0:	f7eb fd62 	bl	80002b8 <__aeabi_dsub>
 80147f4:	462a      	mov	r2, r5
 80147f6:	4633      	mov	r3, r6
 80147f8:	e9cd 0100 	strd	r0, r1, [sp]
 80147fc:	f7ec f9a4 	bl	8000b48 <__aeabi_dcmpgt>
 8014800:	2800      	cmp	r0, #0
 8014802:	f040 8288 	bne.w	8014d16 <_dtoa_r+0x92e>
 8014806:	462a      	mov	r2, r5
 8014808:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801480c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014810:	f7ec f97c 	bl	8000b0c <__aeabi_dcmplt>
 8014814:	2800      	cmp	r0, #0
 8014816:	f040 827c 	bne.w	8014d12 <_dtoa_r+0x92a>
 801481a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801481e:	e9cd 2300 	strd	r2, r3, [sp]
 8014822:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014824:	2b00      	cmp	r3, #0
 8014826:	f2c0 8150 	blt.w	8014aca <_dtoa_r+0x6e2>
 801482a:	f1ba 0f0e 	cmp.w	sl, #14
 801482e:	f300 814c 	bgt.w	8014aca <_dtoa_r+0x6e2>
 8014832:	4b6a      	ldr	r3, [pc, #424]	; (80149dc <_dtoa_r+0x5f4>)
 8014834:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8014838:	ed93 7b00 	vldr	d7, [r3]
 801483c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801483e:	2b00      	cmp	r3, #0
 8014840:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014844:	f280 80d8 	bge.w	80149f8 <_dtoa_r+0x610>
 8014848:	f1b9 0f00 	cmp.w	r9, #0
 801484c:	f300 80d4 	bgt.w	80149f8 <_dtoa_r+0x610>
 8014850:	f040 825e 	bne.w	8014d10 <_dtoa_r+0x928>
 8014854:	2200      	movs	r2, #0
 8014856:	4b66      	ldr	r3, [pc, #408]	; (80149f0 <_dtoa_r+0x608>)
 8014858:	ec51 0b17 	vmov	r0, r1, d7
 801485c:	f7eb fee4 	bl	8000628 <__aeabi_dmul>
 8014860:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014864:	f7ec f966 	bl	8000b34 <__aeabi_dcmpge>
 8014868:	464f      	mov	r7, r9
 801486a:	464e      	mov	r6, r9
 801486c:	2800      	cmp	r0, #0
 801486e:	f040 8234 	bne.w	8014cda <_dtoa_r+0x8f2>
 8014872:	2331      	movs	r3, #49	; 0x31
 8014874:	f10b 0501 	add.w	r5, fp, #1
 8014878:	f88b 3000 	strb.w	r3, [fp]
 801487c:	f10a 0a01 	add.w	sl, sl, #1
 8014880:	e22f      	b.n	8014ce2 <_dtoa_r+0x8fa>
 8014882:	07f2      	lsls	r2, r6, #31
 8014884:	d505      	bpl.n	8014892 <_dtoa_r+0x4aa>
 8014886:	e9d7 2300 	ldrd	r2, r3, [r7]
 801488a:	f7eb fecd 	bl	8000628 <__aeabi_dmul>
 801488e:	3501      	adds	r5, #1
 8014890:	2301      	movs	r3, #1
 8014892:	1076      	asrs	r6, r6, #1
 8014894:	3708      	adds	r7, #8
 8014896:	e772      	b.n	801477e <_dtoa_r+0x396>
 8014898:	2502      	movs	r5, #2
 801489a:	e774      	b.n	8014786 <_dtoa_r+0x39e>
 801489c:	f8cd a020 	str.w	sl, [sp, #32]
 80148a0:	464f      	mov	r7, r9
 80148a2:	e791      	b.n	80147c8 <_dtoa_r+0x3e0>
 80148a4:	4b4d      	ldr	r3, [pc, #308]	; (80149dc <_dtoa_r+0x5f4>)
 80148a6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80148aa:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80148ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80148b0:	2b00      	cmp	r3, #0
 80148b2:	d047      	beq.n	8014944 <_dtoa_r+0x55c>
 80148b4:	4602      	mov	r2, r0
 80148b6:	460b      	mov	r3, r1
 80148b8:	2000      	movs	r0, #0
 80148ba:	494e      	ldr	r1, [pc, #312]	; (80149f4 <_dtoa_r+0x60c>)
 80148bc:	f7eb ffde 	bl	800087c <__aeabi_ddiv>
 80148c0:	462a      	mov	r2, r5
 80148c2:	4633      	mov	r3, r6
 80148c4:	f7eb fcf8 	bl	80002b8 <__aeabi_dsub>
 80148c8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80148cc:	465d      	mov	r5, fp
 80148ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 80148d2:	f7ec f959 	bl	8000b88 <__aeabi_d2iz>
 80148d6:	4606      	mov	r6, r0
 80148d8:	f7eb fe3c 	bl	8000554 <__aeabi_i2d>
 80148dc:	4602      	mov	r2, r0
 80148de:	460b      	mov	r3, r1
 80148e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80148e4:	f7eb fce8 	bl	80002b8 <__aeabi_dsub>
 80148e8:	3630      	adds	r6, #48	; 0x30
 80148ea:	f805 6b01 	strb.w	r6, [r5], #1
 80148ee:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80148f2:	e9cd 0100 	strd	r0, r1, [sp]
 80148f6:	f7ec f909 	bl	8000b0c <__aeabi_dcmplt>
 80148fa:	2800      	cmp	r0, #0
 80148fc:	d163      	bne.n	80149c6 <_dtoa_r+0x5de>
 80148fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014902:	2000      	movs	r0, #0
 8014904:	4937      	ldr	r1, [pc, #220]	; (80149e4 <_dtoa_r+0x5fc>)
 8014906:	f7eb fcd7 	bl	80002b8 <__aeabi_dsub>
 801490a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801490e:	f7ec f8fd 	bl	8000b0c <__aeabi_dcmplt>
 8014912:	2800      	cmp	r0, #0
 8014914:	f040 80b7 	bne.w	8014a86 <_dtoa_r+0x69e>
 8014918:	eba5 030b 	sub.w	r3, r5, fp
 801491c:	429f      	cmp	r7, r3
 801491e:	f77f af7c 	ble.w	801481a <_dtoa_r+0x432>
 8014922:	2200      	movs	r2, #0
 8014924:	4b30      	ldr	r3, [pc, #192]	; (80149e8 <_dtoa_r+0x600>)
 8014926:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801492a:	f7eb fe7d 	bl	8000628 <__aeabi_dmul>
 801492e:	2200      	movs	r2, #0
 8014930:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8014934:	4b2c      	ldr	r3, [pc, #176]	; (80149e8 <_dtoa_r+0x600>)
 8014936:	e9dd 0100 	ldrd	r0, r1, [sp]
 801493a:	f7eb fe75 	bl	8000628 <__aeabi_dmul>
 801493e:	e9cd 0100 	strd	r0, r1, [sp]
 8014942:	e7c4      	b.n	80148ce <_dtoa_r+0x4e6>
 8014944:	462a      	mov	r2, r5
 8014946:	4633      	mov	r3, r6
 8014948:	f7eb fe6e 	bl	8000628 <__aeabi_dmul>
 801494c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8014950:	eb0b 0507 	add.w	r5, fp, r7
 8014954:	465e      	mov	r6, fp
 8014956:	e9dd 0100 	ldrd	r0, r1, [sp]
 801495a:	f7ec f915 	bl	8000b88 <__aeabi_d2iz>
 801495e:	4607      	mov	r7, r0
 8014960:	f7eb fdf8 	bl	8000554 <__aeabi_i2d>
 8014964:	3730      	adds	r7, #48	; 0x30
 8014966:	4602      	mov	r2, r0
 8014968:	460b      	mov	r3, r1
 801496a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801496e:	f7eb fca3 	bl	80002b8 <__aeabi_dsub>
 8014972:	f806 7b01 	strb.w	r7, [r6], #1
 8014976:	42ae      	cmp	r6, r5
 8014978:	e9cd 0100 	strd	r0, r1, [sp]
 801497c:	f04f 0200 	mov.w	r2, #0
 8014980:	d126      	bne.n	80149d0 <_dtoa_r+0x5e8>
 8014982:	4b1c      	ldr	r3, [pc, #112]	; (80149f4 <_dtoa_r+0x60c>)
 8014984:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014988:	f7eb fc98 	bl	80002bc <__adddf3>
 801498c:	4602      	mov	r2, r0
 801498e:	460b      	mov	r3, r1
 8014990:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014994:	f7ec f8d8 	bl	8000b48 <__aeabi_dcmpgt>
 8014998:	2800      	cmp	r0, #0
 801499a:	d174      	bne.n	8014a86 <_dtoa_r+0x69e>
 801499c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80149a0:	2000      	movs	r0, #0
 80149a2:	4914      	ldr	r1, [pc, #80]	; (80149f4 <_dtoa_r+0x60c>)
 80149a4:	f7eb fc88 	bl	80002b8 <__aeabi_dsub>
 80149a8:	4602      	mov	r2, r0
 80149aa:	460b      	mov	r3, r1
 80149ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80149b0:	f7ec f8ac 	bl	8000b0c <__aeabi_dcmplt>
 80149b4:	2800      	cmp	r0, #0
 80149b6:	f43f af30 	beq.w	801481a <_dtoa_r+0x432>
 80149ba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80149be:	2b30      	cmp	r3, #48	; 0x30
 80149c0:	f105 32ff 	add.w	r2, r5, #4294967295
 80149c4:	d002      	beq.n	80149cc <_dtoa_r+0x5e4>
 80149c6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80149ca:	e04a      	b.n	8014a62 <_dtoa_r+0x67a>
 80149cc:	4615      	mov	r5, r2
 80149ce:	e7f4      	b.n	80149ba <_dtoa_r+0x5d2>
 80149d0:	4b05      	ldr	r3, [pc, #20]	; (80149e8 <_dtoa_r+0x600>)
 80149d2:	f7eb fe29 	bl	8000628 <__aeabi_dmul>
 80149d6:	e9cd 0100 	strd	r0, r1, [sp]
 80149da:	e7bc      	b.n	8014956 <_dtoa_r+0x56e>
 80149dc:	08017c08 	.word	0x08017c08
 80149e0:	08017be0 	.word	0x08017be0
 80149e4:	3ff00000 	.word	0x3ff00000
 80149e8:	40240000 	.word	0x40240000
 80149ec:	401c0000 	.word	0x401c0000
 80149f0:	40140000 	.word	0x40140000
 80149f4:	3fe00000 	.word	0x3fe00000
 80149f8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80149fc:	465d      	mov	r5, fp
 80149fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014a02:	4630      	mov	r0, r6
 8014a04:	4639      	mov	r1, r7
 8014a06:	f7eb ff39 	bl	800087c <__aeabi_ddiv>
 8014a0a:	f7ec f8bd 	bl	8000b88 <__aeabi_d2iz>
 8014a0e:	4680      	mov	r8, r0
 8014a10:	f7eb fda0 	bl	8000554 <__aeabi_i2d>
 8014a14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014a18:	f7eb fe06 	bl	8000628 <__aeabi_dmul>
 8014a1c:	4602      	mov	r2, r0
 8014a1e:	460b      	mov	r3, r1
 8014a20:	4630      	mov	r0, r6
 8014a22:	4639      	mov	r1, r7
 8014a24:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8014a28:	f7eb fc46 	bl	80002b8 <__aeabi_dsub>
 8014a2c:	f805 6b01 	strb.w	r6, [r5], #1
 8014a30:	eba5 060b 	sub.w	r6, r5, fp
 8014a34:	45b1      	cmp	r9, r6
 8014a36:	4602      	mov	r2, r0
 8014a38:	460b      	mov	r3, r1
 8014a3a:	d139      	bne.n	8014ab0 <_dtoa_r+0x6c8>
 8014a3c:	f7eb fc3e 	bl	80002bc <__adddf3>
 8014a40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014a44:	4606      	mov	r6, r0
 8014a46:	460f      	mov	r7, r1
 8014a48:	f7ec f87e 	bl	8000b48 <__aeabi_dcmpgt>
 8014a4c:	b9c8      	cbnz	r0, 8014a82 <_dtoa_r+0x69a>
 8014a4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014a52:	4630      	mov	r0, r6
 8014a54:	4639      	mov	r1, r7
 8014a56:	f7ec f84f 	bl	8000af8 <__aeabi_dcmpeq>
 8014a5a:	b110      	cbz	r0, 8014a62 <_dtoa_r+0x67a>
 8014a5c:	f018 0f01 	tst.w	r8, #1
 8014a60:	d10f      	bne.n	8014a82 <_dtoa_r+0x69a>
 8014a62:	9904      	ldr	r1, [sp, #16]
 8014a64:	4620      	mov	r0, r4
 8014a66:	f001 f808 	bl	8015a7a <_Bfree>
 8014a6a:	2300      	movs	r3, #0
 8014a6c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014a6e:	702b      	strb	r3, [r5, #0]
 8014a70:	f10a 0301 	add.w	r3, sl, #1
 8014a74:	6013      	str	r3, [r2, #0]
 8014a76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014a78:	2b00      	cmp	r3, #0
 8014a7a:	f000 8241 	beq.w	8014f00 <_dtoa_r+0xb18>
 8014a7e:	601d      	str	r5, [r3, #0]
 8014a80:	e23e      	b.n	8014f00 <_dtoa_r+0xb18>
 8014a82:	f8cd a020 	str.w	sl, [sp, #32]
 8014a86:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8014a8a:	2a39      	cmp	r2, #57	; 0x39
 8014a8c:	f105 33ff 	add.w	r3, r5, #4294967295
 8014a90:	d108      	bne.n	8014aa4 <_dtoa_r+0x6bc>
 8014a92:	459b      	cmp	fp, r3
 8014a94:	d10a      	bne.n	8014aac <_dtoa_r+0x6c4>
 8014a96:	9b08      	ldr	r3, [sp, #32]
 8014a98:	3301      	adds	r3, #1
 8014a9a:	9308      	str	r3, [sp, #32]
 8014a9c:	2330      	movs	r3, #48	; 0x30
 8014a9e:	f88b 3000 	strb.w	r3, [fp]
 8014aa2:	465b      	mov	r3, fp
 8014aa4:	781a      	ldrb	r2, [r3, #0]
 8014aa6:	3201      	adds	r2, #1
 8014aa8:	701a      	strb	r2, [r3, #0]
 8014aaa:	e78c      	b.n	80149c6 <_dtoa_r+0x5de>
 8014aac:	461d      	mov	r5, r3
 8014aae:	e7ea      	b.n	8014a86 <_dtoa_r+0x69e>
 8014ab0:	2200      	movs	r2, #0
 8014ab2:	4b9b      	ldr	r3, [pc, #620]	; (8014d20 <_dtoa_r+0x938>)
 8014ab4:	f7eb fdb8 	bl	8000628 <__aeabi_dmul>
 8014ab8:	2200      	movs	r2, #0
 8014aba:	2300      	movs	r3, #0
 8014abc:	4606      	mov	r6, r0
 8014abe:	460f      	mov	r7, r1
 8014ac0:	f7ec f81a 	bl	8000af8 <__aeabi_dcmpeq>
 8014ac4:	2800      	cmp	r0, #0
 8014ac6:	d09a      	beq.n	80149fe <_dtoa_r+0x616>
 8014ac8:	e7cb      	b.n	8014a62 <_dtoa_r+0x67a>
 8014aca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014acc:	2a00      	cmp	r2, #0
 8014ace:	f000 808b 	beq.w	8014be8 <_dtoa_r+0x800>
 8014ad2:	9a06      	ldr	r2, [sp, #24]
 8014ad4:	2a01      	cmp	r2, #1
 8014ad6:	dc6e      	bgt.n	8014bb6 <_dtoa_r+0x7ce>
 8014ad8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014ada:	2a00      	cmp	r2, #0
 8014adc:	d067      	beq.n	8014bae <_dtoa_r+0x7c6>
 8014ade:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8014ae2:	9f07      	ldr	r7, [sp, #28]
 8014ae4:	9d05      	ldr	r5, [sp, #20]
 8014ae6:	9a05      	ldr	r2, [sp, #20]
 8014ae8:	2101      	movs	r1, #1
 8014aea:	441a      	add	r2, r3
 8014aec:	4620      	mov	r0, r4
 8014aee:	9205      	str	r2, [sp, #20]
 8014af0:	4498      	add	r8, r3
 8014af2:	f001 f8a0 	bl	8015c36 <__i2b>
 8014af6:	4606      	mov	r6, r0
 8014af8:	2d00      	cmp	r5, #0
 8014afa:	dd0c      	ble.n	8014b16 <_dtoa_r+0x72e>
 8014afc:	f1b8 0f00 	cmp.w	r8, #0
 8014b00:	dd09      	ble.n	8014b16 <_dtoa_r+0x72e>
 8014b02:	4545      	cmp	r5, r8
 8014b04:	9a05      	ldr	r2, [sp, #20]
 8014b06:	462b      	mov	r3, r5
 8014b08:	bfa8      	it	ge
 8014b0a:	4643      	movge	r3, r8
 8014b0c:	1ad2      	subs	r2, r2, r3
 8014b0e:	9205      	str	r2, [sp, #20]
 8014b10:	1aed      	subs	r5, r5, r3
 8014b12:	eba8 0803 	sub.w	r8, r8, r3
 8014b16:	9b07      	ldr	r3, [sp, #28]
 8014b18:	b1eb      	cbz	r3, 8014b56 <_dtoa_r+0x76e>
 8014b1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014b1c:	2b00      	cmp	r3, #0
 8014b1e:	d067      	beq.n	8014bf0 <_dtoa_r+0x808>
 8014b20:	b18f      	cbz	r7, 8014b46 <_dtoa_r+0x75e>
 8014b22:	4631      	mov	r1, r6
 8014b24:	463a      	mov	r2, r7
 8014b26:	4620      	mov	r0, r4
 8014b28:	f001 f924 	bl	8015d74 <__pow5mult>
 8014b2c:	9a04      	ldr	r2, [sp, #16]
 8014b2e:	4601      	mov	r1, r0
 8014b30:	4606      	mov	r6, r0
 8014b32:	4620      	mov	r0, r4
 8014b34:	f001 f888 	bl	8015c48 <__multiply>
 8014b38:	9904      	ldr	r1, [sp, #16]
 8014b3a:	9008      	str	r0, [sp, #32]
 8014b3c:	4620      	mov	r0, r4
 8014b3e:	f000 ff9c 	bl	8015a7a <_Bfree>
 8014b42:	9b08      	ldr	r3, [sp, #32]
 8014b44:	9304      	str	r3, [sp, #16]
 8014b46:	9b07      	ldr	r3, [sp, #28]
 8014b48:	1bda      	subs	r2, r3, r7
 8014b4a:	d004      	beq.n	8014b56 <_dtoa_r+0x76e>
 8014b4c:	9904      	ldr	r1, [sp, #16]
 8014b4e:	4620      	mov	r0, r4
 8014b50:	f001 f910 	bl	8015d74 <__pow5mult>
 8014b54:	9004      	str	r0, [sp, #16]
 8014b56:	2101      	movs	r1, #1
 8014b58:	4620      	mov	r0, r4
 8014b5a:	f001 f86c 	bl	8015c36 <__i2b>
 8014b5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014b60:	4607      	mov	r7, r0
 8014b62:	2b00      	cmp	r3, #0
 8014b64:	f000 81d0 	beq.w	8014f08 <_dtoa_r+0xb20>
 8014b68:	461a      	mov	r2, r3
 8014b6a:	4601      	mov	r1, r0
 8014b6c:	4620      	mov	r0, r4
 8014b6e:	f001 f901 	bl	8015d74 <__pow5mult>
 8014b72:	9b06      	ldr	r3, [sp, #24]
 8014b74:	2b01      	cmp	r3, #1
 8014b76:	4607      	mov	r7, r0
 8014b78:	dc40      	bgt.n	8014bfc <_dtoa_r+0x814>
 8014b7a:	9b00      	ldr	r3, [sp, #0]
 8014b7c:	2b00      	cmp	r3, #0
 8014b7e:	d139      	bne.n	8014bf4 <_dtoa_r+0x80c>
 8014b80:	9b01      	ldr	r3, [sp, #4]
 8014b82:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014b86:	2b00      	cmp	r3, #0
 8014b88:	d136      	bne.n	8014bf8 <_dtoa_r+0x810>
 8014b8a:	9b01      	ldr	r3, [sp, #4]
 8014b8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014b90:	0d1b      	lsrs	r3, r3, #20
 8014b92:	051b      	lsls	r3, r3, #20
 8014b94:	b12b      	cbz	r3, 8014ba2 <_dtoa_r+0x7ba>
 8014b96:	9b05      	ldr	r3, [sp, #20]
 8014b98:	3301      	adds	r3, #1
 8014b9a:	9305      	str	r3, [sp, #20]
 8014b9c:	f108 0801 	add.w	r8, r8, #1
 8014ba0:	2301      	movs	r3, #1
 8014ba2:	9307      	str	r3, [sp, #28]
 8014ba4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014ba6:	2b00      	cmp	r3, #0
 8014ba8:	d12a      	bne.n	8014c00 <_dtoa_r+0x818>
 8014baa:	2001      	movs	r0, #1
 8014bac:	e030      	b.n	8014c10 <_dtoa_r+0x828>
 8014bae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014bb0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8014bb4:	e795      	b.n	8014ae2 <_dtoa_r+0x6fa>
 8014bb6:	9b07      	ldr	r3, [sp, #28]
 8014bb8:	f109 37ff 	add.w	r7, r9, #4294967295
 8014bbc:	42bb      	cmp	r3, r7
 8014bbe:	bfbf      	itttt	lt
 8014bc0:	9b07      	ldrlt	r3, [sp, #28]
 8014bc2:	9707      	strlt	r7, [sp, #28]
 8014bc4:	1afa      	sublt	r2, r7, r3
 8014bc6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8014bc8:	bfbb      	ittet	lt
 8014bca:	189b      	addlt	r3, r3, r2
 8014bcc:	930e      	strlt	r3, [sp, #56]	; 0x38
 8014bce:	1bdf      	subge	r7, r3, r7
 8014bd0:	2700      	movlt	r7, #0
 8014bd2:	f1b9 0f00 	cmp.w	r9, #0
 8014bd6:	bfb5      	itete	lt
 8014bd8:	9b05      	ldrlt	r3, [sp, #20]
 8014bda:	9d05      	ldrge	r5, [sp, #20]
 8014bdc:	eba3 0509 	sublt.w	r5, r3, r9
 8014be0:	464b      	movge	r3, r9
 8014be2:	bfb8      	it	lt
 8014be4:	2300      	movlt	r3, #0
 8014be6:	e77e      	b.n	8014ae6 <_dtoa_r+0x6fe>
 8014be8:	9f07      	ldr	r7, [sp, #28]
 8014bea:	9d05      	ldr	r5, [sp, #20]
 8014bec:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8014bee:	e783      	b.n	8014af8 <_dtoa_r+0x710>
 8014bf0:	9a07      	ldr	r2, [sp, #28]
 8014bf2:	e7ab      	b.n	8014b4c <_dtoa_r+0x764>
 8014bf4:	2300      	movs	r3, #0
 8014bf6:	e7d4      	b.n	8014ba2 <_dtoa_r+0x7ba>
 8014bf8:	9b00      	ldr	r3, [sp, #0]
 8014bfa:	e7d2      	b.n	8014ba2 <_dtoa_r+0x7ba>
 8014bfc:	2300      	movs	r3, #0
 8014bfe:	9307      	str	r3, [sp, #28]
 8014c00:	693b      	ldr	r3, [r7, #16]
 8014c02:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8014c06:	6918      	ldr	r0, [r3, #16]
 8014c08:	f000 ffc7 	bl	8015b9a <__hi0bits>
 8014c0c:	f1c0 0020 	rsb	r0, r0, #32
 8014c10:	4440      	add	r0, r8
 8014c12:	f010 001f 	ands.w	r0, r0, #31
 8014c16:	d047      	beq.n	8014ca8 <_dtoa_r+0x8c0>
 8014c18:	f1c0 0320 	rsb	r3, r0, #32
 8014c1c:	2b04      	cmp	r3, #4
 8014c1e:	dd3b      	ble.n	8014c98 <_dtoa_r+0x8b0>
 8014c20:	9b05      	ldr	r3, [sp, #20]
 8014c22:	f1c0 001c 	rsb	r0, r0, #28
 8014c26:	4403      	add	r3, r0
 8014c28:	9305      	str	r3, [sp, #20]
 8014c2a:	4405      	add	r5, r0
 8014c2c:	4480      	add	r8, r0
 8014c2e:	9b05      	ldr	r3, [sp, #20]
 8014c30:	2b00      	cmp	r3, #0
 8014c32:	dd05      	ble.n	8014c40 <_dtoa_r+0x858>
 8014c34:	461a      	mov	r2, r3
 8014c36:	9904      	ldr	r1, [sp, #16]
 8014c38:	4620      	mov	r0, r4
 8014c3a:	f001 f8e9 	bl	8015e10 <__lshift>
 8014c3e:	9004      	str	r0, [sp, #16]
 8014c40:	f1b8 0f00 	cmp.w	r8, #0
 8014c44:	dd05      	ble.n	8014c52 <_dtoa_r+0x86a>
 8014c46:	4639      	mov	r1, r7
 8014c48:	4642      	mov	r2, r8
 8014c4a:	4620      	mov	r0, r4
 8014c4c:	f001 f8e0 	bl	8015e10 <__lshift>
 8014c50:	4607      	mov	r7, r0
 8014c52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014c54:	b353      	cbz	r3, 8014cac <_dtoa_r+0x8c4>
 8014c56:	4639      	mov	r1, r7
 8014c58:	9804      	ldr	r0, [sp, #16]
 8014c5a:	f001 f92d 	bl	8015eb8 <__mcmp>
 8014c5e:	2800      	cmp	r0, #0
 8014c60:	da24      	bge.n	8014cac <_dtoa_r+0x8c4>
 8014c62:	2300      	movs	r3, #0
 8014c64:	220a      	movs	r2, #10
 8014c66:	9904      	ldr	r1, [sp, #16]
 8014c68:	4620      	mov	r0, r4
 8014c6a:	f000 ff1d 	bl	8015aa8 <__multadd>
 8014c6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014c70:	9004      	str	r0, [sp, #16]
 8014c72:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014c76:	2b00      	cmp	r3, #0
 8014c78:	f000 814d 	beq.w	8014f16 <_dtoa_r+0xb2e>
 8014c7c:	2300      	movs	r3, #0
 8014c7e:	4631      	mov	r1, r6
 8014c80:	220a      	movs	r2, #10
 8014c82:	4620      	mov	r0, r4
 8014c84:	f000 ff10 	bl	8015aa8 <__multadd>
 8014c88:	9b02      	ldr	r3, [sp, #8]
 8014c8a:	2b00      	cmp	r3, #0
 8014c8c:	4606      	mov	r6, r0
 8014c8e:	dc4f      	bgt.n	8014d30 <_dtoa_r+0x948>
 8014c90:	9b06      	ldr	r3, [sp, #24]
 8014c92:	2b02      	cmp	r3, #2
 8014c94:	dd4c      	ble.n	8014d30 <_dtoa_r+0x948>
 8014c96:	e011      	b.n	8014cbc <_dtoa_r+0x8d4>
 8014c98:	d0c9      	beq.n	8014c2e <_dtoa_r+0x846>
 8014c9a:	9a05      	ldr	r2, [sp, #20]
 8014c9c:	331c      	adds	r3, #28
 8014c9e:	441a      	add	r2, r3
 8014ca0:	9205      	str	r2, [sp, #20]
 8014ca2:	441d      	add	r5, r3
 8014ca4:	4498      	add	r8, r3
 8014ca6:	e7c2      	b.n	8014c2e <_dtoa_r+0x846>
 8014ca8:	4603      	mov	r3, r0
 8014caa:	e7f6      	b.n	8014c9a <_dtoa_r+0x8b2>
 8014cac:	f1b9 0f00 	cmp.w	r9, #0
 8014cb0:	dc38      	bgt.n	8014d24 <_dtoa_r+0x93c>
 8014cb2:	9b06      	ldr	r3, [sp, #24]
 8014cb4:	2b02      	cmp	r3, #2
 8014cb6:	dd35      	ble.n	8014d24 <_dtoa_r+0x93c>
 8014cb8:	f8cd 9008 	str.w	r9, [sp, #8]
 8014cbc:	9b02      	ldr	r3, [sp, #8]
 8014cbe:	b963      	cbnz	r3, 8014cda <_dtoa_r+0x8f2>
 8014cc0:	4639      	mov	r1, r7
 8014cc2:	2205      	movs	r2, #5
 8014cc4:	4620      	mov	r0, r4
 8014cc6:	f000 feef 	bl	8015aa8 <__multadd>
 8014cca:	4601      	mov	r1, r0
 8014ccc:	4607      	mov	r7, r0
 8014cce:	9804      	ldr	r0, [sp, #16]
 8014cd0:	f001 f8f2 	bl	8015eb8 <__mcmp>
 8014cd4:	2800      	cmp	r0, #0
 8014cd6:	f73f adcc 	bgt.w	8014872 <_dtoa_r+0x48a>
 8014cda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014cdc:	465d      	mov	r5, fp
 8014cde:	ea6f 0a03 	mvn.w	sl, r3
 8014ce2:	f04f 0900 	mov.w	r9, #0
 8014ce6:	4639      	mov	r1, r7
 8014ce8:	4620      	mov	r0, r4
 8014cea:	f000 fec6 	bl	8015a7a <_Bfree>
 8014cee:	2e00      	cmp	r6, #0
 8014cf0:	f43f aeb7 	beq.w	8014a62 <_dtoa_r+0x67a>
 8014cf4:	f1b9 0f00 	cmp.w	r9, #0
 8014cf8:	d005      	beq.n	8014d06 <_dtoa_r+0x91e>
 8014cfa:	45b1      	cmp	r9, r6
 8014cfc:	d003      	beq.n	8014d06 <_dtoa_r+0x91e>
 8014cfe:	4649      	mov	r1, r9
 8014d00:	4620      	mov	r0, r4
 8014d02:	f000 feba 	bl	8015a7a <_Bfree>
 8014d06:	4631      	mov	r1, r6
 8014d08:	4620      	mov	r0, r4
 8014d0a:	f000 feb6 	bl	8015a7a <_Bfree>
 8014d0e:	e6a8      	b.n	8014a62 <_dtoa_r+0x67a>
 8014d10:	2700      	movs	r7, #0
 8014d12:	463e      	mov	r6, r7
 8014d14:	e7e1      	b.n	8014cda <_dtoa_r+0x8f2>
 8014d16:	f8dd a020 	ldr.w	sl, [sp, #32]
 8014d1a:	463e      	mov	r6, r7
 8014d1c:	e5a9      	b.n	8014872 <_dtoa_r+0x48a>
 8014d1e:	bf00      	nop
 8014d20:	40240000 	.word	0x40240000
 8014d24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014d26:	f8cd 9008 	str.w	r9, [sp, #8]
 8014d2a:	2b00      	cmp	r3, #0
 8014d2c:	f000 80fa 	beq.w	8014f24 <_dtoa_r+0xb3c>
 8014d30:	2d00      	cmp	r5, #0
 8014d32:	dd05      	ble.n	8014d40 <_dtoa_r+0x958>
 8014d34:	4631      	mov	r1, r6
 8014d36:	462a      	mov	r2, r5
 8014d38:	4620      	mov	r0, r4
 8014d3a:	f001 f869 	bl	8015e10 <__lshift>
 8014d3e:	4606      	mov	r6, r0
 8014d40:	9b07      	ldr	r3, [sp, #28]
 8014d42:	2b00      	cmp	r3, #0
 8014d44:	d04c      	beq.n	8014de0 <_dtoa_r+0x9f8>
 8014d46:	6871      	ldr	r1, [r6, #4]
 8014d48:	4620      	mov	r0, r4
 8014d4a:	f000 fe62 	bl	8015a12 <_Balloc>
 8014d4e:	6932      	ldr	r2, [r6, #16]
 8014d50:	3202      	adds	r2, #2
 8014d52:	4605      	mov	r5, r0
 8014d54:	0092      	lsls	r2, r2, #2
 8014d56:	f106 010c 	add.w	r1, r6, #12
 8014d5a:	300c      	adds	r0, #12
 8014d5c:	f000 fe4e 	bl	80159fc <memcpy>
 8014d60:	2201      	movs	r2, #1
 8014d62:	4629      	mov	r1, r5
 8014d64:	4620      	mov	r0, r4
 8014d66:	f001 f853 	bl	8015e10 <__lshift>
 8014d6a:	9b00      	ldr	r3, [sp, #0]
 8014d6c:	f8cd b014 	str.w	fp, [sp, #20]
 8014d70:	f003 0301 	and.w	r3, r3, #1
 8014d74:	46b1      	mov	r9, r6
 8014d76:	9307      	str	r3, [sp, #28]
 8014d78:	4606      	mov	r6, r0
 8014d7a:	4639      	mov	r1, r7
 8014d7c:	9804      	ldr	r0, [sp, #16]
 8014d7e:	f7ff faa7 	bl	80142d0 <quorem>
 8014d82:	4649      	mov	r1, r9
 8014d84:	4605      	mov	r5, r0
 8014d86:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8014d8a:	9804      	ldr	r0, [sp, #16]
 8014d8c:	f001 f894 	bl	8015eb8 <__mcmp>
 8014d90:	4632      	mov	r2, r6
 8014d92:	9000      	str	r0, [sp, #0]
 8014d94:	4639      	mov	r1, r7
 8014d96:	4620      	mov	r0, r4
 8014d98:	f001 f8a8 	bl	8015eec <__mdiff>
 8014d9c:	68c3      	ldr	r3, [r0, #12]
 8014d9e:	4602      	mov	r2, r0
 8014da0:	bb03      	cbnz	r3, 8014de4 <_dtoa_r+0x9fc>
 8014da2:	4601      	mov	r1, r0
 8014da4:	9008      	str	r0, [sp, #32]
 8014da6:	9804      	ldr	r0, [sp, #16]
 8014da8:	f001 f886 	bl	8015eb8 <__mcmp>
 8014dac:	9a08      	ldr	r2, [sp, #32]
 8014dae:	4603      	mov	r3, r0
 8014db0:	4611      	mov	r1, r2
 8014db2:	4620      	mov	r0, r4
 8014db4:	9308      	str	r3, [sp, #32]
 8014db6:	f000 fe60 	bl	8015a7a <_Bfree>
 8014dba:	9b08      	ldr	r3, [sp, #32]
 8014dbc:	b9a3      	cbnz	r3, 8014de8 <_dtoa_r+0xa00>
 8014dbe:	9a06      	ldr	r2, [sp, #24]
 8014dc0:	b992      	cbnz	r2, 8014de8 <_dtoa_r+0xa00>
 8014dc2:	9a07      	ldr	r2, [sp, #28]
 8014dc4:	b982      	cbnz	r2, 8014de8 <_dtoa_r+0xa00>
 8014dc6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8014dca:	d029      	beq.n	8014e20 <_dtoa_r+0xa38>
 8014dcc:	9b00      	ldr	r3, [sp, #0]
 8014dce:	2b00      	cmp	r3, #0
 8014dd0:	dd01      	ble.n	8014dd6 <_dtoa_r+0x9ee>
 8014dd2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8014dd6:	9b05      	ldr	r3, [sp, #20]
 8014dd8:	1c5d      	adds	r5, r3, #1
 8014dda:	f883 8000 	strb.w	r8, [r3]
 8014dde:	e782      	b.n	8014ce6 <_dtoa_r+0x8fe>
 8014de0:	4630      	mov	r0, r6
 8014de2:	e7c2      	b.n	8014d6a <_dtoa_r+0x982>
 8014de4:	2301      	movs	r3, #1
 8014de6:	e7e3      	b.n	8014db0 <_dtoa_r+0x9c8>
 8014de8:	9a00      	ldr	r2, [sp, #0]
 8014dea:	2a00      	cmp	r2, #0
 8014dec:	db04      	blt.n	8014df8 <_dtoa_r+0xa10>
 8014dee:	d125      	bne.n	8014e3c <_dtoa_r+0xa54>
 8014df0:	9a06      	ldr	r2, [sp, #24]
 8014df2:	bb1a      	cbnz	r2, 8014e3c <_dtoa_r+0xa54>
 8014df4:	9a07      	ldr	r2, [sp, #28]
 8014df6:	bb0a      	cbnz	r2, 8014e3c <_dtoa_r+0xa54>
 8014df8:	2b00      	cmp	r3, #0
 8014dfa:	ddec      	ble.n	8014dd6 <_dtoa_r+0x9ee>
 8014dfc:	2201      	movs	r2, #1
 8014dfe:	9904      	ldr	r1, [sp, #16]
 8014e00:	4620      	mov	r0, r4
 8014e02:	f001 f805 	bl	8015e10 <__lshift>
 8014e06:	4639      	mov	r1, r7
 8014e08:	9004      	str	r0, [sp, #16]
 8014e0a:	f001 f855 	bl	8015eb8 <__mcmp>
 8014e0e:	2800      	cmp	r0, #0
 8014e10:	dc03      	bgt.n	8014e1a <_dtoa_r+0xa32>
 8014e12:	d1e0      	bne.n	8014dd6 <_dtoa_r+0x9ee>
 8014e14:	f018 0f01 	tst.w	r8, #1
 8014e18:	d0dd      	beq.n	8014dd6 <_dtoa_r+0x9ee>
 8014e1a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8014e1e:	d1d8      	bne.n	8014dd2 <_dtoa_r+0x9ea>
 8014e20:	9b05      	ldr	r3, [sp, #20]
 8014e22:	9a05      	ldr	r2, [sp, #20]
 8014e24:	1c5d      	adds	r5, r3, #1
 8014e26:	2339      	movs	r3, #57	; 0x39
 8014e28:	7013      	strb	r3, [r2, #0]
 8014e2a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014e2e:	2b39      	cmp	r3, #57	; 0x39
 8014e30:	f105 32ff 	add.w	r2, r5, #4294967295
 8014e34:	d04f      	beq.n	8014ed6 <_dtoa_r+0xaee>
 8014e36:	3301      	adds	r3, #1
 8014e38:	7013      	strb	r3, [r2, #0]
 8014e3a:	e754      	b.n	8014ce6 <_dtoa_r+0x8fe>
 8014e3c:	9a05      	ldr	r2, [sp, #20]
 8014e3e:	2b00      	cmp	r3, #0
 8014e40:	f102 0501 	add.w	r5, r2, #1
 8014e44:	dd06      	ble.n	8014e54 <_dtoa_r+0xa6c>
 8014e46:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8014e4a:	d0e9      	beq.n	8014e20 <_dtoa_r+0xa38>
 8014e4c:	f108 0801 	add.w	r8, r8, #1
 8014e50:	9b05      	ldr	r3, [sp, #20]
 8014e52:	e7c2      	b.n	8014dda <_dtoa_r+0x9f2>
 8014e54:	9a02      	ldr	r2, [sp, #8]
 8014e56:	f805 8c01 	strb.w	r8, [r5, #-1]
 8014e5a:	eba5 030b 	sub.w	r3, r5, fp
 8014e5e:	4293      	cmp	r3, r2
 8014e60:	d021      	beq.n	8014ea6 <_dtoa_r+0xabe>
 8014e62:	2300      	movs	r3, #0
 8014e64:	220a      	movs	r2, #10
 8014e66:	9904      	ldr	r1, [sp, #16]
 8014e68:	4620      	mov	r0, r4
 8014e6a:	f000 fe1d 	bl	8015aa8 <__multadd>
 8014e6e:	45b1      	cmp	r9, r6
 8014e70:	9004      	str	r0, [sp, #16]
 8014e72:	f04f 0300 	mov.w	r3, #0
 8014e76:	f04f 020a 	mov.w	r2, #10
 8014e7a:	4649      	mov	r1, r9
 8014e7c:	4620      	mov	r0, r4
 8014e7e:	d105      	bne.n	8014e8c <_dtoa_r+0xaa4>
 8014e80:	f000 fe12 	bl	8015aa8 <__multadd>
 8014e84:	4681      	mov	r9, r0
 8014e86:	4606      	mov	r6, r0
 8014e88:	9505      	str	r5, [sp, #20]
 8014e8a:	e776      	b.n	8014d7a <_dtoa_r+0x992>
 8014e8c:	f000 fe0c 	bl	8015aa8 <__multadd>
 8014e90:	4631      	mov	r1, r6
 8014e92:	4681      	mov	r9, r0
 8014e94:	2300      	movs	r3, #0
 8014e96:	220a      	movs	r2, #10
 8014e98:	4620      	mov	r0, r4
 8014e9a:	f000 fe05 	bl	8015aa8 <__multadd>
 8014e9e:	4606      	mov	r6, r0
 8014ea0:	e7f2      	b.n	8014e88 <_dtoa_r+0xaa0>
 8014ea2:	f04f 0900 	mov.w	r9, #0
 8014ea6:	2201      	movs	r2, #1
 8014ea8:	9904      	ldr	r1, [sp, #16]
 8014eaa:	4620      	mov	r0, r4
 8014eac:	f000 ffb0 	bl	8015e10 <__lshift>
 8014eb0:	4639      	mov	r1, r7
 8014eb2:	9004      	str	r0, [sp, #16]
 8014eb4:	f001 f800 	bl	8015eb8 <__mcmp>
 8014eb8:	2800      	cmp	r0, #0
 8014eba:	dcb6      	bgt.n	8014e2a <_dtoa_r+0xa42>
 8014ebc:	d102      	bne.n	8014ec4 <_dtoa_r+0xadc>
 8014ebe:	f018 0f01 	tst.w	r8, #1
 8014ec2:	d1b2      	bne.n	8014e2a <_dtoa_r+0xa42>
 8014ec4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014ec8:	2b30      	cmp	r3, #48	; 0x30
 8014eca:	f105 32ff 	add.w	r2, r5, #4294967295
 8014ece:	f47f af0a 	bne.w	8014ce6 <_dtoa_r+0x8fe>
 8014ed2:	4615      	mov	r5, r2
 8014ed4:	e7f6      	b.n	8014ec4 <_dtoa_r+0xadc>
 8014ed6:	4593      	cmp	fp, r2
 8014ed8:	d105      	bne.n	8014ee6 <_dtoa_r+0xafe>
 8014eda:	2331      	movs	r3, #49	; 0x31
 8014edc:	f10a 0a01 	add.w	sl, sl, #1
 8014ee0:	f88b 3000 	strb.w	r3, [fp]
 8014ee4:	e6ff      	b.n	8014ce6 <_dtoa_r+0x8fe>
 8014ee6:	4615      	mov	r5, r2
 8014ee8:	e79f      	b.n	8014e2a <_dtoa_r+0xa42>
 8014eea:	f8df b064 	ldr.w	fp, [pc, #100]	; 8014f50 <_dtoa_r+0xb68>
 8014eee:	e007      	b.n	8014f00 <_dtoa_r+0xb18>
 8014ef0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014ef2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8014f54 <_dtoa_r+0xb6c>
 8014ef6:	b11b      	cbz	r3, 8014f00 <_dtoa_r+0xb18>
 8014ef8:	f10b 0308 	add.w	r3, fp, #8
 8014efc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014efe:	6013      	str	r3, [r2, #0]
 8014f00:	4658      	mov	r0, fp
 8014f02:	b017      	add	sp, #92	; 0x5c
 8014f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f08:	9b06      	ldr	r3, [sp, #24]
 8014f0a:	2b01      	cmp	r3, #1
 8014f0c:	f77f ae35 	ble.w	8014b7a <_dtoa_r+0x792>
 8014f10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014f12:	9307      	str	r3, [sp, #28]
 8014f14:	e649      	b.n	8014baa <_dtoa_r+0x7c2>
 8014f16:	9b02      	ldr	r3, [sp, #8]
 8014f18:	2b00      	cmp	r3, #0
 8014f1a:	dc03      	bgt.n	8014f24 <_dtoa_r+0xb3c>
 8014f1c:	9b06      	ldr	r3, [sp, #24]
 8014f1e:	2b02      	cmp	r3, #2
 8014f20:	f73f aecc 	bgt.w	8014cbc <_dtoa_r+0x8d4>
 8014f24:	465d      	mov	r5, fp
 8014f26:	4639      	mov	r1, r7
 8014f28:	9804      	ldr	r0, [sp, #16]
 8014f2a:	f7ff f9d1 	bl	80142d0 <quorem>
 8014f2e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8014f32:	f805 8b01 	strb.w	r8, [r5], #1
 8014f36:	9a02      	ldr	r2, [sp, #8]
 8014f38:	eba5 030b 	sub.w	r3, r5, fp
 8014f3c:	429a      	cmp	r2, r3
 8014f3e:	ddb0      	ble.n	8014ea2 <_dtoa_r+0xaba>
 8014f40:	2300      	movs	r3, #0
 8014f42:	220a      	movs	r2, #10
 8014f44:	9904      	ldr	r1, [sp, #16]
 8014f46:	4620      	mov	r0, r4
 8014f48:	f000 fdae 	bl	8015aa8 <__multadd>
 8014f4c:	9004      	str	r0, [sp, #16]
 8014f4e:	e7ea      	b.n	8014f26 <_dtoa_r+0xb3e>
 8014f50:	08017d03 	.word	0x08017d03
 8014f54:	08017b60 	.word	0x08017b60

08014f58 <__sflush_r>:
 8014f58:	898a      	ldrh	r2, [r1, #12]
 8014f5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f5e:	4605      	mov	r5, r0
 8014f60:	0710      	lsls	r0, r2, #28
 8014f62:	460c      	mov	r4, r1
 8014f64:	d458      	bmi.n	8015018 <__sflush_r+0xc0>
 8014f66:	684b      	ldr	r3, [r1, #4]
 8014f68:	2b00      	cmp	r3, #0
 8014f6a:	dc05      	bgt.n	8014f78 <__sflush_r+0x20>
 8014f6c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014f6e:	2b00      	cmp	r3, #0
 8014f70:	dc02      	bgt.n	8014f78 <__sflush_r+0x20>
 8014f72:	2000      	movs	r0, #0
 8014f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014f7a:	2e00      	cmp	r6, #0
 8014f7c:	d0f9      	beq.n	8014f72 <__sflush_r+0x1a>
 8014f7e:	2300      	movs	r3, #0
 8014f80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014f84:	682f      	ldr	r7, [r5, #0]
 8014f86:	6a21      	ldr	r1, [r4, #32]
 8014f88:	602b      	str	r3, [r5, #0]
 8014f8a:	d032      	beq.n	8014ff2 <__sflush_r+0x9a>
 8014f8c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014f8e:	89a3      	ldrh	r3, [r4, #12]
 8014f90:	075a      	lsls	r2, r3, #29
 8014f92:	d505      	bpl.n	8014fa0 <__sflush_r+0x48>
 8014f94:	6863      	ldr	r3, [r4, #4]
 8014f96:	1ac0      	subs	r0, r0, r3
 8014f98:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014f9a:	b10b      	cbz	r3, 8014fa0 <__sflush_r+0x48>
 8014f9c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014f9e:	1ac0      	subs	r0, r0, r3
 8014fa0:	2300      	movs	r3, #0
 8014fa2:	4602      	mov	r2, r0
 8014fa4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014fa6:	6a21      	ldr	r1, [r4, #32]
 8014fa8:	4628      	mov	r0, r5
 8014faa:	47b0      	blx	r6
 8014fac:	1c43      	adds	r3, r0, #1
 8014fae:	89a3      	ldrh	r3, [r4, #12]
 8014fb0:	d106      	bne.n	8014fc0 <__sflush_r+0x68>
 8014fb2:	6829      	ldr	r1, [r5, #0]
 8014fb4:	291d      	cmp	r1, #29
 8014fb6:	d848      	bhi.n	801504a <__sflush_r+0xf2>
 8014fb8:	4a29      	ldr	r2, [pc, #164]	; (8015060 <__sflush_r+0x108>)
 8014fba:	40ca      	lsrs	r2, r1
 8014fbc:	07d6      	lsls	r6, r2, #31
 8014fbe:	d544      	bpl.n	801504a <__sflush_r+0xf2>
 8014fc0:	2200      	movs	r2, #0
 8014fc2:	6062      	str	r2, [r4, #4]
 8014fc4:	04d9      	lsls	r1, r3, #19
 8014fc6:	6922      	ldr	r2, [r4, #16]
 8014fc8:	6022      	str	r2, [r4, #0]
 8014fca:	d504      	bpl.n	8014fd6 <__sflush_r+0x7e>
 8014fcc:	1c42      	adds	r2, r0, #1
 8014fce:	d101      	bne.n	8014fd4 <__sflush_r+0x7c>
 8014fd0:	682b      	ldr	r3, [r5, #0]
 8014fd2:	b903      	cbnz	r3, 8014fd6 <__sflush_r+0x7e>
 8014fd4:	6560      	str	r0, [r4, #84]	; 0x54
 8014fd6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014fd8:	602f      	str	r7, [r5, #0]
 8014fda:	2900      	cmp	r1, #0
 8014fdc:	d0c9      	beq.n	8014f72 <__sflush_r+0x1a>
 8014fde:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014fe2:	4299      	cmp	r1, r3
 8014fe4:	d002      	beq.n	8014fec <__sflush_r+0x94>
 8014fe6:	4628      	mov	r0, r5
 8014fe8:	f001 f920 	bl	801622c <_free_r>
 8014fec:	2000      	movs	r0, #0
 8014fee:	6360      	str	r0, [r4, #52]	; 0x34
 8014ff0:	e7c0      	b.n	8014f74 <__sflush_r+0x1c>
 8014ff2:	2301      	movs	r3, #1
 8014ff4:	4628      	mov	r0, r5
 8014ff6:	47b0      	blx	r6
 8014ff8:	1c41      	adds	r1, r0, #1
 8014ffa:	d1c8      	bne.n	8014f8e <__sflush_r+0x36>
 8014ffc:	682b      	ldr	r3, [r5, #0]
 8014ffe:	2b00      	cmp	r3, #0
 8015000:	d0c5      	beq.n	8014f8e <__sflush_r+0x36>
 8015002:	2b1d      	cmp	r3, #29
 8015004:	d001      	beq.n	801500a <__sflush_r+0xb2>
 8015006:	2b16      	cmp	r3, #22
 8015008:	d101      	bne.n	801500e <__sflush_r+0xb6>
 801500a:	602f      	str	r7, [r5, #0]
 801500c:	e7b1      	b.n	8014f72 <__sflush_r+0x1a>
 801500e:	89a3      	ldrh	r3, [r4, #12]
 8015010:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015014:	81a3      	strh	r3, [r4, #12]
 8015016:	e7ad      	b.n	8014f74 <__sflush_r+0x1c>
 8015018:	690f      	ldr	r7, [r1, #16]
 801501a:	2f00      	cmp	r7, #0
 801501c:	d0a9      	beq.n	8014f72 <__sflush_r+0x1a>
 801501e:	0793      	lsls	r3, r2, #30
 8015020:	680e      	ldr	r6, [r1, #0]
 8015022:	bf08      	it	eq
 8015024:	694b      	ldreq	r3, [r1, #20]
 8015026:	600f      	str	r7, [r1, #0]
 8015028:	bf18      	it	ne
 801502a:	2300      	movne	r3, #0
 801502c:	eba6 0807 	sub.w	r8, r6, r7
 8015030:	608b      	str	r3, [r1, #8]
 8015032:	f1b8 0f00 	cmp.w	r8, #0
 8015036:	dd9c      	ble.n	8014f72 <__sflush_r+0x1a>
 8015038:	4643      	mov	r3, r8
 801503a:	463a      	mov	r2, r7
 801503c:	6a21      	ldr	r1, [r4, #32]
 801503e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015040:	4628      	mov	r0, r5
 8015042:	47b0      	blx	r6
 8015044:	2800      	cmp	r0, #0
 8015046:	dc06      	bgt.n	8015056 <__sflush_r+0xfe>
 8015048:	89a3      	ldrh	r3, [r4, #12]
 801504a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801504e:	81a3      	strh	r3, [r4, #12]
 8015050:	f04f 30ff 	mov.w	r0, #4294967295
 8015054:	e78e      	b.n	8014f74 <__sflush_r+0x1c>
 8015056:	4407      	add	r7, r0
 8015058:	eba8 0800 	sub.w	r8, r8, r0
 801505c:	e7e9      	b.n	8015032 <__sflush_r+0xda>
 801505e:	bf00      	nop
 8015060:	20400001 	.word	0x20400001

08015064 <_fflush_r>:
 8015064:	b538      	push	{r3, r4, r5, lr}
 8015066:	690b      	ldr	r3, [r1, #16]
 8015068:	4605      	mov	r5, r0
 801506a:	460c      	mov	r4, r1
 801506c:	b1db      	cbz	r3, 80150a6 <_fflush_r+0x42>
 801506e:	b118      	cbz	r0, 8015078 <_fflush_r+0x14>
 8015070:	6983      	ldr	r3, [r0, #24]
 8015072:	b90b      	cbnz	r3, 8015078 <_fflush_r+0x14>
 8015074:	f000 f860 	bl	8015138 <__sinit>
 8015078:	4b0c      	ldr	r3, [pc, #48]	; (80150ac <_fflush_r+0x48>)
 801507a:	429c      	cmp	r4, r3
 801507c:	d109      	bne.n	8015092 <_fflush_r+0x2e>
 801507e:	686c      	ldr	r4, [r5, #4]
 8015080:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015084:	b17b      	cbz	r3, 80150a6 <_fflush_r+0x42>
 8015086:	4621      	mov	r1, r4
 8015088:	4628      	mov	r0, r5
 801508a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801508e:	f7ff bf63 	b.w	8014f58 <__sflush_r>
 8015092:	4b07      	ldr	r3, [pc, #28]	; (80150b0 <_fflush_r+0x4c>)
 8015094:	429c      	cmp	r4, r3
 8015096:	d101      	bne.n	801509c <_fflush_r+0x38>
 8015098:	68ac      	ldr	r4, [r5, #8]
 801509a:	e7f1      	b.n	8015080 <_fflush_r+0x1c>
 801509c:	4b05      	ldr	r3, [pc, #20]	; (80150b4 <_fflush_r+0x50>)
 801509e:	429c      	cmp	r4, r3
 80150a0:	bf08      	it	eq
 80150a2:	68ec      	ldreq	r4, [r5, #12]
 80150a4:	e7ec      	b.n	8015080 <_fflush_r+0x1c>
 80150a6:	2000      	movs	r0, #0
 80150a8:	bd38      	pop	{r3, r4, r5, pc}
 80150aa:	bf00      	nop
 80150ac:	08017b90 	.word	0x08017b90
 80150b0:	08017bb0 	.word	0x08017bb0
 80150b4:	08017b70 	.word	0x08017b70

080150b8 <std>:
 80150b8:	2300      	movs	r3, #0
 80150ba:	b510      	push	{r4, lr}
 80150bc:	4604      	mov	r4, r0
 80150be:	e9c0 3300 	strd	r3, r3, [r0]
 80150c2:	6083      	str	r3, [r0, #8]
 80150c4:	8181      	strh	r1, [r0, #12]
 80150c6:	6643      	str	r3, [r0, #100]	; 0x64
 80150c8:	81c2      	strh	r2, [r0, #14]
 80150ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80150ce:	6183      	str	r3, [r0, #24]
 80150d0:	4619      	mov	r1, r3
 80150d2:	2208      	movs	r2, #8
 80150d4:	305c      	adds	r0, #92	; 0x5c
 80150d6:	f7fd f9a3 	bl	8012420 <memset>
 80150da:	4b05      	ldr	r3, [pc, #20]	; (80150f0 <std+0x38>)
 80150dc:	6263      	str	r3, [r4, #36]	; 0x24
 80150de:	4b05      	ldr	r3, [pc, #20]	; (80150f4 <std+0x3c>)
 80150e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80150e2:	4b05      	ldr	r3, [pc, #20]	; (80150f8 <std+0x40>)
 80150e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80150e6:	4b05      	ldr	r3, [pc, #20]	; (80150fc <std+0x44>)
 80150e8:	6224      	str	r4, [r4, #32]
 80150ea:	6323      	str	r3, [r4, #48]	; 0x30
 80150ec:	bd10      	pop	{r4, pc}
 80150ee:	bf00      	nop
 80150f0:	080132d5 	.word	0x080132d5
 80150f4:	080132fb 	.word	0x080132fb
 80150f8:	08013333 	.word	0x08013333
 80150fc:	08013357 	.word	0x08013357

08015100 <_cleanup_r>:
 8015100:	4901      	ldr	r1, [pc, #4]	; (8015108 <_cleanup_r+0x8>)
 8015102:	f000 b885 	b.w	8015210 <_fwalk_reent>
 8015106:	bf00      	nop
 8015108:	08015065 	.word	0x08015065

0801510c <__sfmoreglue>:
 801510c:	b570      	push	{r4, r5, r6, lr}
 801510e:	1e4a      	subs	r2, r1, #1
 8015110:	2568      	movs	r5, #104	; 0x68
 8015112:	4355      	muls	r5, r2
 8015114:	460e      	mov	r6, r1
 8015116:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801511a:	f001 f8d5 	bl	80162c8 <_malloc_r>
 801511e:	4604      	mov	r4, r0
 8015120:	b140      	cbz	r0, 8015134 <__sfmoreglue+0x28>
 8015122:	2100      	movs	r1, #0
 8015124:	e9c0 1600 	strd	r1, r6, [r0]
 8015128:	300c      	adds	r0, #12
 801512a:	60a0      	str	r0, [r4, #8]
 801512c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015130:	f7fd f976 	bl	8012420 <memset>
 8015134:	4620      	mov	r0, r4
 8015136:	bd70      	pop	{r4, r5, r6, pc}

08015138 <__sinit>:
 8015138:	6983      	ldr	r3, [r0, #24]
 801513a:	b510      	push	{r4, lr}
 801513c:	4604      	mov	r4, r0
 801513e:	bb33      	cbnz	r3, 801518e <__sinit+0x56>
 8015140:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8015144:	6503      	str	r3, [r0, #80]	; 0x50
 8015146:	4b12      	ldr	r3, [pc, #72]	; (8015190 <__sinit+0x58>)
 8015148:	4a12      	ldr	r2, [pc, #72]	; (8015194 <__sinit+0x5c>)
 801514a:	681b      	ldr	r3, [r3, #0]
 801514c:	6282      	str	r2, [r0, #40]	; 0x28
 801514e:	4298      	cmp	r0, r3
 8015150:	bf04      	itt	eq
 8015152:	2301      	moveq	r3, #1
 8015154:	6183      	streq	r3, [r0, #24]
 8015156:	f000 f81f 	bl	8015198 <__sfp>
 801515a:	6060      	str	r0, [r4, #4]
 801515c:	4620      	mov	r0, r4
 801515e:	f000 f81b 	bl	8015198 <__sfp>
 8015162:	60a0      	str	r0, [r4, #8]
 8015164:	4620      	mov	r0, r4
 8015166:	f000 f817 	bl	8015198 <__sfp>
 801516a:	2200      	movs	r2, #0
 801516c:	60e0      	str	r0, [r4, #12]
 801516e:	2104      	movs	r1, #4
 8015170:	6860      	ldr	r0, [r4, #4]
 8015172:	f7ff ffa1 	bl	80150b8 <std>
 8015176:	2201      	movs	r2, #1
 8015178:	2109      	movs	r1, #9
 801517a:	68a0      	ldr	r0, [r4, #8]
 801517c:	f7ff ff9c 	bl	80150b8 <std>
 8015180:	2202      	movs	r2, #2
 8015182:	2112      	movs	r1, #18
 8015184:	68e0      	ldr	r0, [r4, #12]
 8015186:	f7ff ff97 	bl	80150b8 <std>
 801518a:	2301      	movs	r3, #1
 801518c:	61a3      	str	r3, [r4, #24]
 801518e:	bd10      	pop	{r4, pc}
 8015190:	08017ad0 	.word	0x08017ad0
 8015194:	08015101 	.word	0x08015101

08015198 <__sfp>:
 8015198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801519a:	4b1b      	ldr	r3, [pc, #108]	; (8015208 <__sfp+0x70>)
 801519c:	681e      	ldr	r6, [r3, #0]
 801519e:	69b3      	ldr	r3, [r6, #24]
 80151a0:	4607      	mov	r7, r0
 80151a2:	b913      	cbnz	r3, 80151aa <__sfp+0x12>
 80151a4:	4630      	mov	r0, r6
 80151a6:	f7ff ffc7 	bl	8015138 <__sinit>
 80151aa:	3648      	adds	r6, #72	; 0x48
 80151ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80151b0:	3b01      	subs	r3, #1
 80151b2:	d503      	bpl.n	80151bc <__sfp+0x24>
 80151b4:	6833      	ldr	r3, [r6, #0]
 80151b6:	b133      	cbz	r3, 80151c6 <__sfp+0x2e>
 80151b8:	6836      	ldr	r6, [r6, #0]
 80151ba:	e7f7      	b.n	80151ac <__sfp+0x14>
 80151bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80151c0:	b16d      	cbz	r5, 80151de <__sfp+0x46>
 80151c2:	3468      	adds	r4, #104	; 0x68
 80151c4:	e7f4      	b.n	80151b0 <__sfp+0x18>
 80151c6:	2104      	movs	r1, #4
 80151c8:	4638      	mov	r0, r7
 80151ca:	f7ff ff9f 	bl	801510c <__sfmoreglue>
 80151ce:	6030      	str	r0, [r6, #0]
 80151d0:	2800      	cmp	r0, #0
 80151d2:	d1f1      	bne.n	80151b8 <__sfp+0x20>
 80151d4:	230c      	movs	r3, #12
 80151d6:	603b      	str	r3, [r7, #0]
 80151d8:	4604      	mov	r4, r0
 80151da:	4620      	mov	r0, r4
 80151dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80151de:	4b0b      	ldr	r3, [pc, #44]	; (801520c <__sfp+0x74>)
 80151e0:	6665      	str	r5, [r4, #100]	; 0x64
 80151e2:	e9c4 5500 	strd	r5, r5, [r4]
 80151e6:	60a5      	str	r5, [r4, #8]
 80151e8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80151ec:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80151f0:	2208      	movs	r2, #8
 80151f2:	4629      	mov	r1, r5
 80151f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80151f8:	f7fd f912 	bl	8012420 <memset>
 80151fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015200:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8015204:	e7e9      	b.n	80151da <__sfp+0x42>
 8015206:	bf00      	nop
 8015208:	08017ad0 	.word	0x08017ad0
 801520c:	ffff0001 	.word	0xffff0001

08015210 <_fwalk_reent>:
 8015210:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015214:	4680      	mov	r8, r0
 8015216:	4689      	mov	r9, r1
 8015218:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801521c:	2600      	movs	r6, #0
 801521e:	b914      	cbnz	r4, 8015226 <_fwalk_reent+0x16>
 8015220:	4630      	mov	r0, r6
 8015222:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015226:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801522a:	3f01      	subs	r7, #1
 801522c:	d501      	bpl.n	8015232 <_fwalk_reent+0x22>
 801522e:	6824      	ldr	r4, [r4, #0]
 8015230:	e7f5      	b.n	801521e <_fwalk_reent+0xe>
 8015232:	89ab      	ldrh	r3, [r5, #12]
 8015234:	2b01      	cmp	r3, #1
 8015236:	d907      	bls.n	8015248 <_fwalk_reent+0x38>
 8015238:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801523c:	3301      	adds	r3, #1
 801523e:	d003      	beq.n	8015248 <_fwalk_reent+0x38>
 8015240:	4629      	mov	r1, r5
 8015242:	4640      	mov	r0, r8
 8015244:	47c8      	blx	r9
 8015246:	4306      	orrs	r6, r0
 8015248:	3568      	adds	r5, #104	; 0x68
 801524a:	e7ee      	b.n	801522a <_fwalk_reent+0x1a>

0801524c <rshift>:
 801524c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801524e:	6906      	ldr	r6, [r0, #16]
 8015250:	114b      	asrs	r3, r1, #5
 8015252:	429e      	cmp	r6, r3
 8015254:	f100 0414 	add.w	r4, r0, #20
 8015258:	dd30      	ble.n	80152bc <rshift+0x70>
 801525a:	f011 011f 	ands.w	r1, r1, #31
 801525e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8015262:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8015266:	d108      	bne.n	801527a <rshift+0x2e>
 8015268:	4621      	mov	r1, r4
 801526a:	42b2      	cmp	r2, r6
 801526c:	460b      	mov	r3, r1
 801526e:	d211      	bcs.n	8015294 <rshift+0x48>
 8015270:	f852 3b04 	ldr.w	r3, [r2], #4
 8015274:	f841 3b04 	str.w	r3, [r1], #4
 8015278:	e7f7      	b.n	801526a <rshift+0x1e>
 801527a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 801527e:	f1c1 0c20 	rsb	ip, r1, #32
 8015282:	40cd      	lsrs	r5, r1
 8015284:	3204      	adds	r2, #4
 8015286:	4623      	mov	r3, r4
 8015288:	42b2      	cmp	r2, r6
 801528a:	4617      	mov	r7, r2
 801528c:	d30c      	bcc.n	80152a8 <rshift+0x5c>
 801528e:	601d      	str	r5, [r3, #0]
 8015290:	b105      	cbz	r5, 8015294 <rshift+0x48>
 8015292:	3304      	adds	r3, #4
 8015294:	1b1a      	subs	r2, r3, r4
 8015296:	42a3      	cmp	r3, r4
 8015298:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801529c:	bf08      	it	eq
 801529e:	2300      	moveq	r3, #0
 80152a0:	6102      	str	r2, [r0, #16]
 80152a2:	bf08      	it	eq
 80152a4:	6143      	streq	r3, [r0, #20]
 80152a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80152a8:	683f      	ldr	r7, [r7, #0]
 80152aa:	fa07 f70c 	lsl.w	r7, r7, ip
 80152ae:	433d      	orrs	r5, r7
 80152b0:	f843 5b04 	str.w	r5, [r3], #4
 80152b4:	f852 5b04 	ldr.w	r5, [r2], #4
 80152b8:	40cd      	lsrs	r5, r1
 80152ba:	e7e5      	b.n	8015288 <rshift+0x3c>
 80152bc:	4623      	mov	r3, r4
 80152be:	e7e9      	b.n	8015294 <rshift+0x48>

080152c0 <__hexdig_fun>:
 80152c0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80152c4:	2b09      	cmp	r3, #9
 80152c6:	d802      	bhi.n	80152ce <__hexdig_fun+0xe>
 80152c8:	3820      	subs	r0, #32
 80152ca:	b2c0      	uxtb	r0, r0
 80152cc:	4770      	bx	lr
 80152ce:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80152d2:	2b05      	cmp	r3, #5
 80152d4:	d801      	bhi.n	80152da <__hexdig_fun+0x1a>
 80152d6:	3847      	subs	r0, #71	; 0x47
 80152d8:	e7f7      	b.n	80152ca <__hexdig_fun+0xa>
 80152da:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80152de:	2b05      	cmp	r3, #5
 80152e0:	d801      	bhi.n	80152e6 <__hexdig_fun+0x26>
 80152e2:	3827      	subs	r0, #39	; 0x27
 80152e4:	e7f1      	b.n	80152ca <__hexdig_fun+0xa>
 80152e6:	2000      	movs	r0, #0
 80152e8:	4770      	bx	lr

080152ea <__gethex>:
 80152ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80152ee:	b08b      	sub	sp, #44	; 0x2c
 80152f0:	468a      	mov	sl, r1
 80152f2:	9002      	str	r0, [sp, #8]
 80152f4:	9816      	ldr	r0, [sp, #88]	; 0x58
 80152f6:	9306      	str	r3, [sp, #24]
 80152f8:	4690      	mov	r8, r2
 80152fa:	f000 fadf 	bl	80158bc <__localeconv_l>
 80152fe:	6803      	ldr	r3, [r0, #0]
 8015300:	9303      	str	r3, [sp, #12]
 8015302:	4618      	mov	r0, r3
 8015304:	f7ea ff7c 	bl	8000200 <strlen>
 8015308:	9b03      	ldr	r3, [sp, #12]
 801530a:	9001      	str	r0, [sp, #4]
 801530c:	4403      	add	r3, r0
 801530e:	f04f 0b00 	mov.w	fp, #0
 8015312:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8015316:	9307      	str	r3, [sp, #28]
 8015318:	f8da 3000 	ldr.w	r3, [sl]
 801531c:	3302      	adds	r3, #2
 801531e:	461f      	mov	r7, r3
 8015320:	f813 0b01 	ldrb.w	r0, [r3], #1
 8015324:	2830      	cmp	r0, #48	; 0x30
 8015326:	d06c      	beq.n	8015402 <__gethex+0x118>
 8015328:	f7ff ffca 	bl	80152c0 <__hexdig_fun>
 801532c:	4604      	mov	r4, r0
 801532e:	2800      	cmp	r0, #0
 8015330:	d16a      	bne.n	8015408 <__gethex+0x11e>
 8015332:	9a01      	ldr	r2, [sp, #4]
 8015334:	9903      	ldr	r1, [sp, #12]
 8015336:	4638      	mov	r0, r7
 8015338:	f001 fe3e 	bl	8016fb8 <strncmp>
 801533c:	2800      	cmp	r0, #0
 801533e:	d166      	bne.n	801540e <__gethex+0x124>
 8015340:	9b01      	ldr	r3, [sp, #4]
 8015342:	5cf8      	ldrb	r0, [r7, r3]
 8015344:	18fe      	adds	r6, r7, r3
 8015346:	f7ff ffbb 	bl	80152c0 <__hexdig_fun>
 801534a:	2800      	cmp	r0, #0
 801534c:	d062      	beq.n	8015414 <__gethex+0x12a>
 801534e:	4633      	mov	r3, r6
 8015350:	7818      	ldrb	r0, [r3, #0]
 8015352:	2830      	cmp	r0, #48	; 0x30
 8015354:	461f      	mov	r7, r3
 8015356:	f103 0301 	add.w	r3, r3, #1
 801535a:	d0f9      	beq.n	8015350 <__gethex+0x66>
 801535c:	f7ff ffb0 	bl	80152c0 <__hexdig_fun>
 8015360:	fab0 f580 	clz	r5, r0
 8015364:	096d      	lsrs	r5, r5, #5
 8015366:	4634      	mov	r4, r6
 8015368:	f04f 0b01 	mov.w	fp, #1
 801536c:	463a      	mov	r2, r7
 801536e:	4616      	mov	r6, r2
 8015370:	3201      	adds	r2, #1
 8015372:	7830      	ldrb	r0, [r6, #0]
 8015374:	f7ff ffa4 	bl	80152c0 <__hexdig_fun>
 8015378:	2800      	cmp	r0, #0
 801537a:	d1f8      	bne.n	801536e <__gethex+0x84>
 801537c:	9a01      	ldr	r2, [sp, #4]
 801537e:	9903      	ldr	r1, [sp, #12]
 8015380:	4630      	mov	r0, r6
 8015382:	f001 fe19 	bl	8016fb8 <strncmp>
 8015386:	b950      	cbnz	r0, 801539e <__gethex+0xb4>
 8015388:	b954      	cbnz	r4, 80153a0 <__gethex+0xb6>
 801538a:	9b01      	ldr	r3, [sp, #4]
 801538c:	18f4      	adds	r4, r6, r3
 801538e:	4622      	mov	r2, r4
 8015390:	4616      	mov	r6, r2
 8015392:	3201      	adds	r2, #1
 8015394:	7830      	ldrb	r0, [r6, #0]
 8015396:	f7ff ff93 	bl	80152c0 <__hexdig_fun>
 801539a:	2800      	cmp	r0, #0
 801539c:	d1f8      	bne.n	8015390 <__gethex+0xa6>
 801539e:	b10c      	cbz	r4, 80153a4 <__gethex+0xba>
 80153a0:	1ba4      	subs	r4, r4, r6
 80153a2:	00a4      	lsls	r4, r4, #2
 80153a4:	7833      	ldrb	r3, [r6, #0]
 80153a6:	2b50      	cmp	r3, #80	; 0x50
 80153a8:	d001      	beq.n	80153ae <__gethex+0xc4>
 80153aa:	2b70      	cmp	r3, #112	; 0x70
 80153ac:	d140      	bne.n	8015430 <__gethex+0x146>
 80153ae:	7873      	ldrb	r3, [r6, #1]
 80153b0:	2b2b      	cmp	r3, #43	; 0x2b
 80153b2:	d031      	beq.n	8015418 <__gethex+0x12e>
 80153b4:	2b2d      	cmp	r3, #45	; 0x2d
 80153b6:	d033      	beq.n	8015420 <__gethex+0x136>
 80153b8:	1c71      	adds	r1, r6, #1
 80153ba:	f04f 0900 	mov.w	r9, #0
 80153be:	7808      	ldrb	r0, [r1, #0]
 80153c0:	f7ff ff7e 	bl	80152c0 <__hexdig_fun>
 80153c4:	1e43      	subs	r3, r0, #1
 80153c6:	b2db      	uxtb	r3, r3
 80153c8:	2b18      	cmp	r3, #24
 80153ca:	d831      	bhi.n	8015430 <__gethex+0x146>
 80153cc:	f1a0 0210 	sub.w	r2, r0, #16
 80153d0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80153d4:	f7ff ff74 	bl	80152c0 <__hexdig_fun>
 80153d8:	1e43      	subs	r3, r0, #1
 80153da:	b2db      	uxtb	r3, r3
 80153dc:	2b18      	cmp	r3, #24
 80153de:	d922      	bls.n	8015426 <__gethex+0x13c>
 80153e0:	f1b9 0f00 	cmp.w	r9, #0
 80153e4:	d000      	beq.n	80153e8 <__gethex+0xfe>
 80153e6:	4252      	negs	r2, r2
 80153e8:	4414      	add	r4, r2
 80153ea:	f8ca 1000 	str.w	r1, [sl]
 80153ee:	b30d      	cbz	r5, 8015434 <__gethex+0x14a>
 80153f0:	f1bb 0f00 	cmp.w	fp, #0
 80153f4:	bf0c      	ite	eq
 80153f6:	2706      	moveq	r7, #6
 80153f8:	2700      	movne	r7, #0
 80153fa:	4638      	mov	r0, r7
 80153fc:	b00b      	add	sp, #44	; 0x2c
 80153fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015402:	f10b 0b01 	add.w	fp, fp, #1
 8015406:	e78a      	b.n	801531e <__gethex+0x34>
 8015408:	2500      	movs	r5, #0
 801540a:	462c      	mov	r4, r5
 801540c:	e7ae      	b.n	801536c <__gethex+0x82>
 801540e:	463e      	mov	r6, r7
 8015410:	2501      	movs	r5, #1
 8015412:	e7c7      	b.n	80153a4 <__gethex+0xba>
 8015414:	4604      	mov	r4, r0
 8015416:	e7fb      	b.n	8015410 <__gethex+0x126>
 8015418:	f04f 0900 	mov.w	r9, #0
 801541c:	1cb1      	adds	r1, r6, #2
 801541e:	e7ce      	b.n	80153be <__gethex+0xd4>
 8015420:	f04f 0901 	mov.w	r9, #1
 8015424:	e7fa      	b.n	801541c <__gethex+0x132>
 8015426:	230a      	movs	r3, #10
 8015428:	fb03 0202 	mla	r2, r3, r2, r0
 801542c:	3a10      	subs	r2, #16
 801542e:	e7cf      	b.n	80153d0 <__gethex+0xe6>
 8015430:	4631      	mov	r1, r6
 8015432:	e7da      	b.n	80153ea <__gethex+0x100>
 8015434:	1bf3      	subs	r3, r6, r7
 8015436:	3b01      	subs	r3, #1
 8015438:	4629      	mov	r1, r5
 801543a:	2b07      	cmp	r3, #7
 801543c:	dc49      	bgt.n	80154d2 <__gethex+0x1e8>
 801543e:	9802      	ldr	r0, [sp, #8]
 8015440:	f000 fae7 	bl	8015a12 <_Balloc>
 8015444:	9b01      	ldr	r3, [sp, #4]
 8015446:	f100 0914 	add.w	r9, r0, #20
 801544a:	f04f 0b00 	mov.w	fp, #0
 801544e:	f1c3 0301 	rsb	r3, r3, #1
 8015452:	4605      	mov	r5, r0
 8015454:	f8cd 9010 	str.w	r9, [sp, #16]
 8015458:	46da      	mov	sl, fp
 801545a:	9308      	str	r3, [sp, #32]
 801545c:	42b7      	cmp	r7, r6
 801545e:	d33b      	bcc.n	80154d8 <__gethex+0x1ee>
 8015460:	9804      	ldr	r0, [sp, #16]
 8015462:	f840 ab04 	str.w	sl, [r0], #4
 8015466:	eba0 0009 	sub.w	r0, r0, r9
 801546a:	1080      	asrs	r0, r0, #2
 801546c:	6128      	str	r0, [r5, #16]
 801546e:	0147      	lsls	r7, r0, #5
 8015470:	4650      	mov	r0, sl
 8015472:	f000 fb92 	bl	8015b9a <__hi0bits>
 8015476:	f8d8 6000 	ldr.w	r6, [r8]
 801547a:	1a3f      	subs	r7, r7, r0
 801547c:	42b7      	cmp	r7, r6
 801547e:	dd64      	ble.n	801554a <__gethex+0x260>
 8015480:	1bbf      	subs	r7, r7, r6
 8015482:	4639      	mov	r1, r7
 8015484:	4628      	mov	r0, r5
 8015486:	f000 fea1 	bl	80161cc <__any_on>
 801548a:	4682      	mov	sl, r0
 801548c:	b178      	cbz	r0, 80154ae <__gethex+0x1c4>
 801548e:	1e7b      	subs	r3, r7, #1
 8015490:	1159      	asrs	r1, r3, #5
 8015492:	f003 021f 	and.w	r2, r3, #31
 8015496:	f04f 0a01 	mov.w	sl, #1
 801549a:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801549e:	fa0a f202 	lsl.w	r2, sl, r2
 80154a2:	420a      	tst	r2, r1
 80154a4:	d003      	beq.n	80154ae <__gethex+0x1c4>
 80154a6:	4553      	cmp	r3, sl
 80154a8:	dc46      	bgt.n	8015538 <__gethex+0x24e>
 80154aa:	f04f 0a02 	mov.w	sl, #2
 80154ae:	4639      	mov	r1, r7
 80154b0:	4628      	mov	r0, r5
 80154b2:	f7ff fecb 	bl	801524c <rshift>
 80154b6:	443c      	add	r4, r7
 80154b8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80154bc:	42a3      	cmp	r3, r4
 80154be:	da52      	bge.n	8015566 <__gethex+0x27c>
 80154c0:	4629      	mov	r1, r5
 80154c2:	9802      	ldr	r0, [sp, #8]
 80154c4:	f000 fad9 	bl	8015a7a <_Bfree>
 80154c8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80154ca:	2300      	movs	r3, #0
 80154cc:	6013      	str	r3, [r2, #0]
 80154ce:	27a3      	movs	r7, #163	; 0xa3
 80154d0:	e793      	b.n	80153fa <__gethex+0x110>
 80154d2:	3101      	adds	r1, #1
 80154d4:	105b      	asrs	r3, r3, #1
 80154d6:	e7b0      	b.n	801543a <__gethex+0x150>
 80154d8:	1e73      	subs	r3, r6, #1
 80154da:	9305      	str	r3, [sp, #20]
 80154dc:	9a07      	ldr	r2, [sp, #28]
 80154de:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80154e2:	4293      	cmp	r3, r2
 80154e4:	d018      	beq.n	8015518 <__gethex+0x22e>
 80154e6:	f1bb 0f20 	cmp.w	fp, #32
 80154ea:	d107      	bne.n	80154fc <__gethex+0x212>
 80154ec:	9b04      	ldr	r3, [sp, #16]
 80154ee:	f8c3 a000 	str.w	sl, [r3]
 80154f2:	3304      	adds	r3, #4
 80154f4:	f04f 0a00 	mov.w	sl, #0
 80154f8:	9304      	str	r3, [sp, #16]
 80154fa:	46d3      	mov	fp, sl
 80154fc:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8015500:	f7ff fede 	bl	80152c0 <__hexdig_fun>
 8015504:	f000 000f 	and.w	r0, r0, #15
 8015508:	fa00 f00b 	lsl.w	r0, r0, fp
 801550c:	ea4a 0a00 	orr.w	sl, sl, r0
 8015510:	f10b 0b04 	add.w	fp, fp, #4
 8015514:	9b05      	ldr	r3, [sp, #20]
 8015516:	e00d      	b.n	8015534 <__gethex+0x24a>
 8015518:	9b05      	ldr	r3, [sp, #20]
 801551a:	9a08      	ldr	r2, [sp, #32]
 801551c:	4413      	add	r3, r2
 801551e:	42bb      	cmp	r3, r7
 8015520:	d3e1      	bcc.n	80154e6 <__gethex+0x1fc>
 8015522:	4618      	mov	r0, r3
 8015524:	9a01      	ldr	r2, [sp, #4]
 8015526:	9903      	ldr	r1, [sp, #12]
 8015528:	9309      	str	r3, [sp, #36]	; 0x24
 801552a:	f001 fd45 	bl	8016fb8 <strncmp>
 801552e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015530:	2800      	cmp	r0, #0
 8015532:	d1d8      	bne.n	80154e6 <__gethex+0x1fc>
 8015534:	461e      	mov	r6, r3
 8015536:	e791      	b.n	801545c <__gethex+0x172>
 8015538:	1eb9      	subs	r1, r7, #2
 801553a:	4628      	mov	r0, r5
 801553c:	f000 fe46 	bl	80161cc <__any_on>
 8015540:	2800      	cmp	r0, #0
 8015542:	d0b2      	beq.n	80154aa <__gethex+0x1c0>
 8015544:	f04f 0a03 	mov.w	sl, #3
 8015548:	e7b1      	b.n	80154ae <__gethex+0x1c4>
 801554a:	da09      	bge.n	8015560 <__gethex+0x276>
 801554c:	1bf7      	subs	r7, r6, r7
 801554e:	4629      	mov	r1, r5
 8015550:	463a      	mov	r2, r7
 8015552:	9802      	ldr	r0, [sp, #8]
 8015554:	f000 fc5c 	bl	8015e10 <__lshift>
 8015558:	1be4      	subs	r4, r4, r7
 801555a:	4605      	mov	r5, r0
 801555c:	f100 0914 	add.w	r9, r0, #20
 8015560:	f04f 0a00 	mov.w	sl, #0
 8015564:	e7a8      	b.n	80154b8 <__gethex+0x1ce>
 8015566:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801556a:	42a0      	cmp	r0, r4
 801556c:	dd6a      	ble.n	8015644 <__gethex+0x35a>
 801556e:	1b04      	subs	r4, r0, r4
 8015570:	42a6      	cmp	r6, r4
 8015572:	dc2e      	bgt.n	80155d2 <__gethex+0x2e8>
 8015574:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015578:	2b02      	cmp	r3, #2
 801557a:	d022      	beq.n	80155c2 <__gethex+0x2d8>
 801557c:	2b03      	cmp	r3, #3
 801557e:	d024      	beq.n	80155ca <__gethex+0x2e0>
 8015580:	2b01      	cmp	r3, #1
 8015582:	d115      	bne.n	80155b0 <__gethex+0x2c6>
 8015584:	42a6      	cmp	r6, r4
 8015586:	d113      	bne.n	80155b0 <__gethex+0x2c6>
 8015588:	2e01      	cmp	r6, #1
 801558a:	dc0b      	bgt.n	80155a4 <__gethex+0x2ba>
 801558c:	9a06      	ldr	r2, [sp, #24]
 801558e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015592:	6013      	str	r3, [r2, #0]
 8015594:	2301      	movs	r3, #1
 8015596:	612b      	str	r3, [r5, #16]
 8015598:	f8c9 3000 	str.w	r3, [r9]
 801559c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801559e:	2762      	movs	r7, #98	; 0x62
 80155a0:	601d      	str	r5, [r3, #0]
 80155a2:	e72a      	b.n	80153fa <__gethex+0x110>
 80155a4:	1e71      	subs	r1, r6, #1
 80155a6:	4628      	mov	r0, r5
 80155a8:	f000 fe10 	bl	80161cc <__any_on>
 80155ac:	2800      	cmp	r0, #0
 80155ae:	d1ed      	bne.n	801558c <__gethex+0x2a2>
 80155b0:	4629      	mov	r1, r5
 80155b2:	9802      	ldr	r0, [sp, #8]
 80155b4:	f000 fa61 	bl	8015a7a <_Bfree>
 80155b8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80155ba:	2300      	movs	r3, #0
 80155bc:	6013      	str	r3, [r2, #0]
 80155be:	2750      	movs	r7, #80	; 0x50
 80155c0:	e71b      	b.n	80153fa <__gethex+0x110>
 80155c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80155c4:	2b00      	cmp	r3, #0
 80155c6:	d0e1      	beq.n	801558c <__gethex+0x2a2>
 80155c8:	e7f2      	b.n	80155b0 <__gethex+0x2c6>
 80155ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80155cc:	2b00      	cmp	r3, #0
 80155ce:	d1dd      	bne.n	801558c <__gethex+0x2a2>
 80155d0:	e7ee      	b.n	80155b0 <__gethex+0x2c6>
 80155d2:	1e67      	subs	r7, r4, #1
 80155d4:	f1ba 0f00 	cmp.w	sl, #0
 80155d8:	d131      	bne.n	801563e <__gethex+0x354>
 80155da:	b127      	cbz	r7, 80155e6 <__gethex+0x2fc>
 80155dc:	4639      	mov	r1, r7
 80155de:	4628      	mov	r0, r5
 80155e0:	f000 fdf4 	bl	80161cc <__any_on>
 80155e4:	4682      	mov	sl, r0
 80155e6:	117a      	asrs	r2, r7, #5
 80155e8:	2301      	movs	r3, #1
 80155ea:	f007 071f 	and.w	r7, r7, #31
 80155ee:	fa03 f707 	lsl.w	r7, r3, r7
 80155f2:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80155f6:	4621      	mov	r1, r4
 80155f8:	421f      	tst	r7, r3
 80155fa:	4628      	mov	r0, r5
 80155fc:	bf18      	it	ne
 80155fe:	f04a 0a02 	orrne.w	sl, sl, #2
 8015602:	1b36      	subs	r6, r6, r4
 8015604:	f7ff fe22 	bl	801524c <rshift>
 8015608:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801560c:	2702      	movs	r7, #2
 801560e:	f1ba 0f00 	cmp.w	sl, #0
 8015612:	d048      	beq.n	80156a6 <__gethex+0x3bc>
 8015614:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015618:	2b02      	cmp	r3, #2
 801561a:	d015      	beq.n	8015648 <__gethex+0x35e>
 801561c:	2b03      	cmp	r3, #3
 801561e:	d017      	beq.n	8015650 <__gethex+0x366>
 8015620:	2b01      	cmp	r3, #1
 8015622:	d109      	bne.n	8015638 <__gethex+0x34e>
 8015624:	f01a 0f02 	tst.w	sl, #2
 8015628:	d006      	beq.n	8015638 <__gethex+0x34e>
 801562a:	f8d9 3000 	ldr.w	r3, [r9]
 801562e:	ea4a 0a03 	orr.w	sl, sl, r3
 8015632:	f01a 0f01 	tst.w	sl, #1
 8015636:	d10e      	bne.n	8015656 <__gethex+0x36c>
 8015638:	f047 0710 	orr.w	r7, r7, #16
 801563c:	e033      	b.n	80156a6 <__gethex+0x3bc>
 801563e:	f04f 0a01 	mov.w	sl, #1
 8015642:	e7d0      	b.n	80155e6 <__gethex+0x2fc>
 8015644:	2701      	movs	r7, #1
 8015646:	e7e2      	b.n	801560e <__gethex+0x324>
 8015648:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801564a:	f1c3 0301 	rsb	r3, r3, #1
 801564e:	9315      	str	r3, [sp, #84]	; 0x54
 8015650:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015652:	2b00      	cmp	r3, #0
 8015654:	d0f0      	beq.n	8015638 <__gethex+0x34e>
 8015656:	f8d5 9010 	ldr.w	r9, [r5, #16]
 801565a:	f105 0314 	add.w	r3, r5, #20
 801565e:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8015662:	eb03 010a 	add.w	r1, r3, sl
 8015666:	f04f 0c00 	mov.w	ip, #0
 801566a:	4618      	mov	r0, r3
 801566c:	f853 2b04 	ldr.w	r2, [r3], #4
 8015670:	f1b2 3fff 	cmp.w	r2, #4294967295
 8015674:	d01c      	beq.n	80156b0 <__gethex+0x3c6>
 8015676:	3201      	adds	r2, #1
 8015678:	6002      	str	r2, [r0, #0]
 801567a:	2f02      	cmp	r7, #2
 801567c:	f105 0314 	add.w	r3, r5, #20
 8015680:	d138      	bne.n	80156f4 <__gethex+0x40a>
 8015682:	f8d8 2000 	ldr.w	r2, [r8]
 8015686:	3a01      	subs	r2, #1
 8015688:	42b2      	cmp	r2, r6
 801568a:	d10a      	bne.n	80156a2 <__gethex+0x3b8>
 801568c:	1171      	asrs	r1, r6, #5
 801568e:	2201      	movs	r2, #1
 8015690:	f006 061f 	and.w	r6, r6, #31
 8015694:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015698:	fa02 f606 	lsl.w	r6, r2, r6
 801569c:	421e      	tst	r6, r3
 801569e:	bf18      	it	ne
 80156a0:	4617      	movne	r7, r2
 80156a2:	f047 0720 	orr.w	r7, r7, #32
 80156a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80156a8:	601d      	str	r5, [r3, #0]
 80156aa:	9b06      	ldr	r3, [sp, #24]
 80156ac:	601c      	str	r4, [r3, #0]
 80156ae:	e6a4      	b.n	80153fa <__gethex+0x110>
 80156b0:	4299      	cmp	r1, r3
 80156b2:	f843 cc04 	str.w	ip, [r3, #-4]
 80156b6:	d8d8      	bhi.n	801566a <__gethex+0x380>
 80156b8:	68ab      	ldr	r3, [r5, #8]
 80156ba:	4599      	cmp	r9, r3
 80156bc:	db12      	blt.n	80156e4 <__gethex+0x3fa>
 80156be:	6869      	ldr	r1, [r5, #4]
 80156c0:	9802      	ldr	r0, [sp, #8]
 80156c2:	3101      	adds	r1, #1
 80156c4:	f000 f9a5 	bl	8015a12 <_Balloc>
 80156c8:	692a      	ldr	r2, [r5, #16]
 80156ca:	3202      	adds	r2, #2
 80156cc:	f105 010c 	add.w	r1, r5, #12
 80156d0:	4683      	mov	fp, r0
 80156d2:	0092      	lsls	r2, r2, #2
 80156d4:	300c      	adds	r0, #12
 80156d6:	f000 f991 	bl	80159fc <memcpy>
 80156da:	4629      	mov	r1, r5
 80156dc:	9802      	ldr	r0, [sp, #8]
 80156de:	f000 f9cc 	bl	8015a7a <_Bfree>
 80156e2:	465d      	mov	r5, fp
 80156e4:	692b      	ldr	r3, [r5, #16]
 80156e6:	1c5a      	adds	r2, r3, #1
 80156e8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80156ec:	612a      	str	r2, [r5, #16]
 80156ee:	2201      	movs	r2, #1
 80156f0:	615a      	str	r2, [r3, #20]
 80156f2:	e7c2      	b.n	801567a <__gethex+0x390>
 80156f4:	692a      	ldr	r2, [r5, #16]
 80156f6:	454a      	cmp	r2, r9
 80156f8:	dd0b      	ble.n	8015712 <__gethex+0x428>
 80156fa:	2101      	movs	r1, #1
 80156fc:	4628      	mov	r0, r5
 80156fe:	f7ff fda5 	bl	801524c <rshift>
 8015702:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015706:	3401      	adds	r4, #1
 8015708:	42a3      	cmp	r3, r4
 801570a:	f6ff aed9 	blt.w	80154c0 <__gethex+0x1d6>
 801570e:	2701      	movs	r7, #1
 8015710:	e7c7      	b.n	80156a2 <__gethex+0x3b8>
 8015712:	f016 061f 	ands.w	r6, r6, #31
 8015716:	d0fa      	beq.n	801570e <__gethex+0x424>
 8015718:	449a      	add	sl, r3
 801571a:	f1c6 0620 	rsb	r6, r6, #32
 801571e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8015722:	f000 fa3a 	bl	8015b9a <__hi0bits>
 8015726:	42b0      	cmp	r0, r6
 8015728:	dbe7      	blt.n	80156fa <__gethex+0x410>
 801572a:	e7f0      	b.n	801570e <__gethex+0x424>

0801572c <L_shift>:
 801572c:	f1c2 0208 	rsb	r2, r2, #8
 8015730:	0092      	lsls	r2, r2, #2
 8015732:	b570      	push	{r4, r5, r6, lr}
 8015734:	f1c2 0620 	rsb	r6, r2, #32
 8015738:	6843      	ldr	r3, [r0, #4]
 801573a:	6804      	ldr	r4, [r0, #0]
 801573c:	fa03 f506 	lsl.w	r5, r3, r6
 8015740:	432c      	orrs	r4, r5
 8015742:	40d3      	lsrs	r3, r2
 8015744:	6004      	str	r4, [r0, #0]
 8015746:	f840 3f04 	str.w	r3, [r0, #4]!
 801574a:	4288      	cmp	r0, r1
 801574c:	d3f4      	bcc.n	8015738 <L_shift+0xc>
 801574e:	bd70      	pop	{r4, r5, r6, pc}

08015750 <__match>:
 8015750:	b530      	push	{r4, r5, lr}
 8015752:	6803      	ldr	r3, [r0, #0]
 8015754:	3301      	adds	r3, #1
 8015756:	f811 4b01 	ldrb.w	r4, [r1], #1
 801575a:	b914      	cbnz	r4, 8015762 <__match+0x12>
 801575c:	6003      	str	r3, [r0, #0]
 801575e:	2001      	movs	r0, #1
 8015760:	bd30      	pop	{r4, r5, pc}
 8015762:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015766:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801576a:	2d19      	cmp	r5, #25
 801576c:	bf98      	it	ls
 801576e:	3220      	addls	r2, #32
 8015770:	42a2      	cmp	r2, r4
 8015772:	d0f0      	beq.n	8015756 <__match+0x6>
 8015774:	2000      	movs	r0, #0
 8015776:	e7f3      	b.n	8015760 <__match+0x10>

08015778 <__hexnan>:
 8015778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801577c:	680b      	ldr	r3, [r1, #0]
 801577e:	6801      	ldr	r1, [r0, #0]
 8015780:	115f      	asrs	r7, r3, #5
 8015782:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8015786:	f013 031f 	ands.w	r3, r3, #31
 801578a:	b087      	sub	sp, #28
 801578c:	bf18      	it	ne
 801578e:	3704      	addne	r7, #4
 8015790:	2500      	movs	r5, #0
 8015792:	1f3e      	subs	r6, r7, #4
 8015794:	4682      	mov	sl, r0
 8015796:	4690      	mov	r8, r2
 8015798:	9301      	str	r3, [sp, #4]
 801579a:	f847 5c04 	str.w	r5, [r7, #-4]
 801579e:	46b1      	mov	r9, r6
 80157a0:	4634      	mov	r4, r6
 80157a2:	9502      	str	r5, [sp, #8]
 80157a4:	46ab      	mov	fp, r5
 80157a6:	784a      	ldrb	r2, [r1, #1]
 80157a8:	1c4b      	adds	r3, r1, #1
 80157aa:	9303      	str	r3, [sp, #12]
 80157ac:	b342      	cbz	r2, 8015800 <__hexnan+0x88>
 80157ae:	4610      	mov	r0, r2
 80157b0:	9105      	str	r1, [sp, #20]
 80157b2:	9204      	str	r2, [sp, #16]
 80157b4:	f7ff fd84 	bl	80152c0 <__hexdig_fun>
 80157b8:	2800      	cmp	r0, #0
 80157ba:	d143      	bne.n	8015844 <__hexnan+0xcc>
 80157bc:	9a04      	ldr	r2, [sp, #16]
 80157be:	9905      	ldr	r1, [sp, #20]
 80157c0:	2a20      	cmp	r2, #32
 80157c2:	d818      	bhi.n	80157f6 <__hexnan+0x7e>
 80157c4:	9b02      	ldr	r3, [sp, #8]
 80157c6:	459b      	cmp	fp, r3
 80157c8:	dd13      	ble.n	80157f2 <__hexnan+0x7a>
 80157ca:	454c      	cmp	r4, r9
 80157cc:	d206      	bcs.n	80157dc <__hexnan+0x64>
 80157ce:	2d07      	cmp	r5, #7
 80157d0:	dc04      	bgt.n	80157dc <__hexnan+0x64>
 80157d2:	462a      	mov	r2, r5
 80157d4:	4649      	mov	r1, r9
 80157d6:	4620      	mov	r0, r4
 80157d8:	f7ff ffa8 	bl	801572c <L_shift>
 80157dc:	4544      	cmp	r4, r8
 80157de:	d944      	bls.n	801586a <__hexnan+0xf2>
 80157e0:	2300      	movs	r3, #0
 80157e2:	f1a4 0904 	sub.w	r9, r4, #4
 80157e6:	f844 3c04 	str.w	r3, [r4, #-4]
 80157ea:	f8cd b008 	str.w	fp, [sp, #8]
 80157ee:	464c      	mov	r4, r9
 80157f0:	461d      	mov	r5, r3
 80157f2:	9903      	ldr	r1, [sp, #12]
 80157f4:	e7d7      	b.n	80157a6 <__hexnan+0x2e>
 80157f6:	2a29      	cmp	r2, #41	; 0x29
 80157f8:	d14a      	bne.n	8015890 <__hexnan+0x118>
 80157fa:	3102      	adds	r1, #2
 80157fc:	f8ca 1000 	str.w	r1, [sl]
 8015800:	f1bb 0f00 	cmp.w	fp, #0
 8015804:	d044      	beq.n	8015890 <__hexnan+0x118>
 8015806:	454c      	cmp	r4, r9
 8015808:	d206      	bcs.n	8015818 <__hexnan+0xa0>
 801580a:	2d07      	cmp	r5, #7
 801580c:	dc04      	bgt.n	8015818 <__hexnan+0xa0>
 801580e:	462a      	mov	r2, r5
 8015810:	4649      	mov	r1, r9
 8015812:	4620      	mov	r0, r4
 8015814:	f7ff ff8a 	bl	801572c <L_shift>
 8015818:	4544      	cmp	r4, r8
 801581a:	d928      	bls.n	801586e <__hexnan+0xf6>
 801581c:	4643      	mov	r3, r8
 801581e:	f854 2b04 	ldr.w	r2, [r4], #4
 8015822:	f843 2b04 	str.w	r2, [r3], #4
 8015826:	42a6      	cmp	r6, r4
 8015828:	d2f9      	bcs.n	801581e <__hexnan+0xa6>
 801582a:	2200      	movs	r2, #0
 801582c:	f843 2b04 	str.w	r2, [r3], #4
 8015830:	429e      	cmp	r6, r3
 8015832:	d2fb      	bcs.n	801582c <__hexnan+0xb4>
 8015834:	6833      	ldr	r3, [r6, #0]
 8015836:	b91b      	cbnz	r3, 8015840 <__hexnan+0xc8>
 8015838:	4546      	cmp	r6, r8
 801583a:	d127      	bne.n	801588c <__hexnan+0x114>
 801583c:	2301      	movs	r3, #1
 801583e:	6033      	str	r3, [r6, #0]
 8015840:	2005      	movs	r0, #5
 8015842:	e026      	b.n	8015892 <__hexnan+0x11a>
 8015844:	3501      	adds	r5, #1
 8015846:	2d08      	cmp	r5, #8
 8015848:	f10b 0b01 	add.w	fp, fp, #1
 801584c:	dd06      	ble.n	801585c <__hexnan+0xe4>
 801584e:	4544      	cmp	r4, r8
 8015850:	d9cf      	bls.n	80157f2 <__hexnan+0x7a>
 8015852:	2300      	movs	r3, #0
 8015854:	f844 3c04 	str.w	r3, [r4, #-4]
 8015858:	2501      	movs	r5, #1
 801585a:	3c04      	subs	r4, #4
 801585c:	6822      	ldr	r2, [r4, #0]
 801585e:	f000 000f 	and.w	r0, r0, #15
 8015862:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8015866:	6020      	str	r0, [r4, #0]
 8015868:	e7c3      	b.n	80157f2 <__hexnan+0x7a>
 801586a:	2508      	movs	r5, #8
 801586c:	e7c1      	b.n	80157f2 <__hexnan+0x7a>
 801586e:	9b01      	ldr	r3, [sp, #4]
 8015870:	2b00      	cmp	r3, #0
 8015872:	d0df      	beq.n	8015834 <__hexnan+0xbc>
 8015874:	f04f 32ff 	mov.w	r2, #4294967295
 8015878:	f1c3 0320 	rsb	r3, r3, #32
 801587c:	fa22 f303 	lsr.w	r3, r2, r3
 8015880:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8015884:	401a      	ands	r2, r3
 8015886:	f847 2c04 	str.w	r2, [r7, #-4]
 801588a:	e7d3      	b.n	8015834 <__hexnan+0xbc>
 801588c:	3e04      	subs	r6, #4
 801588e:	e7d1      	b.n	8015834 <__hexnan+0xbc>
 8015890:	2004      	movs	r0, #4
 8015892:	b007      	add	sp, #28
 8015894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015898 <__locale_ctype_ptr_l>:
 8015898:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 801589c:	4770      	bx	lr
	...

080158a0 <__locale_ctype_ptr>:
 80158a0:	4b04      	ldr	r3, [pc, #16]	; (80158b4 <__locale_ctype_ptr+0x14>)
 80158a2:	4a05      	ldr	r2, [pc, #20]	; (80158b8 <__locale_ctype_ptr+0x18>)
 80158a4:	681b      	ldr	r3, [r3, #0]
 80158a6:	6a1b      	ldr	r3, [r3, #32]
 80158a8:	2b00      	cmp	r3, #0
 80158aa:	bf08      	it	eq
 80158ac:	4613      	moveq	r3, r2
 80158ae:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 80158b2:	4770      	bx	lr
 80158b4:	2000000c 	.word	0x2000000c
 80158b8:	20000070 	.word	0x20000070

080158bc <__localeconv_l>:
 80158bc:	30f0      	adds	r0, #240	; 0xf0
 80158be:	4770      	bx	lr

080158c0 <_localeconv_r>:
 80158c0:	4b04      	ldr	r3, [pc, #16]	; (80158d4 <_localeconv_r+0x14>)
 80158c2:	681b      	ldr	r3, [r3, #0]
 80158c4:	6a18      	ldr	r0, [r3, #32]
 80158c6:	4b04      	ldr	r3, [pc, #16]	; (80158d8 <_localeconv_r+0x18>)
 80158c8:	2800      	cmp	r0, #0
 80158ca:	bf08      	it	eq
 80158cc:	4618      	moveq	r0, r3
 80158ce:	30f0      	adds	r0, #240	; 0xf0
 80158d0:	4770      	bx	lr
 80158d2:	bf00      	nop
 80158d4:	2000000c 	.word	0x2000000c
 80158d8:	20000070 	.word	0x20000070

080158dc <_lseek_r>:
 80158dc:	b538      	push	{r3, r4, r5, lr}
 80158de:	4c07      	ldr	r4, [pc, #28]	; (80158fc <_lseek_r+0x20>)
 80158e0:	4605      	mov	r5, r0
 80158e2:	4608      	mov	r0, r1
 80158e4:	4611      	mov	r1, r2
 80158e6:	2200      	movs	r2, #0
 80158e8:	6022      	str	r2, [r4, #0]
 80158ea:	461a      	mov	r2, r3
 80158ec:	f7ef fd3c 	bl	8005368 <_lseek>
 80158f0:	1c43      	adds	r3, r0, #1
 80158f2:	d102      	bne.n	80158fa <_lseek_r+0x1e>
 80158f4:	6823      	ldr	r3, [r4, #0]
 80158f6:	b103      	cbz	r3, 80158fa <_lseek_r+0x1e>
 80158f8:	602b      	str	r3, [r5, #0]
 80158fa:	bd38      	pop	{r3, r4, r5, pc}
 80158fc:	20023e00 	.word	0x20023e00

08015900 <__swhatbuf_r>:
 8015900:	b570      	push	{r4, r5, r6, lr}
 8015902:	460e      	mov	r6, r1
 8015904:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015908:	2900      	cmp	r1, #0
 801590a:	b096      	sub	sp, #88	; 0x58
 801590c:	4614      	mov	r4, r2
 801590e:	461d      	mov	r5, r3
 8015910:	da07      	bge.n	8015922 <__swhatbuf_r+0x22>
 8015912:	2300      	movs	r3, #0
 8015914:	602b      	str	r3, [r5, #0]
 8015916:	89b3      	ldrh	r3, [r6, #12]
 8015918:	061a      	lsls	r2, r3, #24
 801591a:	d410      	bmi.n	801593e <__swhatbuf_r+0x3e>
 801591c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015920:	e00e      	b.n	8015940 <__swhatbuf_r+0x40>
 8015922:	466a      	mov	r2, sp
 8015924:	f001 fc2e 	bl	8017184 <_fstat_r>
 8015928:	2800      	cmp	r0, #0
 801592a:	dbf2      	blt.n	8015912 <__swhatbuf_r+0x12>
 801592c:	9a01      	ldr	r2, [sp, #4]
 801592e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015932:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015936:	425a      	negs	r2, r3
 8015938:	415a      	adcs	r2, r3
 801593a:	602a      	str	r2, [r5, #0]
 801593c:	e7ee      	b.n	801591c <__swhatbuf_r+0x1c>
 801593e:	2340      	movs	r3, #64	; 0x40
 8015940:	2000      	movs	r0, #0
 8015942:	6023      	str	r3, [r4, #0]
 8015944:	b016      	add	sp, #88	; 0x58
 8015946:	bd70      	pop	{r4, r5, r6, pc}

08015948 <__smakebuf_r>:
 8015948:	898b      	ldrh	r3, [r1, #12]
 801594a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801594c:	079d      	lsls	r5, r3, #30
 801594e:	4606      	mov	r6, r0
 8015950:	460c      	mov	r4, r1
 8015952:	d507      	bpl.n	8015964 <__smakebuf_r+0x1c>
 8015954:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015958:	6023      	str	r3, [r4, #0]
 801595a:	6123      	str	r3, [r4, #16]
 801595c:	2301      	movs	r3, #1
 801595e:	6163      	str	r3, [r4, #20]
 8015960:	b002      	add	sp, #8
 8015962:	bd70      	pop	{r4, r5, r6, pc}
 8015964:	ab01      	add	r3, sp, #4
 8015966:	466a      	mov	r2, sp
 8015968:	f7ff ffca 	bl	8015900 <__swhatbuf_r>
 801596c:	9900      	ldr	r1, [sp, #0]
 801596e:	4605      	mov	r5, r0
 8015970:	4630      	mov	r0, r6
 8015972:	f000 fca9 	bl	80162c8 <_malloc_r>
 8015976:	b948      	cbnz	r0, 801598c <__smakebuf_r+0x44>
 8015978:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801597c:	059a      	lsls	r2, r3, #22
 801597e:	d4ef      	bmi.n	8015960 <__smakebuf_r+0x18>
 8015980:	f023 0303 	bic.w	r3, r3, #3
 8015984:	f043 0302 	orr.w	r3, r3, #2
 8015988:	81a3      	strh	r3, [r4, #12]
 801598a:	e7e3      	b.n	8015954 <__smakebuf_r+0xc>
 801598c:	4b0d      	ldr	r3, [pc, #52]	; (80159c4 <__smakebuf_r+0x7c>)
 801598e:	62b3      	str	r3, [r6, #40]	; 0x28
 8015990:	89a3      	ldrh	r3, [r4, #12]
 8015992:	6020      	str	r0, [r4, #0]
 8015994:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015998:	81a3      	strh	r3, [r4, #12]
 801599a:	9b00      	ldr	r3, [sp, #0]
 801599c:	6163      	str	r3, [r4, #20]
 801599e:	9b01      	ldr	r3, [sp, #4]
 80159a0:	6120      	str	r0, [r4, #16]
 80159a2:	b15b      	cbz	r3, 80159bc <__smakebuf_r+0x74>
 80159a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80159a8:	4630      	mov	r0, r6
 80159aa:	f001 fbfd 	bl	80171a8 <_isatty_r>
 80159ae:	b128      	cbz	r0, 80159bc <__smakebuf_r+0x74>
 80159b0:	89a3      	ldrh	r3, [r4, #12]
 80159b2:	f023 0303 	bic.w	r3, r3, #3
 80159b6:	f043 0301 	orr.w	r3, r3, #1
 80159ba:	81a3      	strh	r3, [r4, #12]
 80159bc:	89a3      	ldrh	r3, [r4, #12]
 80159be:	431d      	orrs	r5, r3
 80159c0:	81a5      	strh	r5, [r4, #12]
 80159c2:	e7cd      	b.n	8015960 <__smakebuf_r+0x18>
 80159c4:	08015101 	.word	0x08015101

080159c8 <malloc>:
 80159c8:	4b02      	ldr	r3, [pc, #8]	; (80159d4 <malloc+0xc>)
 80159ca:	4601      	mov	r1, r0
 80159cc:	6818      	ldr	r0, [r3, #0]
 80159ce:	f000 bc7b 	b.w	80162c8 <_malloc_r>
 80159d2:	bf00      	nop
 80159d4:	2000000c 	.word	0x2000000c

080159d8 <__ascii_mbtowc>:
 80159d8:	b082      	sub	sp, #8
 80159da:	b901      	cbnz	r1, 80159de <__ascii_mbtowc+0x6>
 80159dc:	a901      	add	r1, sp, #4
 80159de:	b142      	cbz	r2, 80159f2 <__ascii_mbtowc+0x1a>
 80159e0:	b14b      	cbz	r3, 80159f6 <__ascii_mbtowc+0x1e>
 80159e2:	7813      	ldrb	r3, [r2, #0]
 80159e4:	600b      	str	r3, [r1, #0]
 80159e6:	7812      	ldrb	r2, [r2, #0]
 80159e8:	1c10      	adds	r0, r2, #0
 80159ea:	bf18      	it	ne
 80159ec:	2001      	movne	r0, #1
 80159ee:	b002      	add	sp, #8
 80159f0:	4770      	bx	lr
 80159f2:	4610      	mov	r0, r2
 80159f4:	e7fb      	b.n	80159ee <__ascii_mbtowc+0x16>
 80159f6:	f06f 0001 	mvn.w	r0, #1
 80159fa:	e7f8      	b.n	80159ee <__ascii_mbtowc+0x16>

080159fc <memcpy>:
 80159fc:	b510      	push	{r4, lr}
 80159fe:	1e43      	subs	r3, r0, #1
 8015a00:	440a      	add	r2, r1
 8015a02:	4291      	cmp	r1, r2
 8015a04:	d100      	bne.n	8015a08 <memcpy+0xc>
 8015a06:	bd10      	pop	{r4, pc}
 8015a08:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015a0c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015a10:	e7f7      	b.n	8015a02 <memcpy+0x6>

08015a12 <_Balloc>:
 8015a12:	b570      	push	{r4, r5, r6, lr}
 8015a14:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8015a16:	4604      	mov	r4, r0
 8015a18:	460e      	mov	r6, r1
 8015a1a:	b93d      	cbnz	r5, 8015a2c <_Balloc+0x1a>
 8015a1c:	2010      	movs	r0, #16
 8015a1e:	f7ff ffd3 	bl	80159c8 <malloc>
 8015a22:	6260      	str	r0, [r4, #36]	; 0x24
 8015a24:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8015a28:	6005      	str	r5, [r0, #0]
 8015a2a:	60c5      	str	r5, [r0, #12]
 8015a2c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8015a2e:	68eb      	ldr	r3, [r5, #12]
 8015a30:	b183      	cbz	r3, 8015a54 <_Balloc+0x42>
 8015a32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015a34:	68db      	ldr	r3, [r3, #12]
 8015a36:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8015a3a:	b9b8      	cbnz	r0, 8015a6c <_Balloc+0x5a>
 8015a3c:	2101      	movs	r1, #1
 8015a3e:	fa01 f506 	lsl.w	r5, r1, r6
 8015a42:	1d6a      	adds	r2, r5, #5
 8015a44:	0092      	lsls	r2, r2, #2
 8015a46:	4620      	mov	r0, r4
 8015a48:	f000 fbe1 	bl	801620e <_calloc_r>
 8015a4c:	b160      	cbz	r0, 8015a68 <_Balloc+0x56>
 8015a4e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8015a52:	e00e      	b.n	8015a72 <_Balloc+0x60>
 8015a54:	2221      	movs	r2, #33	; 0x21
 8015a56:	2104      	movs	r1, #4
 8015a58:	4620      	mov	r0, r4
 8015a5a:	f000 fbd8 	bl	801620e <_calloc_r>
 8015a5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015a60:	60e8      	str	r0, [r5, #12]
 8015a62:	68db      	ldr	r3, [r3, #12]
 8015a64:	2b00      	cmp	r3, #0
 8015a66:	d1e4      	bne.n	8015a32 <_Balloc+0x20>
 8015a68:	2000      	movs	r0, #0
 8015a6a:	bd70      	pop	{r4, r5, r6, pc}
 8015a6c:	6802      	ldr	r2, [r0, #0]
 8015a6e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8015a72:	2300      	movs	r3, #0
 8015a74:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015a78:	e7f7      	b.n	8015a6a <_Balloc+0x58>

08015a7a <_Bfree>:
 8015a7a:	b570      	push	{r4, r5, r6, lr}
 8015a7c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8015a7e:	4606      	mov	r6, r0
 8015a80:	460d      	mov	r5, r1
 8015a82:	b93c      	cbnz	r4, 8015a94 <_Bfree+0x1a>
 8015a84:	2010      	movs	r0, #16
 8015a86:	f7ff ff9f 	bl	80159c8 <malloc>
 8015a8a:	6270      	str	r0, [r6, #36]	; 0x24
 8015a8c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015a90:	6004      	str	r4, [r0, #0]
 8015a92:	60c4      	str	r4, [r0, #12]
 8015a94:	b13d      	cbz	r5, 8015aa6 <_Bfree+0x2c>
 8015a96:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8015a98:	686a      	ldr	r2, [r5, #4]
 8015a9a:	68db      	ldr	r3, [r3, #12]
 8015a9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015aa0:	6029      	str	r1, [r5, #0]
 8015aa2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8015aa6:	bd70      	pop	{r4, r5, r6, pc}

08015aa8 <__multadd>:
 8015aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015aac:	690d      	ldr	r5, [r1, #16]
 8015aae:	461f      	mov	r7, r3
 8015ab0:	4606      	mov	r6, r0
 8015ab2:	460c      	mov	r4, r1
 8015ab4:	f101 0c14 	add.w	ip, r1, #20
 8015ab8:	2300      	movs	r3, #0
 8015aba:	f8dc 0000 	ldr.w	r0, [ip]
 8015abe:	b281      	uxth	r1, r0
 8015ac0:	fb02 7101 	mla	r1, r2, r1, r7
 8015ac4:	0c0f      	lsrs	r7, r1, #16
 8015ac6:	0c00      	lsrs	r0, r0, #16
 8015ac8:	fb02 7000 	mla	r0, r2, r0, r7
 8015acc:	b289      	uxth	r1, r1
 8015ace:	3301      	adds	r3, #1
 8015ad0:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8015ad4:	429d      	cmp	r5, r3
 8015ad6:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8015ada:	f84c 1b04 	str.w	r1, [ip], #4
 8015ade:	dcec      	bgt.n	8015aba <__multadd+0x12>
 8015ae0:	b1d7      	cbz	r7, 8015b18 <__multadd+0x70>
 8015ae2:	68a3      	ldr	r3, [r4, #8]
 8015ae4:	42ab      	cmp	r3, r5
 8015ae6:	dc12      	bgt.n	8015b0e <__multadd+0x66>
 8015ae8:	6861      	ldr	r1, [r4, #4]
 8015aea:	4630      	mov	r0, r6
 8015aec:	3101      	adds	r1, #1
 8015aee:	f7ff ff90 	bl	8015a12 <_Balloc>
 8015af2:	6922      	ldr	r2, [r4, #16]
 8015af4:	3202      	adds	r2, #2
 8015af6:	f104 010c 	add.w	r1, r4, #12
 8015afa:	4680      	mov	r8, r0
 8015afc:	0092      	lsls	r2, r2, #2
 8015afe:	300c      	adds	r0, #12
 8015b00:	f7ff ff7c 	bl	80159fc <memcpy>
 8015b04:	4621      	mov	r1, r4
 8015b06:	4630      	mov	r0, r6
 8015b08:	f7ff ffb7 	bl	8015a7a <_Bfree>
 8015b0c:	4644      	mov	r4, r8
 8015b0e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015b12:	3501      	adds	r5, #1
 8015b14:	615f      	str	r7, [r3, #20]
 8015b16:	6125      	str	r5, [r4, #16]
 8015b18:	4620      	mov	r0, r4
 8015b1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015b1e <__s2b>:
 8015b1e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015b22:	460c      	mov	r4, r1
 8015b24:	4615      	mov	r5, r2
 8015b26:	461f      	mov	r7, r3
 8015b28:	2209      	movs	r2, #9
 8015b2a:	3308      	adds	r3, #8
 8015b2c:	4606      	mov	r6, r0
 8015b2e:	fb93 f3f2 	sdiv	r3, r3, r2
 8015b32:	2100      	movs	r1, #0
 8015b34:	2201      	movs	r2, #1
 8015b36:	429a      	cmp	r2, r3
 8015b38:	db20      	blt.n	8015b7c <__s2b+0x5e>
 8015b3a:	4630      	mov	r0, r6
 8015b3c:	f7ff ff69 	bl	8015a12 <_Balloc>
 8015b40:	9b08      	ldr	r3, [sp, #32]
 8015b42:	6143      	str	r3, [r0, #20]
 8015b44:	2d09      	cmp	r5, #9
 8015b46:	f04f 0301 	mov.w	r3, #1
 8015b4a:	6103      	str	r3, [r0, #16]
 8015b4c:	dd19      	ble.n	8015b82 <__s2b+0x64>
 8015b4e:	f104 0809 	add.w	r8, r4, #9
 8015b52:	46c1      	mov	r9, r8
 8015b54:	442c      	add	r4, r5
 8015b56:	f819 3b01 	ldrb.w	r3, [r9], #1
 8015b5a:	4601      	mov	r1, r0
 8015b5c:	3b30      	subs	r3, #48	; 0x30
 8015b5e:	220a      	movs	r2, #10
 8015b60:	4630      	mov	r0, r6
 8015b62:	f7ff ffa1 	bl	8015aa8 <__multadd>
 8015b66:	45a1      	cmp	r9, r4
 8015b68:	d1f5      	bne.n	8015b56 <__s2b+0x38>
 8015b6a:	eb08 0405 	add.w	r4, r8, r5
 8015b6e:	3c08      	subs	r4, #8
 8015b70:	1b2d      	subs	r5, r5, r4
 8015b72:	1963      	adds	r3, r4, r5
 8015b74:	42bb      	cmp	r3, r7
 8015b76:	db07      	blt.n	8015b88 <__s2b+0x6a>
 8015b78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015b7c:	0052      	lsls	r2, r2, #1
 8015b7e:	3101      	adds	r1, #1
 8015b80:	e7d9      	b.n	8015b36 <__s2b+0x18>
 8015b82:	340a      	adds	r4, #10
 8015b84:	2509      	movs	r5, #9
 8015b86:	e7f3      	b.n	8015b70 <__s2b+0x52>
 8015b88:	f814 3b01 	ldrb.w	r3, [r4], #1
 8015b8c:	4601      	mov	r1, r0
 8015b8e:	3b30      	subs	r3, #48	; 0x30
 8015b90:	220a      	movs	r2, #10
 8015b92:	4630      	mov	r0, r6
 8015b94:	f7ff ff88 	bl	8015aa8 <__multadd>
 8015b98:	e7eb      	b.n	8015b72 <__s2b+0x54>

08015b9a <__hi0bits>:
 8015b9a:	0c02      	lsrs	r2, r0, #16
 8015b9c:	0412      	lsls	r2, r2, #16
 8015b9e:	4603      	mov	r3, r0
 8015ba0:	b9b2      	cbnz	r2, 8015bd0 <__hi0bits+0x36>
 8015ba2:	0403      	lsls	r3, r0, #16
 8015ba4:	2010      	movs	r0, #16
 8015ba6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8015baa:	bf04      	itt	eq
 8015bac:	021b      	lsleq	r3, r3, #8
 8015bae:	3008      	addeq	r0, #8
 8015bb0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8015bb4:	bf04      	itt	eq
 8015bb6:	011b      	lsleq	r3, r3, #4
 8015bb8:	3004      	addeq	r0, #4
 8015bba:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8015bbe:	bf04      	itt	eq
 8015bc0:	009b      	lsleq	r3, r3, #2
 8015bc2:	3002      	addeq	r0, #2
 8015bc4:	2b00      	cmp	r3, #0
 8015bc6:	db06      	blt.n	8015bd6 <__hi0bits+0x3c>
 8015bc8:	005b      	lsls	r3, r3, #1
 8015bca:	d503      	bpl.n	8015bd4 <__hi0bits+0x3a>
 8015bcc:	3001      	adds	r0, #1
 8015bce:	4770      	bx	lr
 8015bd0:	2000      	movs	r0, #0
 8015bd2:	e7e8      	b.n	8015ba6 <__hi0bits+0xc>
 8015bd4:	2020      	movs	r0, #32
 8015bd6:	4770      	bx	lr

08015bd8 <__lo0bits>:
 8015bd8:	6803      	ldr	r3, [r0, #0]
 8015bda:	f013 0207 	ands.w	r2, r3, #7
 8015bde:	4601      	mov	r1, r0
 8015be0:	d00b      	beq.n	8015bfa <__lo0bits+0x22>
 8015be2:	07da      	lsls	r2, r3, #31
 8015be4:	d423      	bmi.n	8015c2e <__lo0bits+0x56>
 8015be6:	0798      	lsls	r0, r3, #30
 8015be8:	bf49      	itett	mi
 8015bea:	085b      	lsrmi	r3, r3, #1
 8015bec:	089b      	lsrpl	r3, r3, #2
 8015bee:	2001      	movmi	r0, #1
 8015bf0:	600b      	strmi	r3, [r1, #0]
 8015bf2:	bf5c      	itt	pl
 8015bf4:	600b      	strpl	r3, [r1, #0]
 8015bf6:	2002      	movpl	r0, #2
 8015bf8:	4770      	bx	lr
 8015bfa:	b298      	uxth	r0, r3
 8015bfc:	b9a8      	cbnz	r0, 8015c2a <__lo0bits+0x52>
 8015bfe:	0c1b      	lsrs	r3, r3, #16
 8015c00:	2010      	movs	r0, #16
 8015c02:	f013 0fff 	tst.w	r3, #255	; 0xff
 8015c06:	bf04      	itt	eq
 8015c08:	0a1b      	lsreq	r3, r3, #8
 8015c0a:	3008      	addeq	r0, #8
 8015c0c:	071a      	lsls	r2, r3, #28
 8015c0e:	bf04      	itt	eq
 8015c10:	091b      	lsreq	r3, r3, #4
 8015c12:	3004      	addeq	r0, #4
 8015c14:	079a      	lsls	r2, r3, #30
 8015c16:	bf04      	itt	eq
 8015c18:	089b      	lsreq	r3, r3, #2
 8015c1a:	3002      	addeq	r0, #2
 8015c1c:	07da      	lsls	r2, r3, #31
 8015c1e:	d402      	bmi.n	8015c26 <__lo0bits+0x4e>
 8015c20:	085b      	lsrs	r3, r3, #1
 8015c22:	d006      	beq.n	8015c32 <__lo0bits+0x5a>
 8015c24:	3001      	adds	r0, #1
 8015c26:	600b      	str	r3, [r1, #0]
 8015c28:	4770      	bx	lr
 8015c2a:	4610      	mov	r0, r2
 8015c2c:	e7e9      	b.n	8015c02 <__lo0bits+0x2a>
 8015c2e:	2000      	movs	r0, #0
 8015c30:	4770      	bx	lr
 8015c32:	2020      	movs	r0, #32
 8015c34:	4770      	bx	lr

08015c36 <__i2b>:
 8015c36:	b510      	push	{r4, lr}
 8015c38:	460c      	mov	r4, r1
 8015c3a:	2101      	movs	r1, #1
 8015c3c:	f7ff fee9 	bl	8015a12 <_Balloc>
 8015c40:	2201      	movs	r2, #1
 8015c42:	6144      	str	r4, [r0, #20]
 8015c44:	6102      	str	r2, [r0, #16]
 8015c46:	bd10      	pop	{r4, pc}

08015c48 <__multiply>:
 8015c48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c4c:	4614      	mov	r4, r2
 8015c4e:	690a      	ldr	r2, [r1, #16]
 8015c50:	6923      	ldr	r3, [r4, #16]
 8015c52:	429a      	cmp	r2, r3
 8015c54:	bfb8      	it	lt
 8015c56:	460b      	movlt	r3, r1
 8015c58:	4688      	mov	r8, r1
 8015c5a:	bfbc      	itt	lt
 8015c5c:	46a0      	movlt	r8, r4
 8015c5e:	461c      	movlt	r4, r3
 8015c60:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8015c64:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8015c68:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015c6c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8015c70:	eb07 0609 	add.w	r6, r7, r9
 8015c74:	42b3      	cmp	r3, r6
 8015c76:	bfb8      	it	lt
 8015c78:	3101      	addlt	r1, #1
 8015c7a:	f7ff feca 	bl	8015a12 <_Balloc>
 8015c7e:	f100 0514 	add.w	r5, r0, #20
 8015c82:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8015c86:	462b      	mov	r3, r5
 8015c88:	2200      	movs	r2, #0
 8015c8a:	4573      	cmp	r3, lr
 8015c8c:	d316      	bcc.n	8015cbc <__multiply+0x74>
 8015c8e:	f104 0214 	add.w	r2, r4, #20
 8015c92:	f108 0114 	add.w	r1, r8, #20
 8015c96:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8015c9a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8015c9e:	9300      	str	r3, [sp, #0]
 8015ca0:	9b00      	ldr	r3, [sp, #0]
 8015ca2:	9201      	str	r2, [sp, #4]
 8015ca4:	4293      	cmp	r3, r2
 8015ca6:	d80c      	bhi.n	8015cc2 <__multiply+0x7a>
 8015ca8:	2e00      	cmp	r6, #0
 8015caa:	dd03      	ble.n	8015cb4 <__multiply+0x6c>
 8015cac:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8015cb0:	2b00      	cmp	r3, #0
 8015cb2:	d05d      	beq.n	8015d70 <__multiply+0x128>
 8015cb4:	6106      	str	r6, [r0, #16]
 8015cb6:	b003      	add	sp, #12
 8015cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015cbc:	f843 2b04 	str.w	r2, [r3], #4
 8015cc0:	e7e3      	b.n	8015c8a <__multiply+0x42>
 8015cc2:	f8b2 b000 	ldrh.w	fp, [r2]
 8015cc6:	f1bb 0f00 	cmp.w	fp, #0
 8015cca:	d023      	beq.n	8015d14 <__multiply+0xcc>
 8015ccc:	4689      	mov	r9, r1
 8015cce:	46ac      	mov	ip, r5
 8015cd0:	f04f 0800 	mov.w	r8, #0
 8015cd4:	f859 4b04 	ldr.w	r4, [r9], #4
 8015cd8:	f8dc a000 	ldr.w	sl, [ip]
 8015cdc:	b2a3      	uxth	r3, r4
 8015cde:	fa1f fa8a 	uxth.w	sl, sl
 8015ce2:	fb0b a303 	mla	r3, fp, r3, sl
 8015ce6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8015cea:	f8dc 4000 	ldr.w	r4, [ip]
 8015cee:	4443      	add	r3, r8
 8015cf0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8015cf4:	fb0b 840a 	mla	r4, fp, sl, r8
 8015cf8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8015cfc:	46e2      	mov	sl, ip
 8015cfe:	b29b      	uxth	r3, r3
 8015d00:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8015d04:	454f      	cmp	r7, r9
 8015d06:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8015d0a:	f84a 3b04 	str.w	r3, [sl], #4
 8015d0e:	d82b      	bhi.n	8015d68 <__multiply+0x120>
 8015d10:	f8cc 8004 	str.w	r8, [ip, #4]
 8015d14:	9b01      	ldr	r3, [sp, #4]
 8015d16:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8015d1a:	3204      	adds	r2, #4
 8015d1c:	f1ba 0f00 	cmp.w	sl, #0
 8015d20:	d020      	beq.n	8015d64 <__multiply+0x11c>
 8015d22:	682b      	ldr	r3, [r5, #0]
 8015d24:	4689      	mov	r9, r1
 8015d26:	46a8      	mov	r8, r5
 8015d28:	f04f 0b00 	mov.w	fp, #0
 8015d2c:	f8b9 c000 	ldrh.w	ip, [r9]
 8015d30:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8015d34:	fb0a 440c 	mla	r4, sl, ip, r4
 8015d38:	445c      	add	r4, fp
 8015d3a:	46c4      	mov	ip, r8
 8015d3c:	b29b      	uxth	r3, r3
 8015d3e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8015d42:	f84c 3b04 	str.w	r3, [ip], #4
 8015d46:	f859 3b04 	ldr.w	r3, [r9], #4
 8015d4a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8015d4e:	0c1b      	lsrs	r3, r3, #16
 8015d50:	fb0a b303 	mla	r3, sl, r3, fp
 8015d54:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8015d58:	454f      	cmp	r7, r9
 8015d5a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8015d5e:	d805      	bhi.n	8015d6c <__multiply+0x124>
 8015d60:	f8c8 3004 	str.w	r3, [r8, #4]
 8015d64:	3504      	adds	r5, #4
 8015d66:	e79b      	b.n	8015ca0 <__multiply+0x58>
 8015d68:	46d4      	mov	ip, sl
 8015d6a:	e7b3      	b.n	8015cd4 <__multiply+0x8c>
 8015d6c:	46e0      	mov	r8, ip
 8015d6e:	e7dd      	b.n	8015d2c <__multiply+0xe4>
 8015d70:	3e01      	subs	r6, #1
 8015d72:	e799      	b.n	8015ca8 <__multiply+0x60>

08015d74 <__pow5mult>:
 8015d74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015d78:	4615      	mov	r5, r2
 8015d7a:	f012 0203 	ands.w	r2, r2, #3
 8015d7e:	4606      	mov	r6, r0
 8015d80:	460f      	mov	r7, r1
 8015d82:	d007      	beq.n	8015d94 <__pow5mult+0x20>
 8015d84:	3a01      	subs	r2, #1
 8015d86:	4c21      	ldr	r4, [pc, #132]	; (8015e0c <__pow5mult+0x98>)
 8015d88:	2300      	movs	r3, #0
 8015d8a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015d8e:	f7ff fe8b 	bl	8015aa8 <__multadd>
 8015d92:	4607      	mov	r7, r0
 8015d94:	10ad      	asrs	r5, r5, #2
 8015d96:	d035      	beq.n	8015e04 <__pow5mult+0x90>
 8015d98:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8015d9a:	b93c      	cbnz	r4, 8015dac <__pow5mult+0x38>
 8015d9c:	2010      	movs	r0, #16
 8015d9e:	f7ff fe13 	bl	80159c8 <malloc>
 8015da2:	6270      	str	r0, [r6, #36]	; 0x24
 8015da4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015da8:	6004      	str	r4, [r0, #0]
 8015daa:	60c4      	str	r4, [r0, #12]
 8015dac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8015db0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015db4:	b94c      	cbnz	r4, 8015dca <__pow5mult+0x56>
 8015db6:	f240 2171 	movw	r1, #625	; 0x271
 8015dba:	4630      	mov	r0, r6
 8015dbc:	f7ff ff3b 	bl	8015c36 <__i2b>
 8015dc0:	2300      	movs	r3, #0
 8015dc2:	f8c8 0008 	str.w	r0, [r8, #8]
 8015dc6:	4604      	mov	r4, r0
 8015dc8:	6003      	str	r3, [r0, #0]
 8015dca:	f04f 0800 	mov.w	r8, #0
 8015dce:	07eb      	lsls	r3, r5, #31
 8015dd0:	d50a      	bpl.n	8015de8 <__pow5mult+0x74>
 8015dd2:	4639      	mov	r1, r7
 8015dd4:	4622      	mov	r2, r4
 8015dd6:	4630      	mov	r0, r6
 8015dd8:	f7ff ff36 	bl	8015c48 <__multiply>
 8015ddc:	4639      	mov	r1, r7
 8015dde:	4681      	mov	r9, r0
 8015de0:	4630      	mov	r0, r6
 8015de2:	f7ff fe4a 	bl	8015a7a <_Bfree>
 8015de6:	464f      	mov	r7, r9
 8015de8:	106d      	asrs	r5, r5, #1
 8015dea:	d00b      	beq.n	8015e04 <__pow5mult+0x90>
 8015dec:	6820      	ldr	r0, [r4, #0]
 8015dee:	b938      	cbnz	r0, 8015e00 <__pow5mult+0x8c>
 8015df0:	4622      	mov	r2, r4
 8015df2:	4621      	mov	r1, r4
 8015df4:	4630      	mov	r0, r6
 8015df6:	f7ff ff27 	bl	8015c48 <__multiply>
 8015dfa:	6020      	str	r0, [r4, #0]
 8015dfc:	f8c0 8000 	str.w	r8, [r0]
 8015e00:	4604      	mov	r4, r0
 8015e02:	e7e4      	b.n	8015dce <__pow5mult+0x5a>
 8015e04:	4638      	mov	r0, r7
 8015e06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015e0a:	bf00      	nop
 8015e0c:	08017cd0 	.word	0x08017cd0

08015e10 <__lshift>:
 8015e10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015e14:	460c      	mov	r4, r1
 8015e16:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015e1a:	6923      	ldr	r3, [r4, #16]
 8015e1c:	6849      	ldr	r1, [r1, #4]
 8015e1e:	eb0a 0903 	add.w	r9, sl, r3
 8015e22:	68a3      	ldr	r3, [r4, #8]
 8015e24:	4607      	mov	r7, r0
 8015e26:	4616      	mov	r6, r2
 8015e28:	f109 0501 	add.w	r5, r9, #1
 8015e2c:	42ab      	cmp	r3, r5
 8015e2e:	db32      	blt.n	8015e96 <__lshift+0x86>
 8015e30:	4638      	mov	r0, r7
 8015e32:	f7ff fdee 	bl	8015a12 <_Balloc>
 8015e36:	2300      	movs	r3, #0
 8015e38:	4680      	mov	r8, r0
 8015e3a:	f100 0114 	add.w	r1, r0, #20
 8015e3e:	461a      	mov	r2, r3
 8015e40:	4553      	cmp	r3, sl
 8015e42:	db2b      	blt.n	8015e9c <__lshift+0x8c>
 8015e44:	6920      	ldr	r0, [r4, #16]
 8015e46:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015e4a:	f104 0314 	add.w	r3, r4, #20
 8015e4e:	f016 021f 	ands.w	r2, r6, #31
 8015e52:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015e56:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8015e5a:	d025      	beq.n	8015ea8 <__lshift+0x98>
 8015e5c:	f1c2 0e20 	rsb	lr, r2, #32
 8015e60:	2000      	movs	r0, #0
 8015e62:	681e      	ldr	r6, [r3, #0]
 8015e64:	468a      	mov	sl, r1
 8015e66:	4096      	lsls	r6, r2
 8015e68:	4330      	orrs	r0, r6
 8015e6a:	f84a 0b04 	str.w	r0, [sl], #4
 8015e6e:	f853 0b04 	ldr.w	r0, [r3], #4
 8015e72:	459c      	cmp	ip, r3
 8015e74:	fa20 f00e 	lsr.w	r0, r0, lr
 8015e78:	d814      	bhi.n	8015ea4 <__lshift+0x94>
 8015e7a:	6048      	str	r0, [r1, #4]
 8015e7c:	b108      	cbz	r0, 8015e82 <__lshift+0x72>
 8015e7e:	f109 0502 	add.w	r5, r9, #2
 8015e82:	3d01      	subs	r5, #1
 8015e84:	4638      	mov	r0, r7
 8015e86:	f8c8 5010 	str.w	r5, [r8, #16]
 8015e8a:	4621      	mov	r1, r4
 8015e8c:	f7ff fdf5 	bl	8015a7a <_Bfree>
 8015e90:	4640      	mov	r0, r8
 8015e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015e96:	3101      	adds	r1, #1
 8015e98:	005b      	lsls	r3, r3, #1
 8015e9a:	e7c7      	b.n	8015e2c <__lshift+0x1c>
 8015e9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8015ea0:	3301      	adds	r3, #1
 8015ea2:	e7cd      	b.n	8015e40 <__lshift+0x30>
 8015ea4:	4651      	mov	r1, sl
 8015ea6:	e7dc      	b.n	8015e62 <__lshift+0x52>
 8015ea8:	3904      	subs	r1, #4
 8015eaa:	f853 2b04 	ldr.w	r2, [r3], #4
 8015eae:	f841 2f04 	str.w	r2, [r1, #4]!
 8015eb2:	459c      	cmp	ip, r3
 8015eb4:	d8f9      	bhi.n	8015eaa <__lshift+0x9a>
 8015eb6:	e7e4      	b.n	8015e82 <__lshift+0x72>

08015eb8 <__mcmp>:
 8015eb8:	6903      	ldr	r3, [r0, #16]
 8015eba:	690a      	ldr	r2, [r1, #16]
 8015ebc:	1a9b      	subs	r3, r3, r2
 8015ebe:	b530      	push	{r4, r5, lr}
 8015ec0:	d10c      	bne.n	8015edc <__mcmp+0x24>
 8015ec2:	0092      	lsls	r2, r2, #2
 8015ec4:	3014      	adds	r0, #20
 8015ec6:	3114      	adds	r1, #20
 8015ec8:	1884      	adds	r4, r0, r2
 8015eca:	4411      	add	r1, r2
 8015ecc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8015ed0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8015ed4:	4295      	cmp	r5, r2
 8015ed6:	d003      	beq.n	8015ee0 <__mcmp+0x28>
 8015ed8:	d305      	bcc.n	8015ee6 <__mcmp+0x2e>
 8015eda:	2301      	movs	r3, #1
 8015edc:	4618      	mov	r0, r3
 8015ede:	bd30      	pop	{r4, r5, pc}
 8015ee0:	42a0      	cmp	r0, r4
 8015ee2:	d3f3      	bcc.n	8015ecc <__mcmp+0x14>
 8015ee4:	e7fa      	b.n	8015edc <__mcmp+0x24>
 8015ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8015eea:	e7f7      	b.n	8015edc <__mcmp+0x24>

08015eec <__mdiff>:
 8015eec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015ef0:	460d      	mov	r5, r1
 8015ef2:	4607      	mov	r7, r0
 8015ef4:	4611      	mov	r1, r2
 8015ef6:	4628      	mov	r0, r5
 8015ef8:	4614      	mov	r4, r2
 8015efa:	f7ff ffdd 	bl	8015eb8 <__mcmp>
 8015efe:	1e06      	subs	r6, r0, #0
 8015f00:	d108      	bne.n	8015f14 <__mdiff+0x28>
 8015f02:	4631      	mov	r1, r6
 8015f04:	4638      	mov	r0, r7
 8015f06:	f7ff fd84 	bl	8015a12 <_Balloc>
 8015f0a:	2301      	movs	r3, #1
 8015f0c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8015f10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015f14:	bfa4      	itt	ge
 8015f16:	4623      	movge	r3, r4
 8015f18:	462c      	movge	r4, r5
 8015f1a:	4638      	mov	r0, r7
 8015f1c:	6861      	ldr	r1, [r4, #4]
 8015f1e:	bfa6      	itte	ge
 8015f20:	461d      	movge	r5, r3
 8015f22:	2600      	movge	r6, #0
 8015f24:	2601      	movlt	r6, #1
 8015f26:	f7ff fd74 	bl	8015a12 <_Balloc>
 8015f2a:	692b      	ldr	r3, [r5, #16]
 8015f2c:	60c6      	str	r6, [r0, #12]
 8015f2e:	6926      	ldr	r6, [r4, #16]
 8015f30:	f105 0914 	add.w	r9, r5, #20
 8015f34:	f104 0214 	add.w	r2, r4, #20
 8015f38:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8015f3c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8015f40:	f100 0514 	add.w	r5, r0, #20
 8015f44:	f04f 0e00 	mov.w	lr, #0
 8015f48:	f852 ab04 	ldr.w	sl, [r2], #4
 8015f4c:	f859 4b04 	ldr.w	r4, [r9], #4
 8015f50:	fa1e f18a 	uxtah	r1, lr, sl
 8015f54:	b2a3      	uxth	r3, r4
 8015f56:	1ac9      	subs	r1, r1, r3
 8015f58:	0c23      	lsrs	r3, r4, #16
 8015f5a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8015f5e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8015f62:	b289      	uxth	r1, r1
 8015f64:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8015f68:	45c8      	cmp	r8, r9
 8015f6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8015f6e:	4694      	mov	ip, r2
 8015f70:	f845 3b04 	str.w	r3, [r5], #4
 8015f74:	d8e8      	bhi.n	8015f48 <__mdiff+0x5c>
 8015f76:	45bc      	cmp	ip, r7
 8015f78:	d304      	bcc.n	8015f84 <__mdiff+0x98>
 8015f7a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8015f7e:	b183      	cbz	r3, 8015fa2 <__mdiff+0xb6>
 8015f80:	6106      	str	r6, [r0, #16]
 8015f82:	e7c5      	b.n	8015f10 <__mdiff+0x24>
 8015f84:	f85c 1b04 	ldr.w	r1, [ip], #4
 8015f88:	fa1e f381 	uxtah	r3, lr, r1
 8015f8c:	141a      	asrs	r2, r3, #16
 8015f8e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8015f92:	b29b      	uxth	r3, r3
 8015f94:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015f98:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8015f9c:	f845 3b04 	str.w	r3, [r5], #4
 8015fa0:	e7e9      	b.n	8015f76 <__mdiff+0x8a>
 8015fa2:	3e01      	subs	r6, #1
 8015fa4:	e7e9      	b.n	8015f7a <__mdiff+0x8e>
	...

08015fa8 <__ulp>:
 8015fa8:	4b12      	ldr	r3, [pc, #72]	; (8015ff4 <__ulp+0x4c>)
 8015faa:	ee10 2a90 	vmov	r2, s1
 8015fae:	401a      	ands	r2, r3
 8015fb0:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8015fb4:	2b00      	cmp	r3, #0
 8015fb6:	dd04      	ble.n	8015fc2 <__ulp+0x1a>
 8015fb8:	2000      	movs	r0, #0
 8015fba:	4619      	mov	r1, r3
 8015fbc:	ec41 0b10 	vmov	d0, r0, r1
 8015fc0:	4770      	bx	lr
 8015fc2:	425b      	negs	r3, r3
 8015fc4:	151b      	asrs	r3, r3, #20
 8015fc6:	2b13      	cmp	r3, #19
 8015fc8:	f04f 0000 	mov.w	r0, #0
 8015fcc:	f04f 0100 	mov.w	r1, #0
 8015fd0:	dc04      	bgt.n	8015fdc <__ulp+0x34>
 8015fd2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8015fd6:	fa42 f103 	asr.w	r1, r2, r3
 8015fda:	e7ef      	b.n	8015fbc <__ulp+0x14>
 8015fdc:	3b14      	subs	r3, #20
 8015fde:	2b1e      	cmp	r3, #30
 8015fe0:	f04f 0201 	mov.w	r2, #1
 8015fe4:	bfda      	itte	le
 8015fe6:	f1c3 031f 	rsble	r3, r3, #31
 8015fea:	fa02 f303 	lslle.w	r3, r2, r3
 8015fee:	4613      	movgt	r3, r2
 8015ff0:	4618      	mov	r0, r3
 8015ff2:	e7e3      	b.n	8015fbc <__ulp+0x14>
 8015ff4:	7ff00000 	.word	0x7ff00000

08015ff8 <__b2d>:
 8015ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015ffa:	6905      	ldr	r5, [r0, #16]
 8015ffc:	f100 0714 	add.w	r7, r0, #20
 8016000:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8016004:	1f2e      	subs	r6, r5, #4
 8016006:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801600a:	4620      	mov	r0, r4
 801600c:	f7ff fdc5 	bl	8015b9a <__hi0bits>
 8016010:	f1c0 0320 	rsb	r3, r0, #32
 8016014:	280a      	cmp	r0, #10
 8016016:	600b      	str	r3, [r1, #0]
 8016018:	f8df c074 	ldr.w	ip, [pc, #116]	; 8016090 <__b2d+0x98>
 801601c:	dc14      	bgt.n	8016048 <__b2d+0x50>
 801601e:	f1c0 0e0b 	rsb	lr, r0, #11
 8016022:	fa24 f10e 	lsr.w	r1, r4, lr
 8016026:	42b7      	cmp	r7, r6
 8016028:	ea41 030c 	orr.w	r3, r1, ip
 801602c:	bf34      	ite	cc
 801602e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8016032:	2100      	movcs	r1, #0
 8016034:	3015      	adds	r0, #21
 8016036:	fa04 f000 	lsl.w	r0, r4, r0
 801603a:	fa21 f10e 	lsr.w	r1, r1, lr
 801603e:	ea40 0201 	orr.w	r2, r0, r1
 8016042:	ec43 2b10 	vmov	d0, r2, r3
 8016046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016048:	42b7      	cmp	r7, r6
 801604a:	bf3a      	itte	cc
 801604c:	f1a5 0608 	subcc.w	r6, r5, #8
 8016050:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8016054:	2100      	movcs	r1, #0
 8016056:	380b      	subs	r0, #11
 8016058:	d015      	beq.n	8016086 <__b2d+0x8e>
 801605a:	4084      	lsls	r4, r0
 801605c:	f1c0 0520 	rsb	r5, r0, #32
 8016060:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8016064:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8016068:	42be      	cmp	r6, r7
 801606a:	fa21 fc05 	lsr.w	ip, r1, r5
 801606e:	ea44 030c 	orr.w	r3, r4, ip
 8016072:	bf8c      	ite	hi
 8016074:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8016078:	2400      	movls	r4, #0
 801607a:	fa01 f000 	lsl.w	r0, r1, r0
 801607e:	40ec      	lsrs	r4, r5
 8016080:	ea40 0204 	orr.w	r2, r0, r4
 8016084:	e7dd      	b.n	8016042 <__b2d+0x4a>
 8016086:	ea44 030c 	orr.w	r3, r4, ip
 801608a:	460a      	mov	r2, r1
 801608c:	e7d9      	b.n	8016042 <__b2d+0x4a>
 801608e:	bf00      	nop
 8016090:	3ff00000 	.word	0x3ff00000

08016094 <__d2b>:
 8016094:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016098:	460e      	mov	r6, r1
 801609a:	2101      	movs	r1, #1
 801609c:	ec59 8b10 	vmov	r8, r9, d0
 80160a0:	4615      	mov	r5, r2
 80160a2:	f7ff fcb6 	bl	8015a12 <_Balloc>
 80160a6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80160aa:	4607      	mov	r7, r0
 80160ac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80160b0:	bb34      	cbnz	r4, 8016100 <__d2b+0x6c>
 80160b2:	9301      	str	r3, [sp, #4]
 80160b4:	f1b8 0300 	subs.w	r3, r8, #0
 80160b8:	d027      	beq.n	801610a <__d2b+0x76>
 80160ba:	a802      	add	r0, sp, #8
 80160bc:	f840 3d08 	str.w	r3, [r0, #-8]!
 80160c0:	f7ff fd8a 	bl	8015bd8 <__lo0bits>
 80160c4:	9900      	ldr	r1, [sp, #0]
 80160c6:	b1f0      	cbz	r0, 8016106 <__d2b+0x72>
 80160c8:	9a01      	ldr	r2, [sp, #4]
 80160ca:	f1c0 0320 	rsb	r3, r0, #32
 80160ce:	fa02 f303 	lsl.w	r3, r2, r3
 80160d2:	430b      	orrs	r3, r1
 80160d4:	40c2      	lsrs	r2, r0
 80160d6:	617b      	str	r3, [r7, #20]
 80160d8:	9201      	str	r2, [sp, #4]
 80160da:	9b01      	ldr	r3, [sp, #4]
 80160dc:	61bb      	str	r3, [r7, #24]
 80160de:	2b00      	cmp	r3, #0
 80160e0:	bf14      	ite	ne
 80160e2:	2102      	movne	r1, #2
 80160e4:	2101      	moveq	r1, #1
 80160e6:	6139      	str	r1, [r7, #16]
 80160e8:	b1c4      	cbz	r4, 801611c <__d2b+0x88>
 80160ea:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80160ee:	4404      	add	r4, r0
 80160f0:	6034      	str	r4, [r6, #0]
 80160f2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80160f6:	6028      	str	r0, [r5, #0]
 80160f8:	4638      	mov	r0, r7
 80160fa:	b003      	add	sp, #12
 80160fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016100:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016104:	e7d5      	b.n	80160b2 <__d2b+0x1e>
 8016106:	6179      	str	r1, [r7, #20]
 8016108:	e7e7      	b.n	80160da <__d2b+0x46>
 801610a:	a801      	add	r0, sp, #4
 801610c:	f7ff fd64 	bl	8015bd8 <__lo0bits>
 8016110:	9b01      	ldr	r3, [sp, #4]
 8016112:	617b      	str	r3, [r7, #20]
 8016114:	2101      	movs	r1, #1
 8016116:	6139      	str	r1, [r7, #16]
 8016118:	3020      	adds	r0, #32
 801611a:	e7e5      	b.n	80160e8 <__d2b+0x54>
 801611c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8016120:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8016124:	6030      	str	r0, [r6, #0]
 8016126:	6918      	ldr	r0, [r3, #16]
 8016128:	f7ff fd37 	bl	8015b9a <__hi0bits>
 801612c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8016130:	e7e1      	b.n	80160f6 <__d2b+0x62>

08016132 <__ratio>:
 8016132:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016136:	4688      	mov	r8, r1
 8016138:	4669      	mov	r1, sp
 801613a:	4681      	mov	r9, r0
 801613c:	f7ff ff5c 	bl	8015ff8 <__b2d>
 8016140:	a901      	add	r1, sp, #4
 8016142:	4640      	mov	r0, r8
 8016144:	ec57 6b10 	vmov	r6, r7, d0
 8016148:	f7ff ff56 	bl	8015ff8 <__b2d>
 801614c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016150:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8016154:	eba3 0c02 	sub.w	ip, r3, r2
 8016158:	e9dd 3200 	ldrd	r3, r2, [sp]
 801615c:	1a9b      	subs	r3, r3, r2
 801615e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8016162:	ec5b ab10 	vmov	sl, fp, d0
 8016166:	2b00      	cmp	r3, #0
 8016168:	bfce      	itee	gt
 801616a:	463a      	movgt	r2, r7
 801616c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8016170:	465a      	movle	r2, fp
 8016172:	4659      	mov	r1, fp
 8016174:	463d      	mov	r5, r7
 8016176:	bfd4      	ite	le
 8016178:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 801617c:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8016180:	4630      	mov	r0, r6
 8016182:	ee10 2a10 	vmov	r2, s0
 8016186:	460b      	mov	r3, r1
 8016188:	4629      	mov	r1, r5
 801618a:	f7ea fb77 	bl	800087c <__aeabi_ddiv>
 801618e:	ec41 0b10 	vmov	d0, r0, r1
 8016192:	b003      	add	sp, #12
 8016194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016198 <__copybits>:
 8016198:	3901      	subs	r1, #1
 801619a:	b510      	push	{r4, lr}
 801619c:	1149      	asrs	r1, r1, #5
 801619e:	6914      	ldr	r4, [r2, #16]
 80161a0:	3101      	adds	r1, #1
 80161a2:	f102 0314 	add.w	r3, r2, #20
 80161a6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80161aa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80161ae:	42a3      	cmp	r3, r4
 80161b0:	4602      	mov	r2, r0
 80161b2:	d303      	bcc.n	80161bc <__copybits+0x24>
 80161b4:	2300      	movs	r3, #0
 80161b6:	428a      	cmp	r2, r1
 80161b8:	d305      	bcc.n	80161c6 <__copybits+0x2e>
 80161ba:	bd10      	pop	{r4, pc}
 80161bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80161c0:	f840 2b04 	str.w	r2, [r0], #4
 80161c4:	e7f3      	b.n	80161ae <__copybits+0x16>
 80161c6:	f842 3b04 	str.w	r3, [r2], #4
 80161ca:	e7f4      	b.n	80161b6 <__copybits+0x1e>

080161cc <__any_on>:
 80161cc:	f100 0214 	add.w	r2, r0, #20
 80161d0:	6900      	ldr	r0, [r0, #16]
 80161d2:	114b      	asrs	r3, r1, #5
 80161d4:	4298      	cmp	r0, r3
 80161d6:	b510      	push	{r4, lr}
 80161d8:	db11      	blt.n	80161fe <__any_on+0x32>
 80161da:	dd0a      	ble.n	80161f2 <__any_on+0x26>
 80161dc:	f011 011f 	ands.w	r1, r1, #31
 80161e0:	d007      	beq.n	80161f2 <__any_on+0x26>
 80161e2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80161e6:	fa24 f001 	lsr.w	r0, r4, r1
 80161ea:	fa00 f101 	lsl.w	r1, r0, r1
 80161ee:	428c      	cmp	r4, r1
 80161f0:	d10b      	bne.n	801620a <__any_on+0x3e>
 80161f2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80161f6:	4293      	cmp	r3, r2
 80161f8:	d803      	bhi.n	8016202 <__any_on+0x36>
 80161fa:	2000      	movs	r0, #0
 80161fc:	bd10      	pop	{r4, pc}
 80161fe:	4603      	mov	r3, r0
 8016200:	e7f7      	b.n	80161f2 <__any_on+0x26>
 8016202:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016206:	2900      	cmp	r1, #0
 8016208:	d0f5      	beq.n	80161f6 <__any_on+0x2a>
 801620a:	2001      	movs	r0, #1
 801620c:	e7f6      	b.n	80161fc <__any_on+0x30>

0801620e <_calloc_r>:
 801620e:	b538      	push	{r3, r4, r5, lr}
 8016210:	fb02 f401 	mul.w	r4, r2, r1
 8016214:	4621      	mov	r1, r4
 8016216:	f000 f857 	bl	80162c8 <_malloc_r>
 801621a:	4605      	mov	r5, r0
 801621c:	b118      	cbz	r0, 8016226 <_calloc_r+0x18>
 801621e:	4622      	mov	r2, r4
 8016220:	2100      	movs	r1, #0
 8016222:	f7fc f8fd 	bl	8012420 <memset>
 8016226:	4628      	mov	r0, r5
 8016228:	bd38      	pop	{r3, r4, r5, pc}
	...

0801622c <_free_r>:
 801622c:	b538      	push	{r3, r4, r5, lr}
 801622e:	4605      	mov	r5, r0
 8016230:	2900      	cmp	r1, #0
 8016232:	d045      	beq.n	80162c0 <_free_r+0x94>
 8016234:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016238:	1f0c      	subs	r4, r1, #4
 801623a:	2b00      	cmp	r3, #0
 801623c:	bfb8      	it	lt
 801623e:	18e4      	addlt	r4, r4, r3
 8016240:	f000 ffdb 	bl	80171fa <__malloc_lock>
 8016244:	4a1f      	ldr	r2, [pc, #124]	; (80162c4 <_free_r+0x98>)
 8016246:	6813      	ldr	r3, [r2, #0]
 8016248:	4610      	mov	r0, r2
 801624a:	b933      	cbnz	r3, 801625a <_free_r+0x2e>
 801624c:	6063      	str	r3, [r4, #4]
 801624e:	6014      	str	r4, [r2, #0]
 8016250:	4628      	mov	r0, r5
 8016252:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016256:	f000 bfd1 	b.w	80171fc <__malloc_unlock>
 801625a:	42a3      	cmp	r3, r4
 801625c:	d90c      	bls.n	8016278 <_free_r+0x4c>
 801625e:	6821      	ldr	r1, [r4, #0]
 8016260:	1862      	adds	r2, r4, r1
 8016262:	4293      	cmp	r3, r2
 8016264:	bf04      	itt	eq
 8016266:	681a      	ldreq	r2, [r3, #0]
 8016268:	685b      	ldreq	r3, [r3, #4]
 801626a:	6063      	str	r3, [r4, #4]
 801626c:	bf04      	itt	eq
 801626e:	1852      	addeq	r2, r2, r1
 8016270:	6022      	streq	r2, [r4, #0]
 8016272:	6004      	str	r4, [r0, #0]
 8016274:	e7ec      	b.n	8016250 <_free_r+0x24>
 8016276:	4613      	mov	r3, r2
 8016278:	685a      	ldr	r2, [r3, #4]
 801627a:	b10a      	cbz	r2, 8016280 <_free_r+0x54>
 801627c:	42a2      	cmp	r2, r4
 801627e:	d9fa      	bls.n	8016276 <_free_r+0x4a>
 8016280:	6819      	ldr	r1, [r3, #0]
 8016282:	1858      	adds	r0, r3, r1
 8016284:	42a0      	cmp	r0, r4
 8016286:	d10b      	bne.n	80162a0 <_free_r+0x74>
 8016288:	6820      	ldr	r0, [r4, #0]
 801628a:	4401      	add	r1, r0
 801628c:	1858      	adds	r0, r3, r1
 801628e:	4282      	cmp	r2, r0
 8016290:	6019      	str	r1, [r3, #0]
 8016292:	d1dd      	bne.n	8016250 <_free_r+0x24>
 8016294:	6810      	ldr	r0, [r2, #0]
 8016296:	6852      	ldr	r2, [r2, #4]
 8016298:	605a      	str	r2, [r3, #4]
 801629a:	4401      	add	r1, r0
 801629c:	6019      	str	r1, [r3, #0]
 801629e:	e7d7      	b.n	8016250 <_free_r+0x24>
 80162a0:	d902      	bls.n	80162a8 <_free_r+0x7c>
 80162a2:	230c      	movs	r3, #12
 80162a4:	602b      	str	r3, [r5, #0]
 80162a6:	e7d3      	b.n	8016250 <_free_r+0x24>
 80162a8:	6820      	ldr	r0, [r4, #0]
 80162aa:	1821      	adds	r1, r4, r0
 80162ac:	428a      	cmp	r2, r1
 80162ae:	bf04      	itt	eq
 80162b0:	6811      	ldreq	r1, [r2, #0]
 80162b2:	6852      	ldreq	r2, [r2, #4]
 80162b4:	6062      	str	r2, [r4, #4]
 80162b6:	bf04      	itt	eq
 80162b8:	1809      	addeq	r1, r1, r0
 80162ba:	6021      	streq	r1, [r4, #0]
 80162bc:	605c      	str	r4, [r3, #4]
 80162be:	e7c7      	b.n	8016250 <_free_r+0x24>
 80162c0:	bd38      	pop	{r3, r4, r5, pc}
 80162c2:	bf00      	nop
 80162c4:	2001f4f4 	.word	0x2001f4f4

080162c8 <_malloc_r>:
 80162c8:	b570      	push	{r4, r5, r6, lr}
 80162ca:	1ccd      	adds	r5, r1, #3
 80162cc:	f025 0503 	bic.w	r5, r5, #3
 80162d0:	3508      	adds	r5, #8
 80162d2:	2d0c      	cmp	r5, #12
 80162d4:	bf38      	it	cc
 80162d6:	250c      	movcc	r5, #12
 80162d8:	2d00      	cmp	r5, #0
 80162da:	4606      	mov	r6, r0
 80162dc:	db01      	blt.n	80162e2 <_malloc_r+0x1a>
 80162de:	42a9      	cmp	r1, r5
 80162e0:	d903      	bls.n	80162ea <_malloc_r+0x22>
 80162e2:	230c      	movs	r3, #12
 80162e4:	6033      	str	r3, [r6, #0]
 80162e6:	2000      	movs	r0, #0
 80162e8:	bd70      	pop	{r4, r5, r6, pc}
 80162ea:	f000 ff86 	bl	80171fa <__malloc_lock>
 80162ee:	4a21      	ldr	r2, [pc, #132]	; (8016374 <_malloc_r+0xac>)
 80162f0:	6814      	ldr	r4, [r2, #0]
 80162f2:	4621      	mov	r1, r4
 80162f4:	b991      	cbnz	r1, 801631c <_malloc_r+0x54>
 80162f6:	4c20      	ldr	r4, [pc, #128]	; (8016378 <_malloc_r+0xb0>)
 80162f8:	6823      	ldr	r3, [r4, #0]
 80162fa:	b91b      	cbnz	r3, 8016304 <_malloc_r+0x3c>
 80162fc:	4630      	mov	r0, r6
 80162fe:	f000 fe19 	bl	8016f34 <_sbrk_r>
 8016302:	6020      	str	r0, [r4, #0]
 8016304:	4629      	mov	r1, r5
 8016306:	4630      	mov	r0, r6
 8016308:	f000 fe14 	bl	8016f34 <_sbrk_r>
 801630c:	1c43      	adds	r3, r0, #1
 801630e:	d124      	bne.n	801635a <_malloc_r+0x92>
 8016310:	230c      	movs	r3, #12
 8016312:	6033      	str	r3, [r6, #0]
 8016314:	4630      	mov	r0, r6
 8016316:	f000 ff71 	bl	80171fc <__malloc_unlock>
 801631a:	e7e4      	b.n	80162e6 <_malloc_r+0x1e>
 801631c:	680b      	ldr	r3, [r1, #0]
 801631e:	1b5b      	subs	r3, r3, r5
 8016320:	d418      	bmi.n	8016354 <_malloc_r+0x8c>
 8016322:	2b0b      	cmp	r3, #11
 8016324:	d90f      	bls.n	8016346 <_malloc_r+0x7e>
 8016326:	600b      	str	r3, [r1, #0]
 8016328:	50cd      	str	r5, [r1, r3]
 801632a:	18cc      	adds	r4, r1, r3
 801632c:	4630      	mov	r0, r6
 801632e:	f000 ff65 	bl	80171fc <__malloc_unlock>
 8016332:	f104 000b 	add.w	r0, r4, #11
 8016336:	1d23      	adds	r3, r4, #4
 8016338:	f020 0007 	bic.w	r0, r0, #7
 801633c:	1ac3      	subs	r3, r0, r3
 801633e:	d0d3      	beq.n	80162e8 <_malloc_r+0x20>
 8016340:	425a      	negs	r2, r3
 8016342:	50e2      	str	r2, [r4, r3]
 8016344:	e7d0      	b.n	80162e8 <_malloc_r+0x20>
 8016346:	428c      	cmp	r4, r1
 8016348:	684b      	ldr	r3, [r1, #4]
 801634a:	bf16      	itet	ne
 801634c:	6063      	strne	r3, [r4, #4]
 801634e:	6013      	streq	r3, [r2, #0]
 8016350:	460c      	movne	r4, r1
 8016352:	e7eb      	b.n	801632c <_malloc_r+0x64>
 8016354:	460c      	mov	r4, r1
 8016356:	6849      	ldr	r1, [r1, #4]
 8016358:	e7cc      	b.n	80162f4 <_malloc_r+0x2c>
 801635a:	1cc4      	adds	r4, r0, #3
 801635c:	f024 0403 	bic.w	r4, r4, #3
 8016360:	42a0      	cmp	r0, r4
 8016362:	d005      	beq.n	8016370 <_malloc_r+0xa8>
 8016364:	1a21      	subs	r1, r4, r0
 8016366:	4630      	mov	r0, r6
 8016368:	f000 fde4 	bl	8016f34 <_sbrk_r>
 801636c:	3001      	adds	r0, #1
 801636e:	d0cf      	beq.n	8016310 <_malloc_r+0x48>
 8016370:	6025      	str	r5, [r4, #0]
 8016372:	e7db      	b.n	801632c <_malloc_r+0x64>
 8016374:	2001f4f4 	.word	0x2001f4f4
 8016378:	2001f4f8 	.word	0x2001f4f8

0801637c <__ssputs_r>:
 801637c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016380:	688e      	ldr	r6, [r1, #8]
 8016382:	429e      	cmp	r6, r3
 8016384:	4682      	mov	sl, r0
 8016386:	460c      	mov	r4, r1
 8016388:	4690      	mov	r8, r2
 801638a:	4699      	mov	r9, r3
 801638c:	d837      	bhi.n	80163fe <__ssputs_r+0x82>
 801638e:	898a      	ldrh	r2, [r1, #12]
 8016390:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016394:	d031      	beq.n	80163fa <__ssputs_r+0x7e>
 8016396:	6825      	ldr	r5, [r4, #0]
 8016398:	6909      	ldr	r1, [r1, #16]
 801639a:	1a6f      	subs	r7, r5, r1
 801639c:	6965      	ldr	r5, [r4, #20]
 801639e:	2302      	movs	r3, #2
 80163a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80163a4:	fb95 f5f3 	sdiv	r5, r5, r3
 80163a8:	f109 0301 	add.w	r3, r9, #1
 80163ac:	443b      	add	r3, r7
 80163ae:	429d      	cmp	r5, r3
 80163b0:	bf38      	it	cc
 80163b2:	461d      	movcc	r5, r3
 80163b4:	0553      	lsls	r3, r2, #21
 80163b6:	d530      	bpl.n	801641a <__ssputs_r+0x9e>
 80163b8:	4629      	mov	r1, r5
 80163ba:	f7ff ff85 	bl	80162c8 <_malloc_r>
 80163be:	4606      	mov	r6, r0
 80163c0:	b950      	cbnz	r0, 80163d8 <__ssputs_r+0x5c>
 80163c2:	230c      	movs	r3, #12
 80163c4:	f8ca 3000 	str.w	r3, [sl]
 80163c8:	89a3      	ldrh	r3, [r4, #12]
 80163ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80163ce:	81a3      	strh	r3, [r4, #12]
 80163d0:	f04f 30ff 	mov.w	r0, #4294967295
 80163d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80163d8:	463a      	mov	r2, r7
 80163da:	6921      	ldr	r1, [r4, #16]
 80163dc:	f7ff fb0e 	bl	80159fc <memcpy>
 80163e0:	89a3      	ldrh	r3, [r4, #12]
 80163e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80163e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80163ea:	81a3      	strh	r3, [r4, #12]
 80163ec:	6126      	str	r6, [r4, #16]
 80163ee:	6165      	str	r5, [r4, #20]
 80163f0:	443e      	add	r6, r7
 80163f2:	1bed      	subs	r5, r5, r7
 80163f4:	6026      	str	r6, [r4, #0]
 80163f6:	60a5      	str	r5, [r4, #8]
 80163f8:	464e      	mov	r6, r9
 80163fa:	454e      	cmp	r6, r9
 80163fc:	d900      	bls.n	8016400 <__ssputs_r+0x84>
 80163fe:	464e      	mov	r6, r9
 8016400:	4632      	mov	r2, r6
 8016402:	4641      	mov	r1, r8
 8016404:	6820      	ldr	r0, [r4, #0]
 8016406:	f000 fedf 	bl	80171c8 <memmove>
 801640a:	68a3      	ldr	r3, [r4, #8]
 801640c:	1b9b      	subs	r3, r3, r6
 801640e:	60a3      	str	r3, [r4, #8]
 8016410:	6823      	ldr	r3, [r4, #0]
 8016412:	441e      	add	r6, r3
 8016414:	6026      	str	r6, [r4, #0]
 8016416:	2000      	movs	r0, #0
 8016418:	e7dc      	b.n	80163d4 <__ssputs_r+0x58>
 801641a:	462a      	mov	r2, r5
 801641c:	f000 feef 	bl	80171fe <_realloc_r>
 8016420:	4606      	mov	r6, r0
 8016422:	2800      	cmp	r0, #0
 8016424:	d1e2      	bne.n	80163ec <__ssputs_r+0x70>
 8016426:	6921      	ldr	r1, [r4, #16]
 8016428:	4650      	mov	r0, sl
 801642a:	f7ff feff 	bl	801622c <_free_r>
 801642e:	e7c8      	b.n	80163c2 <__ssputs_r+0x46>

08016430 <_svfiprintf_r>:
 8016430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016434:	461d      	mov	r5, r3
 8016436:	898b      	ldrh	r3, [r1, #12]
 8016438:	061f      	lsls	r7, r3, #24
 801643a:	b09d      	sub	sp, #116	; 0x74
 801643c:	4680      	mov	r8, r0
 801643e:	460c      	mov	r4, r1
 8016440:	4616      	mov	r6, r2
 8016442:	d50f      	bpl.n	8016464 <_svfiprintf_r+0x34>
 8016444:	690b      	ldr	r3, [r1, #16]
 8016446:	b96b      	cbnz	r3, 8016464 <_svfiprintf_r+0x34>
 8016448:	2140      	movs	r1, #64	; 0x40
 801644a:	f7ff ff3d 	bl	80162c8 <_malloc_r>
 801644e:	6020      	str	r0, [r4, #0]
 8016450:	6120      	str	r0, [r4, #16]
 8016452:	b928      	cbnz	r0, 8016460 <_svfiprintf_r+0x30>
 8016454:	230c      	movs	r3, #12
 8016456:	f8c8 3000 	str.w	r3, [r8]
 801645a:	f04f 30ff 	mov.w	r0, #4294967295
 801645e:	e0c8      	b.n	80165f2 <_svfiprintf_r+0x1c2>
 8016460:	2340      	movs	r3, #64	; 0x40
 8016462:	6163      	str	r3, [r4, #20]
 8016464:	2300      	movs	r3, #0
 8016466:	9309      	str	r3, [sp, #36]	; 0x24
 8016468:	2320      	movs	r3, #32
 801646a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801646e:	2330      	movs	r3, #48	; 0x30
 8016470:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016474:	9503      	str	r5, [sp, #12]
 8016476:	f04f 0b01 	mov.w	fp, #1
 801647a:	4637      	mov	r7, r6
 801647c:	463d      	mov	r5, r7
 801647e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8016482:	b10b      	cbz	r3, 8016488 <_svfiprintf_r+0x58>
 8016484:	2b25      	cmp	r3, #37	; 0x25
 8016486:	d13e      	bne.n	8016506 <_svfiprintf_r+0xd6>
 8016488:	ebb7 0a06 	subs.w	sl, r7, r6
 801648c:	d00b      	beq.n	80164a6 <_svfiprintf_r+0x76>
 801648e:	4653      	mov	r3, sl
 8016490:	4632      	mov	r2, r6
 8016492:	4621      	mov	r1, r4
 8016494:	4640      	mov	r0, r8
 8016496:	f7ff ff71 	bl	801637c <__ssputs_r>
 801649a:	3001      	adds	r0, #1
 801649c:	f000 80a4 	beq.w	80165e8 <_svfiprintf_r+0x1b8>
 80164a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80164a2:	4453      	add	r3, sl
 80164a4:	9309      	str	r3, [sp, #36]	; 0x24
 80164a6:	783b      	ldrb	r3, [r7, #0]
 80164a8:	2b00      	cmp	r3, #0
 80164aa:	f000 809d 	beq.w	80165e8 <_svfiprintf_r+0x1b8>
 80164ae:	2300      	movs	r3, #0
 80164b0:	f04f 32ff 	mov.w	r2, #4294967295
 80164b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80164b8:	9304      	str	r3, [sp, #16]
 80164ba:	9307      	str	r3, [sp, #28]
 80164bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80164c0:	931a      	str	r3, [sp, #104]	; 0x68
 80164c2:	462f      	mov	r7, r5
 80164c4:	2205      	movs	r2, #5
 80164c6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80164ca:	4850      	ldr	r0, [pc, #320]	; (801660c <_svfiprintf_r+0x1dc>)
 80164cc:	f7e9 fea0 	bl	8000210 <memchr>
 80164d0:	9b04      	ldr	r3, [sp, #16]
 80164d2:	b9d0      	cbnz	r0, 801650a <_svfiprintf_r+0xda>
 80164d4:	06d9      	lsls	r1, r3, #27
 80164d6:	bf44      	itt	mi
 80164d8:	2220      	movmi	r2, #32
 80164da:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80164de:	071a      	lsls	r2, r3, #28
 80164e0:	bf44      	itt	mi
 80164e2:	222b      	movmi	r2, #43	; 0x2b
 80164e4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80164e8:	782a      	ldrb	r2, [r5, #0]
 80164ea:	2a2a      	cmp	r2, #42	; 0x2a
 80164ec:	d015      	beq.n	801651a <_svfiprintf_r+0xea>
 80164ee:	9a07      	ldr	r2, [sp, #28]
 80164f0:	462f      	mov	r7, r5
 80164f2:	2000      	movs	r0, #0
 80164f4:	250a      	movs	r5, #10
 80164f6:	4639      	mov	r1, r7
 80164f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80164fc:	3b30      	subs	r3, #48	; 0x30
 80164fe:	2b09      	cmp	r3, #9
 8016500:	d94d      	bls.n	801659e <_svfiprintf_r+0x16e>
 8016502:	b1b8      	cbz	r0, 8016534 <_svfiprintf_r+0x104>
 8016504:	e00f      	b.n	8016526 <_svfiprintf_r+0xf6>
 8016506:	462f      	mov	r7, r5
 8016508:	e7b8      	b.n	801647c <_svfiprintf_r+0x4c>
 801650a:	4a40      	ldr	r2, [pc, #256]	; (801660c <_svfiprintf_r+0x1dc>)
 801650c:	1a80      	subs	r0, r0, r2
 801650e:	fa0b f000 	lsl.w	r0, fp, r0
 8016512:	4318      	orrs	r0, r3
 8016514:	9004      	str	r0, [sp, #16]
 8016516:	463d      	mov	r5, r7
 8016518:	e7d3      	b.n	80164c2 <_svfiprintf_r+0x92>
 801651a:	9a03      	ldr	r2, [sp, #12]
 801651c:	1d11      	adds	r1, r2, #4
 801651e:	6812      	ldr	r2, [r2, #0]
 8016520:	9103      	str	r1, [sp, #12]
 8016522:	2a00      	cmp	r2, #0
 8016524:	db01      	blt.n	801652a <_svfiprintf_r+0xfa>
 8016526:	9207      	str	r2, [sp, #28]
 8016528:	e004      	b.n	8016534 <_svfiprintf_r+0x104>
 801652a:	4252      	negs	r2, r2
 801652c:	f043 0302 	orr.w	r3, r3, #2
 8016530:	9207      	str	r2, [sp, #28]
 8016532:	9304      	str	r3, [sp, #16]
 8016534:	783b      	ldrb	r3, [r7, #0]
 8016536:	2b2e      	cmp	r3, #46	; 0x2e
 8016538:	d10c      	bne.n	8016554 <_svfiprintf_r+0x124>
 801653a:	787b      	ldrb	r3, [r7, #1]
 801653c:	2b2a      	cmp	r3, #42	; 0x2a
 801653e:	d133      	bne.n	80165a8 <_svfiprintf_r+0x178>
 8016540:	9b03      	ldr	r3, [sp, #12]
 8016542:	1d1a      	adds	r2, r3, #4
 8016544:	681b      	ldr	r3, [r3, #0]
 8016546:	9203      	str	r2, [sp, #12]
 8016548:	2b00      	cmp	r3, #0
 801654a:	bfb8      	it	lt
 801654c:	f04f 33ff 	movlt.w	r3, #4294967295
 8016550:	3702      	adds	r7, #2
 8016552:	9305      	str	r3, [sp, #20]
 8016554:	4d2e      	ldr	r5, [pc, #184]	; (8016610 <_svfiprintf_r+0x1e0>)
 8016556:	7839      	ldrb	r1, [r7, #0]
 8016558:	2203      	movs	r2, #3
 801655a:	4628      	mov	r0, r5
 801655c:	f7e9 fe58 	bl	8000210 <memchr>
 8016560:	b138      	cbz	r0, 8016572 <_svfiprintf_r+0x142>
 8016562:	2340      	movs	r3, #64	; 0x40
 8016564:	1b40      	subs	r0, r0, r5
 8016566:	fa03 f000 	lsl.w	r0, r3, r0
 801656a:	9b04      	ldr	r3, [sp, #16]
 801656c:	4303      	orrs	r3, r0
 801656e:	3701      	adds	r7, #1
 8016570:	9304      	str	r3, [sp, #16]
 8016572:	7839      	ldrb	r1, [r7, #0]
 8016574:	4827      	ldr	r0, [pc, #156]	; (8016614 <_svfiprintf_r+0x1e4>)
 8016576:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801657a:	2206      	movs	r2, #6
 801657c:	1c7e      	adds	r6, r7, #1
 801657e:	f7e9 fe47 	bl	8000210 <memchr>
 8016582:	2800      	cmp	r0, #0
 8016584:	d038      	beq.n	80165f8 <_svfiprintf_r+0x1c8>
 8016586:	4b24      	ldr	r3, [pc, #144]	; (8016618 <_svfiprintf_r+0x1e8>)
 8016588:	bb13      	cbnz	r3, 80165d0 <_svfiprintf_r+0x1a0>
 801658a:	9b03      	ldr	r3, [sp, #12]
 801658c:	3307      	adds	r3, #7
 801658e:	f023 0307 	bic.w	r3, r3, #7
 8016592:	3308      	adds	r3, #8
 8016594:	9303      	str	r3, [sp, #12]
 8016596:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016598:	444b      	add	r3, r9
 801659a:	9309      	str	r3, [sp, #36]	; 0x24
 801659c:	e76d      	b.n	801647a <_svfiprintf_r+0x4a>
 801659e:	fb05 3202 	mla	r2, r5, r2, r3
 80165a2:	2001      	movs	r0, #1
 80165a4:	460f      	mov	r7, r1
 80165a6:	e7a6      	b.n	80164f6 <_svfiprintf_r+0xc6>
 80165a8:	2300      	movs	r3, #0
 80165aa:	3701      	adds	r7, #1
 80165ac:	9305      	str	r3, [sp, #20]
 80165ae:	4619      	mov	r1, r3
 80165b0:	250a      	movs	r5, #10
 80165b2:	4638      	mov	r0, r7
 80165b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80165b8:	3a30      	subs	r2, #48	; 0x30
 80165ba:	2a09      	cmp	r2, #9
 80165bc:	d903      	bls.n	80165c6 <_svfiprintf_r+0x196>
 80165be:	2b00      	cmp	r3, #0
 80165c0:	d0c8      	beq.n	8016554 <_svfiprintf_r+0x124>
 80165c2:	9105      	str	r1, [sp, #20]
 80165c4:	e7c6      	b.n	8016554 <_svfiprintf_r+0x124>
 80165c6:	fb05 2101 	mla	r1, r5, r1, r2
 80165ca:	2301      	movs	r3, #1
 80165cc:	4607      	mov	r7, r0
 80165ce:	e7f0      	b.n	80165b2 <_svfiprintf_r+0x182>
 80165d0:	ab03      	add	r3, sp, #12
 80165d2:	9300      	str	r3, [sp, #0]
 80165d4:	4622      	mov	r2, r4
 80165d6:	4b11      	ldr	r3, [pc, #68]	; (801661c <_svfiprintf_r+0x1ec>)
 80165d8:	a904      	add	r1, sp, #16
 80165da:	4640      	mov	r0, r8
 80165dc:	f7fb ffbc 	bl	8012558 <_printf_float>
 80165e0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80165e4:	4681      	mov	r9, r0
 80165e6:	d1d6      	bne.n	8016596 <_svfiprintf_r+0x166>
 80165e8:	89a3      	ldrh	r3, [r4, #12]
 80165ea:	065b      	lsls	r3, r3, #25
 80165ec:	f53f af35 	bmi.w	801645a <_svfiprintf_r+0x2a>
 80165f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80165f2:	b01d      	add	sp, #116	; 0x74
 80165f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80165f8:	ab03      	add	r3, sp, #12
 80165fa:	9300      	str	r3, [sp, #0]
 80165fc:	4622      	mov	r2, r4
 80165fe:	4b07      	ldr	r3, [pc, #28]	; (801661c <_svfiprintf_r+0x1ec>)
 8016600:	a904      	add	r1, sp, #16
 8016602:	4640      	mov	r0, r8
 8016604:	f7fc fa5e 	bl	8012ac4 <_printf_i>
 8016608:	e7ea      	b.n	80165e0 <_svfiprintf_r+0x1b0>
 801660a:	bf00      	nop
 801660c:	08017cdc 	.word	0x08017cdc
 8016610:	08017ce2 	.word	0x08017ce2
 8016614:	08017ce6 	.word	0x08017ce6
 8016618:	08012559 	.word	0x08012559
 801661c:	0801637d 	.word	0x0801637d

08016620 <_sungetc_r>:
 8016620:	b538      	push	{r3, r4, r5, lr}
 8016622:	1c4b      	adds	r3, r1, #1
 8016624:	4614      	mov	r4, r2
 8016626:	d103      	bne.n	8016630 <_sungetc_r+0x10>
 8016628:	f04f 35ff 	mov.w	r5, #4294967295
 801662c:	4628      	mov	r0, r5
 801662e:	bd38      	pop	{r3, r4, r5, pc}
 8016630:	8993      	ldrh	r3, [r2, #12]
 8016632:	f023 0320 	bic.w	r3, r3, #32
 8016636:	8193      	strh	r3, [r2, #12]
 8016638:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801663a:	6852      	ldr	r2, [r2, #4]
 801663c:	b2cd      	uxtb	r5, r1
 801663e:	b18b      	cbz	r3, 8016664 <_sungetc_r+0x44>
 8016640:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8016642:	4293      	cmp	r3, r2
 8016644:	dd08      	ble.n	8016658 <_sungetc_r+0x38>
 8016646:	6823      	ldr	r3, [r4, #0]
 8016648:	1e5a      	subs	r2, r3, #1
 801664a:	6022      	str	r2, [r4, #0]
 801664c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8016650:	6863      	ldr	r3, [r4, #4]
 8016652:	3301      	adds	r3, #1
 8016654:	6063      	str	r3, [r4, #4]
 8016656:	e7e9      	b.n	801662c <_sungetc_r+0xc>
 8016658:	4621      	mov	r1, r4
 801665a:	f000 fd4b 	bl	80170f4 <__submore>
 801665e:	2800      	cmp	r0, #0
 8016660:	d0f1      	beq.n	8016646 <_sungetc_r+0x26>
 8016662:	e7e1      	b.n	8016628 <_sungetc_r+0x8>
 8016664:	6921      	ldr	r1, [r4, #16]
 8016666:	6823      	ldr	r3, [r4, #0]
 8016668:	b151      	cbz	r1, 8016680 <_sungetc_r+0x60>
 801666a:	4299      	cmp	r1, r3
 801666c:	d208      	bcs.n	8016680 <_sungetc_r+0x60>
 801666e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8016672:	42a9      	cmp	r1, r5
 8016674:	d104      	bne.n	8016680 <_sungetc_r+0x60>
 8016676:	3b01      	subs	r3, #1
 8016678:	3201      	adds	r2, #1
 801667a:	6023      	str	r3, [r4, #0]
 801667c:	6062      	str	r2, [r4, #4]
 801667e:	e7d5      	b.n	801662c <_sungetc_r+0xc>
 8016680:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8016684:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016688:	6363      	str	r3, [r4, #52]	; 0x34
 801668a:	2303      	movs	r3, #3
 801668c:	63a3      	str	r3, [r4, #56]	; 0x38
 801668e:	4623      	mov	r3, r4
 8016690:	f803 5f46 	strb.w	r5, [r3, #70]!
 8016694:	6023      	str	r3, [r4, #0]
 8016696:	2301      	movs	r3, #1
 8016698:	e7dc      	b.n	8016654 <_sungetc_r+0x34>

0801669a <__ssrefill_r>:
 801669a:	b510      	push	{r4, lr}
 801669c:	460c      	mov	r4, r1
 801669e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80166a0:	b169      	cbz	r1, 80166be <__ssrefill_r+0x24>
 80166a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80166a6:	4299      	cmp	r1, r3
 80166a8:	d001      	beq.n	80166ae <__ssrefill_r+0x14>
 80166aa:	f7ff fdbf 	bl	801622c <_free_r>
 80166ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80166b0:	6063      	str	r3, [r4, #4]
 80166b2:	2000      	movs	r0, #0
 80166b4:	6360      	str	r0, [r4, #52]	; 0x34
 80166b6:	b113      	cbz	r3, 80166be <__ssrefill_r+0x24>
 80166b8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80166ba:	6023      	str	r3, [r4, #0]
 80166bc:	bd10      	pop	{r4, pc}
 80166be:	6923      	ldr	r3, [r4, #16]
 80166c0:	6023      	str	r3, [r4, #0]
 80166c2:	2300      	movs	r3, #0
 80166c4:	6063      	str	r3, [r4, #4]
 80166c6:	89a3      	ldrh	r3, [r4, #12]
 80166c8:	f043 0320 	orr.w	r3, r3, #32
 80166cc:	81a3      	strh	r3, [r4, #12]
 80166ce:	f04f 30ff 	mov.w	r0, #4294967295
 80166d2:	e7f3      	b.n	80166bc <__ssrefill_r+0x22>

080166d4 <__ssvfiscanf_r>:
 80166d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80166d8:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 80166dc:	460c      	mov	r4, r1
 80166de:	2100      	movs	r1, #0
 80166e0:	9144      	str	r1, [sp, #272]	; 0x110
 80166e2:	9145      	str	r1, [sp, #276]	; 0x114
 80166e4:	499f      	ldr	r1, [pc, #636]	; (8016964 <__ssvfiscanf_r+0x290>)
 80166e6:	91a0      	str	r1, [sp, #640]	; 0x280
 80166e8:	f10d 0804 	add.w	r8, sp, #4
 80166ec:	499e      	ldr	r1, [pc, #632]	; (8016968 <__ssvfiscanf_r+0x294>)
 80166ee:	f8df 927c 	ldr.w	r9, [pc, #636]	; 801696c <__ssvfiscanf_r+0x298>
 80166f2:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80166f6:	4606      	mov	r6, r0
 80166f8:	4692      	mov	sl, r2
 80166fa:	91a1      	str	r1, [sp, #644]	; 0x284
 80166fc:	9300      	str	r3, [sp, #0]
 80166fe:	270a      	movs	r7, #10
 8016700:	f89a 3000 	ldrb.w	r3, [sl]
 8016704:	2b00      	cmp	r3, #0
 8016706:	f000 812a 	beq.w	801695e <__ssvfiscanf_r+0x28a>
 801670a:	4655      	mov	r5, sl
 801670c:	f7ff f8c8 	bl	80158a0 <__locale_ctype_ptr>
 8016710:	f815 bb01 	ldrb.w	fp, [r5], #1
 8016714:	4458      	add	r0, fp
 8016716:	7843      	ldrb	r3, [r0, #1]
 8016718:	f013 0308 	ands.w	r3, r3, #8
 801671c:	d01c      	beq.n	8016758 <__ssvfiscanf_r+0x84>
 801671e:	6863      	ldr	r3, [r4, #4]
 8016720:	2b00      	cmp	r3, #0
 8016722:	dd12      	ble.n	801674a <__ssvfiscanf_r+0x76>
 8016724:	f7ff f8bc 	bl	80158a0 <__locale_ctype_ptr>
 8016728:	6823      	ldr	r3, [r4, #0]
 801672a:	781a      	ldrb	r2, [r3, #0]
 801672c:	4410      	add	r0, r2
 801672e:	7842      	ldrb	r2, [r0, #1]
 8016730:	0712      	lsls	r2, r2, #28
 8016732:	d401      	bmi.n	8016738 <__ssvfiscanf_r+0x64>
 8016734:	46aa      	mov	sl, r5
 8016736:	e7e3      	b.n	8016700 <__ssvfiscanf_r+0x2c>
 8016738:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801673a:	3201      	adds	r2, #1
 801673c:	9245      	str	r2, [sp, #276]	; 0x114
 801673e:	6862      	ldr	r2, [r4, #4]
 8016740:	3301      	adds	r3, #1
 8016742:	3a01      	subs	r2, #1
 8016744:	6062      	str	r2, [r4, #4]
 8016746:	6023      	str	r3, [r4, #0]
 8016748:	e7e9      	b.n	801671e <__ssvfiscanf_r+0x4a>
 801674a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801674c:	4621      	mov	r1, r4
 801674e:	4630      	mov	r0, r6
 8016750:	4798      	blx	r3
 8016752:	2800      	cmp	r0, #0
 8016754:	d0e6      	beq.n	8016724 <__ssvfiscanf_r+0x50>
 8016756:	e7ed      	b.n	8016734 <__ssvfiscanf_r+0x60>
 8016758:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 801675c:	f040 8082 	bne.w	8016864 <__ssvfiscanf_r+0x190>
 8016760:	9343      	str	r3, [sp, #268]	; 0x10c
 8016762:	9341      	str	r3, [sp, #260]	; 0x104
 8016764:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8016768:	2b2a      	cmp	r3, #42	; 0x2a
 801676a:	d103      	bne.n	8016774 <__ssvfiscanf_r+0xa0>
 801676c:	2310      	movs	r3, #16
 801676e:	9341      	str	r3, [sp, #260]	; 0x104
 8016770:	f10a 0502 	add.w	r5, sl, #2
 8016774:	46aa      	mov	sl, r5
 8016776:	f815 1b01 	ldrb.w	r1, [r5], #1
 801677a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 801677e:	2a09      	cmp	r2, #9
 8016780:	d922      	bls.n	80167c8 <__ssvfiscanf_r+0xf4>
 8016782:	2203      	movs	r2, #3
 8016784:	4879      	ldr	r0, [pc, #484]	; (801696c <__ssvfiscanf_r+0x298>)
 8016786:	f7e9 fd43 	bl	8000210 <memchr>
 801678a:	b138      	cbz	r0, 801679c <__ssvfiscanf_r+0xc8>
 801678c:	eba0 0309 	sub.w	r3, r0, r9
 8016790:	2001      	movs	r0, #1
 8016792:	4098      	lsls	r0, r3
 8016794:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016796:	4318      	orrs	r0, r3
 8016798:	9041      	str	r0, [sp, #260]	; 0x104
 801679a:	46aa      	mov	sl, r5
 801679c:	f89a 3000 	ldrb.w	r3, [sl]
 80167a0:	2b67      	cmp	r3, #103	; 0x67
 80167a2:	f10a 0501 	add.w	r5, sl, #1
 80167a6:	d82b      	bhi.n	8016800 <__ssvfiscanf_r+0x12c>
 80167a8:	2b65      	cmp	r3, #101	; 0x65
 80167aa:	f080 809f 	bcs.w	80168ec <__ssvfiscanf_r+0x218>
 80167ae:	2b47      	cmp	r3, #71	; 0x47
 80167b0:	d810      	bhi.n	80167d4 <__ssvfiscanf_r+0x100>
 80167b2:	2b45      	cmp	r3, #69	; 0x45
 80167b4:	f080 809a 	bcs.w	80168ec <__ssvfiscanf_r+0x218>
 80167b8:	2b00      	cmp	r3, #0
 80167ba:	d06c      	beq.n	8016896 <__ssvfiscanf_r+0x1c2>
 80167bc:	2b25      	cmp	r3, #37	; 0x25
 80167be:	d051      	beq.n	8016864 <__ssvfiscanf_r+0x190>
 80167c0:	2303      	movs	r3, #3
 80167c2:	9347      	str	r3, [sp, #284]	; 0x11c
 80167c4:	9742      	str	r7, [sp, #264]	; 0x108
 80167c6:	e027      	b.n	8016818 <__ssvfiscanf_r+0x144>
 80167c8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80167ca:	fb07 1303 	mla	r3, r7, r3, r1
 80167ce:	3b30      	subs	r3, #48	; 0x30
 80167d0:	9343      	str	r3, [sp, #268]	; 0x10c
 80167d2:	e7cf      	b.n	8016774 <__ssvfiscanf_r+0xa0>
 80167d4:	2b5b      	cmp	r3, #91	; 0x5b
 80167d6:	d06a      	beq.n	80168ae <__ssvfiscanf_r+0x1da>
 80167d8:	d80c      	bhi.n	80167f4 <__ssvfiscanf_r+0x120>
 80167da:	2b58      	cmp	r3, #88	; 0x58
 80167dc:	d1f0      	bne.n	80167c0 <__ssvfiscanf_r+0xec>
 80167de:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80167e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80167e4:	9241      	str	r2, [sp, #260]	; 0x104
 80167e6:	2210      	movs	r2, #16
 80167e8:	9242      	str	r2, [sp, #264]	; 0x108
 80167ea:	2b6e      	cmp	r3, #110	; 0x6e
 80167ec:	bf8c      	ite	hi
 80167ee:	2304      	movhi	r3, #4
 80167f0:	2303      	movls	r3, #3
 80167f2:	e010      	b.n	8016816 <__ssvfiscanf_r+0x142>
 80167f4:	2b63      	cmp	r3, #99	; 0x63
 80167f6:	d065      	beq.n	80168c4 <__ssvfiscanf_r+0x1f0>
 80167f8:	2b64      	cmp	r3, #100	; 0x64
 80167fa:	d1e1      	bne.n	80167c0 <__ssvfiscanf_r+0xec>
 80167fc:	9742      	str	r7, [sp, #264]	; 0x108
 80167fe:	e7f4      	b.n	80167ea <__ssvfiscanf_r+0x116>
 8016800:	2b70      	cmp	r3, #112	; 0x70
 8016802:	d04b      	beq.n	801689c <__ssvfiscanf_r+0x1c8>
 8016804:	d826      	bhi.n	8016854 <__ssvfiscanf_r+0x180>
 8016806:	2b6e      	cmp	r3, #110	; 0x6e
 8016808:	d062      	beq.n	80168d0 <__ssvfiscanf_r+0x1fc>
 801680a:	d84c      	bhi.n	80168a6 <__ssvfiscanf_r+0x1d2>
 801680c:	2b69      	cmp	r3, #105	; 0x69
 801680e:	d1d7      	bne.n	80167c0 <__ssvfiscanf_r+0xec>
 8016810:	2300      	movs	r3, #0
 8016812:	9342      	str	r3, [sp, #264]	; 0x108
 8016814:	2303      	movs	r3, #3
 8016816:	9347      	str	r3, [sp, #284]	; 0x11c
 8016818:	6863      	ldr	r3, [r4, #4]
 801681a:	2b00      	cmp	r3, #0
 801681c:	dd68      	ble.n	80168f0 <__ssvfiscanf_r+0x21c>
 801681e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016820:	0659      	lsls	r1, r3, #25
 8016822:	d407      	bmi.n	8016834 <__ssvfiscanf_r+0x160>
 8016824:	f7ff f83c 	bl	80158a0 <__locale_ctype_ptr>
 8016828:	6823      	ldr	r3, [r4, #0]
 801682a:	781a      	ldrb	r2, [r3, #0]
 801682c:	4410      	add	r0, r2
 801682e:	7842      	ldrb	r2, [r0, #1]
 8016830:	0712      	lsls	r2, r2, #28
 8016832:	d464      	bmi.n	80168fe <__ssvfiscanf_r+0x22a>
 8016834:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8016836:	2b02      	cmp	r3, #2
 8016838:	dc73      	bgt.n	8016922 <__ssvfiscanf_r+0x24e>
 801683a:	466b      	mov	r3, sp
 801683c:	4622      	mov	r2, r4
 801683e:	a941      	add	r1, sp, #260	; 0x104
 8016840:	4630      	mov	r0, r6
 8016842:	f000 f9d7 	bl	8016bf4 <_scanf_chars>
 8016846:	2801      	cmp	r0, #1
 8016848:	f000 8089 	beq.w	801695e <__ssvfiscanf_r+0x28a>
 801684c:	2802      	cmp	r0, #2
 801684e:	f47f af71 	bne.w	8016734 <__ssvfiscanf_r+0x60>
 8016852:	e01d      	b.n	8016890 <__ssvfiscanf_r+0x1bc>
 8016854:	2b75      	cmp	r3, #117	; 0x75
 8016856:	d0d1      	beq.n	80167fc <__ssvfiscanf_r+0x128>
 8016858:	2b78      	cmp	r3, #120	; 0x78
 801685a:	d0c0      	beq.n	80167de <__ssvfiscanf_r+0x10a>
 801685c:	2b73      	cmp	r3, #115	; 0x73
 801685e:	d1af      	bne.n	80167c0 <__ssvfiscanf_r+0xec>
 8016860:	2302      	movs	r3, #2
 8016862:	e7d8      	b.n	8016816 <__ssvfiscanf_r+0x142>
 8016864:	6863      	ldr	r3, [r4, #4]
 8016866:	2b00      	cmp	r3, #0
 8016868:	dd0c      	ble.n	8016884 <__ssvfiscanf_r+0x1b0>
 801686a:	6823      	ldr	r3, [r4, #0]
 801686c:	781a      	ldrb	r2, [r3, #0]
 801686e:	455a      	cmp	r2, fp
 8016870:	d175      	bne.n	801695e <__ssvfiscanf_r+0x28a>
 8016872:	3301      	adds	r3, #1
 8016874:	6862      	ldr	r2, [r4, #4]
 8016876:	6023      	str	r3, [r4, #0]
 8016878:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801687a:	3a01      	subs	r2, #1
 801687c:	3301      	adds	r3, #1
 801687e:	6062      	str	r2, [r4, #4]
 8016880:	9345      	str	r3, [sp, #276]	; 0x114
 8016882:	e757      	b.n	8016734 <__ssvfiscanf_r+0x60>
 8016884:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016886:	4621      	mov	r1, r4
 8016888:	4630      	mov	r0, r6
 801688a:	4798      	blx	r3
 801688c:	2800      	cmp	r0, #0
 801688e:	d0ec      	beq.n	801686a <__ssvfiscanf_r+0x196>
 8016890:	9844      	ldr	r0, [sp, #272]	; 0x110
 8016892:	2800      	cmp	r0, #0
 8016894:	d159      	bne.n	801694a <__ssvfiscanf_r+0x276>
 8016896:	f04f 30ff 	mov.w	r0, #4294967295
 801689a:	e05c      	b.n	8016956 <__ssvfiscanf_r+0x282>
 801689c:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801689e:	f042 0220 	orr.w	r2, r2, #32
 80168a2:	9241      	str	r2, [sp, #260]	; 0x104
 80168a4:	e79b      	b.n	80167de <__ssvfiscanf_r+0x10a>
 80168a6:	2308      	movs	r3, #8
 80168a8:	9342      	str	r3, [sp, #264]	; 0x108
 80168aa:	2304      	movs	r3, #4
 80168ac:	e7b3      	b.n	8016816 <__ssvfiscanf_r+0x142>
 80168ae:	4629      	mov	r1, r5
 80168b0:	4640      	mov	r0, r8
 80168b2:	f000 fb4f 	bl	8016f54 <__sccl>
 80168b6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80168b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80168bc:	9341      	str	r3, [sp, #260]	; 0x104
 80168be:	4605      	mov	r5, r0
 80168c0:	2301      	movs	r3, #1
 80168c2:	e7a8      	b.n	8016816 <__ssvfiscanf_r+0x142>
 80168c4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80168c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80168ca:	9341      	str	r3, [sp, #260]	; 0x104
 80168cc:	2300      	movs	r3, #0
 80168ce:	e7a2      	b.n	8016816 <__ssvfiscanf_r+0x142>
 80168d0:	9841      	ldr	r0, [sp, #260]	; 0x104
 80168d2:	06c3      	lsls	r3, r0, #27
 80168d4:	f53f af2e 	bmi.w	8016734 <__ssvfiscanf_r+0x60>
 80168d8:	9b00      	ldr	r3, [sp, #0]
 80168da:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80168dc:	1d19      	adds	r1, r3, #4
 80168de:	9100      	str	r1, [sp, #0]
 80168e0:	681b      	ldr	r3, [r3, #0]
 80168e2:	07c0      	lsls	r0, r0, #31
 80168e4:	bf4c      	ite	mi
 80168e6:	801a      	strhmi	r2, [r3, #0]
 80168e8:	601a      	strpl	r2, [r3, #0]
 80168ea:	e723      	b.n	8016734 <__ssvfiscanf_r+0x60>
 80168ec:	2305      	movs	r3, #5
 80168ee:	e792      	b.n	8016816 <__ssvfiscanf_r+0x142>
 80168f0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80168f2:	4621      	mov	r1, r4
 80168f4:	4630      	mov	r0, r6
 80168f6:	4798      	blx	r3
 80168f8:	2800      	cmp	r0, #0
 80168fa:	d090      	beq.n	801681e <__ssvfiscanf_r+0x14a>
 80168fc:	e7c8      	b.n	8016890 <__ssvfiscanf_r+0x1bc>
 80168fe:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8016900:	3201      	adds	r2, #1
 8016902:	9245      	str	r2, [sp, #276]	; 0x114
 8016904:	6862      	ldr	r2, [r4, #4]
 8016906:	3a01      	subs	r2, #1
 8016908:	2a00      	cmp	r2, #0
 801690a:	6062      	str	r2, [r4, #4]
 801690c:	dd02      	ble.n	8016914 <__ssvfiscanf_r+0x240>
 801690e:	3301      	adds	r3, #1
 8016910:	6023      	str	r3, [r4, #0]
 8016912:	e787      	b.n	8016824 <__ssvfiscanf_r+0x150>
 8016914:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016916:	4621      	mov	r1, r4
 8016918:	4630      	mov	r0, r6
 801691a:	4798      	blx	r3
 801691c:	2800      	cmp	r0, #0
 801691e:	d081      	beq.n	8016824 <__ssvfiscanf_r+0x150>
 8016920:	e7b6      	b.n	8016890 <__ssvfiscanf_r+0x1bc>
 8016922:	2b04      	cmp	r3, #4
 8016924:	dc06      	bgt.n	8016934 <__ssvfiscanf_r+0x260>
 8016926:	466b      	mov	r3, sp
 8016928:	4622      	mov	r2, r4
 801692a:	a941      	add	r1, sp, #260	; 0x104
 801692c:	4630      	mov	r0, r6
 801692e:	f000 f9c5 	bl	8016cbc <_scanf_i>
 8016932:	e788      	b.n	8016846 <__ssvfiscanf_r+0x172>
 8016934:	4b0e      	ldr	r3, [pc, #56]	; (8016970 <__ssvfiscanf_r+0x29c>)
 8016936:	2b00      	cmp	r3, #0
 8016938:	f43f aefc 	beq.w	8016734 <__ssvfiscanf_r+0x60>
 801693c:	466b      	mov	r3, sp
 801693e:	4622      	mov	r2, r4
 8016940:	a941      	add	r1, sp, #260	; 0x104
 8016942:	4630      	mov	r0, r6
 8016944:	f7fc f9d0 	bl	8012ce8 <_scanf_float>
 8016948:	e77d      	b.n	8016846 <__ssvfiscanf_r+0x172>
 801694a:	89a3      	ldrh	r3, [r4, #12]
 801694c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8016950:	bf18      	it	ne
 8016952:	f04f 30ff 	movne.w	r0, #4294967295
 8016956:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 801695a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801695e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8016960:	e7f9      	b.n	8016956 <__ssvfiscanf_r+0x282>
 8016962:	bf00      	nop
 8016964:	08016621 	.word	0x08016621
 8016968:	0801669b 	.word	0x0801669b
 801696c:	08017ce2 	.word	0x08017ce2
 8016970:	08012ce9 	.word	0x08012ce9

08016974 <__sfputc_r>:
 8016974:	6893      	ldr	r3, [r2, #8]
 8016976:	3b01      	subs	r3, #1
 8016978:	2b00      	cmp	r3, #0
 801697a:	b410      	push	{r4}
 801697c:	6093      	str	r3, [r2, #8]
 801697e:	da08      	bge.n	8016992 <__sfputc_r+0x1e>
 8016980:	6994      	ldr	r4, [r2, #24]
 8016982:	42a3      	cmp	r3, r4
 8016984:	db01      	blt.n	801698a <__sfputc_r+0x16>
 8016986:	290a      	cmp	r1, #10
 8016988:	d103      	bne.n	8016992 <__sfputc_r+0x1e>
 801698a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801698e:	f7fd bbbd 	b.w	801410c <__swbuf_r>
 8016992:	6813      	ldr	r3, [r2, #0]
 8016994:	1c58      	adds	r0, r3, #1
 8016996:	6010      	str	r0, [r2, #0]
 8016998:	7019      	strb	r1, [r3, #0]
 801699a:	4608      	mov	r0, r1
 801699c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80169a0:	4770      	bx	lr

080169a2 <__sfputs_r>:
 80169a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80169a4:	4606      	mov	r6, r0
 80169a6:	460f      	mov	r7, r1
 80169a8:	4614      	mov	r4, r2
 80169aa:	18d5      	adds	r5, r2, r3
 80169ac:	42ac      	cmp	r4, r5
 80169ae:	d101      	bne.n	80169b4 <__sfputs_r+0x12>
 80169b0:	2000      	movs	r0, #0
 80169b2:	e007      	b.n	80169c4 <__sfputs_r+0x22>
 80169b4:	463a      	mov	r2, r7
 80169b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80169ba:	4630      	mov	r0, r6
 80169bc:	f7ff ffda 	bl	8016974 <__sfputc_r>
 80169c0:	1c43      	adds	r3, r0, #1
 80169c2:	d1f3      	bne.n	80169ac <__sfputs_r+0xa>
 80169c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080169c8 <_vfiprintf_r>:
 80169c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80169cc:	460c      	mov	r4, r1
 80169ce:	b09d      	sub	sp, #116	; 0x74
 80169d0:	4617      	mov	r7, r2
 80169d2:	461d      	mov	r5, r3
 80169d4:	4606      	mov	r6, r0
 80169d6:	b118      	cbz	r0, 80169e0 <_vfiprintf_r+0x18>
 80169d8:	6983      	ldr	r3, [r0, #24]
 80169da:	b90b      	cbnz	r3, 80169e0 <_vfiprintf_r+0x18>
 80169dc:	f7fe fbac 	bl	8015138 <__sinit>
 80169e0:	4b7c      	ldr	r3, [pc, #496]	; (8016bd4 <_vfiprintf_r+0x20c>)
 80169e2:	429c      	cmp	r4, r3
 80169e4:	d158      	bne.n	8016a98 <_vfiprintf_r+0xd0>
 80169e6:	6874      	ldr	r4, [r6, #4]
 80169e8:	89a3      	ldrh	r3, [r4, #12]
 80169ea:	0718      	lsls	r0, r3, #28
 80169ec:	d55e      	bpl.n	8016aac <_vfiprintf_r+0xe4>
 80169ee:	6923      	ldr	r3, [r4, #16]
 80169f0:	2b00      	cmp	r3, #0
 80169f2:	d05b      	beq.n	8016aac <_vfiprintf_r+0xe4>
 80169f4:	2300      	movs	r3, #0
 80169f6:	9309      	str	r3, [sp, #36]	; 0x24
 80169f8:	2320      	movs	r3, #32
 80169fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80169fe:	2330      	movs	r3, #48	; 0x30
 8016a00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016a04:	9503      	str	r5, [sp, #12]
 8016a06:	f04f 0b01 	mov.w	fp, #1
 8016a0a:	46b8      	mov	r8, r7
 8016a0c:	4645      	mov	r5, r8
 8016a0e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8016a12:	b10b      	cbz	r3, 8016a18 <_vfiprintf_r+0x50>
 8016a14:	2b25      	cmp	r3, #37	; 0x25
 8016a16:	d154      	bne.n	8016ac2 <_vfiprintf_r+0xfa>
 8016a18:	ebb8 0a07 	subs.w	sl, r8, r7
 8016a1c:	d00b      	beq.n	8016a36 <_vfiprintf_r+0x6e>
 8016a1e:	4653      	mov	r3, sl
 8016a20:	463a      	mov	r2, r7
 8016a22:	4621      	mov	r1, r4
 8016a24:	4630      	mov	r0, r6
 8016a26:	f7ff ffbc 	bl	80169a2 <__sfputs_r>
 8016a2a:	3001      	adds	r0, #1
 8016a2c:	f000 80c2 	beq.w	8016bb4 <_vfiprintf_r+0x1ec>
 8016a30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016a32:	4453      	add	r3, sl
 8016a34:	9309      	str	r3, [sp, #36]	; 0x24
 8016a36:	f898 3000 	ldrb.w	r3, [r8]
 8016a3a:	2b00      	cmp	r3, #0
 8016a3c:	f000 80ba 	beq.w	8016bb4 <_vfiprintf_r+0x1ec>
 8016a40:	2300      	movs	r3, #0
 8016a42:	f04f 32ff 	mov.w	r2, #4294967295
 8016a46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016a4a:	9304      	str	r3, [sp, #16]
 8016a4c:	9307      	str	r3, [sp, #28]
 8016a4e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016a52:	931a      	str	r3, [sp, #104]	; 0x68
 8016a54:	46a8      	mov	r8, r5
 8016a56:	2205      	movs	r2, #5
 8016a58:	f818 1b01 	ldrb.w	r1, [r8], #1
 8016a5c:	485e      	ldr	r0, [pc, #376]	; (8016bd8 <_vfiprintf_r+0x210>)
 8016a5e:	f7e9 fbd7 	bl	8000210 <memchr>
 8016a62:	9b04      	ldr	r3, [sp, #16]
 8016a64:	bb78      	cbnz	r0, 8016ac6 <_vfiprintf_r+0xfe>
 8016a66:	06d9      	lsls	r1, r3, #27
 8016a68:	bf44      	itt	mi
 8016a6a:	2220      	movmi	r2, #32
 8016a6c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016a70:	071a      	lsls	r2, r3, #28
 8016a72:	bf44      	itt	mi
 8016a74:	222b      	movmi	r2, #43	; 0x2b
 8016a76:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016a7a:	782a      	ldrb	r2, [r5, #0]
 8016a7c:	2a2a      	cmp	r2, #42	; 0x2a
 8016a7e:	d02a      	beq.n	8016ad6 <_vfiprintf_r+0x10e>
 8016a80:	9a07      	ldr	r2, [sp, #28]
 8016a82:	46a8      	mov	r8, r5
 8016a84:	2000      	movs	r0, #0
 8016a86:	250a      	movs	r5, #10
 8016a88:	4641      	mov	r1, r8
 8016a8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016a8e:	3b30      	subs	r3, #48	; 0x30
 8016a90:	2b09      	cmp	r3, #9
 8016a92:	d969      	bls.n	8016b68 <_vfiprintf_r+0x1a0>
 8016a94:	b360      	cbz	r0, 8016af0 <_vfiprintf_r+0x128>
 8016a96:	e024      	b.n	8016ae2 <_vfiprintf_r+0x11a>
 8016a98:	4b50      	ldr	r3, [pc, #320]	; (8016bdc <_vfiprintf_r+0x214>)
 8016a9a:	429c      	cmp	r4, r3
 8016a9c:	d101      	bne.n	8016aa2 <_vfiprintf_r+0xda>
 8016a9e:	68b4      	ldr	r4, [r6, #8]
 8016aa0:	e7a2      	b.n	80169e8 <_vfiprintf_r+0x20>
 8016aa2:	4b4f      	ldr	r3, [pc, #316]	; (8016be0 <_vfiprintf_r+0x218>)
 8016aa4:	429c      	cmp	r4, r3
 8016aa6:	bf08      	it	eq
 8016aa8:	68f4      	ldreq	r4, [r6, #12]
 8016aaa:	e79d      	b.n	80169e8 <_vfiprintf_r+0x20>
 8016aac:	4621      	mov	r1, r4
 8016aae:	4630      	mov	r0, r6
 8016ab0:	f7fd fb90 	bl	80141d4 <__swsetup_r>
 8016ab4:	2800      	cmp	r0, #0
 8016ab6:	d09d      	beq.n	80169f4 <_vfiprintf_r+0x2c>
 8016ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8016abc:	b01d      	add	sp, #116	; 0x74
 8016abe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ac2:	46a8      	mov	r8, r5
 8016ac4:	e7a2      	b.n	8016a0c <_vfiprintf_r+0x44>
 8016ac6:	4a44      	ldr	r2, [pc, #272]	; (8016bd8 <_vfiprintf_r+0x210>)
 8016ac8:	1a80      	subs	r0, r0, r2
 8016aca:	fa0b f000 	lsl.w	r0, fp, r0
 8016ace:	4318      	orrs	r0, r3
 8016ad0:	9004      	str	r0, [sp, #16]
 8016ad2:	4645      	mov	r5, r8
 8016ad4:	e7be      	b.n	8016a54 <_vfiprintf_r+0x8c>
 8016ad6:	9a03      	ldr	r2, [sp, #12]
 8016ad8:	1d11      	adds	r1, r2, #4
 8016ada:	6812      	ldr	r2, [r2, #0]
 8016adc:	9103      	str	r1, [sp, #12]
 8016ade:	2a00      	cmp	r2, #0
 8016ae0:	db01      	blt.n	8016ae6 <_vfiprintf_r+0x11e>
 8016ae2:	9207      	str	r2, [sp, #28]
 8016ae4:	e004      	b.n	8016af0 <_vfiprintf_r+0x128>
 8016ae6:	4252      	negs	r2, r2
 8016ae8:	f043 0302 	orr.w	r3, r3, #2
 8016aec:	9207      	str	r2, [sp, #28]
 8016aee:	9304      	str	r3, [sp, #16]
 8016af0:	f898 3000 	ldrb.w	r3, [r8]
 8016af4:	2b2e      	cmp	r3, #46	; 0x2e
 8016af6:	d10e      	bne.n	8016b16 <_vfiprintf_r+0x14e>
 8016af8:	f898 3001 	ldrb.w	r3, [r8, #1]
 8016afc:	2b2a      	cmp	r3, #42	; 0x2a
 8016afe:	d138      	bne.n	8016b72 <_vfiprintf_r+0x1aa>
 8016b00:	9b03      	ldr	r3, [sp, #12]
 8016b02:	1d1a      	adds	r2, r3, #4
 8016b04:	681b      	ldr	r3, [r3, #0]
 8016b06:	9203      	str	r2, [sp, #12]
 8016b08:	2b00      	cmp	r3, #0
 8016b0a:	bfb8      	it	lt
 8016b0c:	f04f 33ff 	movlt.w	r3, #4294967295
 8016b10:	f108 0802 	add.w	r8, r8, #2
 8016b14:	9305      	str	r3, [sp, #20]
 8016b16:	4d33      	ldr	r5, [pc, #204]	; (8016be4 <_vfiprintf_r+0x21c>)
 8016b18:	f898 1000 	ldrb.w	r1, [r8]
 8016b1c:	2203      	movs	r2, #3
 8016b1e:	4628      	mov	r0, r5
 8016b20:	f7e9 fb76 	bl	8000210 <memchr>
 8016b24:	b140      	cbz	r0, 8016b38 <_vfiprintf_r+0x170>
 8016b26:	2340      	movs	r3, #64	; 0x40
 8016b28:	1b40      	subs	r0, r0, r5
 8016b2a:	fa03 f000 	lsl.w	r0, r3, r0
 8016b2e:	9b04      	ldr	r3, [sp, #16]
 8016b30:	4303      	orrs	r3, r0
 8016b32:	f108 0801 	add.w	r8, r8, #1
 8016b36:	9304      	str	r3, [sp, #16]
 8016b38:	f898 1000 	ldrb.w	r1, [r8]
 8016b3c:	482a      	ldr	r0, [pc, #168]	; (8016be8 <_vfiprintf_r+0x220>)
 8016b3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016b42:	2206      	movs	r2, #6
 8016b44:	f108 0701 	add.w	r7, r8, #1
 8016b48:	f7e9 fb62 	bl	8000210 <memchr>
 8016b4c:	2800      	cmp	r0, #0
 8016b4e:	d037      	beq.n	8016bc0 <_vfiprintf_r+0x1f8>
 8016b50:	4b26      	ldr	r3, [pc, #152]	; (8016bec <_vfiprintf_r+0x224>)
 8016b52:	bb1b      	cbnz	r3, 8016b9c <_vfiprintf_r+0x1d4>
 8016b54:	9b03      	ldr	r3, [sp, #12]
 8016b56:	3307      	adds	r3, #7
 8016b58:	f023 0307 	bic.w	r3, r3, #7
 8016b5c:	3308      	adds	r3, #8
 8016b5e:	9303      	str	r3, [sp, #12]
 8016b60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016b62:	444b      	add	r3, r9
 8016b64:	9309      	str	r3, [sp, #36]	; 0x24
 8016b66:	e750      	b.n	8016a0a <_vfiprintf_r+0x42>
 8016b68:	fb05 3202 	mla	r2, r5, r2, r3
 8016b6c:	2001      	movs	r0, #1
 8016b6e:	4688      	mov	r8, r1
 8016b70:	e78a      	b.n	8016a88 <_vfiprintf_r+0xc0>
 8016b72:	2300      	movs	r3, #0
 8016b74:	f108 0801 	add.w	r8, r8, #1
 8016b78:	9305      	str	r3, [sp, #20]
 8016b7a:	4619      	mov	r1, r3
 8016b7c:	250a      	movs	r5, #10
 8016b7e:	4640      	mov	r0, r8
 8016b80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016b84:	3a30      	subs	r2, #48	; 0x30
 8016b86:	2a09      	cmp	r2, #9
 8016b88:	d903      	bls.n	8016b92 <_vfiprintf_r+0x1ca>
 8016b8a:	2b00      	cmp	r3, #0
 8016b8c:	d0c3      	beq.n	8016b16 <_vfiprintf_r+0x14e>
 8016b8e:	9105      	str	r1, [sp, #20]
 8016b90:	e7c1      	b.n	8016b16 <_vfiprintf_r+0x14e>
 8016b92:	fb05 2101 	mla	r1, r5, r1, r2
 8016b96:	2301      	movs	r3, #1
 8016b98:	4680      	mov	r8, r0
 8016b9a:	e7f0      	b.n	8016b7e <_vfiprintf_r+0x1b6>
 8016b9c:	ab03      	add	r3, sp, #12
 8016b9e:	9300      	str	r3, [sp, #0]
 8016ba0:	4622      	mov	r2, r4
 8016ba2:	4b13      	ldr	r3, [pc, #76]	; (8016bf0 <_vfiprintf_r+0x228>)
 8016ba4:	a904      	add	r1, sp, #16
 8016ba6:	4630      	mov	r0, r6
 8016ba8:	f7fb fcd6 	bl	8012558 <_printf_float>
 8016bac:	f1b0 3fff 	cmp.w	r0, #4294967295
 8016bb0:	4681      	mov	r9, r0
 8016bb2:	d1d5      	bne.n	8016b60 <_vfiprintf_r+0x198>
 8016bb4:	89a3      	ldrh	r3, [r4, #12]
 8016bb6:	065b      	lsls	r3, r3, #25
 8016bb8:	f53f af7e 	bmi.w	8016ab8 <_vfiprintf_r+0xf0>
 8016bbc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016bbe:	e77d      	b.n	8016abc <_vfiprintf_r+0xf4>
 8016bc0:	ab03      	add	r3, sp, #12
 8016bc2:	9300      	str	r3, [sp, #0]
 8016bc4:	4622      	mov	r2, r4
 8016bc6:	4b0a      	ldr	r3, [pc, #40]	; (8016bf0 <_vfiprintf_r+0x228>)
 8016bc8:	a904      	add	r1, sp, #16
 8016bca:	4630      	mov	r0, r6
 8016bcc:	f7fb ff7a 	bl	8012ac4 <_printf_i>
 8016bd0:	e7ec      	b.n	8016bac <_vfiprintf_r+0x1e4>
 8016bd2:	bf00      	nop
 8016bd4:	08017b90 	.word	0x08017b90
 8016bd8:	08017cdc 	.word	0x08017cdc
 8016bdc:	08017bb0 	.word	0x08017bb0
 8016be0:	08017b70 	.word	0x08017b70
 8016be4:	08017ce2 	.word	0x08017ce2
 8016be8:	08017ce6 	.word	0x08017ce6
 8016bec:	08012559 	.word	0x08012559
 8016bf0:	080169a3 	.word	0x080169a3

08016bf4 <_scanf_chars>:
 8016bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016bf8:	4615      	mov	r5, r2
 8016bfa:	688a      	ldr	r2, [r1, #8]
 8016bfc:	4680      	mov	r8, r0
 8016bfe:	460c      	mov	r4, r1
 8016c00:	b932      	cbnz	r2, 8016c10 <_scanf_chars+0x1c>
 8016c02:	698a      	ldr	r2, [r1, #24]
 8016c04:	2a00      	cmp	r2, #0
 8016c06:	bf14      	ite	ne
 8016c08:	f04f 32ff 	movne.w	r2, #4294967295
 8016c0c:	2201      	moveq	r2, #1
 8016c0e:	608a      	str	r2, [r1, #8]
 8016c10:	6822      	ldr	r2, [r4, #0]
 8016c12:	06d1      	lsls	r1, r2, #27
 8016c14:	bf5f      	itttt	pl
 8016c16:	681a      	ldrpl	r2, [r3, #0]
 8016c18:	1d11      	addpl	r1, r2, #4
 8016c1a:	6019      	strpl	r1, [r3, #0]
 8016c1c:	6817      	ldrpl	r7, [r2, #0]
 8016c1e:	2600      	movs	r6, #0
 8016c20:	69a3      	ldr	r3, [r4, #24]
 8016c22:	b1db      	cbz	r3, 8016c5c <_scanf_chars+0x68>
 8016c24:	2b01      	cmp	r3, #1
 8016c26:	d107      	bne.n	8016c38 <_scanf_chars+0x44>
 8016c28:	682b      	ldr	r3, [r5, #0]
 8016c2a:	6962      	ldr	r2, [r4, #20]
 8016c2c:	781b      	ldrb	r3, [r3, #0]
 8016c2e:	5cd3      	ldrb	r3, [r2, r3]
 8016c30:	b9a3      	cbnz	r3, 8016c5c <_scanf_chars+0x68>
 8016c32:	2e00      	cmp	r6, #0
 8016c34:	d132      	bne.n	8016c9c <_scanf_chars+0xa8>
 8016c36:	e006      	b.n	8016c46 <_scanf_chars+0x52>
 8016c38:	2b02      	cmp	r3, #2
 8016c3a:	d007      	beq.n	8016c4c <_scanf_chars+0x58>
 8016c3c:	2e00      	cmp	r6, #0
 8016c3e:	d12d      	bne.n	8016c9c <_scanf_chars+0xa8>
 8016c40:	69a3      	ldr	r3, [r4, #24]
 8016c42:	2b01      	cmp	r3, #1
 8016c44:	d12a      	bne.n	8016c9c <_scanf_chars+0xa8>
 8016c46:	2001      	movs	r0, #1
 8016c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016c4c:	f7fe fe28 	bl	80158a0 <__locale_ctype_ptr>
 8016c50:	682b      	ldr	r3, [r5, #0]
 8016c52:	781b      	ldrb	r3, [r3, #0]
 8016c54:	4418      	add	r0, r3
 8016c56:	7843      	ldrb	r3, [r0, #1]
 8016c58:	071b      	lsls	r3, r3, #28
 8016c5a:	d4ef      	bmi.n	8016c3c <_scanf_chars+0x48>
 8016c5c:	6823      	ldr	r3, [r4, #0]
 8016c5e:	06da      	lsls	r2, r3, #27
 8016c60:	bf5e      	ittt	pl
 8016c62:	682b      	ldrpl	r3, [r5, #0]
 8016c64:	781b      	ldrbpl	r3, [r3, #0]
 8016c66:	703b      	strbpl	r3, [r7, #0]
 8016c68:	682a      	ldr	r2, [r5, #0]
 8016c6a:	686b      	ldr	r3, [r5, #4]
 8016c6c:	f102 0201 	add.w	r2, r2, #1
 8016c70:	602a      	str	r2, [r5, #0]
 8016c72:	68a2      	ldr	r2, [r4, #8]
 8016c74:	f103 33ff 	add.w	r3, r3, #4294967295
 8016c78:	f102 32ff 	add.w	r2, r2, #4294967295
 8016c7c:	606b      	str	r3, [r5, #4]
 8016c7e:	f106 0601 	add.w	r6, r6, #1
 8016c82:	bf58      	it	pl
 8016c84:	3701      	addpl	r7, #1
 8016c86:	60a2      	str	r2, [r4, #8]
 8016c88:	b142      	cbz	r2, 8016c9c <_scanf_chars+0xa8>
 8016c8a:	2b00      	cmp	r3, #0
 8016c8c:	dcc8      	bgt.n	8016c20 <_scanf_chars+0x2c>
 8016c8e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016c92:	4629      	mov	r1, r5
 8016c94:	4640      	mov	r0, r8
 8016c96:	4798      	blx	r3
 8016c98:	2800      	cmp	r0, #0
 8016c9a:	d0c1      	beq.n	8016c20 <_scanf_chars+0x2c>
 8016c9c:	6823      	ldr	r3, [r4, #0]
 8016c9e:	f013 0310 	ands.w	r3, r3, #16
 8016ca2:	d105      	bne.n	8016cb0 <_scanf_chars+0xbc>
 8016ca4:	68e2      	ldr	r2, [r4, #12]
 8016ca6:	3201      	adds	r2, #1
 8016ca8:	60e2      	str	r2, [r4, #12]
 8016caa:	69a2      	ldr	r2, [r4, #24]
 8016cac:	b102      	cbz	r2, 8016cb0 <_scanf_chars+0xbc>
 8016cae:	703b      	strb	r3, [r7, #0]
 8016cb0:	6923      	ldr	r3, [r4, #16]
 8016cb2:	441e      	add	r6, r3
 8016cb4:	6126      	str	r6, [r4, #16]
 8016cb6:	2000      	movs	r0, #0
 8016cb8:	e7c6      	b.n	8016c48 <_scanf_chars+0x54>
	...

08016cbc <_scanf_i>:
 8016cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016cc0:	469a      	mov	sl, r3
 8016cc2:	4b74      	ldr	r3, [pc, #464]	; (8016e94 <_scanf_i+0x1d8>)
 8016cc4:	460c      	mov	r4, r1
 8016cc6:	4683      	mov	fp, r0
 8016cc8:	4616      	mov	r6, r2
 8016cca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016cce:	b087      	sub	sp, #28
 8016cd0:	ab03      	add	r3, sp, #12
 8016cd2:	68a7      	ldr	r7, [r4, #8]
 8016cd4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8016cd8:	4b6f      	ldr	r3, [pc, #444]	; (8016e98 <_scanf_i+0x1dc>)
 8016cda:	69a1      	ldr	r1, [r4, #24]
 8016cdc:	4a6f      	ldr	r2, [pc, #444]	; (8016e9c <_scanf_i+0x1e0>)
 8016cde:	2903      	cmp	r1, #3
 8016ce0:	bf08      	it	eq
 8016ce2:	461a      	moveq	r2, r3
 8016ce4:	1e7b      	subs	r3, r7, #1
 8016ce6:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8016cea:	bf84      	itt	hi
 8016cec:	f240 135d 	movwhi	r3, #349	; 0x15d
 8016cf0:	60a3      	strhi	r3, [r4, #8]
 8016cf2:	6823      	ldr	r3, [r4, #0]
 8016cf4:	9200      	str	r2, [sp, #0]
 8016cf6:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8016cfa:	bf88      	it	hi
 8016cfc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8016d00:	f104 091c 	add.w	r9, r4, #28
 8016d04:	6023      	str	r3, [r4, #0]
 8016d06:	bf8c      	ite	hi
 8016d08:	197f      	addhi	r7, r7, r5
 8016d0a:	2700      	movls	r7, #0
 8016d0c:	464b      	mov	r3, r9
 8016d0e:	f04f 0800 	mov.w	r8, #0
 8016d12:	9301      	str	r3, [sp, #4]
 8016d14:	6831      	ldr	r1, [r6, #0]
 8016d16:	ab03      	add	r3, sp, #12
 8016d18:	2202      	movs	r2, #2
 8016d1a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8016d1e:	7809      	ldrb	r1, [r1, #0]
 8016d20:	f7e9 fa76 	bl	8000210 <memchr>
 8016d24:	9b01      	ldr	r3, [sp, #4]
 8016d26:	b330      	cbz	r0, 8016d76 <_scanf_i+0xba>
 8016d28:	f1b8 0f01 	cmp.w	r8, #1
 8016d2c:	d15a      	bne.n	8016de4 <_scanf_i+0x128>
 8016d2e:	6862      	ldr	r2, [r4, #4]
 8016d30:	b92a      	cbnz	r2, 8016d3e <_scanf_i+0x82>
 8016d32:	6822      	ldr	r2, [r4, #0]
 8016d34:	2108      	movs	r1, #8
 8016d36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8016d3a:	6061      	str	r1, [r4, #4]
 8016d3c:	6022      	str	r2, [r4, #0]
 8016d3e:	6822      	ldr	r2, [r4, #0]
 8016d40:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8016d44:	6022      	str	r2, [r4, #0]
 8016d46:	68a2      	ldr	r2, [r4, #8]
 8016d48:	1e51      	subs	r1, r2, #1
 8016d4a:	60a1      	str	r1, [r4, #8]
 8016d4c:	b19a      	cbz	r2, 8016d76 <_scanf_i+0xba>
 8016d4e:	6832      	ldr	r2, [r6, #0]
 8016d50:	1c51      	adds	r1, r2, #1
 8016d52:	6031      	str	r1, [r6, #0]
 8016d54:	7812      	ldrb	r2, [r2, #0]
 8016d56:	701a      	strb	r2, [r3, #0]
 8016d58:	1c5d      	adds	r5, r3, #1
 8016d5a:	6873      	ldr	r3, [r6, #4]
 8016d5c:	3b01      	subs	r3, #1
 8016d5e:	2b00      	cmp	r3, #0
 8016d60:	6073      	str	r3, [r6, #4]
 8016d62:	dc07      	bgt.n	8016d74 <_scanf_i+0xb8>
 8016d64:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016d68:	4631      	mov	r1, r6
 8016d6a:	4658      	mov	r0, fp
 8016d6c:	4798      	blx	r3
 8016d6e:	2800      	cmp	r0, #0
 8016d70:	f040 8086 	bne.w	8016e80 <_scanf_i+0x1c4>
 8016d74:	462b      	mov	r3, r5
 8016d76:	f108 0801 	add.w	r8, r8, #1
 8016d7a:	f1b8 0f03 	cmp.w	r8, #3
 8016d7e:	d1c8      	bne.n	8016d12 <_scanf_i+0x56>
 8016d80:	6862      	ldr	r2, [r4, #4]
 8016d82:	b90a      	cbnz	r2, 8016d88 <_scanf_i+0xcc>
 8016d84:	220a      	movs	r2, #10
 8016d86:	6062      	str	r2, [r4, #4]
 8016d88:	6862      	ldr	r2, [r4, #4]
 8016d8a:	4945      	ldr	r1, [pc, #276]	; (8016ea0 <_scanf_i+0x1e4>)
 8016d8c:	6960      	ldr	r0, [r4, #20]
 8016d8e:	9301      	str	r3, [sp, #4]
 8016d90:	1a89      	subs	r1, r1, r2
 8016d92:	f000 f8df 	bl	8016f54 <__sccl>
 8016d96:	9b01      	ldr	r3, [sp, #4]
 8016d98:	f04f 0800 	mov.w	r8, #0
 8016d9c:	461d      	mov	r5, r3
 8016d9e:	68a3      	ldr	r3, [r4, #8]
 8016da0:	6822      	ldr	r2, [r4, #0]
 8016da2:	2b00      	cmp	r3, #0
 8016da4:	d03a      	beq.n	8016e1c <_scanf_i+0x160>
 8016da6:	6831      	ldr	r1, [r6, #0]
 8016da8:	6960      	ldr	r0, [r4, #20]
 8016daa:	f891 c000 	ldrb.w	ip, [r1]
 8016dae:	f810 000c 	ldrb.w	r0, [r0, ip]
 8016db2:	2800      	cmp	r0, #0
 8016db4:	d032      	beq.n	8016e1c <_scanf_i+0x160>
 8016db6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8016dba:	d121      	bne.n	8016e00 <_scanf_i+0x144>
 8016dbc:	0510      	lsls	r0, r2, #20
 8016dbe:	d51f      	bpl.n	8016e00 <_scanf_i+0x144>
 8016dc0:	f108 0801 	add.w	r8, r8, #1
 8016dc4:	b117      	cbz	r7, 8016dcc <_scanf_i+0x110>
 8016dc6:	3301      	adds	r3, #1
 8016dc8:	3f01      	subs	r7, #1
 8016dca:	60a3      	str	r3, [r4, #8]
 8016dcc:	6873      	ldr	r3, [r6, #4]
 8016dce:	3b01      	subs	r3, #1
 8016dd0:	2b00      	cmp	r3, #0
 8016dd2:	6073      	str	r3, [r6, #4]
 8016dd4:	dd1b      	ble.n	8016e0e <_scanf_i+0x152>
 8016dd6:	6833      	ldr	r3, [r6, #0]
 8016dd8:	3301      	adds	r3, #1
 8016dda:	6033      	str	r3, [r6, #0]
 8016ddc:	68a3      	ldr	r3, [r4, #8]
 8016dde:	3b01      	subs	r3, #1
 8016de0:	60a3      	str	r3, [r4, #8]
 8016de2:	e7dc      	b.n	8016d9e <_scanf_i+0xe2>
 8016de4:	f1b8 0f02 	cmp.w	r8, #2
 8016de8:	d1ad      	bne.n	8016d46 <_scanf_i+0x8a>
 8016dea:	6822      	ldr	r2, [r4, #0]
 8016dec:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8016df0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8016df4:	d1bf      	bne.n	8016d76 <_scanf_i+0xba>
 8016df6:	2110      	movs	r1, #16
 8016df8:	6061      	str	r1, [r4, #4]
 8016dfa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8016dfe:	e7a1      	b.n	8016d44 <_scanf_i+0x88>
 8016e00:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8016e04:	6022      	str	r2, [r4, #0]
 8016e06:	780b      	ldrb	r3, [r1, #0]
 8016e08:	702b      	strb	r3, [r5, #0]
 8016e0a:	3501      	adds	r5, #1
 8016e0c:	e7de      	b.n	8016dcc <_scanf_i+0x110>
 8016e0e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016e12:	4631      	mov	r1, r6
 8016e14:	4658      	mov	r0, fp
 8016e16:	4798      	blx	r3
 8016e18:	2800      	cmp	r0, #0
 8016e1a:	d0df      	beq.n	8016ddc <_scanf_i+0x120>
 8016e1c:	6823      	ldr	r3, [r4, #0]
 8016e1e:	05d9      	lsls	r1, r3, #23
 8016e20:	d50c      	bpl.n	8016e3c <_scanf_i+0x180>
 8016e22:	454d      	cmp	r5, r9
 8016e24:	d908      	bls.n	8016e38 <_scanf_i+0x17c>
 8016e26:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8016e2a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016e2e:	4632      	mov	r2, r6
 8016e30:	4658      	mov	r0, fp
 8016e32:	4798      	blx	r3
 8016e34:	1e6f      	subs	r7, r5, #1
 8016e36:	463d      	mov	r5, r7
 8016e38:	454d      	cmp	r5, r9
 8016e3a:	d029      	beq.n	8016e90 <_scanf_i+0x1d4>
 8016e3c:	6822      	ldr	r2, [r4, #0]
 8016e3e:	f012 0210 	ands.w	r2, r2, #16
 8016e42:	d113      	bne.n	8016e6c <_scanf_i+0x1b0>
 8016e44:	702a      	strb	r2, [r5, #0]
 8016e46:	6863      	ldr	r3, [r4, #4]
 8016e48:	9e00      	ldr	r6, [sp, #0]
 8016e4a:	4649      	mov	r1, r9
 8016e4c:	4658      	mov	r0, fp
 8016e4e:	47b0      	blx	r6
 8016e50:	f8da 3000 	ldr.w	r3, [sl]
 8016e54:	6821      	ldr	r1, [r4, #0]
 8016e56:	1d1a      	adds	r2, r3, #4
 8016e58:	f8ca 2000 	str.w	r2, [sl]
 8016e5c:	f011 0f20 	tst.w	r1, #32
 8016e60:	681b      	ldr	r3, [r3, #0]
 8016e62:	d010      	beq.n	8016e86 <_scanf_i+0x1ca>
 8016e64:	6018      	str	r0, [r3, #0]
 8016e66:	68e3      	ldr	r3, [r4, #12]
 8016e68:	3301      	adds	r3, #1
 8016e6a:	60e3      	str	r3, [r4, #12]
 8016e6c:	eba5 0509 	sub.w	r5, r5, r9
 8016e70:	44a8      	add	r8, r5
 8016e72:	6925      	ldr	r5, [r4, #16]
 8016e74:	4445      	add	r5, r8
 8016e76:	6125      	str	r5, [r4, #16]
 8016e78:	2000      	movs	r0, #0
 8016e7a:	b007      	add	sp, #28
 8016e7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e80:	f04f 0800 	mov.w	r8, #0
 8016e84:	e7ca      	b.n	8016e1c <_scanf_i+0x160>
 8016e86:	07ca      	lsls	r2, r1, #31
 8016e88:	bf4c      	ite	mi
 8016e8a:	8018      	strhmi	r0, [r3, #0]
 8016e8c:	6018      	strpl	r0, [r3, #0]
 8016e8e:	e7ea      	b.n	8016e66 <_scanf_i+0x1aa>
 8016e90:	2001      	movs	r0, #1
 8016e92:	e7f2      	b.n	8016e7a <_scanf_i+0x1be>
 8016e94:	08017474 	.word	0x08017474
 8016e98:	080140a9 	.word	0x080140a9
 8016e9c:	080170d1 	.word	0x080170d1
 8016ea0:	08017cfd 	.word	0x08017cfd

08016ea4 <_putc_r>:
 8016ea4:	b570      	push	{r4, r5, r6, lr}
 8016ea6:	460d      	mov	r5, r1
 8016ea8:	4614      	mov	r4, r2
 8016eaa:	4606      	mov	r6, r0
 8016eac:	b118      	cbz	r0, 8016eb6 <_putc_r+0x12>
 8016eae:	6983      	ldr	r3, [r0, #24]
 8016eb0:	b90b      	cbnz	r3, 8016eb6 <_putc_r+0x12>
 8016eb2:	f7fe f941 	bl	8015138 <__sinit>
 8016eb6:	4b13      	ldr	r3, [pc, #76]	; (8016f04 <_putc_r+0x60>)
 8016eb8:	429c      	cmp	r4, r3
 8016eba:	d112      	bne.n	8016ee2 <_putc_r+0x3e>
 8016ebc:	6874      	ldr	r4, [r6, #4]
 8016ebe:	68a3      	ldr	r3, [r4, #8]
 8016ec0:	3b01      	subs	r3, #1
 8016ec2:	2b00      	cmp	r3, #0
 8016ec4:	60a3      	str	r3, [r4, #8]
 8016ec6:	da16      	bge.n	8016ef6 <_putc_r+0x52>
 8016ec8:	69a2      	ldr	r2, [r4, #24]
 8016eca:	4293      	cmp	r3, r2
 8016ecc:	db02      	blt.n	8016ed4 <_putc_r+0x30>
 8016ece:	b2eb      	uxtb	r3, r5
 8016ed0:	2b0a      	cmp	r3, #10
 8016ed2:	d110      	bne.n	8016ef6 <_putc_r+0x52>
 8016ed4:	4622      	mov	r2, r4
 8016ed6:	4629      	mov	r1, r5
 8016ed8:	4630      	mov	r0, r6
 8016eda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016ede:	f7fd b915 	b.w	801410c <__swbuf_r>
 8016ee2:	4b09      	ldr	r3, [pc, #36]	; (8016f08 <_putc_r+0x64>)
 8016ee4:	429c      	cmp	r4, r3
 8016ee6:	d101      	bne.n	8016eec <_putc_r+0x48>
 8016ee8:	68b4      	ldr	r4, [r6, #8]
 8016eea:	e7e8      	b.n	8016ebe <_putc_r+0x1a>
 8016eec:	4b07      	ldr	r3, [pc, #28]	; (8016f0c <_putc_r+0x68>)
 8016eee:	429c      	cmp	r4, r3
 8016ef0:	bf08      	it	eq
 8016ef2:	68f4      	ldreq	r4, [r6, #12]
 8016ef4:	e7e3      	b.n	8016ebe <_putc_r+0x1a>
 8016ef6:	6823      	ldr	r3, [r4, #0]
 8016ef8:	1c5a      	adds	r2, r3, #1
 8016efa:	6022      	str	r2, [r4, #0]
 8016efc:	701d      	strb	r5, [r3, #0]
 8016efe:	b2e8      	uxtb	r0, r5
 8016f00:	bd70      	pop	{r4, r5, r6, pc}
 8016f02:	bf00      	nop
 8016f04:	08017b90 	.word	0x08017b90
 8016f08:	08017bb0 	.word	0x08017bb0
 8016f0c:	08017b70 	.word	0x08017b70

08016f10 <_read_r>:
 8016f10:	b538      	push	{r3, r4, r5, lr}
 8016f12:	4c07      	ldr	r4, [pc, #28]	; (8016f30 <_read_r+0x20>)
 8016f14:	4605      	mov	r5, r0
 8016f16:	4608      	mov	r0, r1
 8016f18:	4611      	mov	r1, r2
 8016f1a:	2200      	movs	r2, #0
 8016f1c:	6022      	str	r2, [r4, #0]
 8016f1e:	461a      	mov	r2, r3
 8016f20:	f7ee f9de 	bl	80052e0 <_read>
 8016f24:	1c43      	adds	r3, r0, #1
 8016f26:	d102      	bne.n	8016f2e <_read_r+0x1e>
 8016f28:	6823      	ldr	r3, [r4, #0]
 8016f2a:	b103      	cbz	r3, 8016f2e <_read_r+0x1e>
 8016f2c:	602b      	str	r3, [r5, #0]
 8016f2e:	bd38      	pop	{r3, r4, r5, pc}
 8016f30:	20023e00 	.word	0x20023e00

08016f34 <_sbrk_r>:
 8016f34:	b538      	push	{r3, r4, r5, lr}
 8016f36:	4c06      	ldr	r4, [pc, #24]	; (8016f50 <_sbrk_r+0x1c>)
 8016f38:	2300      	movs	r3, #0
 8016f3a:	4605      	mov	r5, r0
 8016f3c:	4608      	mov	r0, r1
 8016f3e:	6023      	str	r3, [r4, #0]
 8016f40:	f7ee fa20 	bl	8005384 <_sbrk>
 8016f44:	1c43      	adds	r3, r0, #1
 8016f46:	d102      	bne.n	8016f4e <_sbrk_r+0x1a>
 8016f48:	6823      	ldr	r3, [r4, #0]
 8016f4a:	b103      	cbz	r3, 8016f4e <_sbrk_r+0x1a>
 8016f4c:	602b      	str	r3, [r5, #0]
 8016f4e:	bd38      	pop	{r3, r4, r5, pc}
 8016f50:	20023e00 	.word	0x20023e00

08016f54 <__sccl>:
 8016f54:	b570      	push	{r4, r5, r6, lr}
 8016f56:	780b      	ldrb	r3, [r1, #0]
 8016f58:	2b5e      	cmp	r3, #94	; 0x5e
 8016f5a:	bf13      	iteet	ne
 8016f5c:	1c4a      	addne	r2, r1, #1
 8016f5e:	1c8a      	addeq	r2, r1, #2
 8016f60:	784b      	ldrbeq	r3, [r1, #1]
 8016f62:	2100      	movne	r1, #0
 8016f64:	bf08      	it	eq
 8016f66:	2101      	moveq	r1, #1
 8016f68:	1e44      	subs	r4, r0, #1
 8016f6a:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8016f6e:	f804 1f01 	strb.w	r1, [r4, #1]!
 8016f72:	42ac      	cmp	r4, r5
 8016f74:	d1fb      	bne.n	8016f6e <__sccl+0x1a>
 8016f76:	b913      	cbnz	r3, 8016f7e <__sccl+0x2a>
 8016f78:	3a01      	subs	r2, #1
 8016f7a:	4610      	mov	r0, r2
 8016f7c:	bd70      	pop	{r4, r5, r6, pc}
 8016f7e:	f081 0401 	eor.w	r4, r1, #1
 8016f82:	54c4      	strb	r4, [r0, r3]
 8016f84:	1c51      	adds	r1, r2, #1
 8016f86:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8016f8a:	2d2d      	cmp	r5, #45	; 0x2d
 8016f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8016f90:	460a      	mov	r2, r1
 8016f92:	d006      	beq.n	8016fa2 <__sccl+0x4e>
 8016f94:	2d5d      	cmp	r5, #93	; 0x5d
 8016f96:	d0f0      	beq.n	8016f7a <__sccl+0x26>
 8016f98:	b90d      	cbnz	r5, 8016f9e <__sccl+0x4a>
 8016f9a:	4632      	mov	r2, r6
 8016f9c:	e7ed      	b.n	8016f7a <__sccl+0x26>
 8016f9e:	462b      	mov	r3, r5
 8016fa0:	e7ef      	b.n	8016f82 <__sccl+0x2e>
 8016fa2:	780e      	ldrb	r6, [r1, #0]
 8016fa4:	2e5d      	cmp	r6, #93	; 0x5d
 8016fa6:	d0fa      	beq.n	8016f9e <__sccl+0x4a>
 8016fa8:	42b3      	cmp	r3, r6
 8016faa:	dcf8      	bgt.n	8016f9e <__sccl+0x4a>
 8016fac:	3301      	adds	r3, #1
 8016fae:	429e      	cmp	r6, r3
 8016fb0:	54c4      	strb	r4, [r0, r3]
 8016fb2:	dcfb      	bgt.n	8016fac <__sccl+0x58>
 8016fb4:	3102      	adds	r1, #2
 8016fb6:	e7e6      	b.n	8016f86 <__sccl+0x32>

08016fb8 <strncmp>:
 8016fb8:	b510      	push	{r4, lr}
 8016fba:	b16a      	cbz	r2, 8016fd8 <strncmp+0x20>
 8016fbc:	3901      	subs	r1, #1
 8016fbe:	1884      	adds	r4, r0, r2
 8016fc0:	f810 3b01 	ldrb.w	r3, [r0], #1
 8016fc4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8016fc8:	4293      	cmp	r3, r2
 8016fca:	d103      	bne.n	8016fd4 <strncmp+0x1c>
 8016fcc:	42a0      	cmp	r0, r4
 8016fce:	d001      	beq.n	8016fd4 <strncmp+0x1c>
 8016fd0:	2b00      	cmp	r3, #0
 8016fd2:	d1f5      	bne.n	8016fc0 <strncmp+0x8>
 8016fd4:	1a98      	subs	r0, r3, r2
 8016fd6:	bd10      	pop	{r4, pc}
 8016fd8:	4610      	mov	r0, r2
 8016fda:	e7fc      	b.n	8016fd6 <strncmp+0x1e>

08016fdc <_strtoul_l.isra.0>:
 8016fdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016fe0:	4680      	mov	r8, r0
 8016fe2:	4689      	mov	r9, r1
 8016fe4:	4692      	mov	sl, r2
 8016fe6:	461e      	mov	r6, r3
 8016fe8:	460f      	mov	r7, r1
 8016fea:	463d      	mov	r5, r7
 8016fec:	9808      	ldr	r0, [sp, #32]
 8016fee:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016ff2:	f7fe fc51 	bl	8015898 <__locale_ctype_ptr_l>
 8016ff6:	4420      	add	r0, r4
 8016ff8:	7843      	ldrb	r3, [r0, #1]
 8016ffa:	f013 0308 	ands.w	r3, r3, #8
 8016ffe:	d130      	bne.n	8017062 <_strtoul_l.isra.0+0x86>
 8017000:	2c2d      	cmp	r4, #45	; 0x2d
 8017002:	d130      	bne.n	8017066 <_strtoul_l.isra.0+0x8a>
 8017004:	787c      	ldrb	r4, [r7, #1]
 8017006:	1cbd      	adds	r5, r7, #2
 8017008:	2101      	movs	r1, #1
 801700a:	2e00      	cmp	r6, #0
 801700c:	d05c      	beq.n	80170c8 <_strtoul_l.isra.0+0xec>
 801700e:	2e10      	cmp	r6, #16
 8017010:	d109      	bne.n	8017026 <_strtoul_l.isra.0+0x4a>
 8017012:	2c30      	cmp	r4, #48	; 0x30
 8017014:	d107      	bne.n	8017026 <_strtoul_l.isra.0+0x4a>
 8017016:	782b      	ldrb	r3, [r5, #0]
 8017018:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801701c:	2b58      	cmp	r3, #88	; 0x58
 801701e:	d14e      	bne.n	80170be <_strtoul_l.isra.0+0xe2>
 8017020:	786c      	ldrb	r4, [r5, #1]
 8017022:	2610      	movs	r6, #16
 8017024:	3502      	adds	r5, #2
 8017026:	f04f 32ff 	mov.w	r2, #4294967295
 801702a:	2300      	movs	r3, #0
 801702c:	fbb2 f2f6 	udiv	r2, r2, r6
 8017030:	fb06 fc02 	mul.w	ip, r6, r2
 8017034:	ea6f 0c0c 	mvn.w	ip, ip
 8017038:	4618      	mov	r0, r3
 801703a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801703e:	2f09      	cmp	r7, #9
 8017040:	d817      	bhi.n	8017072 <_strtoul_l.isra.0+0x96>
 8017042:	463c      	mov	r4, r7
 8017044:	42a6      	cmp	r6, r4
 8017046:	dd23      	ble.n	8017090 <_strtoul_l.isra.0+0xb4>
 8017048:	2b00      	cmp	r3, #0
 801704a:	db1e      	blt.n	801708a <_strtoul_l.isra.0+0xae>
 801704c:	4282      	cmp	r2, r0
 801704e:	d31c      	bcc.n	801708a <_strtoul_l.isra.0+0xae>
 8017050:	d101      	bne.n	8017056 <_strtoul_l.isra.0+0x7a>
 8017052:	45a4      	cmp	ip, r4
 8017054:	db19      	blt.n	801708a <_strtoul_l.isra.0+0xae>
 8017056:	fb00 4006 	mla	r0, r0, r6, r4
 801705a:	2301      	movs	r3, #1
 801705c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017060:	e7eb      	b.n	801703a <_strtoul_l.isra.0+0x5e>
 8017062:	462f      	mov	r7, r5
 8017064:	e7c1      	b.n	8016fea <_strtoul_l.isra.0+0xe>
 8017066:	2c2b      	cmp	r4, #43	; 0x2b
 8017068:	bf04      	itt	eq
 801706a:	1cbd      	addeq	r5, r7, #2
 801706c:	787c      	ldrbeq	r4, [r7, #1]
 801706e:	4619      	mov	r1, r3
 8017070:	e7cb      	b.n	801700a <_strtoul_l.isra.0+0x2e>
 8017072:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8017076:	2f19      	cmp	r7, #25
 8017078:	d801      	bhi.n	801707e <_strtoul_l.isra.0+0xa2>
 801707a:	3c37      	subs	r4, #55	; 0x37
 801707c:	e7e2      	b.n	8017044 <_strtoul_l.isra.0+0x68>
 801707e:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8017082:	2f19      	cmp	r7, #25
 8017084:	d804      	bhi.n	8017090 <_strtoul_l.isra.0+0xb4>
 8017086:	3c57      	subs	r4, #87	; 0x57
 8017088:	e7dc      	b.n	8017044 <_strtoul_l.isra.0+0x68>
 801708a:	f04f 33ff 	mov.w	r3, #4294967295
 801708e:	e7e5      	b.n	801705c <_strtoul_l.isra.0+0x80>
 8017090:	2b00      	cmp	r3, #0
 8017092:	da09      	bge.n	80170a8 <_strtoul_l.isra.0+0xcc>
 8017094:	2322      	movs	r3, #34	; 0x22
 8017096:	f8c8 3000 	str.w	r3, [r8]
 801709a:	f04f 30ff 	mov.w	r0, #4294967295
 801709e:	f1ba 0f00 	cmp.w	sl, #0
 80170a2:	d107      	bne.n	80170b4 <_strtoul_l.isra.0+0xd8>
 80170a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80170a8:	b101      	cbz	r1, 80170ac <_strtoul_l.isra.0+0xd0>
 80170aa:	4240      	negs	r0, r0
 80170ac:	f1ba 0f00 	cmp.w	sl, #0
 80170b0:	d0f8      	beq.n	80170a4 <_strtoul_l.isra.0+0xc8>
 80170b2:	b10b      	cbz	r3, 80170b8 <_strtoul_l.isra.0+0xdc>
 80170b4:	f105 39ff 	add.w	r9, r5, #4294967295
 80170b8:	f8ca 9000 	str.w	r9, [sl]
 80170bc:	e7f2      	b.n	80170a4 <_strtoul_l.isra.0+0xc8>
 80170be:	2430      	movs	r4, #48	; 0x30
 80170c0:	2e00      	cmp	r6, #0
 80170c2:	d1b0      	bne.n	8017026 <_strtoul_l.isra.0+0x4a>
 80170c4:	2608      	movs	r6, #8
 80170c6:	e7ae      	b.n	8017026 <_strtoul_l.isra.0+0x4a>
 80170c8:	2c30      	cmp	r4, #48	; 0x30
 80170ca:	d0a4      	beq.n	8017016 <_strtoul_l.isra.0+0x3a>
 80170cc:	260a      	movs	r6, #10
 80170ce:	e7aa      	b.n	8017026 <_strtoul_l.isra.0+0x4a>

080170d0 <_strtoul_r>:
 80170d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80170d2:	4c06      	ldr	r4, [pc, #24]	; (80170ec <_strtoul_r+0x1c>)
 80170d4:	4d06      	ldr	r5, [pc, #24]	; (80170f0 <_strtoul_r+0x20>)
 80170d6:	6824      	ldr	r4, [r4, #0]
 80170d8:	6a24      	ldr	r4, [r4, #32]
 80170da:	2c00      	cmp	r4, #0
 80170dc:	bf08      	it	eq
 80170de:	462c      	moveq	r4, r5
 80170e0:	9400      	str	r4, [sp, #0]
 80170e2:	f7ff ff7b 	bl	8016fdc <_strtoul_l.isra.0>
 80170e6:	b003      	add	sp, #12
 80170e8:	bd30      	pop	{r4, r5, pc}
 80170ea:	bf00      	nop
 80170ec:	2000000c 	.word	0x2000000c
 80170f0:	20000070 	.word	0x20000070

080170f4 <__submore>:
 80170f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80170f8:	460c      	mov	r4, r1
 80170fa:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80170fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017100:	4299      	cmp	r1, r3
 8017102:	d11d      	bne.n	8017140 <__submore+0x4c>
 8017104:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8017108:	f7ff f8de 	bl	80162c8 <_malloc_r>
 801710c:	b918      	cbnz	r0, 8017116 <__submore+0x22>
 801710e:	f04f 30ff 	mov.w	r0, #4294967295
 8017112:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017116:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801711a:	63a3      	str	r3, [r4, #56]	; 0x38
 801711c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8017120:	6360      	str	r0, [r4, #52]	; 0x34
 8017122:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8017126:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801712a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801712e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8017132:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8017136:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801713a:	6020      	str	r0, [r4, #0]
 801713c:	2000      	movs	r0, #0
 801713e:	e7e8      	b.n	8017112 <__submore+0x1e>
 8017140:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8017142:	0077      	lsls	r7, r6, #1
 8017144:	463a      	mov	r2, r7
 8017146:	f000 f85a 	bl	80171fe <_realloc_r>
 801714a:	4605      	mov	r5, r0
 801714c:	2800      	cmp	r0, #0
 801714e:	d0de      	beq.n	801710e <__submore+0x1a>
 8017150:	eb00 0806 	add.w	r8, r0, r6
 8017154:	4601      	mov	r1, r0
 8017156:	4632      	mov	r2, r6
 8017158:	4640      	mov	r0, r8
 801715a:	f7fe fc4f 	bl	80159fc <memcpy>
 801715e:	f8c4 8000 	str.w	r8, [r4]
 8017162:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8017166:	e7e9      	b.n	801713c <__submore+0x48>

08017168 <__ascii_wctomb>:
 8017168:	b149      	cbz	r1, 801717e <__ascii_wctomb+0x16>
 801716a:	2aff      	cmp	r2, #255	; 0xff
 801716c:	bf85      	ittet	hi
 801716e:	238a      	movhi	r3, #138	; 0x8a
 8017170:	6003      	strhi	r3, [r0, #0]
 8017172:	700a      	strbls	r2, [r1, #0]
 8017174:	f04f 30ff 	movhi.w	r0, #4294967295
 8017178:	bf98      	it	ls
 801717a:	2001      	movls	r0, #1
 801717c:	4770      	bx	lr
 801717e:	4608      	mov	r0, r1
 8017180:	4770      	bx	lr
	...

08017184 <_fstat_r>:
 8017184:	b538      	push	{r3, r4, r5, lr}
 8017186:	4c07      	ldr	r4, [pc, #28]	; (80171a4 <_fstat_r+0x20>)
 8017188:	2300      	movs	r3, #0
 801718a:	4605      	mov	r5, r0
 801718c:	4608      	mov	r0, r1
 801718e:	4611      	mov	r1, r2
 8017190:	6023      	str	r3, [r4, #0]
 8017192:	f7ee f8ce 	bl	8005332 <_fstat>
 8017196:	1c43      	adds	r3, r0, #1
 8017198:	d102      	bne.n	80171a0 <_fstat_r+0x1c>
 801719a:	6823      	ldr	r3, [r4, #0]
 801719c:	b103      	cbz	r3, 80171a0 <_fstat_r+0x1c>
 801719e:	602b      	str	r3, [r5, #0]
 80171a0:	bd38      	pop	{r3, r4, r5, pc}
 80171a2:	bf00      	nop
 80171a4:	20023e00 	.word	0x20023e00

080171a8 <_isatty_r>:
 80171a8:	b538      	push	{r3, r4, r5, lr}
 80171aa:	4c06      	ldr	r4, [pc, #24]	; (80171c4 <_isatty_r+0x1c>)
 80171ac:	2300      	movs	r3, #0
 80171ae:	4605      	mov	r5, r0
 80171b0:	4608      	mov	r0, r1
 80171b2:	6023      	str	r3, [r4, #0]
 80171b4:	f7ee f8cd 	bl	8005352 <_isatty>
 80171b8:	1c43      	adds	r3, r0, #1
 80171ba:	d102      	bne.n	80171c2 <_isatty_r+0x1a>
 80171bc:	6823      	ldr	r3, [r4, #0]
 80171be:	b103      	cbz	r3, 80171c2 <_isatty_r+0x1a>
 80171c0:	602b      	str	r3, [r5, #0]
 80171c2:	bd38      	pop	{r3, r4, r5, pc}
 80171c4:	20023e00 	.word	0x20023e00

080171c8 <memmove>:
 80171c8:	4288      	cmp	r0, r1
 80171ca:	b510      	push	{r4, lr}
 80171cc:	eb01 0302 	add.w	r3, r1, r2
 80171d0:	d807      	bhi.n	80171e2 <memmove+0x1a>
 80171d2:	1e42      	subs	r2, r0, #1
 80171d4:	4299      	cmp	r1, r3
 80171d6:	d00a      	beq.n	80171ee <memmove+0x26>
 80171d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80171dc:	f802 4f01 	strb.w	r4, [r2, #1]!
 80171e0:	e7f8      	b.n	80171d4 <memmove+0xc>
 80171e2:	4283      	cmp	r3, r0
 80171e4:	d9f5      	bls.n	80171d2 <memmove+0xa>
 80171e6:	1881      	adds	r1, r0, r2
 80171e8:	1ad2      	subs	r2, r2, r3
 80171ea:	42d3      	cmn	r3, r2
 80171ec:	d100      	bne.n	80171f0 <memmove+0x28>
 80171ee:	bd10      	pop	{r4, pc}
 80171f0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80171f4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80171f8:	e7f7      	b.n	80171ea <memmove+0x22>

080171fa <__malloc_lock>:
 80171fa:	4770      	bx	lr

080171fc <__malloc_unlock>:
 80171fc:	4770      	bx	lr

080171fe <_realloc_r>:
 80171fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017200:	4607      	mov	r7, r0
 8017202:	4614      	mov	r4, r2
 8017204:	460e      	mov	r6, r1
 8017206:	b921      	cbnz	r1, 8017212 <_realloc_r+0x14>
 8017208:	4611      	mov	r1, r2
 801720a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801720e:	f7ff b85b 	b.w	80162c8 <_malloc_r>
 8017212:	b922      	cbnz	r2, 801721e <_realloc_r+0x20>
 8017214:	f7ff f80a 	bl	801622c <_free_r>
 8017218:	4625      	mov	r5, r4
 801721a:	4628      	mov	r0, r5
 801721c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801721e:	f000 f814 	bl	801724a <_malloc_usable_size_r>
 8017222:	42a0      	cmp	r0, r4
 8017224:	d20f      	bcs.n	8017246 <_realloc_r+0x48>
 8017226:	4621      	mov	r1, r4
 8017228:	4638      	mov	r0, r7
 801722a:	f7ff f84d 	bl	80162c8 <_malloc_r>
 801722e:	4605      	mov	r5, r0
 8017230:	2800      	cmp	r0, #0
 8017232:	d0f2      	beq.n	801721a <_realloc_r+0x1c>
 8017234:	4631      	mov	r1, r6
 8017236:	4622      	mov	r2, r4
 8017238:	f7fe fbe0 	bl	80159fc <memcpy>
 801723c:	4631      	mov	r1, r6
 801723e:	4638      	mov	r0, r7
 8017240:	f7fe fff4 	bl	801622c <_free_r>
 8017244:	e7e9      	b.n	801721a <_realloc_r+0x1c>
 8017246:	4635      	mov	r5, r6
 8017248:	e7e7      	b.n	801721a <_realloc_r+0x1c>

0801724a <_malloc_usable_size_r>:
 801724a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801724e:	1f18      	subs	r0, r3, #4
 8017250:	2b00      	cmp	r3, #0
 8017252:	bfbc      	itt	lt
 8017254:	580b      	ldrlt	r3, [r1, r0]
 8017256:	18c0      	addlt	r0, r0, r3
 8017258:	4770      	bx	lr
	...

0801725c <_init>:
 801725c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801725e:	bf00      	nop
 8017260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017262:	bc08      	pop	{r3}
 8017264:	469e      	mov	lr, r3
 8017266:	4770      	bx	lr

08017268 <_fini>:
 8017268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801726a:	bf00      	nop
 801726c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801726e:	bc08      	pop	{r3}
 8017270:	469e      	mov	lr, r3
 8017272:	4770      	bx	lr
