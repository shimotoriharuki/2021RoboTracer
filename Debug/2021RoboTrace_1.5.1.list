
2021RoboTrace_1.5.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019a80  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c2c  08019c40  08019c40  00029c40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a86c  0801a86c  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  0801a86c  0801a86c  0002a86c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a874  0801a874  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801a874  0801a874  0002a874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a87c  0801a87c  0002a87c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0801a880  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00041cd8  200001e0  0801aa5c  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  20041eb8  0801aa5c  00031eb8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003e0c3  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000083e7  00000000  00000000  0006e2cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002300  00000000  00000000  000766b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002040  00000000  00000000  000789b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003720a  00000000  00000000  0007a9f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000300a2  00000000  00000000  000b1c02  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00112303  00000000  00000000  000e1ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000ce  00000000  00000000  001f3fa7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a6c4  00000000  00000000  001f4078  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08019c28 	.word	0x08019c28

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	08019c28 	.word	0x08019c28

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <lcd_cmd>:

extern I2C_HandleTypeDef hi2c1;

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	733b      	strb	r3, [r7, #12]
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txcmd,2,100);
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	217c      	movs	r1, #124	; 0x7c
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <lcd_cmd+0x2c>)
 8000fd8:	f00a f89e 	bl	800b118 <HAL_I2C_Master_Transmit>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	2003f9ac 	.word	0x2003f9ac

08000fe8 <lcd_data>:

void lcd_data(uint8_t data) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 8000ff2:	2340      	movs	r3, #64	; 0x40
 8000ff4:	733b      	strb	r3, [r7, #12]
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txdata,2,100);
 8000ffa:	f107 020c 	add.w	r2, r7, #12
 8000ffe:	2364      	movs	r3, #100	; 0x64
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2302      	movs	r3, #2
 8001004:	217c      	movs	r1, #124	; 0x7c
 8001006:	4803      	ldr	r0, [pc, #12]	; (8001014 <lcd_data+0x2c>)
 8001008:	f00a f886 	bl	800b118 <HAL_I2C_Master_Transmit>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	2003f9ac 	.word	0x2003f9ac

08001018 <lcd_init>:

void lcd_init(){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
 800101c:	2201      	movs	r2, #1
 800101e:	2110      	movs	r1, #16
 8001020:	481e      	ldr	r0, [pc, #120]	; (800109c <lcd_init+0x84>)
 8001022:	f009 ff1b 	bl	800ae5c <HAL_GPIO_WritePin>
	HAL_Delay(40);
 8001026:	2028      	movs	r0, #40	; 0x28
 8001028:	f008 fc7c 	bl	8009924 <HAL_Delay>
	lcd_cmd(0x38);
 800102c:	2038      	movs	r0, #56	; 0x38
 800102e:	f7ff ffc3 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f008 fc76 	bl	8009924 <HAL_Delay>
	lcd_cmd(0x39);
 8001038:	2039      	movs	r0, #57	; 0x39
 800103a:	f7ff ffbd 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800103e:	2001      	movs	r0, #1
 8001040:	f008 fc70 	bl	8009924 <HAL_Delay>
	lcd_cmd(0x14);
 8001044:	2014      	movs	r0, #20
 8001046:	f7ff ffb7 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f008 fc6a 	bl	8009924 <HAL_Delay>
	lcd_cmd(0x70);
 8001050:	2070      	movs	r0, #112	; 0x70
 8001052:	f7ff ffb1 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f008 fc64 	bl	8009924 <HAL_Delay>
	lcd_cmd(0x56);
 800105c:	2056      	movs	r0, #86	; 0x56
 800105e:	f7ff ffab 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f008 fc5e 	bl	8009924 <HAL_Delay>
	lcd_cmd(0x6C);
 8001068:	206c      	movs	r0, #108	; 0x6c
 800106a:	f7ff ffa5 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(200);
 800106e:	20c8      	movs	r0, #200	; 0xc8
 8001070:	f008 fc58 	bl	8009924 <HAL_Delay>
	lcd_cmd(0x38);
 8001074:	2038      	movs	r0, #56	; 0x38
 8001076:	f7ff ff9f 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800107a:	2001      	movs	r0, #1
 800107c:	f008 fc52 	bl	8009924 <HAL_Delay>
	lcd_cmd(0x0C);
 8001080:	200c      	movs	r0, #12
 8001082:	f7ff ff99 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001086:	2001      	movs	r0, #1
 8001088:	f008 fc4c 	bl	8009924 <HAL_Delay>
	lcd_cmd(0x01);
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff ff93 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001092:	2001      	movs	r0, #1
 8001094:	f008 fc46 	bl	8009924 <HAL_Delay>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020000 	.word	0x40020000

080010a0 <lcd_clear>:

void lcd_clear(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff87 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f008 fc3a 	bl	8009924 <HAL_Delay>
	lcd_cmd(0x02);
 80010b0:	2002      	movs	r0, #2
 80010b2:	f7ff ff81 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f008 fc34 	bl	8009924 <HAL_Delay>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <lcd_locate>:

void lcd_locate(int x, int y) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3302      	adds	r3, #2
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	019b      	lsls	r3, r3, #6
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4413      	add	r3, r2
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff6b 	bl	8000fb8 <lcd_cmd>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <lcd_print>:

void lcd_print(const char *str) {
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 80010f2:	e007      	b.n	8001104 <lcd_print+0x1a>
	{
			lcd_data(*str);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff75 	bl	8000fe8 <lcd_data>
			str++;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3301      	adds	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f3      	bne.n	80010f4 <lcd_print+0xa>
	}
}
 800110c:	bf00      	nop
 800110e:	bf00      	nop
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <lcd_printf>:

short lcd_printf(const char *format, ...) {
 8001116:	b40f      	push	{r0, r1, r2, r3}
 8001118:	b580      	push	{r7, lr}
 800111a:	b088      	sub	sp, #32
 800111c:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

  va_start(argptr, format);
 800111e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001122:	61bb      	str	r3, [r7, #24]
  ret = vsprintf(lcd_bff, format, argptr);
 8001124:	1d3b      	adds	r3, r7, #4
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800112a:	4618      	mov	r0, r3
 800112c:	f016 f950 	bl	80173d0 <vsiprintf>
 8001130:	4603      	mov	r3, r0
 8001132:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 8001134:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001138:	2b00      	cmp	r3, #0
 800113a:	dd03      	ble.n	8001144 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 800113c:	1d3b      	adds	r3, r7, #4
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff ffd3 	bl	80010ea <lcd_print>
	}

	return ret;
 8001144:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001148:	4618      	mov	r0, r3
 800114a:	3720      	adds	r7, #32
 800114c:	46bd      	mov	sp, r7
 800114e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001152:	b004      	add	sp, #16
 8001154:	4770      	bx	lr

08001156 <_ZN7EncoderC1Ev>:

float monitor_distance;
float monitor_cnt_l;
float monitor_cnt_l_lpf;

Encoder::Encoder() : cnt_l_(0), cnt_r_(0), distance_(0), total_cnt_l_(0), total_cnt_r_(0), distance_10mm_(0), total_distance_(0), cross_line_ignore_distance_(0){}
 8001156:	b480      	push	{r7}
 8001158:	b083      	sub	sp, #12
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	f04f 0200 	mov.w	r2, #0
 8001164:	601a      	str	r2, [r3, #0]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	f04f 0200 	mov.w	r2, #0
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	f04f 0200 	mov.w	r2, #0
 8001174:	609a      	str	r2, [r3, #8]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	f04f 0200 	mov.w	r2, #0
 800117c:	60da      	str	r2, [r3, #12]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	f04f 0200 	mov.w	r2, #0
 8001184:	611a      	str	r2, [r3, #16]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	f04f 0200 	mov.w	r2, #0
 800118c:	615a      	str	r2, [r3, #20]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	f04f 0200 	mov.w	r2, #0
 8001194:	619a      	str	r2, [r3, #24]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	f04f 0200 	mov.w	r2, #0
 800119c:	61da      	str	r2, [r3, #28]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4618      	mov	r0, r3
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr

080011ac <_ZN7Encoder4initEv>:

void Encoder::init()
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 80011b4:	213c      	movs	r1, #60	; 0x3c
 80011b6:	4809      	ldr	r0, [pc, #36]	; (80011dc <_ZN7Encoder4initEv+0x30>)
 80011b8:	f00d fe4e 	bl	800ee58 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 80011bc:	213c      	movs	r1, #60	; 0x3c
 80011be:	4808      	ldr	r0, [pc, #32]	; (80011e0 <_ZN7Encoder4initEv+0x34>)
 80011c0:	f00d fe4a 	bl	800ee58 <HAL_TIM_Encoder_Start>
	TIM1 -> CNT = CNT_OFFSET;
 80011c4:	4b07      	ldr	r3, [pc, #28]	; (80011e4 <_ZN7Encoder4initEv+0x38>)
 80011c6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011ca:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 80011cc:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <_ZN7Encoder4initEv+0x3c>)
 80011ce:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011d2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80011d4:	bf00      	nop
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	2003fc00 	.word	0x2003fc00
 80011e0:	2003f8e4 	.word	0x2003f8e4
 80011e4:	40010000 	.word	0x40010000
 80011e8:	40010400 	.word	0x40010400
 80011ec:	00000000 	.word	0x00000000

080011f0 <_ZN7Encoder6updateEv>:

void Encoder::update()
{
 80011f0:	b5b0      	push	{r4, r5, r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
	static float pre_cnt_l, pre_cnt_r;
	float cnt_l = (float(CNT_OFFSET) - float(TIM1 -> CNT)) * CORRECTION_COEFFICIENT;
 80011f8:	4b69      	ldr	r3, [pc, #420]	; (80013a0 <_ZN7Encoder6updateEv+0x1b0>)
 80011fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011fc:	ee07 3a90 	vmov	s15, r3
 8001200:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001204:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80013a4 <_ZN7Encoder6updateEv+0x1b4>
 8001208:	ee77 7a67 	vsub.f32	s15, s14, s15
 800120c:	ed9f 7a66 	vldr	s14, [pc, #408]	; 80013a8 <_ZN7Encoder6updateEv+0x1b8>
 8001210:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001214:	edc7 7a03 	vstr	s15, [r7, #12]
	float cnt_r = (float(TIM8 -> CNT) - float(CNT_OFFSET)) * CORRECTION_COEFFICIENT;
 8001218:	4b64      	ldr	r3, [pc, #400]	; (80013ac <_ZN7Encoder6updateEv+0x1bc>)
 800121a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800121c:	ee07 3a90 	vmov	s15, r3
 8001220:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001224:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 80013a4 <_ZN7Encoder6updateEv+0x1b4>
 8001228:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800122c:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 80013a8 <_ZN7Encoder6updateEv+0x1b8>
 8001230:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001234:	edc7 7a02 	vstr	s15, [r7, #8]
	monitor_cnt_l = cnt_l;
 8001238:	4a5d      	ldr	r2, [pc, #372]	; (80013b0 <_ZN7Encoder6updateEv+0x1c0>)
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	6013      	str	r3, [r2, #0]

	cnt_l_ = ((R_ENC)*(cnt_l) + (1.0 - (R_ENC))* (pre_cnt_l)); // lowpath filter
 800123e:	68f8      	ldr	r0, [r7, #12]
 8001240:	f7ff f99a 	bl	8000578 <__aeabi_f2d>
 8001244:	a350      	add	r3, pc, #320	; (adr r3, 8001388 <_ZN7Encoder6updateEv+0x198>)
 8001246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800124a:	f7ff f9ed 	bl	8000628 <__aeabi_dmul>
 800124e:	4602      	mov	r2, r0
 8001250:	460b      	mov	r3, r1
 8001252:	4614      	mov	r4, r2
 8001254:	461d      	mov	r5, r3
 8001256:	4b57      	ldr	r3, [pc, #348]	; (80013b4 <_ZN7Encoder6updateEv+0x1c4>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff f98c 	bl	8000578 <__aeabi_f2d>
 8001260:	a34b      	add	r3, pc, #300	; (adr r3, 8001390 <_ZN7Encoder6updateEv+0x1a0>)
 8001262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001266:	f7ff f9df 	bl	8000628 <__aeabi_dmul>
 800126a:	4602      	mov	r2, r0
 800126c:	460b      	mov	r3, r1
 800126e:	4620      	mov	r0, r4
 8001270:	4629      	mov	r1, r5
 8001272:	f7ff f823 	bl	80002bc <__adddf3>
 8001276:	4602      	mov	r2, r0
 8001278:	460b      	mov	r3, r1
 800127a:	4610      	mov	r0, r2
 800127c:	4619      	mov	r1, r3
 800127e:	f7ff fccb 	bl	8000c18 <__aeabi_d2f>
 8001282:	4602      	mov	r2, r0
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	601a      	str	r2, [r3, #0]
	cnt_r_ = ((R_ENC)*(cnt_r) + (1.0 - (R_ENC))* (pre_cnt_r)); // lowpath filter
 8001288:	68b8      	ldr	r0, [r7, #8]
 800128a:	f7ff f975 	bl	8000578 <__aeabi_f2d>
 800128e:	a33e      	add	r3, pc, #248	; (adr r3, 8001388 <_ZN7Encoder6updateEv+0x198>)
 8001290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001294:	f7ff f9c8 	bl	8000628 <__aeabi_dmul>
 8001298:	4602      	mov	r2, r0
 800129a:	460b      	mov	r3, r1
 800129c:	4614      	mov	r4, r2
 800129e:	461d      	mov	r5, r3
 80012a0:	4b45      	ldr	r3, [pc, #276]	; (80013b8 <_ZN7Encoder6updateEv+0x1c8>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff f967 	bl	8000578 <__aeabi_f2d>
 80012aa:	a339      	add	r3, pc, #228	; (adr r3, 8001390 <_ZN7Encoder6updateEv+0x1a0>)
 80012ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b0:	f7ff f9ba 	bl	8000628 <__aeabi_dmul>
 80012b4:	4602      	mov	r2, r0
 80012b6:	460b      	mov	r3, r1
 80012b8:	4620      	mov	r0, r4
 80012ba:	4629      	mov	r1, r5
 80012bc:	f7fe fffe 	bl	80002bc <__adddf3>
 80012c0:	4602      	mov	r2, r0
 80012c2:	460b      	mov	r3, r1
 80012c4:	4610      	mov	r0, r2
 80012c6:	4619      	mov	r1, r3
 80012c8:	f7ff fca6 	bl	8000c18 <__aeabi_d2f>
 80012cc:	4602      	mov	r2, r0
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	605a      	str	r2, [r3, #4]
	monitor_cnt_l_lpf = cnt_l_;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a39      	ldr	r2, [pc, #228]	; (80013bc <_ZN7Encoder6updateEv+0x1cc>)
 80012d8:	6013      	str	r3, [r2, #0]

	pre_cnt_l = cnt_l_;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a35      	ldr	r2, [pc, #212]	; (80013b4 <_ZN7Encoder6updateEv+0x1c4>)
 80012e0:	6013      	str	r3, [r2, #0]
	pre_cnt_r = cnt_r_;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	4a34      	ldr	r2, [pc, #208]	; (80013b8 <_ZN7Encoder6updateEv+0x1c8>)
 80012e8:	6013      	str	r3, [r2, #0]

	//total_cnt_l_ += cnt_l_;
	//total_cnt_r_ += cnt_r_;

	//distance_ = distance_ + DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
	distance_ = DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	ed93 7a00 	vldr	s14, [r3]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	edd3 7a01 	vldr	s15, [r3, #4]
 80012f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012fa:	ee17 0a90 	vmov	r0, s15
 80012fe:	f7ff f93b 	bl	8000578 <__aeabi_f2d>
 8001302:	a325      	add	r3, pc, #148	; (adr r3, 8001398 <_ZN7Encoder6updateEv+0x1a8>)
 8001304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001308:	f7ff f98e 	bl	8000628 <__aeabi_dmul>
 800130c:	4602      	mov	r2, r0
 800130e:	460b      	mov	r3, r1
 8001310:	4610      	mov	r0, r2
 8001312:	4619      	mov	r1, r3
 8001314:	f04f 0200 	mov.w	r2, #0
 8001318:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800131c:	f7ff faae 	bl	800087c <__aeabi_ddiv>
 8001320:	4602      	mov	r2, r0
 8001322:	460b      	mov	r3, r1
 8001324:	4610      	mov	r0, r2
 8001326:	4619      	mov	r1, r3
 8001328:	f7ff fc76 	bl	8000c18 <__aeabi_d2f>
 800132c:	4602      	mov	r2, r0
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	609a      	str	r2, [r3, #8]
	distance_10mm_ += distance_;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	ed93 7a05 	vldr	s14, [r3, #20]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	edd3 7a02 	vldr	s15, [r3, #8]
 800133e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	edc3 7a05 	vstr	s15, [r3, #20]
	total_distance_ += distance_;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	ed93 7a06 	vldr	s14, [r3, #24]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	edd3 7a02 	vldr	s15, [r3, #8]
 8001354:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	edc3 7a06 	vstr	s15, [r3, #24]
	cross_line_ignore_distance_ += distance_;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	ed93 7a07 	vldr	s14, [r3, #28]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	edd3 7a02 	vldr	s15, [r3, #8]
 800136a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	edc3 7a07 	vstr	s15, [r3, #28]
	monitor_distance = distance_10mm_;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	695b      	ldr	r3, [r3, #20]
 8001378:	4a11      	ldr	r2, [pc, #68]	; (80013c0 <_ZN7Encoder6updateEv+0x1d0>)
 800137a:	6013      	str	r3, [r2, #0]
}
 800137c:	bf00      	nop
 800137e:	3710      	adds	r7, #16
 8001380:	46bd      	mov	sp, r7
 8001382:	bdb0      	pop	{r4, r5, r7, pc}
 8001384:	f3af 8000 	nop.w
 8001388:	9999999a 	.word	0x9999999a
 800138c:	3fa99999 	.word	0x3fa99999
 8001390:	66666666 	.word	0x66666666
 8001394:	3fee6666 	.word	0x3fee6666
 8001398:	ce73a049 	.word	0xce73a049
 800139c:	3f77a3f6 	.word	0x3f77a3f6
 80013a0:	40010000 	.word	0x40010000
 80013a4:	47000000 	.word	0x47000000
 80013a8:	3f912547 	.word	0x3f912547
 80013ac:	40010400 	.word	0x40010400
 80013b0:	20000200 	.word	0x20000200
 80013b4:	20000208 	.word	0x20000208
 80013b8:	2000020c 	.word	0x2000020c
 80013bc:	20000204 	.word	0x20000204
 80013c0:	200001fc 	.word	0x200001fc

080013c4 <_ZN7Encoder5clearEv>:

void Encoder::clear()
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
	cnt_l_ = 0;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f04f 0200 	mov.w	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
	cnt_r_ = 0;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	605a      	str	r2, [r3, #4]
	TIM1 -> CNT = CNT_OFFSET;
 80013dc:	4b08      	ldr	r3, [pc, #32]	; (8001400 <_ZN7Encoder5clearEv+0x3c>)
 80013de:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013e2:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 80013e4:	4b07      	ldr	r3, [pc, #28]	; (8001404 <_ZN7Encoder5clearEv+0x40>)
 80013e6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013ea:	625a      	str	r2, [r3, #36]	; 0x24
	distance_ = 0;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f04f 0200 	mov.w	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr
 8001400:	40010000 	.word	0x40010000
 8001404:	40010400 	.word	0x40010400

08001408 <_ZN7Encoder6getCntERfS0_>:

void Encoder::getCnt(float &cnt_l, float &cnt_r)
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	60b9      	str	r1, [r7, #8]
 8001412:	607a      	str	r2, [r7, #4]
	cnt_l = cnt_l_;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	601a      	str	r2, [r3, #0]
	cnt_r = cnt_r_;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	685a      	ldr	r2, [r3, #4]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	601a      	str	r2, [r3, #0]
}
 8001424:	bf00      	nop
 8001426:	3714      	adds	r7, #20
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <_ZN7Encoder11getDistanceEv>:

float Encoder::getDistance()
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
	return distance_;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	ee07 3a90 	vmov	s15, r3
}
 8001440:	eeb0 0a67 	vmov.f32	s0, s15
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr

0800144e <_ZN7Encoder15getDistance10mmEv>:

float Encoder::getDistance10mm()
{
 800144e:	b480      	push	{r7}
 8001450:	b083      	sub	sp, #12
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
	return distance_10mm_;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	695b      	ldr	r3, [r3, #20]
 800145a:	ee07 3a90 	vmov	s15, r3
}
 800145e:	eeb0 0a67 	vmov.f32	s0, s15
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <_ZN7Encoder16getTotalDistanceEv>:

float Encoder::getTotalDistance()
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
	return total_distance_;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	699b      	ldr	r3, [r3, #24]
 8001478:	ee07 3a90 	vmov	s15, r3
}
 800147c:	eeb0 0a67 	vmov.f32	s0, s15
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr

0800148a <_ZN7Encoder16setTotalDistanceEf>:

void Encoder::setTotalDistance(float true_distance){
 800148a:	b480      	push	{r7}
 800148c:	b083      	sub	sp, #12
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
 8001492:	ed87 0a00 	vstr	s0, [r7]
	total_distance_ = true_distance;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	683a      	ldr	r2, [r7, #0]
 800149a:	619a      	str	r2, [r3, #24]
}
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <_ZN7Encoder17clearDistance10mmEv>:
	return (total_cnt_l_ + total_cnt_r_) / 2;
}
*/

void Encoder::clearDistance10mm()
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
	//total_cnt_l_ = 0;
	//total_cnt_r_ = 0;
	distance_10mm_ = 0;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f04f 0200 	mov.w	r2, #0
 80014b6:	615a      	str	r2, [r3, #20]
}
 80014b8:	bf00      	nop
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <_ZN7Encoder18clearTotalDistanceEv>:

void Encoder::clearTotalDistance()
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
	total_distance_ = 0;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f04f 0200 	mov.w	r2, #0
 80014d2:	619a      	str	r2, [r3, #24]
}
 80014d4:	bf00      	nop
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>:

float Encoder::getCrossLineIgnoreDistance()
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
	return cross_line_ignore_distance_;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	69db      	ldr	r3, [r3, #28]
 80014ec:	ee07 3a90 	vmov	s15, r3
}
 80014f0:	eeb0 0a67 	vmov.f32	s0, s15
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr

080014fe <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>:

void Encoder::clearCrossLineIgnoreDistance()
{
 80014fe:	b480      	push	{r7}
 8001500:	b083      	sub	sp, #12
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
	cross_line_ignore_distance_ = 0;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f04f 0200 	mov.w	r2, #0
 800150c:	61da      	str	r2, [r3, #28]
}
 800150e:	bf00      	nop
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
	...

0800151c <sd_write_array_float>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data, char state){
 800151c:	b580      	push	{r7, lr}
 800151e:	b088      	sub	sp, #32
 8001520:	af02      	add	r7, sp, #8
 8001522:	60f8      	str	r0, [r7, #12]
 8001524:	60b9      	str	r1, [r7, #8]
 8001526:	603b      	str	r3, [r7, #0]
 8001528:	4613      	mov	r3, r2
 800152a:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 800152c:	2300      	movs	r3, #0
 800152e:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001530:	68b9      	ldr	r1, [r7, #8]
 8001532:	68f8      	ldr	r0, [r7, #12]
 8001534:	f000 f900 	bl	8001738 <create_path>

	if(state == OVER_WRITE){
 8001538:	f897 3020 	ldrb.w	r3, [r7, #32]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d108      	bne.n	8001552 <sd_write_array_float+0x36>
		f_chdir(dirpath);
 8001540:	4822      	ldr	r0, [pc, #136]	; (80015cc <sd_write_array_float+0xb0>)
 8001542:	f012 fa37 	bl	80139b4 <f_chdir>
		f_unlink(filepath);	//	一回消す
 8001546:	4822      	ldr	r0, [pc, #136]	; (80015d0 <sd_write_array_float+0xb4>)
 8001548:	f012 fca2 	bl	8013e90 <f_unlink>
		f_chdir("..");
 800154c:	4821      	ldr	r0, [pc, #132]	; (80015d4 <sd_write_array_float+0xb8>)
 800154e:	f012 fa31 	bl	80139b4 <f_chdir>
	}

	fopen_folder_and_file();	//	書き込むファイルを選択
 8001552:	f000 f90b 	bl	800176c <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 8001556:	2300      	movs	r3, #0
 8001558:	82fb      	strh	r3, [r7, #22]
 800155a:	e028      	b.n	80015ae <sd_write_array_float+0x92>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 800155c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	683a      	ldr	r2, [r7, #0]
 8001564:	4413      	add	r3, r2
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff f805 	bl	8000578 <__aeabi_f2d>
 800156e:	4602      	mov	r2, r0
 8001570:	460b      	mov	r3, r1
 8001572:	e9cd 2300 	strd	r2, r3, [sp]
 8001576:	4a18      	ldr	r2, [pc, #96]	; (80015d8 <sd_write_array_float+0xbc>)
 8001578:	2180      	movs	r1, #128	; 0x80
 800157a:	4818      	ldr	r0, [pc, #96]	; (80015dc <sd_write_array_float+0xc0>)
 800157c:	f014 ffe4 	bl	8016548 <sniprintf>

		f_lseek(&fil, f_size(&fil));	//	ファイルの最後に移動
 8001580:	4b17      	ldr	r3, [pc, #92]	; (80015e0 <sd_write_array_float+0xc4>)
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	4619      	mov	r1, r3
 8001586:	4816      	ldr	r0, [pc, #88]	; (80015e0 <sd_write_array_float+0xc4>)
 8001588:	f012 fa5e 	bl	8013a48 <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//	書き込む
 800158c:	4813      	ldr	r0, [pc, #76]	; (80015dc <sd_write_array_float+0xc0>)
 800158e:	f7fe fe37 	bl	8000200 <strlen>
 8001592:	4602      	mov	r2, r0
 8001594:	4b13      	ldr	r3, [pc, #76]	; (80015e4 <sd_write_array_float+0xc8>)
 8001596:	4911      	ldr	r1, [pc, #68]	; (80015dc <sd_write_array_float+0xc0>)
 8001598:	4811      	ldr	r0, [pc, #68]	; (80015e0 <sd_write_array_float+0xc4>)
 800159a:	f011 ffcc 	bl	8013536 <f_write>

		bufclear();	//	書き込み用のバッファをクリア
 800159e:	f000 f8ff 	bl	80017a0 <bufclear>
	for(short i = 0 ; i < size; i++){
 80015a2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80015a6:	b29b      	uxth	r3, r3
 80015a8:	3301      	adds	r3, #1
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	82fb      	strh	r3, [r7, #22]
 80015ae:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80015b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015b6:	429a      	cmp	r2, r3
 80015b8:	dbd0      	blt.n	800155c <sd_write_array_float+0x40>
	}

	f_close(&fil);	//	ファイル閉じる
 80015ba:	4809      	ldr	r0, [pc, #36]	; (80015e0 <sd_write_array_float+0xc4>)
 80015bc:	f012 f9d0 	bl	8013960 <f_close>

	return ret;
 80015c0:	7d7b      	ldrb	r3, [r7, #21]
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3718      	adds	r7, #24
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	2003e660 	.word	0x2003e660
 80015d0:	2003d520 	.word	0x2003d520
 80015d4:	08019c5c 	.word	0x08019c5c
 80015d8:	08019c40 	.word	0x08019c40
 80015dc:	2003e760 	.word	0x2003e760
 80015e0:	2003e7f0 	.word	0x2003e7f0
 80015e4:	2003e7e0 	.word	0x2003e7e0

080015e8 <sd_read_array_float>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, float *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data){
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b086      	sub	sp, #24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	603b      	str	r3, [r7, #0]
 80015f4:	4613      	mov	r3, r2
 80015f6:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 80015f8:	2300      	movs	r3, #0
 80015fa:	757b      	strb	r3, [r7, #21]
	short i = 0;
 80015fc:	2300      	movs	r3, #0
 80015fe:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 8001600:	68b9      	ldr	r1, [r7, #8]
 8001602:	68f8      	ldr	r0, [r7, #12]
 8001604:	f000 f898 	bl	8001738 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 8001608:	f000 f8b0 	bl	800176c <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 800160c:	e019      	b.n	8001642 <sd_read_array_float+0x5a>
		sscanf(buffer, "%f", data + i);
 800160e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	683a      	ldr	r2, [r7, #0]
 8001616:	4413      	add	r3, r2
 8001618:	461a      	mov	r2, r3
 800161a:	4913      	ldr	r1, [pc, #76]	; (8001668 <sd_read_array_float+0x80>)
 800161c:	4813      	ldr	r0, [pc, #76]	; (800166c <sd_read_array_float+0x84>)
 800161e:	f014 ffe7 	bl	80165f0 <siscanf>
		i++;
 8001622:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001626:	b29b      	uxth	r3, r3
 8001628:	3301      	adds	r3, #1
 800162a:	b29b      	uxth	r3, r3
 800162c:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 800162e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001632:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001636:	429a      	cmp	r2, r3
 8001638:	db03      	blt.n	8001642 <sd_read_array_float+0x5a>
 800163a:	88fb      	ldrh	r3, [r7, #6]
 800163c:	3b01      	subs	r3, #1
 800163e:	b29b      	uxth	r3, r3
 8001640:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001642:	4a0b      	ldr	r2, [pc, #44]	; (8001670 <sd_read_array_float+0x88>)
 8001644:	2180      	movs	r1, #128	; 0x80
 8001646:	4809      	ldr	r0, [pc, #36]	; (800166c <sd_read_array_float+0x84>)
 8001648:	f012 fe00 	bl	801424c <f_gets>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d1dd      	bne.n	800160e <sd_read_array_float+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 8001652:	f000 f8a5 	bl	80017a0 <bufclear>

	f_close(&fil);	//ファイル閉じる
 8001656:	4806      	ldr	r0, [pc, #24]	; (8001670 <sd_read_array_float+0x88>)
 8001658:	f012 f982 	bl	8013960 <f_close>

	return ret;
 800165c:	7d7b      	ldrb	r3, [r7, #21]
}
 800165e:	4618      	mov	r0, r3
 8001660:	3718      	adds	r7, #24
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	08019c4c 	.word	0x08019c4c
 800166c:	2003e760 	.word	0x2003e760
 8001670:	2003e7f0 	.word	0x2003e7f0

08001674 <sd_read_array_double>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, double *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_double(const char *p_folder_name, const char *p_file_name, short size, double *data){
 8001674:	b580      	push	{r7, lr}
 8001676:	b086      	sub	sp, #24
 8001678:	af00      	add	r7, sp, #0
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	603b      	str	r3, [r7, #0]
 8001680:	4613      	mov	r3, r2
 8001682:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001684:	2300      	movs	r3, #0
 8001686:	757b      	strb	r3, [r7, #21]
	short i = 0;
 8001688:	2300      	movs	r3, #0
 800168a:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 800168c:	68b9      	ldr	r1, [r7, #8]
 800168e:	68f8      	ldr	r0, [r7, #12]
 8001690:	f000 f852 	bl	8001738 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 8001694:	f000 f86a 	bl	800176c <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001698:	e019      	b.n	80016ce <sd_read_array_double+0x5a>
		sscanf(buffer, "%lf", data + i);
 800169a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800169e:	00db      	lsls	r3, r3, #3
 80016a0:	683a      	ldr	r2, [r7, #0]
 80016a2:	4413      	add	r3, r2
 80016a4:	461a      	mov	r2, r3
 80016a6:	4913      	ldr	r1, [pc, #76]	; (80016f4 <sd_read_array_double+0x80>)
 80016a8:	4813      	ldr	r0, [pc, #76]	; (80016f8 <sd_read_array_double+0x84>)
 80016aa:	f014 ffa1 	bl	80165f0 <siscanf>
		i++;
 80016ae:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	3301      	adds	r3, #1
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 80016ba:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80016be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016c2:	429a      	cmp	r2, r3
 80016c4:	db03      	blt.n	80016ce <sd_read_array_double+0x5a>
 80016c6:	88fb      	ldrh	r3, [r7, #6]
 80016c8:	3b01      	subs	r3, #1
 80016ca:	b29b      	uxth	r3, r3
 80016cc:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80016ce:	4a0b      	ldr	r2, [pc, #44]	; (80016fc <sd_read_array_double+0x88>)
 80016d0:	2180      	movs	r1, #128	; 0x80
 80016d2:	4809      	ldr	r0, [pc, #36]	; (80016f8 <sd_read_array_double+0x84>)
 80016d4:	f012 fdba 	bl	801424c <f_gets>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d1dd      	bne.n	800169a <sd_read_array_double+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 80016de:	f000 f85f 	bl	80017a0 <bufclear>

	f_close(&fil);	//ファイル閉じる
 80016e2:	4806      	ldr	r0, [pc, #24]	; (80016fc <sd_read_array_double+0x88>)
 80016e4:	f012 f93c 	bl	8013960 <f_close>

	return ret;
 80016e8:	7d7b      	ldrb	r3, [r7, #21]
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3718      	adds	r7, #24
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	08019c58 	.word	0x08019c58
 80016f8:	2003e760 	.word	0x2003e760
 80016fc:	2003e7f0 	.word	0x2003e7f0

08001700 <sd_mount>:
//* 役割　：　SDカードをマウント
//* 引数　：　void:
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_mount(){
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 8001706:	2300      	movs	r3, #0
 8001708:	71fb      	strb	r3, [r7, #7]

	if(f_mount(&fs, "", 1) == FR_OK) ret = 1;
 800170a:	2201      	movs	r2, #1
 800170c:	4908      	ldr	r1, [pc, #32]	; (8001730 <sd_mount+0x30>)
 800170e:	4809      	ldr	r0, [pc, #36]	; (8001734 <sd_mount+0x34>)
 8001710:	f011 fb9e 	bl	8012e50 <f_mount>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d102      	bne.n	8001720 <sd_mount+0x20>
 800171a:	2301      	movs	r3, #1
 800171c:	71fb      	strb	r3, [r7, #7]
 800171e:	e001      	b.n	8001724 <sd_mount+0x24>
	else ret = 0;
 8001720:	2300      	movs	r3, #0
 8001722:	71fb      	strb	r3, [r7, #7]

	return ret;
 8001724:	79fb      	ldrb	r3, [r7, #7]
}
 8001726:	4618      	mov	r0, r3
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	08019c68 	.word	0x08019c68
 8001734:	2003d620 	.word	0x2003d620

08001738 <create_path>:
//* 役割　：　操作するパスの文字列を作る
//* 引数　：　char, char: フォルダ名, ファイル名
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void create_path(char const *p_folder_name, char const *p_file_name){
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	6039      	str	r1, [r7, #0]

	sprintf(dirpath, "%s", p_folder_name);
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	4906      	ldr	r1, [pc, #24]	; (8001760 <create_path+0x28>)
 8001746:	4807      	ldr	r0, [pc, #28]	; (8001764 <create_path+0x2c>)
 8001748:	f014 ff32 	bl	80165b0 <siprintf>

	sprintf(filepath, "%s", p_file_name);
 800174c:	683a      	ldr	r2, [r7, #0]
 800174e:	4904      	ldr	r1, [pc, #16]	; (8001760 <create_path+0x28>)
 8001750:	4805      	ldr	r0, [pc, #20]	; (8001768 <create_path+0x30>)
 8001752:	f014 ff2d 	bl	80165b0 <siprintf>

}
 8001756:	bf00      	nop
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	08019c6c 	.word	0x08019c6c
 8001764:	2003e660 	.word	0x2003e660
 8001768:	2003d520 	.word	0x2003d520

0800176c <fopen_folder_and_file>:
//* 役割　：　操作するファイルを選択する_
//* 引数　：　char: ファイル選択
//* 戻り値：　char: 状態チェック	0(マウント失敗) or 1(成功)
//* 備考 : なし
//************************************************************************/
void fopen_folder_and_file(){	//mkdir
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0

	f_mkdir(dirpath);
 8001770:	4807      	ldr	r0, [pc, #28]	; (8001790 <fopen_folder_and_file+0x24>)
 8001772:	f012 fc4f 	bl	8014014 <f_mkdir>

	f_chdir(dirpath);
 8001776:	4806      	ldr	r0, [pc, #24]	; (8001790 <fopen_folder_and_file+0x24>)
 8001778:	f012 f91c 	bl	80139b4 <f_chdir>

	f_open(&fil, filepath, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 800177c:	2213      	movs	r2, #19
 800177e:	4905      	ldr	r1, [pc, #20]	; (8001794 <fopen_folder_and_file+0x28>)
 8001780:	4805      	ldr	r0, [pc, #20]	; (8001798 <fopen_folder_and_file+0x2c>)
 8001782:	f011 fbab 	bl	8012edc <f_open>

	f_chdir("..");
 8001786:	4805      	ldr	r0, [pc, #20]	; (800179c <fopen_folder_and_file+0x30>)
 8001788:	f012 f914 	bl	80139b4 <f_chdir>


}
 800178c:	bf00      	nop
 800178e:	bd80      	pop	{r7, pc}
 8001790:	2003e660 	.word	0x2003e660
 8001794:	2003d520 	.word	0x2003d520
 8001798:	2003e7f0 	.word	0x2003e7f0
 800179c:	08019c5c 	.word	0x08019c5c

080017a0 <bufclear>:
//* 役割　：　バッファをクリア
//* 引数　：　void:
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void bufclear(void){
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFF_SIZE; i++){
 80017a6:	2300      	movs	r3, #0
 80017a8:	607b      	str	r3, [r7, #4]
 80017aa:	e007      	b.n	80017bc <bufclear+0x1c>
		buffer[i] = '\0';
 80017ac:	4a08      	ldr	r2, [pc, #32]	; (80017d0 <bufclear+0x30>)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4413      	add	r3, r2
 80017b2:	2200      	movs	r2, #0
 80017b4:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFF_SIZE; i++){
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	3301      	adds	r3, #1
 80017ba:	607b      	str	r3, [r7, #4]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2b7f      	cmp	r3, #127	; 0x7f
 80017c0:	ddf4      	ble.n	80017ac <bufclear+0xc>
	}
}
 80017c2:	bf00      	nop
 80017c4:	bf00      	nop
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr
 80017d0:	2003e760 	.word	0x2003e760

080017d4 <read_byte>:
#include "ICM_20648.h"

volatile int16_t xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4603      	mov	r3, r0
 80017dc:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 80017de:	79fb      	ldrb	r3, [r7, #7]
 80017e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 80017e8:	2200      	movs	r2, #0
 80017ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017ee:	480e      	ldr	r0, [pc, #56]	; (8001828 <read_byte+0x54>)
 80017f0:	f009 fb34 	bl	800ae5c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 80017f4:	f107 010f 	add.w	r1, r7, #15
 80017f8:	2364      	movs	r3, #100	; 0x64
 80017fa:	2201      	movs	r2, #1
 80017fc:	480b      	ldr	r0, [pc, #44]	; (800182c <read_byte+0x58>)
 80017fe:	f00c fcf1 	bl	800e1e4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,&val,1,100);
 8001802:	f107 010e 	add.w	r1, r7, #14
 8001806:	2364      	movs	r3, #100	; 0x64
 8001808:	2201      	movs	r2, #1
 800180a:	4808      	ldr	r0, [pc, #32]	; (800182c <read_byte+0x58>)
 800180c:	f00c fe1e 	bl	800e44c <HAL_SPI_Receive>
	CS_SET;
 8001810:	2201      	movs	r2, #1
 8001812:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001816:	4804      	ldr	r0, [pc, #16]	; (8001828 <read_byte+0x54>)
 8001818:	f009 fb20 	bl	800ae5c <HAL_GPIO_WritePin>

	return val;
 800181c:	7bbb      	ldrb	r3, [r7, #14]
}
 800181e:	4618      	mov	r0, r3
 8001820:	3710      	adds	r7, #16
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	40020400 	.word	0x40020400
 800182c:	2003f88c 	.word	0x2003f88c

08001830 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	460a      	mov	r2, r1
 800183a:	71fb      	strb	r3, [r7, #7]
 800183c:	4613      	mov	r3, r2
 800183e:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8001840:	79fb      	ldrb	r3, [r7, #7]
 8001842:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001846:	b2db      	uxtb	r3, r3
 8001848:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 800184a:	2200      	movs	r2, #0
 800184c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001850:	480c      	ldr	r0, [pc, #48]	; (8001884 <write_byte+0x54>)
 8001852:	f009 fb03 	bl	800ae5c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001856:	f107 010f 	add.w	r1, r7, #15
 800185a:	2364      	movs	r3, #100	; 0x64
 800185c:	2201      	movs	r2, #1
 800185e:	480a      	ldr	r0, [pc, #40]	; (8001888 <write_byte+0x58>)
 8001860:	f00c fcc0 	bl	800e1e4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&val,1,100);
 8001864:	1db9      	adds	r1, r7, #6
 8001866:	2364      	movs	r3, #100	; 0x64
 8001868:	2201      	movs	r2, #1
 800186a:	4807      	ldr	r0, [pc, #28]	; (8001888 <write_byte+0x58>)
 800186c:	f00c fcba 	bl	800e1e4 <HAL_SPI_Transmit>
	CS_SET;
 8001870:	2201      	movs	r2, #1
 8001872:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001876:	4803      	ldr	r0, [pc, #12]	; (8001884 <write_byte+0x54>)
 8001878:	f009 faf0 	bl	800ae5c <HAL_GPIO_WritePin>
}
 800187c:	bf00      	nop
 800187e:	3710      	adds	r7, #16
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	40020400 	.word	0x40020400
 8001888:	2003f88c 	.word	0x2003f88c

0800188c <IMU_init>:

uint16_t IMU_init() {
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
	uint8_t who_am_i;
	uint16_t ret = 0;
 8001892:	2300      	movs	r3, #0
 8001894:	80fb      	strh	r3, [r7, #6]

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 8001896:	2000      	movs	r0, #0
 8001898:	f7ff ff9c 	bl	80017d4 <read_byte>
 800189c:	4603      	mov	r3, r0
 800189e:	717b      	strb	r3, [r7, #5]
	if ( who_am_i == 0xE0 ) {
 80018a0:	797b      	ldrb	r3, [r7, #5]
 80018a2:	2be0      	cmp	r3, #224	; 0xe0
 80018a4:	d119      	bne.n	80018da <IMU_init+0x4e>
		ret = 1;
 80018a6:	2301      	movs	r3, #1
 80018a8:	80fb      	strh	r3, [r7, #6]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 80018aa:	2101      	movs	r1, #1
 80018ac:	2006      	movs	r0, #6
 80018ae:	f7ff ffbf 	bl	8001830 <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 80018b2:	2110      	movs	r1, #16
 80018b4:	2003      	movs	r0, #3
 80018b6:	f7ff ffbb 	bl	8001830 <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 80018ba:	2120      	movs	r1, #32
 80018bc:	207f      	movs	r0, #127	; 0x7f
 80018be:	f7ff ffb7 	bl	8001830 <write_byte>
		write_byte(0x01,0x06);	//レンジ±2000dps
 80018c2:	2106      	movs	r1, #6
 80018c4:	2001      	movs	r0, #1
 80018c6:	f7ff ffb3 	bl	8001830 <write_byte>
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//レンジ±16g
 80018ca:	2106      	movs	r1, #6
 80018cc:	2014      	movs	r0, #20
 80018ce:	f7ff ffaf 	bl	8001830 <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 80018d2:	2100      	movs	r1, #0
 80018d4:	207f      	movs	r0, #127	; 0x7f
 80018d6:	f7ff ffab 	bl	8001830 <write_byte>
	}
	return ret;
 80018da:	88fb      	ldrh	r3, [r7, #6]
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3708      	adds	r7, #8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <read_gyro_data>:

void read_gyro_data() {
 80018e4:	b598      	push	{r3, r4, r7, lr}
 80018e6:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 80018e8:	2033      	movs	r0, #51	; 0x33
 80018ea:	f7ff ff73 	bl	80017d4 <read_byte>
 80018ee:	4603      	mov	r3, r0
 80018f0:	021b      	lsls	r3, r3, #8
 80018f2:	b21c      	sxth	r4, r3
 80018f4:	2034      	movs	r0, #52	; 0x34
 80018f6:	f7ff ff6d 	bl	80017d4 <read_byte>
 80018fa:	4603      	mov	r3, r0
 80018fc:	b21b      	sxth	r3, r3
 80018fe:	4323      	orrs	r3, r4
 8001900:	b21a      	sxth	r2, r3
 8001902:	4b11      	ldr	r3, [pc, #68]	; (8001948 <read_gyro_data+0x64>)
 8001904:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 8001906:	2035      	movs	r0, #53	; 0x35
 8001908:	f7ff ff64 	bl	80017d4 <read_byte>
 800190c:	4603      	mov	r3, r0
 800190e:	021b      	lsls	r3, r3, #8
 8001910:	b21c      	sxth	r4, r3
 8001912:	2036      	movs	r0, #54	; 0x36
 8001914:	f7ff ff5e 	bl	80017d4 <read_byte>
 8001918:	4603      	mov	r3, r0
 800191a:	b21b      	sxth	r3, r3
 800191c:	4323      	orrs	r3, r4
 800191e:	b21a      	sxth	r2, r3
 8001920:	4b0a      	ldr	r3, [pc, #40]	; (800194c <read_gyro_data+0x68>)
 8001922:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 8001924:	2037      	movs	r0, #55	; 0x37
 8001926:	f7ff ff55 	bl	80017d4 <read_byte>
 800192a:	4603      	mov	r3, r0
 800192c:	021b      	lsls	r3, r3, #8
 800192e:	b21c      	sxth	r4, r3
 8001930:	2038      	movs	r0, #56	; 0x38
 8001932:	f7ff ff4f 	bl	80017d4 <read_byte>
 8001936:	4603      	mov	r3, r0
 8001938:	b21b      	sxth	r3, r3
 800193a:	4323      	orrs	r3, r4
 800193c:	b21a      	sxth	r2, r3
 800193e:	4b04      	ldr	r3, [pc, #16]	; (8001950 <read_gyro_data+0x6c>)
 8001940:	801a      	strh	r2, [r3, #0]
}
 8001942:	bf00      	nop
 8001944:	bd98      	pop	{r3, r4, r7, pc}
 8001946:	bf00      	nop
 8001948:	2003f828 	.word	0x2003f828
 800194c:	2003f826 	.word	0x2003f826
 8001950:	2003f820 	.word	0x2003f820

08001954 <_ZN3IMUC1Ev>:

#define PI 3.1415926535

//int16_t mon_zg_;

IMU::IMU() : xa_(0), ya_(0), za_(0), xg_(0), yg_(0), zg_(0), offset_(0)
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2200      	movs	r2, #0
 8001960:	801a      	strh	r2, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2200      	movs	r2, #0
 8001966:	805a      	strh	r2, [r3, #2]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2200      	movs	r2, #0
 800196c:	809a      	strh	r2, [r3, #4]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2200      	movs	r2, #0
 8001972:	80da      	strh	r2, [r3, #6]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2200      	movs	r2, #0
 8001978:	811a      	strh	r2, [r3, #8]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2200      	movs	r2, #0
 800197e:	815a      	strh	r2, [r3, #10]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f04f 0200 	mov.w	r2, #0
 8001986:	60da      	str	r2, [r3, #12]
{

}
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	4618      	mov	r0, r3
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
	...

08001998 <_ZN3IMU4initEv>:

void IMU::init()
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
	uint16_t who_i_am;
	who_i_am = IMU_init();
 80019a0:	f7ff ff74 	bl	800188c <IMU_init>
 80019a4:	4603      	mov	r3, r0
 80019a6:	81fb      	strh	r3, [r7, #14]
	//printf("who i am: %d\n", who_i_am);

	lcd_clear();
 80019a8:	f7ff fb7a 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 80019ac:	2100      	movs	r1, #0
 80019ae:	2000      	movs	r0, #0
 80019b0:	f7ff fb86 	bl	80010c0 <lcd_locate>
	lcd_printf("IMUstatus");
 80019b4:	4809      	ldr	r0, [pc, #36]	; (80019dc <_ZN3IMU4initEv+0x44>)
 80019b6:	f7ff fbae 	bl	8001116 <lcd_printf>
	lcd_locate(0,1);
 80019ba:	2101      	movs	r1, #1
 80019bc:	2000      	movs	r0, #0
 80019be:	f7ff fb7f 	bl	80010c0 <lcd_locate>
	lcd_printf("%d", who_i_am);
 80019c2:	89fb      	ldrh	r3, [r7, #14]
 80019c4:	4619      	mov	r1, r3
 80019c6:	4806      	ldr	r0, [pc, #24]	; (80019e0 <_ZN3IMU4initEv+0x48>)
 80019c8:	f7ff fba5 	bl	8001116 <lcd_printf>

	HAL_Delay(500);
 80019cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80019d0:	f007 ffa8 	bl	8009924 <HAL_Delay>

}
 80019d4:	bf00      	nop
 80019d6:	3710      	adds	r7, #16
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	08019c70 	.word	0x08019c70
 80019e0:	08019c7c 	.word	0x08019c7c
 80019e4:	00000000 	.word	0x00000000

080019e8 <_ZN3IMU12updateValuesEv>:
	if(array_idx >= STORE_NUM) array_idx = 0;

}
*/
void IMU::updateValues()
{
 80019e8:	b5b0      	push	{r4, r5, r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
	read_gyro_data();
 80019f0:	f7ff ff78 	bl	80018e4 <read_gyro_data>
	//read_accel_data();

	//xa_ = xa;
	//ya_ = ya;
	//za_ = za;
	xg_ = xg;
 80019f4:	4b24      	ldr	r3, [pc, #144]	; (8001a88 <_ZN3IMU12updateValuesEv+0xa0>)
 80019f6:	881b      	ldrh	r3, [r3, #0]
 80019f8:	b21a      	sxth	r2, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	80da      	strh	r2, [r3, #6]
	yg_ = yg;
 80019fe:	4b23      	ldr	r3, [pc, #140]	; (8001a8c <_ZN3IMU12updateValuesEv+0xa4>)
 8001a00:	881b      	ldrh	r3, [r3, #0]
 8001a02:	b21a      	sxth	r2, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	811a      	strh	r2, [r3, #8]
	zg_ = zg;
 8001a08:	4b21      	ldr	r3, [pc, #132]	; (8001a90 <_ZN3IMU12updateValuesEv+0xa8>)
 8001a0a:	881b      	ldrh	r3, [r3, #0]
 8001a0c:	b21a      	sxth	r2, r3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	815a      	strh	r2, [r3, #10]

	static int16_t pre_zg;
	zg_ = ((R_IMU)*(zg_) + (1.0 - (R_IMU))* (pre_zg)); // lowpath filter
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7fe fd9b 	bl	8000554 <__aeabi_i2d>
 8001a1e:	a316      	add	r3, pc, #88	; (adr r3, 8001a78 <_ZN3IMU12updateValuesEv+0x90>)
 8001a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a24:	f7fe fe00 	bl	8000628 <__aeabi_dmul>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	4614      	mov	r4, r2
 8001a2e:	461d      	mov	r5, r3
 8001a30:	4b18      	ldr	r3, [pc, #96]	; (8001a94 <_ZN3IMU12updateValuesEv+0xac>)
 8001a32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7fe fd8c 	bl	8000554 <__aeabi_i2d>
 8001a3c:	a310      	add	r3, pc, #64	; (adr r3, 8001a80 <_ZN3IMU12updateValuesEv+0x98>)
 8001a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a42:	f7fe fdf1 	bl	8000628 <__aeabi_dmul>
 8001a46:	4602      	mov	r2, r0
 8001a48:	460b      	mov	r3, r1
 8001a4a:	4620      	mov	r0, r4
 8001a4c:	4629      	mov	r1, r5
 8001a4e:	f7fe fc35 	bl	80002bc <__adddf3>
 8001a52:	4602      	mov	r2, r0
 8001a54:	460b      	mov	r3, r1
 8001a56:	4610      	mov	r0, r2
 8001a58:	4619      	mov	r1, r3
 8001a5a:	f7ff f895 	bl	8000b88 <__aeabi_d2iz>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	b21a      	sxth	r2, r3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	815a      	strh	r2, [r3, #10]

	pre_zg = zg_;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001a6c:	4b09      	ldr	r3, [pc, #36]	; (8001a94 <_ZN3IMU12updateValuesEv+0xac>)
 8001a6e:	801a      	strh	r2, [r3, #0]
	zg_ = temp_val[2];
	mon_zg_ = zg_;
	*/


}
 8001a70:	bf00      	nop
 8001a72:	3708      	adds	r7, #8
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bdb0      	pop	{r4, r5, r7, pc}
 8001a78:	eb851eb8 	.word	0xeb851eb8
 8001a7c:	3f9eb851 	.word	0x3f9eb851
 8001a80:	70a3d70a 	.word	0x70a3d70a
 8001a84:	3fef0a3d 	.word	0x3fef0a3d
 8001a88:	2003f828 	.word	0x2003f828
 8001a8c:	2003f826 	.word	0x2003f826
 8001a90:	2003f820 	.word	0x2003f820
 8001a94:	20000210 	.word	0x20000210

08001a98 <_ZN3IMU8getOmegaEv>:

float IMU::getOmega()
{
 8001a98:	b5b0      	push	{r4, r5, r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
	float corrected_zg = float(zg_) - offset_;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001aa6:	ee07 3a90 	vmov	s15, r3
 8001aaa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	edd3 7a03 	vldr	s15, [r3, #12]
 8001ab4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ab8:	edc7 7a03 	vstr	s15, [r7, #12]
	return -(corrected_zg / 16.4) * PI / 180;
 8001abc:	68f8      	ldr	r0, [r7, #12]
 8001abe:	f7fe fd5b 	bl	8000578 <__aeabi_f2d>
 8001ac2:	a316      	add	r3, pc, #88	; (adr r3, 8001b1c <_ZN3IMU8getOmegaEv+0x84>)
 8001ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac8:	f7fe fed8 	bl	800087c <__aeabi_ddiv>
 8001acc:	4602      	mov	r2, r0
 8001ace:	460b      	mov	r3, r1
 8001ad0:	4614      	mov	r4, r2
 8001ad2:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001ad6:	a313      	add	r3, pc, #76	; (adr r3, 8001b24 <_ZN3IMU8getOmegaEv+0x8c>)
 8001ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001adc:	4620      	mov	r0, r4
 8001ade:	4629      	mov	r1, r5
 8001ae0:	f7fe fda2 	bl	8000628 <__aeabi_dmul>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	4610      	mov	r0, r2
 8001aea:	4619      	mov	r1, r3
 8001aec:	f04f 0200 	mov.w	r2, #0
 8001af0:	4b09      	ldr	r3, [pc, #36]	; (8001b18 <_ZN3IMU8getOmegaEv+0x80>)
 8001af2:	f7fe fec3 	bl	800087c <__aeabi_ddiv>
 8001af6:	4602      	mov	r2, r0
 8001af8:	460b      	mov	r3, r1
 8001afa:	4610      	mov	r0, r2
 8001afc:	4619      	mov	r1, r3
 8001afe:	f7ff f88b 	bl	8000c18 <__aeabi_d2f>
 8001b02:	4603      	mov	r3, r0
 8001b04:	ee07 3a90 	vmov	s15, r3
}
 8001b08:	eeb0 0a67 	vmov.f32	s0, s15
 8001b0c:	3710      	adds	r7, #16
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bdb0      	pop	{r4, r5, r7, pc}
 8001b12:	bf00      	nop
 8001b14:	f3af 8000 	nop.w
 8001b18:	40668000 	.word	0x40668000
 8001b1c:	66666666 	.word	0x66666666
 8001b20:	40306666 	.word	0x40306666
 8001b24:	54411744 	.word	0x54411744
 8001b28:	400921fb 	.word	0x400921fb

08001b2c <_ZN3IMU11calibrationEv>:

void IMU::calibration()
{
 8001b2c:	b5b0      	push	{r4, r5, r7, lr}
 8001b2e:	b08a      	sub	sp, #40	; 0x28
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
	float sum;
	for(const auto &v : zg_vals){
		sum += v;
	}

	offset_ = sum / num;
 8001b34:	466b      	mov	r3, sp
 8001b36:	461d      	mov	r5, r3
	HAL_Delay(1000);
 8001b38:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b3c:	f007 fef2 	bl	8009924 <HAL_Delay>
	lcd_clear();
 8001b40:	f7ff faae 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001b44:	2100      	movs	r1, #0
 8001b46:	2000      	movs	r0, #0
 8001b48:	f7ff faba 	bl	80010c0 <lcd_locate>
	lcd_printf("IMU     ");
 8001b4c:	4840      	ldr	r0, [pc, #256]	; (8001c50 <_ZN3IMU11calibrationEv+0x124>)
 8001b4e:	f7ff fae2 	bl	8001116 <lcd_printf>
	lcd_locate(0,1);
 8001b52:	2101      	movs	r1, #1
 8001b54:	2000      	movs	r0, #0
 8001b56:	f7ff fab3 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 8001b5a:	483e      	ldr	r0, [pc, #248]	; (8001c54 <_ZN3IMU11calibrationEv+0x128>)
 8001b5c:	f7ff fadb 	bl	8001116 <lcd_printf>
	int16_t num = 2000;
 8001b60:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001b64:	83bb      	strh	r3, [r7, #28]
	float zg_vals[num];
 8001b66:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001b6a:	1e5c      	subs	r4, r3, #1
 8001b6c:	61bc      	str	r4, [r7, #24]
 8001b6e:	4623      	mov	r3, r4
 8001b70:	3301      	adds	r3, #1
 8001b72:	4618      	mov	r0, r3
 8001b74:	f04f 0100 	mov.w	r1, #0
 8001b78:	f04f 0200 	mov.w	r2, #0
 8001b7c:	f04f 0300 	mov.w	r3, #0
 8001b80:	014b      	lsls	r3, r1, #5
 8001b82:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001b86:	0142      	lsls	r2, r0, #5
 8001b88:	4623      	mov	r3, r4
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f04f 0100 	mov.w	r1, #0
 8001b92:	f04f 0200 	mov.w	r2, #0
 8001b96:	f04f 0300 	mov.w	r3, #0
 8001b9a:	014b      	lsls	r3, r1, #5
 8001b9c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001ba0:	0142      	lsls	r2, r0, #5
 8001ba2:	4623      	mov	r3, r4
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	3307      	adds	r3, #7
 8001baa:	08db      	lsrs	r3, r3, #3
 8001bac:	00db      	lsls	r3, r3, #3
 8001bae:	ebad 0d03 	sub.w	sp, sp, r3
 8001bb2:	466b      	mov	r3, sp
 8001bb4:	3303      	adds	r3, #3
 8001bb6:	089b      	lsrs	r3, r3, #2
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	617b      	str	r3, [r7, #20]
	for(uint16_t i = 0; i < num; i++){
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	83fb      	strh	r3, [r7, #30]
 8001bc0:	8bfa      	ldrh	r2, [r7, #30]
 8001bc2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	da13      	bge.n	8001bf2 <_ZN3IMU11calibrationEv+0xc6>
		zg_vals[i] = float(zg_);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001bd0:	8bfb      	ldrh	r3, [r7, #30]
 8001bd2:	ee07 2a90 	vmov	s15, r2
 8001bd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bda:	697a      	ldr	r2, [r7, #20]
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	4413      	add	r3, r2
 8001be0:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(2);
 8001be4:	2002      	movs	r0, #2
 8001be6:	f007 fe9d 	bl	8009924 <HAL_Delay>
	for(uint16_t i = 0; i < num; i++){
 8001bea:	8bfb      	ldrh	r3, [r7, #30]
 8001bec:	3301      	adds	r3, #1
 8001bee:	83fb      	strh	r3, [r7, #30]
 8001bf0:	e7e6      	b.n	8001bc0 <_ZN3IMU11calibrationEv+0x94>
	for(const auto &v : zg_vals){
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	613b      	str	r3, [r7, #16]
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	627b      	str	r3, [r7, #36]	; 0x24
 8001bfa:	4623      	mov	r3, r4
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	693a      	ldr	r2, [r7, #16]
 8001c02:	4413      	add	r3, r2
 8001c04:	60fb      	str	r3, [r7, #12]
 8001c06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d00e      	beq.n	8001c2c <_ZN3IMU11calibrationEv+0x100>
 8001c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c10:	60bb      	str	r3, [r7, #8]
		sum += v;
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	edd3 7a00 	vldr	s15, [r3]
 8001c18:	ed97 7a08 	vldr	s14, [r7, #32]
 8001c1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c20:	edc7 7a08 	vstr	s15, [r7, #32]
	for(const auto &v : zg_vals){
 8001c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c26:	3304      	adds	r3, #4
 8001c28:	627b      	str	r3, [r7, #36]	; 0x24
 8001c2a:	e7ec      	b.n	8001c06 <_ZN3IMU11calibrationEv+0xda>
	offset_ = sum / num;
 8001c2c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001c30:	ee07 3a90 	vmov	s15, r3
 8001c34:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c38:	edd7 6a08 	vldr	s13, [r7, #32]
 8001c3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	edc3 7a03 	vstr	s15, [r3, #12]
 8001c46:	46ad      	mov	sp, r5
}
 8001c48:	bf00      	nop
 8001c4a:	3728      	adds	r7, #40	; 0x28
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bdb0      	pop	{r4, r5, r7, pc}
 8001c50:	08019c80 	.word	0x08019c80
 8001c54:	08019c8c 	.word	0x08019c8c

08001c58 <INA260_read>:

#include "INA260.h"

//#define SLAVEADRESS1 (0x44<<1)

unsigned short INA260_read(uint8_t pointer_byte, uint8_t slave_adress) {
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b086      	sub	sp, #24
 8001c5c:	af02      	add	r7, sp, #8
 8001c5e:	4603      	mov	r3, r0
 8001c60:	460a      	mov	r2, r1
 8001c62:	71fb      	strb	r3, [r7, #7]
 8001c64:	4613      	mov	r3, r2
 8001c66:	71bb      	strb	r3, [r7, #6]
	uint8_t Rxdata[2];
	unsigned short val;
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, &pointer_byte, 1, 100);
 8001c68:	79bb      	ldrb	r3, [r7, #6]
 8001c6a:	b299      	uxth	r1, r3
 8001c6c:	1dfa      	adds	r2, r7, #7
 8001c6e:	2364      	movs	r3, #100	; 0x64
 8001c70:	9300      	str	r3, [sp, #0]
 8001c72:	2301      	movs	r3, #1
 8001c74:	480c      	ldr	r0, [pc, #48]	; (8001ca8 <INA260_read+0x50>)
 8001c76:	f009 fa4f 	bl	800b118 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, slave_adress, Rxdata, 2, 100);
 8001c7a:	79bb      	ldrb	r3, [r7, #6]
 8001c7c:	b299      	uxth	r1, r3
 8001c7e:	f107 020c 	add.w	r2, r7, #12
 8001c82:	2364      	movs	r3, #100	; 0x64
 8001c84:	9300      	str	r3, [sp, #0]
 8001c86:	2302      	movs	r3, #2
 8001c88:	4807      	ldr	r0, [pc, #28]	; (8001ca8 <INA260_read+0x50>)
 8001c8a:	f009 fb43 	bl	800b314 <HAL_I2C_Master_Receive>
	val = ((unsigned short)Rxdata[0] << 8) | (unsigned short)Rxdata[1];
 8001c8e:	7b3b      	ldrb	r3, [r7, #12]
 8001c90:	021b      	lsls	r3, r3, #8
 8001c92:	b21a      	sxth	r2, r3
 8001c94:	7b7b      	ldrb	r3, [r7, #13]
 8001c96:	b21b      	sxth	r3, r3
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	b21b      	sxth	r3, r3
 8001c9c:	81fb      	strh	r3, [r7, #14]
	return val;
 8001c9e:	89fb      	ldrh	r3, [r7, #14]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3710      	adds	r7, #16
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	2003fa40 	.word	0x2003fa40

08001cac <INA260_write>:

void INA260_write(uint8_t pointer_byte , uint8_t data_msbyte , uint8_t data_lsbyte, uint8_t slave_adress) {
 8001cac:	b590      	push	{r4, r7, lr}
 8001cae:	b087      	sub	sp, #28
 8001cb0:	af02      	add	r7, sp, #8
 8001cb2:	4604      	mov	r4, r0
 8001cb4:	4608      	mov	r0, r1
 8001cb6:	4611      	mov	r1, r2
 8001cb8:	461a      	mov	r2, r3
 8001cba:	4623      	mov	r3, r4
 8001cbc:	71fb      	strb	r3, [r7, #7]
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	71bb      	strb	r3, [r7, #6]
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	717b      	strb	r3, [r7, #5]
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	713b      	strb	r3, [r7, #4]
	uint8_t Txcmd[3] = { pointer_byte , data_msbyte , data_lsbyte };
 8001cca:	79fb      	ldrb	r3, [r7, #7]
 8001ccc:	733b      	strb	r3, [r7, #12]
 8001cce:	79bb      	ldrb	r3, [r7, #6]
 8001cd0:	737b      	strb	r3, [r7, #13]
 8001cd2:	797b      	ldrb	r3, [r7, #5]
 8001cd4:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, Txcmd, 3, 100);
 8001cd6:	793b      	ldrb	r3, [r7, #4]
 8001cd8:	b299      	uxth	r1, r3
 8001cda:	f107 020c 	add.w	r2, r7, #12
 8001cde:	2364      	movs	r3, #100	; 0x64
 8001ce0:	9300      	str	r3, [sp, #0]
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	4803      	ldr	r0, [pc, #12]	; (8001cf4 <INA260_write+0x48>)
 8001ce6:	f009 fa17 	bl	800b118 <HAL_I2C_Master_Transmit>
}
 8001cea:	bf00      	nop
 8001cec:	3714      	adds	r7, #20
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd90      	pop	{r4, r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	2003fa40 	.word	0x2003fa40

08001cf8 <setConfig>:

void setConfig(uint8_t msbyte , uint8_t lsbyte, uint8_t slave_adress) {
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	4603      	mov	r3, r0
 8001d00:	71fb      	strb	r3, [r7, #7]
 8001d02:	460b      	mov	r3, r1
 8001d04:	71bb      	strb	r3, [r7, #6]
 8001d06:	4613      	mov	r3, r2
 8001d08:	717b      	strb	r3, [r7, #5]
	INA260_write(0x00 , msbyte , lsbyte, slave_adress);
 8001d0a:	797b      	ldrb	r3, [r7, #5]
 8001d0c:	79ba      	ldrb	r2, [r7, #6]
 8001d0e:	79f9      	ldrb	r1, [r7, #7]
 8001d10:	2000      	movs	r0, #0
 8001d12:	f7ff ffcb 	bl	8001cac <INA260_write>
}
 8001d16:	bf00      	nop
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <INA260_init>:

void INA260_init(uint8_t slave_adress) {
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b082      	sub	sp, #8
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	4603      	mov	r3, r0
 8001d26:	71fb      	strb	r3, [r7, #7]
	setConfig(0x00,0xDF, slave_adress);//AVG=1,BusVoltageConversionTime=588u,ShuntCurrentConversionTime=588u,mode=BusVoltageContinuous
 8001d28:	79fb      	ldrb	r3, [r7, #7]
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	21df      	movs	r1, #223	; 0xdf
 8001d2e:	2000      	movs	r0, #0
 8001d30:	f7ff ffe2 	bl	8001cf8 <setConfig>
}
 8001d34:	bf00      	nop
 8001d36:	3708      	adds	r7, #8
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <_ZN8JoyStickC1Ev>:
 */

#include "Joystick.hpp"
//#include "stm32f4xx_hal.h"

JoyStick::JoyStick()
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
{

}
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	4618      	mov	r0, r3
 8001d48:	370c      	adds	r7, #12
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
	...

08001d54 <_ZN8JoyStick8getValueEv>:

uint16_t JoyStick::getValue()
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10)) ret_value |= 0x01;
 8001d60:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d64:	482a      	ldr	r0, [pc, #168]	; (8001e10 <_ZN8JoyStick8getValueEv+0xbc>)
 8001d66:	f009 f861 	bl	800ae2c <HAL_GPIO_ReadPin>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	bf0c      	ite	eq
 8001d70:	2301      	moveq	r3, #1
 8001d72:	2300      	movne	r3, #0
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d003      	beq.n	8001d82 <_ZN8JoyStick8getValueEv+0x2e>
 8001d7a:	89fb      	ldrh	r3, [r7, #14]
 8001d7c:	f043 0301 	orr.w	r3, r3, #1
 8001d80:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_0)) ret_value |= 0x02;
 8001d82:	2101      	movs	r1, #1
 8001d84:	4823      	ldr	r0, [pc, #140]	; (8001e14 <_ZN8JoyStick8getValueEv+0xc0>)
 8001d86:	f009 f851 	bl	800ae2c <HAL_GPIO_ReadPin>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	bf0c      	ite	eq
 8001d90:	2301      	moveq	r3, #1
 8001d92:	2300      	movne	r3, #0
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d003      	beq.n	8001da2 <_ZN8JoyStick8getValueEv+0x4e>
 8001d9a:	89fb      	ldrh	r3, [r7, #14]
 8001d9c:	f043 0302 	orr.w	r3, r3, #2
 8001da0:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8)) ret_value |= 0x04;
 8001da2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001da6:	481a      	ldr	r0, [pc, #104]	; (8001e10 <_ZN8JoyStick8getValueEv+0xbc>)
 8001da8:	f009 f840 	bl	800ae2c <HAL_GPIO_ReadPin>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	bf0c      	ite	eq
 8001db2:	2301      	moveq	r3, #1
 8001db4:	2300      	movne	r3, #0
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d003      	beq.n	8001dc4 <_ZN8JoyStick8getValueEv+0x70>
 8001dbc:	89fb      	ldrh	r3, [r7, #14]
 8001dbe:	f043 0304 	orr.w	r3, r3, #4
 8001dc2:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)) ret_value |= 0x08;
 8001dc4:	2104      	movs	r1, #4
 8001dc6:	4814      	ldr	r0, [pc, #80]	; (8001e18 <_ZN8JoyStick8getValueEv+0xc4>)
 8001dc8:	f009 f830 	bl	800ae2c <HAL_GPIO_ReadPin>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	bf0c      	ite	eq
 8001dd2:	2301      	moveq	r3, #1
 8001dd4:	2300      	movne	r3, #0
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d003      	beq.n	8001de4 <_ZN8JoyStick8getValueEv+0x90>
 8001ddc:	89fb      	ldrh	r3, [r7, #14]
 8001dde:	f043 0308 	orr.w	r3, r3, #8
 8001de2:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7)) ret_value |= 0x10;
 8001de4:	2180      	movs	r1, #128	; 0x80
 8001de6:	480a      	ldr	r0, [pc, #40]	; (8001e10 <_ZN8JoyStick8getValueEv+0xbc>)
 8001de8:	f009 f820 	bl	800ae2c <HAL_GPIO_ReadPin>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	bf0c      	ite	eq
 8001df2:	2301      	moveq	r3, #1
 8001df4:	2300      	movne	r3, #0
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d003      	beq.n	8001e04 <_ZN8JoyStick8getValueEv+0xb0>
 8001dfc:	89fb      	ldrh	r3, [r7, #14]
 8001dfe:	f043 0310 	orr.w	r3, r3, #16
 8001e02:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8001e04:	89fb      	ldrh	r3, [r7, #14]
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3710      	adds	r7, #16
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	40021000 	.word	0x40021000
 8001e14:	40020c00 	.word	0x40020c00
 8001e18:	40020400 	.word	0x40020400

08001e1c <_ZN3LED9fullColorEc>:
 */

#include "LED.hpp"

void LED::fullColor(char color)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	460b      	mov	r3, r1
 8001e26:	70fb      	strb	r3, [r7, #3]
	if(color == 'R'){
 8001e28:	78fb      	ldrb	r3, [r7, #3]
 8001e2a:	2b52      	cmp	r3, #82	; 0x52
 8001e2c:	d112      	bne.n	8001e54 <_ZN3LED9fullColorEc+0x38>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e34:	4856      	ldr	r0, [pc, #344]	; (8001f90 <_ZN3LED9fullColorEc+0x174>)
 8001e36:	f009 f811 	bl	800ae5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e40:	4853      	ldr	r0, [pc, #332]	; (8001f90 <_ZN3LED9fullColorEc+0x174>)
 8001e42:	f009 f80b 	bl	800ae5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001e46:	2201      	movs	r2, #1
 8001e48:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e4c:	4850      	ldr	r0, [pc, #320]	; (8001f90 <_ZN3LED9fullColorEc+0x174>)
 8001e4e:	f009 f805 	bl	800ae5c <HAL_GPIO_WritePin>
	else if(color == '~'){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
	}
}
 8001e52:	e098      	b.n	8001f86 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'G'){
 8001e54:	78fb      	ldrb	r3, [r7, #3]
 8001e56:	2b47      	cmp	r3, #71	; 0x47
 8001e58:	d112      	bne.n	8001e80 <_ZN3LED9fullColorEc+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e60:	484b      	ldr	r0, [pc, #300]	; (8001f90 <_ZN3LED9fullColorEc+0x174>)
 8001e62:	f008 fffb 	bl	800ae5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001e66:	2200      	movs	r2, #0
 8001e68:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e6c:	4848      	ldr	r0, [pc, #288]	; (8001f90 <_ZN3LED9fullColorEc+0x174>)
 8001e6e:	f008 fff5 	bl	800ae5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001e72:	2201      	movs	r2, #1
 8001e74:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e78:	4845      	ldr	r0, [pc, #276]	; (8001f90 <_ZN3LED9fullColorEc+0x174>)
 8001e7a:	f008 ffef 	bl	800ae5c <HAL_GPIO_WritePin>
}
 8001e7e:	e082      	b.n	8001f86 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'B'){
 8001e80:	78fb      	ldrb	r3, [r7, #3]
 8001e82:	2b42      	cmp	r3, #66	; 0x42
 8001e84:	d112      	bne.n	8001eac <_ZN3LED9fullColorEc+0x90>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001e86:	2201      	movs	r2, #1
 8001e88:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e8c:	4840      	ldr	r0, [pc, #256]	; (8001f90 <_ZN3LED9fullColorEc+0x174>)
 8001e8e:	f008 ffe5 	bl	800ae5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001e92:	2201      	movs	r2, #1
 8001e94:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e98:	483d      	ldr	r0, [pc, #244]	; (8001f90 <_ZN3LED9fullColorEc+0x174>)
 8001e9a:	f008 ffdf 	bl	800ae5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ea4:	483a      	ldr	r0, [pc, #232]	; (8001f90 <_ZN3LED9fullColorEc+0x174>)
 8001ea6:	f008 ffd9 	bl	800ae5c <HAL_GPIO_WritePin>
}
 8001eaa:	e06c      	b.n	8001f86 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'C'){
 8001eac:	78fb      	ldrb	r3, [r7, #3]
 8001eae:	2b43      	cmp	r3, #67	; 0x43
 8001eb0:	d112      	bne.n	8001ed8 <_ZN3LED9fullColorEc+0xbc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001eb8:	4835      	ldr	r0, [pc, #212]	; (8001f90 <_ZN3LED9fullColorEc+0x174>)
 8001eba:	f008 ffcf 	bl	800ae5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ec4:	4832      	ldr	r0, [pc, #200]	; (8001f90 <_ZN3LED9fullColorEc+0x174>)
 8001ec6:	f008 ffc9 	bl	800ae5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ed0:	482f      	ldr	r0, [pc, #188]	; (8001f90 <_ZN3LED9fullColorEc+0x174>)
 8001ed2:	f008 ffc3 	bl	800ae5c <HAL_GPIO_WritePin>
}
 8001ed6:	e056      	b.n	8001f86 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'M'){
 8001ed8:	78fb      	ldrb	r3, [r7, #3]
 8001eda:	2b4d      	cmp	r3, #77	; 0x4d
 8001edc:	d112      	bne.n	8001f04 <_ZN3LED9fullColorEc+0xe8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ee4:	482a      	ldr	r0, [pc, #168]	; (8001f90 <_ZN3LED9fullColorEc+0x174>)
 8001ee6:	f008 ffb9 	bl	800ae5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001eea:	2201      	movs	r2, #1
 8001eec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ef0:	4827      	ldr	r0, [pc, #156]	; (8001f90 <_ZN3LED9fullColorEc+0x174>)
 8001ef2:	f008 ffb3 	bl	800ae5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001efc:	4824      	ldr	r0, [pc, #144]	; (8001f90 <_ZN3LED9fullColorEc+0x174>)
 8001efe:	f008 ffad 	bl	800ae5c <HAL_GPIO_WritePin>
}
 8001f02:	e040      	b.n	8001f86 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'Y'){
 8001f04:	78fb      	ldrb	r3, [r7, #3]
 8001f06:	2b59      	cmp	r3, #89	; 0x59
 8001f08:	d112      	bne.n	8001f30 <_ZN3LED9fullColorEc+0x114>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f10:	481f      	ldr	r0, [pc, #124]	; (8001f90 <_ZN3LED9fullColorEc+0x174>)
 8001f12:	f008 ffa3 	bl	800ae5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001f16:	2200      	movs	r2, #0
 8001f18:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f1c:	481c      	ldr	r0, [pc, #112]	; (8001f90 <_ZN3LED9fullColorEc+0x174>)
 8001f1e:	f008 ff9d 	bl	800ae5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001f22:	2201      	movs	r2, #1
 8001f24:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f28:	4819      	ldr	r0, [pc, #100]	; (8001f90 <_ZN3LED9fullColorEc+0x174>)
 8001f2a:	f008 ff97 	bl	800ae5c <HAL_GPIO_WritePin>
}
 8001f2e:	e02a      	b.n	8001f86 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'W'){
 8001f30:	78fb      	ldrb	r3, [r7, #3]
 8001f32:	2b57      	cmp	r3, #87	; 0x57
 8001f34:	d112      	bne.n	8001f5c <_ZN3LED9fullColorEc+0x140>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001f36:	2200      	movs	r2, #0
 8001f38:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f3c:	4814      	ldr	r0, [pc, #80]	; (8001f90 <_ZN3LED9fullColorEc+0x174>)
 8001f3e:	f008 ff8d 	bl	800ae5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001f42:	2200      	movs	r2, #0
 8001f44:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f48:	4811      	ldr	r0, [pc, #68]	; (8001f90 <_ZN3LED9fullColorEc+0x174>)
 8001f4a:	f008 ff87 	bl	800ae5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f54:	480e      	ldr	r0, [pc, #56]	; (8001f90 <_ZN3LED9fullColorEc+0x174>)
 8001f56:	f008 ff81 	bl	800ae5c <HAL_GPIO_WritePin>
}
 8001f5a:	e014      	b.n	8001f86 <_ZN3LED9fullColorEc+0x16a>
	else if(color == '~'){
 8001f5c:	78fb      	ldrb	r3, [r7, #3]
 8001f5e:	2b7e      	cmp	r3, #126	; 0x7e
 8001f60:	d111      	bne.n	8001f86 <_ZN3LED9fullColorEc+0x16a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001f62:	2201      	movs	r2, #1
 8001f64:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f68:	4809      	ldr	r0, [pc, #36]	; (8001f90 <_ZN3LED9fullColorEc+0x174>)
 8001f6a:	f008 ff77 	bl	800ae5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f74:	4806      	ldr	r0, [pc, #24]	; (8001f90 <_ZN3LED9fullColorEc+0x174>)
 8001f76:	f008 ff71 	bl	800ae5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f80:	4803      	ldr	r0, [pc, #12]	; (8001f90 <_ZN3LED9fullColorEc+0x174>)
 8001f82:	f008 ff6b 	bl	800ae5c <HAL_GPIO_WritePin>
}
 8001f86:	bf00      	nop
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	40020000 	.word	0x40020000

08001f94 <_ZN3LED2LREaa>:

void LED::LR(int8_t l_status, int8_t r_status)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	70fb      	strb	r3, [r7, #3]
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	70bb      	strb	r3, [r7, #2]
	if(l_status == 1)
 8001fa4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d106      	bne.n	8001fba <_ZN3LED2LREaa+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8001fac:	2201      	movs	r2, #1
 8001fae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fb2:	4813      	ldr	r0, [pc, #76]	; (8002000 <_ZN3LED2LREaa+0x6c>)
 8001fb4:	f008 ff52 	bl	800ae5c <HAL_GPIO_WritePin>
 8001fb8:	e009      	b.n	8001fce <_ZN3LED2LREaa+0x3a>
	else if(l_status == 0)
 8001fba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d105      	bne.n	8001fce <_ZN3LED2LREaa+0x3a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fc8:	480d      	ldr	r0, [pc, #52]	; (8002000 <_ZN3LED2LREaa+0x6c>)
 8001fca:	f008 ff47 	bl	800ae5c <HAL_GPIO_WritePin>

	if(r_status == 1)
 8001fce:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d106      	bne.n	8001fe4 <_ZN3LED2LREaa+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fdc:	4808      	ldr	r0, [pc, #32]	; (8002000 <_ZN3LED2LREaa+0x6c>)
 8001fde:	f008 ff3d 	bl	800ae5c <HAL_GPIO_WritePin>
	else if(r_status == 0)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);

}
 8001fe2:	e009      	b.n	8001ff8 <_ZN3LED2LREaa+0x64>
	else if(r_status == 0)
 8001fe4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d105      	bne.n	8001ff8 <_ZN3LED2LREaa+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001fec:	2200      	movs	r2, #0
 8001fee:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ff2:	4803      	ldr	r0, [pc, #12]	; (8002000 <_ZN3LED2LREaa+0x6c>)
 8001ff4:	f008 ff32 	bl	800ae5c <HAL_GPIO_WritePin>
}
 8001ff8:	bf00      	nop
 8001ffa:	3708      	adds	r7, #8
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	40020000 	.word	0x40020000

08002004 <_ZN10LineSensorC1Ev>:
#include "Macro.h"
#include "AQM0802.h"

float mon_sens, mon_sens_lpf;

LineSensor::LineSensor()
 8002004:	b580      	push	{r7, lr}
 8002006:	b092      	sub	sp, #72	; 0x48
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 8002012:	4618      	mov	r0, r3
 8002014:	f7ff fe92 	bl	8001d3c <_ZN8JoyStickC1Ev>
{
	for(auto &av : analog_val_){
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	637b      	str	r3, [r7, #52]	; 0x34
 800201c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800201e:	647b      	str	r3, [r7, #68]	; 0x44
 8002020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002022:	331c      	adds	r3, #28
 8002024:	633b      	str	r3, [r7, #48]	; 0x30
 8002026:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800202a:	429a      	cmp	r2, r3
 800202c:	d008      	beq.n	8002040 <_ZN10LineSensorC1Ev+0x3c>
 800202e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002030:	62fb      	str	r3, [r7, #44]	; 0x2c
		av = 0;
 8002032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002034:	2200      	movs	r2, #0
 8002036:	801a      	strh	r2, [r3, #0]
	for(auto &av : analog_val_){
 8002038:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800203a:	3302      	adds	r3, #2
 800203c:	647b      	str	r3, [r7, #68]	; 0x44
 800203e:	e7f2      	b.n	8002026 <_ZN10LineSensorC1Ev+0x22>
	}

	for(auto &s : sensor){
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8002046:	62bb      	str	r3, [r7, #40]	; 0x28
 8002048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800204a:	643b      	str	r3, [r7, #64]	; 0x40
 800204c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800204e:	3338      	adds	r3, #56	; 0x38
 8002050:	627b      	str	r3, [r7, #36]	; 0x24
 8002052:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002056:	429a      	cmp	r2, r3
 8002058:	d009      	beq.n	800206e <_ZN10LineSensorC1Ev+0x6a>
 800205a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800205c:	623b      	str	r3, [r7, #32]
		s = 0;
 800205e:	6a3b      	ldr	r3, [r7, #32]
 8002060:	f04f 0200 	mov.w	r2, #0
 8002064:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor){
 8002066:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002068:	3304      	adds	r3, #4
 800206a:	643b      	str	r3, [r7, #64]	; 0x40
 800206c:	e7f1      	b.n	8002052 <_ZN10LineSensorC1Ev+0x4e>
	}

	for(auto &m : offset_values_){
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002074:	61fb      	str	r3, [r7, #28]
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	63fb      	str	r3, [r7, #60]	; 0x3c
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	3338      	adds	r3, #56	; 0x38
 800207e:	61bb      	str	r3, [r7, #24]
 8002080:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	429a      	cmp	r2, r3
 8002086:	d009      	beq.n	800209c <_ZN10LineSensorC1Ev+0x98>
 8002088:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800208a:	617b      	str	r3, [r7, #20]
		m = 0;
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	f04f 0200 	mov.w	r2, #0
 8002092:	601a      	str	r2, [r3, #0]
	for(auto &m : offset_values_){
 8002094:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002096:	3304      	adds	r3, #4
 8002098:	63fb      	str	r3, [r7, #60]	; 0x3c
 800209a:	e7f1      	b.n	8002080 <_ZN10LineSensorC1Ev+0x7c>
	}
	for(auto &s : sensor_coefficient_){
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 80020a2:	613b      	str	r3, [r7, #16]
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	3338      	adds	r3, #56	; 0x38
 80020ac:	60fb      	str	r3, [r7, #12]
 80020ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d009      	beq.n	80020ca <_ZN10LineSensorC1Ev+0xc6>
 80020b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020b8:	60bb      	str	r3, [r7, #8]
		s = 1;
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80020c0:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor_coefficient_){
 80020c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020c4:	3304      	adds	r3, #4
 80020c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80020c8:	e7f1      	b.n	80020ae <_ZN10LineSensorC1Ev+0xaa>
	}

}
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4618      	mov	r0, r3
 80020ce:	3748      	adds	r7, #72	; 0x48
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <_ZN10LineSensor8ADCStartEv>:

void LineSensor::ADCStart()
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog_val_, 14);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	220e      	movs	r2, #14
 80020e0:	4619      	mov	r1, r3
 80020e2:	4803      	ldr	r0, [pc, #12]	; (80020f0 <_ZN10LineSensor8ADCStartEv+0x1c>)
 80020e4:	f007 fc86 	bl	80099f4 <HAL_ADC_Start_DMA>
}
 80020e8:	bf00      	nop
 80020ea:	3708      	adds	r7, #8
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	2003f964 	.word	0x2003f964

080020f4 <_ZN10LineSensor17storeSensorValuesEv>:

void LineSensor::storeSensorValues()
{
 80020f4:	b480      	push	{r7}
 80020f6:	b085      	sub	sp, #20
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
	static uint8_t cnt = 0;

	for(int i = 0; i < AD_DATA_SIZE; i++){
 80020fc:	2300      	movs	r3, #0
 80020fe:	60fb      	str	r3, [r7, #12]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2b0d      	cmp	r3, #13
 8002104:	dc2f      	bgt.n	8002166 <_ZN10LineSensor17storeSensorValuesEv+0x72>
		store_vals_[cnt][i] = sensor_coefficient_[i] * (analog_val_[i] - offset_values_[i]) ;
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	3392      	adds	r3, #146	; 0x92
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	4413      	add	r3, r2
 8002110:	3304      	adds	r3, #4
 8002112:	ed93 7a00 	vldr	s14, [r3]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	68fa      	ldr	r2, [r7, #12]
 800211a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800211e:	ee07 3a90 	vmov	s15, r3
 8002122:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	33a0      	adds	r3, #160	; 0xa0
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	4413      	add	r3, r2
 8002130:	3304      	adds	r3, #4
 8002132:	edd3 7a00 	vldr	s15, [r3]
 8002136:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800213a:	4b14      	ldr	r3, [pc, #80]	; (800218c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	4619      	mov	r1, r3
 8002140:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	460b      	mov	r3, r1
 8002148:	00db      	lsls	r3, r3, #3
 800214a:	1a5b      	subs	r3, r3, r1
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	68f9      	ldr	r1, [r7, #12]
 8002150:	440b      	add	r3, r1
 8002152:	3306      	adds	r3, #6
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	4413      	add	r3, r2
 8002158:	3304      	adds	r3, #4
 800215a:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < AD_DATA_SIZE; i++){
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	3301      	adds	r3, #1
 8002162:	60fb      	str	r3, [r7, #12]
 8002164:	e7cc      	b.n	8002100 <_ZN10LineSensor17storeSensorValuesEv+0xc>
		//store_vals_[cnt][i] = float(analog_val_[i]) ;
	}

	cnt++;
 8002166:	4b09      	ldr	r3, [pc, #36]	; (800218c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	3301      	adds	r3, #1
 800216c:	b2da      	uxtb	r2, r3
 800216e:	4b07      	ldr	r3, [pc, #28]	; (800218c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002170:	701a      	strb	r2, [r3, #0]
	if(cnt >= 10) cnt = 0;
 8002172:	4b06      	ldr	r3, [pc, #24]	; (800218c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	2b09      	cmp	r3, #9
 8002178:	d902      	bls.n	8002180 <_ZN10LineSensor17storeSensorValuesEv+0x8c>
 800217a:	4b04      	ldr	r3, [pc, #16]	; (800218c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 800217c:	2200      	movs	r2, #0
 800217e:	701a      	strb	r2, [r3, #0]


}
 8002180:	bf00      	nop
 8002182:	3714      	adds	r7, #20
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr
 800218c:	2000021c 	.word	0x2000021c

08002190 <_ZN10LineSensor18updateSensorValuesEv>:
void LineSensor::updateSensorValues()
{
 8002190:	b5b0      	push	{r4, r5, r7, lr}
 8002192:	b08e      	sub	sp, #56	; 0x38
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
	float temp_val[10];
	static float pre_sensor[AD_DATA_SIZE];

	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 8002198:	2300      	movs	r3, #0
 800219a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800219e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80021a2:	2b0d      	cmp	r3, #13
 80021a4:	f200 80b6 	bhi.w	8002314 <_ZN10LineSensor18updateSensorValuesEv+0x184>
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 80021a8:	2300      	movs	r3, #0
 80021aa:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80021ae:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80021b2:	2b09      	cmp	r3, #9
 80021b4:	d81c      	bhi.n	80021f0 <_ZN10LineSensor18updateSensorValuesEv+0x60>
			temp_val[store_cnt] = store_vals_[store_cnt][ad_cnt];
 80021b6:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80021ba:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 80021be:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	4613      	mov	r3, r2
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	1a9b      	subs	r3, r3, r2
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	4423      	add	r3, r4
 80021ce:	3306      	adds	r3, #6
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	4403      	add	r3, r0
 80021d4:	3304      	adds	r3, #4
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	008b      	lsls	r3, r1, #2
 80021da:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80021de:	440b      	add	r3, r1
 80021e0:	3b30      	subs	r3, #48	; 0x30
 80021e2:	601a      	str	r2, [r3, #0]
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 80021e4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80021e8:	3301      	adds	r3, #1
 80021ea:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80021ee:	e7de      	b.n	80021ae <_ZN10LineSensor18updateSensorValuesEv+0x1e>
		}

		// sort
		for(uint8_t i = 0; i < 10; i++){
 80021f0:	2300      	movs	r3, #0
 80021f2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80021f6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80021fa:	2b09      	cmp	r3, #9
 80021fc:	d84d      	bhi.n	800229a <_ZN10LineSensor18updateSensorValuesEv+0x10a>
			for (uint8_t j = i+1; j < 10; j++) {
 80021fe:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002202:	3301      	adds	r3, #1
 8002204:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002208:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800220c:	2b09      	cmp	r3, #9
 800220e:	d83e      	bhi.n	800228e <_ZN10LineSensor18updateSensorValuesEv+0xfe>
				if(temp_val[i] < temp_val[j]){
 8002210:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800221a:	4413      	add	r3, r2
 800221c:	3b30      	subs	r3, #48	; 0x30
 800221e:	ed93 7a00 	vldr	s14, [r3]
 8002222:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800222c:	4413      	add	r3, r2
 800222e:	3b30      	subs	r3, #48	; 0x30
 8002230:	edd3 7a00 	vldr	s15, [r3]
 8002234:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800223c:	d521      	bpl.n	8002282 <_ZN10LineSensor18updateSensorValuesEv+0xf2>
					float tmp = temp_val[j];
 800223e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002248:	4413      	add	r3, r2
 800224a:	3b30      	subs	r3, #48	; 0x30
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	633b      	str	r3, [r7, #48]	; 0x30
					temp_val[j] = temp_val[i];
 8002250:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8002254:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002258:	0092      	lsls	r2, r2, #2
 800225a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800225e:	440a      	add	r2, r1
 8002260:	3a30      	subs	r2, #48	; 0x30
 8002262:	6812      	ldr	r2, [r2, #0]
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800226a:	440b      	add	r3, r1
 800226c:	3b30      	subs	r3, #48	; 0x30
 800226e:	601a      	str	r2, [r3, #0]
					temp_val[i] = tmp;
 8002270:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800227a:	4413      	add	r3, r2
 800227c:	3b30      	subs	r3, #48	; 0x30
 800227e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002280:	601a      	str	r2, [r3, #0]
			for (uint8_t j = i+1; j < 10; j++) {
 8002282:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002286:	3301      	adds	r3, #1
 8002288:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 800228c:	e7bc      	b.n	8002208 <_ZN10LineSensor18updateSensorValuesEv+0x78>
		for(uint8_t i = 0; i < 10; i++){
 800228e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002292:	3301      	adds	r3, #1
 8002294:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8002298:	e7ad      	b.n	80021f6 <_ZN10LineSensor18updateSensorValuesEv+0x66>
				}
			}
		}

		sensor[ad_cnt] = ((R_LINESENSE)*(temp_val[5]) + (1.0 - (R_LINESENSE))* (pre_sensor[ad_cnt]));
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	4618      	mov	r0, r3
 800229e:	f7fe f96b 	bl	8000578 <__aeabi_f2d>
 80022a2:	a328      	add	r3, pc, #160	; (adr r3, 8002344 <_ZN10LineSensor18updateSensorValuesEv+0x1b4>)
 80022a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022a8:	f7fe f9be 	bl	8000628 <__aeabi_dmul>
 80022ac:	4602      	mov	r2, r0
 80022ae:	460b      	mov	r3, r1
 80022b0:	4614      	mov	r4, r2
 80022b2:	461d      	mov	r5, r3
 80022b4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80022b8:	4a1f      	ldr	r2, [pc, #124]	; (8002338 <_ZN10LineSensor18updateSensorValuesEv+0x1a8>)
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	4413      	add	r3, r2
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4618      	mov	r0, r3
 80022c2:	f7fe f959 	bl	8000578 <__aeabi_f2d>
 80022c6:	a31a      	add	r3, pc, #104	; (adr r3, 8002330 <_ZN10LineSensor18updateSensorValuesEv+0x1a0>)
 80022c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022cc:	f7fe f9ac 	bl	8000628 <__aeabi_dmul>
 80022d0:	4602      	mov	r2, r0
 80022d2:	460b      	mov	r3, r1
 80022d4:	4620      	mov	r0, r4
 80022d6:	4629      	mov	r1, r5
 80022d8:	f7fd fff0 	bl	80002bc <__adddf3>
 80022dc:	4602      	mov	r2, r0
 80022de:	460b      	mov	r3, r1
 80022e0:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 80022e4:	4610      	mov	r0, r2
 80022e6:	4619      	mov	r1, r3
 80022e8:	f7fe fc96 	bl	8000c18 <__aeabi_d2f>
 80022ec:	4601      	mov	r1, r0
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	f104 03b0 	add.w	r3, r4, #176	; 0xb0
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	4413      	add	r3, r2
 80022f8:	6019      	str	r1, [r3, #0]
		pre_sensor[ad_cnt] = temp_val[5];
 80022fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80022fe:	69fa      	ldr	r2, [r7, #28]
 8002300:	490d      	ldr	r1, [pc, #52]	; (8002338 <_ZN10LineSensor18updateSensorValuesEv+0x1a8>)
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	440b      	add	r3, r1
 8002306:	601a      	str	r2, [r3, #0]
	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 8002308:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800230c:	3301      	adds	r3, #1
 800230e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002312:	e744      	b.n	800219e <_ZN10LineSensor18updateSensorValuesEv+0xe>
	}

	mon_sens = store_vals_[5][5];
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800231a:	4a08      	ldr	r2, [pc, #32]	; (800233c <_ZN10LineSensor18updateSensorValuesEv+0x1ac>)
 800231c:	6013      	str	r3, [r2, #0]
	mon_sens_lpf = sensor[5];
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8002324:	4a06      	ldr	r2, [pc, #24]	; (8002340 <_ZN10LineSensor18updateSensorValuesEv+0x1b0>)
 8002326:	6013      	str	r3, [r2, #0]
}
 8002328:	bf00      	nop
 800232a:	3738      	adds	r7, #56	; 0x38
 800232c:	46bd      	mov	sp, r7
 800232e:	bdb0      	pop	{r4, r5, r7, pc}
 8002330:	66666666 	.word	0x66666666
 8002334:	3fee6666 	.word	0x3fee6666
 8002338:	20000220 	.word	0x20000220
 800233c:	20000214 	.word	0x20000214
 8002340:	20000218 	.word	0x20000218
 8002344:	9999999a 	.word	0x9999999a
 8002348:	3fa99999 	.word	0x3fa99999

0800234c <_ZN10LineSensor11calibrationEv>:

void LineSensor::calibration()
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b0a0      	sub	sp, #128	; 0x80
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);
 8002354:	2064      	movs	r0, #100	; 0x64
 8002356:	f007 fae5 	bl	8009924 <HAL_Delay>

	lcd_clear();
 800235a:	f7fe fea1 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 800235e:	2100      	movs	r1, #0
 8002360:	2000      	movs	r0, #0
 8002362:	f7fe fead 	bl	80010c0 <lcd_locate>
	lcd_printf("LineSens");
 8002366:	4886      	ldr	r0, [pc, #536]	; (8002580 <_ZN10LineSensor11calibrationEv+0x234>)
 8002368:	f7fe fed5 	bl	8001116 <lcd_printf>
	lcd_locate(0,1);
 800236c:	2101      	movs	r1, #1
 800236e:	2000      	movs	r0, #0
 8002370:	f7fe fea6 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 8002374:	4883      	ldr	r0, [pc, #524]	; (8002584 <_ZN10LineSensor11calibrationEv+0x238>)
 8002376:	f7fe fece 	bl	8001116 <lcd_printf>


	float max_values[AD_DATA_SIZE];
	float min_values[AD_DATA_SIZE];

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800237a:	2300      	movs	r3, #0
 800237c:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8002380:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002384:	2b0d      	cmp	r3, #13
 8002386:	d823      	bhi.n	80023d0 <_ZN10LineSensor11calibrationEv+0x84>
		max_values[i] = sensor[i];
 8002388:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 800238c:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002390:	6879      	ldr	r1, [r7, #4]
 8002392:	32b0      	adds	r2, #176	; 0xb0
 8002394:	0092      	lsls	r2, r2, #2
 8002396:	440a      	add	r2, r1
 8002398:	6812      	ldr	r2, [r2, #0]
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80023a0:	440b      	add	r3, r1
 80023a2:	3b40      	subs	r3, #64	; 0x40
 80023a4:	601a      	str	r2, [r3, #0]
		min_values[i] = sensor[i];
 80023a6:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 80023aa:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80023ae:	6879      	ldr	r1, [r7, #4]
 80023b0:	32b0      	adds	r2, #176	; 0xb0
 80023b2:	0092      	lsls	r2, r2, #2
 80023b4:	440a      	add	r2, r1
 80023b6:	6812      	ldr	r2, [r2, #0]
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80023be:	440b      	add	r3, r1
 80023c0:	3b78      	subs	r3, #120	; 0x78
 80023c2:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80023c4:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80023c8:	3301      	adds	r3, #1
 80023ca:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 80023ce:	e7d7      	b.n	8002380 <_ZN10LineSensor11calibrationEv+0x34>
	}

	while(joy_stick_.getValue() != JOY_C){
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7ff fcbc 	bl	8001d54 <_ZN8JoyStick8getValueEv>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b02      	cmp	r3, #2
 80023e0:	bf14      	ite	ne
 80023e2:	2301      	movne	r3, #1
 80023e4:	2300      	moveq	r3, #0
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d079      	beq.n	80024e0 <_ZN10LineSensor11calibrationEv+0x194>

		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80023ec:	2300      	movs	r3, #0
 80023ee:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 80023f2:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80023f6:	2b0d      	cmp	r3, #13
 80023f8:	d850      	bhi.n	800249c <_ZN10LineSensor11calibrationEv+0x150>
			if(max_values[i] < sensor[i]){
 80023fa:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002404:	4413      	add	r3, r2
 8002406:	3b40      	subs	r3, #64	; 0x40
 8002408:	ed93 7a00 	vldr	s14, [r3]
 800240c:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	33b0      	adds	r3, #176	; 0xb0
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	4413      	add	r3, r2
 8002418:	edd3 7a00 	vldr	s15, [r3]
 800241c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002424:	d50f      	bpl.n	8002446 <_ZN10LineSensor11calibrationEv+0xfa>
				max_values[i] = sensor[i];
 8002426:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 800242a:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800242e:	6879      	ldr	r1, [r7, #4]
 8002430:	32b0      	adds	r2, #176	; 0xb0
 8002432:	0092      	lsls	r2, r2, #2
 8002434:	440a      	add	r2, r1
 8002436:	6812      	ldr	r2, [r2, #0]
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800243e:	440b      	add	r3, r1
 8002440:	3b40      	subs	r3, #64	; 0x40
 8002442:	601a      	str	r2, [r3, #0]
 8002444:	e024      	b.n	8002490 <_ZN10LineSensor11calibrationEv+0x144>
			}
			else if(min_values[i] > sensor[i]){
 8002446:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002450:	4413      	add	r3, r2
 8002452:	3b78      	subs	r3, #120	; 0x78
 8002454:	ed93 7a00 	vldr	s14, [r3]
 8002458:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	33b0      	adds	r3, #176	; 0xb0
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	4413      	add	r3, r2
 8002464:	edd3 7a00 	vldr	s15, [r3]
 8002468:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800246c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002470:	dd0e      	ble.n	8002490 <_ZN10LineSensor11calibrationEv+0x144>
				min_values[i] = sensor[i];
 8002472:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 8002476:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800247a:	6879      	ldr	r1, [r7, #4]
 800247c:	32b0      	adds	r2, #176	; 0xb0
 800247e:	0092      	lsls	r2, r2, #2
 8002480:	440a      	add	r2, r1
 8002482:	6812      	ldr	r2, [r2, #0]
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800248a:	440b      	add	r3, r1
 800248c:	3b78      	subs	r3, #120	; 0x78
 800248e:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002490:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002494:	3301      	adds	r3, #1
 8002496:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 800249a:	e7aa      	b.n	80023f2 <_ZN10LineSensor11calibrationEv+0xa6>
			}
		}

		if(rotary_switch_.getValue() == 0){
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f203 23be 	addw	r3, r3, #702	; 0x2be
 80024a2:	4618      	mov	r0, r3
 80024a4:	f002 feda 	bl	800525c <_ZN12RotarySwitch8getValueEv>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	bf0c      	ite	eq
 80024ae:	2301      	moveq	r3, #1
 80024b0:	2300      	movne	r3, #0
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d009      	beq.n	80024cc <_ZN10LineSensor11calibrationEv+0x180>
			led_.LR(-1, 1);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 80024be:	2201      	movs	r2, #1
 80024c0:	f04f 31ff 	mov.w	r1, #4294967295
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7ff fd65 	bl	8001f94 <_ZN3LED2LREaa>
 80024ca:	e781      	b.n	80023d0 <_ZN10LineSensor11calibrationEv+0x84>

		}
		else{
			led_.LR(-1, 0);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 80024d2:	2200      	movs	r2, #0
 80024d4:	f04f 31ff 	mov.w	r1, #4294967295
 80024d8:	4618      	mov	r0, r3
 80024da:	f7ff fd5b 	bl	8001f94 <_ZN3LED2LREaa>
	while(joy_stick_.getValue() != JOY_C){
 80024de:	e777      	b.n	80023d0 <_ZN10LineSensor11calibrationEv+0x84>
		printf("%f, ", m);
	}
		printf("\n");
	*/

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80024e0:	2300      	movs	r3, #0
 80024e2:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 80024e6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80024ea:	2b0d      	cmp	r3, #13
 80024ec:	d826      	bhi.n	800253c <_ZN10LineSensor11calibrationEv+0x1f0>
		sensor_coefficient_[i] = 1000 / (max_values[i] - min_values[i]);
 80024ee:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80024f8:	4413      	add	r3, r2
 80024fa:	3b40      	subs	r3, #64	; 0x40
 80024fc:	ed93 7a00 	vldr	s14, [r3]
 8002500:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800250a:	4413      	add	r3, r2
 800250c:	3b78      	subs	r3, #120	; 0x78
 800250e:	edd3 7a00 	vldr	s15, [r3]
 8002512:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002516:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800251a:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8002588 <_ZN10LineSensor11calibrationEv+0x23c>
 800251e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	3392      	adds	r3, #146	; 0x92
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	4413      	add	r3, r2
 800252a:	3304      	adds	r3, #4
 800252c:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002530:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002534:	3301      	adds	r3, #1
 8002536:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 800253a:	e7d4      	b.n	80024e6 <_ZN10LineSensor11calibrationEv+0x19a>
	}
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800253c:	2300      	movs	r3, #0
 800253e:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8002542:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002546:	2b0d      	cmp	r3, #13
 8002548:	d815      	bhi.n	8002576 <_ZN10LineSensor11calibrationEv+0x22a>
		offset_values_[i] = min_values[i];
 800254a:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 800254e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002552:	0092      	lsls	r2, r2, #2
 8002554:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002558:	440a      	add	r2, r1
 800255a:	3a78      	subs	r2, #120	; 0x78
 800255c:	6812      	ldr	r2, [r2, #0]
 800255e:	6879      	ldr	r1, [r7, #4]
 8002560:	33a0      	adds	r3, #160	; 0xa0
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	440b      	add	r3, r1
 8002566:	3304      	adds	r3, #4
 8002568:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800256a:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800256e:	3301      	adds	r3, #1
 8002570:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8002574:	e7e5      	b.n	8002542 <_ZN10LineSensor11calibrationEv+0x1f6>
	}


}
 8002576:	bf00      	nop
 8002578:	3780      	adds	r7, #128	; 0x80
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	08019c98 	.word	0x08019c98
 8002584:	08019ca4 	.word	0x08019ca4
 8002588:	447a0000 	.word	0x447a0000

0800258c <_ZN10LineSensor13emergencyStopEv>:
{
	printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n", sensor[0], sensor[1], sensor[2], sensor[3], sensor[4], sensor[5], sensor[6], sensor[7], sensor[8], sensor[9], sensor[10], sensor[11], sensor[12], sensor[13]);
}

bool LineSensor::emergencyStop()
{
 800258c:	b480      	push	{r7}
 800258e:	b089      	sub	sp, #36	; 0x24
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
	uint16_t out_cnt = 0;
 8002594:	2300      	movs	r3, #0
 8002596:	83fb      	strh	r3, [r7, #30]
	static uint16_t cnt = 0;
	static bool flag = false;

	for(const auto & s : sensor){
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 800259e:	617b      	str	r3, [r7, #20]
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	61bb      	str	r3, [r7, #24]
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	3338      	adds	r3, #56	; 0x38
 80025a8:	613b      	str	r3, [r7, #16]
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d012      	beq.n	80025d8 <_ZN10LineSensor13emergencyStopEv+0x4c>
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	60fb      	str	r3, [r7, #12]
		if(s >= 700) out_cnt++;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	edd3 7a00 	vldr	s15, [r3]
 80025bc:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 800262c <_ZN10LineSensor13emergencyStopEv+0xa0>
 80025c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025c8:	db02      	blt.n	80025d0 <_ZN10LineSensor13emergencyStopEv+0x44>
 80025ca:	8bfb      	ldrh	r3, [r7, #30]
 80025cc:	3301      	adds	r3, #1
 80025ce:	83fb      	strh	r3, [r7, #30]
	for(const auto & s : sensor){
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	3304      	adds	r3, #4
 80025d4:	61bb      	str	r3, [r7, #24]
 80025d6:	e7e8      	b.n	80025aa <_ZN10LineSensor13emergencyStopEv+0x1e>
	}

	if(out_cnt >= AD_DATA_SIZE){
 80025d8:	8bfb      	ldrh	r3, [r7, #30]
 80025da:	2b0d      	cmp	r3, #13
 80025dc:	d906      	bls.n	80025ec <_ZN10LineSensor13emergencyStopEv+0x60>
		cnt++;
 80025de:	4b14      	ldr	r3, [pc, #80]	; (8002630 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80025e0:	881b      	ldrh	r3, [r3, #0]
 80025e2:	3301      	adds	r3, #1
 80025e4:	b29a      	uxth	r2, r3
 80025e6:	4b12      	ldr	r3, [pc, #72]	; (8002630 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80025e8:	801a      	strh	r2, [r3, #0]
 80025ea:	e002      	b.n	80025f2 <_ZN10LineSensor13emergencyStopEv+0x66>
	}
	else{
		cnt = 0;
 80025ec:	4b10      	ldr	r3, [pc, #64]	; (8002630 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	801a      	strh	r2, [r3, #0]
	}

	if(cnt >= 50){
 80025f2:	4b0f      	ldr	r3, [pc, #60]	; (8002630 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80025f4:	881b      	ldrh	r3, [r3, #0]
 80025f6:	2b31      	cmp	r3, #49	; 0x31
 80025f8:	d903      	bls.n	8002602 <_ZN10LineSensor13emergencyStopEv+0x76>
		flag = true;
 80025fa:	4b0e      	ldr	r3, [pc, #56]	; (8002634 <_ZN10LineSensor13emergencyStopEv+0xa8>)
 80025fc:	2201      	movs	r2, #1
 80025fe:	701a      	strb	r2, [r3, #0]
 8002600:	e002      	b.n	8002608 <_ZN10LineSensor13emergencyStopEv+0x7c>
	}
	else flag = false;
 8002602:	4b0c      	ldr	r3, [pc, #48]	; (8002634 <_ZN10LineSensor13emergencyStopEv+0xa8>)
 8002604:	2200      	movs	r2, #0
 8002606:	701a      	strb	r2, [r3, #0]

	if(cnt >= 10000) cnt = 10000;
 8002608:	4b09      	ldr	r3, [pc, #36]	; (8002630 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 800260a:	881b      	ldrh	r3, [r3, #0]
 800260c:	f242 720f 	movw	r2, #9999	; 0x270f
 8002610:	4293      	cmp	r3, r2
 8002612:	d903      	bls.n	800261c <_ZN10LineSensor13emergencyStopEv+0x90>
 8002614:	4b06      	ldr	r3, [pc, #24]	; (8002630 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 8002616:	f242 7210 	movw	r2, #10000	; 0x2710
 800261a:	801a      	strh	r2, [r3, #0]

	return flag;
 800261c:	4b05      	ldr	r3, [pc, #20]	; (8002634 <_ZN10LineSensor13emergencyStopEv+0xa8>)
 800261e:	781b      	ldrb	r3, [r3, #0]

}
 8002620:	4618      	mov	r0, r3
 8002622:	3724      	adds	r7, #36	; 0x24
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr
 800262c:	442f0000 	.word	0x442f0000
 8002630:	20000258 	.word	0x20000258
 8002634:	2000025a 	.word	0x2000025a

08002638 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002642:	edd7 7a01 	vldr	s15, [r7, #4]
 8002646:	eef0 7ae7 	vabs.f32	s15, s15
 800264a:	eeb0 0a67 	vmov.f32	s0, s15
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU>:
uint16_t mon_vel_idx, mon_i;
float mon_tar_vel;

//#define REVERSE

LineTrace::LineTrace(Motor *motor, LineSensor *line_sensor, VelocityCtrl *velocity_ctrl, SideSensor *side_sensor, Encoder *encoder, Odometry *odometry, Logger *logger, IMU *imu) :
 8002658:	b480      	push	{r7}
 800265a:	b087      	sub	sp, #28
 800265c:	af00      	add	r7, sp, #0
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	60b9      	str	r1, [r7, #8]
 8002662:	607a      	str	r2, [r7, #4]
 8002664:	603b      	str	r3, [r7, #0]
				kp_(0), kd_(0), ki_(0), kp_fast_(0), kd_fast_(0), ki_fast_(0), kp_velo_(0), kd_velo_(0), ki_velo_(0),
				excution_flag_(false), i_reset_flag_(false), normal_ratio_(0),
				target_velocity_(0), max_velocity_(0), max_velocity2_(0), min_velocity_(0), min_velocity2_(0), logging_flag_(false),
				ref_distance_(0), velocity_play_flag_(false), velocity_table_idx_(0), mode_selector_(0), crossline_idx_(0), sideline_idx_(0), all_sideline_idx_(0),
				ignore_crossline_flag_(false), stable_flag_(false), stable_cnt_reset_flag_(false), max_acc_(0), max_dec_(0), max_acc2_(0), max_dec2_(0), correction_check_cnt_(0), all_sideline_flag_(false)
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	f04f 0200 	mov.w	r2, #0
 800266c:	625a      	str	r2, [r3, #36]	; 0x24
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	f04f 0200 	mov.w	r2, #0
 8002674:	629a      	str	r2, [r3, #40]	; 0x28
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	f04f 0200 	mov.w	r2, #0
 800267c:	62da      	str	r2, [r3, #44]	; 0x2c
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	f04f 0200 	mov.w	r2, #0
 8002684:	631a      	str	r2, [r3, #48]	; 0x30
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	f04f 0200 	mov.w	r2, #0
 800268c:	635a      	str	r2, [r3, #52]	; 0x34
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	f04f 0200 	mov.w	r2, #0
 8002694:	639a      	str	r2, [r3, #56]	; 0x38
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	f04f 0200 	mov.w	r2, #0
 800269c:	63da      	str	r2, [r3, #60]	; 0x3c
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	f04f 0200 	mov.w	r2, #0
 80026a4:	641a      	str	r2, [r3, #64]	; 0x40
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	f04f 0200 	mov.w	r2, #0
 80026ac:	645a      	str	r2, [r3, #68]	; 0x44
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2200      	movs	r2, #0
 80026ba:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	f04f 0200 	mov.w	r2, #0
 80026c4:	64da      	str	r2, [r3, #76]	; 0x4c
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	f04f 0200 	mov.w	r2, #0
 80026cc:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f04f 0200 	mov.w	r2, #0
 80026d6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	f04f 0200 	mov.w	r2, #0
 80026e0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	f04f 0200 	mov.w	r2, #0
 80026ea:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	f04f 0200 	mov.w	r2, #0
 80026f4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8002706:	3310      	adds	r3, #16
 8002708:	f04f 0200 	mov.w	r2, #0
 800270c:	601a      	str	r2, [r3, #0]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002714:	3354      	adds	r3, #84	; 0x54
 8002716:	2200      	movs	r2, #0
 8002718:	701a      	strb	r2, [r3, #0]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002720:	3356      	adds	r3, #86	; 0x56
 8002722:	2200      	movs	r2, #0
 8002724:	801a      	strh	r2, [r3, #0]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800272c:	3358      	adds	r3, #88	; 0x58
 800272e:	2200      	movs	r2, #0
 8002730:	801a      	strh	r2, [r3, #0]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002738:	332c      	adds	r3, #44	; 0x2c
 800273a:	2200      	movs	r2, #0
 800273c:	801a      	strh	r2, [r3, #0]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002744:	332e      	adds	r3, #46	; 0x2e
 8002746:	2200      	movs	r2, #0
 8002748:	801a      	strh	r2, [r3, #0]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002750:	3330      	adds	r3, #48	; 0x30
 8002752:	2200      	movs	r2, #0
 8002754:	801a      	strh	r2, [r3, #0]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 800275c:	3332      	adds	r3, #50	; 0x32
 800275e:	2200      	movs	r2, #0
 8002760:	701a      	strb	r2, [r3, #0]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002768:	3333      	adds	r3, #51	; 0x33
 800276a:	2200      	movs	r2, #0
 800276c:	701a      	strb	r2, [r3, #0]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002774:	3334      	adds	r3, #52	; 0x34
 8002776:	2200      	movs	r2, #0
 8002778:	701a      	strb	r2, [r3, #0]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002780:	3338      	adds	r3, #56	; 0x38
 8002782:	f04f 0200 	mov.w	r2, #0
 8002786:	601a      	str	r2, [r3, #0]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 800278e:	333c      	adds	r3, #60	; 0x3c
 8002790:	f04f 0200 	mov.w	r2, #0
 8002794:	601a      	str	r2, [r3, #0]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 800279c:	3340      	adds	r3, #64	; 0x40
 800279e:	f04f 0200 	mov.w	r2, #0
 80027a2:	601a      	str	r2, [r3, #0]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80027aa:	3344      	adds	r3, #68	; 0x44
 80027ac:	f04f 0200 	mov.w	r2, #0
 80027b0:	601a      	str	r2, [r3, #0]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80027b8:	3348      	adds	r3, #72	; 0x48
 80027ba:	2200      	movs	r2, #0
 80027bc:	801a      	strh	r2, [r3, #0]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80027c4:	334a      	adds	r3, #74	; 0x4a
 80027c6:	2200      	movs	r2, #0
 80027c8:	701a      	strb	r2, [r3, #0]

{
	motor_ = motor;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	68ba      	ldr	r2, [r7, #8]
 80027ce:	601a      	str	r2, [r3, #0]
	line_sensor_ = line_sensor;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	683a      	ldr	r2, [r7, #0]
 80027da:	609a      	str	r2, [r3, #8]
	side_sensor_ = side_sensor;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6a3a      	ldr	r2, [r7, #32]
 80027e0:	611a      	str	r2, [r3, #16]
	encoder_ = encoder;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027e6:	615a      	str	r2, [r3, #20]
	odometry_ = odometry;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80027ec:	619a      	str	r2, [r3, #24]
	logger_ = logger;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027f2:	61da      	str	r2, [r3, #28]
	imu_ = imu;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027f8:	621a      	str	r2, [r3, #32]

	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 80027fa:	2300      	movs	r3, #0
 80027fc:	82fb      	strh	r3, [r7, #22]
 80027fe:	8afb      	ldrh	r3, [r7, #22]
 8002800:	f241 726f 	movw	r2, #5999	; 0x176f
 8002804:	4293      	cmp	r3, r2
 8002806:	d80e      	bhi.n	8002826 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x1ce>
		velocity_table_[i] = 0;
 8002808:	8afb      	ldrh	r3, [r7, #22]
 800280a:	68fa      	ldr	r2, [r7, #12]
 800280c:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8002810:	3304      	adds	r3, #4
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	4413      	add	r3, r2
 8002816:	3304      	adds	r3, #4
 8002818:	f04f 0200 	mov.w	r2, #0
 800281c:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 800281e:	8afb      	ldrh	r3, [r7, #22]
 8002820:	3301      	adds	r3, #1
 8002822:	82fb      	strh	r3, [r7, #22]
 8002824:	e7eb      	b.n	80027fe <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x1a6>
	}
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002826:	2300      	movs	r3, #0
 8002828:	82bb      	strh	r3, [r7, #20]
 800282a:	8abb      	ldrh	r3, [r7, #20]
 800282c:	2b63      	cmp	r3, #99	; 0x63
 800282e:	d80e      	bhi.n	800284e <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x1f6>
		crossline_distance_[i] = 0;
 8002830:	8abb      	ldrh	r3, [r7, #20]
 8002832:	68fa      	ldr	r2, [r7, #12]
 8002834:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8002838:	3316      	adds	r3, #22
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	4413      	add	r3, r2
 800283e:	3304      	adds	r3, #4
 8002840:	f04f 0200 	mov.w	r2, #0
 8002844:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002846:	8abb      	ldrh	r3, [r7, #20]
 8002848:	3301      	adds	r3, #1
 800284a:	82bb      	strh	r3, [r7, #20]
 800284c:	e7ed      	b.n	800282a <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x1d2>
	}
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 800284e:	2300      	movs	r3, #0
 8002850:	827b      	strh	r3, [r7, #18]
 8002852:	8a7b      	ldrh	r3, [r7, #18]
 8002854:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002858:	d20e      	bcs.n	8002878 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x220>
		sideline_distance_[i] = 0;
 800285a:	8a7b      	ldrh	r3, [r7, #18]
 800285c:	68fa      	ldr	r2, [r7, #12]
 800285e:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 8002862:	333a      	adds	r3, #58	; 0x3a
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	4413      	add	r3, r2
 8002868:	3304      	adds	r3, #4
 800286a:	f04f 0200 	mov.w	r2, #0
 800286e:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002870:	8a7b      	ldrh	r3, [r7, #18]
 8002872:	3301      	adds	r3, #1
 8002874:	827b      	strh	r3, [r7, #18]
 8002876:	e7ec      	b.n	8002852 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x1fa>
	}
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002878:	2300      	movs	r3, #0
 800287a:	823b      	strh	r3, [r7, #16]
 800287c:	8a3b      	ldrh	r3, [r7, #16]
 800287e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002882:	d20e      	bcs.n	80028a2 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x24a>
		all_sideline_distance_[i] = 0;
 8002884:	8a3b      	ldrh	r3, [r7, #16]
 8002886:	68fa      	ldr	r2, [r7, #12]
 8002888:	f503 534d 	add.w	r3, r3, #13120	; 0x3340
 800288c:	3322      	adds	r3, #34	; 0x22
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	4413      	add	r3, r2
 8002892:	3304      	adds	r3, #4
 8002894:	f04f 0200 	mov.w	r2, #0
 8002898:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 800289a:	8a3b      	ldrh	r3, [r7, #16]
 800289c:	3301      	adds	r3, #1
 800289e:	823b      	strh	r3, [r7, #16]
 80028a0:	e7ec      	b.n	800287c <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x224>
	}
}
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	4618      	mov	r0, r3
 80028a6:	371c      	adds	r7, #28
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <_ZN9LineTrace9calcAngleEv>:
	return diff;

}

float LineTrace::calcAngle()
{
 80028b0:	b5b0      	push	{r4, r5, r7, lr}
 80028b2:	b094      	sub	sp, #80	; 0x50
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
	getSensorValues();
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f000 f86d 	bl	8002998 <_ZN9LineTrace15getSensorValuesEv>

	float den = 0;
 80028be:	f04f 0300 	mov.w	r3, #0
 80028c2:	64fb      	str	r3, [r7, #76]	; 0x4c
	float num = 0;
 80028c4:	f04f 0300 	mov.w	r3, #0
 80028c8:	64bb      	str	r3, [r7, #72]	; 0x48
	float angle_list[SENSOR_NUM] = {-1.02, -0.85, -0.68, -0.51, -0.34, -0.17, 0, 0.17, 0.34, 0.51, 0.68, 0.85, 1.02};
 80028ca:	4b31      	ldr	r3, [pc, #196]	; (8002990 <_ZN9LineTrace9calcAngleEv+0xe0>)
 80028cc:	f107 040c 	add.w	r4, r7, #12
 80028d0:	461d      	mov	r5, r3
 80028d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028de:	682b      	ldr	r3, [r5, #0]
 80028e0:	6023      	str	r3, [r4, #0]

	for(uint16_t i = 0; i < SENSOR_NUM; i++){
 80028e2:	2300      	movs	r3, #0
 80028e4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80028e8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80028ec:	2b0c      	cmp	r3, #12
 80028ee:	d82e      	bhi.n	800294e <_ZN9LineTrace9calcAngleEv+0x9e>

		num += angle_list[i] * sensor_digital_values_[i];
 80028f0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80028fa:	4413      	add	r3, r2
 80028fc:	3b44      	subs	r3, #68	; 0x44
 80028fe:	ed93 7a00 	vldr	s14, [r3]
 8002902:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	3320      	adds	r3, #32
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	4413      	add	r3, r2
 800290e:	3304      	adds	r3, #4
 8002910:	edd3 7a00 	vldr	s15, [r3]
 8002914:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002918:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800291c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002920:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		den += sensor_digital_values_[i];
 8002924:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	3320      	adds	r3, #32
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	4413      	add	r3, r2
 8002930:	3304      	adds	r3, #4
 8002932:	edd3 7a00 	vldr	s15, [r3]
 8002936:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800293a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800293e:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	for(uint16_t i = 0; i < SENSOR_NUM; i++){
 8002942:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002946:	3301      	adds	r3, #1
 8002948:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800294c:	e7cc      	b.n	80028e8 <_ZN9LineTrace9calcAngleEv+0x38>
		num += angle_list[i] * sensor_values_[i];
		den += sensor_values_[i];
		*/
	}

	float angle = 0;
 800294e:	f04f 0300 	mov.w	r3, #0
 8002952:	643b      	str	r3, [r7, #64]	; 0x40
	if(den != 0) angle = num / den;
 8002954:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002958:	eef5 7a40 	vcmp.f32	s15, #0.0
 800295c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002960:	d008      	beq.n	8002974 <_ZN9LineTrace9calcAngleEv+0xc4>
 8002962:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8002966:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800296a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800296e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
 8002972:	e002      	b.n	800297a <_ZN9LineTrace9calcAngleEv+0xca>
	else angle = 0;
 8002974:	f04f 0300 	mov.w	r3, #0
 8002978:	643b      	str	r3, [r7, #64]	; 0x40

	mon_steer_angle = angle;
 800297a:	4a06      	ldr	r2, [pc, #24]	; (8002994 <_ZN9LineTrace9calcAngleEv+0xe4>)
 800297c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800297e:	6013      	str	r3, [r2, #0]

	return angle;
 8002980:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002982:	ee07 3a90 	vmov	s15, r3
}
 8002986:	eeb0 0a67 	vmov.f32	s0, s15
 800298a:	3750      	adds	r7, #80	; 0x50
 800298c:	46bd      	mov	sp, r7
 800298e:	bdb0      	pop	{r4, r5, r7, pc}
 8002990:	08019ce8 	.word	0x08019ce8
 8002994:	2000025c 	.word	0x2000025c

08002998 <_ZN9LineTrace15getSensorValuesEv>:

void LineTrace::getSensorValues()
{
 8002998:	b480      	push	{r7}
 800299a:	b085      	sub	sp, #20
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
	sensor_values_[0] = 1000 - line_sensor_->sensor[0];
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	edd3 7ab0 	vldr	s15, [r3, #704]	; 0x2c0
 80029a8:	ed9f 7a82 	vldr	s14, [pc, #520]	; 8002bb4 <_ZN9LineTrace15getSensorValuesEv+0x21c>
 80029ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	sensor_values_[1] = 1000 - line_sensor_->sensor[1];
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 80029be:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8002bb4 <_ZN9LineTrace15getSensorValuesEv+0x21c>
 80029c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
	sensor_values_[2] = 1000 - line_sensor_->sensor[2];
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 80029d4:	ed9f 7a77 	vldr	s14, [pc, #476]	; 8002bb4 <_ZN9LineTrace15getSensorValuesEv+0x21c>
 80029d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
	sensor_values_[3] = 1000 - line_sensor_->sensor[3];
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	edd3 7ab3 	vldr	s15, [r3, #716]	; 0x2cc
 80029ea:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8002bb4 <_ZN9LineTrace15getSensorValuesEv+0x21c>
 80029ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	sensor_values_[4] = 1000 - line_sensor_->sensor[4];
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8002a00:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8002bb4 <_ZN9LineTrace15getSensorValuesEv+0x21c>
 8002a04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
	sensor_values_[5] = 1000 - line_sensor_->sensor[5];
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	edd3 7ab5 	vldr	s15, [r3, #724]	; 0x2d4
 8002a16:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8002bb4 <_ZN9LineTrace15getSensorValuesEv+0x21c>
 8002a1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
	sensor_values_[6] = 1000 - (line_sensor_->sensor[6] + line_sensor_->sensor[7]) / 2;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	ed93 7ab6 	vldr	s14, [r3, #728]	; 0x2d8
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	edd3 7ab7 	vldr	s15, [r3, #732]	; 0x2dc
 8002a34:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a38:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002a3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a40:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8002bb4 <_ZN9LineTrace15getSensorValuesEv+0x21c>
 8002a44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
	sensor_values_[7] = 1000 - line_sensor_->sensor[8];
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 8002a56:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8002bb4 <_ZN9LineTrace15getSensorValuesEv+0x21c>
 8002a5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
	sensor_values_[8] = 1000 - line_sensor_->sensor[9];
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	edd3 7ab9 	vldr	s15, [r3, #740]	; 0x2e4
 8002a6c:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8002bb4 <_ZN9LineTrace15getSensorValuesEv+0x21c>
 8002a70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
	sensor_values_[9] = 1000 - line_sensor_->sensor[10];
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 8002a82:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8002bb4 <_ZN9LineTrace15getSensorValuesEv+0x21c>
 8002a86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
	sensor_values_[10] = 1000 - line_sensor_->sensor[11];
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	edd3 7abb 	vldr	s15, [r3, #748]	; 0x2ec
 8002a98:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8002bb4 <_ZN9LineTrace15getSensorValuesEv+0x21c>
 8002a9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
	sensor_values_[11] = 1000 - line_sensor_->sensor[12];
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 8002aae:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8002bb4 <_ZN9LineTrace15getSensorValuesEv+0x21c>
 8002ab2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
	sensor_values_[12] = 1000 - line_sensor_->sensor[13];
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 8002ac4:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8002bb4 <_ZN9LineTrace15getSensorValuesEv+0x21c>
 8002ac8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80

	for(uint16_t i = 0; i < 12; i++){
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	81fb      	strh	r3, [r7, #14]
 8002ad6:	89fb      	ldrh	r3, [r7, #14]
 8002ad8:	2b0b      	cmp	r3, #11
 8002ada:	d824      	bhi.n	8002b26 <_ZN9LineTrace15getSensorValuesEv+0x18e>
		if(sensor_values_[i] >= 500) sensor_digital_values_[i] = 1;
 8002adc:	89fb      	ldrh	r3, [r7, #14]
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	3314      	adds	r3, #20
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	4413      	add	r3, r2
 8002ae6:	edd3 7a00 	vldr	s15, [r3]
 8002aea:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8002bb8 <_ZN9LineTrace15getSensorValuesEv+0x220>
 8002aee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002af2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002af6:	db09      	blt.n	8002b0c <_ZN9LineTrace15getSensorValuesEv+0x174>
 8002af8:	89fb      	ldrh	r3, [r7, #14]
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	3320      	adds	r3, #32
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	4413      	add	r3, r2
 8002b02:	3304      	adds	r3, #4
 8002b04:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002b08:	601a      	str	r2, [r3, #0]
 8002b0a:	e008      	b.n	8002b1e <_ZN9LineTrace15getSensorValuesEv+0x186>
		else sensor_digital_values_[i] = 0;
 8002b0c:	89fb      	ldrh	r3, [r7, #14]
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	3320      	adds	r3, #32
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	4413      	add	r3, r2
 8002b16:	3304      	adds	r3, #4
 8002b18:	f04f 0200 	mov.w	r2, #0
 8002b1c:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < 12; i++){
 8002b1e:	89fb      	ldrh	r3, [r7, #14]
 8002b20:	3301      	adds	r3, #1
 8002b22:	81fb      	strh	r3, [r7, #14]
 8002b24:	e7d7      	b.n	8002ad6 <_ZN9LineTrace15getSensorValuesEv+0x13e>
	}

	mon_sens0 = sensor_digital_values_[0];
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b2c:	4a23      	ldr	r2, [pc, #140]	; (8002bbc <_ZN9LineTrace15getSensorValuesEv+0x224>)
 8002b2e:	6013      	str	r3, [r2, #0]
	mon_sens1 = sensor_digital_values_[1];
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b36:	4a22      	ldr	r2, [pc, #136]	; (8002bc0 <_ZN9LineTrace15getSensorValuesEv+0x228>)
 8002b38:	6013      	str	r3, [r2, #0]
	mon_sens2 = sensor_digital_values_[2];
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b40:	4a20      	ldr	r2, [pc, #128]	; (8002bc4 <_ZN9LineTrace15getSensorValuesEv+0x22c>)
 8002b42:	6013      	str	r3, [r2, #0]
	mon_sens3 = sensor_digital_values_[3];
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b4a:	4a1f      	ldr	r2, [pc, #124]	; (8002bc8 <_ZN9LineTrace15getSensorValuesEv+0x230>)
 8002b4c:	6013      	str	r3, [r2, #0]
	mon_sens4 = sensor_digital_values_[4];
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b54:	4a1d      	ldr	r2, [pc, #116]	; (8002bcc <_ZN9LineTrace15getSensorValuesEv+0x234>)
 8002b56:	6013      	str	r3, [r2, #0]
	mon_sens5 = sensor_digital_values_[5];
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b5e:	4a1c      	ldr	r2, [pc, #112]	; (8002bd0 <_ZN9LineTrace15getSensorValuesEv+0x238>)
 8002b60:	6013      	str	r3, [r2, #0]
	mon_sens6 = sensor_digital_values_[6];
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b68:	4a1a      	ldr	r2, [pc, #104]	; (8002bd4 <_ZN9LineTrace15getSensorValuesEv+0x23c>)
 8002b6a:	6013      	str	r3, [r2, #0]
	mon_sens7 = sensor_digital_values_[7];
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002b72:	4a19      	ldr	r2, [pc, #100]	; (8002bd8 <_ZN9LineTrace15getSensorValuesEv+0x240>)
 8002b74:	6013      	str	r3, [r2, #0]
	mon_sens8 = sensor_digital_values_[8];
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002b7c:	4a17      	ldr	r2, [pc, #92]	; (8002bdc <_ZN9LineTrace15getSensorValuesEv+0x244>)
 8002b7e:	6013      	str	r3, [r2, #0]
	mon_sens9 = sensor_digital_values_[9];
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002b86:	4a16      	ldr	r2, [pc, #88]	; (8002be0 <_ZN9LineTrace15getSensorValuesEv+0x248>)
 8002b88:	6013      	str	r3, [r2, #0]
	mon_sens10 = sensor_digital_values_[10];
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002b90:	4a14      	ldr	r2, [pc, #80]	; (8002be4 <_ZN9LineTrace15getSensorValuesEv+0x24c>)
 8002b92:	6013      	str	r3, [r2, #0]
	mon_sens11 = sensor_digital_values_[11];
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002b9a:	4a13      	ldr	r2, [pc, #76]	; (8002be8 <_ZN9LineTrace15getSensorValuesEv+0x250>)
 8002b9c:	6013      	str	r3, [r2, #0]
	mon_sens12 = sensor_digital_values_[12];
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002ba4:	4a11      	ldr	r2, [pc, #68]	; (8002bec <_ZN9LineTrace15getSensorValuesEv+0x254>)
 8002ba6:	6013      	str	r3, [r2, #0]
}
 8002ba8:	bf00      	nop
 8002baa:	3714      	adds	r7, #20
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr
 8002bb4:	447a0000 	.word	0x447a0000
 8002bb8:	43fa0000 	.word	0x43fa0000
 8002bbc:	20000260 	.word	0x20000260
 8002bc0:	20000264 	.word	0x20000264
 8002bc4:	20000268 	.word	0x20000268
 8002bc8:	2000026c 	.word	0x2000026c
 8002bcc:	20000270 	.word	0x20000270
 8002bd0:	20000274 	.word	0x20000274
 8002bd4:	20000278 	.word	0x20000278
 8002bd8:	2000027c 	.word	0x2000027c
 8002bdc:	20000280 	.word	0x20000280
 8002be0:	20000284 	.word	0x20000284
 8002be4:	20000288 	.word	0x20000288
 8002be8:	2000028c 	.word	0x2000028c
 8002bec:	20000290 	.word	0x20000290

08002bf0 <_ZN9LineTrace18steeringAngleTraceEv>:
	pre_diff = diff;

}

void LineTrace::steeringAngleTrace()
{
 8002bf0:	b590      	push	{r4, r7, lr}
 8002bf2:	b087      	sub	sp, #28
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
	float steering_angle = calcAngle();
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f7ff fe59 	bl	80028b0 <_ZN9LineTrace9calcAngleEv>
 8002bfe:	ed87 0a03 	vstr	s0, [r7, #12]

	float r = 0;
 8002c02:	f04f 0300 	mov.w	r3, #0
 8002c06:	617b      	str	r3, [r7, #20]
	float current_velocity = velocity_ctrl_->getCurrentVelocity();
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f002 ffa7 	bl	8005b60 <_ZN12VelocityCtrl18getCurrentVelocityEv>
 8002c12:	ed87 0a02 	vstr	s0, [r7, #8]
	//float current_velocity = 0.1;
	float target_omega = 0;
 8002c16:	f04f 0300 	mov.w	r3, #0
 8002c1a:	613b      	str	r3, [r7, #16]

	if(steering_angle != 0){
 8002c1c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c20:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002c24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c28:	d022      	beq.n	8002c70 <_ZN9LineTrace18steeringAngleTraceEv+0x80>
		r = CENTER_OF_ROTATION_TO_CENTER_OF_SENSOR / tan(steering_angle);
 8002c2a:	68f8      	ldr	r0, [r7, #12]
 8002c2c:	f7fd fca4 	bl	8000578 <__aeabi_f2d>
 8002c30:	4603      	mov	r3, r0
 8002c32:	460c      	mov	r4, r1
 8002c34:	ec44 3b10 	vmov	d0, r3, r4
 8002c38:	f011 fc3a 	bl	80144b0 <tan>
 8002c3c:	ec54 3b10 	vmov	r3, r4, d0
 8002c40:	461a      	mov	r2, r3
 8002c42:	4623      	mov	r3, r4
 8002c44:	a11a      	add	r1, pc, #104	; (adr r1, 8002cb0 <_ZN9LineTrace18steeringAngleTraceEv+0xc0>)
 8002c46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002c4a:	f7fd fe17 	bl	800087c <__aeabi_ddiv>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	460c      	mov	r4, r1
 8002c52:	4618      	mov	r0, r3
 8002c54:	4621      	mov	r1, r4
 8002c56:	f7fd ffdf 	bl	8000c18 <__aeabi_d2f>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	617b      	str	r3, [r7, #20]
		target_omega = current_velocity / r;
 8002c5e:	edd7 6a02 	vldr	s13, [r7, #8]
 8002c62:	ed97 7a05 	vldr	s14, [r7, #20]
 8002c66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c6a:	edc7 7a04 	vstr	s15, [r7, #16]
 8002c6e:	e002      	b.n	8002c76 <_ZN9LineTrace18steeringAngleTraceEv+0x86>
	}
	else target_omega = 0;
 8002c70:	f04f 0300 	mov.w	r3, #0
 8002c74:	613b      	str	r3, [r7, #16]

	velocity_ctrl_->setVelocity(target_velocity_, target_omega);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	689a      	ldr	r2, [r3, #8]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 8002c80:	edd7 0a04 	vldr	s1, [r7, #16]
 8002c84:	eeb0 0a67 	vmov.f32	s0, s15
 8002c88:	4610      	mov	r0, r2
 8002c8a:	f002 fecd 	bl	8005a28 <_ZN12VelocityCtrl11setVelocityEff>

	monitor_target_omega = target_omega;
 8002c8e:	4a06      	ldr	r2, [pc, #24]	; (8002ca8 <_ZN9LineTrace18steeringAngleTraceEv+0xb8>)
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	6013      	str	r3, [r2, #0]
	monitor_r = r;
 8002c94:	4a05      	ldr	r2, [pc, #20]	; (8002cac <_ZN9LineTrace18steeringAngleTraceEv+0xbc>)
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	6013      	str	r3, [r2, #0]
}
 8002c9a:	bf00      	nop
 8002c9c:	371c      	adds	r7, #28
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd90      	pop	{r4, r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	f3af 8000 	nop.w
 8002ca8:	20000294 	.word	0x20000294
 8002cac:	20000298 	.word	0x20000298
 8002cb0:	eb851eb8 	.word	0xeb851eb8
 8002cb4:	3f9eb851 	.word	0x3f9eb851

08002cb8 <_ZN9LineTrace11loggerStartEv>:

void LineTrace::loggerStart()
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
	encoder_->clearDistance10mm();
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	695b      	ldr	r3, [r3, #20]
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7fe fbef 	bl	80014a8 <_ZN7Encoder17clearDistance10mmEv>
	odometry_->clearPotition();
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	699b      	ldr	r3, [r3, #24]
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f002 f97f 	bl	8004fd2 <_ZN8Odometry13clearPotitionEv>
	logger_->resetLogs2();
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	69db      	ldr	r3, [r3, #28]
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f001 feb0 	bl	8004a3e <_ZN6Logger10resetLogs2Ev>

	logging_flag_ = true;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
}
 8002ce6:	bf00      	nop
 8002ce8:	3708      	adds	r7, #8
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}

08002cee <_ZN9LineTrace10loggerStopEv>:

void LineTrace::loggerStop()
{
 8002cee:	b580      	push	{r7, lr}
 8002cf0:	b082      	sub	sp, #8
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
	logger_->stop();
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	69db      	ldr	r3, [r3, #28]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f001 ff15 	bl	8004b2a <_ZN6Logger4stopEv>
	logging_flag_ = false;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
}
 8002d08:	bf00      	nop
 8002d0a:	3708      	adds	r7, #8
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <_ZN9LineTrace11isCrossLineEv>:

bool LineTrace::isCrossLine()
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
	static uint16_t cnt = 0;
	float sensor_edge_val_l = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2]) / 3;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8002d28:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8002d34:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d38:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002d3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d40:	edc7 7a03 	vstr	s15, [r7, #12]
	float sensor_edge_val_r = (line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]) / 3;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	ed93 7abb 	vldr	s14, [r3, #748]	; 0x2ec
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 8002d54:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 8002d60:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d64:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002d68:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d6c:	edc7 7a02 	vstr	s15, [r7, #8]
	static bool flag = false;
	static bool white_flag = false;
	mon_ave_l = sensor_edge_val_l;
 8002d70:	4a40      	ldr	r2, [pc, #256]	; (8002e74 <_ZN9LineTrace11isCrossLineEv+0x164>)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6013      	str	r3, [r2, #0]
	mon_ave_r = sensor_edge_val_r;
 8002d76:	4a40      	ldr	r2, [pc, #256]	; (8002e78 <_ZN9LineTrace11isCrossLineEv+0x168>)
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	6013      	str	r3, [r2, #0]

	if(white_flag == false){
 8002d7c:	4b3f      	ldr	r3, [pc, #252]	; (8002e7c <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	f083 0301 	eor.w	r3, r3, #1
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d044      	beq.n	8002e14 <_ZN9LineTrace11isCrossLineEv+0x104>
		if(sensor_edge_val_l < 600 && sensor_edge_val_r < 600){
 8002d8a:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d8e:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8002e80 <_ZN9LineTrace11isCrossLineEv+0x170>
 8002d92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d9a:	d50f      	bpl.n	8002dbc <_ZN9LineTrace11isCrossLineEv+0xac>
 8002d9c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002da0:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8002e80 <_ZN9LineTrace11isCrossLineEv+0x170>
 8002da4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002da8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dac:	d506      	bpl.n	8002dbc <_ZN9LineTrace11isCrossLineEv+0xac>
			cnt++;
 8002dae:	4b35      	ldr	r3, [pc, #212]	; (8002e84 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002db0:	881b      	ldrh	r3, [r3, #0]
 8002db2:	3301      	adds	r3, #1
 8002db4:	b29a      	uxth	r2, r3
 8002db6:	4b33      	ldr	r3, [pc, #204]	; (8002e84 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002db8:	801a      	strh	r2, [r3, #0]
 8002dba:	e002      	b.n	8002dc2 <_ZN9LineTrace11isCrossLineEv+0xb2>
		}
		else{
			cnt = 0;
 8002dbc:	4b31      	ldr	r3, [pc, #196]	; (8002e84 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 3){
 8002dc2:	4b30      	ldr	r3, [pc, #192]	; (8002e84 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002dc4:	881b      	ldrh	r3, [r3, #0]
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d94d      	bls.n	8002e66 <_ZN9LineTrace11isCrossLineEv+0x156>
			flag = true;
 8002dca:	4b2f      	ldr	r3, [pc, #188]	; (8002e88 <_ZN9LineTrace11isCrossLineEv+0x178>)
 8002dcc:	2201      	movs	r2, #1
 8002dce:	701a      	strb	r2, [r3, #0]
			white_flag = true;
 8002dd0:	4b2a      	ldr	r3, [pc, #168]	; (8002e7c <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 8002dd6:	4b2b      	ldr	r3, [pc, #172]	; (8002e84 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	801a      	strh	r2, [r3, #0]

			stable_cnt_reset_flag_ = true; //Because the conditions do not differ between when you tremble and when you do not tremble
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002de2:	3334      	adds	r3, #52	; 0x34
 8002de4:	2201      	movs	r2, #1
 8002de6:	701a      	strb	r2, [r3, #0]
			if(mode_selector_ == FIRST_RUNNING){
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002dee:	3358      	adds	r3, #88	; 0x58
 8002df0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d103      	bne.n	8002e00 <_ZN9LineTrace11isCrossLineEv+0xf0>
				storeCrossLineDistance();
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f001 fadf 	bl	80043bc <_ZN9LineTrace22storeCrossLineDistanceEv>
 8002dfe:	e032      	b.n	8002e66 <_ZN9LineTrace11isCrossLineEv+0x156>
			}
			else{
				correctionTotalDistanceFromCrossLine();
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f001 fb84 	bl	800450e <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv>
				correction_check_cnt_ = 0;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002e0c:	3348      	adds	r3, #72	; 0x48
 8002e0e:	2200      	movs	r2, #0
 8002e10:	801a      	strh	r2, [r3, #0]
 8002e12:	e028      	b.n	8002e66 <_ZN9LineTrace11isCrossLineEv+0x156>

			//led_.LR(-1, 1);
		}
	}
	else{
		if(sensor_edge_val_l > 500 && sensor_edge_val_r > 500){
 8002e14:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e18:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002e8c <_ZN9LineTrace11isCrossLineEv+0x17c>
 8002e1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e24:	dd0f      	ble.n	8002e46 <_ZN9LineTrace11isCrossLineEv+0x136>
 8002e26:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e2a:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8002e8c <_ZN9LineTrace11isCrossLineEv+0x17c>
 8002e2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e36:	dd06      	ble.n	8002e46 <_ZN9LineTrace11isCrossLineEv+0x136>
			cnt++;
 8002e38:	4b12      	ldr	r3, [pc, #72]	; (8002e84 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002e3a:	881b      	ldrh	r3, [r3, #0]
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	b29a      	uxth	r2, r3
 8002e40:	4b10      	ldr	r3, [pc, #64]	; (8002e84 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002e42:	801a      	strh	r2, [r3, #0]
 8002e44:	e002      	b.n	8002e4c <_ZN9LineTrace11isCrossLineEv+0x13c>
		}
		else{
			cnt = 0;
 8002e46:	4b0f      	ldr	r3, [pc, #60]	; (8002e84 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 10){
 8002e4c:	4b0d      	ldr	r3, [pc, #52]	; (8002e84 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002e4e:	881b      	ldrh	r3, [r3, #0]
 8002e50:	2b09      	cmp	r3, #9
 8002e52:	d908      	bls.n	8002e66 <_ZN9LineTrace11isCrossLineEv+0x156>
			flag = false;
 8002e54:	4b0c      	ldr	r3, [pc, #48]	; (8002e88 <_ZN9LineTrace11isCrossLineEv+0x178>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	701a      	strb	r2, [r3, #0]
			white_flag = false;
 8002e5a:	4b08      	ldr	r3, [pc, #32]	; (8002e7c <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 8002e60:	4b08      	ldr	r3, [pc, #32]	; (8002e84 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	801a      	strh	r2, [r3, #0]
			//led_.LR(-1, 0);
		}

	}

	return flag;
 8002e66:	4b08      	ldr	r3, [pc, #32]	; (8002e88 <_ZN9LineTrace11isCrossLineEv+0x178>)
 8002e68:	781b      	ldrb	r3, [r3, #0]
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3710      	adds	r7, #16
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	200002a0 	.word	0x200002a0
 8002e78:	200002a4 	.word	0x200002a4
 8002e7c:	200002bb 	.word	0x200002bb
 8002e80:	44160000 	.word	0x44160000
 8002e84:	200002b8 	.word	0x200002b8
 8002e88:	200002ba 	.word	0x200002ba
 8002e8c:	43fa0000 	.word	0x43fa0000

08002e90 <_ZN9LineTrace15radius2VelocityEf>:
	if(theta == 0) theta = 0.000001;
	return distance / theta;
}

float LineTrace::radius2Velocity(float radius)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b085      	sub	sp, #20
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	ed87 0a00 	vstr	s0, [r7]
	float velocity;

	if(mode_selector_ == SECOND_RUNNING){
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002ea2:	3358      	adds	r3, #88	; 0x58
 8002ea4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d143      	bne.n	8002f34 <_ZN9LineTrace15radius2VelocityEf+0xa4>
		if(radius < 300) velocity = min_velocity_;
 8002eac:	edd7 7a00 	vldr	s15, [r7]
 8002eb0:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8002fcc <_ZN9LineTrace15radius2VelocityEf+0x13c>
 8002eb4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002eb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ebc:	d504      	bpl.n	8002ec8 <_ZN9LineTrace15radius2VelocityEf+0x38>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002ec4:	60fb      	str	r3, [r7, #12]
 8002ec6:	e076      	b.n	8002fb6 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 800) velocity = 1.7;
 8002ec8:	edd7 7a00 	vldr	s15, [r7]
 8002ecc:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8002fd0 <_ZN9LineTrace15radius2VelocityEf+0x140>
 8002ed0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ed8:	d502      	bpl.n	8002ee0 <_ZN9LineTrace15radius2VelocityEf+0x50>
 8002eda:	4b3e      	ldr	r3, [pc, #248]	; (8002fd4 <_ZN9LineTrace15radius2VelocityEf+0x144>)
 8002edc:	60fb      	str	r3, [r7, #12]
 8002ede:	e06a      	b.n	8002fb6 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 1000) velocity = 2.0;
 8002ee0:	edd7 7a00 	vldr	s15, [r7]
 8002ee4:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8002fd8 <_ZN9LineTrace15radius2VelocityEf+0x148>
 8002ee8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ef0:	d503      	bpl.n	8002efa <_ZN9LineTrace15radius2VelocityEf+0x6a>
 8002ef2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002ef6:	60fb      	str	r3, [r7, #12]
 8002ef8:	e05d      	b.n	8002fb6 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 1500) velocity = 2.3;
 8002efa:	edd7 7a00 	vldr	s15, [r7]
 8002efe:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8002fdc <_ZN9LineTrace15radius2VelocityEf+0x14c>
 8002f02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f0a:	d502      	bpl.n	8002f12 <_ZN9LineTrace15radius2VelocityEf+0x82>
 8002f0c:	4b34      	ldr	r3, [pc, #208]	; (8002fe0 <_ZN9LineTrace15radius2VelocityEf+0x150>)
 8002f0e:	60fb      	str	r3, [r7, #12]
 8002f10:	e051      	b.n	8002fb6 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 2000) velocity = 2.5;
 8002f12:	edd7 7a00 	vldr	s15, [r7]
 8002f16:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8002fe4 <_ZN9LineTrace15radius2VelocityEf+0x154>
 8002f1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f22:	d502      	bpl.n	8002f2a <_ZN9LineTrace15radius2VelocityEf+0x9a>
 8002f24:	4b30      	ldr	r3, [pc, #192]	; (8002fe8 <_ZN9LineTrace15radius2VelocityEf+0x158>)
 8002f26:	60fb      	str	r3, [r7, #12]
 8002f28:	e045      	b.n	8002fb6 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else velocity = max_velocity_;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002f30:	60fb      	str	r3, [r7, #12]
 8002f32:	e040      	b.n	8002fb6 <_ZN9LineTrace15radius2VelocityEf+0x126>
	}

	else if(mode_selector_ == THIRD_RUNNING){
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002f3a:	3358      	adds	r3, #88	; 0x58
 8002f3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d136      	bne.n	8002fb2 <_ZN9LineTrace15radius2VelocityEf+0x122>
		if(radius < 300) velocity = min_velocity2_;
 8002f44:	edd7 7a00 	vldr	s15, [r7]
 8002f48:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8002fcc <_ZN9LineTrace15radius2VelocityEf+0x13c>
 8002f4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f54:	d504      	bpl.n	8002f60 <_ZN9LineTrace15radius2VelocityEf+0xd0>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8002f5c:	60fb      	str	r3, [r7, #12]
 8002f5e:	e02a      	b.n	8002fb6 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 1500) velocity = 2.1;
 8002f60:	edd7 7a00 	vldr	s15, [r7]
 8002f64:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8002fdc <_ZN9LineTrace15radius2VelocityEf+0x14c>
 8002f68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f70:	d502      	bpl.n	8002f78 <_ZN9LineTrace15radius2VelocityEf+0xe8>
 8002f72:	4b1e      	ldr	r3, [pc, #120]	; (8002fec <_ZN9LineTrace15radius2VelocityEf+0x15c>)
 8002f74:	60fb      	str	r3, [r7, #12]
 8002f76:	e01e      	b.n	8002fb6 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 2000) velocity = 2.5;
 8002f78:	edd7 7a00 	vldr	s15, [r7]
 8002f7c:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8002fe4 <_ZN9LineTrace15radius2VelocityEf+0x154>
 8002f80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f88:	d502      	bpl.n	8002f90 <_ZN9LineTrace15radius2VelocityEf+0x100>
 8002f8a:	4b17      	ldr	r3, [pc, #92]	; (8002fe8 <_ZN9LineTrace15radius2VelocityEf+0x158>)
 8002f8c:	60fb      	str	r3, [r7, #12]
 8002f8e:	e012      	b.n	8002fb6 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 2500) velocity = 3.0;
 8002f90:	edd7 7a00 	vldr	s15, [r7]
 8002f94:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002ff0 <_ZN9LineTrace15radius2VelocityEf+0x160>
 8002f98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fa0:	d502      	bpl.n	8002fa8 <_ZN9LineTrace15radius2VelocityEf+0x118>
 8002fa2:	4b14      	ldr	r3, [pc, #80]	; (8002ff4 <_ZN9LineTrace15radius2VelocityEf+0x164>)
 8002fa4:	60fb      	str	r3, [r7, #12]
 8002fa6:	e006      	b.n	8002fb6 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else velocity = max_velocity2_;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002fae:	60fb      	str	r3, [r7, #12]
 8002fb0:	e001      	b.n	8002fb6 <_ZN9LineTrace15radius2VelocityEf+0x126>
	}
	else velocity = 1.3;
 8002fb2:	4b11      	ldr	r3, [pc, #68]	; (8002ff8 <_ZN9LineTrace15radius2VelocityEf+0x168>)
 8002fb4:	60fb      	str	r3, [r7, #12]

	return velocity;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	ee07 3a90 	vmov	s15, r3
}
 8002fbc:	eeb0 0a67 	vmov.f32	s0, s15
 8002fc0:	3714      	adds	r7, #20
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	43960000 	.word	0x43960000
 8002fd0:	44480000 	.word	0x44480000
 8002fd4:	3fd9999a 	.word	0x3fd9999a
 8002fd8:	447a0000 	.word	0x447a0000
 8002fdc:	44bb8000 	.word	0x44bb8000
 8002fe0:	40133333 	.word	0x40133333
 8002fe4:	44fa0000 	.word	0x44fa0000
 8002fe8:	40200000 	.word	0x40200000
 8002fec:	40066666 	.word	0x40066666
 8002ff0:	451c4000 	.word	0x451c4000
 8002ff4:	40400000 	.word	0x40400000
 8002ff8:	3fa66666 	.word	0x3fa66666

08002ffc <_ZN9LineTrace20createVelocityTabeleEv>:

	return a * exp(b * radius) + c * exp(d * radius);
}

void LineTrace::createVelocityTabele()
{
 8002ffc:	b590      	push	{r4, r7, lr}
 8002ffe:	b08b      	sub	sp, #44	; 0x2c
 8003000:	af02      	add	r7, sp, #8
 8003002:	6078      	str	r0, [r7, #4]
	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	69db      	ldr	r3, [r3, #28]
 8003008:	4618      	mov	r0, r3
 800300a:	f001 fc8a 	bl	8004922 <_ZN6Logger23getDistanceArrayPointerEv>
 800300e:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	69db      	ldr	r3, [r3, #28]
 8003014:	4618      	mov	r0, r3
 8003016:	f001 fc90 	bl	800493a <_ZN6Logger20getThetaArrayPointerEv>
 800301a:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 800301c:	2300      	movs	r3, #0
 800301e:	837b      	strh	r3, [r7, #26]
 8003020:	8b7b      	ldrh	r3, [r7, #26]
 8003022:	f241 726f 	movw	r2, #5999	; 0x176f
 8003026:	4293      	cmp	r3, r2
 8003028:	d84b      	bhi.n	80030c2 <_ZN9LineTrace20createVelocityTabeleEv+0xc6>
		temp_distance = p_distance[i];
 800302a:	8b7b      	ldrh	r3, [r7, #26]
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	693a      	ldr	r2, [r7, #16]
 8003030:	4413      	add	r3, r2
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 8003036:	8b7b      	ldrh	r3, [r7, #26]
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	68fa      	ldr	r2, [r7, #12]
 800303c:	4413      	add	r3, r2
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 8003042:	edd7 7a07 	vldr	s15, [r7, #28]
 8003046:	eef5 7a40 	vcmp.f32	s15, #0.0
 800304a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800304e:	d101      	bne.n	8003054 <_ZN9LineTrace20createVelocityTabeleEv+0x58>
 8003050:	4b4c      	ldr	r3, [pc, #304]	; (8003184 <_ZN9LineTrace20createVelocityTabeleEv+0x188>)
 8003052:	61fb      	str	r3, [r7, #28]
		float radius = abs(temp_distance / temp_theta);
 8003054:	ed97 7a02 	vldr	s14, [r7, #8]
 8003058:	edd7 7a07 	vldr	s15, [r7, #28]
 800305c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003060:	eeb0 0a66 	vmov.f32	s0, s13
 8003064:	f7ff fae8 	bl	8002638 <_ZSt3absf>
 8003068:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius >= 5000) radius = 5000;
 800306c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003070:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8003188 <_ZN9LineTrace20createVelocityTabeleEv+0x18c>
 8003074:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800307c:	db01      	blt.n	8003082 <_ZN9LineTrace20createVelocityTabeleEv+0x86>
 800307e:	4b43      	ldr	r3, [pc, #268]	; (800318c <_ZN9LineTrace20createVelocityTabeleEv+0x190>)
 8003080:	617b      	str	r3, [r7, #20]

		velocity_table_[i] = radius2Velocity(radius);
 8003082:	8b7c      	ldrh	r4, [r7, #26]
 8003084:	ed97 0a05 	vldr	s0, [r7, #20]
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f7ff ff01 	bl	8002e90 <_ZN9LineTrace15radius2VelocityEf>
 800308e:	eef0 7a40 	vmov.f32	s15, s0
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 8003098:	3304      	adds	r3, #4
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	4413      	add	r3, r2
 800309e:	3304      	adds	r3, #4
 80030a0:	edc3 7a00 	vstr	s15, [r3]

		ref_delta_distances_[i] = p_distance[i]; //copy
 80030a4:	8b7b      	ldrh	r3, [r7, #26]
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	693a      	ldr	r2, [r7, #16]
 80030aa:	441a      	add	r2, r3
 80030ac:	8b7b      	ldrh	r3, [r7, #26]
 80030ae:	6812      	ldr	r2, [r2, #0]
 80030b0:	6879      	ldr	r1, [r7, #4]
 80030b2:	3334      	adds	r3, #52	; 0x34
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	440b      	add	r3, r1
 80030b8:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 80030ba:	8b7b      	ldrh	r3, [r7, #26]
 80030bc:	3301      	adds	r3, #1
 80030be:	837b      	strh	r3, [r7, #26]
 80030c0:	e7ae      	b.n	8003020 <_ZN9LineTrace20createVelocityTabeleEv+0x24>
	}


	if(mode_selector_ == SECOND_RUNNING){
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80030c8:	3358      	adds	r3, #88	; 0x58
 80030ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d120      	bne.n	8003114 <_ZN9LineTrace20createVelocityTabeleEv+0x118>
		velocity_table_[0] = min_velocity_;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80030de:	3314      	adds	r3, #20
 80030e0:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec_, p_distance);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80030e8:	333c      	adds	r3, #60	; 0x3c
 80030ea:	edd3 7a00 	vldr	s15, [r3]
 80030ee:	6939      	ldr	r1, [r7, #16]
 80030f0:	eeb0 0a67 	vmov.f32	s0, s15
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f000 f93f 	bl	8003378 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc_, p_distance);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003100:	3338      	adds	r3, #56	; 0x38
 8003102:	edd3 7a00 	vldr	s15, [r3]
 8003106:	6939      	ldr	r1, [r7, #16]
 8003108:	eeb0 0a67 	vmov.f32	s0, s15
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f000 f9db 	bl	80034c8 <_ZN9LineTrace20accelerateProcessingEfPKf>
 8003112:	e027      	b.n	8003164 <_ZN9LineTrace20createVelocityTabeleEv+0x168>
	}
	else if(mode_selector_ == THIRD_RUNNING){
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800311a:	3358      	adds	r3, #88	; 0x58
 800311c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003120:	2b02      	cmp	r3, #2
 8003122:	d11f      	bne.n	8003164 <_ZN9LineTrace20createVelocityTabeleEv+0x168>
		velocity_table_[0] = min_velocity2_;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8003130:	3314      	adds	r3, #20
 8003132:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec2_, p_distance);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 800313a:	3344      	adds	r3, #68	; 0x44
 800313c:	edd3 7a00 	vldr	s15, [r3]
 8003140:	6939      	ldr	r1, [r7, #16]
 8003142:	eeb0 0a67 	vmov.f32	s0, s15
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 f916 	bl	8003378 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc2_, p_distance);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003152:	3340      	adds	r3, #64	; 0x40
 8003154:	edd3 7a00 	vldr	s15, [r3]
 8003158:	6939      	ldr	r1, [r7, #16]
 800315a:	eeb0 0a67 	vmov.f32	s0, s15
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f000 f9b2 	bl	80034c8 <_ZN9LineTrace20accelerateProcessingEfPKf>
	}

	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 800316a:	3314      	adds	r3, #20
 800316c:	2200      	movs	r2, #0
 800316e:	9200      	str	r2, [sp, #0]
 8003170:	f241 7270 	movw	r2, #6000	; 0x1770
 8003174:	4906      	ldr	r1, [pc, #24]	; (8003190 <_ZN9LineTrace20createVelocityTabeleEv+0x194>)
 8003176:	4807      	ldr	r0, [pc, #28]	; (8003194 <_ZN9LineTrace20createVelocityTabeleEv+0x198>)
 8003178:	f7fe f9d0 	bl	800151c <sd_write_array_float>

}
 800317c:	bf00      	nop
 800317e:	3724      	adds	r7, #36	; 0x24
 8003180:	46bd      	mov	sp, r7
 8003182:	bd90      	pop	{r4, r7, pc}
 8003184:	3727c5ac 	.word	0x3727c5ac
 8003188:	459c4000 	.word	0x459c4000
 800318c:	459c4000 	.word	0x459c4000
 8003190:	08019d1c 	.word	0x08019d1c
 8003194:	08019d2c 	.word	0x08019d2c

08003198 <_ZN9LineTrace26createVelocityTabeleFromSDEv>:

//float mon_crossdis;
void LineTrace::createVelocityTabeleFromSD()
{
 8003198:	b590      	push	{r4, r7, lr}
 800319a:	b08b      	sub	sp, #44	; 0x2c
 800319c:	af02      	add	r7, sp, #8
 800319e:	6078      	str	r0, [r7, #4]
	logger_->importDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	69d8      	ldr	r0, [r3, #28]
 80031a4:	4b6b      	ldr	r3, [pc, #428]	; (8003354 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1bc>)
 80031a6:	4a6c      	ldr	r2, [pc, #432]	; (8003358 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c0>)
 80031a8:	496c      	ldr	r1, [pc, #432]	; (800335c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 80031aa:	f001 fc2b 	bl	8004a04 <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>
	sd_read_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80031b4:	335c      	adds	r3, #92	; 0x5c
 80031b6:	2264      	movs	r2, #100	; 0x64
 80031b8:	4969      	ldr	r1, [pc, #420]	; (8003360 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c8>)
 80031ba:	4868      	ldr	r0, [pc, #416]	; (800335c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 80031bc:	f7fe fa14 	bl	80015e8 <sd_read_array_float>
	sd_read_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f503 433d 	add.w	r3, r3, #48384	; 0xbd00
 80031c6:	33ec      	adds	r3, #236	; 0xec
 80031c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80031cc:	4965      	ldr	r1, [pc, #404]	; (8003364 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1cc>)
 80031ce:	4863      	ldr	r0, [pc, #396]	; (800335c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 80031d0:	f7fe fa0a 	bl	80015e8 <sd_read_array_float>

	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	69db      	ldr	r3, [r3, #28]
 80031d8:	4618      	mov	r0, r3
 80031da:	f001 fba2 	bl	8004922 <_ZN6Logger23getDistanceArrayPointerEv>
 80031de:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	69db      	ldr	r3, [r3, #28]
 80031e4:	4618      	mov	r0, r3
 80031e6:	f001 fba8 	bl	800493a <_ZN6Logger20getThetaArrayPointerEv>
 80031ea:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	//float pre_radius = 0;;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 80031ec:	2300      	movs	r3, #0
 80031ee:	837b      	strh	r3, [r7, #26]
 80031f0:	8b7b      	ldrh	r3, [r7, #26]
 80031f2:	f241 726f 	movw	r2, #5999	; 0x176f
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d84b      	bhi.n	8003292 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xfa>

		temp_distance = p_distance[i];
 80031fa:	8b7b      	ldrh	r3, [r7, #26]
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	693a      	ldr	r2, [r7, #16]
 8003200:	4413      	add	r3, r2
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 8003206:	8b7b      	ldrh	r3, [r7, #26]
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	68fa      	ldr	r2, [r7, #12]
 800320c:	4413      	add	r3, r2
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 8003212:	edd7 7a07 	vldr	s15, [r7, #28]
 8003216:	eef5 7a40 	vcmp.f32	s15, #0.0
 800321a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800321e:	d101      	bne.n	8003224 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x8c>
 8003220:	4b51      	ldr	r3, [pc, #324]	; (8003368 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d0>)
 8003222:	61fb      	str	r3, [r7, #28]
		float radius_origin = abs(temp_distance / temp_theta);
 8003224:	ed97 7a02 	vldr	s14, [r7, #8]
 8003228:	edd7 7a07 	vldr	s15, [r7, #28]
 800322c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003230:	eeb0 0a66 	vmov.f32	s0, s13
 8003234:	f7ff fa00 	bl	8002638 <_ZSt3absf>
 8003238:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius_origin >= 5000) radius_origin = 5000;
 800323c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003240:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800336c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d4>
 8003244:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800324c:	db01      	blt.n	8003252 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xba>
 800324e:	4b48      	ldr	r3, [pc, #288]	; (8003370 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d8>)
 8003250:	617b      	str	r3, [r7, #20]

		//float radius_lpf = ((R_RADIUS)*(radius_origin) + (1.0 - (R_RADIUS))* (pre_radius));
		//velocity_table_[i] = radius_lpf;
		velocity_table_[i] = radius2Velocity(radius_origin);
 8003252:	8b7c      	ldrh	r4, [r7, #26]
 8003254:	ed97 0a05 	vldr	s0, [r7, #20]
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f7ff fe19 	bl	8002e90 <_ZN9LineTrace15radius2VelocityEf>
 800325e:	eef0 7a40 	vmov.f32	s15, s0
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 8003268:	3304      	adds	r3, #4
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	4413      	add	r3, r2
 800326e:	3304      	adds	r3, #4
 8003270:	edc3 7a00 	vstr	s15, [r3]
		//pre_radius = radius_origin;

		ref_delta_distances_[i] = p_distance[i]; //copy
 8003274:	8b7b      	ldrh	r3, [r7, #26]
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	693a      	ldr	r2, [r7, #16]
 800327a:	441a      	add	r2, r3
 800327c:	8b7b      	ldrh	r3, [r7, #26]
 800327e:	6812      	ldr	r2, [r2, #0]
 8003280:	6879      	ldr	r1, [r7, #4]
 8003282:	3334      	adds	r3, #52	; 0x34
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	440b      	add	r3, r1
 8003288:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 800328a:	8b7b      	ldrh	r3, [r7, #26]
 800328c:	3301      	adds	r3, #1
 800328e:	837b      	strh	r3, [r7, #26]
 8003290:	e7ae      	b.n	80031f0 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x58>
	}

	if(mode_selector_ == SECOND_RUNNING){
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003298:	3358      	adds	r3, #88	; 0x58
 800329a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d120      	bne.n	80032e4 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x14c>
		velocity_table_[0] = min_velocity_;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80032ae:	3314      	adds	r3, #20
 80032b0:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec_, p_distance);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80032b8:	333c      	adds	r3, #60	; 0x3c
 80032ba:	edd3 7a00 	vldr	s15, [r3]
 80032be:	6939      	ldr	r1, [r7, #16]
 80032c0:	eeb0 0a67 	vmov.f32	s0, s15
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f000 f857 	bl	8003378 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc_, p_distance);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80032d0:	3338      	adds	r3, #56	; 0x38
 80032d2:	edd3 7a00 	vldr	s15, [r3]
 80032d6:	6939      	ldr	r1, [r7, #16]
 80032d8:	eeb0 0a67 	vmov.f32	s0, s15
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f000 f8f3 	bl	80034c8 <_ZN9LineTrace20accelerateProcessingEfPKf>
 80032e2:	e027      	b.n	8003334 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x19c>
	}
	else if(mode_selector_ == THIRD_RUNNING){
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80032ea:	3358      	adds	r3, #88	; 0x58
 80032ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d11f      	bne.n	8003334 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x19c>
		velocity_table_[0] = min_velocity2_;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8003300:	3314      	adds	r3, #20
 8003302:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec2_, p_distance);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 800330a:	3344      	adds	r3, #68	; 0x44
 800330c:	edd3 7a00 	vldr	s15, [r3]
 8003310:	6939      	ldr	r1, [r7, #16]
 8003312:	eeb0 0a67 	vmov.f32	s0, s15
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f000 f82e 	bl	8003378 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc2_, p_distance);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003322:	3340      	adds	r3, #64	; 0x40
 8003324:	edd3 7a00 	vldr	s15, [r3]
 8003328:	6939      	ldr	r1, [r7, #16]
 800332a:	eeb0 0a67 	vmov.f32	s0, s15
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 f8ca 	bl	80034c8 <_ZN9LineTrace20accelerateProcessingEfPKf>
	}


	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 800333a:	3314      	adds	r3, #20
 800333c:	2200      	movs	r2, #0
 800333e:	9200      	str	r2, [sp, #0]
 8003340:	f241 7270 	movw	r2, #6000	; 0x1770
 8003344:	490b      	ldr	r1, [pc, #44]	; (8003374 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1dc>)
 8003346:	4805      	ldr	r0, [pc, #20]	; (800335c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 8003348:	f7fe f8e8 	bl	800151c <sd_write_array_float>

}
 800334c:	bf00      	nop
 800334e:	3724      	adds	r7, #36	; 0x24
 8003350:	46bd      	mov	sp, r7
 8003352:	bd90      	pop	{r4, r7, pc}
 8003354:	08019d38 	.word	0x08019d38
 8003358:	08019d44 	.word	0x08019d44
 800335c:	08019d2c 	.word	0x08019d2c
 8003360:	08019d54 	.word	0x08019d54
 8003364:	08019d64 	.word	0x08019d64
 8003368:	3727c5ac 	.word	0x3727c5ac
 800336c:	459c4000 	.word	0x459c4000
 8003370:	459c4000 	.word	0x459c4000
 8003374:	08019d1c 	.word	0x08019d1c

08003378 <_ZN9LineTrace20decelerateProcessingEfPKf>:

void LineTrace::decelerateProcessing(const float am, const float *p_distance)
{
 8003378:	b5b0      	push	{r4, r5, r7, lr}
 800337a:	b088      	sub	sp, #32
 800337c:	af00      	add	r7, sp, #0
 800337e:	60f8      	str	r0, [r7, #12]
 8003380:	ed87 0a02 	vstr	s0, [r7, #8]
 8003384:	6079      	str	r1, [r7, #4]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 8003386:	f241 736f 	movw	r3, #5999	; 0x176f
 800338a:	83fb      	strh	r3, [r7, #30]
 800338c:	8bfb      	ldrh	r3, [r7, #30]
 800338e:	2b00      	cmp	r3, #0
 8003390:	f000 8091 	beq.w	80034b6 <_ZN9LineTrace20decelerateProcessingEfPKf+0x13e>
		float v_diff = velocity_table_[i-1] - velocity_table_[i];
 8003394:	8bfb      	ldrh	r3, [r7, #30]
 8003396:	3b01      	subs	r3, #1
 8003398:	68fa      	ldr	r2, [r7, #12]
 800339a:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 800339e:	3304      	adds	r3, #4
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	4413      	add	r3, r2
 80033a4:	3304      	adds	r3, #4
 80033a6:	ed93 7a00 	vldr	s14, [r3]
 80033aa:	8bfb      	ldrh	r3, [r7, #30]
 80033ac:	68fa      	ldr	r2, [r7, #12]
 80033ae:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80033b2:	3304      	adds	r3, #4
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	4413      	add	r3, r2
 80033b8:	3304      	adds	r3, #4
 80033ba:	edd3 7a00 	vldr	s15, [r3]
 80033be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033c2:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 80033c6:	edd7 7a06 	vldr	s15, [r7, #24]
 80033ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80033ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033d2:	dd6c      	ble.n	80034ae <_ZN9LineTrace20decelerateProcessingEfPKf+0x136>
			float t = p_distance[i]*1e-3 / v_diff;
 80033d4:	8bfb      	ldrh	r3, [r7, #30]
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	4413      	add	r3, r2
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4618      	mov	r0, r3
 80033e0:	f7fd f8ca 	bl	8000578 <__aeabi_f2d>
 80033e4:	a336      	add	r3, pc, #216	; (adr r3, 80034c0 <_ZN9LineTrace20decelerateProcessingEfPKf+0x148>)
 80033e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ea:	f7fd f91d 	bl	8000628 <__aeabi_dmul>
 80033ee:	4603      	mov	r3, r0
 80033f0:	460c      	mov	r4, r1
 80033f2:	4625      	mov	r5, r4
 80033f4:	461c      	mov	r4, r3
 80033f6:	69b8      	ldr	r0, [r7, #24]
 80033f8:	f7fd f8be 	bl	8000578 <__aeabi_f2d>
 80033fc:	4602      	mov	r2, r0
 80033fe:	460b      	mov	r3, r1
 8003400:	4620      	mov	r0, r4
 8003402:	4629      	mov	r1, r5
 8003404:	f7fd fa3a 	bl	800087c <__aeabi_ddiv>
 8003408:	4603      	mov	r3, r0
 800340a:	460c      	mov	r4, r1
 800340c:	4618      	mov	r0, r3
 800340e:	4621      	mov	r1, r4
 8003410:	f7fd fc02 	bl	8000c18 <__aeabi_d2f>
 8003414:	4603      	mov	r3, r0
 8003416:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 8003418:	edd7 6a06 	vldr	s13, [r7, #24]
 800341c:	ed97 7a05 	vldr	s14, [r7, #20]
 8003420:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003424:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 8003428:	ed97 7a04 	vldr	s14, [r7, #16]
 800342c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003430:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003438:	dd39      	ble.n	80034ae <_ZN9LineTrace20decelerateProcessingEfPKf+0x136>
				velocity_table_[i-1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 800343a:	8bfb      	ldrh	r3, [r7, #30]
 800343c:	68fa      	ldr	r2, [r7, #12]
 800343e:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003442:	3304      	adds	r3, #4
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	4413      	add	r3, r2
 8003448:	3304      	adds	r3, #4
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4618      	mov	r0, r3
 800344e:	f7fd f893 	bl	8000578 <__aeabi_f2d>
 8003452:	4604      	mov	r4, r0
 8003454:	460d      	mov	r5, r1
 8003456:	8bfb      	ldrh	r3, [r7, #30]
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	4413      	add	r3, r2
 800345e:	ed93 7a00 	vldr	s14, [r3]
 8003462:	edd7 7a02 	vldr	s15, [r7, #8]
 8003466:	ee67 7a27 	vmul.f32	s15, s14, s15
 800346a:	ee17 0a90 	vmov	r0, s15
 800346e:	f7fd f883 	bl	8000578 <__aeabi_f2d>
 8003472:	a313      	add	r3, pc, #76	; (adr r3, 80034c0 <_ZN9LineTrace20decelerateProcessingEfPKf+0x148>)
 8003474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003478:	f7fd f8d6 	bl	8000628 <__aeabi_dmul>
 800347c:	4602      	mov	r2, r0
 800347e:	460b      	mov	r3, r1
 8003480:	4620      	mov	r0, r4
 8003482:	4629      	mov	r1, r5
 8003484:	f7fc ff1a 	bl	80002bc <__adddf3>
 8003488:	4603      	mov	r3, r0
 800348a:	460c      	mov	r4, r1
 800348c:	4619      	mov	r1, r3
 800348e:	4622      	mov	r2, r4
 8003490:	8bfb      	ldrh	r3, [r7, #30]
 8003492:	1e5c      	subs	r4, r3, #1
 8003494:	4608      	mov	r0, r1
 8003496:	4611      	mov	r1, r2
 8003498:	f7fd fbbe 	bl	8000c18 <__aeabi_d2f>
 800349c:	4601      	mov	r1, r0
 800349e:	68fa      	ldr	r2, [r7, #12]
 80034a0:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 80034a4:	3304      	adds	r3, #4
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	4413      	add	r3, r2
 80034aa:	3304      	adds	r3, #4
 80034ac:	6019      	str	r1, [r3, #0]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 80034ae:	8bfb      	ldrh	r3, [r7, #30]
 80034b0:	3b01      	subs	r3, #1
 80034b2:	83fb      	strh	r3, [r7, #30]
 80034b4:	e76a      	b.n	800338c <_ZN9LineTrace20decelerateProcessingEfPKf+0x14>
			}

		}
	}

}
 80034b6:	bf00      	nop
 80034b8:	3720      	adds	r7, #32
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bdb0      	pop	{r4, r5, r7, pc}
 80034be:	bf00      	nop
 80034c0:	d2f1a9fc 	.word	0xd2f1a9fc
 80034c4:	3f50624d 	.word	0x3f50624d

080034c8 <_ZN9LineTrace20accelerateProcessingEfPKf>:

void LineTrace::accelerateProcessing(const float am, const float *p_distance)
{
 80034c8:	b5b0      	push	{r4, r5, r7, lr}
 80034ca:	b088      	sub	sp, #32
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	60f8      	str	r0, [r7, #12]
 80034d0:	ed87 0a02 	vstr	s0, [r7, #8]
 80034d4:	6079      	str	r1, [r7, #4]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 80034d6:	2300      	movs	r3, #0
 80034d8:	83fb      	strh	r3, [r7, #30]
 80034da:	8bfb      	ldrh	r3, [r7, #30]
 80034dc:	f241 726f 	movw	r2, #5999	; 0x176f
 80034e0:	4293      	cmp	r3, r2
 80034e2:	f200 8091 	bhi.w	8003608 <_ZN9LineTrace20accelerateProcessingEfPKf+0x140>
		float v_diff = velocity_table_[i+1] - velocity_table_[i];
 80034e6:	8bfb      	ldrh	r3, [r7, #30]
 80034e8:	3301      	adds	r3, #1
 80034ea:	68fa      	ldr	r2, [r7, #12]
 80034ec:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80034f0:	3304      	adds	r3, #4
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	4413      	add	r3, r2
 80034f6:	3304      	adds	r3, #4
 80034f8:	ed93 7a00 	vldr	s14, [r3]
 80034fc:	8bfb      	ldrh	r3, [r7, #30]
 80034fe:	68fa      	ldr	r2, [r7, #12]
 8003500:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003504:	3304      	adds	r3, #4
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	4413      	add	r3, r2
 800350a:	3304      	adds	r3, #4
 800350c:	edd3 7a00 	vldr	s15, [r3]
 8003510:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003514:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 8003518:	edd7 7a06 	vldr	s15, [r7, #24]
 800351c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003524:	dd6c      	ble.n	8003600 <_ZN9LineTrace20accelerateProcessingEfPKf+0x138>
			float t = p_distance[i]*1e-3 / v_diff;
 8003526:	8bfb      	ldrh	r3, [r7, #30]
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	4413      	add	r3, r2
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4618      	mov	r0, r3
 8003532:	f7fd f821 	bl	8000578 <__aeabi_f2d>
 8003536:	a336      	add	r3, pc, #216	; (adr r3, 8003610 <_ZN9LineTrace20accelerateProcessingEfPKf+0x148>)
 8003538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800353c:	f7fd f874 	bl	8000628 <__aeabi_dmul>
 8003540:	4603      	mov	r3, r0
 8003542:	460c      	mov	r4, r1
 8003544:	4625      	mov	r5, r4
 8003546:	461c      	mov	r4, r3
 8003548:	69b8      	ldr	r0, [r7, #24]
 800354a:	f7fd f815 	bl	8000578 <__aeabi_f2d>
 800354e:	4602      	mov	r2, r0
 8003550:	460b      	mov	r3, r1
 8003552:	4620      	mov	r0, r4
 8003554:	4629      	mov	r1, r5
 8003556:	f7fd f991 	bl	800087c <__aeabi_ddiv>
 800355a:	4603      	mov	r3, r0
 800355c:	460c      	mov	r4, r1
 800355e:	4618      	mov	r0, r3
 8003560:	4621      	mov	r1, r4
 8003562:	f7fd fb59 	bl	8000c18 <__aeabi_d2f>
 8003566:	4603      	mov	r3, r0
 8003568:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 800356a:	edd7 6a06 	vldr	s13, [r7, #24]
 800356e:	ed97 7a05 	vldr	s14, [r7, #20]
 8003572:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003576:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 800357a:	ed97 7a04 	vldr	s14, [r7, #16]
 800357e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003582:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800358a:	dd39      	ble.n	8003600 <_ZN9LineTrace20accelerateProcessingEfPKf+0x138>
				velocity_table_[i+1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 800358c:	8bfb      	ldrh	r3, [r7, #30]
 800358e:	68fa      	ldr	r2, [r7, #12]
 8003590:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003594:	3304      	adds	r3, #4
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	4413      	add	r3, r2
 800359a:	3304      	adds	r3, #4
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4618      	mov	r0, r3
 80035a0:	f7fc ffea 	bl	8000578 <__aeabi_f2d>
 80035a4:	4604      	mov	r4, r0
 80035a6:	460d      	mov	r5, r1
 80035a8:	8bfb      	ldrh	r3, [r7, #30]
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	4413      	add	r3, r2
 80035b0:	ed93 7a00 	vldr	s14, [r3]
 80035b4:	edd7 7a02 	vldr	s15, [r7, #8]
 80035b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035bc:	ee17 0a90 	vmov	r0, s15
 80035c0:	f7fc ffda 	bl	8000578 <__aeabi_f2d>
 80035c4:	a312      	add	r3, pc, #72	; (adr r3, 8003610 <_ZN9LineTrace20accelerateProcessingEfPKf+0x148>)
 80035c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ca:	f7fd f82d 	bl	8000628 <__aeabi_dmul>
 80035ce:	4602      	mov	r2, r0
 80035d0:	460b      	mov	r3, r1
 80035d2:	4620      	mov	r0, r4
 80035d4:	4629      	mov	r1, r5
 80035d6:	f7fc fe71 	bl	80002bc <__adddf3>
 80035da:	4603      	mov	r3, r0
 80035dc:	460c      	mov	r4, r1
 80035de:	4619      	mov	r1, r3
 80035e0:	4622      	mov	r2, r4
 80035e2:	8bfb      	ldrh	r3, [r7, #30]
 80035e4:	1c5c      	adds	r4, r3, #1
 80035e6:	4608      	mov	r0, r1
 80035e8:	4611      	mov	r1, r2
 80035ea:	f7fd fb15 	bl	8000c18 <__aeabi_d2f>
 80035ee:	4601      	mov	r1, r0
 80035f0:	68fa      	ldr	r2, [r7, #12]
 80035f2:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 80035f6:	3304      	adds	r3, #4
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	4413      	add	r3, r2
 80035fc:	3304      	adds	r3, #4
 80035fe:	6019      	str	r1, [r3, #0]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 8003600:	8bfb      	ldrh	r3, [r7, #30]
 8003602:	3301      	adds	r3, #1
 8003604:	83fb      	strh	r3, [r7, #30]
 8003606:	e768      	b.n	80034da <_ZN9LineTrace20accelerateProcessingEfPKf+0x12>
			}

		}
	}

}
 8003608:	bf00      	nop
 800360a:	3720      	adds	r7, #32
 800360c:	46bd      	mov	sp, r7
 800360e:	bdb0      	pop	{r4, r5, r7, pc}
 8003610:	d2f1a9fc 	.word	0xd2f1a9fc
 8003614:	3f50624d 	.word	0x3f50624d

08003618 <_ZN9LineTrace20updateTargetVelocityEv>:

void LineTrace::updateTargetVelocity()
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
	if(velocity_play_flag_ == true){
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003626:	3354      	adds	r3, #84	; 0x54
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	2b00      	cmp	r3, #0
 800362c:	f000 8087 	beq.w	800373e <_ZN9LineTrace20updateTargetVelocityEv+0x126>
		//if(encoder_->getTotalDistance() >= ref_distance_){
			while(encoder_->getTotalDistance() >= ref_distance_){
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	695b      	ldr	r3, [r3, #20]
 8003634:	4618      	mov	r0, r3
 8003636:	f7fd ff19 	bl	800146c <_ZN7Encoder16getTotalDistanceEv>
 800363a:	eeb0 7a40 	vmov.f32	s14, s0
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8003644:	3310      	adds	r3, #16
 8003646:	edd3 7a00 	vldr	s15, [r3]
 800364a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800364e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003652:	bfac      	ite	ge
 8003654:	2301      	movge	r3, #1
 8003656:	2300      	movlt	r3, #0
 8003658:	b2db      	uxtb	r3, r3
 800365a:	2b00      	cmp	r3, #0
 800365c:	d025      	beq.n	80036aa <_ZN9LineTrace20updateTargetVelocityEv+0x92>
				ref_distance_ += ref_delta_distances_[velocity_table_idx_];
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8003664:	3310      	adds	r3, #16
 8003666:	ed93 7a00 	vldr	s14, [r3]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003670:	3356      	adds	r3, #86	; 0x56
 8003672:	881b      	ldrh	r3, [r3, #0]
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	3334      	adds	r3, #52	; 0x34
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	4413      	add	r3, r2
 800367c:	edd3 7a00 	vldr	s15, [r3]
 8003680:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 800368a:	3310      	adds	r3, #16
 800368c:	edc3 7a00 	vstr	s15, [r3]
				velocity_table_idx_++;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003696:	3356      	adds	r3, #86	; 0x56
 8003698:	881b      	ldrh	r3, [r3, #0]
 800369a:	3301      	adds	r3, #1
 800369c:	b29a      	uxth	r2, r3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80036a4:	3356      	adds	r3, #86	; 0x56
 80036a6:	801a      	strh	r2, [r3, #0]
			while(encoder_->getTotalDistance() >= ref_distance_){
 80036a8:	e7c2      	b.n	8003630 <_ZN9LineTrace20updateTargetVelocityEv+0x18>
			}
		//}

		if(velocity_table_idx_ >= LOG_DATA_SIZE_DIS) velocity_table_idx_ = LOG_DATA_SIZE_DIS - 1;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80036b0:	3356      	adds	r3, #86	; 0x56
 80036b2:	881b      	ldrh	r3, [r3, #0]
 80036b4:	f241 726f 	movw	r2, #5999	; 0x176f
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d906      	bls.n	80036ca <_ZN9LineTrace20updateTargetVelocityEv+0xb2>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80036c2:	3356      	adds	r3, #86	; 0x56
 80036c4:	f241 726f 	movw	r2, #5999	; 0x176f
 80036c8:	801a      	strh	r2, [r3, #0]

		mon_ref_dis = ref_distance_;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80036d0:	3310      	adds	r3, #16
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a1c      	ldr	r2, [pc, #112]	; (8003748 <_ZN9LineTrace20updateTargetVelocityEv+0x130>)
 80036d6:	6013      	str	r3, [r2, #0]
		mon_current_dis = encoder_->getTotalDistance();
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	695b      	ldr	r3, [r3, #20]
 80036dc:	4618      	mov	r0, r3
 80036de:	f7fd fec5 	bl	800146c <_ZN7Encoder16getTotalDistanceEv>
 80036e2:	eef0 7a40 	vmov.f32	s15, s0
 80036e6:	4b19      	ldr	r3, [pc, #100]	; (800374c <_ZN9LineTrace20updateTargetVelocityEv+0x134>)
 80036e8:	edc3 7a00 	vstr	s15, [r3]
		mon_vel_idx = velocity_table_idx_;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80036f2:	3356      	adds	r3, #86	; 0x56
 80036f4:	881a      	ldrh	r2, [r3, #0]
 80036f6:	4b16      	ldr	r3, [pc, #88]	; (8003750 <_ZN9LineTrace20updateTargetVelocityEv+0x138>)
 80036f8:	801a      	strh	r2, [r3, #0]

		setTargetVelocity(velocity_table_[velocity_table_idx_]);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003700:	3356      	adds	r3, #86	; 0x56
 8003702:	881b      	ldrh	r3, [r3, #0]
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 800370a:	3304      	adds	r3, #4
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	4413      	add	r3, r2
 8003710:	3304      	adds	r3, #4
 8003712:	edd3 7a00 	vldr	s15, [r3]
 8003716:	eeb0 0a67 	vmov.f32	s0, s15
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f000 fa08 	bl	8003b30 <_ZN9LineTrace17setTargetVelocityEf>

		mon_tar_vel = velocity_table_[velocity_table_idx_];
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003726:	3356      	adds	r3, #86	; 0x56
 8003728:	881b      	ldrh	r3, [r3, #0]
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003730:	3304      	adds	r3, #4
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	4413      	add	r3, r2
 8003736:	3304      	adds	r3, #4
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a06      	ldr	r2, [pc, #24]	; (8003754 <_ZN9LineTrace20updateTargetVelocityEv+0x13c>)
 800373c:	6013      	str	r3, [r2, #0]

	}
}
 800373e:	bf00      	nop
 8003740:	3708      	adds	r7, #8
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	200002a8 	.word	0x200002a8
 800374c:	200002ac 	.word	0x200002ac
 8003750:	200002b0 	.word	0x200002b0
 8003754:	200002b4 	.word	0x200002b4

08003758 <_ZN9LineTrace8isStableEv>:

bool LineTrace::isStable()
{
 8003758:	b590      	push	{r4, r7, lr}
 800375a:	b087      	sub	sp, #28
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8003760:	2300      	movs	r3, #0
 8003762:	75fb      	strb	r3, [r7, #23]
	static uint16_t stable_cnt = 0;
	float temp_distance = encoder_->getDistance10mm();
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	695b      	ldr	r3, [r3, #20]
 8003768:	4618      	mov	r0, r3
 800376a:	f7fd fe70 	bl	800144e <_ZN7Encoder15getDistance10mmEv>
 800376e:	ed87 0a02 	vstr	s0, [r7, #8]
	float temp_theta = odometry_->getTheta();;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	699b      	ldr	r3, [r3, #24]
 8003776:	4618      	mov	r0, r3
 8003778:	f001 fc19 	bl	8004fae <_ZN8Odometry8getThetaEv>
 800377c:	ec54 3b10 	vmov	r3, r4, d0
 8003780:	4618      	mov	r0, r3
 8003782:	4621      	mov	r1, r4
 8003784:	f7fd fa48 	bl	8000c18 <__aeabi_d2f>
 8003788:	4603      	mov	r3, r0
 800378a:	613b      	str	r3, [r7, #16]

	if(temp_theta == 0) temp_theta = 0.00001;
 800378c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003790:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003798:	d101      	bne.n	800379e <_ZN9LineTrace8isStableEv+0x46>
 800379a:	4b23      	ldr	r3, [pc, #140]	; (8003828 <_ZN9LineTrace8isStableEv+0xd0>)
 800379c:	613b      	str	r3, [r7, #16]
	float radius = abs(temp_distance / temp_theta);
 800379e:	ed97 7a02 	vldr	s14, [r7, #8]
 80037a2:	edd7 7a04 	vldr	s15, [r7, #16]
 80037a6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80037aa:	eeb0 0a66 	vmov.f32	s0, s13
 80037ae:	f7fe ff43 	bl	8002638 <_ZSt3absf>
 80037b2:	ed87 0a03 	vstr	s0, [r7, #12]
	if(radius >= 5000) radius = 5000;
 80037b6:	edd7 7a03 	vldr	s15, [r7, #12]
 80037ba:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800382c <_ZN9LineTrace8isStableEv+0xd4>
 80037be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037c6:	db01      	blt.n	80037cc <_ZN9LineTrace8isStableEv+0x74>
 80037c8:	4b19      	ldr	r3, [pc, #100]	; (8003830 <_ZN9LineTrace8isStableEv+0xd8>)
 80037ca:	60fb      	str	r3, [r7, #12]

	if(stable_cnt_reset_flag_ == true){
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80037d2:	3334      	adds	r3, #52	; 0x34
 80037d4:	781b      	ldrb	r3, [r3, #0]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d008      	beq.n	80037ec <_ZN9LineTrace8isStableEv+0x94>
		stable_cnt = 0;
 80037da:	4b16      	ldr	r3, [pc, #88]	; (8003834 <_ZN9LineTrace8isStableEv+0xdc>)
 80037dc:	2200      	movs	r2, #0
 80037de:	801a      	strh	r2, [r3, #0]
		stable_cnt_reset_flag_ = false;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80037e6:	3334      	adds	r3, #52	; 0x34
 80037e8:	2200      	movs	r2, #0
 80037ea:	701a      	strb	r2, [r3, #0]
	}

	if(radius >= 2000){ //150
 80037ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80037f0:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8003838 <_ZN9LineTrace8isStableEv+0xe0>
 80037f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037fc:	db06      	blt.n	800380c <_ZN9LineTrace8isStableEv+0xb4>
		stable_cnt++;
 80037fe:	4b0d      	ldr	r3, [pc, #52]	; (8003834 <_ZN9LineTrace8isStableEv+0xdc>)
 8003800:	881b      	ldrh	r3, [r3, #0]
 8003802:	3301      	adds	r3, #1
 8003804:	b29a      	uxth	r2, r3
 8003806:	4b0b      	ldr	r3, [pc, #44]	; (8003834 <_ZN9LineTrace8isStableEv+0xdc>)
 8003808:	801a      	strh	r2, [r3, #0]
 800380a:	e002      	b.n	8003812 <_ZN9LineTrace8isStableEv+0xba>
	}
	else{
		stable_cnt = 0;
 800380c:	4b09      	ldr	r3, [pc, #36]	; (8003834 <_ZN9LineTrace8isStableEv+0xdc>)
 800380e:	2200      	movs	r2, #0
 8003810:	801a      	strh	r2, [r3, #0]
	}

	if(stable_cnt >= 23){ //230mm
 8003812:	4b08      	ldr	r3, [pc, #32]	; (8003834 <_ZN9LineTrace8isStableEv+0xdc>)
 8003814:	881b      	ldrh	r3, [r3, #0]
 8003816:	2b16      	cmp	r3, #22
 8003818:	d901      	bls.n	800381e <_ZN9LineTrace8isStableEv+0xc6>
		ret = true;
 800381a:	2301      	movs	r3, #1
 800381c:	75fb      	strb	r3, [r7, #23]
	}

	return ret;
 800381e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003820:	4618      	mov	r0, r3
 8003822:	371c      	adds	r7, #28
 8003824:	46bd      	mov	sp, r7
 8003826:	bd90      	pop	{r4, r7, pc}
 8003828:	3727c5ac 	.word	0x3727c5ac
 800382c:	459c4000 	.word	0x459c4000
 8003830:	459c4000 	.word	0x459c4000
 8003834:	200002bc 	.word	0x200002bc
 8003838:	44fa0000 	.word	0x44fa0000

0800383c <_ZN9LineTrace4initEv>:

// -------public---------- //
void LineTrace::init()
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b092      	sub	sp, #72	; 0x48
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
	float temp_kp, temp_ki, temp_kd;
	sd_read_array_float("PARAMS", "KP.TXT", 1, &temp_kp);
 8003844:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003848:	2201      	movs	r2, #1
 800384a:	4963      	ldr	r1, [pc, #396]	; (80039d8 <_ZN9LineTrace4initEv+0x19c>)
 800384c:	4863      	ldr	r0, [pc, #396]	; (80039dc <_ZN9LineTrace4initEv+0x1a0>)
 800384e:	f7fd fecb 	bl	80015e8 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KI.TXT", 1, &temp_ki);
 8003852:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003856:	2201      	movs	r2, #1
 8003858:	4961      	ldr	r1, [pc, #388]	; (80039e0 <_ZN9LineTrace4initEv+0x1a4>)
 800385a:	4860      	ldr	r0, [pc, #384]	; (80039dc <_ZN9LineTrace4initEv+0x1a0>)
 800385c:	f7fd fec4 	bl	80015e8 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KD.TXT", 1, &temp_kd);
 8003860:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003864:	2201      	movs	r2, #1
 8003866:	495f      	ldr	r1, [pc, #380]	; (80039e4 <_ZN9LineTrace4initEv+0x1a8>)
 8003868:	485c      	ldr	r0, [pc, #368]	; (80039dc <_ZN9LineTrace4initEv+0x1a0>)
 800386a:	f7fd febd 	bl	80015e8 <sd_read_array_float>
	setGain(temp_kp, temp_ki, temp_kd);
 800386e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003872:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8003876:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 800387a:	eeb0 1a66 	vmov.f32	s2, s13
 800387e:	eef0 0a47 	vmov.f32	s1, s14
 8003882:	eeb0 0a67 	vmov.f32	s0, s15
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f000 f8c6 	bl	8003a18 <_ZN9LineTrace7setGainEfff>

	float temp_kp_fast, temp_ki_fast, temp_kd_fast;
	sd_read_array_float("PARAMS", "KPFAST.TXT", 1, &temp_kp_fast);
 800388c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003890:	2201      	movs	r2, #1
 8003892:	4955      	ldr	r1, [pc, #340]	; (80039e8 <_ZN9LineTrace4initEv+0x1ac>)
 8003894:	4851      	ldr	r0, [pc, #324]	; (80039dc <_ZN9LineTrace4initEv+0x1a0>)
 8003896:	f7fd fea7 	bl	80015e8 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KIFAST.TXT", 1, &temp_ki_fast);
 800389a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800389e:	2201      	movs	r2, #1
 80038a0:	4952      	ldr	r1, [pc, #328]	; (80039ec <_ZN9LineTrace4initEv+0x1b0>)
 80038a2:	484e      	ldr	r0, [pc, #312]	; (80039dc <_ZN9LineTrace4initEv+0x1a0>)
 80038a4:	f7fd fea0 	bl	80015e8 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KDFAST.TXT", 1, &temp_kd_fast);
 80038a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80038ac:	2201      	movs	r2, #1
 80038ae:	4950      	ldr	r1, [pc, #320]	; (80039f0 <_ZN9LineTrace4initEv+0x1b4>)
 80038b0:	484a      	ldr	r0, [pc, #296]	; (80039dc <_ZN9LineTrace4initEv+0x1a0>)
 80038b2:	f7fd fe99 	bl	80015e8 <sd_read_array_float>
	setGainFast(temp_kp_fast, temp_ki_fast, temp_kd_fast);
 80038b6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80038ba:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80038be:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80038c2:	eeb0 1a66 	vmov.f32	s2, s13
 80038c6:	eef0 0a47 	vmov.f32	s1, s14
 80038ca:	eeb0 0a67 	vmov.f32	s0, s15
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 f8bb 	bl	8003a4a <_ZN9LineTrace11setGainFastEfff>

	float temp_velocity, temp_max_velocity, temp_max_velocity2, temp_min_velocity, temp_min_velocity2;
	sd_read_array_float("PARAMS", "TARVEL1.TXT", 1, &temp_velocity);
 80038d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038d8:	2201      	movs	r2, #1
 80038da:	4946      	ldr	r1, [pc, #280]	; (80039f4 <_ZN9LineTrace4initEv+0x1b8>)
 80038dc:	483f      	ldr	r0, [pc, #252]	; (80039dc <_ZN9LineTrace4initEv+0x1a0>)
 80038de:	f7fd fe83 	bl	80015e8 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL2.TXT", 1, &temp_max_velocity);
 80038e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80038e6:	2201      	movs	r2, #1
 80038e8:	4943      	ldr	r1, [pc, #268]	; (80039f8 <_ZN9LineTrace4initEv+0x1bc>)
 80038ea:	483c      	ldr	r0, [pc, #240]	; (80039dc <_ZN9LineTrace4initEv+0x1a0>)
 80038ec:	f7fd fe7c 	bl	80015e8 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL3.TXT", 1, &temp_max_velocity2);
 80038f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038f4:	2201      	movs	r2, #1
 80038f6:	4941      	ldr	r1, [pc, #260]	; (80039fc <_ZN9LineTrace4initEv+0x1c0>)
 80038f8:	4838      	ldr	r0, [pc, #224]	; (80039dc <_ZN9LineTrace4initEv+0x1a0>)
 80038fa:	f7fd fe75 	bl	80015e8 <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL.TXT", 1, &temp_min_velocity);
 80038fe:	f107 0320 	add.w	r3, r7, #32
 8003902:	2201      	movs	r2, #1
 8003904:	493e      	ldr	r1, [pc, #248]	; (8003a00 <_ZN9LineTrace4initEv+0x1c4>)
 8003906:	4835      	ldr	r0, [pc, #212]	; (80039dc <_ZN9LineTrace4initEv+0x1a0>)
 8003908:	f7fd fe6e 	bl	80015e8 <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL2.TXT", 1, &temp_min_velocity2);
 800390c:	f107 031c 	add.w	r3, r7, #28
 8003910:	2201      	movs	r2, #1
 8003912:	493c      	ldr	r1, [pc, #240]	; (8003a04 <_ZN9LineTrace4initEv+0x1c8>)
 8003914:	4831      	ldr	r0, [pc, #196]	; (80039dc <_ZN9LineTrace4initEv+0x1a0>)
 8003916:	f7fd fe67 	bl	80015e8 <sd_read_array_float>
	setTargetVelocity(temp_velocity);
 800391a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800391e:	eeb0 0a67 	vmov.f32	s0, s15
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 f904 	bl	8003b30 <_ZN9LineTrace17setTargetVelocityEf>
	setMaxVelocity(temp_max_velocity);
 8003928:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800392c:	eeb0 0a67 	vmov.f32	s0, s15
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f000 f90d 	bl	8003b50 <_ZN9LineTrace14setMaxVelocityEf>
	setMaxVelocity2(temp_max_velocity2);
 8003936:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800393a:	eeb0 0a67 	vmov.f32	s0, s15
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 f916 	bl	8003b70 <_ZN9LineTrace15setMaxVelocity2Ef>
	setMinVelocity(temp_min_velocity);
 8003944:	edd7 7a08 	vldr	s15, [r7, #32]
 8003948:	eeb0 0a67 	vmov.f32	s0, s15
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f000 f91f 	bl	8003b90 <_ZN9LineTrace14setMinVelocityEf>
	setMinVelocity2(temp_min_velocity2);
 8003952:	edd7 7a07 	vldr	s15, [r7, #28]
 8003956:	eeb0 0a67 	vmov.f32	s0, s15
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 f928 	bl	8003bb0 <_ZN9LineTrace15setMinVelocity2Ef>

	float temp_acc, temp_dec;
	sd_read_array_float("PARAMS", "ACC.TXT", 1, &temp_acc);
 8003960:	f107 0318 	add.w	r3, r7, #24
 8003964:	2201      	movs	r2, #1
 8003966:	4928      	ldr	r1, [pc, #160]	; (8003a08 <_ZN9LineTrace4initEv+0x1cc>)
 8003968:	481c      	ldr	r0, [pc, #112]	; (80039dc <_ZN9LineTrace4initEv+0x1a0>)
 800396a:	f7fd fe3d 	bl	80015e8 <sd_read_array_float>
	sd_read_array_float("PARAMS", "DEC.TXT", 1, &temp_dec);
 800396e:	f107 0314 	add.w	r3, r7, #20
 8003972:	2201      	movs	r2, #1
 8003974:	4925      	ldr	r1, [pc, #148]	; (8003a0c <_ZN9LineTrace4initEv+0x1d0>)
 8003976:	4819      	ldr	r0, [pc, #100]	; (80039dc <_ZN9LineTrace4initEv+0x1a0>)
 8003978:	f7fd fe36 	bl	80015e8 <sd_read_array_float>
	setMaxAccDec(temp_acc, temp_dec);
 800397c:	edd7 7a06 	vldr	s15, [r7, #24]
 8003980:	ed97 7a05 	vldr	s14, [r7, #20]
 8003984:	eef0 0a47 	vmov.f32	s1, s14
 8003988:	eeb0 0a67 	vmov.f32	s0, s15
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f000 f96f 	bl	8003c70 <_ZN9LineTrace12setMaxAccDecEff>

	float temp_acc2 = 0, temp_dec2 = 0;
 8003992:	f04f 0300 	mov.w	r3, #0
 8003996:	613b      	str	r3, [r7, #16]
 8003998:	f04f 0300 	mov.w	r3, #0
 800399c:	60fb      	str	r3, [r7, #12]
	sd_read_array_float("PARAMS", "ACC2.TXT", 1, &temp_acc2);
 800399e:	f107 0310 	add.w	r3, r7, #16
 80039a2:	2201      	movs	r2, #1
 80039a4:	491a      	ldr	r1, [pc, #104]	; (8003a10 <_ZN9LineTrace4initEv+0x1d4>)
 80039a6:	480d      	ldr	r0, [pc, #52]	; (80039dc <_ZN9LineTrace4initEv+0x1a0>)
 80039a8:	f7fd fe1e 	bl	80015e8 <sd_read_array_float>
	sd_read_array_float("PARAMS", "DEC2.TXT", 1, &temp_dec2);
 80039ac:	f107 030c 	add.w	r3, r7, #12
 80039b0:	2201      	movs	r2, #1
 80039b2:	4918      	ldr	r1, [pc, #96]	; (8003a14 <_ZN9LineTrace4initEv+0x1d8>)
 80039b4:	4809      	ldr	r0, [pc, #36]	; (80039dc <_ZN9LineTrace4initEv+0x1a0>)
 80039b6:	f7fd fe17 	bl	80015e8 <sd_read_array_float>
	setMaxAccDec2(temp_acc2, temp_dec2);
 80039ba:	edd7 7a04 	vldr	s15, [r7, #16]
 80039be:	ed97 7a03 	vldr	s14, [r7, #12]
 80039c2:	eef0 0a47 	vmov.f32	s1, s14
 80039c6:	eeb0 0a67 	vmov.f32	s0, s15
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f000 f96a 	bl	8003ca4 <_ZN9LineTrace13setMaxAccDec2Eff>
}
 80039d0:	bf00      	nop
 80039d2:	3748      	adds	r7, #72	; 0x48
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	08019d70 	.word	0x08019d70
 80039dc:	08019d78 	.word	0x08019d78
 80039e0:	08019d80 	.word	0x08019d80
 80039e4:	08019d88 	.word	0x08019d88
 80039e8:	08019d90 	.word	0x08019d90
 80039ec:	08019d9c 	.word	0x08019d9c
 80039f0:	08019da8 	.word	0x08019da8
 80039f4:	08019db4 	.word	0x08019db4
 80039f8:	08019dc0 	.word	0x08019dc0
 80039fc:	08019dcc 	.word	0x08019dcc
 8003a00:	08019dd8 	.word	0x08019dd8
 8003a04:	08019de4 	.word	0x08019de4
 8003a08:	08019df0 	.word	0x08019df0
 8003a0c:	08019df8 	.word	0x08019df8
 8003a10:	08019e00 	.word	0x08019e00
 8003a14:	08019e0c 	.word	0x08019e0c

08003a18 <_ZN9LineTrace7setGainEfff>:

void LineTrace::setGain(float kp, float ki, float kd)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b085      	sub	sp, #20
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	ed87 0a02 	vstr	s0, [r7, #8]
 8003a24:	edc7 0a01 	vstr	s1, [r7, #4]
 8003a28:	ed87 1a00 	vstr	s2, [r7]
	kp_ = kp;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	68ba      	ldr	r2, [r7, #8]
 8003a30:	625a      	str	r2, [r3, #36]	; 0x24
	ki_ = ki;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	62da      	str	r2, [r3, #44]	; 0x2c
	kd_ = kd;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	683a      	ldr	r2, [r7, #0]
 8003a3c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003a3e:	bf00      	nop
 8003a40:	3714      	adds	r7, #20
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr

08003a4a <_ZN9LineTrace11setGainFastEfff>:

void LineTrace::setGainFast(float kp, float ki, float kd)
{
 8003a4a:	b480      	push	{r7}
 8003a4c:	b085      	sub	sp, #20
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	60f8      	str	r0, [r7, #12]
 8003a52:	ed87 0a02 	vstr	s0, [r7, #8]
 8003a56:	edc7 0a01 	vstr	s1, [r7, #4]
 8003a5a:	ed87 1a00 	vstr	s2, [r7]
	kp_fast_ = kp;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	68ba      	ldr	r2, [r7, #8]
 8003a62:	631a      	str	r2, [r3, #48]	; 0x30
	ki_fast_ = ki;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	639a      	str	r2, [r3, #56]	; 0x38
	kd_fast_ = kd;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	683a      	ldr	r2, [r7, #0]
 8003a6e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003a70:	bf00      	nop
 8003a72:	3714      	adds	r7, #20
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr

08003a7c <_ZN9LineTrace5getKpEv>:
	ki_velo_ = ki;
	kd_velo_ = kd;
}

float LineTrace::getKp()
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
	return kp_;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a88:	ee07 3a90 	vmov	s15, r3
}
 8003a8c:	eeb0 0a67 	vmov.f32	s0, s15
 8003a90:	370c      	adds	r7, #12
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr

08003a9a <_ZN9LineTrace5getKiEv>:

float LineTrace::getKi()
{
 8003a9a:	b480      	push	{r7}
 8003a9c:	b083      	sub	sp, #12
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
	return ki_;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa6:	ee07 3a90 	vmov	s15, r3
}
 8003aaa:	eeb0 0a67 	vmov.f32	s0, s15
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <_ZN9LineTrace5getKdEv>:

float LineTrace::getKd()
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
	return kd_;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac4:	ee07 3a90 	vmov	s15, r3
}
 8003ac8:	eeb0 0a67 	vmov.f32	s0, s15
 8003acc:	370c      	adds	r7, #12
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr

08003ad6 <_ZN9LineTrace9getKpFastEv>:

float LineTrace::getKpFast()
{
 8003ad6:	b480      	push	{r7}
 8003ad8:	b083      	sub	sp, #12
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	6078      	str	r0, [r7, #4]
	return kp_fast_;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae2:	ee07 3a90 	vmov	s15, r3
}
 8003ae6:	eeb0 0a67 	vmov.f32	s0, s15
 8003aea:	370c      	adds	r7, #12
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr

08003af4 <_ZN9LineTrace9getKiFastEv>:

float LineTrace::getKiFast()
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
	return ki_fast_;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b00:	ee07 3a90 	vmov	s15, r3
}
 8003b04:	eeb0 0a67 	vmov.f32	s0, s15
 8003b08:	370c      	adds	r7, #12
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr

08003b12 <_ZN9LineTrace9getKdFastEv>:

float LineTrace::getKdFast()
{
 8003b12:	b480      	push	{r7}
 8003b14:	b083      	sub	sp, #12
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]
	return kd_fast_;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b1e:	ee07 3a90 	vmov	s15, r3
}
 8003b22:	eeb0 0a67 	vmov.f32	s0, s15
 8003b26:	370c      	adds	r7, #12
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr

08003b30 <_ZN9LineTrace17setTargetVelocityEf>:
{
	normal_ratio_ = ratio;
}

void LineTrace::setTargetVelocity(float velocity)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	ed87 0a00 	vstr	s0, [r7]
	target_velocity_ = velocity;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	683a      	ldr	r2, [r7, #0]
 8003b40:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
 8003b44:	bf00      	nop
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr

08003b50 <_ZN9LineTrace14setMaxVelocityEf>:

void LineTrace::setMaxVelocity(float velocity)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	ed87 0a00 	vstr	s0, [r7]
	max_velocity_ = velocity;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	683a      	ldr	r2, [r7, #0]
 8003b60:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
}
 8003b64:	bf00      	nop
 8003b66:	370c      	adds	r7, #12
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr

08003b70 <_ZN9LineTrace15setMaxVelocity2Ef>:

void LineTrace::setMaxVelocity2(float velocity)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	ed87 0a00 	vstr	s0, [r7]
	max_velocity2_ = velocity;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	683a      	ldr	r2, [r7, #0]
 8003b80:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8003b84:	bf00      	nop
 8003b86:	370c      	adds	r7, #12
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <_ZN9LineTrace14setMinVelocityEf>:

void LineTrace::setMinVelocity(float velocity)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	ed87 0a00 	vstr	s0, [r7]
	min_velocity_ = velocity;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	683a      	ldr	r2, [r7, #0]
 8003ba0:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
 8003ba4:	bf00      	nop
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <_ZN9LineTrace15setMinVelocity2Ef>:

void LineTrace::setMinVelocity2(float velocity)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	ed87 0a00 	vstr	s0, [r7]
	min_velocity2_ = velocity;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	683a      	ldr	r2, [r7, #0]
 8003bc0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 8003bc4:	bf00      	nop
 8003bc6:	370c      	adds	r7, #12
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <_ZN9LineTrace17getTargetVelocityEv>:
float LineTrace::getTargetVelocity()
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
	return target_velocity_;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003bde:	ee07 3a90 	vmov	s15, r3
}
 8003be2:	eeb0 0a67 	vmov.f32	s0, s15
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <_ZN9LineTrace14getMaxVelocityEv>:

float LineTrace::getMaxVelocity()
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
	return max_velocity_;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003bfe:	ee07 3a90 	vmov	s15, r3
}
 8003c02:	eeb0 0a67 	vmov.f32	s0, s15
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <_ZN9LineTrace15getMaxVelocity2Ev>:

float LineTrace::getMaxVelocity2()
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
	return max_velocity2_;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003c1e:	ee07 3a90 	vmov	s15, r3
}
 8003c22:	eeb0 0a67 	vmov.f32	s0, s15
 8003c26:	370c      	adds	r7, #12
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <_ZN9LineTrace14getMinVelocityEv>:

float LineTrace::getMinVelocity()
{
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
	return min_velocity_;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003c3e:	ee07 3a90 	vmov	s15, r3
}
 8003c42:	eeb0 0a67 	vmov.f32	s0, s15
 8003c46:	370c      	adds	r7, #12
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr

08003c50 <_ZN9LineTrace15getMinVelocity2Ev>:

float LineTrace::getMinVelocity2()
{
 8003c50:	b480      	push	{r7}
 8003c52:	b083      	sub	sp, #12
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
	return min_velocity2_;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8003c5e:	ee07 3a90 	vmov	s15, r3
}
 8003c62:	eeb0 0a67 	vmov.f32	s0, s15
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr

08003c70 <_ZN9LineTrace12setMaxAccDecEff>:
void LineTrace::setMaxAccDec(const float acc, const float dec)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b085      	sub	sp, #20
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	60f8      	str	r0, [r7, #12]
 8003c78:	ed87 0a02 	vstr	s0, [r7, #8]
 8003c7c:	edc7 0a01 	vstr	s1, [r7, #4]
	max_acc_ = acc;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003c86:	3338      	adds	r3, #56	; 0x38
 8003c88:	68ba      	ldr	r2, [r7, #8]
 8003c8a:	601a      	str	r2, [r3, #0]
	max_dec_ = dec;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003c92:	333c      	adds	r3, #60	; 0x3c
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	601a      	str	r2, [r3, #0]
}
 8003c98:	bf00      	nop
 8003c9a:	3714      	adds	r7, #20
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <_ZN9LineTrace13setMaxAccDec2Eff>:
void LineTrace::setMaxAccDec2(const float acc, const float dec)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b085      	sub	sp, #20
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	ed87 0a02 	vstr	s0, [r7, #8]
 8003cb0:	edc7 0a01 	vstr	s1, [r7, #4]
	max_acc2_ = acc;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003cba:	3340      	adds	r3, #64	; 0x40
 8003cbc:	68ba      	ldr	r2, [r7, #8]
 8003cbe:	601a      	str	r2, [r3, #0]
	max_dec2_ = dec;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003cc6:	3344      	adds	r3, #68	; 0x44
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	601a      	str	r2, [r3, #0]
}
 8003ccc:	bf00      	nop
 8003cce:	3714      	adds	r7, #20
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <_ZN9LineTrace9getMaxAccEv>:

float LineTrace::getMaxAcc()
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
	return max_acc_;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003ce6:	3338      	adds	r3, #56	; 0x38
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	ee07 3a90 	vmov	s15, r3
}
 8003cee:	eeb0 0a67 	vmov.f32	s0, s15
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <_ZN9LineTrace10getMaxDec2Ev>:

float LineTrace::getMaxDec2()
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
	return max_dec2_;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003d0a:	3344      	adds	r3, #68	; 0x44
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	ee07 3a90 	vmov	s15, r3
}
 8003d12:	eeb0 0a67 	vmov.f32	s0, s15
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <_ZN9LineTrace10getMaxAcc2Ev>:
float LineTrace::getMaxAcc2()
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
	return max_acc2_;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003d2e:	3340      	adds	r3, #64	; 0x40
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	ee07 3a90 	vmov	s15, r3
}
 8003d36:	eeb0 0a67 	vmov.f32	s0, s15
 8003d3a:	370c      	adds	r7, #12
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <_ZN9LineTrace9getMaxDecEv>:

float LineTrace::getMaxDec()
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
	return max_dec_;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003d52:	333c      	adds	r3, #60	; 0x3c
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	ee07 3a90 	vmov	s15, r3
}
 8003d5a:	eeb0 0a67 	vmov.f32	s0, s15
 8003d5e:	370c      	adds	r7, #12
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr

08003d68 <_ZN9LineTrace4flipEv>:
void LineTrace::flip()
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
	//calcAngle();

	if(excution_flag_ == true){
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	f000 8143 	beq.w	8004002 <_ZN9LineTrace4flipEv+0x29a>
		// ---- line following processing -----//
		//pidTrace();
		//pidAngularVelocityTrace();
		steeringAngleTrace();
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f7fe ff37 	bl	8002bf0 <_ZN9LineTrace18steeringAngleTraceEv>


		if(isTargetDistance(10) == true){
 8003d82:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f000 faf6 	bl	8004378 <_ZN9LineTrace16isTargetDistanceEf>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d028      	beq.n	8003de4 <_ZN9LineTrace4flipEv+0x7c>
			// ---- Store Logs ------//
			storeLogs();
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f000 fa54 	bl	8004240 <_ZN9LineTrace9storeLogsEv>

			// -------- Detect Robot stabilization ------//
#ifdef REVERSE
			if(isStable() == true && (~(side_sensor_->getStatus()) & 0x01) == 0x01){ // Stabilizing and side sensor is black
#else
			if(isStable() == true && (~(side_sensor_->getStatus()) & 0x02) == 0x02){ // Stabilizing and side sensor is black
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f7ff fcdd 	bl	8003758 <_ZN9LineTrace8isStableEv>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d00c      	beq.n	8003dbe <_ZN9LineTrace4flipEv+0x56>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	691b      	ldr	r3, [r3, #16]
 8003da8:	4618      	mov	r0, r3
 8003daa:	f001 fb9d 	bl	80054e8 <_ZN10SideSensor9getStatusEv>
 8003dae:	4603      	mov	r3, r0
 8003db0:	43db      	mvns	r3, r3
 8003db2:	f003 0302 	and.w	r3, r3, #2
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d101      	bne.n	8003dbe <_ZN9LineTrace4flipEv+0x56>
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e000      	b.n	8003dc0 <_ZN9LineTrace4flipEv+0x58>
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d005      	beq.n	8003dd0 <_ZN9LineTrace4flipEv+0x68>
#endif
				stable_flag_ = true;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003dca:	3333      	adds	r3, #51	; 0x33
 8003dcc:	2201      	movs	r2, #1
 8003dce:	701a      	strb	r2, [r3, #0]
			}

			// ---reset total cnt ---//
			encoder_->clearDistance10mm();
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	695b      	ldr	r3, [r3, #20]
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f7fd fb67 	bl	80014a8 <_ZN7Encoder17clearDistance10mmEv>
			odometry_->clearPotition();
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	699b      	ldr	r3, [r3, #24]
 8003dde:	4618      	mov	r0, r3
 8003de0:	f001 f8f7 	bl	8004fd2 <_ZN8Odometry13clearPotitionEv>
		}

		// ---- Target Velocity Updata ------//
		updateTargetVelocity();
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f7ff fc17 	bl	8003618 <_ZN9LineTrace20updateTargetVelocityEv>

		// ----- cross line ignore processing ------//
		if(isCrossLine() == true){ //detect cross line
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f7fe ff90 	bl	8002d10 <_ZN9LineTrace11isCrossLineEv>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d009      	beq.n	8003e0a <_ZN9LineTrace4flipEv+0xa2>
			side_sensor_->enableIgnore();
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f001 fb9c 	bl	8005538 <_ZN10SideSensor12enableIgnoreEv>
			encoder_->clearCrossLineIgnoreDistance();
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	695b      	ldr	r3, [r3, #20]
 8003e04:	4618      	mov	r0, r3
 8003e06:	f7fd fb7a 	bl	80014fe <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
		}

		if(side_sensor_->getIgnoreFlag() == true && encoder_->getCrossLineIgnoreDistance() >= 200){
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	691b      	ldr	r3, [r3, #16]
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f001 fbac 	bl	800556c <_ZN10SideSensor13getIgnoreFlagEv>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00f      	beq.n	8003e3a <_ZN9LineTrace4flipEv+0xd2>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	695b      	ldr	r3, [r3, #20]
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f7fd fb5e 	bl	80014e0 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>
 8003e24:	eeb0 7a40 	vmov.f32	s14, s0
 8003e28:	eddf 7a78 	vldr	s15, [pc, #480]	; 800400c <_ZN9LineTrace4flipEv+0x2a4>
 8003e2c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e34:	db01      	blt.n	8003e3a <_ZN9LineTrace4flipEv+0xd2>
 8003e36:	2301      	movs	r3, #1
 8003e38:	e000      	b.n	8003e3c <_ZN9LineTrace4flipEv+0xd4>
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d004      	beq.n	8003e4a <_ZN9LineTrace4flipEv+0xe2>
			side_sensor_->disableIgnore();
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	691b      	ldr	r3, [r3, #16]
 8003e44:	4618      	mov	r0, r3
 8003e46:	f001 fb84 	bl	8005552 <_ZN10SideSensor13disableIgnoreEv>

		// ------- Store side line distance ------//
#ifdef REVERSE
		if(stable_flag_ == true && (side_sensor_->getStatus() & 0x01) == 0x01){ //stabilizing and side sensor is white
#else
		if(stable_flag_ == true && (side_sensor_->getStatus() & 0x02) == 0x02){ //stabilizing and side sensor is white
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003e50:	3333      	adds	r3, #51	; 0x33
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d00b      	beq.n	8003e70 <_ZN9LineTrace4flipEv+0x108>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	691b      	ldr	r3, [r3, #16]
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f001 fb43 	bl	80054e8 <_ZN10SideSensor9getStatusEv>
 8003e62:	4603      	mov	r3, r0
 8003e64:	f003 0302 	and.w	r3, r3, #2
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	d101      	bne.n	8003e70 <_ZN9LineTrace4flipEv+0x108>
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e000      	b.n	8003e72 <_ZN9LineTrace4flipEv+0x10a>
 8003e70:	2300      	movs	r3, #0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d020      	beq.n	8003eb8 <_ZN9LineTrace4flipEv+0x150>
#endif
			//storeSideLineDistance();
			if(mode_selector_ == FIRST_RUNNING){
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003e7c:	3358      	adds	r3, #88	; 0x58
 8003e7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d103      	bne.n	8003e8e <_ZN9LineTrace4flipEv+0x126>
				storeSideLineDistance();
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f000 facf 	bl	800442a <_ZN9LineTrace21storeSideLineDistanceEv>
 8003e8c:	e008      	b.n	8003ea0 <_ZN9LineTrace4flipEv+0x138>
			}
			else{
				correctionTotalDistanceFromSideMarker();
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 fb74 	bl	800457c <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv>
				correction_check_cnt_ = 0;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003e9a:	3348      	adds	r3, #72	; 0x48
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	801a      	strh	r2, [r3, #0]
			}

			stable_flag_ = false;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003ea6:	3333      	adds	r3, #51	; 0x33
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	701a      	strb	r2, [r3, #0]
			stable_cnt_reset_flag_ = true;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003eb2:	3334      	adds	r3, #52	; 0x34
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	701a      	strb	r2, [r3, #0]
		}

		if(stable_flag_ == true) led_.LR(-1, 1);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003ebe:	3333      	adds	r3, #51	; 0x33
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d008      	beq.n	8003ed8 <_ZN9LineTrace4flipEv+0x170>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	330c      	adds	r3, #12
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f04f 31ff 	mov.w	r1, #4294967295
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f7fe f85f 	bl	8001f94 <_ZN3LED2LREaa>
 8003ed6:	e007      	b.n	8003ee8 <_ZN9LineTrace4flipEv+0x180>
		else led_.LR(-1, 0);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	330c      	adds	r3, #12
 8003edc:	2200      	movs	r2, #0
 8003ede:	f04f 31ff 	mov.w	r1, #4294967295
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7fe f856 	bl	8001f94 <_ZN3LED2LREaa>

		// ------ All sideline storing -------//
#ifdef REVERSE
		if(all_sideline_flag_ == false && (side_sensor_->getStatus() & 0x01) == 0x01){
#else
		if(all_sideline_flag_ == false && (side_sensor_->getStatus() & 0x02) == 0x02){
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003eee:	334a      	adds	r3, #74	; 0x4a
 8003ef0:	781b      	ldrb	r3, [r3, #0]
 8003ef2:	f083 0301 	eor.w	r3, r3, #1
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d00b      	beq.n	8003f14 <_ZN9LineTrace4flipEv+0x1ac>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	691b      	ldr	r3, [r3, #16]
 8003f00:	4618      	mov	r0, r3
 8003f02:	f001 faf1 	bl	80054e8 <_ZN10SideSensor9getStatusEv>
 8003f06:	4603      	mov	r3, r0
 8003f08:	f003 0302 	and.w	r3, r3, #2
 8003f0c:	2b02      	cmp	r3, #2
 8003f0e:	d101      	bne.n	8003f14 <_ZN9LineTrace4flipEv+0x1ac>
 8003f10:	2301      	movs	r3, #1
 8003f12:	e000      	b.n	8003f16 <_ZN9LineTrace4flipEv+0x1ae>
 8003f14:	2300      	movs	r3, #0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d011      	beq.n	8003f3e <_ZN9LineTrace4flipEv+0x1d6>
#endif
			all_sideline_flag_ = true;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003f20:	334a      	adds	r3, #74	; 0x4a
 8003f22:	2201      	movs	r2, #1
 8003f24:	701a      	strb	r2, [r3, #0]

			if(mode_selector_ == FIRST_RUNNING){
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003f2c:	3358      	adds	r3, #88	; 0x58
 8003f2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d120      	bne.n	8003f78 <_ZN9LineTrace4flipEv+0x210>
				storeAllSideLineDistance();
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f000 fab0 	bl	800449c <_ZN9LineTrace24storeAllSideLineDistanceEv>
 8003f3c:	e01c      	b.n	8003f78 <_ZN9LineTrace4flipEv+0x210>
			}
		}
#ifdef REVERSE
		else if(all_sideline_flag_ == true && (~(side_sensor_->getStatus()) & 0x01) == 0x01){
#else
		else if(all_sideline_flag_ == true && (~(side_sensor_->getStatus()) & 0x02) == 0x02){
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003f44:	334a      	adds	r3, #74	; 0x4a
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d00c      	beq.n	8003f66 <_ZN9LineTrace4flipEv+0x1fe>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	691b      	ldr	r3, [r3, #16]
 8003f50:	4618      	mov	r0, r3
 8003f52:	f001 fac9 	bl	80054e8 <_ZN10SideSensor9getStatusEv>
 8003f56:	4603      	mov	r3, r0
 8003f58:	43db      	mvns	r3, r3
 8003f5a:	f003 0302 	and.w	r3, r3, #2
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	d101      	bne.n	8003f66 <_ZN9LineTrace4flipEv+0x1fe>
 8003f62:	2301      	movs	r3, #1
 8003f64:	e000      	b.n	8003f68 <_ZN9LineTrace4flipEv+0x200>
 8003f66:	2300      	movs	r3, #0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d005      	beq.n	8003f78 <_ZN9LineTrace4flipEv+0x210>
#endif
			all_sideline_flag_ = false;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003f72:	334a      	adds	r3, #74	; 0x4a
 8003f74:	2200      	movs	r2, #0
 8003f76:	701a      	strb	r2, [r3, #0]
		}


		// ----- emergency stop processing------//
		if(line_sensor_->emergencyStop() == true){
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f7fe fb05 	bl	800258c <_ZN10LineSensor13emergencyStopEv>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d008      	beq.n	8003f9a <_ZN9LineTrace4flipEv+0x232>
			velocity_ctrl_->setTranslationVelocityOnly(0, 0);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	eddf 0a20 	vldr	s1, [pc, #128]	; 8004010 <_ZN9LineTrace4flipEv+0x2a8>
 8003f90:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8004010 <_ZN9LineTrace4flipEv+0x2a8>
 8003f94:	4618      	mov	r0, r3
 8003f96:	f001 fd5b 	bl	8005a50 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>
		}
		else{
			//led_.LR(0, -1);
		}

		correction_check_cnt_++;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003fa0:	3348      	adds	r3, #72	; 0x48
 8003fa2:	881b      	ldrh	r3, [r3, #0]
 8003fa4:	3301      	adds	r3, #1
 8003fa6:	b29a      	uxth	r2, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003fae:	3348      	adds	r3, #72	; 0x48
 8003fb0:	801a      	strh	r2, [r3, #0]
		if(correction_check_cnt_ >= 10000) correction_check_cnt_ = 10000;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003fb8:	3348      	adds	r3, #72	; 0x48
 8003fba:	881b      	ldrh	r3, [r3, #0]
 8003fbc:	f242 720f 	movw	r2, #9999	; 0x270f
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d906      	bls.n	8003fd2 <_ZN9LineTrace4flipEv+0x26a>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003fca:	3348      	adds	r3, #72	; 0x48
 8003fcc:	f242 7210 	movw	r2, #10000	; 0x2710
 8003fd0:	801a      	strh	r2, [r3, #0]

		if(correction_check_cnt_ <= 80) led_.LR(-1, 1);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003fd8:	3348      	adds	r3, #72	; 0x48
 8003fda:	881b      	ldrh	r3, [r3, #0]
 8003fdc:	2b50      	cmp	r3, #80	; 0x50
 8003fde:	d808      	bhi.n	8003ff2 <_ZN9LineTrace4flipEv+0x28a>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	330c      	adds	r3, #12
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	f04f 31ff 	mov.w	r1, #4294967295
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7fd ffd2 	bl	8001f94 <_ZN3LED2LREaa>
		else led_.LR(-1, 0);
	}
}
 8003ff0:	e007      	b.n	8004002 <_ZN9LineTrace4flipEv+0x29a>
		else led_.LR(-1, 0);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	330c      	adds	r3, #12
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f04f 31ff 	mov.w	r1, #4294967295
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f7fd ffc9 	bl	8001f94 <_ZN3LED2LREaa>
}
 8004002:	bf00      	nop
 8004004:	3708      	adds	r7, #8
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	43480000 	.word	0x43480000
 8004010:	00000000 	.word	0x00000000

08004014 <_ZN9LineTrace5startEv>:
		odometry_->clearPotition();
	}
}

void LineTrace::start()
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b082      	sub	sp, #8
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	i_reset_flag_ = true;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	velocity_ctrl_->start();
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	4618      	mov	r0, r3
 8004032:	f001 fd66 	bl	8005b02 <_ZN12VelocityCtrl5startEv>
	side_sensor_->resetWhiteLineCnt();
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	691b      	ldr	r3, [r3, #16]
 800403a:	4618      	mov	r0, r3
 800403c:	f001 fa6c 	bl	8005518 <_ZN10SideSensor17resetWhiteLineCntEv>
	crossline_idx_ = 0;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8004046:	332c      	adds	r3, #44	; 0x2c
 8004048:	2200      	movs	r2, #0
 800404a:	801a      	strh	r2, [r3, #0]
	sideline_idx_ = 0;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8004052:	332e      	adds	r3, #46	; 0x2e
 8004054:	2200      	movs	r2, #0
 8004056:	801a      	strh	r2, [r3, #0]
	all_sideline_idx_ = 0;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 800405e:	3330      	adds	r3, #48	; 0x30
 8004060:	2200      	movs	r2, #0
 8004062:	801a      	strh	r2, [r3, #0]
}
 8004064:	bf00      	nop
 8004066:	3708      	adds	r7, #8
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}

0800406c <_ZN9LineTrace4stopEv>:

void LineTrace::stop()
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af02      	add	r7, sp, #8
 8004072:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	velocity_ctrl_->stop();
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	4618      	mov	r0, r3
 8004082:	f001 fd51 	bl	8005b28 <_ZN12VelocityCtrl4stopEv>

	led_.LR(-1, 1);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	330c      	adds	r3, #12
 800408a:	2201      	movs	r2, #1
 800408c:	f04f 31ff 	mov.w	r1, #4294967295
 8004090:	4618      	mov	r0, r3
 8004092:	f7fd ff7f 	bl	8001f94 <_ZN3LED2LREaa>
	if(mode_selector_ == FIRST_RUNNING){ //First running
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800409c:	3358      	adds	r3, #88	; 0x58
 800409e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d107      	bne.n	80040b6 <_ZN9LineTrace4stopEv+0x4a>
		logger_->saveDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	69d8      	ldr	r0, [r3, #28]
 80040aa:	4b23      	ldr	r3, [pc, #140]	; (8004138 <_ZN9LineTrace4stopEv+0xcc>)
 80040ac:	4a23      	ldr	r2, [pc, #140]	; (800413c <_ZN9LineTrace4stopEv+0xd0>)
 80040ae:	4924      	ldr	r1, [pc, #144]	; (8004140 <_ZN9LineTrace4stopEv+0xd4>)
 80040b0:	f000 fc63 	bl	800497a <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>
 80040b4:	e006      	b.n	80040c4 <_ZN9LineTrace4stopEv+0x58>
	}
	else{//Secondary run
		logger_->saveDistanceAndTheta2("COURSLOG", "DISTANC2.TXT", "THETA2.TXT");
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	69d8      	ldr	r0, [r3, #28]
 80040ba:	4b22      	ldr	r3, [pc, #136]	; (8004144 <_ZN9LineTrace4stopEv+0xd8>)
 80040bc:	4a22      	ldr	r2, [pc, #136]	; (8004148 <_ZN9LineTrace4stopEv+0xdc>)
 80040be:	4920      	ldr	r1, [pc, #128]	; (8004140 <_ZN9LineTrace4stopEv+0xd4>)
 80040c0:	f000 fc7c 	bl	80049bc <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>
	}
	sd_write_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_, OVER_WRITE);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80040ca:	335c      	adds	r3, #92	; 0x5c
 80040cc:	2200      	movs	r2, #0
 80040ce:	9200      	str	r2, [sp, #0]
 80040d0:	2264      	movs	r2, #100	; 0x64
 80040d2:	491e      	ldr	r1, [pc, #120]	; (800414c <_ZN9LineTrace4stopEv+0xe0>)
 80040d4:	481a      	ldr	r0, [pc, #104]	; (8004140 <_ZN9LineTrace4stopEv+0xd4>)
 80040d6:	f7fd fa21 	bl	800151c <sd_write_array_float>
	sd_write_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_, OVER_WRITE);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f503 433d 	add.w	r3, r3, #48384	; 0xbd00
 80040e0:	33ec      	adds	r3, #236	; 0xec
 80040e2:	2200      	movs	r2, #0
 80040e4:	9200      	str	r2, [sp, #0]
 80040e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80040ea:	4919      	ldr	r1, [pc, #100]	; (8004150 <_ZN9LineTrace4stopEv+0xe4>)
 80040ec:	4814      	ldr	r0, [pc, #80]	; (8004140 <_ZN9LineTrace4stopEv+0xd4>)
 80040ee:	f7fd fa15 	bl	800151c <sd_write_array_float>
	sd_write_array_float("COURSLOG", "ASIDEDIS.TXT", SIDELINE_SIZE, all_sideline_distance_, OVER_WRITE);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80040f8:	338c      	adds	r3, #140	; 0x8c
 80040fa:	2200      	movs	r2, #0
 80040fc:	9200      	str	r2, [sp, #0]
 80040fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004102:	4914      	ldr	r1, [pc, #80]	; (8004154 <_ZN9LineTrace4stopEv+0xe8>)
 8004104:	480e      	ldr	r0, [pc, #56]	; (8004140 <_ZN9LineTrace4stopEv+0xd4>)
 8004106:	f7fd fa09 	bl	800151c <sd_write_array_float>

	led_.LR(-1, 0);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	330c      	adds	r3, #12
 800410e:	2200      	movs	r2, #0
 8004110:	f04f 31ff 	mov.w	r1, #4294967295
 8004114:	4618      	mov	r0, r3
 8004116:	f7fd ff3d 	bl	8001f94 <_ZN3LED2LREaa>

	logger_->resetIdx();
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	69db      	ldr	r3, [r3, #28]
 800411e:	4618      	mov	r0, r3
 8004120:	f000 fcda 	bl	8004ad8 <_ZN6Logger8resetIdxEv>
	logger_->resetLogs2();
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	69db      	ldr	r3, [r3, #28]
 8004128:	4618      	mov	r0, r3
 800412a:	f000 fc88 	bl	8004a3e <_ZN6Logger10resetLogs2Ev>
}
 800412e:	bf00      	nop
 8004130:	3708      	adds	r7, #8
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	08019d38 	.word	0x08019d38
 800413c:	08019d44 	.word	0x08019d44
 8004140:	08019d2c 	.word	0x08019d2c
 8004144:	08019e18 	.word	0x08019e18
 8004148:	08019e24 	.word	0x08019e24
 800414c:	08019d54 	.word	0x08019d54
 8004150:	08019d64 	.word	0x08019d64
 8004154:	08019e34 	.word	0x08019e34

08004158 <_ZN9LineTrace7runningEv>:

void LineTrace::running()
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
	uint16_t stage = 0;
 8004160:	2300      	movs	r3, #0
 8004162:	81fb      	strh	r3, [r7, #14]
	bool goal_flag = false;
 8004164:	2300      	movs	r3, #0
 8004166:	737b      	strb	r3, [r7, #13]
	start();
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f7ff ff53 	bl	8004014 <_ZN9LineTrace5startEv>

	while(goal_flag == false){
 800416e:	7b7b      	ldrb	r3, [r7, #13]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d15b      	bne.n	800422c <_ZN9LineTrace7runningEv+0xd4>
		switch(stage){
 8004174:	89fb      	ldrh	r3, [r7, #14]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d002      	beq.n	8004180 <_ZN9LineTrace7runningEv+0x28>
 800417a:	2b0a      	cmp	r3, #10
 800417c:	d030      	beq.n	80041e0 <_ZN9LineTrace7runningEv+0x88>
 800417e:	e054      	b.n	800422a <_ZN9LineTrace7runningEv+0xd2>
		case 0:
#ifdef REVERSE
			if(side_sensor_->getWhiteLineCntL() == 1){
#else
			if(side_sensor_->getWhiteLineCntR() == 1){
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	691b      	ldr	r3, [r3, #16]
 8004184:	4618      	mov	r0, r3
 8004186:	f001 f9bb 	bl	8005500 <_ZN10SideSensor16getWhiteLineCntREv>
 800418a:	4603      	mov	r3, r0
 800418c:	2b01      	cmp	r3, #1
 800418e:	bf0c      	ite	eq
 8004190:	2301      	moveq	r3, #1
 8004192:	2300      	movne	r3, #0
 8004194:	b2db      	uxtb	r3, r3
 8004196:	2b00      	cmp	r3, #0
 8004198:	d044      	beq.n	8004224 <_ZN9LineTrace7runningEv+0xcc>
				}
				else{ // Other than first running
					startVelocityPlay();
				}
				*/
				loggerStart();
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f7fe fd8c 	bl	8002cb8 <_ZN9LineTrace11loggerStartEv>
				if(mode_selector_ != FIRST_RUNNING){ // Other than first running
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80041a6:	3358      	adds	r3, #88	; 0x58
 80041a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d002      	beq.n	80041b6 <_ZN9LineTrace7runningEv+0x5e>
					startVelocityPlay();
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f000 f89f 	bl	80042f4 <_ZN9LineTrace17startVelocityPlayEv>
				}

				encoder_->clearCrossLineIgnoreDistance();
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	695b      	ldr	r3, [r3, #20]
 80041ba:	4618      	mov	r0, r3
 80041bc:	f7fd f99f 	bl	80014fe <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
				encoder_->clearTotalDistance();
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	695b      	ldr	r3, [r3, #20]
 80041c4:	4618      	mov	r0, r3
 80041c6:	f7fd f97d 	bl	80014c4 <_ZN7Encoder18clearTotalDistanceEv>
				led_.LR(0, -1);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	330c      	adds	r3, #12
 80041ce:	f04f 32ff 	mov.w	r2, #4294967295
 80041d2:	2100      	movs	r1, #0
 80041d4:	4618      	mov	r0, r3
 80041d6:	f7fd fedd 	bl	8001f94 <_ZN3LED2LREaa>
				stage = 10;
 80041da:	230a      	movs	r3, #10
 80041dc:	81fb      	strh	r3, [r7, #14]
			}

			break;
 80041de:	e021      	b.n	8004224 <_ZN9LineTrace7runningEv+0xcc>

		case 10:
#ifdef REVERSE
			if(side_sensor_->getWhiteLineCntL() == 2){
#else
			if(side_sensor_->getWhiteLineCntR() == 2){
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	691b      	ldr	r3, [r3, #16]
 80041e4:	4618      	mov	r0, r3
 80041e6:	f001 f98b 	bl	8005500 <_ZN10SideSensor16getWhiteLineCntREv>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b02      	cmp	r3, #2
 80041ee:	bf0c      	ite	eq
 80041f0:	2301      	moveq	r3, #1
 80041f2:	2300      	movne	r3, #0
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d016      	beq.n	8004228 <_ZN9LineTrace7runningEv+0xd0>
#endif
				loggerStop();
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f7fe fd77 	bl	8002cee <_ZN9LineTrace10loggerStopEv>
				stopVelocityPlay();
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f000 f88a 	bl	800431a <_ZN9LineTrace16stopVelocityPlayEv>
				HAL_Delay(100); //Run through after the goal
 8004206:	2064      	movs	r0, #100	; 0x64
 8004208:	f005 fb8c 	bl	8009924 <HAL_Delay>

				setTargetVelocity(0);
 800420c:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 800423c <_ZN9LineTrace7runningEv+0xe4>
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f7ff fc8d 	bl	8003b30 <_ZN9LineTrace17setTargetVelocityEf>
				HAL_Delay(500); //Stop for a while on the spot
 8004216:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800421a:	f005 fb83 	bl	8009924 <HAL_Delay>

				goal_flag = true;
 800421e:	2301      	movs	r3, #1
 8004220:	737b      	strb	r3, [r7, #13]

			}

			break;
 8004222:	e001      	b.n	8004228 <_ZN9LineTrace7runningEv+0xd0>
			break;
 8004224:	bf00      	nop
 8004226:	e7a2      	b.n	800416e <_ZN9LineTrace7runningEv+0x16>
			break;
 8004228:	bf00      	nop
	while(goal_flag == false){
 800422a:	e7a0      	b.n	800416e <_ZN9LineTrace7runningEv+0x16>
		}
	}

	stop();
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f7ff ff1d 	bl	800406c <_ZN9LineTrace4stopEv>
}
 8004232:	bf00      	nop
 8004234:	3710      	adds	r7, #16
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop
 800423c:	00000000 	.word	0x00000000

08004240 <_ZN9LineTrace9storeLogsEv>:

void LineTrace::storeLogs()
{
 8004240:	b590      	push	{r4, r7, lr}
 8004242:	ed2d 8b02 	vpush	{d8}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
	if(logging_flag_ == true){
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 8004252:	2b00      	cmp	r3, #0
 8004254:	d046      	beq.n	80042e4 <_ZN9LineTrace9storeLogsEv+0xa4>
		if(mode_selector_ == FIRST_RUNNING)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800425c:	3358      	adds	r3, #88	; 0x58
 800425e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d11c      	bne.n	80042a0 <_ZN9LineTrace9storeLogsEv+0x60>
			logger_->storeDistanceAndTheta(encoder_->getDistance10mm(), odometry_->getTheta());
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	69dc      	ldr	r4, [r3, #28]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	695b      	ldr	r3, [r3, #20]
 800426e:	4618      	mov	r0, r3
 8004270:	f7fd f8ed 	bl	800144e <_ZN7Encoder15getDistance10mmEv>
 8004274:	eeb0 8a40 	vmov.f32	s16, s0
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	699b      	ldr	r3, [r3, #24]
 800427c:	4618      	mov	r0, r3
 800427e:	f000 fe96 	bl	8004fae <_ZN8Odometry8getThetaEv>
 8004282:	ec53 2b10 	vmov	r2, r3, d0
 8004286:	4610      	mov	r0, r2
 8004288:	4619      	mov	r1, r3
 800428a:	f7fc fcc5 	bl	8000c18 <__aeabi_d2f>
 800428e:	4603      	mov	r3, r0
 8004290:	ee00 3a90 	vmov	s1, r3
 8004294:	eeb0 0a48 	vmov.f32	s0, s16
 8004298:	4620      	mov	r0, r4
 800429a:	f000 fab2 	bl	8004802 <_ZN6Logger21storeDistanceAndThetaEff>
 800429e:	e01b      	b.n	80042d8 <_ZN9LineTrace9storeLogsEv+0x98>
		else
			//logger_->storeDistanceAndTheta2(encoder_->getDistance10mm(), odometry_->getTheta());
			//logger_->storeDistanceAndTheta2(encoder_->getTotalDistance(), odometry_->getTheta());
			logger_->storeDistanceAndTheta2(velocity_ctrl_->getCurrentVelocity(), odometry_->getTheta());
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	69dc      	ldr	r4, [r3, #28]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	4618      	mov	r0, r3
 80042aa:	f001 fc59 	bl	8005b60 <_ZN12VelocityCtrl18getCurrentVelocityEv>
 80042ae:	eeb0 8a40 	vmov.f32	s16, s0
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	699b      	ldr	r3, [r3, #24]
 80042b6:	4618      	mov	r0, r3
 80042b8:	f000 fe79 	bl	8004fae <_ZN8Odometry8getThetaEv>
 80042bc:	ec53 2b10 	vmov	r2, r3, d0
 80042c0:	4610      	mov	r0, r2
 80042c2:	4619      	mov	r1, r3
 80042c4:	f7fc fca8 	bl	8000c18 <__aeabi_d2f>
 80042c8:	4603      	mov	r3, r0
 80042ca:	ee00 3a90 	vmov	s1, r3
 80042ce:	eeb0 0a48 	vmov.f32	s0, s16
 80042d2:	4620      	mov	r0, r4
 80042d4:	f000 fadc 	bl	8004890 <_ZN6Logger22storeDistanceAndTheta2Eff>

		mon_store_cnt++;
 80042d8:	4b05      	ldr	r3, [pc, #20]	; (80042f0 <_ZN9LineTrace9storeLogsEv+0xb0>)
 80042da:	881b      	ldrh	r3, [r3, #0]
 80042dc:	3301      	adds	r3, #1
 80042de:	b29a      	uxth	r2, r3
 80042e0:	4b03      	ldr	r3, [pc, #12]	; (80042f0 <_ZN9LineTrace9storeLogsEv+0xb0>)
 80042e2:	801a      	strh	r2, [r3, #0]
	}
}
 80042e4:	bf00      	nop
 80042e6:	370c      	adds	r7, #12
 80042e8:	46bd      	mov	sp, r7
 80042ea:	ecbd 8b02 	vpop	{d8}
 80042ee:	bd90      	pop	{r4, r7, pc}
 80042f0:	2000029c 	.word	0x2000029c

080042f4 <_ZN9LineTrace17startVelocityPlayEv>:

void LineTrace::startVelocityPlay()
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b082      	sub	sp, #8
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
	encoder_->clearTotalDistance();
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	695b      	ldr	r3, [r3, #20]
 8004300:	4618      	mov	r0, r3
 8004302:	f7fd f8df 	bl	80014c4 <_ZN7Encoder18clearTotalDistanceEv>
	velocity_play_flag_ = true;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800430c:	3354      	adds	r3, #84	; 0x54
 800430e:	2201      	movs	r2, #1
 8004310:	701a      	strb	r2, [r3, #0]
}
 8004312:	bf00      	nop
 8004314:	3708      	adds	r7, #8
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}

0800431a <_ZN9LineTrace16stopVelocityPlayEv>:

void LineTrace::stopVelocityPlay()
{
 800431a:	b480      	push	{r7}
 800431c:	b083      	sub	sp, #12
 800431e:	af00      	add	r7, sp, #0
 8004320:	6078      	str	r0, [r7, #4]
	velocity_play_flag_ = false;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004328:	3354      	adds	r3, #84	; 0x54
 800432a:	2200      	movs	r2, #0
 800432c:	701a      	strb	r2, [r3, #0]
	velocity_table_idx_ = 0;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004334:	3356      	adds	r3, #86	; 0x56
 8004336:	2200      	movs	r2, #0
 8004338:	801a      	strh	r2, [r3, #0]
	ref_distance_ = 0;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004340:	3310      	adds	r3, #16
 8004342:	f04f 0200 	mov.w	r2, #0
 8004346:	601a      	str	r2, [r3, #0]
}
 8004348:	bf00      	nop
 800434a:	370c      	adds	r7, #12
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr

08004354 <_ZN9LineTrace7setModeEs>:

void LineTrace::setMode(int16_t mode)
{
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	460b      	mov	r3, r1
 800435e:	807b      	strh	r3, [r7, #2]
	mode_selector_ = mode;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004366:	3358      	adds	r3, #88	; 0x58
 8004368:	887a      	ldrh	r2, [r7, #2]
 800436a:	801a      	strh	r2, [r3, #0]
}
 800436c:	bf00      	nop
 800436e:	370c      	adds	r7, #12
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr

08004378 <_ZN9LineTrace16isTargetDistanceEf>:

bool LineTrace::isTargetDistance(float target_distance)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	ed87 0a00 	vstr	s0, [r7]
	bool ret = false;
 8004384:	2300      	movs	r3, #0
 8004386:	73fb      	strb	r3, [r7, #15]
	if(encoder_->getDistance10mm() >= target_distance){
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	695b      	ldr	r3, [r3, #20]
 800438c:	4618      	mov	r0, r3
 800438e:	f7fd f85e 	bl	800144e <_ZN7Encoder15getDistance10mmEv>
 8004392:	eeb0 7a40 	vmov.f32	s14, s0
 8004396:	edd7 7a00 	vldr	s15, [r7]
 800439a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800439e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043a2:	bf94      	ite	ls
 80043a4:	2301      	movls	r3, #1
 80043a6:	2300      	movhi	r3, #0
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d001      	beq.n	80043b2 <_ZN9LineTrace16isTargetDistanceEf+0x3a>
		ret = true;
 80043ae:	2301      	movs	r3, #1
 80043b0:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 80043b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3710      	adds	r7, #16
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}

080043bc <_ZN9LineTrace22storeCrossLineDistanceEv>:

void LineTrace::storeCrossLineDistance()
{
 80043bc:	b590      	push	{r4, r7, lr}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
	crossline_distance_[crossline_idx_] = encoder_->getTotalDistance();
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	695a      	ldr	r2, [r3, #20]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80043ce:	332c      	adds	r3, #44	; 0x2c
 80043d0:	881b      	ldrh	r3, [r3, #0]
 80043d2:	461c      	mov	r4, r3
 80043d4:	4610      	mov	r0, r2
 80043d6:	f7fd f849 	bl	800146c <_ZN7Encoder16getTotalDistanceEv>
 80043da:	eef0 7a40 	vmov.f32	s15, s0
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	f504 533c 	add.w	r3, r4, #12032	; 0x2f00
 80043e4:	3316      	adds	r3, #22
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	4413      	add	r3, r2
 80043ea:	3304      	adds	r3, #4
 80043ec:	edc3 7a00 	vstr	s15, [r3]
	crossline_idx_++;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80043f6:	332c      	adds	r3, #44	; 0x2c
 80043f8:	881b      	ldrh	r3, [r3, #0]
 80043fa:	3301      	adds	r3, #1
 80043fc:	b29a      	uxth	r2, r3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8004404:	332c      	adds	r3, #44	; 0x2c
 8004406:	801a      	strh	r2, [r3, #0]

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 800440e:	332c      	adds	r3, #44	; 0x2c
 8004410:	881b      	ldrh	r3, [r3, #0]
 8004412:	2b63      	cmp	r3, #99	; 0x63
 8004414:	d905      	bls.n	8004422 <_ZN9LineTrace22storeCrossLineDistanceEv+0x66>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 800441c:	332c      	adds	r3, #44	; 0x2c
 800441e:	2263      	movs	r2, #99	; 0x63
 8004420:	801a      	strh	r2, [r3, #0]
}
 8004422:	bf00      	nop
 8004424:	370c      	adds	r7, #12
 8004426:	46bd      	mov	sp, r7
 8004428:	bd90      	pop	{r4, r7, pc}

0800442a <_ZN9LineTrace21storeSideLineDistanceEv>:

void LineTrace::storeSideLineDistance()
{
 800442a:	b590      	push	{r4, r7, lr}
 800442c:	b083      	sub	sp, #12
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
	sideline_distance_[sideline_idx_] = encoder_->getTotalDistance();
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	695a      	ldr	r2, [r3, #20]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 800443c:	332e      	adds	r3, #46	; 0x2e
 800443e:	881b      	ldrh	r3, [r3, #0]
 8004440:	461c      	mov	r4, r3
 8004442:	4610      	mov	r0, r2
 8004444:	f7fd f812 	bl	800146c <_ZN7Encoder16getTotalDistanceEv>
 8004448:	eef0 7a40 	vmov.f32	s15, s0
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	f504 533d 	add.w	r3, r4, #12096	; 0x2f40
 8004452:	333a      	adds	r3, #58	; 0x3a
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	4413      	add	r3, r2
 8004458:	3304      	adds	r3, #4
 800445a:	edc3 7a00 	vstr	s15, [r3]
	sideline_idx_++;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8004464:	332e      	adds	r3, #46	; 0x2e
 8004466:	881b      	ldrh	r3, [r3, #0]
 8004468:	3301      	adds	r3, #1
 800446a:	b29a      	uxth	r2, r3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8004472:	332e      	adds	r3, #46	; 0x2e
 8004474:	801a      	strh	r2, [r3, #0]

	if(sideline_idx_ >= SIDELINE_SIZE) sideline_idx_ = SIDELINE_SIZE - 1;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 800447c:	332e      	adds	r3, #46	; 0x2e
 800447e:	881b      	ldrh	r3, [r3, #0]
 8004480:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004484:	d306      	bcc.n	8004494 <_ZN9LineTrace21storeSideLineDistanceEv+0x6a>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 800448c:	332e      	adds	r3, #46	; 0x2e
 800448e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004492:	801a      	strh	r2, [r3, #0]
}
 8004494:	bf00      	nop
 8004496:	370c      	adds	r7, #12
 8004498:	46bd      	mov	sp, r7
 800449a:	bd90      	pop	{r4, r7, pc}

0800449c <_ZN9LineTrace24storeAllSideLineDistanceEv>:
void LineTrace::storeAllSideLineDistance()
{
 800449c:	b590      	push	{r4, r7, lr}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
	all_sideline_distance_[all_sideline_idx_] = encoder_->getTotalDistance();
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	695a      	ldr	r2, [r3, #20]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80044ae:	3330      	adds	r3, #48	; 0x30
 80044b0:	881b      	ldrh	r3, [r3, #0]
 80044b2:	461c      	mov	r4, r3
 80044b4:	4610      	mov	r0, r2
 80044b6:	f7fc ffd9 	bl	800146c <_ZN7Encoder16getTotalDistanceEv>
 80044ba:	eef0 7a40 	vmov.f32	s15, s0
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	f504 534d 	add.w	r3, r4, #13120	; 0x3340
 80044c4:	3322      	adds	r3, #34	; 0x22
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	4413      	add	r3, r2
 80044ca:	3304      	adds	r3, #4
 80044cc:	edc3 7a00 	vstr	s15, [r3]
	all_sideline_idx_++;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80044d6:	3330      	adds	r3, #48	; 0x30
 80044d8:	881b      	ldrh	r3, [r3, #0]
 80044da:	3301      	adds	r3, #1
 80044dc:	b29a      	uxth	r2, r3
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80044e4:	3330      	adds	r3, #48	; 0x30
 80044e6:	801a      	strh	r2, [r3, #0]

	if(all_sideline_idx_ >= SIDELINE_SIZE) all_sideline_idx_ = SIDELINE_SIZE - 1;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80044ee:	3330      	adds	r3, #48	; 0x30
 80044f0:	881b      	ldrh	r3, [r3, #0]
 80044f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80044f6:	d306      	bcc.n	8004506 <_ZN9LineTrace24storeAllSideLineDistanceEv+0x6a>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80044fe:	3330      	adds	r3, #48	; 0x30
 8004500:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004504:	801a      	strh	r2, [r3, #0]
}
 8004506:	bf00      	nop
 8004508:	370c      	adds	r7, #12
 800450a:	46bd      	mov	sp, r7
 800450c:	bd90      	pop	{r4, r7, pc}

0800450e <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv>:
void LineTrace::correctionTotalDistanceFromCrossLine()
{
 800450e:	b580      	push	{r7, lr}
 8004510:	b082      	sub	sp, #8
 8004512:	af00      	add	r7, sp, #0
 8004514:	6078      	str	r0, [r7, #4]
	encoder_->setTotalDistance(crossline_distance_[crossline_idx_]);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6959      	ldr	r1, [r3, #20]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8004520:	332c      	adds	r3, #44	; 0x2c
 8004522:	881b      	ldrh	r3, [r3, #0]
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 800452a:	3316      	adds	r3, #22
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	4413      	add	r3, r2
 8004530:	3304      	adds	r3, #4
 8004532:	edd3 7a00 	vldr	s15, [r3]
 8004536:	eeb0 0a67 	vmov.f32	s0, s15
 800453a:	4608      	mov	r0, r1
 800453c:	f7fc ffa5 	bl	800148a <_ZN7Encoder16setTotalDistanceEf>
	crossline_idx_++;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8004546:	332c      	adds	r3, #44	; 0x2c
 8004548:	881b      	ldrh	r3, [r3, #0]
 800454a:	3301      	adds	r3, #1
 800454c:	b29a      	uxth	r2, r3
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8004554:	332c      	adds	r3, #44	; 0x2c
 8004556:	801a      	strh	r2, [r3, #0]

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 800455e:	332c      	adds	r3, #44	; 0x2c
 8004560:	881b      	ldrh	r3, [r3, #0]
 8004562:	2b63      	cmp	r3, #99	; 0x63
 8004564:	d905      	bls.n	8004572 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0x64>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 800456c:	332c      	adds	r3, #44	; 0x2c
 800456e:	2263      	movs	r2, #99	; 0x63
 8004570:	801a      	strh	r2, [r3, #0]

}
 8004572:	bf00      	nop
 8004574:	3708      	adds	r7, #8
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
	...

0800457c <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv>:

void LineTrace::correctionTotalDistanceFromSideMarker()
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b086      	sub	sp, #24
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8004584:	2300      	movs	r3, #0
 8004586:	82fb      	strh	r3, [r7, #22]
 8004588:	8afb      	ldrh	r3, [r7, #22]
 800458a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800458e:	d239      	bcs.n	8004604 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x88>
		float temp_sideline_distance = sideline_distance_[i];
 8004590:	8afb      	ldrh	r3, [r7, #22]
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 8004598:	333a      	adds	r3, #58	; 0x3a
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	4413      	add	r3, r2
 800459e:	3304      	adds	r3, #4
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	613b      	str	r3, [r7, #16]
		float diff = abs(temp_sideline_distance - encoder_->getTotalDistance());
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	695b      	ldr	r3, [r3, #20]
 80045a8:	4618      	mov	r0, r3
 80045aa:	f7fc ff5f 	bl	800146c <_ZN7Encoder16getTotalDistanceEv>
 80045ae:	eeb0 7a40 	vmov.f32	s14, s0
 80045b2:	edd7 7a04 	vldr	s15, [r7, #16]
 80045b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80045ba:	eeb0 0a67 	vmov.f32	s0, s15
 80045be:	f7fe f83b 	bl	8002638 <_ZSt3absf>
 80045c2:	ed87 0a03 	vstr	s0, [r7, #12]
		if(diff <= 80){
 80045c6:	edd7 7a03 	vldr	s15, [r7, #12]
 80045ca:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800462c <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xb0>
 80045ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045d6:	d811      	bhi.n	80045fc <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x80>
			encoder_->setTotalDistance(sideline_distance_[i]);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6959      	ldr	r1, [r3, #20]
 80045dc:	8afb      	ldrh	r3, [r7, #22]
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 80045e4:	333a      	adds	r3, #58	; 0x3a
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	4413      	add	r3, r2
 80045ea:	3304      	adds	r3, #4
 80045ec:	edd3 7a00 	vldr	s15, [r3]
 80045f0:	eeb0 0a67 	vmov.f32	s0, s15
 80045f4:	4608      	mov	r0, r1
 80045f6:	f7fc ff48 	bl	800148a <_ZN7Encoder16setTotalDistanceEf>
			break;
 80045fa:	e003      	b.n	8004604 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x88>
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 80045fc:	8afb      	ldrh	r3, [r7, #22]
 80045fe:	3301      	adds	r3, #1
 8004600:	82fb      	strh	r3, [r7, #22]
 8004602:	e7c1      	b.n	8004588 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xc>
		}
	}

	if(sideline_idx_ >= SIDELINE_SIZE) sideline_idx_ = SIDELINE_SIZE - 1;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 800460a:	332e      	adds	r3, #46	; 0x2e
 800460c:	881b      	ldrh	r3, [r3, #0]
 800460e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004612:	d306      	bcc.n	8004622 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xa6>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 800461a:	332e      	adds	r3, #46	; 0x2e
 800461c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004620:	801a      	strh	r2, [r3, #0]

}
 8004622:	bf00      	nop
 8004624:	3718      	adds	r7, #24
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop
 800462c:	42a00000 	.word	0x42a00000

08004630 <_ZN6LoggerC1Ev>:
#include "HAL_SDcard_lib.h"
#include <stdio.h>
#include "Macro.h"
#include "AQM0802.h"

Logger::Logger() : recording_flag_(false), log_index_tim_(0), log_index_tim2_(0), log_index_dis_(0){}
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800463e:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8004642:	2200      	movs	r2, #0
 8004644:	701a      	strb	r2, [r3, #0]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800464c:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8004650:	2200      	movs	r2, #0
 8004652:	801a      	strh	r2, [r3, #0]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800465a:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800465e:	2200      	movs	r2, #0
 8004660:	801a      	strh	r2, [r3, #0]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004668:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 800466c:	2200      	movs	r2, #0
 800466e:	801a      	strh	r2, [r3, #0]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	4618      	mov	r0, r3
 8004674:	370c      	adds	r7, #12
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr
	...

08004680 <_ZN6Logger10sdCardInitEv>:

bool Logger::sdCardInit()
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b084      	sub	sp, #16
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8004688:	2300      	movs	r3, #0
 800468a:	73fb      	strb	r3, [r7, #15]

	if(sd_mount() == 1){
 800468c:	f7fd f838 	bl	8001700 <sd_mount>
 8004690:	4603      	mov	r3, r0
 8004692:	2b01      	cmp	r3, #1
 8004694:	bf0c      	ite	eq
 8004696:	2301      	moveq	r3, #1
 8004698:	2300      	movne	r3, #0
 800469a:	b2db      	uxtb	r3, r3
 800469c:	2b00      	cmp	r3, #0
 800469e:	d016      	beq.n	80046ce <_ZN6Logger10sdCardInitEv+0x4e>
	  //printf("mount success\r\n");

	  lcd_clear();
 80046a0:	f7fc fcfe 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 80046a4:	2100      	movs	r1, #0
 80046a6:	2000      	movs	r0, #0
 80046a8:	f7fc fd0a 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 80046ac:	4815      	ldr	r0, [pc, #84]	; (8004704 <_ZN6Logger10sdCardInitEv+0x84>)
 80046ae:	f7fc fd32 	bl	8001116 <lcd_printf>
	  lcd_locate(0,1);
 80046b2:	2101      	movs	r1, #1
 80046b4:	2000      	movs	r0, #0
 80046b6:	f7fc fd03 	bl	80010c0 <lcd_locate>
	  lcd_printf("success");
 80046ba:	4813      	ldr	r0, [pc, #76]	; (8004708 <_ZN6Logger10sdCardInitEv+0x88>)
 80046bc:	f7fc fd2b 	bl	8001116 <lcd_printf>
	  HAL_Delay(500);
 80046c0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80046c4:	f005 f92e 	bl	8009924 <HAL_Delay>

	  ret = true;
 80046c8:	2301      	movs	r3, #1
 80046ca:	73fb      	strb	r3, [r7, #15]
 80046cc:	e015      	b.n	80046fa <_ZN6Logger10sdCardInitEv+0x7a>
	}
	else{
	  //printf("mount error\r\n");

	  lcd_clear();
 80046ce:	f7fc fce7 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 80046d2:	2100      	movs	r1, #0
 80046d4:	2000      	movs	r0, #0
 80046d6:	f7fc fcf3 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 80046da:	480a      	ldr	r0, [pc, #40]	; (8004704 <_ZN6Logger10sdCardInitEv+0x84>)
 80046dc:	f7fc fd1b 	bl	8001116 <lcd_printf>
	  lcd_locate(0,1);
 80046e0:	2101      	movs	r1, #1
 80046e2:	2000      	movs	r0, #0
 80046e4:	f7fc fcec 	bl	80010c0 <lcd_locate>
	  lcd_printf("fail");
 80046e8:	4808      	ldr	r0, [pc, #32]	; (800470c <_ZN6Logger10sdCardInitEv+0x8c>)
 80046ea:	f7fc fd14 	bl	8001116 <lcd_printf>
	  HAL_Delay(1000);
 80046ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80046f2:	f005 f917 	bl	8009924 <HAL_Delay>

	  ret = false;
 80046f6:	2300      	movs	r3, #0
 80046f8:	73fb      	strb	r3, [r7, #15]
	//data[0] = 100;
	//sd_write_array_int("sdio", "write1.txt", DATA_SIZE, data, ADD_WRITE); //write
	//sd_read_array_int("sdio", "write1.txt", DATA_SIZE, temp); //read
	//sd_write_array_int("sdio", "write2.txt", DATA_SIZE, temp, ADD_WRITE); //write

	return ret;
 80046fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3710      	adds	r7, #16
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}
 8004704:	08019e44 	.word	0x08019e44
 8004708:	08019e50 	.word	0x08019e50
 800470c:	08019e58 	.word	0x08019e58

08004710 <_ZN6Logger8storeLogEf>:

	}

}
void Logger::storeLog(float data)
{
 8004710:	b480      	push	{r7}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004722:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	2b01      	cmp	r3, #1
 800472a:	d127      	bne.n	800477c <_ZN6Logger8storeLogEf+0x6c>
		store_data_float_[log_index_tim_] = data;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004732:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8004736:	881b      	ldrh	r3, [r3, #0]
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	4413      	add	r3, r2
 800473e:	683a      	ldr	r2, [r7, #0]
 8004740:	601a      	str	r2, [r3, #0]

		log_index_tim_++;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004748:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 800474c:	881b      	ldrh	r3, [r3, #0]
 800474e:	3301      	adds	r3, #1
 8004750:	b29a      	uxth	r2, r3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004758:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 800475c:	801a      	strh	r2, [r3, #0]

		if(log_index_tim_ >= LOG_DATA_SIZE_TIM) log_index_tim_ = 0;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004764:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8004768:	881b      	ldrh	r3, [r3, #0]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d006      	beq.n	800477c <_ZN6Logger8storeLogEf+0x6c>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004774:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8004778:	2200      	movs	r2, #0
 800477a:	801a      	strh	r2, [r3, #0]
	}
}
 800477c:	bf00      	nop
 800477e:	370c      	adds	r7, #12
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr

08004788 <_ZN6Logger9storeLog2Ef>:
void Logger::storeLog2(float data)
{
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800479a:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800479e:	781b      	ldrb	r3, [r3, #0]
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d128      	bne.n	80047f6 <_ZN6Logger9storeLog2Ef+0x6e>
		store_data_float2_[log_index_tim2_] = data;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80047aa:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80047ae:	881b      	ldrh	r3, [r3, #0]
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	4413      	add	r3, r2
 80047b6:	3304      	adds	r3, #4
 80047b8:	683a      	ldr	r2, [r7, #0]
 80047ba:	601a      	str	r2, [r3, #0]

		log_index_tim2_++;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80047c2:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80047c6:	881b      	ldrh	r3, [r3, #0]
 80047c8:	3301      	adds	r3, #1
 80047ca:	b29a      	uxth	r2, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80047d2:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80047d6:	801a      	strh	r2, [r3, #0]

		if(log_index_tim2_ >= LOG_DATA_SIZE_TIM2) log_index_tim2_ = 0;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80047de:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80047e2:	881b      	ldrh	r3, [r3, #0]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d006      	beq.n	80047f6 <_ZN6Logger9storeLog2Ef+0x6e>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80047ee:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80047f2:	2200      	movs	r2, #0
 80047f4:	801a      	strh	r2, [r3, #0]
	}
}
 80047f6:	bf00      	nop
 80047f8:	370c      	adds	r7, #12
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr

08004802 <_ZN6Logger21storeDistanceAndThetaEff>:
{

}

void Logger::storeDistanceAndTheta(float distance, float theta)
{
 8004802:	b480      	push	{r7}
 8004804:	b085      	sub	sp, #20
 8004806:	af00      	add	r7, sp, #0
 8004808:	60f8      	str	r0, [r7, #12]
 800480a:	ed87 0a02 	vstr	s0, [r7, #8]
 800480e:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance_[log_index_dis_] = distance;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004818:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 800481c:	881b      	ldrh	r3, [r3, #0]
 800481e:	68fa      	ldr	r2, [r7, #12]
 8004820:	3302      	adds	r3, #2
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	4413      	add	r3, r2
 8004826:	68ba      	ldr	r2, [r7, #8]
 8004828:	601a      	str	r2, [r3, #0]
		store_theta_[log_index_dis_] = theta;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004830:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8004834:	881b      	ldrh	r3, [r3, #0]
 8004836:	68fa      	ldr	r2, [r7, #12]
 8004838:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800483c:	3312      	adds	r3, #18
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	4413      	add	r3, r2
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800484c:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8004850:	881b      	ldrh	r3, [r3, #0]
 8004852:	3301      	adds	r3, #1
 8004854:	b29a      	uxth	r2, r3
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800485c:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8004860:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004868:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 800486c:	881b      	ldrh	r3, [r3, #0]
 800486e:	f241 726f 	movw	r2, #5999	; 0x176f
 8004872:	4293      	cmp	r3, r2
 8004874:	d906      	bls.n	8004884 <_ZN6Logger21storeDistanceAndThetaEff+0x82>
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800487c:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8004880:	2200      	movs	r2, #0
 8004882:	801a      	strh	r2, [r3, #0]
	//}
}
 8004884:	bf00      	nop
 8004886:	3714      	adds	r7, #20
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <_ZN6Logger22storeDistanceAndTheta2Eff>:

void Logger::storeDistanceAndTheta2(float distance, float theta)
{
 8004890:	b480      	push	{r7}
 8004892:	b085      	sub	sp, #20
 8004894:	af00      	add	r7, sp, #0
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	ed87 0a02 	vstr	s0, [r7, #8]
 800489c:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance2_[log_index_dis_] = distance;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80048a6:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 80048aa:	881b      	ldrh	r3, [r3, #0]
 80048ac:	68fa      	ldr	r2, [r7, #12]
 80048ae:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 80048b2:	3322      	adds	r3, #34	; 0x22
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	4413      	add	r3, r2
 80048b8:	68ba      	ldr	r2, [r7, #8]
 80048ba:	601a      	str	r2, [r3, #0]
		store_theta2_[log_index_dis_] = theta;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80048c2:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 80048c6:	881b      	ldrh	r3, [r3, #0]
 80048c8:	68fa      	ldr	r2, [r7, #12]
 80048ca:	f503 438c 	add.w	r3, r3, #17920	; 0x4600
 80048ce:	3352      	adds	r3, #82	; 0x52
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	4413      	add	r3, r2
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80048de:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 80048e2:	881b      	ldrh	r3, [r3, #0]
 80048e4:	3301      	adds	r3, #1
 80048e6:	b29a      	uxth	r2, r3
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80048ee:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 80048f2:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80048fa:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 80048fe:	881b      	ldrh	r3, [r3, #0]
 8004900:	f241 726f 	movw	r2, #5999	; 0x176f
 8004904:	4293      	cmp	r3, r2
 8004906:	d906      	bls.n	8004916 <_ZN6Logger22storeDistanceAndTheta2Eff+0x86>
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800490e:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8004912:	2200      	movs	r2, #0
 8004914:	801a      	strh	r2, [r3, #0]
	//}
}
 8004916:	bf00      	nop
 8004918:	3714      	adds	r7, #20
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr

08004922 <_ZN6Logger23getDistanceArrayPointerEv>:
const float *Logger::getDistanceArrayPointer()
{
 8004922:	b480      	push	{r7}
 8004924:	b083      	sub	sp, #12
 8004926:	af00      	add	r7, sp, #0
 8004928:	6078      	str	r0, [r7, #4]
	return store_distance_;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	3308      	adds	r3, #8
}
 800492e:	4618      	mov	r0, r3
 8004930:	370c      	adds	r7, #12
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr

0800493a <_ZN6Logger20getThetaArrayPointerEv>:

const float *Logger::getThetaArrayPointer()
{
 800493a:	b480      	push	{r7}
 800493c:	b083      	sub	sp, #12
 800493e:	af00      	add	r7, sp, #0
 8004940:	6078      	str	r0, [r7, #4]
	return store_theta_;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004948:	3348      	adds	r3, #72	; 0x48
}
 800494a:	4618      	mov	r0, r3
 800494c:	370c      	adds	r7, #12
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr

08004956 <_ZN6Logger8saveLogsEPKcS1_>:

void Logger::saveLogs(const char *folder_name, const char *file_name)
{
 8004956:	b580      	push	{r7, lr}
 8004958:	b086      	sub	sp, #24
 800495a:	af02      	add	r7, sp, #8
 800495c:	60f8      	str	r0, [r7, #12]
 800495e:	60b9      	str	r1, [r7, #8]
 8004960:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM, store_data_float_, OVER_WRITE); //write
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2200      	movs	r2, #0
 8004966:	9200      	str	r2, [sp, #0]
 8004968:	2201      	movs	r2, #1
 800496a:	6879      	ldr	r1, [r7, #4]
 800496c:	68b8      	ldr	r0, [r7, #8]
 800496e:	f7fc fdd5 	bl	800151c <sd_write_array_float>
}
 8004972:	bf00      	nop
 8004974:	3710      	adds	r7, #16
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}

0800497a <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>:
{
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_float2_, OVER_WRITE); //write
}

void Logger::saveDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 800497a:	b580      	push	{r7, lr}
 800497c:	b086      	sub	sp, #24
 800497e:	af02      	add	r7, sp, #8
 8004980:	60f8      	str	r0, [r7, #12]
 8004982:	60b9      	str	r1, [r7, #8]
 8004984:	607a      	str	r2, [r7, #4]
 8004986:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_, OVER_WRITE); //write
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	3308      	adds	r3, #8
 800498c:	2200      	movs	r2, #0
 800498e:	9200      	str	r2, [sp, #0]
 8004990:	f241 7270 	movw	r2, #6000	; 0x1770
 8004994:	6879      	ldr	r1, [r7, #4]
 8004996:	68b8      	ldr	r0, [r7, #8]
 8004998:	f7fc fdc0 	bl	800151c <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_, OVER_WRITE); //write
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 80049a2:	3348      	adds	r3, #72	; 0x48
 80049a4:	2200      	movs	r2, #0
 80049a6:	9200      	str	r2, [sp, #0]
 80049a8:	f241 7270 	movw	r2, #6000	; 0x1770
 80049ac:	6839      	ldr	r1, [r7, #0]
 80049ae:	68b8      	ldr	r0, [r7, #8]
 80049b0:	f7fc fdb4 	bl	800151c <sd_write_array_float>
}
 80049b4:	bf00      	nop
 80049b6:	3710      	adds	r7, #16
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}

080049bc <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>:

void Logger::saveDistanceAndTheta2(const char *folder_name, const char *file_name1, const char *file_name2)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b086      	sub	sp, #24
 80049c0:	af02      	add	r7, sp, #8
 80049c2:	60f8      	str	r0, [r7, #12]
 80049c4:	60b9      	str	r1, [r7, #8]
 80049c6:	607a      	str	r2, [r7, #4]
 80049c8:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance2_, OVER_WRITE); //write
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 80049d0:	3388      	adds	r3, #136	; 0x88
 80049d2:	2200      	movs	r2, #0
 80049d4:	9200      	str	r2, [sp, #0]
 80049d6:	f241 7270 	movw	r2, #6000	; 0x1770
 80049da:	6879      	ldr	r1, [r7, #4]
 80049dc:	68b8      	ldr	r0, [r7, #8]
 80049de:	f7fc fd9d 	bl	800151c <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta2_, OVER_WRITE); //write
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 80049e8:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80049ec:	2200      	movs	r2, #0
 80049ee:	9200      	str	r2, [sp, #0]
 80049f0:	f241 7270 	movw	r2, #6000	; 0x1770
 80049f4:	6839      	ldr	r1, [r7, #0]
 80049f6:	68b8      	ldr	r0, [r7, #8]
 80049f8:	f7fc fd90 	bl	800151c <sd_write_array_float>
}
 80049fc:	bf00      	nop
 80049fe:	3710      	adds	r7, #16
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>:

void Logger::importDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	60f8      	str	r0, [r7, #12]
 8004a0c:	60b9      	str	r1, [r7, #8]
 8004a0e:	607a      	str	r2, [r7, #4]
 8004a10:	603b      	str	r3, [r7, #0]
	sd_read_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_); //read
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	3308      	adds	r3, #8
 8004a16:	f241 7270 	movw	r2, #6000	; 0x1770
 8004a1a:	6879      	ldr	r1, [r7, #4]
 8004a1c:	68b8      	ldr	r0, [r7, #8]
 8004a1e:	f7fc fde3 	bl	80015e8 <sd_read_array_float>
	sd_read_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_); //read
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004a28:	3348      	adds	r3, #72	; 0x48
 8004a2a:	f241 7270 	movw	r2, #6000	; 0x1770
 8004a2e:	6839      	ldr	r1, [r7, #0]
 8004a30:	68b8      	ldr	r0, [r7, #8]
 8004a32:	f7fc fdd9 	bl	80015e8 <sd_read_array_float>
}
 8004a36:	bf00      	nop
 8004a38:	3710      	adds	r7, #16
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}

08004a3e <_ZN6Logger10resetLogs2Ev>:
	log_index_tim_ = 0;
	log_index_dis_ = 0;
}

void Logger::resetLogs2()
{
 8004a3e:	b480      	push	{r7}
 8004a40:	b08b      	sub	sp, #44	; 0x2c
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
	for(auto &log : store_distance2_){
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 8004a4c:	3388      	adds	r3, #136	; 0x88
 8004a4e:	61fb      	str	r3, [r7, #28]
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	627b      	str	r3, [r7, #36]	; 0x24
 8004a54:	69fb      	ldr	r3, [r7, #28]
 8004a56:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004a5a:	3340      	adds	r3, #64	; 0x40
 8004a5c:	61bb      	str	r3, [r7, #24]
 8004a5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a60:	69bb      	ldr	r3, [r7, #24]
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d009      	beq.n	8004a7a <_ZN6Logger10resetLogs2Ev+0x3c>
 8004a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a68:	617b      	str	r3, [r7, #20]
		log = 0;
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	f04f 0200 	mov.w	r2, #0
 8004a70:	601a      	str	r2, [r3, #0]
	for(auto &log : store_distance2_){
 8004a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a74:	3304      	adds	r3, #4
 8004a76:	627b      	str	r3, [r7, #36]	; 0x24
 8004a78:	e7f1      	b.n	8004a5e <_ZN6Logger10resetLogs2Ev+0x20>
	}
	for(auto &log : store_theta2_){
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8004a80:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8004a84:	613b      	str	r3, [r7, #16]
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	623b      	str	r3, [r7, #32]
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004a90:	3340      	adds	r3, #64	; 0x40
 8004a92:	60fb      	str	r3, [r7, #12]
 8004a94:	6a3a      	ldr	r2, [r7, #32]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d009      	beq.n	8004ab0 <_ZN6Logger10resetLogs2Ev+0x72>
 8004a9c:	6a3b      	ldr	r3, [r7, #32]
 8004a9e:	60bb      	str	r3, [r7, #8]
		log = 0;
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	f04f 0200 	mov.w	r2, #0
 8004aa6:	601a      	str	r2, [r3, #0]
	for(auto &log : store_theta2_){
 8004aa8:	6a3b      	ldr	r3, [r7, #32]
 8004aaa:	3304      	adds	r3, #4
 8004aac:	623b      	str	r3, [r7, #32]
 8004aae:	e7f1      	b.n	8004a94 <_ZN6Logger10resetLogs2Ev+0x56>
	}

	log_index_tim_ = 0;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004ab6:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8004aba:	2200      	movs	r2, #0
 8004abc:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004ac4:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8004ac8:	2200      	movs	r2, #0
 8004aca:	801a      	strh	r2, [r3, #0]
}
 8004acc:	bf00      	nop
 8004ace:	372c      	adds	r7, #44	; 0x2c
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <_ZN6Logger8resetIdxEv>:
void Logger::resetIdx()
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
	log_index_tim_ = 0;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004ae6:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8004aea:	2200      	movs	r2, #0
 8004aec:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004af4:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8004af8:	2200      	movs	r2, #0
 8004afa:	801a      	strh	r2, [r3, #0]
}
 8004afc:	bf00      	nop
 8004afe:	370c      	adds	r7, #12
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr

08004b08 <_ZN6Logger5startEv>:

void Logger::start()
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
	recording_flag_ = true;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004b16:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	701a      	strb	r2, [r3, #0]
}
 8004b1e:	bf00      	nop
 8004b20:	370c      	adds	r7, #12
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr

08004b2a <_ZN6Logger4stopEv>:

void Logger::stop()
{
 8004b2a:	b480      	push	{r7}
 8004b2c:	b083      	sub	sp, #12
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
	recording_flag_ = false;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004b38:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	701a      	strb	r2, [r3, #0]
}
 8004b40:	bf00      	nop
 8004b42:	370c      	adds	r7, #12
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr

08004b4c <_ZN5MotorC1Ev>:

#include "Motor.hpp"
#include "G_variables.h"


Motor::Motor() : temp_left_counter_period_(0), temp_right_counter_period_(0){}
 8004b4c:	b480      	push	{r7}
 8004b4e:	b083      	sub	sp, #12
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	801a      	strh	r2, [r3, #0]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	805a      	strh	r2, [r3, #2]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4618      	mov	r0, r3
 8004b64:	370c      	adds	r7, #12
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr
	...

08004b70 <_ZN5Motor4initEv>:

void Motor::init()
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b082      	sub	sp, #8
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
	//PWM start
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8004b78:	2108      	movs	r1, #8
 8004b7a:	4805      	ldr	r0, [pc, #20]	; (8004b90 <_ZN5Motor4initEv+0x20>)
 8004b7c:	f00a f89c 	bl	800ecb8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8004b80:	210c      	movs	r1, #12
 8004b82:	4803      	ldr	r0, [pc, #12]	; (8004b90 <_ZN5Motor4initEv+0x20>)
 8004b84:	f00a f898 	bl	800ecb8 <HAL_TIM_PWM_Start>

}
 8004b88:	bf00      	nop
 8004b8a:	3708      	adds	r7, #8
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}
 8004b90:	2003f924 	.word	0x2003f924

08004b94 <_ZN5Motor9motorCtrlEv>:

void Motor::motorCtrl()
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
	uint16_t left_counter_period, right_counter_period;

	if(temp_left_counter_period_ < 0) {
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	da0c      	bge.n	8004bc0 <_ZN5Motor9motorCtrlEv+0x2c>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004bac:	481d      	ldr	r0, [pc, #116]	; (8004c24 <_ZN5Motor9motorCtrlEv+0x90>)
 8004bae:	f006 f955 	bl	800ae5c <HAL_GPIO_WritePin>
		left_counter_period = -1 * temp_left_counter_period_;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	425b      	negs	r3, r3
 8004bbc:	81fb      	strh	r3, [r7, #14]
 8004bbe:	e009      	b.n	8004bd4 <_ZN5Motor9motorCtrlEv+0x40>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004bc6:	4817      	ldr	r0, [pc, #92]	; (8004c24 <_ZN5Motor9motorCtrlEv+0x90>)
 8004bc8:	f006 f948 	bl	800ae5c <HAL_GPIO_WritePin>
		left_counter_period = temp_left_counter_period_;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004bd2:	81fb      	strh	r3, [r7, #14]
	}

	if(temp_right_counter_period_ < 0) {
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	da0c      	bge.n	8004bf8 <_ZN5Motor9motorCtrlEv+0x64>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8004bde:	2201      	movs	r2, #1
 8004be0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004be4:	480f      	ldr	r0, [pc, #60]	; (8004c24 <_ZN5Motor9motorCtrlEv+0x90>)
 8004be6:	f006 f939 	bl	800ae5c <HAL_GPIO_WritePin>
		right_counter_period = -1 * temp_right_counter_period_;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	425b      	negs	r3, r3
 8004bf4:	81bb      	strh	r3, [r7, #12]
 8004bf6:	e009      	b.n	8004c0c <_ZN5Motor9motorCtrlEv+0x78>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004bfe:	4809      	ldr	r0, [pc, #36]	; (8004c24 <_ZN5Motor9motorCtrlEv+0x90>)
 8004c00:	f006 f92c 	bl	800ae5c <HAL_GPIO_WritePin>
		right_counter_period = temp_right_counter_period_;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004c0a:	81bb      	strh	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, left_counter_period);
 8004c0c:	4b06      	ldr	r3, [pc, #24]	; (8004c28 <_ZN5Motor9motorCtrlEv+0x94>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	89fa      	ldrh	r2, [r7, #14]
 8004c12:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, right_counter_period);
 8004c14:	4b04      	ldr	r3, [pc, #16]	; (8004c28 <_ZN5Motor9motorCtrlEv+0x94>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	89ba      	ldrh	r2, [r7, #12]
 8004c1a:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004c1c:	bf00      	nop
 8004c1e:	3710      	adds	r7, #16
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}
 8004c24:	40020c00 	.word	0x40020c00
 8004c28:	2003f924 	.word	0x2003f924

08004c2c <_ZN5Motor8setRatioEdd>:

void Motor::setRatio(double left_ratio, double right_ratio)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b086      	sub	sp, #24
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6178      	str	r0, [r7, #20]
 8004c34:	ed87 0b02 	vstr	d0, [r7, #8]
 8004c38:	ed87 1b00 	vstr	d1, [r7]
	if(left_ratio > 1) left_ratio = 1;
 8004c3c:	f04f 0200 	mov.w	r2, #0
 8004c40:	4b30      	ldr	r3, [pc, #192]	; (8004d04 <_ZN5Motor8setRatioEdd+0xd8>)
 8004c42:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004c46:	f7fb ff7f 	bl	8000b48 <__aeabi_dcmpgt>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d005      	beq.n	8004c5c <_ZN5Motor8setRatioEdd+0x30>
 8004c50:	f04f 0200 	mov.w	r2, #0
 8004c54:	4b2b      	ldr	r3, [pc, #172]	; (8004d04 <_ZN5Motor8setRatioEdd+0xd8>)
 8004c56:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8004c5a:	e00e      	b.n	8004c7a <_ZN5Motor8setRatioEdd+0x4e>
	else if(left_ratio < -1) left_ratio = -1;
 8004c5c:	f04f 0200 	mov.w	r2, #0
 8004c60:	4b29      	ldr	r3, [pc, #164]	; (8004d08 <_ZN5Motor8setRatioEdd+0xdc>)
 8004c62:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004c66:	f7fb ff51 	bl	8000b0c <__aeabi_dcmplt>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d004      	beq.n	8004c7a <_ZN5Motor8setRatioEdd+0x4e>
 8004c70:	f04f 0200 	mov.w	r2, #0
 8004c74:	4b24      	ldr	r3, [pc, #144]	; (8004d08 <_ZN5Motor8setRatioEdd+0xdc>)
 8004c76:	e9c7 2302 	strd	r2, r3, [r7, #8]
	if(right_ratio > 1) right_ratio = 1;
 8004c7a:	f04f 0200 	mov.w	r2, #0
 8004c7e:	4b21      	ldr	r3, [pc, #132]	; (8004d04 <_ZN5Motor8setRatioEdd+0xd8>)
 8004c80:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004c84:	f7fb ff60 	bl	8000b48 <__aeabi_dcmpgt>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d005      	beq.n	8004c9a <_ZN5Motor8setRatioEdd+0x6e>
 8004c8e:	f04f 0200 	mov.w	r2, #0
 8004c92:	4b1c      	ldr	r3, [pc, #112]	; (8004d04 <_ZN5Motor8setRatioEdd+0xd8>)
 8004c94:	e9c7 2300 	strd	r2, r3, [r7]
 8004c98:	e00e      	b.n	8004cb8 <_ZN5Motor8setRatioEdd+0x8c>
	else if(right_ratio < -1) right_ratio = -1;
 8004c9a:	f04f 0200 	mov.w	r2, #0
 8004c9e:	4b1a      	ldr	r3, [pc, #104]	; (8004d08 <_ZN5Motor8setRatioEdd+0xdc>)
 8004ca0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004ca4:	f7fb ff32 	bl	8000b0c <__aeabi_dcmplt>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d004      	beq.n	8004cb8 <_ZN5Motor8setRatioEdd+0x8c>
 8004cae:	f04f 0200 	mov.w	r2, #0
 8004cb2:	4b15      	ldr	r3, [pc, #84]	; (8004d08 <_ZN5Motor8setRatioEdd+0xdc>)
 8004cb4:	e9c7 2300 	strd	r2, r3, [r7]

	temp_left_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * left_ratio);
 8004cb8:	f04f 0200 	mov.w	r2, #0
 8004cbc:	4b13      	ldr	r3, [pc, #76]	; (8004d0c <_ZN5Motor8setRatioEdd+0xe0>)
 8004cbe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004cc2:	f7fb fcb1 	bl	8000628 <__aeabi_dmul>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	460b      	mov	r3, r1
 8004cca:	4610      	mov	r0, r2
 8004ccc:	4619      	mov	r1, r3
 8004cce:	f7fb ff5b 	bl	8000b88 <__aeabi_d2iz>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	b21a      	sxth	r2, r3
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	801a      	strh	r2, [r3, #0]
	temp_right_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * right_ratio);
 8004cda:	f04f 0200 	mov.w	r2, #0
 8004cde:	4b0b      	ldr	r3, [pc, #44]	; (8004d0c <_ZN5Motor8setRatioEdd+0xe0>)
 8004ce0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004ce4:	f7fb fca0 	bl	8000628 <__aeabi_dmul>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	460b      	mov	r3, r1
 8004cec:	4610      	mov	r0, r2
 8004cee:	4619      	mov	r1, r3
 8004cf0:	f7fb ff4a 	bl	8000b88 <__aeabi_d2iz>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	b21a      	sxth	r2, r3
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	805a      	strh	r2, [r3, #2]

}
 8004cfc:	bf00      	nop
 8004cfe:	3718      	adds	r7, #24
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}
 8004d04:	3ff00000 	.word	0x3ff00000
 8004d08:	bff00000 	.word	0xbff00000
 8004d0c:	409c2000 	.word	0x409c2000

08004d10 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>:

#define DELTA_T 0.001

float monitor_x, monitor_y, monitor_theta;

Odometry::Odometry(Encoder *encoder, IMU *imu, VelocityCtrl *velocity_ctrl) : x_robot_(0), y_robot_(0), theta_(0), x_sens_(0), y_sens_(0)
 8004d10:	b480      	push	{r7}
 8004d12:	b085      	sub	sp, #20
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	60f8      	str	r0, [r7, #12]
 8004d18:	60b9      	str	r1, [r7, #8]
 8004d1a:	607a      	str	r2, [r7, #4]
 8004d1c:	603b      	str	r3, [r7, #0]
 8004d1e:	68f9      	ldr	r1, [r7, #12]
 8004d20:	f04f 0200 	mov.w	r2, #0
 8004d24:	f04f 0300 	mov.w	r3, #0
 8004d28:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8004d2c:	68f9      	ldr	r1, [r7, #12]
 8004d2e:	f04f 0200 	mov.w	r2, #0
 8004d32:	f04f 0300 	mov.w	r3, #0
 8004d36:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8004d3a:	68f9      	ldr	r1, [r7, #12]
 8004d3c:	f04f 0200 	mov.w	r2, #0
 8004d40:	f04f 0300 	mov.w	r3, #0
 8004d44:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8004d48:	68f9      	ldr	r1, [r7, #12]
 8004d4a:	f04f 0200 	mov.w	r2, #0
 8004d4e:	f04f 0300 	mov.w	r3, #0
 8004d52:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 8004d56:	68f9      	ldr	r1, [r7, #12]
 8004d58:	f04f 0200 	mov.w	r2, #0
 8004d5c:	f04f 0300 	mov.w	r3, #0
 8004d60:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
{
	encoder_ = encoder;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	68ba      	ldr	r2, [r7, #8]
 8004d68:	601a      	str	r2, [r3, #0]
	imu_ = imu;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	683a      	ldr	r2, [r7, #0]
 8004d74:	609a      	str	r2, [r3, #8]
}
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3714      	adds	r7, #20
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr
 8004d84:	0000      	movs	r0, r0
	...

08004d88 <_ZN8Odometry12calcPotitionEv>:


void Odometry::calcPotition()
{
 8004d88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d8c:	b086      	sub	sp, #24
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
	//float current_velocity = velocity_ctrl_->getCurrentVelocity();
	double current_omega = imu_->getOmega();
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	4618      	mov	r0, r3
 8004d98:	f7fc fe7e 	bl	8001a98 <_ZN3IMU8getOmegaEv>
 8004d9c:	ee10 3a10 	vmov	r3, s0
 8004da0:	4618      	mov	r0, r3
 8004da2:	f7fb fbe9 	bl	8000578 <__aeabi_f2d>
 8004da6:	4602      	mov	r2, r0
 8004da8:	460b      	mov	r3, r1
 8004daa:	e9c7 2304 	strd	r2, r3, [r7, #16]
	float distance = encoder_->getDistance();
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4618      	mov	r0, r3
 8004db4:	f7fc fb3c 	bl	8001430 <_ZN7Encoder11getDistanceEv>
 8004db8:	ed87 0a03 	vstr	s0, [r7, #12]

	delta_theta_ = current_omega * DELTA_T;
 8004dbc:	a374      	add	r3, pc, #464	; (adr r3, 8004f90 <_ZN8Odometry12calcPotitionEv+0x208>)
 8004dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004dc6:	f7fb fc2f 	bl	8000628 <__aeabi_dmul>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	460b      	mov	r3, r1
 8004dce:	6879      	ldr	r1, [r7, #4]
 8004dd0:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	x_robot_ = x_robot_ + distance * cos(theta_ + delta_theta_ / 2);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8004dda:	68f8      	ldr	r0, [r7, #12]
 8004ddc:	f7fb fbcc 	bl	8000578 <__aeabi_f2d>
 8004de0:	4682      	mov	sl, r0
 8004de2:	468b      	mov	fp, r1
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8004df0:	f04f 0200 	mov.w	r2, #0
 8004df4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004df8:	f7fb fd40 	bl	800087c <__aeabi_ddiv>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	460b      	mov	r3, r1
 8004e00:	4640      	mov	r0, r8
 8004e02:	4649      	mov	r1, r9
 8004e04:	f7fb fa5a 	bl	80002bc <__adddf3>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	460b      	mov	r3, r1
 8004e0c:	ec43 2b17 	vmov	d7, r2, r3
 8004e10:	eeb0 0a47 	vmov.f32	s0, s14
 8004e14:	eef0 0a67 	vmov.f32	s1, s15
 8004e18:	f00f fabe 	bl	8014398 <cos>
 8004e1c:	ec53 2b10 	vmov	r2, r3, d0
 8004e20:	4650      	mov	r0, sl
 8004e22:	4659      	mov	r1, fp
 8004e24:	f7fb fc00 	bl	8000628 <__aeabi_dmul>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	460b      	mov	r3, r1
 8004e2c:	4620      	mov	r0, r4
 8004e2e:	4629      	mov	r1, r5
 8004e30:	f7fb fa44 	bl	80002bc <__adddf3>
 8004e34:	4602      	mov	r2, r0
 8004e36:	460b      	mov	r3, r1
 8004e38:	6879      	ldr	r1, [r7, #4]
 8004e3a:	e9c1 2304 	strd	r2, r3, [r1, #16]
	y_robot_ = y_robot_ + distance * sin(theta_ + delta_theta_ / 2);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8004e44:	68f8      	ldr	r0, [r7, #12]
 8004e46:	f7fb fb97 	bl	8000578 <__aeabi_f2d>
 8004e4a:	4682      	mov	sl, r0
 8004e4c:	468b      	mov	fp, r1
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8004e5a:	f04f 0200 	mov.w	r2, #0
 8004e5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004e62:	f7fb fd0b 	bl	800087c <__aeabi_ddiv>
 8004e66:	4602      	mov	r2, r0
 8004e68:	460b      	mov	r3, r1
 8004e6a:	4640      	mov	r0, r8
 8004e6c:	4649      	mov	r1, r9
 8004e6e:	f7fb fa25 	bl	80002bc <__adddf3>
 8004e72:	4602      	mov	r2, r0
 8004e74:	460b      	mov	r3, r1
 8004e76:	ec43 2b17 	vmov	d7, r2, r3
 8004e7a:	eeb0 0a47 	vmov.f32	s0, s14
 8004e7e:	eef0 0a67 	vmov.f32	s1, s15
 8004e82:	f00f facd 	bl	8014420 <sin>
 8004e86:	ec53 2b10 	vmov	r2, r3, d0
 8004e8a:	4650      	mov	r0, sl
 8004e8c:	4659      	mov	r1, fp
 8004e8e:	f7fb fbcb 	bl	8000628 <__aeabi_dmul>
 8004e92:	4602      	mov	r2, r0
 8004e94:	460b      	mov	r3, r1
 8004e96:	4620      	mov	r0, r4
 8004e98:	4629      	mov	r1, r5
 8004e9a:	f7fb fa0f 	bl	80002bc <__adddf3>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	460b      	mov	r3, r1
 8004ea2:	6879      	ldr	r1, [r7, #4]
 8004ea4:	e9c1 2306 	strd	r2, r3, [r1, #24]
	theta_= theta_ + delta_theta_;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8004eb4:	f7fb fa02 	bl	80002bc <__adddf3>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	460b      	mov	r3, r1
 8004ebc:	6879      	ldr	r1, [r7, #4]
 8004ebe:	e9c1 2308 	strd	r2, r3, [r1, #32]

	x_sens_ = x_robot_ + SENSOR_LENGTH * cos(theta_); //calculate a sensor position from robot's center position
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	ed93 7b08 	vldr	d7, [r3, #32]
 8004ece:	eeb0 0a47 	vmov.f32	s0, s14
 8004ed2:	eef0 0a67 	vmov.f32	s1, s15
 8004ed6:	f00f fa5f 	bl	8014398 <cos>
 8004eda:	ec51 0b10 	vmov	r0, r1, d0
 8004ede:	f04f 0200 	mov.w	r2, #0
 8004ee2:	4b27      	ldr	r3, [pc, #156]	; (8004f80 <_ZN8Odometry12calcPotitionEv+0x1f8>)
 8004ee4:	f7fb fba0 	bl	8000628 <__aeabi_dmul>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	460b      	mov	r3, r1
 8004eec:	4620      	mov	r0, r4
 8004eee:	4629      	mov	r1, r5
 8004ef0:	f7fb f9e4 	bl	80002bc <__adddf3>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	460b      	mov	r3, r1
 8004ef8:	6879      	ldr	r1, [r7, #4]
 8004efa:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	y_sens_ = y_robot_ + SENSOR_LENGTH * sin(theta_);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	ed93 7b08 	vldr	d7, [r3, #32]
 8004f0a:	eeb0 0a47 	vmov.f32	s0, s14
 8004f0e:	eef0 0a67 	vmov.f32	s1, s15
 8004f12:	f00f fa85 	bl	8014420 <sin>
 8004f16:	ec51 0b10 	vmov	r0, r1, d0
 8004f1a:	f04f 0200 	mov.w	r2, #0
 8004f1e:	4b18      	ldr	r3, [pc, #96]	; (8004f80 <_ZN8Odometry12calcPotitionEv+0x1f8>)
 8004f20:	f7fb fb82 	bl	8000628 <__aeabi_dmul>
 8004f24:	4602      	mov	r2, r0
 8004f26:	460b      	mov	r3, r1
 8004f28:	4620      	mov	r0, r4
 8004f2a:	4629      	mov	r1, r5
 8004f2c:	f7fb f9c6 	bl	80002bc <__adddf3>
 8004f30:	4602      	mov	r2, r0
 8004f32:	460b      	mov	r3, r1
 8004f34:	6879      	ldr	r1, [r7, #4]
 8004f36:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

	monitor_x = x_sens_;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8004f40:	4610      	mov	r0, r2
 8004f42:	4619      	mov	r1, r3
 8004f44:	f7fb fe68 	bl	8000c18 <__aeabi_d2f>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	4a0e      	ldr	r2, [pc, #56]	; (8004f84 <_ZN8Odometry12calcPotitionEv+0x1fc>)
 8004f4c:	6013      	str	r3, [r2, #0]
	monitor_y = y_sens_;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8004f54:	4610      	mov	r0, r2
 8004f56:	4619      	mov	r1, r3
 8004f58:	f7fb fe5e 	bl	8000c18 <__aeabi_d2f>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	4a0a      	ldr	r2, [pc, #40]	; (8004f88 <_ZN8Odometry12calcPotitionEv+0x200>)
 8004f60:	6013      	str	r3, [r2, #0]
	monitor_theta = theta_;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004f68:	4610      	mov	r0, r2
 8004f6a:	4619      	mov	r1, r3
 8004f6c:	f7fb fe54 	bl	8000c18 <__aeabi_d2f>
 8004f70:	4603      	mov	r3, r0
 8004f72:	4a06      	ldr	r2, [pc, #24]	; (8004f8c <_ZN8Odometry12calcPotitionEv+0x204>)
 8004f74:	6013      	str	r3, [r2, #0]
}
 8004f76:	bf00      	nop
 8004f78:	3718      	adds	r7, #24
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f80:	405b8000 	.word	0x405b8000
 8004f84:	200002c0 	.word	0x200002c0
 8004f88:	200002c4 	.word	0x200002c4
 8004f8c:	200002c8 	.word	0x200002c8
 8004f90:	d2f1a9fc 	.word	0xd2f1a9fc
 8004f94:	3f50624d 	.word	0x3f50624d

08004f98 <_ZN8Odometry4flipEv>:

void Odometry::flip()
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b082      	sub	sp, #8
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
	calcPotition();
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f7ff fef1 	bl	8004d88 <_ZN8Odometry12calcPotitionEv>
}
 8004fa6:	bf00      	nop
 8004fa8:	3708      	adds	r7, #8
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}

08004fae <_ZN8Odometry8getThetaEv>:
{
	return y_sens_;
}

double Odometry::getTheta()
{
 8004fae:	b480      	push	{r7}
 8004fb0:	b083      	sub	sp, #12
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	6078      	str	r0, [r7, #4]
	return theta_;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004fbc:	ec43 2b17 	vmov	d7, r2, r3
}
 8004fc0:	eeb0 0a47 	vmov.f32	s0, s14
 8004fc4:	eef0 0a67 	vmov.f32	s1, s15
 8004fc8:	370c      	adds	r7, #12
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr

08004fd2 <_ZN8Odometry13clearPotitionEv>:
{
	return delta_theta_;
}

void Odometry::clearPotition()
{
 8004fd2:	b480      	push	{r7}
 8004fd4:	b083      	sub	sp, #12
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	6078      	str	r0, [r7, #4]
	x_sens_ = 0;
 8004fda:	6879      	ldr	r1, [r7, #4]
 8004fdc:	f04f 0200 	mov.w	r2, #0
 8004fe0:	f04f 0300 	mov.w	r3, #0
 8004fe4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	y_sens_ = 0;
 8004fe8:	6879      	ldr	r1, [r7, #4]
 8004fea:	f04f 0200 	mov.w	r2, #0
 8004fee:	f04f 0300 	mov.w	r3, #0
 8004ff2:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	theta_ = 0;
 8004ff6:	6879      	ldr	r1, [r7, #4]
 8004ff8:	f04f 0200 	mov.w	r2, #0
 8004ffc:	f04f 0300 	mov.w	r3, #0
 8005000:	e9c1 2308 	strd	r2, r3, [r1, #32]
}
 8005004:	bf00      	nop
 8005006:	370c      	adds	r7, #12
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr

08005010 <_ZN13PathFollowingC1Ev>:

uint16_t mon_ref_num;
double mon_x, mon_y, mon_th;
double mon_log_dis, mon_log_th;

PathFollowing::PathFollowing() : execute_flag_(false), x_tar_(0), y_tar_(0), th_tar_(0), ref_num(0)
 8005010:	b480      	push	{r7}
 8005012:	b083      	sub	sp, #12
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	701a      	strb	r2, [r3, #0]
 800501e:	6879      	ldr	r1, [r7, #4]
 8005020:	f04f 0200 	mov.w	r2, #0
 8005024:	f04f 0300 	mov.w	r3, #0
 8005028:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800502c:	6879      	ldr	r1, [r7, #4]
 800502e:	f04f 0200 	mov.w	r2, #0
 8005032:	f04f 0300 	mov.w	r3, #0
 8005036:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800503a:	6879      	ldr	r1, [r7, #4]
 800503c:	f04f 0200 	mov.w	r2, #0
 8005040:	f04f 0300 	mov.w	r3, #0
 8005044:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800504e:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8005052:	2200      	movs	r2, #0
 8005054:	801a      	strh	r2, [r3, #0]
{
	rtParam.kx = 0;
 8005056:	492a      	ldr	r1, [pc, #168]	; (8005100 <_ZN13PathFollowingC1Ev+0xf0>)
 8005058:	f04f 0200 	mov.w	r2, #0
 800505c:	f04f 0300 	mov.w	r3, #0
 8005060:	e9c1 2300 	strd	r2, r3, [r1]
	rtParam.ky = 0;
 8005064:	4926      	ldr	r1, [pc, #152]	; (8005100 <_ZN13PathFollowingC1Ev+0xf0>)
 8005066:	f04f 0200 	mov.w	r2, #0
 800506a:	f04f 0300 	mov.w	r3, #0
 800506e:	e9c1 2302 	strd	r2, r3, [r1, #8]
	rtParam.kt = 0;
 8005072:	4923      	ldr	r1, [pc, #140]	; (8005100 <_ZN13PathFollowingC1Ev+0xf0>)
 8005074:	f04f 0200 	mov.w	r2, #0
 8005078:	f04f 0300 	mov.w	r3, #0
 800507c:	e9c1 2304 	strd	r2, r3, [r1, #16]
	rtU.target_x = 0;
 8005080:	4920      	ldr	r1, [pc, #128]	; (8005104 <_ZN13PathFollowingC1Ev+0xf4>)
 8005082:	f04f 0200 	mov.w	r2, #0
 8005086:	f04f 0300 	mov.w	r3, #0
 800508a:	e9c1 2300 	strd	r2, r3, [r1]
	rtU.target_y = 0;
 800508e:	491d      	ldr	r1, [pc, #116]	; (8005104 <_ZN13PathFollowingC1Ev+0xf4>)
 8005090:	f04f 0200 	mov.w	r2, #0
 8005094:	f04f 0300 	mov.w	r3, #0
 8005098:	e9c1 2302 	strd	r2, r3, [r1, #8]
	rtU.th = 0;
 800509c:	4919      	ldr	r1, [pc, #100]	; (8005104 <_ZN13PathFollowingC1Ev+0xf4>)
 800509e:	f04f 0200 	mov.w	r2, #0
 80050a2:	f04f 0300 	mov.w	r3, #0
 80050a6:	e9c1 2304 	strd	r2, r3, [r1, #16]
	rtU.x = 0;
 80050aa:	4916      	ldr	r1, [pc, #88]	; (8005104 <_ZN13PathFollowingC1Ev+0xf4>)
 80050ac:	f04f 0200 	mov.w	r2, #0
 80050b0:	f04f 0300 	mov.w	r3, #0
 80050b4:	e9c1 2306 	strd	r2, r3, [r1, #24]
	rtU.y = 0;
 80050b8:	4912      	ldr	r1, [pc, #72]	; (8005104 <_ZN13PathFollowingC1Ev+0xf4>)
 80050ba:	f04f 0200 	mov.w	r2, #0
 80050be:	f04f 0300 	mov.w	r3, #0
 80050c2:	e9c1 2308 	strd	r2, r3, [r1, #32]
	rtU.th_cur = 0;
 80050c6:	490f      	ldr	r1, [pc, #60]	; (8005104 <_ZN13PathFollowingC1Ev+0xf4>)
 80050c8:	f04f 0200 	mov.w	r2, #0
 80050cc:	f04f 0300 	mov.w	r3, #0
 80050d0:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	rtY.V_tar = 0;
 80050d4:	490c      	ldr	r1, [pc, #48]	; (8005108 <_ZN13PathFollowingC1Ev+0xf8>)
 80050d6:	f04f 0200 	mov.w	r2, #0
 80050da:	f04f 0300 	mov.w	r3, #0
 80050de:	e9c1 2300 	strd	r2, r3, [r1]
	rtY.tar = 0;
 80050e2:	4909      	ldr	r1, [pc, #36]	; (8005108 <_ZN13PathFollowingC1Ev+0xf8>)
 80050e4:	f04f 0200 	mov.w	r2, #0
 80050e8:	f04f 0300 	mov.w	r3, #0
 80050ec:	e9c1 2302 	strd	r2, r3, [r1, #8]

}
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	4618      	mov	r0, r3
 80050f4:	370c      	adds	r7, #12
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr
 80050fe:	bf00      	nop
 8005100:	2003fe28 	.word	0x2003fe28
 8005104:	2003fdb8 	.word	0x2003fdb8
 8005108:	2003fe18 	.word	0x2003fe18

0800510c <_ZN13PathFollowing4initEv>:
	}

}

void PathFollowing::init()
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b088      	sub	sp, #32
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
	path_following_initialize();
 8005114:	f001 fcaf 	bl	8006a76 <path_following_initialize>

	double temp_kx, temp_ky, temp_kt;
	sd_read_array_double("PARAMS", "KX.TXT", 1, &temp_kx);
 8005118:	f107 0318 	add.w	r3, r7, #24
 800511c:	2201      	movs	r2, #1
 800511e:	4915      	ldr	r1, [pc, #84]	; (8005174 <_ZN13PathFollowing4initEv+0x68>)
 8005120:	4815      	ldr	r0, [pc, #84]	; (8005178 <_ZN13PathFollowing4initEv+0x6c>)
 8005122:	f7fc faa7 	bl	8001674 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KY.TXT", 1, &temp_ky);
 8005126:	f107 0310 	add.w	r3, r7, #16
 800512a:	2201      	movs	r2, #1
 800512c:	4913      	ldr	r1, [pc, #76]	; (800517c <_ZN13PathFollowing4initEv+0x70>)
 800512e:	4812      	ldr	r0, [pc, #72]	; (8005178 <_ZN13PathFollowing4initEv+0x6c>)
 8005130:	f7fc faa0 	bl	8001674 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KT.TXT", 1, &temp_kt);
 8005134:	f107 0308 	add.w	r3, r7, #8
 8005138:	2201      	movs	r2, #1
 800513a:	4911      	ldr	r1, [pc, #68]	; (8005180 <_ZN13PathFollowing4initEv+0x74>)
 800513c:	480e      	ldr	r0, [pc, #56]	; (8005178 <_ZN13PathFollowing4initEv+0x6c>)
 800513e:	f7fc fa99 	bl	8001674 <sd_read_array_double>
	setGain(temp_kx, temp_ky, temp_kt);
 8005142:	ed97 7b06 	vldr	d7, [r7, #24]
 8005146:	ed97 6b04 	vldr	d6, [r7, #16]
 800514a:	ed97 5b02 	vldr	d5, [r7, #8]
 800514e:	eeb0 2a45 	vmov.f32	s4, s10
 8005152:	eef0 2a65 	vmov.f32	s5, s11
 8005156:	eeb0 1a46 	vmov.f32	s2, s12
 800515a:	eef0 1a66 	vmov.f32	s3, s13
 800515e:	eeb0 0a47 	vmov.f32	s0, s14
 8005162:	eef0 0a67 	vmov.f32	s1, s15
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f000 f80c 	bl	8005184 <_ZN13PathFollowing7setGainEddd>
}
 800516c:	bf00      	nop
 800516e:	3720      	adds	r7, #32
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}
 8005174:	08019e60 	.word	0x08019e60
 8005178:	08019e68 	.word	0x08019e68
 800517c:	08019e70 	.word	0x08019e70
 8005180:	08019e78 	.word	0x08019e78

08005184 <_ZN13PathFollowing7setGainEddd>:

void PathFollowing::setGain(double kx, double ky, double kt)
{
 8005184:	b480      	push	{r7}
 8005186:	b089      	sub	sp, #36	; 0x24
 8005188:	af00      	add	r7, sp, #0
 800518a:	61f8      	str	r0, [r7, #28]
 800518c:	ed87 0b04 	vstr	d0, [r7, #16]
 8005190:	ed87 1b02 	vstr	d1, [r7, #8]
 8005194:	ed87 2b00 	vstr	d2, [r7]
	rtParam.kx = kx;
 8005198:	490a      	ldr	r1, [pc, #40]	; (80051c4 <_ZN13PathFollowing7setGainEddd+0x40>)
 800519a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800519e:	e9c1 2300 	strd	r2, r3, [r1]
	rtParam.ky = ky;
 80051a2:	4908      	ldr	r1, [pc, #32]	; (80051c4 <_ZN13PathFollowing7setGainEddd+0x40>)
 80051a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80051a8:	e9c1 2302 	strd	r2, r3, [r1, #8]
	rtParam.kt = kt;
 80051ac:	4905      	ldr	r1, [pc, #20]	; (80051c4 <_ZN13PathFollowing7setGainEddd+0x40>)
 80051ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051b2:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 80051b6:	bf00      	nop
 80051b8:	3724      	adds	r7, #36	; 0x24
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr
 80051c2:	bf00      	nop
 80051c4:	2003fe28 	.word	0x2003fe28

080051c8 <_ZN11PowerSensor4initEv>:
#define LOW_VOLTAGE_THRESHOLD 7.4

float monitor_voltage;

void PowerSensor::init()
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b082      	sub	sp, #8
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT);
 80051d0:	2088      	movs	r0, #136	; 0x88
 80051d2:	f7fc fda4 	bl	8001d1e <INA260_init>
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT);
 80051d6:	2080      	movs	r0, #128	; 0x80
 80051d8:	f7fc fda1 	bl	8001d1e <INA260_init>
}
 80051dc:	bf00      	nop
 80051de:	3708      	adds	r7, #8
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}
 80051e4:	0000      	movs	r0, r0
	...

080051e8 <_ZN11PowerSensor12updateValuesEv>:

void PowerSensor::updateValues()
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b082      	sub	sp, #8
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
	//current_l_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
	//current_r_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT) * 0.00125;
	buttery_voltage_ = INA260_read(0x02, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
 80051f0:	2188      	movs	r1, #136	; 0x88
 80051f2:	2002      	movs	r0, #2
 80051f4:	f7fc fd30 	bl	8001c58 <INA260_read>
 80051f8:	4603      	mov	r3, r0
 80051fa:	4618      	mov	r0, r3
 80051fc:	f7fb f9aa 	bl	8000554 <__aeabi_i2d>
 8005200:	a30c      	add	r3, pc, #48	; (adr r3, 8005234 <_ZN11PowerSensor12updateValuesEv+0x4c>)
 8005202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005206:	f7fb fa0f 	bl	8000628 <__aeabi_dmul>
 800520a:	4602      	mov	r2, r0
 800520c:	460b      	mov	r3, r1
 800520e:	4610      	mov	r0, r2
 8005210:	4619      	mov	r1, r3
 8005212:	f7fb fd01 	bl	8000c18 <__aeabi_d2f>
 8005216:	4602      	mov	r2, r0
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	609a      	str	r2, [r3, #8]

	monitor_voltage = buttery_voltage_;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	4a03      	ldr	r2, [pc, #12]	; (8005230 <_ZN11PowerSensor12updateValuesEv+0x48>)
 8005222:	6013      	str	r3, [r2, #0]
}
 8005224:	bf00      	nop
 8005226:	3708      	adds	r7, #8
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}
 800522c:	f3af 8000 	nop.w
 8005230:	200002cc 	.word	0x200002cc
 8005234:	47ae147b 	.word	0x47ae147b
 8005238:	3f547ae1 	.word	0x3f547ae1

0800523c <_ZN11PowerSensor17getButteryVoltageEv>:
	left = current_l_;
	right = current_r_;
}

float PowerSensor::getButteryVoltage()
{
 800523c:	b480      	push	{r7}
 800523e:	b083      	sub	sp, #12
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
	return buttery_voltage_;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	ee07 3a90 	vmov	s15, r3

}
 800524c:	eeb0 0a67 	vmov.f32	s0, s15
 8005250:	370c      	adds	r7, #12
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr
	...

0800525c <_ZN12RotarySwitch8getValueEv>:

#include "RotarySwitch.hpp"


uint16_t RotarySwitch::getValue()
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b084      	sub	sp, #16
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8005264:	2300      	movs	r3, #0
 8005266:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_1))	ret_value |= 0x01;
 8005268:	2102      	movs	r1, #2
 800526a:	4822      	ldr	r0, [pc, #136]	; (80052f4 <_ZN12RotarySwitch8getValueEv+0x98>)
 800526c:	f005 fdde 	bl	800ae2c <HAL_GPIO_ReadPin>
 8005270:	4603      	mov	r3, r0
 8005272:	2b00      	cmp	r3, #0
 8005274:	bf0c      	ite	eq
 8005276:	2301      	moveq	r3, #1
 8005278:	2300      	movne	r3, #0
 800527a:	b2db      	uxtb	r3, r3
 800527c:	2b00      	cmp	r3, #0
 800527e:	d003      	beq.n	8005288 <_ZN12RotarySwitch8getValueEv+0x2c>
 8005280:	89fb      	ldrh	r3, [r7, #14]
 8005282:	f043 0301 	orr.w	r3, r3, #1
 8005286:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_3))	ret_value |= 0x02;
 8005288:	2108      	movs	r1, #8
 800528a:	481a      	ldr	r0, [pc, #104]	; (80052f4 <_ZN12RotarySwitch8getValueEv+0x98>)
 800528c:	f005 fdce 	bl	800ae2c <HAL_GPIO_ReadPin>
 8005290:	4603      	mov	r3, r0
 8005292:	2b00      	cmp	r3, #0
 8005294:	bf0c      	ite	eq
 8005296:	2301      	moveq	r3, #1
 8005298:	2300      	movne	r3, #0
 800529a:	b2db      	uxtb	r3, r3
 800529c:	2b00      	cmp	r3, #0
 800529e:	d003      	beq.n	80052a8 <_ZN12RotarySwitch8getValueEv+0x4c>
 80052a0:	89fb      	ldrh	r3, [r7, #14]
 80052a2:	f043 0302 	orr.w	r3, r3, #2
 80052a6:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_4))	ret_value |= 0x04;
 80052a8:	2110      	movs	r1, #16
 80052aa:	4812      	ldr	r0, [pc, #72]	; (80052f4 <_ZN12RotarySwitch8getValueEv+0x98>)
 80052ac:	f005 fdbe 	bl	800ae2c <HAL_GPIO_ReadPin>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	bf0c      	ite	eq
 80052b6:	2301      	moveq	r3, #1
 80052b8:	2300      	movne	r3, #0
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d003      	beq.n	80052c8 <_ZN12RotarySwitch8getValueEv+0x6c>
 80052c0:	89fb      	ldrh	r3, [r7, #14]
 80052c2:	f043 0304 	orr.w	r3, r3, #4
 80052c6:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7))	ret_value |= 0x08;
 80052c8:	2180      	movs	r1, #128	; 0x80
 80052ca:	480a      	ldr	r0, [pc, #40]	; (80052f4 <_ZN12RotarySwitch8getValueEv+0x98>)
 80052cc:	f005 fdae 	bl	800ae2c <HAL_GPIO_ReadPin>
 80052d0:	4603      	mov	r3, r0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	bf0c      	ite	eq
 80052d6:	2301      	moveq	r3, #1
 80052d8:	2300      	movne	r3, #0
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d003      	beq.n	80052e8 <_ZN12RotarySwitch8getValueEv+0x8c>
 80052e0:	89fb      	ldrh	r3, [r7, #14]
 80052e2:	f043 0308 	orr.w	r3, r3, #8
 80052e6:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 80052e8:	89fb      	ldrh	r3, [r7, #14]

}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3710      	adds	r7, #16
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
 80052f2:	bf00      	nop
 80052f4:	40020c00 	.word	0x40020c00

080052f8 <_ZN10SideSensorC1Ev>:
#include "SideSensor.hpp"

uint16_t mon_status;
uint16_t mon_cnt_l, mon_cnt_r;

SideSensor::SideSensor() : status_(0), white_line_cnt_l_(0), white_line_cnt_r_(0), ignore_flag_(false)
 80052f8:	b480      	push	{r7}
 80052fa:	b083      	sub	sp, #12
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2200      	movs	r2, #0
 8005304:	801a      	strh	r2, [r3, #0]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2200      	movs	r2, #0
 800530a:	805a      	strh	r2, [r3, #2]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2200      	movs	r2, #0
 8005310:	809a      	strh	r2, [r3, #4]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	719a      	strb	r2, [r3, #6]
{

}
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	4618      	mov	r0, r3
 800531c:	370c      	adds	r7, #12
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr
	...

08005328 <_ZN10SideSensor12updateStatusEv>:
	}

}

void SideSensor::updateStatus()
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b082      	sub	sp, #8
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
	static bool white_flag1 = false;
	static bool white_flag2 = false;
	static uint16_t cnt_l, cnt_r;

	if(ignore_flag_ == false){
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	799b      	ldrb	r3, [r3, #6]
 8005334:	2b00      	cmp	r3, #0
 8005336:	f040 80c1 	bne.w	80054bc <_ZN10SideSensor12updateStatusEv+0x194>

		if(white_flag1 == false){
 800533a:	4b62      	ldr	r3, [pc, #392]	; (80054c4 <_ZN10SideSensor12updateStatusEv+0x19c>)
 800533c:	781b      	ldrb	r3, [r3, #0]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d127      	bne.n	8005392 <_ZN10SideSensor12updateStatusEv+0x6a>
			if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)){
 8005342:	2104      	movs	r1, #4
 8005344:	4860      	ldr	r0, [pc, #384]	; (80054c8 <_ZN10SideSensor12updateStatusEv+0x1a0>)
 8005346:	f005 fd71 	bl	800ae2c <HAL_GPIO_ReadPin>
 800534a:	4603      	mov	r3, r0
 800534c:	2b00      	cmp	r3, #0
 800534e:	bf0c      	ite	eq
 8005350:	2301      	moveq	r3, #1
 8005352:	2300      	movne	r3, #0
 8005354:	b2db      	uxtb	r3, r3
 8005356:	2b00      	cmp	r3, #0
 8005358:	d006      	beq.n	8005368 <_ZN10SideSensor12updateStatusEv+0x40>
				cnt_r++;
 800535a:	4b5c      	ldr	r3, [pc, #368]	; (80054cc <_ZN10SideSensor12updateStatusEv+0x1a4>)
 800535c:	881b      	ldrh	r3, [r3, #0]
 800535e:	3301      	adds	r3, #1
 8005360:	b29a      	uxth	r2, r3
 8005362:	4b5a      	ldr	r3, [pc, #360]	; (80054cc <_ZN10SideSensor12updateStatusEv+0x1a4>)
 8005364:	801a      	strh	r2, [r3, #0]
 8005366:	e002      	b.n	800536e <_ZN10SideSensor12updateStatusEv+0x46>
			}
			else{
				cnt_r = 0;
 8005368:	4b58      	ldr	r3, [pc, #352]	; (80054cc <_ZN10SideSensor12updateStatusEv+0x1a4>)
 800536a:	2200      	movs	r2, #0
 800536c:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 5){
 800536e:	4b57      	ldr	r3, [pc, #348]	; (80054cc <_ZN10SideSensor12updateStatusEv+0x1a4>)
 8005370:	881b      	ldrh	r3, [r3, #0]
 8005372:	2b04      	cmp	r3, #4
 8005374:	d93f      	bls.n	80053f6 <_ZN10SideSensor12updateStatusEv+0xce>
				status_ |= 0x01;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	881b      	ldrh	r3, [r3, #0]
 800537a:	f043 0301 	orr.w	r3, r3, #1
 800537e:	b29a      	uxth	r2, r3
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	801a      	strh	r2, [r3, #0]
				white_flag1 = true;
 8005384:	4b4f      	ldr	r3, [pc, #316]	; (80054c4 <_ZN10SideSensor12updateStatusEv+0x19c>)
 8005386:	2201      	movs	r2, #1
 8005388:	701a      	strb	r2, [r3, #0]
				cnt_r = 0;
 800538a:	4b50      	ldr	r3, [pc, #320]	; (80054cc <_ZN10SideSensor12updateStatusEv+0x1a4>)
 800538c:	2200      	movs	r2, #0
 800538e:	801a      	strh	r2, [r3, #0]
 8005390:	e031      	b.n	80053f6 <_ZN10SideSensor12updateStatusEv+0xce>
			}

		}
		else if(white_flag1 == true){
 8005392:	4b4c      	ldr	r3, [pc, #304]	; (80054c4 <_ZN10SideSensor12updateStatusEv+0x19c>)
 8005394:	781b      	ldrb	r3, [r3, #0]
 8005396:	2b01      	cmp	r3, #1
 8005398:	d12d      	bne.n	80053f6 <_ZN10SideSensor12updateStatusEv+0xce>
			if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)){
 800539a:	2104      	movs	r1, #4
 800539c:	484a      	ldr	r0, [pc, #296]	; (80054c8 <_ZN10SideSensor12updateStatusEv+0x1a0>)
 800539e:	f005 fd45 	bl	800ae2c <HAL_GPIO_ReadPin>
 80053a2:	4603      	mov	r3, r0
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	bf14      	ite	ne
 80053a8:	2301      	movne	r3, #1
 80053aa:	2300      	moveq	r3, #0
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d006      	beq.n	80053c0 <_ZN10SideSensor12updateStatusEv+0x98>
				cnt_r++;
 80053b2:	4b46      	ldr	r3, [pc, #280]	; (80054cc <_ZN10SideSensor12updateStatusEv+0x1a4>)
 80053b4:	881b      	ldrh	r3, [r3, #0]
 80053b6:	3301      	adds	r3, #1
 80053b8:	b29a      	uxth	r2, r3
 80053ba:	4b44      	ldr	r3, [pc, #272]	; (80054cc <_ZN10SideSensor12updateStatusEv+0x1a4>)
 80053bc:	801a      	strh	r2, [r3, #0]
 80053be:	e002      	b.n	80053c6 <_ZN10SideSensor12updateStatusEv+0x9e>
			}
			else{
				cnt_r = 0;
 80053c0:	4b42      	ldr	r3, [pc, #264]	; (80054cc <_ZN10SideSensor12updateStatusEv+0x1a4>)
 80053c2:	2200      	movs	r2, #0
 80053c4:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 5){
 80053c6:	4b41      	ldr	r3, [pc, #260]	; (80054cc <_ZN10SideSensor12updateStatusEv+0x1a4>)
 80053c8:	881b      	ldrh	r3, [r3, #0]
 80053ca:	2b04      	cmp	r3, #4
 80053cc:	d913      	bls.n	80053f6 <_ZN10SideSensor12updateStatusEv+0xce>
				status_ ^= 0x01;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	881b      	ldrh	r3, [r3, #0]
 80053d2:	f083 0301 	eor.w	r3, r3, #1
 80053d6:	b29a      	uxth	r2, r3
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	801a      	strh	r2, [r3, #0]
				white_flag1 = false;
 80053dc:	4b39      	ldr	r3, [pc, #228]	; (80054c4 <_ZN10SideSensor12updateStatusEv+0x19c>)
 80053de:	2200      	movs	r2, #0
 80053e0:	701a      	strb	r2, [r3, #0]

				white_line_cnt_r_++;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	889b      	ldrh	r3, [r3, #4]
 80053e6:	3301      	adds	r3, #1
 80053e8:	b29a      	uxth	r2, r3
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	809a      	strh	r2, [r3, #4]
				mon_cnt_r = white_line_cnt_r_;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	889a      	ldrh	r2, [r3, #4]
 80053f2:	4b37      	ldr	r3, [pc, #220]	; (80054d0 <_ZN10SideSensor12updateStatusEv+0x1a8>)
 80053f4:	801a      	strh	r2, [r3, #0]
			}
		}


		if(white_flag2 == false){
 80053f6:	4b37      	ldr	r3, [pc, #220]	; (80054d4 <_ZN10SideSensor12updateStatusEv+0x1ac>)
 80053f8:	781b      	ldrb	r3, [r3, #0]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d127      	bne.n	800544e <_ZN10SideSensor12updateStatusEv+0x126>
			if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8)){
 80053fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005402:	4835      	ldr	r0, [pc, #212]	; (80054d8 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 8005404:	f005 fd12 	bl	800ae2c <HAL_GPIO_ReadPin>
 8005408:	4603      	mov	r3, r0
 800540a:	2b00      	cmp	r3, #0
 800540c:	bf0c      	ite	eq
 800540e:	2301      	moveq	r3, #1
 8005410:	2300      	movne	r3, #0
 8005412:	b2db      	uxtb	r3, r3
 8005414:	2b00      	cmp	r3, #0
 8005416:	d006      	beq.n	8005426 <_ZN10SideSensor12updateStatusEv+0xfe>
				cnt_l++;
 8005418:	4b30      	ldr	r3, [pc, #192]	; (80054dc <_ZN10SideSensor12updateStatusEv+0x1b4>)
 800541a:	881b      	ldrh	r3, [r3, #0]
 800541c:	3301      	adds	r3, #1
 800541e:	b29a      	uxth	r2, r3
 8005420:	4b2e      	ldr	r3, [pc, #184]	; (80054dc <_ZN10SideSensor12updateStatusEv+0x1b4>)
 8005422:	801a      	strh	r2, [r3, #0]
 8005424:	e002      	b.n	800542c <_ZN10SideSensor12updateStatusEv+0x104>
			}
			else{
				cnt_l = 0;
 8005426:	4b2d      	ldr	r3, [pc, #180]	; (80054dc <_ZN10SideSensor12updateStatusEv+0x1b4>)
 8005428:	2200      	movs	r2, #0
 800542a:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_l >= 5){
 800542c:	4b2b      	ldr	r3, [pc, #172]	; (80054dc <_ZN10SideSensor12updateStatusEv+0x1b4>)
 800542e:	881b      	ldrh	r3, [r3, #0]
 8005430:	2b04      	cmp	r3, #4
 8005432:	d90c      	bls.n	800544e <_ZN10SideSensor12updateStatusEv+0x126>
				status_ |= 0x02;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	881b      	ldrh	r3, [r3, #0]
 8005438:	f043 0302 	orr.w	r3, r3, #2
 800543c:	b29a      	uxth	r2, r3
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	801a      	strh	r2, [r3, #0]
				white_flag2 = true;
 8005442:	4b24      	ldr	r3, [pc, #144]	; (80054d4 <_ZN10SideSensor12updateStatusEv+0x1ac>)
 8005444:	2201      	movs	r2, #1
 8005446:	701a      	strb	r2, [r3, #0]
				cnt_l = 0;
 8005448:	4b24      	ldr	r3, [pc, #144]	; (80054dc <_ZN10SideSensor12updateStatusEv+0x1b4>)
 800544a:	2200      	movs	r2, #0
 800544c:	801a      	strh	r2, [r3, #0]
			}

		}
		if(white_flag2 == true){
 800544e:	4b21      	ldr	r3, [pc, #132]	; (80054d4 <_ZN10SideSensor12updateStatusEv+0x1ac>)
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	2b01      	cmp	r3, #1
 8005454:	d12e      	bne.n	80054b4 <_ZN10SideSensor12updateStatusEv+0x18c>
			if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8)){
 8005456:	f44f 7180 	mov.w	r1, #256	; 0x100
 800545a:	481f      	ldr	r0, [pc, #124]	; (80054d8 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 800545c:	f005 fce6 	bl	800ae2c <HAL_GPIO_ReadPin>
 8005460:	4603      	mov	r3, r0
 8005462:	2b00      	cmp	r3, #0
 8005464:	bf14      	ite	ne
 8005466:	2301      	movne	r3, #1
 8005468:	2300      	moveq	r3, #0
 800546a:	b2db      	uxtb	r3, r3
 800546c:	2b00      	cmp	r3, #0
 800546e:	d006      	beq.n	800547e <_ZN10SideSensor12updateStatusEv+0x156>
				cnt_l++;
 8005470:	4b1a      	ldr	r3, [pc, #104]	; (80054dc <_ZN10SideSensor12updateStatusEv+0x1b4>)
 8005472:	881b      	ldrh	r3, [r3, #0]
 8005474:	3301      	adds	r3, #1
 8005476:	b29a      	uxth	r2, r3
 8005478:	4b18      	ldr	r3, [pc, #96]	; (80054dc <_ZN10SideSensor12updateStatusEv+0x1b4>)
 800547a:	801a      	strh	r2, [r3, #0]
 800547c:	e002      	b.n	8005484 <_ZN10SideSensor12updateStatusEv+0x15c>
			}
			else{
				cnt_l = 0;
 800547e:	4b17      	ldr	r3, [pc, #92]	; (80054dc <_ZN10SideSensor12updateStatusEv+0x1b4>)
 8005480:	2200      	movs	r2, #0
 8005482:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_l >= 5){
 8005484:	4b15      	ldr	r3, [pc, #84]	; (80054dc <_ZN10SideSensor12updateStatusEv+0x1b4>)
 8005486:	881b      	ldrh	r3, [r3, #0]
 8005488:	2b04      	cmp	r3, #4
 800548a:	d913      	bls.n	80054b4 <_ZN10SideSensor12updateStatusEv+0x18c>
				status_ ^= 0x02;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	881b      	ldrh	r3, [r3, #0]
 8005490:	f083 0302 	eor.w	r3, r3, #2
 8005494:	b29a      	uxth	r2, r3
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	801a      	strh	r2, [r3, #0]
				white_flag2 = false;
 800549a:	4b0e      	ldr	r3, [pc, #56]	; (80054d4 <_ZN10SideSensor12updateStatusEv+0x1ac>)
 800549c:	2200      	movs	r2, #0
 800549e:	701a      	strb	r2, [r3, #0]

				white_line_cnt_l_++;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	885b      	ldrh	r3, [r3, #2]
 80054a4:	3301      	adds	r3, #1
 80054a6:	b29a      	uxth	r2, r3
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	805a      	strh	r2, [r3, #2]
				mon_cnt_l = white_line_cnt_l_;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	885a      	ldrh	r2, [r3, #2]
 80054b0:	4b0b      	ldr	r3, [pc, #44]	; (80054e0 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 80054b2:	801a      	strh	r2, [r3, #0]
			}

		}

		mon_status = status_;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	881a      	ldrh	r2, [r3, #0]
 80054b8:	4b0a      	ldr	r3, [pc, #40]	; (80054e4 <_ZN10SideSensor12updateStatusEv+0x1bc>)
 80054ba:	801a      	strh	r2, [r3, #0]
	}

}
 80054bc:	bf00      	nop
 80054be:	3708      	adds	r7, #8
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}
 80054c4:	200002d6 	.word	0x200002d6
 80054c8:	40021000 	.word	0x40021000
 80054cc:	200002da 	.word	0x200002da
 80054d0:	200002d4 	.word	0x200002d4
 80054d4:	200002d7 	.word	0x200002d7
 80054d8:	40020c00 	.word	0x40020c00
 80054dc:	200002d8 	.word	0x200002d8
 80054e0:	200002d2 	.word	0x200002d2
 80054e4:	200002d0 	.word	0x200002d0

080054e8 <_ZN10SideSensor9getStatusEv>:
uint16_t SideSensor::getStatus()
{
 80054e8:	b480      	push	{r7}
 80054ea:	b083      	sub	sp, #12
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
	return status_;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	881b      	ldrh	r3, [r3, #0]
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	370c      	adds	r7, #12
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr

08005500 <_ZN10SideSensor16getWhiteLineCntREv>:
{
	return white_line_cnt_l_;
}

uint16_t SideSensor::getWhiteLineCntR()
{
 8005500:	b480      	push	{r7}
 8005502:	b083      	sub	sp, #12
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
	return white_line_cnt_r_;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	889b      	ldrh	r3, [r3, #4]
}
 800550c:	4618      	mov	r0, r3
 800550e:	370c      	adds	r7, #12
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr

08005518 <_ZN10SideSensor17resetWhiteLineCntEv>:

void SideSensor::resetWhiteLineCnt()
{
 8005518:	b480      	push	{r7}
 800551a:	b083      	sub	sp, #12
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
	white_line_cnt_l_ = 0;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2200      	movs	r2, #0
 8005524:	805a      	strh	r2, [r3, #2]
	white_line_cnt_r_ = 0;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	809a      	strh	r2, [r3, #4]
}
 800552c:	bf00      	nop
 800552e:	370c      	adds	r7, #12
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr

08005538 <_ZN10SideSensor12enableIgnoreEv>:

void SideSensor::enableIgnore()
{
 8005538:	b480      	push	{r7}
 800553a:	b083      	sub	sp, #12
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
	ignore_flag_ = true;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	719a      	strb	r2, [r3, #6]
}
 8005546:	bf00      	nop
 8005548:	370c      	adds	r7, #12
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr

08005552 <_ZN10SideSensor13disableIgnoreEv>:

void SideSensor::disableIgnore()
{
 8005552:	b480      	push	{r7}
 8005554:	b083      	sub	sp, #12
 8005556:	af00      	add	r7, sp, #0
 8005558:	6078      	str	r0, [r7, #4]
	ignore_flag_ = false;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2200      	movs	r2, #0
 800555e:	719a      	strb	r2, [r3, #6]
}
 8005560:	bf00      	nop
 8005562:	370c      	adds	r7, #12
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr

0800556c <_ZN10SideSensor13getIgnoreFlagEv>:

bool SideSensor::getIgnoreFlag()
{
 800556c:	b480      	push	{r7}
 800556e:	b083      	sub	sp, #12
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
	return ignore_flag_;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	799b      	ldrb	r3, [r3, #6]
}
 8005578:	4618      	mov	r0, r3
 800557a:	370c      	adds	r7, #12
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr

08005584 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>:

#include "SystemIdentification.hpp"

float mon_msig;

SystemIdentification::SystemIdentification(Logger *logger, Motor *motor) : msigArrayIdx_(0), inputVal_(0), processing_flag_(false)
 8005584:	b580      	push	{r7, lr}
 8005586:	b084      	sub	sp, #16
 8005588:	af00      	add	r7, sp, #0
 800558a:	60f8      	str	r0, [r7, #12]
 800558c:	60b9      	str	r1, [r7, #8]
 800558e:	607a      	str	r2, [r7, #4]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	4a10      	ldr	r2, [pc, #64]	; (80055d4 <_ZN20SystemIdentificationC1EP6LoggerP5Motor+0x50>)
 8005594:	3308      	adds	r3, #8
 8005596:	4611      	mov	r1, r2
 8005598:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800559c:	4618      	mov	r0, r3
 800559e:	f010 f97b 	bl	8015898 <memcpy>
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2200      	movs	r2, #0
 80055a6:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	f04f 0200 	mov.w	r2, #0
 80055b0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2200      	movs	r2, #0
 80055b8:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
{
	logger_ = logger;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	68ba      	ldr	r2, [r7, #8]
 80055c0:	601a      	str	r2, [r3, #0]
	motor_ = motor;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	605a      	str	r2, [r3, #4]
	//msigItr_ = msigArray_.begin();
}
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	4618      	mov	r0, r3
 80055cc:	3710      	adds	r7, #16
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	bf00      	nop
 80055d4:	08019e9c 	.word	0x08019e9c

080055d8 <_ZN20SystemIdentification13inOutputStoreEf>:
{

}

void SystemIdentification::inOutputStore(float output)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b082      	sub	sp, #8
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	ed87 0a00 	vstr	s0, [r7]
	if(processing_flag_ == true){
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d110      	bne.n	8005610 <_ZN20SystemIdentification13inOutputStoreEf+0x38>
		logger_->storeLog(output);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	ed97 0a00 	vldr	s0, [r7]
 80055f6:	4618      	mov	r0, r3
 80055f8:	f7ff f88a 	bl	8004710 <_ZN6Logger8storeLogEf>
		logger_->storeLog2(inputVal_);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	edd3 7a80 	vldr	s15, [r3, #512]	; 0x200
 8005606:	eeb0 0a67 	vmov.f32	s0, s15
 800560a:	4610      	mov	r0, r2
 800560c:	f7ff f8bc 	bl	8004788 <_ZN6Logger9storeLog2Ef>
	}

}
 8005610:	bf00      	nop
 8005612:	3708      	adds	r7, #8
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}

08005618 <_ZN20SystemIdentification10updateMsigEv>:
	logger_->saveLogs("sysident", "MSIGRES.txt");
	logger_->saveLogs2("sysident", "INPUT.txt");
}

void SystemIdentification::updateMsig()
{
 8005618:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
 800561c:	b083      	sub	sp, #12
 800561e:	af00      	add	r7, sp, #0
 8005620:	6078      	str	r0, [r7, #4]
	if(processing_flag_ == true){
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8005628:	2b01      	cmp	r3, #1
 800562a:	d146      	bne.n	80056ba <_ZN20SystemIdentification10updateMsigEv+0xa2>
		inputVal_ = inputRatio_ * msigArray_[msigArrayIdx_];
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	ed93 7a81 	vldr	s14, [r3, #516]	; 0x204
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 8005638:	461a      	mov	r2, r3
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	3204      	adds	r2, #4
 800563e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8005642:	ee07 3a90 	vmov	s15, r3
 8005646:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800564a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200
		msigArrayIdx_++;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 800565a:	3301      	adds	r3, #1
 800565c:	b29a      	uxth	r2, r3
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
		mon_msig = inputVal_;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800566a:	4a16      	ldr	r2, [pc, #88]	; (80056c4 <_ZN20SystemIdentification10updateMsigEv+0xac>)
 800566c:	6013      	str	r3, [r2, #0]

		if(msigArrayIdx_ >= MSIG_SIZE) msigArrayIdx_ = MSIG_SIZE;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 8005674:	2bf9      	cmp	r3, #249	; 0xf9
 8005676:	d903      	bls.n	8005680 <_ZN20SystemIdentification10updateMsigEv+0x68>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	22fa      	movs	r2, #250	; 0xfa
 800567c:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc

		motor_->setRatio(inputVal_, -inputVal_);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	685c      	ldr	r4, [r3, #4]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800568a:	4618      	mov	r0, r3
 800568c:	f7fa ff74 	bl	8000578 <__aeabi_f2d>
 8005690:	4680      	mov	r8, r0
 8005692:	4689      	mov	r9, r1
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	edd3 7a80 	vldr	s15, [r3, #512]	; 0x200
 800569a:	eef1 7a67 	vneg.f32	s15, s15
 800569e:	ee17 3a90 	vmov	r3, s15
 80056a2:	4618      	mov	r0, r3
 80056a4:	f7fa ff68 	bl	8000578 <__aeabi_f2d>
 80056a8:	4602      	mov	r2, r0
 80056aa:	460b      	mov	r3, r1
 80056ac:	ec43 2b11 	vmov	d1, r2, r3
 80056b0:	ec49 8b10 	vmov	d0, r8, r9
 80056b4:	4620      	mov	r0, r4
 80056b6:	f7ff fab9 	bl	8004c2c <_ZN5Motor8setRatioEdd>

	}

}
 80056ba:	bf00      	nop
 80056bc:	370c      	adds	r7, #12
 80056be:	46bd      	mov	sp, r7
 80056c0:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}
 80056c4:	200002dc 	.word	0x200002dc

080056c8 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>:

#include "VelocityCtrl.hpp"
//#include "ICM_20648.h"
#include <stdio.h>

VelocityCtrl::VelocityCtrl(Motor *motor, Encoder *encoder, IMU *imu) :
 80056c8:	b480      	push	{r7}
 80056ca:	b085      	sub	sp, #20
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	60b9      	str	r1, [r7, #8]
 80056d2:	607a      	str	r2, [r7, #4]
 80056d4:	603b      	str	r3, [r7, #0]
target_velocity_(0), target_omega_(0), current_velocity_(0), current_omega_(0), v_kp_(0), v_kd_(0), v_ki_(0),
	o_kp_(0), o_kd_(0), o_ki_(0), excution_flag_(false), i_reset_flag_(false), rotation_ratio_(0)
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f04f 0200 	mov.w	r2, #0
 80056dc:	601a      	str	r2, [r3, #0]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	f04f 0200 	mov.w	r2, #0
 80056e4:	605a      	str	r2, [r3, #4]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	f04f 0200 	mov.w	r2, #0
 80056ec:	609a      	str	r2, [r3, #8]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f04f 0200 	mov.w	r2, #0
 80056f4:	60da      	str	r2, [r3, #12]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f04f 0200 	mov.w	r2, #0
 80056fc:	611a      	str	r2, [r3, #16]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	f04f 0200 	mov.w	r2, #0
 8005704:	615a      	str	r2, [r3, #20]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	f04f 0200 	mov.w	r2, #0
 800570c:	619a      	str	r2, [r3, #24]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f04f 0200 	mov.w	r2, #0
 8005714:	61da      	str	r2, [r3, #28]
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	f04f 0200 	mov.w	r2, #0
 800571c:	621a      	str	r2, [r3, #32]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	f04f 0200 	mov.w	r2, #0
 8005724:	625a      	str	r2, [r3, #36]	; 0x24
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2200      	movs	r2, #0
 800572a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2200      	movs	r2, #0
 8005732:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	f04f 0200 	mov.w	r2, #0
 800573c:	62da      	str	r2, [r3, #44]	; 0x2c
{
	motor_ = motor;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	68ba      	ldr	r2, [r7, #8]
 8005742:	631a      	str	r2, [r3, #48]	; 0x30
	encoder_ = encoder;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	635a      	str	r2, [r3, #52]	; 0x34
	imu_ = imu;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	683a      	ldr	r2, [r7, #0]
 800574e:	639a      	str	r2, [r3, #56]	; 0x38

}
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	4618      	mov	r0, r3
 8005754:	3714      	adds	r7, #20
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr
	...

08005760 <_ZN12VelocityCtrl12calcVelocityEv>:

// ---------private ---------//

float VelocityCtrl::calcVelocity()
{
 8005760:	b590      	push	{r4, r7, lr}
 8005762:	b087      	sub	sp, #28
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
	float enc_l, enc_r;
	encoder_->getCnt(enc_l, enc_r);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800576c:	f107 020c 	add.w	r2, r7, #12
 8005770:	f107 0110 	add.w	r1, r7, #16
 8005774:	4618      	mov	r0, r3
 8005776:	f7fb fe47 	bl	8001408 <_ZN7Encoder6getCntERfS0_>
	float enc_cnt = (enc_l + enc_r) / 2;
 800577a:	ed97 7a04 	vldr	s14, [r7, #16]
 800577e:	edd7 7a03 	vldr	s15, [r7, #12]
 8005782:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005786:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800578a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800578e:	edc7 7a05 	vstr	s15, [r7, #20]

	current_velocity_ = VELOCITY_PER_CNT * enc_cnt;
 8005792:	6978      	ldr	r0, [r7, #20]
 8005794:	f7fa fef0 	bl	8000578 <__aeabi_f2d>
 8005798:	a30b      	add	r3, pc, #44	; (adr r3, 80057c8 <_ZN12VelocityCtrl12calcVelocityEv+0x68>)
 800579a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800579e:	f7fa ff43 	bl	8000628 <__aeabi_dmul>
 80057a2:	4603      	mov	r3, r0
 80057a4:	460c      	mov	r4, r1
 80057a6:	4618      	mov	r0, r3
 80057a8:	4621      	mov	r1, r4
 80057aa:	f7fb fa35 	bl	8000c18 <__aeabi_d2f>
 80057ae:	4602      	mov	r2, r0
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	609a      	str	r2, [r3, #8]

	return current_velocity_;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	ee07 3a90 	vmov	s15, r3
}
 80057bc:	eeb0 0a67 	vmov.f32	s0, s15
 80057c0:	371c      	adds	r7, #28
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd90      	pop	{r4, r7, pc}
 80057c6:	bf00      	nop
 80057c8:	1ab1d998 	.word	0x1ab1d998
 80057cc:	3f7830b5 	.word	0x3f7830b5

080057d0 <_ZN12VelocityCtrl3pidEv>:
	return current_omega_;
}
*/

void VelocityCtrl::pid()
{
 80057d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057d2:	ed2d 8b02 	vpush	{d8}
 80057d6:	b08d      	sub	sp, #52	; 0x34
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
	float static v_pre_diff, o_pre_diff;
	float v_diff = target_velocity_ - current_velocity_;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	ed93 7a00 	vldr	s14, [r3]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	edd3 7a02 	vldr	s15, [r3, #8]
 80057e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80057ec:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	float o_diff = target_omega_- imu_->getOmega();
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	ed93 8a01 	vldr	s16, [r3, #4]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057fa:	4618      	mov	r0, r3
 80057fc:	f7fc f94c 	bl	8001a98 <_ZN3IMU8getOmegaEv>
 8005800:	eef0 7a40 	vmov.f32	s15, s0
 8005804:	ee78 7a67 	vsub.f32	s15, s16, s15
 8005808:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	float v_p, v_d, o_p, o_d;
	static float v_i, o_i;

	if(i_reset_flag_ == true){
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005812:	2b00      	cmp	r3, #0
 8005814:	d00b      	beq.n	800582e <_ZN12VelocityCtrl3pidEv+0x5e>
		v_i = o_i = 0;
 8005816:	4b80      	ldr	r3, [pc, #512]	; (8005a18 <_ZN12VelocityCtrl3pidEv+0x248>)
 8005818:	f04f 0200 	mov.w	r2, #0
 800581c:	601a      	str	r2, [r3, #0]
 800581e:	4b7e      	ldr	r3, [pc, #504]	; (8005a18 <_ZN12VelocityCtrl3pidEv+0x248>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a7e      	ldr	r2, [pc, #504]	; (8005a1c <_ZN12VelocityCtrl3pidEv+0x24c>)
 8005824:	6013      	str	r3, [r2, #0]
		i_reset_flag_ = false;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2200      	movs	r2, #0
 800582a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	}

	v_p = v_kp_ * v_diff;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	edd3 7a04 	vldr	s15, [r3, #16]
 8005834:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8005838:	ee67 7a27 	vmul.f32	s15, s14, s15
 800583c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	v_i += v_ki_ * v_diff * DELTA_T;
 8005840:	4b76      	ldr	r3, [pc, #472]	; (8005a1c <_ZN12VelocityCtrl3pidEv+0x24c>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4618      	mov	r0, r3
 8005846:	f7fa fe97 	bl	8000578 <__aeabi_f2d>
 800584a:	4604      	mov	r4, r0
 800584c:	460d      	mov	r5, r1
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	ed93 7a06 	vldr	s14, [r3, #24]
 8005854:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8005858:	ee67 7a27 	vmul.f32	s15, s14, s15
 800585c:	ee17 0a90 	vmov	r0, s15
 8005860:	f7fa fe8a 	bl	8000578 <__aeabi_f2d>
 8005864:	a36a      	add	r3, pc, #424	; (adr r3, 8005a10 <_ZN12VelocityCtrl3pidEv+0x240>)
 8005866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800586a:	f7fa fedd 	bl	8000628 <__aeabi_dmul>
 800586e:	4602      	mov	r2, r0
 8005870:	460b      	mov	r3, r1
 8005872:	4620      	mov	r0, r4
 8005874:	4629      	mov	r1, r5
 8005876:	f7fa fd21 	bl	80002bc <__adddf3>
 800587a:	4603      	mov	r3, r0
 800587c:	460c      	mov	r4, r1
 800587e:	4618      	mov	r0, r3
 8005880:	4621      	mov	r1, r4
 8005882:	f7fb f9c9 	bl	8000c18 <__aeabi_d2f>
 8005886:	4602      	mov	r2, r0
 8005888:	4b64      	ldr	r3, [pc, #400]	; (8005a1c <_ZN12VelocityCtrl3pidEv+0x24c>)
 800588a:	601a      	str	r2, [r3, #0]
	v_d = v_kd_ * (v_diff - v_pre_diff) / DELTA_T;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	ed93 7a05 	vldr	s14, [r3, #20]
 8005892:	4b63      	ldr	r3, [pc, #396]	; (8005a20 <_ZN12VelocityCtrl3pidEv+0x250>)
 8005894:	edd3 7a00 	vldr	s15, [r3]
 8005898:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800589c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80058a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058a4:	ee17 0a90 	vmov	r0, s15
 80058a8:	f7fa fe66 	bl	8000578 <__aeabi_f2d>
 80058ac:	a358      	add	r3, pc, #352	; (adr r3, 8005a10 <_ZN12VelocityCtrl3pidEv+0x240>)
 80058ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058b2:	f7fa ffe3 	bl	800087c <__aeabi_ddiv>
 80058b6:	4603      	mov	r3, r0
 80058b8:	460c      	mov	r4, r1
 80058ba:	4618      	mov	r0, r3
 80058bc:	4621      	mov	r1, r4
 80058be:	f7fb f9ab 	bl	8000c18 <__aeabi_d2f>
 80058c2:	4603      	mov	r3, r0
 80058c4:	623b      	str	r3, [r7, #32]

	o_p = o_kp_ * o_diff;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	edd3 7a07 	vldr	s15, [r3, #28]
 80058cc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80058d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058d4:	edc7 7a07 	vstr	s15, [r7, #28]
	o_i += o_ki_ * o_diff * DELTA_T;
 80058d8:	4b4f      	ldr	r3, [pc, #316]	; (8005a18 <_ZN12VelocityCtrl3pidEv+0x248>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4618      	mov	r0, r3
 80058de:	f7fa fe4b 	bl	8000578 <__aeabi_f2d>
 80058e2:	4604      	mov	r4, r0
 80058e4:	460d      	mov	r5, r1
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80058ec:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80058f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058f4:	ee17 0a90 	vmov	r0, s15
 80058f8:	f7fa fe3e 	bl	8000578 <__aeabi_f2d>
 80058fc:	a344      	add	r3, pc, #272	; (adr r3, 8005a10 <_ZN12VelocityCtrl3pidEv+0x240>)
 80058fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005902:	f7fa fe91 	bl	8000628 <__aeabi_dmul>
 8005906:	4602      	mov	r2, r0
 8005908:	460b      	mov	r3, r1
 800590a:	4620      	mov	r0, r4
 800590c:	4629      	mov	r1, r5
 800590e:	f7fa fcd5 	bl	80002bc <__adddf3>
 8005912:	4603      	mov	r3, r0
 8005914:	460c      	mov	r4, r1
 8005916:	4618      	mov	r0, r3
 8005918:	4621      	mov	r1, r4
 800591a:	f7fb f97d 	bl	8000c18 <__aeabi_d2f>
 800591e:	4602      	mov	r2, r0
 8005920:	4b3d      	ldr	r3, [pc, #244]	; (8005a18 <_ZN12VelocityCtrl3pidEv+0x248>)
 8005922:	601a      	str	r2, [r3, #0]
	o_d = o_kd_ * (o_diff - o_pre_diff) / DELTA_T;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	ed93 7a08 	vldr	s14, [r3, #32]
 800592a:	4b3e      	ldr	r3, [pc, #248]	; (8005a24 <_ZN12VelocityCtrl3pidEv+0x254>)
 800592c:	edd3 7a00 	vldr	s15, [r3]
 8005930:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8005934:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005938:	ee67 7a27 	vmul.f32	s15, s14, s15
 800593c:	ee17 0a90 	vmov	r0, s15
 8005940:	f7fa fe1a 	bl	8000578 <__aeabi_f2d>
 8005944:	a332      	add	r3, pc, #200	; (adr r3, 8005a10 <_ZN12VelocityCtrl3pidEv+0x240>)
 8005946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800594a:	f7fa ff97 	bl	800087c <__aeabi_ddiv>
 800594e:	4603      	mov	r3, r0
 8005950:	460c      	mov	r4, r1
 8005952:	4618      	mov	r0, r3
 8005954:	4621      	mov	r1, r4
 8005956:	f7fb f95f 	bl	8000c18 <__aeabi_d2f>
 800595a:	4603      	mov	r3, r0
 800595c:	61bb      	str	r3, [r7, #24]

	float v_left_ratio, v_right_ratio, o_left_ratio, o_right_ratio;

	v_left_ratio = v_right_ratio =  v_p + v_d + v_i;
 800595e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8005962:	edd7 7a08 	vldr	s15, [r7, #32]
 8005966:	ee37 7a27 	vadd.f32	s14, s14, s15
 800596a:	4b2c      	ldr	r3, [pc, #176]	; (8005a1c <_ZN12VelocityCtrl3pidEv+0x24c>)
 800596c:	edd3 7a00 	vldr	s15, [r3]
 8005970:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005974:	edc7 7a05 	vstr	s15, [r7, #20]
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	613b      	str	r3, [r7, #16]

	o_left_ratio = o_p + o_d + o_i;
 800597c:	ed97 7a07 	vldr	s14, [r7, #28]
 8005980:	edd7 7a06 	vldr	s15, [r7, #24]
 8005984:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005988:	4b23      	ldr	r3, [pc, #140]	; (8005a18 <_ZN12VelocityCtrl3pidEv+0x248>)
 800598a:	edd3 7a00 	vldr	s15, [r3]
 800598e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005992:	edc7 7a03 	vstr	s15, [r7, #12]
	o_right_ratio = -(o_p + o_d + o_i);
 8005996:	ed97 7a07 	vldr	s14, [r7, #28]
 800599a:	edd7 7a06 	vldr	s15, [r7, #24]
 800599e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80059a2:	4b1d      	ldr	r3, [pc, #116]	; (8005a18 <_ZN12VelocityCtrl3pidEv+0x248>)
 80059a4:	edd3 7a00 	vldr	s15, [r3]
 80059a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059ac:	eef1 7a67 	vneg.f32	s15, s15
 80059b0:	edc7 7a02 	vstr	s15, [r7, #8]

	motor_->setRatio(v_left_ratio + o_left_ratio, v_right_ratio + o_right_ratio);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 80059b8:	ed97 7a04 	vldr	s14, [r7, #16]
 80059bc:	edd7 7a03 	vldr	s15, [r7, #12]
 80059c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059c4:	ee17 0a90 	vmov	r0, s15
 80059c8:	f7fa fdd6 	bl	8000578 <__aeabi_f2d>
 80059cc:	4605      	mov	r5, r0
 80059ce:	460e      	mov	r6, r1
 80059d0:	ed97 7a05 	vldr	s14, [r7, #20]
 80059d4:	edd7 7a02 	vldr	s15, [r7, #8]
 80059d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059dc:	ee17 0a90 	vmov	r0, s15
 80059e0:	f7fa fdca 	bl	8000578 <__aeabi_f2d>
 80059e4:	4602      	mov	r2, r0
 80059e6:	460b      	mov	r3, r1
 80059e8:	ec43 2b11 	vmov	d1, r2, r3
 80059ec:	ec46 5b10 	vmov	d0, r5, r6
 80059f0:	4620      	mov	r0, r4
 80059f2:	f7ff f91b 	bl	8004c2c <_ZN5Motor8setRatioEdd>

	v_pre_diff = v_diff;
 80059f6:	4a0a      	ldr	r2, [pc, #40]	; (8005a20 <_ZN12VelocityCtrl3pidEv+0x250>)
 80059f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059fa:	6013      	str	r3, [r2, #0]
	o_pre_diff = o_diff;
 80059fc:	4a09      	ldr	r2, [pc, #36]	; (8005a24 <_ZN12VelocityCtrl3pidEv+0x254>)
 80059fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a00:	6013      	str	r3, [r2, #0]
}
 8005a02:	bf00      	nop
 8005a04:	3734      	adds	r7, #52	; 0x34
 8005a06:	46bd      	mov	sp, r7
 8005a08:	ecbd 8b02 	vpop	{d8}
 8005a0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a0e:	bf00      	nop
 8005a10:	d2f1a9fc 	.word	0xd2f1a9fc
 8005a14:	3f50624d 	.word	0x3f50624d
 8005a18:	200002ec 	.word	0x200002ec
 8005a1c:	200002e8 	.word	0x200002e8
 8005a20:	200002e0 	.word	0x200002e0
 8005a24:	200002e4 	.word	0x200002e4

08005a28 <_ZN12VelocityCtrl11setVelocityEff>:
{

}

void VelocityCtrl::setVelocity(float velocity, float omega)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b085      	sub	sp, #20
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	60f8      	str	r0, [r7, #12]
 8005a30:	ed87 0a02 	vstr	s0, [r7, #8]
 8005a34:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	68ba      	ldr	r2, [r7, #8]
 8005a3c:	601a      	str	r2, [r3, #0]
	target_omega_= omega;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	687a      	ldr	r2, [r7, #4]
 8005a42:	605a      	str	r2, [r3, #4]
}
 8005a44:	bf00      	nop
 8005a46:	3714      	adds	r7, #20
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr

08005a50 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>:

void VelocityCtrl::setTranslationVelocityOnly(float velocity, float rotation_ratio)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b085      	sub	sp, #20
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	60f8      	str	r0, [r7, #12]
 8005a58:	ed87 0a02 	vstr	s0, [r7, #8]
 8005a5c:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	68ba      	ldr	r2, [r7, #8]
 8005a64:	601a      	str	r2, [r3, #0]
	rotation_ratio_ = rotation_ratio;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005a6c:	bf00      	nop
 8005a6e:	3714      	adds	r7, #20
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <_ZN12VelocityCtrl15setVelocityGainEfff>:

void VelocityCtrl::setVelocityGain(float kp, float ki, float kd)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b085      	sub	sp, #20
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	60f8      	str	r0, [r7, #12]
 8005a80:	ed87 0a02 	vstr	s0, [r7, #8]
 8005a84:	edc7 0a01 	vstr	s1, [r7, #4]
 8005a88:	ed87 1a00 	vstr	s2, [r7]
	v_kp_ = kp;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	68ba      	ldr	r2, [r7, #8]
 8005a90:	611a      	str	r2, [r3, #16]
	v_ki_ = ki;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	619a      	str	r2, [r3, #24]
	v_kd_ = kd;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	683a      	ldr	r2, [r7, #0]
 8005a9c:	615a      	str	r2, [r3, #20]
}
 8005a9e:	bf00      	nop
 8005aa0:	3714      	adds	r7, #20
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr

08005aaa <_ZN12VelocityCtrl12setOmegaGainEfff>:

void VelocityCtrl::setOmegaGain(float kp, float ki, float kd)
{
 8005aaa:	b480      	push	{r7}
 8005aac:	b085      	sub	sp, #20
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	60f8      	str	r0, [r7, #12]
 8005ab2:	ed87 0a02 	vstr	s0, [r7, #8]
 8005ab6:	edc7 0a01 	vstr	s1, [r7, #4]
 8005aba:	ed87 1a00 	vstr	s2, [r7]
	o_kp_ = kp;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	68ba      	ldr	r2, [r7, #8]
 8005ac2:	61da      	str	r2, [r3, #28]
	o_ki_ = ki;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	687a      	ldr	r2, [r7, #4]
 8005ac8:	625a      	str	r2, [r3, #36]	; 0x24
	o_kd_ = kd;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	683a      	ldr	r2, [r7, #0]
 8005ace:	621a      	str	r2, [r3, #32]
}
 8005ad0:	bf00      	nop
 8005ad2:	3714      	adds	r7, #20
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr

08005adc <_ZN12VelocityCtrl4flipEv>:

void VelocityCtrl::flip()
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b082      	sub	sp, #8
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
    calcVelocity();
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f7ff fe3b 	bl	8005760 <_ZN12VelocityCtrl12calcVelocityEv>
	//calcOmega();

	if(excution_flag_ == true){
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d002      	beq.n	8005afa <_ZN12VelocityCtrl4flipEv+0x1e>
		pid();
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f7ff fe6b 	bl	80057d0 <_ZN12VelocityCtrl3pidEv>
		//pidTranslationOnly();
	}


}
 8005afa:	bf00      	nop
 8005afc:	3708      	adds	r7, #8
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}

08005b02 <_ZN12VelocityCtrl5startEv>:

void VelocityCtrl::start()
{
 8005b02:	b480      	push	{r7}
 8005b04:	b083      	sub	sp, #12
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	i_reset_flag_ = true;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2201      	movs	r2, #1
 8005b16:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	//calcOmega();
}
 8005b1a:	bf00      	nop
 8005b1c:	370c      	adds	r7, #12
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr
	...

08005b28 <_ZN12VelocityCtrl4stopEv>:

void VelocityCtrl::stop()
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b082      	sub	sp, #8
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2200      	movs	r2, #0
 8005b34:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	motor_->setRatio(0, 0);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b3c:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8005b58 <_ZN12VelocityCtrl4stopEv+0x30>
 8005b40:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8005b58 <_ZN12VelocityCtrl4stopEv+0x30>
 8005b44:	4618      	mov	r0, r3
 8005b46:	f7ff f871 	bl	8004c2c <_ZN5Motor8setRatioEdd>

}
 8005b4a:	bf00      	nop
 8005b4c:	3708      	adds	r7, #8
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}
 8005b52:	bf00      	nop
 8005b54:	f3af 8000 	nop.w
	...

08005b60 <_ZN12VelocityCtrl18getCurrentVelocityEv>:

float VelocityCtrl::getCurrentVelocity()
{
 8005b60:	b480      	push	{r7}
 8005b62:	b083      	sub	sp, #12
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
	return current_velocity_;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	ee07 3a90 	vmov	s15, r3
}
 8005b70:	eeb0 0a67 	vmov.f32	s0, s15
 8005b74:	370c      	adds	r7, #12
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr
	...

08005b80 <HAL_TIM_PeriodElapsedCallback>:
	cppExit(GPIO_Pin);
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b082      	sub	sp, #8
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7){
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a1e      	ldr	r2, [pc, #120]	; (8005c08 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d10e      	bne.n	8005bb0 <HAL_TIM_PeriodElapsedCallback+0x30>
		cppFlip100ns();
 8005b92:	f001 fe27 	bl	80077e4 <cppFlip100ns>

		tim7_timer++;
 8005b96:	4b1d      	ldr	r3, [pc, #116]	; (8005c0c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	3301      	adds	r3, #1
 8005b9c:	4a1b      	ldr	r2, [pc, #108]	; (8005c0c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005b9e:	6013      	str	r3, [r2, #0]
		if(tim7_timer >= 100000) tim7_timer = 0;
 8005ba0:	4b1a      	ldr	r3, [pc, #104]	; (8005c0c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a1a      	ldr	r2, [pc, #104]	; (8005c10 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d902      	bls.n	8005bb0 <HAL_TIM_PeriodElapsedCallback+0x30>
 8005baa:	4b18      	ldr	r3, [pc, #96]	; (8005c0c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005bac:	2200      	movs	r2, #0
 8005bae:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM6){
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a17      	ldr	r2, [pc, #92]	; (8005c14 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d10e      	bne.n	8005bd8 <HAL_TIM_PeriodElapsedCallback+0x58>
		cppFlip1ms();
 8005bba:	f001 fdc9 	bl	8007750 <cppFlip1ms>

		tim6_timer++;
 8005bbe:	4b16      	ldr	r3, [pc, #88]	; (8005c18 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	4a14      	ldr	r2, [pc, #80]	; (8005c18 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005bc6:	6013      	str	r3, [r2, #0]
		if(tim6_timer >= 100000) tim6_timer = 0;
 8005bc8:	4b13      	ldr	r3, [pc, #76]	; (8005c18 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a10      	ldr	r2, [pc, #64]	; (8005c10 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d902      	bls.n	8005bd8 <HAL_TIM_PeriodElapsedCallback+0x58>
 8005bd2:	4b11      	ldr	r3, [pc, #68]	; (8005c18 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM13){
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a0f      	ldr	r2, [pc, #60]	; (8005c1c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d10e      	bne.n	8005c00 <HAL_TIM_PeriodElapsedCallback+0x80>
		cppFlip10ms();
 8005be2:	f001 fe09 	bl	80077f8 <cppFlip10ms>

		tim13_timer++;
 8005be6:	4b0e      	ldr	r3, [pc, #56]	; (8005c20 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	3301      	adds	r3, #1
 8005bec:	4a0c      	ldr	r2, [pc, #48]	; (8005c20 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005bee:	6013      	str	r3, [r2, #0]
		if(tim13_timer >= 100000) tim13_timer = 0;
 8005bf0:	4b0b      	ldr	r3, [pc, #44]	; (8005c20 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a06      	ldr	r2, [pc, #24]	; (8005c10 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d902      	bls.n	8005c00 <HAL_TIM_PeriodElapsedCallback+0x80>
 8005bfa:	4b09      	ldr	r3, [pc, #36]	; (8005c20 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	601a      	str	r2, [r3, #0]
	}

}
 8005c00:	bf00      	nop
 8005c02:	3708      	adds	r7, #8
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}
 8005c08:	40001400 	.word	0x40001400
 8005c0c:	2003fad8 	.word	0x2003fad8
 8005c10:	0001869f 	.word	0x0001869f
 8005c14:	40001000 	.word	0x40001000
 8005c18:	2003fa94 	.word	0x2003fa94
 8005c1c:	40001c00 	.word	0x40001c00
 8005c20:	2003fadc 	.word	0x2003fadc

08005c24 <init>:

void init()
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	af00      	add	r7, sp, #0
	// ------initialize------//
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET); // sensor led ON
 8005c28:	2201      	movs	r2, #1
 8005c2a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005c2e:	4808      	ldr	r0, [pc, #32]	; (8005c50 <init+0x2c>)
 8005c30:	f005 f914 	bl	800ae5c <HAL_GPIO_WritePin>

	// timer interrpt in start
	HAL_TIM_Base_Start_IT(&htim6);
 8005c34:	4807      	ldr	r0, [pc, #28]	; (8005c54 <init+0x30>)
 8005c36:	f008 fff0 	bl	800ec1a <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8005c3a:	4807      	ldr	r0, [pc, #28]	; (8005c58 <init+0x34>)
 8005c3c:	f008 ffed 	bl	800ec1a <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 8005c40:	4806      	ldr	r0, [pc, #24]	; (8005c5c <init+0x38>)
 8005c42:	f008 ffea 	bl	800ec1a <HAL_TIM_Base_Start_IT>

	cppInit();
 8005c46:	f001 fce3 	bl	8007610 <cppInit>

	//path_following_initialize();

}
 8005c4a:	bf00      	nop
 8005c4c:	bd80      	pop	{r7, pc}
 8005c4e:	bf00      	nop
 8005c50:	40021000 	.word	0x40021000
 8005c54:	2003fbc0 	.word	0x2003fbc0
 8005c58:	2003fd64 	.word	0x2003fd64
 8005c5c:	2003fae0 	.word	0x2003fae0

08005c60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005c64:	f003 fdec 	bl	8009840 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005c68:	f000 f82a 	bl	8005cc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005c6c:	f000 fdbc 	bl	80067e8 <MX_GPIO_Init>
  MX_DMA_Init();
 8005c70:	f000 fd8a 	bl	8006788 <MX_DMA_Init>
  MX_I2C2_Init();
 8005c74:	f000 f9e8 	bl	8006048 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8005c78:	f000 fa14 	bl	80060a4 <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 8005c7c:	f000 fa32 	bl	80060e4 <MX_SPI2_Init>
  MX_TIM1_Init();
 8005c80:	f000 fa66 	bl	8006150 <MX_TIM1_Init>
  MX_TIM4_Init();
 8005c84:	f000 fb70 	bl	8006368 <MX_TIM4_Init>
  MX_TIM8_Init();
 8005c88:	f000 fc3c 	bl	8006504 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 8005c8c:	f000 fd52 	bl	8006734 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8005c90:	f00a ffb6 	bl	8010c00 <MX_FATFS_Init>
  MX_TIM6_Init();
 8005c94:	f000 fbcc 	bl	8006430 <MX_TIM6_Init>
  MX_I2C1_Init();
 8005c98:	f000 f9a8 	bl	8005fec <MX_I2C1_Init>
  MX_TIM3_Init();
 8005c9c:	f000 fb00 	bl	80062a0 <MX_TIM3_Init>
  MX_TIM10_Init();
 8005ca0:	f000 fc88 	bl	80065b4 <MX_TIM10_Init>
  MX_TIM11_Init();
 8005ca4:	f000 fcd4 	bl	8006650 <MX_TIM11_Init>
  MX_ADC2_Init();
 8005ca8:	f000 f898 	bl	8005ddc <MX_ADC2_Init>
  MX_TIM7_Init();
 8005cac:	f000 fbf6 	bl	800649c <MX_TIM7_Init>
  MX_TIM13_Init();
 8005cb0:	f000 fd1c 	bl	80066ec <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  init();
 8005cb4:	f7ff ffb6 	bl	8005c24 <init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  cppLoop();
 8005cb8:	f001 fdb6 	bl	8007828 <cppLoop>
 8005cbc:	e7fc      	b.n	8005cb8 <main+0x58>
	...

08005cc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b0a4      	sub	sp, #144	; 0x90
 8005cc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005cc6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005cca:	2234      	movs	r2, #52	; 0x34
 8005ccc:	2100      	movs	r1, #0
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f00f fded 	bl	80158ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005cd4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005cd8:	2200      	movs	r2, #0
 8005cda:	601a      	str	r2, [r3, #0]
 8005cdc:	605a      	str	r2, [r3, #4]
 8005cde:	609a      	str	r2, [r3, #8]
 8005ce0:	60da      	str	r2, [r3, #12]
 8005ce2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005ce4:	f107 030c 	add.w	r3, r7, #12
 8005ce8:	223c      	movs	r2, #60	; 0x3c
 8005cea:	2100      	movs	r1, #0
 8005cec:	4618      	mov	r0, r3
 8005cee:	f00f fdde 	bl	80158ae <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	60bb      	str	r3, [r7, #8]
 8005cf6:	4b37      	ldr	r3, [pc, #220]	; (8005dd4 <SystemClock_Config+0x114>)
 8005cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cfa:	4a36      	ldr	r2, [pc, #216]	; (8005dd4 <SystemClock_Config+0x114>)
 8005cfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d00:	6413      	str	r3, [r2, #64]	; 0x40
 8005d02:	4b34      	ldr	r3, [pc, #208]	; (8005dd4 <SystemClock_Config+0x114>)
 8005d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d0a:	60bb      	str	r3, [r7, #8]
 8005d0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005d0e:	2300      	movs	r3, #0
 8005d10:	607b      	str	r3, [r7, #4]
 8005d12:	4b31      	ldr	r3, [pc, #196]	; (8005dd8 <SystemClock_Config+0x118>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a30      	ldr	r2, [pc, #192]	; (8005dd8 <SystemClock_Config+0x118>)
 8005d18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d1c:	6013      	str	r3, [r2, #0]
 8005d1e:	4b2e      	ldr	r3, [pc, #184]	; (8005dd8 <SystemClock_Config+0x118>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005d26:	607b      	str	r3, [r7, #4]
 8005d28:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005d2e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005d32:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005d34:	2302      	movs	r3, #2
 8005d36:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005d38:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005d3c:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 8;
 8005d3e:	2308      	movs	r3, #8
 8005d40:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8005d42:	23b4      	movs	r3, #180	; 0xb4
 8005d44:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005d48:	2302      	movs	r3, #2
 8005d4a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8005d4e:	2308      	movs	r3, #8
 8005d50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 8005d54:	2302      	movs	r3, #2
 8005d56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005d5a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f006 fcb4 	bl	800c6cc <HAL_RCC_OscConfig>
 8005d64:	4603      	mov	r3, r0
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d001      	beq.n	8005d6e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8005d6a:	f000 fe7f 	bl	8006a6c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8005d6e:	f006 f825 	bl	800bdbc <HAL_PWREx_EnableOverDrive>
 8005d72:	4603      	mov	r3, r0
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d001      	beq.n	8005d7c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8005d78:	f000 fe78 	bl	8006a6c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005d7c:	230f      	movs	r3, #15
 8005d7e:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005d80:	2302      	movs	r3, #2
 8005d82:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005d84:	2300      	movs	r3, #0
 8005d86:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005d88:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005d8c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005d8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d92:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005d94:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005d98:	2105      	movs	r1, #5
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f006 f85e 	bl	800be5c <HAL_RCC_ClockConfig>
 8005da0:	4603      	mov	r3, r0
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d001      	beq.n	8005daa <SystemClock_Config+0xea>
  {
    Error_Handler();
 8005da6:	f000 fe61 	bl	8006a6c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8005daa:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8005dae:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8005db0:	2300      	movs	r3, #0
 8005db2:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8005db4:	2300      	movs	r3, #0
 8005db6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005db8:	f107 030c 	add.w	r3, r7, #12
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f006 fa47 	bl	800c250 <HAL_RCCEx_PeriphCLKConfig>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d001      	beq.n	8005dcc <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8005dc8:	f000 fe50 	bl	8006a6c <Error_Handler>
  }
}
 8005dcc:	bf00      	nop
 8005dce:	3790      	adds	r7, #144	; 0x90
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}
 8005dd4:	40023800 	.word	0x40023800
 8005dd8:	40007000 	.word	0x40007000

08005ddc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b084      	sub	sp, #16
 8005de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005de2:	463b      	mov	r3, r7
 8005de4:	2200      	movs	r2, #0
 8005de6:	601a      	str	r2, [r3, #0]
 8005de8:	605a      	str	r2, [r3, #4]
 8005dea:	609a      	str	r2, [r3, #8]
 8005dec:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8005dee:	4b7c      	ldr	r3, [pc, #496]	; (8005fe0 <MX_ADC2_Init+0x204>)
 8005df0:	4a7c      	ldr	r2, [pc, #496]	; (8005fe4 <MX_ADC2_Init+0x208>)
 8005df2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8005df4:	4b7a      	ldr	r3, [pc, #488]	; (8005fe0 <MX_ADC2_Init+0x204>)
 8005df6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005dfa:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8005dfc:	4b78      	ldr	r3, [pc, #480]	; (8005fe0 <MX_ADC2_Init+0x204>)
 8005dfe:	2200      	movs	r2, #0
 8005e00:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8005e02:	4b77      	ldr	r3, [pc, #476]	; (8005fe0 <MX_ADC2_Init+0x204>)
 8005e04:	2201      	movs	r2, #1
 8005e06:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8005e08:	4b75      	ldr	r3, [pc, #468]	; (8005fe0 <MX_ADC2_Init+0x204>)
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8005e0e:	4b74      	ldr	r3, [pc, #464]	; (8005fe0 <MX_ADC2_Init+0x204>)
 8005e10:	2200      	movs	r2, #0
 8005e12:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005e16:	4b72      	ldr	r3, [pc, #456]	; (8005fe0 <MX_ADC2_Init+0x204>)
 8005e18:	2200      	movs	r2, #0
 8005e1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005e1c:	4b70      	ldr	r3, [pc, #448]	; (8005fe0 <MX_ADC2_Init+0x204>)
 8005e1e:	4a72      	ldr	r2, [pc, #456]	; (8005fe8 <MX_ADC2_Init+0x20c>)
 8005e20:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005e22:	4b6f      	ldr	r3, [pc, #444]	; (8005fe0 <MX_ADC2_Init+0x204>)
 8005e24:	2200      	movs	r2, #0
 8005e26:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 14;
 8005e28:	4b6d      	ldr	r3, [pc, #436]	; (8005fe0 <MX_ADC2_Init+0x204>)
 8005e2a:	220e      	movs	r2, #14
 8005e2c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8005e2e:	4b6c      	ldr	r3, [pc, #432]	; (8005fe0 <MX_ADC2_Init+0x204>)
 8005e30:	2201      	movs	r2, #1
 8005e32:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005e36:	4b6a      	ldr	r3, [pc, #424]	; (8005fe0 <MX_ADC2_Init+0x204>)
 8005e38:	2201      	movs	r2, #1
 8005e3a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8005e3c:	4868      	ldr	r0, [pc, #416]	; (8005fe0 <MX_ADC2_Init+0x204>)
 8005e3e:	f003 fd95 	bl	800996c <HAL_ADC_Init>
 8005e42:	4603      	mov	r3, r0
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d001      	beq.n	8005e4c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8005e48:	f000 fe10 	bl	8006a6c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8005e4c:	230a      	movs	r3, #10
 8005e4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8005e50:	2301      	movs	r3, #1
 8005e52:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8005e54:	2306      	movs	r3, #6
 8005e56:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005e58:	463b      	mov	r3, r7
 8005e5a:	4619      	mov	r1, r3
 8005e5c:	4860      	ldr	r0, [pc, #384]	; (8005fe0 <MX_ADC2_Init+0x204>)
 8005e5e:	f003 fed9 	bl	8009c14 <HAL_ADC_ConfigChannel>
 8005e62:	4603      	mov	r3, r0
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d001      	beq.n	8005e6c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8005e68:	f000 fe00 	bl	8006a6c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8005e6c:	230b      	movs	r3, #11
 8005e6e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8005e70:	2302      	movs	r3, #2
 8005e72:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005e74:	463b      	mov	r3, r7
 8005e76:	4619      	mov	r1, r3
 8005e78:	4859      	ldr	r0, [pc, #356]	; (8005fe0 <MX_ADC2_Init+0x204>)
 8005e7a:	f003 fecb 	bl	8009c14 <HAL_ADC_ConfigChannel>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d001      	beq.n	8005e88 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8005e84:	f000 fdf2 	bl	8006a6c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8005e88:	230c      	movs	r3, #12
 8005e8a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8005e8c:	2303      	movs	r3, #3
 8005e8e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005e90:	463b      	mov	r3, r7
 8005e92:	4619      	mov	r1, r3
 8005e94:	4852      	ldr	r0, [pc, #328]	; (8005fe0 <MX_ADC2_Init+0x204>)
 8005e96:	f003 febd 	bl	8009c14 <HAL_ADC_ConfigChannel>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d001      	beq.n	8005ea4 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8005ea0:	f000 fde4 	bl	8006a6c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8005ea4:	230d      	movs	r3, #13
 8005ea6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8005ea8:	2304      	movs	r3, #4
 8005eaa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005eac:	463b      	mov	r3, r7
 8005eae:	4619      	mov	r1, r3
 8005eb0:	484b      	ldr	r0, [pc, #300]	; (8005fe0 <MX_ADC2_Init+0x204>)
 8005eb2:	f003 feaf 	bl	8009c14 <HAL_ADC_ConfigChannel>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d001      	beq.n	8005ec0 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8005ebc:	f000 fdd6 	bl	8006a6c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8005ec4:	2305      	movs	r3, #5
 8005ec6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005ec8:	463b      	mov	r3, r7
 8005eca:	4619      	mov	r1, r3
 8005ecc:	4844      	ldr	r0, [pc, #272]	; (8005fe0 <MX_ADC2_Init+0x204>)
 8005ece:	f003 fea1 	bl	8009c14 <HAL_ADC_ConfigChannel>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d001      	beq.n	8005edc <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8005ed8:	f000 fdc8 	bl	8006a6c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8005edc:	2301      	movs	r3, #1
 8005ede:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8005ee0:	2306      	movs	r3, #6
 8005ee2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005ee4:	463b      	mov	r3, r7
 8005ee6:	4619      	mov	r1, r3
 8005ee8:	483d      	ldr	r0, [pc, #244]	; (8005fe0 <MX_ADC2_Init+0x204>)
 8005eea:	f003 fe93 	bl	8009c14 <HAL_ADC_ConfigChannel>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d001      	beq.n	8005ef8 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 8005ef4:	f000 fdba 	bl	8006a6c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8005ef8:	2302      	movs	r3, #2
 8005efa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8005efc:	2307      	movs	r3, #7
 8005efe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005f00:	463b      	mov	r3, r7
 8005f02:	4619      	mov	r1, r3
 8005f04:	4836      	ldr	r0, [pc, #216]	; (8005fe0 <MX_ADC2_Init+0x204>)
 8005f06:	f003 fe85 	bl	8009c14 <HAL_ADC_ConfigChannel>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d001      	beq.n	8005f14 <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 8005f10:	f000 fdac 	bl	8006a6c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8005f14:	2303      	movs	r3, #3
 8005f16:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8005f18:	2308      	movs	r3, #8
 8005f1a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005f1c:	463b      	mov	r3, r7
 8005f1e:	4619      	mov	r1, r3
 8005f20:	482f      	ldr	r0, [pc, #188]	; (8005fe0 <MX_ADC2_Init+0x204>)
 8005f22:	f003 fe77 	bl	8009c14 <HAL_ADC_ConfigChannel>
 8005f26:	4603      	mov	r3, r0
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d001      	beq.n	8005f30 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 8005f2c:	f000 fd9e 	bl	8006a6c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8005f30:	2304      	movs	r3, #4
 8005f32:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8005f34:	2309      	movs	r3, #9
 8005f36:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005f38:	463b      	mov	r3, r7
 8005f3a:	4619      	mov	r1, r3
 8005f3c:	4828      	ldr	r0, [pc, #160]	; (8005fe0 <MX_ADC2_Init+0x204>)
 8005f3e:	f003 fe69 	bl	8009c14 <HAL_ADC_ConfigChannel>
 8005f42:	4603      	mov	r3, r0
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d001      	beq.n	8005f4c <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 8005f48:	f000 fd90 	bl	8006a6c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8005f4c:	2305      	movs	r3, #5
 8005f4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8005f50:	230a      	movs	r3, #10
 8005f52:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005f54:	463b      	mov	r3, r7
 8005f56:	4619      	mov	r1, r3
 8005f58:	4821      	ldr	r0, [pc, #132]	; (8005fe0 <MX_ADC2_Init+0x204>)
 8005f5a:	f003 fe5b 	bl	8009c14 <HAL_ADC_ConfigChannel>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d001      	beq.n	8005f68 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 8005f64:	f000 fd82 	bl	8006a6c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8005f68:	2306      	movs	r3, #6
 8005f6a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8005f6c:	230b      	movs	r3, #11
 8005f6e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005f70:	463b      	mov	r3, r7
 8005f72:	4619      	mov	r1, r3
 8005f74:	481a      	ldr	r0, [pc, #104]	; (8005fe0 <MX_ADC2_Init+0x204>)
 8005f76:	f003 fe4d 	bl	8009c14 <HAL_ADC_ConfigChannel>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d001      	beq.n	8005f84 <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 8005f80:	f000 fd74 	bl	8006a6c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8005f84:	2307      	movs	r3, #7
 8005f86:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8005f88:	230c      	movs	r3, #12
 8005f8a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005f8c:	463b      	mov	r3, r7
 8005f8e:	4619      	mov	r1, r3
 8005f90:	4813      	ldr	r0, [pc, #76]	; (8005fe0 <MX_ADC2_Init+0x204>)
 8005f92:	f003 fe3f 	bl	8009c14 <HAL_ADC_ConfigChannel>
 8005f96:	4603      	mov	r3, r0
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d001      	beq.n	8005fa0 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 8005f9c:	f000 fd66 	bl	8006a6c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8005fa0:	2308      	movs	r3, #8
 8005fa2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8005fa4:	230d      	movs	r3, #13
 8005fa6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005fa8:	463b      	mov	r3, r7
 8005faa:	4619      	mov	r1, r3
 8005fac:	480c      	ldr	r0, [pc, #48]	; (8005fe0 <MX_ADC2_Init+0x204>)
 8005fae:	f003 fe31 	bl	8009c14 <HAL_ADC_ConfigChannel>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d001      	beq.n	8005fbc <MX_ADC2_Init+0x1e0>
  {
    Error_Handler();
 8005fb8:	f000 fd58 	bl	8006a6c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8005fbc:	2309      	movs	r3, #9
 8005fbe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8005fc0:	230e      	movs	r3, #14
 8005fc2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005fc4:	463b      	mov	r3, r7
 8005fc6:	4619      	mov	r1, r3
 8005fc8:	4805      	ldr	r0, [pc, #20]	; (8005fe0 <MX_ADC2_Init+0x204>)
 8005fca:	f003 fe23 	bl	8009c14 <HAL_ADC_ConfigChannel>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d001      	beq.n	8005fd8 <MX_ADC2_Init+0x1fc>
  {
    Error_Handler();
 8005fd4:	f000 fd4a 	bl	8006a6c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8005fd8:	bf00      	nop
 8005fda:	3710      	adds	r7, #16
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}
 8005fe0:	2003f964 	.word	0x2003f964
 8005fe4:	40012100 	.word	0x40012100
 8005fe8:	0f000001 	.word	0x0f000001

08005fec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005ff0:	4b12      	ldr	r3, [pc, #72]	; (800603c <MX_I2C1_Init+0x50>)
 8005ff2:	4a13      	ldr	r2, [pc, #76]	; (8006040 <MX_I2C1_Init+0x54>)
 8005ff4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8005ff6:	4b11      	ldr	r3, [pc, #68]	; (800603c <MX_I2C1_Init+0x50>)
 8005ff8:	4a12      	ldr	r2, [pc, #72]	; (8006044 <MX_I2C1_Init+0x58>)
 8005ffa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005ffc:	4b0f      	ldr	r3, [pc, #60]	; (800603c <MX_I2C1_Init+0x50>)
 8005ffe:	2200      	movs	r2, #0
 8006000:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8006002:	4b0e      	ldr	r3, [pc, #56]	; (800603c <MX_I2C1_Init+0x50>)
 8006004:	2200      	movs	r2, #0
 8006006:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006008:	4b0c      	ldr	r3, [pc, #48]	; (800603c <MX_I2C1_Init+0x50>)
 800600a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800600e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006010:	4b0a      	ldr	r3, [pc, #40]	; (800603c <MX_I2C1_Init+0x50>)
 8006012:	2200      	movs	r2, #0
 8006014:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8006016:	4b09      	ldr	r3, [pc, #36]	; (800603c <MX_I2C1_Init+0x50>)
 8006018:	2200      	movs	r2, #0
 800601a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800601c:	4b07      	ldr	r3, [pc, #28]	; (800603c <MX_I2C1_Init+0x50>)
 800601e:	2200      	movs	r2, #0
 8006020:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8006022:	4b06      	ldr	r3, [pc, #24]	; (800603c <MX_I2C1_Init+0x50>)
 8006024:	2280      	movs	r2, #128	; 0x80
 8006026:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006028:	4804      	ldr	r0, [pc, #16]	; (800603c <MX_I2C1_Init+0x50>)
 800602a:	f004 ff31 	bl	800ae90 <HAL_I2C_Init>
 800602e:	4603      	mov	r3, r0
 8006030:	2b00      	cmp	r3, #0
 8006032:	d001      	beq.n	8006038 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8006034:	f000 fd1a 	bl	8006a6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8006038:	bf00      	nop
 800603a:	bd80      	pop	{r7, pc}
 800603c:	2003f9ac 	.word	0x2003f9ac
 8006040:	40005400 	.word	0x40005400
 8006044:	000186a0 	.word	0x000186a0

08006048 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800604c:	4b12      	ldr	r3, [pc, #72]	; (8006098 <MX_I2C2_Init+0x50>)
 800604e:	4a13      	ldr	r2, [pc, #76]	; (800609c <MX_I2C2_Init+0x54>)
 8006050:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8006052:	4b11      	ldr	r3, [pc, #68]	; (8006098 <MX_I2C2_Init+0x50>)
 8006054:	4a12      	ldr	r2, [pc, #72]	; (80060a0 <MX_I2C2_Init+0x58>)
 8006056:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006058:	4b0f      	ldr	r3, [pc, #60]	; (8006098 <MX_I2C2_Init+0x50>)
 800605a:	2200      	movs	r2, #0
 800605c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800605e:	4b0e      	ldr	r3, [pc, #56]	; (8006098 <MX_I2C2_Init+0x50>)
 8006060:	2200      	movs	r2, #0
 8006062:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006064:	4b0c      	ldr	r3, [pc, #48]	; (8006098 <MX_I2C2_Init+0x50>)
 8006066:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800606a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800606c:	4b0a      	ldr	r3, [pc, #40]	; (8006098 <MX_I2C2_Init+0x50>)
 800606e:	2200      	movs	r2, #0
 8006070:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8006072:	4b09      	ldr	r3, [pc, #36]	; (8006098 <MX_I2C2_Init+0x50>)
 8006074:	2200      	movs	r2, #0
 8006076:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006078:	4b07      	ldr	r3, [pc, #28]	; (8006098 <MX_I2C2_Init+0x50>)
 800607a:	2200      	movs	r2, #0
 800607c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 800607e:	4b06      	ldr	r3, [pc, #24]	; (8006098 <MX_I2C2_Init+0x50>)
 8006080:	2280      	movs	r2, #128	; 0x80
 8006082:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8006084:	4804      	ldr	r0, [pc, #16]	; (8006098 <MX_I2C2_Init+0x50>)
 8006086:	f004 ff03 	bl	800ae90 <HAL_I2C_Init>
 800608a:	4603      	mov	r3, r0
 800608c:	2b00      	cmp	r3, #0
 800608e:	d001      	beq.n	8006094 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8006090:	f000 fcec 	bl	8006a6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8006094:	bf00      	nop
 8006096:	bd80      	pop	{r7, pc}
 8006098:	2003fa40 	.word	0x2003fa40
 800609c:	40005800 	.word	0x40005800
 80060a0:	000186a0 	.word	0x000186a0

080060a4 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80060a4:	b480      	push	{r7}
 80060a6:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80060a8:	4b0c      	ldr	r3, [pc, #48]	; (80060dc <MX_SDIO_SD_Init+0x38>)
 80060aa:	4a0d      	ldr	r2, [pc, #52]	; (80060e0 <MX_SDIO_SD_Init+0x3c>)
 80060ac:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80060ae:	4b0b      	ldr	r3, [pc, #44]	; (80060dc <MX_SDIO_SD_Init+0x38>)
 80060b0:	2200      	movs	r2, #0
 80060b2:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80060b4:	4b09      	ldr	r3, [pc, #36]	; (80060dc <MX_SDIO_SD_Init+0x38>)
 80060b6:	2200      	movs	r2, #0
 80060b8:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80060ba:	4b08      	ldr	r3, [pc, #32]	; (80060dc <MX_SDIO_SD_Init+0x38>)
 80060bc:	2200      	movs	r2, #0
 80060be:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80060c0:	4b06      	ldr	r3, [pc, #24]	; (80060dc <MX_SDIO_SD_Init+0x38>)
 80060c2:	2200      	movs	r2, #0
 80060c4:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80060c6:	4b05      	ldr	r3, [pc, #20]	; (80060dc <MX_SDIO_SD_Init+0x38>)
 80060c8:	2200      	movs	r2, #0
 80060ca:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 2;
 80060cc:	4b03      	ldr	r3, [pc, #12]	; (80060dc <MX_SDIO_SD_Init+0x38>)
 80060ce:	2202      	movs	r2, #2
 80060d0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80060d2:	bf00      	nop
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr
 80060dc:	2003fc40 	.word	0x2003fc40
 80060e0:	40012c00 	.word	0x40012c00

080060e4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80060e8:	4b17      	ldr	r3, [pc, #92]	; (8006148 <MX_SPI2_Init+0x64>)
 80060ea:	4a18      	ldr	r2, [pc, #96]	; (800614c <MX_SPI2_Init+0x68>)
 80060ec:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80060ee:	4b16      	ldr	r3, [pc, #88]	; (8006148 <MX_SPI2_Init+0x64>)
 80060f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80060f4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80060f6:	4b14      	ldr	r3, [pc, #80]	; (8006148 <MX_SPI2_Init+0x64>)
 80060f8:	2200      	movs	r2, #0
 80060fa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80060fc:	4b12      	ldr	r3, [pc, #72]	; (8006148 <MX_SPI2_Init+0x64>)
 80060fe:	2200      	movs	r2, #0
 8006100:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8006102:	4b11      	ldr	r3, [pc, #68]	; (8006148 <MX_SPI2_Init+0x64>)
 8006104:	2202      	movs	r2, #2
 8006106:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8006108:	4b0f      	ldr	r3, [pc, #60]	; (8006148 <MX_SPI2_Init+0x64>)
 800610a:	2201      	movs	r2, #1
 800610c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800610e:	4b0e      	ldr	r3, [pc, #56]	; (8006148 <MX_SPI2_Init+0x64>)
 8006110:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006114:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8006116:	4b0c      	ldr	r3, [pc, #48]	; (8006148 <MX_SPI2_Init+0x64>)
 8006118:	2228      	movs	r2, #40	; 0x28
 800611a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800611c:	4b0a      	ldr	r3, [pc, #40]	; (8006148 <MX_SPI2_Init+0x64>)
 800611e:	2200      	movs	r2, #0
 8006120:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8006122:	4b09      	ldr	r3, [pc, #36]	; (8006148 <MX_SPI2_Init+0x64>)
 8006124:	2200      	movs	r2, #0
 8006126:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006128:	4b07      	ldr	r3, [pc, #28]	; (8006148 <MX_SPI2_Init+0x64>)
 800612a:	2200      	movs	r2, #0
 800612c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800612e:	4b06      	ldr	r3, [pc, #24]	; (8006148 <MX_SPI2_Init+0x64>)
 8006130:	220a      	movs	r2, #10
 8006132:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8006134:	4804      	ldr	r0, [pc, #16]	; (8006148 <MX_SPI2_Init+0x64>)
 8006136:	f007 fff1 	bl	800e11c <HAL_SPI_Init>
 800613a:	4603      	mov	r3, r0
 800613c:	2b00      	cmp	r3, #0
 800613e:	d001      	beq.n	8006144 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8006140:	f000 fc94 	bl	8006a6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8006144:	bf00      	nop
 8006146:	bd80      	pop	{r7, pc}
 8006148:	2003f88c 	.word	0x2003f88c
 800614c:	40003800 	.word	0x40003800

08006150 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b09a      	sub	sp, #104	; 0x68
 8006154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8006156:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800615a:	2224      	movs	r2, #36	; 0x24
 800615c:	2100      	movs	r1, #0
 800615e:	4618      	mov	r0, r3
 8006160:	f00f fba5 	bl	80158ae <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006164:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006168:	2200      	movs	r2, #0
 800616a:	601a      	str	r2, [r3, #0]
 800616c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800616e:	f107 0320 	add.w	r3, r7, #32
 8006172:	2200      	movs	r2, #0
 8006174:	601a      	str	r2, [r3, #0]
 8006176:	605a      	str	r2, [r3, #4]
 8006178:	609a      	str	r2, [r3, #8]
 800617a:	60da      	str	r2, [r3, #12]
 800617c:	611a      	str	r2, [r3, #16]
 800617e:	615a      	str	r2, [r3, #20]
 8006180:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8006182:	463b      	mov	r3, r7
 8006184:	2220      	movs	r2, #32
 8006186:	2100      	movs	r1, #0
 8006188:	4618      	mov	r0, r3
 800618a:	f00f fb90 	bl	80158ae <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800618e:	4b42      	ldr	r3, [pc, #264]	; (8006298 <MX_TIM1_Init+0x148>)
 8006190:	4a42      	ldr	r2, [pc, #264]	; (800629c <MX_TIM1_Init+0x14c>)
 8006192:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8006194:	4b40      	ldr	r3, [pc, #256]	; (8006298 <MX_TIM1_Init+0x148>)
 8006196:	2200      	movs	r2, #0
 8006198:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800619a:	4b3f      	ldr	r3, [pc, #252]	; (8006298 <MX_TIM1_Init+0x148>)
 800619c:	2200      	movs	r2, #0
 800619e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80061a0:	4b3d      	ldr	r3, [pc, #244]	; (8006298 <MX_TIM1_Init+0x148>)
 80061a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80061a6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80061a8:	4b3b      	ldr	r3, [pc, #236]	; (8006298 <MX_TIM1_Init+0x148>)
 80061aa:	2200      	movs	r2, #0
 80061ac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80061ae:	4b3a      	ldr	r3, [pc, #232]	; (8006298 <MX_TIM1_Init+0x148>)
 80061b0:	2200      	movs	r2, #0
 80061b2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80061b4:	4b38      	ldr	r3, [pc, #224]	; (8006298 <MX_TIM1_Init+0x148>)
 80061b6:	2200      	movs	r2, #0
 80061b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80061ba:	4837      	ldr	r0, [pc, #220]	; (8006298 <MX_TIM1_Init+0x148>)
 80061bc:	f008 fd51 	bl	800ec62 <HAL_TIM_PWM_Init>
 80061c0:	4603      	mov	r3, r0
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d001      	beq.n	80061ca <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80061c6:	f000 fc51 	bl	8006a6c <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80061ca:	2303      	movs	r3, #3
 80061cc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80061ce:	2300      	movs	r3, #0
 80061d0:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80061d2:	2301      	movs	r3, #1
 80061d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80061d6:	2300      	movs	r3, #0
 80061d8:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 80061da:	2300      	movs	r3, #0
 80061dc:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80061de:	2300      	movs	r3, #0
 80061e0:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80061e2:	2301      	movs	r3, #1
 80061e4:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80061e6:	2300      	movs	r3, #0
 80061e8:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 80061ea:	2300      	movs	r3, #0
 80061ec:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80061ee:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80061f2:	4619      	mov	r1, r3
 80061f4:	4828      	ldr	r0, [pc, #160]	; (8006298 <MX_TIM1_Init+0x148>)
 80061f6:	f008 fd9d 	bl	800ed34 <HAL_TIM_Encoder_Init>
 80061fa:	4603      	mov	r3, r0
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d001      	beq.n	8006204 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8006200:	f000 fc34 	bl	8006a6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006204:	2300      	movs	r3, #0
 8006206:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006208:	2300      	movs	r3, #0
 800620a:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800620c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006210:	4619      	mov	r1, r3
 8006212:	4821      	ldr	r0, [pc, #132]	; (8006298 <MX_TIM1_Init+0x148>)
 8006214:	f009 fac4 	bl	800f7a0 <HAL_TIMEx_MasterConfigSynchronization>
 8006218:	4603      	mov	r3, r0
 800621a:	2b00      	cmp	r3, #0
 800621c:	d001      	beq.n	8006222 <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 800621e:	f000 fc25 	bl	8006a6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006222:	2360      	movs	r3, #96	; 0x60
 8006224:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 8006226:	2300      	movs	r3, #0
 8006228:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800622a:	2300      	movs	r3, #0
 800622c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800622e:	2300      	movs	r3, #0
 8006230:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006232:	2300      	movs	r3, #0
 8006234:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006236:	2300      	movs	r3, #0
 8006238:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800623a:	2300      	movs	r3, #0
 800623c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800623e:	f107 0320 	add.w	r3, r7, #32
 8006242:	2208      	movs	r2, #8
 8006244:	4619      	mov	r1, r3
 8006246:	4814      	ldr	r0, [pc, #80]	; (8006298 <MX_TIM1_Init+0x148>)
 8006248:	f008 ff46 	bl	800f0d8 <HAL_TIM_PWM_ConfigChannel>
 800624c:	4603      	mov	r3, r0
 800624e:	2b00      	cmp	r3, #0
 8006250:	d001      	beq.n	8006256 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8006252:	f000 fc0b 	bl	8006a6c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8006256:	2300      	movs	r3, #0
 8006258:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800625a:	2300      	movs	r3, #0
 800625c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800625e:	2300      	movs	r3, #0
 8006260:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8006262:	2300      	movs	r3, #0
 8006264:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8006266:	2300      	movs	r3, #0
 8006268:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800626a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800626e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006270:	2300      	movs	r3, #0
 8006272:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8006274:	463b      	mov	r3, r7
 8006276:	4619      	mov	r1, r3
 8006278:	4807      	ldr	r0, [pc, #28]	; (8006298 <MX_TIM1_Init+0x148>)
 800627a:	f009 fb0d 	bl	800f898 <HAL_TIMEx_ConfigBreakDeadTime>
 800627e:	4603      	mov	r3, r0
 8006280:	2b00      	cmp	r3, #0
 8006282:	d001      	beq.n	8006288 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8006284:	f000 fbf2 	bl	8006a6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8006288:	4803      	ldr	r0, [pc, #12]	; (8006298 <MX_TIM1_Init+0x148>)
 800628a:	f000 ffdf 	bl	800724c <HAL_TIM_MspPostInit>

}
 800628e:	bf00      	nop
 8006290:	3768      	adds	r7, #104	; 0x68
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}
 8006296:	bf00      	nop
 8006298:	2003fc00 	.word	0x2003fc00
 800629c:	40010000 	.word	0x40010000

080062a0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b08a      	sub	sp, #40	; 0x28
 80062a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80062a6:	f107 0320 	add.w	r3, r7, #32
 80062aa:	2200      	movs	r2, #0
 80062ac:	601a      	str	r2, [r3, #0]
 80062ae:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80062b0:	1d3b      	adds	r3, r7, #4
 80062b2:	2200      	movs	r2, #0
 80062b4:	601a      	str	r2, [r3, #0]
 80062b6:	605a      	str	r2, [r3, #4]
 80062b8:	609a      	str	r2, [r3, #8]
 80062ba:	60da      	str	r2, [r3, #12]
 80062bc:	611a      	str	r2, [r3, #16]
 80062be:	615a      	str	r2, [r3, #20]
 80062c0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80062c2:	4b27      	ldr	r3, [pc, #156]	; (8006360 <MX_TIM3_Init+0xc0>)
 80062c4:	4a27      	ldr	r2, [pc, #156]	; (8006364 <MX_TIM3_Init+0xc4>)
 80062c6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80062c8:	4b25      	ldr	r3, [pc, #148]	; (8006360 <MX_TIM3_Init+0xc0>)
 80062ca:	2200      	movs	r2, #0
 80062cc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80062ce:	4b24      	ldr	r3, [pc, #144]	; (8006360 <MX_TIM3_Init+0xc0>)
 80062d0:	2200      	movs	r2, #0
 80062d2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80062d4:	4b22      	ldr	r3, [pc, #136]	; (8006360 <MX_TIM3_Init+0xc0>)
 80062d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80062da:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80062dc:	4b20      	ldr	r3, [pc, #128]	; (8006360 <MX_TIM3_Init+0xc0>)
 80062de:	2200      	movs	r2, #0
 80062e0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80062e2:	4b1f      	ldr	r3, [pc, #124]	; (8006360 <MX_TIM3_Init+0xc0>)
 80062e4:	2200      	movs	r2, #0
 80062e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80062e8:	481d      	ldr	r0, [pc, #116]	; (8006360 <MX_TIM3_Init+0xc0>)
 80062ea:	f008 fcba 	bl	800ec62 <HAL_TIM_PWM_Init>
 80062ee:	4603      	mov	r3, r0
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d001      	beq.n	80062f8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80062f4:	f000 fbba 	bl	8006a6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80062f8:	2300      	movs	r3, #0
 80062fa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80062fc:	2300      	movs	r3, #0
 80062fe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006300:	f107 0320 	add.w	r3, r7, #32
 8006304:	4619      	mov	r1, r3
 8006306:	4816      	ldr	r0, [pc, #88]	; (8006360 <MX_TIM3_Init+0xc0>)
 8006308:	f009 fa4a 	bl	800f7a0 <HAL_TIMEx_MasterConfigSynchronization>
 800630c:	4603      	mov	r3, r0
 800630e:	2b00      	cmp	r3, #0
 8006310:	d001      	beq.n	8006316 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8006312:	f000 fbab 	bl	8006a6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006316:	2360      	movs	r3, #96	; 0x60
 8006318:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800631a:	2300      	movs	r3, #0
 800631c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800631e:	2300      	movs	r3, #0
 8006320:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006322:	2300      	movs	r3, #0
 8006324:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006326:	1d3b      	adds	r3, r7, #4
 8006328:	2200      	movs	r2, #0
 800632a:	4619      	mov	r1, r3
 800632c:	480c      	ldr	r0, [pc, #48]	; (8006360 <MX_TIM3_Init+0xc0>)
 800632e:	f008 fed3 	bl	800f0d8 <HAL_TIM_PWM_ConfigChannel>
 8006332:	4603      	mov	r3, r0
 8006334:	2b00      	cmp	r3, #0
 8006336:	d001      	beq.n	800633c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8006338:	f000 fb98 	bl	8006a6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800633c:	1d3b      	adds	r3, r7, #4
 800633e:	2204      	movs	r2, #4
 8006340:	4619      	mov	r1, r3
 8006342:	4807      	ldr	r0, [pc, #28]	; (8006360 <MX_TIM3_Init+0xc0>)
 8006344:	f008 fec8 	bl	800f0d8 <HAL_TIM_PWM_ConfigChannel>
 8006348:	4603      	mov	r3, r0
 800634a:	2b00      	cmp	r3, #0
 800634c:	d001      	beq.n	8006352 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800634e:	f000 fb8d 	bl	8006a6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8006352:	4803      	ldr	r0, [pc, #12]	; (8006360 <MX_TIM3_Init+0xc0>)
 8006354:	f000 ff7a 	bl	800724c <HAL_TIM_MspPostInit>

}
 8006358:	bf00      	nop
 800635a:	3728      	adds	r7, #40	; 0x28
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}
 8006360:	2003fa98 	.word	0x2003fa98
 8006364:	40000400 	.word	0x40000400

08006368 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b08a      	sub	sp, #40	; 0x28
 800636c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800636e:	f107 0320 	add.w	r3, r7, #32
 8006372:	2200      	movs	r2, #0
 8006374:	601a      	str	r2, [r3, #0]
 8006376:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006378:	1d3b      	adds	r3, r7, #4
 800637a:	2200      	movs	r2, #0
 800637c:	601a      	str	r2, [r3, #0]
 800637e:	605a      	str	r2, [r3, #4]
 8006380:	609a      	str	r2, [r3, #8]
 8006382:	60da      	str	r2, [r3, #12]
 8006384:	611a      	str	r2, [r3, #16]
 8006386:	615a      	str	r2, [r3, #20]
 8006388:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800638a:	4b27      	ldr	r3, [pc, #156]	; (8006428 <MX_TIM4_Init+0xc0>)
 800638c:	4a27      	ldr	r2, [pc, #156]	; (800642c <MX_TIM4_Init+0xc4>)
 800638e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8006390:	4b25      	ldr	r3, [pc, #148]	; (8006428 <MX_TIM4_Init+0xc0>)
 8006392:	2200      	movs	r2, #0
 8006394:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006396:	4b24      	ldr	r3, [pc, #144]	; (8006428 <MX_TIM4_Init+0xc0>)
 8006398:	2200      	movs	r2, #0
 800639a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 800639c:	4b22      	ldr	r3, [pc, #136]	; (8006428 <MX_TIM4_Init+0xc0>)
 800639e:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80063a2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80063a4:	4b20      	ldr	r3, [pc, #128]	; (8006428 <MX_TIM4_Init+0xc0>)
 80063a6:	2200      	movs	r2, #0
 80063a8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80063aa:	4b1f      	ldr	r3, [pc, #124]	; (8006428 <MX_TIM4_Init+0xc0>)
 80063ac:	2200      	movs	r2, #0
 80063ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80063b0:	481d      	ldr	r0, [pc, #116]	; (8006428 <MX_TIM4_Init+0xc0>)
 80063b2:	f008 fc56 	bl	800ec62 <HAL_TIM_PWM_Init>
 80063b6:	4603      	mov	r3, r0
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d001      	beq.n	80063c0 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80063bc:	f000 fb56 	bl	8006a6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80063c0:	2300      	movs	r3, #0
 80063c2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80063c4:	2300      	movs	r3, #0
 80063c6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80063c8:	f107 0320 	add.w	r3, r7, #32
 80063cc:	4619      	mov	r1, r3
 80063ce:	4816      	ldr	r0, [pc, #88]	; (8006428 <MX_TIM4_Init+0xc0>)
 80063d0:	f009 f9e6 	bl	800f7a0 <HAL_TIMEx_MasterConfigSynchronization>
 80063d4:	4603      	mov	r3, r0
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d001      	beq.n	80063de <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80063da:	f000 fb47 	bl	8006a6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80063de:	2360      	movs	r3, #96	; 0x60
 80063e0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80063e2:	2300      	movs	r3, #0
 80063e4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80063e6:	2300      	movs	r3, #0
 80063e8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80063ea:	2300      	movs	r3, #0
 80063ec:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80063ee:	1d3b      	adds	r3, r7, #4
 80063f0:	2208      	movs	r2, #8
 80063f2:	4619      	mov	r1, r3
 80063f4:	480c      	ldr	r0, [pc, #48]	; (8006428 <MX_TIM4_Init+0xc0>)
 80063f6:	f008 fe6f 	bl	800f0d8 <HAL_TIM_PWM_ConfigChannel>
 80063fa:	4603      	mov	r3, r0
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d001      	beq.n	8006404 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8006400:	f000 fb34 	bl	8006a6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8006404:	1d3b      	adds	r3, r7, #4
 8006406:	220c      	movs	r2, #12
 8006408:	4619      	mov	r1, r3
 800640a:	4807      	ldr	r0, [pc, #28]	; (8006428 <MX_TIM4_Init+0xc0>)
 800640c:	f008 fe64 	bl	800f0d8 <HAL_TIM_PWM_ConfigChannel>
 8006410:	4603      	mov	r3, r0
 8006412:	2b00      	cmp	r3, #0
 8006414:	d001      	beq.n	800641a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8006416:	f000 fb29 	bl	8006a6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800641a:	4803      	ldr	r0, [pc, #12]	; (8006428 <MX_TIM4_Init+0xc0>)
 800641c:	f000 ff16 	bl	800724c <HAL_TIM_MspPostInit>

}
 8006420:	bf00      	nop
 8006422:	3728      	adds	r7, #40	; 0x28
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}
 8006428:	2003f924 	.word	0x2003f924
 800642c:	40000800 	.word	0x40000800

08006430 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b082      	sub	sp, #8
 8006434:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006436:	463b      	mov	r3, r7
 8006438:	2200      	movs	r2, #0
 800643a:	601a      	str	r2, [r3, #0]
 800643c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800643e:	4b15      	ldr	r3, [pc, #84]	; (8006494 <MX_TIM6_Init+0x64>)
 8006440:	4a15      	ldr	r2, [pc, #84]	; (8006498 <MX_TIM6_Init+0x68>)
 8006442:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 8006444:	4b13      	ldr	r3, [pc, #76]	; (8006494 <MX_TIM6_Init+0x64>)
 8006446:	2259      	movs	r2, #89	; 0x59
 8006448:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800644a:	4b12      	ldr	r3, [pc, #72]	; (8006494 <MX_TIM6_Init+0x64>)
 800644c:	2200      	movs	r2, #0
 800644e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8006450:	4b10      	ldr	r3, [pc, #64]	; (8006494 <MX_TIM6_Init+0x64>)
 8006452:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006456:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006458:	4b0e      	ldr	r3, [pc, #56]	; (8006494 <MX_TIM6_Init+0x64>)
 800645a:	2280      	movs	r2, #128	; 0x80
 800645c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800645e:	480d      	ldr	r0, [pc, #52]	; (8006494 <MX_TIM6_Init+0x64>)
 8006460:	f008 fbb0 	bl	800ebc4 <HAL_TIM_Base_Init>
 8006464:	4603      	mov	r3, r0
 8006466:	2b00      	cmp	r3, #0
 8006468:	d001      	beq.n	800646e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800646a:	f000 faff 	bl	8006a6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800646e:	2300      	movs	r3, #0
 8006470:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006472:	2300      	movs	r3, #0
 8006474:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8006476:	463b      	mov	r3, r7
 8006478:	4619      	mov	r1, r3
 800647a:	4806      	ldr	r0, [pc, #24]	; (8006494 <MX_TIM6_Init+0x64>)
 800647c:	f009 f990 	bl	800f7a0 <HAL_TIMEx_MasterConfigSynchronization>
 8006480:	4603      	mov	r3, r0
 8006482:	2b00      	cmp	r3, #0
 8006484:	d001      	beq.n	800648a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8006486:	f000 faf1 	bl	8006a6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800648a:	bf00      	nop
 800648c:	3708      	adds	r7, #8
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}
 8006492:	bf00      	nop
 8006494:	2003fbc0 	.word	0x2003fbc0
 8006498:	40001000 	.word	0x40001000

0800649c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b082      	sub	sp, #8
 80064a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80064a2:	463b      	mov	r3, r7
 80064a4:	2200      	movs	r2, #0
 80064a6:	601a      	str	r2, [r3, #0]
 80064a8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80064aa:	4b14      	ldr	r3, [pc, #80]	; (80064fc <MX_TIM7_Init+0x60>)
 80064ac:	4a14      	ldr	r2, [pc, #80]	; (8006500 <MX_TIM7_Init+0x64>)
 80064ae:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 179;
 80064b0:	4b12      	ldr	r3, [pc, #72]	; (80064fc <MX_TIM7_Init+0x60>)
 80064b2:	22b3      	movs	r2, #179	; 0xb3
 80064b4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80064b6:	4b11      	ldr	r3, [pc, #68]	; (80064fc <MX_TIM7_Init+0x60>)
 80064b8:	2200      	movs	r2, #0
 80064ba:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49;
 80064bc:	4b0f      	ldr	r3, [pc, #60]	; (80064fc <MX_TIM7_Init+0x60>)
 80064be:	2231      	movs	r2, #49	; 0x31
 80064c0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80064c2:	4b0e      	ldr	r3, [pc, #56]	; (80064fc <MX_TIM7_Init+0x60>)
 80064c4:	2280      	movs	r2, #128	; 0x80
 80064c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80064c8:	480c      	ldr	r0, [pc, #48]	; (80064fc <MX_TIM7_Init+0x60>)
 80064ca:	f008 fb7b 	bl	800ebc4 <HAL_TIM_Base_Init>
 80064ce:	4603      	mov	r3, r0
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d001      	beq.n	80064d8 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 80064d4:	f000 faca 	bl	8006a6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80064d8:	2300      	movs	r3, #0
 80064da:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80064dc:	2300      	movs	r3, #0
 80064de:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80064e0:	463b      	mov	r3, r7
 80064e2:	4619      	mov	r1, r3
 80064e4:	4805      	ldr	r0, [pc, #20]	; (80064fc <MX_TIM7_Init+0x60>)
 80064e6:	f009 f95b 	bl	800f7a0 <HAL_TIMEx_MasterConfigSynchronization>
 80064ea:	4603      	mov	r3, r0
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d001      	beq.n	80064f4 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 80064f0:	f000 fabc 	bl	8006a6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80064f4:	bf00      	nop
 80064f6:	3708      	adds	r7, #8
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}
 80064fc:	2003fd64 	.word	0x2003fd64
 8006500:	40001400 	.word	0x40001400

08006504 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b08c      	sub	sp, #48	; 0x30
 8006508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800650a:	f107 030c 	add.w	r3, r7, #12
 800650e:	2224      	movs	r2, #36	; 0x24
 8006510:	2100      	movs	r1, #0
 8006512:	4618      	mov	r0, r3
 8006514:	f00f f9cb 	bl	80158ae <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006518:	1d3b      	adds	r3, r7, #4
 800651a:	2200      	movs	r2, #0
 800651c:	601a      	str	r2, [r3, #0]
 800651e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8006520:	4b22      	ldr	r3, [pc, #136]	; (80065ac <MX_TIM8_Init+0xa8>)
 8006522:	4a23      	ldr	r2, [pc, #140]	; (80065b0 <MX_TIM8_Init+0xac>)
 8006524:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8006526:	4b21      	ldr	r3, [pc, #132]	; (80065ac <MX_TIM8_Init+0xa8>)
 8006528:	2200      	movs	r2, #0
 800652a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 800652c:	4b1f      	ldr	r3, [pc, #124]	; (80065ac <MX_TIM8_Init+0xa8>)
 800652e:	2210      	movs	r2, #16
 8006530:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8006532:	4b1e      	ldr	r3, [pc, #120]	; (80065ac <MX_TIM8_Init+0xa8>)
 8006534:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006538:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800653a:	4b1c      	ldr	r3, [pc, #112]	; (80065ac <MX_TIM8_Init+0xa8>)
 800653c:	2200      	movs	r2, #0
 800653e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8006540:	4b1a      	ldr	r3, [pc, #104]	; (80065ac <MX_TIM8_Init+0xa8>)
 8006542:	2200      	movs	r2, #0
 8006544:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006546:	4b19      	ldr	r3, [pc, #100]	; (80065ac <MX_TIM8_Init+0xa8>)
 8006548:	2200      	movs	r2, #0
 800654a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800654c:	2303      	movs	r3, #3
 800654e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006550:	2300      	movs	r3, #0
 8006552:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8006554:	2301      	movs	r3, #1
 8006556:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006558:	2300      	movs	r3, #0
 800655a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800655c:	2300      	movs	r3, #0
 800655e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006560:	2300      	movs	r3, #0
 8006562:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8006564:	2301      	movs	r3, #1
 8006566:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8006568:	2300      	movs	r3, #0
 800656a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800656c:	2300      	movs	r3, #0
 800656e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8006570:	f107 030c 	add.w	r3, r7, #12
 8006574:	4619      	mov	r1, r3
 8006576:	480d      	ldr	r0, [pc, #52]	; (80065ac <MX_TIM8_Init+0xa8>)
 8006578:	f008 fbdc 	bl	800ed34 <HAL_TIM_Encoder_Init>
 800657c:	4603      	mov	r3, r0
 800657e:	2b00      	cmp	r3, #0
 8006580:	d001      	beq.n	8006586 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8006582:	f000 fa73 	bl	8006a6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006586:	2300      	movs	r3, #0
 8006588:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800658a:	2300      	movs	r3, #0
 800658c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800658e:	1d3b      	adds	r3, r7, #4
 8006590:	4619      	mov	r1, r3
 8006592:	4806      	ldr	r0, [pc, #24]	; (80065ac <MX_TIM8_Init+0xa8>)
 8006594:	f009 f904 	bl	800f7a0 <HAL_TIMEx_MasterConfigSynchronization>
 8006598:	4603      	mov	r3, r0
 800659a:	2b00      	cmp	r3, #0
 800659c:	d001      	beq.n	80065a2 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 800659e:	f000 fa65 	bl	8006a6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80065a2:	bf00      	nop
 80065a4:	3730      	adds	r7, #48	; 0x30
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}
 80065aa:	bf00      	nop
 80065ac:	2003f8e4 	.word	0x2003f8e4
 80065b0:	40010400 	.word	0x40010400

080065b4 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b088      	sub	sp, #32
 80065b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80065ba:	1d3b      	adds	r3, r7, #4
 80065bc:	2200      	movs	r2, #0
 80065be:	601a      	str	r2, [r3, #0]
 80065c0:	605a      	str	r2, [r3, #4]
 80065c2:	609a      	str	r2, [r3, #8]
 80065c4:	60da      	str	r2, [r3, #12]
 80065c6:	611a      	str	r2, [r3, #16]
 80065c8:	615a      	str	r2, [r3, #20]
 80065ca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80065cc:	4b1e      	ldr	r3, [pc, #120]	; (8006648 <MX_TIM10_Init+0x94>)
 80065ce:	4a1f      	ldr	r2, [pc, #124]	; (800664c <MX_TIM10_Init+0x98>)
 80065d0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 80065d2:	4b1d      	ldr	r3, [pc, #116]	; (8006648 <MX_TIM10_Init+0x94>)
 80065d4:	2200      	movs	r2, #0
 80065d6:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80065d8:	4b1b      	ldr	r3, [pc, #108]	; (8006648 <MX_TIM10_Init+0x94>)
 80065da:	2200      	movs	r2, #0
 80065dc:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 80065de:	4b1a      	ldr	r3, [pc, #104]	; (8006648 <MX_TIM10_Init+0x94>)
 80065e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80065e4:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80065e6:	4b18      	ldr	r3, [pc, #96]	; (8006648 <MX_TIM10_Init+0x94>)
 80065e8:	2200      	movs	r2, #0
 80065ea:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80065ec:	4b16      	ldr	r3, [pc, #88]	; (8006648 <MX_TIM10_Init+0x94>)
 80065ee:	2200      	movs	r2, #0
 80065f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80065f2:	4815      	ldr	r0, [pc, #84]	; (8006648 <MX_TIM10_Init+0x94>)
 80065f4:	f008 fae6 	bl	800ebc4 <HAL_TIM_Base_Init>
 80065f8:	4603      	mov	r3, r0
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d001      	beq.n	8006602 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 80065fe:	f000 fa35 	bl	8006a6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8006602:	4811      	ldr	r0, [pc, #68]	; (8006648 <MX_TIM10_Init+0x94>)
 8006604:	f008 fb2d 	bl	800ec62 <HAL_TIM_PWM_Init>
 8006608:	4603      	mov	r3, r0
 800660a:	2b00      	cmp	r3, #0
 800660c:	d001      	beq.n	8006612 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 800660e:	f000 fa2d 	bl	8006a6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006612:	2360      	movs	r3, #96	; 0x60
 8006614:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006616:	2300      	movs	r3, #0
 8006618:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800661a:	2300      	movs	r3, #0
 800661c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800661e:	2300      	movs	r3, #0
 8006620:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006622:	1d3b      	adds	r3, r7, #4
 8006624:	2200      	movs	r2, #0
 8006626:	4619      	mov	r1, r3
 8006628:	4807      	ldr	r0, [pc, #28]	; (8006648 <MX_TIM10_Init+0x94>)
 800662a:	f008 fd55 	bl	800f0d8 <HAL_TIM_PWM_ConfigChannel>
 800662e:	4603      	mov	r3, r0
 8006630:	2b00      	cmp	r3, #0
 8006632:	d001      	beq.n	8006638 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8006634:	f000 fa1a 	bl	8006a6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8006638:	4803      	ldr	r0, [pc, #12]	; (8006648 <MX_TIM10_Init+0x94>)
 800663a:	f000 fe07 	bl	800724c <HAL_TIM_MspPostInit>

}
 800663e:	bf00      	nop
 8006640:	3720      	adds	r7, #32
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}
 8006646:	bf00      	nop
 8006648:	2003fa00 	.word	0x2003fa00
 800664c:	40014400 	.word	0x40014400

08006650 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b088      	sub	sp, #32
 8006654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8006656:	1d3b      	adds	r3, r7, #4
 8006658:	2200      	movs	r2, #0
 800665a:	601a      	str	r2, [r3, #0]
 800665c:	605a      	str	r2, [r3, #4]
 800665e:	609a      	str	r2, [r3, #8]
 8006660:	60da      	str	r2, [r3, #12]
 8006662:	611a      	str	r2, [r3, #16]
 8006664:	615a      	str	r2, [r3, #20]
 8006666:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8006668:	4b1e      	ldr	r3, [pc, #120]	; (80066e4 <MX_TIM11_Init+0x94>)
 800666a:	4a1f      	ldr	r2, [pc, #124]	; (80066e8 <MX_TIM11_Init+0x98>)
 800666c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 800666e:	4b1d      	ldr	r3, [pc, #116]	; (80066e4 <MX_TIM11_Init+0x94>)
 8006670:	2200      	movs	r2, #0
 8006672:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006674:	4b1b      	ldr	r3, [pc, #108]	; (80066e4 <MX_TIM11_Init+0x94>)
 8006676:	2200      	movs	r2, #0
 8006678:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 800667a:	4b1a      	ldr	r3, [pc, #104]	; (80066e4 <MX_TIM11_Init+0x94>)
 800667c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006680:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006682:	4b18      	ldr	r3, [pc, #96]	; (80066e4 <MX_TIM11_Init+0x94>)
 8006684:	2200      	movs	r2, #0
 8006686:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006688:	4b16      	ldr	r3, [pc, #88]	; (80066e4 <MX_TIM11_Init+0x94>)
 800668a:	2200      	movs	r2, #0
 800668c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800668e:	4815      	ldr	r0, [pc, #84]	; (80066e4 <MX_TIM11_Init+0x94>)
 8006690:	f008 fa98 	bl	800ebc4 <HAL_TIM_Base_Init>
 8006694:	4603      	mov	r3, r0
 8006696:	2b00      	cmp	r3, #0
 8006698:	d001      	beq.n	800669e <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 800669a:	f000 f9e7 	bl	8006a6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 800669e:	4811      	ldr	r0, [pc, #68]	; (80066e4 <MX_TIM11_Init+0x94>)
 80066a0:	f008 fadf 	bl	800ec62 <HAL_TIM_PWM_Init>
 80066a4:	4603      	mov	r3, r0
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d001      	beq.n	80066ae <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 80066aa:	f000 f9df 	bl	8006a6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80066ae:	2360      	movs	r3, #96	; 0x60
 80066b0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80066b2:	2300      	movs	r3, #0
 80066b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80066b6:	2300      	movs	r3, #0
 80066b8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80066ba:	2300      	movs	r3, #0
 80066bc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80066be:	1d3b      	adds	r3, r7, #4
 80066c0:	2200      	movs	r2, #0
 80066c2:	4619      	mov	r1, r3
 80066c4:	4807      	ldr	r0, [pc, #28]	; (80066e4 <MX_TIM11_Init+0x94>)
 80066c6:	f008 fd07 	bl	800f0d8 <HAL_TIM_PWM_ConfigChannel>
 80066ca:	4603      	mov	r3, r0
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d001      	beq.n	80066d4 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 80066d0:	f000 f9cc 	bl	8006a6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 80066d4:	4803      	ldr	r0, [pc, #12]	; (80066e4 <MX_TIM11_Init+0x94>)
 80066d6:	f000 fdb9 	bl	800724c <HAL_TIM_MspPostInit>

}
 80066da:	bf00      	nop
 80066dc:	3720      	adds	r7, #32
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}
 80066e2:	bf00      	nop
 80066e4:	2003fb20 	.word	0x2003fb20
 80066e8:	40014800 	.word	0x40014800

080066ec <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80066f0:	4b0e      	ldr	r3, [pc, #56]	; (800672c <MX_TIM13_Init+0x40>)
 80066f2:	4a0f      	ldr	r2, [pc, #60]	; (8006730 <MX_TIM13_Init+0x44>)
 80066f4:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 89;
 80066f6:	4b0d      	ldr	r3, [pc, #52]	; (800672c <MX_TIM13_Init+0x40>)
 80066f8:	2259      	movs	r2, #89	; 0x59
 80066fa:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80066fc:	4b0b      	ldr	r3, [pc, #44]	; (800672c <MX_TIM13_Init+0x40>)
 80066fe:	2200      	movs	r2, #0
 8006700:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 8006702:	4b0a      	ldr	r3, [pc, #40]	; (800672c <MX_TIM13_Init+0x40>)
 8006704:	f242 720f 	movw	r2, #9999	; 0x270f
 8006708:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800670a:	4b08      	ldr	r3, [pc, #32]	; (800672c <MX_TIM13_Init+0x40>)
 800670c:	2200      	movs	r2, #0
 800670e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006710:	4b06      	ldr	r3, [pc, #24]	; (800672c <MX_TIM13_Init+0x40>)
 8006712:	2280      	movs	r2, #128	; 0x80
 8006714:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8006716:	4805      	ldr	r0, [pc, #20]	; (800672c <MX_TIM13_Init+0x40>)
 8006718:	f008 fa54 	bl	800ebc4 <HAL_TIM_Base_Init>
 800671c:	4603      	mov	r3, r0
 800671e:	2b00      	cmp	r3, #0
 8006720:	d001      	beq.n	8006726 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8006722:	f000 f9a3 	bl	8006a6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8006726:	bf00      	nop
 8006728:	bd80      	pop	{r7, pc}
 800672a:	bf00      	nop
 800672c:	2003fae0 	.word	0x2003fae0
 8006730:	40001c00 	.word	0x40001c00

08006734 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006738:	4b11      	ldr	r3, [pc, #68]	; (8006780 <MX_USART2_UART_Init+0x4c>)
 800673a:	4a12      	ldr	r2, [pc, #72]	; (8006784 <MX_USART2_UART_Init+0x50>)
 800673c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800673e:	4b10      	ldr	r3, [pc, #64]	; (8006780 <MX_USART2_UART_Init+0x4c>)
 8006740:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006744:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006746:	4b0e      	ldr	r3, [pc, #56]	; (8006780 <MX_USART2_UART_Init+0x4c>)
 8006748:	2200      	movs	r2, #0
 800674a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800674c:	4b0c      	ldr	r3, [pc, #48]	; (8006780 <MX_USART2_UART_Init+0x4c>)
 800674e:	2200      	movs	r2, #0
 8006750:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006752:	4b0b      	ldr	r3, [pc, #44]	; (8006780 <MX_USART2_UART_Init+0x4c>)
 8006754:	2200      	movs	r2, #0
 8006756:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006758:	4b09      	ldr	r3, [pc, #36]	; (8006780 <MX_USART2_UART_Init+0x4c>)
 800675a:	220c      	movs	r2, #12
 800675c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800675e:	4b08      	ldr	r3, [pc, #32]	; (8006780 <MX_USART2_UART_Init+0x4c>)
 8006760:	2200      	movs	r2, #0
 8006762:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006764:	4b06      	ldr	r3, [pc, #24]	; (8006780 <MX_USART2_UART_Init+0x4c>)
 8006766:	2200      	movs	r2, #0
 8006768:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800676a:	4805      	ldr	r0, [pc, #20]	; (8006780 <MX_USART2_UART_Init+0x4c>)
 800676c:	f009 f8fa 	bl	800f964 <HAL_UART_Init>
 8006770:	4603      	mov	r3, r0
 8006772:	2b00      	cmp	r3, #0
 8006774:	d001      	beq.n	800677a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8006776:	f000 f979 	bl	8006a6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800677a:	bf00      	nop
 800677c:	bd80      	pop	{r7, pc}
 800677e:	bf00      	nop
 8006780:	2003fcc4 	.word	0x2003fcc4
 8006784:	40004400 	.word	0x40004400

08006788 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b082      	sub	sp, #8
 800678c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800678e:	2300      	movs	r3, #0
 8006790:	607b      	str	r3, [r7, #4]
 8006792:	4b14      	ldr	r3, [pc, #80]	; (80067e4 <MX_DMA_Init+0x5c>)
 8006794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006796:	4a13      	ldr	r2, [pc, #76]	; (80067e4 <MX_DMA_Init+0x5c>)
 8006798:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800679c:	6313      	str	r3, [r2, #48]	; 0x30
 800679e:	4b11      	ldr	r3, [pc, #68]	; (80067e4 <MX_DMA_Init+0x5c>)
 80067a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067a6:	607b      	str	r3, [r7, #4]
 80067a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80067aa:	2200      	movs	r2, #0
 80067ac:	2100      	movs	r1, #0
 80067ae:	203a      	movs	r0, #58	; 0x3a
 80067b0:	f003 fdbb 	bl	800a32a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80067b4:	203a      	movs	r0, #58	; 0x3a
 80067b6:	f003 fdd4 	bl	800a362 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80067ba:	2200      	movs	r2, #0
 80067bc:	2100      	movs	r1, #0
 80067be:	203b      	movs	r0, #59	; 0x3b
 80067c0:	f003 fdb3 	bl	800a32a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80067c4:	203b      	movs	r0, #59	; 0x3b
 80067c6:	f003 fdcc 	bl	800a362 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80067ca:	2200      	movs	r2, #0
 80067cc:	2100      	movs	r1, #0
 80067ce:	2045      	movs	r0, #69	; 0x45
 80067d0:	f003 fdab 	bl	800a32a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80067d4:	2045      	movs	r0, #69	; 0x45
 80067d6:	f003 fdc4 	bl	800a362 <HAL_NVIC_EnableIRQ>

}
 80067da:	bf00      	nop
 80067dc:	3708      	adds	r7, #8
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
 80067e2:	bf00      	nop
 80067e4:	40023800 	.word	0x40023800

080067e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b08c      	sub	sp, #48	; 0x30
 80067ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80067ee:	f107 031c 	add.w	r3, r7, #28
 80067f2:	2200      	movs	r2, #0
 80067f4:	601a      	str	r2, [r3, #0]
 80067f6:	605a      	str	r2, [r3, #4]
 80067f8:	609a      	str	r2, [r3, #8]
 80067fa:	60da      	str	r2, [r3, #12]
 80067fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80067fe:	2300      	movs	r3, #0
 8006800:	61bb      	str	r3, [r7, #24]
 8006802:	4b94      	ldr	r3, [pc, #592]	; (8006a54 <MX_GPIO_Init+0x26c>)
 8006804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006806:	4a93      	ldr	r2, [pc, #588]	; (8006a54 <MX_GPIO_Init+0x26c>)
 8006808:	f043 0310 	orr.w	r3, r3, #16
 800680c:	6313      	str	r3, [r2, #48]	; 0x30
 800680e:	4b91      	ldr	r3, [pc, #580]	; (8006a54 <MX_GPIO_Init+0x26c>)
 8006810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006812:	f003 0310 	and.w	r3, r3, #16
 8006816:	61bb      	str	r3, [r7, #24]
 8006818:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800681a:	2300      	movs	r3, #0
 800681c:	617b      	str	r3, [r7, #20]
 800681e:	4b8d      	ldr	r3, [pc, #564]	; (8006a54 <MX_GPIO_Init+0x26c>)
 8006820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006822:	4a8c      	ldr	r2, [pc, #560]	; (8006a54 <MX_GPIO_Init+0x26c>)
 8006824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006828:	6313      	str	r3, [r2, #48]	; 0x30
 800682a:	4b8a      	ldr	r3, [pc, #552]	; (8006a54 <MX_GPIO_Init+0x26c>)
 800682c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800682e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006832:	617b      	str	r3, [r7, #20]
 8006834:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006836:	2300      	movs	r3, #0
 8006838:	613b      	str	r3, [r7, #16]
 800683a:	4b86      	ldr	r3, [pc, #536]	; (8006a54 <MX_GPIO_Init+0x26c>)
 800683c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800683e:	4a85      	ldr	r2, [pc, #532]	; (8006a54 <MX_GPIO_Init+0x26c>)
 8006840:	f043 0304 	orr.w	r3, r3, #4
 8006844:	6313      	str	r3, [r2, #48]	; 0x30
 8006846:	4b83      	ldr	r3, [pc, #524]	; (8006a54 <MX_GPIO_Init+0x26c>)
 8006848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800684a:	f003 0304 	and.w	r3, r3, #4
 800684e:	613b      	str	r3, [r7, #16]
 8006850:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006852:	2300      	movs	r3, #0
 8006854:	60fb      	str	r3, [r7, #12]
 8006856:	4b7f      	ldr	r3, [pc, #508]	; (8006a54 <MX_GPIO_Init+0x26c>)
 8006858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800685a:	4a7e      	ldr	r2, [pc, #504]	; (8006a54 <MX_GPIO_Init+0x26c>)
 800685c:	f043 0301 	orr.w	r3, r3, #1
 8006860:	6313      	str	r3, [r2, #48]	; 0x30
 8006862:	4b7c      	ldr	r3, [pc, #496]	; (8006a54 <MX_GPIO_Init+0x26c>)
 8006864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006866:	f003 0301 	and.w	r3, r3, #1
 800686a:	60fb      	str	r3, [r7, #12]
 800686c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800686e:	2300      	movs	r3, #0
 8006870:	60bb      	str	r3, [r7, #8]
 8006872:	4b78      	ldr	r3, [pc, #480]	; (8006a54 <MX_GPIO_Init+0x26c>)
 8006874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006876:	4a77      	ldr	r2, [pc, #476]	; (8006a54 <MX_GPIO_Init+0x26c>)
 8006878:	f043 0302 	orr.w	r3, r3, #2
 800687c:	6313      	str	r3, [r2, #48]	; 0x30
 800687e:	4b75      	ldr	r3, [pc, #468]	; (8006a54 <MX_GPIO_Init+0x26c>)
 8006880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006882:	f003 0302 	and.w	r3, r3, #2
 8006886:	60bb      	str	r3, [r7, #8]
 8006888:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800688a:	2300      	movs	r3, #0
 800688c:	607b      	str	r3, [r7, #4]
 800688e:	4b71      	ldr	r3, [pc, #452]	; (8006a54 <MX_GPIO_Init+0x26c>)
 8006890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006892:	4a70      	ldr	r2, [pc, #448]	; (8006a54 <MX_GPIO_Init+0x26c>)
 8006894:	f043 0308 	orr.w	r3, r3, #8
 8006898:	6313      	str	r3, [r2, #48]	; 0x30
 800689a:	4b6e      	ldr	r3, [pc, #440]	; (8006a54 <MX_GPIO_Init+0x26c>)
 800689c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800689e:	f003 0308 	and.w	r3, r3, #8
 80068a2:	607b      	str	r3, [r7, #4]
 80068a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 80068a6:	2200      	movs	r2, #0
 80068a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80068ac:	486a      	ldr	r0, [pc, #424]	; (8006a58 <MX_GPIO_Init+0x270>)
 80068ae:	f004 fad5 	bl	800ae5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80068b2:	2200      	movs	r2, #0
 80068b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80068b8:	4868      	ldr	r0, [pc, #416]	; (8006a5c <MX_GPIO_Init+0x274>)
 80068ba:	f004 facf 	bl	800ae5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 80068be:	2200      	movs	r2, #0
 80068c0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80068c4:	4866      	ldr	r0, [pc, #408]	; (8006a60 <MX_GPIO_Init+0x278>)
 80068c6:	f004 fac9 	bl	800ae5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80068ca:	2200      	movs	r2, #0
 80068cc:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 80068d0:	4864      	ldr	r0, [pc, #400]	; (8006a64 <MX_GPIO_Init+0x27c>)
 80068d2:	f004 fac3 	bl	800ae5c <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80068d6:	2304      	movs	r3, #4
 80068d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80068da:	2300      	movs	r3, #0
 80068dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068de:	2300      	movs	r3, #0
 80068e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80068e2:	f107 031c 	add.w	r3, r7, #28
 80068e6:	4619      	mov	r1, r3
 80068e8:	485b      	ldr	r0, [pc, #364]	; (8006a58 <MX_GPIO_Init+0x270>)
 80068ea:	f004 f8f3 	bl	800aad4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80068ee:	230f      	movs	r3, #15
 80068f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80068f2:	2303      	movs	r3, #3
 80068f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068f6:	2300      	movs	r3, #0
 80068f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80068fa:	f107 031c 	add.w	r3, r7, #28
 80068fe:	4619      	mov	r1, r3
 8006900:	4859      	ldr	r0, [pc, #356]	; (8006a68 <MX_GPIO_Init+0x280>)
 8006902:	f004 f8e7 	bl	800aad4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8006906:	23e1      	movs	r3, #225	; 0xe1
 8006908:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800690a:	2303      	movs	r3, #3
 800690c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800690e:	2300      	movs	r3, #0
 8006910:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006912:	f107 031c 	add.w	r3, r7, #28
 8006916:	4619      	mov	r1, r3
 8006918:	4852      	ldr	r0, [pc, #328]	; (8006a64 <MX_GPIO_Init+0x27c>)
 800691a:	f004 f8db 	bl	800aad4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800691e:	2303      	movs	r3, #3
 8006920:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006922:	2303      	movs	r3, #3
 8006924:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006926:	2300      	movs	r3, #0
 8006928:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800692a:	f107 031c 	add.w	r3, r7, #28
 800692e:	4619      	mov	r1, r3
 8006930:	484a      	ldr	r0, [pc, #296]	; (8006a5c <MX_GPIO_Init+0x274>)
 8006932:	f004 f8cf 	bl	800aad4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006936:	2304      	movs	r3, #4
 8006938:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800693a:	2300      	movs	r3, #0
 800693c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800693e:	2301      	movs	r3, #1
 8006940:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006942:	f107 031c 	add.w	r3, r7, #28
 8006946:	4619      	mov	r1, r3
 8006948:	4844      	ldr	r0, [pc, #272]	; (8006a5c <MX_GPIO_Init+0x274>)
 800694a:	f004 f8c3 	bl	800aad4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 800694e:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 8006952:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006954:	2300      	movs	r3, #0
 8006956:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006958:	2301      	movs	r3, #1
 800695a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800695c:	f107 031c 	add.w	r3, r7, #28
 8006960:	4619      	mov	r1, r3
 8006962:	483d      	ldr	r0, [pc, #244]	; (8006a58 <MX_GPIO_Init+0x270>)
 8006964:	f004 f8b6 	bl	800aad4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8006968:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800696c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800696e:	2301      	movs	r3, #1
 8006970:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006972:	2300      	movs	r3, #0
 8006974:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006976:	2300      	movs	r3, #0
 8006978:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800697a:	f107 031c 	add.w	r3, r7, #28
 800697e:	4619      	mov	r1, r3
 8006980:	4835      	ldr	r0, [pc, #212]	; (8006a58 <MX_GPIO_Init+0x270>)
 8006982:	f004 f8a7 	bl	800aad4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8006986:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800698a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800698c:	2301      	movs	r3, #1
 800698e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006990:	2300      	movs	r3, #0
 8006992:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006994:	2300      	movs	r3, #0
 8006996:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006998:	f107 031c 	add.w	r3, r7, #28
 800699c:	4619      	mov	r1, r3
 800699e:	482f      	ldr	r0, [pc, #188]	; (8006a5c <MX_GPIO_Init+0x274>)
 80069a0:	f004 f898 	bl	800aad4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80069a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80069a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80069aa:	2300      	movs	r3, #0
 80069ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069ae:	2300      	movs	r3, #0
 80069b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80069b2:	f107 031c 	add.w	r3, r7, #28
 80069b6:	4619      	mov	r1, r3
 80069b8:	4829      	ldr	r0, [pc, #164]	; (8006a60 <MX_GPIO_Init+0x278>)
 80069ba:	f004 f88b 	bl	800aad4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80069be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80069c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80069c4:	2301      	movs	r3, #1
 80069c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069c8:	2300      	movs	r3, #0
 80069ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80069cc:	2300      	movs	r3, #0
 80069ce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80069d0:	f107 031c 	add.w	r3, r7, #28
 80069d4:	4619      	mov	r1, r3
 80069d6:	4822      	ldr	r0, [pc, #136]	; (8006a60 <MX_GPIO_Init+0x278>)
 80069d8:	f004 f87c 	bl	800aad4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80069dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80069e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80069e2:	2301      	movs	r3, #1
 80069e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80069e6:	2301      	movs	r3, #1
 80069e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80069ea:	2300      	movs	r3, #0
 80069ec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80069ee:	f107 031c 	add.w	r3, r7, #28
 80069f2:	4619      	mov	r1, r3
 80069f4:	481a      	ldr	r0, [pc, #104]	; (8006a60 <MX_GPIO_Init+0x278>)
 80069f6:	f004 f86d 	bl	800aad4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80069fa:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80069fe:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006a00:	2301      	movs	r3, #1
 8006a02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a04:	2300      	movs	r3, #0
 8006a06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a0c:	f107 031c 	add.w	r3, r7, #28
 8006a10:	4619      	mov	r1, r3
 8006a12:	4814      	ldr	r0, [pc, #80]	; (8006a64 <MX_GPIO_Init+0x27c>)
 8006a14:	f004 f85e 	bl	800aad4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8006a18:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a22:	2300      	movs	r3, #0
 8006a24:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a26:	f107 031c 	add.w	r3, r7, #28
 8006a2a:	4619      	mov	r1, r3
 8006a2c:	480d      	ldr	r0, [pc, #52]	; (8006a64 <MX_GPIO_Init+0x27c>)
 8006a2e:	f004 f851 	bl	800aad4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8006a32:	239b      	movs	r3, #155	; 0x9b
 8006a34:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006a36:	2300      	movs	r3, #0
 8006a38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006a3e:	f107 031c 	add.w	r3, r7, #28
 8006a42:	4619      	mov	r1, r3
 8006a44:	4806      	ldr	r0, [pc, #24]	; (8006a60 <MX_GPIO_Init+0x278>)
 8006a46:	f004 f845 	bl	800aad4 <HAL_GPIO_Init>

}
 8006a4a:	bf00      	nop
 8006a4c:	3730      	adds	r7, #48	; 0x30
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}
 8006a52:	bf00      	nop
 8006a54:	40023800 	.word	0x40023800
 8006a58:	40021000 	.word	0x40021000
 8006a5c:	40020400 	.word	0x40020400
 8006a60:	40020c00 	.word	0x40020c00
 8006a64:	40020000 	.word	0x40020000
 8006a68:	40020800 	.word	0x40020800

08006a6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006a70:	b672      	cpsid	i
}
 8006a72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006a74:	e7fe      	b.n	8006a74 <Error_Handler+0x8>

08006a76 <path_following_initialize>:
  /* End of Outputs for SubSystem: '<Root>/path_following' */
}

/* Model initialize function */
void path_following_initialize(void)
{
 8006a76:	b480      	push	{r7}
 8006a78:	af00      	add	r7, sp, #0
  /* (no initialization code required) */
}
 8006a7a:	bf00      	nop
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr

08006a84 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b083      	sub	sp, #12
 8006a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	607b      	str	r3, [r7, #4]
 8006a8e:	4b10      	ldr	r3, [pc, #64]	; (8006ad0 <HAL_MspInit+0x4c>)
 8006a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a92:	4a0f      	ldr	r2, [pc, #60]	; (8006ad0 <HAL_MspInit+0x4c>)
 8006a94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006a98:	6453      	str	r3, [r2, #68]	; 0x44
 8006a9a:	4b0d      	ldr	r3, [pc, #52]	; (8006ad0 <HAL_MspInit+0x4c>)
 8006a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006aa2:	607b      	str	r3, [r7, #4]
 8006aa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	603b      	str	r3, [r7, #0]
 8006aaa:	4b09      	ldr	r3, [pc, #36]	; (8006ad0 <HAL_MspInit+0x4c>)
 8006aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aae:	4a08      	ldr	r2, [pc, #32]	; (8006ad0 <HAL_MspInit+0x4c>)
 8006ab0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ab4:	6413      	str	r3, [r2, #64]	; 0x40
 8006ab6:	4b06      	ldr	r3, [pc, #24]	; (8006ad0 <HAL_MspInit+0x4c>)
 8006ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006abe:	603b      	str	r3, [r7, #0]
 8006ac0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006ac2:	bf00      	nop
 8006ac4:	370c      	adds	r7, #12
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006acc:	4770      	bx	lr
 8006ace:	bf00      	nop
 8006ad0:	40023800 	.word	0x40023800

08006ad4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b08c      	sub	sp, #48	; 0x30
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006adc:	f107 031c 	add.w	r3, r7, #28
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	601a      	str	r2, [r3, #0]
 8006ae4:	605a      	str	r2, [r3, #4]
 8006ae6:	609a      	str	r2, [r3, #8]
 8006ae8:	60da      	str	r2, [r3, #12]
 8006aea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a4a      	ldr	r2, [pc, #296]	; (8006c1c <HAL_ADC_MspInit+0x148>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	f040 808e 	bne.w	8006c14 <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8006af8:	2300      	movs	r3, #0
 8006afa:	61bb      	str	r3, [r7, #24]
 8006afc:	4b48      	ldr	r3, [pc, #288]	; (8006c20 <HAL_ADC_MspInit+0x14c>)
 8006afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b00:	4a47      	ldr	r2, [pc, #284]	; (8006c20 <HAL_ADC_MspInit+0x14c>)
 8006b02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006b06:	6453      	str	r3, [r2, #68]	; 0x44
 8006b08:	4b45      	ldr	r3, [pc, #276]	; (8006c20 <HAL_ADC_MspInit+0x14c>)
 8006b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b10:	61bb      	str	r3, [r7, #24]
 8006b12:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006b14:	2300      	movs	r3, #0
 8006b16:	617b      	str	r3, [r7, #20]
 8006b18:	4b41      	ldr	r3, [pc, #260]	; (8006c20 <HAL_ADC_MspInit+0x14c>)
 8006b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b1c:	4a40      	ldr	r2, [pc, #256]	; (8006c20 <HAL_ADC_MspInit+0x14c>)
 8006b1e:	f043 0304 	orr.w	r3, r3, #4
 8006b22:	6313      	str	r3, [r2, #48]	; 0x30
 8006b24:	4b3e      	ldr	r3, [pc, #248]	; (8006c20 <HAL_ADC_MspInit+0x14c>)
 8006b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b28:	f003 0304 	and.w	r3, r3, #4
 8006b2c:	617b      	str	r3, [r7, #20]
 8006b2e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b30:	2300      	movs	r3, #0
 8006b32:	613b      	str	r3, [r7, #16]
 8006b34:	4b3a      	ldr	r3, [pc, #232]	; (8006c20 <HAL_ADC_MspInit+0x14c>)
 8006b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b38:	4a39      	ldr	r2, [pc, #228]	; (8006c20 <HAL_ADC_MspInit+0x14c>)
 8006b3a:	f043 0301 	orr.w	r3, r3, #1
 8006b3e:	6313      	str	r3, [r2, #48]	; 0x30
 8006b40:	4b37      	ldr	r3, [pc, #220]	; (8006c20 <HAL_ADC_MspInit+0x14c>)
 8006b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b44:	f003 0301 	and.w	r3, r3, #1
 8006b48:	613b      	str	r3, [r7, #16]
 8006b4a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	60fb      	str	r3, [r7, #12]
 8006b50:	4b33      	ldr	r3, [pc, #204]	; (8006c20 <HAL_ADC_MspInit+0x14c>)
 8006b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b54:	4a32      	ldr	r2, [pc, #200]	; (8006c20 <HAL_ADC_MspInit+0x14c>)
 8006b56:	f043 0302 	orr.w	r3, r3, #2
 8006b5a:	6313      	str	r3, [r2, #48]	; 0x30
 8006b5c:	4b30      	ldr	r3, [pc, #192]	; (8006c20 <HAL_ADC_MspInit+0x14c>)
 8006b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b60:	f003 0302 	and.w	r3, r3, #2
 8006b64:	60fb      	str	r3, [r7, #12]
 8006b66:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC2_IN6
    PA7     ------> ADC2_IN7
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8006b68:	230f      	movs	r3, #15
 8006b6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006b6c:	2303      	movs	r3, #3
 8006b6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b70:	2300      	movs	r3, #0
 8006b72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006b74:	f107 031c 	add.w	r3, r7, #28
 8006b78:	4619      	mov	r1, r3
 8006b7a:	482a      	ldr	r0, [pc, #168]	; (8006c24 <HAL_ADC_MspInit+0x150>)
 8006b7c:	f003 ffaa 	bl	800aad4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8006b80:	23ff      	movs	r3, #255	; 0xff
 8006b82:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006b84:	2303      	movs	r3, #3
 8006b86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b8c:	f107 031c 	add.w	r3, r7, #28
 8006b90:	4619      	mov	r1, r3
 8006b92:	4825      	ldr	r0, [pc, #148]	; (8006c28 <HAL_ADC_MspInit+0x154>)
 8006b94:	f003 ff9e 	bl	800aad4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006b98:	2303      	movs	r3, #3
 8006b9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006b9c:	2303      	movs	r3, #3
 8006b9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006ba4:	f107 031c 	add.w	r3, r7, #28
 8006ba8:	4619      	mov	r1, r3
 8006baa:	4820      	ldr	r0, [pc, #128]	; (8006c2c <HAL_ADC_MspInit+0x158>)
 8006bac:	f003 ff92 	bl	800aad4 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 8006bb0:	4b1f      	ldr	r3, [pc, #124]	; (8006c30 <HAL_ADC_MspInit+0x15c>)
 8006bb2:	4a20      	ldr	r2, [pc, #128]	; (8006c34 <HAL_ADC_MspInit+0x160>)
 8006bb4:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8006bb6:	4b1e      	ldr	r3, [pc, #120]	; (8006c30 <HAL_ADC_MspInit+0x15c>)
 8006bb8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006bbc:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006bbe:	4b1c      	ldr	r3, [pc, #112]	; (8006c30 <HAL_ADC_MspInit+0x15c>)
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8006bc4:	4b1a      	ldr	r3, [pc, #104]	; (8006c30 <HAL_ADC_MspInit+0x15c>)
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8006bca:	4b19      	ldr	r3, [pc, #100]	; (8006c30 <HAL_ADC_MspInit+0x15c>)
 8006bcc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006bd0:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006bd2:	4b17      	ldr	r3, [pc, #92]	; (8006c30 <HAL_ADC_MspInit+0x15c>)
 8006bd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006bd8:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006bda:	4b15      	ldr	r3, [pc, #84]	; (8006c30 <HAL_ADC_MspInit+0x15c>)
 8006bdc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006be0:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8006be2:	4b13      	ldr	r3, [pc, #76]	; (8006c30 <HAL_ADC_MspInit+0x15c>)
 8006be4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006be8:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006bea:	4b11      	ldr	r3, [pc, #68]	; (8006c30 <HAL_ADC_MspInit+0x15c>)
 8006bec:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006bf0:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006bf2:	4b0f      	ldr	r3, [pc, #60]	; (8006c30 <HAL_ADC_MspInit+0x15c>)
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8006bf8:	480d      	ldr	r0, [pc, #52]	; (8006c30 <HAL_ADC_MspInit+0x15c>)
 8006bfa:	f003 fbcd 	bl	800a398 <HAL_DMA_Init>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d001      	beq.n	8006c08 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8006c04:	f7ff ff32 	bl	8006a6c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	4a09      	ldr	r2, [pc, #36]	; (8006c30 <HAL_ADC_MspInit+0x15c>)
 8006c0c:	639a      	str	r2, [r3, #56]	; 0x38
 8006c0e:	4a08      	ldr	r2, [pc, #32]	; (8006c30 <HAL_ADC_MspInit+0x15c>)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8006c14:	bf00      	nop
 8006c16:	3730      	adds	r7, #48	; 0x30
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}
 8006c1c:	40012100 	.word	0x40012100
 8006c20:	40023800 	.word	0x40023800
 8006c24:	40020800 	.word	0x40020800
 8006c28:	40020000 	.word	0x40020000
 8006c2c:	40020400 	.word	0x40020400
 8006c30:	2003fd04 	.word	0x2003fd04
 8006c34:	40026440 	.word	0x40026440

08006c38 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b08c      	sub	sp, #48	; 0x30
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c40:	f107 031c 	add.w	r3, r7, #28
 8006c44:	2200      	movs	r2, #0
 8006c46:	601a      	str	r2, [r3, #0]
 8006c48:	605a      	str	r2, [r3, #4]
 8006c4a:	609a      	str	r2, [r3, #8]
 8006c4c:	60da      	str	r2, [r3, #12]
 8006c4e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a32      	ldr	r2, [pc, #200]	; (8006d20 <HAL_I2C_MspInit+0xe8>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d12c      	bne.n	8006cb4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	61bb      	str	r3, [r7, #24]
 8006c5e:	4b31      	ldr	r3, [pc, #196]	; (8006d24 <HAL_I2C_MspInit+0xec>)
 8006c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c62:	4a30      	ldr	r2, [pc, #192]	; (8006d24 <HAL_I2C_MspInit+0xec>)
 8006c64:	f043 0302 	orr.w	r3, r3, #2
 8006c68:	6313      	str	r3, [r2, #48]	; 0x30
 8006c6a:	4b2e      	ldr	r3, [pc, #184]	; (8006d24 <HAL_I2C_MspInit+0xec>)
 8006c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c6e:	f003 0302 	and.w	r3, r3, #2
 8006c72:	61bb      	str	r3, [r7, #24]
 8006c74:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006c76:	23c0      	movs	r3, #192	; 0xc0
 8006c78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006c7a:	2312      	movs	r3, #18
 8006c7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c82:	2303      	movs	r3, #3
 8006c84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006c86:	2304      	movs	r3, #4
 8006c88:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c8a:	f107 031c 	add.w	r3, r7, #28
 8006c8e:	4619      	mov	r1, r3
 8006c90:	4825      	ldr	r0, [pc, #148]	; (8006d28 <HAL_I2C_MspInit+0xf0>)
 8006c92:	f003 ff1f 	bl	800aad4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006c96:	2300      	movs	r3, #0
 8006c98:	617b      	str	r3, [r7, #20]
 8006c9a:	4b22      	ldr	r3, [pc, #136]	; (8006d24 <HAL_I2C_MspInit+0xec>)
 8006c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c9e:	4a21      	ldr	r2, [pc, #132]	; (8006d24 <HAL_I2C_MspInit+0xec>)
 8006ca0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006ca4:	6413      	str	r3, [r2, #64]	; 0x40
 8006ca6:	4b1f      	ldr	r3, [pc, #124]	; (8006d24 <HAL_I2C_MspInit+0xec>)
 8006ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006caa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006cae:	617b      	str	r3, [r7, #20]
 8006cb0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8006cb2:	e031      	b.n	8006d18 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a1c      	ldr	r2, [pc, #112]	; (8006d2c <HAL_I2C_MspInit+0xf4>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d12c      	bne.n	8006d18 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	613b      	str	r3, [r7, #16]
 8006cc2:	4b18      	ldr	r3, [pc, #96]	; (8006d24 <HAL_I2C_MspInit+0xec>)
 8006cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cc6:	4a17      	ldr	r2, [pc, #92]	; (8006d24 <HAL_I2C_MspInit+0xec>)
 8006cc8:	f043 0302 	orr.w	r3, r3, #2
 8006ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8006cce:	4b15      	ldr	r3, [pc, #84]	; (8006d24 <HAL_I2C_MspInit+0xec>)
 8006cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cd2:	f003 0302 	and.w	r3, r3, #2
 8006cd6:	613b      	str	r3, [r7, #16]
 8006cd8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8006cda:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006cde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006ce0:	2312      	movs	r3, #18
 8006ce2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ce8:	2303      	movs	r3, #3
 8006cea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8006cec:	2304      	movs	r3, #4
 8006cee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006cf0:	f107 031c 	add.w	r3, r7, #28
 8006cf4:	4619      	mov	r1, r3
 8006cf6:	480c      	ldr	r0, [pc, #48]	; (8006d28 <HAL_I2C_MspInit+0xf0>)
 8006cf8:	f003 feec 	bl	800aad4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	60fb      	str	r3, [r7, #12]
 8006d00:	4b08      	ldr	r3, [pc, #32]	; (8006d24 <HAL_I2C_MspInit+0xec>)
 8006d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d04:	4a07      	ldr	r2, [pc, #28]	; (8006d24 <HAL_I2C_MspInit+0xec>)
 8006d06:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006d0a:	6413      	str	r3, [r2, #64]	; 0x40
 8006d0c:	4b05      	ldr	r3, [pc, #20]	; (8006d24 <HAL_I2C_MspInit+0xec>)
 8006d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d14:	60fb      	str	r3, [r7, #12]
 8006d16:	68fb      	ldr	r3, [r7, #12]
}
 8006d18:	bf00      	nop
 8006d1a:	3730      	adds	r7, #48	; 0x30
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}
 8006d20:	40005400 	.word	0x40005400
 8006d24:	40023800 	.word	0x40023800
 8006d28:	40020400 	.word	0x40020400
 8006d2c:	40005800 	.word	0x40005800

08006d30 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b08a      	sub	sp, #40	; 0x28
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d38:	f107 0314 	add.w	r3, r7, #20
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	601a      	str	r2, [r3, #0]
 8006d40:	605a      	str	r2, [r3, #4]
 8006d42:	609a      	str	r2, [r3, #8]
 8006d44:	60da      	str	r2, [r3, #12]
 8006d46:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a69      	ldr	r2, [pc, #420]	; (8006ef4 <HAL_SD_MspInit+0x1c4>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	f040 80cb 	bne.w	8006eea <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8006d54:	2300      	movs	r3, #0
 8006d56:	613b      	str	r3, [r7, #16]
 8006d58:	4b67      	ldr	r3, [pc, #412]	; (8006ef8 <HAL_SD_MspInit+0x1c8>)
 8006d5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d5c:	4a66      	ldr	r2, [pc, #408]	; (8006ef8 <HAL_SD_MspInit+0x1c8>)
 8006d5e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006d62:	6453      	str	r3, [r2, #68]	; 0x44
 8006d64:	4b64      	ldr	r3, [pc, #400]	; (8006ef8 <HAL_SD_MspInit+0x1c8>)
 8006d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d6c:	613b      	str	r3, [r7, #16]
 8006d6e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006d70:	2300      	movs	r3, #0
 8006d72:	60fb      	str	r3, [r7, #12]
 8006d74:	4b60      	ldr	r3, [pc, #384]	; (8006ef8 <HAL_SD_MspInit+0x1c8>)
 8006d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d78:	4a5f      	ldr	r2, [pc, #380]	; (8006ef8 <HAL_SD_MspInit+0x1c8>)
 8006d7a:	f043 0304 	orr.w	r3, r3, #4
 8006d7e:	6313      	str	r3, [r2, #48]	; 0x30
 8006d80:	4b5d      	ldr	r3, [pc, #372]	; (8006ef8 <HAL_SD_MspInit+0x1c8>)
 8006d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d84:	f003 0304 	and.w	r3, r3, #4
 8006d88:	60fb      	str	r3, [r7, #12]
 8006d8a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	60bb      	str	r3, [r7, #8]
 8006d90:	4b59      	ldr	r3, [pc, #356]	; (8006ef8 <HAL_SD_MspInit+0x1c8>)
 8006d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d94:	4a58      	ldr	r2, [pc, #352]	; (8006ef8 <HAL_SD_MspInit+0x1c8>)
 8006d96:	f043 0308 	orr.w	r3, r3, #8
 8006d9a:	6313      	str	r3, [r2, #48]	; 0x30
 8006d9c:	4b56      	ldr	r3, [pc, #344]	; (8006ef8 <HAL_SD_MspInit+0x1c8>)
 8006d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006da0:	f003 0308 	and.w	r3, r3, #8
 8006da4:	60bb      	str	r3, [r7, #8]
 8006da6:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006da8:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8006dac:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006dae:	2302      	movs	r3, #2
 8006db0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006db2:	2300      	movs	r3, #0
 8006db4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006db6:	2303      	movs	r3, #3
 8006db8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8006dba:	230c      	movs	r3, #12
 8006dbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006dbe:	f107 0314 	add.w	r3, r7, #20
 8006dc2:	4619      	mov	r1, r3
 8006dc4:	484d      	ldr	r0, [pc, #308]	; (8006efc <HAL_SD_MspInit+0x1cc>)
 8006dc6:	f003 fe85 	bl	800aad4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006dca:	2304      	movs	r3, #4
 8006dcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006dce:	2302      	movs	r3, #2
 8006dd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006dd6:	2303      	movs	r3, #3
 8006dd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8006dda:	230c      	movs	r3, #12
 8006ddc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006dde:	f107 0314 	add.w	r3, r7, #20
 8006de2:	4619      	mov	r1, r3
 8006de4:	4846      	ldr	r0, [pc, #280]	; (8006f00 <HAL_SD_MspInit+0x1d0>)
 8006de6:	f003 fe75 	bl	800aad4 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8006dea:	4b46      	ldr	r3, [pc, #280]	; (8006f04 <HAL_SD_MspInit+0x1d4>)
 8006dec:	4a46      	ldr	r2, [pc, #280]	; (8006f08 <HAL_SD_MspInit+0x1d8>)
 8006dee:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8006df0:	4b44      	ldr	r3, [pc, #272]	; (8006f04 <HAL_SD_MspInit+0x1d4>)
 8006df2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006df6:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006df8:	4b42      	ldr	r3, [pc, #264]	; (8006f04 <HAL_SD_MspInit+0x1d4>)
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006dfe:	4b41      	ldr	r3, [pc, #260]	; (8006f04 <HAL_SD_MspInit+0x1d4>)
 8006e00:	2200      	movs	r2, #0
 8006e02:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006e04:	4b3f      	ldr	r3, [pc, #252]	; (8006f04 <HAL_SD_MspInit+0x1d4>)
 8006e06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006e0a:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006e0c:	4b3d      	ldr	r3, [pc, #244]	; (8006f04 <HAL_SD_MspInit+0x1d4>)
 8006e0e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006e12:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006e14:	4b3b      	ldr	r3, [pc, #236]	; (8006f04 <HAL_SD_MspInit+0x1d4>)
 8006e16:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006e1a:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8006e1c:	4b39      	ldr	r3, [pc, #228]	; (8006f04 <HAL_SD_MspInit+0x1d4>)
 8006e1e:	2220      	movs	r2, #32
 8006e20:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006e22:	4b38      	ldr	r3, [pc, #224]	; (8006f04 <HAL_SD_MspInit+0x1d4>)
 8006e24:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006e28:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006e2a:	4b36      	ldr	r3, [pc, #216]	; (8006f04 <HAL_SD_MspInit+0x1d4>)
 8006e2c:	2204      	movs	r2, #4
 8006e2e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006e30:	4b34      	ldr	r3, [pc, #208]	; (8006f04 <HAL_SD_MspInit+0x1d4>)
 8006e32:	2203      	movs	r2, #3
 8006e34:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8006e36:	4b33      	ldr	r3, [pc, #204]	; (8006f04 <HAL_SD_MspInit+0x1d4>)
 8006e38:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006e3c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8006e3e:	4b31      	ldr	r3, [pc, #196]	; (8006f04 <HAL_SD_MspInit+0x1d4>)
 8006e40:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006e44:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8006e46:	482f      	ldr	r0, [pc, #188]	; (8006f04 <HAL_SD_MspInit+0x1d4>)
 8006e48:	f003 faa6 	bl	800a398 <HAL_DMA_Init>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d001      	beq.n	8006e56 <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 8006e52:	f7ff fe0b 	bl	8006a6c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	4a2a      	ldr	r2, [pc, #168]	; (8006f04 <HAL_SD_MspInit+0x1d4>)
 8006e5a:	641a      	str	r2, [r3, #64]	; 0x40
 8006e5c:	4a29      	ldr	r2, [pc, #164]	; (8006f04 <HAL_SD_MspInit+0x1d4>)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8006e62:	4b2a      	ldr	r3, [pc, #168]	; (8006f0c <HAL_SD_MspInit+0x1dc>)
 8006e64:	4a2a      	ldr	r2, [pc, #168]	; (8006f10 <HAL_SD_MspInit+0x1e0>)
 8006e66:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8006e68:	4b28      	ldr	r3, [pc, #160]	; (8006f0c <HAL_SD_MspInit+0x1dc>)
 8006e6a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006e6e:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006e70:	4b26      	ldr	r3, [pc, #152]	; (8006f0c <HAL_SD_MspInit+0x1dc>)
 8006e72:	2240      	movs	r2, #64	; 0x40
 8006e74:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006e76:	4b25      	ldr	r3, [pc, #148]	; (8006f0c <HAL_SD_MspInit+0x1dc>)
 8006e78:	2200      	movs	r2, #0
 8006e7a:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006e7c:	4b23      	ldr	r3, [pc, #140]	; (8006f0c <HAL_SD_MspInit+0x1dc>)
 8006e7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006e82:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006e84:	4b21      	ldr	r3, [pc, #132]	; (8006f0c <HAL_SD_MspInit+0x1dc>)
 8006e86:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006e8a:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006e8c:	4b1f      	ldr	r3, [pc, #124]	; (8006f0c <HAL_SD_MspInit+0x1dc>)
 8006e8e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006e92:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8006e94:	4b1d      	ldr	r3, [pc, #116]	; (8006f0c <HAL_SD_MspInit+0x1dc>)
 8006e96:	2220      	movs	r2, #32
 8006e98:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006e9a:	4b1c      	ldr	r3, [pc, #112]	; (8006f0c <HAL_SD_MspInit+0x1dc>)
 8006e9c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006ea0:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006ea2:	4b1a      	ldr	r3, [pc, #104]	; (8006f0c <HAL_SD_MspInit+0x1dc>)
 8006ea4:	2204      	movs	r2, #4
 8006ea6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006ea8:	4b18      	ldr	r3, [pc, #96]	; (8006f0c <HAL_SD_MspInit+0x1dc>)
 8006eaa:	2203      	movs	r2, #3
 8006eac:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8006eae:	4b17      	ldr	r3, [pc, #92]	; (8006f0c <HAL_SD_MspInit+0x1dc>)
 8006eb0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006eb4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8006eb6:	4b15      	ldr	r3, [pc, #84]	; (8006f0c <HAL_SD_MspInit+0x1dc>)
 8006eb8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006ebc:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8006ebe:	4813      	ldr	r0, [pc, #76]	; (8006f0c <HAL_SD_MspInit+0x1dc>)
 8006ec0:	f003 fa6a 	bl	800a398 <HAL_DMA_Init>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d001      	beq.n	8006ece <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 8006eca:	f7ff fdcf 	bl	8006a6c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	4a0e      	ldr	r2, [pc, #56]	; (8006f0c <HAL_SD_MspInit+0x1dc>)
 8006ed2:	63da      	str	r2, [r3, #60]	; 0x3c
 8006ed4:	4a0d      	ldr	r2, [pc, #52]	; (8006f0c <HAL_SD_MspInit+0x1dc>)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8006eda:	2200      	movs	r2, #0
 8006edc:	2100      	movs	r1, #0
 8006ede:	2031      	movs	r0, #49	; 0x31
 8006ee0:	f003 fa23 	bl	800a32a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8006ee4:	2031      	movs	r0, #49	; 0x31
 8006ee6:	f003 fa3c 	bl	800a362 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8006eea:	bf00      	nop
 8006eec:	3728      	adds	r7, #40	; 0x28
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}
 8006ef2:	bf00      	nop
 8006ef4:	40012c00 	.word	0x40012c00
 8006ef8:	40023800 	.word	0x40023800
 8006efc:	40020800 	.word	0x40020800
 8006f00:	40020c00 	.word	0x40020c00
 8006f04:	2003f82c 	.word	0x2003f82c
 8006f08:	40026458 	.word	0x40026458
 8006f0c:	2003fb60 	.word	0x2003fb60
 8006f10:	400264a0 	.word	0x400264a0

08006f14 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b08a      	sub	sp, #40	; 0x28
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f1c:	f107 0314 	add.w	r3, r7, #20
 8006f20:	2200      	movs	r2, #0
 8006f22:	601a      	str	r2, [r3, #0]
 8006f24:	605a      	str	r2, [r3, #4]
 8006f26:	609a      	str	r2, [r3, #8]
 8006f28:	60da      	str	r2, [r3, #12]
 8006f2a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a19      	ldr	r2, [pc, #100]	; (8006f98 <HAL_SPI_MspInit+0x84>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d12c      	bne.n	8006f90 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8006f36:	2300      	movs	r3, #0
 8006f38:	613b      	str	r3, [r7, #16]
 8006f3a:	4b18      	ldr	r3, [pc, #96]	; (8006f9c <HAL_SPI_MspInit+0x88>)
 8006f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f3e:	4a17      	ldr	r2, [pc, #92]	; (8006f9c <HAL_SPI_MspInit+0x88>)
 8006f40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006f44:	6413      	str	r3, [r2, #64]	; 0x40
 8006f46:	4b15      	ldr	r3, [pc, #84]	; (8006f9c <HAL_SPI_MspInit+0x88>)
 8006f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f4e:	613b      	str	r3, [r7, #16]
 8006f50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006f52:	2300      	movs	r3, #0
 8006f54:	60fb      	str	r3, [r7, #12]
 8006f56:	4b11      	ldr	r3, [pc, #68]	; (8006f9c <HAL_SPI_MspInit+0x88>)
 8006f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f5a:	4a10      	ldr	r2, [pc, #64]	; (8006f9c <HAL_SPI_MspInit+0x88>)
 8006f5c:	f043 0302 	orr.w	r3, r3, #2
 8006f60:	6313      	str	r3, [r2, #48]	; 0x30
 8006f62:	4b0e      	ldr	r3, [pc, #56]	; (8006f9c <HAL_SPI_MspInit+0x88>)
 8006f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f66:	f003 0302 	and.w	r3, r3, #2
 8006f6a:	60fb      	str	r3, [r7, #12]
 8006f6c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8006f6e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8006f72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f74:	2302      	movs	r3, #2
 8006f76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f7c:	2303      	movs	r3, #3
 8006f7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006f80:	2305      	movs	r3, #5
 8006f82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006f84:	f107 0314 	add.w	r3, r7, #20
 8006f88:	4619      	mov	r1, r3
 8006f8a:	4805      	ldr	r0, [pc, #20]	; (8006fa0 <HAL_SPI_MspInit+0x8c>)
 8006f8c:	f003 fda2 	bl	800aad4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8006f90:	bf00      	nop
 8006f92:	3728      	adds	r7, #40	; 0x28
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd80      	pop	{r7, pc}
 8006f98:	40003800 	.word	0x40003800
 8006f9c:	40023800 	.word	0x40023800
 8006fa0:	40020400 	.word	0x40020400

08006fa4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b08c      	sub	sp, #48	; 0x30
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006fac:	f107 031c 	add.w	r3, r7, #28
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	601a      	str	r2, [r3, #0]
 8006fb4:	605a      	str	r2, [r3, #4]
 8006fb6:	609a      	str	r2, [r3, #8]
 8006fb8:	60da      	str	r2, [r3, #12]
 8006fba:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a2d      	ldr	r2, [pc, #180]	; (8007078 <HAL_TIM_PWM_MspInit+0xd4>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d12d      	bne.n	8007022 <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	61bb      	str	r3, [r7, #24]
 8006fca:	4b2c      	ldr	r3, [pc, #176]	; (800707c <HAL_TIM_PWM_MspInit+0xd8>)
 8006fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fce:	4a2b      	ldr	r2, [pc, #172]	; (800707c <HAL_TIM_PWM_MspInit+0xd8>)
 8006fd0:	f043 0301 	orr.w	r3, r3, #1
 8006fd4:	6453      	str	r3, [r2, #68]	; 0x44
 8006fd6:	4b29      	ldr	r3, [pc, #164]	; (800707c <HAL_TIM_PWM_MspInit+0xd8>)
 8006fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fda:	f003 0301 	and.w	r3, r3, #1
 8006fde:	61bb      	str	r3, [r7, #24]
 8006fe0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	617b      	str	r3, [r7, #20]
 8006fe6:	4b25      	ldr	r3, [pc, #148]	; (800707c <HAL_TIM_PWM_MspInit+0xd8>)
 8006fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fea:	4a24      	ldr	r2, [pc, #144]	; (800707c <HAL_TIM_PWM_MspInit+0xd8>)
 8006fec:	f043 0310 	orr.w	r3, r3, #16
 8006ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8006ff2:	4b22      	ldr	r3, [pc, #136]	; (800707c <HAL_TIM_PWM_MspInit+0xd8>)
 8006ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ff6:	f003 0310 	and.w	r3, r3, #16
 8006ffa:	617b      	str	r3, [r7, #20]
 8006ffc:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8006ffe:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8007002:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007004:	2302      	movs	r3, #2
 8007006:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007008:	2300      	movs	r3, #0
 800700a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800700c:	2300      	movs	r3, #0
 800700e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8007010:	2301      	movs	r3, #1
 8007012:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007014:	f107 031c 	add.w	r3, r7, #28
 8007018:	4619      	mov	r1, r3
 800701a:	4819      	ldr	r0, [pc, #100]	; (8007080 <HAL_TIM_PWM_MspInit+0xdc>)
 800701c:	f003 fd5a 	bl	800aad4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8007020:	e026      	b.n	8007070 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM3)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a17      	ldr	r2, [pc, #92]	; (8007084 <HAL_TIM_PWM_MspInit+0xe0>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d10e      	bne.n	800704a <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800702c:	2300      	movs	r3, #0
 800702e:	613b      	str	r3, [r7, #16]
 8007030:	4b12      	ldr	r3, [pc, #72]	; (800707c <HAL_TIM_PWM_MspInit+0xd8>)
 8007032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007034:	4a11      	ldr	r2, [pc, #68]	; (800707c <HAL_TIM_PWM_MspInit+0xd8>)
 8007036:	f043 0302 	orr.w	r3, r3, #2
 800703a:	6413      	str	r3, [r2, #64]	; 0x40
 800703c:	4b0f      	ldr	r3, [pc, #60]	; (800707c <HAL_TIM_PWM_MspInit+0xd8>)
 800703e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007040:	f003 0302 	and.w	r3, r3, #2
 8007044:	613b      	str	r3, [r7, #16]
 8007046:	693b      	ldr	r3, [r7, #16]
}
 8007048:	e012      	b.n	8007070 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM4)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a0e      	ldr	r2, [pc, #56]	; (8007088 <HAL_TIM_PWM_MspInit+0xe4>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d10d      	bne.n	8007070 <HAL_TIM_PWM_MspInit+0xcc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007054:	2300      	movs	r3, #0
 8007056:	60fb      	str	r3, [r7, #12]
 8007058:	4b08      	ldr	r3, [pc, #32]	; (800707c <HAL_TIM_PWM_MspInit+0xd8>)
 800705a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800705c:	4a07      	ldr	r2, [pc, #28]	; (800707c <HAL_TIM_PWM_MspInit+0xd8>)
 800705e:	f043 0304 	orr.w	r3, r3, #4
 8007062:	6413      	str	r3, [r2, #64]	; 0x40
 8007064:	4b05      	ldr	r3, [pc, #20]	; (800707c <HAL_TIM_PWM_MspInit+0xd8>)
 8007066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007068:	f003 0304 	and.w	r3, r3, #4
 800706c:	60fb      	str	r3, [r7, #12]
 800706e:	68fb      	ldr	r3, [r7, #12]
}
 8007070:	bf00      	nop
 8007072:	3730      	adds	r7, #48	; 0x30
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}
 8007078:	40010000 	.word	0x40010000
 800707c:	40023800 	.word	0x40023800
 8007080:	40021000 	.word	0x40021000
 8007084:	40000400 	.word	0x40000400
 8007088:	40000800 	.word	0x40000800

0800708c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b088      	sub	sp, #32
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a3e      	ldr	r2, [pc, #248]	; (8007194 <HAL_TIM_Base_MspInit+0x108>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d116      	bne.n	80070cc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800709e:	2300      	movs	r3, #0
 80070a0:	61fb      	str	r3, [r7, #28]
 80070a2:	4b3d      	ldr	r3, [pc, #244]	; (8007198 <HAL_TIM_Base_MspInit+0x10c>)
 80070a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a6:	4a3c      	ldr	r2, [pc, #240]	; (8007198 <HAL_TIM_Base_MspInit+0x10c>)
 80070a8:	f043 0310 	orr.w	r3, r3, #16
 80070ac:	6413      	str	r3, [r2, #64]	; 0x40
 80070ae:	4b3a      	ldr	r3, [pc, #232]	; (8007198 <HAL_TIM_Base_MspInit+0x10c>)
 80070b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b2:	f003 0310 	and.w	r3, r3, #16
 80070b6:	61fb      	str	r3, [r7, #28]
 80070b8:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 80070ba:	2200      	movs	r2, #0
 80070bc:	2101      	movs	r1, #1
 80070be:	2036      	movs	r0, #54	; 0x36
 80070c0:	f003 f933 	bl	800a32a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80070c4:	2036      	movs	r0, #54	; 0x36
 80070c6:	f003 f94c 	bl	800a362 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 80070ca:	e05e      	b.n	800718a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM7)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a32      	ldr	r2, [pc, #200]	; (800719c <HAL_TIM_Base_MspInit+0x110>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d116      	bne.n	8007104 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80070d6:	2300      	movs	r3, #0
 80070d8:	61bb      	str	r3, [r7, #24]
 80070da:	4b2f      	ldr	r3, [pc, #188]	; (8007198 <HAL_TIM_Base_MspInit+0x10c>)
 80070dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070de:	4a2e      	ldr	r2, [pc, #184]	; (8007198 <HAL_TIM_Base_MspInit+0x10c>)
 80070e0:	f043 0320 	orr.w	r3, r3, #32
 80070e4:	6413      	str	r3, [r2, #64]	; 0x40
 80070e6:	4b2c      	ldr	r3, [pc, #176]	; (8007198 <HAL_TIM_Base_MspInit+0x10c>)
 80070e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ea:	f003 0320 	and.w	r3, r3, #32
 80070ee:	61bb      	str	r3, [r7, #24]
 80070f0:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80070f2:	2200      	movs	r2, #0
 80070f4:	2100      	movs	r1, #0
 80070f6:	2037      	movs	r0, #55	; 0x37
 80070f8:	f003 f917 	bl	800a32a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80070fc:	2037      	movs	r0, #55	; 0x37
 80070fe:	f003 f930 	bl	800a362 <HAL_NVIC_EnableIRQ>
}
 8007102:	e042      	b.n	800718a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM10)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a25      	ldr	r2, [pc, #148]	; (80071a0 <HAL_TIM_Base_MspInit+0x114>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d10e      	bne.n	800712c <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800710e:	2300      	movs	r3, #0
 8007110:	617b      	str	r3, [r7, #20]
 8007112:	4b21      	ldr	r3, [pc, #132]	; (8007198 <HAL_TIM_Base_MspInit+0x10c>)
 8007114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007116:	4a20      	ldr	r2, [pc, #128]	; (8007198 <HAL_TIM_Base_MspInit+0x10c>)
 8007118:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800711c:	6453      	str	r3, [r2, #68]	; 0x44
 800711e:	4b1e      	ldr	r3, [pc, #120]	; (8007198 <HAL_TIM_Base_MspInit+0x10c>)
 8007120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007126:	617b      	str	r3, [r7, #20]
 8007128:	697b      	ldr	r3, [r7, #20]
}
 800712a:	e02e      	b.n	800718a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM11)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a1c      	ldr	r2, [pc, #112]	; (80071a4 <HAL_TIM_Base_MspInit+0x118>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d10e      	bne.n	8007154 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8007136:	2300      	movs	r3, #0
 8007138:	613b      	str	r3, [r7, #16]
 800713a:	4b17      	ldr	r3, [pc, #92]	; (8007198 <HAL_TIM_Base_MspInit+0x10c>)
 800713c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800713e:	4a16      	ldr	r2, [pc, #88]	; (8007198 <HAL_TIM_Base_MspInit+0x10c>)
 8007140:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007144:	6453      	str	r3, [r2, #68]	; 0x44
 8007146:	4b14      	ldr	r3, [pc, #80]	; (8007198 <HAL_TIM_Base_MspInit+0x10c>)
 8007148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800714a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800714e:	613b      	str	r3, [r7, #16]
 8007150:	693b      	ldr	r3, [r7, #16]
}
 8007152:	e01a      	b.n	800718a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM13)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a13      	ldr	r2, [pc, #76]	; (80071a8 <HAL_TIM_Base_MspInit+0x11c>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d115      	bne.n	800718a <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800715e:	2300      	movs	r3, #0
 8007160:	60fb      	str	r3, [r7, #12]
 8007162:	4b0d      	ldr	r3, [pc, #52]	; (8007198 <HAL_TIM_Base_MspInit+0x10c>)
 8007164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007166:	4a0c      	ldr	r2, [pc, #48]	; (8007198 <HAL_TIM_Base_MspInit+0x10c>)
 8007168:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800716c:	6413      	str	r3, [r2, #64]	; 0x40
 800716e:	4b0a      	ldr	r3, [pc, #40]	; (8007198 <HAL_TIM_Base_MspInit+0x10c>)
 8007170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007176:	60fb      	str	r3, [r7, #12]
 8007178:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800717a:	2200      	movs	r2, #0
 800717c:	2100      	movs	r1, #0
 800717e:	202c      	movs	r0, #44	; 0x2c
 8007180:	f003 f8d3 	bl	800a32a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8007184:	202c      	movs	r0, #44	; 0x2c
 8007186:	f003 f8ec 	bl	800a362 <HAL_NVIC_EnableIRQ>
}
 800718a:	bf00      	nop
 800718c:	3720      	adds	r7, #32
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}
 8007192:	bf00      	nop
 8007194:	40001000 	.word	0x40001000
 8007198:	40023800 	.word	0x40023800
 800719c:	40001400 	.word	0x40001400
 80071a0:	40014400 	.word	0x40014400
 80071a4:	40014800 	.word	0x40014800
 80071a8:	40001c00 	.word	0x40001c00

080071ac <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b08a      	sub	sp, #40	; 0x28
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80071b4:	f107 0314 	add.w	r3, r7, #20
 80071b8:	2200      	movs	r2, #0
 80071ba:	601a      	str	r2, [r3, #0]
 80071bc:	605a      	str	r2, [r3, #4]
 80071be:	609a      	str	r2, [r3, #8]
 80071c0:	60da      	str	r2, [r3, #12]
 80071c2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a1d      	ldr	r2, [pc, #116]	; (8007240 <HAL_TIM_Encoder_MspInit+0x94>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d133      	bne.n	8007236 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80071ce:	2300      	movs	r3, #0
 80071d0:	613b      	str	r3, [r7, #16]
 80071d2:	4b1c      	ldr	r3, [pc, #112]	; (8007244 <HAL_TIM_Encoder_MspInit+0x98>)
 80071d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071d6:	4a1b      	ldr	r2, [pc, #108]	; (8007244 <HAL_TIM_Encoder_MspInit+0x98>)
 80071d8:	f043 0302 	orr.w	r3, r3, #2
 80071dc:	6453      	str	r3, [r2, #68]	; 0x44
 80071de:	4b19      	ldr	r3, [pc, #100]	; (8007244 <HAL_TIM_Encoder_MspInit+0x98>)
 80071e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071e2:	f003 0302 	and.w	r3, r3, #2
 80071e6:	613b      	str	r3, [r7, #16]
 80071e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80071ea:	2300      	movs	r3, #0
 80071ec:	60fb      	str	r3, [r7, #12]
 80071ee:	4b15      	ldr	r3, [pc, #84]	; (8007244 <HAL_TIM_Encoder_MspInit+0x98>)
 80071f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071f2:	4a14      	ldr	r2, [pc, #80]	; (8007244 <HAL_TIM_Encoder_MspInit+0x98>)
 80071f4:	f043 0304 	orr.w	r3, r3, #4
 80071f8:	6313      	str	r3, [r2, #48]	; 0x30
 80071fa:	4b12      	ldr	r3, [pc, #72]	; (8007244 <HAL_TIM_Encoder_MspInit+0x98>)
 80071fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071fe:	f003 0304 	and.w	r3, r3, #4
 8007202:	60fb      	str	r3, [r7, #12]
 8007204:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007206:	23c0      	movs	r3, #192	; 0xc0
 8007208:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800720a:	2302      	movs	r3, #2
 800720c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800720e:	2300      	movs	r3, #0
 8007210:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007212:	2300      	movs	r3, #0
 8007214:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8007216:	2303      	movs	r3, #3
 8007218:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800721a:	f107 0314 	add.w	r3, r7, #20
 800721e:	4619      	mov	r1, r3
 8007220:	4809      	ldr	r0, [pc, #36]	; (8007248 <HAL_TIM_Encoder_MspInit+0x9c>)
 8007222:	f003 fc57 	bl	800aad4 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8007226:	2200      	movs	r2, #0
 8007228:	2100      	movs	r1, #0
 800722a:	202c      	movs	r0, #44	; 0x2c
 800722c:	f003 f87d 	bl	800a32a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8007230:	202c      	movs	r0, #44	; 0x2c
 8007232:	f003 f896 	bl	800a362 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8007236:	bf00      	nop
 8007238:	3728      	adds	r7, #40	; 0x28
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}
 800723e:	bf00      	nop
 8007240:	40010400 	.word	0x40010400
 8007244:	40023800 	.word	0x40023800
 8007248:	40020800 	.word	0x40020800

0800724c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b08c      	sub	sp, #48	; 0x30
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007254:	f107 031c 	add.w	r3, r7, #28
 8007258:	2200      	movs	r2, #0
 800725a:	601a      	str	r2, [r3, #0]
 800725c:	605a      	str	r2, [r3, #4]
 800725e:	609a      	str	r2, [r3, #8]
 8007260:	60da      	str	r2, [r3, #12]
 8007262:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a5c      	ldr	r2, [pc, #368]	; (80073dc <HAL_TIM_MspPostInit+0x190>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d11f      	bne.n	80072ae <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800726e:	2300      	movs	r3, #0
 8007270:	61bb      	str	r3, [r7, #24]
 8007272:	4b5b      	ldr	r3, [pc, #364]	; (80073e0 <HAL_TIM_MspPostInit+0x194>)
 8007274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007276:	4a5a      	ldr	r2, [pc, #360]	; (80073e0 <HAL_TIM_MspPostInit+0x194>)
 8007278:	f043 0310 	orr.w	r3, r3, #16
 800727c:	6313      	str	r3, [r2, #48]	; 0x30
 800727e:	4b58      	ldr	r3, [pc, #352]	; (80073e0 <HAL_TIM_MspPostInit+0x194>)
 8007280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007282:	f003 0310 	and.w	r3, r3, #16
 8007286:	61bb      	str	r3, [r7, #24]
 8007288:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800728a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800728e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007290:	2302      	movs	r3, #2
 8007292:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007294:	2300      	movs	r3, #0
 8007296:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007298:	2300      	movs	r3, #0
 800729a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800729c:	2301      	movs	r3, #1
 800729e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80072a0:	f107 031c 	add.w	r3, r7, #28
 80072a4:	4619      	mov	r1, r3
 80072a6:	484f      	ldr	r0, [pc, #316]	; (80073e4 <HAL_TIM_MspPostInit+0x198>)
 80072a8:	f003 fc14 	bl	800aad4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 80072ac:	e091      	b.n	80073d2 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM3)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a4d      	ldr	r2, [pc, #308]	; (80073e8 <HAL_TIM_MspPostInit+0x19c>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d11e      	bne.n	80072f6 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80072b8:	2300      	movs	r3, #0
 80072ba:	617b      	str	r3, [r7, #20]
 80072bc:	4b48      	ldr	r3, [pc, #288]	; (80073e0 <HAL_TIM_MspPostInit+0x194>)
 80072be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072c0:	4a47      	ldr	r2, [pc, #284]	; (80073e0 <HAL_TIM_MspPostInit+0x194>)
 80072c2:	f043 0302 	orr.w	r3, r3, #2
 80072c6:	6313      	str	r3, [r2, #48]	; 0x30
 80072c8:	4b45      	ldr	r3, [pc, #276]	; (80073e0 <HAL_TIM_MspPostInit+0x194>)
 80072ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072cc:	f003 0302 	and.w	r3, r3, #2
 80072d0:	617b      	str	r3, [r7, #20]
 80072d2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80072d4:	2330      	movs	r3, #48	; 0x30
 80072d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072d8:	2302      	movs	r3, #2
 80072da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072dc:	2300      	movs	r3, #0
 80072de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80072e0:	2300      	movs	r3, #0
 80072e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80072e4:	2302      	movs	r3, #2
 80072e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80072e8:	f107 031c 	add.w	r3, r7, #28
 80072ec:	4619      	mov	r1, r3
 80072ee:	483f      	ldr	r0, [pc, #252]	; (80073ec <HAL_TIM_MspPostInit+0x1a0>)
 80072f0:	f003 fbf0 	bl	800aad4 <HAL_GPIO_Init>
}
 80072f4:	e06d      	b.n	80073d2 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM4)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a3d      	ldr	r2, [pc, #244]	; (80073f0 <HAL_TIM_MspPostInit+0x1a4>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d11f      	bne.n	8007340 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007300:	2300      	movs	r3, #0
 8007302:	613b      	str	r3, [r7, #16]
 8007304:	4b36      	ldr	r3, [pc, #216]	; (80073e0 <HAL_TIM_MspPostInit+0x194>)
 8007306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007308:	4a35      	ldr	r2, [pc, #212]	; (80073e0 <HAL_TIM_MspPostInit+0x194>)
 800730a:	f043 0308 	orr.w	r3, r3, #8
 800730e:	6313      	str	r3, [r2, #48]	; 0x30
 8007310:	4b33      	ldr	r3, [pc, #204]	; (80073e0 <HAL_TIM_MspPostInit+0x194>)
 8007312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007314:	f003 0308 	and.w	r3, r3, #8
 8007318:	613b      	str	r3, [r7, #16]
 800731a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800731c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8007320:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007322:	2302      	movs	r3, #2
 8007324:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007326:	2300      	movs	r3, #0
 8007328:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800732a:	2300      	movs	r3, #0
 800732c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800732e:	2302      	movs	r3, #2
 8007330:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007332:	f107 031c 	add.w	r3, r7, #28
 8007336:	4619      	mov	r1, r3
 8007338:	482e      	ldr	r0, [pc, #184]	; (80073f4 <HAL_TIM_MspPostInit+0x1a8>)
 800733a:	f003 fbcb 	bl	800aad4 <HAL_GPIO_Init>
}
 800733e:	e048      	b.n	80073d2 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM10)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a2c      	ldr	r2, [pc, #176]	; (80073f8 <HAL_TIM_MspPostInit+0x1ac>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d11f      	bne.n	800738a <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800734a:	2300      	movs	r3, #0
 800734c:	60fb      	str	r3, [r7, #12]
 800734e:	4b24      	ldr	r3, [pc, #144]	; (80073e0 <HAL_TIM_MspPostInit+0x194>)
 8007350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007352:	4a23      	ldr	r2, [pc, #140]	; (80073e0 <HAL_TIM_MspPostInit+0x194>)
 8007354:	f043 0302 	orr.w	r3, r3, #2
 8007358:	6313      	str	r3, [r2, #48]	; 0x30
 800735a:	4b21      	ldr	r3, [pc, #132]	; (80073e0 <HAL_TIM_MspPostInit+0x194>)
 800735c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800735e:	f003 0302 	and.w	r3, r3, #2
 8007362:	60fb      	str	r3, [r7, #12]
 8007364:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8007366:	f44f 7380 	mov.w	r3, #256	; 0x100
 800736a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800736c:	2302      	movs	r3, #2
 800736e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007370:	2300      	movs	r3, #0
 8007372:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007374:	2300      	movs	r3, #0
 8007376:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8007378:	2303      	movs	r3, #3
 800737a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800737c:	f107 031c 	add.w	r3, r7, #28
 8007380:	4619      	mov	r1, r3
 8007382:	481a      	ldr	r0, [pc, #104]	; (80073ec <HAL_TIM_MspPostInit+0x1a0>)
 8007384:	f003 fba6 	bl	800aad4 <HAL_GPIO_Init>
}
 8007388:	e023      	b.n	80073d2 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM11)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a1b      	ldr	r2, [pc, #108]	; (80073fc <HAL_TIM_MspPostInit+0x1b0>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d11e      	bne.n	80073d2 <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007394:	2300      	movs	r3, #0
 8007396:	60bb      	str	r3, [r7, #8]
 8007398:	4b11      	ldr	r3, [pc, #68]	; (80073e0 <HAL_TIM_MspPostInit+0x194>)
 800739a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800739c:	4a10      	ldr	r2, [pc, #64]	; (80073e0 <HAL_TIM_MspPostInit+0x194>)
 800739e:	f043 0302 	orr.w	r3, r3, #2
 80073a2:	6313      	str	r3, [r2, #48]	; 0x30
 80073a4:	4b0e      	ldr	r3, [pc, #56]	; (80073e0 <HAL_TIM_MspPostInit+0x194>)
 80073a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073a8:	f003 0302 	and.w	r3, r3, #2
 80073ac:	60bb      	str	r3, [r7, #8]
 80073ae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80073b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80073b6:	2302      	movs	r3, #2
 80073b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073ba:	2300      	movs	r3, #0
 80073bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80073be:	2300      	movs	r3, #0
 80073c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 80073c2:	2303      	movs	r3, #3
 80073c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80073c6:	f107 031c 	add.w	r3, r7, #28
 80073ca:	4619      	mov	r1, r3
 80073cc:	4807      	ldr	r0, [pc, #28]	; (80073ec <HAL_TIM_MspPostInit+0x1a0>)
 80073ce:	f003 fb81 	bl	800aad4 <HAL_GPIO_Init>
}
 80073d2:	bf00      	nop
 80073d4:	3730      	adds	r7, #48	; 0x30
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}
 80073da:	bf00      	nop
 80073dc:	40010000 	.word	0x40010000
 80073e0:	40023800 	.word	0x40023800
 80073e4:	40021000 	.word	0x40021000
 80073e8:	40000400 	.word	0x40000400
 80073ec:	40020400 	.word	0x40020400
 80073f0:	40000800 	.word	0x40000800
 80073f4:	40020c00 	.word	0x40020c00
 80073f8:	40014400 	.word	0x40014400
 80073fc:	40014800 	.word	0x40014800

08007400 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b08a      	sub	sp, #40	; 0x28
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007408:	f107 0314 	add.w	r3, r7, #20
 800740c:	2200      	movs	r2, #0
 800740e:	601a      	str	r2, [r3, #0]
 8007410:	605a      	str	r2, [r3, #4]
 8007412:	609a      	str	r2, [r3, #8]
 8007414:	60da      	str	r2, [r3, #12]
 8007416:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4a19      	ldr	r2, [pc, #100]	; (8007484 <HAL_UART_MspInit+0x84>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d12b      	bne.n	800747a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8007422:	2300      	movs	r3, #0
 8007424:	613b      	str	r3, [r7, #16]
 8007426:	4b18      	ldr	r3, [pc, #96]	; (8007488 <HAL_UART_MspInit+0x88>)
 8007428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800742a:	4a17      	ldr	r2, [pc, #92]	; (8007488 <HAL_UART_MspInit+0x88>)
 800742c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007430:	6413      	str	r3, [r2, #64]	; 0x40
 8007432:	4b15      	ldr	r3, [pc, #84]	; (8007488 <HAL_UART_MspInit+0x88>)
 8007434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800743a:	613b      	str	r3, [r7, #16]
 800743c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800743e:	2300      	movs	r3, #0
 8007440:	60fb      	str	r3, [r7, #12]
 8007442:	4b11      	ldr	r3, [pc, #68]	; (8007488 <HAL_UART_MspInit+0x88>)
 8007444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007446:	4a10      	ldr	r2, [pc, #64]	; (8007488 <HAL_UART_MspInit+0x88>)
 8007448:	f043 0308 	orr.w	r3, r3, #8
 800744c:	6313      	str	r3, [r2, #48]	; 0x30
 800744e:	4b0e      	ldr	r3, [pc, #56]	; (8007488 <HAL_UART_MspInit+0x88>)
 8007450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007452:	f003 0308 	and.w	r3, r3, #8
 8007456:	60fb      	str	r3, [r7, #12]
 8007458:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800745a:	2360      	movs	r3, #96	; 0x60
 800745c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800745e:	2302      	movs	r3, #2
 8007460:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007462:	2300      	movs	r3, #0
 8007464:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007466:	2303      	movs	r3, #3
 8007468:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800746a:	2307      	movs	r3, #7
 800746c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800746e:	f107 0314 	add.w	r3, r7, #20
 8007472:	4619      	mov	r1, r3
 8007474:	4805      	ldr	r0, [pc, #20]	; (800748c <HAL_UART_MspInit+0x8c>)
 8007476:	f003 fb2d 	bl	800aad4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800747a:	bf00      	nop
 800747c:	3728      	adds	r7, #40	; 0x28
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}
 8007482:	bf00      	nop
 8007484:	40004400 	.word	0x40004400
 8007488:	40023800 	.word	0x40023800
 800748c:	40020c00 	.word	0x40020c00

08007490 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007490:	b480      	push	{r7}
 8007492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007494:	e7fe      	b.n	8007494 <NMI_Handler+0x4>

08007496 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007496:	b480      	push	{r7}
 8007498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800749a:	e7fe      	b.n	800749a <HardFault_Handler+0x4>

0800749c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800749c:	b480      	push	{r7}
 800749e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80074a0:	e7fe      	b.n	80074a0 <MemManage_Handler+0x4>

080074a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80074a2:	b480      	push	{r7}
 80074a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80074a6:	e7fe      	b.n	80074a6 <BusFault_Handler+0x4>

080074a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80074a8:	b480      	push	{r7}
 80074aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80074ac:	e7fe      	b.n	80074ac <UsageFault_Handler+0x4>

080074ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80074ae:	b480      	push	{r7}
 80074b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80074b2:	bf00      	nop
 80074b4:	46bd      	mov	sp, r7
 80074b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ba:	4770      	bx	lr

080074bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80074bc:	b480      	push	{r7}
 80074be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80074c0:	bf00      	nop
 80074c2:	46bd      	mov	sp, r7
 80074c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c8:	4770      	bx	lr

080074ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80074ca:	b480      	push	{r7}
 80074cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80074ce:	bf00      	nop
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr

080074d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80074dc:	f002 fa02 	bl	80098e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80074e0:	bf00      	nop
 80074e2:	bd80      	pop	{r7, pc}

080074e4 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80074e8:	4803      	ldr	r0, [pc, #12]	; (80074f8 <TIM8_UP_TIM13_IRQHandler+0x14>)
 80074ea:	f007 fced 	bl	800eec8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 80074ee:	4803      	ldr	r0, [pc, #12]	; (80074fc <TIM8_UP_TIM13_IRQHandler+0x18>)
 80074f0:	f007 fcea 	bl	800eec8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80074f4:	bf00      	nop
 80074f6:	bd80      	pop	{r7, pc}
 80074f8:	2003f8e4 	.word	0x2003f8e4
 80074fc:	2003fae0 	.word	0x2003fae0

08007500 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8007504:	4802      	ldr	r0, [pc, #8]	; (8007510 <SDIO_IRQHandler+0x10>)
 8007506:	f005 fd87 	bl	800d018 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800750a:	bf00      	nop
 800750c:	bd80      	pop	{r7, pc}
 800750e:	bf00      	nop
 8007510:	2003fc40 	.word	0x2003fc40

08007514 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8007518:	4802      	ldr	r0, [pc, #8]	; (8007524 <TIM6_DAC_IRQHandler+0x10>)
 800751a:	f007 fcd5 	bl	800eec8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800751e:	bf00      	nop
 8007520:	bd80      	pop	{r7, pc}
 8007522:	bf00      	nop
 8007524:	2003fbc0 	.word	0x2003fbc0

08007528 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800752c:	4802      	ldr	r0, [pc, #8]	; (8007538 <TIM7_IRQHandler+0x10>)
 800752e:	f007 fccb 	bl	800eec8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8007532:	bf00      	nop
 8007534:	bd80      	pop	{r7, pc}
 8007536:	bf00      	nop
 8007538:	2003fd64 	.word	0x2003fd64

0800753c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8007540:	4802      	ldr	r0, [pc, #8]	; (800754c <DMA2_Stream2_IRQHandler+0x10>)
 8007542:	f003 f851 	bl	800a5e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8007546:	bf00      	nop
 8007548:	bd80      	pop	{r7, pc}
 800754a:	bf00      	nop
 800754c:	2003fd04 	.word	0x2003fd04

08007550 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8007554:	4802      	ldr	r0, [pc, #8]	; (8007560 <DMA2_Stream3_IRQHandler+0x10>)
 8007556:	f003 f847 	bl	800a5e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800755a:	bf00      	nop
 800755c:	bd80      	pop	{r7, pc}
 800755e:	bf00      	nop
 8007560:	2003f82c 	.word	0x2003f82c

08007564 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8007568:	4802      	ldr	r0, [pc, #8]	; (8007574 <DMA2_Stream6_IRQHandler+0x10>)
 800756a:	f003 f83d 	bl	800a5e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800756e:	bf00      	nop
 8007570:	bd80      	pop	{r7, pc}
 8007572:	bf00      	nop
 8007574:	2003fb60 	.word	0x2003fb60

08007578 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b086      	sub	sp, #24
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007580:	4a14      	ldr	r2, [pc, #80]	; (80075d4 <_sbrk+0x5c>)
 8007582:	4b15      	ldr	r3, [pc, #84]	; (80075d8 <_sbrk+0x60>)
 8007584:	1ad3      	subs	r3, r2, r3
 8007586:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800758c:	4b13      	ldr	r3, [pc, #76]	; (80075dc <_sbrk+0x64>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d102      	bne.n	800759a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007594:	4b11      	ldr	r3, [pc, #68]	; (80075dc <_sbrk+0x64>)
 8007596:	4a12      	ldr	r2, [pc, #72]	; (80075e0 <_sbrk+0x68>)
 8007598:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800759a:	4b10      	ldr	r3, [pc, #64]	; (80075dc <_sbrk+0x64>)
 800759c:	681a      	ldr	r2, [r3, #0]
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	4413      	add	r3, r2
 80075a2:	693a      	ldr	r2, [r7, #16]
 80075a4:	429a      	cmp	r2, r3
 80075a6:	d207      	bcs.n	80075b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80075a8:	f00e f94c 	bl	8015844 <__errno>
 80075ac:	4603      	mov	r3, r0
 80075ae:	220c      	movs	r2, #12
 80075b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80075b2:	f04f 33ff 	mov.w	r3, #4294967295
 80075b6:	e009      	b.n	80075cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80075b8:	4b08      	ldr	r3, [pc, #32]	; (80075dc <_sbrk+0x64>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80075be:	4b07      	ldr	r3, [pc, #28]	; (80075dc <_sbrk+0x64>)
 80075c0:	681a      	ldr	r2, [r3, #0]
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	4413      	add	r3, r2
 80075c6:	4a05      	ldr	r2, [pc, #20]	; (80075dc <_sbrk+0x64>)
 80075c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80075ca:	68fb      	ldr	r3, [r7, #12]
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	3718      	adds	r7, #24
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}
 80075d4:	20050000 	.word	0x20050000
 80075d8:	00000800 	.word	0x00000800
 80075dc:	200002f0 	.word	0x200002f0
 80075e0:	20041eb8 	.word	0x20041eb8

080075e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80075e4:	b480      	push	{r7}
 80075e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80075e8:	4b08      	ldr	r3, [pc, #32]	; (800760c <SystemInit+0x28>)
 80075ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075ee:	4a07      	ldr	r2, [pc, #28]	; (800760c <SystemInit+0x28>)
 80075f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80075f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80075f8:	4b04      	ldr	r3, [pc, #16]	; (800760c <SystemInit+0x28>)
 80075fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80075fe:	609a      	str	r2, [r3, #8]
#endif
}
 8007600:	bf00      	nop
 8007602:	46bd      	mov	sp, r7
 8007604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007608:	4770      	bx	lr
 800760a:	bf00      	nop
 800760c:	e000ed00 	.word	0xe000ed00

08007610 <cppInit>:
		}
	}
}

void cppInit(void)
{
 8007610:	b598      	push	{r3, r4, r7, lr}
 8007612:	af00      	add	r7, sp, #0
	lcd_init();
 8007614:	f7f9 fd00 	bl	8001018 <lcd_init>

	//---------- Buttery Check ----------//
	power_sensor.init();
 8007618:	483a      	ldr	r0, [pc, #232]	; (8007704 <cppInit+0xf4>)
 800761a:	f7fd fdd5 	bl	80051c8 <_ZN11PowerSensor4initEv>
	HAL_Delay(100);
 800761e:	2064      	movs	r0, #100	; 0x64
 8007620:	f002 f980 	bl	8009924 <HAL_Delay>
	power_sensor.updateValues();
 8007624:	4837      	ldr	r0, [pc, #220]	; (8007704 <cppInit+0xf4>)
 8007626:	f7fd fddf 	bl	80051e8 <_ZN11PowerSensor12updateValuesEv>

	lcd_clear();
 800762a:	f7f9 fd39 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 800762e:	2100      	movs	r1, #0
 8007630:	2000      	movs	r0, #0
 8007632:	f7f9 fd45 	bl	80010c0 <lcd_locate>
	lcd_printf("Voltage");
 8007636:	4834      	ldr	r0, [pc, #208]	; (8007708 <cppInit+0xf8>)
 8007638:	f7f9 fd6d 	bl	8001116 <lcd_printf>
	lcd_locate(0,1);
 800763c:	2101      	movs	r1, #1
 800763e:	2000      	movs	r0, #0
 8007640:	f7f9 fd3e 	bl	80010c0 <lcd_locate>
	lcd_printf("%f", power_sensor.getButteryVoltage());
 8007644:	482f      	ldr	r0, [pc, #188]	; (8007704 <cppInit+0xf4>)
 8007646:	f7fd fdf9 	bl	800523c <_ZN11PowerSensor17getButteryVoltageEv>
 800764a:	ee10 3a10 	vmov	r3, s0
 800764e:	4618      	mov	r0, r3
 8007650:	f7f8 ff92 	bl	8000578 <__aeabi_f2d>
 8007654:	4603      	mov	r3, r0
 8007656:	460c      	mov	r4, r1
 8007658:	461a      	mov	r2, r3
 800765a:	4623      	mov	r3, r4
 800765c:	482b      	ldr	r0, [pc, #172]	; (800770c <cppInit+0xfc>)
 800765e:	f7f9 fd5a 	bl	8001116 <lcd_printf>
	HAL_Delay(1000);
 8007662:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007666:	f002 f95d 	bl	8009924 <HAL_Delay>

	//if(power_sensor.butteryCheck() == true) batteryLowMode(); //if battery low, informed

	// -----------initialize-------//
	if(logger.sdCardInit() == true){ //sd mount successfull
 800766a:	4829      	ldr	r0, [pc, #164]	; (8007710 <cppInit+0x100>)
 800766c:	f7fd f808 	bl	8004680 <_ZN6Logger10sdCardInitEv>
 8007670:	4603      	mov	r3, r0
 8007672:	2b00      	cmp	r3, #0
 8007674:	d007      	beq.n	8007686 <cppInit+0x76>
		led.fullColor('G');
 8007676:	2147      	movs	r1, #71	; 0x47
 8007678:	4826      	ldr	r0, [pc, #152]	; (8007714 <cppInit+0x104>)
 800767a:	f7fa fbcf 	bl	8001e1c <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 800767e:	2064      	movs	r0, #100	; 0x64
 8007680:	f002 f950 	bl	8009924 <HAL_Delay>
 8007684:	e006      	b.n	8007694 <cppInit+0x84>
	}
	else{ //sd mount fali
		led.fullColor('R');
 8007686:	2152      	movs	r1, #82	; 0x52
 8007688:	4822      	ldr	r0, [pc, #136]	; (8007714 <cppInit+0x104>)
 800768a:	f7fa fbc7 	bl	8001e1c <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 800768e:	2064      	movs	r0, #100	; 0x64
 8007690:	f002 f948 	bl	8009924 <HAL_Delay>
	}

	line_sensor.ADCStart();
 8007694:	4820      	ldr	r0, [pc, #128]	; (8007718 <cppInit+0x108>)
 8007696:	f7fa fd1d 	bl	80020d4 <_ZN10LineSensor8ADCStartEv>
	motor.init();
 800769a:	4820      	ldr	r0, [pc, #128]	; (800771c <cppInit+0x10c>)
 800769c:	f7fd fa68 	bl	8004b70 <_ZN5Motor4initEv>
	encoder.init();
 80076a0:	481f      	ldr	r0, [pc, #124]	; (8007720 <cppInit+0x110>)
 80076a2:	f7f9 fd83 	bl	80011ac <_ZN7Encoder4initEv>
	imu.init();
 80076a6:	481f      	ldr	r0, [pc, #124]	; (8007724 <cppInit+0x114>)
 80076a8:	f7fa f976 	bl	8001998 <_ZN3IMU4initEv>
	line_trace.init();
 80076ac:	481e      	ldr	r0, [pc, #120]	; (8007728 <cppInit+0x118>)
 80076ae:	f7fc f8c5 	bl	800383c <_ZN9LineTrace4initEv>

	line_sensor.calibration();
 80076b2:	4819      	ldr	r0, [pc, #100]	; (8007718 <cppInit+0x108>)
 80076b4:	f7fa fe4a 	bl	800234c <_ZN10LineSensor11calibrationEv>
	HAL_Delay(1000);
 80076b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80076bc:	f002 f932 	bl	8009924 <HAL_Delay>

	led.fullColor('M');
 80076c0:	214d      	movs	r1, #77	; 0x4d
 80076c2:	4814      	ldr	r0, [pc, #80]	; (8007714 <cppInit+0x104>)
 80076c4:	f7fa fbaa 	bl	8001e1c <_ZN3LED9fullColorEc>
	imu.calibration();
 80076c8:	4816      	ldr	r0, [pc, #88]	; (8007724 <cppInit+0x114>)
 80076ca:	f7fa fa2f 	bl	8001b2c <_ZN3IMU11calibrationEv>

	//line_trace.setGain(0.0005, 0.000003, 0);
	//line_trace.setGain(0.0005, 0.000002, 0);

	//velocity_ctrl.setVelocityGain(1.5, 20, 0);
	velocity_ctrl.setVelocityGain(1.8295, 16.1174, 0.025243);
 80076ce:	ed9f 1a17 	vldr	s2, [pc, #92]	; 800772c <cppInit+0x11c>
 80076d2:	eddf 0a17 	vldr	s1, [pc, #92]	; 8007730 <cppInit+0x120>
 80076d6:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8007734 <cppInit+0x124>
 80076da:	4817      	ldr	r0, [pc, #92]	; (8007738 <cppInit+0x128>)
 80076dc:	f7fe f9cc 	bl	8005a78 <_ZN12VelocityCtrl15setVelocityGainEfff>
	//velocity_ctrl.setVelocityGain(1.9842, 22.9078, 0.02079);
	//velocity_ctrl.setOmegaGain(0.5, 5, 0);
	//velocity_ctrl.setOmegaGain(0.05, 7, 0);
	//velocity_ctrl.setOmegaGain(0.069793, 0.86816, 0.0014027);
	velocity_ctrl.setOmegaGain(0.060, 0.86816, 0.000);
 80076e0:	ed9f 1a16 	vldr	s2, [pc, #88]	; 800773c <cppInit+0x12c>
 80076e4:	eddf 0a16 	vldr	s1, [pc, #88]	; 8007740 <cppInit+0x130>
 80076e8:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8007744 <cppInit+0x134>
 80076ec:	4812      	ldr	r0, [pc, #72]	; (8007738 <cppInit+0x128>)
 80076ee:	f7fe f9dc 	bl	8005aaa <_ZN12VelocityCtrl12setOmegaGainEfff>
	//velocity_ctrl.setOmegaGain(0.12175, 1.0604, 0.002614);
	//velocity_ctrl.setOmegaGain(0.0, 0, 0);


	//encoder.clearDistance();
	odometry.clearPotition();
 80076f2:	4815      	ldr	r0, [pc, #84]	; (8007748 <cppInit+0x138>)
 80076f4:	f7fd fc6d 	bl	8004fd2 <_ZN8Odometry13clearPotitionEv>

	path_following.init();
 80076f8:	4814      	ldr	r0, [pc, #80]	; (800774c <cppInit+0x13c>)
 80076fa:	f7fd fd07 	bl	800510c <_ZN13PathFollowing4initEv>

}
 80076fe:	bf00      	nop
 8007700:	bd98      	pop	{r3, r4, r7, pc}
 8007702:	bf00      	nop
 8007704:	20000604 	.word	0x20000604
 8007708:	0801a0c0 	.word	0x0801a0c0
 800770c:	0801a0c8 	.word	0x0801a0c8
 8007710:	20000624 	.word	0x20000624
 8007714:	20000600 	.word	0x20000600
 8007718:	200002f4 	.word	0x200002f4
 800771c:	200005fc 	.word	0x200005fc
 8007720:	20017d34 	.word	0x20017d34
 8007724:	20000610 	.word	0x20000610
 8007728:	20017dd0 	.word	0x20017dd0
 800772c:	3cceca68 	.word	0x3cceca68
 8007730:	4180f06f 	.word	0x4180f06f
 8007734:	3fea2d0e 	.word	0x3fea2d0e
 8007738:	20017d54 	.word	0x20017d54
 800773c:	00000000 	.word	0x00000000
 8007740:	3f5e3fbc 	.word	0x3f5e3fbc
 8007744:	3d75c28f 	.word	0x3d75c28f
 8007748:	20017d90 	.word	0x20017d90
 800774c:	20025d28 	.word	0x20025d28

08007750 <cppFlip1ms>:

void cppFlip1ms(void)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	af00      	add	r7, sp, #0
	line_sensor.updateSensorValues();
 8007754:	4819      	ldr	r0, [pc, #100]	; (80077bc <cppFlip1ms+0x6c>)
 8007756:	f7fa fd1b 	bl	8002190 <_ZN10LineSensor18updateSensorValuesEv>
	imu.updateValues();
 800775a:	4819      	ldr	r0, [pc, #100]	; (80077c0 <cppFlip1ms+0x70>)
 800775c:	f7fa f944 	bl	80019e8 <_ZN3IMU12updateValuesEv>
	encoder.update();
 8007760:	4818      	ldr	r0, [pc, #96]	; (80077c4 <cppFlip1ms+0x74>)
 8007762:	f7f9 fd45 	bl	80011f0 <_ZN7Encoder6updateEv>
	line_trace.flip();
 8007766:	4818      	ldr	r0, [pc, #96]	; (80077c8 <cppFlip1ms+0x78>)
 8007768:	f7fc fafe 	bl	8003d68 <_ZN9LineTrace4flipEv>
	velocity_ctrl.flip();
 800776c:	4817      	ldr	r0, [pc, #92]	; (80077cc <cppFlip1ms+0x7c>)
 800776e:	f7fe f9b5 	bl	8005adc <_ZN12VelocityCtrl4flipEv>
	odometry.flip();
 8007772:	4817      	ldr	r0, [pc, #92]	; (80077d0 <cppFlip1ms+0x80>)
 8007774:	f7fd fc10 	bl	8004f98 <_ZN8Odometry4flipEv>
	side_sensor.updateStatus();
 8007778:	4816      	ldr	r0, [pc, #88]	; (80077d4 <cppFlip1ms+0x84>)
 800777a:	f7fd fdd5 	bl	8005328 <_ZN10SideSensor12updateStatusEv>

	motor.motorCtrl();
 800777e:	4816      	ldr	r0, [pc, #88]	; (80077d8 <cppFlip1ms+0x88>)
 8007780:	f7fd fa08 	bl	8004b94 <_ZN5Motor9motorCtrlEv>

	//logger.storeLog(velocity_ctrl.getCurrentVelocity());
	//logger.storeLog(imu.getOmega());

	static uint16_t twice_cnt;
	twice_cnt++;
 8007784:	4b15      	ldr	r3, [pc, #84]	; (80077dc <cppFlip1ms+0x8c>)
 8007786:	881b      	ldrh	r3, [r3, #0]
 8007788:	3301      	adds	r3, #1
 800778a:	b29a      	uxth	r2, r3
 800778c:	4b13      	ldr	r3, [pc, #76]	; (80077dc <cppFlip1ms+0x8c>)
 800778e:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 2){ //2ms
 8007790:	4b12      	ldr	r3, [pc, #72]	; (80077dc <cppFlip1ms+0x8c>)
 8007792:	881b      	ldrh	r3, [r3, #0]
 8007794:	2b01      	cmp	r3, #1
 8007796:	d90c      	bls.n	80077b2 <cppFlip1ms+0x62>
		sys_ident.inOutputStore(imu.getOmega());
 8007798:	4809      	ldr	r0, [pc, #36]	; (80077c0 <cppFlip1ms+0x70>)
 800779a:	f7fa f97d 	bl	8001a98 <_ZN3IMU8getOmegaEv>
 800779e:	eef0 7a40 	vmov.f32	s15, s0
 80077a2:	eeb0 0a67 	vmov.f32	s0, s15
 80077a6:	480e      	ldr	r0, [pc, #56]	; (80077e0 <cppFlip1ms+0x90>)
 80077a8:	f7fd ff16 	bl	80055d8 <_ZN20SystemIdentification13inOutputStoreEf>
		twice_cnt = 0;
 80077ac:	4b0b      	ldr	r3, [pc, #44]	; (80077dc <cppFlip1ms+0x8c>)
 80077ae:	2200      	movs	r2, #0
 80077b0:	801a      	strh	r2, [r3, #0]

	//mon_cnt = twice_cnt;
	/*
	*/

	encoder.clear();
 80077b2:	4804      	ldr	r0, [pc, #16]	; (80077c4 <cppFlip1ms+0x74>)
 80077b4:	f7f9 fe06 	bl	80013c4 <_ZN7Encoder5clearEv>

	//Buttery Check
	//power_sensor.updateValues();
	//if(power_sensor.butteryCheck() == true) led.fullColor('R');

}
 80077b8:	bf00      	nop
 80077ba:	bd80      	pop	{r7, pc}
 80077bc:	200002f4 	.word	0x200002f4
 80077c0:	20000610 	.word	0x20000610
 80077c4:	20017d34 	.word	0x20017d34
 80077c8:	20017dd0 	.word	0x20017dd0
 80077cc:	20017d54 	.word	0x20017d54
 80077d0:	20017d90 	.word	0x20017d90
 80077d4:	200005ec 	.word	0x200005ec
 80077d8:	200005fc 	.word	0x200005fc
 80077dc:	2003d450 	.word	0x2003d450
 80077e0:	20025b1c 	.word	0x20025b1c

080077e4 <cppFlip100ns>:

void cppFlip100ns(void)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	af00      	add	r7, sp, #0
	line_sensor.storeSensorValues();
 80077e8:	4802      	ldr	r0, [pc, #8]	; (80077f4 <cppFlip100ns+0x10>)
 80077ea:	f7fa fc83 	bl	80020f4 <_ZN10LineSensor17storeSensorValuesEv>
	//line_trace.flip100ns();
}
 80077ee:	bf00      	nop
 80077f0:	bd80      	pop	{r7, pc}
 80077f2:	bf00      	nop
 80077f4:	200002f4 	.word	0x200002f4

080077f8 <cppFlip10ms>:

void cppFlip10ms(void)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	af00      	add	r7, sp, #0
	static uint16_t twice_cnt;
	twice_cnt++;
 80077fc:	4b08      	ldr	r3, [pc, #32]	; (8007820 <cppFlip10ms+0x28>)
 80077fe:	881b      	ldrh	r3, [r3, #0]
 8007800:	3301      	adds	r3, #1
 8007802:	b29a      	uxth	r2, r3
 8007804:	4b06      	ldr	r3, [pc, #24]	; (8007820 <cppFlip10ms+0x28>)
 8007806:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 7){ //70ms
 8007808:	4b05      	ldr	r3, [pc, #20]	; (8007820 <cppFlip10ms+0x28>)
 800780a:	881b      	ldrh	r3, [r3, #0]
 800780c:	2b06      	cmp	r3, #6
 800780e:	d905      	bls.n	800781c <cppFlip10ms+0x24>
		sys_ident.updateMsig();
 8007810:	4804      	ldr	r0, [pc, #16]	; (8007824 <cppFlip10ms+0x2c>)
 8007812:	f7fd ff01 	bl	8005618 <_ZN20SystemIdentification10updateMsigEv>
		twice_cnt = 0;
 8007816:	4b02      	ldr	r3, [pc, #8]	; (8007820 <cppFlip10ms+0x28>)
 8007818:	2200      	movs	r2, #0
 800781a:	801a      	strh	r2, [r3, #0]
		path_following.flip();
	}
	velocity_ctrl.setVelocity(path_following.getV(), path_following.getW());
	*/

}
 800781c:	bf00      	nop
 800781e:	bd80      	pop	{r7, pc}
 8007820:	2003d452 	.word	0x2003d452
 8007824:	20025b1c 	.word	0x20025b1c

08007828 <cppLoop>:
{
	//side_sensor.updateStatus(gpio_pin);
}

void cppLoop(void)
{
 8007828:	b5f0      	push	{r4, r5, r6, r7, lr}
 800782a:	b083      	sub	sp, #12
 800782c:	af02      	add	r7, sp, #8
	static int16_t selector;
	static int16_t selector_acc, selector_acc2;
	static int16_t selector_vel, selector_vel2;
	static int16_t selector_fast;

	static float adj_kp = line_trace.getKp();
 800782e:	4baf      	ldr	r3, [pc, #700]	; (8007aec <cppLoop+0x2c4>)
 8007830:	781b      	ldrb	r3, [r3, #0]
 8007832:	f3bf 8f5b 	dmb	ish
 8007836:	b2db      	uxtb	r3, r3
 8007838:	f003 0301 	and.w	r3, r3, #1
 800783c:	2b00      	cmp	r3, #0
 800783e:	bf0c      	ite	eq
 8007840:	2301      	moveq	r3, #1
 8007842:	2300      	movne	r3, #0
 8007844:	b2db      	uxtb	r3, r3
 8007846:	2b00      	cmp	r3, #0
 8007848:	d015      	beq.n	8007876 <cppLoop+0x4e>
 800784a:	48a8      	ldr	r0, [pc, #672]	; (8007aec <cppLoop+0x2c4>)
 800784c:	f00c fd93 	bl	8014376 <__cxa_guard_acquire>
 8007850:	4603      	mov	r3, r0
 8007852:	2b00      	cmp	r3, #0
 8007854:	bf14      	ite	ne
 8007856:	2301      	movne	r3, #1
 8007858:	2300      	moveq	r3, #0
 800785a:	b2db      	uxtb	r3, r3
 800785c:	2b00      	cmp	r3, #0
 800785e:	d00a      	beq.n	8007876 <cppLoop+0x4e>
 8007860:	48a3      	ldr	r0, [pc, #652]	; (8007af0 <cppLoop+0x2c8>)
 8007862:	f7fc f90b 	bl	8003a7c <_ZN9LineTrace5getKpEv>
 8007866:	eef0 7a40 	vmov.f32	s15, s0
 800786a:	4ba2      	ldr	r3, [pc, #648]	; (8007af4 <cppLoop+0x2cc>)
 800786c:	edc3 7a00 	vstr	s15, [r3]
 8007870:	489e      	ldr	r0, [pc, #632]	; (8007aec <cppLoop+0x2c4>)
 8007872:	f00c fd8c 	bl	801438e <__cxa_guard_release>
	static float adj_ki= line_trace.getKi();
 8007876:	4ba0      	ldr	r3, [pc, #640]	; (8007af8 <cppLoop+0x2d0>)
 8007878:	781b      	ldrb	r3, [r3, #0]
 800787a:	f3bf 8f5b 	dmb	ish
 800787e:	b2db      	uxtb	r3, r3
 8007880:	f003 0301 	and.w	r3, r3, #1
 8007884:	2b00      	cmp	r3, #0
 8007886:	bf0c      	ite	eq
 8007888:	2301      	moveq	r3, #1
 800788a:	2300      	movne	r3, #0
 800788c:	b2db      	uxtb	r3, r3
 800788e:	2b00      	cmp	r3, #0
 8007890:	d015      	beq.n	80078be <cppLoop+0x96>
 8007892:	4899      	ldr	r0, [pc, #612]	; (8007af8 <cppLoop+0x2d0>)
 8007894:	f00c fd6f 	bl	8014376 <__cxa_guard_acquire>
 8007898:	4603      	mov	r3, r0
 800789a:	2b00      	cmp	r3, #0
 800789c:	bf14      	ite	ne
 800789e:	2301      	movne	r3, #1
 80078a0:	2300      	moveq	r3, #0
 80078a2:	b2db      	uxtb	r3, r3
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d00a      	beq.n	80078be <cppLoop+0x96>
 80078a8:	4891      	ldr	r0, [pc, #580]	; (8007af0 <cppLoop+0x2c8>)
 80078aa:	f7fc f8f6 	bl	8003a9a <_ZN9LineTrace5getKiEv>
 80078ae:	eef0 7a40 	vmov.f32	s15, s0
 80078b2:	4b92      	ldr	r3, [pc, #584]	; (8007afc <cppLoop+0x2d4>)
 80078b4:	edc3 7a00 	vstr	s15, [r3]
 80078b8:	488f      	ldr	r0, [pc, #572]	; (8007af8 <cppLoop+0x2d0>)
 80078ba:	f00c fd68 	bl	801438e <__cxa_guard_release>
	static float adj_kd = line_trace.getKd();
 80078be:	4b90      	ldr	r3, [pc, #576]	; (8007b00 <cppLoop+0x2d8>)
 80078c0:	781b      	ldrb	r3, [r3, #0]
 80078c2:	f3bf 8f5b 	dmb	ish
 80078c6:	b2db      	uxtb	r3, r3
 80078c8:	f003 0301 	and.w	r3, r3, #1
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	bf0c      	ite	eq
 80078d0:	2301      	moveq	r3, #1
 80078d2:	2300      	movne	r3, #0
 80078d4:	b2db      	uxtb	r3, r3
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d015      	beq.n	8007906 <cppLoop+0xde>
 80078da:	4889      	ldr	r0, [pc, #548]	; (8007b00 <cppLoop+0x2d8>)
 80078dc:	f00c fd4b 	bl	8014376 <__cxa_guard_acquire>
 80078e0:	4603      	mov	r3, r0
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	bf14      	ite	ne
 80078e6:	2301      	movne	r3, #1
 80078e8:	2300      	moveq	r3, #0
 80078ea:	b2db      	uxtb	r3, r3
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d00a      	beq.n	8007906 <cppLoop+0xde>
 80078f0:	487f      	ldr	r0, [pc, #508]	; (8007af0 <cppLoop+0x2c8>)
 80078f2:	f7fc f8e1 	bl	8003ab8 <_ZN9LineTrace5getKdEv>
 80078f6:	eef0 7a40 	vmov.f32	s15, s0
 80078fa:	4b82      	ldr	r3, [pc, #520]	; (8007b04 <cppLoop+0x2dc>)
 80078fc:	edc3 7a00 	vstr	s15, [r3]
 8007900:	487f      	ldr	r0, [pc, #508]	; (8007b00 <cppLoop+0x2d8>)
 8007902:	f00c fd44 	bl	801438e <__cxa_guard_release>

	static float adj_kp_fast = line_trace.getKpFast();
 8007906:	4b80      	ldr	r3, [pc, #512]	; (8007b08 <cppLoop+0x2e0>)
 8007908:	781b      	ldrb	r3, [r3, #0]
 800790a:	f3bf 8f5b 	dmb	ish
 800790e:	b2db      	uxtb	r3, r3
 8007910:	f003 0301 	and.w	r3, r3, #1
 8007914:	2b00      	cmp	r3, #0
 8007916:	bf0c      	ite	eq
 8007918:	2301      	moveq	r3, #1
 800791a:	2300      	movne	r3, #0
 800791c:	b2db      	uxtb	r3, r3
 800791e:	2b00      	cmp	r3, #0
 8007920:	d015      	beq.n	800794e <cppLoop+0x126>
 8007922:	4879      	ldr	r0, [pc, #484]	; (8007b08 <cppLoop+0x2e0>)
 8007924:	f00c fd27 	bl	8014376 <__cxa_guard_acquire>
 8007928:	4603      	mov	r3, r0
 800792a:	2b00      	cmp	r3, #0
 800792c:	bf14      	ite	ne
 800792e:	2301      	movne	r3, #1
 8007930:	2300      	moveq	r3, #0
 8007932:	b2db      	uxtb	r3, r3
 8007934:	2b00      	cmp	r3, #0
 8007936:	d00a      	beq.n	800794e <cppLoop+0x126>
 8007938:	486d      	ldr	r0, [pc, #436]	; (8007af0 <cppLoop+0x2c8>)
 800793a:	f7fc f8cc 	bl	8003ad6 <_ZN9LineTrace9getKpFastEv>
 800793e:	eef0 7a40 	vmov.f32	s15, s0
 8007942:	4b72      	ldr	r3, [pc, #456]	; (8007b0c <cppLoop+0x2e4>)
 8007944:	edc3 7a00 	vstr	s15, [r3]
 8007948:	486f      	ldr	r0, [pc, #444]	; (8007b08 <cppLoop+0x2e0>)
 800794a:	f00c fd20 	bl	801438e <__cxa_guard_release>
	static float adj_ki_fast = line_trace.getKiFast();
 800794e:	4b70      	ldr	r3, [pc, #448]	; (8007b10 <cppLoop+0x2e8>)
 8007950:	781b      	ldrb	r3, [r3, #0]
 8007952:	f3bf 8f5b 	dmb	ish
 8007956:	b2db      	uxtb	r3, r3
 8007958:	f003 0301 	and.w	r3, r3, #1
 800795c:	2b00      	cmp	r3, #0
 800795e:	bf0c      	ite	eq
 8007960:	2301      	moveq	r3, #1
 8007962:	2300      	movne	r3, #0
 8007964:	b2db      	uxtb	r3, r3
 8007966:	2b00      	cmp	r3, #0
 8007968:	d015      	beq.n	8007996 <cppLoop+0x16e>
 800796a:	4869      	ldr	r0, [pc, #420]	; (8007b10 <cppLoop+0x2e8>)
 800796c:	f00c fd03 	bl	8014376 <__cxa_guard_acquire>
 8007970:	4603      	mov	r3, r0
 8007972:	2b00      	cmp	r3, #0
 8007974:	bf14      	ite	ne
 8007976:	2301      	movne	r3, #1
 8007978:	2300      	moveq	r3, #0
 800797a:	b2db      	uxtb	r3, r3
 800797c:	2b00      	cmp	r3, #0
 800797e:	d00a      	beq.n	8007996 <cppLoop+0x16e>
 8007980:	485b      	ldr	r0, [pc, #364]	; (8007af0 <cppLoop+0x2c8>)
 8007982:	f7fc f8b7 	bl	8003af4 <_ZN9LineTrace9getKiFastEv>
 8007986:	eef0 7a40 	vmov.f32	s15, s0
 800798a:	4b62      	ldr	r3, [pc, #392]	; (8007b14 <cppLoop+0x2ec>)
 800798c:	edc3 7a00 	vstr	s15, [r3]
 8007990:	485f      	ldr	r0, [pc, #380]	; (8007b10 <cppLoop+0x2e8>)
 8007992:	f00c fcfc 	bl	801438e <__cxa_guard_release>
	static float adj_kd_fast = line_trace.getKdFast();
 8007996:	4b60      	ldr	r3, [pc, #384]	; (8007b18 <cppLoop+0x2f0>)
 8007998:	781b      	ldrb	r3, [r3, #0]
 800799a:	f3bf 8f5b 	dmb	ish
 800799e:	b2db      	uxtb	r3, r3
 80079a0:	f003 0301 	and.w	r3, r3, #1
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	bf0c      	ite	eq
 80079a8:	2301      	moveq	r3, #1
 80079aa:	2300      	movne	r3, #0
 80079ac:	b2db      	uxtb	r3, r3
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d015      	beq.n	80079de <cppLoop+0x1b6>
 80079b2:	4859      	ldr	r0, [pc, #356]	; (8007b18 <cppLoop+0x2f0>)
 80079b4:	f00c fcdf 	bl	8014376 <__cxa_guard_acquire>
 80079b8:	4603      	mov	r3, r0
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	bf14      	ite	ne
 80079be:	2301      	movne	r3, #1
 80079c0:	2300      	moveq	r3, #0
 80079c2:	b2db      	uxtb	r3, r3
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d00a      	beq.n	80079de <cppLoop+0x1b6>
 80079c8:	4849      	ldr	r0, [pc, #292]	; (8007af0 <cppLoop+0x2c8>)
 80079ca:	f7fc f8a2 	bl	8003b12 <_ZN9LineTrace9getKdFastEv>
 80079ce:	eef0 7a40 	vmov.f32	s15, s0
 80079d2:	4b52      	ldr	r3, [pc, #328]	; (8007b1c <cppLoop+0x2f4>)
 80079d4:	edc3 7a00 	vstr	s15, [r3]
 80079d8:	484f      	ldr	r0, [pc, #316]	; (8007b18 <cppLoop+0x2f0>)
 80079da:	f00c fcd8 	bl	801438e <__cxa_guard_release>

	static float adj_velocity = line_trace.getTargetVelocity();
 80079de:	4b50      	ldr	r3, [pc, #320]	; (8007b20 <cppLoop+0x2f8>)
 80079e0:	781b      	ldrb	r3, [r3, #0]
 80079e2:	f3bf 8f5b 	dmb	ish
 80079e6:	b2db      	uxtb	r3, r3
 80079e8:	f003 0301 	and.w	r3, r3, #1
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	bf0c      	ite	eq
 80079f0:	2301      	moveq	r3, #1
 80079f2:	2300      	movne	r3, #0
 80079f4:	b2db      	uxtb	r3, r3
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d015      	beq.n	8007a26 <cppLoop+0x1fe>
 80079fa:	4849      	ldr	r0, [pc, #292]	; (8007b20 <cppLoop+0x2f8>)
 80079fc:	f00c fcbb 	bl	8014376 <__cxa_guard_acquire>
 8007a00:	4603      	mov	r3, r0
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	bf14      	ite	ne
 8007a06:	2301      	movne	r3, #1
 8007a08:	2300      	moveq	r3, #0
 8007a0a:	b2db      	uxtb	r3, r3
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d00a      	beq.n	8007a26 <cppLoop+0x1fe>
 8007a10:	4837      	ldr	r0, [pc, #220]	; (8007af0 <cppLoop+0x2c8>)
 8007a12:	f7fc f8dd 	bl	8003bd0 <_ZN9LineTrace17getTargetVelocityEv>
 8007a16:	eef0 7a40 	vmov.f32	s15, s0
 8007a1a:	4b42      	ldr	r3, [pc, #264]	; (8007b24 <cppLoop+0x2fc>)
 8007a1c:	edc3 7a00 	vstr	s15, [r3]
 8007a20:	483f      	ldr	r0, [pc, #252]	; (8007b20 <cppLoop+0x2f8>)
 8007a22:	f00c fcb4 	bl	801438e <__cxa_guard_release>
	static float adj_max_velocity = line_trace.getMaxVelocity();
 8007a26:	4b40      	ldr	r3, [pc, #256]	; (8007b28 <cppLoop+0x300>)
 8007a28:	781b      	ldrb	r3, [r3, #0]
 8007a2a:	f3bf 8f5b 	dmb	ish
 8007a2e:	b2db      	uxtb	r3, r3
 8007a30:	f003 0301 	and.w	r3, r3, #1
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	bf0c      	ite	eq
 8007a38:	2301      	moveq	r3, #1
 8007a3a:	2300      	movne	r3, #0
 8007a3c:	b2db      	uxtb	r3, r3
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d015      	beq.n	8007a6e <cppLoop+0x246>
 8007a42:	4839      	ldr	r0, [pc, #228]	; (8007b28 <cppLoop+0x300>)
 8007a44:	f00c fc97 	bl	8014376 <__cxa_guard_acquire>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	bf14      	ite	ne
 8007a4e:	2301      	movne	r3, #1
 8007a50:	2300      	moveq	r3, #0
 8007a52:	b2db      	uxtb	r3, r3
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d00a      	beq.n	8007a6e <cppLoop+0x246>
 8007a58:	4825      	ldr	r0, [pc, #148]	; (8007af0 <cppLoop+0x2c8>)
 8007a5a:	f7fc f8c9 	bl	8003bf0 <_ZN9LineTrace14getMaxVelocityEv>
 8007a5e:	eef0 7a40 	vmov.f32	s15, s0
 8007a62:	4b32      	ldr	r3, [pc, #200]	; (8007b2c <cppLoop+0x304>)
 8007a64:	edc3 7a00 	vstr	s15, [r3]
 8007a68:	482f      	ldr	r0, [pc, #188]	; (8007b28 <cppLoop+0x300>)
 8007a6a:	f00c fc90 	bl	801438e <__cxa_guard_release>
	static float adj_max_velocity2 = line_trace.getMaxVelocity2();
 8007a6e:	4b30      	ldr	r3, [pc, #192]	; (8007b30 <cppLoop+0x308>)
 8007a70:	781b      	ldrb	r3, [r3, #0]
 8007a72:	f3bf 8f5b 	dmb	ish
 8007a76:	b2db      	uxtb	r3, r3
 8007a78:	f003 0301 	and.w	r3, r3, #1
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	bf0c      	ite	eq
 8007a80:	2301      	moveq	r3, #1
 8007a82:	2300      	movne	r3, #0
 8007a84:	b2db      	uxtb	r3, r3
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d015      	beq.n	8007ab6 <cppLoop+0x28e>
 8007a8a:	4829      	ldr	r0, [pc, #164]	; (8007b30 <cppLoop+0x308>)
 8007a8c:	f00c fc73 	bl	8014376 <__cxa_guard_acquire>
 8007a90:	4603      	mov	r3, r0
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	bf14      	ite	ne
 8007a96:	2301      	movne	r3, #1
 8007a98:	2300      	moveq	r3, #0
 8007a9a:	b2db      	uxtb	r3, r3
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d00a      	beq.n	8007ab6 <cppLoop+0x28e>
 8007aa0:	4813      	ldr	r0, [pc, #76]	; (8007af0 <cppLoop+0x2c8>)
 8007aa2:	f7fc f8b5 	bl	8003c10 <_ZN9LineTrace15getMaxVelocity2Ev>
 8007aa6:	eef0 7a40 	vmov.f32	s15, s0
 8007aaa:	4b22      	ldr	r3, [pc, #136]	; (8007b34 <cppLoop+0x30c>)
 8007aac:	edc3 7a00 	vstr	s15, [r3]
 8007ab0:	481f      	ldr	r0, [pc, #124]	; (8007b30 <cppLoop+0x308>)
 8007ab2:	f00c fc6c 	bl	801438e <__cxa_guard_release>
	static float adj_min_velocity = line_trace.getMinVelocity();
 8007ab6:	4b20      	ldr	r3, [pc, #128]	; (8007b38 <cppLoop+0x310>)
 8007ab8:	781b      	ldrb	r3, [r3, #0]
 8007aba:	f3bf 8f5b 	dmb	ish
 8007abe:	b2db      	uxtb	r3, r3
 8007ac0:	f003 0301 	and.w	r3, r3, #1
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	bf0c      	ite	eq
 8007ac8:	2301      	moveq	r3, #1
 8007aca:	2300      	movne	r3, #0
 8007acc:	b2db      	uxtb	r3, r3
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d03f      	beq.n	8007b52 <cppLoop+0x32a>
 8007ad2:	4819      	ldr	r0, [pc, #100]	; (8007b38 <cppLoop+0x310>)
 8007ad4:	f00c fc4f 	bl	8014376 <__cxa_guard_acquire>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	bf14      	ite	ne
 8007ade:	2301      	movne	r3, #1
 8007ae0:	2300      	moveq	r3, #0
 8007ae2:	b2db      	uxtb	r3, r3
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d034      	beq.n	8007b52 <cppLoop+0x32a>
 8007ae8:	e028      	b.n	8007b3c <cppLoop+0x314>
 8007aea:	bf00      	nop
 8007aec:	2003d464 	.word	0x2003d464
 8007af0:	20017dd0 	.word	0x20017dd0
 8007af4:	2003d460 	.word	0x2003d460
 8007af8:	2003d46c 	.word	0x2003d46c
 8007afc:	2003d468 	.word	0x2003d468
 8007b00:	2003d474 	.word	0x2003d474
 8007b04:	2003d470 	.word	0x2003d470
 8007b08:	2003d47c 	.word	0x2003d47c
 8007b0c:	2003d478 	.word	0x2003d478
 8007b10:	2003d484 	.word	0x2003d484
 8007b14:	2003d480 	.word	0x2003d480
 8007b18:	2003d48c 	.word	0x2003d48c
 8007b1c:	2003d488 	.word	0x2003d488
 8007b20:	2003d494 	.word	0x2003d494
 8007b24:	2003d490 	.word	0x2003d490
 8007b28:	2003d49c 	.word	0x2003d49c
 8007b2c:	2003d498 	.word	0x2003d498
 8007b30:	2003d4a4 	.word	0x2003d4a4
 8007b34:	2003d4a0 	.word	0x2003d4a0
 8007b38:	2003d4ac 	.word	0x2003d4ac
 8007b3c:	48af      	ldr	r0, [pc, #700]	; (8007dfc <cppLoop+0x5d4>)
 8007b3e:	f7fc f877 	bl	8003c30 <_ZN9LineTrace14getMinVelocityEv>
 8007b42:	eef0 7a40 	vmov.f32	s15, s0
 8007b46:	4bae      	ldr	r3, [pc, #696]	; (8007e00 <cppLoop+0x5d8>)
 8007b48:	edc3 7a00 	vstr	s15, [r3]
 8007b4c:	48ad      	ldr	r0, [pc, #692]	; (8007e04 <cppLoop+0x5dc>)
 8007b4e:	f00c fc1e 	bl	801438e <__cxa_guard_release>
	static float adj_min_velocity2 = line_trace.getMinVelocity2();
 8007b52:	4bad      	ldr	r3, [pc, #692]	; (8007e08 <cppLoop+0x5e0>)
 8007b54:	781b      	ldrb	r3, [r3, #0]
 8007b56:	f3bf 8f5b 	dmb	ish
 8007b5a:	b2db      	uxtb	r3, r3
 8007b5c:	f003 0301 	and.w	r3, r3, #1
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	bf0c      	ite	eq
 8007b64:	2301      	moveq	r3, #1
 8007b66:	2300      	movne	r3, #0
 8007b68:	b2db      	uxtb	r3, r3
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d015      	beq.n	8007b9a <cppLoop+0x372>
 8007b6e:	48a6      	ldr	r0, [pc, #664]	; (8007e08 <cppLoop+0x5e0>)
 8007b70:	f00c fc01 	bl	8014376 <__cxa_guard_acquire>
 8007b74:	4603      	mov	r3, r0
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	bf14      	ite	ne
 8007b7a:	2301      	movne	r3, #1
 8007b7c:	2300      	moveq	r3, #0
 8007b7e:	b2db      	uxtb	r3, r3
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d00a      	beq.n	8007b9a <cppLoop+0x372>
 8007b84:	489d      	ldr	r0, [pc, #628]	; (8007dfc <cppLoop+0x5d4>)
 8007b86:	f7fc f863 	bl	8003c50 <_ZN9LineTrace15getMinVelocity2Ev>
 8007b8a:	eef0 7a40 	vmov.f32	s15, s0
 8007b8e:	4b9f      	ldr	r3, [pc, #636]	; (8007e0c <cppLoop+0x5e4>)
 8007b90:	edc3 7a00 	vstr	s15, [r3]
 8007b94:	489c      	ldr	r0, [pc, #624]	; (8007e08 <cppLoop+0x5e0>)
 8007b96:	f00c fbfa 	bl	801438e <__cxa_guard_release>

	static float adj_acc = line_trace.getMaxAcc();
 8007b9a:	4b9d      	ldr	r3, [pc, #628]	; (8007e10 <cppLoop+0x5e8>)
 8007b9c:	781b      	ldrb	r3, [r3, #0]
 8007b9e:	f3bf 8f5b 	dmb	ish
 8007ba2:	b2db      	uxtb	r3, r3
 8007ba4:	f003 0301 	and.w	r3, r3, #1
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	bf0c      	ite	eq
 8007bac:	2301      	moveq	r3, #1
 8007bae:	2300      	movne	r3, #0
 8007bb0:	b2db      	uxtb	r3, r3
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d015      	beq.n	8007be2 <cppLoop+0x3ba>
 8007bb6:	4896      	ldr	r0, [pc, #600]	; (8007e10 <cppLoop+0x5e8>)
 8007bb8:	f00c fbdd 	bl	8014376 <__cxa_guard_acquire>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	bf14      	ite	ne
 8007bc2:	2301      	movne	r3, #1
 8007bc4:	2300      	moveq	r3, #0
 8007bc6:	b2db      	uxtb	r3, r3
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d00a      	beq.n	8007be2 <cppLoop+0x3ba>
 8007bcc:	488b      	ldr	r0, [pc, #556]	; (8007dfc <cppLoop+0x5d4>)
 8007bce:	f7fc f883 	bl	8003cd8 <_ZN9LineTrace9getMaxAccEv>
 8007bd2:	eef0 7a40 	vmov.f32	s15, s0
 8007bd6:	4b8f      	ldr	r3, [pc, #572]	; (8007e14 <cppLoop+0x5ec>)
 8007bd8:	edc3 7a00 	vstr	s15, [r3]
 8007bdc:	488c      	ldr	r0, [pc, #560]	; (8007e10 <cppLoop+0x5e8>)
 8007bde:	f00c fbd6 	bl	801438e <__cxa_guard_release>
	static float adj_dec = line_trace.getMaxDec();
 8007be2:	4b8d      	ldr	r3, [pc, #564]	; (8007e18 <cppLoop+0x5f0>)
 8007be4:	781b      	ldrb	r3, [r3, #0]
 8007be6:	f3bf 8f5b 	dmb	ish
 8007bea:	b2db      	uxtb	r3, r3
 8007bec:	f003 0301 	and.w	r3, r3, #1
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	bf0c      	ite	eq
 8007bf4:	2301      	moveq	r3, #1
 8007bf6:	2300      	movne	r3, #0
 8007bf8:	b2db      	uxtb	r3, r3
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d015      	beq.n	8007c2a <cppLoop+0x402>
 8007bfe:	4886      	ldr	r0, [pc, #536]	; (8007e18 <cppLoop+0x5f0>)
 8007c00:	f00c fbb9 	bl	8014376 <__cxa_guard_acquire>
 8007c04:	4603      	mov	r3, r0
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	bf14      	ite	ne
 8007c0a:	2301      	movne	r3, #1
 8007c0c:	2300      	moveq	r3, #0
 8007c0e:	b2db      	uxtb	r3, r3
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d00a      	beq.n	8007c2a <cppLoop+0x402>
 8007c14:	4879      	ldr	r0, [pc, #484]	; (8007dfc <cppLoop+0x5d4>)
 8007c16:	f7fc f895 	bl	8003d44 <_ZN9LineTrace9getMaxDecEv>
 8007c1a:	eef0 7a40 	vmov.f32	s15, s0
 8007c1e:	4b7f      	ldr	r3, [pc, #508]	; (8007e1c <cppLoop+0x5f4>)
 8007c20:	edc3 7a00 	vstr	s15, [r3]
 8007c24:	487c      	ldr	r0, [pc, #496]	; (8007e18 <cppLoop+0x5f0>)
 8007c26:	f00c fbb2 	bl	801438e <__cxa_guard_release>
	static float adj_acc2 = line_trace.getMaxAcc2();
 8007c2a:	4b7d      	ldr	r3, [pc, #500]	; (8007e20 <cppLoop+0x5f8>)
 8007c2c:	781b      	ldrb	r3, [r3, #0]
 8007c2e:	f3bf 8f5b 	dmb	ish
 8007c32:	b2db      	uxtb	r3, r3
 8007c34:	f003 0301 	and.w	r3, r3, #1
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	bf0c      	ite	eq
 8007c3c:	2301      	moveq	r3, #1
 8007c3e:	2300      	movne	r3, #0
 8007c40:	b2db      	uxtb	r3, r3
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d015      	beq.n	8007c72 <cppLoop+0x44a>
 8007c46:	4876      	ldr	r0, [pc, #472]	; (8007e20 <cppLoop+0x5f8>)
 8007c48:	f00c fb95 	bl	8014376 <__cxa_guard_acquire>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	bf14      	ite	ne
 8007c52:	2301      	movne	r3, #1
 8007c54:	2300      	moveq	r3, #0
 8007c56:	b2db      	uxtb	r3, r3
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d00a      	beq.n	8007c72 <cppLoop+0x44a>
 8007c5c:	4867      	ldr	r0, [pc, #412]	; (8007dfc <cppLoop+0x5d4>)
 8007c5e:	f7fc f85f 	bl	8003d20 <_ZN9LineTrace10getMaxAcc2Ev>
 8007c62:	eef0 7a40 	vmov.f32	s15, s0
 8007c66:	4b6f      	ldr	r3, [pc, #444]	; (8007e24 <cppLoop+0x5fc>)
 8007c68:	edc3 7a00 	vstr	s15, [r3]
 8007c6c:	486c      	ldr	r0, [pc, #432]	; (8007e20 <cppLoop+0x5f8>)
 8007c6e:	f00c fb8e 	bl	801438e <__cxa_guard_release>
	static float adj_dec2 = line_trace.getMaxDec2();
 8007c72:	4b6d      	ldr	r3, [pc, #436]	; (8007e28 <cppLoop+0x600>)
 8007c74:	781b      	ldrb	r3, [r3, #0]
 8007c76:	f3bf 8f5b 	dmb	ish
 8007c7a:	b2db      	uxtb	r3, r3
 8007c7c:	f003 0301 	and.w	r3, r3, #1
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	bf0c      	ite	eq
 8007c84:	2301      	moveq	r3, #1
 8007c86:	2300      	movne	r3, #0
 8007c88:	b2db      	uxtb	r3, r3
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d015      	beq.n	8007cba <cppLoop+0x492>
 8007c8e:	4866      	ldr	r0, [pc, #408]	; (8007e28 <cppLoop+0x600>)
 8007c90:	f00c fb71 	bl	8014376 <__cxa_guard_acquire>
 8007c94:	4603      	mov	r3, r0
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	bf14      	ite	ne
 8007c9a:	2301      	movne	r3, #1
 8007c9c:	2300      	moveq	r3, #0
 8007c9e:	b2db      	uxtb	r3, r3
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d00a      	beq.n	8007cba <cppLoop+0x492>
 8007ca4:	4855      	ldr	r0, [pc, #340]	; (8007dfc <cppLoop+0x5d4>)
 8007ca6:	f7fc f829 	bl	8003cfc <_ZN9LineTrace10getMaxDec2Ev>
 8007caa:	eef0 7a40 	vmov.f32	s15, s0
 8007cae:	4b5f      	ldr	r3, [pc, #380]	; (8007e2c <cppLoop+0x604>)
 8007cb0:	edc3 7a00 	vstr	s15, [r3]
 8007cb4:	485c      	ldr	r0, [pc, #368]	; (8007e28 <cppLoop+0x600>)
 8007cb6:	f00c fb6a 	bl	801438e <__cxa_guard_release>

	switch(rotary_switch.getValue()){
 8007cba:	485d      	ldr	r0, [pc, #372]	; (8007e30 <cppLoop+0x608>)
 8007cbc:	f7fd face 	bl	800525c <_ZN12RotarySwitch8getValueEv>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	2b0f      	cmp	r3, #15
 8007cc4:	f201 84eb 	bhi.w	800969e <cppLoop+0x1e76>
 8007cc8:	a201      	add	r2, pc, #4	; (adr r2, 8007cd0 <cppLoop+0x4a8>)
 8007cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cce:	bf00      	nop
 8007cd0:	08007d11 	.word	0x08007d11
 8007cd4:	080080fd 	.word	0x080080fd
 8007cd8:	08008191 	.word	0x08008191
 8007cdc:	080082e3 	.word	0x080082e3
 8007ce0:	080083e9 	.word	0x080083e9
 8007ce4:	0800866d 	.word	0x0800866d
 8007ce8:	08008739 	.word	0x08008739
 8007cec:	080089b9 	.word	0x080089b9
 8007cf0:	08008c4d 	.word	0x08008c4d
 8007cf4:	08008ecd 	.word	0x08008ecd
 8007cf8:	08009257 	.word	0x08009257
 8007cfc:	080092f7 	.word	0x080092f7
 8007d00:	08009393 	.word	0x08009393
 8007d04:	0800942d 	.word	0x0800942d
 8007d08:	08009531 	.word	0x08009531
 8007d0c:	080095e9 	.word	0x080095e9
	case 0:
		led.fullColor('W');
 8007d10:	2157      	movs	r1, #87	; 0x57
 8007d12:	4848      	ldr	r0, [pc, #288]	; (8007e34 <cppLoop+0x60c>)
 8007d14:	f7fa f882 	bl	8001e1c <_ZN3LED9fullColorEc>

		lcd_clear();
 8007d18:	f7f9 f9c2 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007d1c:	2100      	movs	r1, #0
 8007d1e:	2000      	movs	r0, #0
 8007d20:	f7f9 f9ce 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf    ", line_trace.getKp()*1000);
 8007d24:	4835      	ldr	r0, [pc, #212]	; (8007dfc <cppLoop+0x5d4>)
 8007d26:	f7fb fea9 	bl	8003a7c <_ZN9LineTrace5getKpEv>
 8007d2a:	eeb0 7a40 	vmov.f32	s14, s0
 8007d2e:	eddf 7a42 	vldr	s15, [pc, #264]	; 8007e38 <cppLoop+0x610>
 8007d32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d36:	ee17 0a90 	vmov	r0, s15
 8007d3a:	f7f8 fc1d 	bl	8000578 <__aeabi_f2d>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	460c      	mov	r4, r1
 8007d42:	461a      	mov	r2, r3
 8007d44:	4623      	mov	r3, r4
 8007d46:	483d      	ldr	r0, [pc, #244]	; (8007e3c <cppLoop+0x614>)
 8007d48:	f7f9 f9e5 	bl	8001116 <lcd_printf>
		lcd_locate(0,1);
 8007d4c:	2101      	movs	r1, #1
 8007d4e:	2000      	movs	r0, #0
 8007d50:	f7f9 f9b6 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", line_trace.getKi()*100, line_trace.getKd()*10000);
 8007d54:	4829      	ldr	r0, [pc, #164]	; (8007dfc <cppLoop+0x5d4>)
 8007d56:	f7fb fea0 	bl	8003a9a <_ZN9LineTrace5getKiEv>
 8007d5a:	eeb0 7a40 	vmov.f32	s14, s0
 8007d5e:	eddf 7a38 	vldr	s15, [pc, #224]	; 8007e40 <cppLoop+0x618>
 8007d62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d66:	ee17 0a90 	vmov	r0, s15
 8007d6a:	f7f8 fc05 	bl	8000578 <__aeabi_f2d>
 8007d6e:	4605      	mov	r5, r0
 8007d70:	460e      	mov	r6, r1
 8007d72:	4822      	ldr	r0, [pc, #136]	; (8007dfc <cppLoop+0x5d4>)
 8007d74:	f7fb fea0 	bl	8003ab8 <_ZN9LineTrace5getKdEv>
 8007d78:	eeb0 7a40 	vmov.f32	s14, s0
 8007d7c:	eddf 7a31 	vldr	s15, [pc, #196]	; 8007e44 <cppLoop+0x61c>
 8007d80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d84:	ee17 0a90 	vmov	r0, s15
 8007d88:	f7f8 fbf6 	bl	8000578 <__aeabi_f2d>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	460c      	mov	r4, r1
 8007d90:	e9cd 3400 	strd	r3, r4, [sp]
 8007d94:	462a      	mov	r2, r5
 8007d96:	4633      	mov	r3, r6
 8007d98:	482b      	ldr	r0, [pc, #172]	; (8007e48 <cppLoop+0x620>)
 8007d9a:	f7f9 f9bc 	bl	8001116 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8007d9e:	482b      	ldr	r0, [pc, #172]	; (8007e4c <cppLoop+0x624>)
 8007da0:	f7f9 ffd8 	bl	8001d54 <_ZN8JoyStick8getValueEv>
 8007da4:	4603      	mov	r3, r0
 8007da6:	2b08      	cmp	r3, #8
 8007da8:	bf0c      	ite	eq
 8007daa:	2301      	moveq	r3, #1
 8007dac:	2300      	movne	r3, #0
 8007dae:	b2db      	uxtb	r3, r3
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d04f      	beq.n	8007e54 <cppLoop+0x62c>
			led.LR(-1, 1);
 8007db4:	2201      	movs	r2, #1
 8007db6:	f04f 31ff 	mov.w	r1, #4294967295
 8007dba:	481e      	ldr	r0, [pc, #120]	; (8007e34 <cppLoop+0x60c>)
 8007dbc:	f7fa f8ea 	bl	8001f94 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8007dc0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007dc4:	f001 fdae 	bl	8009924 <HAL_Delay>

			selector++;
 8007dc8:	4b21      	ldr	r3, [pc, #132]	; (8007e50 <cppLoop+0x628>)
 8007dca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007dce:	b29b      	uxth	r3, r3
 8007dd0:	3301      	adds	r3, #1
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	b21a      	sxth	r2, r3
 8007dd6:	4b1e      	ldr	r3, [pc, #120]	; (8007e50 <cppLoop+0x628>)
 8007dd8:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 8007dda:	4b1d      	ldr	r3, [pc, #116]	; (8007e50 <cppLoop+0x628>)
 8007ddc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007de0:	2b02      	cmp	r3, #2
 8007de2:	dd02      	ble.n	8007dea <cppLoop+0x5c2>
 8007de4:	4b1a      	ldr	r3, [pc, #104]	; (8007e50 <cppLoop+0x628>)
 8007de6:	2200      	movs	r2, #0
 8007de8:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8007dea:	2200      	movs	r2, #0
 8007dec:	f04f 31ff 	mov.w	r1, #4294967295
 8007df0:	4810      	ldr	r0, [pc, #64]	; (8007e34 <cppLoop+0x60c>)
 8007df2:	f7fa f8cf 	bl	8001f94 <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
			line_trace.setGain(adj_kp, adj_ki, adj_kd);

			led.LR(-1, 0);
		}
		break;
 8007df6:	f001 bc54 	b.w	80096a2 <cppLoop+0x1e7a>
 8007dfa:	bf00      	nop
 8007dfc:	20017dd0 	.word	0x20017dd0
 8007e00:	2003d4a8 	.word	0x2003d4a8
 8007e04:	2003d4ac 	.word	0x2003d4ac
 8007e08:	2003d4b4 	.word	0x2003d4b4
 8007e0c:	2003d4b0 	.word	0x2003d4b0
 8007e10:	2003d4bc 	.word	0x2003d4bc
 8007e14:	2003d4b8 	.word	0x2003d4b8
 8007e18:	2003d4c4 	.word	0x2003d4c4
 8007e1c:	2003d4c0 	.word	0x2003d4c0
 8007e20:	2003d4cc 	.word	0x2003d4cc
 8007e24:	2003d4c8 	.word	0x2003d4c8
 8007e28:	2003d4d4 	.word	0x2003d4d4
 8007e2c:	2003d4d0 	.word	0x2003d4d0
 8007e30:	200005f8 	.word	0x200005f8
 8007e34:	20000600 	.word	0x20000600
 8007e38:	447a0000 	.word	0x447a0000
 8007e3c:	0801a0cc 	.word	0x0801a0cc
 8007e40:	42c80000 	.word	0x42c80000
 8007e44:	461c4000 	.word	0x461c4000
 8007e48:	0801a0d8 	.word	0x0801a0d8
 8007e4c:	200005f4 	.word	0x200005f4
 8007e50:	2003d454 	.word	0x2003d454
		else if(joy_stick.getValue() == JOY_R){
 8007e54:	489e      	ldr	r0, [pc, #632]	; (80080d0 <cppLoop+0x8a8>)
 8007e56:	f7f9 ff7d 	bl	8001d54 <_ZN8JoyStick8getValueEv>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	2b10      	cmp	r3, #16
 8007e5e:	bf0c      	ite	eq
 8007e60:	2301      	moveq	r3, #1
 8007e62:	2300      	movne	r3, #0
 8007e64:	b2db      	uxtb	r3, r3
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d059      	beq.n	8007f1e <cppLoop+0x6f6>
			led.LR(-1, 1);
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	f04f 31ff 	mov.w	r1, #4294967295
 8007e70:	4898      	ldr	r0, [pc, #608]	; (80080d4 <cppLoop+0x8ac>)
 8007e72:	f7fa f88f 	bl	8001f94 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007e76:	2064      	movs	r0, #100	; 0x64
 8007e78:	f001 fd54 	bl	8009924 <HAL_Delay>
			if(selector == 0){
 8007e7c:	4b96      	ldr	r3, [pc, #600]	; (80080d8 <cppLoop+0x8b0>)
 8007e7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d113      	bne.n	8007eae <cppLoop+0x686>
				adj_kp = adj_kp + 0.00001;
 8007e86:	4b95      	ldr	r3, [pc, #596]	; (80080dc <cppLoop+0x8b4>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f7f8 fb74 	bl	8000578 <__aeabi_f2d>
 8007e90:	a389      	add	r3, pc, #548	; (adr r3, 80080b8 <cppLoop+0x890>)
 8007e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e96:	f7f8 fa11 	bl	80002bc <__adddf3>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	460c      	mov	r4, r1
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	4621      	mov	r1, r4
 8007ea2:	f7f8 feb9 	bl	8000c18 <__aeabi_d2f>
 8007ea6:	4602      	mov	r2, r0
 8007ea8:	4b8c      	ldr	r3, [pc, #560]	; (80080dc <cppLoop+0x8b4>)
 8007eaa:	601a      	str	r2, [r3, #0]
 8007eac:	e02b      	b.n	8007f06 <cppLoop+0x6de>
			else if(selector == 1){
 8007eae:	4b8a      	ldr	r3, [pc, #552]	; (80080d8 <cppLoop+0x8b0>)
 8007eb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007eb4:	2b01      	cmp	r3, #1
 8007eb6:	d113      	bne.n	8007ee0 <cppLoop+0x6b8>
				adj_ki = adj_ki + 0.0001;
 8007eb8:	4b89      	ldr	r3, [pc, #548]	; (80080e0 <cppLoop+0x8b8>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f7f8 fb5b 	bl	8000578 <__aeabi_f2d>
 8007ec2:	a37f      	add	r3, pc, #508	; (adr r3, 80080c0 <cppLoop+0x898>)
 8007ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ec8:	f7f8 f9f8 	bl	80002bc <__adddf3>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	460c      	mov	r4, r1
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	4621      	mov	r1, r4
 8007ed4:	f7f8 fea0 	bl	8000c18 <__aeabi_d2f>
 8007ed8:	4602      	mov	r2, r0
 8007eda:	4b81      	ldr	r3, [pc, #516]	; (80080e0 <cppLoop+0x8b8>)
 8007edc:	601a      	str	r2, [r3, #0]
 8007ede:	e012      	b.n	8007f06 <cppLoop+0x6de>
				adj_kd = adj_kd + 0.000001;
 8007ee0:	4b80      	ldr	r3, [pc, #512]	; (80080e4 <cppLoop+0x8bc>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	f7f8 fb47 	bl	8000578 <__aeabi_f2d>
 8007eea:	a377      	add	r3, pc, #476	; (adr r3, 80080c8 <cppLoop+0x8a0>)
 8007eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef0:	f7f8 f9e4 	bl	80002bc <__adddf3>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	460c      	mov	r4, r1
 8007ef8:	4618      	mov	r0, r3
 8007efa:	4621      	mov	r1, r4
 8007efc:	f7f8 fe8c 	bl	8000c18 <__aeabi_d2f>
 8007f00:	4602      	mov	r2, r0
 8007f02:	4b78      	ldr	r3, [pc, #480]	; (80080e4 <cppLoop+0x8bc>)
 8007f04:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8007f06:	2152      	movs	r1, #82	; 0x52
 8007f08:	4872      	ldr	r0, [pc, #456]	; (80080d4 <cppLoop+0x8ac>)
 8007f0a:	f7f9 ff87 	bl	8001e1c <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8007f0e:	2200      	movs	r2, #0
 8007f10:	f04f 31ff 	mov.w	r1, #4294967295
 8007f14:	486f      	ldr	r0, [pc, #444]	; (80080d4 <cppLoop+0x8ac>)
 8007f16:	f7fa f83d 	bl	8001f94 <_ZN3LED2LREaa>
		break;
 8007f1a:	f001 bbc2 	b.w	80096a2 <cppLoop+0x1e7a>
		else if(joy_stick.getValue() == JOY_L){
 8007f1e:	486c      	ldr	r0, [pc, #432]	; (80080d0 <cppLoop+0x8a8>)
 8007f20:	f7f9 ff18 	bl	8001d54 <_ZN8JoyStick8getValueEv>
 8007f24:	4603      	mov	r3, r0
 8007f26:	2b01      	cmp	r3, #1
 8007f28:	bf0c      	ite	eq
 8007f2a:	2301      	moveq	r3, #1
 8007f2c:	2300      	movne	r3, #0
 8007f2e:	b2db      	uxtb	r3, r3
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d059      	beq.n	8007fe8 <cppLoop+0x7c0>
			led.LR(-1, 1);
 8007f34:	2201      	movs	r2, #1
 8007f36:	f04f 31ff 	mov.w	r1, #4294967295
 8007f3a:	4866      	ldr	r0, [pc, #408]	; (80080d4 <cppLoop+0x8ac>)
 8007f3c:	f7fa f82a 	bl	8001f94 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007f40:	2064      	movs	r0, #100	; 0x64
 8007f42:	f001 fcef 	bl	8009924 <HAL_Delay>
			if(selector == 0){
 8007f46:	4b64      	ldr	r3, [pc, #400]	; (80080d8 <cppLoop+0x8b0>)
 8007f48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d113      	bne.n	8007f78 <cppLoop+0x750>
				adj_kp = adj_kp - 0.00001;
 8007f50:	4b62      	ldr	r3, [pc, #392]	; (80080dc <cppLoop+0x8b4>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	4618      	mov	r0, r3
 8007f56:	f7f8 fb0f 	bl	8000578 <__aeabi_f2d>
 8007f5a:	a357      	add	r3, pc, #348	; (adr r3, 80080b8 <cppLoop+0x890>)
 8007f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f60:	f7f8 f9aa 	bl	80002b8 <__aeabi_dsub>
 8007f64:	4603      	mov	r3, r0
 8007f66:	460c      	mov	r4, r1
 8007f68:	4618      	mov	r0, r3
 8007f6a:	4621      	mov	r1, r4
 8007f6c:	f7f8 fe54 	bl	8000c18 <__aeabi_d2f>
 8007f70:	4602      	mov	r2, r0
 8007f72:	4b5a      	ldr	r3, [pc, #360]	; (80080dc <cppLoop+0x8b4>)
 8007f74:	601a      	str	r2, [r3, #0]
 8007f76:	e02b      	b.n	8007fd0 <cppLoop+0x7a8>
			else if(selector == 1){
 8007f78:	4b57      	ldr	r3, [pc, #348]	; (80080d8 <cppLoop+0x8b0>)
 8007f7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007f7e:	2b01      	cmp	r3, #1
 8007f80:	d113      	bne.n	8007faa <cppLoop+0x782>
				adj_ki = adj_ki - 0.0001;
 8007f82:	4b57      	ldr	r3, [pc, #348]	; (80080e0 <cppLoop+0x8b8>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4618      	mov	r0, r3
 8007f88:	f7f8 faf6 	bl	8000578 <__aeabi_f2d>
 8007f8c:	a34c      	add	r3, pc, #304	; (adr r3, 80080c0 <cppLoop+0x898>)
 8007f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f92:	f7f8 f991 	bl	80002b8 <__aeabi_dsub>
 8007f96:	4603      	mov	r3, r0
 8007f98:	460c      	mov	r4, r1
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	4621      	mov	r1, r4
 8007f9e:	f7f8 fe3b 	bl	8000c18 <__aeabi_d2f>
 8007fa2:	4602      	mov	r2, r0
 8007fa4:	4b4e      	ldr	r3, [pc, #312]	; (80080e0 <cppLoop+0x8b8>)
 8007fa6:	601a      	str	r2, [r3, #0]
 8007fa8:	e012      	b.n	8007fd0 <cppLoop+0x7a8>
				adj_kd = adj_kd - 0.000001;
 8007faa:	4b4e      	ldr	r3, [pc, #312]	; (80080e4 <cppLoop+0x8bc>)
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f7f8 fae2 	bl	8000578 <__aeabi_f2d>
 8007fb4:	a344      	add	r3, pc, #272	; (adr r3, 80080c8 <cppLoop+0x8a0>)
 8007fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fba:	f7f8 f97d 	bl	80002b8 <__aeabi_dsub>
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	460c      	mov	r4, r1
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	4621      	mov	r1, r4
 8007fc6:	f7f8 fe27 	bl	8000c18 <__aeabi_d2f>
 8007fca:	4602      	mov	r2, r0
 8007fcc:	4b45      	ldr	r3, [pc, #276]	; (80080e4 <cppLoop+0x8bc>)
 8007fce:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8007fd0:	2152      	movs	r1, #82	; 0x52
 8007fd2:	4840      	ldr	r0, [pc, #256]	; (80080d4 <cppLoop+0x8ac>)
 8007fd4:	f7f9 ff22 	bl	8001e1c <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8007fd8:	2200      	movs	r2, #0
 8007fda:	f04f 31ff 	mov.w	r1, #4294967295
 8007fde:	483d      	ldr	r0, [pc, #244]	; (80080d4 <cppLoop+0x8ac>)
 8007fe0:	f7f9 ffd8 	bl	8001f94 <_ZN3LED2LREaa>
		break;
 8007fe4:	f001 bb5d 	b.w	80096a2 <cppLoop+0x1e7a>
		else if(joy_stick.getValue() == JOY_D){
 8007fe8:	4839      	ldr	r0, [pc, #228]	; (80080d0 <cppLoop+0x8a8>)
 8007fea:	f7f9 feb3 	bl	8001d54 <_ZN8JoyStick8getValueEv>
 8007fee:	4603      	mov	r3, r0
 8007ff0:	2b04      	cmp	r3, #4
 8007ff2:	bf0c      	ite	eq
 8007ff4:	2301      	moveq	r3, #1
 8007ff6:	2300      	movne	r3, #0
 8007ff8:	b2db      	uxtb	r3, r3
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d011      	beq.n	8008022 <cppLoop+0x7fa>
			led.LR(-1, 1);
 8007ffe:	2201      	movs	r2, #1
 8008000:	f04f 31ff 	mov.w	r1, #4294967295
 8008004:	4833      	ldr	r0, [pc, #204]	; (80080d4 <cppLoop+0x8ac>)
 8008006:	f7f9 ffc5 	bl	8001f94 <_ZN3LED2LREaa>
			HAL_Delay(300);
 800800a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800800e:	f001 fc89 	bl	8009924 <HAL_Delay>
			led.LR(-1, 0);
 8008012:	2200      	movs	r2, #0
 8008014:	f04f 31ff 	mov.w	r1, #4294967295
 8008018:	482e      	ldr	r0, [pc, #184]	; (80080d4 <cppLoop+0x8ac>)
 800801a:	f7f9 ffbb 	bl	8001f94 <_ZN3LED2LREaa>
		break;
 800801e:	f001 bb40 	b.w	80096a2 <cppLoop+0x1e7a>
		else if(joy_stick.getValue() == JOY_C){
 8008022:	482b      	ldr	r0, [pc, #172]	; (80080d0 <cppLoop+0x8a8>)
 8008024:	f7f9 fe96 	bl	8001d54 <_ZN8JoyStick8getValueEv>
 8008028:	4603      	mov	r3, r0
 800802a:	2b02      	cmp	r3, #2
 800802c:	bf0c      	ite	eq
 800802e:	2301      	moveq	r3, #1
 8008030:	2300      	movne	r3, #0
 8008032:	b2db      	uxtb	r3, r3
 8008034:	2b00      	cmp	r3, #0
 8008036:	f001 8334 	beq.w	80096a2 <cppLoop+0x1e7a>
			led.LR(-1, 1);
 800803a:	2201      	movs	r2, #1
 800803c:	f04f 31ff 	mov.w	r1, #4294967295
 8008040:	4824      	ldr	r0, [pc, #144]	; (80080d4 <cppLoop+0x8ac>)
 8008042:	f7f9 ffa7 	bl	8001f94 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008046:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800804a:	f001 fc6b 	bl	8009924 <HAL_Delay>
			sd_write_array_float("PARAMS", "KP.TXT", 1, &adj_kp, OVER_WRITE);
 800804e:	2300      	movs	r3, #0
 8008050:	9300      	str	r3, [sp, #0]
 8008052:	4b22      	ldr	r3, [pc, #136]	; (80080dc <cppLoop+0x8b4>)
 8008054:	2201      	movs	r2, #1
 8008056:	4924      	ldr	r1, [pc, #144]	; (80080e8 <cppLoop+0x8c0>)
 8008058:	4824      	ldr	r0, [pc, #144]	; (80080ec <cppLoop+0x8c4>)
 800805a:	f7f9 fa5f 	bl	800151c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KI.TXT", 1, &adj_ki, OVER_WRITE);
 800805e:	2300      	movs	r3, #0
 8008060:	9300      	str	r3, [sp, #0]
 8008062:	4b1f      	ldr	r3, [pc, #124]	; (80080e0 <cppLoop+0x8b8>)
 8008064:	2201      	movs	r2, #1
 8008066:	4922      	ldr	r1, [pc, #136]	; (80080f0 <cppLoop+0x8c8>)
 8008068:	4820      	ldr	r0, [pc, #128]	; (80080ec <cppLoop+0x8c4>)
 800806a:	f7f9 fa57 	bl	800151c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
 800806e:	2300      	movs	r3, #0
 8008070:	9300      	str	r3, [sp, #0]
 8008072:	4b1c      	ldr	r3, [pc, #112]	; (80080e4 <cppLoop+0x8bc>)
 8008074:	2201      	movs	r2, #1
 8008076:	491f      	ldr	r1, [pc, #124]	; (80080f4 <cppLoop+0x8cc>)
 8008078:	481c      	ldr	r0, [pc, #112]	; (80080ec <cppLoop+0x8c4>)
 800807a:	f7f9 fa4f 	bl	800151c <sd_write_array_float>
			line_trace.setGain(adj_kp, adj_ki, adj_kd);
 800807e:	4b17      	ldr	r3, [pc, #92]	; (80080dc <cppLoop+0x8b4>)
 8008080:	edd3 7a00 	vldr	s15, [r3]
 8008084:	4b16      	ldr	r3, [pc, #88]	; (80080e0 <cppLoop+0x8b8>)
 8008086:	ed93 7a00 	vldr	s14, [r3]
 800808a:	4b16      	ldr	r3, [pc, #88]	; (80080e4 <cppLoop+0x8bc>)
 800808c:	edd3 6a00 	vldr	s13, [r3]
 8008090:	eeb0 1a66 	vmov.f32	s2, s13
 8008094:	eef0 0a47 	vmov.f32	s1, s14
 8008098:	eeb0 0a67 	vmov.f32	s0, s15
 800809c:	4816      	ldr	r0, [pc, #88]	; (80080f8 <cppLoop+0x8d0>)
 800809e:	f7fb fcbb 	bl	8003a18 <_ZN9LineTrace7setGainEfff>
			led.LR(-1, 0);
 80080a2:	2200      	movs	r2, #0
 80080a4:	f04f 31ff 	mov.w	r1, #4294967295
 80080a8:	480a      	ldr	r0, [pc, #40]	; (80080d4 <cppLoop+0x8ac>)
 80080aa:	f7f9 ff73 	bl	8001f94 <_ZN3LED2LREaa>
		break;
 80080ae:	f001 baf8 	b.w	80096a2 <cppLoop+0x1e7a>
 80080b2:	bf00      	nop
 80080b4:	f3af 8000 	nop.w
 80080b8:	88e368f1 	.word	0x88e368f1
 80080bc:	3ee4f8b5 	.word	0x3ee4f8b5
 80080c0:	eb1c432d 	.word	0xeb1c432d
 80080c4:	3f1a36e2 	.word	0x3f1a36e2
 80080c8:	a0b5ed8d 	.word	0xa0b5ed8d
 80080cc:	3eb0c6f7 	.word	0x3eb0c6f7
 80080d0:	200005f4 	.word	0x200005f4
 80080d4:	20000600 	.word	0x20000600
 80080d8:	2003d454 	.word	0x2003d454
 80080dc:	2003d460 	.word	0x2003d460
 80080e0:	2003d468 	.word	0x2003d468
 80080e4:	2003d470 	.word	0x2003d470
 80080e8:	0801a0e8 	.word	0x0801a0e8
 80080ec:	0801a0f0 	.word	0x0801a0f0
 80080f0:	0801a0f8 	.word	0x0801a0f8
 80080f4:	0801a100 	.word	0x0801a100
 80080f8:	20017dd0 	.word	0x20017dd0

	case 1:
		led.fullColor('C');
 80080fc:	2143      	movs	r1, #67	; 0x43
 80080fe:	48ae      	ldr	r0, [pc, #696]	; (80083b8 <cppLoop+0xb90>)
 8008100:	f7f9 fe8c 	bl	8001e1c <_ZN3LED9fullColorEc>

		lcd_clear();
 8008104:	f7f8 ffcc 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008108:	2100      	movs	r1, #0
 800810a:	2000      	movs	r0, #0
 800810c:	f7f8 ffd8 	bl	80010c0 <lcd_locate>
		lcd_printf("FirstRun");
 8008110:	48aa      	ldr	r0, [pc, #680]	; (80083bc <cppLoop+0xb94>)
 8008112:	f7f9 f800 	bl	8001116 <lcd_printf>
		lcd_locate(0,1);
 8008116:	2101      	movs	r1, #1
 8008118:	2000      	movs	r0, #0
 800811a:	f7f8 ffd1 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_velocity);
 800811e:	4ba8      	ldr	r3, [pc, #672]	; (80083c0 <cppLoop+0xb98>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	4618      	mov	r0, r3
 8008124:	f7f8 fa28 	bl	8000578 <__aeabi_f2d>
 8008128:	4603      	mov	r3, r0
 800812a:	460c      	mov	r4, r1
 800812c:	461a      	mov	r2, r3
 800812e:	4623      	mov	r3, r4
 8008130:	48a4      	ldr	r0, [pc, #656]	; (80083c4 <cppLoop+0xb9c>)
 8008132:	f7f8 fff0 	bl	8001116 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8008136:	48a4      	ldr	r0, [pc, #656]	; (80083c8 <cppLoop+0xba0>)
 8008138:	f7f9 fe0c 	bl	8001d54 <_ZN8JoyStick8getValueEv>
 800813c:	4603      	mov	r3, r0
 800813e:	2b02      	cmp	r3, #2
 8008140:	bf0c      	ite	eq
 8008142:	2301      	moveq	r3, #1
 8008144:	2300      	movne	r3, #0
 8008146:	b2db      	uxtb	r3, r3
 8008148:	2b00      	cmp	r3, #0
 800814a:	f001 82ac 	beq.w	80096a6 <cppLoop+0x1e7e>
			HAL_Delay(500);
 800814e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008152:	f001 fbe7 	bl	8009924 <HAL_Delay>

			line_trace.setTargetVelocity(adj_velocity);
 8008156:	4b9a      	ldr	r3, [pc, #616]	; (80083c0 <cppLoop+0xb98>)
 8008158:	edd3 7a00 	vldr	s15, [r3]
 800815c:	eeb0 0a67 	vmov.f32	s0, s15
 8008160:	489a      	ldr	r0, [pc, #616]	; (80083cc <cppLoop+0xba4>)
 8008162:	f7fb fce5 	bl	8003b30 <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(1, -1);
 8008166:	f04f 32ff 	mov.w	r2, #4294967295
 800816a:	2101      	movs	r1, #1
 800816c:	4892      	ldr	r0, [pc, #584]	; (80083b8 <cppLoop+0xb90>)
 800816e:	f7f9 ff11 	bl	8001f94 <_ZN3LED2LREaa>

			line_trace.setMode(FIRST_RUNNING);
 8008172:	2100      	movs	r1, #0
 8008174:	4895      	ldr	r0, [pc, #596]	; (80083cc <cppLoop+0xba4>)
 8008176:	f7fc f8ed 	bl	8004354 <_ZN9LineTrace7setModeEs>
			line_trace.running();
 800817a:	4894      	ldr	r0, [pc, #592]	; (80083cc <cppLoop+0xba4>)
 800817c:	f7fb ffec 	bl	8004158 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 8008180:	f04f 32ff 	mov.w	r2, #4294967295
 8008184:	2100      	movs	r1, #0
 8008186:	488c      	ldr	r0, [pc, #560]	; (80083b8 <cppLoop+0xb90>)
 8008188:	f7f9 ff04 	bl	8001f94 <_ZN3LED2LREaa>
		}

		break;
 800818c:	f001 ba8b 	b.w	80096a6 <cppLoop+0x1e7e>

	case 2:
		led.fullColor('B');
 8008190:	2142      	movs	r1, #66	; 0x42
 8008192:	4889      	ldr	r0, [pc, #548]	; (80083b8 <cppLoop+0xb90>)
 8008194:	f7f9 fe42 	bl	8001e1c <_ZN3LED9fullColorEc>

		lcd_clear();
 8008198:	f7f8 ff82 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800819c:	2100      	movs	r1, #0
 800819e:	2000      	movs	r0, #0
 80081a0:	f7f8 ff8e 	bl	80010c0 <lcd_locate>
		lcd_printf("FirstRun");
 80081a4:	4885      	ldr	r0, [pc, #532]	; (80083bc <cppLoop+0xb94>)
 80081a6:	f7f8 ffb6 	bl	8001116 <lcd_printf>
		lcd_locate(0,1);
 80081aa:	2101      	movs	r1, #1
 80081ac:	2000      	movs	r0, #0
 80081ae:	f7f8 ff87 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", adj_velocity);
 80081b2:	4b83      	ldr	r3, [pc, #524]	; (80083c0 <cppLoop+0xb98>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	4618      	mov	r0, r3
 80081b8:	f7f8 f9de 	bl	8000578 <__aeabi_f2d>
 80081bc:	4603      	mov	r3, r0
 80081be:	460c      	mov	r4, r1
 80081c0:	461a      	mov	r2, r3
 80081c2:	4623      	mov	r3, r4
 80081c4:	4882      	ldr	r0, [pc, #520]	; (80083d0 <cppLoop+0xba8>)
 80081c6:	f7f8 ffa6 	bl	8001116 <lcd_printf>


		if(joy_stick.getValue() == JOY_R){
 80081ca:	487f      	ldr	r0, [pc, #508]	; (80083c8 <cppLoop+0xba0>)
 80081cc:	f7f9 fdc2 	bl	8001d54 <_ZN8JoyStick8getValueEv>
 80081d0:	4603      	mov	r3, r0
 80081d2:	2b10      	cmp	r3, #16
 80081d4:	bf0c      	ite	eq
 80081d6:	2301      	moveq	r3, #1
 80081d8:	2300      	movne	r3, #0
 80081da:	b2db      	uxtb	r3, r3
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d023      	beq.n	8008228 <cppLoop+0xa00>
			led.LR(-1, 1);
 80081e0:	2201      	movs	r2, #1
 80081e2:	f04f 31ff 	mov.w	r1, #4294967295
 80081e6:	4874      	ldr	r0, [pc, #464]	; (80083b8 <cppLoop+0xb90>)
 80081e8:	f7f9 fed4 	bl	8001f94 <_ZN3LED2LREaa>
			HAL_Delay(100);
 80081ec:	2064      	movs	r0, #100	; 0x64
 80081ee:	f001 fb99 	bl	8009924 <HAL_Delay>

			adj_velocity = adj_velocity + 0.1;
 80081f2:	4b73      	ldr	r3, [pc, #460]	; (80083c0 <cppLoop+0xb98>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4618      	mov	r0, r3
 80081f8:	f7f8 f9be 	bl	8000578 <__aeabi_f2d>
 80081fc:	a36c      	add	r3, pc, #432	; (adr r3, 80083b0 <cppLoop+0xb88>)
 80081fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008202:	f7f8 f85b 	bl	80002bc <__adddf3>
 8008206:	4603      	mov	r3, r0
 8008208:	460c      	mov	r4, r1
 800820a:	4618      	mov	r0, r3
 800820c:	4621      	mov	r1, r4
 800820e:	f7f8 fd03 	bl	8000c18 <__aeabi_d2f>
 8008212:	4602      	mov	r2, r0
 8008214:	4b6a      	ldr	r3, [pc, #424]	; (80083c0 <cppLoop+0xb98>)
 8008216:	601a      	str	r2, [r3, #0]

			led.LR(-1, 0);
 8008218:	2200      	movs	r2, #0
 800821a:	f04f 31ff 	mov.w	r1, #4294967295
 800821e:	4866      	ldr	r0, [pc, #408]	; (80083b8 <cppLoop+0xb90>)
 8008220:	f7f9 feb8 	bl	8001f94 <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "TARVEL1.TXT", 1, &adj_velocity, OVER_WRITE);
			line_trace.setTargetVelocity(adj_velocity);

			led.LR(-1, 0);
		}
		break;
 8008224:	f001 ba41 	b.w	80096aa <cppLoop+0x1e82>
		else if(joy_stick.getValue() == JOY_L){
 8008228:	4867      	ldr	r0, [pc, #412]	; (80083c8 <cppLoop+0xba0>)
 800822a:	f7f9 fd93 	bl	8001d54 <_ZN8JoyStick8getValueEv>
 800822e:	4603      	mov	r3, r0
 8008230:	2b01      	cmp	r3, #1
 8008232:	bf0c      	ite	eq
 8008234:	2301      	moveq	r3, #1
 8008236:	2300      	movne	r3, #0
 8008238:	b2db      	uxtb	r3, r3
 800823a:	2b00      	cmp	r3, #0
 800823c:	d023      	beq.n	8008286 <cppLoop+0xa5e>
			led.LR(-1, 1);
 800823e:	2201      	movs	r2, #1
 8008240:	f04f 31ff 	mov.w	r1, #4294967295
 8008244:	485c      	ldr	r0, [pc, #368]	; (80083b8 <cppLoop+0xb90>)
 8008246:	f7f9 fea5 	bl	8001f94 <_ZN3LED2LREaa>
			HAL_Delay(100);
 800824a:	2064      	movs	r0, #100	; 0x64
 800824c:	f001 fb6a 	bl	8009924 <HAL_Delay>
			adj_velocity = adj_velocity - 0.1;
 8008250:	4b5b      	ldr	r3, [pc, #364]	; (80083c0 <cppLoop+0xb98>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	4618      	mov	r0, r3
 8008256:	f7f8 f98f 	bl	8000578 <__aeabi_f2d>
 800825a:	a355      	add	r3, pc, #340	; (adr r3, 80083b0 <cppLoop+0xb88>)
 800825c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008260:	f7f8 f82a 	bl	80002b8 <__aeabi_dsub>
 8008264:	4603      	mov	r3, r0
 8008266:	460c      	mov	r4, r1
 8008268:	4618      	mov	r0, r3
 800826a:	4621      	mov	r1, r4
 800826c:	f7f8 fcd4 	bl	8000c18 <__aeabi_d2f>
 8008270:	4602      	mov	r2, r0
 8008272:	4b53      	ldr	r3, [pc, #332]	; (80083c0 <cppLoop+0xb98>)
 8008274:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008276:	2200      	movs	r2, #0
 8008278:	f04f 31ff 	mov.w	r1, #4294967295
 800827c:	484e      	ldr	r0, [pc, #312]	; (80083b8 <cppLoop+0xb90>)
 800827e:	f7f9 fe89 	bl	8001f94 <_ZN3LED2LREaa>
		break;
 8008282:	f001 ba12 	b.w	80096aa <cppLoop+0x1e82>
		else if(joy_stick.getValue() == JOY_C){
 8008286:	4850      	ldr	r0, [pc, #320]	; (80083c8 <cppLoop+0xba0>)
 8008288:	f7f9 fd64 	bl	8001d54 <_ZN8JoyStick8getValueEv>
 800828c:	4603      	mov	r3, r0
 800828e:	2b02      	cmp	r3, #2
 8008290:	bf0c      	ite	eq
 8008292:	2301      	moveq	r3, #1
 8008294:	2300      	movne	r3, #0
 8008296:	b2db      	uxtb	r3, r3
 8008298:	2b00      	cmp	r3, #0
 800829a:	f001 8206 	beq.w	80096aa <cppLoop+0x1e82>
			led.LR(-1, 1);
 800829e:	2201      	movs	r2, #1
 80082a0:	f04f 31ff 	mov.w	r1, #4294967295
 80082a4:	4844      	ldr	r0, [pc, #272]	; (80083b8 <cppLoop+0xb90>)
 80082a6:	f7f9 fe75 	bl	8001f94 <_ZN3LED2LREaa>
			HAL_Delay(300);
 80082aa:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80082ae:	f001 fb39 	bl	8009924 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL1.TXT", 1, &adj_velocity, OVER_WRITE);
 80082b2:	2300      	movs	r3, #0
 80082b4:	9300      	str	r3, [sp, #0]
 80082b6:	4b42      	ldr	r3, [pc, #264]	; (80083c0 <cppLoop+0xb98>)
 80082b8:	2201      	movs	r2, #1
 80082ba:	4946      	ldr	r1, [pc, #280]	; (80083d4 <cppLoop+0xbac>)
 80082bc:	4846      	ldr	r0, [pc, #280]	; (80083d8 <cppLoop+0xbb0>)
 80082be:	f7f9 f92d 	bl	800151c <sd_write_array_float>
			line_trace.setTargetVelocity(adj_velocity);
 80082c2:	4b3f      	ldr	r3, [pc, #252]	; (80083c0 <cppLoop+0xb98>)
 80082c4:	edd3 7a00 	vldr	s15, [r3]
 80082c8:	eeb0 0a67 	vmov.f32	s0, s15
 80082cc:	483f      	ldr	r0, [pc, #252]	; (80083cc <cppLoop+0xba4>)
 80082ce:	f7fb fc2f 	bl	8003b30 <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(-1, 0);
 80082d2:	2200      	movs	r2, #0
 80082d4:	f04f 31ff 	mov.w	r1, #4294967295
 80082d8:	4837      	ldr	r0, [pc, #220]	; (80083b8 <cppLoop+0xb90>)
 80082da:	f7f9 fe5b 	bl	8001f94 <_ZN3LED2LREaa>
		break;
 80082de:	f001 b9e4 	b.w	80096aa <cppLoop+0x1e82>

	case 3:
		led.fullColor('Y');
 80082e2:	2159      	movs	r1, #89	; 0x59
 80082e4:	4834      	ldr	r0, [pc, #208]	; (80083b8 <cppLoop+0xb90>)
 80082e6:	f7f9 fd99 	bl	8001e1c <_ZN3LED9fullColorEc>

		lcd_clear();
 80082ea:	f7f8 fed9 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80082ee:	2100      	movs	r1, #0
 80082f0:	2000      	movs	r0, #0
 80082f2:	f7f8 fee5 	bl	80010c0 <lcd_locate>
		lcd_printf("2:   %3.1f", adj_max_velocity);
 80082f6:	4b39      	ldr	r3, [pc, #228]	; (80083dc <cppLoop+0xbb4>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4618      	mov	r0, r3
 80082fc:	f7f8 f93c 	bl	8000578 <__aeabi_f2d>
 8008300:	4603      	mov	r3, r0
 8008302:	460c      	mov	r4, r1
 8008304:	461a      	mov	r2, r3
 8008306:	4623      	mov	r3, r4
 8008308:	4835      	ldr	r0, [pc, #212]	; (80083e0 <cppLoop+0xbb8>)
 800830a:	f7f8 ff04 	bl	8001116 <lcd_printf>
		lcd_locate(0,1);
 800830e:	2101      	movs	r1, #1
 8008310:	2000      	movs	r0, #0
 8008312:	f7f8 fed5 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_min_velocity);
 8008316:	4b33      	ldr	r3, [pc, #204]	; (80083e4 <cppLoop+0xbbc>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	4618      	mov	r0, r3
 800831c:	f7f8 f92c 	bl	8000578 <__aeabi_f2d>
 8008320:	4603      	mov	r3, r0
 8008322:	460c      	mov	r4, r1
 8008324:	461a      	mov	r2, r3
 8008326:	4623      	mov	r3, r4
 8008328:	4826      	ldr	r0, [pc, #152]	; (80083c4 <cppLoop+0xb9c>)
 800832a:	f7f8 fef4 	bl	8001116 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800832e:	4826      	ldr	r0, [pc, #152]	; (80083c8 <cppLoop+0xba0>)
 8008330:	f7f9 fd10 	bl	8001d54 <_ZN8JoyStick8getValueEv>
 8008334:	4603      	mov	r3, r0
 8008336:	2b02      	cmp	r3, #2
 8008338:	bf0c      	ite	eq
 800833a:	2301      	moveq	r3, #1
 800833c:	2300      	movne	r3, #0
 800833e:	b2db      	uxtb	r3, r3
 8008340:	2b00      	cmp	r3, #0
 8008342:	f001 81b4 	beq.w	80096ae <cppLoop+0x1e86>
			HAL_Delay(500);
 8008346:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800834a:	f001 faeb 	bl	8009924 <HAL_Delay>

			led.LR(1, -1);
 800834e:	f04f 32ff 	mov.w	r2, #4294967295
 8008352:	2101      	movs	r1, #1
 8008354:	4818      	ldr	r0, [pc, #96]	; (80083b8 <cppLoop+0xb90>)
 8008356:	f7f9 fe1d 	bl	8001f94 <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 800835a:	2101      	movs	r1, #1
 800835c:	481b      	ldr	r0, [pc, #108]	; (80083cc <cppLoop+0xba4>)
 800835e:	f7fb fff9 	bl	8004354 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity);
 8008362:	4b20      	ldr	r3, [pc, #128]	; (80083e4 <cppLoop+0xbbc>)
 8008364:	edd3 7a00 	vldr	s15, [r3]
 8008368:	eeb0 0a67 	vmov.f32	s0, s15
 800836c:	4817      	ldr	r0, [pc, #92]	; (80083cc <cppLoop+0xba4>)
 800836e:	f7fb fbdf 	bl	8003b30 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 8008372:	4b1a      	ldr	r3, [pc, #104]	; (80083dc <cppLoop+0xbb4>)
 8008374:	edd3 7a00 	vldr	s15, [r3]
 8008378:	eeb0 0a67 	vmov.f32	s0, s15
 800837c:	4813      	ldr	r0, [pc, #76]	; (80083cc <cppLoop+0xba4>)
 800837e:	f7fb fbe7 	bl	8003b50 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 8008382:	4b18      	ldr	r3, [pc, #96]	; (80083e4 <cppLoop+0xbbc>)
 8008384:	edd3 7a00 	vldr	s15, [r3]
 8008388:	eeb0 0a67 	vmov.f32	s0, s15
 800838c:	480f      	ldr	r0, [pc, #60]	; (80083cc <cppLoop+0xba4>)
 800838e:	f7fb fbff 	bl	8003b90 <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabele();
 8008392:	480e      	ldr	r0, [pc, #56]	; (80083cc <cppLoop+0xba4>)
 8008394:	f7fa fe32 	bl	8002ffc <_ZN9LineTrace20createVelocityTabeleEv>

			line_trace.running();
 8008398:	480c      	ldr	r0, [pc, #48]	; (80083cc <cppLoop+0xba4>)
 800839a:	f7fb fedd 	bl	8004158 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 800839e:	f04f 32ff 	mov.w	r2, #4294967295
 80083a2:	2100      	movs	r1, #0
 80083a4:	4804      	ldr	r0, [pc, #16]	; (80083b8 <cppLoop+0xb90>)
 80083a6:	f7f9 fdf5 	bl	8001f94 <_ZN3LED2LREaa>
		}

		break;
 80083aa:	f001 b980 	b.w	80096ae <cppLoop+0x1e86>
 80083ae:	bf00      	nop
 80083b0:	9999999a 	.word	0x9999999a
 80083b4:	3fb99999 	.word	0x3fb99999
 80083b8:	20000600 	.word	0x20000600
 80083bc:	0801a108 	.word	0x0801a108
 80083c0:	2003d490 	.word	0x2003d490
 80083c4:	0801a114 	.word	0x0801a114
 80083c8:	200005f4 	.word	0x200005f4
 80083cc:	20017dd0 	.word	0x20017dd0
 80083d0:	0801a120 	.word	0x0801a120
 80083d4:	0801a12c 	.word	0x0801a12c
 80083d8:	0801a0f0 	.word	0x0801a0f0
 80083dc:	2003d498 	.word	0x2003d498
 80083e0:	0801a138 	.word	0x0801a138
 80083e4:	2003d4a8 	.word	0x2003d4a8

	case 4:
		led.fullColor('G');
 80083e8:	2147      	movs	r1, #71	; 0x47
 80083ea:	4895      	ldr	r0, [pc, #596]	; (8008640 <cppLoop+0xe18>)
 80083ec:	f7f9 fd16 	bl	8001e1c <_ZN3LED9fullColorEc>

		lcd_clear();
 80083f0:	f7f8 fe56 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80083f4:	2100      	movs	r1, #0
 80083f6:	2000      	movs	r0, #0
 80083f8:	f7f8 fe62 	bl	80010c0 <lcd_locate>
		lcd_printf("2:   %3.1f", line_trace.getMaxVelocity());
 80083fc:	4891      	ldr	r0, [pc, #580]	; (8008644 <cppLoop+0xe1c>)
 80083fe:	f7fb fbf7 	bl	8003bf0 <_ZN9LineTrace14getMaxVelocityEv>
 8008402:	ee10 3a10 	vmov	r3, s0
 8008406:	4618      	mov	r0, r3
 8008408:	f7f8 f8b6 	bl	8000578 <__aeabi_f2d>
 800840c:	4603      	mov	r3, r0
 800840e:	460c      	mov	r4, r1
 8008410:	461a      	mov	r2, r3
 8008412:	4623      	mov	r3, r4
 8008414:	488c      	ldr	r0, [pc, #560]	; (8008648 <cppLoop+0xe20>)
 8008416:	f7f8 fe7e 	bl	8001116 <lcd_printf>
		lcd_locate(0,1);
 800841a:	2101      	movs	r1, #1
 800841c:	2000      	movs	r0, #0
 800841e:	f7f8 fe4f 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity());
 8008422:	4888      	ldr	r0, [pc, #544]	; (8008644 <cppLoop+0xe1c>)
 8008424:	f7fb fc04 	bl	8003c30 <_ZN9LineTrace14getMinVelocityEv>
 8008428:	ee10 3a10 	vmov	r3, s0
 800842c:	4618      	mov	r0, r3
 800842e:	f7f8 f8a3 	bl	8000578 <__aeabi_f2d>
 8008432:	4603      	mov	r3, r0
 8008434:	460c      	mov	r4, r1
 8008436:	461a      	mov	r2, r3
 8008438:	4623      	mov	r3, r4
 800843a:	4884      	ldr	r0, [pc, #528]	; (800864c <cppLoop+0xe24>)
 800843c:	f7f8 fe6b 	bl	8001116 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008440:	4883      	ldr	r0, [pc, #524]	; (8008650 <cppLoop+0xe28>)
 8008442:	f7f9 fc87 	bl	8001d54 <_ZN8JoyStick8getValueEv>
 8008446:	4603      	mov	r3, r0
 8008448:	2b08      	cmp	r3, #8
 800844a:	bf0c      	ite	eq
 800844c:	2301      	moveq	r3, #1
 800844e:	2300      	movne	r3, #0
 8008450:	b2db      	uxtb	r3, r3
 8008452:	2b00      	cmp	r3, #0
 8008454:	d022      	beq.n	800849c <cppLoop+0xc74>
			led.LR(-1, 1);
 8008456:	2201      	movs	r2, #1
 8008458:	f04f 31ff 	mov.w	r1, #4294967295
 800845c:	4878      	ldr	r0, [pc, #480]	; (8008640 <cppLoop+0xe18>)
 800845e:	f7f9 fd99 	bl	8001f94 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008462:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008466:	f001 fa5d 	bl	8009924 <HAL_Delay>

			selector_vel++;
 800846a:	4b7a      	ldr	r3, [pc, #488]	; (8008654 <cppLoop+0xe2c>)
 800846c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008470:	b29b      	uxth	r3, r3
 8008472:	3301      	adds	r3, #1
 8008474:	b29b      	uxth	r3, r3
 8008476:	b21a      	sxth	r2, r3
 8008478:	4b76      	ldr	r3, [pc, #472]	; (8008654 <cppLoop+0xe2c>)
 800847a:	801a      	strh	r2, [r3, #0]
			if(selector_vel >= 2) selector_vel = 0;
 800847c:	4b75      	ldr	r3, [pc, #468]	; (8008654 <cppLoop+0xe2c>)
 800847e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008482:	2b01      	cmp	r3, #1
 8008484:	dd02      	ble.n	800848c <cppLoop+0xc64>
 8008486:	4b73      	ldr	r3, [pc, #460]	; (8008654 <cppLoop+0xe2c>)
 8008488:	2200      	movs	r2, #0
 800848a:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 800848c:	2200      	movs	r2, #0
 800848e:	f04f 31ff 	mov.w	r1, #4294967295
 8008492:	486b      	ldr	r0, [pc, #428]	; (8008640 <cppLoop+0xe18>)
 8008494:	f7f9 fd7e 	bl	8001f94 <_ZN3LED2LREaa>
			line_trace.setMaxVelocity(adj_max_velocity);
			line_trace.setMinVelocity(adj_min_velocity);

			led.LR(-1, 0);
		}
		break;
 8008498:	f001 b90b 	b.w	80096b2 <cppLoop+0x1e8a>
		else if(joy_stick.getValue() == JOY_R){
 800849c:	486c      	ldr	r0, [pc, #432]	; (8008650 <cppLoop+0xe28>)
 800849e:	f7f9 fc59 	bl	8001d54 <_ZN8JoyStick8getValueEv>
 80084a2:	4603      	mov	r3, r0
 80084a4:	2b10      	cmp	r3, #16
 80084a6:	bf0c      	ite	eq
 80084a8:	2301      	moveq	r3, #1
 80084aa:	2300      	movne	r3, #0
 80084ac:	b2db      	uxtb	r3, r3
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d03c      	beq.n	800852c <cppLoop+0xd04>
			led.LR(-1, 1);
 80084b2:	2201      	movs	r2, #1
 80084b4:	f04f 31ff 	mov.w	r1, #4294967295
 80084b8:	4861      	ldr	r0, [pc, #388]	; (8008640 <cppLoop+0xe18>)
 80084ba:	f7f9 fd6b 	bl	8001f94 <_ZN3LED2LREaa>
			HAL_Delay(100);
 80084be:	2064      	movs	r0, #100	; 0x64
 80084c0:	f001 fa30 	bl	8009924 <HAL_Delay>
			if(selector_vel == 0)
 80084c4:	4b63      	ldr	r3, [pc, #396]	; (8008654 <cppLoop+0xe2c>)
 80084c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d113      	bne.n	80084f6 <cppLoop+0xcce>
				adj_max_velocity = adj_max_velocity + 0.1;
 80084ce:	4b62      	ldr	r3, [pc, #392]	; (8008658 <cppLoop+0xe30>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	4618      	mov	r0, r3
 80084d4:	f7f8 f850 	bl	8000578 <__aeabi_f2d>
 80084d8:	a357      	add	r3, pc, #348	; (adr r3, 8008638 <cppLoop+0xe10>)
 80084da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084de:	f7f7 feed 	bl	80002bc <__adddf3>
 80084e2:	4603      	mov	r3, r0
 80084e4:	460c      	mov	r4, r1
 80084e6:	4618      	mov	r0, r3
 80084e8:	4621      	mov	r1, r4
 80084ea:	f7f8 fb95 	bl	8000c18 <__aeabi_d2f>
 80084ee:	4602      	mov	r2, r0
 80084f0:	4b59      	ldr	r3, [pc, #356]	; (8008658 <cppLoop+0xe30>)
 80084f2:	601a      	str	r2, [r3, #0]
 80084f4:	e012      	b.n	800851c <cppLoop+0xcf4>
				adj_min_velocity = adj_min_velocity + 0.1;
 80084f6:	4b59      	ldr	r3, [pc, #356]	; (800865c <cppLoop+0xe34>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	4618      	mov	r0, r3
 80084fc:	f7f8 f83c 	bl	8000578 <__aeabi_f2d>
 8008500:	a34d      	add	r3, pc, #308	; (adr r3, 8008638 <cppLoop+0xe10>)
 8008502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008506:	f7f7 fed9 	bl	80002bc <__adddf3>
 800850a:	4603      	mov	r3, r0
 800850c:	460c      	mov	r4, r1
 800850e:	4618      	mov	r0, r3
 8008510:	4621      	mov	r1, r4
 8008512:	f7f8 fb81 	bl	8000c18 <__aeabi_d2f>
 8008516:	4602      	mov	r2, r0
 8008518:	4b50      	ldr	r3, [pc, #320]	; (800865c <cppLoop+0xe34>)
 800851a:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 800851c:	2200      	movs	r2, #0
 800851e:	f04f 31ff 	mov.w	r1, #4294967295
 8008522:	4847      	ldr	r0, [pc, #284]	; (8008640 <cppLoop+0xe18>)
 8008524:	f7f9 fd36 	bl	8001f94 <_ZN3LED2LREaa>
		break;
 8008528:	f001 b8c3 	b.w	80096b2 <cppLoop+0x1e8a>
		else if(joy_stick.getValue() == JOY_L){
 800852c:	4848      	ldr	r0, [pc, #288]	; (8008650 <cppLoop+0xe28>)
 800852e:	f7f9 fc11 	bl	8001d54 <_ZN8JoyStick8getValueEv>
 8008532:	4603      	mov	r3, r0
 8008534:	2b01      	cmp	r3, #1
 8008536:	bf0c      	ite	eq
 8008538:	2301      	moveq	r3, #1
 800853a:	2300      	movne	r3, #0
 800853c:	b2db      	uxtb	r3, r3
 800853e:	2b00      	cmp	r3, #0
 8008540:	d03c      	beq.n	80085bc <cppLoop+0xd94>
			led.LR(-1, 1);
 8008542:	2201      	movs	r2, #1
 8008544:	f04f 31ff 	mov.w	r1, #4294967295
 8008548:	483d      	ldr	r0, [pc, #244]	; (8008640 <cppLoop+0xe18>)
 800854a:	f7f9 fd23 	bl	8001f94 <_ZN3LED2LREaa>
			HAL_Delay(100);
 800854e:	2064      	movs	r0, #100	; 0x64
 8008550:	f001 f9e8 	bl	8009924 <HAL_Delay>
			if(selector_vel == 0)
 8008554:	4b3f      	ldr	r3, [pc, #252]	; (8008654 <cppLoop+0xe2c>)
 8008556:	f9b3 3000 	ldrsh.w	r3, [r3]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d113      	bne.n	8008586 <cppLoop+0xd5e>
				adj_max_velocity = adj_max_velocity - 0.1;
 800855e:	4b3e      	ldr	r3, [pc, #248]	; (8008658 <cppLoop+0xe30>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	4618      	mov	r0, r3
 8008564:	f7f8 f808 	bl	8000578 <__aeabi_f2d>
 8008568:	a333      	add	r3, pc, #204	; (adr r3, 8008638 <cppLoop+0xe10>)
 800856a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800856e:	f7f7 fea3 	bl	80002b8 <__aeabi_dsub>
 8008572:	4603      	mov	r3, r0
 8008574:	460c      	mov	r4, r1
 8008576:	4618      	mov	r0, r3
 8008578:	4621      	mov	r1, r4
 800857a:	f7f8 fb4d 	bl	8000c18 <__aeabi_d2f>
 800857e:	4602      	mov	r2, r0
 8008580:	4b35      	ldr	r3, [pc, #212]	; (8008658 <cppLoop+0xe30>)
 8008582:	601a      	str	r2, [r3, #0]
 8008584:	e012      	b.n	80085ac <cppLoop+0xd84>
				adj_min_velocity = adj_min_velocity - 0.1;
 8008586:	4b35      	ldr	r3, [pc, #212]	; (800865c <cppLoop+0xe34>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	4618      	mov	r0, r3
 800858c:	f7f7 fff4 	bl	8000578 <__aeabi_f2d>
 8008590:	a329      	add	r3, pc, #164	; (adr r3, 8008638 <cppLoop+0xe10>)
 8008592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008596:	f7f7 fe8f 	bl	80002b8 <__aeabi_dsub>
 800859a:	4603      	mov	r3, r0
 800859c:	460c      	mov	r4, r1
 800859e:	4618      	mov	r0, r3
 80085a0:	4621      	mov	r1, r4
 80085a2:	f7f8 fb39 	bl	8000c18 <__aeabi_d2f>
 80085a6:	4602      	mov	r2, r0
 80085a8:	4b2c      	ldr	r3, [pc, #176]	; (800865c <cppLoop+0xe34>)
 80085aa:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 80085ac:	2200      	movs	r2, #0
 80085ae:	f04f 31ff 	mov.w	r1, #4294967295
 80085b2:	4823      	ldr	r0, [pc, #140]	; (8008640 <cppLoop+0xe18>)
 80085b4:	f7f9 fcee 	bl	8001f94 <_ZN3LED2LREaa>
		break;
 80085b8:	f001 b87b 	b.w	80096b2 <cppLoop+0x1e8a>
		else if(joy_stick.getValue() == JOY_C){
 80085bc:	4824      	ldr	r0, [pc, #144]	; (8008650 <cppLoop+0xe28>)
 80085be:	f7f9 fbc9 	bl	8001d54 <_ZN8JoyStick8getValueEv>
 80085c2:	4603      	mov	r3, r0
 80085c4:	2b02      	cmp	r3, #2
 80085c6:	bf0c      	ite	eq
 80085c8:	2301      	moveq	r3, #1
 80085ca:	2300      	movne	r3, #0
 80085cc:	b2db      	uxtb	r3, r3
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	f001 806f 	beq.w	80096b2 <cppLoop+0x1e8a>
			led.LR(-1, 1);
 80085d4:	2201      	movs	r2, #1
 80085d6:	f04f 31ff 	mov.w	r1, #4294967295
 80085da:	4819      	ldr	r0, [pc, #100]	; (8008640 <cppLoop+0xe18>)
 80085dc:	f7f9 fcda 	bl	8001f94 <_ZN3LED2LREaa>
			HAL_Delay(300);
 80085e0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80085e4:	f001 f99e 	bl	8009924 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL2.TXT", 1, &adj_max_velocity, OVER_WRITE);
 80085e8:	2300      	movs	r3, #0
 80085ea:	9300      	str	r3, [sp, #0]
 80085ec:	4b1a      	ldr	r3, [pc, #104]	; (8008658 <cppLoop+0xe30>)
 80085ee:	2201      	movs	r2, #1
 80085f0:	491b      	ldr	r1, [pc, #108]	; (8008660 <cppLoop+0xe38>)
 80085f2:	481c      	ldr	r0, [pc, #112]	; (8008664 <cppLoop+0xe3c>)
 80085f4:	f7f8 ff92 	bl	800151c <sd_write_array_float>
			sd_write_array_float("PARAMS", "MINVEL.TXT", 1, &adj_min_velocity, OVER_WRITE);
 80085f8:	2300      	movs	r3, #0
 80085fa:	9300      	str	r3, [sp, #0]
 80085fc:	4b17      	ldr	r3, [pc, #92]	; (800865c <cppLoop+0xe34>)
 80085fe:	2201      	movs	r2, #1
 8008600:	4919      	ldr	r1, [pc, #100]	; (8008668 <cppLoop+0xe40>)
 8008602:	4818      	ldr	r0, [pc, #96]	; (8008664 <cppLoop+0xe3c>)
 8008604:	f7f8 ff8a 	bl	800151c <sd_write_array_float>
			line_trace.setMaxVelocity(adj_max_velocity);
 8008608:	4b13      	ldr	r3, [pc, #76]	; (8008658 <cppLoop+0xe30>)
 800860a:	edd3 7a00 	vldr	s15, [r3]
 800860e:	eeb0 0a67 	vmov.f32	s0, s15
 8008612:	480c      	ldr	r0, [pc, #48]	; (8008644 <cppLoop+0xe1c>)
 8008614:	f7fb fa9c 	bl	8003b50 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 8008618:	4b10      	ldr	r3, [pc, #64]	; (800865c <cppLoop+0xe34>)
 800861a:	edd3 7a00 	vldr	s15, [r3]
 800861e:	eeb0 0a67 	vmov.f32	s0, s15
 8008622:	4808      	ldr	r0, [pc, #32]	; (8008644 <cppLoop+0xe1c>)
 8008624:	f7fb fab4 	bl	8003b90 <_ZN9LineTrace14setMinVelocityEf>
			led.LR(-1, 0);
 8008628:	2200      	movs	r2, #0
 800862a:	f04f 31ff 	mov.w	r1, #4294967295
 800862e:	4804      	ldr	r0, [pc, #16]	; (8008640 <cppLoop+0xe18>)
 8008630:	f7f9 fcb0 	bl	8001f94 <_ZN3LED2LREaa>
		break;
 8008634:	f001 b83d 	b.w	80096b2 <cppLoop+0x1e8a>
 8008638:	9999999a 	.word	0x9999999a
 800863c:	3fb99999 	.word	0x3fb99999
 8008640:	20000600 	.word	0x20000600
 8008644:	20017dd0 	.word	0x20017dd0
 8008648:	0801a138 	.word	0x0801a138
 800864c:	0801a120 	.word	0x0801a120
 8008650:	200005f4 	.word	0x200005f4
 8008654:	2003d45a 	.word	0x2003d45a
 8008658:	2003d498 	.word	0x2003d498
 800865c:	2003d4a8 	.word	0x2003d4a8
 8008660:	0801a144 	.word	0x0801a144
 8008664:	0801a0f0 	.word	0x0801a0f0
 8008668:	0801a150 	.word	0x0801a150

	case 5:
		led.fullColor('M');
 800866c:	214d      	movs	r1, #77	; 0x4d
 800866e:	48aa      	ldr	r0, [pc, #680]	; (8008918 <cppLoop+0x10f0>)
 8008670:	f7f9 fbd4 	bl	8001e1c <_ZN3LED9fullColorEc>

		lcd_clear();
 8008674:	f7f8 fd14 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008678:	2100      	movs	r1, #0
 800867a:	2000      	movs	r0, #0
 800867c:	f7f8 fd20 	bl	80010c0 <lcd_locate>
		lcd_printf("3:   %3.1f", adj_max_velocity2);
 8008680:	4ba6      	ldr	r3, [pc, #664]	; (800891c <cppLoop+0x10f4>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	4618      	mov	r0, r3
 8008686:	f7f7 ff77 	bl	8000578 <__aeabi_f2d>
 800868a:	4603      	mov	r3, r0
 800868c:	460c      	mov	r4, r1
 800868e:	461a      	mov	r2, r3
 8008690:	4623      	mov	r3, r4
 8008692:	48a3      	ldr	r0, [pc, #652]	; (8008920 <cppLoop+0x10f8>)
 8008694:	f7f8 fd3f 	bl	8001116 <lcd_printf>
		lcd_locate(0,1);
 8008698:	2101      	movs	r1, #1
 800869a:	2000      	movs	r0, #0
 800869c:	f7f8 fd10 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_min_velocity2);
 80086a0:	4ba0      	ldr	r3, [pc, #640]	; (8008924 <cppLoop+0x10fc>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4618      	mov	r0, r3
 80086a6:	f7f7 ff67 	bl	8000578 <__aeabi_f2d>
 80086aa:	4603      	mov	r3, r0
 80086ac:	460c      	mov	r4, r1
 80086ae:	461a      	mov	r2, r3
 80086b0:	4623      	mov	r3, r4
 80086b2:	489d      	ldr	r0, [pc, #628]	; (8008928 <cppLoop+0x1100>)
 80086b4:	f7f8 fd2f 	bl	8001116 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80086b8:	489c      	ldr	r0, [pc, #624]	; (800892c <cppLoop+0x1104>)
 80086ba:	f7f9 fb4b 	bl	8001d54 <_ZN8JoyStick8getValueEv>
 80086be:	4603      	mov	r3, r0
 80086c0:	2b02      	cmp	r3, #2
 80086c2:	bf0c      	ite	eq
 80086c4:	2301      	moveq	r3, #1
 80086c6:	2300      	movne	r3, #0
 80086c8:	b2db      	uxtb	r3, r3
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	f000 87f3 	beq.w	80096b6 <cppLoop+0x1e8e>
			HAL_Delay(500);
 80086d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80086d4:	f001 f926 	bl	8009924 <HAL_Delay>

			led.LR(1, -1);
 80086d8:	f04f 32ff 	mov.w	r2, #4294967295
 80086dc:	2101      	movs	r1, #1
 80086de:	488e      	ldr	r0, [pc, #568]	; (8008918 <cppLoop+0x10f0>)
 80086e0:	f7f9 fc58 	bl	8001f94 <_ZN3LED2LREaa>
			line_trace.setMode(THIRD_RUNNING);
 80086e4:	2102      	movs	r1, #2
 80086e6:	4892      	ldr	r0, [pc, #584]	; (8008930 <cppLoop+0x1108>)
 80086e8:	f7fb fe34 	bl	8004354 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity2);
 80086ec:	4b8d      	ldr	r3, [pc, #564]	; (8008924 <cppLoop+0x10fc>)
 80086ee:	edd3 7a00 	vldr	s15, [r3]
 80086f2:	eeb0 0a67 	vmov.f32	s0, s15
 80086f6:	488e      	ldr	r0, [pc, #568]	; (8008930 <cppLoop+0x1108>)
 80086f8:	f7fb fa1a 	bl	8003b30 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity2(adj_max_velocity2);
 80086fc:	4b87      	ldr	r3, [pc, #540]	; (800891c <cppLoop+0x10f4>)
 80086fe:	edd3 7a00 	vldr	s15, [r3]
 8008702:	eeb0 0a67 	vmov.f32	s0, s15
 8008706:	488a      	ldr	r0, [pc, #552]	; (8008930 <cppLoop+0x1108>)
 8008708:	f7fb fa32 	bl	8003b70 <_ZN9LineTrace15setMaxVelocity2Ef>
			line_trace.setMinVelocity2(adj_min_velocity2);
 800870c:	4b85      	ldr	r3, [pc, #532]	; (8008924 <cppLoop+0x10fc>)
 800870e:	edd3 7a00 	vldr	s15, [r3]
 8008712:	eeb0 0a67 	vmov.f32	s0, s15
 8008716:	4886      	ldr	r0, [pc, #536]	; (8008930 <cppLoop+0x1108>)
 8008718:	f7fb fa4a 	bl	8003bb0 <_ZN9LineTrace15setMinVelocity2Ef>
			line_trace.createVelocityTabele();
 800871c:	4884      	ldr	r0, [pc, #528]	; (8008930 <cppLoop+0x1108>)
 800871e:	f7fa fc6d 	bl	8002ffc <_ZN9LineTrace20createVelocityTabeleEv>

			line_trace.running();
 8008722:	4883      	ldr	r0, [pc, #524]	; (8008930 <cppLoop+0x1108>)
 8008724:	f7fb fd18 	bl	8004158 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 8008728:	f04f 32ff 	mov.w	r2, #4294967295
 800872c:	2100      	movs	r1, #0
 800872e:	487a      	ldr	r0, [pc, #488]	; (8008918 <cppLoop+0x10f0>)
 8008730:	f7f9 fc30 	bl	8001f94 <_ZN3LED2LREaa>
		}

		break;
 8008734:	f000 bfbf 	b.w	80096b6 <cppLoop+0x1e8e>

	case 6:
		led.fullColor('R');
 8008738:	2152      	movs	r1, #82	; 0x52
 800873a:	4877      	ldr	r0, [pc, #476]	; (8008918 <cppLoop+0x10f0>)
 800873c:	f7f9 fb6e 	bl	8001e1c <_ZN3LED9fullColorEc>

		lcd_clear();
 8008740:	f7f8 fcae 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008744:	2100      	movs	r1, #0
 8008746:	2000      	movs	r0, #0
 8008748:	f7f8 fcba 	bl	80010c0 <lcd_locate>
		lcd_printf("3:   %3.1f", line_trace.getMaxVelocity2());
 800874c:	4878      	ldr	r0, [pc, #480]	; (8008930 <cppLoop+0x1108>)
 800874e:	f7fb fa5f 	bl	8003c10 <_ZN9LineTrace15getMaxVelocity2Ev>
 8008752:	ee10 3a10 	vmov	r3, s0
 8008756:	4618      	mov	r0, r3
 8008758:	f7f7 ff0e 	bl	8000578 <__aeabi_f2d>
 800875c:	4603      	mov	r3, r0
 800875e:	460c      	mov	r4, r1
 8008760:	461a      	mov	r2, r3
 8008762:	4623      	mov	r3, r4
 8008764:	486e      	ldr	r0, [pc, #440]	; (8008920 <cppLoop+0x10f8>)
 8008766:	f7f8 fcd6 	bl	8001116 <lcd_printf>
		lcd_locate(0,1);
 800876a:	2101      	movs	r1, #1
 800876c:	2000      	movs	r0, #0
 800876e:	f7f8 fca7 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity2());
 8008772:	486f      	ldr	r0, [pc, #444]	; (8008930 <cppLoop+0x1108>)
 8008774:	f7fb fa6c 	bl	8003c50 <_ZN9LineTrace15getMinVelocity2Ev>
 8008778:	ee10 3a10 	vmov	r3, s0
 800877c:	4618      	mov	r0, r3
 800877e:	f7f7 fefb 	bl	8000578 <__aeabi_f2d>
 8008782:	4603      	mov	r3, r0
 8008784:	460c      	mov	r4, r1
 8008786:	461a      	mov	r2, r3
 8008788:	4623      	mov	r3, r4
 800878a:	486a      	ldr	r0, [pc, #424]	; (8008934 <cppLoop+0x110c>)
 800878c:	f7f8 fcc3 	bl	8001116 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008790:	4866      	ldr	r0, [pc, #408]	; (800892c <cppLoop+0x1104>)
 8008792:	f7f9 fadf 	bl	8001d54 <_ZN8JoyStick8getValueEv>
 8008796:	4603      	mov	r3, r0
 8008798:	2b08      	cmp	r3, #8
 800879a:	bf0c      	ite	eq
 800879c:	2301      	moveq	r3, #1
 800879e:	2300      	movne	r3, #0
 80087a0:	b2db      	uxtb	r3, r3
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d022      	beq.n	80087ec <cppLoop+0xfc4>
			led.LR(-1, 1);
 80087a6:	2201      	movs	r2, #1
 80087a8:	f04f 31ff 	mov.w	r1, #4294967295
 80087ac:	485a      	ldr	r0, [pc, #360]	; (8008918 <cppLoop+0x10f0>)
 80087ae:	f7f9 fbf1 	bl	8001f94 <_ZN3LED2LREaa>
			HAL_Delay(300);
 80087b2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80087b6:	f001 f8b5 	bl	8009924 <HAL_Delay>

			selector_vel2++;
 80087ba:	4b5f      	ldr	r3, [pc, #380]	; (8008938 <cppLoop+0x1110>)
 80087bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80087c0:	b29b      	uxth	r3, r3
 80087c2:	3301      	adds	r3, #1
 80087c4:	b29b      	uxth	r3, r3
 80087c6:	b21a      	sxth	r2, r3
 80087c8:	4b5b      	ldr	r3, [pc, #364]	; (8008938 <cppLoop+0x1110>)
 80087ca:	801a      	strh	r2, [r3, #0]
			if(selector_vel2 >= 2) selector_vel2 = 0;
 80087cc:	4b5a      	ldr	r3, [pc, #360]	; (8008938 <cppLoop+0x1110>)
 80087ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80087d2:	2b01      	cmp	r3, #1
 80087d4:	dd02      	ble.n	80087dc <cppLoop+0xfb4>
 80087d6:	4b58      	ldr	r3, [pc, #352]	; (8008938 <cppLoop+0x1110>)
 80087d8:	2200      	movs	r2, #0
 80087da:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 80087dc:	2200      	movs	r2, #0
 80087de:	f04f 31ff 	mov.w	r1, #4294967295
 80087e2:	484d      	ldr	r0, [pc, #308]	; (8008918 <cppLoop+0x10f0>)
 80087e4:	f7f9 fbd6 	bl	8001f94 <_ZN3LED2LREaa>
			line_trace.setMinVelocity2(adj_min_velocity2);

			led.LR(-1, 0);
		}

		break;
 80087e8:	f000 bf67 	b.w	80096ba <cppLoop+0x1e92>
		else if(joy_stick.getValue() == JOY_R){
 80087ec:	484f      	ldr	r0, [pc, #316]	; (800892c <cppLoop+0x1104>)
 80087ee:	f7f9 fab1 	bl	8001d54 <_ZN8JoyStick8getValueEv>
 80087f2:	4603      	mov	r3, r0
 80087f4:	2b10      	cmp	r3, #16
 80087f6:	bf0c      	ite	eq
 80087f8:	2301      	moveq	r3, #1
 80087fa:	2300      	movne	r3, #0
 80087fc:	b2db      	uxtb	r3, r3
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d03c      	beq.n	800887c <cppLoop+0x1054>
			led.LR(-1, 1);
 8008802:	2201      	movs	r2, #1
 8008804:	f04f 31ff 	mov.w	r1, #4294967295
 8008808:	4843      	ldr	r0, [pc, #268]	; (8008918 <cppLoop+0x10f0>)
 800880a:	f7f9 fbc3 	bl	8001f94 <_ZN3LED2LREaa>
			HAL_Delay(100);
 800880e:	2064      	movs	r0, #100	; 0x64
 8008810:	f001 f888 	bl	8009924 <HAL_Delay>
			if(selector_vel2 == 0)
 8008814:	4b48      	ldr	r3, [pc, #288]	; (8008938 <cppLoop+0x1110>)
 8008816:	f9b3 3000 	ldrsh.w	r3, [r3]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d113      	bne.n	8008846 <cppLoop+0x101e>
				adj_max_velocity2 = adj_max_velocity2 + 0.1;
 800881e:	4b3f      	ldr	r3, [pc, #252]	; (800891c <cppLoop+0x10f4>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	4618      	mov	r0, r3
 8008824:	f7f7 fea8 	bl	8000578 <__aeabi_f2d>
 8008828:	a339      	add	r3, pc, #228	; (adr r3, 8008910 <cppLoop+0x10e8>)
 800882a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800882e:	f7f7 fd45 	bl	80002bc <__adddf3>
 8008832:	4603      	mov	r3, r0
 8008834:	460c      	mov	r4, r1
 8008836:	4618      	mov	r0, r3
 8008838:	4621      	mov	r1, r4
 800883a:	f7f8 f9ed 	bl	8000c18 <__aeabi_d2f>
 800883e:	4602      	mov	r2, r0
 8008840:	4b36      	ldr	r3, [pc, #216]	; (800891c <cppLoop+0x10f4>)
 8008842:	601a      	str	r2, [r3, #0]
 8008844:	e012      	b.n	800886c <cppLoop+0x1044>
				adj_min_velocity2 = adj_min_velocity2 + 0.1;
 8008846:	4b37      	ldr	r3, [pc, #220]	; (8008924 <cppLoop+0x10fc>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	4618      	mov	r0, r3
 800884c:	f7f7 fe94 	bl	8000578 <__aeabi_f2d>
 8008850:	a32f      	add	r3, pc, #188	; (adr r3, 8008910 <cppLoop+0x10e8>)
 8008852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008856:	f7f7 fd31 	bl	80002bc <__adddf3>
 800885a:	4603      	mov	r3, r0
 800885c:	460c      	mov	r4, r1
 800885e:	4618      	mov	r0, r3
 8008860:	4621      	mov	r1, r4
 8008862:	f7f8 f9d9 	bl	8000c18 <__aeabi_d2f>
 8008866:	4602      	mov	r2, r0
 8008868:	4b2e      	ldr	r3, [pc, #184]	; (8008924 <cppLoop+0x10fc>)
 800886a:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 800886c:	2200      	movs	r2, #0
 800886e:	f04f 31ff 	mov.w	r1, #4294967295
 8008872:	4829      	ldr	r0, [pc, #164]	; (8008918 <cppLoop+0x10f0>)
 8008874:	f7f9 fb8e 	bl	8001f94 <_ZN3LED2LREaa>
		break;
 8008878:	f000 bf1f 	b.w	80096ba <cppLoop+0x1e92>
		else if(joy_stick.getValue() == JOY_L){
 800887c:	482b      	ldr	r0, [pc, #172]	; (800892c <cppLoop+0x1104>)
 800887e:	f7f9 fa69 	bl	8001d54 <_ZN8JoyStick8getValueEv>
 8008882:	4603      	mov	r3, r0
 8008884:	2b01      	cmp	r3, #1
 8008886:	bf0c      	ite	eq
 8008888:	2301      	moveq	r3, #1
 800888a:	2300      	movne	r3, #0
 800888c:	b2db      	uxtb	r3, r3
 800888e:	2b00      	cmp	r3, #0
 8008890:	d054      	beq.n	800893c <cppLoop+0x1114>
			led.LR(-1, 1);
 8008892:	2201      	movs	r2, #1
 8008894:	f04f 31ff 	mov.w	r1, #4294967295
 8008898:	481f      	ldr	r0, [pc, #124]	; (8008918 <cppLoop+0x10f0>)
 800889a:	f7f9 fb7b 	bl	8001f94 <_ZN3LED2LREaa>
			HAL_Delay(100);
 800889e:	2064      	movs	r0, #100	; 0x64
 80088a0:	f001 f840 	bl	8009924 <HAL_Delay>
			if(selector_vel2 == 0)
 80088a4:	4b24      	ldr	r3, [pc, #144]	; (8008938 <cppLoop+0x1110>)
 80088a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d113      	bne.n	80088d6 <cppLoop+0x10ae>
				adj_max_velocity2 = adj_max_velocity2 - 0.1;
 80088ae:	4b1b      	ldr	r3, [pc, #108]	; (800891c <cppLoop+0x10f4>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	4618      	mov	r0, r3
 80088b4:	f7f7 fe60 	bl	8000578 <__aeabi_f2d>
 80088b8:	a315      	add	r3, pc, #84	; (adr r3, 8008910 <cppLoop+0x10e8>)
 80088ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088be:	f7f7 fcfb 	bl	80002b8 <__aeabi_dsub>
 80088c2:	4603      	mov	r3, r0
 80088c4:	460c      	mov	r4, r1
 80088c6:	4618      	mov	r0, r3
 80088c8:	4621      	mov	r1, r4
 80088ca:	f7f8 f9a5 	bl	8000c18 <__aeabi_d2f>
 80088ce:	4602      	mov	r2, r0
 80088d0:	4b12      	ldr	r3, [pc, #72]	; (800891c <cppLoop+0x10f4>)
 80088d2:	601a      	str	r2, [r3, #0]
 80088d4:	e012      	b.n	80088fc <cppLoop+0x10d4>
				adj_min_velocity2 = adj_min_velocity2 - 0.1;
 80088d6:	4b13      	ldr	r3, [pc, #76]	; (8008924 <cppLoop+0x10fc>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	4618      	mov	r0, r3
 80088dc:	f7f7 fe4c 	bl	8000578 <__aeabi_f2d>
 80088e0:	a30b      	add	r3, pc, #44	; (adr r3, 8008910 <cppLoop+0x10e8>)
 80088e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088e6:	f7f7 fce7 	bl	80002b8 <__aeabi_dsub>
 80088ea:	4603      	mov	r3, r0
 80088ec:	460c      	mov	r4, r1
 80088ee:	4618      	mov	r0, r3
 80088f0:	4621      	mov	r1, r4
 80088f2:	f7f8 f991 	bl	8000c18 <__aeabi_d2f>
 80088f6:	4602      	mov	r2, r0
 80088f8:	4b0a      	ldr	r3, [pc, #40]	; (8008924 <cppLoop+0x10fc>)
 80088fa:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 80088fc:	2200      	movs	r2, #0
 80088fe:	f04f 31ff 	mov.w	r1, #4294967295
 8008902:	4805      	ldr	r0, [pc, #20]	; (8008918 <cppLoop+0x10f0>)
 8008904:	f7f9 fb46 	bl	8001f94 <_ZN3LED2LREaa>
		break;
 8008908:	f000 bed7 	b.w	80096ba <cppLoop+0x1e92>
 800890c:	f3af 8000 	nop.w
 8008910:	9999999a 	.word	0x9999999a
 8008914:	3fb99999 	.word	0x3fb99999
 8008918:	20000600 	.word	0x20000600
 800891c:	2003d4a0 	.word	0x2003d4a0
 8008920:	0801a15c 	.word	0x0801a15c
 8008924:	2003d4b0 	.word	0x2003d4b0
 8008928:	0801a114 	.word	0x0801a114
 800892c:	200005f4 	.word	0x200005f4
 8008930:	20017dd0 	.word	0x20017dd0
 8008934:	0801a120 	.word	0x0801a120
 8008938:	2003d45c 	.word	0x2003d45c
		else if(joy_stick.getValue() == JOY_C){
 800893c:	48b4      	ldr	r0, [pc, #720]	; (8008c10 <cppLoop+0x13e8>)
 800893e:	f7f9 fa09 	bl	8001d54 <_ZN8JoyStick8getValueEv>
 8008942:	4603      	mov	r3, r0
 8008944:	2b02      	cmp	r3, #2
 8008946:	bf0c      	ite	eq
 8008948:	2301      	moveq	r3, #1
 800894a:	2300      	movne	r3, #0
 800894c:	b2db      	uxtb	r3, r3
 800894e:	2b00      	cmp	r3, #0
 8008950:	f000 86b3 	beq.w	80096ba <cppLoop+0x1e92>
			led.LR(-1, 1);
 8008954:	2201      	movs	r2, #1
 8008956:	f04f 31ff 	mov.w	r1, #4294967295
 800895a:	48ae      	ldr	r0, [pc, #696]	; (8008c14 <cppLoop+0x13ec>)
 800895c:	f7f9 fb1a 	bl	8001f94 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008960:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008964:	f000 ffde 	bl	8009924 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL3.TXT", 1, &adj_max_velocity2, OVER_WRITE);
 8008968:	2300      	movs	r3, #0
 800896a:	9300      	str	r3, [sp, #0]
 800896c:	4baa      	ldr	r3, [pc, #680]	; (8008c18 <cppLoop+0x13f0>)
 800896e:	2201      	movs	r2, #1
 8008970:	49aa      	ldr	r1, [pc, #680]	; (8008c1c <cppLoop+0x13f4>)
 8008972:	48ab      	ldr	r0, [pc, #684]	; (8008c20 <cppLoop+0x13f8>)
 8008974:	f7f8 fdd2 	bl	800151c <sd_write_array_float>
			sd_write_array_float("PARAMS", "MINVEL2.TXT", 1, &adj_min_velocity2, OVER_WRITE);
 8008978:	2300      	movs	r3, #0
 800897a:	9300      	str	r3, [sp, #0]
 800897c:	4ba9      	ldr	r3, [pc, #676]	; (8008c24 <cppLoop+0x13fc>)
 800897e:	2201      	movs	r2, #1
 8008980:	49a9      	ldr	r1, [pc, #676]	; (8008c28 <cppLoop+0x1400>)
 8008982:	48a7      	ldr	r0, [pc, #668]	; (8008c20 <cppLoop+0x13f8>)
 8008984:	f7f8 fdca 	bl	800151c <sd_write_array_float>
			line_trace.setMaxVelocity2(adj_max_velocity2);
 8008988:	4ba3      	ldr	r3, [pc, #652]	; (8008c18 <cppLoop+0x13f0>)
 800898a:	edd3 7a00 	vldr	s15, [r3]
 800898e:	eeb0 0a67 	vmov.f32	s0, s15
 8008992:	48a6      	ldr	r0, [pc, #664]	; (8008c2c <cppLoop+0x1404>)
 8008994:	f7fb f8ec 	bl	8003b70 <_ZN9LineTrace15setMaxVelocity2Ef>
			line_trace.setMinVelocity2(adj_min_velocity2);
 8008998:	4ba2      	ldr	r3, [pc, #648]	; (8008c24 <cppLoop+0x13fc>)
 800899a:	edd3 7a00 	vldr	s15, [r3]
 800899e:	eeb0 0a67 	vmov.f32	s0, s15
 80089a2:	48a2      	ldr	r0, [pc, #648]	; (8008c2c <cppLoop+0x1404>)
 80089a4:	f7fb f904 	bl	8003bb0 <_ZN9LineTrace15setMinVelocity2Ef>
			led.LR(-1, 0);
 80089a8:	2200      	movs	r2, #0
 80089aa:	f04f 31ff 	mov.w	r1, #4294967295
 80089ae:	4899      	ldr	r0, [pc, #612]	; (8008c14 <cppLoop+0x13ec>)
 80089b0:	f7f9 faf0 	bl	8001f94 <_ZN3LED2LREaa>
		break;
 80089b4:	f000 be81 	b.w	80096ba <cppLoop+0x1e92>

	case 7:
		led.fullColor('W');
 80089b8:	2157      	movs	r1, #87	; 0x57
 80089ba:	4896      	ldr	r0, [pc, #600]	; (8008c14 <cppLoop+0x13ec>)
 80089bc:	f7f9 fa2e 	bl	8001e1c <_ZN3LED9fullColorEc>

		lcd_clear();
 80089c0:	f7f8 fb6e 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80089c4:	2100      	movs	r1, #0
 80089c6:	2000      	movs	r0, #0
 80089c8:	f7f8 fb7a 	bl	80010c0 <lcd_locate>
		lcd_printf("ACC:%4.1f", line_trace.getMaxAcc());
 80089cc:	4897      	ldr	r0, [pc, #604]	; (8008c2c <cppLoop+0x1404>)
 80089ce:	f7fb f983 	bl	8003cd8 <_ZN9LineTrace9getMaxAccEv>
 80089d2:	ee10 3a10 	vmov	r3, s0
 80089d6:	4618      	mov	r0, r3
 80089d8:	f7f7 fdce 	bl	8000578 <__aeabi_f2d>
 80089dc:	4603      	mov	r3, r0
 80089de:	460c      	mov	r4, r1
 80089e0:	461a      	mov	r2, r3
 80089e2:	4623      	mov	r3, r4
 80089e4:	4892      	ldr	r0, [pc, #584]	; (8008c30 <cppLoop+0x1408>)
 80089e6:	f7f8 fb96 	bl	8001116 <lcd_printf>
		lcd_locate(0,1);
 80089ea:	2101      	movs	r1, #1
 80089ec:	2000      	movs	r0, #0
 80089ee:	f7f8 fb67 	bl	80010c0 <lcd_locate>
		lcd_printf("DEC:%4.1f", line_trace.getMaxDec());
 80089f2:	488e      	ldr	r0, [pc, #568]	; (8008c2c <cppLoop+0x1404>)
 80089f4:	f7fb f9a6 	bl	8003d44 <_ZN9LineTrace9getMaxDecEv>
 80089f8:	ee10 3a10 	vmov	r3, s0
 80089fc:	4618      	mov	r0, r3
 80089fe:	f7f7 fdbb 	bl	8000578 <__aeabi_f2d>
 8008a02:	4603      	mov	r3, r0
 8008a04:	460c      	mov	r4, r1
 8008a06:	461a      	mov	r2, r3
 8008a08:	4623      	mov	r3, r4
 8008a0a:	488a      	ldr	r0, [pc, #552]	; (8008c34 <cppLoop+0x140c>)
 8008a0c:	f7f8 fb83 	bl	8001116 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008a10:	487f      	ldr	r0, [pc, #508]	; (8008c10 <cppLoop+0x13e8>)
 8008a12:	f7f9 f99f 	bl	8001d54 <_ZN8JoyStick8getValueEv>
 8008a16:	4603      	mov	r3, r0
 8008a18:	2b08      	cmp	r3, #8
 8008a1a:	bf0c      	ite	eq
 8008a1c:	2301      	moveq	r3, #1
 8008a1e:	2300      	movne	r3, #0
 8008a20:	b2db      	uxtb	r3, r3
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d022      	beq.n	8008a6c <cppLoop+0x1244>
			led.LR(-1, 1);
 8008a26:	2201      	movs	r2, #1
 8008a28:	f04f 31ff 	mov.w	r1, #4294967295
 8008a2c:	4879      	ldr	r0, [pc, #484]	; (8008c14 <cppLoop+0x13ec>)
 8008a2e:	f7f9 fab1 	bl	8001f94 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008a32:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008a36:	f000 ff75 	bl	8009924 <HAL_Delay>

			selector_acc++;
 8008a3a:	4b7f      	ldr	r3, [pc, #508]	; (8008c38 <cppLoop+0x1410>)
 8008a3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008a40:	b29b      	uxth	r3, r3
 8008a42:	3301      	adds	r3, #1
 8008a44:	b29b      	uxth	r3, r3
 8008a46:	b21a      	sxth	r2, r3
 8008a48:	4b7b      	ldr	r3, [pc, #492]	; (8008c38 <cppLoop+0x1410>)
 8008a4a:	801a      	strh	r2, [r3, #0]
			if(selector_acc >= 2) selector_acc = 0;
 8008a4c:	4b7a      	ldr	r3, [pc, #488]	; (8008c38 <cppLoop+0x1410>)
 8008a4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008a52:	2b01      	cmp	r3, #1
 8008a54:	dd02      	ble.n	8008a5c <cppLoop+0x1234>
 8008a56:	4b78      	ldr	r3, [pc, #480]	; (8008c38 <cppLoop+0x1410>)
 8008a58:	2200      	movs	r2, #0
 8008a5a:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	f04f 31ff 	mov.w	r1, #4294967295
 8008a62:	486c      	ldr	r0, [pc, #432]	; (8008c14 <cppLoop+0x13ec>)
 8008a64:	f7f9 fa96 	bl	8001f94 <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "DEC.TXT", 1, &adj_dec, OVER_WRITE);
			line_trace.setMaxAccDec(adj_acc, adj_dec);

			led.LR(-1, 0);
		}
		break;
 8008a68:	f000 be29 	b.w	80096be <cppLoop+0x1e96>
		else if(joy_stick.getValue() == JOY_R){
 8008a6c:	4868      	ldr	r0, [pc, #416]	; (8008c10 <cppLoop+0x13e8>)
 8008a6e:	f7f9 f971 	bl	8001d54 <_ZN8JoyStick8getValueEv>
 8008a72:	4603      	mov	r3, r0
 8008a74:	2b10      	cmp	r3, #16
 8008a76:	bf0c      	ite	eq
 8008a78:	2301      	moveq	r3, #1
 8008a7a:	2300      	movne	r3, #0
 8008a7c:	b2db      	uxtb	r3, r3
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d03c      	beq.n	8008afc <cppLoop+0x12d4>
			led.LR(-1, 1);
 8008a82:	2201      	movs	r2, #1
 8008a84:	f04f 31ff 	mov.w	r1, #4294967295
 8008a88:	4862      	ldr	r0, [pc, #392]	; (8008c14 <cppLoop+0x13ec>)
 8008a8a:	f7f9 fa83 	bl	8001f94 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008a8e:	2064      	movs	r0, #100	; 0x64
 8008a90:	f000 ff48 	bl	8009924 <HAL_Delay>
			if(selector_acc == 0){
 8008a94:	4b68      	ldr	r3, [pc, #416]	; (8008c38 <cppLoop+0x1410>)
 8008a96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d113      	bne.n	8008ac6 <cppLoop+0x129e>
				adj_acc = adj_acc + 0.1;
 8008a9e:	4b67      	ldr	r3, [pc, #412]	; (8008c3c <cppLoop+0x1414>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	f7f7 fd68 	bl	8000578 <__aeabi_f2d>
 8008aa8:	a357      	add	r3, pc, #348	; (adr r3, 8008c08 <cppLoop+0x13e0>)
 8008aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aae:	f7f7 fc05 	bl	80002bc <__adddf3>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	460c      	mov	r4, r1
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	4621      	mov	r1, r4
 8008aba:	f7f8 f8ad 	bl	8000c18 <__aeabi_d2f>
 8008abe:	4602      	mov	r2, r0
 8008ac0:	4b5e      	ldr	r3, [pc, #376]	; (8008c3c <cppLoop+0x1414>)
 8008ac2:	601a      	str	r2, [r3, #0]
 8008ac4:	e012      	b.n	8008aec <cppLoop+0x12c4>
				adj_dec = adj_dec + 0.1;
 8008ac6:	4b5e      	ldr	r3, [pc, #376]	; (8008c40 <cppLoop+0x1418>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	4618      	mov	r0, r3
 8008acc:	f7f7 fd54 	bl	8000578 <__aeabi_f2d>
 8008ad0:	a34d      	add	r3, pc, #308	; (adr r3, 8008c08 <cppLoop+0x13e0>)
 8008ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad6:	f7f7 fbf1 	bl	80002bc <__adddf3>
 8008ada:	4603      	mov	r3, r0
 8008adc:	460c      	mov	r4, r1
 8008ade:	4618      	mov	r0, r3
 8008ae0:	4621      	mov	r1, r4
 8008ae2:	f7f8 f899 	bl	8000c18 <__aeabi_d2f>
 8008ae6:	4602      	mov	r2, r0
 8008ae8:	4b55      	ldr	r3, [pc, #340]	; (8008c40 <cppLoop+0x1418>)
 8008aea:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008aec:	2200      	movs	r2, #0
 8008aee:	f04f 31ff 	mov.w	r1, #4294967295
 8008af2:	4848      	ldr	r0, [pc, #288]	; (8008c14 <cppLoop+0x13ec>)
 8008af4:	f7f9 fa4e 	bl	8001f94 <_ZN3LED2LREaa>
		break;
 8008af8:	f000 bde1 	b.w	80096be <cppLoop+0x1e96>
		else if(joy_stick.getValue() == JOY_L){
 8008afc:	4844      	ldr	r0, [pc, #272]	; (8008c10 <cppLoop+0x13e8>)
 8008afe:	f7f9 f929 	bl	8001d54 <_ZN8JoyStick8getValueEv>
 8008b02:	4603      	mov	r3, r0
 8008b04:	2b01      	cmp	r3, #1
 8008b06:	bf0c      	ite	eq
 8008b08:	2301      	moveq	r3, #1
 8008b0a:	2300      	movne	r3, #0
 8008b0c:	b2db      	uxtb	r3, r3
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d03c      	beq.n	8008b8c <cppLoop+0x1364>
			led.LR(-1, 1);
 8008b12:	2201      	movs	r2, #1
 8008b14:	f04f 31ff 	mov.w	r1, #4294967295
 8008b18:	483e      	ldr	r0, [pc, #248]	; (8008c14 <cppLoop+0x13ec>)
 8008b1a:	f7f9 fa3b 	bl	8001f94 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008b1e:	2064      	movs	r0, #100	; 0x64
 8008b20:	f000 ff00 	bl	8009924 <HAL_Delay>
			if(selector_acc == 0){
 8008b24:	4b44      	ldr	r3, [pc, #272]	; (8008c38 <cppLoop+0x1410>)
 8008b26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d113      	bne.n	8008b56 <cppLoop+0x132e>
				adj_acc = adj_acc - 0.1;
 8008b2e:	4b43      	ldr	r3, [pc, #268]	; (8008c3c <cppLoop+0x1414>)
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	4618      	mov	r0, r3
 8008b34:	f7f7 fd20 	bl	8000578 <__aeabi_f2d>
 8008b38:	a333      	add	r3, pc, #204	; (adr r3, 8008c08 <cppLoop+0x13e0>)
 8008b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b3e:	f7f7 fbbb 	bl	80002b8 <__aeabi_dsub>
 8008b42:	4603      	mov	r3, r0
 8008b44:	460c      	mov	r4, r1
 8008b46:	4618      	mov	r0, r3
 8008b48:	4621      	mov	r1, r4
 8008b4a:	f7f8 f865 	bl	8000c18 <__aeabi_d2f>
 8008b4e:	4602      	mov	r2, r0
 8008b50:	4b3a      	ldr	r3, [pc, #232]	; (8008c3c <cppLoop+0x1414>)
 8008b52:	601a      	str	r2, [r3, #0]
 8008b54:	e012      	b.n	8008b7c <cppLoop+0x1354>
				adj_dec = adj_dec - 0.1;
 8008b56:	4b3a      	ldr	r3, [pc, #232]	; (8008c40 <cppLoop+0x1418>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f7f7 fd0c 	bl	8000578 <__aeabi_f2d>
 8008b60:	a329      	add	r3, pc, #164	; (adr r3, 8008c08 <cppLoop+0x13e0>)
 8008b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b66:	f7f7 fba7 	bl	80002b8 <__aeabi_dsub>
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	460c      	mov	r4, r1
 8008b6e:	4618      	mov	r0, r3
 8008b70:	4621      	mov	r1, r4
 8008b72:	f7f8 f851 	bl	8000c18 <__aeabi_d2f>
 8008b76:	4602      	mov	r2, r0
 8008b78:	4b31      	ldr	r3, [pc, #196]	; (8008c40 <cppLoop+0x1418>)
 8008b7a:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	f04f 31ff 	mov.w	r1, #4294967295
 8008b82:	4824      	ldr	r0, [pc, #144]	; (8008c14 <cppLoop+0x13ec>)
 8008b84:	f7f9 fa06 	bl	8001f94 <_ZN3LED2LREaa>
		break;
 8008b88:	f000 bd99 	b.w	80096be <cppLoop+0x1e96>
		else if(joy_stick.getValue() == JOY_C){
 8008b8c:	4820      	ldr	r0, [pc, #128]	; (8008c10 <cppLoop+0x13e8>)
 8008b8e:	f7f9 f8e1 	bl	8001d54 <_ZN8JoyStick8getValueEv>
 8008b92:	4603      	mov	r3, r0
 8008b94:	2b02      	cmp	r3, #2
 8008b96:	bf0c      	ite	eq
 8008b98:	2301      	moveq	r3, #1
 8008b9a:	2300      	movne	r3, #0
 8008b9c:	b2db      	uxtb	r3, r3
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	f000 858d 	beq.w	80096be <cppLoop+0x1e96>
			led.LR(-1, 1);
 8008ba4:	2201      	movs	r2, #1
 8008ba6:	f04f 31ff 	mov.w	r1, #4294967295
 8008baa:	481a      	ldr	r0, [pc, #104]	; (8008c14 <cppLoop+0x13ec>)
 8008bac:	f7f9 f9f2 	bl	8001f94 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008bb0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008bb4:	f000 feb6 	bl	8009924 <HAL_Delay>
			sd_write_array_float("PARAMS", "ACC.TXT", 1, &adj_acc, OVER_WRITE);
 8008bb8:	2300      	movs	r3, #0
 8008bba:	9300      	str	r3, [sp, #0]
 8008bbc:	4b1f      	ldr	r3, [pc, #124]	; (8008c3c <cppLoop+0x1414>)
 8008bbe:	2201      	movs	r2, #1
 8008bc0:	4920      	ldr	r1, [pc, #128]	; (8008c44 <cppLoop+0x141c>)
 8008bc2:	4817      	ldr	r0, [pc, #92]	; (8008c20 <cppLoop+0x13f8>)
 8008bc4:	f7f8 fcaa 	bl	800151c <sd_write_array_float>
			sd_write_array_float("PARAMS", "DEC.TXT", 1, &adj_dec, OVER_WRITE);
 8008bc8:	2300      	movs	r3, #0
 8008bca:	9300      	str	r3, [sp, #0]
 8008bcc:	4b1c      	ldr	r3, [pc, #112]	; (8008c40 <cppLoop+0x1418>)
 8008bce:	2201      	movs	r2, #1
 8008bd0:	491d      	ldr	r1, [pc, #116]	; (8008c48 <cppLoop+0x1420>)
 8008bd2:	4813      	ldr	r0, [pc, #76]	; (8008c20 <cppLoop+0x13f8>)
 8008bd4:	f7f8 fca2 	bl	800151c <sd_write_array_float>
			line_trace.setMaxAccDec(adj_acc, adj_dec);
 8008bd8:	4b18      	ldr	r3, [pc, #96]	; (8008c3c <cppLoop+0x1414>)
 8008bda:	edd3 7a00 	vldr	s15, [r3]
 8008bde:	4b18      	ldr	r3, [pc, #96]	; (8008c40 <cppLoop+0x1418>)
 8008be0:	ed93 7a00 	vldr	s14, [r3]
 8008be4:	eef0 0a47 	vmov.f32	s1, s14
 8008be8:	eeb0 0a67 	vmov.f32	s0, s15
 8008bec:	480f      	ldr	r0, [pc, #60]	; (8008c2c <cppLoop+0x1404>)
 8008bee:	f7fb f83f 	bl	8003c70 <_ZN9LineTrace12setMaxAccDecEff>
			led.LR(-1, 0);
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	f04f 31ff 	mov.w	r1, #4294967295
 8008bf8:	4806      	ldr	r0, [pc, #24]	; (8008c14 <cppLoop+0x13ec>)
 8008bfa:	f7f9 f9cb 	bl	8001f94 <_ZN3LED2LREaa>
		break;
 8008bfe:	f000 bd5e 	b.w	80096be <cppLoop+0x1e96>
 8008c02:	bf00      	nop
 8008c04:	f3af 8000 	nop.w
 8008c08:	9999999a 	.word	0x9999999a
 8008c0c:	3fb99999 	.word	0x3fb99999
 8008c10:	200005f4 	.word	0x200005f4
 8008c14:	20000600 	.word	0x20000600
 8008c18:	2003d4a0 	.word	0x2003d4a0
 8008c1c:	0801a168 	.word	0x0801a168
 8008c20:	0801a0f0 	.word	0x0801a0f0
 8008c24:	2003d4b0 	.word	0x2003d4b0
 8008c28:	0801a174 	.word	0x0801a174
 8008c2c:	20017dd0 	.word	0x20017dd0
 8008c30:	0801a180 	.word	0x0801a180
 8008c34:	0801a18c 	.word	0x0801a18c
 8008c38:	2003d456 	.word	0x2003d456
 8008c3c:	2003d4b8 	.word	0x2003d4b8
 8008c40:	2003d4c0 	.word	0x2003d4c0
 8008c44:	0801a198 	.word	0x0801a198
 8008c48:	0801a1a0 	.word	0x0801a1a0

	case 8:
		led.fullColor('W');
 8008c4c:	2157      	movs	r1, #87	; 0x57
 8008c4e:	4894      	ldr	r0, [pc, #592]	; (8008ea0 <cppLoop+0x1678>)
 8008c50:	f7f9 f8e4 	bl	8001e1c <_ZN3LED9fullColorEc>

		lcd_clear();
 8008c54:	f7f8 fa24 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008c58:	2100      	movs	r1, #0
 8008c5a:	2000      	movs	r0, #0
 8008c5c:	f7f8 fa30 	bl	80010c0 <lcd_locate>
		lcd_printf("ACC2:%3.1f", line_trace.getMaxAcc2());
 8008c60:	4890      	ldr	r0, [pc, #576]	; (8008ea4 <cppLoop+0x167c>)
 8008c62:	f7fb f85d 	bl	8003d20 <_ZN9LineTrace10getMaxAcc2Ev>
 8008c66:	ee10 3a10 	vmov	r3, s0
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	f7f7 fc84 	bl	8000578 <__aeabi_f2d>
 8008c70:	4603      	mov	r3, r0
 8008c72:	460c      	mov	r4, r1
 8008c74:	461a      	mov	r2, r3
 8008c76:	4623      	mov	r3, r4
 8008c78:	488b      	ldr	r0, [pc, #556]	; (8008ea8 <cppLoop+0x1680>)
 8008c7a:	f7f8 fa4c 	bl	8001116 <lcd_printf>
		lcd_locate(0,1);
 8008c7e:	2101      	movs	r1, #1
 8008c80:	2000      	movs	r0, #0
 8008c82:	f7f8 fa1d 	bl	80010c0 <lcd_locate>
		lcd_printf("DEC2:%3.1f", line_trace.getMaxDec2());
 8008c86:	4887      	ldr	r0, [pc, #540]	; (8008ea4 <cppLoop+0x167c>)
 8008c88:	f7fb f838 	bl	8003cfc <_ZN9LineTrace10getMaxDec2Ev>
 8008c8c:	ee10 3a10 	vmov	r3, s0
 8008c90:	4618      	mov	r0, r3
 8008c92:	f7f7 fc71 	bl	8000578 <__aeabi_f2d>
 8008c96:	4603      	mov	r3, r0
 8008c98:	460c      	mov	r4, r1
 8008c9a:	461a      	mov	r2, r3
 8008c9c:	4623      	mov	r3, r4
 8008c9e:	4883      	ldr	r0, [pc, #524]	; (8008eac <cppLoop+0x1684>)
 8008ca0:	f7f8 fa39 	bl	8001116 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008ca4:	4882      	ldr	r0, [pc, #520]	; (8008eb0 <cppLoop+0x1688>)
 8008ca6:	f7f9 f855 	bl	8001d54 <_ZN8JoyStick8getValueEv>
 8008caa:	4603      	mov	r3, r0
 8008cac:	2b08      	cmp	r3, #8
 8008cae:	bf0c      	ite	eq
 8008cb0:	2301      	moveq	r3, #1
 8008cb2:	2300      	movne	r3, #0
 8008cb4:	b2db      	uxtb	r3, r3
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d022      	beq.n	8008d00 <cppLoop+0x14d8>
			led.LR(-1, 1);
 8008cba:	2201      	movs	r2, #1
 8008cbc:	f04f 31ff 	mov.w	r1, #4294967295
 8008cc0:	4877      	ldr	r0, [pc, #476]	; (8008ea0 <cppLoop+0x1678>)
 8008cc2:	f7f9 f967 	bl	8001f94 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008cc6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008cca:	f000 fe2b 	bl	8009924 <HAL_Delay>

			selector_acc2++;
 8008cce:	4b79      	ldr	r3, [pc, #484]	; (8008eb4 <cppLoop+0x168c>)
 8008cd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008cd4:	b29b      	uxth	r3, r3
 8008cd6:	3301      	adds	r3, #1
 8008cd8:	b29b      	uxth	r3, r3
 8008cda:	b21a      	sxth	r2, r3
 8008cdc:	4b75      	ldr	r3, [pc, #468]	; (8008eb4 <cppLoop+0x168c>)
 8008cde:	801a      	strh	r2, [r3, #0]
			if(selector_acc2 >= 2) selector_acc2 = 0;
 8008ce0:	4b74      	ldr	r3, [pc, #464]	; (8008eb4 <cppLoop+0x168c>)
 8008ce2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008ce6:	2b01      	cmp	r3, #1
 8008ce8:	dd02      	ble.n	8008cf0 <cppLoop+0x14c8>
 8008cea:	4b72      	ldr	r3, [pc, #456]	; (8008eb4 <cppLoop+0x168c>)
 8008cec:	2200      	movs	r2, #0
 8008cee:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	f04f 31ff 	mov.w	r1, #4294967295
 8008cf6:	486a      	ldr	r0, [pc, #424]	; (8008ea0 <cppLoop+0x1678>)
 8008cf8:	f7f9 f94c 	bl	8001f94 <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "DEC2.TXT", 1, &adj_dec2, OVER_WRITE);
			line_trace.setMaxAccDec2(adj_acc2, adj_dec2);

			led.LR(-1, 0);
		}
		break;
 8008cfc:	f000 bce1 	b.w	80096c2 <cppLoop+0x1e9a>
		else if(joy_stick.getValue() == JOY_R){
 8008d00:	486b      	ldr	r0, [pc, #428]	; (8008eb0 <cppLoop+0x1688>)
 8008d02:	f7f9 f827 	bl	8001d54 <_ZN8JoyStick8getValueEv>
 8008d06:	4603      	mov	r3, r0
 8008d08:	2b10      	cmp	r3, #16
 8008d0a:	bf0c      	ite	eq
 8008d0c:	2301      	moveq	r3, #1
 8008d0e:	2300      	movne	r3, #0
 8008d10:	b2db      	uxtb	r3, r3
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d03c      	beq.n	8008d90 <cppLoop+0x1568>
			led.LR(-1, 1);
 8008d16:	2201      	movs	r2, #1
 8008d18:	f04f 31ff 	mov.w	r1, #4294967295
 8008d1c:	4860      	ldr	r0, [pc, #384]	; (8008ea0 <cppLoop+0x1678>)
 8008d1e:	f7f9 f939 	bl	8001f94 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008d22:	2064      	movs	r0, #100	; 0x64
 8008d24:	f000 fdfe 	bl	8009924 <HAL_Delay>
			if(selector_acc2 == 0){
 8008d28:	4b62      	ldr	r3, [pc, #392]	; (8008eb4 <cppLoop+0x168c>)
 8008d2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d113      	bne.n	8008d5a <cppLoop+0x1532>
				adj_acc2 = adj_acc2 + 0.1;
 8008d32:	4b61      	ldr	r3, [pc, #388]	; (8008eb8 <cppLoop+0x1690>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	4618      	mov	r0, r3
 8008d38:	f7f7 fc1e 	bl	8000578 <__aeabi_f2d>
 8008d3c:	a356      	add	r3, pc, #344	; (adr r3, 8008e98 <cppLoop+0x1670>)
 8008d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d42:	f7f7 fabb 	bl	80002bc <__adddf3>
 8008d46:	4603      	mov	r3, r0
 8008d48:	460c      	mov	r4, r1
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	4621      	mov	r1, r4
 8008d4e:	f7f7 ff63 	bl	8000c18 <__aeabi_d2f>
 8008d52:	4602      	mov	r2, r0
 8008d54:	4b58      	ldr	r3, [pc, #352]	; (8008eb8 <cppLoop+0x1690>)
 8008d56:	601a      	str	r2, [r3, #0]
 8008d58:	e012      	b.n	8008d80 <cppLoop+0x1558>
				adj_dec2 = adj_dec2 + 0.1;
 8008d5a:	4b58      	ldr	r3, [pc, #352]	; (8008ebc <cppLoop+0x1694>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f7f7 fc0a 	bl	8000578 <__aeabi_f2d>
 8008d64:	a34c      	add	r3, pc, #304	; (adr r3, 8008e98 <cppLoop+0x1670>)
 8008d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d6a:	f7f7 faa7 	bl	80002bc <__adddf3>
 8008d6e:	4603      	mov	r3, r0
 8008d70:	460c      	mov	r4, r1
 8008d72:	4618      	mov	r0, r3
 8008d74:	4621      	mov	r1, r4
 8008d76:	f7f7 ff4f 	bl	8000c18 <__aeabi_d2f>
 8008d7a:	4602      	mov	r2, r0
 8008d7c:	4b4f      	ldr	r3, [pc, #316]	; (8008ebc <cppLoop+0x1694>)
 8008d7e:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008d80:	2200      	movs	r2, #0
 8008d82:	f04f 31ff 	mov.w	r1, #4294967295
 8008d86:	4846      	ldr	r0, [pc, #280]	; (8008ea0 <cppLoop+0x1678>)
 8008d88:	f7f9 f904 	bl	8001f94 <_ZN3LED2LREaa>
		break;
 8008d8c:	f000 bc99 	b.w	80096c2 <cppLoop+0x1e9a>
		else if(joy_stick.getValue() == JOY_L){
 8008d90:	4847      	ldr	r0, [pc, #284]	; (8008eb0 <cppLoop+0x1688>)
 8008d92:	f7f8 ffdf 	bl	8001d54 <_ZN8JoyStick8getValueEv>
 8008d96:	4603      	mov	r3, r0
 8008d98:	2b01      	cmp	r3, #1
 8008d9a:	bf0c      	ite	eq
 8008d9c:	2301      	moveq	r3, #1
 8008d9e:	2300      	movne	r3, #0
 8008da0:	b2db      	uxtb	r3, r3
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d03c      	beq.n	8008e20 <cppLoop+0x15f8>
			led.LR(-1, 1);
 8008da6:	2201      	movs	r2, #1
 8008da8:	f04f 31ff 	mov.w	r1, #4294967295
 8008dac:	483c      	ldr	r0, [pc, #240]	; (8008ea0 <cppLoop+0x1678>)
 8008dae:	f7f9 f8f1 	bl	8001f94 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008db2:	2064      	movs	r0, #100	; 0x64
 8008db4:	f000 fdb6 	bl	8009924 <HAL_Delay>
			if(selector_acc2 == 0){
 8008db8:	4b3e      	ldr	r3, [pc, #248]	; (8008eb4 <cppLoop+0x168c>)
 8008dba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d113      	bne.n	8008dea <cppLoop+0x15c2>
				adj_acc2 = adj_acc2 - 0.1;
 8008dc2:	4b3d      	ldr	r3, [pc, #244]	; (8008eb8 <cppLoop+0x1690>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f7f7 fbd6 	bl	8000578 <__aeabi_f2d>
 8008dcc:	a332      	add	r3, pc, #200	; (adr r3, 8008e98 <cppLoop+0x1670>)
 8008dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dd2:	f7f7 fa71 	bl	80002b8 <__aeabi_dsub>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	460c      	mov	r4, r1
 8008dda:	4618      	mov	r0, r3
 8008ddc:	4621      	mov	r1, r4
 8008dde:	f7f7 ff1b 	bl	8000c18 <__aeabi_d2f>
 8008de2:	4602      	mov	r2, r0
 8008de4:	4b34      	ldr	r3, [pc, #208]	; (8008eb8 <cppLoop+0x1690>)
 8008de6:	601a      	str	r2, [r3, #0]
 8008de8:	e012      	b.n	8008e10 <cppLoop+0x15e8>
				adj_dec2 = adj_dec2 - 0.1;
 8008dea:	4b34      	ldr	r3, [pc, #208]	; (8008ebc <cppLoop+0x1694>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	4618      	mov	r0, r3
 8008df0:	f7f7 fbc2 	bl	8000578 <__aeabi_f2d>
 8008df4:	a328      	add	r3, pc, #160	; (adr r3, 8008e98 <cppLoop+0x1670>)
 8008df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dfa:	f7f7 fa5d 	bl	80002b8 <__aeabi_dsub>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	460c      	mov	r4, r1
 8008e02:	4618      	mov	r0, r3
 8008e04:	4621      	mov	r1, r4
 8008e06:	f7f7 ff07 	bl	8000c18 <__aeabi_d2f>
 8008e0a:	4602      	mov	r2, r0
 8008e0c:	4b2b      	ldr	r3, [pc, #172]	; (8008ebc <cppLoop+0x1694>)
 8008e0e:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008e10:	2200      	movs	r2, #0
 8008e12:	f04f 31ff 	mov.w	r1, #4294967295
 8008e16:	4822      	ldr	r0, [pc, #136]	; (8008ea0 <cppLoop+0x1678>)
 8008e18:	f7f9 f8bc 	bl	8001f94 <_ZN3LED2LREaa>
		break;
 8008e1c:	f000 bc51 	b.w	80096c2 <cppLoop+0x1e9a>
		else if(joy_stick.getValue() == JOY_C){
 8008e20:	4823      	ldr	r0, [pc, #140]	; (8008eb0 <cppLoop+0x1688>)
 8008e22:	f7f8 ff97 	bl	8001d54 <_ZN8JoyStick8getValueEv>
 8008e26:	4603      	mov	r3, r0
 8008e28:	2b02      	cmp	r3, #2
 8008e2a:	bf0c      	ite	eq
 8008e2c:	2301      	moveq	r3, #1
 8008e2e:	2300      	movne	r3, #0
 8008e30:	b2db      	uxtb	r3, r3
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	f000 8445 	beq.w	80096c2 <cppLoop+0x1e9a>
			led.LR(-1, 1);
 8008e38:	2201      	movs	r2, #1
 8008e3a:	f04f 31ff 	mov.w	r1, #4294967295
 8008e3e:	4818      	ldr	r0, [pc, #96]	; (8008ea0 <cppLoop+0x1678>)
 8008e40:	f7f9 f8a8 	bl	8001f94 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008e44:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008e48:	f000 fd6c 	bl	8009924 <HAL_Delay>
			sd_write_array_float("PARAMS", "ACC2.TXT", 1, &adj_acc2, OVER_WRITE);
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	9300      	str	r3, [sp, #0]
 8008e50:	4b19      	ldr	r3, [pc, #100]	; (8008eb8 <cppLoop+0x1690>)
 8008e52:	2201      	movs	r2, #1
 8008e54:	491a      	ldr	r1, [pc, #104]	; (8008ec0 <cppLoop+0x1698>)
 8008e56:	481b      	ldr	r0, [pc, #108]	; (8008ec4 <cppLoop+0x169c>)
 8008e58:	f7f8 fb60 	bl	800151c <sd_write_array_float>
			sd_write_array_float("PARAMS", "DEC2.TXT", 1, &adj_dec2, OVER_WRITE);
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	9300      	str	r3, [sp, #0]
 8008e60:	4b16      	ldr	r3, [pc, #88]	; (8008ebc <cppLoop+0x1694>)
 8008e62:	2201      	movs	r2, #1
 8008e64:	4918      	ldr	r1, [pc, #96]	; (8008ec8 <cppLoop+0x16a0>)
 8008e66:	4817      	ldr	r0, [pc, #92]	; (8008ec4 <cppLoop+0x169c>)
 8008e68:	f7f8 fb58 	bl	800151c <sd_write_array_float>
			line_trace.setMaxAccDec2(adj_acc2, adj_dec2);
 8008e6c:	4b12      	ldr	r3, [pc, #72]	; (8008eb8 <cppLoop+0x1690>)
 8008e6e:	edd3 7a00 	vldr	s15, [r3]
 8008e72:	4b12      	ldr	r3, [pc, #72]	; (8008ebc <cppLoop+0x1694>)
 8008e74:	ed93 7a00 	vldr	s14, [r3]
 8008e78:	eef0 0a47 	vmov.f32	s1, s14
 8008e7c:	eeb0 0a67 	vmov.f32	s0, s15
 8008e80:	4808      	ldr	r0, [pc, #32]	; (8008ea4 <cppLoop+0x167c>)
 8008e82:	f7fa ff0f 	bl	8003ca4 <_ZN9LineTrace13setMaxAccDec2Eff>
			led.LR(-1, 0);
 8008e86:	2200      	movs	r2, #0
 8008e88:	f04f 31ff 	mov.w	r1, #4294967295
 8008e8c:	4804      	ldr	r0, [pc, #16]	; (8008ea0 <cppLoop+0x1678>)
 8008e8e:	f7f9 f881 	bl	8001f94 <_ZN3LED2LREaa>
		break;
 8008e92:	f000 bc16 	b.w	80096c2 <cppLoop+0x1e9a>
 8008e96:	bf00      	nop
 8008e98:	9999999a 	.word	0x9999999a
 8008e9c:	3fb99999 	.word	0x3fb99999
 8008ea0:	20000600 	.word	0x20000600
 8008ea4:	20017dd0 	.word	0x20017dd0
 8008ea8:	0801a1a8 	.word	0x0801a1a8
 8008eac:	0801a1b4 	.word	0x0801a1b4
 8008eb0:	200005f4 	.word	0x200005f4
 8008eb4:	2003d458 	.word	0x2003d458
 8008eb8:	2003d4c8 	.word	0x2003d4c8
 8008ebc:	2003d4d0 	.word	0x2003d4d0
 8008ec0:	0801a1c0 	.word	0x0801a1c0
 8008ec4:	0801a0f0 	.word	0x0801a0f0
 8008ec8:	0801a1cc 	.word	0x0801a1cc

	case 9:
		led.fullColor('W');
 8008ecc:	2157      	movs	r1, #87	; 0x57
 8008ece:	48b2      	ldr	r0, [pc, #712]	; (8009198 <cppLoop+0x1970>)
 8008ed0:	f7f8 ffa4 	bl	8001e1c <_ZN3LED9fullColorEc>

		lcd_clear();
 8008ed4:	f7f8 f8e4 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008ed8:	2100      	movs	r1, #0
 8008eda:	2000      	movs	r0, #0
 8008edc:	f7f8 f8f0 	bl	80010c0 <lcd_locate>
		lcd_printf("F%4.2lf   ", line_trace.getKpFast()*1000);
 8008ee0:	48ae      	ldr	r0, [pc, #696]	; (800919c <cppLoop+0x1974>)
 8008ee2:	f7fa fdf8 	bl	8003ad6 <_ZN9LineTrace9getKpFastEv>
 8008ee6:	eeb0 7a40 	vmov.f32	s14, s0
 8008eea:	eddf 7aad 	vldr	s15, [pc, #692]	; 80091a0 <cppLoop+0x1978>
 8008eee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ef2:	ee17 0a90 	vmov	r0, s15
 8008ef6:	f7f7 fb3f 	bl	8000578 <__aeabi_f2d>
 8008efa:	4603      	mov	r3, r0
 8008efc:	460c      	mov	r4, r1
 8008efe:	461a      	mov	r2, r3
 8008f00:	4623      	mov	r3, r4
 8008f02:	48a8      	ldr	r0, [pc, #672]	; (80091a4 <cppLoop+0x197c>)
 8008f04:	f7f8 f907 	bl	8001116 <lcd_printf>
		lcd_locate(0,1);
 8008f08:	2101      	movs	r1, #1
 8008f0a:	2000      	movs	r0, #0
 8008f0c:	f7f8 f8d8 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", line_trace.getKiFast()*100, line_trace.getKdFast()*10000);
 8008f10:	48a2      	ldr	r0, [pc, #648]	; (800919c <cppLoop+0x1974>)
 8008f12:	f7fa fdef 	bl	8003af4 <_ZN9LineTrace9getKiFastEv>
 8008f16:	eeb0 7a40 	vmov.f32	s14, s0
 8008f1a:	eddf 7aa3 	vldr	s15, [pc, #652]	; 80091a8 <cppLoop+0x1980>
 8008f1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f22:	ee17 0a90 	vmov	r0, s15
 8008f26:	f7f7 fb27 	bl	8000578 <__aeabi_f2d>
 8008f2a:	4605      	mov	r5, r0
 8008f2c:	460e      	mov	r6, r1
 8008f2e:	489b      	ldr	r0, [pc, #620]	; (800919c <cppLoop+0x1974>)
 8008f30:	f7fa fdef 	bl	8003b12 <_ZN9LineTrace9getKdFastEv>
 8008f34:	eeb0 7a40 	vmov.f32	s14, s0
 8008f38:	eddf 7a9c 	vldr	s15, [pc, #624]	; 80091ac <cppLoop+0x1984>
 8008f3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f40:	ee17 0a90 	vmov	r0, s15
 8008f44:	f7f7 fb18 	bl	8000578 <__aeabi_f2d>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	460c      	mov	r4, r1
 8008f4c:	e9cd 3400 	strd	r3, r4, [sp]
 8008f50:	462a      	mov	r2, r5
 8008f52:	4633      	mov	r3, r6
 8008f54:	4896      	ldr	r0, [pc, #600]	; (80091b0 <cppLoop+0x1988>)
 8008f56:	f7f8 f8de 	bl	8001116 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008f5a:	4896      	ldr	r0, [pc, #600]	; (80091b4 <cppLoop+0x198c>)
 8008f5c:	f7f8 fefa 	bl	8001d54 <_ZN8JoyStick8getValueEv>
 8008f60:	4603      	mov	r3, r0
 8008f62:	2b08      	cmp	r3, #8
 8008f64:	bf0c      	ite	eq
 8008f66:	2301      	moveq	r3, #1
 8008f68:	2300      	movne	r3, #0
 8008f6a:	b2db      	uxtb	r3, r3
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d021      	beq.n	8008fb4 <cppLoop+0x178c>
			led.LR(-1, 1);
 8008f70:	2201      	movs	r2, #1
 8008f72:	f04f 31ff 	mov.w	r1, #4294967295
 8008f76:	4888      	ldr	r0, [pc, #544]	; (8009198 <cppLoop+0x1970>)
 8008f78:	f7f9 f80c 	bl	8001f94 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008f7c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008f80:	f000 fcd0 	bl	8009924 <HAL_Delay>

			selector_fast++;
 8008f84:	4b8c      	ldr	r3, [pc, #560]	; (80091b8 <cppLoop+0x1990>)
 8008f86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008f8a:	b29b      	uxth	r3, r3
 8008f8c:	3301      	adds	r3, #1
 8008f8e:	b29b      	uxth	r3, r3
 8008f90:	b21a      	sxth	r2, r3
 8008f92:	4b89      	ldr	r3, [pc, #548]	; (80091b8 <cppLoop+0x1990>)
 8008f94:	801a      	strh	r2, [r3, #0]
			if(selector_fast >= 3) selector_fast = 0;
 8008f96:	4b88      	ldr	r3, [pc, #544]	; (80091b8 <cppLoop+0x1990>)
 8008f98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008f9c:	2b02      	cmp	r3, #2
 8008f9e:	dd02      	ble.n	8008fa6 <cppLoop+0x177e>
 8008fa0:	4b85      	ldr	r3, [pc, #532]	; (80091b8 <cppLoop+0x1990>)
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	f04f 31ff 	mov.w	r1, #4294967295
 8008fac:	487a      	ldr	r0, [pc, #488]	; (8009198 <cppLoop+0x1970>)
 8008fae:	f7f8 fff1 	bl	8001f94 <_ZN3LED2LREaa>
			user_fclose();

			led.LR(-1, 0);
		}
		*/
		break;
 8008fb2:	e388      	b.n	80096c6 <cppLoop+0x1e9e>
		else if(joy_stick.getValue() == JOY_R){
 8008fb4:	487f      	ldr	r0, [pc, #508]	; (80091b4 <cppLoop+0x198c>)
 8008fb6:	f7f8 fecd 	bl	8001d54 <_ZN8JoyStick8getValueEv>
 8008fba:	4603      	mov	r3, r0
 8008fbc:	2b10      	cmp	r3, #16
 8008fbe:	bf0c      	ite	eq
 8008fc0:	2301      	moveq	r3, #1
 8008fc2:	2300      	movne	r3, #0
 8008fc4:	b2db      	uxtb	r3, r3
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d058      	beq.n	800907c <cppLoop+0x1854>
			led.LR(-1, 1);
 8008fca:	2201      	movs	r2, #1
 8008fcc:	f04f 31ff 	mov.w	r1, #4294967295
 8008fd0:	4871      	ldr	r0, [pc, #452]	; (8009198 <cppLoop+0x1970>)
 8008fd2:	f7f8 ffdf 	bl	8001f94 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008fd6:	2064      	movs	r0, #100	; 0x64
 8008fd8:	f000 fca4 	bl	8009924 <HAL_Delay>
			if(selector_fast == 0){
 8008fdc:	4b76      	ldr	r3, [pc, #472]	; (80091b8 <cppLoop+0x1990>)
 8008fde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d113      	bne.n	800900e <cppLoop+0x17e6>
				adj_kp_fast = adj_kp_fast + 0.00001;
 8008fe6:	4b75      	ldr	r3, [pc, #468]	; (80091bc <cppLoop+0x1994>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	4618      	mov	r0, r3
 8008fec:	f7f7 fac4 	bl	8000578 <__aeabi_f2d>
 8008ff0:	a363      	add	r3, pc, #396	; (adr r3, 8009180 <cppLoop+0x1958>)
 8008ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ff6:	f7f7 f961 	bl	80002bc <__adddf3>
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	460c      	mov	r4, r1
 8008ffe:	4618      	mov	r0, r3
 8009000:	4621      	mov	r1, r4
 8009002:	f7f7 fe09 	bl	8000c18 <__aeabi_d2f>
 8009006:	4602      	mov	r2, r0
 8009008:	4b6c      	ldr	r3, [pc, #432]	; (80091bc <cppLoop+0x1994>)
 800900a:	601a      	str	r2, [r3, #0]
 800900c:	e02b      	b.n	8009066 <cppLoop+0x183e>
			else if(selector_fast == 1){
 800900e:	4b6a      	ldr	r3, [pc, #424]	; (80091b8 <cppLoop+0x1990>)
 8009010:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009014:	2b01      	cmp	r3, #1
 8009016:	d113      	bne.n	8009040 <cppLoop+0x1818>
				adj_ki_fast = adj_ki_fast + 0.0001;
 8009018:	4b69      	ldr	r3, [pc, #420]	; (80091c0 <cppLoop+0x1998>)
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	4618      	mov	r0, r3
 800901e:	f7f7 faab 	bl	8000578 <__aeabi_f2d>
 8009022:	a359      	add	r3, pc, #356	; (adr r3, 8009188 <cppLoop+0x1960>)
 8009024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009028:	f7f7 f948 	bl	80002bc <__adddf3>
 800902c:	4603      	mov	r3, r0
 800902e:	460c      	mov	r4, r1
 8009030:	4618      	mov	r0, r3
 8009032:	4621      	mov	r1, r4
 8009034:	f7f7 fdf0 	bl	8000c18 <__aeabi_d2f>
 8009038:	4602      	mov	r2, r0
 800903a:	4b61      	ldr	r3, [pc, #388]	; (80091c0 <cppLoop+0x1998>)
 800903c:	601a      	str	r2, [r3, #0]
 800903e:	e012      	b.n	8009066 <cppLoop+0x183e>
				adj_kd_fast = adj_kd_fast + 0.000001;
 8009040:	4b60      	ldr	r3, [pc, #384]	; (80091c4 <cppLoop+0x199c>)
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	4618      	mov	r0, r3
 8009046:	f7f7 fa97 	bl	8000578 <__aeabi_f2d>
 800904a:	a351      	add	r3, pc, #324	; (adr r3, 8009190 <cppLoop+0x1968>)
 800904c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009050:	f7f7 f934 	bl	80002bc <__adddf3>
 8009054:	4603      	mov	r3, r0
 8009056:	460c      	mov	r4, r1
 8009058:	4618      	mov	r0, r3
 800905a:	4621      	mov	r1, r4
 800905c:	f7f7 fddc 	bl	8000c18 <__aeabi_d2f>
 8009060:	4602      	mov	r2, r0
 8009062:	4b58      	ldr	r3, [pc, #352]	; (80091c4 <cppLoop+0x199c>)
 8009064:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8009066:	2152      	movs	r1, #82	; 0x52
 8009068:	484b      	ldr	r0, [pc, #300]	; (8009198 <cppLoop+0x1970>)
 800906a:	f7f8 fed7 	bl	8001e1c <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 800906e:	2200      	movs	r2, #0
 8009070:	f04f 31ff 	mov.w	r1, #4294967295
 8009074:	4848      	ldr	r0, [pc, #288]	; (8009198 <cppLoop+0x1970>)
 8009076:	f7f8 ff8d 	bl	8001f94 <_ZN3LED2LREaa>
		break;
 800907a:	e324      	b.n	80096c6 <cppLoop+0x1e9e>
		else if(joy_stick.getValue() == JOY_L){
 800907c:	484d      	ldr	r0, [pc, #308]	; (80091b4 <cppLoop+0x198c>)
 800907e:	f7f8 fe69 	bl	8001d54 <_ZN8JoyStick8getValueEv>
 8009082:	4603      	mov	r3, r0
 8009084:	2b01      	cmp	r3, #1
 8009086:	bf0c      	ite	eq
 8009088:	2301      	moveq	r3, #1
 800908a:	2300      	movne	r3, #0
 800908c:	b2db      	uxtb	r3, r3
 800908e:	2b00      	cmp	r3, #0
 8009090:	d058      	beq.n	8009144 <cppLoop+0x191c>
			led.LR(-1, 1);
 8009092:	2201      	movs	r2, #1
 8009094:	f04f 31ff 	mov.w	r1, #4294967295
 8009098:	483f      	ldr	r0, [pc, #252]	; (8009198 <cppLoop+0x1970>)
 800909a:	f7f8 ff7b 	bl	8001f94 <_ZN3LED2LREaa>
			HAL_Delay(100);
 800909e:	2064      	movs	r0, #100	; 0x64
 80090a0:	f000 fc40 	bl	8009924 <HAL_Delay>
			if(selector_fast == 0){
 80090a4:	4b44      	ldr	r3, [pc, #272]	; (80091b8 <cppLoop+0x1990>)
 80090a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d113      	bne.n	80090d6 <cppLoop+0x18ae>
				adj_kp_fast = adj_kp_fast - 0.00001;
 80090ae:	4b43      	ldr	r3, [pc, #268]	; (80091bc <cppLoop+0x1994>)
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	4618      	mov	r0, r3
 80090b4:	f7f7 fa60 	bl	8000578 <__aeabi_f2d>
 80090b8:	a331      	add	r3, pc, #196	; (adr r3, 8009180 <cppLoop+0x1958>)
 80090ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090be:	f7f7 f8fb 	bl	80002b8 <__aeabi_dsub>
 80090c2:	4603      	mov	r3, r0
 80090c4:	460c      	mov	r4, r1
 80090c6:	4618      	mov	r0, r3
 80090c8:	4621      	mov	r1, r4
 80090ca:	f7f7 fda5 	bl	8000c18 <__aeabi_d2f>
 80090ce:	4602      	mov	r2, r0
 80090d0:	4b3a      	ldr	r3, [pc, #232]	; (80091bc <cppLoop+0x1994>)
 80090d2:	601a      	str	r2, [r3, #0]
 80090d4:	e02b      	b.n	800912e <cppLoop+0x1906>
			else if(selector_fast == 1){
 80090d6:	4b38      	ldr	r3, [pc, #224]	; (80091b8 <cppLoop+0x1990>)
 80090d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80090dc:	2b01      	cmp	r3, #1
 80090de:	d113      	bne.n	8009108 <cppLoop+0x18e0>
				adj_ki_fast = adj_ki_fast - 0.0001;
 80090e0:	4b37      	ldr	r3, [pc, #220]	; (80091c0 <cppLoop+0x1998>)
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	4618      	mov	r0, r3
 80090e6:	f7f7 fa47 	bl	8000578 <__aeabi_f2d>
 80090ea:	a327      	add	r3, pc, #156	; (adr r3, 8009188 <cppLoop+0x1960>)
 80090ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090f0:	f7f7 f8e2 	bl	80002b8 <__aeabi_dsub>
 80090f4:	4603      	mov	r3, r0
 80090f6:	460c      	mov	r4, r1
 80090f8:	4618      	mov	r0, r3
 80090fa:	4621      	mov	r1, r4
 80090fc:	f7f7 fd8c 	bl	8000c18 <__aeabi_d2f>
 8009100:	4602      	mov	r2, r0
 8009102:	4b2f      	ldr	r3, [pc, #188]	; (80091c0 <cppLoop+0x1998>)
 8009104:	601a      	str	r2, [r3, #0]
 8009106:	e012      	b.n	800912e <cppLoop+0x1906>
				adj_kd_fast = adj_kd_fast - 0.000001;
 8009108:	4b2e      	ldr	r3, [pc, #184]	; (80091c4 <cppLoop+0x199c>)
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	4618      	mov	r0, r3
 800910e:	f7f7 fa33 	bl	8000578 <__aeabi_f2d>
 8009112:	a31f      	add	r3, pc, #124	; (adr r3, 8009190 <cppLoop+0x1968>)
 8009114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009118:	f7f7 f8ce 	bl	80002b8 <__aeabi_dsub>
 800911c:	4603      	mov	r3, r0
 800911e:	460c      	mov	r4, r1
 8009120:	4618      	mov	r0, r3
 8009122:	4621      	mov	r1, r4
 8009124:	f7f7 fd78 	bl	8000c18 <__aeabi_d2f>
 8009128:	4602      	mov	r2, r0
 800912a:	4b26      	ldr	r3, [pc, #152]	; (80091c4 <cppLoop+0x199c>)
 800912c:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 800912e:	2152      	movs	r1, #82	; 0x52
 8009130:	4819      	ldr	r0, [pc, #100]	; (8009198 <cppLoop+0x1970>)
 8009132:	f7f8 fe73 	bl	8001e1c <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8009136:	2200      	movs	r2, #0
 8009138:	f04f 31ff 	mov.w	r1, #4294967295
 800913c:	4816      	ldr	r0, [pc, #88]	; (8009198 <cppLoop+0x1970>)
 800913e:	f7f8 ff29 	bl	8001f94 <_ZN3LED2LREaa>
		break;
 8009142:	e2c0      	b.n	80096c6 <cppLoop+0x1e9e>
		else if(joy_stick.getValue() == JOY_D){
 8009144:	481b      	ldr	r0, [pc, #108]	; (80091b4 <cppLoop+0x198c>)
 8009146:	f7f8 fe05 	bl	8001d54 <_ZN8JoyStick8getValueEv>
 800914a:	4603      	mov	r3, r0
 800914c:	2b04      	cmp	r3, #4
 800914e:	bf0c      	ite	eq
 8009150:	2301      	moveq	r3, #1
 8009152:	2300      	movne	r3, #0
 8009154:	b2db      	uxtb	r3, r3
 8009156:	2b00      	cmp	r3, #0
 8009158:	d036      	beq.n	80091c8 <cppLoop+0x19a0>
			led.LR(-1, 1);
 800915a:	2201      	movs	r2, #1
 800915c:	f04f 31ff 	mov.w	r1, #4294967295
 8009160:	480d      	ldr	r0, [pc, #52]	; (8009198 <cppLoop+0x1970>)
 8009162:	f7f8 ff17 	bl	8001f94 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8009166:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800916a:	f000 fbdb 	bl	8009924 <HAL_Delay>
			led.LR(-1, 0);
 800916e:	2200      	movs	r2, #0
 8009170:	f04f 31ff 	mov.w	r1, #4294967295
 8009174:	4808      	ldr	r0, [pc, #32]	; (8009198 <cppLoop+0x1970>)
 8009176:	f7f8 ff0d 	bl	8001f94 <_ZN3LED2LREaa>
		break;
 800917a:	e2a4      	b.n	80096c6 <cppLoop+0x1e9e>
 800917c:	f3af 8000 	nop.w
 8009180:	88e368f1 	.word	0x88e368f1
 8009184:	3ee4f8b5 	.word	0x3ee4f8b5
 8009188:	eb1c432d 	.word	0xeb1c432d
 800918c:	3f1a36e2 	.word	0x3f1a36e2
 8009190:	a0b5ed8d 	.word	0xa0b5ed8d
 8009194:	3eb0c6f7 	.word	0x3eb0c6f7
 8009198:	20000600 	.word	0x20000600
 800919c:	20017dd0 	.word	0x20017dd0
 80091a0:	447a0000 	.word	0x447a0000
 80091a4:	0801a1d8 	.word	0x0801a1d8
 80091a8:	42c80000 	.word	0x42c80000
 80091ac:	461c4000 	.word	0x461c4000
 80091b0:	0801a0d8 	.word	0x0801a0d8
 80091b4:	200005f4 	.word	0x200005f4
 80091b8:	2003d45e 	.word	0x2003d45e
 80091bc:	2003d478 	.word	0x2003d478
 80091c0:	2003d480 	.word	0x2003d480
 80091c4:	2003d488 	.word	0x2003d488
		else if(joy_stick.getValue() == JOY_C){
 80091c8:	48bd      	ldr	r0, [pc, #756]	; (80094c0 <cppLoop+0x1c98>)
 80091ca:	f7f8 fdc3 	bl	8001d54 <_ZN8JoyStick8getValueEv>
 80091ce:	4603      	mov	r3, r0
 80091d0:	2b02      	cmp	r3, #2
 80091d2:	bf0c      	ite	eq
 80091d4:	2301      	moveq	r3, #1
 80091d6:	2300      	movne	r3, #0
 80091d8:	b2db      	uxtb	r3, r3
 80091da:	2b00      	cmp	r3, #0
 80091dc:	f000 8273 	beq.w	80096c6 <cppLoop+0x1e9e>
			led.LR(-1, 1);
 80091e0:	2201      	movs	r2, #1
 80091e2:	f04f 31ff 	mov.w	r1, #4294967295
 80091e6:	48b7      	ldr	r0, [pc, #732]	; (80094c4 <cppLoop+0x1c9c>)
 80091e8:	f7f8 fed4 	bl	8001f94 <_ZN3LED2LREaa>
			HAL_Delay(300);
 80091ec:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80091f0:	f000 fb98 	bl	8009924 <HAL_Delay>
			sd_write_array_float("PARAMS", "KPFAST.TXT", 1, &adj_kp_fast, OVER_WRITE);
 80091f4:	2300      	movs	r3, #0
 80091f6:	9300      	str	r3, [sp, #0]
 80091f8:	4bb3      	ldr	r3, [pc, #716]	; (80094c8 <cppLoop+0x1ca0>)
 80091fa:	2201      	movs	r2, #1
 80091fc:	49b3      	ldr	r1, [pc, #716]	; (80094cc <cppLoop+0x1ca4>)
 80091fe:	48b4      	ldr	r0, [pc, #720]	; (80094d0 <cppLoop+0x1ca8>)
 8009200:	f7f8 f98c 	bl	800151c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KIFAST.TXT", 1, &adj_ki_fast, OVER_WRITE);
 8009204:	2300      	movs	r3, #0
 8009206:	9300      	str	r3, [sp, #0]
 8009208:	4bb2      	ldr	r3, [pc, #712]	; (80094d4 <cppLoop+0x1cac>)
 800920a:	2201      	movs	r2, #1
 800920c:	49b2      	ldr	r1, [pc, #712]	; (80094d8 <cppLoop+0x1cb0>)
 800920e:	48b0      	ldr	r0, [pc, #704]	; (80094d0 <cppLoop+0x1ca8>)
 8009210:	f7f8 f984 	bl	800151c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KDFAST.TXT", 1, &adj_kd_fast, OVER_WRITE);
 8009214:	2300      	movs	r3, #0
 8009216:	9300      	str	r3, [sp, #0]
 8009218:	4bb0      	ldr	r3, [pc, #704]	; (80094dc <cppLoop+0x1cb4>)
 800921a:	2201      	movs	r2, #1
 800921c:	49b0      	ldr	r1, [pc, #704]	; (80094e0 <cppLoop+0x1cb8>)
 800921e:	48ac      	ldr	r0, [pc, #688]	; (80094d0 <cppLoop+0x1ca8>)
 8009220:	f7f8 f97c 	bl	800151c <sd_write_array_float>
			line_trace.setGainFast(adj_kp_fast, adj_ki_fast, adj_kd_fast);
 8009224:	4ba8      	ldr	r3, [pc, #672]	; (80094c8 <cppLoop+0x1ca0>)
 8009226:	edd3 7a00 	vldr	s15, [r3]
 800922a:	4baa      	ldr	r3, [pc, #680]	; (80094d4 <cppLoop+0x1cac>)
 800922c:	ed93 7a00 	vldr	s14, [r3]
 8009230:	4baa      	ldr	r3, [pc, #680]	; (80094dc <cppLoop+0x1cb4>)
 8009232:	edd3 6a00 	vldr	s13, [r3]
 8009236:	eeb0 1a66 	vmov.f32	s2, s13
 800923a:	eef0 0a47 	vmov.f32	s1, s14
 800923e:	eeb0 0a67 	vmov.f32	s0, s15
 8009242:	48a8      	ldr	r0, [pc, #672]	; (80094e4 <cppLoop+0x1cbc>)
 8009244:	f7fa fc01 	bl	8003a4a <_ZN9LineTrace11setGainFastEfff>
			led.LR(-1, 0);
 8009248:	2200      	movs	r2, #0
 800924a:	f04f 31ff 	mov.w	r1, #4294967295
 800924e:	489d      	ldr	r0, [pc, #628]	; (80094c4 <cppLoop+0x1c9c>)
 8009250:	f7f8 fea0 	bl	8001f94 <_ZN3LED2LREaa>
		break;
 8009254:	e237      	b.n	80096c6 <cppLoop+0x1e9e>

	case 10:
		led.fullColor('~');
 8009256:	217e      	movs	r1, #126	; 0x7e
 8009258:	489a      	ldr	r0, [pc, #616]	; (80094c4 <cppLoop+0x1c9c>)
 800925a:	f7f8 fddf 	bl	8001e1c <_ZN3LED9fullColorEc>

		lcd_clear();
 800925e:	f7f7 ff1f 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8009262:	2100      	movs	r1, #0
 8009264:	2000      	movs	r0, #0
 8009266:	f7f7 ff2b 	bl	80010c0 <lcd_locate>
		lcd_printf("Create  ");
 800926a:	489f      	ldr	r0, [pc, #636]	; (80094e8 <cppLoop+0x1cc0>)
 800926c:	f7f7 ff53 	bl	8001116 <lcd_printf>
		lcd_locate(0,1);
 8009270:	2101      	movs	r1, #1
 8009272:	2000      	movs	r0, #0
 8009274:	f7f7 ff24 	bl	80010c0 <lcd_locate>
		lcd_printf("VelTable");
 8009278:	489c      	ldr	r0, [pc, #624]	; (80094ec <cppLoop+0x1cc4>)
 800927a:	f7f7 ff4c 	bl	8001116 <lcd_printf>
		if(joy_stick.getValue() == JOY_C){
 800927e:	4890      	ldr	r0, [pc, #576]	; (80094c0 <cppLoop+0x1c98>)
 8009280:	f7f8 fd68 	bl	8001d54 <_ZN8JoyStick8getValueEv>
 8009284:	4603      	mov	r3, r0
 8009286:	2b02      	cmp	r3, #2
 8009288:	bf0c      	ite	eq
 800928a:	2301      	moveq	r3, #1
 800928c:	2300      	movne	r3, #0
 800928e:	b2db      	uxtb	r3, r3
 8009290:	2b00      	cmp	r3, #0
 8009292:	f000 821a 	beq.w	80096ca <cppLoop+0x1ea2>
			HAL_Delay(500);
 8009296:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800929a:	f000 fb43 	bl	8009924 <HAL_Delay>
			led.LR(-1, 1);
 800929e:	2201      	movs	r2, #1
 80092a0:	f04f 31ff 	mov.w	r1, #4294967295
 80092a4:	4887      	ldr	r0, [pc, #540]	; (80094c4 <cppLoop+0x1c9c>)
 80092a6:	f7f8 fe75 	bl	8001f94 <_ZN3LED2LREaa>

			line_trace.setMode(THIRD_RUNNING);
 80092aa:	2102      	movs	r1, #2
 80092ac:	488d      	ldr	r0, [pc, #564]	; (80094e4 <cppLoop+0x1cbc>)
 80092ae:	f7fb f851 	bl	8004354 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_max_velocity2);
 80092b2:	4b8f      	ldr	r3, [pc, #572]	; (80094f0 <cppLoop+0x1cc8>)
 80092b4:	edd3 7a00 	vldr	s15, [r3]
 80092b8:	eeb0 0a67 	vmov.f32	s0, s15
 80092bc:	4889      	ldr	r0, [pc, #548]	; (80094e4 <cppLoop+0x1cbc>)
 80092be:	f7fa fc37 	bl	8003b30 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity2);
 80092c2:	4b8b      	ldr	r3, [pc, #556]	; (80094f0 <cppLoop+0x1cc8>)
 80092c4:	edd3 7a00 	vldr	s15, [r3]
 80092c8:	eeb0 0a67 	vmov.f32	s0, s15
 80092cc:	4885      	ldr	r0, [pc, #532]	; (80094e4 <cppLoop+0x1cbc>)
 80092ce:	f7fa fc3f 	bl	8003b50 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_max_velocity2);
 80092d2:	4b87      	ldr	r3, [pc, #540]	; (80094f0 <cppLoop+0x1cc8>)
 80092d4:	edd3 7a00 	vldr	s15, [r3]
 80092d8:	eeb0 0a67 	vmov.f32	s0, s15
 80092dc:	4881      	ldr	r0, [pc, #516]	; (80094e4 <cppLoop+0x1cbc>)
 80092de:	f7fa fc57 	bl	8003b90 <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 80092e2:	4880      	ldr	r0, [pc, #512]	; (80094e4 <cppLoop+0x1cbc>)
 80092e4:	f7f9 ff58 	bl	8003198 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			led.LR(-1, 0);
 80092e8:	2200      	movs	r2, #0
 80092ea:	f04f 31ff 	mov.w	r1, #4294967295
 80092ee:	4875      	ldr	r0, [pc, #468]	; (80094c4 <cppLoop+0x1c9c>)
 80092f0:	f7f8 fe50 	bl	8001f94 <_ZN3LED2LREaa>
		}

		break;
 80092f4:	e1e9      	b.n	80096ca <cppLoop+0x1ea2>

	case 11:
		led.fullColor('~');
 80092f6:	217e      	movs	r1, #126	; 0x7e
 80092f8:	4872      	ldr	r0, [pc, #456]	; (80094c4 <cppLoop+0x1c9c>)
 80092fa:	f7f8 fd8f 	bl	8001e1c <_ZN3LED9fullColorEc>

		lcd_clear();
 80092fe:	f7f7 fecf 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8009302:	2100      	movs	r1, #0
 8009304:	2000      	movs	r0, #0
 8009306:	f7f7 fedb 	bl	80010c0 <lcd_locate>
		lcd_printf("Step");
 800930a:	487a      	ldr	r0, [pc, #488]	; (80094f4 <cppLoop+0x1ccc>)
 800930c:	f7f7 ff03 	bl	8001116 <lcd_printf>
		lcd_locate(0,1);
 8009310:	2101      	movs	r1, #1
 8009312:	2000      	movs	r0, #0
 8009314:	f7f7 fed4 	bl	80010c0 <lcd_locate>
		lcd_printf("Record");
 8009318:	4877      	ldr	r0, [pc, #476]	; (80094f8 <cppLoop+0x1cd0>)
 800931a:	f7f7 fefc 	bl	8001116 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800931e:	4868      	ldr	r0, [pc, #416]	; (80094c0 <cppLoop+0x1c98>)
 8009320:	f7f8 fd18 	bl	8001d54 <_ZN8JoyStick8getValueEv>
 8009324:	4603      	mov	r3, r0
 8009326:	2b02      	cmp	r3, #2
 8009328:	bf0c      	ite	eq
 800932a:	2301      	moveq	r3, #1
 800932c:	2300      	movne	r3, #0
 800932e:	b2db      	uxtb	r3, r3
 8009330:	2b00      	cmp	r3, #0
 8009332:	f000 81cc 	beq.w	80096ce <cppLoop+0x1ea6>
			HAL_Delay(1500);
 8009336:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800933a:	f000 faf3 	bl	8009924 <HAL_Delay>
			led.LR(-1, 1);
 800933e:	2201      	movs	r2, #1
 8009340:	f04f 31ff 	mov.w	r1, #4294967295
 8009344:	485f      	ldr	r0, [pc, #380]	; (80094c4 <cppLoop+0x1c9c>)
 8009346:	f7f8 fe25 	bl	8001f94 <_ZN3LED2LREaa>

			logger.start();
 800934a:	486c      	ldr	r0, [pc, #432]	; (80094fc <cppLoop+0x1cd4>)
 800934c:	f7fb fbdc 	bl	8004b08 <_ZN6Logger5startEv>
			motor.setRatio(0.3, -0.3);
 8009350:	ed9f 1b55 	vldr	d1, [pc, #340]	; 80094a8 <cppLoop+0x1c80>
 8009354:	ed9f 0b56 	vldr	d0, [pc, #344]	; 80094b0 <cppLoop+0x1c88>
 8009358:	4869      	ldr	r0, [pc, #420]	; (8009500 <cppLoop+0x1cd8>)
 800935a:	f7fb fc67 	bl	8004c2c <_ZN5Motor8setRatioEdd>

			HAL_Delay(1000);
 800935e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009362:	f000 fadf 	bl	8009924 <HAL_Delay>

			logger.stop();
 8009366:	4865      	ldr	r0, [pc, #404]	; (80094fc <cppLoop+0x1cd4>)
 8009368:	f7fb fbdf 	bl	8004b2a <_ZN6Logger4stopEv>
			motor.setRatio(0.0, 0.0);
 800936c:	ed9f 1b52 	vldr	d1, [pc, #328]	; 80094b8 <cppLoop+0x1c90>
 8009370:	ed9f 0b51 	vldr	d0, [pc, #324]	; 80094b8 <cppLoop+0x1c90>
 8009374:	4862      	ldr	r0, [pc, #392]	; (8009500 <cppLoop+0x1cd8>)
 8009376:	f7fb fc59 	bl	8004c2c <_ZN5Motor8setRatioEdd>

			logger.saveLogs("SYSIDENT", "STEPRES.txt");
 800937a:	4a62      	ldr	r2, [pc, #392]	; (8009504 <cppLoop+0x1cdc>)
 800937c:	4962      	ldr	r1, [pc, #392]	; (8009508 <cppLoop+0x1ce0>)
 800937e:	485f      	ldr	r0, [pc, #380]	; (80094fc <cppLoop+0x1cd4>)
 8009380:	f7fb fae9 	bl	8004956 <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 8009384:	2200      	movs	r2, #0
 8009386:	f04f 31ff 	mov.w	r1, #4294967295
 800938a:	484e      	ldr	r0, [pc, #312]	; (80094c4 <cppLoop+0x1c9c>)
 800938c:	f7f8 fe02 	bl	8001f94 <_ZN3LED2LREaa>
		}
		break;
 8009390:	e19d      	b.n	80096ce <cppLoop+0x1ea6>

	case 12:
		led.fullColor('~');
 8009392:	217e      	movs	r1, #126	; 0x7e
 8009394:	484b      	ldr	r0, [pc, #300]	; (80094c4 <cppLoop+0x1c9c>)
 8009396:	f7f8 fd41 	bl	8001e1c <_ZN3LED9fullColorEc>

		lcd_clear();
 800939a:	f7f7 fe81 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800939e:	2100      	movs	r1, #0
 80093a0:	2000      	movs	r0, #0
 80093a2:	f7f7 fe8d 	bl	80010c0 <lcd_locate>
		lcd_printf("PID");
 80093a6:	4859      	ldr	r0, [pc, #356]	; (800950c <cppLoop+0x1ce4>)
 80093a8:	f7f7 feb5 	bl	8001116 <lcd_printf>
		lcd_locate(0,1);
 80093ac:	2101      	movs	r1, #1
 80093ae:	2000      	movs	r0, #0
 80093b0:	f7f7 fe86 	bl	80010c0 <lcd_locate>
		lcd_printf("Response");
 80093b4:	4856      	ldr	r0, [pc, #344]	; (8009510 <cppLoop+0x1ce8>)
 80093b6:	f7f7 feae 	bl	8001116 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80093ba:	4841      	ldr	r0, [pc, #260]	; (80094c0 <cppLoop+0x1c98>)
 80093bc:	f7f8 fcca 	bl	8001d54 <_ZN8JoyStick8getValueEv>
 80093c0:	4603      	mov	r3, r0
 80093c2:	2b02      	cmp	r3, #2
 80093c4:	bf0c      	ite	eq
 80093c6:	2301      	moveq	r3, #1
 80093c8:	2300      	movne	r3, #0
 80093ca:	b2db      	uxtb	r3, r3
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	f000 8180 	beq.w	80096d2 <cppLoop+0x1eaa>
			HAL_Delay(1500);
 80093d2:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80093d6:	f000 faa5 	bl	8009924 <HAL_Delay>
			led.LR(-1, 1);
 80093da:	2201      	movs	r2, #1
 80093dc:	f04f 31ff 	mov.w	r1, #4294967295
 80093e0:	4838      	ldr	r0, [pc, #224]	; (80094c4 <cppLoop+0x1c9c>)
 80093e2:	f7f8 fdd7 	bl	8001f94 <_ZN3LED2LREaa>

			logger.start();
 80093e6:	4845      	ldr	r0, [pc, #276]	; (80094fc <cppLoop+0x1cd4>)
 80093e8:	f7fb fb8e 	bl	8004b08 <_ZN6Logger5startEv>
			velocity_ctrl.start();
 80093ec:	4849      	ldr	r0, [pc, #292]	; (8009514 <cppLoop+0x1cec>)
 80093ee:	f7fc fb88 	bl	8005b02 <_ZN12VelocityCtrl5startEv>
			velocity_ctrl.setVelocity(0, 3.14);
 80093f2:	eddf 0a49 	vldr	s1, [pc, #292]	; 8009518 <cppLoop+0x1cf0>
 80093f6:	ed9f 0a49 	vldr	s0, [pc, #292]	; 800951c <cppLoop+0x1cf4>
 80093fa:	4846      	ldr	r0, [pc, #280]	; (8009514 <cppLoop+0x1cec>)
 80093fc:	f7fc fb14 	bl	8005a28 <_ZN12VelocityCtrl11setVelocityEff>

			HAL_Delay(1000);
 8009400:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009404:	f000 fa8e 	bl	8009924 <HAL_Delay>

			logger.stop();
 8009408:	483c      	ldr	r0, [pc, #240]	; (80094fc <cppLoop+0x1cd4>)
 800940a:	f7fb fb8e 	bl	8004b2a <_ZN6Logger4stopEv>
			velocity_ctrl.stop();
 800940e:	4841      	ldr	r0, [pc, #260]	; (8009514 <cppLoop+0x1cec>)
 8009410:	f7fc fb8a 	bl	8005b28 <_ZN12VelocityCtrl4stopEv>

			logger.saveLogs("SYSIDENT", "PIDRES.txt");
 8009414:	4a42      	ldr	r2, [pc, #264]	; (8009520 <cppLoop+0x1cf8>)
 8009416:	493c      	ldr	r1, [pc, #240]	; (8009508 <cppLoop+0x1ce0>)
 8009418:	4838      	ldr	r0, [pc, #224]	; (80094fc <cppLoop+0x1cd4>)
 800941a:	f7fb fa9c 	bl	8004956 <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 800941e:	2200      	movs	r2, #0
 8009420:	f04f 31ff 	mov.w	r1, #4294967295
 8009424:	4827      	ldr	r0, [pc, #156]	; (80094c4 <cppLoop+0x1c9c>)
 8009426:	f7f8 fdb5 	bl	8001f94 <_ZN3LED2LREaa>
		}
		break;
 800942a:	e152      	b.n	80096d2 <cppLoop+0x1eaa>

	case 13:

		led.fullColor('~');
 800942c:	217e      	movs	r1, #126	; 0x7e
 800942e:	4825      	ldr	r0, [pc, #148]	; (80094c4 <cppLoop+0x1c9c>)
 8009430:	f7f8 fcf4 	bl	8001e1c <_ZN3LED9fullColorEc>

		lcd_clear();
 8009434:	f7f7 fe34 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8009438:	2100      	movs	r1, #0
 800943a:	2000      	movs	r0, #0
 800943c:	f7f7 fe40 	bl	80010c0 <lcd_locate>
		lcd_printf("Steer");
 8009440:	4838      	ldr	r0, [pc, #224]	; (8009524 <cppLoop+0x1cfc>)
 8009442:	f7f7 fe68 	bl	8001116 <lcd_printf>
		lcd_locate(0,1);
 8009446:	2101      	movs	r1, #1
 8009448:	2000      	movs	r0, #0
 800944a:	f7f7 fe39 	bl	80010c0 <lcd_locate>
		lcd_printf("Trace");
 800944e:	4836      	ldr	r0, [pc, #216]	; (8009528 <cppLoop+0x1d00>)
 8009450:	f7f7 fe61 	bl	8001116 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8009454:	481a      	ldr	r0, [pc, #104]	; (80094c0 <cppLoop+0x1c98>)
 8009456:	f7f8 fc7d 	bl	8001d54 <_ZN8JoyStick8getValueEv>
 800945a:	4603      	mov	r3, r0
 800945c:	2b02      	cmp	r3, #2
 800945e:	bf0c      	ite	eq
 8009460:	2301      	moveq	r3, #1
 8009462:	2300      	movne	r3, #0
 8009464:	b2db      	uxtb	r3, r3
 8009466:	2b00      	cmp	r3, #0
 8009468:	f000 8135 	beq.w	80096d6 <cppLoop+0x1eae>
			HAL_Delay(500);
 800946c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009470:	f000 fa58 	bl	8009924 <HAL_Delay>

			line_trace.setTargetVelocity(0.1);
 8009474:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 800952c <cppLoop+0x1d04>
 8009478:	481a      	ldr	r0, [pc, #104]	; (80094e4 <cppLoop+0x1cbc>)
 800947a:	f7fa fb59 	bl	8003b30 <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(1, -1);
 800947e:	f04f 32ff 	mov.w	r2, #4294967295
 8009482:	2101      	movs	r1, #1
 8009484:	480f      	ldr	r0, [pc, #60]	; (80094c4 <cppLoop+0x1c9c>)
 8009486:	f7f8 fd85 	bl	8001f94 <_ZN3LED2LREaa>

			line_trace.setMode(FIRST_RUNNING);
 800948a:	2100      	movs	r1, #0
 800948c:	4815      	ldr	r0, [pc, #84]	; (80094e4 <cppLoop+0x1cbc>)
 800948e:	f7fa ff61 	bl	8004354 <_ZN9LineTrace7setModeEs>
			line_trace.running();
 8009492:	4814      	ldr	r0, [pc, #80]	; (80094e4 <cppLoop+0x1cbc>)
 8009494:	f7fa fe60 	bl	8004158 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 8009498:	f04f 32ff 	mov.w	r2, #4294967295
 800949c:	2100      	movs	r1, #0
 800949e:	4809      	ldr	r0, [pc, #36]	; (80094c4 <cppLoop+0x1c9c>)
 80094a0:	f7f8 fd78 	bl	8001f94 <_ZN3LED2LREaa>
			sys_ident.inOutputSave();

			led.LR(-1, 0);
		}
		*/
		break;
 80094a4:	e117      	b.n	80096d6 <cppLoop+0x1eae>
 80094a6:	bf00      	nop
 80094a8:	33333333 	.word	0x33333333
 80094ac:	bfd33333 	.word	0xbfd33333
 80094b0:	33333333 	.word	0x33333333
 80094b4:	3fd33333 	.word	0x3fd33333
	...
 80094c0:	200005f4 	.word	0x200005f4
 80094c4:	20000600 	.word	0x20000600
 80094c8:	2003d478 	.word	0x2003d478
 80094cc:	0801a1e4 	.word	0x0801a1e4
 80094d0:	0801a0f0 	.word	0x0801a0f0
 80094d4:	2003d480 	.word	0x2003d480
 80094d8:	0801a1f0 	.word	0x0801a1f0
 80094dc:	2003d488 	.word	0x2003d488
 80094e0:	0801a1fc 	.word	0x0801a1fc
 80094e4:	20017dd0 	.word	0x20017dd0
 80094e8:	0801a208 	.word	0x0801a208
 80094ec:	0801a214 	.word	0x0801a214
 80094f0:	2003d4a0 	.word	0x2003d4a0
 80094f4:	0801a220 	.word	0x0801a220
 80094f8:	0801a228 	.word	0x0801a228
 80094fc:	20000624 	.word	0x20000624
 8009500:	200005fc 	.word	0x200005fc
 8009504:	0801a230 	.word	0x0801a230
 8009508:	0801a23c 	.word	0x0801a23c
 800950c:	0801a248 	.word	0x0801a248
 8009510:	0801a24c 	.word	0x0801a24c
 8009514:	20017d54 	.word	0x20017d54
 8009518:	4048f5c3 	.word	0x4048f5c3
 800951c:	00000000 	.word	0x00000000
 8009520:	0801a258 	.word	0x0801a258
 8009524:	0801a264 	.word	0x0801a264
 8009528:	0801a26c 	.word	0x0801a26c
 800952c:	3dcccccd 	.word	0x3dcccccd

	case 14:
		led.fullColor('W');
 8009530:	2157      	movs	r1, #87	; 0x57
 8009532:	486f      	ldr	r0, [pc, #444]	; (80096f0 <cppLoop+0x1ec8>)
 8009534:	f7f8 fc72 	bl	8001e1c <_ZN3LED9fullColorEc>

		lcd_clear();
 8009538:	f7f7 fdb2 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800953c:	2100      	movs	r1, #0
 800953e:	2000      	movs	r0, #0
 8009540:	f7f7 fdbe 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun2    ");
 8009544:	486b      	ldr	r0, [pc, #428]	; (80096f4 <cppLoop+0x1ecc>)
 8009546:	f7f7 fde6 	bl	8001116 <lcd_printf>
		lcd_locate(0,1);
 800954a:	2101      	movs	r1, #1
 800954c:	2000      	movs	r0, #0
 800954e:	f7f7 fdb7 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity2);
 8009552:	4b69      	ldr	r3, [pc, #420]	; (80096f8 <cppLoop+0x1ed0>)
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	4618      	mov	r0, r3
 8009558:	f7f7 f80e 	bl	8000578 <__aeabi_f2d>
 800955c:	4603      	mov	r3, r0
 800955e:	460c      	mov	r4, r1
 8009560:	461a      	mov	r2, r3
 8009562:	4623      	mov	r3, r4
 8009564:	4865      	ldr	r0, [pc, #404]	; (80096fc <cppLoop+0x1ed4>)
 8009566:	f7f7 fdd6 	bl	8001116 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800956a:	4865      	ldr	r0, [pc, #404]	; (8009700 <cppLoop+0x1ed8>)
 800956c:	f7f8 fbf2 	bl	8001d54 <_ZN8JoyStick8getValueEv>
 8009570:	4603      	mov	r3, r0
 8009572:	2b02      	cmp	r3, #2
 8009574:	bf0c      	ite	eq
 8009576:	2301      	moveq	r3, #1
 8009578:	2300      	movne	r3, #0
 800957a:	b2db      	uxtb	r3, r3
 800957c:	2b00      	cmp	r3, #0
 800957e:	f000 80ac 	beq.w	80096da <cppLoop+0x1eb2>
			HAL_Delay(500);
 8009582:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009586:	f000 f9cd 	bl	8009924 <HAL_Delay>

			led.LR(1, -1);
 800958a:	f04f 32ff 	mov.w	r2, #4294967295
 800958e:	2101      	movs	r1, #1
 8009590:	4857      	ldr	r0, [pc, #348]	; (80096f0 <cppLoop+0x1ec8>)
 8009592:	f7f8 fcff 	bl	8001f94 <_ZN3LED2LREaa>
			line_trace.setMode(THIRD_RUNNING);
 8009596:	2102      	movs	r1, #2
 8009598:	485a      	ldr	r0, [pc, #360]	; (8009704 <cppLoop+0x1edc>)
 800959a:	f7fa fedb 	bl	8004354 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity2);
 800959e:	4b5a      	ldr	r3, [pc, #360]	; (8009708 <cppLoop+0x1ee0>)
 80095a0:	edd3 7a00 	vldr	s15, [r3]
 80095a4:	eeb0 0a67 	vmov.f32	s0, s15
 80095a8:	4856      	ldr	r0, [pc, #344]	; (8009704 <cppLoop+0x1edc>)
 80095aa:	f7fa fac1 	bl	8003b30 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity2);
 80095ae:	4b52      	ldr	r3, [pc, #328]	; (80096f8 <cppLoop+0x1ed0>)
 80095b0:	edd3 7a00 	vldr	s15, [r3]
 80095b4:	eeb0 0a67 	vmov.f32	s0, s15
 80095b8:	4852      	ldr	r0, [pc, #328]	; (8009704 <cppLoop+0x1edc>)
 80095ba:	f7fa fac9 	bl	8003b50 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_max_velocity2);
 80095be:	4b4e      	ldr	r3, [pc, #312]	; (80096f8 <cppLoop+0x1ed0>)
 80095c0:	edd3 7a00 	vldr	s15, [r3]
 80095c4:	eeb0 0a67 	vmov.f32	s0, s15
 80095c8:	484e      	ldr	r0, [pc, #312]	; (8009704 <cppLoop+0x1edc>)
 80095ca:	f7fa fae1 	bl	8003b90 <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 80095ce:	484d      	ldr	r0, [pc, #308]	; (8009704 <cppLoop+0x1edc>)
 80095d0:	f7f9 fde2 	bl	8003198 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			line_trace.running();
 80095d4:	484b      	ldr	r0, [pc, #300]	; (8009704 <cppLoop+0x1edc>)
 80095d6:	f7fa fdbf 	bl	8004158 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 80095da:	f04f 32ff 	mov.w	r2, #4294967295
 80095de:	2100      	movs	r1, #0
 80095e0:	4843      	ldr	r0, [pc, #268]	; (80096f0 <cppLoop+0x1ec8>)
 80095e2:	f7f8 fcd7 	bl	8001f94 <_ZN3LED2LREaa>
		}

		break;
 80095e6:	e078      	b.n	80096da <cppLoop+0x1eb2>

	case 15:
		led.fullColor('W');
 80095e8:	2157      	movs	r1, #87	; 0x57
 80095ea:	4841      	ldr	r0, [pc, #260]	; (80096f0 <cppLoop+0x1ec8>)
 80095ec:	f7f8 fc16 	bl	8001e1c <_ZN3LED9fullColorEc>

		lcd_clear();
 80095f0:	f7f7 fd56 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80095f4:	2100      	movs	r1, #0
 80095f6:	2000      	movs	r0, #0
 80095f8:	f7f7 fd62 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun1    ");
 80095fc:	4843      	ldr	r0, [pc, #268]	; (800970c <cppLoop+0x1ee4>)
 80095fe:	f7f7 fd8a 	bl	8001116 <lcd_printf>
		lcd_locate(0,1);
 8009602:	2101      	movs	r1, #1
 8009604:	2000      	movs	r0, #0
 8009606:	f7f7 fd5b 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity);
 800960a:	4b41      	ldr	r3, [pc, #260]	; (8009710 <cppLoop+0x1ee8>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	4618      	mov	r0, r3
 8009610:	f7f6 ffb2 	bl	8000578 <__aeabi_f2d>
 8009614:	4603      	mov	r3, r0
 8009616:	460c      	mov	r4, r1
 8009618:	461a      	mov	r2, r3
 800961a:	4623      	mov	r3, r4
 800961c:	4837      	ldr	r0, [pc, #220]	; (80096fc <cppLoop+0x1ed4>)
 800961e:	f7f7 fd7a 	bl	8001116 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8009622:	4837      	ldr	r0, [pc, #220]	; (8009700 <cppLoop+0x1ed8>)
 8009624:	f7f8 fb96 	bl	8001d54 <_ZN8JoyStick8getValueEv>
 8009628:	4603      	mov	r3, r0
 800962a:	2b02      	cmp	r3, #2
 800962c:	bf0c      	ite	eq
 800962e:	2301      	moveq	r3, #1
 8009630:	2300      	movne	r3, #0
 8009632:	b2db      	uxtb	r3, r3
 8009634:	2b00      	cmp	r3, #0
 8009636:	d052      	beq.n	80096de <cppLoop+0x1eb6>
			HAL_Delay(500);
 8009638:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800963c:	f000 f972 	bl	8009924 <HAL_Delay>

			led.LR(1, -1);
 8009640:	f04f 32ff 	mov.w	r2, #4294967295
 8009644:	2101      	movs	r1, #1
 8009646:	482a      	ldr	r0, [pc, #168]	; (80096f0 <cppLoop+0x1ec8>)
 8009648:	f7f8 fca4 	bl	8001f94 <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 800964c:	2101      	movs	r1, #1
 800964e:	482d      	ldr	r0, [pc, #180]	; (8009704 <cppLoop+0x1edc>)
 8009650:	f7fa fe80 	bl	8004354 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity);
 8009654:	4b2f      	ldr	r3, [pc, #188]	; (8009714 <cppLoop+0x1eec>)
 8009656:	edd3 7a00 	vldr	s15, [r3]
 800965a:	eeb0 0a67 	vmov.f32	s0, s15
 800965e:	4829      	ldr	r0, [pc, #164]	; (8009704 <cppLoop+0x1edc>)
 8009660:	f7fa fa66 	bl	8003b30 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 8009664:	4b2a      	ldr	r3, [pc, #168]	; (8009710 <cppLoop+0x1ee8>)
 8009666:	edd3 7a00 	vldr	s15, [r3]
 800966a:	eeb0 0a67 	vmov.f32	s0, s15
 800966e:	4825      	ldr	r0, [pc, #148]	; (8009704 <cppLoop+0x1edc>)
 8009670:	f7fa fa6e 	bl	8003b50 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 8009674:	4b27      	ldr	r3, [pc, #156]	; (8009714 <cppLoop+0x1eec>)
 8009676:	edd3 7a00 	vldr	s15, [r3]
 800967a:	eeb0 0a67 	vmov.f32	s0, s15
 800967e:	4821      	ldr	r0, [pc, #132]	; (8009704 <cppLoop+0x1edc>)
 8009680:	f7fa fa86 	bl	8003b90 <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 8009684:	481f      	ldr	r0, [pc, #124]	; (8009704 <cppLoop+0x1edc>)
 8009686:	f7f9 fd87 	bl	8003198 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			line_trace.running();
 800968a:	481e      	ldr	r0, [pc, #120]	; (8009704 <cppLoop+0x1edc>)
 800968c:	f7fa fd64 	bl	8004158 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 8009690:	f04f 32ff 	mov.w	r2, #4294967295
 8009694:	2100      	movs	r1, #0
 8009696:	4816      	ldr	r0, [pc, #88]	; (80096f0 <cppLoop+0x1ec8>)
 8009698:	f7f8 fc7c 	bl	8001f94 <_ZN3LED2LREaa>
		}
		break;
 800969c:	e01f      	b.n	80096de <cppLoop+0x1eb6>

	default:
		break;
 800969e:	bf00      	nop
 80096a0:	e01e      	b.n	80096e0 <cppLoop+0x1eb8>
		break;
 80096a2:	bf00      	nop
 80096a4:	e01c      	b.n	80096e0 <cppLoop+0x1eb8>
		break;
 80096a6:	bf00      	nop
 80096a8:	e01a      	b.n	80096e0 <cppLoop+0x1eb8>
		break;
 80096aa:	bf00      	nop
 80096ac:	e018      	b.n	80096e0 <cppLoop+0x1eb8>
		break;
 80096ae:	bf00      	nop
 80096b0:	e016      	b.n	80096e0 <cppLoop+0x1eb8>
		break;
 80096b2:	bf00      	nop
 80096b4:	e014      	b.n	80096e0 <cppLoop+0x1eb8>
		break;
 80096b6:	bf00      	nop
 80096b8:	e012      	b.n	80096e0 <cppLoop+0x1eb8>
		break;
 80096ba:	bf00      	nop
 80096bc:	e010      	b.n	80096e0 <cppLoop+0x1eb8>
		break;
 80096be:	bf00      	nop
 80096c0:	e00e      	b.n	80096e0 <cppLoop+0x1eb8>
		break;
 80096c2:	bf00      	nop
 80096c4:	e00c      	b.n	80096e0 <cppLoop+0x1eb8>
		break;
 80096c6:	bf00      	nop
 80096c8:	e00a      	b.n	80096e0 <cppLoop+0x1eb8>
		break;
 80096ca:	bf00      	nop
 80096cc:	e008      	b.n	80096e0 <cppLoop+0x1eb8>
		break;
 80096ce:	bf00      	nop
 80096d0:	e006      	b.n	80096e0 <cppLoop+0x1eb8>
		break;
 80096d2:	bf00      	nop
 80096d4:	e004      	b.n	80096e0 <cppLoop+0x1eb8>
		break;
 80096d6:	bf00      	nop
 80096d8:	e002      	b.n	80096e0 <cppLoop+0x1eb8>
		break;
 80096da:	bf00      	nop
 80096dc:	e000      	b.n	80096e0 <cppLoop+0x1eb8>
		break;
 80096de:	bf00      	nop

	}

	HAL_Delay(30);
 80096e0:	201e      	movs	r0, #30
 80096e2:	f000 f91f 	bl	8009924 <HAL_Delay>

}
 80096e6:	bf00      	nop
 80096e8:	3704      	adds	r7, #4
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096ee:	bf00      	nop
 80096f0:	20000600 	.word	0x20000600
 80096f4:	0801a274 	.word	0x0801a274
 80096f8:	2003d4a0 	.word	0x2003d4a0
 80096fc:	0801a114 	.word	0x0801a114
 8009700:	200005f4 	.word	0x200005f4
 8009704:	20017dd0 	.word	0x20017dd0
 8009708:	2003d4b0 	.word	0x2003d4b0
 800970c:	0801a280 	.word	0x0801a280
 8009710:	2003d498 	.word	0x2003d498
 8009714:	2003d4a8 	.word	0x2003d4a8

08009718 <_Z41__static_initialization_and_destruction_0ii>:

void prameterSttingMode()
{

}
 8009718:	b580      	push	{r7, lr}
 800971a:	b088      	sub	sp, #32
 800971c:	af06      	add	r7, sp, #24
 800971e:	6078      	str	r0, [r7, #4]
 8009720:	6039      	str	r1, [r7, #0]
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	2b01      	cmp	r3, #1
 8009726:	d13d      	bne.n	80097a4 <_Z41__static_initialization_and_destruction_0ii+0x8c>
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800972e:	4293      	cmp	r3, r2
 8009730:	d138      	bne.n	80097a4 <_Z41__static_initialization_and_destruction_0ii+0x8c>
LineSensor line_sensor;
 8009732:	481e      	ldr	r0, [pc, #120]	; (80097ac <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8009734:	f7f8 fc66 	bl	8002004 <_ZN10LineSensorC1Ev>
SideSensor side_sensor;
 8009738:	481d      	ldr	r0, [pc, #116]	; (80097b0 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 800973a:	f7fb fddd 	bl	80052f8 <_ZN10SideSensorC1Ev>
JoyStick joy_stick;
 800973e:	481d      	ldr	r0, [pc, #116]	; (80097b4 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8009740:	f7f8 fafc 	bl	8001d3c <_ZN8JoyStickC1Ev>
Motor motor;
 8009744:	481c      	ldr	r0, [pc, #112]	; (80097b8 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8009746:	f7fb fa01 	bl	8004b4c <_ZN5MotorC1Ev>
IMU imu;
 800974a:	481c      	ldr	r0, [pc, #112]	; (80097bc <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 800974c:	f7f8 f902 	bl	8001954 <_ZN3IMUC1Ev>
Logger logger;
 8009750:	481b      	ldr	r0, [pc, #108]	; (80097c0 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8009752:	f7fa ff6d 	bl	8004630 <_ZN6LoggerC1Ev>
Encoder encoder;
 8009756:	481b      	ldr	r0, [pc, #108]	; (80097c4 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009758:	f7f7 fcfd 	bl	8001156 <_ZN7EncoderC1Ev>
VelocityCtrl velocity_ctrl(&motor, &encoder, &imu);
 800975c:	4b17      	ldr	r3, [pc, #92]	; (80097bc <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 800975e:	4a19      	ldr	r2, [pc, #100]	; (80097c4 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009760:	4915      	ldr	r1, [pc, #84]	; (80097b8 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8009762:	4819      	ldr	r0, [pc, #100]	; (80097c8 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009764:	f7fb ffb0 	bl	80056c8 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>
Odometry odometry(&encoder, &imu, &velocity_ctrl);
 8009768:	4b17      	ldr	r3, [pc, #92]	; (80097c8 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 800976a:	4a14      	ldr	r2, [pc, #80]	; (80097bc <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 800976c:	4915      	ldr	r1, [pc, #84]	; (80097c4 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 800976e:	4817      	ldr	r0, [pc, #92]	; (80097cc <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8009770:	f7fb face 	bl	8004d10 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>
LineTrace line_trace(&motor, &line_sensor, &velocity_ctrl, &side_sensor, &encoder, &odometry, &logger, &imu);
 8009774:	4b11      	ldr	r3, [pc, #68]	; (80097bc <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8009776:	9304      	str	r3, [sp, #16]
 8009778:	4b11      	ldr	r3, [pc, #68]	; (80097c0 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 800977a:	9303      	str	r3, [sp, #12]
 800977c:	4b13      	ldr	r3, [pc, #76]	; (80097cc <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 800977e:	9302      	str	r3, [sp, #8]
 8009780:	4b10      	ldr	r3, [pc, #64]	; (80097c4 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009782:	9301      	str	r3, [sp, #4]
 8009784:	4b0a      	ldr	r3, [pc, #40]	; (80097b0 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8009786:	9300      	str	r3, [sp, #0]
 8009788:	4b0f      	ldr	r3, [pc, #60]	; (80097c8 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 800978a:	4a08      	ldr	r2, [pc, #32]	; (80097ac <_Z41__static_initialization_and_destruction_0ii+0x94>)
 800978c:	490a      	ldr	r1, [pc, #40]	; (80097b8 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 800978e:	4810      	ldr	r0, [pc, #64]	; (80097d0 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009790:	f7f8 ff62 	bl	8002658 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU>
SystemIdentification sys_ident(&logger, &motor);
 8009794:	4a08      	ldr	r2, [pc, #32]	; (80097b8 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8009796:	490a      	ldr	r1, [pc, #40]	; (80097c0 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8009798:	480e      	ldr	r0, [pc, #56]	; (80097d4 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 800979a:	f7fb fef3 	bl	8005584 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>
PathFollowing path_following;
 800979e:	480e      	ldr	r0, [pc, #56]	; (80097d8 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 80097a0:	f7fb fc36 	bl	8005010 <_ZN13PathFollowingC1Ev>
}
 80097a4:	bf00      	nop
 80097a6:	3708      	adds	r7, #8
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd80      	pop	{r7, pc}
 80097ac:	200002f4 	.word	0x200002f4
 80097b0:	200005ec 	.word	0x200005ec
 80097b4:	200005f4 	.word	0x200005f4
 80097b8:	200005fc 	.word	0x200005fc
 80097bc:	20000610 	.word	0x20000610
 80097c0:	20000624 	.word	0x20000624
 80097c4:	20017d34 	.word	0x20017d34
 80097c8:	20017d54 	.word	0x20017d54
 80097cc:	20017d90 	.word	0x20017d90
 80097d0:	20017dd0 	.word	0x20017dd0
 80097d4:	20025b1c 	.word	0x20025b1c
 80097d8:	20025d28 	.word	0x20025d28

080097dc <_GLOBAL__sub_I_line_sensor>:
 80097dc:	b580      	push	{r7, lr}
 80097de:	af00      	add	r7, sp, #0
 80097e0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80097e4:	2001      	movs	r0, #1
 80097e6:	f7ff ff97 	bl	8009718 <_Z41__static_initialization_and_destruction_0ii>
 80097ea:	bd80      	pop	{r7, pc}

080097ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80097ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009824 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80097f0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80097f2:	e003      	b.n	80097fc <LoopCopyDataInit>

080097f4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80097f4:	4b0c      	ldr	r3, [pc, #48]	; (8009828 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80097f6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80097f8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80097fa:	3104      	adds	r1, #4

080097fc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80097fc:	480b      	ldr	r0, [pc, #44]	; (800982c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80097fe:	4b0c      	ldr	r3, [pc, #48]	; (8009830 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8009800:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8009802:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009804:	d3f6      	bcc.n	80097f4 <CopyDataInit>
  ldr  r2, =_sbss
 8009806:	4a0b      	ldr	r2, [pc, #44]	; (8009834 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8009808:	e002      	b.n	8009810 <LoopFillZerobss>

0800980a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800980a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800980c:	f842 3b04 	str.w	r3, [r2], #4

08009810 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8009810:	4b09      	ldr	r3, [pc, #36]	; (8009838 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8009812:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009814:	d3f9      	bcc.n	800980a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8009816:	f7fd fee5 	bl	80075e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800981a:	f00c f819 	bl	8015850 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800981e:	f7fc fa1f 	bl	8005c60 <main>
  bx  lr    
 8009822:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8009824:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8009828:	0801a880 	.word	0x0801a880
  ldr  r0, =_sdata
 800982c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8009830:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8009834:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8009838:	20041eb8 	.word	0x20041eb8

0800983c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800983c:	e7fe      	b.n	800983c <ADC_IRQHandler>
	...

08009840 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009844:	4b0e      	ldr	r3, [pc, #56]	; (8009880 <HAL_Init+0x40>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	4a0d      	ldr	r2, [pc, #52]	; (8009880 <HAL_Init+0x40>)
 800984a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800984e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8009850:	4b0b      	ldr	r3, [pc, #44]	; (8009880 <HAL_Init+0x40>)
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	4a0a      	ldr	r2, [pc, #40]	; (8009880 <HAL_Init+0x40>)
 8009856:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800985a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800985c:	4b08      	ldr	r3, [pc, #32]	; (8009880 <HAL_Init+0x40>)
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	4a07      	ldr	r2, [pc, #28]	; (8009880 <HAL_Init+0x40>)
 8009862:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009866:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009868:	2003      	movs	r0, #3
 800986a:	f000 fd53 	bl	800a314 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800986e:	2000      	movs	r0, #0
 8009870:	f000 f808 	bl	8009884 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009874:	f7fd f906 	bl	8006a84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009878:	2300      	movs	r3, #0
}
 800987a:	4618      	mov	r0, r3
 800987c:	bd80      	pop	{r7, pc}
 800987e:	bf00      	nop
 8009880:	40023c00 	.word	0x40023c00

08009884 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b082      	sub	sp, #8
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800988c:	4b12      	ldr	r3, [pc, #72]	; (80098d8 <HAL_InitTick+0x54>)
 800988e:	681a      	ldr	r2, [r3, #0]
 8009890:	4b12      	ldr	r3, [pc, #72]	; (80098dc <HAL_InitTick+0x58>)
 8009892:	781b      	ldrb	r3, [r3, #0]
 8009894:	4619      	mov	r1, r3
 8009896:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800989a:	fbb3 f3f1 	udiv	r3, r3, r1
 800989e:	fbb2 f3f3 	udiv	r3, r2, r3
 80098a2:	4618      	mov	r0, r3
 80098a4:	f000 fd6b 	bl	800a37e <HAL_SYSTICK_Config>
 80098a8:	4603      	mov	r3, r0
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d001      	beq.n	80098b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80098ae:	2301      	movs	r3, #1
 80098b0:	e00e      	b.n	80098d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2b0f      	cmp	r3, #15
 80098b6:	d80a      	bhi.n	80098ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80098b8:	2200      	movs	r2, #0
 80098ba:	6879      	ldr	r1, [r7, #4]
 80098bc:	f04f 30ff 	mov.w	r0, #4294967295
 80098c0:	f000 fd33 	bl	800a32a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80098c4:	4a06      	ldr	r2, [pc, #24]	; (80098e0 <HAL_InitTick+0x5c>)
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80098ca:	2300      	movs	r3, #0
 80098cc:	e000      	b.n	80098d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80098ce:	2301      	movs	r3, #1
}
 80098d0:	4618      	mov	r0, r3
 80098d2:	3708      	adds	r7, #8
 80098d4:	46bd      	mov	sp, r7
 80098d6:	bd80      	pop	{r7, pc}
 80098d8:	20000000 	.word	0x20000000
 80098dc:	20000008 	.word	0x20000008
 80098e0:	20000004 	.word	0x20000004

080098e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80098e4:	b480      	push	{r7}
 80098e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80098e8:	4b06      	ldr	r3, [pc, #24]	; (8009904 <HAL_IncTick+0x20>)
 80098ea:	781b      	ldrb	r3, [r3, #0]
 80098ec:	461a      	mov	r2, r3
 80098ee:	4b06      	ldr	r3, [pc, #24]	; (8009908 <HAL_IncTick+0x24>)
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	4413      	add	r3, r2
 80098f4:	4a04      	ldr	r2, [pc, #16]	; (8009908 <HAL_IncTick+0x24>)
 80098f6:	6013      	str	r3, [r2, #0]
}
 80098f8:	bf00      	nop
 80098fa:	46bd      	mov	sp, r7
 80098fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009900:	4770      	bx	lr
 8009902:	bf00      	nop
 8009904:	20000008 	.word	0x20000008
 8009908:	2003fe40 	.word	0x2003fe40

0800990c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800990c:	b480      	push	{r7}
 800990e:	af00      	add	r7, sp, #0
  return uwTick;
 8009910:	4b03      	ldr	r3, [pc, #12]	; (8009920 <HAL_GetTick+0x14>)
 8009912:	681b      	ldr	r3, [r3, #0]
}
 8009914:	4618      	mov	r0, r3
 8009916:	46bd      	mov	sp, r7
 8009918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991c:	4770      	bx	lr
 800991e:	bf00      	nop
 8009920:	2003fe40 	.word	0x2003fe40

08009924 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b084      	sub	sp, #16
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800992c:	f7ff ffee 	bl	800990c <HAL_GetTick>
 8009930:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800993c:	d005      	beq.n	800994a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800993e:	4b0a      	ldr	r3, [pc, #40]	; (8009968 <HAL_Delay+0x44>)
 8009940:	781b      	ldrb	r3, [r3, #0]
 8009942:	461a      	mov	r2, r3
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	4413      	add	r3, r2
 8009948:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800994a:	bf00      	nop
 800994c:	f7ff ffde 	bl	800990c <HAL_GetTick>
 8009950:	4602      	mov	r2, r0
 8009952:	68bb      	ldr	r3, [r7, #8]
 8009954:	1ad3      	subs	r3, r2, r3
 8009956:	68fa      	ldr	r2, [r7, #12]
 8009958:	429a      	cmp	r2, r3
 800995a:	d8f7      	bhi.n	800994c <HAL_Delay+0x28>
  {
  }
}
 800995c:	bf00      	nop
 800995e:	bf00      	nop
 8009960:	3710      	adds	r7, #16
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}
 8009966:	bf00      	nop
 8009968:	20000008 	.word	0x20000008

0800996c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b084      	sub	sp, #16
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009974:	2300      	movs	r3, #0
 8009976:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d101      	bne.n	8009982 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800997e:	2301      	movs	r3, #1
 8009980:	e033      	b.n	80099ea <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009986:	2b00      	cmp	r3, #0
 8009988:	d109      	bne.n	800999e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	f7fd f8a2 	bl	8006ad4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2200      	movs	r2, #0
 8009994:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2200      	movs	r2, #0
 800999a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099a2:	f003 0310 	and.w	r3, r3, #16
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d118      	bne.n	80099dc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099ae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80099b2:	f023 0302 	bic.w	r3, r3, #2
 80099b6:	f043 0202 	orr.w	r2, r3, #2
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f000 fa5a 	bl	8009e78 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2200      	movs	r2, #0
 80099c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099ce:	f023 0303 	bic.w	r3, r3, #3
 80099d2:	f043 0201 	orr.w	r2, r3, #1
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	641a      	str	r2, [r3, #64]	; 0x40
 80099da:	e001      	b.n	80099e0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80099dc:	2301      	movs	r3, #1
 80099de:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2200      	movs	r2, #0
 80099e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80099e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	3710      	adds	r7, #16
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd80      	pop	{r7, pc}
	...

080099f4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b086      	sub	sp, #24
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	60f8      	str	r0, [r7, #12]
 80099fc:	60b9      	str	r1, [r7, #8]
 80099fe:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8009a00:	2300      	movs	r3, #0
 8009a02:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a0a:	2b01      	cmp	r3, #1
 8009a0c:	d101      	bne.n	8009a12 <HAL_ADC_Start_DMA+0x1e>
 8009a0e:	2302      	movs	r3, #2
 8009a10:	e0cc      	b.n	8009bac <HAL_ADC_Start_DMA+0x1b8>
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	2201      	movs	r2, #1
 8009a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	689b      	ldr	r3, [r3, #8]
 8009a20:	f003 0301 	and.w	r3, r3, #1
 8009a24:	2b01      	cmp	r3, #1
 8009a26:	d018      	beq.n	8009a5a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	689a      	ldr	r2, [r3, #8]
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	f042 0201 	orr.w	r2, r2, #1
 8009a36:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8009a38:	4b5e      	ldr	r3, [pc, #376]	; (8009bb4 <HAL_ADC_Start_DMA+0x1c0>)
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	4a5e      	ldr	r2, [pc, #376]	; (8009bb8 <HAL_ADC_Start_DMA+0x1c4>)
 8009a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8009a42:	0c9a      	lsrs	r2, r3, #18
 8009a44:	4613      	mov	r3, r2
 8009a46:	005b      	lsls	r3, r3, #1
 8009a48:	4413      	add	r3, r2
 8009a4a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8009a4c:	e002      	b.n	8009a54 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8009a4e:	693b      	ldr	r3, [r7, #16]
 8009a50:	3b01      	subs	r3, #1
 8009a52:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8009a54:	693b      	ldr	r3, [r7, #16]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d1f9      	bne.n	8009a4e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	689b      	ldr	r3, [r3, #8]
 8009a60:	f003 0301 	and.w	r3, r3, #1
 8009a64:	2b01      	cmp	r3, #1
 8009a66:	f040 80a0 	bne.w	8009baa <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a6e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8009a72:	f023 0301 	bic.w	r3, r3, #1
 8009a76:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	685b      	ldr	r3, [r3, #4]
 8009a84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d007      	beq.n	8009a9c <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a90:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8009a94:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aa0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009aa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009aa8:	d106      	bne.n	8009ab8 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009aae:	f023 0206 	bic.w	r2, r3, #6
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	645a      	str	r2, [r3, #68]	; 0x44
 8009ab6:	e002      	b.n	8009abe <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	2200      	movs	r2, #0
 8009abc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009ac6:	4b3d      	ldr	r3, [pc, #244]	; (8009bbc <HAL_ADC_Start_DMA+0x1c8>)
 8009ac8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ace:	4a3c      	ldr	r2, [pc, #240]	; (8009bc0 <HAL_ADC_Start_DMA+0x1cc>)
 8009ad0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ad6:	4a3b      	ldr	r2, [pc, #236]	; (8009bc4 <HAL_ADC_Start_DMA+0x1d0>)
 8009ad8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ade:	4a3a      	ldr	r2, [pc, #232]	; (8009bc8 <HAL_ADC_Start_DMA+0x1d4>)
 8009ae0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8009aea:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	685a      	ldr	r2, [r3, #4]
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8009afa:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	689a      	ldr	r2, [r3, #8]
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009b0a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	334c      	adds	r3, #76	; 0x4c
 8009b16:	4619      	mov	r1, r3
 8009b18:	68ba      	ldr	r2, [r7, #8]
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	f000 fcea 	bl	800a4f4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8009b20:	697b      	ldr	r3, [r7, #20]
 8009b22:	685b      	ldr	r3, [r3, #4]
 8009b24:	f003 031f 	and.w	r3, r3, #31
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d12a      	bne.n	8009b82 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	4a26      	ldr	r2, [pc, #152]	; (8009bcc <HAL_ADC_Start_DMA+0x1d8>)
 8009b32:	4293      	cmp	r3, r2
 8009b34:	d015      	beq.n	8009b62 <HAL_ADC_Start_DMA+0x16e>
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	4a25      	ldr	r2, [pc, #148]	; (8009bd0 <HAL_ADC_Start_DMA+0x1dc>)
 8009b3c:	4293      	cmp	r3, r2
 8009b3e:	d105      	bne.n	8009b4c <HAL_ADC_Start_DMA+0x158>
 8009b40:	4b1e      	ldr	r3, [pc, #120]	; (8009bbc <HAL_ADC_Start_DMA+0x1c8>)
 8009b42:	685b      	ldr	r3, [r3, #4]
 8009b44:	f003 031f 	and.w	r3, r3, #31
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d00a      	beq.n	8009b62 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	4a20      	ldr	r2, [pc, #128]	; (8009bd4 <HAL_ADC_Start_DMA+0x1e0>)
 8009b52:	4293      	cmp	r3, r2
 8009b54:	d129      	bne.n	8009baa <HAL_ADC_Start_DMA+0x1b6>
 8009b56:	4b19      	ldr	r3, [pc, #100]	; (8009bbc <HAL_ADC_Start_DMA+0x1c8>)
 8009b58:	685b      	ldr	r3, [r3, #4]
 8009b5a:	f003 0310 	and.w	r3, r3, #16
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d123      	bne.n	8009baa <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	689b      	ldr	r3, [r3, #8]
 8009b68:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d11c      	bne.n	8009baa <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	689a      	ldr	r2, [r3, #8]
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009b7e:	609a      	str	r2, [r3, #8]
 8009b80:	e013      	b.n	8009baa <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	4a11      	ldr	r2, [pc, #68]	; (8009bcc <HAL_ADC_Start_DMA+0x1d8>)
 8009b88:	4293      	cmp	r3, r2
 8009b8a:	d10e      	bne.n	8009baa <HAL_ADC_Start_DMA+0x1b6>
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	689b      	ldr	r3, [r3, #8]
 8009b92:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d107      	bne.n	8009baa <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	689a      	ldr	r2, [r3, #8]
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009ba8:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8009baa:	2300      	movs	r3, #0
}
 8009bac:	4618      	mov	r0, r3
 8009bae:	3718      	adds	r7, #24
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	bd80      	pop	{r7, pc}
 8009bb4:	20000000 	.word	0x20000000
 8009bb8:	431bde83 	.word	0x431bde83
 8009bbc:	40012300 	.word	0x40012300
 8009bc0:	0800a071 	.word	0x0800a071
 8009bc4:	0800a12b 	.word	0x0800a12b
 8009bc8:	0800a147 	.word	0x0800a147
 8009bcc:	40012000 	.word	0x40012000
 8009bd0:	40012100 	.word	0x40012100
 8009bd4:	40012200 	.word	0x40012200

08009bd8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8009bd8:	b480      	push	{r7}
 8009bda:	b083      	sub	sp, #12
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8009be0:	bf00      	nop
 8009be2:	370c      	adds	r7, #12
 8009be4:	46bd      	mov	sp, r7
 8009be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bea:	4770      	bx	lr

08009bec <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8009bec:	b480      	push	{r7}
 8009bee:	b083      	sub	sp, #12
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8009bf4:	bf00      	nop
 8009bf6:	370c      	adds	r7, #12
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfe:	4770      	bx	lr

08009c00 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8009c00:	b480      	push	{r7}
 8009c02:	b083      	sub	sp, #12
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8009c08:	bf00      	nop
 8009c0a:	370c      	adds	r7, #12
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c12:	4770      	bx	lr

08009c14 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8009c14:	b480      	push	{r7}
 8009c16:	b085      	sub	sp, #20
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
 8009c1c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8009c1e:	2300      	movs	r3, #0
 8009c20:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c28:	2b01      	cmp	r3, #1
 8009c2a:	d101      	bne.n	8009c30 <HAL_ADC_ConfigChannel+0x1c>
 8009c2c:	2302      	movs	r3, #2
 8009c2e:	e113      	b.n	8009e58 <HAL_ADC_ConfigChannel+0x244>
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2201      	movs	r2, #1
 8009c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	2b09      	cmp	r3, #9
 8009c3e:	d925      	bls.n	8009c8c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	68d9      	ldr	r1, [r3, #12]
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	b29b      	uxth	r3, r3
 8009c4c:	461a      	mov	r2, r3
 8009c4e:	4613      	mov	r3, r2
 8009c50:	005b      	lsls	r3, r3, #1
 8009c52:	4413      	add	r3, r2
 8009c54:	3b1e      	subs	r3, #30
 8009c56:	2207      	movs	r2, #7
 8009c58:	fa02 f303 	lsl.w	r3, r2, r3
 8009c5c:	43da      	mvns	r2, r3
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	400a      	ands	r2, r1
 8009c64:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	68d9      	ldr	r1, [r3, #12]
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	689a      	ldr	r2, [r3, #8]
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	b29b      	uxth	r3, r3
 8009c76:	4618      	mov	r0, r3
 8009c78:	4603      	mov	r3, r0
 8009c7a:	005b      	lsls	r3, r3, #1
 8009c7c:	4403      	add	r3, r0
 8009c7e:	3b1e      	subs	r3, #30
 8009c80:	409a      	lsls	r2, r3
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	430a      	orrs	r2, r1
 8009c88:	60da      	str	r2, [r3, #12]
 8009c8a:	e022      	b.n	8009cd2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	6919      	ldr	r1, [r3, #16]
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	b29b      	uxth	r3, r3
 8009c98:	461a      	mov	r2, r3
 8009c9a:	4613      	mov	r3, r2
 8009c9c:	005b      	lsls	r3, r3, #1
 8009c9e:	4413      	add	r3, r2
 8009ca0:	2207      	movs	r2, #7
 8009ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8009ca6:	43da      	mvns	r2, r3
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	400a      	ands	r2, r1
 8009cae:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	6919      	ldr	r1, [r3, #16]
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	689a      	ldr	r2, [r3, #8]
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	b29b      	uxth	r3, r3
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	005b      	lsls	r3, r3, #1
 8009cc6:	4403      	add	r3, r0
 8009cc8:	409a      	lsls	r2, r3
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	430a      	orrs	r2, r1
 8009cd0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	685b      	ldr	r3, [r3, #4]
 8009cd6:	2b06      	cmp	r3, #6
 8009cd8:	d824      	bhi.n	8009d24 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	685a      	ldr	r2, [r3, #4]
 8009ce4:	4613      	mov	r3, r2
 8009ce6:	009b      	lsls	r3, r3, #2
 8009ce8:	4413      	add	r3, r2
 8009cea:	3b05      	subs	r3, #5
 8009cec:	221f      	movs	r2, #31
 8009cee:	fa02 f303 	lsl.w	r3, r2, r3
 8009cf2:	43da      	mvns	r2, r3
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	400a      	ands	r2, r1
 8009cfa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	b29b      	uxth	r3, r3
 8009d08:	4618      	mov	r0, r3
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	685a      	ldr	r2, [r3, #4]
 8009d0e:	4613      	mov	r3, r2
 8009d10:	009b      	lsls	r3, r3, #2
 8009d12:	4413      	add	r3, r2
 8009d14:	3b05      	subs	r3, #5
 8009d16:	fa00 f203 	lsl.w	r2, r0, r3
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	430a      	orrs	r2, r1
 8009d20:	635a      	str	r2, [r3, #52]	; 0x34
 8009d22:	e04c      	b.n	8009dbe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	685b      	ldr	r3, [r3, #4]
 8009d28:	2b0c      	cmp	r3, #12
 8009d2a:	d824      	bhi.n	8009d76 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	685a      	ldr	r2, [r3, #4]
 8009d36:	4613      	mov	r3, r2
 8009d38:	009b      	lsls	r3, r3, #2
 8009d3a:	4413      	add	r3, r2
 8009d3c:	3b23      	subs	r3, #35	; 0x23
 8009d3e:	221f      	movs	r2, #31
 8009d40:	fa02 f303 	lsl.w	r3, r2, r3
 8009d44:	43da      	mvns	r2, r3
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	400a      	ands	r2, r1
 8009d4c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	b29b      	uxth	r3, r3
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	685a      	ldr	r2, [r3, #4]
 8009d60:	4613      	mov	r3, r2
 8009d62:	009b      	lsls	r3, r3, #2
 8009d64:	4413      	add	r3, r2
 8009d66:	3b23      	subs	r3, #35	; 0x23
 8009d68:	fa00 f203 	lsl.w	r2, r0, r3
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	430a      	orrs	r2, r1
 8009d72:	631a      	str	r2, [r3, #48]	; 0x30
 8009d74:	e023      	b.n	8009dbe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	685a      	ldr	r2, [r3, #4]
 8009d80:	4613      	mov	r3, r2
 8009d82:	009b      	lsls	r3, r3, #2
 8009d84:	4413      	add	r3, r2
 8009d86:	3b41      	subs	r3, #65	; 0x41
 8009d88:	221f      	movs	r2, #31
 8009d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8009d8e:	43da      	mvns	r2, r3
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	400a      	ands	r2, r1
 8009d96:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	b29b      	uxth	r3, r3
 8009da4:	4618      	mov	r0, r3
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	685a      	ldr	r2, [r3, #4]
 8009daa:	4613      	mov	r3, r2
 8009dac:	009b      	lsls	r3, r3, #2
 8009dae:	4413      	add	r3, r2
 8009db0:	3b41      	subs	r3, #65	; 0x41
 8009db2:	fa00 f203 	lsl.w	r2, r0, r3
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	430a      	orrs	r2, r1
 8009dbc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009dbe:	4b29      	ldr	r3, [pc, #164]	; (8009e64 <HAL_ADC_ConfigChannel+0x250>)
 8009dc0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	4a28      	ldr	r2, [pc, #160]	; (8009e68 <HAL_ADC_ConfigChannel+0x254>)
 8009dc8:	4293      	cmp	r3, r2
 8009dca:	d10f      	bne.n	8009dec <HAL_ADC_ConfigChannel+0x1d8>
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	2b12      	cmp	r3, #18
 8009dd2:	d10b      	bne.n	8009dec <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	685b      	ldr	r3, [r3, #4]
 8009dd8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	685b      	ldr	r3, [r3, #4]
 8009de4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	4a1d      	ldr	r2, [pc, #116]	; (8009e68 <HAL_ADC_ConfigChannel+0x254>)
 8009df2:	4293      	cmp	r3, r2
 8009df4:	d12b      	bne.n	8009e4e <HAL_ADC_ConfigChannel+0x23a>
 8009df6:	683b      	ldr	r3, [r7, #0]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	4a1c      	ldr	r2, [pc, #112]	; (8009e6c <HAL_ADC_ConfigChannel+0x258>)
 8009dfc:	4293      	cmp	r3, r2
 8009dfe:	d003      	beq.n	8009e08 <HAL_ADC_ConfigChannel+0x1f4>
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	2b11      	cmp	r3, #17
 8009e06:	d122      	bne.n	8009e4e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	685b      	ldr	r3, [r3, #4]
 8009e0c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	685b      	ldr	r3, [r3, #4]
 8009e18:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	4a11      	ldr	r2, [pc, #68]	; (8009e6c <HAL_ADC_ConfigChannel+0x258>)
 8009e26:	4293      	cmp	r3, r2
 8009e28:	d111      	bne.n	8009e4e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8009e2a:	4b11      	ldr	r3, [pc, #68]	; (8009e70 <HAL_ADC_ConfigChannel+0x25c>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	4a11      	ldr	r2, [pc, #68]	; (8009e74 <HAL_ADC_ConfigChannel+0x260>)
 8009e30:	fba2 2303 	umull	r2, r3, r2, r3
 8009e34:	0c9a      	lsrs	r2, r3, #18
 8009e36:	4613      	mov	r3, r2
 8009e38:	009b      	lsls	r3, r3, #2
 8009e3a:	4413      	add	r3, r2
 8009e3c:	005b      	lsls	r3, r3, #1
 8009e3e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8009e40:	e002      	b.n	8009e48 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	3b01      	subs	r3, #1
 8009e46:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8009e48:	68bb      	ldr	r3, [r7, #8]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d1f9      	bne.n	8009e42 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	2200      	movs	r2, #0
 8009e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8009e56:	2300      	movs	r3, #0
}
 8009e58:	4618      	mov	r0, r3
 8009e5a:	3714      	adds	r7, #20
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e62:	4770      	bx	lr
 8009e64:	40012300 	.word	0x40012300
 8009e68:	40012000 	.word	0x40012000
 8009e6c:	10000012 	.word	0x10000012
 8009e70:	20000000 	.word	0x20000000
 8009e74:	431bde83 	.word	0x431bde83

08009e78 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009e78:	b480      	push	{r7}
 8009e7a:	b085      	sub	sp, #20
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009e80:	4b79      	ldr	r3, [pc, #484]	; (800a068 <ADC_Init+0x1f0>)
 8009e82:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	685b      	ldr	r3, [r3, #4]
 8009e88:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	685a      	ldr	r2, [r3, #4]
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	685b      	ldr	r3, [r3, #4]
 8009e98:	431a      	orrs	r2, r3
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	685a      	ldr	r2, [r3, #4]
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009eac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	6859      	ldr	r1, [r3, #4]
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	691b      	ldr	r3, [r3, #16]
 8009eb8:	021a      	lsls	r2, r3, #8
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	430a      	orrs	r2, r1
 8009ec0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	685a      	ldr	r2, [r3, #4]
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8009ed0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	6859      	ldr	r1, [r3, #4]
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	689a      	ldr	r2, [r3, #8]
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	430a      	orrs	r2, r1
 8009ee2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	689a      	ldr	r2, [r3, #8]
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009ef2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	6899      	ldr	r1, [r3, #8]
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	68da      	ldr	r2, [r3, #12]
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	430a      	orrs	r2, r1
 8009f04:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f0a:	4a58      	ldr	r2, [pc, #352]	; (800a06c <ADC_Init+0x1f4>)
 8009f0c:	4293      	cmp	r3, r2
 8009f0e:	d022      	beq.n	8009f56 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	689a      	ldr	r2, [r3, #8]
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009f1e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	6899      	ldr	r1, [r3, #8]
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	430a      	orrs	r2, r1
 8009f30:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	689a      	ldr	r2, [r3, #8]
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009f40:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	6899      	ldr	r1, [r3, #8]
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	430a      	orrs	r2, r1
 8009f52:	609a      	str	r2, [r3, #8]
 8009f54:	e00f      	b.n	8009f76 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	689a      	ldr	r2, [r3, #8]
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009f64:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	689a      	ldr	r2, [r3, #8]
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009f74:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	689a      	ldr	r2, [r3, #8]
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	f022 0202 	bic.w	r2, r2, #2
 8009f84:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	6899      	ldr	r1, [r3, #8]
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	7e1b      	ldrb	r3, [r3, #24]
 8009f90:	005a      	lsls	r2, r3, #1
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	430a      	orrs	r2, r1
 8009f98:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d01b      	beq.n	8009fdc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	685a      	ldr	r2, [r3, #4]
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009fb2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	685a      	ldr	r2, [r3, #4]
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8009fc2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	6859      	ldr	r1, [r3, #4]
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fce:	3b01      	subs	r3, #1
 8009fd0:	035a      	lsls	r2, r3, #13
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	430a      	orrs	r2, r1
 8009fd8:	605a      	str	r2, [r3, #4]
 8009fda:	e007      	b.n	8009fec <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	685a      	ldr	r2, [r3, #4]
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009fea:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8009ffa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	69db      	ldr	r3, [r3, #28]
 800a006:	3b01      	subs	r3, #1
 800a008:	051a      	lsls	r2, r3, #20
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	430a      	orrs	r2, r1
 800a010:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	689a      	ldr	r2, [r3, #8]
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a020:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	6899      	ldr	r1, [r3, #8]
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a02e:	025a      	lsls	r2, r3, #9
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	430a      	orrs	r2, r1
 800a036:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	689a      	ldr	r2, [r3, #8]
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a046:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	6899      	ldr	r1, [r3, #8]
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	695b      	ldr	r3, [r3, #20]
 800a052:	029a      	lsls	r2, r3, #10
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	430a      	orrs	r2, r1
 800a05a:	609a      	str	r2, [r3, #8]
}
 800a05c:	bf00      	nop
 800a05e:	3714      	adds	r7, #20
 800a060:	46bd      	mov	sp, r7
 800a062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a066:	4770      	bx	lr
 800a068:	40012300 	.word	0x40012300
 800a06c:	0f000001 	.word	0x0f000001

0800a070 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b084      	sub	sp, #16
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a07c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a082:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a086:	2b00      	cmp	r3, #0
 800a088:	d13c      	bne.n	800a104 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a08e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	689b      	ldr	r3, [r3, #8]
 800a09c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d12b      	bne.n	800a0fc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d127      	bne.n	800a0fc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0b2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d006      	beq.n	800a0c8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	689b      	ldr	r3, [r3, #8]
 800a0c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d119      	bne.n	800a0fc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	685a      	ldr	r2, [r3, #4]
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	f022 0220 	bic.w	r2, r2, #32
 800a0d6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d105      	bne.n	800a0fc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0f4:	f043 0201 	orr.w	r2, r3, #1
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800a0fc:	68f8      	ldr	r0, [r7, #12]
 800a0fe:	f7ff fd6b 	bl	8009bd8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800a102:	e00e      	b.n	800a122 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a108:	f003 0310 	and.w	r3, r3, #16
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d003      	beq.n	800a118 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800a110:	68f8      	ldr	r0, [r7, #12]
 800a112:	f7ff fd75 	bl	8009c00 <HAL_ADC_ErrorCallback>
}
 800a116:	e004      	b.n	800a122 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a11c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a11e:	6878      	ldr	r0, [r7, #4]
 800a120:	4798      	blx	r3
}
 800a122:	bf00      	nop
 800a124:	3710      	adds	r7, #16
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}

0800a12a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800a12a:	b580      	push	{r7, lr}
 800a12c:	b084      	sub	sp, #16
 800a12e:	af00      	add	r7, sp, #0
 800a130:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a136:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800a138:	68f8      	ldr	r0, [r7, #12]
 800a13a:	f7ff fd57 	bl	8009bec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a13e:	bf00      	nop
 800a140:	3710      	adds	r7, #16
 800a142:	46bd      	mov	sp, r7
 800a144:	bd80      	pop	{r7, pc}

0800a146 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800a146:	b580      	push	{r7, lr}
 800a148:	b084      	sub	sp, #16
 800a14a:	af00      	add	r7, sp, #0
 800a14c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a152:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	2240      	movs	r2, #64	; 0x40
 800a158:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a15e:	f043 0204 	orr.w	r2, r3, #4
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800a166:	68f8      	ldr	r0, [r7, #12]
 800a168:	f7ff fd4a 	bl	8009c00 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a16c:	bf00      	nop
 800a16e:	3710      	adds	r7, #16
 800a170:	46bd      	mov	sp, r7
 800a172:	bd80      	pop	{r7, pc}

0800a174 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a174:	b480      	push	{r7}
 800a176:	b085      	sub	sp, #20
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	f003 0307 	and.w	r3, r3, #7
 800a182:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a184:	4b0c      	ldr	r3, [pc, #48]	; (800a1b8 <__NVIC_SetPriorityGrouping+0x44>)
 800a186:	68db      	ldr	r3, [r3, #12]
 800a188:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a18a:	68ba      	ldr	r2, [r7, #8]
 800a18c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a190:	4013      	ands	r3, r2
 800a192:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a198:	68bb      	ldr	r3, [r7, #8]
 800a19a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a19c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800a1a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a1a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a1a6:	4a04      	ldr	r2, [pc, #16]	; (800a1b8 <__NVIC_SetPriorityGrouping+0x44>)
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	60d3      	str	r3, [r2, #12]
}
 800a1ac:	bf00      	nop
 800a1ae:	3714      	adds	r7, #20
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b6:	4770      	bx	lr
 800a1b8:	e000ed00 	.word	0xe000ed00

0800a1bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a1bc:	b480      	push	{r7}
 800a1be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a1c0:	4b04      	ldr	r3, [pc, #16]	; (800a1d4 <__NVIC_GetPriorityGrouping+0x18>)
 800a1c2:	68db      	ldr	r3, [r3, #12]
 800a1c4:	0a1b      	lsrs	r3, r3, #8
 800a1c6:	f003 0307 	and.w	r3, r3, #7
}
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d2:	4770      	bx	lr
 800a1d4:	e000ed00 	.word	0xe000ed00

0800a1d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a1d8:	b480      	push	{r7}
 800a1da:	b083      	sub	sp, #12
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	4603      	mov	r3, r0
 800a1e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a1e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	db0b      	blt.n	800a202 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a1ea:	79fb      	ldrb	r3, [r7, #7]
 800a1ec:	f003 021f 	and.w	r2, r3, #31
 800a1f0:	4907      	ldr	r1, [pc, #28]	; (800a210 <__NVIC_EnableIRQ+0x38>)
 800a1f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a1f6:	095b      	lsrs	r3, r3, #5
 800a1f8:	2001      	movs	r0, #1
 800a1fa:	fa00 f202 	lsl.w	r2, r0, r2
 800a1fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800a202:	bf00      	nop
 800a204:	370c      	adds	r7, #12
 800a206:	46bd      	mov	sp, r7
 800a208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20c:	4770      	bx	lr
 800a20e:	bf00      	nop
 800a210:	e000e100 	.word	0xe000e100

0800a214 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a214:	b480      	push	{r7}
 800a216:	b083      	sub	sp, #12
 800a218:	af00      	add	r7, sp, #0
 800a21a:	4603      	mov	r3, r0
 800a21c:	6039      	str	r1, [r7, #0]
 800a21e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a220:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a224:	2b00      	cmp	r3, #0
 800a226:	db0a      	blt.n	800a23e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	b2da      	uxtb	r2, r3
 800a22c:	490c      	ldr	r1, [pc, #48]	; (800a260 <__NVIC_SetPriority+0x4c>)
 800a22e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a232:	0112      	lsls	r2, r2, #4
 800a234:	b2d2      	uxtb	r2, r2
 800a236:	440b      	add	r3, r1
 800a238:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a23c:	e00a      	b.n	800a254 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	b2da      	uxtb	r2, r3
 800a242:	4908      	ldr	r1, [pc, #32]	; (800a264 <__NVIC_SetPriority+0x50>)
 800a244:	79fb      	ldrb	r3, [r7, #7]
 800a246:	f003 030f 	and.w	r3, r3, #15
 800a24a:	3b04      	subs	r3, #4
 800a24c:	0112      	lsls	r2, r2, #4
 800a24e:	b2d2      	uxtb	r2, r2
 800a250:	440b      	add	r3, r1
 800a252:	761a      	strb	r2, [r3, #24]
}
 800a254:	bf00      	nop
 800a256:	370c      	adds	r7, #12
 800a258:	46bd      	mov	sp, r7
 800a25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25e:	4770      	bx	lr
 800a260:	e000e100 	.word	0xe000e100
 800a264:	e000ed00 	.word	0xe000ed00

0800a268 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a268:	b480      	push	{r7}
 800a26a:	b089      	sub	sp, #36	; 0x24
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	60f8      	str	r0, [r7, #12]
 800a270:	60b9      	str	r1, [r7, #8]
 800a272:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	f003 0307 	and.w	r3, r3, #7
 800a27a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a27c:	69fb      	ldr	r3, [r7, #28]
 800a27e:	f1c3 0307 	rsb	r3, r3, #7
 800a282:	2b04      	cmp	r3, #4
 800a284:	bf28      	it	cs
 800a286:	2304      	movcs	r3, #4
 800a288:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a28a:	69fb      	ldr	r3, [r7, #28]
 800a28c:	3304      	adds	r3, #4
 800a28e:	2b06      	cmp	r3, #6
 800a290:	d902      	bls.n	800a298 <NVIC_EncodePriority+0x30>
 800a292:	69fb      	ldr	r3, [r7, #28]
 800a294:	3b03      	subs	r3, #3
 800a296:	e000      	b.n	800a29a <NVIC_EncodePriority+0x32>
 800a298:	2300      	movs	r3, #0
 800a29a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a29c:	f04f 32ff 	mov.w	r2, #4294967295
 800a2a0:	69bb      	ldr	r3, [r7, #24]
 800a2a2:	fa02 f303 	lsl.w	r3, r2, r3
 800a2a6:	43da      	mvns	r2, r3
 800a2a8:	68bb      	ldr	r3, [r7, #8]
 800a2aa:	401a      	ands	r2, r3
 800a2ac:	697b      	ldr	r3, [r7, #20]
 800a2ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a2b0:	f04f 31ff 	mov.w	r1, #4294967295
 800a2b4:	697b      	ldr	r3, [r7, #20]
 800a2b6:	fa01 f303 	lsl.w	r3, r1, r3
 800a2ba:	43d9      	mvns	r1, r3
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a2c0:	4313      	orrs	r3, r2
         );
}
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	3724      	adds	r7, #36	; 0x24
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2cc:	4770      	bx	lr
	...

0800a2d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b082      	sub	sp, #8
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	3b01      	subs	r3, #1
 800a2dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a2e0:	d301      	bcc.n	800a2e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	e00f      	b.n	800a306 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a2e6:	4a0a      	ldr	r2, [pc, #40]	; (800a310 <SysTick_Config+0x40>)
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	3b01      	subs	r3, #1
 800a2ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a2ee:	210f      	movs	r1, #15
 800a2f0:	f04f 30ff 	mov.w	r0, #4294967295
 800a2f4:	f7ff ff8e 	bl	800a214 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a2f8:	4b05      	ldr	r3, [pc, #20]	; (800a310 <SysTick_Config+0x40>)
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a2fe:	4b04      	ldr	r3, [pc, #16]	; (800a310 <SysTick_Config+0x40>)
 800a300:	2207      	movs	r2, #7
 800a302:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a304:	2300      	movs	r3, #0
}
 800a306:	4618      	mov	r0, r3
 800a308:	3708      	adds	r7, #8
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}
 800a30e:	bf00      	nop
 800a310:	e000e010 	.word	0xe000e010

0800a314 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b082      	sub	sp, #8
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a31c:	6878      	ldr	r0, [r7, #4]
 800a31e:	f7ff ff29 	bl	800a174 <__NVIC_SetPriorityGrouping>
}
 800a322:	bf00      	nop
 800a324:	3708      	adds	r7, #8
 800a326:	46bd      	mov	sp, r7
 800a328:	bd80      	pop	{r7, pc}

0800a32a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a32a:	b580      	push	{r7, lr}
 800a32c:	b086      	sub	sp, #24
 800a32e:	af00      	add	r7, sp, #0
 800a330:	4603      	mov	r3, r0
 800a332:	60b9      	str	r1, [r7, #8]
 800a334:	607a      	str	r2, [r7, #4]
 800a336:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a338:	2300      	movs	r3, #0
 800a33a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a33c:	f7ff ff3e 	bl	800a1bc <__NVIC_GetPriorityGrouping>
 800a340:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a342:	687a      	ldr	r2, [r7, #4]
 800a344:	68b9      	ldr	r1, [r7, #8]
 800a346:	6978      	ldr	r0, [r7, #20]
 800a348:	f7ff ff8e 	bl	800a268 <NVIC_EncodePriority>
 800a34c:	4602      	mov	r2, r0
 800a34e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a352:	4611      	mov	r1, r2
 800a354:	4618      	mov	r0, r3
 800a356:	f7ff ff5d 	bl	800a214 <__NVIC_SetPriority>
}
 800a35a:	bf00      	nop
 800a35c:	3718      	adds	r7, #24
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}

0800a362 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a362:	b580      	push	{r7, lr}
 800a364:	b082      	sub	sp, #8
 800a366:	af00      	add	r7, sp, #0
 800a368:	4603      	mov	r3, r0
 800a36a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a36c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a370:	4618      	mov	r0, r3
 800a372:	f7ff ff31 	bl	800a1d8 <__NVIC_EnableIRQ>
}
 800a376:	bf00      	nop
 800a378:	3708      	adds	r7, #8
 800a37a:	46bd      	mov	sp, r7
 800a37c:	bd80      	pop	{r7, pc}

0800a37e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a37e:	b580      	push	{r7, lr}
 800a380:	b082      	sub	sp, #8
 800a382:	af00      	add	r7, sp, #0
 800a384:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a386:	6878      	ldr	r0, [r7, #4]
 800a388:	f7ff ffa2 	bl	800a2d0 <SysTick_Config>
 800a38c:	4603      	mov	r3, r0
}
 800a38e:	4618      	mov	r0, r3
 800a390:	3708      	adds	r7, #8
 800a392:	46bd      	mov	sp, r7
 800a394:	bd80      	pop	{r7, pc}
	...

0800a398 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b086      	sub	sp, #24
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800a3a4:	f7ff fab2 	bl	800990c <HAL_GetTick>
 800a3a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d101      	bne.n	800a3b4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800a3b0:	2301      	movs	r3, #1
 800a3b2:	e099      	b.n	800a4e8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2202      	movs	r2, #2
 800a3c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	681a      	ldr	r2, [r3, #0]
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	f022 0201 	bic.w	r2, r2, #1
 800a3d2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a3d4:	e00f      	b.n	800a3f6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a3d6:	f7ff fa99 	bl	800990c <HAL_GetTick>
 800a3da:	4602      	mov	r2, r0
 800a3dc:	693b      	ldr	r3, [r7, #16]
 800a3de:	1ad3      	subs	r3, r2, r3
 800a3e0:	2b05      	cmp	r3, #5
 800a3e2:	d908      	bls.n	800a3f6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	2220      	movs	r2, #32
 800a3e8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	2203      	movs	r2, #3
 800a3ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800a3f2:	2303      	movs	r3, #3
 800a3f4:	e078      	b.n	800a4e8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	f003 0301 	and.w	r3, r3, #1
 800a400:	2b00      	cmp	r3, #0
 800a402:	d1e8      	bne.n	800a3d6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a40c:	697a      	ldr	r2, [r7, #20]
 800a40e:	4b38      	ldr	r3, [pc, #224]	; (800a4f0 <HAL_DMA_Init+0x158>)
 800a410:	4013      	ands	r3, r2
 800a412:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	685a      	ldr	r2, [r3, #4]
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	689b      	ldr	r3, [r3, #8]
 800a41c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a422:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	691b      	ldr	r3, [r3, #16]
 800a428:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a42e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	699b      	ldr	r3, [r3, #24]
 800a434:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a43a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	6a1b      	ldr	r3, [r3, #32]
 800a440:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a442:	697a      	ldr	r2, [r7, #20]
 800a444:	4313      	orrs	r3, r2
 800a446:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a44c:	2b04      	cmp	r3, #4
 800a44e:	d107      	bne.n	800a460 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a458:	4313      	orrs	r3, r2
 800a45a:	697a      	ldr	r2, [r7, #20]
 800a45c:	4313      	orrs	r3, r2
 800a45e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	697a      	ldr	r2, [r7, #20]
 800a466:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	695b      	ldr	r3, [r3, #20]
 800a46e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a470:	697b      	ldr	r3, [r7, #20]
 800a472:	f023 0307 	bic.w	r3, r3, #7
 800a476:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a47c:	697a      	ldr	r2, [r7, #20]
 800a47e:	4313      	orrs	r3, r2
 800a480:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a486:	2b04      	cmp	r3, #4
 800a488:	d117      	bne.n	800a4ba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a48e:	697a      	ldr	r2, [r7, #20]
 800a490:	4313      	orrs	r3, r2
 800a492:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d00e      	beq.n	800a4ba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800a49c:	6878      	ldr	r0, [r7, #4]
 800a49e:	f000 fa9d 	bl	800a9dc <DMA_CheckFifoParam>
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d008      	beq.n	800a4ba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2240      	movs	r2, #64	; 0x40
 800a4ac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	2201      	movs	r2, #1
 800a4b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800a4b6:	2301      	movs	r3, #1
 800a4b8:	e016      	b.n	800a4e8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	697a      	ldr	r2, [r7, #20]
 800a4c0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a4c2:	6878      	ldr	r0, [r7, #4]
 800a4c4:	f000 fa54 	bl	800a970 <DMA_CalcBaseAndBitshift>
 800a4c8:	4603      	mov	r3, r0
 800a4ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4d0:	223f      	movs	r2, #63	; 0x3f
 800a4d2:	409a      	lsls	r2, r3
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2200      	movs	r2, #0
 800a4dc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	2201      	movs	r2, #1
 800a4e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800a4e6:	2300      	movs	r3, #0
}
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	3718      	adds	r7, #24
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	bd80      	pop	{r7, pc}
 800a4f0:	f010803f 	.word	0xf010803f

0800a4f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b086      	sub	sp, #24
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	60f8      	str	r0, [r7, #12]
 800a4fc:	60b9      	str	r1, [r7, #8]
 800a4fe:	607a      	str	r2, [r7, #4]
 800a500:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a502:	2300      	movs	r3, #0
 800a504:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a50a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a512:	2b01      	cmp	r3, #1
 800a514:	d101      	bne.n	800a51a <HAL_DMA_Start_IT+0x26>
 800a516:	2302      	movs	r3, #2
 800a518:	e040      	b.n	800a59c <HAL_DMA_Start_IT+0xa8>
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	2201      	movs	r2, #1
 800a51e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a528:	b2db      	uxtb	r3, r3
 800a52a:	2b01      	cmp	r3, #1
 800a52c:	d12f      	bne.n	800a58e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	2202      	movs	r2, #2
 800a532:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	2200      	movs	r2, #0
 800a53a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	687a      	ldr	r2, [r7, #4]
 800a540:	68b9      	ldr	r1, [r7, #8]
 800a542:	68f8      	ldr	r0, [r7, #12]
 800a544:	f000 f9e6 	bl	800a914 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a54c:	223f      	movs	r2, #63	; 0x3f
 800a54e:	409a      	lsls	r2, r3
 800a550:	693b      	ldr	r3, [r7, #16]
 800a552:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	681a      	ldr	r2, [r3, #0]
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	f042 0216 	orr.w	r2, r2, #22
 800a562:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d007      	beq.n	800a57c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	681a      	ldr	r2, [r3, #0]
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	f042 0208 	orr.w	r2, r2, #8
 800a57a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	681a      	ldr	r2, [r3, #0]
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	f042 0201 	orr.w	r2, r2, #1
 800a58a:	601a      	str	r2, [r3, #0]
 800a58c:	e005      	b.n	800a59a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	2200      	movs	r2, #0
 800a592:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800a596:	2302      	movs	r3, #2
 800a598:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800a59a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a59c:	4618      	mov	r0, r3
 800a59e:	3718      	adds	r7, #24
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	bd80      	pop	{r7, pc}

0800a5a4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a5a4:	b480      	push	{r7}
 800a5a6:	b083      	sub	sp, #12
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a5b2:	b2db      	uxtb	r3, r3
 800a5b4:	2b02      	cmp	r3, #2
 800a5b6:	d004      	beq.n	800a5c2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	2280      	movs	r2, #128	; 0x80
 800a5bc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800a5be:	2301      	movs	r3, #1
 800a5c0:	e00c      	b.n	800a5dc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	2205      	movs	r2, #5
 800a5c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	681a      	ldr	r2, [r3, #0]
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	f022 0201 	bic.w	r2, r2, #1
 800a5d8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800a5da:	2300      	movs	r3, #0
}
 800a5dc:	4618      	mov	r0, r3
 800a5de:	370c      	adds	r7, #12
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e6:	4770      	bx	lr

0800a5e8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b086      	sub	sp, #24
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a5f4:	4b92      	ldr	r3, [pc, #584]	; (800a840 <HAL_DMA_IRQHandler+0x258>)
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	4a92      	ldr	r2, [pc, #584]	; (800a844 <HAL_DMA_IRQHandler+0x25c>)
 800a5fa:	fba2 2303 	umull	r2, r3, r2, r3
 800a5fe:	0a9b      	lsrs	r3, r3, #10
 800a600:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a606:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800a608:	693b      	ldr	r3, [r7, #16]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a612:	2208      	movs	r2, #8
 800a614:	409a      	lsls	r2, r3
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	4013      	ands	r3, r2
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d01a      	beq.n	800a654 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	f003 0304 	and.w	r3, r3, #4
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d013      	beq.n	800a654 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	681a      	ldr	r2, [r3, #0]
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	f022 0204 	bic.w	r2, r2, #4
 800a63a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a640:	2208      	movs	r2, #8
 800a642:	409a      	lsls	r2, r3
 800a644:	693b      	ldr	r3, [r7, #16]
 800a646:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a64c:	f043 0201 	orr.w	r2, r3, #1
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a658:	2201      	movs	r2, #1
 800a65a:	409a      	lsls	r2, r3
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	4013      	ands	r3, r2
 800a660:	2b00      	cmp	r3, #0
 800a662:	d012      	beq.n	800a68a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	695b      	ldr	r3, [r3, #20]
 800a66a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d00b      	beq.n	800a68a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a676:	2201      	movs	r2, #1
 800a678:	409a      	lsls	r2, r3
 800a67a:	693b      	ldr	r3, [r7, #16]
 800a67c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a682:	f043 0202 	orr.w	r2, r3, #2
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a68e:	2204      	movs	r2, #4
 800a690:	409a      	lsls	r2, r3
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	4013      	ands	r3, r2
 800a696:	2b00      	cmp	r3, #0
 800a698:	d012      	beq.n	800a6c0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	f003 0302 	and.w	r3, r3, #2
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d00b      	beq.n	800a6c0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a6ac:	2204      	movs	r2, #4
 800a6ae:	409a      	lsls	r2, r3
 800a6b0:	693b      	ldr	r3, [r7, #16]
 800a6b2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6b8:	f043 0204 	orr.w	r2, r3, #4
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a6c4:	2210      	movs	r2, #16
 800a6c6:	409a      	lsls	r2, r3
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	4013      	ands	r3, r2
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d043      	beq.n	800a758 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	f003 0308 	and.w	r3, r3, #8
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d03c      	beq.n	800a758 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a6e2:	2210      	movs	r2, #16
 800a6e4:	409a      	lsls	r2, r3
 800a6e6:	693b      	ldr	r3, [r7, #16]
 800a6e8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d018      	beq.n	800a72a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a702:	2b00      	cmp	r3, #0
 800a704:	d108      	bne.n	800a718 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d024      	beq.n	800a758 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a712:	6878      	ldr	r0, [r7, #4]
 800a714:	4798      	blx	r3
 800a716:	e01f      	b.n	800a758 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d01b      	beq.n	800a758 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a724:	6878      	ldr	r0, [r7, #4]
 800a726:	4798      	blx	r3
 800a728:	e016      	b.n	800a758 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a734:	2b00      	cmp	r3, #0
 800a736:	d107      	bne.n	800a748 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	681a      	ldr	r2, [r3, #0]
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	f022 0208 	bic.w	r2, r2, #8
 800a746:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d003      	beq.n	800a758 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a754:	6878      	ldr	r0, [r7, #4]
 800a756:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a75c:	2220      	movs	r2, #32
 800a75e:	409a      	lsls	r2, r3
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	4013      	ands	r3, r2
 800a764:	2b00      	cmp	r3, #0
 800a766:	f000 808e 	beq.w	800a886 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	f003 0310 	and.w	r3, r3, #16
 800a774:	2b00      	cmp	r3, #0
 800a776:	f000 8086 	beq.w	800a886 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a77e:	2220      	movs	r2, #32
 800a780:	409a      	lsls	r2, r3
 800a782:	693b      	ldr	r3, [r7, #16]
 800a784:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a78c:	b2db      	uxtb	r3, r3
 800a78e:	2b05      	cmp	r3, #5
 800a790:	d136      	bne.n	800a800 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	681a      	ldr	r2, [r3, #0]
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	f022 0216 	bic.w	r2, r2, #22
 800a7a0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	695a      	ldr	r2, [r3, #20]
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a7b0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d103      	bne.n	800a7c2 <HAL_DMA_IRQHandler+0x1da>
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d007      	beq.n	800a7d2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	681a      	ldr	r2, [r3, #0]
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	f022 0208 	bic.w	r2, r2, #8
 800a7d0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7d6:	223f      	movs	r2, #63	; 0x3f
 800a7d8:	409a      	lsls	r2, r3
 800a7da:	693b      	ldr	r3, [r7, #16]
 800a7dc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	2201      	movs	r2, #1
 800a7ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d07d      	beq.n	800a8f2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7fa:	6878      	ldr	r0, [r7, #4]
 800a7fc:	4798      	blx	r3
        }
        return;
 800a7fe:	e078      	b.n	800a8f2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d01c      	beq.n	800a848 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d108      	bne.n	800a82e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a820:	2b00      	cmp	r3, #0
 800a822:	d030      	beq.n	800a886 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a828:	6878      	ldr	r0, [r7, #4]
 800a82a:	4798      	blx	r3
 800a82c:	e02b      	b.n	800a886 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a832:	2b00      	cmp	r3, #0
 800a834:	d027      	beq.n	800a886 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a83a:	6878      	ldr	r0, [r7, #4]
 800a83c:	4798      	blx	r3
 800a83e:	e022      	b.n	800a886 <HAL_DMA_IRQHandler+0x29e>
 800a840:	20000000 	.word	0x20000000
 800a844:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a852:	2b00      	cmp	r3, #0
 800a854:	d10f      	bne.n	800a876 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	681a      	ldr	r2, [r3, #0]
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	f022 0210 	bic.w	r2, r2, #16
 800a864:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	2200      	movs	r2, #0
 800a86a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	2201      	movs	r2, #1
 800a872:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d003      	beq.n	800a886 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a882:	6878      	ldr	r0, [r7, #4]
 800a884:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d032      	beq.n	800a8f4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a892:	f003 0301 	and.w	r3, r3, #1
 800a896:	2b00      	cmp	r3, #0
 800a898:	d022      	beq.n	800a8e0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	2205      	movs	r2, #5
 800a89e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	681a      	ldr	r2, [r3, #0]
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	f022 0201 	bic.w	r2, r2, #1
 800a8b0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800a8b2:	68bb      	ldr	r3, [r7, #8]
 800a8b4:	3301      	adds	r3, #1
 800a8b6:	60bb      	str	r3, [r7, #8]
 800a8b8:	697a      	ldr	r2, [r7, #20]
 800a8ba:	429a      	cmp	r2, r3
 800a8bc:	d307      	bcc.n	800a8ce <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	f003 0301 	and.w	r3, r3, #1
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d1f2      	bne.n	800a8b2 <HAL_DMA_IRQHandler+0x2ca>
 800a8cc:	e000      	b.n	800a8d0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800a8ce:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2201      	movs	r2, #1
 800a8dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d005      	beq.n	800a8f4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8ec:	6878      	ldr	r0, [r7, #4]
 800a8ee:	4798      	blx	r3
 800a8f0:	e000      	b.n	800a8f4 <HAL_DMA_IRQHandler+0x30c>
        return;
 800a8f2:	bf00      	nop
    }
  }
}
 800a8f4:	3718      	adds	r7, #24
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	bd80      	pop	{r7, pc}
 800a8fa:	bf00      	nop

0800a8fc <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800a8fc:	b480      	push	{r7}
 800a8fe:	b083      	sub	sp, #12
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800a908:	4618      	mov	r0, r3
 800a90a:	370c      	adds	r7, #12
 800a90c:	46bd      	mov	sp, r7
 800a90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a912:	4770      	bx	lr

0800a914 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a914:	b480      	push	{r7}
 800a916:	b085      	sub	sp, #20
 800a918:	af00      	add	r7, sp, #0
 800a91a:	60f8      	str	r0, [r7, #12]
 800a91c:	60b9      	str	r1, [r7, #8]
 800a91e:	607a      	str	r2, [r7, #4]
 800a920:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	681a      	ldr	r2, [r3, #0]
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a930:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	683a      	ldr	r2, [r7, #0]
 800a938:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	689b      	ldr	r3, [r3, #8]
 800a93e:	2b40      	cmp	r3, #64	; 0x40
 800a940:	d108      	bne.n	800a954 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	687a      	ldr	r2, [r7, #4]
 800a948:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	68ba      	ldr	r2, [r7, #8]
 800a950:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800a952:	e007      	b.n	800a964 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	68ba      	ldr	r2, [r7, #8]
 800a95a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	687a      	ldr	r2, [r7, #4]
 800a962:	60da      	str	r2, [r3, #12]
}
 800a964:	bf00      	nop
 800a966:	3714      	adds	r7, #20
 800a968:	46bd      	mov	sp, r7
 800a96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96e:	4770      	bx	lr

0800a970 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800a970:	b480      	push	{r7}
 800a972:	b085      	sub	sp, #20
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	b2db      	uxtb	r3, r3
 800a97e:	3b10      	subs	r3, #16
 800a980:	4a14      	ldr	r2, [pc, #80]	; (800a9d4 <DMA_CalcBaseAndBitshift+0x64>)
 800a982:	fba2 2303 	umull	r2, r3, r2, r3
 800a986:	091b      	lsrs	r3, r3, #4
 800a988:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a98a:	4a13      	ldr	r2, [pc, #76]	; (800a9d8 <DMA_CalcBaseAndBitshift+0x68>)
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	4413      	add	r3, r2
 800a990:	781b      	ldrb	r3, [r3, #0]
 800a992:	461a      	mov	r2, r3
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	2b03      	cmp	r3, #3
 800a99c:	d909      	bls.n	800a9b2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a9a6:	f023 0303 	bic.w	r3, r3, #3
 800a9aa:	1d1a      	adds	r2, r3, #4
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	659a      	str	r2, [r3, #88]	; 0x58
 800a9b0:	e007      	b.n	800a9c2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a9ba:	f023 0303 	bic.w	r3, r3, #3
 800a9be:	687a      	ldr	r2, [r7, #4]
 800a9c0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	3714      	adds	r7, #20
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d0:	4770      	bx	lr
 800a9d2:	bf00      	nop
 800a9d4:	aaaaaaab 	.word	0xaaaaaaab
 800a9d8:	0801a2c0 	.word	0x0801a2c0

0800a9dc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800a9dc:	b480      	push	{r7}
 800a9de:	b085      	sub	sp, #20
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9ec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	699b      	ldr	r3, [r3, #24]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d11f      	bne.n	800aa36 <DMA_CheckFifoParam+0x5a>
 800a9f6:	68bb      	ldr	r3, [r7, #8]
 800a9f8:	2b03      	cmp	r3, #3
 800a9fa:	d856      	bhi.n	800aaaa <DMA_CheckFifoParam+0xce>
 800a9fc:	a201      	add	r2, pc, #4	; (adr r2, 800aa04 <DMA_CheckFifoParam+0x28>)
 800a9fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa02:	bf00      	nop
 800aa04:	0800aa15 	.word	0x0800aa15
 800aa08:	0800aa27 	.word	0x0800aa27
 800aa0c:	0800aa15 	.word	0x0800aa15
 800aa10:	0800aaab 	.word	0x0800aaab
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d046      	beq.n	800aaae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800aa20:	2301      	movs	r3, #1
 800aa22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800aa24:	e043      	b.n	800aaae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa2a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800aa2e:	d140      	bne.n	800aab2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800aa30:	2301      	movs	r3, #1
 800aa32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800aa34:	e03d      	b.n	800aab2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	699b      	ldr	r3, [r3, #24]
 800aa3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa3e:	d121      	bne.n	800aa84 <DMA_CheckFifoParam+0xa8>
 800aa40:	68bb      	ldr	r3, [r7, #8]
 800aa42:	2b03      	cmp	r3, #3
 800aa44:	d837      	bhi.n	800aab6 <DMA_CheckFifoParam+0xda>
 800aa46:	a201      	add	r2, pc, #4	; (adr r2, 800aa4c <DMA_CheckFifoParam+0x70>)
 800aa48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa4c:	0800aa5d 	.word	0x0800aa5d
 800aa50:	0800aa63 	.word	0x0800aa63
 800aa54:	0800aa5d 	.word	0x0800aa5d
 800aa58:	0800aa75 	.word	0x0800aa75
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800aa5c:	2301      	movs	r3, #1
 800aa5e:	73fb      	strb	r3, [r7, #15]
      break;
 800aa60:	e030      	b.n	800aac4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d025      	beq.n	800aaba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800aa6e:	2301      	movs	r3, #1
 800aa70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800aa72:	e022      	b.n	800aaba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa78:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800aa7c:	d11f      	bne.n	800aabe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800aa7e:	2301      	movs	r3, #1
 800aa80:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800aa82:	e01c      	b.n	800aabe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800aa84:	68bb      	ldr	r3, [r7, #8]
 800aa86:	2b02      	cmp	r3, #2
 800aa88:	d903      	bls.n	800aa92 <DMA_CheckFifoParam+0xb6>
 800aa8a:	68bb      	ldr	r3, [r7, #8]
 800aa8c:	2b03      	cmp	r3, #3
 800aa8e:	d003      	beq.n	800aa98 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800aa90:	e018      	b.n	800aac4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800aa92:	2301      	movs	r3, #1
 800aa94:	73fb      	strb	r3, [r7, #15]
      break;
 800aa96:	e015      	b.n	800aac4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d00e      	beq.n	800aac2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800aaa4:	2301      	movs	r3, #1
 800aaa6:	73fb      	strb	r3, [r7, #15]
      break;
 800aaa8:	e00b      	b.n	800aac2 <DMA_CheckFifoParam+0xe6>
      break;
 800aaaa:	bf00      	nop
 800aaac:	e00a      	b.n	800aac4 <DMA_CheckFifoParam+0xe8>
      break;
 800aaae:	bf00      	nop
 800aab0:	e008      	b.n	800aac4 <DMA_CheckFifoParam+0xe8>
      break;
 800aab2:	bf00      	nop
 800aab4:	e006      	b.n	800aac4 <DMA_CheckFifoParam+0xe8>
      break;
 800aab6:	bf00      	nop
 800aab8:	e004      	b.n	800aac4 <DMA_CheckFifoParam+0xe8>
      break;
 800aaba:	bf00      	nop
 800aabc:	e002      	b.n	800aac4 <DMA_CheckFifoParam+0xe8>
      break;   
 800aabe:	bf00      	nop
 800aac0:	e000      	b.n	800aac4 <DMA_CheckFifoParam+0xe8>
      break;
 800aac2:	bf00      	nop
    }
  } 
  
  return status; 
 800aac4:	7bfb      	ldrb	r3, [r7, #15]
}
 800aac6:	4618      	mov	r0, r3
 800aac8:	3714      	adds	r7, #20
 800aaca:	46bd      	mov	sp, r7
 800aacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad0:	4770      	bx	lr
 800aad2:	bf00      	nop

0800aad4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800aad4:	b480      	push	{r7}
 800aad6:	b089      	sub	sp, #36	; 0x24
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
 800aadc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800aade:	2300      	movs	r3, #0
 800aae0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800aae2:	2300      	movs	r3, #0
 800aae4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800aae6:	2300      	movs	r3, #0
 800aae8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800aaea:	2300      	movs	r3, #0
 800aaec:	61fb      	str	r3, [r7, #28]
 800aaee:	e177      	b.n	800ade0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800aaf0:	2201      	movs	r2, #1
 800aaf2:	69fb      	ldr	r3, [r7, #28]
 800aaf4:	fa02 f303 	lsl.w	r3, r2, r3
 800aaf8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800aafa:	683b      	ldr	r3, [r7, #0]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	697a      	ldr	r2, [r7, #20]
 800ab00:	4013      	ands	r3, r2
 800ab02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800ab04:	693a      	ldr	r2, [r7, #16]
 800ab06:	697b      	ldr	r3, [r7, #20]
 800ab08:	429a      	cmp	r2, r3
 800ab0a:	f040 8166 	bne.w	800adda <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800ab0e:	683b      	ldr	r3, [r7, #0]
 800ab10:	685b      	ldr	r3, [r3, #4]
 800ab12:	2b01      	cmp	r3, #1
 800ab14:	d00b      	beq.n	800ab2e <HAL_GPIO_Init+0x5a>
 800ab16:	683b      	ldr	r3, [r7, #0]
 800ab18:	685b      	ldr	r3, [r3, #4]
 800ab1a:	2b02      	cmp	r3, #2
 800ab1c:	d007      	beq.n	800ab2e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800ab1e:	683b      	ldr	r3, [r7, #0]
 800ab20:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800ab22:	2b11      	cmp	r3, #17
 800ab24:	d003      	beq.n	800ab2e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	685b      	ldr	r3, [r3, #4]
 800ab2a:	2b12      	cmp	r3, #18
 800ab2c:	d130      	bne.n	800ab90 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	689b      	ldr	r3, [r3, #8]
 800ab32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800ab34:	69fb      	ldr	r3, [r7, #28]
 800ab36:	005b      	lsls	r3, r3, #1
 800ab38:	2203      	movs	r2, #3
 800ab3a:	fa02 f303 	lsl.w	r3, r2, r3
 800ab3e:	43db      	mvns	r3, r3
 800ab40:	69ba      	ldr	r2, [r7, #24]
 800ab42:	4013      	ands	r3, r2
 800ab44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800ab46:	683b      	ldr	r3, [r7, #0]
 800ab48:	68da      	ldr	r2, [r3, #12]
 800ab4a:	69fb      	ldr	r3, [r7, #28]
 800ab4c:	005b      	lsls	r3, r3, #1
 800ab4e:	fa02 f303 	lsl.w	r3, r2, r3
 800ab52:	69ba      	ldr	r2, [r7, #24]
 800ab54:	4313      	orrs	r3, r2
 800ab56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	69ba      	ldr	r2, [r7, #24]
 800ab5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	685b      	ldr	r3, [r3, #4]
 800ab62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800ab64:	2201      	movs	r2, #1
 800ab66:	69fb      	ldr	r3, [r7, #28]
 800ab68:	fa02 f303 	lsl.w	r3, r2, r3
 800ab6c:	43db      	mvns	r3, r3
 800ab6e:	69ba      	ldr	r2, [r7, #24]
 800ab70:	4013      	ands	r3, r2
 800ab72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800ab74:	683b      	ldr	r3, [r7, #0]
 800ab76:	685b      	ldr	r3, [r3, #4]
 800ab78:	091b      	lsrs	r3, r3, #4
 800ab7a:	f003 0201 	and.w	r2, r3, #1
 800ab7e:	69fb      	ldr	r3, [r7, #28]
 800ab80:	fa02 f303 	lsl.w	r3, r2, r3
 800ab84:	69ba      	ldr	r2, [r7, #24]
 800ab86:	4313      	orrs	r3, r2
 800ab88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	69ba      	ldr	r2, [r7, #24]
 800ab8e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	68db      	ldr	r3, [r3, #12]
 800ab94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800ab96:	69fb      	ldr	r3, [r7, #28]
 800ab98:	005b      	lsls	r3, r3, #1
 800ab9a:	2203      	movs	r2, #3
 800ab9c:	fa02 f303 	lsl.w	r3, r2, r3
 800aba0:	43db      	mvns	r3, r3
 800aba2:	69ba      	ldr	r2, [r7, #24]
 800aba4:	4013      	ands	r3, r2
 800aba6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	689a      	ldr	r2, [r3, #8]
 800abac:	69fb      	ldr	r3, [r7, #28]
 800abae:	005b      	lsls	r3, r3, #1
 800abb0:	fa02 f303 	lsl.w	r3, r2, r3
 800abb4:	69ba      	ldr	r2, [r7, #24]
 800abb6:	4313      	orrs	r3, r2
 800abb8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	69ba      	ldr	r2, [r7, #24]
 800abbe:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800abc0:	683b      	ldr	r3, [r7, #0]
 800abc2:	685b      	ldr	r3, [r3, #4]
 800abc4:	2b02      	cmp	r3, #2
 800abc6:	d003      	beq.n	800abd0 <HAL_GPIO_Init+0xfc>
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	685b      	ldr	r3, [r3, #4]
 800abcc:	2b12      	cmp	r3, #18
 800abce:	d123      	bne.n	800ac18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800abd0:	69fb      	ldr	r3, [r7, #28]
 800abd2:	08da      	lsrs	r2, r3, #3
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	3208      	adds	r2, #8
 800abd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800abde:	69fb      	ldr	r3, [r7, #28]
 800abe0:	f003 0307 	and.w	r3, r3, #7
 800abe4:	009b      	lsls	r3, r3, #2
 800abe6:	220f      	movs	r2, #15
 800abe8:	fa02 f303 	lsl.w	r3, r2, r3
 800abec:	43db      	mvns	r3, r3
 800abee:	69ba      	ldr	r2, [r7, #24]
 800abf0:	4013      	ands	r3, r2
 800abf2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	691a      	ldr	r2, [r3, #16]
 800abf8:	69fb      	ldr	r3, [r7, #28]
 800abfa:	f003 0307 	and.w	r3, r3, #7
 800abfe:	009b      	lsls	r3, r3, #2
 800ac00:	fa02 f303 	lsl.w	r3, r2, r3
 800ac04:	69ba      	ldr	r2, [r7, #24]
 800ac06:	4313      	orrs	r3, r2
 800ac08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800ac0a:	69fb      	ldr	r3, [r7, #28]
 800ac0c:	08da      	lsrs	r2, r3, #3
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	3208      	adds	r2, #8
 800ac12:	69b9      	ldr	r1, [r7, #24]
 800ac14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800ac1e:	69fb      	ldr	r3, [r7, #28]
 800ac20:	005b      	lsls	r3, r3, #1
 800ac22:	2203      	movs	r2, #3
 800ac24:	fa02 f303 	lsl.w	r3, r2, r3
 800ac28:	43db      	mvns	r3, r3
 800ac2a:	69ba      	ldr	r2, [r7, #24]
 800ac2c:	4013      	ands	r3, r2
 800ac2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	685b      	ldr	r3, [r3, #4]
 800ac34:	f003 0203 	and.w	r2, r3, #3
 800ac38:	69fb      	ldr	r3, [r7, #28]
 800ac3a:	005b      	lsls	r3, r3, #1
 800ac3c:	fa02 f303 	lsl.w	r3, r2, r3
 800ac40:	69ba      	ldr	r2, [r7, #24]
 800ac42:	4313      	orrs	r3, r2
 800ac44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	69ba      	ldr	r2, [r7, #24]
 800ac4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800ac4c:	683b      	ldr	r3, [r7, #0]
 800ac4e:	685b      	ldr	r3, [r3, #4]
 800ac50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	f000 80c0 	beq.w	800adda <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	60fb      	str	r3, [r7, #12]
 800ac5e:	4b66      	ldr	r3, [pc, #408]	; (800adf8 <HAL_GPIO_Init+0x324>)
 800ac60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac62:	4a65      	ldr	r2, [pc, #404]	; (800adf8 <HAL_GPIO_Init+0x324>)
 800ac64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ac68:	6453      	str	r3, [r2, #68]	; 0x44
 800ac6a:	4b63      	ldr	r3, [pc, #396]	; (800adf8 <HAL_GPIO_Init+0x324>)
 800ac6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ac72:	60fb      	str	r3, [r7, #12]
 800ac74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800ac76:	4a61      	ldr	r2, [pc, #388]	; (800adfc <HAL_GPIO_Init+0x328>)
 800ac78:	69fb      	ldr	r3, [r7, #28]
 800ac7a:	089b      	lsrs	r3, r3, #2
 800ac7c:	3302      	adds	r3, #2
 800ac7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800ac84:	69fb      	ldr	r3, [r7, #28]
 800ac86:	f003 0303 	and.w	r3, r3, #3
 800ac8a:	009b      	lsls	r3, r3, #2
 800ac8c:	220f      	movs	r2, #15
 800ac8e:	fa02 f303 	lsl.w	r3, r2, r3
 800ac92:	43db      	mvns	r3, r3
 800ac94:	69ba      	ldr	r2, [r7, #24]
 800ac96:	4013      	ands	r3, r2
 800ac98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	4a58      	ldr	r2, [pc, #352]	; (800ae00 <HAL_GPIO_Init+0x32c>)
 800ac9e:	4293      	cmp	r3, r2
 800aca0:	d037      	beq.n	800ad12 <HAL_GPIO_Init+0x23e>
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	4a57      	ldr	r2, [pc, #348]	; (800ae04 <HAL_GPIO_Init+0x330>)
 800aca6:	4293      	cmp	r3, r2
 800aca8:	d031      	beq.n	800ad0e <HAL_GPIO_Init+0x23a>
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	4a56      	ldr	r2, [pc, #344]	; (800ae08 <HAL_GPIO_Init+0x334>)
 800acae:	4293      	cmp	r3, r2
 800acb0:	d02b      	beq.n	800ad0a <HAL_GPIO_Init+0x236>
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	4a55      	ldr	r2, [pc, #340]	; (800ae0c <HAL_GPIO_Init+0x338>)
 800acb6:	4293      	cmp	r3, r2
 800acb8:	d025      	beq.n	800ad06 <HAL_GPIO_Init+0x232>
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	4a54      	ldr	r2, [pc, #336]	; (800ae10 <HAL_GPIO_Init+0x33c>)
 800acbe:	4293      	cmp	r3, r2
 800acc0:	d01f      	beq.n	800ad02 <HAL_GPIO_Init+0x22e>
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	4a53      	ldr	r2, [pc, #332]	; (800ae14 <HAL_GPIO_Init+0x340>)
 800acc6:	4293      	cmp	r3, r2
 800acc8:	d019      	beq.n	800acfe <HAL_GPIO_Init+0x22a>
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	4a52      	ldr	r2, [pc, #328]	; (800ae18 <HAL_GPIO_Init+0x344>)
 800acce:	4293      	cmp	r3, r2
 800acd0:	d013      	beq.n	800acfa <HAL_GPIO_Init+0x226>
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	4a51      	ldr	r2, [pc, #324]	; (800ae1c <HAL_GPIO_Init+0x348>)
 800acd6:	4293      	cmp	r3, r2
 800acd8:	d00d      	beq.n	800acf6 <HAL_GPIO_Init+0x222>
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	4a50      	ldr	r2, [pc, #320]	; (800ae20 <HAL_GPIO_Init+0x34c>)
 800acde:	4293      	cmp	r3, r2
 800ace0:	d007      	beq.n	800acf2 <HAL_GPIO_Init+0x21e>
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	4a4f      	ldr	r2, [pc, #316]	; (800ae24 <HAL_GPIO_Init+0x350>)
 800ace6:	4293      	cmp	r3, r2
 800ace8:	d101      	bne.n	800acee <HAL_GPIO_Init+0x21a>
 800acea:	2309      	movs	r3, #9
 800acec:	e012      	b.n	800ad14 <HAL_GPIO_Init+0x240>
 800acee:	230a      	movs	r3, #10
 800acf0:	e010      	b.n	800ad14 <HAL_GPIO_Init+0x240>
 800acf2:	2308      	movs	r3, #8
 800acf4:	e00e      	b.n	800ad14 <HAL_GPIO_Init+0x240>
 800acf6:	2307      	movs	r3, #7
 800acf8:	e00c      	b.n	800ad14 <HAL_GPIO_Init+0x240>
 800acfa:	2306      	movs	r3, #6
 800acfc:	e00a      	b.n	800ad14 <HAL_GPIO_Init+0x240>
 800acfe:	2305      	movs	r3, #5
 800ad00:	e008      	b.n	800ad14 <HAL_GPIO_Init+0x240>
 800ad02:	2304      	movs	r3, #4
 800ad04:	e006      	b.n	800ad14 <HAL_GPIO_Init+0x240>
 800ad06:	2303      	movs	r3, #3
 800ad08:	e004      	b.n	800ad14 <HAL_GPIO_Init+0x240>
 800ad0a:	2302      	movs	r3, #2
 800ad0c:	e002      	b.n	800ad14 <HAL_GPIO_Init+0x240>
 800ad0e:	2301      	movs	r3, #1
 800ad10:	e000      	b.n	800ad14 <HAL_GPIO_Init+0x240>
 800ad12:	2300      	movs	r3, #0
 800ad14:	69fa      	ldr	r2, [r7, #28]
 800ad16:	f002 0203 	and.w	r2, r2, #3
 800ad1a:	0092      	lsls	r2, r2, #2
 800ad1c:	4093      	lsls	r3, r2
 800ad1e:	69ba      	ldr	r2, [r7, #24]
 800ad20:	4313      	orrs	r3, r2
 800ad22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800ad24:	4935      	ldr	r1, [pc, #212]	; (800adfc <HAL_GPIO_Init+0x328>)
 800ad26:	69fb      	ldr	r3, [r7, #28]
 800ad28:	089b      	lsrs	r3, r3, #2
 800ad2a:	3302      	adds	r3, #2
 800ad2c:	69ba      	ldr	r2, [r7, #24]
 800ad2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800ad32:	4b3d      	ldr	r3, [pc, #244]	; (800ae28 <HAL_GPIO_Init+0x354>)
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ad38:	693b      	ldr	r3, [r7, #16]
 800ad3a:	43db      	mvns	r3, r3
 800ad3c:	69ba      	ldr	r2, [r7, #24]
 800ad3e:	4013      	ands	r3, r2
 800ad40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800ad42:	683b      	ldr	r3, [r7, #0]
 800ad44:	685b      	ldr	r3, [r3, #4]
 800ad46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d003      	beq.n	800ad56 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800ad4e:	69ba      	ldr	r2, [r7, #24]
 800ad50:	693b      	ldr	r3, [r7, #16]
 800ad52:	4313      	orrs	r3, r2
 800ad54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800ad56:	4a34      	ldr	r2, [pc, #208]	; (800ae28 <HAL_GPIO_Init+0x354>)
 800ad58:	69bb      	ldr	r3, [r7, #24]
 800ad5a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800ad5c:	4b32      	ldr	r3, [pc, #200]	; (800ae28 <HAL_GPIO_Init+0x354>)
 800ad5e:	685b      	ldr	r3, [r3, #4]
 800ad60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ad62:	693b      	ldr	r3, [r7, #16]
 800ad64:	43db      	mvns	r3, r3
 800ad66:	69ba      	ldr	r2, [r7, #24]
 800ad68:	4013      	ands	r3, r2
 800ad6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800ad6c:	683b      	ldr	r3, [r7, #0]
 800ad6e:	685b      	ldr	r3, [r3, #4]
 800ad70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d003      	beq.n	800ad80 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800ad78:	69ba      	ldr	r2, [r7, #24]
 800ad7a:	693b      	ldr	r3, [r7, #16]
 800ad7c:	4313      	orrs	r3, r2
 800ad7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800ad80:	4a29      	ldr	r2, [pc, #164]	; (800ae28 <HAL_GPIO_Init+0x354>)
 800ad82:	69bb      	ldr	r3, [r7, #24]
 800ad84:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800ad86:	4b28      	ldr	r3, [pc, #160]	; (800ae28 <HAL_GPIO_Init+0x354>)
 800ad88:	689b      	ldr	r3, [r3, #8]
 800ad8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ad8c:	693b      	ldr	r3, [r7, #16]
 800ad8e:	43db      	mvns	r3, r3
 800ad90:	69ba      	ldr	r2, [r7, #24]
 800ad92:	4013      	ands	r3, r2
 800ad94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	685b      	ldr	r3, [r3, #4]
 800ad9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d003      	beq.n	800adaa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800ada2:	69ba      	ldr	r2, [r7, #24]
 800ada4:	693b      	ldr	r3, [r7, #16]
 800ada6:	4313      	orrs	r3, r2
 800ada8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800adaa:	4a1f      	ldr	r2, [pc, #124]	; (800ae28 <HAL_GPIO_Init+0x354>)
 800adac:	69bb      	ldr	r3, [r7, #24]
 800adae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800adb0:	4b1d      	ldr	r3, [pc, #116]	; (800ae28 <HAL_GPIO_Init+0x354>)
 800adb2:	68db      	ldr	r3, [r3, #12]
 800adb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800adb6:	693b      	ldr	r3, [r7, #16]
 800adb8:	43db      	mvns	r3, r3
 800adba:	69ba      	ldr	r2, [r7, #24]
 800adbc:	4013      	ands	r3, r2
 800adbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800adc0:	683b      	ldr	r3, [r7, #0]
 800adc2:	685b      	ldr	r3, [r3, #4]
 800adc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d003      	beq.n	800add4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800adcc:	69ba      	ldr	r2, [r7, #24]
 800adce:	693b      	ldr	r3, [r7, #16]
 800add0:	4313      	orrs	r3, r2
 800add2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800add4:	4a14      	ldr	r2, [pc, #80]	; (800ae28 <HAL_GPIO_Init+0x354>)
 800add6:	69bb      	ldr	r3, [r7, #24]
 800add8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800adda:	69fb      	ldr	r3, [r7, #28]
 800addc:	3301      	adds	r3, #1
 800adde:	61fb      	str	r3, [r7, #28]
 800ade0:	69fb      	ldr	r3, [r7, #28]
 800ade2:	2b0f      	cmp	r3, #15
 800ade4:	f67f ae84 	bls.w	800aaf0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800ade8:	bf00      	nop
 800adea:	bf00      	nop
 800adec:	3724      	adds	r7, #36	; 0x24
 800adee:	46bd      	mov	sp, r7
 800adf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf4:	4770      	bx	lr
 800adf6:	bf00      	nop
 800adf8:	40023800 	.word	0x40023800
 800adfc:	40013800 	.word	0x40013800
 800ae00:	40020000 	.word	0x40020000
 800ae04:	40020400 	.word	0x40020400
 800ae08:	40020800 	.word	0x40020800
 800ae0c:	40020c00 	.word	0x40020c00
 800ae10:	40021000 	.word	0x40021000
 800ae14:	40021400 	.word	0x40021400
 800ae18:	40021800 	.word	0x40021800
 800ae1c:	40021c00 	.word	0x40021c00
 800ae20:	40022000 	.word	0x40022000
 800ae24:	40022400 	.word	0x40022400
 800ae28:	40013c00 	.word	0x40013c00

0800ae2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800ae2c:	b480      	push	{r7}
 800ae2e:	b085      	sub	sp, #20
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
 800ae34:	460b      	mov	r3, r1
 800ae36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	691a      	ldr	r2, [r3, #16]
 800ae3c:	887b      	ldrh	r3, [r7, #2]
 800ae3e:	4013      	ands	r3, r2
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d002      	beq.n	800ae4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800ae44:	2301      	movs	r3, #1
 800ae46:	73fb      	strb	r3, [r7, #15]
 800ae48:	e001      	b.n	800ae4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800ae4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae50:	4618      	mov	r0, r3
 800ae52:	3714      	adds	r7, #20
 800ae54:	46bd      	mov	sp, r7
 800ae56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5a:	4770      	bx	lr

0800ae5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ae5c:	b480      	push	{r7}
 800ae5e:	b083      	sub	sp, #12
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
 800ae64:	460b      	mov	r3, r1
 800ae66:	807b      	strh	r3, [r7, #2]
 800ae68:	4613      	mov	r3, r2
 800ae6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800ae6c:	787b      	ldrb	r3, [r7, #1]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d003      	beq.n	800ae7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800ae72:	887a      	ldrh	r2, [r7, #2]
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800ae78:	e003      	b.n	800ae82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800ae7a:	887b      	ldrh	r3, [r7, #2]
 800ae7c:	041a      	lsls	r2, r3, #16
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	619a      	str	r2, [r3, #24]
}
 800ae82:	bf00      	nop
 800ae84:	370c      	adds	r7, #12
 800ae86:	46bd      	mov	sp, r7
 800ae88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8c:	4770      	bx	lr
	...

0800ae90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b084      	sub	sp, #16
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d101      	bne.n	800aea2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800ae9e:	2301      	movs	r3, #1
 800aea0:	e12b      	b.n	800b0fa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aea8:	b2db      	uxtb	r3, r3
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d106      	bne.n	800aebc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800aeb6:	6878      	ldr	r0, [r7, #4]
 800aeb8:	f7fb febe 	bl	8006c38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2224      	movs	r2, #36	; 0x24
 800aec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	681a      	ldr	r2, [r3, #0]
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	f022 0201 	bic.w	r2, r2, #1
 800aed2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	681a      	ldr	r2, [r3, #0]
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800aee2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	681a      	ldr	r2, [r3, #0]
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800aef2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800aef4:	f001 f984 	bl	800c200 <HAL_RCC_GetPCLK1Freq>
 800aef8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	685b      	ldr	r3, [r3, #4]
 800aefe:	4a81      	ldr	r2, [pc, #516]	; (800b104 <HAL_I2C_Init+0x274>)
 800af00:	4293      	cmp	r3, r2
 800af02:	d807      	bhi.n	800af14 <HAL_I2C_Init+0x84>
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	4a80      	ldr	r2, [pc, #512]	; (800b108 <HAL_I2C_Init+0x278>)
 800af08:	4293      	cmp	r3, r2
 800af0a:	bf94      	ite	ls
 800af0c:	2301      	movls	r3, #1
 800af0e:	2300      	movhi	r3, #0
 800af10:	b2db      	uxtb	r3, r3
 800af12:	e006      	b.n	800af22 <HAL_I2C_Init+0x92>
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	4a7d      	ldr	r2, [pc, #500]	; (800b10c <HAL_I2C_Init+0x27c>)
 800af18:	4293      	cmp	r3, r2
 800af1a:	bf94      	ite	ls
 800af1c:	2301      	movls	r3, #1
 800af1e:	2300      	movhi	r3, #0
 800af20:	b2db      	uxtb	r3, r3
 800af22:	2b00      	cmp	r3, #0
 800af24:	d001      	beq.n	800af2a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800af26:	2301      	movs	r3, #1
 800af28:	e0e7      	b.n	800b0fa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	4a78      	ldr	r2, [pc, #480]	; (800b110 <HAL_I2C_Init+0x280>)
 800af2e:	fba2 2303 	umull	r2, r3, r2, r3
 800af32:	0c9b      	lsrs	r3, r3, #18
 800af34:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	685b      	ldr	r3, [r3, #4]
 800af3c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	68ba      	ldr	r2, [r7, #8]
 800af46:	430a      	orrs	r2, r1
 800af48:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	6a1b      	ldr	r3, [r3, #32]
 800af50:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	685b      	ldr	r3, [r3, #4]
 800af58:	4a6a      	ldr	r2, [pc, #424]	; (800b104 <HAL_I2C_Init+0x274>)
 800af5a:	4293      	cmp	r3, r2
 800af5c:	d802      	bhi.n	800af64 <HAL_I2C_Init+0xd4>
 800af5e:	68bb      	ldr	r3, [r7, #8]
 800af60:	3301      	adds	r3, #1
 800af62:	e009      	b.n	800af78 <HAL_I2C_Init+0xe8>
 800af64:	68bb      	ldr	r3, [r7, #8]
 800af66:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800af6a:	fb02 f303 	mul.w	r3, r2, r3
 800af6e:	4a69      	ldr	r2, [pc, #420]	; (800b114 <HAL_I2C_Init+0x284>)
 800af70:	fba2 2303 	umull	r2, r3, r2, r3
 800af74:	099b      	lsrs	r3, r3, #6
 800af76:	3301      	adds	r3, #1
 800af78:	687a      	ldr	r2, [r7, #4]
 800af7a:	6812      	ldr	r2, [r2, #0]
 800af7c:	430b      	orrs	r3, r1
 800af7e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	69db      	ldr	r3, [r3, #28]
 800af86:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800af8a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	685b      	ldr	r3, [r3, #4]
 800af92:	495c      	ldr	r1, [pc, #368]	; (800b104 <HAL_I2C_Init+0x274>)
 800af94:	428b      	cmp	r3, r1
 800af96:	d819      	bhi.n	800afcc <HAL_I2C_Init+0x13c>
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	1e59      	subs	r1, r3, #1
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	685b      	ldr	r3, [r3, #4]
 800afa0:	005b      	lsls	r3, r3, #1
 800afa2:	fbb1 f3f3 	udiv	r3, r1, r3
 800afa6:	1c59      	adds	r1, r3, #1
 800afa8:	f640 73fc 	movw	r3, #4092	; 0xffc
 800afac:	400b      	ands	r3, r1
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d00a      	beq.n	800afc8 <HAL_I2C_Init+0x138>
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	1e59      	subs	r1, r3, #1
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	685b      	ldr	r3, [r3, #4]
 800afba:	005b      	lsls	r3, r3, #1
 800afbc:	fbb1 f3f3 	udiv	r3, r1, r3
 800afc0:	3301      	adds	r3, #1
 800afc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800afc6:	e051      	b.n	800b06c <HAL_I2C_Init+0x1dc>
 800afc8:	2304      	movs	r3, #4
 800afca:	e04f      	b.n	800b06c <HAL_I2C_Init+0x1dc>
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	689b      	ldr	r3, [r3, #8]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d111      	bne.n	800aff8 <HAL_I2C_Init+0x168>
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	1e58      	subs	r0, r3, #1
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	6859      	ldr	r1, [r3, #4]
 800afdc:	460b      	mov	r3, r1
 800afde:	005b      	lsls	r3, r3, #1
 800afe0:	440b      	add	r3, r1
 800afe2:	fbb0 f3f3 	udiv	r3, r0, r3
 800afe6:	3301      	adds	r3, #1
 800afe8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800afec:	2b00      	cmp	r3, #0
 800afee:	bf0c      	ite	eq
 800aff0:	2301      	moveq	r3, #1
 800aff2:	2300      	movne	r3, #0
 800aff4:	b2db      	uxtb	r3, r3
 800aff6:	e012      	b.n	800b01e <HAL_I2C_Init+0x18e>
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	1e58      	subs	r0, r3, #1
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	6859      	ldr	r1, [r3, #4]
 800b000:	460b      	mov	r3, r1
 800b002:	009b      	lsls	r3, r3, #2
 800b004:	440b      	add	r3, r1
 800b006:	0099      	lsls	r1, r3, #2
 800b008:	440b      	add	r3, r1
 800b00a:	fbb0 f3f3 	udiv	r3, r0, r3
 800b00e:	3301      	adds	r3, #1
 800b010:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b014:	2b00      	cmp	r3, #0
 800b016:	bf0c      	ite	eq
 800b018:	2301      	moveq	r3, #1
 800b01a:	2300      	movne	r3, #0
 800b01c:	b2db      	uxtb	r3, r3
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d001      	beq.n	800b026 <HAL_I2C_Init+0x196>
 800b022:	2301      	movs	r3, #1
 800b024:	e022      	b.n	800b06c <HAL_I2C_Init+0x1dc>
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	689b      	ldr	r3, [r3, #8]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d10e      	bne.n	800b04c <HAL_I2C_Init+0x1bc>
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	1e58      	subs	r0, r3, #1
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	6859      	ldr	r1, [r3, #4]
 800b036:	460b      	mov	r3, r1
 800b038:	005b      	lsls	r3, r3, #1
 800b03a:	440b      	add	r3, r1
 800b03c:	fbb0 f3f3 	udiv	r3, r0, r3
 800b040:	3301      	adds	r3, #1
 800b042:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b046:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b04a:	e00f      	b.n	800b06c <HAL_I2C_Init+0x1dc>
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	1e58      	subs	r0, r3, #1
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	6859      	ldr	r1, [r3, #4]
 800b054:	460b      	mov	r3, r1
 800b056:	009b      	lsls	r3, r3, #2
 800b058:	440b      	add	r3, r1
 800b05a:	0099      	lsls	r1, r3, #2
 800b05c:	440b      	add	r3, r1
 800b05e:	fbb0 f3f3 	udiv	r3, r0, r3
 800b062:	3301      	adds	r3, #1
 800b064:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b068:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b06c:	6879      	ldr	r1, [r7, #4]
 800b06e:	6809      	ldr	r1, [r1, #0]
 800b070:	4313      	orrs	r3, r2
 800b072:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	69da      	ldr	r2, [r3, #28]
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	6a1b      	ldr	r3, [r3, #32]
 800b086:	431a      	orrs	r2, r3
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	430a      	orrs	r2, r1
 800b08e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	689b      	ldr	r3, [r3, #8]
 800b096:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800b09a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b09e:	687a      	ldr	r2, [r7, #4]
 800b0a0:	6911      	ldr	r1, [r2, #16]
 800b0a2:	687a      	ldr	r2, [r7, #4]
 800b0a4:	68d2      	ldr	r2, [r2, #12]
 800b0a6:	4311      	orrs	r1, r2
 800b0a8:	687a      	ldr	r2, [r7, #4]
 800b0aa:	6812      	ldr	r2, [r2, #0]
 800b0ac:	430b      	orrs	r3, r1
 800b0ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	68db      	ldr	r3, [r3, #12]
 800b0b6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	695a      	ldr	r2, [r3, #20]
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	699b      	ldr	r3, [r3, #24]
 800b0c2:	431a      	orrs	r2, r3
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	430a      	orrs	r2, r1
 800b0ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	681a      	ldr	r2, [r3, #0]
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	f042 0201 	orr.w	r2, r2, #1
 800b0da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	2200      	movs	r2, #0
 800b0e0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	2220      	movs	r2, #32
 800b0e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	2200      	movs	r2, #0
 800b0ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b0f8:	2300      	movs	r3, #0
}
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	3710      	adds	r7, #16
 800b0fe:	46bd      	mov	sp, r7
 800b100:	bd80      	pop	{r7, pc}
 800b102:	bf00      	nop
 800b104:	000186a0 	.word	0x000186a0
 800b108:	001e847f 	.word	0x001e847f
 800b10c:	003d08ff 	.word	0x003d08ff
 800b110:	431bde83 	.word	0x431bde83
 800b114:	10624dd3 	.word	0x10624dd3

0800b118 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b118:	b580      	push	{r7, lr}
 800b11a:	b088      	sub	sp, #32
 800b11c:	af02      	add	r7, sp, #8
 800b11e:	60f8      	str	r0, [r7, #12]
 800b120:	607a      	str	r2, [r7, #4]
 800b122:	461a      	mov	r2, r3
 800b124:	460b      	mov	r3, r1
 800b126:	817b      	strh	r3, [r7, #10]
 800b128:	4613      	mov	r3, r2
 800b12a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b12c:	f7fe fbee 	bl	800990c <HAL_GetTick>
 800b130:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b138:	b2db      	uxtb	r3, r3
 800b13a:	2b20      	cmp	r3, #32
 800b13c:	f040 80e0 	bne.w	800b300 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b140:	697b      	ldr	r3, [r7, #20]
 800b142:	9300      	str	r3, [sp, #0]
 800b144:	2319      	movs	r3, #25
 800b146:	2201      	movs	r2, #1
 800b148:	4970      	ldr	r1, [pc, #448]	; (800b30c <HAL_I2C_Master_Transmit+0x1f4>)
 800b14a:	68f8      	ldr	r0, [r7, #12]
 800b14c:	f000 fc58 	bl	800ba00 <I2C_WaitOnFlagUntilTimeout>
 800b150:	4603      	mov	r3, r0
 800b152:	2b00      	cmp	r3, #0
 800b154:	d001      	beq.n	800b15a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800b156:	2302      	movs	r3, #2
 800b158:	e0d3      	b.n	800b302 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b160:	2b01      	cmp	r3, #1
 800b162:	d101      	bne.n	800b168 <HAL_I2C_Master_Transmit+0x50>
 800b164:	2302      	movs	r3, #2
 800b166:	e0cc      	b.n	800b302 <HAL_I2C_Master_Transmit+0x1ea>
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	2201      	movs	r2, #1
 800b16c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	f003 0301 	and.w	r3, r3, #1
 800b17a:	2b01      	cmp	r3, #1
 800b17c:	d007      	beq.n	800b18e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	681a      	ldr	r2, [r3, #0]
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	f042 0201 	orr.w	r2, r2, #1
 800b18c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	681a      	ldr	r2, [r3, #0]
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b19c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	2221      	movs	r2, #33	; 0x21
 800b1a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	2210      	movs	r2, #16
 800b1aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	687a      	ldr	r2, [r7, #4]
 800b1b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	893a      	ldrh	r2, [r7, #8]
 800b1be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b1c4:	b29a      	uxth	r2, r3
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	4a50      	ldr	r2, [pc, #320]	; (800b310 <HAL_I2C_Master_Transmit+0x1f8>)
 800b1ce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b1d0:	8979      	ldrh	r1, [r7, #10]
 800b1d2:	697b      	ldr	r3, [r7, #20]
 800b1d4:	6a3a      	ldr	r2, [r7, #32]
 800b1d6:	68f8      	ldr	r0, [r7, #12]
 800b1d8:	f000 fac2 	bl	800b760 <I2C_MasterRequestWrite>
 800b1dc:	4603      	mov	r3, r0
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d001      	beq.n	800b1e6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800b1e2:	2301      	movs	r3, #1
 800b1e4:	e08d      	b.n	800b302 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	613b      	str	r3, [r7, #16]
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	695b      	ldr	r3, [r3, #20]
 800b1f0:	613b      	str	r3, [r7, #16]
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	699b      	ldr	r3, [r3, #24]
 800b1f8:	613b      	str	r3, [r7, #16]
 800b1fa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800b1fc:	e066      	b.n	800b2cc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b1fe:	697a      	ldr	r2, [r7, #20]
 800b200:	6a39      	ldr	r1, [r7, #32]
 800b202:	68f8      	ldr	r0, [r7, #12]
 800b204:	f000 fcd2 	bl	800bbac <I2C_WaitOnTXEFlagUntilTimeout>
 800b208:	4603      	mov	r3, r0
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d00d      	beq.n	800b22a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b212:	2b04      	cmp	r3, #4
 800b214:	d107      	bne.n	800b226 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	681a      	ldr	r2, [r3, #0]
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b224:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b226:	2301      	movs	r3, #1
 800b228:	e06b      	b.n	800b302 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b22e:	781a      	ldrb	r2, [r3, #0]
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b23a:	1c5a      	adds	r2, r3, #1
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b244:	b29b      	uxth	r3, r3
 800b246:	3b01      	subs	r3, #1
 800b248:	b29a      	uxth	r2, r3
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b252:	3b01      	subs	r3, #1
 800b254:	b29a      	uxth	r2, r3
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	695b      	ldr	r3, [r3, #20]
 800b260:	f003 0304 	and.w	r3, r3, #4
 800b264:	2b04      	cmp	r3, #4
 800b266:	d11b      	bne.n	800b2a0 <HAL_I2C_Master_Transmit+0x188>
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d017      	beq.n	800b2a0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b274:	781a      	ldrb	r2, [r3, #0]
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b280:	1c5a      	adds	r2, r3, #1
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b28a:	b29b      	uxth	r3, r3
 800b28c:	3b01      	subs	r3, #1
 800b28e:	b29a      	uxth	r2, r3
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b298:	3b01      	subs	r3, #1
 800b29a:	b29a      	uxth	r2, r3
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b2a0:	697a      	ldr	r2, [r7, #20]
 800b2a2:	6a39      	ldr	r1, [r7, #32]
 800b2a4:	68f8      	ldr	r0, [r7, #12]
 800b2a6:	f000 fcc2 	bl	800bc2e <I2C_WaitOnBTFFlagUntilTimeout>
 800b2aa:	4603      	mov	r3, r0
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d00d      	beq.n	800b2cc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2b4:	2b04      	cmp	r3, #4
 800b2b6:	d107      	bne.n	800b2c8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	681a      	ldr	r2, [r3, #0]
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b2c6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b2c8:	2301      	movs	r3, #1
 800b2ca:	e01a      	b.n	800b302 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d194      	bne.n	800b1fe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	681a      	ldr	r2, [r3, #0]
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b2e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	2220      	movs	r2, #32
 800b2e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b2fc:	2300      	movs	r3, #0
 800b2fe:	e000      	b.n	800b302 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800b300:	2302      	movs	r3, #2
  }
}
 800b302:	4618      	mov	r0, r3
 800b304:	3718      	adds	r7, #24
 800b306:	46bd      	mov	sp, r7
 800b308:	bd80      	pop	{r7, pc}
 800b30a:	bf00      	nop
 800b30c:	00100002 	.word	0x00100002
 800b310:	ffff0000 	.word	0xffff0000

0800b314 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b314:	b580      	push	{r7, lr}
 800b316:	b08c      	sub	sp, #48	; 0x30
 800b318:	af02      	add	r7, sp, #8
 800b31a:	60f8      	str	r0, [r7, #12]
 800b31c:	607a      	str	r2, [r7, #4]
 800b31e:	461a      	mov	r2, r3
 800b320:	460b      	mov	r3, r1
 800b322:	817b      	strh	r3, [r7, #10]
 800b324:	4613      	mov	r3, r2
 800b326:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b328:	f7fe faf0 	bl	800990c <HAL_GetTick>
 800b32c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b334:	b2db      	uxtb	r3, r3
 800b336:	2b20      	cmp	r3, #32
 800b338:	f040 820b 	bne.w	800b752 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b33c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b33e:	9300      	str	r3, [sp, #0]
 800b340:	2319      	movs	r3, #25
 800b342:	2201      	movs	r2, #1
 800b344:	497c      	ldr	r1, [pc, #496]	; (800b538 <HAL_I2C_Master_Receive+0x224>)
 800b346:	68f8      	ldr	r0, [r7, #12]
 800b348:	f000 fb5a 	bl	800ba00 <I2C_WaitOnFlagUntilTimeout>
 800b34c:	4603      	mov	r3, r0
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d001      	beq.n	800b356 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800b352:	2302      	movs	r3, #2
 800b354:	e1fe      	b.n	800b754 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b35c:	2b01      	cmp	r3, #1
 800b35e:	d101      	bne.n	800b364 <HAL_I2C_Master_Receive+0x50>
 800b360:	2302      	movs	r3, #2
 800b362:	e1f7      	b.n	800b754 <HAL_I2C_Master_Receive+0x440>
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	2201      	movs	r2, #1
 800b368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	f003 0301 	and.w	r3, r3, #1
 800b376:	2b01      	cmp	r3, #1
 800b378:	d007      	beq.n	800b38a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	681a      	ldr	r2, [r3, #0]
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	f042 0201 	orr.w	r2, r2, #1
 800b388:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	681a      	ldr	r2, [r3, #0]
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b398:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	2222      	movs	r2, #34	; 0x22
 800b39e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	2210      	movs	r2, #16
 800b3a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	687a      	ldr	r2, [r7, #4]
 800b3b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	893a      	ldrh	r2, [r7, #8]
 800b3ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b3c0:	b29a      	uxth	r2, r3
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	4a5c      	ldr	r2, [pc, #368]	; (800b53c <HAL_I2C_Master_Receive+0x228>)
 800b3ca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b3cc:	8979      	ldrh	r1, [r7, #10]
 800b3ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b3d2:	68f8      	ldr	r0, [r7, #12]
 800b3d4:	f000 fa46 	bl	800b864 <I2C_MasterRequestRead>
 800b3d8:	4603      	mov	r3, r0
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d001      	beq.n	800b3e2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800b3de:	2301      	movs	r3, #1
 800b3e0:	e1b8      	b.n	800b754 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d113      	bne.n	800b412 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	623b      	str	r3, [r7, #32]
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	695b      	ldr	r3, [r3, #20]
 800b3f4:	623b      	str	r3, [r7, #32]
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	699b      	ldr	r3, [r3, #24]
 800b3fc:	623b      	str	r3, [r7, #32]
 800b3fe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	681a      	ldr	r2, [r3, #0]
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b40e:	601a      	str	r2, [r3, #0]
 800b410:	e18c      	b.n	800b72c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b416:	2b01      	cmp	r3, #1
 800b418:	d11b      	bne.n	800b452 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	681a      	ldr	r2, [r3, #0]
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b428:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b42a:	2300      	movs	r3, #0
 800b42c:	61fb      	str	r3, [r7, #28]
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	695b      	ldr	r3, [r3, #20]
 800b434:	61fb      	str	r3, [r7, #28]
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	699b      	ldr	r3, [r3, #24]
 800b43c:	61fb      	str	r3, [r7, #28]
 800b43e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	681a      	ldr	r2, [r3, #0]
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b44e:	601a      	str	r2, [r3, #0]
 800b450:	e16c      	b.n	800b72c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b456:	2b02      	cmp	r3, #2
 800b458:	d11b      	bne.n	800b492 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	681a      	ldr	r2, [r3, #0]
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b468:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	681a      	ldr	r2, [r3, #0]
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b478:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b47a:	2300      	movs	r3, #0
 800b47c:	61bb      	str	r3, [r7, #24]
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	695b      	ldr	r3, [r3, #20]
 800b484:	61bb      	str	r3, [r7, #24]
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	699b      	ldr	r3, [r3, #24]
 800b48c:	61bb      	str	r3, [r7, #24]
 800b48e:	69bb      	ldr	r3, [r7, #24]
 800b490:	e14c      	b.n	800b72c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	681a      	ldr	r2, [r3, #0]
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b4a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	617b      	str	r3, [r7, #20]
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	695b      	ldr	r3, [r3, #20]
 800b4ac:	617b      	str	r3, [r7, #20]
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	699b      	ldr	r3, [r3, #24]
 800b4b4:	617b      	str	r3, [r7, #20]
 800b4b6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800b4b8:	e138      	b.n	800b72c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b4be:	2b03      	cmp	r3, #3
 800b4c0:	f200 80f1 	bhi.w	800b6a6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b4c8:	2b01      	cmp	r3, #1
 800b4ca:	d123      	bne.n	800b514 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b4cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b4d0:	68f8      	ldr	r0, [r7, #12]
 800b4d2:	f000 fbed 	bl	800bcb0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d001      	beq.n	800b4e0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800b4dc:	2301      	movs	r3, #1
 800b4de:	e139      	b.n	800b754 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	691a      	ldr	r2, [r3, #16]
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4ea:	b2d2      	uxtb	r2, r2
 800b4ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4f2:	1c5a      	adds	r2, r3, #1
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b4fc:	3b01      	subs	r3, #1
 800b4fe:	b29a      	uxth	r2, r3
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b508:	b29b      	uxth	r3, r3
 800b50a:	3b01      	subs	r3, #1
 800b50c:	b29a      	uxth	r2, r3
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b512:	e10b      	b.n	800b72c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b518:	2b02      	cmp	r3, #2
 800b51a:	d14e      	bne.n	800b5ba <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b51c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b51e:	9300      	str	r3, [sp, #0]
 800b520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b522:	2200      	movs	r2, #0
 800b524:	4906      	ldr	r1, [pc, #24]	; (800b540 <HAL_I2C_Master_Receive+0x22c>)
 800b526:	68f8      	ldr	r0, [r7, #12]
 800b528:	f000 fa6a 	bl	800ba00 <I2C_WaitOnFlagUntilTimeout>
 800b52c:	4603      	mov	r3, r0
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d008      	beq.n	800b544 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800b532:	2301      	movs	r3, #1
 800b534:	e10e      	b.n	800b754 <HAL_I2C_Master_Receive+0x440>
 800b536:	bf00      	nop
 800b538:	00100002 	.word	0x00100002
 800b53c:	ffff0000 	.word	0xffff0000
 800b540:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	681a      	ldr	r2, [r3, #0]
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b552:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	691a      	ldr	r2, [r3, #16]
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b55e:	b2d2      	uxtb	r2, r2
 800b560:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b566:	1c5a      	adds	r2, r3, #1
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b570:	3b01      	subs	r3, #1
 800b572:	b29a      	uxth	r2, r3
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b57c:	b29b      	uxth	r3, r3
 800b57e:	3b01      	subs	r3, #1
 800b580:	b29a      	uxth	r2, r3
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	691a      	ldr	r2, [r3, #16]
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b590:	b2d2      	uxtb	r2, r2
 800b592:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b598:	1c5a      	adds	r2, r3, #1
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b5a2:	3b01      	subs	r3, #1
 800b5a4:	b29a      	uxth	r2, r3
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b5ae:	b29b      	uxth	r3, r3
 800b5b0:	3b01      	subs	r3, #1
 800b5b2:	b29a      	uxth	r2, r3
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b5b8:	e0b8      	b.n	800b72c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b5ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5bc:	9300      	str	r3, [sp, #0]
 800b5be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	4966      	ldr	r1, [pc, #408]	; (800b75c <HAL_I2C_Master_Receive+0x448>)
 800b5c4:	68f8      	ldr	r0, [r7, #12]
 800b5c6:	f000 fa1b 	bl	800ba00 <I2C_WaitOnFlagUntilTimeout>
 800b5ca:	4603      	mov	r3, r0
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d001      	beq.n	800b5d4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800b5d0:	2301      	movs	r3, #1
 800b5d2:	e0bf      	b.n	800b754 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	681a      	ldr	r2, [r3, #0]
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b5e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	691a      	ldr	r2, [r3, #16]
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5ee:	b2d2      	uxtb	r2, r2
 800b5f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5f6:	1c5a      	adds	r2, r3, #1
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b600:	3b01      	subs	r3, #1
 800b602:	b29a      	uxth	r2, r3
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b60c:	b29b      	uxth	r3, r3
 800b60e:	3b01      	subs	r3, #1
 800b610:	b29a      	uxth	r2, r3
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b618:	9300      	str	r3, [sp, #0]
 800b61a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b61c:	2200      	movs	r2, #0
 800b61e:	494f      	ldr	r1, [pc, #316]	; (800b75c <HAL_I2C_Master_Receive+0x448>)
 800b620:	68f8      	ldr	r0, [r7, #12]
 800b622:	f000 f9ed 	bl	800ba00 <I2C_WaitOnFlagUntilTimeout>
 800b626:	4603      	mov	r3, r0
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d001      	beq.n	800b630 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800b62c:	2301      	movs	r3, #1
 800b62e:	e091      	b.n	800b754 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	681a      	ldr	r2, [r3, #0]
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b63e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	691a      	ldr	r2, [r3, #16]
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b64a:	b2d2      	uxtb	r2, r2
 800b64c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b652:	1c5a      	adds	r2, r3, #1
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b65c:	3b01      	subs	r3, #1
 800b65e:	b29a      	uxth	r2, r3
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b668:	b29b      	uxth	r3, r3
 800b66a:	3b01      	subs	r3, #1
 800b66c:	b29a      	uxth	r2, r3
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	691a      	ldr	r2, [r3, #16]
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b67c:	b2d2      	uxtb	r2, r2
 800b67e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b684:	1c5a      	adds	r2, r3, #1
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b68e:	3b01      	subs	r3, #1
 800b690:	b29a      	uxth	r2, r3
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b69a:	b29b      	uxth	r3, r3
 800b69c:	3b01      	subs	r3, #1
 800b69e:	b29a      	uxth	r2, r3
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b6a4:	e042      	b.n	800b72c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b6a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b6aa:	68f8      	ldr	r0, [r7, #12]
 800b6ac:	f000 fb00 	bl	800bcb0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b6b0:	4603      	mov	r3, r0
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d001      	beq.n	800b6ba <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800b6b6:	2301      	movs	r3, #1
 800b6b8:	e04c      	b.n	800b754 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	691a      	ldr	r2, [r3, #16]
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6c4:	b2d2      	uxtb	r2, r2
 800b6c6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6cc:	1c5a      	adds	r2, r3, #1
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b6d6:	3b01      	subs	r3, #1
 800b6d8:	b29a      	uxth	r2, r3
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b6e2:	b29b      	uxth	r3, r3
 800b6e4:	3b01      	subs	r3, #1
 800b6e6:	b29a      	uxth	r2, r3
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	695b      	ldr	r3, [r3, #20]
 800b6f2:	f003 0304 	and.w	r3, r3, #4
 800b6f6:	2b04      	cmp	r3, #4
 800b6f8:	d118      	bne.n	800b72c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	691a      	ldr	r2, [r3, #16]
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b704:	b2d2      	uxtb	r2, r2
 800b706:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b70c:	1c5a      	adds	r2, r3, #1
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b716:	3b01      	subs	r3, #1
 800b718:	b29a      	uxth	r2, r3
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b722:	b29b      	uxth	r3, r3
 800b724:	3b01      	subs	r3, #1
 800b726:	b29a      	uxth	r2, r3
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b730:	2b00      	cmp	r3, #0
 800b732:	f47f aec2 	bne.w	800b4ba <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	2220      	movs	r2, #32
 800b73a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	2200      	movs	r2, #0
 800b742:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	2200      	movs	r2, #0
 800b74a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b74e:	2300      	movs	r3, #0
 800b750:	e000      	b.n	800b754 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800b752:	2302      	movs	r3, #2
  }
}
 800b754:	4618      	mov	r0, r3
 800b756:	3728      	adds	r7, #40	; 0x28
 800b758:	46bd      	mov	sp, r7
 800b75a:	bd80      	pop	{r7, pc}
 800b75c:	00010004 	.word	0x00010004

0800b760 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b088      	sub	sp, #32
 800b764:	af02      	add	r7, sp, #8
 800b766:	60f8      	str	r0, [r7, #12]
 800b768:	607a      	str	r2, [r7, #4]
 800b76a:	603b      	str	r3, [r7, #0]
 800b76c:	460b      	mov	r3, r1
 800b76e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b774:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800b776:	697b      	ldr	r3, [r7, #20]
 800b778:	2b08      	cmp	r3, #8
 800b77a:	d006      	beq.n	800b78a <I2C_MasterRequestWrite+0x2a>
 800b77c:	697b      	ldr	r3, [r7, #20]
 800b77e:	2b01      	cmp	r3, #1
 800b780:	d003      	beq.n	800b78a <I2C_MasterRequestWrite+0x2a>
 800b782:	697b      	ldr	r3, [r7, #20]
 800b784:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b788:	d108      	bne.n	800b79c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	681a      	ldr	r2, [r3, #0]
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b798:	601a      	str	r2, [r3, #0]
 800b79a:	e00b      	b.n	800b7b4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7a0:	2b12      	cmp	r3, #18
 800b7a2:	d107      	bne.n	800b7b4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	681a      	ldr	r2, [r3, #0]
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b7b2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b7b4:	683b      	ldr	r3, [r7, #0]
 800b7b6:	9300      	str	r3, [sp, #0]
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b7c0:	68f8      	ldr	r0, [r7, #12]
 800b7c2:	f000 f91d 	bl	800ba00 <I2C_WaitOnFlagUntilTimeout>
 800b7c6:	4603      	mov	r3, r0
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d00d      	beq.n	800b7e8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b7da:	d103      	bne.n	800b7e4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b7e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b7e4:	2303      	movs	r3, #3
 800b7e6:	e035      	b.n	800b854 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	691b      	ldr	r3, [r3, #16]
 800b7ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b7f0:	d108      	bne.n	800b804 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b7f2:	897b      	ldrh	r3, [r7, #10]
 800b7f4:	b2db      	uxtb	r3, r3
 800b7f6:	461a      	mov	r2, r3
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800b800:	611a      	str	r2, [r3, #16]
 800b802:	e01b      	b.n	800b83c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800b804:	897b      	ldrh	r3, [r7, #10]
 800b806:	11db      	asrs	r3, r3, #7
 800b808:	b2db      	uxtb	r3, r3
 800b80a:	f003 0306 	and.w	r3, r3, #6
 800b80e:	b2db      	uxtb	r3, r3
 800b810:	f063 030f 	orn	r3, r3, #15
 800b814:	b2da      	uxtb	r2, r3
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800b81c:	683b      	ldr	r3, [r7, #0]
 800b81e:	687a      	ldr	r2, [r7, #4]
 800b820:	490e      	ldr	r1, [pc, #56]	; (800b85c <I2C_MasterRequestWrite+0xfc>)
 800b822:	68f8      	ldr	r0, [r7, #12]
 800b824:	f000 f943 	bl	800baae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b828:	4603      	mov	r3, r0
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d001      	beq.n	800b832 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800b82e:	2301      	movs	r3, #1
 800b830:	e010      	b.n	800b854 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800b832:	897b      	ldrh	r3, [r7, #10]
 800b834:	b2da      	uxtb	r2, r3
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b83c:	683b      	ldr	r3, [r7, #0]
 800b83e:	687a      	ldr	r2, [r7, #4]
 800b840:	4907      	ldr	r1, [pc, #28]	; (800b860 <I2C_MasterRequestWrite+0x100>)
 800b842:	68f8      	ldr	r0, [r7, #12]
 800b844:	f000 f933 	bl	800baae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b848:	4603      	mov	r3, r0
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d001      	beq.n	800b852 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800b84e:	2301      	movs	r3, #1
 800b850:	e000      	b.n	800b854 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800b852:	2300      	movs	r3, #0
}
 800b854:	4618      	mov	r0, r3
 800b856:	3718      	adds	r7, #24
 800b858:	46bd      	mov	sp, r7
 800b85a:	bd80      	pop	{r7, pc}
 800b85c:	00010008 	.word	0x00010008
 800b860:	00010002 	.word	0x00010002

0800b864 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800b864:	b580      	push	{r7, lr}
 800b866:	b088      	sub	sp, #32
 800b868:	af02      	add	r7, sp, #8
 800b86a:	60f8      	str	r0, [r7, #12]
 800b86c:	607a      	str	r2, [r7, #4]
 800b86e:	603b      	str	r3, [r7, #0]
 800b870:	460b      	mov	r3, r1
 800b872:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b878:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	681a      	ldr	r2, [r3, #0]
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b888:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800b88a:	697b      	ldr	r3, [r7, #20]
 800b88c:	2b08      	cmp	r3, #8
 800b88e:	d006      	beq.n	800b89e <I2C_MasterRequestRead+0x3a>
 800b890:	697b      	ldr	r3, [r7, #20]
 800b892:	2b01      	cmp	r3, #1
 800b894:	d003      	beq.n	800b89e <I2C_MasterRequestRead+0x3a>
 800b896:	697b      	ldr	r3, [r7, #20]
 800b898:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b89c:	d108      	bne.n	800b8b0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	681a      	ldr	r2, [r3, #0]
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b8ac:	601a      	str	r2, [r3, #0]
 800b8ae:	e00b      	b.n	800b8c8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8b4:	2b11      	cmp	r3, #17
 800b8b6:	d107      	bne.n	800b8c8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	681a      	ldr	r2, [r3, #0]
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b8c6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b8c8:	683b      	ldr	r3, [r7, #0]
 800b8ca:	9300      	str	r3, [sp, #0]
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	2200      	movs	r2, #0
 800b8d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b8d4:	68f8      	ldr	r0, [r7, #12]
 800b8d6:	f000 f893 	bl	800ba00 <I2C_WaitOnFlagUntilTimeout>
 800b8da:	4603      	mov	r3, r0
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d00d      	beq.n	800b8fc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b8ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b8ee:	d103      	bne.n	800b8f8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b8f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b8f8:	2303      	movs	r3, #3
 800b8fa:	e079      	b.n	800b9f0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	691b      	ldr	r3, [r3, #16]
 800b900:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b904:	d108      	bne.n	800b918 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800b906:	897b      	ldrh	r3, [r7, #10]
 800b908:	b2db      	uxtb	r3, r3
 800b90a:	f043 0301 	orr.w	r3, r3, #1
 800b90e:	b2da      	uxtb	r2, r3
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	611a      	str	r2, [r3, #16]
 800b916:	e05f      	b.n	800b9d8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800b918:	897b      	ldrh	r3, [r7, #10]
 800b91a:	11db      	asrs	r3, r3, #7
 800b91c:	b2db      	uxtb	r3, r3
 800b91e:	f003 0306 	and.w	r3, r3, #6
 800b922:	b2db      	uxtb	r3, r3
 800b924:	f063 030f 	orn	r3, r3, #15
 800b928:	b2da      	uxtb	r2, r3
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800b930:	683b      	ldr	r3, [r7, #0]
 800b932:	687a      	ldr	r2, [r7, #4]
 800b934:	4930      	ldr	r1, [pc, #192]	; (800b9f8 <I2C_MasterRequestRead+0x194>)
 800b936:	68f8      	ldr	r0, [r7, #12]
 800b938:	f000 f8b9 	bl	800baae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b93c:	4603      	mov	r3, r0
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d001      	beq.n	800b946 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800b942:	2301      	movs	r3, #1
 800b944:	e054      	b.n	800b9f0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800b946:	897b      	ldrh	r3, [r7, #10]
 800b948:	b2da      	uxtb	r2, r3
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b950:	683b      	ldr	r3, [r7, #0]
 800b952:	687a      	ldr	r2, [r7, #4]
 800b954:	4929      	ldr	r1, [pc, #164]	; (800b9fc <I2C_MasterRequestRead+0x198>)
 800b956:	68f8      	ldr	r0, [r7, #12]
 800b958:	f000 f8a9 	bl	800baae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b95c:	4603      	mov	r3, r0
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d001      	beq.n	800b966 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800b962:	2301      	movs	r3, #1
 800b964:	e044      	b.n	800b9f0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b966:	2300      	movs	r3, #0
 800b968:	613b      	str	r3, [r7, #16]
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	695b      	ldr	r3, [r3, #20]
 800b970:	613b      	str	r3, [r7, #16]
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	699b      	ldr	r3, [r3, #24]
 800b978:	613b      	str	r3, [r7, #16]
 800b97a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	681a      	ldr	r2, [r3, #0]
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b98a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b98c:	683b      	ldr	r3, [r7, #0]
 800b98e:	9300      	str	r3, [sp, #0]
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	2200      	movs	r2, #0
 800b994:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b998:	68f8      	ldr	r0, [r7, #12]
 800b99a:	f000 f831 	bl	800ba00 <I2C_WaitOnFlagUntilTimeout>
 800b99e:	4603      	mov	r3, r0
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d00d      	beq.n	800b9c0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b9ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b9b2:	d103      	bne.n	800b9bc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b9ba:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800b9bc:	2303      	movs	r3, #3
 800b9be:	e017      	b.n	800b9f0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800b9c0:	897b      	ldrh	r3, [r7, #10]
 800b9c2:	11db      	asrs	r3, r3, #7
 800b9c4:	b2db      	uxtb	r3, r3
 800b9c6:	f003 0306 	and.w	r3, r3, #6
 800b9ca:	b2db      	uxtb	r3, r3
 800b9cc:	f063 030e 	orn	r3, r3, #14
 800b9d0:	b2da      	uxtb	r2, r3
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b9d8:	683b      	ldr	r3, [r7, #0]
 800b9da:	687a      	ldr	r2, [r7, #4]
 800b9dc:	4907      	ldr	r1, [pc, #28]	; (800b9fc <I2C_MasterRequestRead+0x198>)
 800b9de:	68f8      	ldr	r0, [r7, #12]
 800b9e0:	f000 f865 	bl	800baae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b9e4:	4603      	mov	r3, r0
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d001      	beq.n	800b9ee <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800b9ea:	2301      	movs	r3, #1
 800b9ec:	e000      	b.n	800b9f0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800b9ee:	2300      	movs	r3, #0
}
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	3718      	adds	r7, #24
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	bd80      	pop	{r7, pc}
 800b9f8:	00010008 	.word	0x00010008
 800b9fc:	00010002 	.word	0x00010002

0800ba00 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b084      	sub	sp, #16
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	60f8      	str	r0, [r7, #12]
 800ba08:	60b9      	str	r1, [r7, #8]
 800ba0a:	603b      	str	r3, [r7, #0]
 800ba0c:	4613      	mov	r3, r2
 800ba0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ba10:	e025      	b.n	800ba5e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ba12:	683b      	ldr	r3, [r7, #0]
 800ba14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba18:	d021      	beq.n	800ba5e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ba1a:	f7fd ff77 	bl	800990c <HAL_GetTick>
 800ba1e:	4602      	mov	r2, r0
 800ba20:	69bb      	ldr	r3, [r7, #24]
 800ba22:	1ad3      	subs	r3, r2, r3
 800ba24:	683a      	ldr	r2, [r7, #0]
 800ba26:	429a      	cmp	r2, r3
 800ba28:	d302      	bcc.n	800ba30 <I2C_WaitOnFlagUntilTimeout+0x30>
 800ba2a:	683b      	ldr	r3, [r7, #0]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d116      	bne.n	800ba5e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	2200      	movs	r2, #0
 800ba34:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	2220      	movs	r2, #32
 800ba3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	2200      	movs	r2, #0
 800ba42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba4a:	f043 0220 	orr.w	r2, r3, #32
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	2200      	movs	r2, #0
 800ba56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ba5a:	2301      	movs	r3, #1
 800ba5c:	e023      	b.n	800baa6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ba5e:	68bb      	ldr	r3, [r7, #8]
 800ba60:	0c1b      	lsrs	r3, r3, #16
 800ba62:	b2db      	uxtb	r3, r3
 800ba64:	2b01      	cmp	r3, #1
 800ba66:	d10d      	bne.n	800ba84 <I2C_WaitOnFlagUntilTimeout+0x84>
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	695b      	ldr	r3, [r3, #20]
 800ba6e:	43da      	mvns	r2, r3
 800ba70:	68bb      	ldr	r3, [r7, #8]
 800ba72:	4013      	ands	r3, r2
 800ba74:	b29b      	uxth	r3, r3
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	bf0c      	ite	eq
 800ba7a:	2301      	moveq	r3, #1
 800ba7c:	2300      	movne	r3, #0
 800ba7e:	b2db      	uxtb	r3, r3
 800ba80:	461a      	mov	r2, r3
 800ba82:	e00c      	b.n	800ba9e <I2C_WaitOnFlagUntilTimeout+0x9e>
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	699b      	ldr	r3, [r3, #24]
 800ba8a:	43da      	mvns	r2, r3
 800ba8c:	68bb      	ldr	r3, [r7, #8]
 800ba8e:	4013      	ands	r3, r2
 800ba90:	b29b      	uxth	r3, r3
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	bf0c      	ite	eq
 800ba96:	2301      	moveq	r3, #1
 800ba98:	2300      	movne	r3, #0
 800ba9a:	b2db      	uxtb	r3, r3
 800ba9c:	461a      	mov	r2, r3
 800ba9e:	79fb      	ldrb	r3, [r7, #7]
 800baa0:	429a      	cmp	r2, r3
 800baa2:	d0b6      	beq.n	800ba12 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800baa4:	2300      	movs	r3, #0
}
 800baa6:	4618      	mov	r0, r3
 800baa8:	3710      	adds	r7, #16
 800baaa:	46bd      	mov	sp, r7
 800baac:	bd80      	pop	{r7, pc}

0800baae <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800baae:	b580      	push	{r7, lr}
 800bab0:	b084      	sub	sp, #16
 800bab2:	af00      	add	r7, sp, #0
 800bab4:	60f8      	str	r0, [r7, #12]
 800bab6:	60b9      	str	r1, [r7, #8]
 800bab8:	607a      	str	r2, [r7, #4]
 800baba:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800babc:	e051      	b.n	800bb62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	695b      	ldr	r3, [r3, #20]
 800bac4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bac8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bacc:	d123      	bne.n	800bb16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	681a      	ldr	r2, [r3, #0]
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800badc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800bae6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	2200      	movs	r2, #0
 800baec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	2220      	movs	r2, #32
 800baf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	2200      	movs	r2, #0
 800bafa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb02:	f043 0204 	orr.w	r2, r3, #4
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800bb12:	2301      	movs	r3, #1
 800bb14:	e046      	b.n	800bba4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb1c:	d021      	beq.n	800bb62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bb1e:	f7fd fef5 	bl	800990c <HAL_GetTick>
 800bb22:	4602      	mov	r2, r0
 800bb24:	683b      	ldr	r3, [r7, #0]
 800bb26:	1ad3      	subs	r3, r2, r3
 800bb28:	687a      	ldr	r2, [r7, #4]
 800bb2a:	429a      	cmp	r2, r3
 800bb2c:	d302      	bcc.n	800bb34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d116      	bne.n	800bb62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	2200      	movs	r2, #0
 800bb38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	2220      	movs	r2, #32
 800bb3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	2200      	movs	r2, #0
 800bb46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb4e:	f043 0220 	orr.w	r2, r3, #32
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	2200      	movs	r2, #0
 800bb5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800bb5e:	2301      	movs	r3, #1
 800bb60:	e020      	b.n	800bba4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800bb62:	68bb      	ldr	r3, [r7, #8]
 800bb64:	0c1b      	lsrs	r3, r3, #16
 800bb66:	b2db      	uxtb	r3, r3
 800bb68:	2b01      	cmp	r3, #1
 800bb6a:	d10c      	bne.n	800bb86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	695b      	ldr	r3, [r3, #20]
 800bb72:	43da      	mvns	r2, r3
 800bb74:	68bb      	ldr	r3, [r7, #8]
 800bb76:	4013      	ands	r3, r2
 800bb78:	b29b      	uxth	r3, r3
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	bf14      	ite	ne
 800bb7e:	2301      	movne	r3, #1
 800bb80:	2300      	moveq	r3, #0
 800bb82:	b2db      	uxtb	r3, r3
 800bb84:	e00b      	b.n	800bb9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	699b      	ldr	r3, [r3, #24]
 800bb8c:	43da      	mvns	r2, r3
 800bb8e:	68bb      	ldr	r3, [r7, #8]
 800bb90:	4013      	ands	r3, r2
 800bb92:	b29b      	uxth	r3, r3
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	bf14      	ite	ne
 800bb98:	2301      	movne	r3, #1
 800bb9a:	2300      	moveq	r3, #0
 800bb9c:	b2db      	uxtb	r3, r3
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d18d      	bne.n	800babe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800bba2:	2300      	movs	r3, #0
}
 800bba4:	4618      	mov	r0, r3
 800bba6:	3710      	adds	r7, #16
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	bd80      	pop	{r7, pc}

0800bbac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bbac:	b580      	push	{r7, lr}
 800bbae:	b084      	sub	sp, #16
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	60f8      	str	r0, [r7, #12]
 800bbb4:	60b9      	str	r1, [r7, #8]
 800bbb6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800bbb8:	e02d      	b.n	800bc16 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800bbba:	68f8      	ldr	r0, [r7, #12]
 800bbbc:	f000 f8ce 	bl	800bd5c <I2C_IsAcknowledgeFailed>
 800bbc0:	4603      	mov	r3, r0
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d001      	beq.n	800bbca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800bbc6:	2301      	movs	r3, #1
 800bbc8:	e02d      	b.n	800bc26 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bbca:	68bb      	ldr	r3, [r7, #8]
 800bbcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbd0:	d021      	beq.n	800bc16 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bbd2:	f7fd fe9b 	bl	800990c <HAL_GetTick>
 800bbd6:	4602      	mov	r2, r0
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	1ad3      	subs	r3, r2, r3
 800bbdc:	68ba      	ldr	r2, [r7, #8]
 800bbde:	429a      	cmp	r2, r3
 800bbe0:	d302      	bcc.n	800bbe8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800bbe2:	68bb      	ldr	r3, [r7, #8]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d116      	bne.n	800bc16 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	2200      	movs	r2, #0
 800bbec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	2220      	movs	r2, #32
 800bbf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	2200      	movs	r2, #0
 800bbfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc02:	f043 0220 	orr.w	r2, r3, #32
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800bc12:	2301      	movs	r3, #1
 800bc14:	e007      	b.n	800bc26 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	695b      	ldr	r3, [r3, #20]
 800bc1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc20:	2b80      	cmp	r3, #128	; 0x80
 800bc22:	d1ca      	bne.n	800bbba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800bc24:	2300      	movs	r3, #0
}
 800bc26:	4618      	mov	r0, r3
 800bc28:	3710      	adds	r7, #16
 800bc2a:	46bd      	mov	sp, r7
 800bc2c:	bd80      	pop	{r7, pc}

0800bc2e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bc2e:	b580      	push	{r7, lr}
 800bc30:	b084      	sub	sp, #16
 800bc32:	af00      	add	r7, sp, #0
 800bc34:	60f8      	str	r0, [r7, #12]
 800bc36:	60b9      	str	r1, [r7, #8]
 800bc38:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800bc3a:	e02d      	b.n	800bc98 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800bc3c:	68f8      	ldr	r0, [r7, #12]
 800bc3e:	f000 f88d 	bl	800bd5c <I2C_IsAcknowledgeFailed>
 800bc42:	4603      	mov	r3, r0
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d001      	beq.n	800bc4c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800bc48:	2301      	movs	r3, #1
 800bc4a:	e02d      	b.n	800bca8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bc4c:	68bb      	ldr	r3, [r7, #8]
 800bc4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc52:	d021      	beq.n	800bc98 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bc54:	f7fd fe5a 	bl	800990c <HAL_GetTick>
 800bc58:	4602      	mov	r2, r0
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	1ad3      	subs	r3, r2, r3
 800bc5e:	68ba      	ldr	r2, [r7, #8]
 800bc60:	429a      	cmp	r2, r3
 800bc62:	d302      	bcc.n	800bc6a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800bc64:	68bb      	ldr	r3, [r7, #8]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d116      	bne.n	800bc98 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	2200      	movs	r2, #0
 800bc6e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	2220      	movs	r2, #32
 800bc74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	2200      	movs	r2, #0
 800bc7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc84:	f043 0220 	orr.w	r2, r3, #32
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	2200      	movs	r2, #0
 800bc90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800bc94:	2301      	movs	r3, #1
 800bc96:	e007      	b.n	800bca8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	695b      	ldr	r3, [r3, #20]
 800bc9e:	f003 0304 	and.w	r3, r3, #4
 800bca2:	2b04      	cmp	r3, #4
 800bca4:	d1ca      	bne.n	800bc3c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800bca6:	2300      	movs	r3, #0
}
 800bca8:	4618      	mov	r0, r3
 800bcaa:	3710      	adds	r7, #16
 800bcac:	46bd      	mov	sp, r7
 800bcae:	bd80      	pop	{r7, pc}

0800bcb0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b084      	sub	sp, #16
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	60f8      	str	r0, [r7, #12]
 800bcb8:	60b9      	str	r1, [r7, #8]
 800bcba:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800bcbc:	e042      	b.n	800bd44 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	695b      	ldr	r3, [r3, #20]
 800bcc4:	f003 0310 	and.w	r3, r3, #16
 800bcc8:	2b10      	cmp	r3, #16
 800bcca:	d119      	bne.n	800bd00 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	f06f 0210 	mvn.w	r2, #16
 800bcd4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	2200      	movs	r2, #0
 800bcda:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	2220      	movs	r2, #32
 800bce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	2200      	movs	r2, #0
 800bce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800bcfc:	2301      	movs	r3, #1
 800bcfe:	e029      	b.n	800bd54 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bd00:	f7fd fe04 	bl	800990c <HAL_GetTick>
 800bd04:	4602      	mov	r2, r0
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	1ad3      	subs	r3, r2, r3
 800bd0a:	68ba      	ldr	r2, [r7, #8]
 800bd0c:	429a      	cmp	r2, r3
 800bd0e:	d302      	bcc.n	800bd16 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800bd10:	68bb      	ldr	r3, [r7, #8]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d116      	bne.n	800bd44 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	2200      	movs	r2, #0
 800bd1a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	2220      	movs	r2, #32
 800bd20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	2200      	movs	r2, #0
 800bd28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd30:	f043 0220 	orr.w	r2, r3, #32
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800bd40:	2301      	movs	r3, #1
 800bd42:	e007      	b.n	800bd54 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	695b      	ldr	r3, [r3, #20]
 800bd4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd4e:	2b40      	cmp	r3, #64	; 0x40
 800bd50:	d1b5      	bne.n	800bcbe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800bd52:	2300      	movs	r3, #0
}
 800bd54:	4618      	mov	r0, r3
 800bd56:	3710      	adds	r7, #16
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	bd80      	pop	{r7, pc}

0800bd5c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800bd5c:	b480      	push	{r7}
 800bd5e:	b083      	sub	sp, #12
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	695b      	ldr	r3, [r3, #20]
 800bd6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bd6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd72:	d11b      	bne.n	800bdac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800bd7c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	2200      	movs	r2, #0
 800bd82:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	2220      	movs	r2, #32
 800bd88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	2200      	movs	r2, #0
 800bd90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd98:	f043 0204 	orr.w	r2, r3, #4
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	2200      	movs	r2, #0
 800bda4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800bda8:	2301      	movs	r3, #1
 800bdaa:	e000      	b.n	800bdae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800bdac:	2300      	movs	r3, #0
}
 800bdae:	4618      	mov	r0, r3
 800bdb0:	370c      	adds	r7, #12
 800bdb2:	46bd      	mov	sp, r7
 800bdb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb8:	4770      	bx	lr
	...

0800bdbc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800bdbc:	b580      	push	{r7, lr}
 800bdbe:	b082      	sub	sp, #8
 800bdc0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	603b      	str	r3, [r7, #0]
 800bdca:	4b20      	ldr	r3, [pc, #128]	; (800be4c <HAL_PWREx_EnableOverDrive+0x90>)
 800bdcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdce:	4a1f      	ldr	r2, [pc, #124]	; (800be4c <HAL_PWREx_EnableOverDrive+0x90>)
 800bdd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bdd4:	6413      	str	r3, [r2, #64]	; 0x40
 800bdd6:	4b1d      	ldr	r3, [pc, #116]	; (800be4c <HAL_PWREx_EnableOverDrive+0x90>)
 800bdd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bdde:	603b      	str	r3, [r7, #0]
 800bde0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800bde2:	4b1b      	ldr	r3, [pc, #108]	; (800be50 <HAL_PWREx_EnableOverDrive+0x94>)
 800bde4:	2201      	movs	r2, #1
 800bde6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800bde8:	f7fd fd90 	bl	800990c <HAL_GetTick>
 800bdec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800bdee:	e009      	b.n	800be04 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800bdf0:	f7fd fd8c 	bl	800990c <HAL_GetTick>
 800bdf4:	4602      	mov	r2, r0
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	1ad3      	subs	r3, r2, r3
 800bdfa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bdfe:	d901      	bls.n	800be04 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800be00:	2303      	movs	r3, #3
 800be02:	e01f      	b.n	800be44 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800be04:	4b13      	ldr	r3, [pc, #76]	; (800be54 <HAL_PWREx_EnableOverDrive+0x98>)
 800be06:	685b      	ldr	r3, [r3, #4]
 800be08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800be0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be10:	d1ee      	bne.n	800bdf0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800be12:	4b11      	ldr	r3, [pc, #68]	; (800be58 <HAL_PWREx_EnableOverDrive+0x9c>)
 800be14:	2201      	movs	r2, #1
 800be16:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800be18:	f7fd fd78 	bl	800990c <HAL_GetTick>
 800be1c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800be1e:	e009      	b.n	800be34 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800be20:	f7fd fd74 	bl	800990c <HAL_GetTick>
 800be24:	4602      	mov	r2, r0
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	1ad3      	subs	r3, r2, r3
 800be2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800be2e:	d901      	bls.n	800be34 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800be30:	2303      	movs	r3, #3
 800be32:	e007      	b.n	800be44 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800be34:	4b07      	ldr	r3, [pc, #28]	; (800be54 <HAL_PWREx_EnableOverDrive+0x98>)
 800be36:	685b      	ldr	r3, [r3, #4]
 800be38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800be3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800be40:	d1ee      	bne.n	800be20 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800be42:	2300      	movs	r3, #0
}
 800be44:	4618      	mov	r0, r3
 800be46:	3708      	adds	r7, #8
 800be48:	46bd      	mov	sp, r7
 800be4a:	bd80      	pop	{r7, pc}
 800be4c:	40023800 	.word	0x40023800
 800be50:	420e0040 	.word	0x420e0040
 800be54:	40007000 	.word	0x40007000
 800be58:	420e0044 	.word	0x420e0044

0800be5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800be5c:	b580      	push	{r7, lr}
 800be5e:	b084      	sub	sp, #16
 800be60:	af00      	add	r7, sp, #0
 800be62:	6078      	str	r0, [r7, #4]
 800be64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d101      	bne.n	800be70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800be6c:	2301      	movs	r3, #1
 800be6e:	e0cc      	b.n	800c00a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800be70:	4b68      	ldr	r3, [pc, #416]	; (800c014 <HAL_RCC_ClockConfig+0x1b8>)
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	f003 030f 	and.w	r3, r3, #15
 800be78:	683a      	ldr	r2, [r7, #0]
 800be7a:	429a      	cmp	r2, r3
 800be7c:	d90c      	bls.n	800be98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800be7e:	4b65      	ldr	r3, [pc, #404]	; (800c014 <HAL_RCC_ClockConfig+0x1b8>)
 800be80:	683a      	ldr	r2, [r7, #0]
 800be82:	b2d2      	uxtb	r2, r2
 800be84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800be86:	4b63      	ldr	r3, [pc, #396]	; (800c014 <HAL_RCC_ClockConfig+0x1b8>)
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	f003 030f 	and.w	r3, r3, #15
 800be8e:	683a      	ldr	r2, [r7, #0]
 800be90:	429a      	cmp	r2, r3
 800be92:	d001      	beq.n	800be98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800be94:	2301      	movs	r3, #1
 800be96:	e0b8      	b.n	800c00a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	f003 0302 	and.w	r3, r3, #2
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d020      	beq.n	800bee6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	f003 0304 	and.w	r3, r3, #4
 800beac:	2b00      	cmp	r3, #0
 800beae:	d005      	beq.n	800bebc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800beb0:	4b59      	ldr	r3, [pc, #356]	; (800c018 <HAL_RCC_ClockConfig+0x1bc>)
 800beb2:	689b      	ldr	r3, [r3, #8]
 800beb4:	4a58      	ldr	r2, [pc, #352]	; (800c018 <HAL_RCC_ClockConfig+0x1bc>)
 800beb6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800beba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	f003 0308 	and.w	r3, r3, #8
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d005      	beq.n	800bed4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800bec8:	4b53      	ldr	r3, [pc, #332]	; (800c018 <HAL_RCC_ClockConfig+0x1bc>)
 800beca:	689b      	ldr	r3, [r3, #8]
 800becc:	4a52      	ldr	r2, [pc, #328]	; (800c018 <HAL_RCC_ClockConfig+0x1bc>)
 800bece:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800bed2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bed4:	4b50      	ldr	r3, [pc, #320]	; (800c018 <HAL_RCC_ClockConfig+0x1bc>)
 800bed6:	689b      	ldr	r3, [r3, #8]
 800bed8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	689b      	ldr	r3, [r3, #8]
 800bee0:	494d      	ldr	r1, [pc, #308]	; (800c018 <HAL_RCC_ClockConfig+0x1bc>)
 800bee2:	4313      	orrs	r3, r2
 800bee4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	f003 0301 	and.w	r3, r3, #1
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d044      	beq.n	800bf7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	685b      	ldr	r3, [r3, #4]
 800bef6:	2b01      	cmp	r3, #1
 800bef8:	d107      	bne.n	800bf0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800befa:	4b47      	ldr	r3, [pc, #284]	; (800c018 <HAL_RCC_ClockConfig+0x1bc>)
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d119      	bne.n	800bf3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bf06:	2301      	movs	r3, #1
 800bf08:	e07f      	b.n	800c00a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	685b      	ldr	r3, [r3, #4]
 800bf0e:	2b02      	cmp	r3, #2
 800bf10:	d003      	beq.n	800bf1a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800bf16:	2b03      	cmp	r3, #3
 800bf18:	d107      	bne.n	800bf2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bf1a:	4b3f      	ldr	r3, [pc, #252]	; (800c018 <HAL_RCC_ClockConfig+0x1bc>)
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d109      	bne.n	800bf3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bf26:	2301      	movs	r3, #1
 800bf28:	e06f      	b.n	800c00a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bf2a:	4b3b      	ldr	r3, [pc, #236]	; (800c018 <HAL_RCC_ClockConfig+0x1bc>)
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	f003 0302 	and.w	r3, r3, #2
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d101      	bne.n	800bf3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bf36:	2301      	movs	r3, #1
 800bf38:	e067      	b.n	800c00a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800bf3a:	4b37      	ldr	r3, [pc, #220]	; (800c018 <HAL_RCC_ClockConfig+0x1bc>)
 800bf3c:	689b      	ldr	r3, [r3, #8]
 800bf3e:	f023 0203 	bic.w	r2, r3, #3
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	685b      	ldr	r3, [r3, #4]
 800bf46:	4934      	ldr	r1, [pc, #208]	; (800c018 <HAL_RCC_ClockConfig+0x1bc>)
 800bf48:	4313      	orrs	r3, r2
 800bf4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800bf4c:	f7fd fcde 	bl	800990c <HAL_GetTick>
 800bf50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bf52:	e00a      	b.n	800bf6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bf54:	f7fd fcda 	bl	800990c <HAL_GetTick>
 800bf58:	4602      	mov	r2, r0
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	1ad3      	subs	r3, r2, r3
 800bf5e:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf62:	4293      	cmp	r3, r2
 800bf64:	d901      	bls.n	800bf6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800bf66:	2303      	movs	r3, #3
 800bf68:	e04f      	b.n	800c00a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bf6a:	4b2b      	ldr	r3, [pc, #172]	; (800c018 <HAL_RCC_ClockConfig+0x1bc>)
 800bf6c:	689b      	ldr	r3, [r3, #8]
 800bf6e:	f003 020c 	and.w	r2, r3, #12
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	685b      	ldr	r3, [r3, #4]
 800bf76:	009b      	lsls	r3, r3, #2
 800bf78:	429a      	cmp	r2, r3
 800bf7a:	d1eb      	bne.n	800bf54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800bf7c:	4b25      	ldr	r3, [pc, #148]	; (800c014 <HAL_RCC_ClockConfig+0x1b8>)
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	f003 030f 	and.w	r3, r3, #15
 800bf84:	683a      	ldr	r2, [r7, #0]
 800bf86:	429a      	cmp	r2, r3
 800bf88:	d20c      	bcs.n	800bfa4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bf8a:	4b22      	ldr	r3, [pc, #136]	; (800c014 <HAL_RCC_ClockConfig+0x1b8>)
 800bf8c:	683a      	ldr	r2, [r7, #0]
 800bf8e:	b2d2      	uxtb	r2, r2
 800bf90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800bf92:	4b20      	ldr	r3, [pc, #128]	; (800c014 <HAL_RCC_ClockConfig+0x1b8>)
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	f003 030f 	and.w	r3, r3, #15
 800bf9a:	683a      	ldr	r2, [r7, #0]
 800bf9c:	429a      	cmp	r2, r3
 800bf9e:	d001      	beq.n	800bfa4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800bfa0:	2301      	movs	r3, #1
 800bfa2:	e032      	b.n	800c00a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	f003 0304 	and.w	r3, r3, #4
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d008      	beq.n	800bfc2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800bfb0:	4b19      	ldr	r3, [pc, #100]	; (800c018 <HAL_RCC_ClockConfig+0x1bc>)
 800bfb2:	689b      	ldr	r3, [r3, #8]
 800bfb4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	68db      	ldr	r3, [r3, #12]
 800bfbc:	4916      	ldr	r1, [pc, #88]	; (800c018 <HAL_RCC_ClockConfig+0x1bc>)
 800bfbe:	4313      	orrs	r3, r2
 800bfc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	f003 0308 	and.w	r3, r3, #8
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d009      	beq.n	800bfe2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800bfce:	4b12      	ldr	r3, [pc, #72]	; (800c018 <HAL_RCC_ClockConfig+0x1bc>)
 800bfd0:	689b      	ldr	r3, [r3, #8]
 800bfd2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	691b      	ldr	r3, [r3, #16]
 800bfda:	00db      	lsls	r3, r3, #3
 800bfdc:	490e      	ldr	r1, [pc, #56]	; (800c018 <HAL_RCC_ClockConfig+0x1bc>)
 800bfde:	4313      	orrs	r3, r2
 800bfe0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800bfe2:	f000 f821 	bl	800c028 <HAL_RCC_GetSysClockFreq>
 800bfe6:	4602      	mov	r2, r0
 800bfe8:	4b0b      	ldr	r3, [pc, #44]	; (800c018 <HAL_RCC_ClockConfig+0x1bc>)
 800bfea:	689b      	ldr	r3, [r3, #8]
 800bfec:	091b      	lsrs	r3, r3, #4
 800bfee:	f003 030f 	and.w	r3, r3, #15
 800bff2:	490a      	ldr	r1, [pc, #40]	; (800c01c <HAL_RCC_ClockConfig+0x1c0>)
 800bff4:	5ccb      	ldrb	r3, [r1, r3]
 800bff6:	fa22 f303 	lsr.w	r3, r2, r3
 800bffa:	4a09      	ldr	r2, [pc, #36]	; (800c020 <HAL_RCC_ClockConfig+0x1c4>)
 800bffc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800bffe:	4b09      	ldr	r3, [pc, #36]	; (800c024 <HAL_RCC_ClockConfig+0x1c8>)
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	4618      	mov	r0, r3
 800c004:	f7fd fc3e 	bl	8009884 <HAL_InitTick>

  return HAL_OK;
 800c008:	2300      	movs	r3, #0
}
 800c00a:	4618      	mov	r0, r3
 800c00c:	3710      	adds	r7, #16
 800c00e:	46bd      	mov	sp, r7
 800c010:	bd80      	pop	{r7, pc}
 800c012:	bf00      	nop
 800c014:	40023c00 	.word	0x40023c00
 800c018:	40023800 	.word	0x40023800
 800c01c:	0801a2a8 	.word	0x0801a2a8
 800c020:	20000000 	.word	0x20000000
 800c024:	20000004 	.word	0x20000004

0800c028 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c028:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800c02c:	b084      	sub	sp, #16
 800c02e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800c030:	2300      	movs	r3, #0
 800c032:	607b      	str	r3, [r7, #4]
 800c034:	2300      	movs	r3, #0
 800c036:	60fb      	str	r3, [r7, #12]
 800c038:	2300      	movs	r3, #0
 800c03a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800c03c:	2300      	movs	r3, #0
 800c03e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c040:	4b67      	ldr	r3, [pc, #412]	; (800c1e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800c042:	689b      	ldr	r3, [r3, #8]
 800c044:	f003 030c 	and.w	r3, r3, #12
 800c048:	2b08      	cmp	r3, #8
 800c04a:	d00d      	beq.n	800c068 <HAL_RCC_GetSysClockFreq+0x40>
 800c04c:	2b08      	cmp	r3, #8
 800c04e:	f200 80bd 	bhi.w	800c1cc <HAL_RCC_GetSysClockFreq+0x1a4>
 800c052:	2b00      	cmp	r3, #0
 800c054:	d002      	beq.n	800c05c <HAL_RCC_GetSysClockFreq+0x34>
 800c056:	2b04      	cmp	r3, #4
 800c058:	d003      	beq.n	800c062 <HAL_RCC_GetSysClockFreq+0x3a>
 800c05a:	e0b7      	b.n	800c1cc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c05c:	4b61      	ldr	r3, [pc, #388]	; (800c1e4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800c05e:	60bb      	str	r3, [r7, #8]
       break;
 800c060:	e0b7      	b.n	800c1d2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c062:	4b60      	ldr	r3, [pc, #384]	; (800c1e4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800c064:	60bb      	str	r3, [r7, #8]
      break;
 800c066:	e0b4      	b.n	800c1d2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c068:	4b5d      	ldr	r3, [pc, #372]	; (800c1e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800c06a:	685b      	ldr	r3, [r3, #4]
 800c06c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c070:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c072:	4b5b      	ldr	r3, [pc, #364]	; (800c1e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800c074:	685b      	ldr	r3, [r3, #4]
 800c076:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d04d      	beq.n	800c11a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c07e:	4b58      	ldr	r3, [pc, #352]	; (800c1e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800c080:	685b      	ldr	r3, [r3, #4]
 800c082:	099b      	lsrs	r3, r3, #6
 800c084:	461a      	mov	r2, r3
 800c086:	f04f 0300 	mov.w	r3, #0
 800c08a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800c08e:	f04f 0100 	mov.w	r1, #0
 800c092:	ea02 0800 	and.w	r8, r2, r0
 800c096:	ea03 0901 	and.w	r9, r3, r1
 800c09a:	4640      	mov	r0, r8
 800c09c:	4649      	mov	r1, r9
 800c09e:	f04f 0200 	mov.w	r2, #0
 800c0a2:	f04f 0300 	mov.w	r3, #0
 800c0a6:	014b      	lsls	r3, r1, #5
 800c0a8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800c0ac:	0142      	lsls	r2, r0, #5
 800c0ae:	4610      	mov	r0, r2
 800c0b0:	4619      	mov	r1, r3
 800c0b2:	ebb0 0008 	subs.w	r0, r0, r8
 800c0b6:	eb61 0109 	sbc.w	r1, r1, r9
 800c0ba:	f04f 0200 	mov.w	r2, #0
 800c0be:	f04f 0300 	mov.w	r3, #0
 800c0c2:	018b      	lsls	r3, r1, #6
 800c0c4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800c0c8:	0182      	lsls	r2, r0, #6
 800c0ca:	1a12      	subs	r2, r2, r0
 800c0cc:	eb63 0301 	sbc.w	r3, r3, r1
 800c0d0:	f04f 0000 	mov.w	r0, #0
 800c0d4:	f04f 0100 	mov.w	r1, #0
 800c0d8:	00d9      	lsls	r1, r3, #3
 800c0da:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c0de:	00d0      	lsls	r0, r2, #3
 800c0e0:	4602      	mov	r2, r0
 800c0e2:	460b      	mov	r3, r1
 800c0e4:	eb12 0208 	adds.w	r2, r2, r8
 800c0e8:	eb43 0309 	adc.w	r3, r3, r9
 800c0ec:	f04f 0000 	mov.w	r0, #0
 800c0f0:	f04f 0100 	mov.w	r1, #0
 800c0f4:	0299      	lsls	r1, r3, #10
 800c0f6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800c0fa:	0290      	lsls	r0, r2, #10
 800c0fc:	4602      	mov	r2, r0
 800c0fe:	460b      	mov	r3, r1
 800c100:	4610      	mov	r0, r2
 800c102:	4619      	mov	r1, r3
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	461a      	mov	r2, r3
 800c108:	f04f 0300 	mov.w	r3, #0
 800c10c:	f7f4 fdd4 	bl	8000cb8 <__aeabi_uldivmod>
 800c110:	4602      	mov	r2, r0
 800c112:	460b      	mov	r3, r1
 800c114:	4613      	mov	r3, r2
 800c116:	60fb      	str	r3, [r7, #12]
 800c118:	e04a      	b.n	800c1b0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c11a:	4b31      	ldr	r3, [pc, #196]	; (800c1e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800c11c:	685b      	ldr	r3, [r3, #4]
 800c11e:	099b      	lsrs	r3, r3, #6
 800c120:	461a      	mov	r2, r3
 800c122:	f04f 0300 	mov.w	r3, #0
 800c126:	f240 10ff 	movw	r0, #511	; 0x1ff
 800c12a:	f04f 0100 	mov.w	r1, #0
 800c12e:	ea02 0400 	and.w	r4, r2, r0
 800c132:	ea03 0501 	and.w	r5, r3, r1
 800c136:	4620      	mov	r0, r4
 800c138:	4629      	mov	r1, r5
 800c13a:	f04f 0200 	mov.w	r2, #0
 800c13e:	f04f 0300 	mov.w	r3, #0
 800c142:	014b      	lsls	r3, r1, #5
 800c144:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800c148:	0142      	lsls	r2, r0, #5
 800c14a:	4610      	mov	r0, r2
 800c14c:	4619      	mov	r1, r3
 800c14e:	1b00      	subs	r0, r0, r4
 800c150:	eb61 0105 	sbc.w	r1, r1, r5
 800c154:	f04f 0200 	mov.w	r2, #0
 800c158:	f04f 0300 	mov.w	r3, #0
 800c15c:	018b      	lsls	r3, r1, #6
 800c15e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800c162:	0182      	lsls	r2, r0, #6
 800c164:	1a12      	subs	r2, r2, r0
 800c166:	eb63 0301 	sbc.w	r3, r3, r1
 800c16a:	f04f 0000 	mov.w	r0, #0
 800c16e:	f04f 0100 	mov.w	r1, #0
 800c172:	00d9      	lsls	r1, r3, #3
 800c174:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c178:	00d0      	lsls	r0, r2, #3
 800c17a:	4602      	mov	r2, r0
 800c17c:	460b      	mov	r3, r1
 800c17e:	1912      	adds	r2, r2, r4
 800c180:	eb45 0303 	adc.w	r3, r5, r3
 800c184:	f04f 0000 	mov.w	r0, #0
 800c188:	f04f 0100 	mov.w	r1, #0
 800c18c:	0299      	lsls	r1, r3, #10
 800c18e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800c192:	0290      	lsls	r0, r2, #10
 800c194:	4602      	mov	r2, r0
 800c196:	460b      	mov	r3, r1
 800c198:	4610      	mov	r0, r2
 800c19a:	4619      	mov	r1, r3
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	461a      	mov	r2, r3
 800c1a0:	f04f 0300 	mov.w	r3, #0
 800c1a4:	f7f4 fd88 	bl	8000cb8 <__aeabi_uldivmod>
 800c1a8:	4602      	mov	r2, r0
 800c1aa:	460b      	mov	r3, r1
 800c1ac:	4613      	mov	r3, r2
 800c1ae:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800c1b0:	4b0b      	ldr	r3, [pc, #44]	; (800c1e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800c1b2:	685b      	ldr	r3, [r3, #4]
 800c1b4:	0c1b      	lsrs	r3, r3, #16
 800c1b6:	f003 0303 	and.w	r3, r3, #3
 800c1ba:	3301      	adds	r3, #1
 800c1bc:	005b      	lsls	r3, r3, #1
 800c1be:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800c1c0:	68fa      	ldr	r2, [r7, #12]
 800c1c2:	683b      	ldr	r3, [r7, #0]
 800c1c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800c1c8:	60bb      	str	r3, [r7, #8]
      break;
 800c1ca:	e002      	b.n	800c1d2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c1cc:	4b05      	ldr	r3, [pc, #20]	; (800c1e4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800c1ce:	60bb      	str	r3, [r7, #8]
      break;
 800c1d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c1d2:	68bb      	ldr	r3, [r7, #8]
}
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	3710      	adds	r7, #16
 800c1d8:	46bd      	mov	sp, r7
 800c1da:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800c1de:	bf00      	nop
 800c1e0:	40023800 	.word	0x40023800
 800c1e4:	00f42400 	.word	0x00f42400

0800c1e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c1e8:	b480      	push	{r7}
 800c1ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c1ec:	4b03      	ldr	r3, [pc, #12]	; (800c1fc <HAL_RCC_GetHCLKFreq+0x14>)
 800c1ee:	681b      	ldr	r3, [r3, #0]
}
 800c1f0:	4618      	mov	r0, r3
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f8:	4770      	bx	lr
 800c1fa:	bf00      	nop
 800c1fc:	20000000 	.word	0x20000000

0800c200 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c200:	b580      	push	{r7, lr}
 800c202:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800c204:	f7ff fff0 	bl	800c1e8 <HAL_RCC_GetHCLKFreq>
 800c208:	4602      	mov	r2, r0
 800c20a:	4b05      	ldr	r3, [pc, #20]	; (800c220 <HAL_RCC_GetPCLK1Freq+0x20>)
 800c20c:	689b      	ldr	r3, [r3, #8]
 800c20e:	0a9b      	lsrs	r3, r3, #10
 800c210:	f003 0307 	and.w	r3, r3, #7
 800c214:	4903      	ldr	r1, [pc, #12]	; (800c224 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c216:	5ccb      	ldrb	r3, [r1, r3]
 800c218:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c21c:	4618      	mov	r0, r3
 800c21e:	bd80      	pop	{r7, pc}
 800c220:	40023800 	.word	0x40023800
 800c224:	0801a2b8 	.word	0x0801a2b8

0800c228 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c228:	b580      	push	{r7, lr}
 800c22a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800c22c:	f7ff ffdc 	bl	800c1e8 <HAL_RCC_GetHCLKFreq>
 800c230:	4602      	mov	r2, r0
 800c232:	4b05      	ldr	r3, [pc, #20]	; (800c248 <HAL_RCC_GetPCLK2Freq+0x20>)
 800c234:	689b      	ldr	r3, [r3, #8]
 800c236:	0b5b      	lsrs	r3, r3, #13
 800c238:	f003 0307 	and.w	r3, r3, #7
 800c23c:	4903      	ldr	r1, [pc, #12]	; (800c24c <HAL_RCC_GetPCLK2Freq+0x24>)
 800c23e:	5ccb      	ldrb	r3, [r1, r3]
 800c240:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c244:	4618      	mov	r0, r3
 800c246:	bd80      	pop	{r7, pc}
 800c248:	40023800 	.word	0x40023800
 800c24c:	0801a2b8 	.word	0x0801a2b8

0800c250 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c250:	b580      	push	{r7, lr}
 800c252:	b088      	sub	sp, #32
 800c254:	af00      	add	r7, sp, #0
 800c256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c258:	2300      	movs	r3, #0
 800c25a:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 800c25c:	2300      	movs	r3, #0
 800c25e:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 800c260:	2300      	movs	r3, #0
 800c262:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 800c264:	2300      	movs	r3, #0
 800c266:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 800c268:	2300      	movs	r3, #0
 800c26a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c274:	2b00      	cmp	r3, #0
 800c276:	d00a      	beq.n	800c28e <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800c278:	4b66      	ldr	r3, [pc, #408]	; (800c414 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c27a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c27e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c286:	4963      	ldr	r1, [pc, #396]	; (800c414 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c288:	4313      	orrs	r3, r2
 800c28a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c296:	2b00      	cmp	r3, #0
 800c298:	d00a      	beq.n	800c2b0 <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800c29a:	4b5e      	ldr	r3, [pc, #376]	; (800c414 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c29c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c2a0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2a8:	495a      	ldr	r1, [pc, #360]	; (800c414 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c2aa:	4313      	orrs	r3, r2
 800c2ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	f003 0301 	and.w	r3, r3, #1
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d10b      	bne.n	800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d105      	bne.n	800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d075      	beq.n	800c3c0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800c2d4:	4b50      	ldr	r3, [pc, #320]	; (800c418 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800c2d6:	2200      	movs	r2, #0
 800c2d8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c2da:	f7fd fb17 	bl	800990c <HAL_GetTick>
 800c2de:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c2e0:	e008      	b.n	800c2f4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c2e2:	f7fd fb13 	bl	800990c <HAL_GetTick>
 800c2e6:	4602      	mov	r2, r0
 800c2e8:	69fb      	ldr	r3, [r7, #28]
 800c2ea:	1ad3      	subs	r3, r2, r3
 800c2ec:	2b02      	cmp	r3, #2
 800c2ee:	d901      	bls.n	800c2f4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c2f0:	2303      	movs	r3, #3
 800c2f2:	e1dc      	b.n	800c6ae <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c2f4:	4b47      	ldr	r3, [pc, #284]	; (800c414 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d1f0      	bne.n	800c2e2 <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	f003 0301 	and.w	r3, r3, #1
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d009      	beq.n	800c320 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	685b      	ldr	r3, [r3, #4]
 800c310:	019a      	lsls	r2, r3, #6
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	689b      	ldr	r3, [r3, #8]
 800c316:	071b      	lsls	r3, r3, #28
 800c318:	493e      	ldr	r1, [pc, #248]	; (800c414 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c31a:	4313      	orrs	r3, r2
 800c31c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	f003 0302 	and.w	r3, r3, #2
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d01f      	beq.n	800c36c <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c32c:	4b39      	ldr	r3, [pc, #228]	; (800c414 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c32e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c332:	0f1b      	lsrs	r3, r3, #28
 800c334:	f003 0307 	and.w	r3, r3, #7
 800c338:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	685b      	ldr	r3, [r3, #4]
 800c33e:	019a      	lsls	r2, r3, #6
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	68db      	ldr	r3, [r3, #12]
 800c344:	061b      	lsls	r3, r3, #24
 800c346:	431a      	orrs	r2, r3
 800c348:	69bb      	ldr	r3, [r7, #24]
 800c34a:	071b      	lsls	r3, r3, #28
 800c34c:	4931      	ldr	r1, [pc, #196]	; (800c414 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c34e:	4313      	orrs	r3, r2
 800c350:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800c354:	4b2f      	ldr	r3, [pc, #188]	; (800c414 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c356:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c35a:	f023 021f 	bic.w	r2, r3, #31
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	6a1b      	ldr	r3, [r3, #32]
 800c362:	3b01      	subs	r3, #1
 800c364:	492b      	ldr	r1, [pc, #172]	; (800c414 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c366:	4313      	orrs	r3, r2
 800c368:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c374:	2b00      	cmp	r3, #0
 800c376:	d00d      	beq.n	800c394 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	685b      	ldr	r3, [r3, #4]
 800c37c:	019a      	lsls	r2, r3, #6
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	68db      	ldr	r3, [r3, #12]
 800c382:	061b      	lsls	r3, r3, #24
 800c384:	431a      	orrs	r2, r3
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	689b      	ldr	r3, [r3, #8]
 800c38a:	071b      	lsls	r3, r3, #28
 800c38c:	4921      	ldr	r1, [pc, #132]	; (800c414 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c38e:	4313      	orrs	r3, r2
 800c390:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800c394:	4b20      	ldr	r3, [pc, #128]	; (800c418 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800c396:	2201      	movs	r2, #1
 800c398:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c39a:	f7fd fab7 	bl	800990c <HAL_GetTick>
 800c39e:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c3a0:	e008      	b.n	800c3b4 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c3a2:	f7fd fab3 	bl	800990c <HAL_GetTick>
 800c3a6:	4602      	mov	r2, r0
 800c3a8:	69fb      	ldr	r3, [r7, #28]
 800c3aa:	1ad3      	subs	r3, r2, r3
 800c3ac:	2b02      	cmp	r3, #2
 800c3ae:	d901      	bls.n	800c3b4 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c3b0:	2303      	movs	r3, #3
 800c3b2:	e17c      	b.n	800c6ae <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c3b4:	4b17      	ldr	r3, [pc, #92]	; (800c414 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d0f0      	beq.n	800c3a2 <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	f003 0304 	and.w	r3, r3, #4
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d112      	bne.n	800c3f2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d10c      	bne.n	800c3f2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	f000 80ce 	beq.w	800c582 <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800c3ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c3ee:	f040 80c8 	bne.w	800c582 <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800c3f2:	4b0a      	ldr	r3, [pc, #40]	; (800c41c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800c3f4:	2200      	movs	r2, #0
 800c3f6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c3f8:	f7fd fa88 	bl	800990c <HAL_GetTick>
 800c3fc:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c3fe:	e00f      	b.n	800c420 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800c400:	f7fd fa84 	bl	800990c <HAL_GetTick>
 800c404:	4602      	mov	r2, r0
 800c406:	69fb      	ldr	r3, [r7, #28]
 800c408:	1ad3      	subs	r3, r2, r3
 800c40a:	2b02      	cmp	r3, #2
 800c40c:	d908      	bls.n	800c420 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c40e:	2303      	movs	r3, #3
 800c410:	e14d      	b.n	800c6ae <HAL_RCCEx_PeriphCLKConfig+0x45e>
 800c412:	bf00      	nop
 800c414:	40023800 	.word	0x40023800
 800c418:	42470068 	.word	0x42470068
 800c41c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c420:	4ba5      	ldr	r3, [pc, #660]	; (800c6b8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c428:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c42c:	d0e8      	beq.n	800c400 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	f003 0304 	and.w	r3, r3, #4
 800c436:	2b00      	cmp	r3, #0
 800c438:	d02e      	beq.n	800c498 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800c43a:	4b9f      	ldr	r3, [pc, #636]	; (800c6b8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c43c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c440:	0c1b      	lsrs	r3, r3, #16
 800c442:	f003 0303 	and.w	r3, r3, #3
 800c446:	3301      	adds	r3, #1
 800c448:	005b      	lsls	r3, r3, #1
 800c44a:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c44c:	4b9a      	ldr	r3, [pc, #616]	; (800c6b8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c44e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c452:	0f1b      	lsrs	r3, r3, #28
 800c454:	f003 0307 	and.w	r3, r3, #7
 800c458:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	691b      	ldr	r3, [r3, #16]
 800c45e:	019a      	lsls	r2, r3, #6
 800c460:	697b      	ldr	r3, [r7, #20]
 800c462:	085b      	lsrs	r3, r3, #1
 800c464:	3b01      	subs	r3, #1
 800c466:	041b      	lsls	r3, r3, #16
 800c468:	431a      	orrs	r2, r3
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	699b      	ldr	r3, [r3, #24]
 800c46e:	061b      	lsls	r3, r3, #24
 800c470:	431a      	orrs	r2, r3
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	071b      	lsls	r3, r3, #28
 800c476:	4990      	ldr	r1, [pc, #576]	; (800c6b8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c478:	4313      	orrs	r3, r2
 800c47a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800c47e:	4b8e      	ldr	r3, [pc, #568]	; (800c6b8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c480:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c484:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c48c:	3b01      	subs	r3, #1
 800c48e:	021b      	lsls	r3, r3, #8
 800c490:	4989      	ldr	r1, [pc, #548]	; (800c6b8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c492:	4313      	orrs	r3, r2
 800c494:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	f003 0308 	and.w	r3, r3, #8
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d02c      	beq.n	800c4fe <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800c4a4:	4b84      	ldr	r3, [pc, #528]	; (800c6b8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c4a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c4aa:	0c1b      	lsrs	r3, r3, #16
 800c4ac:	f003 0303 	and.w	r3, r3, #3
 800c4b0:	3301      	adds	r3, #1
 800c4b2:	005b      	lsls	r3, r3, #1
 800c4b4:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c4b6:	4b80      	ldr	r3, [pc, #512]	; (800c6b8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c4b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c4bc:	0e1b      	lsrs	r3, r3, #24
 800c4be:	f003 030f 	and.w	r3, r3, #15
 800c4c2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	691b      	ldr	r3, [r3, #16]
 800c4c8:	019a      	lsls	r2, r3, #6
 800c4ca:	697b      	ldr	r3, [r7, #20]
 800c4cc:	085b      	lsrs	r3, r3, #1
 800c4ce:	3b01      	subs	r3, #1
 800c4d0:	041b      	lsls	r3, r3, #16
 800c4d2:	431a      	orrs	r2, r3
 800c4d4:	693b      	ldr	r3, [r7, #16]
 800c4d6:	061b      	lsls	r3, r3, #24
 800c4d8:	431a      	orrs	r2, r3
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	69db      	ldr	r3, [r3, #28]
 800c4de:	071b      	lsls	r3, r3, #28
 800c4e0:	4975      	ldr	r1, [pc, #468]	; (800c6b8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c4e2:	4313      	orrs	r3, r2
 800c4e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800c4e8:	4b73      	ldr	r3, [pc, #460]	; (800c6b8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c4ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c4ee:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4f6:	4970      	ldr	r1, [pc, #448]	; (800c6b8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c4f8:	4313      	orrs	r3, r2
 800c4fa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c506:	2b00      	cmp	r3, #0
 800c508:	d024      	beq.n	800c554 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800c50e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c512:	d11f      	bne.n	800c554 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c514:	4b68      	ldr	r3, [pc, #416]	; (800c6b8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c51a:	0e1b      	lsrs	r3, r3, #24
 800c51c:	f003 030f 	and.w	r3, r3, #15
 800c520:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c522:	4b65      	ldr	r3, [pc, #404]	; (800c6b8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c524:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c528:	0f1b      	lsrs	r3, r3, #28
 800c52a:	f003 0307 	and.w	r3, r3, #7
 800c52e:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	691b      	ldr	r3, [r3, #16]
 800c534:	019a      	lsls	r2, r3, #6
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	695b      	ldr	r3, [r3, #20]
 800c53a:	085b      	lsrs	r3, r3, #1
 800c53c:	3b01      	subs	r3, #1
 800c53e:	041b      	lsls	r3, r3, #16
 800c540:	431a      	orrs	r2, r3
 800c542:	693b      	ldr	r3, [r7, #16]
 800c544:	061b      	lsls	r3, r3, #24
 800c546:	431a      	orrs	r2, r3
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	071b      	lsls	r3, r3, #28
 800c54c:	495a      	ldr	r1, [pc, #360]	; (800c6b8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c54e:	4313      	orrs	r3, r2
 800c550:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800c554:	4b59      	ldr	r3, [pc, #356]	; (800c6bc <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800c556:	2201      	movs	r2, #1
 800c558:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c55a:	f7fd f9d7 	bl	800990c <HAL_GetTick>
 800c55e:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c560:	e008      	b.n	800c574 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800c562:	f7fd f9d3 	bl	800990c <HAL_GetTick>
 800c566:	4602      	mov	r2, r0
 800c568:	69fb      	ldr	r3, [r7, #28]
 800c56a:	1ad3      	subs	r3, r2, r3
 800c56c:	2b02      	cmp	r3, #2
 800c56e:	d901      	bls.n	800c574 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c570:	2303      	movs	r3, #3
 800c572:	e09c      	b.n	800c6ae <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c574:	4b50      	ldr	r3, [pc, #320]	; (800c6b8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c57c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c580:	d1ef      	bne.n	800c562 <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	f003 0320 	and.w	r3, r3, #32
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	f000 8083 	beq.w	800c696 <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800c590:	2300      	movs	r3, #0
 800c592:	60bb      	str	r3, [r7, #8]
 800c594:	4b48      	ldr	r3, [pc, #288]	; (800c6b8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c598:	4a47      	ldr	r2, [pc, #284]	; (800c6b8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c59a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c59e:	6413      	str	r3, [r2, #64]	; 0x40
 800c5a0:	4b45      	ldr	r3, [pc, #276]	; (800c6b8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c5a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c5a8:	60bb      	str	r3, [r7, #8]
 800c5aa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800c5ac:	4b44      	ldr	r3, [pc, #272]	; (800c6c0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	4a43      	ldr	r2, [pc, #268]	; (800c6c0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800c5b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c5b6:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c5b8:	f7fd f9a8 	bl	800990c <HAL_GetTick>
 800c5bc:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800c5be:	e008      	b.n	800c5d2 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800c5c0:	f7fd f9a4 	bl	800990c <HAL_GetTick>
 800c5c4:	4602      	mov	r2, r0
 800c5c6:	69fb      	ldr	r3, [r7, #28]
 800c5c8:	1ad3      	subs	r3, r2, r3
 800c5ca:	2b02      	cmp	r3, #2
 800c5cc:	d901      	bls.n	800c5d2 <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 800c5ce:	2303      	movs	r3, #3
 800c5d0:	e06d      	b.n	800c6ae <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800c5d2:	4b3b      	ldr	r3, [pc, #236]	; (800c6c0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d0f0      	beq.n	800c5c0 <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800c5de:	4b36      	ldr	r3, [pc, #216]	; (800c6b8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c5e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c5e6:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800c5e8:	69bb      	ldr	r3, [r7, #24]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d02f      	beq.n	800c64e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c5f6:	69ba      	ldr	r2, [r7, #24]
 800c5f8:	429a      	cmp	r2, r3
 800c5fa:	d028      	beq.n	800c64e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c5fc:	4b2e      	ldr	r3, [pc, #184]	; (800c6b8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c5fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c600:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c604:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800c606:	4b2f      	ldr	r3, [pc, #188]	; (800c6c4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800c608:	2201      	movs	r2, #1
 800c60a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800c60c:	4b2d      	ldr	r3, [pc, #180]	; (800c6c4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800c60e:	2200      	movs	r2, #0
 800c610:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800c612:	4a29      	ldr	r2, [pc, #164]	; (800c6b8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c614:	69bb      	ldr	r3, [r7, #24]
 800c616:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800c618:	4b27      	ldr	r3, [pc, #156]	; (800c6b8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c61a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c61c:	f003 0301 	and.w	r3, r3, #1
 800c620:	2b01      	cmp	r3, #1
 800c622:	d114      	bne.n	800c64e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800c624:	f7fd f972 	bl	800990c <HAL_GetTick>
 800c628:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c62a:	e00a      	b.n	800c642 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c62c:	f7fd f96e 	bl	800990c <HAL_GetTick>
 800c630:	4602      	mov	r2, r0
 800c632:	69fb      	ldr	r3, [r7, #28]
 800c634:	1ad3      	subs	r3, r2, r3
 800c636:	f241 3288 	movw	r2, #5000	; 0x1388
 800c63a:	4293      	cmp	r3, r2
 800c63c:	d901      	bls.n	800c642 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 800c63e:	2303      	movs	r3, #3
 800c640:	e035      	b.n	800c6ae <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c642:	4b1d      	ldr	r3, [pc, #116]	; (800c6b8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c646:	f003 0302 	and.w	r3, r3, #2
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d0ee      	beq.n	800c62c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c652:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c656:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c65a:	d10d      	bne.n	800c678 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800c65c:	4b16      	ldr	r3, [pc, #88]	; (800c6b8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c65e:	689b      	ldr	r3, [r3, #8]
 800c660:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c668:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c66c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c670:	4911      	ldr	r1, [pc, #68]	; (800c6b8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c672:	4313      	orrs	r3, r2
 800c674:	608b      	str	r3, [r1, #8]
 800c676:	e005      	b.n	800c684 <HAL_RCCEx_PeriphCLKConfig+0x434>
 800c678:	4b0f      	ldr	r3, [pc, #60]	; (800c6b8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c67a:	689b      	ldr	r3, [r3, #8]
 800c67c:	4a0e      	ldr	r2, [pc, #56]	; (800c6b8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c67e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800c682:	6093      	str	r3, [r2, #8]
 800c684:	4b0c      	ldr	r3, [pc, #48]	; (800c6b8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c686:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c68c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c690:	4909      	ldr	r1, [pc, #36]	; (800c6b8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c692:	4313      	orrs	r3, r2
 800c694:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	f003 0310 	and.w	r3, r3, #16
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d004      	beq.n	800c6ac <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800c6a8:	4b07      	ldr	r3, [pc, #28]	; (800c6c8 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 800c6aa:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800c6ac:	2300      	movs	r3, #0
}
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	3720      	adds	r7, #32
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	bd80      	pop	{r7, pc}
 800c6b6:	bf00      	nop
 800c6b8:	40023800 	.word	0x40023800
 800c6bc:	42470070 	.word	0x42470070
 800c6c0:	40007000 	.word	0x40007000
 800c6c4:	42470e40 	.word	0x42470e40
 800c6c8:	424711e0 	.word	0x424711e0

0800c6cc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b086      	sub	sp, #24
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c6d4:	2300      	movs	r3, #0
 800c6d6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	f003 0301 	and.w	r3, r3, #1
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d075      	beq.n	800c7d0 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800c6e4:	4ba2      	ldr	r3, [pc, #648]	; (800c970 <HAL_RCC_OscConfig+0x2a4>)
 800c6e6:	689b      	ldr	r3, [r3, #8]
 800c6e8:	f003 030c 	and.w	r3, r3, #12
 800c6ec:	2b04      	cmp	r3, #4
 800c6ee:	d00c      	beq.n	800c70a <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c6f0:	4b9f      	ldr	r3, [pc, #636]	; (800c970 <HAL_RCC_OscConfig+0x2a4>)
 800c6f2:	689b      	ldr	r3, [r3, #8]
 800c6f4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800c6f8:	2b08      	cmp	r3, #8
 800c6fa:	d112      	bne.n	800c722 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c6fc:	4b9c      	ldr	r3, [pc, #624]	; (800c970 <HAL_RCC_OscConfig+0x2a4>)
 800c6fe:	685b      	ldr	r3, [r3, #4]
 800c700:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c704:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c708:	d10b      	bne.n	800c722 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c70a:	4b99      	ldr	r3, [pc, #612]	; (800c970 <HAL_RCC_OscConfig+0x2a4>)
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c712:	2b00      	cmp	r3, #0
 800c714:	d05b      	beq.n	800c7ce <HAL_RCC_OscConfig+0x102>
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	685b      	ldr	r3, [r3, #4]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d157      	bne.n	800c7ce <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800c71e:	2301      	movs	r3, #1
 800c720:	e20b      	b.n	800cb3a <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	685b      	ldr	r3, [r3, #4]
 800c726:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c72a:	d106      	bne.n	800c73a <HAL_RCC_OscConfig+0x6e>
 800c72c:	4b90      	ldr	r3, [pc, #576]	; (800c970 <HAL_RCC_OscConfig+0x2a4>)
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	4a8f      	ldr	r2, [pc, #572]	; (800c970 <HAL_RCC_OscConfig+0x2a4>)
 800c732:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c736:	6013      	str	r3, [r2, #0]
 800c738:	e01d      	b.n	800c776 <HAL_RCC_OscConfig+0xaa>
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	685b      	ldr	r3, [r3, #4]
 800c73e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c742:	d10c      	bne.n	800c75e <HAL_RCC_OscConfig+0x92>
 800c744:	4b8a      	ldr	r3, [pc, #552]	; (800c970 <HAL_RCC_OscConfig+0x2a4>)
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	4a89      	ldr	r2, [pc, #548]	; (800c970 <HAL_RCC_OscConfig+0x2a4>)
 800c74a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c74e:	6013      	str	r3, [r2, #0]
 800c750:	4b87      	ldr	r3, [pc, #540]	; (800c970 <HAL_RCC_OscConfig+0x2a4>)
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	4a86      	ldr	r2, [pc, #536]	; (800c970 <HAL_RCC_OscConfig+0x2a4>)
 800c756:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c75a:	6013      	str	r3, [r2, #0]
 800c75c:	e00b      	b.n	800c776 <HAL_RCC_OscConfig+0xaa>
 800c75e:	4b84      	ldr	r3, [pc, #528]	; (800c970 <HAL_RCC_OscConfig+0x2a4>)
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	4a83      	ldr	r2, [pc, #524]	; (800c970 <HAL_RCC_OscConfig+0x2a4>)
 800c764:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c768:	6013      	str	r3, [r2, #0]
 800c76a:	4b81      	ldr	r3, [pc, #516]	; (800c970 <HAL_RCC_OscConfig+0x2a4>)
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	4a80      	ldr	r2, [pc, #512]	; (800c970 <HAL_RCC_OscConfig+0x2a4>)
 800c770:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c774:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	685b      	ldr	r3, [r3, #4]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d013      	beq.n	800c7a6 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c77e:	f7fd f8c5 	bl	800990c <HAL_GetTick>
 800c782:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c784:	e008      	b.n	800c798 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c786:	f7fd f8c1 	bl	800990c <HAL_GetTick>
 800c78a:	4602      	mov	r2, r0
 800c78c:	693b      	ldr	r3, [r7, #16]
 800c78e:	1ad3      	subs	r3, r2, r3
 800c790:	2b64      	cmp	r3, #100	; 0x64
 800c792:	d901      	bls.n	800c798 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 800c794:	2303      	movs	r3, #3
 800c796:	e1d0      	b.n	800cb3a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c798:	4b75      	ldr	r3, [pc, #468]	; (800c970 <HAL_RCC_OscConfig+0x2a4>)
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d0f0      	beq.n	800c786 <HAL_RCC_OscConfig+0xba>
 800c7a4:	e014      	b.n	800c7d0 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c7a6:	f7fd f8b1 	bl	800990c <HAL_GetTick>
 800c7aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c7ac:	e008      	b.n	800c7c0 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c7ae:	f7fd f8ad 	bl	800990c <HAL_GetTick>
 800c7b2:	4602      	mov	r2, r0
 800c7b4:	693b      	ldr	r3, [r7, #16]
 800c7b6:	1ad3      	subs	r3, r2, r3
 800c7b8:	2b64      	cmp	r3, #100	; 0x64
 800c7ba:	d901      	bls.n	800c7c0 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 800c7bc:	2303      	movs	r3, #3
 800c7be:	e1bc      	b.n	800cb3a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c7c0:	4b6b      	ldr	r3, [pc, #428]	; (800c970 <HAL_RCC_OscConfig+0x2a4>)
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d1f0      	bne.n	800c7ae <HAL_RCC_OscConfig+0xe2>
 800c7cc:	e000      	b.n	800c7d0 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c7ce:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	f003 0302 	and.w	r3, r3, #2
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d063      	beq.n	800c8a4 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800c7dc:	4b64      	ldr	r3, [pc, #400]	; (800c970 <HAL_RCC_OscConfig+0x2a4>)
 800c7de:	689b      	ldr	r3, [r3, #8]
 800c7e0:	f003 030c 	and.w	r3, r3, #12
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d00b      	beq.n	800c800 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c7e8:	4b61      	ldr	r3, [pc, #388]	; (800c970 <HAL_RCC_OscConfig+0x2a4>)
 800c7ea:	689b      	ldr	r3, [r3, #8]
 800c7ec:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800c7f0:	2b08      	cmp	r3, #8
 800c7f2:	d11c      	bne.n	800c82e <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c7f4:	4b5e      	ldr	r3, [pc, #376]	; (800c970 <HAL_RCC_OscConfig+0x2a4>)
 800c7f6:	685b      	ldr	r3, [r3, #4]
 800c7f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d116      	bne.n	800c82e <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c800:	4b5b      	ldr	r3, [pc, #364]	; (800c970 <HAL_RCC_OscConfig+0x2a4>)
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	f003 0302 	and.w	r3, r3, #2
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d005      	beq.n	800c818 <HAL_RCC_OscConfig+0x14c>
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	68db      	ldr	r3, [r3, #12]
 800c810:	2b01      	cmp	r3, #1
 800c812:	d001      	beq.n	800c818 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 800c814:	2301      	movs	r3, #1
 800c816:	e190      	b.n	800cb3a <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c818:	4b55      	ldr	r3, [pc, #340]	; (800c970 <HAL_RCC_OscConfig+0x2a4>)
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	691b      	ldr	r3, [r3, #16]
 800c824:	00db      	lsls	r3, r3, #3
 800c826:	4952      	ldr	r1, [pc, #328]	; (800c970 <HAL_RCC_OscConfig+0x2a4>)
 800c828:	4313      	orrs	r3, r2
 800c82a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c82c:	e03a      	b.n	800c8a4 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	68db      	ldr	r3, [r3, #12]
 800c832:	2b00      	cmp	r3, #0
 800c834:	d020      	beq.n	800c878 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c836:	4b4f      	ldr	r3, [pc, #316]	; (800c974 <HAL_RCC_OscConfig+0x2a8>)
 800c838:	2201      	movs	r2, #1
 800c83a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c83c:	f7fd f866 	bl	800990c <HAL_GetTick>
 800c840:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c842:	e008      	b.n	800c856 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c844:	f7fd f862 	bl	800990c <HAL_GetTick>
 800c848:	4602      	mov	r2, r0
 800c84a:	693b      	ldr	r3, [r7, #16]
 800c84c:	1ad3      	subs	r3, r2, r3
 800c84e:	2b02      	cmp	r3, #2
 800c850:	d901      	bls.n	800c856 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800c852:	2303      	movs	r3, #3
 800c854:	e171      	b.n	800cb3a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c856:	4b46      	ldr	r3, [pc, #280]	; (800c970 <HAL_RCC_OscConfig+0x2a4>)
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	f003 0302 	and.w	r3, r3, #2
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d0f0      	beq.n	800c844 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c862:	4b43      	ldr	r3, [pc, #268]	; (800c970 <HAL_RCC_OscConfig+0x2a4>)
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	691b      	ldr	r3, [r3, #16]
 800c86e:	00db      	lsls	r3, r3, #3
 800c870:	493f      	ldr	r1, [pc, #252]	; (800c970 <HAL_RCC_OscConfig+0x2a4>)
 800c872:	4313      	orrs	r3, r2
 800c874:	600b      	str	r3, [r1, #0]
 800c876:	e015      	b.n	800c8a4 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c878:	4b3e      	ldr	r3, [pc, #248]	; (800c974 <HAL_RCC_OscConfig+0x2a8>)
 800c87a:	2200      	movs	r2, #0
 800c87c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c87e:	f7fd f845 	bl	800990c <HAL_GetTick>
 800c882:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c884:	e008      	b.n	800c898 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c886:	f7fd f841 	bl	800990c <HAL_GetTick>
 800c88a:	4602      	mov	r2, r0
 800c88c:	693b      	ldr	r3, [r7, #16]
 800c88e:	1ad3      	subs	r3, r2, r3
 800c890:	2b02      	cmp	r3, #2
 800c892:	d901      	bls.n	800c898 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800c894:	2303      	movs	r3, #3
 800c896:	e150      	b.n	800cb3a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c898:	4b35      	ldr	r3, [pc, #212]	; (800c970 <HAL_RCC_OscConfig+0x2a4>)
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	f003 0302 	and.w	r3, r3, #2
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d1f0      	bne.n	800c886 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	f003 0308 	and.w	r3, r3, #8
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d030      	beq.n	800c912 <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	695b      	ldr	r3, [r3, #20]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d016      	beq.n	800c8e6 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c8b8:	4b2f      	ldr	r3, [pc, #188]	; (800c978 <HAL_RCC_OscConfig+0x2ac>)
 800c8ba:	2201      	movs	r2, #1
 800c8bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c8be:	f7fd f825 	bl	800990c <HAL_GetTick>
 800c8c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c8c4:	e008      	b.n	800c8d8 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c8c6:	f7fd f821 	bl	800990c <HAL_GetTick>
 800c8ca:	4602      	mov	r2, r0
 800c8cc:	693b      	ldr	r3, [r7, #16]
 800c8ce:	1ad3      	subs	r3, r2, r3
 800c8d0:	2b02      	cmp	r3, #2
 800c8d2:	d901      	bls.n	800c8d8 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 800c8d4:	2303      	movs	r3, #3
 800c8d6:	e130      	b.n	800cb3a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c8d8:	4b25      	ldr	r3, [pc, #148]	; (800c970 <HAL_RCC_OscConfig+0x2a4>)
 800c8da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c8dc:	f003 0302 	and.w	r3, r3, #2
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d0f0      	beq.n	800c8c6 <HAL_RCC_OscConfig+0x1fa>
 800c8e4:	e015      	b.n	800c912 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c8e6:	4b24      	ldr	r3, [pc, #144]	; (800c978 <HAL_RCC_OscConfig+0x2ac>)
 800c8e8:	2200      	movs	r2, #0
 800c8ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c8ec:	f7fd f80e 	bl	800990c <HAL_GetTick>
 800c8f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c8f2:	e008      	b.n	800c906 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c8f4:	f7fd f80a 	bl	800990c <HAL_GetTick>
 800c8f8:	4602      	mov	r2, r0
 800c8fa:	693b      	ldr	r3, [r7, #16]
 800c8fc:	1ad3      	subs	r3, r2, r3
 800c8fe:	2b02      	cmp	r3, #2
 800c900:	d901      	bls.n	800c906 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800c902:	2303      	movs	r3, #3
 800c904:	e119      	b.n	800cb3a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c906:	4b1a      	ldr	r3, [pc, #104]	; (800c970 <HAL_RCC_OscConfig+0x2a4>)
 800c908:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c90a:	f003 0302 	and.w	r3, r3, #2
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d1f0      	bne.n	800c8f4 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	f003 0304 	and.w	r3, r3, #4
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	f000 809f 	beq.w	800ca5e <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c920:	2300      	movs	r3, #0
 800c922:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c924:	4b12      	ldr	r3, [pc, #72]	; (800c970 <HAL_RCC_OscConfig+0x2a4>)
 800c926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c928:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d10f      	bne.n	800c950 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c930:	2300      	movs	r3, #0
 800c932:	60fb      	str	r3, [r7, #12]
 800c934:	4b0e      	ldr	r3, [pc, #56]	; (800c970 <HAL_RCC_OscConfig+0x2a4>)
 800c936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c938:	4a0d      	ldr	r2, [pc, #52]	; (800c970 <HAL_RCC_OscConfig+0x2a4>)
 800c93a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c93e:	6413      	str	r3, [r2, #64]	; 0x40
 800c940:	4b0b      	ldr	r3, [pc, #44]	; (800c970 <HAL_RCC_OscConfig+0x2a4>)
 800c942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c944:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c948:	60fb      	str	r3, [r7, #12]
 800c94a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800c94c:	2301      	movs	r3, #1
 800c94e:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c950:	4b0a      	ldr	r3, [pc, #40]	; (800c97c <HAL_RCC_OscConfig+0x2b0>)
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d120      	bne.n	800c99e <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c95c:	4b07      	ldr	r3, [pc, #28]	; (800c97c <HAL_RCC_OscConfig+0x2b0>)
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	4a06      	ldr	r2, [pc, #24]	; (800c97c <HAL_RCC_OscConfig+0x2b0>)
 800c962:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c966:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c968:	f7fc ffd0 	bl	800990c <HAL_GetTick>
 800c96c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c96e:	e010      	b.n	800c992 <HAL_RCC_OscConfig+0x2c6>
 800c970:	40023800 	.word	0x40023800
 800c974:	42470000 	.word	0x42470000
 800c978:	42470e80 	.word	0x42470e80
 800c97c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c980:	f7fc ffc4 	bl	800990c <HAL_GetTick>
 800c984:	4602      	mov	r2, r0
 800c986:	693b      	ldr	r3, [r7, #16]
 800c988:	1ad3      	subs	r3, r2, r3
 800c98a:	2b02      	cmp	r3, #2
 800c98c:	d901      	bls.n	800c992 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800c98e:	2303      	movs	r3, #3
 800c990:	e0d3      	b.n	800cb3a <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c992:	4b6c      	ldr	r3, [pc, #432]	; (800cb44 <HAL_RCC_OscConfig+0x478>)
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d0f0      	beq.n	800c980 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	689b      	ldr	r3, [r3, #8]
 800c9a2:	2b01      	cmp	r3, #1
 800c9a4:	d106      	bne.n	800c9b4 <HAL_RCC_OscConfig+0x2e8>
 800c9a6:	4b68      	ldr	r3, [pc, #416]	; (800cb48 <HAL_RCC_OscConfig+0x47c>)
 800c9a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9aa:	4a67      	ldr	r2, [pc, #412]	; (800cb48 <HAL_RCC_OscConfig+0x47c>)
 800c9ac:	f043 0301 	orr.w	r3, r3, #1
 800c9b0:	6713      	str	r3, [r2, #112]	; 0x70
 800c9b2:	e01c      	b.n	800c9ee <HAL_RCC_OscConfig+0x322>
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	689b      	ldr	r3, [r3, #8]
 800c9b8:	2b05      	cmp	r3, #5
 800c9ba:	d10c      	bne.n	800c9d6 <HAL_RCC_OscConfig+0x30a>
 800c9bc:	4b62      	ldr	r3, [pc, #392]	; (800cb48 <HAL_RCC_OscConfig+0x47c>)
 800c9be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9c0:	4a61      	ldr	r2, [pc, #388]	; (800cb48 <HAL_RCC_OscConfig+0x47c>)
 800c9c2:	f043 0304 	orr.w	r3, r3, #4
 800c9c6:	6713      	str	r3, [r2, #112]	; 0x70
 800c9c8:	4b5f      	ldr	r3, [pc, #380]	; (800cb48 <HAL_RCC_OscConfig+0x47c>)
 800c9ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9cc:	4a5e      	ldr	r2, [pc, #376]	; (800cb48 <HAL_RCC_OscConfig+0x47c>)
 800c9ce:	f043 0301 	orr.w	r3, r3, #1
 800c9d2:	6713      	str	r3, [r2, #112]	; 0x70
 800c9d4:	e00b      	b.n	800c9ee <HAL_RCC_OscConfig+0x322>
 800c9d6:	4b5c      	ldr	r3, [pc, #368]	; (800cb48 <HAL_RCC_OscConfig+0x47c>)
 800c9d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9da:	4a5b      	ldr	r2, [pc, #364]	; (800cb48 <HAL_RCC_OscConfig+0x47c>)
 800c9dc:	f023 0301 	bic.w	r3, r3, #1
 800c9e0:	6713      	str	r3, [r2, #112]	; 0x70
 800c9e2:	4b59      	ldr	r3, [pc, #356]	; (800cb48 <HAL_RCC_OscConfig+0x47c>)
 800c9e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9e6:	4a58      	ldr	r2, [pc, #352]	; (800cb48 <HAL_RCC_OscConfig+0x47c>)
 800c9e8:	f023 0304 	bic.w	r3, r3, #4
 800c9ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	689b      	ldr	r3, [r3, #8]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d015      	beq.n	800ca22 <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c9f6:	f7fc ff89 	bl	800990c <HAL_GetTick>
 800c9fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c9fc:	e00a      	b.n	800ca14 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c9fe:	f7fc ff85 	bl	800990c <HAL_GetTick>
 800ca02:	4602      	mov	r2, r0
 800ca04:	693b      	ldr	r3, [r7, #16]
 800ca06:	1ad3      	subs	r3, r2, r3
 800ca08:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca0c:	4293      	cmp	r3, r2
 800ca0e:	d901      	bls.n	800ca14 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 800ca10:	2303      	movs	r3, #3
 800ca12:	e092      	b.n	800cb3a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ca14:	4b4c      	ldr	r3, [pc, #304]	; (800cb48 <HAL_RCC_OscConfig+0x47c>)
 800ca16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca18:	f003 0302 	and.w	r3, r3, #2
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d0ee      	beq.n	800c9fe <HAL_RCC_OscConfig+0x332>
 800ca20:	e014      	b.n	800ca4c <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ca22:	f7fc ff73 	bl	800990c <HAL_GetTick>
 800ca26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ca28:	e00a      	b.n	800ca40 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ca2a:	f7fc ff6f 	bl	800990c <HAL_GetTick>
 800ca2e:	4602      	mov	r2, r0
 800ca30:	693b      	ldr	r3, [r7, #16]
 800ca32:	1ad3      	subs	r3, r2, r3
 800ca34:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca38:	4293      	cmp	r3, r2
 800ca3a:	d901      	bls.n	800ca40 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 800ca3c:	2303      	movs	r3, #3
 800ca3e:	e07c      	b.n	800cb3a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ca40:	4b41      	ldr	r3, [pc, #260]	; (800cb48 <HAL_RCC_OscConfig+0x47c>)
 800ca42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca44:	f003 0302 	and.w	r3, r3, #2
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d1ee      	bne.n	800ca2a <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ca4c:	7dfb      	ldrb	r3, [r7, #23]
 800ca4e:	2b01      	cmp	r3, #1
 800ca50:	d105      	bne.n	800ca5e <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ca52:	4b3d      	ldr	r3, [pc, #244]	; (800cb48 <HAL_RCC_OscConfig+0x47c>)
 800ca54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca56:	4a3c      	ldr	r2, [pc, #240]	; (800cb48 <HAL_RCC_OscConfig+0x47c>)
 800ca58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ca5c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	699b      	ldr	r3, [r3, #24]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d068      	beq.n	800cb38 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800ca66:	4b38      	ldr	r3, [pc, #224]	; (800cb48 <HAL_RCC_OscConfig+0x47c>)
 800ca68:	689b      	ldr	r3, [r3, #8]
 800ca6a:	f003 030c 	and.w	r3, r3, #12
 800ca6e:	2b08      	cmp	r3, #8
 800ca70:	d060      	beq.n	800cb34 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	699b      	ldr	r3, [r3, #24]
 800ca76:	2b02      	cmp	r3, #2
 800ca78:	d145      	bne.n	800cb06 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ca7a:	4b34      	ldr	r3, [pc, #208]	; (800cb4c <HAL_RCC_OscConfig+0x480>)
 800ca7c:	2200      	movs	r2, #0
 800ca7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ca80:	f7fc ff44 	bl	800990c <HAL_GetTick>
 800ca84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ca86:	e008      	b.n	800ca9a <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ca88:	f7fc ff40 	bl	800990c <HAL_GetTick>
 800ca8c:	4602      	mov	r2, r0
 800ca8e:	693b      	ldr	r3, [r7, #16]
 800ca90:	1ad3      	subs	r3, r2, r3
 800ca92:	2b02      	cmp	r3, #2
 800ca94:	d901      	bls.n	800ca9a <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 800ca96:	2303      	movs	r3, #3
 800ca98:	e04f      	b.n	800cb3a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ca9a:	4b2b      	ldr	r3, [pc, #172]	; (800cb48 <HAL_RCC_OscConfig+0x47c>)
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d1f0      	bne.n	800ca88 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	69da      	ldr	r2, [r3, #28]
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	6a1b      	ldr	r3, [r3, #32]
 800caae:	431a      	orrs	r2, r3
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cab4:	019b      	lsls	r3, r3, #6
 800cab6:	431a      	orrs	r2, r3
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cabc:	085b      	lsrs	r3, r3, #1
 800cabe:	3b01      	subs	r3, #1
 800cac0:	041b      	lsls	r3, r3, #16
 800cac2:	431a      	orrs	r2, r3
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cac8:	061b      	lsls	r3, r3, #24
 800caca:	431a      	orrs	r2, r3
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cad0:	071b      	lsls	r3, r3, #28
 800cad2:	491d      	ldr	r1, [pc, #116]	; (800cb48 <HAL_RCC_OscConfig+0x47c>)
 800cad4:	4313      	orrs	r3, r2
 800cad6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800cad8:	4b1c      	ldr	r3, [pc, #112]	; (800cb4c <HAL_RCC_OscConfig+0x480>)
 800cada:	2201      	movs	r2, #1
 800cadc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cade:	f7fc ff15 	bl	800990c <HAL_GetTick>
 800cae2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cae4:	e008      	b.n	800caf8 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cae6:	f7fc ff11 	bl	800990c <HAL_GetTick>
 800caea:	4602      	mov	r2, r0
 800caec:	693b      	ldr	r3, [r7, #16]
 800caee:	1ad3      	subs	r3, r2, r3
 800caf0:	2b02      	cmp	r3, #2
 800caf2:	d901      	bls.n	800caf8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800caf4:	2303      	movs	r3, #3
 800caf6:	e020      	b.n	800cb3a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800caf8:	4b13      	ldr	r3, [pc, #76]	; (800cb48 <HAL_RCC_OscConfig+0x47c>)
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d0f0      	beq.n	800cae6 <HAL_RCC_OscConfig+0x41a>
 800cb04:	e018      	b.n	800cb38 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cb06:	4b11      	ldr	r3, [pc, #68]	; (800cb4c <HAL_RCC_OscConfig+0x480>)
 800cb08:	2200      	movs	r2, #0
 800cb0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cb0c:	f7fc fefe 	bl	800990c <HAL_GetTick>
 800cb10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cb12:	e008      	b.n	800cb26 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cb14:	f7fc fefa 	bl	800990c <HAL_GetTick>
 800cb18:	4602      	mov	r2, r0
 800cb1a:	693b      	ldr	r3, [r7, #16]
 800cb1c:	1ad3      	subs	r3, r2, r3
 800cb1e:	2b02      	cmp	r3, #2
 800cb20:	d901      	bls.n	800cb26 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800cb22:	2303      	movs	r3, #3
 800cb24:	e009      	b.n	800cb3a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cb26:	4b08      	ldr	r3, [pc, #32]	; (800cb48 <HAL_RCC_OscConfig+0x47c>)
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d1f0      	bne.n	800cb14 <HAL_RCC_OscConfig+0x448>
 800cb32:	e001      	b.n	800cb38 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800cb34:	2301      	movs	r3, #1
 800cb36:	e000      	b.n	800cb3a <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800cb38:	2300      	movs	r3, #0
}
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	3718      	adds	r7, #24
 800cb3e:	46bd      	mov	sp, r7
 800cb40:	bd80      	pop	{r7, pc}
 800cb42:	bf00      	nop
 800cb44:	40007000 	.word	0x40007000
 800cb48:	40023800 	.word	0x40023800
 800cb4c:	42470060 	.word	0x42470060

0800cb50 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800cb50:	b580      	push	{r7, lr}
 800cb52:	b082      	sub	sp, #8
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d101      	bne.n	800cb62 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800cb5e:	2301      	movs	r3, #1
 800cb60:	e022      	b.n	800cba8 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cb68:	b2db      	uxtb	r3, r3
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d105      	bne.n	800cb7a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	2200      	movs	r2, #0
 800cb72:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800cb74:	6878      	ldr	r0, [r7, #4]
 800cb76:	f7fa f8db 	bl	8006d30 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	2203      	movs	r2, #3
 800cb7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800cb82:	6878      	ldr	r0, [r7, #4]
 800cb84:	f000 f814 	bl	800cbb0 <HAL_SD_InitCard>
 800cb88:	4603      	mov	r3, r0
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d001      	beq.n	800cb92 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800cb8e:	2301      	movs	r3, #1
 800cb90:	e00a      	b.n	800cba8 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	2200      	movs	r2, #0
 800cb96:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	2200      	movs	r2, #0
 800cb9c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	2201      	movs	r2, #1
 800cba2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800cba6:	2300      	movs	r3, #0
}
 800cba8:	4618      	mov	r0, r3
 800cbaa:	3708      	adds	r7, #8
 800cbac:	46bd      	mov	sp, r7
 800cbae:	bd80      	pop	{r7, pc}

0800cbb0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800cbb0:	b5b0      	push	{r4, r5, r7, lr}
 800cbb2:	b08e      	sub	sp, #56	; 0x38
 800cbb4:	af04      	add	r7, sp, #16
 800cbb6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800cbb8:	2300      	movs	r3, #0
 800cbba:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800cbbc:	2300      	movs	r3, #0
 800cbbe:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800cbc8:	2300      	movs	r3, #0
 800cbca:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800cbcc:	2376      	movs	r3, #118	; 0x76
 800cbce:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	681d      	ldr	r5, [r3, #0]
 800cbd4:	466c      	mov	r4, sp
 800cbd6:	f107 0314 	add.w	r3, r7, #20
 800cbda:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cbde:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800cbe2:	f107 0308 	add.w	r3, r7, #8
 800cbe6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cbe8:	4628      	mov	r0, r5
 800cbea:	f003 faa5 	bl	8010138 <SDIO_Init>
 800cbee:	4603      	mov	r3, r0
 800cbf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800cbf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d001      	beq.n	800cc00 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800cbfc:	2301      	movs	r3, #1
 800cbfe:	e031      	b.n	800cc64 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800cc00:	4b1a      	ldr	r3, [pc, #104]	; (800cc6c <HAL_SD_InitCard+0xbc>)
 800cc02:	2200      	movs	r2, #0
 800cc04:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	f003 fadd 	bl	80101ca <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800cc10:	4b16      	ldr	r3, [pc, #88]	; (800cc6c <HAL_SD_InitCard+0xbc>)
 800cc12:	2201      	movs	r2, #1
 800cc14:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800cc16:	6878      	ldr	r0, [r7, #4]
 800cc18:	f000 ffc4 	bl	800dba4 <SD_PowerON>
 800cc1c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cc1e:	6a3b      	ldr	r3, [r7, #32]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d00b      	beq.n	800cc3c <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	2201      	movs	r2, #1
 800cc28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cc30:	6a3b      	ldr	r3, [r7, #32]
 800cc32:	431a      	orrs	r2, r3
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cc38:	2301      	movs	r3, #1
 800cc3a:	e013      	b.n	800cc64 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800cc3c:	6878      	ldr	r0, [r7, #4]
 800cc3e:	f000 fee5 	bl	800da0c <SD_InitCard>
 800cc42:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cc44:	6a3b      	ldr	r3, [r7, #32]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d00b      	beq.n	800cc62 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	2201      	movs	r2, #1
 800cc4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cc56:	6a3b      	ldr	r3, [r7, #32]
 800cc58:	431a      	orrs	r2, r3
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cc5e:	2301      	movs	r3, #1
 800cc60:	e000      	b.n	800cc64 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800cc62:	2300      	movs	r3, #0
}
 800cc64:	4618      	mov	r0, r3
 800cc66:	3728      	adds	r7, #40	; 0x28
 800cc68:	46bd      	mov	sp, r7
 800cc6a:	bdb0      	pop	{r4, r5, r7, pc}
 800cc6c:	422580a0 	.word	0x422580a0

0800cc70 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800cc70:	b580      	push	{r7, lr}
 800cc72:	b08c      	sub	sp, #48	; 0x30
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	60f8      	str	r0, [r7, #12]
 800cc78:	60b9      	str	r1, [r7, #8]
 800cc7a:	607a      	str	r2, [r7, #4]
 800cc7c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800cc82:	68bb      	ldr	r3, [r7, #8]
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d107      	bne.n	800cc98 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc8c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cc94:	2301      	movs	r3, #1
 800cc96:	e0c7      	b.n	800ce28 <HAL_SD_ReadBlocks_DMA+0x1b8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cc9e:	b2db      	uxtb	r3, r3
 800cca0:	2b01      	cmp	r3, #1
 800cca2:	f040 80c0 	bne.w	800ce26 <HAL_SD_ReadBlocks_DMA+0x1b6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	2200      	movs	r2, #0
 800ccaa:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800ccac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ccae:	683b      	ldr	r3, [r7, #0]
 800ccb0:	441a      	add	r2, r3
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ccb6:	429a      	cmp	r2, r3
 800ccb8:	d907      	bls.n	800ccca <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccbe:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800ccc6:	2301      	movs	r3, #1
 800ccc8:	e0ae      	b.n	800ce28 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	2203      	movs	r2, #3
 800ccce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	2200      	movs	r2, #0
 800ccd8:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800cce8:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccee:	4a50      	ldr	r2, [pc, #320]	; (800ce30 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800ccf0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccf6:	4a4f      	ldr	r2, [pc, #316]	; (800ce34 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 800ccf8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccfe:	2200      	movs	r2, #0
 800cd00:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	3380      	adds	r3, #128	; 0x80
 800cd0c:	4619      	mov	r1, r3
 800cd0e:	68ba      	ldr	r2, [r7, #8]
 800cd10:	683b      	ldr	r3, [r7, #0]
 800cd12:	025b      	lsls	r3, r3, #9
 800cd14:	089b      	lsrs	r3, r3, #2
 800cd16:	f7fd fbed 	bl	800a4f4 <HAL_DMA_Start_IT>
 800cd1a:	4603      	mov	r3, r0
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d017      	beq.n	800cd50 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800cd2e:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	4a40      	ldr	r2, [pc, #256]	; (800ce38 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800cd36:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd3c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	2201      	movs	r2, #1
 800cd48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800cd4c:	2301      	movs	r3, #1
 800cd4e:	e06b      	b.n	800ce28 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800cd50:	4b3a      	ldr	r3, [pc, #232]	; (800ce3c <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800cd52:	2201      	movs	r2, #1
 800cd54:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd5a:	2b01      	cmp	r3, #1
 800cd5c:	d002      	beq.n	800cd64 <HAL_SD_ReadBlocks_DMA+0xf4>
      {
        add *= 512U;
 800cd5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd60:	025b      	lsls	r3, r3, #9
 800cd62:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	f003 fabf 	bl	80102f0 <SDMMC_CmdBlockLength>
 800cd72:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800cd74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d00f      	beq.n	800cd9a <HAL_SD_ReadBlocks_DMA+0x12a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	4a2e      	ldr	r2, [pc, #184]	; (800ce38 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800cd80:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cd86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd88:	431a      	orrs	r2, r3
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	2201      	movs	r2, #1
 800cd92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800cd96:	2301      	movs	r3, #1
 800cd98:	e046      	b.n	800ce28 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cd9a:	f04f 33ff 	mov.w	r3, #4294967295
 800cd9e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800cda0:	683b      	ldr	r3, [r7, #0]
 800cda2:	025b      	lsls	r3, r3, #9
 800cda4:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800cda6:	2390      	movs	r3, #144	; 0x90
 800cda8:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800cdaa:	2302      	movs	r3, #2
 800cdac:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800cdae:	2300      	movs	r3, #0
 800cdb0:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800cdb2:	2301      	movs	r3, #1
 800cdb4:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	f107 0210 	add.w	r2, r7, #16
 800cdbe:	4611      	mov	r1, r2
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	f003 fa69 	bl	8010298 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800cdc6:	683b      	ldr	r3, [r7, #0]
 800cdc8:	2b01      	cmp	r3, #1
 800cdca:	d90a      	bls.n	800cde2 <HAL_SD_ReadBlocks_DMA+0x172>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	2282      	movs	r2, #130	; 0x82
 800cdd0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cdd8:	4618      	mov	r0, r3
 800cdda:	f003 facd 	bl	8010378 <SDMMC_CmdReadMultiBlock>
 800cdde:	62f8      	str	r0, [r7, #44]	; 0x2c
 800cde0:	e009      	b.n	800cdf6 <HAL_SD_ReadBlocks_DMA+0x186>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	2281      	movs	r2, #129	; 0x81
 800cde6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cdee:	4618      	mov	r0, r3
 800cdf0:	f003 faa0 	bl	8010334 <SDMMC_CmdReadSingleBlock>
 800cdf4:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800cdf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d012      	beq.n	800ce22 <HAL_SD_ReadBlocks_DMA+0x1b2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	4a0d      	ldr	r2, [pc, #52]	; (800ce38 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800ce02:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ce08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce0a:	431a      	orrs	r2, r3
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	2201      	movs	r2, #1
 800ce14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	2200      	movs	r2, #0
 800ce1c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800ce1e:	2301      	movs	r3, #1
 800ce20:	e002      	b.n	800ce28 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      return HAL_OK;
 800ce22:	2300      	movs	r3, #0
 800ce24:	e000      	b.n	800ce28 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
  }
  else
  {
    return HAL_BUSY;
 800ce26:	2302      	movs	r3, #2
  }
}
 800ce28:	4618      	mov	r0, r3
 800ce2a:	3730      	adds	r7, #48	; 0x30
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	bd80      	pop	{r7, pc}
 800ce30:	0800d81b 	.word	0x0800d81b
 800ce34:	0800d88d 	.word	0x0800d88d
 800ce38:	004005ff 	.word	0x004005ff
 800ce3c:	4225858c 	.word	0x4225858c

0800ce40 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	b08c      	sub	sp, #48	; 0x30
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	60f8      	str	r0, [r7, #12]
 800ce48:	60b9      	str	r1, [r7, #8]
 800ce4a:	607a      	str	r2, [r7, #4]
 800ce4c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800ce52:	68bb      	ldr	r3, [r7, #8]
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d107      	bne.n	800ce68 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce5c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ce64:	2301      	movs	r3, #1
 800ce66:	e0ca      	b.n	800cffe <HAL_SD_WriteBlocks_DMA+0x1be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ce6e:	b2db      	uxtb	r3, r3
 800ce70:	2b01      	cmp	r3, #1
 800ce72:	f040 80c3 	bne.w	800cffc <HAL_SD_WriteBlocks_DMA+0x1bc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	2200      	movs	r2, #0
 800ce7a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800ce7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ce7e:	683b      	ldr	r3, [r7, #0]
 800ce80:	441a      	add	r2, r3
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ce86:	429a      	cmp	r2, r3
 800ce88:	d907      	bls.n	800ce9a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce8e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800ce96:	2301      	movs	r3, #1
 800ce98:	e0b1      	b.n	800cffe <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	2203      	movs	r2, #3
 800ce9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	2200      	movs	r2, #0
 800cea8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	f042 021a 	orr.w	r2, r2, #26
 800ceb8:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cebe:	4a52      	ldr	r2, [pc, #328]	; (800d008 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800cec0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cec6:	4a51      	ldr	r2, [pc, #324]	; (800d00c <HAL_SD_WriteBlocks_DMA+0x1cc>)
 800cec8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cece:	2200      	movs	r2, #0
 800ced0:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ced6:	2b01      	cmp	r3, #1
 800ced8:	d002      	beq.n	800cee0 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800ceda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cedc:	025b      	lsls	r3, r3, #9
 800cede:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cee8:	4618      	mov	r0, r3
 800ceea:	f003 fa01 	bl	80102f0 <SDMMC_CmdBlockLength>
 800ceee:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800cef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d00f      	beq.n	800cf16 <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	4a45      	ldr	r2, [pc, #276]	; (800d010 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800cefc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cf02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf04:	431a      	orrs	r2, r3
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	2201      	movs	r2, #1
 800cf0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800cf12:	2301      	movs	r3, #1
 800cf14:	e073      	b.n	800cffe <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800cf16:	683b      	ldr	r3, [r7, #0]
 800cf18:	2b01      	cmp	r3, #1
 800cf1a:	d90a      	bls.n	800cf32 <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	22a0      	movs	r2, #160	; 0xa0
 800cf20:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cf28:	4618      	mov	r0, r3
 800cf2a:	f003 fa69 	bl	8010400 <SDMMC_CmdWriteMultiBlock>
 800cf2e:	62f8      	str	r0, [r7, #44]	; 0x2c
 800cf30:	e009      	b.n	800cf46 <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	2290      	movs	r2, #144	; 0x90
 800cf36:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cf3e:	4618      	mov	r0, r3
 800cf40:	f003 fa3c 	bl	80103bc <SDMMC_CmdWriteSingleBlock>
 800cf44:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800cf46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d012      	beq.n	800cf72 <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	4a2f      	ldr	r2, [pc, #188]	; (800d010 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800cf52:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cf58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf5a:	431a      	orrs	r2, r3
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	2201      	movs	r2, #1
 800cf64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	2200      	movs	r2, #0
 800cf6c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800cf6e:	2301      	movs	r3, #1
 800cf70:	e045      	b.n	800cffe <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800cf72:	4b28      	ldr	r3, [pc, #160]	; (800d014 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800cf74:	2201      	movs	r2, #1
 800cf76:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800cf7c:	68b9      	ldr	r1, [r7, #8]
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	3380      	adds	r3, #128	; 0x80
 800cf84:	461a      	mov	r2, r3
 800cf86:	683b      	ldr	r3, [r7, #0]
 800cf88:	025b      	lsls	r3, r3, #9
 800cf8a:	089b      	lsrs	r3, r3, #2
 800cf8c:	f7fd fab2 	bl	800a4f4 <HAL_DMA_Start_IT>
 800cf90:	4603      	mov	r3, r0
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d01a      	beq.n	800cfcc <HAL_SD_WriteBlocks_DMA+0x18c>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	f022 021a 	bic.w	r2, r2, #26
 800cfa4:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	4a19      	ldr	r2, [pc, #100]	; (800d010 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800cfac:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfb2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	2201      	movs	r2, #1
 800cfbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	2200      	movs	r2, #0
 800cfc6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800cfc8:	2301      	movs	r3, #1
 800cfca:	e018      	b.n	800cffe <HAL_SD_WriteBlocks_DMA+0x1be>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cfcc:	f04f 33ff 	mov.w	r3, #4294967295
 800cfd0:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800cfd2:	683b      	ldr	r3, [r7, #0]
 800cfd4:	025b      	lsls	r3, r3, #9
 800cfd6:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800cfd8:	2390      	movs	r3, #144	; 0x90
 800cfda:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800cfdc:	2300      	movs	r3, #0
 800cfde:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800cfe0:	2300      	movs	r3, #0
 800cfe2:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800cfe4:	2301      	movs	r3, #1
 800cfe6:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	f107 0210 	add.w	r2, r7, #16
 800cff0:	4611      	mov	r1, r2
 800cff2:	4618      	mov	r0, r3
 800cff4:	f003 f950 	bl	8010298 <SDIO_ConfigData>

      return HAL_OK;
 800cff8:	2300      	movs	r3, #0
 800cffa:	e000      	b.n	800cffe <HAL_SD_WriteBlocks_DMA+0x1be>
    }
  }
  else
  {
    return HAL_BUSY;
 800cffc:	2302      	movs	r3, #2
  }
}
 800cffe:	4618      	mov	r0, r3
 800d000:	3730      	adds	r7, #48	; 0x30
 800d002:	46bd      	mov	sp, r7
 800d004:	bd80      	pop	{r7, pc}
 800d006:	bf00      	nop
 800d008:	0800d7f1 	.word	0x0800d7f1
 800d00c:	0800d88d 	.word	0x0800d88d
 800d010:	004005ff 	.word	0x004005ff
 800d014:	4225858c 	.word	0x4225858c

0800d018 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800d018:	b580      	push	{r7, lr}
 800d01a:	b084      	sub	sp, #16
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d024:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d02c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d030:	2b00      	cmp	r3, #0
 800d032:	d008      	beq.n	800d046 <HAL_SD_IRQHandler+0x2e>
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	f003 0308 	and.w	r3, r3, #8
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d003      	beq.n	800d046 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800d03e:	6878      	ldr	r0, [r7, #4]
 800d040:	f000 ffc6 	bl	800dfd0 <SD_Read_IT>
 800d044:	e155      	b.n	800d2f2 <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d04c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d050:	2b00      	cmp	r3, #0
 800d052:	f000 808f 	beq.w	800d174 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d05e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d066:	687a      	ldr	r2, [r7, #4]
 800d068:	6812      	ldr	r2, [r2, #0]
 800d06a:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800d06e:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800d072:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	f022 0201 	bic.w	r2, r2, #1
 800d082:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	f003 0308 	and.w	r3, r3, #8
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d039      	beq.n	800d102 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	f003 0302 	and.w	r3, r3, #2
 800d094:	2b00      	cmp	r3, #0
 800d096:	d104      	bne.n	800d0a2 <HAL_SD_IRQHandler+0x8a>
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	f003 0320 	and.w	r3, r3, #32
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d011      	beq.n	800d0c6 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	4618      	mov	r0, r3
 800d0a8:	f003 f9cc 	bl	8010444 <SDMMC_CmdStopTransfer>
 800d0ac:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d0ae:	68bb      	ldr	r3, [r7, #8]
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d008      	beq.n	800d0c6 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d0b8:	68bb      	ldr	r3, [r7, #8]
 800d0ba:	431a      	orrs	r2, r3
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800d0c0:	6878      	ldr	r0, [r7, #4]
 800d0c2:	f000 f91f 	bl	800d304 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	f240 523a 	movw	r2, #1338	; 0x53a
 800d0ce:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	2201      	movs	r2, #1
 800d0d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	2200      	movs	r2, #0
 800d0dc:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	f003 0301 	and.w	r3, r3, #1
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d104      	bne.n	800d0f2 <HAL_SD_IRQHandler+0xda>
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	f003 0302 	and.w	r3, r3, #2
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d003      	beq.n	800d0fa <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800d0f2:	6878      	ldr	r0, [r7, #4]
 800d0f4:	f003 fe22 	bl	8010d3c <HAL_SD_RxCpltCallback>
 800d0f8:	e0fb      	b.n	800d2f2 <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800d0fa:	6878      	ldr	r0, [r7, #4]
 800d0fc:	f003 fe14 	bl	8010d28 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800d100:	e0f7      	b.n	800d2f2 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d108:	2b00      	cmp	r3, #0
 800d10a:	f000 80f2 	beq.w	800d2f2 <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	f003 0320 	and.w	r3, r3, #32
 800d114:	2b00      	cmp	r3, #0
 800d116:	d011      	beq.n	800d13c <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	4618      	mov	r0, r3
 800d11e:	f003 f991 	bl	8010444 <SDMMC_CmdStopTransfer>
 800d122:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d124:	68bb      	ldr	r3, [r7, #8]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d008      	beq.n	800d13c <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d12e:	68bb      	ldr	r3, [r7, #8]
 800d130:	431a      	orrs	r2, r3
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800d136:	6878      	ldr	r0, [r7, #4]
 800d138:	f000 f8e4 	bl	800d304 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	f003 0301 	and.w	r3, r3, #1
 800d142:	2b00      	cmp	r3, #0
 800d144:	f040 80d5 	bne.w	800d2f2 <HAL_SD_IRQHandler+0x2da>
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	f003 0302 	and.w	r3, r3, #2
 800d14e:	2b00      	cmp	r3, #0
 800d150:	f040 80cf 	bne.w	800d2f2 <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	f022 0208 	bic.w	r2, r2, #8
 800d162:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	2201      	movs	r2, #1
 800d168:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800d16c:	6878      	ldr	r0, [r7, #4]
 800d16e:	f003 fddb 	bl	8010d28 <HAL_SD_TxCpltCallback>
}
 800d172:	e0be      	b.n	800d2f2 <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d17a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d008      	beq.n	800d194 <HAL_SD_IRQHandler+0x17c>
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	f003 0308 	and.w	r3, r3, #8
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d003      	beq.n	800d194 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800d18c:	6878      	ldr	r0, [r7, #4]
 800d18e:	f000 ff70 	bl	800e072 <SD_Write_IT>
 800d192:	e0ae      	b.n	800d2f2 <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d19a:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	f000 80a7 	beq.w	800d2f2 <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1aa:	f003 0302 	and.w	r3, r3, #2
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d005      	beq.n	800d1be <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1b6:	f043 0202 	orr.w	r2, r3, #2
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1c4:	f003 0308 	and.w	r3, r3, #8
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d005      	beq.n	800d1d8 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1d0:	f043 0208 	orr.w	r2, r3, #8
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1de:	f003 0320 	and.w	r3, r3, #32
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d005      	beq.n	800d1f2 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1ea:	f043 0220 	orr.w	r2, r3, #32
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1f8:	f003 0310 	and.w	r3, r3, #16
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d005      	beq.n	800d20c <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d204:	f043 0210 	orr.w	r2, r3, #16
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	f240 523a 	movw	r2, #1338	; 0x53a
 800d214:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800d224:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	4618      	mov	r0, r3
 800d22c:	f003 f90a 	bl	8010444 <SDMMC_CmdStopTransfer>
 800d230:	4602      	mov	r2, r0
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d236:	431a      	orrs	r2, r3
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	f003 0308 	and.w	r3, r3, #8
 800d242:	2b00      	cmp	r3, #0
 800d244:	d00a      	beq.n	800d25c <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	2201      	movs	r2, #1
 800d24a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	2200      	movs	r2, #0
 800d252:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800d254:	6878      	ldr	r0, [r7, #4]
 800d256:	f000 f855 	bl	800d304 <HAL_SD_ErrorCallback>
}
 800d25a:	e04a      	b.n	800d2f2 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d262:	2b00      	cmp	r3, #0
 800d264:	d045      	beq.n	800d2f2 <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	f003 0310 	and.w	r3, r3, #16
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d104      	bne.n	800d27a <HAL_SD_IRQHandler+0x262>
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	f003 0320 	and.w	r3, r3, #32
 800d276:	2b00      	cmp	r3, #0
 800d278:	d011      	beq.n	800d29e <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d27e:	4a1f      	ldr	r2, [pc, #124]	; (800d2fc <HAL_SD_IRQHandler+0x2e4>)
 800d280:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d286:	4618      	mov	r0, r3
 800d288:	f7fd f98c 	bl	800a5a4 <HAL_DMA_Abort_IT>
 800d28c:	4603      	mov	r3, r0
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d02f      	beq.n	800d2f2 <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d296:	4618      	mov	r0, r3
 800d298:	f000 fb4a 	bl	800d930 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800d29c:	e029      	b.n	800d2f2 <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	f003 0301 	and.w	r3, r3, #1
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d104      	bne.n	800d2b2 <HAL_SD_IRQHandler+0x29a>
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	f003 0302 	and.w	r3, r3, #2
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d011      	beq.n	800d2d6 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2b6:	4a12      	ldr	r2, [pc, #72]	; (800d300 <HAL_SD_IRQHandler+0x2e8>)
 800d2b8:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2be:	4618      	mov	r0, r3
 800d2c0:	f7fd f970 	bl	800a5a4 <HAL_DMA_Abort_IT>
 800d2c4:	4603      	mov	r3, r0
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d013      	beq.n	800d2f2 <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	f000 fb65 	bl	800d99e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800d2d4:	e00d      	b.n	800d2f2 <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	2200      	movs	r2, #0
 800d2da:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	2201      	movs	r2, #1
 800d2e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	2200      	movs	r2, #0
 800d2e8:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800d2ea:	6878      	ldr	r0, [r7, #4]
 800d2ec:	f003 fd12 	bl	8010d14 <HAL_SD_AbortCallback>
}
 800d2f0:	e7ff      	b.n	800d2f2 <HAL_SD_IRQHandler+0x2da>
 800d2f2:	bf00      	nop
 800d2f4:	3710      	adds	r7, #16
 800d2f6:	46bd      	mov	sp, r7
 800d2f8:	bd80      	pop	{r7, pc}
 800d2fa:	bf00      	nop
 800d2fc:	0800d931 	.word	0x0800d931
 800d300:	0800d99f 	.word	0x0800d99f

0800d304 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800d304:	b480      	push	{r7}
 800d306:	b083      	sub	sp, #12
 800d308:	af00      	add	r7, sp, #0
 800d30a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800d30c:	bf00      	nop
 800d30e:	370c      	adds	r7, #12
 800d310:	46bd      	mov	sp, r7
 800d312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d316:	4770      	bx	lr

0800d318 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800d318:	b480      	push	{r7}
 800d31a:	b083      	sub	sp, #12
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	6078      	str	r0, [r7, #4]
 800d320:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d326:	0f9b      	lsrs	r3, r3, #30
 800d328:	b2da      	uxtb	r2, r3
 800d32a:	683b      	ldr	r3, [r7, #0]
 800d32c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d332:	0e9b      	lsrs	r3, r3, #26
 800d334:	b2db      	uxtb	r3, r3
 800d336:	f003 030f 	and.w	r3, r3, #15
 800d33a:	b2da      	uxtb	r2, r3
 800d33c:	683b      	ldr	r3, [r7, #0]
 800d33e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d344:	0e1b      	lsrs	r3, r3, #24
 800d346:	b2db      	uxtb	r3, r3
 800d348:	f003 0303 	and.w	r3, r3, #3
 800d34c:	b2da      	uxtb	r2, r3
 800d34e:	683b      	ldr	r3, [r7, #0]
 800d350:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d356:	0c1b      	lsrs	r3, r3, #16
 800d358:	b2da      	uxtb	r2, r3
 800d35a:	683b      	ldr	r3, [r7, #0]
 800d35c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d362:	0a1b      	lsrs	r3, r3, #8
 800d364:	b2da      	uxtb	r2, r3
 800d366:	683b      	ldr	r3, [r7, #0]
 800d368:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d36e:	b2da      	uxtb	r2, r3
 800d370:	683b      	ldr	r3, [r7, #0]
 800d372:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d378:	0d1b      	lsrs	r3, r3, #20
 800d37a:	b29a      	uxth	r2, r3
 800d37c:	683b      	ldr	r3, [r7, #0]
 800d37e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d384:	0c1b      	lsrs	r3, r3, #16
 800d386:	b2db      	uxtb	r3, r3
 800d388:	f003 030f 	and.w	r3, r3, #15
 800d38c:	b2da      	uxtb	r2, r3
 800d38e:	683b      	ldr	r3, [r7, #0]
 800d390:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d396:	0bdb      	lsrs	r3, r3, #15
 800d398:	b2db      	uxtb	r3, r3
 800d39a:	f003 0301 	and.w	r3, r3, #1
 800d39e:	b2da      	uxtb	r2, r3
 800d3a0:	683b      	ldr	r3, [r7, #0]
 800d3a2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d3a8:	0b9b      	lsrs	r3, r3, #14
 800d3aa:	b2db      	uxtb	r3, r3
 800d3ac:	f003 0301 	and.w	r3, r3, #1
 800d3b0:	b2da      	uxtb	r2, r3
 800d3b2:	683b      	ldr	r3, [r7, #0]
 800d3b4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d3ba:	0b5b      	lsrs	r3, r3, #13
 800d3bc:	b2db      	uxtb	r3, r3
 800d3be:	f003 0301 	and.w	r3, r3, #1
 800d3c2:	b2da      	uxtb	r2, r3
 800d3c4:	683b      	ldr	r3, [r7, #0]
 800d3c6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d3cc:	0b1b      	lsrs	r3, r3, #12
 800d3ce:	b2db      	uxtb	r3, r3
 800d3d0:	f003 0301 	and.w	r3, r3, #1
 800d3d4:	b2da      	uxtb	r2, r3
 800d3d6:	683b      	ldr	r3, [r7, #0]
 800d3d8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800d3da:	683b      	ldr	r3, [r7, #0]
 800d3dc:	2200      	movs	r2, #0
 800d3de:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d163      	bne.n	800d4b0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d3ec:	009a      	lsls	r2, r3, #2
 800d3ee:	f640 73fc 	movw	r3, #4092	; 0xffc
 800d3f2:	4013      	ands	r3, r2
 800d3f4:	687a      	ldr	r2, [r7, #4]
 800d3f6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800d3f8:	0f92      	lsrs	r2, r2, #30
 800d3fa:	431a      	orrs	r2, r3
 800d3fc:	683b      	ldr	r3, [r7, #0]
 800d3fe:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d404:	0edb      	lsrs	r3, r3, #27
 800d406:	b2db      	uxtb	r3, r3
 800d408:	f003 0307 	and.w	r3, r3, #7
 800d40c:	b2da      	uxtb	r2, r3
 800d40e:	683b      	ldr	r3, [r7, #0]
 800d410:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d416:	0e1b      	lsrs	r3, r3, #24
 800d418:	b2db      	uxtb	r3, r3
 800d41a:	f003 0307 	and.w	r3, r3, #7
 800d41e:	b2da      	uxtb	r2, r3
 800d420:	683b      	ldr	r3, [r7, #0]
 800d422:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d428:	0d5b      	lsrs	r3, r3, #21
 800d42a:	b2db      	uxtb	r3, r3
 800d42c:	f003 0307 	and.w	r3, r3, #7
 800d430:	b2da      	uxtb	r2, r3
 800d432:	683b      	ldr	r3, [r7, #0]
 800d434:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d43a:	0c9b      	lsrs	r3, r3, #18
 800d43c:	b2db      	uxtb	r3, r3
 800d43e:	f003 0307 	and.w	r3, r3, #7
 800d442:	b2da      	uxtb	r2, r3
 800d444:	683b      	ldr	r3, [r7, #0]
 800d446:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d44c:	0bdb      	lsrs	r3, r3, #15
 800d44e:	b2db      	uxtb	r3, r3
 800d450:	f003 0307 	and.w	r3, r3, #7
 800d454:	b2da      	uxtb	r2, r3
 800d456:	683b      	ldr	r3, [r7, #0]
 800d458:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800d45a:	683b      	ldr	r3, [r7, #0]
 800d45c:	691b      	ldr	r3, [r3, #16]
 800d45e:	1c5a      	adds	r2, r3, #1
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800d464:	683b      	ldr	r3, [r7, #0]
 800d466:	7e1b      	ldrb	r3, [r3, #24]
 800d468:	b2db      	uxtb	r3, r3
 800d46a:	f003 0307 	and.w	r3, r3, #7
 800d46e:	3302      	adds	r3, #2
 800d470:	2201      	movs	r2, #1
 800d472:	fa02 f303 	lsl.w	r3, r2, r3
 800d476:	687a      	ldr	r2, [r7, #4]
 800d478:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800d47a:	fb02 f203 	mul.w	r2, r2, r3
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800d482:	683b      	ldr	r3, [r7, #0]
 800d484:	7a1b      	ldrb	r3, [r3, #8]
 800d486:	b2db      	uxtb	r3, r3
 800d488:	f003 030f 	and.w	r3, r3, #15
 800d48c:	2201      	movs	r2, #1
 800d48e:	409a      	lsls	r2, r3
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d498:	687a      	ldr	r2, [r7, #4]
 800d49a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800d49c:	0a52      	lsrs	r2, r2, #9
 800d49e:	fb02 f203 	mul.w	r2, r2, r3
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d4ac:	661a      	str	r2, [r3, #96]	; 0x60
 800d4ae:	e031      	b.n	800d514 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d4b4:	2b01      	cmp	r3, #1
 800d4b6:	d11d      	bne.n	800d4f4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d4bc:	041b      	lsls	r3, r3, #16
 800d4be:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d4c6:	0c1b      	lsrs	r3, r3, #16
 800d4c8:	431a      	orrs	r2, r3
 800d4ca:	683b      	ldr	r3, [r7, #0]
 800d4cc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800d4ce:	683b      	ldr	r3, [r7, #0]
 800d4d0:	691b      	ldr	r3, [r3, #16]
 800d4d2:	3301      	adds	r3, #1
 800d4d4:	029a      	lsls	r2, r3, #10
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d4e8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	661a      	str	r2, [r3, #96]	; 0x60
 800d4f2:	e00f      	b.n	800d514 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	4a58      	ldr	r2, [pc, #352]	; (800d65c <HAL_SD_GetCardCSD+0x344>)
 800d4fa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d500:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	2201      	movs	r2, #1
 800d50c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d510:	2301      	movs	r3, #1
 800d512:	e09d      	b.n	800d650 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d518:	0b9b      	lsrs	r3, r3, #14
 800d51a:	b2db      	uxtb	r3, r3
 800d51c:	f003 0301 	and.w	r3, r3, #1
 800d520:	b2da      	uxtb	r2, r3
 800d522:	683b      	ldr	r3, [r7, #0]
 800d524:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d52a:	09db      	lsrs	r3, r3, #7
 800d52c:	b2db      	uxtb	r3, r3
 800d52e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d532:	b2da      	uxtb	r2, r3
 800d534:	683b      	ldr	r3, [r7, #0]
 800d536:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d53c:	b2db      	uxtb	r3, r3
 800d53e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d542:	b2da      	uxtb	r2, r3
 800d544:	683b      	ldr	r3, [r7, #0]
 800d546:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d54c:	0fdb      	lsrs	r3, r3, #31
 800d54e:	b2da      	uxtb	r2, r3
 800d550:	683b      	ldr	r3, [r7, #0]
 800d552:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d558:	0f5b      	lsrs	r3, r3, #29
 800d55a:	b2db      	uxtb	r3, r3
 800d55c:	f003 0303 	and.w	r3, r3, #3
 800d560:	b2da      	uxtb	r2, r3
 800d562:	683b      	ldr	r3, [r7, #0]
 800d564:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d56a:	0e9b      	lsrs	r3, r3, #26
 800d56c:	b2db      	uxtb	r3, r3
 800d56e:	f003 0307 	and.w	r3, r3, #7
 800d572:	b2da      	uxtb	r2, r3
 800d574:	683b      	ldr	r3, [r7, #0]
 800d576:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d57c:	0d9b      	lsrs	r3, r3, #22
 800d57e:	b2db      	uxtb	r3, r3
 800d580:	f003 030f 	and.w	r3, r3, #15
 800d584:	b2da      	uxtb	r2, r3
 800d586:	683b      	ldr	r3, [r7, #0]
 800d588:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d58e:	0d5b      	lsrs	r3, r3, #21
 800d590:	b2db      	uxtb	r3, r3
 800d592:	f003 0301 	and.w	r3, r3, #1
 800d596:	b2da      	uxtb	r2, r3
 800d598:	683b      	ldr	r3, [r7, #0]
 800d59a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800d59e:	683b      	ldr	r3, [r7, #0]
 800d5a0:	2200      	movs	r2, #0
 800d5a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d5aa:	0c1b      	lsrs	r3, r3, #16
 800d5ac:	b2db      	uxtb	r3, r3
 800d5ae:	f003 0301 	and.w	r3, r3, #1
 800d5b2:	b2da      	uxtb	r2, r3
 800d5b4:	683b      	ldr	r3, [r7, #0]
 800d5b6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d5be:	0bdb      	lsrs	r3, r3, #15
 800d5c0:	b2db      	uxtb	r3, r3
 800d5c2:	f003 0301 	and.w	r3, r3, #1
 800d5c6:	b2da      	uxtb	r2, r3
 800d5c8:	683b      	ldr	r3, [r7, #0]
 800d5ca:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d5d2:	0b9b      	lsrs	r3, r3, #14
 800d5d4:	b2db      	uxtb	r3, r3
 800d5d6:	f003 0301 	and.w	r3, r3, #1
 800d5da:	b2da      	uxtb	r2, r3
 800d5dc:	683b      	ldr	r3, [r7, #0]
 800d5de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d5e6:	0b5b      	lsrs	r3, r3, #13
 800d5e8:	b2db      	uxtb	r3, r3
 800d5ea:	f003 0301 	and.w	r3, r3, #1
 800d5ee:	b2da      	uxtb	r2, r3
 800d5f0:	683b      	ldr	r3, [r7, #0]
 800d5f2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d5fa:	0b1b      	lsrs	r3, r3, #12
 800d5fc:	b2db      	uxtb	r3, r3
 800d5fe:	f003 0301 	and.w	r3, r3, #1
 800d602:	b2da      	uxtb	r2, r3
 800d604:	683b      	ldr	r3, [r7, #0]
 800d606:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d60e:	0a9b      	lsrs	r3, r3, #10
 800d610:	b2db      	uxtb	r3, r3
 800d612:	f003 0303 	and.w	r3, r3, #3
 800d616:	b2da      	uxtb	r2, r3
 800d618:	683b      	ldr	r3, [r7, #0]
 800d61a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d622:	0a1b      	lsrs	r3, r3, #8
 800d624:	b2db      	uxtb	r3, r3
 800d626:	f003 0303 	and.w	r3, r3, #3
 800d62a:	b2da      	uxtb	r2, r3
 800d62c:	683b      	ldr	r3, [r7, #0]
 800d62e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d636:	085b      	lsrs	r3, r3, #1
 800d638:	b2db      	uxtb	r3, r3
 800d63a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d63e:	b2da      	uxtb	r2, r3
 800d640:	683b      	ldr	r3, [r7, #0]
 800d642:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800d646:	683b      	ldr	r3, [r7, #0]
 800d648:	2201      	movs	r2, #1
 800d64a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800d64e:	2300      	movs	r3, #0
}
 800d650:	4618      	mov	r0, r3
 800d652:	370c      	adds	r7, #12
 800d654:	46bd      	mov	sp, r7
 800d656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d65a:	4770      	bx	lr
 800d65c:	004005ff 	.word	0x004005ff

0800d660 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800d660:	b480      	push	{r7}
 800d662:	b083      	sub	sp, #12
 800d664:	af00      	add	r7, sp, #0
 800d666:	6078      	str	r0, [r7, #4]
 800d668:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d66e:	683b      	ldr	r3, [r7, #0]
 800d670:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d676:	683b      	ldr	r3, [r7, #0]
 800d678:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d67e:	683b      	ldr	r3, [r7, #0]
 800d680:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d686:	683b      	ldr	r3, [r7, #0]
 800d688:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d68e:	683b      	ldr	r3, [r7, #0]
 800d690:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d696:	683b      	ldr	r3, [r7, #0]
 800d698:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d69e:	683b      	ldr	r3, [r7, #0]
 800d6a0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800d6a6:	683b      	ldr	r3, [r7, #0]
 800d6a8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800d6aa:	2300      	movs	r3, #0
}
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	370c      	adds	r7, #12
 800d6b0:	46bd      	mov	sp, r7
 800d6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b6:	4770      	bx	lr

0800d6b8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800d6b8:	b5b0      	push	{r4, r5, r7, lr}
 800d6ba:	b08e      	sub	sp, #56	; 0x38
 800d6bc:	af04      	add	r7, sp, #16
 800d6be:	6078      	str	r0, [r7, #4]
 800d6c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	2203      	movs	r2, #3
 800d6c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d6ce:	2b03      	cmp	r3, #3
 800d6d0:	d02e      	beq.n	800d730 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800d6d2:	683b      	ldr	r3, [r7, #0]
 800d6d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d6d8:	d106      	bne.n	800d6e8 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6de:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	639a      	str	r2, [r3, #56]	; 0x38
 800d6e6:	e029      	b.n	800d73c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800d6e8:	683b      	ldr	r3, [r7, #0]
 800d6ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d6ee:	d10a      	bne.n	800d706 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800d6f0:	6878      	ldr	r0, [r7, #4]
 800d6f2:	f000 fb0d 	bl	800dd10 <SD_WideBus_Enable>
 800d6f6:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d6fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6fe:	431a      	orrs	r2, r3
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	639a      	str	r2, [r3, #56]	; 0x38
 800d704:	e01a      	b.n	800d73c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800d706:	683b      	ldr	r3, [r7, #0]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d10a      	bne.n	800d722 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800d70c:	6878      	ldr	r0, [r7, #4]
 800d70e:	f000 fb4a 	bl	800dda6 <SD_WideBus_Disable>
 800d712:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d71a:	431a      	orrs	r2, r3
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	639a      	str	r2, [r3, #56]	; 0x38
 800d720:	e00c      	b.n	800d73c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d726:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	639a      	str	r2, [r3, #56]	; 0x38
 800d72e:	e005      	b.n	800d73c <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d734:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d740:	2b00      	cmp	r3, #0
 800d742:	d009      	beq.n	800d758 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	4a18      	ldr	r2, [pc, #96]	; (800d7ac <HAL_SD_ConfigWideBusOperation+0xf4>)
 800d74a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	2201      	movs	r2, #1
 800d750:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d754:	2301      	movs	r3, #1
 800d756:	e024      	b.n	800d7a2 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	685b      	ldr	r3, [r3, #4]
 800d75c:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	689b      	ldr	r3, [r3, #8]
 800d762:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	68db      	ldr	r3, [r3, #12]
 800d768:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800d76a:	683b      	ldr	r3, [r7, #0]
 800d76c:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	695b      	ldr	r3, [r3, #20]
 800d772:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	699b      	ldr	r3, [r3, #24]
 800d778:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	681d      	ldr	r5, [r3, #0]
 800d77e:	466c      	mov	r4, sp
 800d780:	f107 0318 	add.w	r3, r7, #24
 800d784:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d788:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d78c:	f107 030c 	add.w	r3, r7, #12
 800d790:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d792:	4628      	mov	r0, r5
 800d794:	f002 fcd0 	bl	8010138 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	2201      	movs	r2, #1
 800d79c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800d7a0:	2300      	movs	r3, #0
}
 800d7a2:	4618      	mov	r0, r3
 800d7a4:	3728      	adds	r7, #40	; 0x28
 800d7a6:	46bd      	mov	sp, r7
 800d7a8:	bdb0      	pop	{r4, r5, r7, pc}
 800d7aa:	bf00      	nop
 800d7ac:	004005ff 	.word	0x004005ff

0800d7b0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	b086      	sub	sp, #24
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800d7b8:	2300      	movs	r3, #0
 800d7ba:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800d7bc:	f107 030c 	add.w	r3, r7, #12
 800d7c0:	4619      	mov	r1, r3
 800d7c2:	6878      	ldr	r0, [r7, #4]
 800d7c4:	f000 fa7c 	bl	800dcc0 <SD_SendStatus>
 800d7c8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d7ca:	697b      	ldr	r3, [r7, #20]
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d005      	beq.n	800d7dc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d7d4:	697b      	ldr	r3, [r7, #20]
 800d7d6:	431a      	orrs	r2, r3
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	0a5b      	lsrs	r3, r3, #9
 800d7e0:	f003 030f 	and.w	r3, r3, #15
 800d7e4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800d7e6:	693b      	ldr	r3, [r7, #16]
}
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	3718      	adds	r7, #24
 800d7ec:	46bd      	mov	sp, r7
 800d7ee:	bd80      	pop	{r7, pc}

0800d7f0 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d7f0:	b480      	push	{r7}
 800d7f2:	b085      	sub	sp, #20
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7fc:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d80c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800d80e:	bf00      	nop
 800d810:	3714      	adds	r7, #20
 800d812:	46bd      	mov	sp, r7
 800d814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d818:	4770      	bx	lr

0800d81a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d81a:	b580      	push	{r7, lr}
 800d81c:	b084      	sub	sp, #16
 800d81e:	af00      	add	r7, sp, #0
 800d820:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d826:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d82c:	2b82      	cmp	r3, #130	; 0x82
 800d82e:	d111      	bne.n	800d854 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	4618      	mov	r0, r3
 800d836:	f002 fe05 	bl	8010444 <SDMMC_CmdStopTransfer>
 800d83a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d83c:	68bb      	ldr	r3, [r7, #8]
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d008      	beq.n	800d854 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d846:	68bb      	ldr	r3, [r7, #8]
 800d848:	431a      	orrs	r2, r3
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800d84e:	68f8      	ldr	r0, [r7, #12]
 800d850:	f7ff fd58 	bl	800d304 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	f022 0208 	bic.w	r2, r2, #8
 800d862:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	f240 523a 	movw	r2, #1338	; 0x53a
 800d86c:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	2201      	movs	r2, #1
 800d872:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	2200      	movs	r2, #0
 800d87a:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800d87c:	68f8      	ldr	r0, [r7, #12]
 800d87e:	f003 fa5d 	bl	8010d3c <HAL_SD_RxCpltCallback>
#endif
}
 800d882:	bf00      	nop
 800d884:	3710      	adds	r7, #16
 800d886:	46bd      	mov	sp, r7
 800d888:	bd80      	pop	{r7, pc}
	...

0800d88c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800d88c:	b580      	push	{r7, lr}
 800d88e:	b086      	sub	sp, #24
 800d890:	af00      	add	r7, sp, #0
 800d892:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d898:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800d89a:	6878      	ldr	r0, [r7, #4]
 800d89c:	f7fd f82e 	bl	800a8fc <HAL_DMA_GetError>
 800d8a0:	4603      	mov	r3, r0
 800d8a2:	2b02      	cmp	r3, #2
 800d8a4:	d03e      	beq.n	800d924 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800d8a6:	697b      	ldr	r3, [r7, #20]
 800d8a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d8ac:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800d8ae:	697b      	ldr	r3, [r7, #20]
 800d8b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d8b4:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800d8b6:	693b      	ldr	r3, [r7, #16]
 800d8b8:	2b01      	cmp	r3, #1
 800d8ba:	d002      	beq.n	800d8c2 <SD_DMAError+0x36>
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	2b01      	cmp	r3, #1
 800d8c0:	d12d      	bne.n	800d91e <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d8c2:	697b      	ldr	r3, [r7, #20]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	4a19      	ldr	r2, [pc, #100]	; (800d92c <SD_DMAError+0xa0>)
 800d8c8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800d8ca:	697b      	ldr	r3, [r7, #20]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d8d0:	697b      	ldr	r3, [r7, #20]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800d8d8:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d8da:	697b      	ldr	r3, [r7, #20]
 800d8dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8de:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d8e2:	697b      	ldr	r3, [r7, #20]
 800d8e4:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800d8e6:	6978      	ldr	r0, [r7, #20]
 800d8e8:	f7ff ff62 	bl	800d7b0 <HAL_SD_GetCardState>
 800d8ec:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800d8ee:	68bb      	ldr	r3, [r7, #8]
 800d8f0:	2b06      	cmp	r3, #6
 800d8f2:	d002      	beq.n	800d8fa <SD_DMAError+0x6e>
 800d8f4:	68bb      	ldr	r3, [r7, #8]
 800d8f6:	2b05      	cmp	r3, #5
 800d8f8:	d10a      	bne.n	800d910 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d8fa:	697b      	ldr	r3, [r7, #20]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	4618      	mov	r0, r3
 800d900:	f002 fda0 	bl	8010444 <SDMMC_CmdStopTransfer>
 800d904:	4602      	mov	r2, r0
 800d906:	697b      	ldr	r3, [r7, #20]
 800d908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d90a:	431a      	orrs	r2, r3
 800d90c:	697b      	ldr	r3, [r7, #20]
 800d90e:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800d910:	697b      	ldr	r3, [r7, #20]
 800d912:	2201      	movs	r2, #1
 800d914:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d918:	697b      	ldr	r3, [r7, #20]
 800d91a:	2200      	movs	r2, #0
 800d91c:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800d91e:	6978      	ldr	r0, [r7, #20]
 800d920:	f7ff fcf0 	bl	800d304 <HAL_SD_ErrorCallback>
#endif
  }
}
 800d924:	bf00      	nop
 800d926:	3718      	adds	r7, #24
 800d928:	46bd      	mov	sp, r7
 800d92a:	bd80      	pop	{r7, pc}
 800d92c:	004005ff 	.word	0x004005ff

0800d930 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800d930:	b580      	push	{r7, lr}
 800d932:	b084      	sub	sp, #16
 800d934:	af00      	add	r7, sp, #0
 800d936:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d93c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	f240 523a 	movw	r2, #1338	; 0x53a
 800d946:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800d948:	68f8      	ldr	r0, [r7, #12]
 800d94a:	f7ff ff31 	bl	800d7b0 <HAL_SD_GetCardState>
 800d94e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	2201      	movs	r2, #1
 800d954:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	2200      	movs	r2, #0
 800d95c:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800d95e:	68bb      	ldr	r3, [r7, #8]
 800d960:	2b06      	cmp	r3, #6
 800d962:	d002      	beq.n	800d96a <SD_DMATxAbort+0x3a>
 800d964:	68bb      	ldr	r3, [r7, #8]
 800d966:	2b05      	cmp	r3, #5
 800d968:	d10a      	bne.n	800d980 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	4618      	mov	r0, r3
 800d970:	f002 fd68 	bl	8010444 <SDMMC_CmdStopTransfer>
 800d974:	4602      	mov	r2, r0
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d97a:	431a      	orrs	r2, r3
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d984:	2b00      	cmp	r3, #0
 800d986:	d103      	bne.n	800d990 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800d988:	68f8      	ldr	r0, [r7, #12]
 800d98a:	f003 f9c3 	bl	8010d14 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800d98e:	e002      	b.n	800d996 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800d990:	68f8      	ldr	r0, [r7, #12]
 800d992:	f7ff fcb7 	bl	800d304 <HAL_SD_ErrorCallback>
}
 800d996:	bf00      	nop
 800d998:	3710      	adds	r7, #16
 800d99a:	46bd      	mov	sp, r7
 800d99c:	bd80      	pop	{r7, pc}

0800d99e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800d99e:	b580      	push	{r7, lr}
 800d9a0:	b084      	sub	sp, #16
 800d9a2:	af00      	add	r7, sp, #0
 800d9a4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9aa:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	f240 523a 	movw	r2, #1338	; 0x53a
 800d9b4:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800d9b6:	68f8      	ldr	r0, [r7, #12]
 800d9b8:	f7ff fefa 	bl	800d7b0 <HAL_SD_GetCardState>
 800d9bc:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	2201      	movs	r2, #1
 800d9c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	2200      	movs	r2, #0
 800d9ca:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800d9cc:	68bb      	ldr	r3, [r7, #8]
 800d9ce:	2b06      	cmp	r3, #6
 800d9d0:	d002      	beq.n	800d9d8 <SD_DMARxAbort+0x3a>
 800d9d2:	68bb      	ldr	r3, [r7, #8]
 800d9d4:	2b05      	cmp	r3, #5
 800d9d6:	d10a      	bne.n	800d9ee <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	4618      	mov	r0, r3
 800d9de:	f002 fd31 	bl	8010444 <SDMMC_CmdStopTransfer>
 800d9e2:	4602      	mov	r2, r0
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9e8:	431a      	orrs	r2, r3
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d103      	bne.n	800d9fe <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800d9f6:	68f8      	ldr	r0, [r7, #12]
 800d9f8:	f003 f98c 	bl	8010d14 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800d9fc:	e002      	b.n	800da04 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800d9fe:	68f8      	ldr	r0, [r7, #12]
 800da00:	f7ff fc80 	bl	800d304 <HAL_SD_ErrorCallback>
}
 800da04:	bf00      	nop
 800da06:	3710      	adds	r7, #16
 800da08:	46bd      	mov	sp, r7
 800da0a:	bd80      	pop	{r7, pc}

0800da0c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800da0c:	b5b0      	push	{r4, r5, r7, lr}
 800da0e:	b094      	sub	sp, #80	; 0x50
 800da10:	af04      	add	r7, sp, #16
 800da12:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800da14:	2301      	movs	r3, #1
 800da16:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	4618      	mov	r0, r3
 800da1e:	f002 fbe3 	bl	80101e8 <SDIO_GetPowerState>
 800da22:	4603      	mov	r3, r0
 800da24:	2b00      	cmp	r3, #0
 800da26:	d102      	bne.n	800da2e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800da28:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800da2c:	e0b6      	b.n	800db9c <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da32:	2b03      	cmp	r3, #3
 800da34:	d02f      	beq.n	800da96 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	4618      	mov	r0, r3
 800da3c:	f002 fe0c 	bl	8010658 <SDMMC_CmdSendCID>
 800da40:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800da42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da44:	2b00      	cmp	r3, #0
 800da46:	d001      	beq.n	800da4c <SD_InitCard+0x40>
    {
      return errorstate;
 800da48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da4a:	e0a7      	b.n	800db9c <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	2100      	movs	r1, #0
 800da52:	4618      	mov	r0, r3
 800da54:	f002 fc0d 	bl	8010272 <SDIO_GetResponse>
 800da58:	4602      	mov	r2, r0
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	2104      	movs	r1, #4
 800da64:	4618      	mov	r0, r3
 800da66:	f002 fc04 	bl	8010272 <SDIO_GetResponse>
 800da6a:	4602      	mov	r2, r0
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	2108      	movs	r1, #8
 800da76:	4618      	mov	r0, r3
 800da78:	f002 fbfb 	bl	8010272 <SDIO_GetResponse>
 800da7c:	4602      	mov	r2, r0
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	210c      	movs	r1, #12
 800da88:	4618      	mov	r0, r3
 800da8a:	f002 fbf2 	bl	8010272 <SDIO_GetResponse>
 800da8e:	4602      	mov	r2, r0
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da9a:	2b03      	cmp	r3, #3
 800da9c:	d00d      	beq.n	800daba <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	f107 020e 	add.w	r2, r7, #14
 800daa6:	4611      	mov	r1, r2
 800daa8:	4618      	mov	r0, r3
 800daaa:	f002 fe12 	bl	80106d2 <SDMMC_CmdSetRelAdd>
 800daae:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800dab0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d001      	beq.n	800daba <SD_InitCard+0xae>
    {
      return errorstate;
 800dab6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dab8:	e070      	b.n	800db9c <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dabe:	2b03      	cmp	r3, #3
 800dac0:	d036      	beq.n	800db30 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800dac2:	89fb      	ldrh	r3, [r7, #14]
 800dac4:	461a      	mov	r2, r3
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	681a      	ldr	r2, [r3, #0]
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dad2:	041b      	lsls	r3, r3, #16
 800dad4:	4619      	mov	r1, r3
 800dad6:	4610      	mov	r0, r2
 800dad8:	f002 fddc 	bl	8010694 <SDMMC_CmdSendCSD>
 800dadc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800dade:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d001      	beq.n	800dae8 <SD_InitCard+0xdc>
    {
      return errorstate;
 800dae4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dae6:	e059      	b.n	800db9c <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	2100      	movs	r1, #0
 800daee:	4618      	mov	r0, r3
 800daf0:	f002 fbbf 	bl	8010272 <SDIO_GetResponse>
 800daf4:	4602      	mov	r2, r0
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	2104      	movs	r1, #4
 800db00:	4618      	mov	r0, r3
 800db02:	f002 fbb6 	bl	8010272 <SDIO_GetResponse>
 800db06:	4602      	mov	r2, r0
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	2108      	movs	r1, #8
 800db12:	4618      	mov	r0, r3
 800db14:	f002 fbad 	bl	8010272 <SDIO_GetResponse>
 800db18:	4602      	mov	r2, r0
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	210c      	movs	r1, #12
 800db24:	4618      	mov	r0, r3
 800db26:	f002 fba4 	bl	8010272 <SDIO_GetResponse>
 800db2a:	4602      	mov	r2, r0
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	2104      	movs	r1, #4
 800db36:	4618      	mov	r0, r3
 800db38:	f002 fb9b 	bl	8010272 <SDIO_GetResponse>
 800db3c:	4603      	mov	r3, r0
 800db3e:	0d1a      	lsrs	r2, r3, #20
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800db44:	f107 0310 	add.w	r3, r7, #16
 800db48:	4619      	mov	r1, r3
 800db4a:	6878      	ldr	r0, [r7, #4]
 800db4c:	f7ff fbe4 	bl	800d318 <HAL_SD_GetCardCSD>
 800db50:	4603      	mov	r3, r0
 800db52:	2b00      	cmp	r3, #0
 800db54:	d002      	beq.n	800db5c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800db56:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800db5a:	e01f      	b.n	800db9c <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	6819      	ldr	r1, [r3, #0]
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800db64:	041b      	lsls	r3, r3, #16
 800db66:	461a      	mov	r2, r3
 800db68:	f04f 0300 	mov.w	r3, #0
 800db6c:	4608      	mov	r0, r1
 800db6e:	f002 fc8b 	bl	8010488 <SDMMC_CmdSelDesel>
 800db72:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800db74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db76:	2b00      	cmp	r3, #0
 800db78:	d001      	beq.n	800db7e <SD_InitCard+0x172>
  {
    return errorstate;
 800db7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db7c:	e00e      	b.n	800db9c <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	681d      	ldr	r5, [r3, #0]
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	466c      	mov	r4, sp
 800db86:	f103 0210 	add.w	r2, r3, #16
 800db8a:	ca07      	ldmia	r2, {r0, r1, r2}
 800db8c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800db90:	3304      	adds	r3, #4
 800db92:	cb0e      	ldmia	r3, {r1, r2, r3}
 800db94:	4628      	mov	r0, r5
 800db96:	f002 facf 	bl	8010138 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800db9a:	2300      	movs	r3, #0
}
 800db9c:	4618      	mov	r0, r3
 800db9e:	3740      	adds	r7, #64	; 0x40
 800dba0:	46bd      	mov	sp, r7
 800dba2:	bdb0      	pop	{r4, r5, r7, pc}

0800dba4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800dba4:	b580      	push	{r7, lr}
 800dba6:	b086      	sub	sp, #24
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800dbac:	2300      	movs	r3, #0
 800dbae:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800dbb0:	2300      	movs	r3, #0
 800dbb2:	617b      	str	r3, [r7, #20]
 800dbb4:	2300      	movs	r3, #0
 800dbb6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	4618      	mov	r0, r3
 800dbbe:	f002 fc86 	bl	80104ce <SDMMC_CmdGoIdleState>
 800dbc2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d001      	beq.n	800dbce <SD_PowerON+0x2a>
  {
    return errorstate;
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	e072      	b.n	800dcb4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	4618      	mov	r0, r3
 800dbd4:	f002 fc99 	bl	801050a <SDMMC_CmdOperCond>
 800dbd8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d00d      	beq.n	800dbfc <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	2200      	movs	r2, #0
 800dbe4:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	4618      	mov	r0, r3
 800dbec:	f002 fc6f 	bl	80104ce <SDMMC_CmdGoIdleState>
 800dbf0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d004      	beq.n	800dc02 <SD_PowerON+0x5e>
    {
      return errorstate;
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	e05b      	b.n	800dcb4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	2201      	movs	r2, #1
 800dc00:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dc06:	2b01      	cmp	r3, #1
 800dc08:	d137      	bne.n	800dc7a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	2100      	movs	r1, #0
 800dc10:	4618      	mov	r0, r3
 800dc12:	f002 fc99 	bl	8010548 <SDMMC_CmdAppCommand>
 800dc16:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d02d      	beq.n	800dc7a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dc1e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800dc22:	e047      	b.n	800dcb4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	2100      	movs	r1, #0
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	f002 fc8c 	bl	8010548 <SDMMC_CmdAppCommand>
 800dc30:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d001      	beq.n	800dc3c <SD_PowerON+0x98>
    {
      return errorstate;
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	e03b      	b.n	800dcb4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	491e      	ldr	r1, [pc, #120]	; (800dcbc <SD_PowerON+0x118>)
 800dc42:	4618      	mov	r0, r3
 800dc44:	f002 fca2 	bl	801058c <SDMMC_CmdAppOperCommand>
 800dc48:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d002      	beq.n	800dc56 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dc50:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800dc54:	e02e      	b.n	800dcb4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	2100      	movs	r1, #0
 800dc5c:	4618      	mov	r0, r3
 800dc5e:	f002 fb08 	bl	8010272 <SDIO_GetResponse>
 800dc62:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800dc64:	697b      	ldr	r3, [r7, #20]
 800dc66:	0fdb      	lsrs	r3, r3, #31
 800dc68:	2b01      	cmp	r3, #1
 800dc6a:	d101      	bne.n	800dc70 <SD_PowerON+0xcc>
 800dc6c:	2301      	movs	r3, #1
 800dc6e:	e000      	b.n	800dc72 <SD_PowerON+0xce>
 800dc70:	2300      	movs	r3, #0
 800dc72:	613b      	str	r3, [r7, #16]

    count++;
 800dc74:	68bb      	ldr	r3, [r7, #8]
 800dc76:	3301      	adds	r3, #1
 800dc78:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800dc7a:	68bb      	ldr	r3, [r7, #8]
 800dc7c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800dc80:	4293      	cmp	r3, r2
 800dc82:	d802      	bhi.n	800dc8a <SD_PowerON+0xe6>
 800dc84:	693b      	ldr	r3, [r7, #16]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d0cc      	beq.n	800dc24 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800dc8a:	68bb      	ldr	r3, [r7, #8]
 800dc8c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800dc90:	4293      	cmp	r3, r2
 800dc92:	d902      	bls.n	800dc9a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800dc94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800dc98:	e00c      	b.n	800dcb4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800dc9a:	697b      	ldr	r3, [r7, #20]
 800dc9c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d003      	beq.n	800dcac <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	2201      	movs	r2, #1
 800dca8:	645a      	str	r2, [r3, #68]	; 0x44
 800dcaa:	e002      	b.n	800dcb2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	2200      	movs	r2, #0
 800dcb0:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800dcb2:	2300      	movs	r3, #0
}
 800dcb4:	4618      	mov	r0, r3
 800dcb6:	3718      	adds	r7, #24
 800dcb8:	46bd      	mov	sp, r7
 800dcba:	bd80      	pop	{r7, pc}
 800dcbc:	c1100000 	.word	0xc1100000

0800dcc0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800dcc0:	b580      	push	{r7, lr}
 800dcc2:	b084      	sub	sp, #16
 800dcc4:	af00      	add	r7, sp, #0
 800dcc6:	6078      	str	r0, [r7, #4]
 800dcc8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800dcca:	683b      	ldr	r3, [r7, #0]
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d102      	bne.n	800dcd6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800dcd0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800dcd4:	e018      	b.n	800dd08 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	681a      	ldr	r2, [r3, #0]
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dcde:	041b      	lsls	r3, r3, #16
 800dce0:	4619      	mov	r1, r3
 800dce2:	4610      	mov	r0, r2
 800dce4:	f002 fd16 	bl	8010714 <SDMMC_CmdSendStatus>
 800dce8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d001      	beq.n	800dcf4 <SD_SendStatus+0x34>
  {
    return errorstate;
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	e009      	b.n	800dd08 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	2100      	movs	r1, #0
 800dcfa:	4618      	mov	r0, r3
 800dcfc:	f002 fab9 	bl	8010272 <SDIO_GetResponse>
 800dd00:	4602      	mov	r2, r0
 800dd02:	683b      	ldr	r3, [r7, #0]
 800dd04:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800dd06:	2300      	movs	r3, #0
}
 800dd08:	4618      	mov	r0, r3
 800dd0a:	3710      	adds	r7, #16
 800dd0c:	46bd      	mov	sp, r7
 800dd0e:	bd80      	pop	{r7, pc}

0800dd10 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800dd10:	b580      	push	{r7, lr}
 800dd12:	b086      	sub	sp, #24
 800dd14:	af00      	add	r7, sp, #0
 800dd16:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800dd18:	2300      	movs	r3, #0
 800dd1a:	60fb      	str	r3, [r7, #12]
 800dd1c:	2300      	movs	r3, #0
 800dd1e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	2100      	movs	r1, #0
 800dd26:	4618      	mov	r0, r3
 800dd28:	f002 faa3 	bl	8010272 <SDIO_GetResponse>
 800dd2c:	4603      	mov	r3, r0
 800dd2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dd32:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800dd36:	d102      	bne.n	800dd3e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800dd38:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800dd3c:	e02f      	b.n	800dd9e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800dd3e:	f107 030c 	add.w	r3, r7, #12
 800dd42:	4619      	mov	r1, r3
 800dd44:	6878      	ldr	r0, [r7, #4]
 800dd46:	f000 f879 	bl	800de3c <SD_FindSCR>
 800dd4a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dd4c:	697b      	ldr	r3, [r7, #20]
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d001      	beq.n	800dd56 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800dd52:	697b      	ldr	r3, [r7, #20]
 800dd54:	e023      	b.n	800dd9e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800dd56:	693b      	ldr	r3, [r7, #16]
 800dd58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d01c      	beq.n	800dd9a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	681a      	ldr	r2, [r3, #0]
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd68:	041b      	lsls	r3, r3, #16
 800dd6a:	4619      	mov	r1, r3
 800dd6c:	4610      	mov	r0, r2
 800dd6e:	f002 fbeb 	bl	8010548 <SDMMC_CmdAppCommand>
 800dd72:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dd74:	697b      	ldr	r3, [r7, #20]
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d001      	beq.n	800dd7e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800dd7a:	697b      	ldr	r3, [r7, #20]
 800dd7c:	e00f      	b.n	800dd9e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	2102      	movs	r1, #2
 800dd84:	4618      	mov	r0, r3
 800dd86:	f002 fc24 	bl	80105d2 <SDMMC_CmdBusWidth>
 800dd8a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dd8c:	697b      	ldr	r3, [r7, #20]
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d001      	beq.n	800dd96 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800dd92:	697b      	ldr	r3, [r7, #20]
 800dd94:	e003      	b.n	800dd9e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800dd96:	2300      	movs	r3, #0
 800dd98:	e001      	b.n	800dd9e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800dd9a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800dd9e:	4618      	mov	r0, r3
 800dda0:	3718      	adds	r7, #24
 800dda2:	46bd      	mov	sp, r7
 800dda4:	bd80      	pop	{r7, pc}

0800dda6 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800dda6:	b580      	push	{r7, lr}
 800dda8:	b086      	sub	sp, #24
 800ddaa:	af00      	add	r7, sp, #0
 800ddac:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800ddae:	2300      	movs	r3, #0
 800ddb0:	60fb      	str	r3, [r7, #12]
 800ddb2:	2300      	movs	r3, #0
 800ddb4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	2100      	movs	r1, #0
 800ddbc:	4618      	mov	r0, r3
 800ddbe:	f002 fa58 	bl	8010272 <SDIO_GetResponse>
 800ddc2:	4603      	mov	r3, r0
 800ddc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ddc8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ddcc:	d102      	bne.n	800ddd4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ddce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ddd2:	e02f      	b.n	800de34 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800ddd4:	f107 030c 	add.w	r3, r7, #12
 800ddd8:	4619      	mov	r1, r3
 800ddda:	6878      	ldr	r0, [r7, #4]
 800dddc:	f000 f82e 	bl	800de3c <SD_FindSCR>
 800dde0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dde2:	697b      	ldr	r3, [r7, #20]
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d001      	beq.n	800ddec <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800dde8:	697b      	ldr	r3, [r7, #20]
 800ddea:	e023      	b.n	800de34 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800ddec:	693b      	ldr	r3, [r7, #16]
 800ddee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d01c      	beq.n	800de30 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	681a      	ldr	r2, [r3, #0]
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ddfe:	041b      	lsls	r3, r3, #16
 800de00:	4619      	mov	r1, r3
 800de02:	4610      	mov	r0, r2
 800de04:	f002 fba0 	bl	8010548 <SDMMC_CmdAppCommand>
 800de08:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800de0a:	697b      	ldr	r3, [r7, #20]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d001      	beq.n	800de14 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800de10:	697b      	ldr	r3, [r7, #20]
 800de12:	e00f      	b.n	800de34 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	2100      	movs	r1, #0
 800de1a:	4618      	mov	r0, r3
 800de1c:	f002 fbd9 	bl	80105d2 <SDMMC_CmdBusWidth>
 800de20:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800de22:	697b      	ldr	r3, [r7, #20]
 800de24:	2b00      	cmp	r3, #0
 800de26:	d001      	beq.n	800de2c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800de28:	697b      	ldr	r3, [r7, #20]
 800de2a:	e003      	b.n	800de34 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800de2c:	2300      	movs	r3, #0
 800de2e:	e001      	b.n	800de34 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800de30:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800de34:	4618      	mov	r0, r3
 800de36:	3718      	adds	r7, #24
 800de38:	46bd      	mov	sp, r7
 800de3a:	bd80      	pop	{r7, pc}

0800de3c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800de3c:	b590      	push	{r4, r7, lr}
 800de3e:	b08f      	sub	sp, #60	; 0x3c
 800de40:	af00      	add	r7, sp, #0
 800de42:	6078      	str	r0, [r7, #4]
 800de44:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800de46:	f7fb fd61 	bl	800990c <HAL_GetTick>
 800de4a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800de4c:	2300      	movs	r3, #0
 800de4e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800de50:	2300      	movs	r3, #0
 800de52:	60bb      	str	r3, [r7, #8]
 800de54:	2300      	movs	r3, #0
 800de56:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800de58:	683b      	ldr	r3, [r7, #0]
 800de5a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	2108      	movs	r1, #8
 800de62:	4618      	mov	r0, r3
 800de64:	f002 fa44 	bl	80102f0 <SDMMC_CmdBlockLength>
 800de68:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800de6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d001      	beq.n	800de74 <SD_FindSCR+0x38>
  {
    return errorstate;
 800de70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de72:	e0a9      	b.n	800dfc8 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	681a      	ldr	r2, [r3, #0]
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800de7c:	041b      	lsls	r3, r3, #16
 800de7e:	4619      	mov	r1, r3
 800de80:	4610      	mov	r0, r2
 800de82:	f002 fb61 	bl	8010548 <SDMMC_CmdAppCommand>
 800de86:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800de88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d001      	beq.n	800de92 <SD_FindSCR+0x56>
  {
    return errorstate;
 800de8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de90:	e09a      	b.n	800dfc8 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800de92:	f04f 33ff 	mov.w	r3, #4294967295
 800de96:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800de98:	2308      	movs	r3, #8
 800de9a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800de9c:	2330      	movs	r3, #48	; 0x30
 800de9e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800dea0:	2302      	movs	r3, #2
 800dea2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800dea4:	2300      	movs	r3, #0
 800dea6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800dea8:	2301      	movs	r3, #1
 800deaa:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	f107 0210 	add.w	r2, r7, #16
 800deb4:	4611      	mov	r1, r2
 800deb6:	4618      	mov	r0, r3
 800deb8:	f002 f9ee 	bl	8010298 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	4618      	mov	r0, r3
 800dec2:	f002 fba8 	bl	8010616 <SDMMC_CmdSendSCR>
 800dec6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800dec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deca:	2b00      	cmp	r3, #0
 800decc:	d022      	beq.n	800df14 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800dece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ded0:	e07a      	b.n	800dfc8 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ded8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d00e      	beq.n	800defe <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	6819      	ldr	r1, [r3, #0]
 800dee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dee6:	009b      	lsls	r3, r3, #2
 800dee8:	f107 0208 	add.w	r2, r7, #8
 800deec:	18d4      	adds	r4, r2, r3
 800deee:	4608      	mov	r0, r1
 800def0:	f002 f94d 	bl	801018e <SDIO_ReadFIFO>
 800def4:	4603      	mov	r3, r0
 800def6:	6023      	str	r3, [r4, #0]
      index++;
 800def8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800defa:	3301      	adds	r3, #1
 800defc:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800defe:	f7fb fd05 	bl	800990c <HAL_GetTick>
 800df02:	4602      	mov	r2, r0
 800df04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df06:	1ad3      	subs	r3, r2, r3
 800df08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df0c:	d102      	bne.n	800df14 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800df0e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800df12:	e059      	b.n	800dfc8 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800df1a:	f240 432a 	movw	r3, #1066	; 0x42a
 800df1e:	4013      	ands	r3, r2
 800df20:	2b00      	cmp	r3, #0
 800df22:	d0d6      	beq.n	800ded2 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df2a:	f003 0308 	and.w	r3, r3, #8
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d005      	beq.n	800df3e <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	2208      	movs	r2, #8
 800df38:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800df3a:	2308      	movs	r3, #8
 800df3c:	e044      	b.n	800dfc8 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df44:	f003 0302 	and.w	r3, r3, #2
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d005      	beq.n	800df58 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	2202      	movs	r2, #2
 800df52:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800df54:	2302      	movs	r3, #2
 800df56:	e037      	b.n	800dfc8 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df5e:	f003 0320 	and.w	r3, r3, #32
 800df62:	2b00      	cmp	r3, #0
 800df64:	d005      	beq.n	800df72 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	2220      	movs	r2, #32
 800df6c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800df6e:	2320      	movs	r3, #32
 800df70:	e02a      	b.n	800dfc8 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	f240 523a 	movw	r2, #1338	; 0x53a
 800df7a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	061a      	lsls	r2, r3, #24
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	021b      	lsls	r3, r3, #8
 800df84:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800df88:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	0a1b      	lsrs	r3, r3, #8
 800df8e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800df92:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	0e1b      	lsrs	r3, r3, #24
 800df98:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800df9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df9c:	601a      	str	r2, [r3, #0]
    scr++;
 800df9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfa0:	3304      	adds	r3, #4
 800dfa2:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800dfa4:	68bb      	ldr	r3, [r7, #8]
 800dfa6:	061a      	lsls	r2, r3, #24
 800dfa8:	68bb      	ldr	r3, [r7, #8]
 800dfaa:	021b      	lsls	r3, r3, #8
 800dfac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800dfb0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800dfb2:	68bb      	ldr	r3, [r7, #8]
 800dfb4:	0a1b      	lsrs	r3, r3, #8
 800dfb6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800dfba:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800dfbc:	68bb      	ldr	r3, [r7, #8]
 800dfbe:	0e1b      	lsrs	r3, r3, #24
 800dfc0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800dfc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfc4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800dfc6:	2300      	movs	r3, #0
}
 800dfc8:	4618      	mov	r0, r3
 800dfca:	373c      	adds	r7, #60	; 0x3c
 800dfcc:	46bd      	mov	sp, r7
 800dfce:	bd90      	pop	{r4, r7, pc}

0800dfd0 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800dfd0:	b580      	push	{r7, lr}
 800dfd2:	b086      	sub	sp, #24
 800dfd4:	af00      	add	r7, sp, #0
 800dfd6:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfdc:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfe2:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800dfe4:	693b      	ldr	r3, [r7, #16]
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d03f      	beq.n	800e06a <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800dfea:	2300      	movs	r3, #0
 800dfec:	617b      	str	r3, [r7, #20]
 800dfee:	e033      	b.n	800e058 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	4618      	mov	r0, r3
 800dff6:	f002 f8ca 	bl	801018e <SDIO_ReadFIFO>
 800dffa:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800dffc:	68bb      	ldr	r3, [r7, #8]
 800dffe:	b2da      	uxtb	r2, r3
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	3301      	adds	r3, #1
 800e008:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e00a:	693b      	ldr	r3, [r7, #16]
 800e00c:	3b01      	subs	r3, #1
 800e00e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800e010:	68bb      	ldr	r3, [r7, #8]
 800e012:	0a1b      	lsrs	r3, r3, #8
 800e014:	b2da      	uxtb	r2, r3
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	3301      	adds	r3, #1
 800e01e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e020:	693b      	ldr	r3, [r7, #16]
 800e022:	3b01      	subs	r3, #1
 800e024:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800e026:	68bb      	ldr	r3, [r7, #8]
 800e028:	0c1b      	lsrs	r3, r3, #16
 800e02a:	b2da      	uxtb	r2, r3
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	3301      	adds	r3, #1
 800e034:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e036:	693b      	ldr	r3, [r7, #16]
 800e038:	3b01      	subs	r3, #1
 800e03a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800e03c:	68bb      	ldr	r3, [r7, #8]
 800e03e:	0e1b      	lsrs	r3, r3, #24
 800e040:	b2da      	uxtb	r2, r3
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	3301      	adds	r3, #1
 800e04a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e04c:	693b      	ldr	r3, [r7, #16]
 800e04e:	3b01      	subs	r3, #1
 800e050:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800e052:	697b      	ldr	r3, [r7, #20]
 800e054:	3301      	adds	r3, #1
 800e056:	617b      	str	r3, [r7, #20]
 800e058:	697b      	ldr	r3, [r7, #20]
 800e05a:	2b07      	cmp	r3, #7
 800e05c:	d9c8      	bls.n	800dff0 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	68fa      	ldr	r2, [r7, #12]
 800e062:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	693a      	ldr	r2, [r7, #16]
 800e068:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800e06a:	bf00      	nop
 800e06c:	3718      	adds	r7, #24
 800e06e:	46bd      	mov	sp, r7
 800e070:	bd80      	pop	{r7, pc}

0800e072 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800e072:	b580      	push	{r7, lr}
 800e074:	b086      	sub	sp, #24
 800e076:	af00      	add	r7, sp, #0
 800e078:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	6a1b      	ldr	r3, [r3, #32]
 800e07e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e084:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800e086:	693b      	ldr	r3, [r7, #16]
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d043      	beq.n	800e114 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800e08c:	2300      	movs	r3, #0
 800e08e:	617b      	str	r3, [r7, #20]
 800e090:	e037      	b.n	800e102 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	781b      	ldrb	r3, [r3, #0]
 800e096:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	3301      	adds	r3, #1
 800e09c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e09e:	693b      	ldr	r3, [r7, #16]
 800e0a0:	3b01      	subs	r3, #1
 800e0a2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	781b      	ldrb	r3, [r3, #0]
 800e0a8:	021a      	lsls	r2, r3, #8
 800e0aa:	68bb      	ldr	r3, [r7, #8]
 800e0ac:	4313      	orrs	r3, r2
 800e0ae:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	3301      	adds	r3, #1
 800e0b4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e0b6:	693b      	ldr	r3, [r7, #16]
 800e0b8:	3b01      	subs	r3, #1
 800e0ba:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	781b      	ldrb	r3, [r3, #0]
 800e0c0:	041a      	lsls	r2, r3, #16
 800e0c2:	68bb      	ldr	r3, [r7, #8]
 800e0c4:	4313      	orrs	r3, r2
 800e0c6:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	3301      	adds	r3, #1
 800e0cc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e0ce:	693b      	ldr	r3, [r7, #16]
 800e0d0:	3b01      	subs	r3, #1
 800e0d2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	781b      	ldrb	r3, [r3, #0]
 800e0d8:	061a      	lsls	r2, r3, #24
 800e0da:	68bb      	ldr	r3, [r7, #8]
 800e0dc:	4313      	orrs	r3, r2
 800e0de:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	3301      	adds	r3, #1
 800e0e4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e0e6:	693b      	ldr	r3, [r7, #16]
 800e0e8:	3b01      	subs	r3, #1
 800e0ea:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	f107 0208 	add.w	r2, r7, #8
 800e0f4:	4611      	mov	r1, r2
 800e0f6:	4618      	mov	r0, r3
 800e0f8:	f002 f856 	bl	80101a8 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800e0fc:	697b      	ldr	r3, [r7, #20]
 800e0fe:	3301      	adds	r3, #1
 800e100:	617b      	str	r3, [r7, #20]
 800e102:	697b      	ldr	r3, [r7, #20]
 800e104:	2b07      	cmp	r3, #7
 800e106:	d9c4      	bls.n	800e092 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	68fa      	ldr	r2, [r7, #12]
 800e10c:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	693a      	ldr	r2, [r7, #16]
 800e112:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800e114:	bf00      	nop
 800e116:	3718      	adds	r7, #24
 800e118:	46bd      	mov	sp, r7
 800e11a:	bd80      	pop	{r7, pc}

0800e11c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e11c:	b580      	push	{r7, lr}
 800e11e:	b082      	sub	sp, #8
 800e120:	af00      	add	r7, sp, #0
 800e122:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	2b00      	cmp	r3, #0
 800e128:	d101      	bne.n	800e12e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e12a:	2301      	movs	r3, #1
 800e12c:	e056      	b.n	800e1dc <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	2200      	movs	r2, #0
 800e132:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e13a:	b2db      	uxtb	r3, r3
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d106      	bne.n	800e14e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	2200      	movs	r2, #0
 800e144:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e148:	6878      	ldr	r0, [r7, #4]
 800e14a:	f7f8 fee3 	bl	8006f14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	2202      	movs	r2, #2
 800e152:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	681a      	ldr	r2, [r3, #0]
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e164:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	685a      	ldr	r2, [r3, #4]
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	689b      	ldr	r3, [r3, #8]
 800e16e:	431a      	orrs	r2, r3
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	68db      	ldr	r3, [r3, #12]
 800e174:	431a      	orrs	r2, r3
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	691b      	ldr	r3, [r3, #16]
 800e17a:	431a      	orrs	r2, r3
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	695b      	ldr	r3, [r3, #20]
 800e180:	431a      	orrs	r2, r3
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	699b      	ldr	r3, [r3, #24]
 800e186:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e18a:	431a      	orrs	r2, r3
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	69db      	ldr	r3, [r3, #28]
 800e190:	431a      	orrs	r2, r3
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	6a1b      	ldr	r3, [r3, #32]
 800e196:	ea42 0103 	orr.w	r1, r2, r3
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	430a      	orrs	r2, r1
 800e1a4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	699b      	ldr	r3, [r3, #24]
 800e1aa:	0c1b      	lsrs	r3, r3, #16
 800e1ac:	f003 0104 	and.w	r1, r3, #4
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	430a      	orrs	r2, r1
 800e1ba:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	69da      	ldr	r2, [r3, #28]
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e1ca:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	2200      	movs	r2, #0
 800e1d0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	2201      	movs	r2, #1
 800e1d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800e1da:	2300      	movs	r3, #0
}
 800e1dc:	4618      	mov	r0, r3
 800e1de:	3708      	adds	r7, #8
 800e1e0:	46bd      	mov	sp, r7
 800e1e2:	bd80      	pop	{r7, pc}

0800e1e4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e1e4:	b580      	push	{r7, lr}
 800e1e6:	b088      	sub	sp, #32
 800e1e8:	af00      	add	r7, sp, #0
 800e1ea:	60f8      	str	r0, [r7, #12]
 800e1ec:	60b9      	str	r1, [r7, #8]
 800e1ee:	603b      	str	r3, [r7, #0]
 800e1f0:	4613      	mov	r3, r2
 800e1f2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e1f4:	2300      	movs	r3, #0
 800e1f6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e1fe:	2b01      	cmp	r3, #1
 800e200:	d101      	bne.n	800e206 <HAL_SPI_Transmit+0x22>
 800e202:	2302      	movs	r3, #2
 800e204:	e11e      	b.n	800e444 <HAL_SPI_Transmit+0x260>
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	2201      	movs	r2, #1
 800e20a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e20e:	f7fb fb7d 	bl	800990c <HAL_GetTick>
 800e212:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800e214:	88fb      	ldrh	r3, [r7, #6]
 800e216:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e21e:	b2db      	uxtb	r3, r3
 800e220:	2b01      	cmp	r3, #1
 800e222:	d002      	beq.n	800e22a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800e224:	2302      	movs	r3, #2
 800e226:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e228:	e103      	b.n	800e432 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800e22a:	68bb      	ldr	r3, [r7, #8]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d002      	beq.n	800e236 <HAL_SPI_Transmit+0x52>
 800e230:	88fb      	ldrh	r3, [r7, #6]
 800e232:	2b00      	cmp	r3, #0
 800e234:	d102      	bne.n	800e23c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800e236:	2301      	movs	r3, #1
 800e238:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e23a:	e0fa      	b.n	800e432 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	2203      	movs	r2, #3
 800e240:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	2200      	movs	r2, #0
 800e248:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	68ba      	ldr	r2, [r7, #8]
 800e24e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	88fa      	ldrh	r2, [r7, #6]
 800e254:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	88fa      	ldrh	r2, [r7, #6]
 800e25a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	2200      	movs	r2, #0
 800e260:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	2200      	movs	r2, #0
 800e266:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	2200      	movs	r2, #0
 800e26c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	2200      	movs	r2, #0
 800e272:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	2200      	movs	r2, #0
 800e278:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	689b      	ldr	r3, [r3, #8]
 800e27e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e282:	d107      	bne.n	800e294 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	681a      	ldr	r2, [r3, #0]
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e292:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e29e:	2b40      	cmp	r3, #64	; 0x40
 800e2a0:	d007      	beq.n	800e2b2 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	681a      	ldr	r2, [r3, #0]
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e2b0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	68db      	ldr	r3, [r3, #12]
 800e2b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e2ba:	d14b      	bne.n	800e354 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	685b      	ldr	r3, [r3, #4]
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d002      	beq.n	800e2ca <HAL_SPI_Transmit+0xe6>
 800e2c4:	8afb      	ldrh	r3, [r7, #22]
 800e2c6:	2b01      	cmp	r3, #1
 800e2c8:	d13e      	bne.n	800e348 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2ce:	881a      	ldrh	r2, [r3, #0]
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2da:	1c9a      	adds	r2, r3, #2
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e2e4:	b29b      	uxth	r3, r3
 800e2e6:	3b01      	subs	r3, #1
 800e2e8:	b29a      	uxth	r2, r3
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800e2ee:	e02b      	b.n	800e348 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	689b      	ldr	r3, [r3, #8]
 800e2f6:	f003 0302 	and.w	r3, r3, #2
 800e2fa:	2b02      	cmp	r3, #2
 800e2fc:	d112      	bne.n	800e324 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e302:	881a      	ldrh	r2, [r3, #0]
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e30e:	1c9a      	adds	r2, r3, #2
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e318:	b29b      	uxth	r3, r3
 800e31a:	3b01      	subs	r3, #1
 800e31c:	b29a      	uxth	r2, r3
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	86da      	strh	r2, [r3, #54]	; 0x36
 800e322:	e011      	b.n	800e348 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e324:	f7fb faf2 	bl	800990c <HAL_GetTick>
 800e328:	4602      	mov	r2, r0
 800e32a:	69bb      	ldr	r3, [r7, #24]
 800e32c:	1ad3      	subs	r3, r2, r3
 800e32e:	683a      	ldr	r2, [r7, #0]
 800e330:	429a      	cmp	r2, r3
 800e332:	d803      	bhi.n	800e33c <HAL_SPI_Transmit+0x158>
 800e334:	683b      	ldr	r3, [r7, #0]
 800e336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e33a:	d102      	bne.n	800e342 <HAL_SPI_Transmit+0x15e>
 800e33c:	683b      	ldr	r3, [r7, #0]
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d102      	bne.n	800e348 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800e342:	2303      	movs	r3, #3
 800e344:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e346:	e074      	b.n	800e432 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e34c:	b29b      	uxth	r3, r3
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d1ce      	bne.n	800e2f0 <HAL_SPI_Transmit+0x10c>
 800e352:	e04c      	b.n	800e3ee <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	685b      	ldr	r3, [r3, #4]
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d002      	beq.n	800e362 <HAL_SPI_Transmit+0x17e>
 800e35c:	8afb      	ldrh	r3, [r7, #22]
 800e35e:	2b01      	cmp	r3, #1
 800e360:	d140      	bne.n	800e3e4 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	330c      	adds	r3, #12
 800e36c:	7812      	ldrb	r2, [r2, #0]
 800e36e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e374:	1c5a      	adds	r2, r3, #1
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e37e:	b29b      	uxth	r3, r3
 800e380:	3b01      	subs	r3, #1
 800e382:	b29a      	uxth	r2, r3
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800e388:	e02c      	b.n	800e3e4 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	689b      	ldr	r3, [r3, #8]
 800e390:	f003 0302 	and.w	r3, r3, #2
 800e394:	2b02      	cmp	r3, #2
 800e396:	d113      	bne.n	800e3c0 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	330c      	adds	r3, #12
 800e3a2:	7812      	ldrb	r2, [r2, #0]
 800e3a4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3aa:	1c5a      	adds	r2, r3, #1
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e3b4:	b29b      	uxth	r3, r3
 800e3b6:	3b01      	subs	r3, #1
 800e3b8:	b29a      	uxth	r2, r3
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	86da      	strh	r2, [r3, #54]	; 0x36
 800e3be:	e011      	b.n	800e3e4 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e3c0:	f7fb faa4 	bl	800990c <HAL_GetTick>
 800e3c4:	4602      	mov	r2, r0
 800e3c6:	69bb      	ldr	r3, [r7, #24]
 800e3c8:	1ad3      	subs	r3, r2, r3
 800e3ca:	683a      	ldr	r2, [r7, #0]
 800e3cc:	429a      	cmp	r2, r3
 800e3ce:	d803      	bhi.n	800e3d8 <HAL_SPI_Transmit+0x1f4>
 800e3d0:	683b      	ldr	r3, [r7, #0]
 800e3d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3d6:	d102      	bne.n	800e3de <HAL_SPI_Transmit+0x1fa>
 800e3d8:	683b      	ldr	r3, [r7, #0]
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d102      	bne.n	800e3e4 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800e3de:	2303      	movs	r3, #3
 800e3e0:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e3e2:	e026      	b.n	800e432 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e3e8:	b29b      	uxth	r3, r3
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d1cd      	bne.n	800e38a <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e3ee:	69ba      	ldr	r2, [r7, #24]
 800e3f0:	6839      	ldr	r1, [r7, #0]
 800e3f2:	68f8      	ldr	r0, [r7, #12]
 800e3f4:	f000 fba4 	bl	800eb40 <SPI_EndRxTxTransaction>
 800e3f8:	4603      	mov	r3, r0
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d002      	beq.n	800e404 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	2220      	movs	r2, #32
 800e402:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	689b      	ldr	r3, [r3, #8]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d10a      	bne.n	800e422 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e40c:	2300      	movs	r3, #0
 800e40e:	613b      	str	r3, [r7, #16]
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	68db      	ldr	r3, [r3, #12]
 800e416:	613b      	str	r3, [r7, #16]
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	689b      	ldr	r3, [r3, #8]
 800e41e:	613b      	str	r3, [r7, #16]
 800e420:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e426:	2b00      	cmp	r3, #0
 800e428:	d002      	beq.n	800e430 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800e42a:	2301      	movs	r3, #1
 800e42c:	77fb      	strb	r3, [r7, #31]
 800e42e:	e000      	b.n	800e432 <HAL_SPI_Transmit+0x24e>
  }

error:
 800e430:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	2201      	movs	r2, #1
 800e436:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	2200      	movs	r2, #0
 800e43e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e442:	7ffb      	ldrb	r3, [r7, #31]
}
 800e444:	4618      	mov	r0, r3
 800e446:	3720      	adds	r7, #32
 800e448:	46bd      	mov	sp, r7
 800e44a:	bd80      	pop	{r7, pc}

0800e44c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e44c:	b580      	push	{r7, lr}
 800e44e:	b088      	sub	sp, #32
 800e450:	af02      	add	r7, sp, #8
 800e452:	60f8      	str	r0, [r7, #12]
 800e454:	60b9      	str	r1, [r7, #8]
 800e456:	603b      	str	r3, [r7, #0]
 800e458:	4613      	mov	r3, r2
 800e45a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e45c:	2300      	movs	r3, #0
 800e45e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	685b      	ldr	r3, [r3, #4]
 800e464:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e468:	d112      	bne.n	800e490 <HAL_SPI_Receive+0x44>
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	689b      	ldr	r3, [r3, #8]
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d10e      	bne.n	800e490 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	2204      	movs	r2, #4
 800e476:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800e47a:	88fa      	ldrh	r2, [r7, #6]
 800e47c:	683b      	ldr	r3, [r7, #0]
 800e47e:	9300      	str	r3, [sp, #0]
 800e480:	4613      	mov	r3, r2
 800e482:	68ba      	ldr	r2, [r7, #8]
 800e484:	68b9      	ldr	r1, [r7, #8]
 800e486:	68f8      	ldr	r0, [r7, #12]
 800e488:	f000 f8e9 	bl	800e65e <HAL_SPI_TransmitReceive>
 800e48c:	4603      	mov	r3, r0
 800e48e:	e0e2      	b.n	800e656 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e496:	2b01      	cmp	r3, #1
 800e498:	d101      	bne.n	800e49e <HAL_SPI_Receive+0x52>
 800e49a:	2302      	movs	r3, #2
 800e49c:	e0db      	b.n	800e656 <HAL_SPI_Receive+0x20a>
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	2201      	movs	r2, #1
 800e4a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e4a6:	f7fb fa31 	bl	800990c <HAL_GetTick>
 800e4aa:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e4b2:	b2db      	uxtb	r3, r3
 800e4b4:	2b01      	cmp	r3, #1
 800e4b6:	d002      	beq.n	800e4be <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800e4b8:	2302      	movs	r3, #2
 800e4ba:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e4bc:	e0c2      	b.n	800e644 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800e4be:	68bb      	ldr	r3, [r7, #8]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d002      	beq.n	800e4ca <HAL_SPI_Receive+0x7e>
 800e4c4:	88fb      	ldrh	r3, [r7, #6]
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d102      	bne.n	800e4d0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800e4ca:	2301      	movs	r3, #1
 800e4cc:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e4ce:	e0b9      	b.n	800e644 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	2204      	movs	r2, #4
 800e4d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	2200      	movs	r2, #0
 800e4dc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	68ba      	ldr	r2, [r7, #8]
 800e4e2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	88fa      	ldrh	r2, [r7, #6]
 800e4e8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	88fa      	ldrh	r2, [r7, #6]
 800e4ee:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	2200      	movs	r2, #0
 800e4f4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	2200      	movs	r2, #0
 800e4fa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	2200      	movs	r2, #0
 800e500:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	2200      	movs	r2, #0
 800e506:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	2200      	movs	r2, #0
 800e50c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	689b      	ldr	r3, [r3, #8]
 800e512:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e516:	d107      	bne.n	800e528 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	681a      	ldr	r2, [r3, #0]
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800e526:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e532:	2b40      	cmp	r3, #64	; 0x40
 800e534:	d007      	beq.n	800e546 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	681a      	ldr	r2, [r3, #0]
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e544:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	68db      	ldr	r3, [r3, #12]
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d162      	bne.n	800e614 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800e54e:	e02e      	b.n	800e5ae <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	689b      	ldr	r3, [r3, #8]
 800e556:	f003 0301 	and.w	r3, r3, #1
 800e55a:	2b01      	cmp	r3, #1
 800e55c:	d115      	bne.n	800e58a <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	f103 020c 	add.w	r2, r3, #12
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e56a:	7812      	ldrb	r2, [r2, #0]
 800e56c:	b2d2      	uxtb	r2, r2
 800e56e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e574:	1c5a      	adds	r2, r3, #1
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e57e:	b29b      	uxth	r3, r3
 800e580:	3b01      	subs	r3, #1
 800e582:	b29a      	uxth	r2, r3
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e588:	e011      	b.n	800e5ae <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e58a:	f7fb f9bf 	bl	800990c <HAL_GetTick>
 800e58e:	4602      	mov	r2, r0
 800e590:	693b      	ldr	r3, [r7, #16]
 800e592:	1ad3      	subs	r3, r2, r3
 800e594:	683a      	ldr	r2, [r7, #0]
 800e596:	429a      	cmp	r2, r3
 800e598:	d803      	bhi.n	800e5a2 <HAL_SPI_Receive+0x156>
 800e59a:	683b      	ldr	r3, [r7, #0]
 800e59c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5a0:	d102      	bne.n	800e5a8 <HAL_SPI_Receive+0x15c>
 800e5a2:	683b      	ldr	r3, [r7, #0]
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d102      	bne.n	800e5ae <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800e5a8:	2303      	movs	r3, #3
 800e5aa:	75fb      	strb	r3, [r7, #23]
          goto error;
 800e5ac:	e04a      	b.n	800e644 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e5b2:	b29b      	uxth	r3, r3
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d1cb      	bne.n	800e550 <HAL_SPI_Receive+0x104>
 800e5b8:	e031      	b.n	800e61e <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	689b      	ldr	r3, [r3, #8]
 800e5c0:	f003 0301 	and.w	r3, r3, #1
 800e5c4:	2b01      	cmp	r3, #1
 800e5c6:	d113      	bne.n	800e5f0 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	68da      	ldr	r2, [r3, #12]
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5d2:	b292      	uxth	r2, r2
 800e5d4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5da:	1c9a      	adds	r2, r3, #2
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e5e4:	b29b      	uxth	r3, r3
 800e5e6:	3b01      	subs	r3, #1
 800e5e8:	b29a      	uxth	r2, r3
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e5ee:	e011      	b.n	800e614 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e5f0:	f7fb f98c 	bl	800990c <HAL_GetTick>
 800e5f4:	4602      	mov	r2, r0
 800e5f6:	693b      	ldr	r3, [r7, #16]
 800e5f8:	1ad3      	subs	r3, r2, r3
 800e5fa:	683a      	ldr	r2, [r7, #0]
 800e5fc:	429a      	cmp	r2, r3
 800e5fe:	d803      	bhi.n	800e608 <HAL_SPI_Receive+0x1bc>
 800e600:	683b      	ldr	r3, [r7, #0]
 800e602:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e606:	d102      	bne.n	800e60e <HAL_SPI_Receive+0x1c2>
 800e608:	683b      	ldr	r3, [r7, #0]
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d102      	bne.n	800e614 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800e60e:	2303      	movs	r3, #3
 800e610:	75fb      	strb	r3, [r7, #23]
          goto error;
 800e612:	e017      	b.n	800e644 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e618:	b29b      	uxth	r3, r3
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d1cd      	bne.n	800e5ba <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e61e:	693a      	ldr	r2, [r7, #16]
 800e620:	6839      	ldr	r1, [r7, #0]
 800e622:	68f8      	ldr	r0, [r7, #12]
 800e624:	f000 fa27 	bl	800ea76 <SPI_EndRxTransaction>
 800e628:	4603      	mov	r3, r0
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d002      	beq.n	800e634 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	2220      	movs	r2, #32
 800e632:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d002      	beq.n	800e642 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800e63c:	2301      	movs	r3, #1
 800e63e:	75fb      	strb	r3, [r7, #23]
 800e640:	e000      	b.n	800e644 <HAL_SPI_Receive+0x1f8>
  }

error :
 800e642:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	2201      	movs	r2, #1
 800e648:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	2200      	movs	r2, #0
 800e650:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e654:	7dfb      	ldrb	r3, [r7, #23]
}
 800e656:	4618      	mov	r0, r3
 800e658:	3718      	adds	r7, #24
 800e65a:	46bd      	mov	sp, r7
 800e65c:	bd80      	pop	{r7, pc}

0800e65e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800e65e:	b580      	push	{r7, lr}
 800e660:	b08c      	sub	sp, #48	; 0x30
 800e662:	af00      	add	r7, sp, #0
 800e664:	60f8      	str	r0, [r7, #12]
 800e666:	60b9      	str	r1, [r7, #8]
 800e668:	607a      	str	r2, [r7, #4]
 800e66a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800e66c:	2301      	movs	r3, #1
 800e66e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800e670:	2300      	movs	r3, #0
 800e672:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e67c:	2b01      	cmp	r3, #1
 800e67e:	d101      	bne.n	800e684 <HAL_SPI_TransmitReceive+0x26>
 800e680:	2302      	movs	r3, #2
 800e682:	e18a      	b.n	800e99a <HAL_SPI_TransmitReceive+0x33c>
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	2201      	movs	r2, #1
 800e688:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e68c:	f7fb f93e 	bl	800990c <HAL_GetTick>
 800e690:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e698:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	685b      	ldr	r3, [r3, #4]
 800e6a0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800e6a2:	887b      	ldrh	r3, [r7, #2]
 800e6a4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800e6a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e6aa:	2b01      	cmp	r3, #1
 800e6ac:	d00f      	beq.n	800e6ce <HAL_SPI_TransmitReceive+0x70>
 800e6ae:	69fb      	ldr	r3, [r7, #28]
 800e6b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e6b4:	d107      	bne.n	800e6c6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	689b      	ldr	r3, [r3, #8]
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d103      	bne.n	800e6c6 <HAL_SPI_TransmitReceive+0x68>
 800e6be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e6c2:	2b04      	cmp	r3, #4
 800e6c4:	d003      	beq.n	800e6ce <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800e6c6:	2302      	movs	r3, #2
 800e6c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800e6cc:	e15b      	b.n	800e986 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800e6ce:	68bb      	ldr	r3, [r7, #8]
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d005      	beq.n	800e6e0 <HAL_SPI_TransmitReceive+0x82>
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d002      	beq.n	800e6e0 <HAL_SPI_TransmitReceive+0x82>
 800e6da:	887b      	ldrh	r3, [r7, #2]
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d103      	bne.n	800e6e8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800e6e0:	2301      	movs	r3, #1
 800e6e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800e6e6:	e14e      	b.n	800e986 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e6ee:	b2db      	uxtb	r3, r3
 800e6f0:	2b04      	cmp	r3, #4
 800e6f2:	d003      	beq.n	800e6fc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	2205      	movs	r2, #5
 800e6f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	2200      	movs	r2, #0
 800e700:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	687a      	ldr	r2, [r7, #4]
 800e706:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	887a      	ldrh	r2, [r7, #2]
 800e70c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	887a      	ldrh	r2, [r7, #2]
 800e712:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	68ba      	ldr	r2, [r7, #8]
 800e718:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	887a      	ldrh	r2, [r7, #2]
 800e71e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	887a      	ldrh	r2, [r7, #2]
 800e724:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	2200      	movs	r2, #0
 800e72a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	2200      	movs	r2, #0
 800e730:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e73c:	2b40      	cmp	r3, #64	; 0x40
 800e73e:	d007      	beq.n	800e750 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	681a      	ldr	r2, [r3, #0]
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e74e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	68db      	ldr	r3, [r3, #12]
 800e754:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e758:	d178      	bne.n	800e84c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	685b      	ldr	r3, [r3, #4]
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d002      	beq.n	800e768 <HAL_SPI_TransmitReceive+0x10a>
 800e762:	8b7b      	ldrh	r3, [r7, #26]
 800e764:	2b01      	cmp	r3, #1
 800e766:	d166      	bne.n	800e836 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e76c:	881a      	ldrh	r2, [r3, #0]
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e778:	1c9a      	adds	r2, r3, #2
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e782:	b29b      	uxth	r3, r3
 800e784:	3b01      	subs	r3, #1
 800e786:	b29a      	uxth	r2, r3
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e78c:	e053      	b.n	800e836 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	689b      	ldr	r3, [r3, #8]
 800e794:	f003 0302 	and.w	r3, r3, #2
 800e798:	2b02      	cmp	r3, #2
 800e79a:	d11b      	bne.n	800e7d4 <HAL_SPI_TransmitReceive+0x176>
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e7a0:	b29b      	uxth	r3, r3
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d016      	beq.n	800e7d4 <HAL_SPI_TransmitReceive+0x176>
 800e7a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7a8:	2b01      	cmp	r3, #1
 800e7aa:	d113      	bne.n	800e7d4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7b0:	881a      	ldrh	r2, [r3, #0]
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7bc:	1c9a      	adds	r2, r3, #2
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e7c6:	b29b      	uxth	r3, r3
 800e7c8:	3b01      	subs	r3, #1
 800e7ca:	b29a      	uxth	r2, r3
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e7d0:	2300      	movs	r3, #0
 800e7d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	689b      	ldr	r3, [r3, #8]
 800e7da:	f003 0301 	and.w	r3, r3, #1
 800e7de:	2b01      	cmp	r3, #1
 800e7e0:	d119      	bne.n	800e816 <HAL_SPI_TransmitReceive+0x1b8>
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e7e6:	b29b      	uxth	r3, r3
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d014      	beq.n	800e816 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	68da      	ldr	r2, [r3, #12]
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7f6:	b292      	uxth	r2, r2
 800e7f8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7fe:	1c9a      	adds	r2, r3, #2
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e808:	b29b      	uxth	r3, r3
 800e80a:	3b01      	subs	r3, #1
 800e80c:	b29a      	uxth	r2, r3
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e812:	2301      	movs	r3, #1
 800e814:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800e816:	f7fb f879 	bl	800990c <HAL_GetTick>
 800e81a:	4602      	mov	r2, r0
 800e81c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e81e:	1ad3      	subs	r3, r2, r3
 800e820:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e822:	429a      	cmp	r2, r3
 800e824:	d807      	bhi.n	800e836 <HAL_SPI_TransmitReceive+0x1d8>
 800e826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e82c:	d003      	beq.n	800e836 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800e82e:	2303      	movs	r3, #3
 800e830:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800e834:	e0a7      	b.n	800e986 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e83a:	b29b      	uxth	r3, r3
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d1a6      	bne.n	800e78e <HAL_SPI_TransmitReceive+0x130>
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e844:	b29b      	uxth	r3, r3
 800e846:	2b00      	cmp	r3, #0
 800e848:	d1a1      	bne.n	800e78e <HAL_SPI_TransmitReceive+0x130>
 800e84a:	e07c      	b.n	800e946 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	685b      	ldr	r3, [r3, #4]
 800e850:	2b00      	cmp	r3, #0
 800e852:	d002      	beq.n	800e85a <HAL_SPI_TransmitReceive+0x1fc>
 800e854:	8b7b      	ldrh	r3, [r7, #26]
 800e856:	2b01      	cmp	r3, #1
 800e858:	d16b      	bne.n	800e932 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	330c      	adds	r3, #12
 800e864:	7812      	ldrb	r2, [r2, #0]
 800e866:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e86c:	1c5a      	adds	r2, r3, #1
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e876:	b29b      	uxth	r3, r3
 800e878:	3b01      	subs	r3, #1
 800e87a:	b29a      	uxth	r2, r3
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e880:	e057      	b.n	800e932 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	689b      	ldr	r3, [r3, #8]
 800e888:	f003 0302 	and.w	r3, r3, #2
 800e88c:	2b02      	cmp	r3, #2
 800e88e:	d11c      	bne.n	800e8ca <HAL_SPI_TransmitReceive+0x26c>
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e894:	b29b      	uxth	r3, r3
 800e896:	2b00      	cmp	r3, #0
 800e898:	d017      	beq.n	800e8ca <HAL_SPI_TransmitReceive+0x26c>
 800e89a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e89c:	2b01      	cmp	r3, #1
 800e89e:	d114      	bne.n	800e8ca <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	330c      	adds	r3, #12
 800e8aa:	7812      	ldrb	r2, [r2, #0]
 800e8ac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8b2:	1c5a      	adds	r2, r3, #1
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e8bc:	b29b      	uxth	r3, r3
 800e8be:	3b01      	subs	r3, #1
 800e8c0:	b29a      	uxth	r2, r3
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e8c6:	2300      	movs	r3, #0
 800e8c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	689b      	ldr	r3, [r3, #8]
 800e8d0:	f003 0301 	and.w	r3, r3, #1
 800e8d4:	2b01      	cmp	r3, #1
 800e8d6:	d119      	bne.n	800e90c <HAL_SPI_TransmitReceive+0x2ae>
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e8dc:	b29b      	uxth	r3, r3
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d014      	beq.n	800e90c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	68da      	ldr	r2, [r3, #12]
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8ec:	b2d2      	uxtb	r2, r2
 800e8ee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8f4:	1c5a      	adds	r2, r3, #1
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e8fe:	b29b      	uxth	r3, r3
 800e900:	3b01      	subs	r3, #1
 800e902:	b29a      	uxth	r2, r3
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e908:	2301      	movs	r3, #1
 800e90a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800e90c:	f7fa fffe 	bl	800990c <HAL_GetTick>
 800e910:	4602      	mov	r2, r0
 800e912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e914:	1ad3      	subs	r3, r2, r3
 800e916:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e918:	429a      	cmp	r2, r3
 800e91a:	d803      	bhi.n	800e924 <HAL_SPI_TransmitReceive+0x2c6>
 800e91c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e91e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e922:	d102      	bne.n	800e92a <HAL_SPI_TransmitReceive+0x2cc>
 800e924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e926:	2b00      	cmp	r3, #0
 800e928:	d103      	bne.n	800e932 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800e92a:	2303      	movs	r3, #3
 800e92c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800e930:	e029      	b.n	800e986 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e936:	b29b      	uxth	r3, r3
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d1a2      	bne.n	800e882 <HAL_SPI_TransmitReceive+0x224>
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e940:	b29b      	uxth	r3, r3
 800e942:	2b00      	cmp	r3, #0
 800e944:	d19d      	bne.n	800e882 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e946:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e948:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e94a:	68f8      	ldr	r0, [r7, #12]
 800e94c:	f000 f8f8 	bl	800eb40 <SPI_EndRxTxTransaction>
 800e950:	4603      	mov	r3, r0
 800e952:	2b00      	cmp	r3, #0
 800e954:	d006      	beq.n	800e964 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800e956:	2301      	movs	r3, #1
 800e958:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	2220      	movs	r2, #32
 800e960:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800e962:	e010      	b.n	800e986 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	689b      	ldr	r3, [r3, #8]
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d10b      	bne.n	800e984 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e96c:	2300      	movs	r3, #0
 800e96e:	617b      	str	r3, [r7, #20]
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	68db      	ldr	r3, [r3, #12]
 800e976:	617b      	str	r3, [r7, #20]
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	689b      	ldr	r3, [r3, #8]
 800e97e:	617b      	str	r3, [r7, #20]
 800e980:	697b      	ldr	r3, [r7, #20]
 800e982:	e000      	b.n	800e986 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800e984:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	2201      	movs	r2, #1
 800e98a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	2200      	movs	r2, #0
 800e992:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e996:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800e99a:	4618      	mov	r0, r3
 800e99c:	3730      	adds	r7, #48	; 0x30
 800e99e:	46bd      	mov	sp, r7
 800e9a0:	bd80      	pop	{r7, pc}

0800e9a2 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800e9a2:	b580      	push	{r7, lr}
 800e9a4:	b084      	sub	sp, #16
 800e9a6:	af00      	add	r7, sp, #0
 800e9a8:	60f8      	str	r0, [r7, #12]
 800e9aa:	60b9      	str	r1, [r7, #8]
 800e9ac:	603b      	str	r3, [r7, #0]
 800e9ae:	4613      	mov	r3, r2
 800e9b0:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e9b2:	e04c      	b.n	800ea4e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800e9b4:	683b      	ldr	r3, [r7, #0]
 800e9b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9ba:	d048      	beq.n	800ea4e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800e9bc:	f7fa ffa6 	bl	800990c <HAL_GetTick>
 800e9c0:	4602      	mov	r2, r0
 800e9c2:	69bb      	ldr	r3, [r7, #24]
 800e9c4:	1ad3      	subs	r3, r2, r3
 800e9c6:	683a      	ldr	r2, [r7, #0]
 800e9c8:	429a      	cmp	r2, r3
 800e9ca:	d902      	bls.n	800e9d2 <SPI_WaitFlagStateUntilTimeout+0x30>
 800e9cc:	683b      	ldr	r3, [r7, #0]
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d13d      	bne.n	800ea4e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	685a      	ldr	r2, [r3, #4]
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e9e0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	685b      	ldr	r3, [r3, #4]
 800e9e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e9ea:	d111      	bne.n	800ea10 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	689b      	ldr	r3, [r3, #8]
 800e9f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e9f4:	d004      	beq.n	800ea00 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	689b      	ldr	r3, [r3, #8]
 800e9fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e9fe:	d107      	bne.n	800ea10 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	681a      	ldr	r2, [r3, #0]
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ea0e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ea18:	d10f      	bne.n	800ea3a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	681a      	ldr	r2, [r3, #0]
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ea28:	601a      	str	r2, [r3, #0]
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	681a      	ldr	r2, [r3, #0]
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ea38:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	2201      	movs	r2, #1
 800ea3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	2200      	movs	r2, #0
 800ea46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800ea4a:	2303      	movs	r3, #3
 800ea4c:	e00f      	b.n	800ea6e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	689a      	ldr	r2, [r3, #8]
 800ea54:	68bb      	ldr	r3, [r7, #8]
 800ea56:	4013      	ands	r3, r2
 800ea58:	68ba      	ldr	r2, [r7, #8]
 800ea5a:	429a      	cmp	r2, r3
 800ea5c:	bf0c      	ite	eq
 800ea5e:	2301      	moveq	r3, #1
 800ea60:	2300      	movne	r3, #0
 800ea62:	b2db      	uxtb	r3, r3
 800ea64:	461a      	mov	r2, r3
 800ea66:	79fb      	ldrb	r3, [r7, #7]
 800ea68:	429a      	cmp	r2, r3
 800ea6a:	d1a3      	bne.n	800e9b4 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800ea6c:	2300      	movs	r3, #0
}
 800ea6e:	4618      	mov	r0, r3
 800ea70:	3710      	adds	r7, #16
 800ea72:	46bd      	mov	sp, r7
 800ea74:	bd80      	pop	{r7, pc}

0800ea76 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800ea76:	b580      	push	{r7, lr}
 800ea78:	b086      	sub	sp, #24
 800ea7a:	af02      	add	r7, sp, #8
 800ea7c:	60f8      	str	r0, [r7, #12]
 800ea7e:	60b9      	str	r1, [r7, #8]
 800ea80:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	685b      	ldr	r3, [r3, #4]
 800ea86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ea8a:	d111      	bne.n	800eab0 <SPI_EndRxTransaction+0x3a>
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	689b      	ldr	r3, [r3, #8]
 800ea90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ea94:	d004      	beq.n	800eaa0 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	689b      	ldr	r3, [r3, #8]
 800ea9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ea9e:	d107      	bne.n	800eab0 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	681a      	ldr	r2, [r3, #0]
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800eaae:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	685b      	ldr	r3, [r3, #4]
 800eab4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800eab8:	d12a      	bne.n	800eb10 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	689b      	ldr	r3, [r3, #8]
 800eabe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800eac2:	d012      	beq.n	800eaea <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	9300      	str	r3, [sp, #0]
 800eac8:	68bb      	ldr	r3, [r7, #8]
 800eaca:	2200      	movs	r2, #0
 800eacc:	2180      	movs	r1, #128	; 0x80
 800eace:	68f8      	ldr	r0, [r7, #12]
 800ead0:	f7ff ff67 	bl	800e9a2 <SPI_WaitFlagStateUntilTimeout>
 800ead4:	4603      	mov	r3, r0
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d02d      	beq.n	800eb36 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eade:	f043 0220 	orr.w	r2, r3, #32
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800eae6:	2303      	movs	r3, #3
 800eae8:	e026      	b.n	800eb38 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	9300      	str	r3, [sp, #0]
 800eaee:	68bb      	ldr	r3, [r7, #8]
 800eaf0:	2200      	movs	r2, #0
 800eaf2:	2101      	movs	r1, #1
 800eaf4:	68f8      	ldr	r0, [r7, #12]
 800eaf6:	f7ff ff54 	bl	800e9a2 <SPI_WaitFlagStateUntilTimeout>
 800eafa:	4603      	mov	r3, r0
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d01a      	beq.n	800eb36 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb04:	f043 0220 	orr.w	r2, r3, #32
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800eb0c:	2303      	movs	r3, #3
 800eb0e:	e013      	b.n	800eb38 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	9300      	str	r3, [sp, #0]
 800eb14:	68bb      	ldr	r3, [r7, #8]
 800eb16:	2200      	movs	r2, #0
 800eb18:	2101      	movs	r1, #1
 800eb1a:	68f8      	ldr	r0, [r7, #12]
 800eb1c:	f7ff ff41 	bl	800e9a2 <SPI_WaitFlagStateUntilTimeout>
 800eb20:	4603      	mov	r3, r0
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d007      	beq.n	800eb36 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb2a:	f043 0220 	orr.w	r2, r3, #32
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800eb32:	2303      	movs	r3, #3
 800eb34:	e000      	b.n	800eb38 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800eb36:	2300      	movs	r3, #0
}
 800eb38:	4618      	mov	r0, r3
 800eb3a:	3710      	adds	r7, #16
 800eb3c:	46bd      	mov	sp, r7
 800eb3e:	bd80      	pop	{r7, pc}

0800eb40 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800eb40:	b580      	push	{r7, lr}
 800eb42:	b088      	sub	sp, #32
 800eb44:	af02      	add	r7, sp, #8
 800eb46:	60f8      	str	r0, [r7, #12]
 800eb48:	60b9      	str	r1, [r7, #8]
 800eb4a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800eb4c:	4b1b      	ldr	r3, [pc, #108]	; (800ebbc <SPI_EndRxTxTransaction+0x7c>)
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	4a1b      	ldr	r2, [pc, #108]	; (800ebc0 <SPI_EndRxTxTransaction+0x80>)
 800eb52:	fba2 2303 	umull	r2, r3, r2, r3
 800eb56:	0d5b      	lsrs	r3, r3, #21
 800eb58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800eb5c:	fb02 f303 	mul.w	r3, r2, r3
 800eb60:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	685b      	ldr	r3, [r3, #4]
 800eb66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800eb6a:	d112      	bne.n	800eb92 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	9300      	str	r3, [sp, #0]
 800eb70:	68bb      	ldr	r3, [r7, #8]
 800eb72:	2200      	movs	r2, #0
 800eb74:	2180      	movs	r1, #128	; 0x80
 800eb76:	68f8      	ldr	r0, [r7, #12]
 800eb78:	f7ff ff13 	bl	800e9a2 <SPI_WaitFlagStateUntilTimeout>
 800eb7c:	4603      	mov	r3, r0
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d016      	beq.n	800ebb0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb86:	f043 0220 	orr.w	r2, r3, #32
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800eb8e:	2303      	movs	r3, #3
 800eb90:	e00f      	b.n	800ebb2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800eb92:	697b      	ldr	r3, [r7, #20]
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d00a      	beq.n	800ebae <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800eb98:	697b      	ldr	r3, [r7, #20]
 800eb9a:	3b01      	subs	r3, #1
 800eb9c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	689b      	ldr	r3, [r3, #8]
 800eba4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eba8:	2b80      	cmp	r3, #128	; 0x80
 800ebaa:	d0f2      	beq.n	800eb92 <SPI_EndRxTxTransaction+0x52>
 800ebac:	e000      	b.n	800ebb0 <SPI_EndRxTxTransaction+0x70>
        break;
 800ebae:	bf00      	nop
  }

  return HAL_OK;
 800ebb0:	2300      	movs	r3, #0
}
 800ebb2:	4618      	mov	r0, r3
 800ebb4:	3718      	adds	r7, #24
 800ebb6:	46bd      	mov	sp, r7
 800ebb8:	bd80      	pop	{r7, pc}
 800ebba:	bf00      	nop
 800ebbc:	20000000 	.word	0x20000000
 800ebc0:	165e9f81 	.word	0x165e9f81

0800ebc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ebc4:	b580      	push	{r7, lr}
 800ebc6:	b082      	sub	sp, #8
 800ebc8:	af00      	add	r7, sp, #0
 800ebca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d101      	bne.n	800ebd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ebd2:	2301      	movs	r3, #1
 800ebd4:	e01d      	b.n	800ec12 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ebdc:	b2db      	uxtb	r3, r3
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d106      	bne.n	800ebf0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	2200      	movs	r2, #0
 800ebe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ebea:	6878      	ldr	r0, [r7, #4]
 800ebec:	f7f8 fa4e 	bl	800708c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	2202      	movs	r2, #2
 800ebf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	681a      	ldr	r2, [r3, #0]
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	3304      	adds	r3, #4
 800ec00:	4619      	mov	r1, r3
 800ec02:	4610      	mov	r0, r2
 800ec04:	f000 fb56 	bl	800f2b4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	2201      	movs	r2, #1
 800ec0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ec10:	2300      	movs	r3, #0
}
 800ec12:	4618      	mov	r0, r3
 800ec14:	3708      	adds	r7, #8
 800ec16:	46bd      	mov	sp, r7
 800ec18:	bd80      	pop	{r7, pc}

0800ec1a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ec1a:	b480      	push	{r7}
 800ec1c:	b085      	sub	sp, #20
 800ec1e:	af00      	add	r7, sp, #0
 800ec20:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	68da      	ldr	r2, [r3, #12]
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	f042 0201 	orr.w	r2, r2, #1
 800ec30:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	689b      	ldr	r3, [r3, #8]
 800ec38:	f003 0307 	and.w	r3, r3, #7
 800ec3c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	2b06      	cmp	r3, #6
 800ec42:	d007      	beq.n	800ec54 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	681a      	ldr	r2, [r3, #0]
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	f042 0201 	orr.w	r2, r2, #1
 800ec52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ec54:	2300      	movs	r3, #0
}
 800ec56:	4618      	mov	r0, r3
 800ec58:	3714      	adds	r7, #20
 800ec5a:	46bd      	mov	sp, r7
 800ec5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec60:	4770      	bx	lr

0800ec62 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ec62:	b580      	push	{r7, lr}
 800ec64:	b082      	sub	sp, #8
 800ec66:	af00      	add	r7, sp, #0
 800ec68:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d101      	bne.n	800ec74 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ec70:	2301      	movs	r3, #1
 800ec72:	e01d      	b.n	800ecb0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ec7a:	b2db      	uxtb	r3, r3
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d106      	bne.n	800ec8e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	2200      	movs	r2, #0
 800ec84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ec88:	6878      	ldr	r0, [r7, #4]
 800ec8a:	f7f8 f98b 	bl	8006fa4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	2202      	movs	r2, #2
 800ec92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	681a      	ldr	r2, [r3, #0]
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	3304      	adds	r3, #4
 800ec9e:	4619      	mov	r1, r3
 800eca0:	4610      	mov	r0, r2
 800eca2:	f000 fb07 	bl	800f2b4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	2201      	movs	r2, #1
 800ecaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ecae:	2300      	movs	r3, #0
}
 800ecb0:	4618      	mov	r0, r3
 800ecb2:	3708      	adds	r7, #8
 800ecb4:	46bd      	mov	sp, r7
 800ecb6:	bd80      	pop	{r7, pc}

0800ecb8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ecb8:	b580      	push	{r7, lr}
 800ecba:	b084      	sub	sp, #16
 800ecbc:	af00      	add	r7, sp, #0
 800ecbe:	6078      	str	r0, [r7, #4]
 800ecc0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	2201      	movs	r2, #1
 800ecc8:	6839      	ldr	r1, [r7, #0]
 800ecca:	4618      	mov	r0, r3
 800eccc:	f000 fd42 	bl	800f754 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	4a15      	ldr	r2, [pc, #84]	; (800ed2c <HAL_TIM_PWM_Start+0x74>)
 800ecd6:	4293      	cmp	r3, r2
 800ecd8:	d004      	beq.n	800ece4 <HAL_TIM_PWM_Start+0x2c>
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	4a14      	ldr	r2, [pc, #80]	; (800ed30 <HAL_TIM_PWM_Start+0x78>)
 800ece0:	4293      	cmp	r3, r2
 800ece2:	d101      	bne.n	800ece8 <HAL_TIM_PWM_Start+0x30>
 800ece4:	2301      	movs	r3, #1
 800ece6:	e000      	b.n	800ecea <HAL_TIM_PWM_Start+0x32>
 800ece8:	2300      	movs	r3, #0
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d007      	beq.n	800ecfe <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ecfc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	689b      	ldr	r3, [r3, #8]
 800ed04:	f003 0307 	and.w	r3, r3, #7
 800ed08:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	2b06      	cmp	r3, #6
 800ed0e:	d007      	beq.n	800ed20 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	681a      	ldr	r2, [r3, #0]
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	f042 0201 	orr.w	r2, r2, #1
 800ed1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ed20:	2300      	movs	r3, #0
}
 800ed22:	4618      	mov	r0, r3
 800ed24:	3710      	adds	r7, #16
 800ed26:	46bd      	mov	sp, r7
 800ed28:	bd80      	pop	{r7, pc}
 800ed2a:	bf00      	nop
 800ed2c:	40010000 	.word	0x40010000
 800ed30:	40010400 	.word	0x40010400

0800ed34 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800ed34:	b580      	push	{r7, lr}
 800ed36:	b086      	sub	sp, #24
 800ed38:	af00      	add	r7, sp, #0
 800ed3a:	6078      	str	r0, [r7, #4]
 800ed3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d101      	bne.n	800ed48 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800ed44:	2301      	movs	r3, #1
 800ed46:	e083      	b.n	800ee50 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ed4e:	b2db      	uxtb	r3, r3
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d106      	bne.n	800ed62 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	2200      	movs	r2, #0
 800ed58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800ed5c:	6878      	ldr	r0, [r7, #4]
 800ed5e:	f7f8 fa25 	bl	80071ac <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	2202      	movs	r2, #2
 800ed66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	689b      	ldr	r3, [r3, #8]
 800ed70:	687a      	ldr	r2, [r7, #4]
 800ed72:	6812      	ldr	r2, [r2, #0]
 800ed74:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ed78:	f023 0307 	bic.w	r3, r3, #7
 800ed7c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	681a      	ldr	r2, [r3, #0]
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	3304      	adds	r3, #4
 800ed86:	4619      	mov	r1, r3
 800ed88:	4610      	mov	r0, r2
 800ed8a:	f000 fa93 	bl	800f2b4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	689b      	ldr	r3, [r3, #8]
 800ed94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	699b      	ldr	r3, [r3, #24]
 800ed9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	6a1b      	ldr	r3, [r3, #32]
 800eda4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800eda6:	683b      	ldr	r3, [r7, #0]
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	697a      	ldr	r2, [r7, #20]
 800edac:	4313      	orrs	r3, r2
 800edae:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800edb0:	693b      	ldr	r3, [r7, #16]
 800edb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800edb6:	f023 0303 	bic.w	r3, r3, #3
 800edba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800edbc:	683b      	ldr	r3, [r7, #0]
 800edbe:	689a      	ldr	r2, [r3, #8]
 800edc0:	683b      	ldr	r3, [r7, #0]
 800edc2:	699b      	ldr	r3, [r3, #24]
 800edc4:	021b      	lsls	r3, r3, #8
 800edc6:	4313      	orrs	r3, r2
 800edc8:	693a      	ldr	r2, [r7, #16]
 800edca:	4313      	orrs	r3, r2
 800edcc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800edce:	693b      	ldr	r3, [r7, #16]
 800edd0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800edd4:	f023 030c 	bic.w	r3, r3, #12
 800edd8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800edda:	693b      	ldr	r3, [r7, #16]
 800eddc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ede0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ede4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800ede6:	683b      	ldr	r3, [r7, #0]
 800ede8:	68da      	ldr	r2, [r3, #12]
 800edea:	683b      	ldr	r3, [r7, #0]
 800edec:	69db      	ldr	r3, [r3, #28]
 800edee:	021b      	lsls	r3, r3, #8
 800edf0:	4313      	orrs	r3, r2
 800edf2:	693a      	ldr	r2, [r7, #16]
 800edf4:	4313      	orrs	r3, r2
 800edf6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800edf8:	683b      	ldr	r3, [r7, #0]
 800edfa:	691b      	ldr	r3, [r3, #16]
 800edfc:	011a      	lsls	r2, r3, #4
 800edfe:	683b      	ldr	r3, [r7, #0]
 800ee00:	6a1b      	ldr	r3, [r3, #32]
 800ee02:	031b      	lsls	r3, r3, #12
 800ee04:	4313      	orrs	r3, r2
 800ee06:	693a      	ldr	r2, [r7, #16]
 800ee08:	4313      	orrs	r3, r2
 800ee0a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800ee12:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800ee1a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800ee1c:	683b      	ldr	r3, [r7, #0]
 800ee1e:	685a      	ldr	r2, [r3, #4]
 800ee20:	683b      	ldr	r3, [r7, #0]
 800ee22:	695b      	ldr	r3, [r3, #20]
 800ee24:	011b      	lsls	r3, r3, #4
 800ee26:	4313      	orrs	r3, r2
 800ee28:	68fa      	ldr	r2, [r7, #12]
 800ee2a:	4313      	orrs	r3, r2
 800ee2c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	697a      	ldr	r2, [r7, #20]
 800ee34:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	693a      	ldr	r2, [r7, #16]
 800ee3c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	68fa      	ldr	r2, [r7, #12]
 800ee44:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	2201      	movs	r2, #1
 800ee4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ee4e:	2300      	movs	r3, #0
}
 800ee50:	4618      	mov	r0, r3
 800ee52:	3718      	adds	r7, #24
 800ee54:	46bd      	mov	sp, r7
 800ee56:	bd80      	pop	{r7, pc}

0800ee58 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ee58:	b580      	push	{r7, lr}
 800ee5a:	b082      	sub	sp, #8
 800ee5c:	af00      	add	r7, sp, #0
 800ee5e:	6078      	str	r0, [r7, #4]
 800ee60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800ee62:	683b      	ldr	r3, [r7, #0]
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d003      	beq.n	800ee70 <HAL_TIM_Encoder_Start+0x18>
 800ee68:	683b      	ldr	r3, [r7, #0]
 800ee6a:	2b04      	cmp	r3, #4
 800ee6c:	d008      	beq.n	800ee80 <HAL_TIM_Encoder_Start+0x28>
 800ee6e:	e00f      	b.n	800ee90 <HAL_TIM_Encoder_Start+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	2201      	movs	r2, #1
 800ee76:	2100      	movs	r1, #0
 800ee78:	4618      	mov	r0, r3
 800ee7a:	f000 fc6b 	bl	800f754 <TIM_CCxChannelCmd>
      break;
 800ee7e:	e016      	b.n	800eeae <HAL_TIM_Encoder_Start+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	2201      	movs	r2, #1
 800ee86:	2104      	movs	r1, #4
 800ee88:	4618      	mov	r0, r3
 800ee8a:	f000 fc63 	bl	800f754 <TIM_CCxChannelCmd>
      break;
 800ee8e:	e00e      	b.n	800eeae <HAL_TIM_Encoder_Start+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	2201      	movs	r2, #1
 800ee96:	2100      	movs	r1, #0
 800ee98:	4618      	mov	r0, r3
 800ee9a:	f000 fc5b 	bl	800f754 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	2201      	movs	r2, #1
 800eea4:	2104      	movs	r1, #4
 800eea6:	4618      	mov	r0, r3
 800eea8:	f000 fc54 	bl	800f754 <TIM_CCxChannelCmd>
      break;
 800eeac:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	681a      	ldr	r2, [r3, #0]
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	f042 0201 	orr.w	r2, r2, #1
 800eebc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800eebe:	2300      	movs	r3, #0
}
 800eec0:	4618      	mov	r0, r3
 800eec2:	3708      	adds	r7, #8
 800eec4:	46bd      	mov	sp, r7
 800eec6:	bd80      	pop	{r7, pc}

0800eec8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800eec8:	b580      	push	{r7, lr}
 800eeca:	b082      	sub	sp, #8
 800eecc:	af00      	add	r7, sp, #0
 800eece:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	691b      	ldr	r3, [r3, #16]
 800eed6:	f003 0302 	and.w	r3, r3, #2
 800eeda:	2b02      	cmp	r3, #2
 800eedc:	d122      	bne.n	800ef24 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	68db      	ldr	r3, [r3, #12]
 800eee4:	f003 0302 	and.w	r3, r3, #2
 800eee8:	2b02      	cmp	r3, #2
 800eeea:	d11b      	bne.n	800ef24 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	f06f 0202 	mvn.w	r2, #2
 800eef4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	2201      	movs	r2, #1
 800eefa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	699b      	ldr	r3, [r3, #24]
 800ef02:	f003 0303 	and.w	r3, r3, #3
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d003      	beq.n	800ef12 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ef0a:	6878      	ldr	r0, [r7, #4]
 800ef0c:	f000 f9b4 	bl	800f278 <HAL_TIM_IC_CaptureCallback>
 800ef10:	e005      	b.n	800ef1e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ef12:	6878      	ldr	r0, [r7, #4]
 800ef14:	f000 f9a6 	bl	800f264 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ef18:	6878      	ldr	r0, [r7, #4]
 800ef1a:	f000 f9b7 	bl	800f28c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	2200      	movs	r2, #0
 800ef22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	691b      	ldr	r3, [r3, #16]
 800ef2a:	f003 0304 	and.w	r3, r3, #4
 800ef2e:	2b04      	cmp	r3, #4
 800ef30:	d122      	bne.n	800ef78 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	68db      	ldr	r3, [r3, #12]
 800ef38:	f003 0304 	and.w	r3, r3, #4
 800ef3c:	2b04      	cmp	r3, #4
 800ef3e:	d11b      	bne.n	800ef78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	f06f 0204 	mvn.w	r2, #4
 800ef48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	2202      	movs	r2, #2
 800ef4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	699b      	ldr	r3, [r3, #24]
 800ef56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d003      	beq.n	800ef66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ef5e:	6878      	ldr	r0, [r7, #4]
 800ef60:	f000 f98a 	bl	800f278 <HAL_TIM_IC_CaptureCallback>
 800ef64:	e005      	b.n	800ef72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ef66:	6878      	ldr	r0, [r7, #4]
 800ef68:	f000 f97c 	bl	800f264 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ef6c:	6878      	ldr	r0, [r7, #4]
 800ef6e:	f000 f98d 	bl	800f28c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	2200      	movs	r2, #0
 800ef76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	691b      	ldr	r3, [r3, #16]
 800ef7e:	f003 0308 	and.w	r3, r3, #8
 800ef82:	2b08      	cmp	r3, #8
 800ef84:	d122      	bne.n	800efcc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	68db      	ldr	r3, [r3, #12]
 800ef8c:	f003 0308 	and.w	r3, r3, #8
 800ef90:	2b08      	cmp	r3, #8
 800ef92:	d11b      	bne.n	800efcc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	f06f 0208 	mvn.w	r2, #8
 800ef9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	2204      	movs	r2, #4
 800efa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	69db      	ldr	r3, [r3, #28]
 800efaa:	f003 0303 	and.w	r3, r3, #3
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d003      	beq.n	800efba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800efb2:	6878      	ldr	r0, [r7, #4]
 800efb4:	f000 f960 	bl	800f278 <HAL_TIM_IC_CaptureCallback>
 800efb8:	e005      	b.n	800efc6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800efba:	6878      	ldr	r0, [r7, #4]
 800efbc:	f000 f952 	bl	800f264 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800efc0:	6878      	ldr	r0, [r7, #4]
 800efc2:	f000 f963 	bl	800f28c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	2200      	movs	r2, #0
 800efca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	691b      	ldr	r3, [r3, #16]
 800efd2:	f003 0310 	and.w	r3, r3, #16
 800efd6:	2b10      	cmp	r3, #16
 800efd8:	d122      	bne.n	800f020 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	68db      	ldr	r3, [r3, #12]
 800efe0:	f003 0310 	and.w	r3, r3, #16
 800efe4:	2b10      	cmp	r3, #16
 800efe6:	d11b      	bne.n	800f020 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	f06f 0210 	mvn.w	r2, #16
 800eff0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	2208      	movs	r2, #8
 800eff6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	69db      	ldr	r3, [r3, #28]
 800effe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f002:	2b00      	cmp	r3, #0
 800f004:	d003      	beq.n	800f00e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f006:	6878      	ldr	r0, [r7, #4]
 800f008:	f000 f936 	bl	800f278 <HAL_TIM_IC_CaptureCallback>
 800f00c:	e005      	b.n	800f01a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f00e:	6878      	ldr	r0, [r7, #4]
 800f010:	f000 f928 	bl	800f264 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f014:	6878      	ldr	r0, [r7, #4]
 800f016:	f000 f939 	bl	800f28c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	2200      	movs	r2, #0
 800f01e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	691b      	ldr	r3, [r3, #16]
 800f026:	f003 0301 	and.w	r3, r3, #1
 800f02a:	2b01      	cmp	r3, #1
 800f02c:	d10e      	bne.n	800f04c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	68db      	ldr	r3, [r3, #12]
 800f034:	f003 0301 	and.w	r3, r3, #1
 800f038:	2b01      	cmp	r3, #1
 800f03a:	d107      	bne.n	800f04c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	f06f 0201 	mvn.w	r2, #1
 800f044:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f046:	6878      	ldr	r0, [r7, #4]
 800f048:	f7f6 fd9a 	bl	8005b80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	691b      	ldr	r3, [r3, #16]
 800f052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f056:	2b80      	cmp	r3, #128	; 0x80
 800f058:	d10e      	bne.n	800f078 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	68db      	ldr	r3, [r3, #12]
 800f060:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f064:	2b80      	cmp	r3, #128	; 0x80
 800f066:	d107      	bne.n	800f078 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f070:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f072:	6878      	ldr	r0, [r7, #4]
 800f074:	f000 fc6c 	bl	800f950 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	691b      	ldr	r3, [r3, #16]
 800f07e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f082:	2b40      	cmp	r3, #64	; 0x40
 800f084:	d10e      	bne.n	800f0a4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	68db      	ldr	r3, [r3, #12]
 800f08c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f090:	2b40      	cmp	r3, #64	; 0x40
 800f092:	d107      	bne.n	800f0a4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f09c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f09e:	6878      	ldr	r0, [r7, #4]
 800f0a0:	f000 f8fe 	bl	800f2a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	691b      	ldr	r3, [r3, #16]
 800f0aa:	f003 0320 	and.w	r3, r3, #32
 800f0ae:	2b20      	cmp	r3, #32
 800f0b0:	d10e      	bne.n	800f0d0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	68db      	ldr	r3, [r3, #12]
 800f0b8:	f003 0320 	and.w	r3, r3, #32
 800f0bc:	2b20      	cmp	r3, #32
 800f0be:	d107      	bne.n	800f0d0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	f06f 0220 	mvn.w	r2, #32
 800f0c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f0ca:	6878      	ldr	r0, [r7, #4]
 800f0cc:	f000 fc36 	bl	800f93c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f0d0:	bf00      	nop
 800f0d2:	3708      	adds	r7, #8
 800f0d4:	46bd      	mov	sp, r7
 800f0d6:	bd80      	pop	{r7, pc}

0800f0d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f0d8:	b580      	push	{r7, lr}
 800f0da:	b084      	sub	sp, #16
 800f0dc:	af00      	add	r7, sp, #0
 800f0de:	60f8      	str	r0, [r7, #12]
 800f0e0:	60b9      	str	r1, [r7, #8]
 800f0e2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f0ea:	2b01      	cmp	r3, #1
 800f0ec:	d101      	bne.n	800f0f2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800f0ee:	2302      	movs	r3, #2
 800f0f0:	e0b4      	b.n	800f25c <HAL_TIM_PWM_ConfigChannel+0x184>
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	2201      	movs	r2, #1
 800f0f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	2202      	movs	r2, #2
 800f0fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	2b0c      	cmp	r3, #12
 800f106:	f200 809f 	bhi.w	800f248 <HAL_TIM_PWM_ConfigChannel+0x170>
 800f10a:	a201      	add	r2, pc, #4	; (adr r2, 800f110 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800f10c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f110:	0800f145 	.word	0x0800f145
 800f114:	0800f249 	.word	0x0800f249
 800f118:	0800f249 	.word	0x0800f249
 800f11c:	0800f249 	.word	0x0800f249
 800f120:	0800f185 	.word	0x0800f185
 800f124:	0800f249 	.word	0x0800f249
 800f128:	0800f249 	.word	0x0800f249
 800f12c:	0800f249 	.word	0x0800f249
 800f130:	0800f1c7 	.word	0x0800f1c7
 800f134:	0800f249 	.word	0x0800f249
 800f138:	0800f249 	.word	0x0800f249
 800f13c:	0800f249 	.word	0x0800f249
 800f140:	0800f207 	.word	0x0800f207
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	68b9      	ldr	r1, [r7, #8]
 800f14a:	4618      	mov	r0, r3
 800f14c:	f000 f952 	bl	800f3f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	699a      	ldr	r2, [r3, #24]
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	f042 0208 	orr.w	r2, r2, #8
 800f15e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	699a      	ldr	r2, [r3, #24]
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	f022 0204 	bic.w	r2, r2, #4
 800f16e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	6999      	ldr	r1, [r3, #24]
 800f176:	68bb      	ldr	r3, [r7, #8]
 800f178:	691a      	ldr	r2, [r3, #16]
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	430a      	orrs	r2, r1
 800f180:	619a      	str	r2, [r3, #24]
      break;
 800f182:	e062      	b.n	800f24a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	68b9      	ldr	r1, [r7, #8]
 800f18a:	4618      	mov	r0, r3
 800f18c:	f000 f9a2 	bl	800f4d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	699a      	ldr	r2, [r3, #24]
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f19e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	699a      	ldr	r2, [r3, #24]
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f1ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	6999      	ldr	r1, [r3, #24]
 800f1b6:	68bb      	ldr	r3, [r7, #8]
 800f1b8:	691b      	ldr	r3, [r3, #16]
 800f1ba:	021a      	lsls	r2, r3, #8
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	430a      	orrs	r2, r1
 800f1c2:	619a      	str	r2, [r3, #24]
      break;
 800f1c4:	e041      	b.n	800f24a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	68b9      	ldr	r1, [r7, #8]
 800f1cc:	4618      	mov	r0, r3
 800f1ce:	f000 f9f7 	bl	800f5c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	69da      	ldr	r2, [r3, #28]
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	f042 0208 	orr.w	r2, r2, #8
 800f1e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	69da      	ldr	r2, [r3, #28]
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	f022 0204 	bic.w	r2, r2, #4
 800f1f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	69d9      	ldr	r1, [r3, #28]
 800f1f8:	68bb      	ldr	r3, [r7, #8]
 800f1fa:	691a      	ldr	r2, [r3, #16]
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	430a      	orrs	r2, r1
 800f202:	61da      	str	r2, [r3, #28]
      break;
 800f204:	e021      	b.n	800f24a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	68b9      	ldr	r1, [r7, #8]
 800f20c:	4618      	mov	r0, r3
 800f20e:	f000 fa4b 	bl	800f6a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	69da      	ldr	r2, [r3, #28]
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f220:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	69da      	ldr	r2, [r3, #28]
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f230:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	69d9      	ldr	r1, [r3, #28]
 800f238:	68bb      	ldr	r3, [r7, #8]
 800f23a:	691b      	ldr	r3, [r3, #16]
 800f23c:	021a      	lsls	r2, r3, #8
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	430a      	orrs	r2, r1
 800f244:	61da      	str	r2, [r3, #28]
      break;
 800f246:	e000      	b.n	800f24a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800f248:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	2201      	movs	r2, #1
 800f24e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	2200      	movs	r2, #0
 800f256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f25a:	2300      	movs	r3, #0
}
 800f25c:	4618      	mov	r0, r3
 800f25e:	3710      	adds	r7, #16
 800f260:	46bd      	mov	sp, r7
 800f262:	bd80      	pop	{r7, pc}

0800f264 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f264:	b480      	push	{r7}
 800f266:	b083      	sub	sp, #12
 800f268:	af00      	add	r7, sp, #0
 800f26a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f26c:	bf00      	nop
 800f26e:	370c      	adds	r7, #12
 800f270:	46bd      	mov	sp, r7
 800f272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f276:	4770      	bx	lr

0800f278 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f278:	b480      	push	{r7}
 800f27a:	b083      	sub	sp, #12
 800f27c:	af00      	add	r7, sp, #0
 800f27e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f280:	bf00      	nop
 800f282:	370c      	adds	r7, #12
 800f284:	46bd      	mov	sp, r7
 800f286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f28a:	4770      	bx	lr

0800f28c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f28c:	b480      	push	{r7}
 800f28e:	b083      	sub	sp, #12
 800f290:	af00      	add	r7, sp, #0
 800f292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f294:	bf00      	nop
 800f296:	370c      	adds	r7, #12
 800f298:	46bd      	mov	sp, r7
 800f29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f29e:	4770      	bx	lr

0800f2a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f2a0:	b480      	push	{r7}
 800f2a2:	b083      	sub	sp, #12
 800f2a4:	af00      	add	r7, sp, #0
 800f2a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f2a8:	bf00      	nop
 800f2aa:	370c      	adds	r7, #12
 800f2ac:	46bd      	mov	sp, r7
 800f2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2b2:	4770      	bx	lr

0800f2b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800f2b4:	b480      	push	{r7}
 800f2b6:	b085      	sub	sp, #20
 800f2b8:	af00      	add	r7, sp, #0
 800f2ba:	6078      	str	r0, [r7, #4]
 800f2bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	4a40      	ldr	r2, [pc, #256]	; (800f3c8 <TIM_Base_SetConfig+0x114>)
 800f2c8:	4293      	cmp	r3, r2
 800f2ca:	d013      	beq.n	800f2f4 <TIM_Base_SetConfig+0x40>
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f2d2:	d00f      	beq.n	800f2f4 <TIM_Base_SetConfig+0x40>
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	4a3d      	ldr	r2, [pc, #244]	; (800f3cc <TIM_Base_SetConfig+0x118>)
 800f2d8:	4293      	cmp	r3, r2
 800f2da:	d00b      	beq.n	800f2f4 <TIM_Base_SetConfig+0x40>
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	4a3c      	ldr	r2, [pc, #240]	; (800f3d0 <TIM_Base_SetConfig+0x11c>)
 800f2e0:	4293      	cmp	r3, r2
 800f2e2:	d007      	beq.n	800f2f4 <TIM_Base_SetConfig+0x40>
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	4a3b      	ldr	r2, [pc, #236]	; (800f3d4 <TIM_Base_SetConfig+0x120>)
 800f2e8:	4293      	cmp	r3, r2
 800f2ea:	d003      	beq.n	800f2f4 <TIM_Base_SetConfig+0x40>
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	4a3a      	ldr	r2, [pc, #232]	; (800f3d8 <TIM_Base_SetConfig+0x124>)
 800f2f0:	4293      	cmp	r3, r2
 800f2f2:	d108      	bne.n	800f306 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f2fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f2fc:	683b      	ldr	r3, [r7, #0]
 800f2fe:	685b      	ldr	r3, [r3, #4]
 800f300:	68fa      	ldr	r2, [r7, #12]
 800f302:	4313      	orrs	r3, r2
 800f304:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	4a2f      	ldr	r2, [pc, #188]	; (800f3c8 <TIM_Base_SetConfig+0x114>)
 800f30a:	4293      	cmp	r3, r2
 800f30c:	d02b      	beq.n	800f366 <TIM_Base_SetConfig+0xb2>
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f314:	d027      	beq.n	800f366 <TIM_Base_SetConfig+0xb2>
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	4a2c      	ldr	r2, [pc, #176]	; (800f3cc <TIM_Base_SetConfig+0x118>)
 800f31a:	4293      	cmp	r3, r2
 800f31c:	d023      	beq.n	800f366 <TIM_Base_SetConfig+0xb2>
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	4a2b      	ldr	r2, [pc, #172]	; (800f3d0 <TIM_Base_SetConfig+0x11c>)
 800f322:	4293      	cmp	r3, r2
 800f324:	d01f      	beq.n	800f366 <TIM_Base_SetConfig+0xb2>
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	4a2a      	ldr	r2, [pc, #168]	; (800f3d4 <TIM_Base_SetConfig+0x120>)
 800f32a:	4293      	cmp	r3, r2
 800f32c:	d01b      	beq.n	800f366 <TIM_Base_SetConfig+0xb2>
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	4a29      	ldr	r2, [pc, #164]	; (800f3d8 <TIM_Base_SetConfig+0x124>)
 800f332:	4293      	cmp	r3, r2
 800f334:	d017      	beq.n	800f366 <TIM_Base_SetConfig+0xb2>
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	4a28      	ldr	r2, [pc, #160]	; (800f3dc <TIM_Base_SetConfig+0x128>)
 800f33a:	4293      	cmp	r3, r2
 800f33c:	d013      	beq.n	800f366 <TIM_Base_SetConfig+0xb2>
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	4a27      	ldr	r2, [pc, #156]	; (800f3e0 <TIM_Base_SetConfig+0x12c>)
 800f342:	4293      	cmp	r3, r2
 800f344:	d00f      	beq.n	800f366 <TIM_Base_SetConfig+0xb2>
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	4a26      	ldr	r2, [pc, #152]	; (800f3e4 <TIM_Base_SetConfig+0x130>)
 800f34a:	4293      	cmp	r3, r2
 800f34c:	d00b      	beq.n	800f366 <TIM_Base_SetConfig+0xb2>
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	4a25      	ldr	r2, [pc, #148]	; (800f3e8 <TIM_Base_SetConfig+0x134>)
 800f352:	4293      	cmp	r3, r2
 800f354:	d007      	beq.n	800f366 <TIM_Base_SetConfig+0xb2>
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	4a24      	ldr	r2, [pc, #144]	; (800f3ec <TIM_Base_SetConfig+0x138>)
 800f35a:	4293      	cmp	r3, r2
 800f35c:	d003      	beq.n	800f366 <TIM_Base_SetConfig+0xb2>
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	4a23      	ldr	r2, [pc, #140]	; (800f3f0 <TIM_Base_SetConfig+0x13c>)
 800f362:	4293      	cmp	r3, r2
 800f364:	d108      	bne.n	800f378 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f36c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f36e:	683b      	ldr	r3, [r7, #0]
 800f370:	68db      	ldr	r3, [r3, #12]
 800f372:	68fa      	ldr	r2, [r7, #12]
 800f374:	4313      	orrs	r3, r2
 800f376:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f37e:	683b      	ldr	r3, [r7, #0]
 800f380:	695b      	ldr	r3, [r3, #20]
 800f382:	4313      	orrs	r3, r2
 800f384:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	68fa      	ldr	r2, [r7, #12]
 800f38a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f38c:	683b      	ldr	r3, [r7, #0]
 800f38e:	689a      	ldr	r2, [r3, #8]
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f394:	683b      	ldr	r3, [r7, #0]
 800f396:	681a      	ldr	r2, [r3, #0]
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	4a0a      	ldr	r2, [pc, #40]	; (800f3c8 <TIM_Base_SetConfig+0x114>)
 800f3a0:	4293      	cmp	r3, r2
 800f3a2:	d003      	beq.n	800f3ac <TIM_Base_SetConfig+0xf8>
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	4a0c      	ldr	r2, [pc, #48]	; (800f3d8 <TIM_Base_SetConfig+0x124>)
 800f3a8:	4293      	cmp	r3, r2
 800f3aa:	d103      	bne.n	800f3b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f3ac:	683b      	ldr	r3, [r7, #0]
 800f3ae:	691a      	ldr	r2, [r3, #16]
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	2201      	movs	r2, #1
 800f3b8:	615a      	str	r2, [r3, #20]
}
 800f3ba:	bf00      	nop
 800f3bc:	3714      	adds	r7, #20
 800f3be:	46bd      	mov	sp, r7
 800f3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c4:	4770      	bx	lr
 800f3c6:	bf00      	nop
 800f3c8:	40010000 	.word	0x40010000
 800f3cc:	40000400 	.word	0x40000400
 800f3d0:	40000800 	.word	0x40000800
 800f3d4:	40000c00 	.word	0x40000c00
 800f3d8:	40010400 	.word	0x40010400
 800f3dc:	40014000 	.word	0x40014000
 800f3e0:	40014400 	.word	0x40014400
 800f3e4:	40014800 	.word	0x40014800
 800f3e8:	40001800 	.word	0x40001800
 800f3ec:	40001c00 	.word	0x40001c00
 800f3f0:	40002000 	.word	0x40002000

0800f3f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f3f4:	b480      	push	{r7}
 800f3f6:	b087      	sub	sp, #28
 800f3f8:	af00      	add	r7, sp, #0
 800f3fa:	6078      	str	r0, [r7, #4]
 800f3fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	6a1b      	ldr	r3, [r3, #32]
 800f402:	f023 0201 	bic.w	r2, r3, #1
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	6a1b      	ldr	r3, [r3, #32]
 800f40e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	685b      	ldr	r3, [r3, #4]
 800f414:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	699b      	ldr	r3, [r3, #24]
 800f41a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f422:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	f023 0303 	bic.w	r3, r3, #3
 800f42a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f42c:	683b      	ldr	r3, [r7, #0]
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	68fa      	ldr	r2, [r7, #12]
 800f432:	4313      	orrs	r3, r2
 800f434:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f436:	697b      	ldr	r3, [r7, #20]
 800f438:	f023 0302 	bic.w	r3, r3, #2
 800f43c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f43e:	683b      	ldr	r3, [r7, #0]
 800f440:	689b      	ldr	r3, [r3, #8]
 800f442:	697a      	ldr	r2, [r7, #20]
 800f444:	4313      	orrs	r3, r2
 800f446:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	4a20      	ldr	r2, [pc, #128]	; (800f4cc <TIM_OC1_SetConfig+0xd8>)
 800f44c:	4293      	cmp	r3, r2
 800f44e:	d003      	beq.n	800f458 <TIM_OC1_SetConfig+0x64>
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	4a1f      	ldr	r2, [pc, #124]	; (800f4d0 <TIM_OC1_SetConfig+0xdc>)
 800f454:	4293      	cmp	r3, r2
 800f456:	d10c      	bne.n	800f472 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f458:	697b      	ldr	r3, [r7, #20]
 800f45a:	f023 0308 	bic.w	r3, r3, #8
 800f45e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f460:	683b      	ldr	r3, [r7, #0]
 800f462:	68db      	ldr	r3, [r3, #12]
 800f464:	697a      	ldr	r2, [r7, #20]
 800f466:	4313      	orrs	r3, r2
 800f468:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f46a:	697b      	ldr	r3, [r7, #20]
 800f46c:	f023 0304 	bic.w	r3, r3, #4
 800f470:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	4a15      	ldr	r2, [pc, #84]	; (800f4cc <TIM_OC1_SetConfig+0xd8>)
 800f476:	4293      	cmp	r3, r2
 800f478:	d003      	beq.n	800f482 <TIM_OC1_SetConfig+0x8e>
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	4a14      	ldr	r2, [pc, #80]	; (800f4d0 <TIM_OC1_SetConfig+0xdc>)
 800f47e:	4293      	cmp	r3, r2
 800f480:	d111      	bne.n	800f4a6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f482:	693b      	ldr	r3, [r7, #16]
 800f484:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f488:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f48a:	693b      	ldr	r3, [r7, #16]
 800f48c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f490:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f492:	683b      	ldr	r3, [r7, #0]
 800f494:	695b      	ldr	r3, [r3, #20]
 800f496:	693a      	ldr	r2, [r7, #16]
 800f498:	4313      	orrs	r3, r2
 800f49a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f49c:	683b      	ldr	r3, [r7, #0]
 800f49e:	699b      	ldr	r3, [r3, #24]
 800f4a0:	693a      	ldr	r2, [r7, #16]
 800f4a2:	4313      	orrs	r3, r2
 800f4a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	693a      	ldr	r2, [r7, #16]
 800f4aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	68fa      	ldr	r2, [r7, #12]
 800f4b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f4b2:	683b      	ldr	r3, [r7, #0]
 800f4b4:	685a      	ldr	r2, [r3, #4]
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	697a      	ldr	r2, [r7, #20]
 800f4be:	621a      	str	r2, [r3, #32]
}
 800f4c0:	bf00      	nop
 800f4c2:	371c      	adds	r7, #28
 800f4c4:	46bd      	mov	sp, r7
 800f4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ca:	4770      	bx	lr
 800f4cc:	40010000 	.word	0x40010000
 800f4d0:	40010400 	.word	0x40010400

0800f4d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f4d4:	b480      	push	{r7}
 800f4d6:	b087      	sub	sp, #28
 800f4d8:	af00      	add	r7, sp, #0
 800f4da:	6078      	str	r0, [r7, #4]
 800f4dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	6a1b      	ldr	r3, [r3, #32]
 800f4e2:	f023 0210 	bic.w	r2, r3, #16
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	6a1b      	ldr	r3, [r3, #32]
 800f4ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	685b      	ldr	r3, [r3, #4]
 800f4f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	699b      	ldr	r3, [r3, #24]
 800f4fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f502:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f50a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f50c:	683b      	ldr	r3, [r7, #0]
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	021b      	lsls	r3, r3, #8
 800f512:	68fa      	ldr	r2, [r7, #12]
 800f514:	4313      	orrs	r3, r2
 800f516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f518:	697b      	ldr	r3, [r7, #20]
 800f51a:	f023 0320 	bic.w	r3, r3, #32
 800f51e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f520:	683b      	ldr	r3, [r7, #0]
 800f522:	689b      	ldr	r3, [r3, #8]
 800f524:	011b      	lsls	r3, r3, #4
 800f526:	697a      	ldr	r2, [r7, #20]
 800f528:	4313      	orrs	r3, r2
 800f52a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	4a22      	ldr	r2, [pc, #136]	; (800f5b8 <TIM_OC2_SetConfig+0xe4>)
 800f530:	4293      	cmp	r3, r2
 800f532:	d003      	beq.n	800f53c <TIM_OC2_SetConfig+0x68>
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	4a21      	ldr	r2, [pc, #132]	; (800f5bc <TIM_OC2_SetConfig+0xe8>)
 800f538:	4293      	cmp	r3, r2
 800f53a:	d10d      	bne.n	800f558 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f53c:	697b      	ldr	r3, [r7, #20]
 800f53e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f542:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f544:	683b      	ldr	r3, [r7, #0]
 800f546:	68db      	ldr	r3, [r3, #12]
 800f548:	011b      	lsls	r3, r3, #4
 800f54a:	697a      	ldr	r2, [r7, #20]
 800f54c:	4313      	orrs	r3, r2
 800f54e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f550:	697b      	ldr	r3, [r7, #20]
 800f552:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f556:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	4a17      	ldr	r2, [pc, #92]	; (800f5b8 <TIM_OC2_SetConfig+0xe4>)
 800f55c:	4293      	cmp	r3, r2
 800f55e:	d003      	beq.n	800f568 <TIM_OC2_SetConfig+0x94>
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	4a16      	ldr	r2, [pc, #88]	; (800f5bc <TIM_OC2_SetConfig+0xe8>)
 800f564:	4293      	cmp	r3, r2
 800f566:	d113      	bne.n	800f590 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f568:	693b      	ldr	r3, [r7, #16]
 800f56a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f56e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f570:	693b      	ldr	r3, [r7, #16]
 800f572:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f576:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f578:	683b      	ldr	r3, [r7, #0]
 800f57a:	695b      	ldr	r3, [r3, #20]
 800f57c:	009b      	lsls	r3, r3, #2
 800f57e:	693a      	ldr	r2, [r7, #16]
 800f580:	4313      	orrs	r3, r2
 800f582:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f584:	683b      	ldr	r3, [r7, #0]
 800f586:	699b      	ldr	r3, [r3, #24]
 800f588:	009b      	lsls	r3, r3, #2
 800f58a:	693a      	ldr	r2, [r7, #16]
 800f58c:	4313      	orrs	r3, r2
 800f58e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	693a      	ldr	r2, [r7, #16]
 800f594:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	68fa      	ldr	r2, [r7, #12]
 800f59a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f59c:	683b      	ldr	r3, [r7, #0]
 800f59e:	685a      	ldr	r2, [r3, #4]
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	697a      	ldr	r2, [r7, #20]
 800f5a8:	621a      	str	r2, [r3, #32]
}
 800f5aa:	bf00      	nop
 800f5ac:	371c      	adds	r7, #28
 800f5ae:	46bd      	mov	sp, r7
 800f5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b4:	4770      	bx	lr
 800f5b6:	bf00      	nop
 800f5b8:	40010000 	.word	0x40010000
 800f5bc:	40010400 	.word	0x40010400

0800f5c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f5c0:	b480      	push	{r7}
 800f5c2:	b087      	sub	sp, #28
 800f5c4:	af00      	add	r7, sp, #0
 800f5c6:	6078      	str	r0, [r7, #4]
 800f5c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	6a1b      	ldr	r3, [r3, #32]
 800f5ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	6a1b      	ldr	r3, [r3, #32]
 800f5da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	685b      	ldr	r3, [r3, #4]
 800f5e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	69db      	ldr	r3, [r3, #28]
 800f5e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f5ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	f023 0303 	bic.w	r3, r3, #3
 800f5f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f5f8:	683b      	ldr	r3, [r7, #0]
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	68fa      	ldr	r2, [r7, #12]
 800f5fe:	4313      	orrs	r3, r2
 800f600:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f602:	697b      	ldr	r3, [r7, #20]
 800f604:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f608:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f60a:	683b      	ldr	r3, [r7, #0]
 800f60c:	689b      	ldr	r3, [r3, #8]
 800f60e:	021b      	lsls	r3, r3, #8
 800f610:	697a      	ldr	r2, [r7, #20]
 800f612:	4313      	orrs	r3, r2
 800f614:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	4a21      	ldr	r2, [pc, #132]	; (800f6a0 <TIM_OC3_SetConfig+0xe0>)
 800f61a:	4293      	cmp	r3, r2
 800f61c:	d003      	beq.n	800f626 <TIM_OC3_SetConfig+0x66>
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	4a20      	ldr	r2, [pc, #128]	; (800f6a4 <TIM_OC3_SetConfig+0xe4>)
 800f622:	4293      	cmp	r3, r2
 800f624:	d10d      	bne.n	800f642 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f626:	697b      	ldr	r3, [r7, #20]
 800f628:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f62c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f62e:	683b      	ldr	r3, [r7, #0]
 800f630:	68db      	ldr	r3, [r3, #12]
 800f632:	021b      	lsls	r3, r3, #8
 800f634:	697a      	ldr	r2, [r7, #20]
 800f636:	4313      	orrs	r3, r2
 800f638:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f63a:	697b      	ldr	r3, [r7, #20]
 800f63c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f640:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	4a16      	ldr	r2, [pc, #88]	; (800f6a0 <TIM_OC3_SetConfig+0xe0>)
 800f646:	4293      	cmp	r3, r2
 800f648:	d003      	beq.n	800f652 <TIM_OC3_SetConfig+0x92>
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	4a15      	ldr	r2, [pc, #84]	; (800f6a4 <TIM_OC3_SetConfig+0xe4>)
 800f64e:	4293      	cmp	r3, r2
 800f650:	d113      	bne.n	800f67a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f652:	693b      	ldr	r3, [r7, #16]
 800f654:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f658:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f65a:	693b      	ldr	r3, [r7, #16]
 800f65c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f660:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f662:	683b      	ldr	r3, [r7, #0]
 800f664:	695b      	ldr	r3, [r3, #20]
 800f666:	011b      	lsls	r3, r3, #4
 800f668:	693a      	ldr	r2, [r7, #16]
 800f66a:	4313      	orrs	r3, r2
 800f66c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f66e:	683b      	ldr	r3, [r7, #0]
 800f670:	699b      	ldr	r3, [r3, #24]
 800f672:	011b      	lsls	r3, r3, #4
 800f674:	693a      	ldr	r2, [r7, #16]
 800f676:	4313      	orrs	r3, r2
 800f678:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	693a      	ldr	r2, [r7, #16]
 800f67e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	68fa      	ldr	r2, [r7, #12]
 800f684:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f686:	683b      	ldr	r3, [r7, #0]
 800f688:	685a      	ldr	r2, [r3, #4]
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	697a      	ldr	r2, [r7, #20]
 800f692:	621a      	str	r2, [r3, #32]
}
 800f694:	bf00      	nop
 800f696:	371c      	adds	r7, #28
 800f698:	46bd      	mov	sp, r7
 800f69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f69e:	4770      	bx	lr
 800f6a0:	40010000 	.word	0x40010000
 800f6a4:	40010400 	.word	0x40010400

0800f6a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f6a8:	b480      	push	{r7}
 800f6aa:	b087      	sub	sp, #28
 800f6ac:	af00      	add	r7, sp, #0
 800f6ae:	6078      	str	r0, [r7, #4]
 800f6b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	6a1b      	ldr	r3, [r3, #32]
 800f6b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	6a1b      	ldr	r3, [r3, #32]
 800f6c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	685b      	ldr	r3, [r3, #4]
 800f6c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	69db      	ldr	r3, [r3, #28]
 800f6ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f6d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f6de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f6e0:	683b      	ldr	r3, [r7, #0]
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	021b      	lsls	r3, r3, #8
 800f6e6:	68fa      	ldr	r2, [r7, #12]
 800f6e8:	4313      	orrs	r3, r2
 800f6ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f6ec:	693b      	ldr	r3, [r7, #16]
 800f6ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f6f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f6f4:	683b      	ldr	r3, [r7, #0]
 800f6f6:	689b      	ldr	r3, [r3, #8]
 800f6f8:	031b      	lsls	r3, r3, #12
 800f6fa:	693a      	ldr	r2, [r7, #16]
 800f6fc:	4313      	orrs	r3, r2
 800f6fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	4a12      	ldr	r2, [pc, #72]	; (800f74c <TIM_OC4_SetConfig+0xa4>)
 800f704:	4293      	cmp	r3, r2
 800f706:	d003      	beq.n	800f710 <TIM_OC4_SetConfig+0x68>
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	4a11      	ldr	r2, [pc, #68]	; (800f750 <TIM_OC4_SetConfig+0xa8>)
 800f70c:	4293      	cmp	r3, r2
 800f70e:	d109      	bne.n	800f724 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f710:	697b      	ldr	r3, [r7, #20]
 800f712:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f716:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f718:	683b      	ldr	r3, [r7, #0]
 800f71a:	695b      	ldr	r3, [r3, #20]
 800f71c:	019b      	lsls	r3, r3, #6
 800f71e:	697a      	ldr	r2, [r7, #20]
 800f720:	4313      	orrs	r3, r2
 800f722:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	697a      	ldr	r2, [r7, #20]
 800f728:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	68fa      	ldr	r2, [r7, #12]
 800f72e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f730:	683b      	ldr	r3, [r7, #0]
 800f732:	685a      	ldr	r2, [r3, #4]
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	693a      	ldr	r2, [r7, #16]
 800f73c:	621a      	str	r2, [r3, #32]
}
 800f73e:	bf00      	nop
 800f740:	371c      	adds	r7, #28
 800f742:	46bd      	mov	sp, r7
 800f744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f748:	4770      	bx	lr
 800f74a:	bf00      	nop
 800f74c:	40010000 	.word	0x40010000
 800f750:	40010400 	.word	0x40010400

0800f754 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f754:	b480      	push	{r7}
 800f756:	b087      	sub	sp, #28
 800f758:	af00      	add	r7, sp, #0
 800f75a:	60f8      	str	r0, [r7, #12]
 800f75c:	60b9      	str	r1, [r7, #8]
 800f75e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f760:	68bb      	ldr	r3, [r7, #8]
 800f762:	f003 031f 	and.w	r3, r3, #31
 800f766:	2201      	movs	r2, #1
 800f768:	fa02 f303 	lsl.w	r3, r2, r3
 800f76c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	6a1a      	ldr	r2, [r3, #32]
 800f772:	697b      	ldr	r3, [r7, #20]
 800f774:	43db      	mvns	r3, r3
 800f776:	401a      	ands	r2, r3
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f77c:	68fb      	ldr	r3, [r7, #12]
 800f77e:	6a1a      	ldr	r2, [r3, #32]
 800f780:	68bb      	ldr	r3, [r7, #8]
 800f782:	f003 031f 	and.w	r3, r3, #31
 800f786:	6879      	ldr	r1, [r7, #4]
 800f788:	fa01 f303 	lsl.w	r3, r1, r3
 800f78c:	431a      	orrs	r2, r3
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	621a      	str	r2, [r3, #32]
}
 800f792:	bf00      	nop
 800f794:	371c      	adds	r7, #28
 800f796:	46bd      	mov	sp, r7
 800f798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f79c:	4770      	bx	lr
	...

0800f7a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f7a0:	b480      	push	{r7}
 800f7a2:	b085      	sub	sp, #20
 800f7a4:	af00      	add	r7, sp, #0
 800f7a6:	6078      	str	r0, [r7, #4]
 800f7a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f7b0:	2b01      	cmp	r3, #1
 800f7b2:	d101      	bne.n	800f7b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f7b4:	2302      	movs	r3, #2
 800f7b6:	e05a      	b.n	800f86e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	2201      	movs	r2, #1
 800f7bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	2202      	movs	r2, #2
 800f7c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	685b      	ldr	r3, [r3, #4]
 800f7ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	689b      	ldr	r3, [r3, #8]
 800f7d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f7de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f7e0:	683b      	ldr	r3, [r7, #0]
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	68fa      	ldr	r2, [r7, #12]
 800f7e6:	4313      	orrs	r3, r2
 800f7e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	68fa      	ldr	r2, [r7, #12]
 800f7f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	681b      	ldr	r3, [r3, #0]
 800f7f6:	4a21      	ldr	r2, [pc, #132]	; (800f87c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800f7f8:	4293      	cmp	r3, r2
 800f7fa:	d022      	beq.n	800f842 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f804:	d01d      	beq.n	800f842 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	4a1d      	ldr	r2, [pc, #116]	; (800f880 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800f80c:	4293      	cmp	r3, r2
 800f80e:	d018      	beq.n	800f842 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	4a1b      	ldr	r2, [pc, #108]	; (800f884 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800f816:	4293      	cmp	r3, r2
 800f818:	d013      	beq.n	800f842 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	4a1a      	ldr	r2, [pc, #104]	; (800f888 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800f820:	4293      	cmp	r3, r2
 800f822:	d00e      	beq.n	800f842 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	4a18      	ldr	r2, [pc, #96]	; (800f88c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800f82a:	4293      	cmp	r3, r2
 800f82c:	d009      	beq.n	800f842 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	4a17      	ldr	r2, [pc, #92]	; (800f890 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800f834:	4293      	cmp	r3, r2
 800f836:	d004      	beq.n	800f842 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	4a15      	ldr	r2, [pc, #84]	; (800f894 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800f83e:	4293      	cmp	r3, r2
 800f840:	d10c      	bne.n	800f85c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f842:	68bb      	ldr	r3, [r7, #8]
 800f844:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f848:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f84a:	683b      	ldr	r3, [r7, #0]
 800f84c:	685b      	ldr	r3, [r3, #4]
 800f84e:	68ba      	ldr	r2, [r7, #8]
 800f850:	4313      	orrs	r3, r2
 800f852:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	68ba      	ldr	r2, [r7, #8]
 800f85a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	2201      	movs	r2, #1
 800f860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	2200      	movs	r2, #0
 800f868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f86c:	2300      	movs	r3, #0
}
 800f86e:	4618      	mov	r0, r3
 800f870:	3714      	adds	r7, #20
 800f872:	46bd      	mov	sp, r7
 800f874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f878:	4770      	bx	lr
 800f87a:	bf00      	nop
 800f87c:	40010000 	.word	0x40010000
 800f880:	40000400 	.word	0x40000400
 800f884:	40000800 	.word	0x40000800
 800f888:	40000c00 	.word	0x40000c00
 800f88c:	40010400 	.word	0x40010400
 800f890:	40014000 	.word	0x40014000
 800f894:	40001800 	.word	0x40001800

0800f898 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800f898:	b480      	push	{r7}
 800f89a:	b085      	sub	sp, #20
 800f89c:	af00      	add	r7, sp, #0
 800f89e:	6078      	str	r0, [r7, #4]
 800f8a0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800f8a2:	2300      	movs	r3, #0
 800f8a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f8ac:	2b01      	cmp	r3, #1
 800f8ae:	d101      	bne.n	800f8b4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800f8b0:	2302      	movs	r3, #2
 800f8b2:	e03d      	b.n	800f930 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	2201      	movs	r2, #1
 800f8b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800f8bc:	68fb      	ldr	r3, [r7, #12]
 800f8be:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800f8c2:	683b      	ldr	r3, [r7, #0]
 800f8c4:	68db      	ldr	r3, [r3, #12]
 800f8c6:	4313      	orrs	r3, r2
 800f8c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800f8ca:	68fb      	ldr	r3, [r7, #12]
 800f8cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800f8d0:	683b      	ldr	r3, [r7, #0]
 800f8d2:	689b      	ldr	r3, [r3, #8]
 800f8d4:	4313      	orrs	r3, r2
 800f8d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800f8de:	683b      	ldr	r3, [r7, #0]
 800f8e0:	685b      	ldr	r3, [r3, #4]
 800f8e2:	4313      	orrs	r3, r2
 800f8e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800f8ec:	683b      	ldr	r3, [r7, #0]
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	4313      	orrs	r3, r2
 800f8f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f8fa:	683b      	ldr	r3, [r7, #0]
 800f8fc:	691b      	ldr	r3, [r3, #16]
 800f8fe:	4313      	orrs	r3, r2
 800f900:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800f908:	683b      	ldr	r3, [r7, #0]
 800f90a:	695b      	ldr	r3, [r3, #20]
 800f90c:	4313      	orrs	r3, r2
 800f90e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800f910:	68fb      	ldr	r3, [r7, #12]
 800f912:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800f916:	683b      	ldr	r3, [r7, #0]
 800f918:	69db      	ldr	r3, [r3, #28]
 800f91a:	4313      	orrs	r3, r2
 800f91c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	68fa      	ldr	r2, [r7, #12]
 800f924:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	2200      	movs	r2, #0
 800f92a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f92e:	2300      	movs	r3, #0
}
 800f930:	4618      	mov	r0, r3
 800f932:	3714      	adds	r7, #20
 800f934:	46bd      	mov	sp, r7
 800f936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f93a:	4770      	bx	lr

0800f93c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f93c:	b480      	push	{r7}
 800f93e:	b083      	sub	sp, #12
 800f940:	af00      	add	r7, sp, #0
 800f942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f944:	bf00      	nop
 800f946:	370c      	adds	r7, #12
 800f948:	46bd      	mov	sp, r7
 800f94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f94e:	4770      	bx	lr

0800f950 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f950:	b480      	push	{r7}
 800f952:	b083      	sub	sp, #12
 800f954:	af00      	add	r7, sp, #0
 800f956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f958:	bf00      	nop
 800f95a:	370c      	adds	r7, #12
 800f95c:	46bd      	mov	sp, r7
 800f95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f962:	4770      	bx	lr

0800f964 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f964:	b580      	push	{r7, lr}
 800f966:	b082      	sub	sp, #8
 800f968:	af00      	add	r7, sp, #0
 800f96a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d101      	bne.n	800f976 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f972:	2301      	movs	r3, #1
 800f974:	e03f      	b.n	800f9f6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800f97c:	b2db      	uxtb	r3, r3
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d106      	bne.n	800f990 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	2200      	movs	r2, #0
 800f986:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f98a:	6878      	ldr	r0, [r7, #4]
 800f98c:	f7f7 fd38 	bl	8007400 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	2224      	movs	r2, #36	; 0x24
 800f994:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	68da      	ldr	r2, [r3, #12]
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f9a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800f9a8:	6878      	ldr	r0, [r7, #4]
 800f9aa:	f000 f829 	bl	800fa00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	681b      	ldr	r3, [r3, #0]
 800f9b2:	691a      	ldr	r2, [r3, #16]
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f9bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	681b      	ldr	r3, [r3, #0]
 800f9c2:	695a      	ldr	r2, [r3, #20]
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f9cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	68da      	ldr	r2, [r3, #12]
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f9dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	2200      	movs	r2, #0
 800f9e2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	2220      	movs	r2, #32
 800f9e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	2220      	movs	r2, #32
 800f9f0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800f9f4:	2300      	movs	r3, #0
}
 800f9f6:	4618      	mov	r0, r3
 800f9f8:	3708      	adds	r7, #8
 800f9fa:	46bd      	mov	sp, r7
 800f9fc:	bd80      	pop	{r7, pc}
	...

0800fa00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800fa00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa04:	b0bd      	sub	sp, #244	; 0xf4
 800fa06:	af00      	add	r7, sp, #0
 800fa08:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800fa0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	691b      	ldr	r3, [r3, #16]
 800fa14:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800fa18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fa1c:	68d9      	ldr	r1, [r3, #12]
 800fa1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fa22:	681a      	ldr	r2, [r3, #0]
 800fa24:	ea40 0301 	orr.w	r3, r0, r1
 800fa28:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800fa2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fa2e:	689a      	ldr	r2, [r3, #8]
 800fa30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fa34:	691b      	ldr	r3, [r3, #16]
 800fa36:	431a      	orrs	r2, r3
 800fa38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fa3c:	695b      	ldr	r3, [r3, #20]
 800fa3e:	431a      	orrs	r2, r3
 800fa40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fa44:	69db      	ldr	r3, [r3, #28]
 800fa46:	4313      	orrs	r3, r2
 800fa48:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 800fa4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fa50:	681b      	ldr	r3, [r3, #0]
 800fa52:	68db      	ldr	r3, [r3, #12]
 800fa54:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800fa58:	f021 010c 	bic.w	r1, r1, #12
 800fa5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fa60:	681a      	ldr	r2, [r3, #0]
 800fa62:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800fa66:	430b      	orrs	r3, r1
 800fa68:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800fa6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	695b      	ldr	r3, [r3, #20]
 800fa72:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800fa76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fa7a:	6999      	ldr	r1, [r3, #24]
 800fa7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fa80:	681a      	ldr	r2, [r3, #0]
 800fa82:	ea40 0301 	orr.w	r3, r0, r1
 800fa86:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fa88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fa8c:	69db      	ldr	r3, [r3, #28]
 800fa8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fa92:	f040 81a5 	bne.w	800fde0 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800fa96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fa9a:	681a      	ldr	r2, [r3, #0]
 800fa9c:	4bcd      	ldr	r3, [pc, #820]	; (800fdd4 <UART_SetConfig+0x3d4>)
 800fa9e:	429a      	cmp	r2, r3
 800faa0:	d006      	beq.n	800fab0 <UART_SetConfig+0xb0>
 800faa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800faa6:	681a      	ldr	r2, [r3, #0]
 800faa8:	4bcb      	ldr	r3, [pc, #812]	; (800fdd8 <UART_SetConfig+0x3d8>)
 800faaa:	429a      	cmp	r2, r3
 800faac:	f040 80cb 	bne.w	800fc46 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800fab0:	f7fc fbba 	bl	800c228 <HAL_RCC_GetPCLK2Freq>
 800fab4:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800fab8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800fabc:	461c      	mov	r4, r3
 800fabe:	f04f 0500 	mov.w	r5, #0
 800fac2:	4622      	mov	r2, r4
 800fac4:	462b      	mov	r3, r5
 800fac6:	1891      	adds	r1, r2, r2
 800fac8:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800facc:	415b      	adcs	r3, r3
 800face:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800fad2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800fad6:	1912      	adds	r2, r2, r4
 800fad8:	eb45 0303 	adc.w	r3, r5, r3
 800fadc:	f04f 0000 	mov.w	r0, #0
 800fae0:	f04f 0100 	mov.w	r1, #0
 800fae4:	00d9      	lsls	r1, r3, #3
 800fae6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800faea:	00d0      	lsls	r0, r2, #3
 800faec:	4602      	mov	r2, r0
 800faee:	460b      	mov	r3, r1
 800faf0:	1911      	adds	r1, r2, r4
 800faf2:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 800faf6:	416b      	adcs	r3, r5
 800faf8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800fafc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fb00:	685b      	ldr	r3, [r3, #4]
 800fb02:	461a      	mov	r2, r3
 800fb04:	f04f 0300 	mov.w	r3, #0
 800fb08:	1891      	adds	r1, r2, r2
 800fb0a:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800fb0e:	415b      	adcs	r3, r3
 800fb10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800fb14:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800fb18:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800fb1c:	f7f1 f8cc 	bl	8000cb8 <__aeabi_uldivmod>
 800fb20:	4602      	mov	r2, r0
 800fb22:	460b      	mov	r3, r1
 800fb24:	4bad      	ldr	r3, [pc, #692]	; (800fddc <UART_SetConfig+0x3dc>)
 800fb26:	fba3 2302 	umull	r2, r3, r3, r2
 800fb2a:	095b      	lsrs	r3, r3, #5
 800fb2c:	011e      	lsls	r6, r3, #4
 800fb2e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800fb32:	461c      	mov	r4, r3
 800fb34:	f04f 0500 	mov.w	r5, #0
 800fb38:	4622      	mov	r2, r4
 800fb3a:	462b      	mov	r3, r5
 800fb3c:	1891      	adds	r1, r2, r2
 800fb3e:	67b9      	str	r1, [r7, #120]	; 0x78
 800fb40:	415b      	adcs	r3, r3
 800fb42:	67fb      	str	r3, [r7, #124]	; 0x7c
 800fb44:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800fb48:	1912      	adds	r2, r2, r4
 800fb4a:	eb45 0303 	adc.w	r3, r5, r3
 800fb4e:	f04f 0000 	mov.w	r0, #0
 800fb52:	f04f 0100 	mov.w	r1, #0
 800fb56:	00d9      	lsls	r1, r3, #3
 800fb58:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800fb5c:	00d0      	lsls	r0, r2, #3
 800fb5e:	4602      	mov	r2, r0
 800fb60:	460b      	mov	r3, r1
 800fb62:	1911      	adds	r1, r2, r4
 800fb64:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 800fb68:	416b      	adcs	r3, r5
 800fb6a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800fb6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fb72:	685b      	ldr	r3, [r3, #4]
 800fb74:	461a      	mov	r2, r3
 800fb76:	f04f 0300 	mov.w	r3, #0
 800fb7a:	1891      	adds	r1, r2, r2
 800fb7c:	6739      	str	r1, [r7, #112]	; 0x70
 800fb7e:	415b      	adcs	r3, r3
 800fb80:	677b      	str	r3, [r7, #116]	; 0x74
 800fb82:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800fb86:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800fb8a:	f7f1 f895 	bl	8000cb8 <__aeabi_uldivmod>
 800fb8e:	4602      	mov	r2, r0
 800fb90:	460b      	mov	r3, r1
 800fb92:	4b92      	ldr	r3, [pc, #584]	; (800fddc <UART_SetConfig+0x3dc>)
 800fb94:	fba3 1302 	umull	r1, r3, r3, r2
 800fb98:	095b      	lsrs	r3, r3, #5
 800fb9a:	2164      	movs	r1, #100	; 0x64
 800fb9c:	fb01 f303 	mul.w	r3, r1, r3
 800fba0:	1ad3      	subs	r3, r2, r3
 800fba2:	00db      	lsls	r3, r3, #3
 800fba4:	3332      	adds	r3, #50	; 0x32
 800fba6:	4a8d      	ldr	r2, [pc, #564]	; (800fddc <UART_SetConfig+0x3dc>)
 800fba8:	fba2 2303 	umull	r2, r3, r2, r3
 800fbac:	095b      	lsrs	r3, r3, #5
 800fbae:	005b      	lsls	r3, r3, #1
 800fbb0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800fbb4:	441e      	add	r6, r3
 800fbb6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800fbba:	4618      	mov	r0, r3
 800fbbc:	f04f 0100 	mov.w	r1, #0
 800fbc0:	4602      	mov	r2, r0
 800fbc2:	460b      	mov	r3, r1
 800fbc4:	1894      	adds	r4, r2, r2
 800fbc6:	66bc      	str	r4, [r7, #104]	; 0x68
 800fbc8:	415b      	adcs	r3, r3
 800fbca:	66fb      	str	r3, [r7, #108]	; 0x6c
 800fbcc:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800fbd0:	1812      	adds	r2, r2, r0
 800fbd2:	eb41 0303 	adc.w	r3, r1, r3
 800fbd6:	f04f 0400 	mov.w	r4, #0
 800fbda:	f04f 0500 	mov.w	r5, #0
 800fbde:	00dd      	lsls	r5, r3, #3
 800fbe0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800fbe4:	00d4      	lsls	r4, r2, #3
 800fbe6:	4622      	mov	r2, r4
 800fbe8:	462b      	mov	r3, r5
 800fbea:	1814      	adds	r4, r2, r0
 800fbec:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 800fbf0:	414b      	adcs	r3, r1
 800fbf2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800fbf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fbfa:	685b      	ldr	r3, [r3, #4]
 800fbfc:	461a      	mov	r2, r3
 800fbfe:	f04f 0300 	mov.w	r3, #0
 800fc02:	1891      	adds	r1, r2, r2
 800fc04:	6639      	str	r1, [r7, #96]	; 0x60
 800fc06:	415b      	adcs	r3, r3
 800fc08:	667b      	str	r3, [r7, #100]	; 0x64
 800fc0a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800fc0e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800fc12:	f7f1 f851 	bl	8000cb8 <__aeabi_uldivmod>
 800fc16:	4602      	mov	r2, r0
 800fc18:	460b      	mov	r3, r1
 800fc1a:	4b70      	ldr	r3, [pc, #448]	; (800fddc <UART_SetConfig+0x3dc>)
 800fc1c:	fba3 1302 	umull	r1, r3, r3, r2
 800fc20:	095b      	lsrs	r3, r3, #5
 800fc22:	2164      	movs	r1, #100	; 0x64
 800fc24:	fb01 f303 	mul.w	r3, r1, r3
 800fc28:	1ad3      	subs	r3, r2, r3
 800fc2a:	00db      	lsls	r3, r3, #3
 800fc2c:	3332      	adds	r3, #50	; 0x32
 800fc2e:	4a6b      	ldr	r2, [pc, #428]	; (800fddc <UART_SetConfig+0x3dc>)
 800fc30:	fba2 2303 	umull	r2, r3, r2, r3
 800fc34:	095b      	lsrs	r3, r3, #5
 800fc36:	f003 0207 	and.w	r2, r3, #7
 800fc3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	4432      	add	r2, r6
 800fc42:	609a      	str	r2, [r3, #8]
 800fc44:	e26d      	b.n	8010122 <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800fc46:	f7fc fadb 	bl	800c200 <HAL_RCC_GetPCLK1Freq>
 800fc4a:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800fc4e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800fc52:	461c      	mov	r4, r3
 800fc54:	f04f 0500 	mov.w	r5, #0
 800fc58:	4622      	mov	r2, r4
 800fc5a:	462b      	mov	r3, r5
 800fc5c:	1891      	adds	r1, r2, r2
 800fc5e:	65b9      	str	r1, [r7, #88]	; 0x58
 800fc60:	415b      	adcs	r3, r3
 800fc62:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fc64:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800fc68:	1912      	adds	r2, r2, r4
 800fc6a:	eb45 0303 	adc.w	r3, r5, r3
 800fc6e:	f04f 0000 	mov.w	r0, #0
 800fc72:	f04f 0100 	mov.w	r1, #0
 800fc76:	00d9      	lsls	r1, r3, #3
 800fc78:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800fc7c:	00d0      	lsls	r0, r2, #3
 800fc7e:	4602      	mov	r2, r0
 800fc80:	460b      	mov	r3, r1
 800fc82:	1911      	adds	r1, r2, r4
 800fc84:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 800fc88:	416b      	adcs	r3, r5
 800fc8a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800fc8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fc92:	685b      	ldr	r3, [r3, #4]
 800fc94:	461a      	mov	r2, r3
 800fc96:	f04f 0300 	mov.w	r3, #0
 800fc9a:	1891      	adds	r1, r2, r2
 800fc9c:	6539      	str	r1, [r7, #80]	; 0x50
 800fc9e:	415b      	adcs	r3, r3
 800fca0:	657b      	str	r3, [r7, #84]	; 0x54
 800fca2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800fca6:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800fcaa:	f7f1 f805 	bl	8000cb8 <__aeabi_uldivmod>
 800fcae:	4602      	mov	r2, r0
 800fcb0:	460b      	mov	r3, r1
 800fcb2:	4b4a      	ldr	r3, [pc, #296]	; (800fddc <UART_SetConfig+0x3dc>)
 800fcb4:	fba3 2302 	umull	r2, r3, r3, r2
 800fcb8:	095b      	lsrs	r3, r3, #5
 800fcba:	011e      	lsls	r6, r3, #4
 800fcbc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800fcc0:	461c      	mov	r4, r3
 800fcc2:	f04f 0500 	mov.w	r5, #0
 800fcc6:	4622      	mov	r2, r4
 800fcc8:	462b      	mov	r3, r5
 800fcca:	1891      	adds	r1, r2, r2
 800fccc:	64b9      	str	r1, [r7, #72]	; 0x48
 800fcce:	415b      	adcs	r3, r3
 800fcd0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fcd2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800fcd6:	1912      	adds	r2, r2, r4
 800fcd8:	eb45 0303 	adc.w	r3, r5, r3
 800fcdc:	f04f 0000 	mov.w	r0, #0
 800fce0:	f04f 0100 	mov.w	r1, #0
 800fce4:	00d9      	lsls	r1, r3, #3
 800fce6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800fcea:	00d0      	lsls	r0, r2, #3
 800fcec:	4602      	mov	r2, r0
 800fcee:	460b      	mov	r3, r1
 800fcf0:	1911      	adds	r1, r2, r4
 800fcf2:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 800fcf6:	416b      	adcs	r3, r5
 800fcf8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800fcfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fd00:	685b      	ldr	r3, [r3, #4]
 800fd02:	461a      	mov	r2, r3
 800fd04:	f04f 0300 	mov.w	r3, #0
 800fd08:	1891      	adds	r1, r2, r2
 800fd0a:	6439      	str	r1, [r7, #64]	; 0x40
 800fd0c:	415b      	adcs	r3, r3
 800fd0e:	647b      	str	r3, [r7, #68]	; 0x44
 800fd10:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800fd14:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800fd18:	f7f0 ffce 	bl	8000cb8 <__aeabi_uldivmod>
 800fd1c:	4602      	mov	r2, r0
 800fd1e:	460b      	mov	r3, r1
 800fd20:	4b2e      	ldr	r3, [pc, #184]	; (800fddc <UART_SetConfig+0x3dc>)
 800fd22:	fba3 1302 	umull	r1, r3, r3, r2
 800fd26:	095b      	lsrs	r3, r3, #5
 800fd28:	2164      	movs	r1, #100	; 0x64
 800fd2a:	fb01 f303 	mul.w	r3, r1, r3
 800fd2e:	1ad3      	subs	r3, r2, r3
 800fd30:	00db      	lsls	r3, r3, #3
 800fd32:	3332      	adds	r3, #50	; 0x32
 800fd34:	4a29      	ldr	r2, [pc, #164]	; (800fddc <UART_SetConfig+0x3dc>)
 800fd36:	fba2 2303 	umull	r2, r3, r2, r3
 800fd3a:	095b      	lsrs	r3, r3, #5
 800fd3c:	005b      	lsls	r3, r3, #1
 800fd3e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800fd42:	441e      	add	r6, r3
 800fd44:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800fd48:	4618      	mov	r0, r3
 800fd4a:	f04f 0100 	mov.w	r1, #0
 800fd4e:	4602      	mov	r2, r0
 800fd50:	460b      	mov	r3, r1
 800fd52:	1894      	adds	r4, r2, r2
 800fd54:	63bc      	str	r4, [r7, #56]	; 0x38
 800fd56:	415b      	adcs	r3, r3
 800fd58:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fd5a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800fd5e:	1812      	adds	r2, r2, r0
 800fd60:	eb41 0303 	adc.w	r3, r1, r3
 800fd64:	f04f 0400 	mov.w	r4, #0
 800fd68:	f04f 0500 	mov.w	r5, #0
 800fd6c:	00dd      	lsls	r5, r3, #3
 800fd6e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800fd72:	00d4      	lsls	r4, r2, #3
 800fd74:	4622      	mov	r2, r4
 800fd76:	462b      	mov	r3, r5
 800fd78:	1814      	adds	r4, r2, r0
 800fd7a:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 800fd7e:	414b      	adcs	r3, r1
 800fd80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800fd84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fd88:	685b      	ldr	r3, [r3, #4]
 800fd8a:	461a      	mov	r2, r3
 800fd8c:	f04f 0300 	mov.w	r3, #0
 800fd90:	1891      	adds	r1, r2, r2
 800fd92:	6339      	str	r1, [r7, #48]	; 0x30
 800fd94:	415b      	adcs	r3, r3
 800fd96:	637b      	str	r3, [r7, #52]	; 0x34
 800fd98:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800fd9c:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800fda0:	f7f0 ff8a 	bl	8000cb8 <__aeabi_uldivmod>
 800fda4:	4602      	mov	r2, r0
 800fda6:	460b      	mov	r3, r1
 800fda8:	4b0c      	ldr	r3, [pc, #48]	; (800fddc <UART_SetConfig+0x3dc>)
 800fdaa:	fba3 1302 	umull	r1, r3, r3, r2
 800fdae:	095b      	lsrs	r3, r3, #5
 800fdb0:	2164      	movs	r1, #100	; 0x64
 800fdb2:	fb01 f303 	mul.w	r3, r1, r3
 800fdb6:	1ad3      	subs	r3, r2, r3
 800fdb8:	00db      	lsls	r3, r3, #3
 800fdba:	3332      	adds	r3, #50	; 0x32
 800fdbc:	4a07      	ldr	r2, [pc, #28]	; (800fddc <UART_SetConfig+0x3dc>)
 800fdbe:	fba2 2303 	umull	r2, r3, r2, r3
 800fdc2:	095b      	lsrs	r3, r3, #5
 800fdc4:	f003 0207 	and.w	r2, r3, #7
 800fdc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	4432      	add	r2, r6
 800fdd0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800fdd2:	e1a6      	b.n	8010122 <UART_SetConfig+0x722>
 800fdd4:	40011000 	.word	0x40011000
 800fdd8:	40011400 	.word	0x40011400
 800fddc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800fde0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fde4:	681a      	ldr	r2, [r3, #0]
 800fde6:	4bd1      	ldr	r3, [pc, #836]	; (801012c <UART_SetConfig+0x72c>)
 800fde8:	429a      	cmp	r2, r3
 800fdea:	d006      	beq.n	800fdfa <UART_SetConfig+0x3fa>
 800fdec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fdf0:	681a      	ldr	r2, [r3, #0]
 800fdf2:	4bcf      	ldr	r3, [pc, #828]	; (8010130 <UART_SetConfig+0x730>)
 800fdf4:	429a      	cmp	r2, r3
 800fdf6:	f040 80ca 	bne.w	800ff8e <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 800fdfa:	f7fc fa15 	bl	800c228 <HAL_RCC_GetPCLK2Freq>
 800fdfe:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800fe02:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800fe06:	461c      	mov	r4, r3
 800fe08:	f04f 0500 	mov.w	r5, #0
 800fe0c:	4622      	mov	r2, r4
 800fe0e:	462b      	mov	r3, r5
 800fe10:	1891      	adds	r1, r2, r2
 800fe12:	62b9      	str	r1, [r7, #40]	; 0x28
 800fe14:	415b      	adcs	r3, r3
 800fe16:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fe18:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800fe1c:	1912      	adds	r2, r2, r4
 800fe1e:	eb45 0303 	adc.w	r3, r5, r3
 800fe22:	f04f 0000 	mov.w	r0, #0
 800fe26:	f04f 0100 	mov.w	r1, #0
 800fe2a:	00d9      	lsls	r1, r3, #3
 800fe2c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800fe30:	00d0      	lsls	r0, r2, #3
 800fe32:	4602      	mov	r2, r0
 800fe34:	460b      	mov	r3, r1
 800fe36:	eb12 0a04 	adds.w	sl, r2, r4
 800fe3a:	eb43 0b05 	adc.w	fp, r3, r5
 800fe3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fe42:	685b      	ldr	r3, [r3, #4]
 800fe44:	4618      	mov	r0, r3
 800fe46:	f04f 0100 	mov.w	r1, #0
 800fe4a:	f04f 0200 	mov.w	r2, #0
 800fe4e:	f04f 0300 	mov.w	r3, #0
 800fe52:	008b      	lsls	r3, r1, #2
 800fe54:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800fe58:	0082      	lsls	r2, r0, #2
 800fe5a:	4650      	mov	r0, sl
 800fe5c:	4659      	mov	r1, fp
 800fe5e:	f7f0 ff2b 	bl	8000cb8 <__aeabi_uldivmod>
 800fe62:	4602      	mov	r2, r0
 800fe64:	460b      	mov	r3, r1
 800fe66:	4bb3      	ldr	r3, [pc, #716]	; (8010134 <UART_SetConfig+0x734>)
 800fe68:	fba3 2302 	umull	r2, r3, r3, r2
 800fe6c:	095b      	lsrs	r3, r3, #5
 800fe6e:	011e      	lsls	r6, r3, #4
 800fe70:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800fe74:	4618      	mov	r0, r3
 800fe76:	f04f 0100 	mov.w	r1, #0
 800fe7a:	4602      	mov	r2, r0
 800fe7c:	460b      	mov	r3, r1
 800fe7e:	1894      	adds	r4, r2, r2
 800fe80:	623c      	str	r4, [r7, #32]
 800fe82:	415b      	adcs	r3, r3
 800fe84:	627b      	str	r3, [r7, #36]	; 0x24
 800fe86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800fe8a:	1812      	adds	r2, r2, r0
 800fe8c:	eb41 0303 	adc.w	r3, r1, r3
 800fe90:	f04f 0400 	mov.w	r4, #0
 800fe94:	f04f 0500 	mov.w	r5, #0
 800fe98:	00dd      	lsls	r5, r3, #3
 800fe9a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800fe9e:	00d4      	lsls	r4, r2, #3
 800fea0:	4622      	mov	r2, r4
 800fea2:	462b      	mov	r3, r5
 800fea4:	1814      	adds	r4, r2, r0
 800fea6:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800feaa:	414b      	adcs	r3, r1
 800feac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800feb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800feb4:	685b      	ldr	r3, [r3, #4]
 800feb6:	4618      	mov	r0, r3
 800feb8:	f04f 0100 	mov.w	r1, #0
 800febc:	f04f 0200 	mov.w	r2, #0
 800fec0:	f04f 0300 	mov.w	r3, #0
 800fec4:	008b      	lsls	r3, r1, #2
 800fec6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800feca:	0082      	lsls	r2, r0, #2
 800fecc:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800fed0:	f7f0 fef2 	bl	8000cb8 <__aeabi_uldivmod>
 800fed4:	4602      	mov	r2, r0
 800fed6:	460b      	mov	r3, r1
 800fed8:	4b96      	ldr	r3, [pc, #600]	; (8010134 <UART_SetConfig+0x734>)
 800feda:	fba3 1302 	umull	r1, r3, r3, r2
 800fede:	095b      	lsrs	r3, r3, #5
 800fee0:	2164      	movs	r1, #100	; 0x64
 800fee2:	fb01 f303 	mul.w	r3, r1, r3
 800fee6:	1ad3      	subs	r3, r2, r3
 800fee8:	011b      	lsls	r3, r3, #4
 800feea:	3332      	adds	r3, #50	; 0x32
 800feec:	4a91      	ldr	r2, [pc, #580]	; (8010134 <UART_SetConfig+0x734>)
 800feee:	fba2 2303 	umull	r2, r3, r2, r3
 800fef2:	095b      	lsrs	r3, r3, #5
 800fef4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fef8:	441e      	add	r6, r3
 800fefa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800fefe:	4618      	mov	r0, r3
 800ff00:	f04f 0100 	mov.w	r1, #0
 800ff04:	4602      	mov	r2, r0
 800ff06:	460b      	mov	r3, r1
 800ff08:	1894      	adds	r4, r2, r2
 800ff0a:	61bc      	str	r4, [r7, #24]
 800ff0c:	415b      	adcs	r3, r3
 800ff0e:	61fb      	str	r3, [r7, #28]
 800ff10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ff14:	1812      	adds	r2, r2, r0
 800ff16:	eb41 0303 	adc.w	r3, r1, r3
 800ff1a:	f04f 0400 	mov.w	r4, #0
 800ff1e:	f04f 0500 	mov.w	r5, #0
 800ff22:	00dd      	lsls	r5, r3, #3
 800ff24:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800ff28:	00d4      	lsls	r4, r2, #3
 800ff2a:	4622      	mov	r2, r4
 800ff2c:	462b      	mov	r3, r5
 800ff2e:	1814      	adds	r4, r2, r0
 800ff30:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 800ff34:	414b      	adcs	r3, r1
 800ff36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800ff3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ff3e:	685b      	ldr	r3, [r3, #4]
 800ff40:	4618      	mov	r0, r3
 800ff42:	f04f 0100 	mov.w	r1, #0
 800ff46:	f04f 0200 	mov.w	r2, #0
 800ff4a:	f04f 0300 	mov.w	r3, #0
 800ff4e:	008b      	lsls	r3, r1, #2
 800ff50:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800ff54:	0082      	lsls	r2, r0, #2
 800ff56:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800ff5a:	f7f0 fead 	bl	8000cb8 <__aeabi_uldivmod>
 800ff5e:	4602      	mov	r2, r0
 800ff60:	460b      	mov	r3, r1
 800ff62:	4b74      	ldr	r3, [pc, #464]	; (8010134 <UART_SetConfig+0x734>)
 800ff64:	fba3 1302 	umull	r1, r3, r3, r2
 800ff68:	095b      	lsrs	r3, r3, #5
 800ff6a:	2164      	movs	r1, #100	; 0x64
 800ff6c:	fb01 f303 	mul.w	r3, r1, r3
 800ff70:	1ad3      	subs	r3, r2, r3
 800ff72:	011b      	lsls	r3, r3, #4
 800ff74:	3332      	adds	r3, #50	; 0x32
 800ff76:	4a6f      	ldr	r2, [pc, #444]	; (8010134 <UART_SetConfig+0x734>)
 800ff78:	fba2 2303 	umull	r2, r3, r2, r3
 800ff7c:	095b      	lsrs	r3, r3, #5
 800ff7e:	f003 020f 	and.w	r2, r3, #15
 800ff82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	4432      	add	r2, r6
 800ff8a:	609a      	str	r2, [r3, #8]
 800ff8c:	e0c9      	b.n	8010122 <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 800ff8e:	f7fc f937 	bl	800c200 <HAL_RCC_GetPCLK1Freq>
 800ff92:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ff96:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ff9a:	461c      	mov	r4, r3
 800ff9c:	f04f 0500 	mov.w	r5, #0
 800ffa0:	4622      	mov	r2, r4
 800ffa2:	462b      	mov	r3, r5
 800ffa4:	1891      	adds	r1, r2, r2
 800ffa6:	6139      	str	r1, [r7, #16]
 800ffa8:	415b      	adcs	r3, r3
 800ffaa:	617b      	str	r3, [r7, #20]
 800ffac:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ffb0:	1912      	adds	r2, r2, r4
 800ffb2:	eb45 0303 	adc.w	r3, r5, r3
 800ffb6:	f04f 0000 	mov.w	r0, #0
 800ffba:	f04f 0100 	mov.w	r1, #0
 800ffbe:	00d9      	lsls	r1, r3, #3
 800ffc0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ffc4:	00d0      	lsls	r0, r2, #3
 800ffc6:	4602      	mov	r2, r0
 800ffc8:	460b      	mov	r3, r1
 800ffca:	eb12 0804 	adds.w	r8, r2, r4
 800ffce:	eb43 0905 	adc.w	r9, r3, r5
 800ffd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ffd6:	685b      	ldr	r3, [r3, #4]
 800ffd8:	4618      	mov	r0, r3
 800ffda:	f04f 0100 	mov.w	r1, #0
 800ffde:	f04f 0200 	mov.w	r2, #0
 800ffe2:	f04f 0300 	mov.w	r3, #0
 800ffe6:	008b      	lsls	r3, r1, #2
 800ffe8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800ffec:	0082      	lsls	r2, r0, #2
 800ffee:	4640      	mov	r0, r8
 800fff0:	4649      	mov	r1, r9
 800fff2:	f7f0 fe61 	bl	8000cb8 <__aeabi_uldivmod>
 800fff6:	4602      	mov	r2, r0
 800fff8:	460b      	mov	r3, r1
 800fffa:	4b4e      	ldr	r3, [pc, #312]	; (8010134 <UART_SetConfig+0x734>)
 800fffc:	fba3 2302 	umull	r2, r3, r3, r2
 8010000:	095b      	lsrs	r3, r3, #5
 8010002:	011e      	lsls	r6, r3, #4
 8010004:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8010008:	4618      	mov	r0, r3
 801000a:	f04f 0100 	mov.w	r1, #0
 801000e:	4602      	mov	r2, r0
 8010010:	460b      	mov	r3, r1
 8010012:	1894      	adds	r4, r2, r2
 8010014:	60bc      	str	r4, [r7, #8]
 8010016:	415b      	adcs	r3, r3
 8010018:	60fb      	str	r3, [r7, #12]
 801001a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801001e:	1812      	adds	r2, r2, r0
 8010020:	eb41 0303 	adc.w	r3, r1, r3
 8010024:	f04f 0400 	mov.w	r4, #0
 8010028:	f04f 0500 	mov.w	r5, #0
 801002c:	00dd      	lsls	r5, r3, #3
 801002e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8010032:	00d4      	lsls	r4, r2, #3
 8010034:	4622      	mov	r2, r4
 8010036:	462b      	mov	r3, r5
 8010038:	1814      	adds	r4, r2, r0
 801003a:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 801003e:	414b      	adcs	r3, r1
 8010040:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8010044:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010048:	685b      	ldr	r3, [r3, #4]
 801004a:	4618      	mov	r0, r3
 801004c:	f04f 0100 	mov.w	r1, #0
 8010050:	f04f 0200 	mov.w	r2, #0
 8010054:	f04f 0300 	mov.w	r3, #0
 8010058:	008b      	lsls	r3, r1, #2
 801005a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 801005e:	0082      	lsls	r2, r0, #2
 8010060:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8010064:	f7f0 fe28 	bl	8000cb8 <__aeabi_uldivmod>
 8010068:	4602      	mov	r2, r0
 801006a:	460b      	mov	r3, r1
 801006c:	4b31      	ldr	r3, [pc, #196]	; (8010134 <UART_SetConfig+0x734>)
 801006e:	fba3 1302 	umull	r1, r3, r3, r2
 8010072:	095b      	lsrs	r3, r3, #5
 8010074:	2164      	movs	r1, #100	; 0x64
 8010076:	fb01 f303 	mul.w	r3, r1, r3
 801007a:	1ad3      	subs	r3, r2, r3
 801007c:	011b      	lsls	r3, r3, #4
 801007e:	3332      	adds	r3, #50	; 0x32
 8010080:	4a2c      	ldr	r2, [pc, #176]	; (8010134 <UART_SetConfig+0x734>)
 8010082:	fba2 2303 	umull	r2, r3, r2, r3
 8010086:	095b      	lsrs	r3, r3, #5
 8010088:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801008c:	441e      	add	r6, r3
 801008e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8010092:	4618      	mov	r0, r3
 8010094:	f04f 0100 	mov.w	r1, #0
 8010098:	4602      	mov	r2, r0
 801009a:	460b      	mov	r3, r1
 801009c:	1894      	adds	r4, r2, r2
 801009e:	603c      	str	r4, [r7, #0]
 80100a0:	415b      	adcs	r3, r3
 80100a2:	607b      	str	r3, [r7, #4]
 80100a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80100a8:	1812      	adds	r2, r2, r0
 80100aa:	eb41 0303 	adc.w	r3, r1, r3
 80100ae:	f04f 0400 	mov.w	r4, #0
 80100b2:	f04f 0500 	mov.w	r5, #0
 80100b6:	00dd      	lsls	r5, r3, #3
 80100b8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80100bc:	00d4      	lsls	r4, r2, #3
 80100be:	4622      	mov	r2, r4
 80100c0:	462b      	mov	r3, r5
 80100c2:	1814      	adds	r4, r2, r0
 80100c4:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 80100c8:	414b      	adcs	r3, r1
 80100ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80100ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80100d2:	685b      	ldr	r3, [r3, #4]
 80100d4:	4618      	mov	r0, r3
 80100d6:	f04f 0100 	mov.w	r1, #0
 80100da:	f04f 0200 	mov.w	r2, #0
 80100de:	f04f 0300 	mov.w	r3, #0
 80100e2:	008b      	lsls	r3, r1, #2
 80100e4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80100e8:	0082      	lsls	r2, r0, #2
 80100ea:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80100ee:	f7f0 fde3 	bl	8000cb8 <__aeabi_uldivmod>
 80100f2:	4602      	mov	r2, r0
 80100f4:	460b      	mov	r3, r1
 80100f6:	4b0f      	ldr	r3, [pc, #60]	; (8010134 <UART_SetConfig+0x734>)
 80100f8:	fba3 1302 	umull	r1, r3, r3, r2
 80100fc:	095b      	lsrs	r3, r3, #5
 80100fe:	2164      	movs	r1, #100	; 0x64
 8010100:	fb01 f303 	mul.w	r3, r1, r3
 8010104:	1ad3      	subs	r3, r2, r3
 8010106:	011b      	lsls	r3, r3, #4
 8010108:	3332      	adds	r3, #50	; 0x32
 801010a:	4a0a      	ldr	r2, [pc, #40]	; (8010134 <UART_SetConfig+0x734>)
 801010c:	fba2 2303 	umull	r2, r3, r2, r3
 8010110:	095b      	lsrs	r3, r3, #5
 8010112:	f003 020f 	and.w	r2, r3, #15
 8010116:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	4432      	add	r2, r6
 801011e:	609a      	str	r2, [r3, #8]
}
 8010120:	e7ff      	b.n	8010122 <UART_SetConfig+0x722>
 8010122:	bf00      	nop
 8010124:	37f4      	adds	r7, #244	; 0xf4
 8010126:	46bd      	mov	sp, r7
 8010128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801012c:	40011000 	.word	0x40011000
 8010130:	40011400 	.word	0x40011400
 8010134:	51eb851f 	.word	0x51eb851f

08010138 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8010138:	b084      	sub	sp, #16
 801013a:	b480      	push	{r7}
 801013c:	b085      	sub	sp, #20
 801013e:	af00      	add	r7, sp, #0
 8010140:	6078      	str	r0, [r7, #4]
 8010142:	f107 001c 	add.w	r0, r7, #28
 8010146:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 801014a:	2300      	movs	r3, #0
 801014c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 801014e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8010150:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8010152:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8010154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8010156:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8010158:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 801015a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 801015c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 801015e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8010160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8010162:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8010164:	68fa      	ldr	r2, [r7, #12]
 8010166:	4313      	orrs	r3, r2
 8010168:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	685b      	ldr	r3, [r3, #4]
 801016e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8010172:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8010176:	68fa      	ldr	r2, [r7, #12]
 8010178:	431a      	orrs	r2, r3
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 801017e:	2300      	movs	r3, #0
}
 8010180:	4618      	mov	r0, r3
 8010182:	3714      	adds	r7, #20
 8010184:	46bd      	mov	sp, r7
 8010186:	f85d 7b04 	ldr.w	r7, [sp], #4
 801018a:	b004      	add	sp, #16
 801018c:	4770      	bx	lr

0801018e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 801018e:	b480      	push	{r7}
 8010190:	b083      	sub	sp, #12
 8010192:	af00      	add	r7, sp, #0
 8010194:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 801019c:	4618      	mov	r0, r3
 801019e:	370c      	adds	r7, #12
 80101a0:	46bd      	mov	sp, r7
 80101a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101a6:	4770      	bx	lr

080101a8 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80101a8:	b480      	push	{r7}
 80101aa:	b083      	sub	sp, #12
 80101ac:	af00      	add	r7, sp, #0
 80101ae:	6078      	str	r0, [r7, #4]
 80101b0:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80101b2:	683b      	ldr	r3, [r7, #0]
 80101b4:	681a      	ldr	r2, [r3, #0]
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80101bc:	2300      	movs	r3, #0
}
 80101be:	4618      	mov	r0, r3
 80101c0:	370c      	adds	r7, #12
 80101c2:	46bd      	mov	sp, r7
 80101c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101c8:	4770      	bx	lr

080101ca <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80101ca:	b580      	push	{r7, lr}
 80101cc:	b082      	sub	sp, #8
 80101ce:	af00      	add	r7, sp, #0
 80101d0:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	2203      	movs	r2, #3
 80101d6:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80101d8:	2002      	movs	r0, #2
 80101da:	f7f9 fba3 	bl	8009924 <HAL_Delay>
  
  return HAL_OK;
 80101de:	2300      	movs	r3, #0
}
 80101e0:	4618      	mov	r0, r3
 80101e2:	3708      	adds	r7, #8
 80101e4:	46bd      	mov	sp, r7
 80101e6:	bd80      	pop	{r7, pc}

080101e8 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80101e8:	b480      	push	{r7}
 80101ea:	b083      	sub	sp, #12
 80101ec:	af00      	add	r7, sp, #0
 80101ee:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	681b      	ldr	r3, [r3, #0]
 80101f4:	f003 0303 	and.w	r3, r3, #3
}
 80101f8:	4618      	mov	r0, r3
 80101fa:	370c      	adds	r7, #12
 80101fc:	46bd      	mov	sp, r7
 80101fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010202:	4770      	bx	lr

08010204 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8010204:	b480      	push	{r7}
 8010206:	b085      	sub	sp, #20
 8010208:	af00      	add	r7, sp, #0
 801020a:	6078      	str	r0, [r7, #4]
 801020c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801020e:	2300      	movs	r3, #0
 8010210:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8010212:	683b      	ldr	r3, [r7, #0]
 8010214:	681a      	ldr	r2, [r3, #0]
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 801021a:	683b      	ldr	r3, [r7, #0]
 801021c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 801021e:	683b      	ldr	r3, [r7, #0]
 8010220:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010222:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8010224:	683b      	ldr	r3, [r7, #0]
 8010226:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8010228:	431a      	orrs	r2, r3
                       Command->CPSM);
 801022a:	683b      	ldr	r3, [r7, #0]
 801022c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 801022e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010230:	68fa      	ldr	r2, [r7, #12]
 8010232:	4313      	orrs	r3, r2
 8010234:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	68db      	ldr	r3, [r3, #12]
 801023a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801023e:	f023 030f 	bic.w	r3, r3, #15
 8010242:	68fa      	ldr	r2, [r7, #12]
 8010244:	431a      	orrs	r2, r3
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 801024a:	2300      	movs	r3, #0
}
 801024c:	4618      	mov	r0, r3
 801024e:	3714      	adds	r7, #20
 8010250:	46bd      	mov	sp, r7
 8010252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010256:	4770      	bx	lr

08010258 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8010258:	b480      	push	{r7}
 801025a:	b083      	sub	sp, #12
 801025c:	af00      	add	r7, sp, #0
 801025e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	691b      	ldr	r3, [r3, #16]
 8010264:	b2db      	uxtb	r3, r3
}
 8010266:	4618      	mov	r0, r3
 8010268:	370c      	adds	r7, #12
 801026a:	46bd      	mov	sp, r7
 801026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010270:	4770      	bx	lr

08010272 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8010272:	b480      	push	{r7}
 8010274:	b085      	sub	sp, #20
 8010276:	af00      	add	r7, sp, #0
 8010278:	6078      	str	r0, [r7, #4]
 801027a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	3314      	adds	r3, #20
 8010280:	461a      	mov	r2, r3
 8010282:	683b      	ldr	r3, [r7, #0]
 8010284:	4413      	add	r3, r2
 8010286:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8010288:	68fb      	ldr	r3, [r7, #12]
 801028a:	681b      	ldr	r3, [r3, #0]
}  
 801028c:	4618      	mov	r0, r3
 801028e:	3714      	adds	r7, #20
 8010290:	46bd      	mov	sp, r7
 8010292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010296:	4770      	bx	lr

08010298 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8010298:	b480      	push	{r7}
 801029a:	b085      	sub	sp, #20
 801029c:	af00      	add	r7, sp, #0
 801029e:	6078      	str	r0, [r7, #4]
 80102a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80102a2:	2300      	movs	r3, #0
 80102a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80102a6:	683b      	ldr	r3, [r7, #0]
 80102a8:	681a      	ldr	r2, [r3, #0]
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80102ae:	683b      	ldr	r3, [r7, #0]
 80102b0:	685a      	ldr	r2, [r3, #4]
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80102b6:	683b      	ldr	r3, [r7, #0]
 80102b8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80102ba:	683b      	ldr	r3, [r7, #0]
 80102bc:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80102be:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80102c0:	683b      	ldr	r3, [r7, #0]
 80102c2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80102c4:	431a      	orrs	r2, r3
                       Data->DPSM);
 80102c6:	683b      	ldr	r3, [r7, #0]
 80102c8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80102ca:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80102cc:	68fa      	ldr	r2, [r7, #12]
 80102ce:	4313      	orrs	r3, r2
 80102d0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102d6:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	431a      	orrs	r2, r3
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80102e2:	2300      	movs	r3, #0

}
 80102e4:	4618      	mov	r0, r3
 80102e6:	3714      	adds	r7, #20
 80102e8:	46bd      	mov	sp, r7
 80102ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ee:	4770      	bx	lr

080102f0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80102f0:	b580      	push	{r7, lr}
 80102f2:	b088      	sub	sp, #32
 80102f4:	af00      	add	r7, sp, #0
 80102f6:	6078      	str	r0, [r7, #4]
 80102f8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80102fa:	683b      	ldr	r3, [r7, #0]
 80102fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80102fe:	2310      	movs	r3, #16
 8010300:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010302:	2340      	movs	r3, #64	; 0x40
 8010304:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010306:	2300      	movs	r3, #0
 8010308:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801030a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801030e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010310:	f107 0308 	add.w	r3, r7, #8
 8010314:	4619      	mov	r1, r3
 8010316:	6878      	ldr	r0, [r7, #4]
 8010318:	f7ff ff74 	bl	8010204 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 801031c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010320:	2110      	movs	r1, #16
 8010322:	6878      	ldr	r0, [r7, #4]
 8010324:	f000 fa40 	bl	80107a8 <SDMMC_GetCmdResp1>
 8010328:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801032a:	69fb      	ldr	r3, [r7, #28]
}
 801032c:	4618      	mov	r0, r3
 801032e:	3720      	adds	r7, #32
 8010330:	46bd      	mov	sp, r7
 8010332:	bd80      	pop	{r7, pc}

08010334 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8010334:	b580      	push	{r7, lr}
 8010336:	b088      	sub	sp, #32
 8010338:	af00      	add	r7, sp, #0
 801033a:	6078      	str	r0, [r7, #4]
 801033c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801033e:	683b      	ldr	r3, [r7, #0]
 8010340:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8010342:	2311      	movs	r3, #17
 8010344:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010346:	2340      	movs	r3, #64	; 0x40
 8010348:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801034a:	2300      	movs	r3, #0
 801034c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801034e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010352:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010354:	f107 0308 	add.w	r3, r7, #8
 8010358:	4619      	mov	r1, r3
 801035a:	6878      	ldr	r0, [r7, #4]
 801035c:	f7ff ff52 	bl	8010204 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8010360:	f241 3288 	movw	r2, #5000	; 0x1388
 8010364:	2111      	movs	r1, #17
 8010366:	6878      	ldr	r0, [r7, #4]
 8010368:	f000 fa1e 	bl	80107a8 <SDMMC_GetCmdResp1>
 801036c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801036e:	69fb      	ldr	r3, [r7, #28]
}
 8010370:	4618      	mov	r0, r3
 8010372:	3720      	adds	r7, #32
 8010374:	46bd      	mov	sp, r7
 8010376:	bd80      	pop	{r7, pc}

08010378 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8010378:	b580      	push	{r7, lr}
 801037a:	b088      	sub	sp, #32
 801037c:	af00      	add	r7, sp, #0
 801037e:	6078      	str	r0, [r7, #4]
 8010380:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8010382:	683b      	ldr	r3, [r7, #0]
 8010384:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8010386:	2312      	movs	r3, #18
 8010388:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801038a:	2340      	movs	r3, #64	; 0x40
 801038c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801038e:	2300      	movs	r3, #0
 8010390:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010392:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010396:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010398:	f107 0308 	add.w	r3, r7, #8
 801039c:	4619      	mov	r1, r3
 801039e:	6878      	ldr	r0, [r7, #4]
 80103a0:	f7ff ff30 	bl	8010204 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80103a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80103a8:	2112      	movs	r1, #18
 80103aa:	6878      	ldr	r0, [r7, #4]
 80103ac:	f000 f9fc 	bl	80107a8 <SDMMC_GetCmdResp1>
 80103b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80103b2:	69fb      	ldr	r3, [r7, #28]
}
 80103b4:	4618      	mov	r0, r3
 80103b6:	3720      	adds	r7, #32
 80103b8:	46bd      	mov	sp, r7
 80103ba:	bd80      	pop	{r7, pc}

080103bc <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80103bc:	b580      	push	{r7, lr}
 80103be:	b088      	sub	sp, #32
 80103c0:	af00      	add	r7, sp, #0
 80103c2:	6078      	str	r0, [r7, #4]
 80103c4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80103c6:	683b      	ldr	r3, [r7, #0]
 80103c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80103ca:	2318      	movs	r3, #24
 80103cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80103ce:	2340      	movs	r3, #64	; 0x40
 80103d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80103d2:	2300      	movs	r3, #0
 80103d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80103d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80103da:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80103dc:	f107 0308 	add.w	r3, r7, #8
 80103e0:	4619      	mov	r1, r3
 80103e2:	6878      	ldr	r0, [r7, #4]
 80103e4:	f7ff ff0e 	bl	8010204 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80103e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80103ec:	2118      	movs	r1, #24
 80103ee:	6878      	ldr	r0, [r7, #4]
 80103f0:	f000 f9da 	bl	80107a8 <SDMMC_GetCmdResp1>
 80103f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80103f6:	69fb      	ldr	r3, [r7, #28]
}
 80103f8:	4618      	mov	r0, r3
 80103fa:	3720      	adds	r7, #32
 80103fc:	46bd      	mov	sp, r7
 80103fe:	bd80      	pop	{r7, pc}

08010400 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8010400:	b580      	push	{r7, lr}
 8010402:	b088      	sub	sp, #32
 8010404:	af00      	add	r7, sp, #0
 8010406:	6078      	str	r0, [r7, #4]
 8010408:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801040a:	683b      	ldr	r3, [r7, #0]
 801040c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 801040e:	2319      	movs	r3, #25
 8010410:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010412:	2340      	movs	r3, #64	; 0x40
 8010414:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010416:	2300      	movs	r3, #0
 8010418:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801041a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801041e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010420:	f107 0308 	add.w	r3, r7, #8
 8010424:	4619      	mov	r1, r3
 8010426:	6878      	ldr	r0, [r7, #4]
 8010428:	f7ff feec 	bl	8010204 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 801042c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010430:	2119      	movs	r1, #25
 8010432:	6878      	ldr	r0, [r7, #4]
 8010434:	f000 f9b8 	bl	80107a8 <SDMMC_GetCmdResp1>
 8010438:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801043a:	69fb      	ldr	r3, [r7, #28]
}
 801043c:	4618      	mov	r0, r3
 801043e:	3720      	adds	r7, #32
 8010440:	46bd      	mov	sp, r7
 8010442:	bd80      	pop	{r7, pc}

08010444 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8010444:	b580      	push	{r7, lr}
 8010446:	b088      	sub	sp, #32
 8010448:	af00      	add	r7, sp, #0
 801044a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 801044c:	2300      	movs	r3, #0
 801044e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8010450:	230c      	movs	r3, #12
 8010452:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010454:	2340      	movs	r3, #64	; 0x40
 8010456:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010458:	2300      	movs	r3, #0
 801045a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801045c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010460:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010462:	f107 0308 	add.w	r3, r7, #8
 8010466:	4619      	mov	r1, r3
 8010468:	6878      	ldr	r0, [r7, #4]
 801046a:	f7ff fecb 	bl	8010204 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 801046e:	4a05      	ldr	r2, [pc, #20]	; (8010484 <SDMMC_CmdStopTransfer+0x40>)
 8010470:	210c      	movs	r1, #12
 8010472:	6878      	ldr	r0, [r7, #4]
 8010474:	f000 f998 	bl	80107a8 <SDMMC_GetCmdResp1>
 8010478:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801047a:	69fb      	ldr	r3, [r7, #28]
}
 801047c:	4618      	mov	r0, r3
 801047e:	3720      	adds	r7, #32
 8010480:	46bd      	mov	sp, r7
 8010482:	bd80      	pop	{r7, pc}
 8010484:	05f5e100 	.word	0x05f5e100

08010488 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8010488:	b580      	push	{r7, lr}
 801048a:	b08a      	sub	sp, #40	; 0x28
 801048c:	af00      	add	r7, sp, #0
 801048e:	60f8      	str	r0, [r7, #12]
 8010490:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8010494:	683b      	ldr	r3, [r7, #0]
 8010496:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8010498:	2307      	movs	r3, #7
 801049a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801049c:	2340      	movs	r3, #64	; 0x40
 801049e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80104a0:	2300      	movs	r3, #0
 80104a2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80104a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80104a8:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80104aa:	f107 0310 	add.w	r3, r7, #16
 80104ae:	4619      	mov	r1, r3
 80104b0:	68f8      	ldr	r0, [r7, #12]
 80104b2:	f7ff fea7 	bl	8010204 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80104b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80104ba:	2107      	movs	r1, #7
 80104bc:	68f8      	ldr	r0, [r7, #12]
 80104be:	f000 f973 	bl	80107a8 <SDMMC_GetCmdResp1>
 80104c2:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80104c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80104c6:	4618      	mov	r0, r3
 80104c8:	3728      	adds	r7, #40	; 0x28
 80104ca:	46bd      	mov	sp, r7
 80104cc:	bd80      	pop	{r7, pc}

080104ce <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80104ce:	b580      	push	{r7, lr}
 80104d0:	b088      	sub	sp, #32
 80104d2:	af00      	add	r7, sp, #0
 80104d4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80104d6:	2300      	movs	r3, #0
 80104d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80104da:	2300      	movs	r3, #0
 80104dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80104de:	2300      	movs	r3, #0
 80104e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80104e2:	2300      	movs	r3, #0
 80104e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80104e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80104ea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80104ec:	f107 0308 	add.w	r3, r7, #8
 80104f0:	4619      	mov	r1, r3
 80104f2:	6878      	ldr	r0, [r7, #4]
 80104f4:	f7ff fe86 	bl	8010204 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80104f8:	6878      	ldr	r0, [r7, #4]
 80104fa:	f000 f92d 	bl	8010758 <SDMMC_GetCmdError>
 80104fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010500:	69fb      	ldr	r3, [r7, #28]
}
 8010502:	4618      	mov	r0, r3
 8010504:	3720      	adds	r7, #32
 8010506:	46bd      	mov	sp, r7
 8010508:	bd80      	pop	{r7, pc}

0801050a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 801050a:	b580      	push	{r7, lr}
 801050c:	b088      	sub	sp, #32
 801050e:	af00      	add	r7, sp, #0
 8010510:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8010512:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8010516:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8010518:	2308      	movs	r3, #8
 801051a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801051c:	2340      	movs	r3, #64	; 0x40
 801051e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010520:	2300      	movs	r3, #0
 8010522:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010524:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010528:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801052a:	f107 0308 	add.w	r3, r7, #8
 801052e:	4619      	mov	r1, r3
 8010530:	6878      	ldr	r0, [r7, #4]
 8010532:	f7ff fe67 	bl	8010204 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8010536:	6878      	ldr	r0, [r7, #4]
 8010538:	f000 fb16 	bl	8010b68 <SDMMC_GetCmdResp7>
 801053c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801053e:	69fb      	ldr	r3, [r7, #28]
}
 8010540:	4618      	mov	r0, r3
 8010542:	3720      	adds	r7, #32
 8010544:	46bd      	mov	sp, r7
 8010546:	bd80      	pop	{r7, pc}

08010548 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010548:	b580      	push	{r7, lr}
 801054a:	b088      	sub	sp, #32
 801054c:	af00      	add	r7, sp, #0
 801054e:	6078      	str	r0, [r7, #4]
 8010550:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8010552:	683b      	ldr	r3, [r7, #0]
 8010554:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8010556:	2337      	movs	r3, #55	; 0x37
 8010558:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801055a:	2340      	movs	r3, #64	; 0x40
 801055c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801055e:	2300      	movs	r3, #0
 8010560:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010562:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010566:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010568:	f107 0308 	add.w	r3, r7, #8
 801056c:	4619      	mov	r1, r3
 801056e:	6878      	ldr	r0, [r7, #4]
 8010570:	f7ff fe48 	bl	8010204 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8010574:	f241 3288 	movw	r2, #5000	; 0x1388
 8010578:	2137      	movs	r1, #55	; 0x37
 801057a:	6878      	ldr	r0, [r7, #4]
 801057c:	f000 f914 	bl	80107a8 <SDMMC_GetCmdResp1>
 8010580:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010582:	69fb      	ldr	r3, [r7, #28]
}
 8010584:	4618      	mov	r0, r3
 8010586:	3720      	adds	r7, #32
 8010588:	46bd      	mov	sp, r7
 801058a:	bd80      	pop	{r7, pc}

0801058c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 801058c:	b580      	push	{r7, lr}
 801058e:	b088      	sub	sp, #32
 8010590:	af00      	add	r7, sp, #0
 8010592:	6078      	str	r0, [r7, #4]
 8010594:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8010596:	683b      	ldr	r3, [r7, #0]
 8010598:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801059c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80105a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80105a2:	2329      	movs	r3, #41	; 0x29
 80105a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80105a6:	2340      	movs	r3, #64	; 0x40
 80105a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80105aa:	2300      	movs	r3, #0
 80105ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80105ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80105b2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80105b4:	f107 0308 	add.w	r3, r7, #8
 80105b8:	4619      	mov	r1, r3
 80105ba:	6878      	ldr	r0, [r7, #4]
 80105bc:	f7ff fe22 	bl	8010204 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80105c0:	6878      	ldr	r0, [r7, #4]
 80105c2:	f000 fa23 	bl	8010a0c <SDMMC_GetCmdResp3>
 80105c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80105c8:	69fb      	ldr	r3, [r7, #28]
}
 80105ca:	4618      	mov	r0, r3
 80105cc:	3720      	adds	r7, #32
 80105ce:	46bd      	mov	sp, r7
 80105d0:	bd80      	pop	{r7, pc}

080105d2 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80105d2:	b580      	push	{r7, lr}
 80105d4:	b088      	sub	sp, #32
 80105d6:	af00      	add	r7, sp, #0
 80105d8:	6078      	str	r0, [r7, #4]
 80105da:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80105dc:	683b      	ldr	r3, [r7, #0]
 80105de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80105e0:	2306      	movs	r3, #6
 80105e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80105e4:	2340      	movs	r3, #64	; 0x40
 80105e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80105e8:	2300      	movs	r3, #0
 80105ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80105ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80105f0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80105f2:	f107 0308 	add.w	r3, r7, #8
 80105f6:	4619      	mov	r1, r3
 80105f8:	6878      	ldr	r0, [r7, #4]
 80105fa:	f7ff fe03 	bl	8010204 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80105fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8010602:	2106      	movs	r1, #6
 8010604:	6878      	ldr	r0, [r7, #4]
 8010606:	f000 f8cf 	bl	80107a8 <SDMMC_GetCmdResp1>
 801060a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801060c:	69fb      	ldr	r3, [r7, #28]
}
 801060e:	4618      	mov	r0, r3
 8010610:	3720      	adds	r7, #32
 8010612:	46bd      	mov	sp, r7
 8010614:	bd80      	pop	{r7, pc}

08010616 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8010616:	b580      	push	{r7, lr}
 8010618:	b088      	sub	sp, #32
 801061a:	af00      	add	r7, sp, #0
 801061c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 801061e:	2300      	movs	r3, #0
 8010620:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8010622:	2333      	movs	r3, #51	; 0x33
 8010624:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010626:	2340      	movs	r3, #64	; 0x40
 8010628:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801062a:	2300      	movs	r3, #0
 801062c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801062e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010632:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010634:	f107 0308 	add.w	r3, r7, #8
 8010638:	4619      	mov	r1, r3
 801063a:	6878      	ldr	r0, [r7, #4]
 801063c:	f7ff fde2 	bl	8010204 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8010640:	f241 3288 	movw	r2, #5000	; 0x1388
 8010644:	2133      	movs	r1, #51	; 0x33
 8010646:	6878      	ldr	r0, [r7, #4]
 8010648:	f000 f8ae 	bl	80107a8 <SDMMC_GetCmdResp1>
 801064c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801064e:	69fb      	ldr	r3, [r7, #28]
}
 8010650:	4618      	mov	r0, r3
 8010652:	3720      	adds	r7, #32
 8010654:	46bd      	mov	sp, r7
 8010656:	bd80      	pop	{r7, pc}

08010658 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8010658:	b580      	push	{r7, lr}
 801065a:	b088      	sub	sp, #32
 801065c:	af00      	add	r7, sp, #0
 801065e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8010660:	2300      	movs	r3, #0
 8010662:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8010664:	2302      	movs	r3, #2
 8010666:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8010668:	23c0      	movs	r3, #192	; 0xc0
 801066a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801066c:	2300      	movs	r3, #0
 801066e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010670:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010674:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010676:	f107 0308 	add.w	r3, r7, #8
 801067a:	4619      	mov	r1, r3
 801067c:	6878      	ldr	r0, [r7, #4]
 801067e:	f7ff fdc1 	bl	8010204 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8010682:	6878      	ldr	r0, [r7, #4]
 8010684:	f000 f97c 	bl	8010980 <SDMMC_GetCmdResp2>
 8010688:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801068a:	69fb      	ldr	r3, [r7, #28]
}
 801068c:	4618      	mov	r0, r3
 801068e:	3720      	adds	r7, #32
 8010690:	46bd      	mov	sp, r7
 8010692:	bd80      	pop	{r7, pc}

08010694 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010694:	b580      	push	{r7, lr}
 8010696:	b088      	sub	sp, #32
 8010698:	af00      	add	r7, sp, #0
 801069a:	6078      	str	r0, [r7, #4]
 801069c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 801069e:	683b      	ldr	r3, [r7, #0]
 80106a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80106a2:	2309      	movs	r3, #9
 80106a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80106a6:	23c0      	movs	r3, #192	; 0xc0
 80106a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80106aa:	2300      	movs	r3, #0
 80106ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80106ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80106b2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80106b4:	f107 0308 	add.w	r3, r7, #8
 80106b8:	4619      	mov	r1, r3
 80106ba:	6878      	ldr	r0, [r7, #4]
 80106bc:	f7ff fda2 	bl	8010204 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80106c0:	6878      	ldr	r0, [r7, #4]
 80106c2:	f000 f95d 	bl	8010980 <SDMMC_GetCmdResp2>
 80106c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80106c8:	69fb      	ldr	r3, [r7, #28]
}
 80106ca:	4618      	mov	r0, r3
 80106cc:	3720      	adds	r7, #32
 80106ce:	46bd      	mov	sp, r7
 80106d0:	bd80      	pop	{r7, pc}

080106d2 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80106d2:	b580      	push	{r7, lr}
 80106d4:	b088      	sub	sp, #32
 80106d6:	af00      	add	r7, sp, #0
 80106d8:	6078      	str	r0, [r7, #4]
 80106da:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80106dc:	2300      	movs	r3, #0
 80106de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80106e0:	2303      	movs	r3, #3
 80106e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80106e4:	2340      	movs	r3, #64	; 0x40
 80106e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80106e8:	2300      	movs	r3, #0
 80106ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80106ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80106f0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80106f2:	f107 0308 	add.w	r3, r7, #8
 80106f6:	4619      	mov	r1, r3
 80106f8:	6878      	ldr	r0, [r7, #4]
 80106fa:	f7ff fd83 	bl	8010204 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80106fe:	683a      	ldr	r2, [r7, #0]
 8010700:	2103      	movs	r1, #3
 8010702:	6878      	ldr	r0, [r7, #4]
 8010704:	f000 f9bc 	bl	8010a80 <SDMMC_GetCmdResp6>
 8010708:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801070a:	69fb      	ldr	r3, [r7, #28]
}
 801070c:	4618      	mov	r0, r3
 801070e:	3720      	adds	r7, #32
 8010710:	46bd      	mov	sp, r7
 8010712:	bd80      	pop	{r7, pc}

08010714 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010714:	b580      	push	{r7, lr}
 8010716:	b088      	sub	sp, #32
 8010718:	af00      	add	r7, sp, #0
 801071a:	6078      	str	r0, [r7, #4]
 801071c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 801071e:	683b      	ldr	r3, [r7, #0]
 8010720:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8010722:	230d      	movs	r3, #13
 8010724:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010726:	2340      	movs	r3, #64	; 0x40
 8010728:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801072a:	2300      	movs	r3, #0
 801072c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801072e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010732:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010734:	f107 0308 	add.w	r3, r7, #8
 8010738:	4619      	mov	r1, r3
 801073a:	6878      	ldr	r0, [r7, #4]
 801073c:	f7ff fd62 	bl	8010204 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8010740:	f241 3288 	movw	r2, #5000	; 0x1388
 8010744:	210d      	movs	r1, #13
 8010746:	6878      	ldr	r0, [r7, #4]
 8010748:	f000 f82e 	bl	80107a8 <SDMMC_GetCmdResp1>
 801074c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801074e:	69fb      	ldr	r3, [r7, #28]
}
 8010750:	4618      	mov	r0, r3
 8010752:	3720      	adds	r7, #32
 8010754:	46bd      	mov	sp, r7
 8010756:	bd80      	pop	{r7, pc}

08010758 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8010758:	b490      	push	{r4, r7}
 801075a:	b082      	sub	sp, #8
 801075c:	af00      	add	r7, sp, #0
 801075e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010760:	4b0f      	ldr	r3, [pc, #60]	; (80107a0 <SDMMC_GetCmdError+0x48>)
 8010762:	681b      	ldr	r3, [r3, #0]
 8010764:	4a0f      	ldr	r2, [pc, #60]	; (80107a4 <SDMMC_GetCmdError+0x4c>)
 8010766:	fba2 2303 	umull	r2, r3, r2, r3
 801076a:	0a5b      	lsrs	r3, r3, #9
 801076c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010770:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010774:	4623      	mov	r3, r4
 8010776:	1e5c      	subs	r4, r3, #1
 8010778:	2b00      	cmp	r3, #0
 801077a:	d102      	bne.n	8010782 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 801077c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010780:	e009      	b.n	8010796 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801078a:	2b00      	cmp	r3, #0
 801078c:	d0f2      	beq.n	8010774 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	22c5      	movs	r2, #197	; 0xc5
 8010792:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8010794:	2300      	movs	r3, #0
}
 8010796:	4618      	mov	r0, r3
 8010798:	3708      	adds	r7, #8
 801079a:	46bd      	mov	sp, r7
 801079c:	bc90      	pop	{r4, r7}
 801079e:	4770      	bx	lr
 80107a0:	20000000 	.word	0x20000000
 80107a4:	10624dd3 	.word	0x10624dd3

080107a8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80107a8:	b590      	push	{r4, r7, lr}
 80107aa:	b087      	sub	sp, #28
 80107ac:	af00      	add	r7, sp, #0
 80107ae:	60f8      	str	r0, [r7, #12]
 80107b0:	460b      	mov	r3, r1
 80107b2:	607a      	str	r2, [r7, #4]
 80107b4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80107b6:	4b6f      	ldr	r3, [pc, #444]	; (8010974 <SDMMC_GetCmdResp1+0x1cc>)
 80107b8:	681b      	ldr	r3, [r3, #0]
 80107ba:	4a6f      	ldr	r2, [pc, #444]	; (8010978 <SDMMC_GetCmdResp1+0x1d0>)
 80107bc:	fba2 2303 	umull	r2, r3, r2, r3
 80107c0:	0a5b      	lsrs	r3, r3, #9
 80107c2:	687a      	ldr	r2, [r7, #4]
 80107c4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80107c8:	4623      	mov	r3, r4
 80107ca:	1e5c      	subs	r4, r3, #1
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d102      	bne.n	80107d6 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80107d0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80107d4:	e0c9      	b.n	801096a <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 80107d6:	68fb      	ldr	r3, [r7, #12]
 80107d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80107da:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80107dc:	697b      	ldr	r3, [r7, #20]
 80107de:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d0f0      	beq.n	80107c8 <SDMMC_GetCmdResp1+0x20>
 80107e6:	697b      	ldr	r3, [r7, #20]
 80107e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d1eb      	bne.n	80107c8 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80107f4:	f003 0304 	and.w	r3, r3, #4
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d004      	beq.n	8010806 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80107fc:	68fb      	ldr	r3, [r7, #12]
 80107fe:	2204      	movs	r2, #4
 8010800:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010802:	2304      	movs	r3, #4
 8010804:	e0b1      	b.n	801096a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010806:	68fb      	ldr	r3, [r7, #12]
 8010808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801080a:	f003 0301 	and.w	r3, r3, #1
 801080e:	2b00      	cmp	r3, #0
 8010810:	d004      	beq.n	801081c <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	2201      	movs	r2, #1
 8010816:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010818:	2301      	movs	r3, #1
 801081a:	e0a6      	b.n	801096a <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 801081c:	68fb      	ldr	r3, [r7, #12]
 801081e:	22c5      	movs	r2, #197	; 0xc5
 8010820:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8010822:	68f8      	ldr	r0, [r7, #12]
 8010824:	f7ff fd18 	bl	8010258 <SDIO_GetCommandResponse>
 8010828:	4603      	mov	r3, r0
 801082a:	461a      	mov	r2, r3
 801082c:	7afb      	ldrb	r3, [r7, #11]
 801082e:	4293      	cmp	r3, r2
 8010830:	d001      	beq.n	8010836 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010832:	2301      	movs	r3, #1
 8010834:	e099      	b.n	801096a <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8010836:	2100      	movs	r1, #0
 8010838:	68f8      	ldr	r0, [r7, #12]
 801083a:	f7ff fd1a 	bl	8010272 <SDIO_GetResponse>
 801083e:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8010840:	693a      	ldr	r2, [r7, #16]
 8010842:	4b4e      	ldr	r3, [pc, #312]	; (801097c <SDMMC_GetCmdResp1+0x1d4>)
 8010844:	4013      	ands	r3, r2
 8010846:	2b00      	cmp	r3, #0
 8010848:	d101      	bne.n	801084e <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 801084a:	2300      	movs	r3, #0
 801084c:	e08d      	b.n	801096a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 801084e:	693b      	ldr	r3, [r7, #16]
 8010850:	2b00      	cmp	r3, #0
 8010852:	da02      	bge.n	801085a <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8010854:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8010858:	e087      	b.n	801096a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 801085a:	693b      	ldr	r3, [r7, #16]
 801085c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010860:	2b00      	cmp	r3, #0
 8010862:	d001      	beq.n	8010868 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8010864:	2340      	movs	r3, #64	; 0x40
 8010866:	e080      	b.n	801096a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8010868:	693b      	ldr	r3, [r7, #16]
 801086a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801086e:	2b00      	cmp	r3, #0
 8010870:	d001      	beq.n	8010876 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8010872:	2380      	movs	r3, #128	; 0x80
 8010874:	e079      	b.n	801096a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8010876:	693b      	ldr	r3, [r7, #16]
 8010878:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801087c:	2b00      	cmp	r3, #0
 801087e:	d002      	beq.n	8010886 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8010880:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010884:	e071      	b.n	801096a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8010886:	693b      	ldr	r3, [r7, #16]
 8010888:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801088c:	2b00      	cmp	r3, #0
 801088e:	d002      	beq.n	8010896 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8010890:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010894:	e069      	b.n	801096a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8010896:	693b      	ldr	r3, [r7, #16]
 8010898:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801089c:	2b00      	cmp	r3, #0
 801089e:	d002      	beq.n	80108a6 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80108a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80108a4:	e061      	b.n	801096a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80108a6:	693b      	ldr	r3, [r7, #16]
 80108a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d002      	beq.n	80108b6 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80108b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80108b4:	e059      	b.n	801096a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80108b6:	693b      	ldr	r3, [r7, #16]
 80108b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d002      	beq.n	80108c6 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80108c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80108c4:	e051      	b.n	801096a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80108c6:	693b      	ldr	r3, [r7, #16]
 80108c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d002      	beq.n	80108d6 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80108d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80108d4:	e049      	b.n	801096a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80108d6:	693b      	ldr	r3, [r7, #16]
 80108d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80108dc:	2b00      	cmp	r3, #0
 80108de:	d002      	beq.n	80108e6 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80108e0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80108e4:	e041      	b.n	801096a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80108e6:	693b      	ldr	r3, [r7, #16]
 80108e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d002      	beq.n	80108f6 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 80108f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80108f4:	e039      	b.n	801096a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80108f6:	693b      	ldr	r3, [r7, #16]
 80108f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d002      	beq.n	8010906 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8010900:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8010904:	e031      	b.n	801096a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8010906:	693b      	ldr	r3, [r7, #16]
 8010908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801090c:	2b00      	cmp	r3, #0
 801090e:	d002      	beq.n	8010916 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8010910:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8010914:	e029      	b.n	801096a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8010916:	693b      	ldr	r3, [r7, #16]
 8010918:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801091c:	2b00      	cmp	r3, #0
 801091e:	d002      	beq.n	8010926 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8010920:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8010924:	e021      	b.n	801096a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8010926:	693b      	ldr	r3, [r7, #16]
 8010928:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801092c:	2b00      	cmp	r3, #0
 801092e:	d002      	beq.n	8010936 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8010930:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8010934:	e019      	b.n	801096a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8010936:	693b      	ldr	r3, [r7, #16]
 8010938:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801093c:	2b00      	cmp	r3, #0
 801093e:	d002      	beq.n	8010946 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8010940:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8010944:	e011      	b.n	801096a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8010946:	693b      	ldr	r3, [r7, #16]
 8010948:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801094c:	2b00      	cmp	r3, #0
 801094e:	d002      	beq.n	8010956 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8010950:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8010954:	e009      	b.n	801096a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8010956:	693b      	ldr	r3, [r7, #16]
 8010958:	f003 0308 	and.w	r3, r3, #8
 801095c:	2b00      	cmp	r3, #0
 801095e:	d002      	beq.n	8010966 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8010960:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8010964:	e001      	b.n	801096a <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010966:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 801096a:	4618      	mov	r0, r3
 801096c:	371c      	adds	r7, #28
 801096e:	46bd      	mov	sp, r7
 8010970:	bd90      	pop	{r4, r7, pc}
 8010972:	bf00      	nop
 8010974:	20000000 	.word	0x20000000
 8010978:	10624dd3 	.word	0x10624dd3
 801097c:	fdffe008 	.word	0xfdffe008

08010980 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8010980:	b490      	push	{r4, r7}
 8010982:	b084      	sub	sp, #16
 8010984:	af00      	add	r7, sp, #0
 8010986:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010988:	4b1e      	ldr	r3, [pc, #120]	; (8010a04 <SDMMC_GetCmdResp2+0x84>)
 801098a:	681b      	ldr	r3, [r3, #0]
 801098c:	4a1e      	ldr	r2, [pc, #120]	; (8010a08 <SDMMC_GetCmdResp2+0x88>)
 801098e:	fba2 2303 	umull	r2, r3, r2, r3
 8010992:	0a5b      	lsrs	r3, r3, #9
 8010994:	f241 3288 	movw	r2, #5000	; 0x1388
 8010998:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 801099c:	4623      	mov	r3, r4
 801099e:	1e5c      	subs	r4, r3, #1
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d102      	bne.n	80109aa <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80109a4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80109a8:	e026      	b.n	80109f8 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80109ae:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d0f0      	beq.n	801099c <SDMMC_GetCmdResp2+0x1c>
 80109ba:	68fb      	ldr	r3, [r7, #12]
 80109bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	d1eb      	bne.n	801099c <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80109c8:	f003 0304 	and.w	r3, r3, #4
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d004      	beq.n	80109da <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	2204      	movs	r2, #4
 80109d4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80109d6:	2304      	movs	r3, #4
 80109d8:	e00e      	b.n	80109f8 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80109de:	f003 0301 	and.w	r3, r3, #1
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d004      	beq.n	80109f0 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	2201      	movs	r2, #1
 80109ea:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80109ec:	2301      	movs	r3, #1
 80109ee:	e003      	b.n	80109f8 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	22c5      	movs	r2, #197	; 0xc5
 80109f4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80109f6:	2300      	movs	r3, #0
}
 80109f8:	4618      	mov	r0, r3
 80109fa:	3710      	adds	r7, #16
 80109fc:	46bd      	mov	sp, r7
 80109fe:	bc90      	pop	{r4, r7}
 8010a00:	4770      	bx	lr
 8010a02:	bf00      	nop
 8010a04:	20000000 	.word	0x20000000
 8010a08:	10624dd3 	.word	0x10624dd3

08010a0c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8010a0c:	b490      	push	{r4, r7}
 8010a0e:	b084      	sub	sp, #16
 8010a10:	af00      	add	r7, sp, #0
 8010a12:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010a14:	4b18      	ldr	r3, [pc, #96]	; (8010a78 <SDMMC_GetCmdResp3+0x6c>)
 8010a16:	681b      	ldr	r3, [r3, #0]
 8010a18:	4a18      	ldr	r2, [pc, #96]	; (8010a7c <SDMMC_GetCmdResp3+0x70>)
 8010a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8010a1e:	0a5b      	lsrs	r3, r3, #9
 8010a20:	f241 3288 	movw	r2, #5000	; 0x1388
 8010a24:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010a28:	4623      	mov	r3, r4
 8010a2a:	1e5c      	subs	r4, r3, #1
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	d102      	bne.n	8010a36 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010a30:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010a34:	e01b      	b.n	8010a6e <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a3a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010a3c:	68fb      	ldr	r3, [r7, #12]
 8010a3e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d0f0      	beq.n	8010a28 <SDMMC_GetCmdResp3+0x1c>
 8010a46:	68fb      	ldr	r3, [r7, #12]
 8010a48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d1eb      	bne.n	8010a28 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a54:	f003 0304 	and.w	r3, r3, #4
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	d004      	beq.n	8010a66 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	2204      	movs	r2, #4
 8010a60:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010a62:	2304      	movs	r3, #4
 8010a64:	e003      	b.n	8010a6e <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	22c5      	movs	r2, #197	; 0xc5
 8010a6a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8010a6c:	2300      	movs	r3, #0
}
 8010a6e:	4618      	mov	r0, r3
 8010a70:	3710      	adds	r7, #16
 8010a72:	46bd      	mov	sp, r7
 8010a74:	bc90      	pop	{r4, r7}
 8010a76:	4770      	bx	lr
 8010a78:	20000000 	.word	0x20000000
 8010a7c:	10624dd3 	.word	0x10624dd3

08010a80 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8010a80:	b590      	push	{r4, r7, lr}
 8010a82:	b087      	sub	sp, #28
 8010a84:	af00      	add	r7, sp, #0
 8010a86:	60f8      	str	r0, [r7, #12]
 8010a88:	460b      	mov	r3, r1
 8010a8a:	607a      	str	r2, [r7, #4]
 8010a8c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010a8e:	4b34      	ldr	r3, [pc, #208]	; (8010b60 <SDMMC_GetCmdResp6+0xe0>)
 8010a90:	681b      	ldr	r3, [r3, #0]
 8010a92:	4a34      	ldr	r2, [pc, #208]	; (8010b64 <SDMMC_GetCmdResp6+0xe4>)
 8010a94:	fba2 2303 	umull	r2, r3, r2, r3
 8010a98:	0a5b      	lsrs	r3, r3, #9
 8010a9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8010a9e:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010aa2:	4623      	mov	r3, r4
 8010aa4:	1e5c      	subs	r4, r3, #1
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	d102      	bne.n	8010ab0 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010aaa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010aae:	e052      	b.n	8010b56 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8010ab0:	68fb      	ldr	r3, [r7, #12]
 8010ab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ab4:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010ab6:	697b      	ldr	r3, [r7, #20]
 8010ab8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	d0f0      	beq.n	8010aa2 <SDMMC_GetCmdResp6+0x22>
 8010ac0:	697b      	ldr	r3, [r7, #20]
 8010ac2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	d1eb      	bne.n	8010aa2 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010aca:	68fb      	ldr	r3, [r7, #12]
 8010acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ace:	f003 0304 	and.w	r3, r3, #4
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	d004      	beq.n	8010ae0 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010ad6:	68fb      	ldr	r3, [r7, #12]
 8010ad8:	2204      	movs	r2, #4
 8010ada:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010adc:	2304      	movs	r3, #4
 8010ade:	e03a      	b.n	8010b56 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010ae0:	68fb      	ldr	r3, [r7, #12]
 8010ae2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ae4:	f003 0301 	and.w	r3, r3, #1
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	d004      	beq.n	8010af6 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010aec:	68fb      	ldr	r3, [r7, #12]
 8010aee:	2201      	movs	r2, #1
 8010af0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010af2:	2301      	movs	r3, #1
 8010af4:	e02f      	b.n	8010b56 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8010af6:	68f8      	ldr	r0, [r7, #12]
 8010af8:	f7ff fbae 	bl	8010258 <SDIO_GetCommandResponse>
 8010afc:	4603      	mov	r3, r0
 8010afe:	461a      	mov	r2, r3
 8010b00:	7afb      	ldrb	r3, [r7, #11]
 8010b02:	4293      	cmp	r3, r2
 8010b04:	d001      	beq.n	8010b0a <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010b06:	2301      	movs	r3, #1
 8010b08:	e025      	b.n	8010b56 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010b0a:	68fb      	ldr	r3, [r7, #12]
 8010b0c:	22c5      	movs	r2, #197	; 0xc5
 8010b0e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8010b10:	2100      	movs	r1, #0
 8010b12:	68f8      	ldr	r0, [r7, #12]
 8010b14:	f7ff fbad 	bl	8010272 <SDIO_GetResponse>
 8010b18:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8010b1a:	693b      	ldr	r3, [r7, #16]
 8010b1c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d106      	bne.n	8010b32 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8010b24:	693b      	ldr	r3, [r7, #16]
 8010b26:	0c1b      	lsrs	r3, r3, #16
 8010b28:	b29a      	uxth	r2, r3
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8010b2e:	2300      	movs	r3, #0
 8010b30:	e011      	b.n	8010b56 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8010b32:	693b      	ldr	r3, [r7, #16]
 8010b34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d002      	beq.n	8010b42 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010b3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010b40:	e009      	b.n	8010b56 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8010b42:	693b      	ldr	r3, [r7, #16]
 8010b44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d002      	beq.n	8010b52 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010b4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010b50:	e001      	b.n	8010b56 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010b52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8010b56:	4618      	mov	r0, r3
 8010b58:	371c      	adds	r7, #28
 8010b5a:	46bd      	mov	sp, r7
 8010b5c:	bd90      	pop	{r4, r7, pc}
 8010b5e:	bf00      	nop
 8010b60:	20000000 	.word	0x20000000
 8010b64:	10624dd3 	.word	0x10624dd3

08010b68 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8010b68:	b490      	push	{r4, r7}
 8010b6a:	b084      	sub	sp, #16
 8010b6c:	af00      	add	r7, sp, #0
 8010b6e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010b70:	4b21      	ldr	r3, [pc, #132]	; (8010bf8 <SDMMC_GetCmdResp7+0x90>)
 8010b72:	681b      	ldr	r3, [r3, #0]
 8010b74:	4a21      	ldr	r2, [pc, #132]	; (8010bfc <SDMMC_GetCmdResp7+0x94>)
 8010b76:	fba2 2303 	umull	r2, r3, r2, r3
 8010b7a:	0a5b      	lsrs	r3, r3, #9
 8010b7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010b80:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010b84:	4623      	mov	r3, r4
 8010b86:	1e5c      	subs	r4, r3, #1
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d102      	bne.n	8010b92 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010b8c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010b90:	e02c      	b.n	8010bec <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b96:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010b98:	68fb      	ldr	r3, [r7, #12]
 8010b9a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	d0f0      	beq.n	8010b84 <SDMMC_GetCmdResp7+0x1c>
 8010ba2:	68fb      	ldr	r3, [r7, #12]
 8010ba4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	d1eb      	bne.n	8010b84 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010bb0:	f003 0304 	and.w	r3, r3, #4
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d004      	beq.n	8010bc2 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	2204      	movs	r2, #4
 8010bbc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010bbe:	2304      	movs	r3, #4
 8010bc0:	e014      	b.n	8010bec <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010bc6:	f003 0301 	and.w	r3, r3, #1
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d004      	beq.n	8010bd8 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	2201      	movs	r2, #1
 8010bd2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010bd4:	2301      	movs	r3, #1
 8010bd6:	e009      	b.n	8010bec <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d002      	beq.n	8010bea <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	2240      	movs	r2, #64	; 0x40
 8010be8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8010bea:	2300      	movs	r3, #0
  
}
 8010bec:	4618      	mov	r0, r3
 8010bee:	3710      	adds	r7, #16
 8010bf0:	46bd      	mov	sp, r7
 8010bf2:	bc90      	pop	{r4, r7}
 8010bf4:	4770      	bx	lr
 8010bf6:	bf00      	nop
 8010bf8:	20000000 	.word	0x20000000
 8010bfc:	10624dd3 	.word	0x10624dd3

08010c00 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8010c00:	b580      	push	{r7, lr}
 8010c02:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8010c04:	4904      	ldr	r1, [pc, #16]	; (8010c18 <MX_FATFS_Init+0x18>)
 8010c06:	4805      	ldr	r0, [pc, #20]	; (8010c1c <MX_FATFS_Init+0x1c>)
 8010c08:	f003 fba6 	bl	8014358 <FATFS_LinkDriver>
 8010c0c:	4603      	mov	r3, r0
 8010c0e:	461a      	mov	r2, r3
 8010c10:	4b03      	ldr	r3, [pc, #12]	; (8010c20 <MX_FATFS_Init+0x20>)
 8010c12:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8010c14:	bf00      	nop
 8010c16:	bd80      	pop	{r7, pc}
 8010c18:	2003fe48 	.word	0x2003fe48
 8010c1c:	0801a2c8 	.word	0x0801a2c8
 8010c20:	2003fe44 	.word	0x2003fe44

08010c24 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8010c24:	b580      	push	{r7, lr}
 8010c26:	b082      	sub	sp, #8
 8010c28:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8010c2a:	2300      	movs	r3, #0
 8010c2c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8010c2e:	f000 f896 	bl	8010d5e <BSP_SD_IsDetected>
 8010c32:	4603      	mov	r3, r0
 8010c34:	2b01      	cmp	r3, #1
 8010c36:	d001      	beq.n	8010c3c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8010c38:	2301      	movs	r3, #1
 8010c3a:	e012      	b.n	8010c62 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8010c3c:	480b      	ldr	r0, [pc, #44]	; (8010c6c <BSP_SD_Init+0x48>)
 8010c3e:	f7fb ff87 	bl	800cb50 <HAL_SD_Init>
 8010c42:	4603      	mov	r3, r0
 8010c44:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8010c46:	79fb      	ldrb	r3, [r7, #7]
 8010c48:	2b00      	cmp	r3, #0
 8010c4a:	d109      	bne.n	8010c60 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8010c4c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8010c50:	4806      	ldr	r0, [pc, #24]	; (8010c6c <BSP_SD_Init+0x48>)
 8010c52:	f7fc fd31 	bl	800d6b8 <HAL_SD_ConfigWideBusOperation>
 8010c56:	4603      	mov	r3, r0
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	d001      	beq.n	8010c60 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8010c5c:	2301      	movs	r3, #1
 8010c5e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8010c60:	79fb      	ldrb	r3, [r7, #7]
}
 8010c62:	4618      	mov	r0, r3
 8010c64:	3708      	adds	r7, #8
 8010c66:	46bd      	mov	sp, r7
 8010c68:	bd80      	pop	{r7, pc}
 8010c6a:	bf00      	nop
 8010c6c:	2003fc40 	.word	0x2003fc40

08010c70 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8010c70:	b580      	push	{r7, lr}
 8010c72:	b086      	sub	sp, #24
 8010c74:	af00      	add	r7, sp, #0
 8010c76:	60f8      	str	r0, [r7, #12]
 8010c78:	60b9      	str	r1, [r7, #8]
 8010c7a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8010c7c:	2300      	movs	r3, #0
 8010c7e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	68ba      	ldr	r2, [r7, #8]
 8010c84:	68f9      	ldr	r1, [r7, #12]
 8010c86:	4806      	ldr	r0, [pc, #24]	; (8010ca0 <BSP_SD_ReadBlocks_DMA+0x30>)
 8010c88:	f7fb fff2 	bl	800cc70 <HAL_SD_ReadBlocks_DMA>
 8010c8c:	4603      	mov	r3, r0
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d001      	beq.n	8010c96 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8010c92:	2301      	movs	r3, #1
 8010c94:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010c96:	7dfb      	ldrb	r3, [r7, #23]
}
 8010c98:	4618      	mov	r0, r3
 8010c9a:	3718      	adds	r7, #24
 8010c9c:	46bd      	mov	sp, r7
 8010c9e:	bd80      	pop	{r7, pc}
 8010ca0:	2003fc40 	.word	0x2003fc40

08010ca4 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8010ca4:	b580      	push	{r7, lr}
 8010ca6:	b086      	sub	sp, #24
 8010ca8:	af00      	add	r7, sp, #0
 8010caa:	60f8      	str	r0, [r7, #12]
 8010cac:	60b9      	str	r1, [r7, #8]
 8010cae:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8010cb0:	2300      	movs	r3, #0
 8010cb2:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	68ba      	ldr	r2, [r7, #8]
 8010cb8:	68f9      	ldr	r1, [r7, #12]
 8010cba:	4806      	ldr	r0, [pc, #24]	; (8010cd4 <BSP_SD_WriteBlocks_DMA+0x30>)
 8010cbc:	f7fc f8c0 	bl	800ce40 <HAL_SD_WriteBlocks_DMA>
 8010cc0:	4603      	mov	r3, r0
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	d001      	beq.n	8010cca <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8010cc6:	2301      	movs	r3, #1
 8010cc8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010cca:	7dfb      	ldrb	r3, [r7, #23]
}
 8010ccc:	4618      	mov	r0, r3
 8010cce:	3718      	adds	r7, #24
 8010cd0:	46bd      	mov	sp, r7
 8010cd2:	bd80      	pop	{r7, pc}
 8010cd4:	2003fc40 	.word	0x2003fc40

08010cd8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8010cd8:	b580      	push	{r7, lr}
 8010cda:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8010cdc:	4805      	ldr	r0, [pc, #20]	; (8010cf4 <BSP_SD_GetCardState+0x1c>)
 8010cde:	f7fc fd67 	bl	800d7b0 <HAL_SD_GetCardState>
 8010ce2:	4603      	mov	r3, r0
 8010ce4:	2b04      	cmp	r3, #4
 8010ce6:	bf14      	ite	ne
 8010ce8:	2301      	movne	r3, #1
 8010cea:	2300      	moveq	r3, #0
 8010cec:	b2db      	uxtb	r3, r3
}
 8010cee:	4618      	mov	r0, r3
 8010cf0:	bd80      	pop	{r7, pc}
 8010cf2:	bf00      	nop
 8010cf4:	2003fc40 	.word	0x2003fc40

08010cf8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8010cf8:	b580      	push	{r7, lr}
 8010cfa:	b082      	sub	sp, #8
 8010cfc:	af00      	add	r7, sp, #0
 8010cfe:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8010d00:	6879      	ldr	r1, [r7, #4]
 8010d02:	4803      	ldr	r0, [pc, #12]	; (8010d10 <BSP_SD_GetCardInfo+0x18>)
 8010d04:	f7fc fcac 	bl	800d660 <HAL_SD_GetCardInfo>
}
 8010d08:	bf00      	nop
 8010d0a:	3708      	adds	r7, #8
 8010d0c:	46bd      	mov	sp, r7
 8010d0e:	bd80      	pop	{r7, pc}
 8010d10:	2003fc40 	.word	0x2003fc40

08010d14 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8010d14:	b580      	push	{r7, lr}
 8010d16:	b082      	sub	sp, #8
 8010d18:	af00      	add	r7, sp, #0
 8010d1a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8010d1c:	f000 f818 	bl	8010d50 <BSP_SD_AbortCallback>
}
 8010d20:	bf00      	nop
 8010d22:	3708      	adds	r7, #8
 8010d24:	46bd      	mov	sp, r7
 8010d26:	bd80      	pop	{r7, pc}

08010d28 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010d28:	b580      	push	{r7, lr}
 8010d2a:	b082      	sub	sp, #8
 8010d2c:	af00      	add	r7, sp, #0
 8010d2e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8010d30:	f000 f9a8 	bl	8011084 <BSP_SD_WriteCpltCallback>
}
 8010d34:	bf00      	nop
 8010d36:	3708      	adds	r7, #8
 8010d38:	46bd      	mov	sp, r7
 8010d3a:	bd80      	pop	{r7, pc}

08010d3c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010d3c:	b580      	push	{r7, lr}
 8010d3e:	b082      	sub	sp, #8
 8010d40:	af00      	add	r7, sp, #0
 8010d42:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8010d44:	f000 f9aa 	bl	801109c <BSP_SD_ReadCpltCallback>
}
 8010d48:	bf00      	nop
 8010d4a:	3708      	adds	r7, #8
 8010d4c:	46bd      	mov	sp, r7
 8010d4e:	bd80      	pop	{r7, pc}

08010d50 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8010d50:	b480      	push	{r7}
 8010d52:	af00      	add	r7, sp, #0

}
 8010d54:	bf00      	nop
 8010d56:	46bd      	mov	sp, r7
 8010d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d5c:	4770      	bx	lr

08010d5e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8010d5e:	b580      	push	{r7, lr}
 8010d60:	b082      	sub	sp, #8
 8010d62:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8010d64:	2301      	movs	r3, #1
 8010d66:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8010d68:	f000 f80c 	bl	8010d84 <BSP_PlatformIsDetected>
 8010d6c:	4603      	mov	r3, r0
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d101      	bne.n	8010d76 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8010d72:	2300      	movs	r3, #0
 8010d74:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8010d76:	79fb      	ldrb	r3, [r7, #7]
 8010d78:	b2db      	uxtb	r3, r3
}
 8010d7a:	4618      	mov	r0, r3
 8010d7c:	3708      	adds	r7, #8
 8010d7e:	46bd      	mov	sp, r7
 8010d80:	bd80      	pop	{r7, pc}
	...

08010d84 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8010d84:	b580      	push	{r7, lr}
 8010d86:	b082      	sub	sp, #8
 8010d88:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8010d8a:	2301      	movs	r3, #1
 8010d8c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8010d8e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8010d92:	4806      	ldr	r0, [pc, #24]	; (8010dac <BSP_PlatformIsDetected+0x28>)
 8010d94:	f7fa f84a 	bl	800ae2c <HAL_GPIO_ReadPin>
 8010d98:	4603      	mov	r3, r0
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d001      	beq.n	8010da2 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8010d9e:	2300      	movs	r3, #0
 8010da0:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8010da2:	79fb      	ldrb	r3, [r7, #7]
}
 8010da4:	4618      	mov	r0, r3
 8010da6:	3708      	adds	r7, #8
 8010da8:	46bd      	mov	sp, r7
 8010daa:	bd80      	pop	{r7, pc}
 8010dac:	40020000 	.word	0x40020000

08010db0 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8010db0:	b580      	push	{r7, lr}
 8010db2:	b084      	sub	sp, #16
 8010db4:	af00      	add	r7, sp, #0
 8010db6:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8010db8:	f7f8 fda8 	bl	800990c <HAL_GetTick>
 8010dbc:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8010dbe:	e006      	b.n	8010dce <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010dc0:	f7ff ff8a 	bl	8010cd8 <BSP_SD_GetCardState>
 8010dc4:	4603      	mov	r3, r0
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d101      	bne.n	8010dce <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8010dca:	2300      	movs	r3, #0
 8010dcc:	e009      	b.n	8010de2 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8010dce:	f7f8 fd9d 	bl	800990c <HAL_GetTick>
 8010dd2:	4602      	mov	r2, r0
 8010dd4:	68fb      	ldr	r3, [r7, #12]
 8010dd6:	1ad3      	subs	r3, r2, r3
 8010dd8:	687a      	ldr	r2, [r7, #4]
 8010dda:	429a      	cmp	r2, r3
 8010ddc:	d8f0      	bhi.n	8010dc0 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8010dde:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010de2:	4618      	mov	r0, r3
 8010de4:	3710      	adds	r7, #16
 8010de6:	46bd      	mov	sp, r7
 8010de8:	bd80      	pop	{r7, pc}
	...

08010dec <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8010dec:	b580      	push	{r7, lr}
 8010dee:	b082      	sub	sp, #8
 8010df0:	af00      	add	r7, sp, #0
 8010df2:	4603      	mov	r3, r0
 8010df4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8010df6:	4b0b      	ldr	r3, [pc, #44]	; (8010e24 <SD_CheckStatus+0x38>)
 8010df8:	2201      	movs	r2, #1
 8010dfa:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8010dfc:	f7ff ff6c 	bl	8010cd8 <BSP_SD_GetCardState>
 8010e00:	4603      	mov	r3, r0
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	d107      	bne.n	8010e16 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8010e06:	4b07      	ldr	r3, [pc, #28]	; (8010e24 <SD_CheckStatus+0x38>)
 8010e08:	781b      	ldrb	r3, [r3, #0]
 8010e0a:	b2db      	uxtb	r3, r3
 8010e0c:	f023 0301 	bic.w	r3, r3, #1
 8010e10:	b2da      	uxtb	r2, r3
 8010e12:	4b04      	ldr	r3, [pc, #16]	; (8010e24 <SD_CheckStatus+0x38>)
 8010e14:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8010e16:	4b03      	ldr	r3, [pc, #12]	; (8010e24 <SD_CheckStatus+0x38>)
 8010e18:	781b      	ldrb	r3, [r3, #0]
 8010e1a:	b2db      	uxtb	r3, r3
}
 8010e1c:	4618      	mov	r0, r3
 8010e1e:	3708      	adds	r7, #8
 8010e20:	46bd      	mov	sp, r7
 8010e22:	bd80      	pop	{r7, pc}
 8010e24:	20000009 	.word	0x20000009

08010e28 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8010e28:	b580      	push	{r7, lr}
 8010e2a:	b082      	sub	sp, #8
 8010e2c:	af00      	add	r7, sp, #0
 8010e2e:	4603      	mov	r3, r0
 8010e30:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8010e32:	f7ff fef7 	bl	8010c24 <BSP_SD_Init>
 8010e36:	4603      	mov	r3, r0
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d107      	bne.n	8010e4c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8010e3c:	79fb      	ldrb	r3, [r7, #7]
 8010e3e:	4618      	mov	r0, r3
 8010e40:	f7ff ffd4 	bl	8010dec <SD_CheckStatus>
 8010e44:	4603      	mov	r3, r0
 8010e46:	461a      	mov	r2, r3
 8010e48:	4b04      	ldr	r3, [pc, #16]	; (8010e5c <SD_initialize+0x34>)
 8010e4a:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8010e4c:	4b03      	ldr	r3, [pc, #12]	; (8010e5c <SD_initialize+0x34>)
 8010e4e:	781b      	ldrb	r3, [r3, #0]
 8010e50:	b2db      	uxtb	r3, r3
}
 8010e52:	4618      	mov	r0, r3
 8010e54:	3708      	adds	r7, #8
 8010e56:	46bd      	mov	sp, r7
 8010e58:	bd80      	pop	{r7, pc}
 8010e5a:	bf00      	nop
 8010e5c:	20000009 	.word	0x20000009

08010e60 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8010e60:	b580      	push	{r7, lr}
 8010e62:	b082      	sub	sp, #8
 8010e64:	af00      	add	r7, sp, #0
 8010e66:	4603      	mov	r3, r0
 8010e68:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8010e6a:	79fb      	ldrb	r3, [r7, #7]
 8010e6c:	4618      	mov	r0, r3
 8010e6e:	f7ff ffbd 	bl	8010dec <SD_CheckStatus>
 8010e72:	4603      	mov	r3, r0
}
 8010e74:	4618      	mov	r0, r3
 8010e76:	3708      	adds	r7, #8
 8010e78:	46bd      	mov	sp, r7
 8010e7a:	bd80      	pop	{r7, pc}

08010e7c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8010e7c:	b580      	push	{r7, lr}
 8010e7e:	b086      	sub	sp, #24
 8010e80:	af00      	add	r7, sp, #0
 8010e82:	60b9      	str	r1, [r7, #8]
 8010e84:	607a      	str	r2, [r7, #4]
 8010e86:	603b      	str	r3, [r7, #0]
 8010e88:	4603      	mov	r3, r0
 8010e8a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010e8c:	2301      	movs	r3, #1
 8010e8e:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8010e90:	f247 5030 	movw	r0, #30000	; 0x7530
 8010e94:	f7ff ff8c 	bl	8010db0 <SD_CheckStatusWithTimeout>
 8010e98:	4603      	mov	r3, r0
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	da01      	bge.n	8010ea2 <SD_read+0x26>
  {
    return res;
 8010e9e:	7dfb      	ldrb	r3, [r7, #23]
 8010ea0:	e03b      	b.n	8010f1a <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8010ea2:	683a      	ldr	r2, [r7, #0]
 8010ea4:	6879      	ldr	r1, [r7, #4]
 8010ea6:	68b8      	ldr	r0, [r7, #8]
 8010ea8:	f7ff fee2 	bl	8010c70 <BSP_SD_ReadBlocks_DMA>
 8010eac:	4603      	mov	r3, r0
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d132      	bne.n	8010f18 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8010eb2:	4b1c      	ldr	r3, [pc, #112]	; (8010f24 <SD_read+0xa8>)
 8010eb4:	2200      	movs	r2, #0
 8010eb6:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8010eb8:	f7f8 fd28 	bl	800990c <HAL_GetTick>
 8010ebc:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8010ebe:	bf00      	nop
 8010ec0:	4b18      	ldr	r3, [pc, #96]	; (8010f24 <SD_read+0xa8>)
 8010ec2:	681b      	ldr	r3, [r3, #0]
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d108      	bne.n	8010eda <SD_read+0x5e>
 8010ec8:	f7f8 fd20 	bl	800990c <HAL_GetTick>
 8010ecc:	4602      	mov	r2, r0
 8010ece:	693b      	ldr	r3, [r7, #16]
 8010ed0:	1ad3      	subs	r3, r2, r3
 8010ed2:	f247 522f 	movw	r2, #29999	; 0x752f
 8010ed6:	4293      	cmp	r3, r2
 8010ed8:	d9f2      	bls.n	8010ec0 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 8010eda:	4b12      	ldr	r3, [pc, #72]	; (8010f24 <SD_read+0xa8>)
 8010edc:	681b      	ldr	r3, [r3, #0]
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d102      	bne.n	8010ee8 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8010ee2:	2301      	movs	r3, #1
 8010ee4:	75fb      	strb	r3, [r7, #23]
 8010ee6:	e017      	b.n	8010f18 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8010ee8:	4b0e      	ldr	r3, [pc, #56]	; (8010f24 <SD_read+0xa8>)
 8010eea:	2200      	movs	r2, #0
 8010eec:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8010eee:	f7f8 fd0d 	bl	800990c <HAL_GetTick>
 8010ef2:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010ef4:	e007      	b.n	8010f06 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010ef6:	f7ff feef 	bl	8010cd8 <BSP_SD_GetCardState>
 8010efa:	4603      	mov	r3, r0
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	d102      	bne.n	8010f06 <SD_read+0x8a>
          {
            res = RES_OK;
 8010f00:	2300      	movs	r3, #0
 8010f02:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8010f04:	e008      	b.n	8010f18 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010f06:	f7f8 fd01 	bl	800990c <HAL_GetTick>
 8010f0a:	4602      	mov	r2, r0
 8010f0c:	693b      	ldr	r3, [r7, #16]
 8010f0e:	1ad3      	subs	r3, r2, r3
 8010f10:	f247 522f 	movw	r2, #29999	; 0x752f
 8010f14:	4293      	cmp	r3, r2
 8010f16:	d9ee      	bls.n	8010ef6 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8010f18:	7dfb      	ldrb	r3, [r7, #23]
}
 8010f1a:	4618      	mov	r0, r3
 8010f1c:	3718      	adds	r7, #24
 8010f1e:	46bd      	mov	sp, r7
 8010f20:	bd80      	pop	{r7, pc}
 8010f22:	bf00      	nop
 8010f24:	2003d4dc 	.word	0x2003d4dc

08010f28 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8010f28:	b580      	push	{r7, lr}
 8010f2a:	b086      	sub	sp, #24
 8010f2c:	af00      	add	r7, sp, #0
 8010f2e:	60b9      	str	r1, [r7, #8]
 8010f30:	607a      	str	r2, [r7, #4]
 8010f32:	603b      	str	r3, [r7, #0]
 8010f34:	4603      	mov	r3, r0
 8010f36:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010f38:	2301      	movs	r3, #1
 8010f3a:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8010f3c:	4b24      	ldr	r3, [pc, #144]	; (8010fd0 <SD_write+0xa8>)
 8010f3e:	2200      	movs	r2, #0
 8010f40:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8010f42:	f247 5030 	movw	r0, #30000	; 0x7530
 8010f46:	f7ff ff33 	bl	8010db0 <SD_CheckStatusWithTimeout>
 8010f4a:	4603      	mov	r3, r0
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	da01      	bge.n	8010f54 <SD_write+0x2c>
  {
    return res;
 8010f50:	7dfb      	ldrb	r3, [r7, #23]
 8010f52:	e038      	b.n	8010fc6 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8010f54:	683a      	ldr	r2, [r7, #0]
 8010f56:	6879      	ldr	r1, [r7, #4]
 8010f58:	68b8      	ldr	r0, [r7, #8]
 8010f5a:	f7ff fea3 	bl	8010ca4 <BSP_SD_WriteBlocks_DMA>
 8010f5e:	4603      	mov	r3, r0
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d12f      	bne.n	8010fc4 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8010f64:	f7f8 fcd2 	bl	800990c <HAL_GetTick>
 8010f68:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8010f6a:	bf00      	nop
 8010f6c:	4b18      	ldr	r3, [pc, #96]	; (8010fd0 <SD_write+0xa8>)
 8010f6e:	681b      	ldr	r3, [r3, #0]
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	d108      	bne.n	8010f86 <SD_write+0x5e>
 8010f74:	f7f8 fcca 	bl	800990c <HAL_GetTick>
 8010f78:	4602      	mov	r2, r0
 8010f7a:	693b      	ldr	r3, [r7, #16]
 8010f7c:	1ad3      	subs	r3, r2, r3
 8010f7e:	f247 522f 	movw	r2, #29999	; 0x752f
 8010f82:	4293      	cmp	r3, r2
 8010f84:	d9f2      	bls.n	8010f6c <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 8010f86:	4b12      	ldr	r3, [pc, #72]	; (8010fd0 <SD_write+0xa8>)
 8010f88:	681b      	ldr	r3, [r3, #0]
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d102      	bne.n	8010f94 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8010f8e:	2301      	movs	r3, #1
 8010f90:	75fb      	strb	r3, [r7, #23]
 8010f92:	e017      	b.n	8010fc4 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8010f94:	4b0e      	ldr	r3, [pc, #56]	; (8010fd0 <SD_write+0xa8>)
 8010f96:	2200      	movs	r2, #0
 8010f98:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8010f9a:	f7f8 fcb7 	bl	800990c <HAL_GetTick>
 8010f9e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010fa0:	e007      	b.n	8010fb2 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010fa2:	f7ff fe99 	bl	8010cd8 <BSP_SD_GetCardState>
 8010fa6:	4603      	mov	r3, r0
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d102      	bne.n	8010fb2 <SD_write+0x8a>
          {
            res = RES_OK;
 8010fac:	2300      	movs	r3, #0
 8010fae:	75fb      	strb	r3, [r7, #23]
            break;
 8010fb0:	e008      	b.n	8010fc4 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010fb2:	f7f8 fcab 	bl	800990c <HAL_GetTick>
 8010fb6:	4602      	mov	r2, r0
 8010fb8:	693b      	ldr	r3, [r7, #16]
 8010fba:	1ad3      	subs	r3, r2, r3
 8010fbc:	f247 522f 	movw	r2, #29999	; 0x752f
 8010fc0:	4293      	cmp	r3, r2
 8010fc2:	d9ee      	bls.n	8010fa2 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8010fc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8010fc6:	4618      	mov	r0, r3
 8010fc8:	3718      	adds	r7, #24
 8010fca:	46bd      	mov	sp, r7
 8010fcc:	bd80      	pop	{r7, pc}
 8010fce:	bf00      	nop
 8010fd0:	2003d4d8 	.word	0x2003d4d8

08010fd4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8010fd4:	b580      	push	{r7, lr}
 8010fd6:	b08c      	sub	sp, #48	; 0x30
 8010fd8:	af00      	add	r7, sp, #0
 8010fda:	4603      	mov	r3, r0
 8010fdc:	603a      	str	r2, [r7, #0]
 8010fde:	71fb      	strb	r3, [r7, #7]
 8010fe0:	460b      	mov	r3, r1
 8010fe2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8010fe4:	2301      	movs	r3, #1
 8010fe6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8010fea:	4b25      	ldr	r3, [pc, #148]	; (8011080 <SD_ioctl+0xac>)
 8010fec:	781b      	ldrb	r3, [r3, #0]
 8010fee:	b2db      	uxtb	r3, r3
 8010ff0:	f003 0301 	and.w	r3, r3, #1
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	d001      	beq.n	8010ffc <SD_ioctl+0x28>
 8010ff8:	2303      	movs	r3, #3
 8010ffa:	e03c      	b.n	8011076 <SD_ioctl+0xa2>

  switch (cmd)
 8010ffc:	79bb      	ldrb	r3, [r7, #6]
 8010ffe:	2b03      	cmp	r3, #3
 8011000:	d834      	bhi.n	801106c <SD_ioctl+0x98>
 8011002:	a201      	add	r2, pc, #4	; (adr r2, 8011008 <SD_ioctl+0x34>)
 8011004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011008:	08011019 	.word	0x08011019
 801100c:	08011021 	.word	0x08011021
 8011010:	08011039 	.word	0x08011039
 8011014:	08011053 	.word	0x08011053
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8011018:	2300      	movs	r3, #0
 801101a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801101e:	e028      	b.n	8011072 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8011020:	f107 030c 	add.w	r3, r7, #12
 8011024:	4618      	mov	r0, r3
 8011026:	f7ff fe67 	bl	8010cf8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801102a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801102c:	683b      	ldr	r3, [r7, #0]
 801102e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011030:	2300      	movs	r3, #0
 8011032:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011036:	e01c      	b.n	8011072 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8011038:	f107 030c 	add.w	r3, r7, #12
 801103c:	4618      	mov	r0, r3
 801103e:	f7ff fe5b 	bl	8010cf8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8011042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011044:	b29a      	uxth	r2, r3
 8011046:	683b      	ldr	r3, [r7, #0]
 8011048:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 801104a:	2300      	movs	r3, #0
 801104c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011050:	e00f      	b.n	8011072 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8011052:	f107 030c 	add.w	r3, r7, #12
 8011056:	4618      	mov	r0, r3
 8011058:	f7ff fe4e 	bl	8010cf8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 801105c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801105e:	0a5a      	lsrs	r2, r3, #9
 8011060:	683b      	ldr	r3, [r7, #0]
 8011062:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011064:	2300      	movs	r3, #0
 8011066:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801106a:	e002      	b.n	8011072 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 801106c:	2304      	movs	r3, #4
 801106e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8011072:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8011076:	4618      	mov	r0, r3
 8011078:	3730      	adds	r7, #48	; 0x30
 801107a:	46bd      	mov	sp, r7
 801107c:	bd80      	pop	{r7, pc}
 801107e:	bf00      	nop
 8011080:	20000009 	.word	0x20000009

08011084 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8011084:	b480      	push	{r7}
 8011086:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8011088:	4b03      	ldr	r3, [pc, #12]	; (8011098 <BSP_SD_WriteCpltCallback+0x14>)
 801108a:	2201      	movs	r2, #1
 801108c:	601a      	str	r2, [r3, #0]
}
 801108e:	bf00      	nop
 8011090:	46bd      	mov	sp, r7
 8011092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011096:	4770      	bx	lr
 8011098:	2003d4d8 	.word	0x2003d4d8

0801109c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 801109c:	b480      	push	{r7}
 801109e:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80110a0:	4b03      	ldr	r3, [pc, #12]	; (80110b0 <BSP_SD_ReadCpltCallback+0x14>)
 80110a2:	2201      	movs	r2, #1
 80110a4:	601a      	str	r2, [r3, #0]
}
 80110a6:	bf00      	nop
 80110a8:	46bd      	mov	sp, r7
 80110aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ae:	4770      	bx	lr
 80110b0:	2003d4dc 	.word	0x2003d4dc

080110b4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80110b4:	b580      	push	{r7, lr}
 80110b6:	b084      	sub	sp, #16
 80110b8:	af00      	add	r7, sp, #0
 80110ba:	4603      	mov	r3, r0
 80110bc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80110be:	79fb      	ldrb	r3, [r7, #7]
 80110c0:	4a08      	ldr	r2, [pc, #32]	; (80110e4 <disk_status+0x30>)
 80110c2:	009b      	lsls	r3, r3, #2
 80110c4:	4413      	add	r3, r2
 80110c6:	685b      	ldr	r3, [r3, #4]
 80110c8:	685b      	ldr	r3, [r3, #4]
 80110ca:	79fa      	ldrb	r2, [r7, #7]
 80110cc:	4905      	ldr	r1, [pc, #20]	; (80110e4 <disk_status+0x30>)
 80110ce:	440a      	add	r2, r1
 80110d0:	7a12      	ldrb	r2, [r2, #8]
 80110d2:	4610      	mov	r0, r2
 80110d4:	4798      	blx	r3
 80110d6:	4603      	mov	r3, r0
 80110d8:	73fb      	strb	r3, [r7, #15]
  return stat;
 80110da:	7bfb      	ldrb	r3, [r7, #15]
}
 80110dc:	4618      	mov	r0, r3
 80110de:	3710      	adds	r7, #16
 80110e0:	46bd      	mov	sp, r7
 80110e2:	bd80      	pop	{r7, pc}
 80110e4:	2003d508 	.word	0x2003d508

080110e8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80110e8:	b580      	push	{r7, lr}
 80110ea:	b084      	sub	sp, #16
 80110ec:	af00      	add	r7, sp, #0
 80110ee:	4603      	mov	r3, r0
 80110f0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80110f2:	2300      	movs	r3, #0
 80110f4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80110f6:	79fb      	ldrb	r3, [r7, #7]
 80110f8:	4a0d      	ldr	r2, [pc, #52]	; (8011130 <disk_initialize+0x48>)
 80110fa:	5cd3      	ldrb	r3, [r2, r3]
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d111      	bne.n	8011124 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8011100:	79fb      	ldrb	r3, [r7, #7]
 8011102:	4a0b      	ldr	r2, [pc, #44]	; (8011130 <disk_initialize+0x48>)
 8011104:	2101      	movs	r1, #1
 8011106:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8011108:	79fb      	ldrb	r3, [r7, #7]
 801110a:	4a09      	ldr	r2, [pc, #36]	; (8011130 <disk_initialize+0x48>)
 801110c:	009b      	lsls	r3, r3, #2
 801110e:	4413      	add	r3, r2
 8011110:	685b      	ldr	r3, [r3, #4]
 8011112:	681b      	ldr	r3, [r3, #0]
 8011114:	79fa      	ldrb	r2, [r7, #7]
 8011116:	4906      	ldr	r1, [pc, #24]	; (8011130 <disk_initialize+0x48>)
 8011118:	440a      	add	r2, r1
 801111a:	7a12      	ldrb	r2, [r2, #8]
 801111c:	4610      	mov	r0, r2
 801111e:	4798      	blx	r3
 8011120:	4603      	mov	r3, r0
 8011122:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8011124:	7bfb      	ldrb	r3, [r7, #15]
}
 8011126:	4618      	mov	r0, r3
 8011128:	3710      	adds	r7, #16
 801112a:	46bd      	mov	sp, r7
 801112c:	bd80      	pop	{r7, pc}
 801112e:	bf00      	nop
 8011130:	2003d508 	.word	0x2003d508

08011134 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8011134:	b590      	push	{r4, r7, lr}
 8011136:	b087      	sub	sp, #28
 8011138:	af00      	add	r7, sp, #0
 801113a:	60b9      	str	r1, [r7, #8]
 801113c:	607a      	str	r2, [r7, #4]
 801113e:	603b      	str	r3, [r7, #0]
 8011140:	4603      	mov	r3, r0
 8011142:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8011144:	7bfb      	ldrb	r3, [r7, #15]
 8011146:	4a0a      	ldr	r2, [pc, #40]	; (8011170 <disk_read+0x3c>)
 8011148:	009b      	lsls	r3, r3, #2
 801114a:	4413      	add	r3, r2
 801114c:	685b      	ldr	r3, [r3, #4]
 801114e:	689c      	ldr	r4, [r3, #8]
 8011150:	7bfb      	ldrb	r3, [r7, #15]
 8011152:	4a07      	ldr	r2, [pc, #28]	; (8011170 <disk_read+0x3c>)
 8011154:	4413      	add	r3, r2
 8011156:	7a18      	ldrb	r0, [r3, #8]
 8011158:	683b      	ldr	r3, [r7, #0]
 801115a:	687a      	ldr	r2, [r7, #4]
 801115c:	68b9      	ldr	r1, [r7, #8]
 801115e:	47a0      	blx	r4
 8011160:	4603      	mov	r3, r0
 8011162:	75fb      	strb	r3, [r7, #23]
  return res;
 8011164:	7dfb      	ldrb	r3, [r7, #23]
}
 8011166:	4618      	mov	r0, r3
 8011168:	371c      	adds	r7, #28
 801116a:	46bd      	mov	sp, r7
 801116c:	bd90      	pop	{r4, r7, pc}
 801116e:	bf00      	nop
 8011170:	2003d508 	.word	0x2003d508

08011174 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8011174:	b590      	push	{r4, r7, lr}
 8011176:	b087      	sub	sp, #28
 8011178:	af00      	add	r7, sp, #0
 801117a:	60b9      	str	r1, [r7, #8]
 801117c:	607a      	str	r2, [r7, #4]
 801117e:	603b      	str	r3, [r7, #0]
 8011180:	4603      	mov	r3, r0
 8011182:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8011184:	7bfb      	ldrb	r3, [r7, #15]
 8011186:	4a0a      	ldr	r2, [pc, #40]	; (80111b0 <disk_write+0x3c>)
 8011188:	009b      	lsls	r3, r3, #2
 801118a:	4413      	add	r3, r2
 801118c:	685b      	ldr	r3, [r3, #4]
 801118e:	68dc      	ldr	r4, [r3, #12]
 8011190:	7bfb      	ldrb	r3, [r7, #15]
 8011192:	4a07      	ldr	r2, [pc, #28]	; (80111b0 <disk_write+0x3c>)
 8011194:	4413      	add	r3, r2
 8011196:	7a18      	ldrb	r0, [r3, #8]
 8011198:	683b      	ldr	r3, [r7, #0]
 801119a:	687a      	ldr	r2, [r7, #4]
 801119c:	68b9      	ldr	r1, [r7, #8]
 801119e:	47a0      	blx	r4
 80111a0:	4603      	mov	r3, r0
 80111a2:	75fb      	strb	r3, [r7, #23]
  return res;
 80111a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80111a6:	4618      	mov	r0, r3
 80111a8:	371c      	adds	r7, #28
 80111aa:	46bd      	mov	sp, r7
 80111ac:	bd90      	pop	{r4, r7, pc}
 80111ae:	bf00      	nop
 80111b0:	2003d508 	.word	0x2003d508

080111b4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80111b4:	b580      	push	{r7, lr}
 80111b6:	b084      	sub	sp, #16
 80111b8:	af00      	add	r7, sp, #0
 80111ba:	4603      	mov	r3, r0
 80111bc:	603a      	str	r2, [r7, #0]
 80111be:	71fb      	strb	r3, [r7, #7]
 80111c0:	460b      	mov	r3, r1
 80111c2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80111c4:	79fb      	ldrb	r3, [r7, #7]
 80111c6:	4a09      	ldr	r2, [pc, #36]	; (80111ec <disk_ioctl+0x38>)
 80111c8:	009b      	lsls	r3, r3, #2
 80111ca:	4413      	add	r3, r2
 80111cc:	685b      	ldr	r3, [r3, #4]
 80111ce:	691b      	ldr	r3, [r3, #16]
 80111d0:	79fa      	ldrb	r2, [r7, #7]
 80111d2:	4906      	ldr	r1, [pc, #24]	; (80111ec <disk_ioctl+0x38>)
 80111d4:	440a      	add	r2, r1
 80111d6:	7a10      	ldrb	r0, [r2, #8]
 80111d8:	79b9      	ldrb	r1, [r7, #6]
 80111da:	683a      	ldr	r2, [r7, #0]
 80111dc:	4798      	blx	r3
 80111de:	4603      	mov	r3, r0
 80111e0:	73fb      	strb	r3, [r7, #15]
  return res;
 80111e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80111e4:	4618      	mov	r0, r3
 80111e6:	3710      	adds	r7, #16
 80111e8:	46bd      	mov	sp, r7
 80111ea:	bd80      	pop	{r7, pc}
 80111ec:	2003d508 	.word	0x2003d508

080111f0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80111f0:	b480      	push	{r7}
 80111f2:	b085      	sub	sp, #20
 80111f4:	af00      	add	r7, sp, #0
 80111f6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	3301      	adds	r3, #1
 80111fc:	781b      	ldrb	r3, [r3, #0]
 80111fe:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8011200:	89fb      	ldrh	r3, [r7, #14]
 8011202:	021b      	lsls	r3, r3, #8
 8011204:	b21a      	sxth	r2, r3
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	781b      	ldrb	r3, [r3, #0]
 801120a:	b21b      	sxth	r3, r3
 801120c:	4313      	orrs	r3, r2
 801120e:	b21b      	sxth	r3, r3
 8011210:	81fb      	strh	r3, [r7, #14]
	return rv;
 8011212:	89fb      	ldrh	r3, [r7, #14]
}
 8011214:	4618      	mov	r0, r3
 8011216:	3714      	adds	r7, #20
 8011218:	46bd      	mov	sp, r7
 801121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801121e:	4770      	bx	lr

08011220 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8011220:	b480      	push	{r7}
 8011222:	b085      	sub	sp, #20
 8011224:	af00      	add	r7, sp, #0
 8011226:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	3303      	adds	r3, #3
 801122c:	781b      	ldrb	r3, [r3, #0]
 801122e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8011230:	68fb      	ldr	r3, [r7, #12]
 8011232:	021b      	lsls	r3, r3, #8
 8011234:	687a      	ldr	r2, [r7, #4]
 8011236:	3202      	adds	r2, #2
 8011238:	7812      	ldrb	r2, [r2, #0]
 801123a:	4313      	orrs	r3, r2
 801123c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801123e:	68fb      	ldr	r3, [r7, #12]
 8011240:	021b      	lsls	r3, r3, #8
 8011242:	687a      	ldr	r2, [r7, #4]
 8011244:	3201      	adds	r2, #1
 8011246:	7812      	ldrb	r2, [r2, #0]
 8011248:	4313      	orrs	r3, r2
 801124a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 801124c:	68fb      	ldr	r3, [r7, #12]
 801124e:	021b      	lsls	r3, r3, #8
 8011250:	687a      	ldr	r2, [r7, #4]
 8011252:	7812      	ldrb	r2, [r2, #0]
 8011254:	4313      	orrs	r3, r2
 8011256:	60fb      	str	r3, [r7, #12]
	return rv;
 8011258:	68fb      	ldr	r3, [r7, #12]
}
 801125a:	4618      	mov	r0, r3
 801125c:	3714      	adds	r7, #20
 801125e:	46bd      	mov	sp, r7
 8011260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011264:	4770      	bx	lr

08011266 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8011266:	b480      	push	{r7}
 8011268:	b083      	sub	sp, #12
 801126a:	af00      	add	r7, sp, #0
 801126c:	6078      	str	r0, [r7, #4]
 801126e:	460b      	mov	r3, r1
 8011270:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	1c5a      	adds	r2, r3, #1
 8011276:	607a      	str	r2, [r7, #4]
 8011278:	887a      	ldrh	r2, [r7, #2]
 801127a:	b2d2      	uxtb	r2, r2
 801127c:	701a      	strb	r2, [r3, #0]
 801127e:	887b      	ldrh	r3, [r7, #2]
 8011280:	0a1b      	lsrs	r3, r3, #8
 8011282:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	1c5a      	adds	r2, r3, #1
 8011288:	607a      	str	r2, [r7, #4]
 801128a:	887a      	ldrh	r2, [r7, #2]
 801128c:	b2d2      	uxtb	r2, r2
 801128e:	701a      	strb	r2, [r3, #0]
}
 8011290:	bf00      	nop
 8011292:	370c      	adds	r7, #12
 8011294:	46bd      	mov	sp, r7
 8011296:	f85d 7b04 	ldr.w	r7, [sp], #4
 801129a:	4770      	bx	lr

0801129c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 801129c:	b480      	push	{r7}
 801129e:	b083      	sub	sp, #12
 80112a0:	af00      	add	r7, sp, #0
 80112a2:	6078      	str	r0, [r7, #4]
 80112a4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	1c5a      	adds	r2, r3, #1
 80112aa:	607a      	str	r2, [r7, #4]
 80112ac:	683a      	ldr	r2, [r7, #0]
 80112ae:	b2d2      	uxtb	r2, r2
 80112b0:	701a      	strb	r2, [r3, #0]
 80112b2:	683b      	ldr	r3, [r7, #0]
 80112b4:	0a1b      	lsrs	r3, r3, #8
 80112b6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	1c5a      	adds	r2, r3, #1
 80112bc:	607a      	str	r2, [r7, #4]
 80112be:	683a      	ldr	r2, [r7, #0]
 80112c0:	b2d2      	uxtb	r2, r2
 80112c2:	701a      	strb	r2, [r3, #0]
 80112c4:	683b      	ldr	r3, [r7, #0]
 80112c6:	0a1b      	lsrs	r3, r3, #8
 80112c8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	1c5a      	adds	r2, r3, #1
 80112ce:	607a      	str	r2, [r7, #4]
 80112d0:	683a      	ldr	r2, [r7, #0]
 80112d2:	b2d2      	uxtb	r2, r2
 80112d4:	701a      	strb	r2, [r3, #0]
 80112d6:	683b      	ldr	r3, [r7, #0]
 80112d8:	0a1b      	lsrs	r3, r3, #8
 80112da:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	1c5a      	adds	r2, r3, #1
 80112e0:	607a      	str	r2, [r7, #4]
 80112e2:	683a      	ldr	r2, [r7, #0]
 80112e4:	b2d2      	uxtb	r2, r2
 80112e6:	701a      	strb	r2, [r3, #0]
}
 80112e8:	bf00      	nop
 80112ea:	370c      	adds	r7, #12
 80112ec:	46bd      	mov	sp, r7
 80112ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112f2:	4770      	bx	lr

080112f4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80112f4:	b480      	push	{r7}
 80112f6:	b087      	sub	sp, #28
 80112f8:	af00      	add	r7, sp, #0
 80112fa:	60f8      	str	r0, [r7, #12]
 80112fc:	60b9      	str	r1, [r7, #8]
 80112fe:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8011300:	68fb      	ldr	r3, [r7, #12]
 8011302:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8011304:	68bb      	ldr	r3, [r7, #8]
 8011306:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	2b00      	cmp	r3, #0
 801130c:	d00d      	beq.n	801132a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 801130e:	693a      	ldr	r2, [r7, #16]
 8011310:	1c53      	adds	r3, r2, #1
 8011312:	613b      	str	r3, [r7, #16]
 8011314:	697b      	ldr	r3, [r7, #20]
 8011316:	1c59      	adds	r1, r3, #1
 8011318:	6179      	str	r1, [r7, #20]
 801131a:	7812      	ldrb	r2, [r2, #0]
 801131c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	3b01      	subs	r3, #1
 8011322:	607b      	str	r3, [r7, #4]
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	2b00      	cmp	r3, #0
 8011328:	d1f1      	bne.n	801130e <mem_cpy+0x1a>
	}
}
 801132a:	bf00      	nop
 801132c:	371c      	adds	r7, #28
 801132e:	46bd      	mov	sp, r7
 8011330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011334:	4770      	bx	lr

08011336 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8011336:	b480      	push	{r7}
 8011338:	b087      	sub	sp, #28
 801133a:	af00      	add	r7, sp, #0
 801133c:	60f8      	str	r0, [r7, #12]
 801133e:	60b9      	str	r1, [r7, #8]
 8011340:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8011342:	68fb      	ldr	r3, [r7, #12]
 8011344:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8011346:	697b      	ldr	r3, [r7, #20]
 8011348:	1c5a      	adds	r2, r3, #1
 801134a:	617a      	str	r2, [r7, #20]
 801134c:	68ba      	ldr	r2, [r7, #8]
 801134e:	b2d2      	uxtb	r2, r2
 8011350:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	3b01      	subs	r3, #1
 8011356:	607b      	str	r3, [r7, #4]
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	2b00      	cmp	r3, #0
 801135c:	d1f3      	bne.n	8011346 <mem_set+0x10>
}
 801135e:	bf00      	nop
 8011360:	bf00      	nop
 8011362:	371c      	adds	r7, #28
 8011364:	46bd      	mov	sp, r7
 8011366:	f85d 7b04 	ldr.w	r7, [sp], #4
 801136a:	4770      	bx	lr

0801136c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 801136c:	b480      	push	{r7}
 801136e:	b089      	sub	sp, #36	; 0x24
 8011370:	af00      	add	r7, sp, #0
 8011372:	60f8      	str	r0, [r7, #12]
 8011374:	60b9      	str	r1, [r7, #8]
 8011376:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8011378:	68fb      	ldr	r3, [r7, #12]
 801137a:	61fb      	str	r3, [r7, #28]
 801137c:	68bb      	ldr	r3, [r7, #8]
 801137e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8011380:	2300      	movs	r3, #0
 8011382:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8011384:	69fb      	ldr	r3, [r7, #28]
 8011386:	1c5a      	adds	r2, r3, #1
 8011388:	61fa      	str	r2, [r7, #28]
 801138a:	781b      	ldrb	r3, [r3, #0]
 801138c:	4619      	mov	r1, r3
 801138e:	69bb      	ldr	r3, [r7, #24]
 8011390:	1c5a      	adds	r2, r3, #1
 8011392:	61ba      	str	r2, [r7, #24]
 8011394:	781b      	ldrb	r3, [r3, #0]
 8011396:	1acb      	subs	r3, r1, r3
 8011398:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	3b01      	subs	r3, #1
 801139e:	607b      	str	r3, [r7, #4]
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d002      	beq.n	80113ac <mem_cmp+0x40>
 80113a6:	697b      	ldr	r3, [r7, #20]
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d0eb      	beq.n	8011384 <mem_cmp+0x18>

	return r;
 80113ac:	697b      	ldr	r3, [r7, #20]
}
 80113ae:	4618      	mov	r0, r3
 80113b0:	3724      	adds	r7, #36	; 0x24
 80113b2:	46bd      	mov	sp, r7
 80113b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113b8:	4770      	bx	lr

080113ba <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80113ba:	b480      	push	{r7}
 80113bc:	b083      	sub	sp, #12
 80113be:	af00      	add	r7, sp, #0
 80113c0:	6078      	str	r0, [r7, #4]
 80113c2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80113c4:	e002      	b.n	80113cc <chk_chr+0x12>
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	3301      	adds	r3, #1
 80113ca:	607b      	str	r3, [r7, #4]
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	781b      	ldrb	r3, [r3, #0]
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d005      	beq.n	80113e0 <chk_chr+0x26>
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	781b      	ldrb	r3, [r3, #0]
 80113d8:	461a      	mov	r2, r3
 80113da:	683b      	ldr	r3, [r7, #0]
 80113dc:	4293      	cmp	r3, r2
 80113de:	d1f2      	bne.n	80113c6 <chk_chr+0xc>
	return *str;
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	781b      	ldrb	r3, [r3, #0]
}
 80113e4:	4618      	mov	r0, r3
 80113e6:	370c      	adds	r7, #12
 80113e8:	46bd      	mov	sp, r7
 80113ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ee:	4770      	bx	lr

080113f0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80113f0:	b480      	push	{r7}
 80113f2:	b085      	sub	sp, #20
 80113f4:	af00      	add	r7, sp, #0
 80113f6:	6078      	str	r0, [r7, #4]
 80113f8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80113fa:	2300      	movs	r3, #0
 80113fc:	60bb      	str	r3, [r7, #8]
 80113fe:	68bb      	ldr	r3, [r7, #8]
 8011400:	60fb      	str	r3, [r7, #12]
 8011402:	e029      	b.n	8011458 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8011404:	4a27      	ldr	r2, [pc, #156]	; (80114a4 <chk_lock+0xb4>)
 8011406:	68fb      	ldr	r3, [r7, #12]
 8011408:	011b      	lsls	r3, r3, #4
 801140a:	4413      	add	r3, r2
 801140c:	681b      	ldr	r3, [r3, #0]
 801140e:	2b00      	cmp	r3, #0
 8011410:	d01d      	beq.n	801144e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8011412:	4a24      	ldr	r2, [pc, #144]	; (80114a4 <chk_lock+0xb4>)
 8011414:	68fb      	ldr	r3, [r7, #12]
 8011416:	011b      	lsls	r3, r3, #4
 8011418:	4413      	add	r3, r2
 801141a:	681a      	ldr	r2, [r3, #0]
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	681b      	ldr	r3, [r3, #0]
 8011420:	429a      	cmp	r2, r3
 8011422:	d116      	bne.n	8011452 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8011424:	4a1f      	ldr	r2, [pc, #124]	; (80114a4 <chk_lock+0xb4>)
 8011426:	68fb      	ldr	r3, [r7, #12]
 8011428:	011b      	lsls	r3, r3, #4
 801142a:	4413      	add	r3, r2
 801142c:	3304      	adds	r3, #4
 801142e:	681a      	ldr	r2, [r3, #0]
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8011434:	429a      	cmp	r2, r3
 8011436:	d10c      	bne.n	8011452 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011438:	4a1a      	ldr	r2, [pc, #104]	; (80114a4 <chk_lock+0xb4>)
 801143a:	68fb      	ldr	r3, [r7, #12]
 801143c:	011b      	lsls	r3, r3, #4
 801143e:	4413      	add	r3, r2
 8011440:	3308      	adds	r3, #8
 8011442:	681a      	ldr	r2, [r3, #0]
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8011448:	429a      	cmp	r2, r3
 801144a:	d102      	bne.n	8011452 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801144c:	e007      	b.n	801145e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801144e:	2301      	movs	r3, #1
 8011450:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8011452:	68fb      	ldr	r3, [r7, #12]
 8011454:	3301      	adds	r3, #1
 8011456:	60fb      	str	r3, [r7, #12]
 8011458:	68fb      	ldr	r3, [r7, #12]
 801145a:	2b01      	cmp	r3, #1
 801145c:	d9d2      	bls.n	8011404 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 801145e:	68fb      	ldr	r3, [r7, #12]
 8011460:	2b02      	cmp	r3, #2
 8011462:	d109      	bne.n	8011478 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8011464:	68bb      	ldr	r3, [r7, #8]
 8011466:	2b00      	cmp	r3, #0
 8011468:	d102      	bne.n	8011470 <chk_lock+0x80>
 801146a:	683b      	ldr	r3, [r7, #0]
 801146c:	2b02      	cmp	r3, #2
 801146e:	d101      	bne.n	8011474 <chk_lock+0x84>
 8011470:	2300      	movs	r3, #0
 8011472:	e010      	b.n	8011496 <chk_lock+0xa6>
 8011474:	2312      	movs	r3, #18
 8011476:	e00e      	b.n	8011496 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8011478:	683b      	ldr	r3, [r7, #0]
 801147a:	2b00      	cmp	r3, #0
 801147c:	d108      	bne.n	8011490 <chk_lock+0xa0>
 801147e:	4a09      	ldr	r2, [pc, #36]	; (80114a4 <chk_lock+0xb4>)
 8011480:	68fb      	ldr	r3, [r7, #12]
 8011482:	011b      	lsls	r3, r3, #4
 8011484:	4413      	add	r3, r2
 8011486:	330c      	adds	r3, #12
 8011488:	881b      	ldrh	r3, [r3, #0]
 801148a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801148e:	d101      	bne.n	8011494 <chk_lock+0xa4>
 8011490:	2310      	movs	r3, #16
 8011492:	e000      	b.n	8011496 <chk_lock+0xa6>
 8011494:	2300      	movs	r3, #0
}
 8011496:	4618      	mov	r0, r3
 8011498:	3714      	adds	r7, #20
 801149a:	46bd      	mov	sp, r7
 801149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114a0:	4770      	bx	lr
 80114a2:	bf00      	nop
 80114a4:	2003d4e8 	.word	0x2003d4e8

080114a8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80114a8:	b480      	push	{r7}
 80114aa:	b083      	sub	sp, #12
 80114ac:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80114ae:	2300      	movs	r3, #0
 80114b0:	607b      	str	r3, [r7, #4]
 80114b2:	e002      	b.n	80114ba <enq_lock+0x12>
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	3301      	adds	r3, #1
 80114b8:	607b      	str	r3, [r7, #4]
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	2b01      	cmp	r3, #1
 80114be:	d806      	bhi.n	80114ce <enq_lock+0x26>
 80114c0:	4a09      	ldr	r2, [pc, #36]	; (80114e8 <enq_lock+0x40>)
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	011b      	lsls	r3, r3, #4
 80114c6:	4413      	add	r3, r2
 80114c8:	681b      	ldr	r3, [r3, #0]
 80114ca:	2b00      	cmp	r3, #0
 80114cc:	d1f2      	bne.n	80114b4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	2b02      	cmp	r3, #2
 80114d2:	bf14      	ite	ne
 80114d4:	2301      	movne	r3, #1
 80114d6:	2300      	moveq	r3, #0
 80114d8:	b2db      	uxtb	r3, r3
}
 80114da:	4618      	mov	r0, r3
 80114dc:	370c      	adds	r7, #12
 80114de:	46bd      	mov	sp, r7
 80114e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114e4:	4770      	bx	lr
 80114e6:	bf00      	nop
 80114e8:	2003d4e8 	.word	0x2003d4e8

080114ec <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80114ec:	b480      	push	{r7}
 80114ee:	b085      	sub	sp, #20
 80114f0:	af00      	add	r7, sp, #0
 80114f2:	6078      	str	r0, [r7, #4]
 80114f4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80114f6:	2300      	movs	r3, #0
 80114f8:	60fb      	str	r3, [r7, #12]
 80114fa:	e01f      	b.n	801153c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80114fc:	4a41      	ldr	r2, [pc, #260]	; (8011604 <inc_lock+0x118>)
 80114fe:	68fb      	ldr	r3, [r7, #12]
 8011500:	011b      	lsls	r3, r3, #4
 8011502:	4413      	add	r3, r2
 8011504:	681a      	ldr	r2, [r3, #0]
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	681b      	ldr	r3, [r3, #0]
 801150a:	429a      	cmp	r2, r3
 801150c:	d113      	bne.n	8011536 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801150e:	4a3d      	ldr	r2, [pc, #244]	; (8011604 <inc_lock+0x118>)
 8011510:	68fb      	ldr	r3, [r7, #12]
 8011512:	011b      	lsls	r3, r3, #4
 8011514:	4413      	add	r3, r2
 8011516:	3304      	adds	r3, #4
 8011518:	681a      	ldr	r2, [r3, #0]
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 801151e:	429a      	cmp	r2, r3
 8011520:	d109      	bne.n	8011536 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8011522:	4a38      	ldr	r2, [pc, #224]	; (8011604 <inc_lock+0x118>)
 8011524:	68fb      	ldr	r3, [r7, #12]
 8011526:	011b      	lsls	r3, r3, #4
 8011528:	4413      	add	r3, r2
 801152a:	3308      	adds	r3, #8
 801152c:	681a      	ldr	r2, [r3, #0]
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8011532:	429a      	cmp	r2, r3
 8011534:	d006      	beq.n	8011544 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8011536:	68fb      	ldr	r3, [r7, #12]
 8011538:	3301      	adds	r3, #1
 801153a:	60fb      	str	r3, [r7, #12]
 801153c:	68fb      	ldr	r3, [r7, #12]
 801153e:	2b01      	cmp	r3, #1
 8011540:	d9dc      	bls.n	80114fc <inc_lock+0x10>
 8011542:	e000      	b.n	8011546 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8011544:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8011546:	68fb      	ldr	r3, [r7, #12]
 8011548:	2b02      	cmp	r3, #2
 801154a:	d132      	bne.n	80115b2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801154c:	2300      	movs	r3, #0
 801154e:	60fb      	str	r3, [r7, #12]
 8011550:	e002      	b.n	8011558 <inc_lock+0x6c>
 8011552:	68fb      	ldr	r3, [r7, #12]
 8011554:	3301      	adds	r3, #1
 8011556:	60fb      	str	r3, [r7, #12]
 8011558:	68fb      	ldr	r3, [r7, #12]
 801155a:	2b01      	cmp	r3, #1
 801155c:	d806      	bhi.n	801156c <inc_lock+0x80>
 801155e:	4a29      	ldr	r2, [pc, #164]	; (8011604 <inc_lock+0x118>)
 8011560:	68fb      	ldr	r3, [r7, #12]
 8011562:	011b      	lsls	r3, r3, #4
 8011564:	4413      	add	r3, r2
 8011566:	681b      	ldr	r3, [r3, #0]
 8011568:	2b00      	cmp	r3, #0
 801156a:	d1f2      	bne.n	8011552 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 801156c:	68fb      	ldr	r3, [r7, #12]
 801156e:	2b02      	cmp	r3, #2
 8011570:	d101      	bne.n	8011576 <inc_lock+0x8a>
 8011572:	2300      	movs	r3, #0
 8011574:	e040      	b.n	80115f8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	681a      	ldr	r2, [r3, #0]
 801157a:	4922      	ldr	r1, [pc, #136]	; (8011604 <inc_lock+0x118>)
 801157c:	68fb      	ldr	r3, [r7, #12]
 801157e:	011b      	lsls	r3, r3, #4
 8011580:	440b      	add	r3, r1
 8011582:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	689a      	ldr	r2, [r3, #8]
 8011588:	491e      	ldr	r1, [pc, #120]	; (8011604 <inc_lock+0x118>)
 801158a:	68fb      	ldr	r3, [r7, #12]
 801158c:	011b      	lsls	r3, r3, #4
 801158e:	440b      	add	r3, r1
 8011590:	3304      	adds	r3, #4
 8011592:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	695a      	ldr	r2, [r3, #20]
 8011598:	491a      	ldr	r1, [pc, #104]	; (8011604 <inc_lock+0x118>)
 801159a:	68fb      	ldr	r3, [r7, #12]
 801159c:	011b      	lsls	r3, r3, #4
 801159e:	440b      	add	r3, r1
 80115a0:	3308      	adds	r3, #8
 80115a2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80115a4:	4a17      	ldr	r2, [pc, #92]	; (8011604 <inc_lock+0x118>)
 80115a6:	68fb      	ldr	r3, [r7, #12]
 80115a8:	011b      	lsls	r3, r3, #4
 80115aa:	4413      	add	r3, r2
 80115ac:	330c      	adds	r3, #12
 80115ae:	2200      	movs	r2, #0
 80115b0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80115b2:	683b      	ldr	r3, [r7, #0]
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	d009      	beq.n	80115cc <inc_lock+0xe0>
 80115b8:	4a12      	ldr	r2, [pc, #72]	; (8011604 <inc_lock+0x118>)
 80115ba:	68fb      	ldr	r3, [r7, #12]
 80115bc:	011b      	lsls	r3, r3, #4
 80115be:	4413      	add	r3, r2
 80115c0:	330c      	adds	r3, #12
 80115c2:	881b      	ldrh	r3, [r3, #0]
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d001      	beq.n	80115cc <inc_lock+0xe0>
 80115c8:	2300      	movs	r3, #0
 80115ca:	e015      	b.n	80115f8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80115cc:	683b      	ldr	r3, [r7, #0]
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	d108      	bne.n	80115e4 <inc_lock+0xf8>
 80115d2:	4a0c      	ldr	r2, [pc, #48]	; (8011604 <inc_lock+0x118>)
 80115d4:	68fb      	ldr	r3, [r7, #12]
 80115d6:	011b      	lsls	r3, r3, #4
 80115d8:	4413      	add	r3, r2
 80115da:	330c      	adds	r3, #12
 80115dc:	881b      	ldrh	r3, [r3, #0]
 80115de:	3301      	adds	r3, #1
 80115e0:	b29a      	uxth	r2, r3
 80115e2:	e001      	b.n	80115e8 <inc_lock+0xfc>
 80115e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80115e8:	4906      	ldr	r1, [pc, #24]	; (8011604 <inc_lock+0x118>)
 80115ea:	68fb      	ldr	r3, [r7, #12]
 80115ec:	011b      	lsls	r3, r3, #4
 80115ee:	440b      	add	r3, r1
 80115f0:	330c      	adds	r3, #12
 80115f2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80115f4:	68fb      	ldr	r3, [r7, #12]
 80115f6:	3301      	adds	r3, #1
}
 80115f8:	4618      	mov	r0, r3
 80115fa:	3714      	adds	r7, #20
 80115fc:	46bd      	mov	sp, r7
 80115fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011602:	4770      	bx	lr
 8011604:	2003d4e8 	.word	0x2003d4e8

08011608 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8011608:	b480      	push	{r7}
 801160a:	b085      	sub	sp, #20
 801160c:	af00      	add	r7, sp, #0
 801160e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	3b01      	subs	r3, #1
 8011614:	607b      	str	r3, [r7, #4]
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	2b01      	cmp	r3, #1
 801161a:	d825      	bhi.n	8011668 <dec_lock+0x60>
		n = Files[i].ctr;
 801161c:	4a17      	ldr	r2, [pc, #92]	; (801167c <dec_lock+0x74>)
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	011b      	lsls	r3, r3, #4
 8011622:	4413      	add	r3, r2
 8011624:	330c      	adds	r3, #12
 8011626:	881b      	ldrh	r3, [r3, #0]
 8011628:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801162a:	89fb      	ldrh	r3, [r7, #14]
 801162c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011630:	d101      	bne.n	8011636 <dec_lock+0x2e>
 8011632:	2300      	movs	r3, #0
 8011634:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8011636:	89fb      	ldrh	r3, [r7, #14]
 8011638:	2b00      	cmp	r3, #0
 801163a:	d002      	beq.n	8011642 <dec_lock+0x3a>
 801163c:	89fb      	ldrh	r3, [r7, #14]
 801163e:	3b01      	subs	r3, #1
 8011640:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8011642:	4a0e      	ldr	r2, [pc, #56]	; (801167c <dec_lock+0x74>)
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	011b      	lsls	r3, r3, #4
 8011648:	4413      	add	r3, r2
 801164a:	330c      	adds	r3, #12
 801164c:	89fa      	ldrh	r2, [r7, #14]
 801164e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8011650:	89fb      	ldrh	r3, [r7, #14]
 8011652:	2b00      	cmp	r3, #0
 8011654:	d105      	bne.n	8011662 <dec_lock+0x5a>
 8011656:	4a09      	ldr	r2, [pc, #36]	; (801167c <dec_lock+0x74>)
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	011b      	lsls	r3, r3, #4
 801165c:	4413      	add	r3, r2
 801165e:	2200      	movs	r2, #0
 8011660:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8011662:	2300      	movs	r3, #0
 8011664:	737b      	strb	r3, [r7, #13]
 8011666:	e001      	b.n	801166c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8011668:	2302      	movs	r3, #2
 801166a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 801166c:	7b7b      	ldrb	r3, [r7, #13]
}
 801166e:	4618      	mov	r0, r3
 8011670:	3714      	adds	r7, #20
 8011672:	46bd      	mov	sp, r7
 8011674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011678:	4770      	bx	lr
 801167a:	bf00      	nop
 801167c:	2003d4e8 	.word	0x2003d4e8

08011680 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8011680:	b480      	push	{r7}
 8011682:	b085      	sub	sp, #20
 8011684:	af00      	add	r7, sp, #0
 8011686:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8011688:	2300      	movs	r3, #0
 801168a:	60fb      	str	r3, [r7, #12]
 801168c:	e010      	b.n	80116b0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801168e:	4a0d      	ldr	r2, [pc, #52]	; (80116c4 <clear_lock+0x44>)
 8011690:	68fb      	ldr	r3, [r7, #12]
 8011692:	011b      	lsls	r3, r3, #4
 8011694:	4413      	add	r3, r2
 8011696:	681b      	ldr	r3, [r3, #0]
 8011698:	687a      	ldr	r2, [r7, #4]
 801169a:	429a      	cmp	r2, r3
 801169c:	d105      	bne.n	80116aa <clear_lock+0x2a>
 801169e:	4a09      	ldr	r2, [pc, #36]	; (80116c4 <clear_lock+0x44>)
 80116a0:	68fb      	ldr	r3, [r7, #12]
 80116a2:	011b      	lsls	r3, r3, #4
 80116a4:	4413      	add	r3, r2
 80116a6:	2200      	movs	r2, #0
 80116a8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80116aa:	68fb      	ldr	r3, [r7, #12]
 80116ac:	3301      	adds	r3, #1
 80116ae:	60fb      	str	r3, [r7, #12]
 80116b0:	68fb      	ldr	r3, [r7, #12]
 80116b2:	2b01      	cmp	r3, #1
 80116b4:	d9eb      	bls.n	801168e <clear_lock+0xe>
	}
}
 80116b6:	bf00      	nop
 80116b8:	bf00      	nop
 80116ba:	3714      	adds	r7, #20
 80116bc:	46bd      	mov	sp, r7
 80116be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116c2:	4770      	bx	lr
 80116c4:	2003d4e8 	.word	0x2003d4e8

080116c8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80116c8:	b580      	push	{r7, lr}
 80116ca:	b086      	sub	sp, #24
 80116cc:	af00      	add	r7, sp, #0
 80116ce:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80116d0:	2300      	movs	r3, #0
 80116d2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	78db      	ldrb	r3, [r3, #3]
 80116d8:	2b00      	cmp	r3, #0
 80116da:	d034      	beq.n	8011746 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80116e0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	7858      	ldrb	r0, [r3, #1]
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80116ec:	2301      	movs	r3, #1
 80116ee:	697a      	ldr	r2, [r7, #20]
 80116f0:	f7ff fd40 	bl	8011174 <disk_write>
 80116f4:	4603      	mov	r3, r0
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d002      	beq.n	8011700 <sync_window+0x38>
			res = FR_DISK_ERR;
 80116fa:	2301      	movs	r3, #1
 80116fc:	73fb      	strb	r3, [r7, #15]
 80116fe:	e022      	b.n	8011746 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	2200      	movs	r2, #0
 8011704:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801170a:	697a      	ldr	r2, [r7, #20]
 801170c:	1ad2      	subs	r2, r2, r3
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	6a1b      	ldr	r3, [r3, #32]
 8011712:	429a      	cmp	r2, r3
 8011714:	d217      	bcs.n	8011746 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	789b      	ldrb	r3, [r3, #2]
 801171a:	613b      	str	r3, [r7, #16]
 801171c:	e010      	b.n	8011740 <sync_window+0x78>
					wsect += fs->fsize;
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	6a1b      	ldr	r3, [r3, #32]
 8011722:	697a      	ldr	r2, [r7, #20]
 8011724:	4413      	add	r3, r2
 8011726:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	7858      	ldrb	r0, [r3, #1]
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011732:	2301      	movs	r3, #1
 8011734:	697a      	ldr	r2, [r7, #20]
 8011736:	f7ff fd1d 	bl	8011174 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801173a:	693b      	ldr	r3, [r7, #16]
 801173c:	3b01      	subs	r3, #1
 801173e:	613b      	str	r3, [r7, #16]
 8011740:	693b      	ldr	r3, [r7, #16]
 8011742:	2b01      	cmp	r3, #1
 8011744:	d8eb      	bhi.n	801171e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8011746:	7bfb      	ldrb	r3, [r7, #15]
}
 8011748:	4618      	mov	r0, r3
 801174a:	3718      	adds	r7, #24
 801174c:	46bd      	mov	sp, r7
 801174e:	bd80      	pop	{r7, pc}

08011750 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8011750:	b580      	push	{r7, lr}
 8011752:	b084      	sub	sp, #16
 8011754:	af00      	add	r7, sp, #0
 8011756:	6078      	str	r0, [r7, #4]
 8011758:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801175a:	2300      	movs	r3, #0
 801175c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011762:	683a      	ldr	r2, [r7, #0]
 8011764:	429a      	cmp	r2, r3
 8011766:	d01b      	beq.n	80117a0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8011768:	6878      	ldr	r0, [r7, #4]
 801176a:	f7ff ffad 	bl	80116c8 <sync_window>
 801176e:	4603      	mov	r3, r0
 8011770:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8011772:	7bfb      	ldrb	r3, [r7, #15]
 8011774:	2b00      	cmp	r3, #0
 8011776:	d113      	bne.n	80117a0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	7858      	ldrb	r0, [r3, #1]
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011782:	2301      	movs	r3, #1
 8011784:	683a      	ldr	r2, [r7, #0]
 8011786:	f7ff fcd5 	bl	8011134 <disk_read>
 801178a:	4603      	mov	r3, r0
 801178c:	2b00      	cmp	r3, #0
 801178e:	d004      	beq.n	801179a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8011790:	f04f 33ff 	mov.w	r3, #4294967295
 8011794:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8011796:	2301      	movs	r3, #1
 8011798:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	683a      	ldr	r2, [r7, #0]
 801179e:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 80117a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80117a2:	4618      	mov	r0, r3
 80117a4:	3710      	adds	r7, #16
 80117a6:	46bd      	mov	sp, r7
 80117a8:	bd80      	pop	{r7, pc}
	...

080117ac <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80117ac:	b580      	push	{r7, lr}
 80117ae:	b084      	sub	sp, #16
 80117b0:	af00      	add	r7, sp, #0
 80117b2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80117b4:	6878      	ldr	r0, [r7, #4]
 80117b6:	f7ff ff87 	bl	80116c8 <sync_window>
 80117ba:	4603      	mov	r3, r0
 80117bc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80117be:	7bfb      	ldrb	r3, [r7, #15]
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	d159      	bne.n	8011878 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	781b      	ldrb	r3, [r3, #0]
 80117c8:	2b03      	cmp	r3, #3
 80117ca:	d149      	bne.n	8011860 <sync_fs+0xb4>
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	791b      	ldrb	r3, [r3, #4]
 80117d0:	2b01      	cmp	r3, #1
 80117d2:	d145      	bne.n	8011860 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	899b      	ldrh	r3, [r3, #12]
 80117de:	461a      	mov	r2, r3
 80117e0:	2100      	movs	r1, #0
 80117e2:	f7ff fda8 	bl	8011336 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	3338      	adds	r3, #56	; 0x38
 80117ea:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80117ee:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80117f2:	4618      	mov	r0, r3
 80117f4:	f7ff fd37 	bl	8011266 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	3338      	adds	r3, #56	; 0x38
 80117fc:	4921      	ldr	r1, [pc, #132]	; (8011884 <sync_fs+0xd8>)
 80117fe:	4618      	mov	r0, r3
 8011800:	f7ff fd4c 	bl	801129c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	3338      	adds	r3, #56	; 0x38
 8011808:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801180c:	491e      	ldr	r1, [pc, #120]	; (8011888 <sync_fs+0xdc>)
 801180e:	4618      	mov	r0, r3
 8011810:	f7ff fd44 	bl	801129c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	3338      	adds	r3, #56	; 0x38
 8011818:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	695b      	ldr	r3, [r3, #20]
 8011820:	4619      	mov	r1, r3
 8011822:	4610      	mov	r0, r2
 8011824:	f7ff fd3a 	bl	801129c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	3338      	adds	r3, #56	; 0x38
 801182c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	691b      	ldr	r3, [r3, #16]
 8011834:	4619      	mov	r1, r3
 8011836:	4610      	mov	r0, r2
 8011838:	f7ff fd30 	bl	801129c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011840:	1c5a      	adds	r2, r3, #1
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	7858      	ldrb	r0, [r3, #1]
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011854:	2301      	movs	r3, #1
 8011856:	f7ff fc8d 	bl	8011174 <disk_write>
			fs->fsi_flag = 0;
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	2200      	movs	r2, #0
 801185e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	785b      	ldrb	r3, [r3, #1]
 8011864:	2200      	movs	r2, #0
 8011866:	2100      	movs	r1, #0
 8011868:	4618      	mov	r0, r3
 801186a:	f7ff fca3 	bl	80111b4 <disk_ioctl>
 801186e:	4603      	mov	r3, r0
 8011870:	2b00      	cmp	r3, #0
 8011872:	d001      	beq.n	8011878 <sync_fs+0xcc>
 8011874:	2301      	movs	r3, #1
 8011876:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8011878:	7bfb      	ldrb	r3, [r7, #15]
}
 801187a:	4618      	mov	r0, r3
 801187c:	3710      	adds	r7, #16
 801187e:	46bd      	mov	sp, r7
 8011880:	bd80      	pop	{r7, pc}
 8011882:	bf00      	nop
 8011884:	41615252 	.word	0x41615252
 8011888:	61417272 	.word	0x61417272

0801188c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 801188c:	b480      	push	{r7}
 801188e:	b083      	sub	sp, #12
 8011890:	af00      	add	r7, sp, #0
 8011892:	6078      	str	r0, [r7, #4]
 8011894:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8011896:	683b      	ldr	r3, [r7, #0]
 8011898:	3b02      	subs	r3, #2
 801189a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	69db      	ldr	r3, [r3, #28]
 80118a0:	3b02      	subs	r3, #2
 80118a2:	683a      	ldr	r2, [r7, #0]
 80118a4:	429a      	cmp	r2, r3
 80118a6:	d301      	bcc.n	80118ac <clust2sect+0x20>
 80118a8:	2300      	movs	r3, #0
 80118aa:	e008      	b.n	80118be <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	895b      	ldrh	r3, [r3, #10]
 80118b0:	461a      	mov	r2, r3
 80118b2:	683b      	ldr	r3, [r7, #0]
 80118b4:	fb03 f202 	mul.w	r2, r3, r2
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80118bc:	4413      	add	r3, r2
}
 80118be:	4618      	mov	r0, r3
 80118c0:	370c      	adds	r7, #12
 80118c2:	46bd      	mov	sp, r7
 80118c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118c8:	4770      	bx	lr

080118ca <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80118ca:	b580      	push	{r7, lr}
 80118cc:	b086      	sub	sp, #24
 80118ce:	af00      	add	r7, sp, #0
 80118d0:	6078      	str	r0, [r7, #4]
 80118d2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	681b      	ldr	r3, [r3, #0]
 80118d8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80118da:	683b      	ldr	r3, [r7, #0]
 80118dc:	2b01      	cmp	r3, #1
 80118de:	d904      	bls.n	80118ea <get_fat+0x20>
 80118e0:	693b      	ldr	r3, [r7, #16]
 80118e2:	69db      	ldr	r3, [r3, #28]
 80118e4:	683a      	ldr	r2, [r7, #0]
 80118e6:	429a      	cmp	r2, r3
 80118e8:	d302      	bcc.n	80118f0 <get_fat+0x26>
		val = 1;	/* Internal error */
 80118ea:	2301      	movs	r3, #1
 80118ec:	617b      	str	r3, [r7, #20]
 80118ee:	e0bb      	b.n	8011a68 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80118f0:	f04f 33ff 	mov.w	r3, #4294967295
 80118f4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80118f6:	693b      	ldr	r3, [r7, #16]
 80118f8:	781b      	ldrb	r3, [r3, #0]
 80118fa:	2b03      	cmp	r3, #3
 80118fc:	f000 8083 	beq.w	8011a06 <get_fat+0x13c>
 8011900:	2b03      	cmp	r3, #3
 8011902:	f300 80a7 	bgt.w	8011a54 <get_fat+0x18a>
 8011906:	2b01      	cmp	r3, #1
 8011908:	d002      	beq.n	8011910 <get_fat+0x46>
 801190a:	2b02      	cmp	r3, #2
 801190c:	d056      	beq.n	80119bc <get_fat+0xf2>
 801190e:	e0a1      	b.n	8011a54 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8011910:	683b      	ldr	r3, [r7, #0]
 8011912:	60fb      	str	r3, [r7, #12]
 8011914:	68fb      	ldr	r3, [r7, #12]
 8011916:	085b      	lsrs	r3, r3, #1
 8011918:	68fa      	ldr	r2, [r7, #12]
 801191a:	4413      	add	r3, r2
 801191c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801191e:	693b      	ldr	r3, [r7, #16]
 8011920:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011922:	693b      	ldr	r3, [r7, #16]
 8011924:	899b      	ldrh	r3, [r3, #12]
 8011926:	4619      	mov	r1, r3
 8011928:	68fb      	ldr	r3, [r7, #12]
 801192a:	fbb3 f3f1 	udiv	r3, r3, r1
 801192e:	4413      	add	r3, r2
 8011930:	4619      	mov	r1, r3
 8011932:	6938      	ldr	r0, [r7, #16]
 8011934:	f7ff ff0c 	bl	8011750 <move_window>
 8011938:	4603      	mov	r3, r0
 801193a:	2b00      	cmp	r3, #0
 801193c:	f040 808d 	bne.w	8011a5a <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8011940:	68fb      	ldr	r3, [r7, #12]
 8011942:	1c5a      	adds	r2, r3, #1
 8011944:	60fa      	str	r2, [r7, #12]
 8011946:	693a      	ldr	r2, [r7, #16]
 8011948:	8992      	ldrh	r2, [r2, #12]
 801194a:	fbb3 f1f2 	udiv	r1, r3, r2
 801194e:	fb02 f201 	mul.w	r2, r2, r1
 8011952:	1a9b      	subs	r3, r3, r2
 8011954:	693a      	ldr	r2, [r7, #16]
 8011956:	4413      	add	r3, r2
 8011958:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801195c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801195e:	693b      	ldr	r3, [r7, #16]
 8011960:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011962:	693b      	ldr	r3, [r7, #16]
 8011964:	899b      	ldrh	r3, [r3, #12]
 8011966:	4619      	mov	r1, r3
 8011968:	68fb      	ldr	r3, [r7, #12]
 801196a:	fbb3 f3f1 	udiv	r3, r3, r1
 801196e:	4413      	add	r3, r2
 8011970:	4619      	mov	r1, r3
 8011972:	6938      	ldr	r0, [r7, #16]
 8011974:	f7ff feec 	bl	8011750 <move_window>
 8011978:	4603      	mov	r3, r0
 801197a:	2b00      	cmp	r3, #0
 801197c:	d16f      	bne.n	8011a5e <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 801197e:	693b      	ldr	r3, [r7, #16]
 8011980:	899b      	ldrh	r3, [r3, #12]
 8011982:	461a      	mov	r2, r3
 8011984:	68fb      	ldr	r3, [r7, #12]
 8011986:	fbb3 f1f2 	udiv	r1, r3, r2
 801198a:	fb02 f201 	mul.w	r2, r2, r1
 801198e:	1a9b      	subs	r3, r3, r2
 8011990:	693a      	ldr	r2, [r7, #16]
 8011992:	4413      	add	r3, r2
 8011994:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011998:	021b      	lsls	r3, r3, #8
 801199a:	461a      	mov	r2, r3
 801199c:	68bb      	ldr	r3, [r7, #8]
 801199e:	4313      	orrs	r3, r2
 80119a0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80119a2:	683b      	ldr	r3, [r7, #0]
 80119a4:	f003 0301 	and.w	r3, r3, #1
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	d002      	beq.n	80119b2 <get_fat+0xe8>
 80119ac:	68bb      	ldr	r3, [r7, #8]
 80119ae:	091b      	lsrs	r3, r3, #4
 80119b0:	e002      	b.n	80119b8 <get_fat+0xee>
 80119b2:	68bb      	ldr	r3, [r7, #8]
 80119b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80119b8:	617b      	str	r3, [r7, #20]
			break;
 80119ba:	e055      	b.n	8011a68 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80119bc:	693b      	ldr	r3, [r7, #16]
 80119be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80119c0:	693b      	ldr	r3, [r7, #16]
 80119c2:	899b      	ldrh	r3, [r3, #12]
 80119c4:	085b      	lsrs	r3, r3, #1
 80119c6:	b29b      	uxth	r3, r3
 80119c8:	4619      	mov	r1, r3
 80119ca:	683b      	ldr	r3, [r7, #0]
 80119cc:	fbb3 f3f1 	udiv	r3, r3, r1
 80119d0:	4413      	add	r3, r2
 80119d2:	4619      	mov	r1, r3
 80119d4:	6938      	ldr	r0, [r7, #16]
 80119d6:	f7ff febb 	bl	8011750 <move_window>
 80119da:	4603      	mov	r3, r0
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d140      	bne.n	8011a62 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80119e0:	693b      	ldr	r3, [r7, #16]
 80119e2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80119e6:	683b      	ldr	r3, [r7, #0]
 80119e8:	005b      	lsls	r3, r3, #1
 80119ea:	693a      	ldr	r2, [r7, #16]
 80119ec:	8992      	ldrh	r2, [r2, #12]
 80119ee:	fbb3 f0f2 	udiv	r0, r3, r2
 80119f2:	fb02 f200 	mul.w	r2, r2, r0
 80119f6:	1a9b      	subs	r3, r3, r2
 80119f8:	440b      	add	r3, r1
 80119fa:	4618      	mov	r0, r3
 80119fc:	f7ff fbf8 	bl	80111f0 <ld_word>
 8011a00:	4603      	mov	r3, r0
 8011a02:	617b      	str	r3, [r7, #20]
			break;
 8011a04:	e030      	b.n	8011a68 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011a06:	693b      	ldr	r3, [r7, #16]
 8011a08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011a0a:	693b      	ldr	r3, [r7, #16]
 8011a0c:	899b      	ldrh	r3, [r3, #12]
 8011a0e:	089b      	lsrs	r3, r3, #2
 8011a10:	b29b      	uxth	r3, r3
 8011a12:	4619      	mov	r1, r3
 8011a14:	683b      	ldr	r3, [r7, #0]
 8011a16:	fbb3 f3f1 	udiv	r3, r3, r1
 8011a1a:	4413      	add	r3, r2
 8011a1c:	4619      	mov	r1, r3
 8011a1e:	6938      	ldr	r0, [r7, #16]
 8011a20:	f7ff fe96 	bl	8011750 <move_window>
 8011a24:	4603      	mov	r3, r0
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	d11d      	bne.n	8011a66 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8011a2a:	693b      	ldr	r3, [r7, #16]
 8011a2c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011a30:	683b      	ldr	r3, [r7, #0]
 8011a32:	009b      	lsls	r3, r3, #2
 8011a34:	693a      	ldr	r2, [r7, #16]
 8011a36:	8992      	ldrh	r2, [r2, #12]
 8011a38:	fbb3 f0f2 	udiv	r0, r3, r2
 8011a3c:	fb02 f200 	mul.w	r2, r2, r0
 8011a40:	1a9b      	subs	r3, r3, r2
 8011a42:	440b      	add	r3, r1
 8011a44:	4618      	mov	r0, r3
 8011a46:	f7ff fbeb 	bl	8011220 <ld_dword>
 8011a4a:	4603      	mov	r3, r0
 8011a4c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8011a50:	617b      	str	r3, [r7, #20]
			break;
 8011a52:	e009      	b.n	8011a68 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8011a54:	2301      	movs	r3, #1
 8011a56:	617b      	str	r3, [r7, #20]
 8011a58:	e006      	b.n	8011a68 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011a5a:	bf00      	nop
 8011a5c:	e004      	b.n	8011a68 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011a5e:	bf00      	nop
 8011a60:	e002      	b.n	8011a68 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011a62:	bf00      	nop
 8011a64:	e000      	b.n	8011a68 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011a66:	bf00      	nop
		}
	}

	return val;
 8011a68:	697b      	ldr	r3, [r7, #20]
}
 8011a6a:	4618      	mov	r0, r3
 8011a6c:	3718      	adds	r7, #24
 8011a6e:	46bd      	mov	sp, r7
 8011a70:	bd80      	pop	{r7, pc}

08011a72 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8011a72:	b590      	push	{r4, r7, lr}
 8011a74:	b089      	sub	sp, #36	; 0x24
 8011a76:	af00      	add	r7, sp, #0
 8011a78:	60f8      	str	r0, [r7, #12]
 8011a7a:	60b9      	str	r1, [r7, #8]
 8011a7c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8011a7e:	2302      	movs	r3, #2
 8011a80:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8011a82:	68bb      	ldr	r3, [r7, #8]
 8011a84:	2b01      	cmp	r3, #1
 8011a86:	f240 8102 	bls.w	8011c8e <put_fat+0x21c>
 8011a8a:	68fb      	ldr	r3, [r7, #12]
 8011a8c:	69db      	ldr	r3, [r3, #28]
 8011a8e:	68ba      	ldr	r2, [r7, #8]
 8011a90:	429a      	cmp	r2, r3
 8011a92:	f080 80fc 	bcs.w	8011c8e <put_fat+0x21c>
		switch (fs->fs_type) {
 8011a96:	68fb      	ldr	r3, [r7, #12]
 8011a98:	781b      	ldrb	r3, [r3, #0]
 8011a9a:	2b03      	cmp	r3, #3
 8011a9c:	f000 80b6 	beq.w	8011c0c <put_fat+0x19a>
 8011aa0:	2b03      	cmp	r3, #3
 8011aa2:	f300 80fd 	bgt.w	8011ca0 <put_fat+0x22e>
 8011aa6:	2b01      	cmp	r3, #1
 8011aa8:	d003      	beq.n	8011ab2 <put_fat+0x40>
 8011aaa:	2b02      	cmp	r3, #2
 8011aac:	f000 8083 	beq.w	8011bb6 <put_fat+0x144>
 8011ab0:	e0f6      	b.n	8011ca0 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8011ab2:	68bb      	ldr	r3, [r7, #8]
 8011ab4:	61bb      	str	r3, [r7, #24]
 8011ab6:	69bb      	ldr	r3, [r7, #24]
 8011ab8:	085b      	lsrs	r3, r3, #1
 8011aba:	69ba      	ldr	r2, [r7, #24]
 8011abc:	4413      	add	r3, r2
 8011abe:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011ac0:	68fb      	ldr	r3, [r7, #12]
 8011ac2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011ac4:	68fb      	ldr	r3, [r7, #12]
 8011ac6:	899b      	ldrh	r3, [r3, #12]
 8011ac8:	4619      	mov	r1, r3
 8011aca:	69bb      	ldr	r3, [r7, #24]
 8011acc:	fbb3 f3f1 	udiv	r3, r3, r1
 8011ad0:	4413      	add	r3, r2
 8011ad2:	4619      	mov	r1, r3
 8011ad4:	68f8      	ldr	r0, [r7, #12]
 8011ad6:	f7ff fe3b 	bl	8011750 <move_window>
 8011ada:	4603      	mov	r3, r0
 8011adc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011ade:	7ffb      	ldrb	r3, [r7, #31]
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	f040 80d6 	bne.w	8011c92 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8011ae6:	68fb      	ldr	r3, [r7, #12]
 8011ae8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011aec:	69bb      	ldr	r3, [r7, #24]
 8011aee:	1c5a      	adds	r2, r3, #1
 8011af0:	61ba      	str	r2, [r7, #24]
 8011af2:	68fa      	ldr	r2, [r7, #12]
 8011af4:	8992      	ldrh	r2, [r2, #12]
 8011af6:	fbb3 f0f2 	udiv	r0, r3, r2
 8011afa:	fb02 f200 	mul.w	r2, r2, r0
 8011afe:	1a9b      	subs	r3, r3, r2
 8011b00:	440b      	add	r3, r1
 8011b02:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8011b04:	68bb      	ldr	r3, [r7, #8]
 8011b06:	f003 0301 	and.w	r3, r3, #1
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	d00d      	beq.n	8011b2a <put_fat+0xb8>
 8011b0e:	697b      	ldr	r3, [r7, #20]
 8011b10:	781b      	ldrb	r3, [r3, #0]
 8011b12:	b25b      	sxtb	r3, r3
 8011b14:	f003 030f 	and.w	r3, r3, #15
 8011b18:	b25a      	sxtb	r2, r3
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	b2db      	uxtb	r3, r3
 8011b1e:	011b      	lsls	r3, r3, #4
 8011b20:	b25b      	sxtb	r3, r3
 8011b22:	4313      	orrs	r3, r2
 8011b24:	b25b      	sxtb	r3, r3
 8011b26:	b2db      	uxtb	r3, r3
 8011b28:	e001      	b.n	8011b2e <put_fat+0xbc>
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	b2db      	uxtb	r3, r3
 8011b2e:	697a      	ldr	r2, [r7, #20]
 8011b30:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011b32:	68fb      	ldr	r3, [r7, #12]
 8011b34:	2201      	movs	r2, #1
 8011b36:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011b38:	68fb      	ldr	r3, [r7, #12]
 8011b3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011b3c:	68fb      	ldr	r3, [r7, #12]
 8011b3e:	899b      	ldrh	r3, [r3, #12]
 8011b40:	4619      	mov	r1, r3
 8011b42:	69bb      	ldr	r3, [r7, #24]
 8011b44:	fbb3 f3f1 	udiv	r3, r3, r1
 8011b48:	4413      	add	r3, r2
 8011b4a:	4619      	mov	r1, r3
 8011b4c:	68f8      	ldr	r0, [r7, #12]
 8011b4e:	f7ff fdff 	bl	8011750 <move_window>
 8011b52:	4603      	mov	r3, r0
 8011b54:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011b56:	7ffb      	ldrb	r3, [r7, #31]
 8011b58:	2b00      	cmp	r3, #0
 8011b5a:	f040 809c 	bne.w	8011c96 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8011b5e:	68fb      	ldr	r3, [r7, #12]
 8011b60:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011b64:	68fb      	ldr	r3, [r7, #12]
 8011b66:	899b      	ldrh	r3, [r3, #12]
 8011b68:	461a      	mov	r2, r3
 8011b6a:	69bb      	ldr	r3, [r7, #24]
 8011b6c:	fbb3 f0f2 	udiv	r0, r3, r2
 8011b70:	fb02 f200 	mul.w	r2, r2, r0
 8011b74:	1a9b      	subs	r3, r3, r2
 8011b76:	440b      	add	r3, r1
 8011b78:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8011b7a:	68bb      	ldr	r3, [r7, #8]
 8011b7c:	f003 0301 	and.w	r3, r3, #1
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	d003      	beq.n	8011b8c <put_fat+0x11a>
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	091b      	lsrs	r3, r3, #4
 8011b88:	b2db      	uxtb	r3, r3
 8011b8a:	e00e      	b.n	8011baa <put_fat+0x138>
 8011b8c:	697b      	ldr	r3, [r7, #20]
 8011b8e:	781b      	ldrb	r3, [r3, #0]
 8011b90:	b25b      	sxtb	r3, r3
 8011b92:	f023 030f 	bic.w	r3, r3, #15
 8011b96:	b25a      	sxtb	r2, r3
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	0a1b      	lsrs	r3, r3, #8
 8011b9c:	b25b      	sxtb	r3, r3
 8011b9e:	f003 030f 	and.w	r3, r3, #15
 8011ba2:	b25b      	sxtb	r3, r3
 8011ba4:	4313      	orrs	r3, r2
 8011ba6:	b25b      	sxtb	r3, r3
 8011ba8:	b2db      	uxtb	r3, r3
 8011baa:	697a      	ldr	r2, [r7, #20]
 8011bac:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011bae:	68fb      	ldr	r3, [r7, #12]
 8011bb0:	2201      	movs	r2, #1
 8011bb2:	70da      	strb	r2, [r3, #3]
			break;
 8011bb4:	e074      	b.n	8011ca0 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8011bb6:	68fb      	ldr	r3, [r7, #12]
 8011bb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011bba:	68fb      	ldr	r3, [r7, #12]
 8011bbc:	899b      	ldrh	r3, [r3, #12]
 8011bbe:	085b      	lsrs	r3, r3, #1
 8011bc0:	b29b      	uxth	r3, r3
 8011bc2:	4619      	mov	r1, r3
 8011bc4:	68bb      	ldr	r3, [r7, #8]
 8011bc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8011bca:	4413      	add	r3, r2
 8011bcc:	4619      	mov	r1, r3
 8011bce:	68f8      	ldr	r0, [r7, #12]
 8011bd0:	f7ff fdbe 	bl	8011750 <move_window>
 8011bd4:	4603      	mov	r3, r0
 8011bd6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011bd8:	7ffb      	ldrb	r3, [r7, #31]
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	d15d      	bne.n	8011c9a <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8011bde:	68fb      	ldr	r3, [r7, #12]
 8011be0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011be4:	68bb      	ldr	r3, [r7, #8]
 8011be6:	005b      	lsls	r3, r3, #1
 8011be8:	68fa      	ldr	r2, [r7, #12]
 8011bea:	8992      	ldrh	r2, [r2, #12]
 8011bec:	fbb3 f0f2 	udiv	r0, r3, r2
 8011bf0:	fb02 f200 	mul.w	r2, r2, r0
 8011bf4:	1a9b      	subs	r3, r3, r2
 8011bf6:	440b      	add	r3, r1
 8011bf8:	687a      	ldr	r2, [r7, #4]
 8011bfa:	b292      	uxth	r2, r2
 8011bfc:	4611      	mov	r1, r2
 8011bfe:	4618      	mov	r0, r3
 8011c00:	f7ff fb31 	bl	8011266 <st_word>
			fs->wflag = 1;
 8011c04:	68fb      	ldr	r3, [r7, #12]
 8011c06:	2201      	movs	r2, #1
 8011c08:	70da      	strb	r2, [r3, #3]
			break;
 8011c0a:	e049      	b.n	8011ca0 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8011c0c:	68fb      	ldr	r3, [r7, #12]
 8011c0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011c10:	68fb      	ldr	r3, [r7, #12]
 8011c12:	899b      	ldrh	r3, [r3, #12]
 8011c14:	089b      	lsrs	r3, r3, #2
 8011c16:	b29b      	uxth	r3, r3
 8011c18:	4619      	mov	r1, r3
 8011c1a:	68bb      	ldr	r3, [r7, #8]
 8011c1c:	fbb3 f3f1 	udiv	r3, r3, r1
 8011c20:	4413      	add	r3, r2
 8011c22:	4619      	mov	r1, r3
 8011c24:	68f8      	ldr	r0, [r7, #12]
 8011c26:	f7ff fd93 	bl	8011750 <move_window>
 8011c2a:	4603      	mov	r3, r0
 8011c2c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011c2e:	7ffb      	ldrb	r3, [r7, #31]
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	d134      	bne.n	8011c9e <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8011c3a:	68fb      	ldr	r3, [r7, #12]
 8011c3c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011c40:	68bb      	ldr	r3, [r7, #8]
 8011c42:	009b      	lsls	r3, r3, #2
 8011c44:	68fa      	ldr	r2, [r7, #12]
 8011c46:	8992      	ldrh	r2, [r2, #12]
 8011c48:	fbb3 f0f2 	udiv	r0, r3, r2
 8011c4c:	fb02 f200 	mul.w	r2, r2, r0
 8011c50:	1a9b      	subs	r3, r3, r2
 8011c52:	440b      	add	r3, r1
 8011c54:	4618      	mov	r0, r3
 8011c56:	f7ff fae3 	bl	8011220 <ld_dword>
 8011c5a:	4603      	mov	r3, r0
 8011c5c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8011c60:	4323      	orrs	r3, r4
 8011c62:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8011c64:	68fb      	ldr	r3, [r7, #12]
 8011c66:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011c6a:	68bb      	ldr	r3, [r7, #8]
 8011c6c:	009b      	lsls	r3, r3, #2
 8011c6e:	68fa      	ldr	r2, [r7, #12]
 8011c70:	8992      	ldrh	r2, [r2, #12]
 8011c72:	fbb3 f0f2 	udiv	r0, r3, r2
 8011c76:	fb02 f200 	mul.w	r2, r2, r0
 8011c7a:	1a9b      	subs	r3, r3, r2
 8011c7c:	440b      	add	r3, r1
 8011c7e:	6879      	ldr	r1, [r7, #4]
 8011c80:	4618      	mov	r0, r3
 8011c82:	f7ff fb0b 	bl	801129c <st_dword>
			fs->wflag = 1;
 8011c86:	68fb      	ldr	r3, [r7, #12]
 8011c88:	2201      	movs	r2, #1
 8011c8a:	70da      	strb	r2, [r3, #3]
			break;
 8011c8c:	e008      	b.n	8011ca0 <put_fat+0x22e>
		}
	}
 8011c8e:	bf00      	nop
 8011c90:	e006      	b.n	8011ca0 <put_fat+0x22e>
			if (res != FR_OK) break;
 8011c92:	bf00      	nop
 8011c94:	e004      	b.n	8011ca0 <put_fat+0x22e>
			if (res != FR_OK) break;
 8011c96:	bf00      	nop
 8011c98:	e002      	b.n	8011ca0 <put_fat+0x22e>
			if (res != FR_OK) break;
 8011c9a:	bf00      	nop
 8011c9c:	e000      	b.n	8011ca0 <put_fat+0x22e>
			if (res != FR_OK) break;
 8011c9e:	bf00      	nop
	return res;
 8011ca0:	7ffb      	ldrb	r3, [r7, #31]
}
 8011ca2:	4618      	mov	r0, r3
 8011ca4:	3724      	adds	r7, #36	; 0x24
 8011ca6:	46bd      	mov	sp, r7
 8011ca8:	bd90      	pop	{r4, r7, pc}

08011caa <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8011caa:	b580      	push	{r7, lr}
 8011cac:	b088      	sub	sp, #32
 8011cae:	af00      	add	r7, sp, #0
 8011cb0:	60f8      	str	r0, [r7, #12]
 8011cb2:	60b9      	str	r1, [r7, #8]
 8011cb4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8011cb6:	2300      	movs	r3, #0
 8011cb8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8011cba:	68fb      	ldr	r3, [r7, #12]
 8011cbc:	681b      	ldr	r3, [r3, #0]
 8011cbe:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8011cc0:	68bb      	ldr	r3, [r7, #8]
 8011cc2:	2b01      	cmp	r3, #1
 8011cc4:	d904      	bls.n	8011cd0 <remove_chain+0x26>
 8011cc6:	69bb      	ldr	r3, [r7, #24]
 8011cc8:	69db      	ldr	r3, [r3, #28]
 8011cca:	68ba      	ldr	r2, [r7, #8]
 8011ccc:	429a      	cmp	r2, r3
 8011cce:	d301      	bcc.n	8011cd4 <remove_chain+0x2a>
 8011cd0:	2302      	movs	r3, #2
 8011cd2:	e04b      	b.n	8011d6c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	d00c      	beq.n	8011cf4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8011cda:	f04f 32ff 	mov.w	r2, #4294967295
 8011cde:	6879      	ldr	r1, [r7, #4]
 8011ce0:	69b8      	ldr	r0, [r7, #24]
 8011ce2:	f7ff fec6 	bl	8011a72 <put_fat>
 8011ce6:	4603      	mov	r3, r0
 8011ce8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8011cea:	7ffb      	ldrb	r3, [r7, #31]
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d001      	beq.n	8011cf4 <remove_chain+0x4a>
 8011cf0:	7ffb      	ldrb	r3, [r7, #31]
 8011cf2:	e03b      	b.n	8011d6c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8011cf4:	68b9      	ldr	r1, [r7, #8]
 8011cf6:	68f8      	ldr	r0, [r7, #12]
 8011cf8:	f7ff fde7 	bl	80118ca <get_fat>
 8011cfc:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8011cfe:	697b      	ldr	r3, [r7, #20]
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d031      	beq.n	8011d68 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8011d04:	697b      	ldr	r3, [r7, #20]
 8011d06:	2b01      	cmp	r3, #1
 8011d08:	d101      	bne.n	8011d0e <remove_chain+0x64>
 8011d0a:	2302      	movs	r3, #2
 8011d0c:	e02e      	b.n	8011d6c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8011d0e:	697b      	ldr	r3, [r7, #20]
 8011d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d14:	d101      	bne.n	8011d1a <remove_chain+0x70>
 8011d16:	2301      	movs	r3, #1
 8011d18:	e028      	b.n	8011d6c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8011d1a:	2200      	movs	r2, #0
 8011d1c:	68b9      	ldr	r1, [r7, #8]
 8011d1e:	69b8      	ldr	r0, [r7, #24]
 8011d20:	f7ff fea7 	bl	8011a72 <put_fat>
 8011d24:	4603      	mov	r3, r0
 8011d26:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8011d28:	7ffb      	ldrb	r3, [r7, #31]
 8011d2a:	2b00      	cmp	r3, #0
 8011d2c:	d001      	beq.n	8011d32 <remove_chain+0x88>
 8011d2e:	7ffb      	ldrb	r3, [r7, #31]
 8011d30:	e01c      	b.n	8011d6c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8011d32:	69bb      	ldr	r3, [r7, #24]
 8011d34:	695a      	ldr	r2, [r3, #20]
 8011d36:	69bb      	ldr	r3, [r7, #24]
 8011d38:	69db      	ldr	r3, [r3, #28]
 8011d3a:	3b02      	subs	r3, #2
 8011d3c:	429a      	cmp	r2, r3
 8011d3e:	d20b      	bcs.n	8011d58 <remove_chain+0xae>
			fs->free_clst++;
 8011d40:	69bb      	ldr	r3, [r7, #24]
 8011d42:	695b      	ldr	r3, [r3, #20]
 8011d44:	1c5a      	adds	r2, r3, #1
 8011d46:	69bb      	ldr	r3, [r7, #24]
 8011d48:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8011d4a:	69bb      	ldr	r3, [r7, #24]
 8011d4c:	791b      	ldrb	r3, [r3, #4]
 8011d4e:	f043 0301 	orr.w	r3, r3, #1
 8011d52:	b2da      	uxtb	r2, r3
 8011d54:	69bb      	ldr	r3, [r7, #24]
 8011d56:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8011d58:	697b      	ldr	r3, [r7, #20]
 8011d5a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8011d5c:	69bb      	ldr	r3, [r7, #24]
 8011d5e:	69db      	ldr	r3, [r3, #28]
 8011d60:	68ba      	ldr	r2, [r7, #8]
 8011d62:	429a      	cmp	r2, r3
 8011d64:	d3c6      	bcc.n	8011cf4 <remove_chain+0x4a>
 8011d66:	e000      	b.n	8011d6a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8011d68:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8011d6a:	2300      	movs	r3, #0
}
 8011d6c:	4618      	mov	r0, r3
 8011d6e:	3720      	adds	r7, #32
 8011d70:	46bd      	mov	sp, r7
 8011d72:	bd80      	pop	{r7, pc}

08011d74 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8011d74:	b580      	push	{r7, lr}
 8011d76:	b088      	sub	sp, #32
 8011d78:	af00      	add	r7, sp, #0
 8011d7a:	6078      	str	r0, [r7, #4]
 8011d7c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	681b      	ldr	r3, [r3, #0]
 8011d82:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8011d84:	683b      	ldr	r3, [r7, #0]
 8011d86:	2b00      	cmp	r3, #0
 8011d88:	d10d      	bne.n	8011da6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8011d8a:	693b      	ldr	r3, [r7, #16]
 8011d8c:	691b      	ldr	r3, [r3, #16]
 8011d8e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8011d90:	69bb      	ldr	r3, [r7, #24]
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	d004      	beq.n	8011da0 <create_chain+0x2c>
 8011d96:	693b      	ldr	r3, [r7, #16]
 8011d98:	69db      	ldr	r3, [r3, #28]
 8011d9a:	69ba      	ldr	r2, [r7, #24]
 8011d9c:	429a      	cmp	r2, r3
 8011d9e:	d31b      	bcc.n	8011dd8 <create_chain+0x64>
 8011da0:	2301      	movs	r3, #1
 8011da2:	61bb      	str	r3, [r7, #24]
 8011da4:	e018      	b.n	8011dd8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8011da6:	6839      	ldr	r1, [r7, #0]
 8011da8:	6878      	ldr	r0, [r7, #4]
 8011daa:	f7ff fd8e 	bl	80118ca <get_fat>
 8011dae:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8011db0:	68fb      	ldr	r3, [r7, #12]
 8011db2:	2b01      	cmp	r3, #1
 8011db4:	d801      	bhi.n	8011dba <create_chain+0x46>
 8011db6:	2301      	movs	r3, #1
 8011db8:	e070      	b.n	8011e9c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8011dba:	68fb      	ldr	r3, [r7, #12]
 8011dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011dc0:	d101      	bne.n	8011dc6 <create_chain+0x52>
 8011dc2:	68fb      	ldr	r3, [r7, #12]
 8011dc4:	e06a      	b.n	8011e9c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8011dc6:	693b      	ldr	r3, [r7, #16]
 8011dc8:	69db      	ldr	r3, [r3, #28]
 8011dca:	68fa      	ldr	r2, [r7, #12]
 8011dcc:	429a      	cmp	r2, r3
 8011dce:	d201      	bcs.n	8011dd4 <create_chain+0x60>
 8011dd0:	68fb      	ldr	r3, [r7, #12]
 8011dd2:	e063      	b.n	8011e9c <create_chain+0x128>
		scl = clst;
 8011dd4:	683b      	ldr	r3, [r7, #0]
 8011dd6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8011dd8:	69bb      	ldr	r3, [r7, #24]
 8011dda:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8011ddc:	69fb      	ldr	r3, [r7, #28]
 8011dde:	3301      	adds	r3, #1
 8011de0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8011de2:	693b      	ldr	r3, [r7, #16]
 8011de4:	69db      	ldr	r3, [r3, #28]
 8011de6:	69fa      	ldr	r2, [r7, #28]
 8011de8:	429a      	cmp	r2, r3
 8011dea:	d307      	bcc.n	8011dfc <create_chain+0x88>
				ncl = 2;
 8011dec:	2302      	movs	r3, #2
 8011dee:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8011df0:	69fa      	ldr	r2, [r7, #28]
 8011df2:	69bb      	ldr	r3, [r7, #24]
 8011df4:	429a      	cmp	r2, r3
 8011df6:	d901      	bls.n	8011dfc <create_chain+0x88>
 8011df8:	2300      	movs	r3, #0
 8011dfa:	e04f      	b.n	8011e9c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8011dfc:	69f9      	ldr	r1, [r7, #28]
 8011dfe:	6878      	ldr	r0, [r7, #4]
 8011e00:	f7ff fd63 	bl	80118ca <get_fat>
 8011e04:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8011e06:	68fb      	ldr	r3, [r7, #12]
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	d00e      	beq.n	8011e2a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8011e0c:	68fb      	ldr	r3, [r7, #12]
 8011e0e:	2b01      	cmp	r3, #1
 8011e10:	d003      	beq.n	8011e1a <create_chain+0xa6>
 8011e12:	68fb      	ldr	r3, [r7, #12]
 8011e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e18:	d101      	bne.n	8011e1e <create_chain+0xaa>
 8011e1a:	68fb      	ldr	r3, [r7, #12]
 8011e1c:	e03e      	b.n	8011e9c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8011e1e:	69fa      	ldr	r2, [r7, #28]
 8011e20:	69bb      	ldr	r3, [r7, #24]
 8011e22:	429a      	cmp	r2, r3
 8011e24:	d1da      	bne.n	8011ddc <create_chain+0x68>
 8011e26:	2300      	movs	r3, #0
 8011e28:	e038      	b.n	8011e9c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8011e2a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8011e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8011e30:	69f9      	ldr	r1, [r7, #28]
 8011e32:	6938      	ldr	r0, [r7, #16]
 8011e34:	f7ff fe1d 	bl	8011a72 <put_fat>
 8011e38:	4603      	mov	r3, r0
 8011e3a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8011e3c:	7dfb      	ldrb	r3, [r7, #23]
 8011e3e:	2b00      	cmp	r3, #0
 8011e40:	d109      	bne.n	8011e56 <create_chain+0xe2>
 8011e42:	683b      	ldr	r3, [r7, #0]
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	d006      	beq.n	8011e56 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8011e48:	69fa      	ldr	r2, [r7, #28]
 8011e4a:	6839      	ldr	r1, [r7, #0]
 8011e4c:	6938      	ldr	r0, [r7, #16]
 8011e4e:	f7ff fe10 	bl	8011a72 <put_fat>
 8011e52:	4603      	mov	r3, r0
 8011e54:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8011e56:	7dfb      	ldrb	r3, [r7, #23]
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	d116      	bne.n	8011e8a <create_chain+0x116>
		fs->last_clst = ncl;
 8011e5c:	693b      	ldr	r3, [r7, #16]
 8011e5e:	69fa      	ldr	r2, [r7, #28]
 8011e60:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8011e62:	693b      	ldr	r3, [r7, #16]
 8011e64:	695a      	ldr	r2, [r3, #20]
 8011e66:	693b      	ldr	r3, [r7, #16]
 8011e68:	69db      	ldr	r3, [r3, #28]
 8011e6a:	3b02      	subs	r3, #2
 8011e6c:	429a      	cmp	r2, r3
 8011e6e:	d804      	bhi.n	8011e7a <create_chain+0x106>
 8011e70:	693b      	ldr	r3, [r7, #16]
 8011e72:	695b      	ldr	r3, [r3, #20]
 8011e74:	1e5a      	subs	r2, r3, #1
 8011e76:	693b      	ldr	r3, [r7, #16]
 8011e78:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8011e7a:	693b      	ldr	r3, [r7, #16]
 8011e7c:	791b      	ldrb	r3, [r3, #4]
 8011e7e:	f043 0301 	orr.w	r3, r3, #1
 8011e82:	b2da      	uxtb	r2, r3
 8011e84:	693b      	ldr	r3, [r7, #16]
 8011e86:	711a      	strb	r2, [r3, #4]
 8011e88:	e007      	b.n	8011e9a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8011e8a:	7dfb      	ldrb	r3, [r7, #23]
 8011e8c:	2b01      	cmp	r3, #1
 8011e8e:	d102      	bne.n	8011e96 <create_chain+0x122>
 8011e90:	f04f 33ff 	mov.w	r3, #4294967295
 8011e94:	e000      	b.n	8011e98 <create_chain+0x124>
 8011e96:	2301      	movs	r3, #1
 8011e98:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8011e9a:	69fb      	ldr	r3, [r7, #28]
}
 8011e9c:	4618      	mov	r0, r3
 8011e9e:	3720      	adds	r7, #32
 8011ea0:	46bd      	mov	sp, r7
 8011ea2:	bd80      	pop	{r7, pc}

08011ea4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8011ea4:	b480      	push	{r7}
 8011ea6:	b087      	sub	sp, #28
 8011ea8:	af00      	add	r7, sp, #0
 8011eaa:	6078      	str	r0, [r7, #4]
 8011eac:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	681b      	ldr	r3, [r3, #0]
 8011eb2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011eb8:	3304      	adds	r3, #4
 8011eba:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8011ebc:	68fb      	ldr	r3, [r7, #12]
 8011ebe:	899b      	ldrh	r3, [r3, #12]
 8011ec0:	461a      	mov	r2, r3
 8011ec2:	683b      	ldr	r3, [r7, #0]
 8011ec4:	fbb3 f3f2 	udiv	r3, r3, r2
 8011ec8:	68fa      	ldr	r2, [r7, #12]
 8011eca:	8952      	ldrh	r2, [r2, #10]
 8011ecc:	fbb3 f3f2 	udiv	r3, r3, r2
 8011ed0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011ed2:	693b      	ldr	r3, [r7, #16]
 8011ed4:	1d1a      	adds	r2, r3, #4
 8011ed6:	613a      	str	r2, [r7, #16]
 8011ed8:	681b      	ldr	r3, [r3, #0]
 8011eda:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8011edc:	68bb      	ldr	r3, [r7, #8]
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d101      	bne.n	8011ee6 <clmt_clust+0x42>
 8011ee2:	2300      	movs	r3, #0
 8011ee4:	e010      	b.n	8011f08 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8011ee6:	697a      	ldr	r2, [r7, #20]
 8011ee8:	68bb      	ldr	r3, [r7, #8]
 8011eea:	429a      	cmp	r2, r3
 8011eec:	d307      	bcc.n	8011efe <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8011eee:	697a      	ldr	r2, [r7, #20]
 8011ef0:	68bb      	ldr	r3, [r7, #8]
 8011ef2:	1ad3      	subs	r3, r2, r3
 8011ef4:	617b      	str	r3, [r7, #20]
 8011ef6:	693b      	ldr	r3, [r7, #16]
 8011ef8:	3304      	adds	r3, #4
 8011efa:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011efc:	e7e9      	b.n	8011ed2 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8011efe:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8011f00:	693b      	ldr	r3, [r7, #16]
 8011f02:	681a      	ldr	r2, [r3, #0]
 8011f04:	697b      	ldr	r3, [r7, #20]
 8011f06:	4413      	add	r3, r2
}
 8011f08:	4618      	mov	r0, r3
 8011f0a:	371c      	adds	r7, #28
 8011f0c:	46bd      	mov	sp, r7
 8011f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f12:	4770      	bx	lr

08011f14 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8011f14:	b580      	push	{r7, lr}
 8011f16:	b086      	sub	sp, #24
 8011f18:	af00      	add	r7, sp, #0
 8011f1a:	6078      	str	r0, [r7, #4]
 8011f1c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	681b      	ldr	r3, [r3, #0]
 8011f22:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8011f24:	683b      	ldr	r3, [r7, #0]
 8011f26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011f2a:	d204      	bcs.n	8011f36 <dir_sdi+0x22>
 8011f2c:	683b      	ldr	r3, [r7, #0]
 8011f2e:	f003 031f 	and.w	r3, r3, #31
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	d001      	beq.n	8011f3a <dir_sdi+0x26>
		return FR_INT_ERR;
 8011f36:	2302      	movs	r3, #2
 8011f38:	e071      	b.n	801201e <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	683a      	ldr	r2, [r7, #0]
 8011f3e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	689b      	ldr	r3, [r3, #8]
 8011f44:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8011f46:	697b      	ldr	r3, [r7, #20]
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d106      	bne.n	8011f5a <dir_sdi+0x46>
 8011f4c:	693b      	ldr	r3, [r7, #16]
 8011f4e:	781b      	ldrb	r3, [r3, #0]
 8011f50:	2b02      	cmp	r3, #2
 8011f52:	d902      	bls.n	8011f5a <dir_sdi+0x46>
		clst = fs->dirbase;
 8011f54:	693b      	ldr	r3, [r7, #16]
 8011f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f58:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8011f5a:	697b      	ldr	r3, [r7, #20]
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d10c      	bne.n	8011f7a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8011f60:	683b      	ldr	r3, [r7, #0]
 8011f62:	095b      	lsrs	r3, r3, #5
 8011f64:	693a      	ldr	r2, [r7, #16]
 8011f66:	8912      	ldrh	r2, [r2, #8]
 8011f68:	4293      	cmp	r3, r2
 8011f6a:	d301      	bcc.n	8011f70 <dir_sdi+0x5c>
 8011f6c:	2302      	movs	r3, #2
 8011f6e:	e056      	b.n	801201e <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8011f70:	693b      	ldr	r3, [r7, #16]
 8011f72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	61da      	str	r2, [r3, #28]
 8011f78:	e02d      	b.n	8011fd6 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8011f7a:	693b      	ldr	r3, [r7, #16]
 8011f7c:	895b      	ldrh	r3, [r3, #10]
 8011f7e:	461a      	mov	r2, r3
 8011f80:	693b      	ldr	r3, [r7, #16]
 8011f82:	899b      	ldrh	r3, [r3, #12]
 8011f84:	fb03 f302 	mul.w	r3, r3, r2
 8011f88:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011f8a:	e019      	b.n	8011fc0 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	6979      	ldr	r1, [r7, #20]
 8011f90:	4618      	mov	r0, r3
 8011f92:	f7ff fc9a 	bl	80118ca <get_fat>
 8011f96:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011f98:	697b      	ldr	r3, [r7, #20]
 8011f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f9e:	d101      	bne.n	8011fa4 <dir_sdi+0x90>
 8011fa0:	2301      	movs	r3, #1
 8011fa2:	e03c      	b.n	801201e <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8011fa4:	697b      	ldr	r3, [r7, #20]
 8011fa6:	2b01      	cmp	r3, #1
 8011fa8:	d904      	bls.n	8011fb4 <dir_sdi+0xa0>
 8011faa:	693b      	ldr	r3, [r7, #16]
 8011fac:	69db      	ldr	r3, [r3, #28]
 8011fae:	697a      	ldr	r2, [r7, #20]
 8011fb0:	429a      	cmp	r2, r3
 8011fb2:	d301      	bcc.n	8011fb8 <dir_sdi+0xa4>
 8011fb4:	2302      	movs	r3, #2
 8011fb6:	e032      	b.n	801201e <dir_sdi+0x10a>
			ofs -= csz;
 8011fb8:	683a      	ldr	r2, [r7, #0]
 8011fba:	68fb      	ldr	r3, [r7, #12]
 8011fbc:	1ad3      	subs	r3, r2, r3
 8011fbe:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011fc0:	683a      	ldr	r2, [r7, #0]
 8011fc2:	68fb      	ldr	r3, [r7, #12]
 8011fc4:	429a      	cmp	r2, r3
 8011fc6:	d2e1      	bcs.n	8011f8c <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8011fc8:	6979      	ldr	r1, [r7, #20]
 8011fca:	6938      	ldr	r0, [r7, #16]
 8011fcc:	f7ff fc5e 	bl	801188c <clust2sect>
 8011fd0:	4602      	mov	r2, r0
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	697a      	ldr	r2, [r7, #20]
 8011fda:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	69db      	ldr	r3, [r3, #28]
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	d101      	bne.n	8011fe8 <dir_sdi+0xd4>
 8011fe4:	2302      	movs	r3, #2
 8011fe6:	e01a      	b.n	801201e <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	69da      	ldr	r2, [r3, #28]
 8011fec:	693b      	ldr	r3, [r7, #16]
 8011fee:	899b      	ldrh	r3, [r3, #12]
 8011ff0:	4619      	mov	r1, r3
 8011ff2:	683b      	ldr	r3, [r7, #0]
 8011ff4:	fbb3 f3f1 	udiv	r3, r3, r1
 8011ff8:	441a      	add	r2, r3
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8011ffe:	693b      	ldr	r3, [r7, #16]
 8012000:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8012004:	693b      	ldr	r3, [r7, #16]
 8012006:	899b      	ldrh	r3, [r3, #12]
 8012008:	461a      	mov	r2, r3
 801200a:	683b      	ldr	r3, [r7, #0]
 801200c:	fbb3 f0f2 	udiv	r0, r3, r2
 8012010:	fb02 f200 	mul.w	r2, r2, r0
 8012014:	1a9b      	subs	r3, r3, r2
 8012016:	18ca      	adds	r2, r1, r3
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801201c:	2300      	movs	r3, #0
}
 801201e:	4618      	mov	r0, r3
 8012020:	3718      	adds	r7, #24
 8012022:	46bd      	mov	sp, r7
 8012024:	bd80      	pop	{r7, pc}

08012026 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8012026:	b580      	push	{r7, lr}
 8012028:	b086      	sub	sp, #24
 801202a:	af00      	add	r7, sp, #0
 801202c:	6078      	str	r0, [r7, #4]
 801202e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	681b      	ldr	r3, [r3, #0]
 8012034:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	695b      	ldr	r3, [r3, #20]
 801203a:	3320      	adds	r3, #32
 801203c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	69db      	ldr	r3, [r3, #28]
 8012042:	2b00      	cmp	r3, #0
 8012044:	d003      	beq.n	801204e <dir_next+0x28>
 8012046:	68bb      	ldr	r3, [r7, #8]
 8012048:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801204c:	d301      	bcc.n	8012052 <dir_next+0x2c>
 801204e:	2304      	movs	r3, #4
 8012050:	e0bb      	b.n	80121ca <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8012052:	68fb      	ldr	r3, [r7, #12]
 8012054:	899b      	ldrh	r3, [r3, #12]
 8012056:	461a      	mov	r2, r3
 8012058:	68bb      	ldr	r3, [r7, #8]
 801205a:	fbb3 f1f2 	udiv	r1, r3, r2
 801205e:	fb02 f201 	mul.w	r2, r2, r1
 8012062:	1a9b      	subs	r3, r3, r2
 8012064:	2b00      	cmp	r3, #0
 8012066:	f040 809d 	bne.w	80121a4 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	69db      	ldr	r3, [r3, #28]
 801206e:	1c5a      	adds	r2, r3, #1
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	699b      	ldr	r3, [r3, #24]
 8012078:	2b00      	cmp	r3, #0
 801207a:	d10b      	bne.n	8012094 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801207c:	68bb      	ldr	r3, [r7, #8]
 801207e:	095b      	lsrs	r3, r3, #5
 8012080:	68fa      	ldr	r2, [r7, #12]
 8012082:	8912      	ldrh	r2, [r2, #8]
 8012084:	4293      	cmp	r3, r2
 8012086:	f0c0 808d 	bcc.w	80121a4 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	2200      	movs	r2, #0
 801208e:	61da      	str	r2, [r3, #28]
 8012090:	2304      	movs	r3, #4
 8012092:	e09a      	b.n	80121ca <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8012094:	68fb      	ldr	r3, [r7, #12]
 8012096:	899b      	ldrh	r3, [r3, #12]
 8012098:	461a      	mov	r2, r3
 801209a:	68bb      	ldr	r3, [r7, #8]
 801209c:	fbb3 f3f2 	udiv	r3, r3, r2
 80120a0:	68fa      	ldr	r2, [r7, #12]
 80120a2:	8952      	ldrh	r2, [r2, #10]
 80120a4:	3a01      	subs	r2, #1
 80120a6:	4013      	ands	r3, r2
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	d17b      	bne.n	80121a4 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80120ac:	687a      	ldr	r2, [r7, #4]
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	699b      	ldr	r3, [r3, #24]
 80120b2:	4619      	mov	r1, r3
 80120b4:	4610      	mov	r0, r2
 80120b6:	f7ff fc08 	bl	80118ca <get_fat>
 80120ba:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80120bc:	697b      	ldr	r3, [r7, #20]
 80120be:	2b01      	cmp	r3, #1
 80120c0:	d801      	bhi.n	80120c6 <dir_next+0xa0>
 80120c2:	2302      	movs	r3, #2
 80120c4:	e081      	b.n	80121ca <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80120c6:	697b      	ldr	r3, [r7, #20]
 80120c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80120cc:	d101      	bne.n	80120d2 <dir_next+0xac>
 80120ce:	2301      	movs	r3, #1
 80120d0:	e07b      	b.n	80121ca <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80120d2:	68fb      	ldr	r3, [r7, #12]
 80120d4:	69db      	ldr	r3, [r3, #28]
 80120d6:	697a      	ldr	r2, [r7, #20]
 80120d8:	429a      	cmp	r2, r3
 80120da:	d359      	bcc.n	8012190 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80120dc:	683b      	ldr	r3, [r7, #0]
 80120de:	2b00      	cmp	r3, #0
 80120e0:	d104      	bne.n	80120ec <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	2200      	movs	r2, #0
 80120e6:	61da      	str	r2, [r3, #28]
 80120e8:	2304      	movs	r3, #4
 80120ea:	e06e      	b.n	80121ca <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80120ec:	687a      	ldr	r2, [r7, #4]
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	699b      	ldr	r3, [r3, #24]
 80120f2:	4619      	mov	r1, r3
 80120f4:	4610      	mov	r0, r2
 80120f6:	f7ff fe3d 	bl	8011d74 <create_chain>
 80120fa:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80120fc:	697b      	ldr	r3, [r7, #20]
 80120fe:	2b00      	cmp	r3, #0
 8012100:	d101      	bne.n	8012106 <dir_next+0xe0>
 8012102:	2307      	movs	r3, #7
 8012104:	e061      	b.n	80121ca <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8012106:	697b      	ldr	r3, [r7, #20]
 8012108:	2b01      	cmp	r3, #1
 801210a:	d101      	bne.n	8012110 <dir_next+0xea>
 801210c:	2302      	movs	r3, #2
 801210e:	e05c      	b.n	80121ca <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8012110:	697b      	ldr	r3, [r7, #20]
 8012112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012116:	d101      	bne.n	801211c <dir_next+0xf6>
 8012118:	2301      	movs	r3, #1
 801211a:	e056      	b.n	80121ca <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801211c:	68f8      	ldr	r0, [r7, #12]
 801211e:	f7ff fad3 	bl	80116c8 <sync_window>
 8012122:	4603      	mov	r3, r0
 8012124:	2b00      	cmp	r3, #0
 8012126:	d001      	beq.n	801212c <dir_next+0x106>
 8012128:	2301      	movs	r3, #1
 801212a:	e04e      	b.n	80121ca <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801212c:	68fb      	ldr	r3, [r7, #12]
 801212e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8012132:	68fb      	ldr	r3, [r7, #12]
 8012134:	899b      	ldrh	r3, [r3, #12]
 8012136:	461a      	mov	r2, r3
 8012138:	2100      	movs	r1, #0
 801213a:	f7ff f8fc 	bl	8011336 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801213e:	2300      	movs	r3, #0
 8012140:	613b      	str	r3, [r7, #16]
 8012142:	6979      	ldr	r1, [r7, #20]
 8012144:	68f8      	ldr	r0, [r7, #12]
 8012146:	f7ff fba1 	bl	801188c <clust2sect>
 801214a:	4602      	mov	r2, r0
 801214c:	68fb      	ldr	r3, [r7, #12]
 801214e:	635a      	str	r2, [r3, #52]	; 0x34
 8012150:	e012      	b.n	8012178 <dir_next+0x152>
						fs->wflag = 1;
 8012152:	68fb      	ldr	r3, [r7, #12]
 8012154:	2201      	movs	r2, #1
 8012156:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8012158:	68f8      	ldr	r0, [r7, #12]
 801215a:	f7ff fab5 	bl	80116c8 <sync_window>
 801215e:	4603      	mov	r3, r0
 8012160:	2b00      	cmp	r3, #0
 8012162:	d001      	beq.n	8012168 <dir_next+0x142>
 8012164:	2301      	movs	r3, #1
 8012166:	e030      	b.n	80121ca <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8012168:	693b      	ldr	r3, [r7, #16]
 801216a:	3301      	adds	r3, #1
 801216c:	613b      	str	r3, [r7, #16]
 801216e:	68fb      	ldr	r3, [r7, #12]
 8012170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012172:	1c5a      	adds	r2, r3, #1
 8012174:	68fb      	ldr	r3, [r7, #12]
 8012176:	635a      	str	r2, [r3, #52]	; 0x34
 8012178:	68fb      	ldr	r3, [r7, #12]
 801217a:	895b      	ldrh	r3, [r3, #10]
 801217c:	461a      	mov	r2, r3
 801217e:	693b      	ldr	r3, [r7, #16]
 8012180:	4293      	cmp	r3, r2
 8012182:	d3e6      	bcc.n	8012152 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8012184:	68fb      	ldr	r3, [r7, #12]
 8012186:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012188:	693b      	ldr	r3, [r7, #16]
 801218a:	1ad2      	subs	r2, r2, r3
 801218c:	68fb      	ldr	r3, [r7, #12]
 801218e:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	697a      	ldr	r2, [r7, #20]
 8012194:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8012196:	6979      	ldr	r1, [r7, #20]
 8012198:	68f8      	ldr	r0, [r7, #12]
 801219a:	f7ff fb77 	bl	801188c <clust2sect>
 801219e:	4602      	mov	r2, r0
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	68ba      	ldr	r2, [r7, #8]
 80121a8:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80121aa:	68fb      	ldr	r3, [r7, #12]
 80121ac:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80121b0:	68fb      	ldr	r3, [r7, #12]
 80121b2:	899b      	ldrh	r3, [r3, #12]
 80121b4:	461a      	mov	r2, r3
 80121b6:	68bb      	ldr	r3, [r7, #8]
 80121b8:	fbb3 f0f2 	udiv	r0, r3, r2
 80121bc:	fb02 f200 	mul.w	r2, r2, r0
 80121c0:	1a9b      	subs	r3, r3, r2
 80121c2:	18ca      	adds	r2, r1, r3
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80121c8:	2300      	movs	r3, #0
}
 80121ca:	4618      	mov	r0, r3
 80121cc:	3718      	adds	r7, #24
 80121ce:	46bd      	mov	sp, r7
 80121d0:	bd80      	pop	{r7, pc}

080121d2 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80121d2:	b580      	push	{r7, lr}
 80121d4:	b086      	sub	sp, #24
 80121d6:	af00      	add	r7, sp, #0
 80121d8:	6078      	str	r0, [r7, #4]
 80121da:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	681b      	ldr	r3, [r3, #0]
 80121e0:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80121e2:	2100      	movs	r1, #0
 80121e4:	6878      	ldr	r0, [r7, #4]
 80121e6:	f7ff fe95 	bl	8011f14 <dir_sdi>
 80121ea:	4603      	mov	r3, r0
 80121ec:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80121ee:	7dfb      	ldrb	r3, [r7, #23]
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	d12b      	bne.n	801224c <dir_alloc+0x7a>
		n = 0;
 80121f4:	2300      	movs	r3, #0
 80121f6:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	69db      	ldr	r3, [r3, #28]
 80121fc:	4619      	mov	r1, r3
 80121fe:	68f8      	ldr	r0, [r7, #12]
 8012200:	f7ff faa6 	bl	8011750 <move_window>
 8012204:	4603      	mov	r3, r0
 8012206:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8012208:	7dfb      	ldrb	r3, [r7, #23]
 801220a:	2b00      	cmp	r3, #0
 801220c:	d11d      	bne.n	801224a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	6a1b      	ldr	r3, [r3, #32]
 8012212:	781b      	ldrb	r3, [r3, #0]
 8012214:	2be5      	cmp	r3, #229	; 0xe5
 8012216:	d004      	beq.n	8012222 <dir_alloc+0x50>
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	6a1b      	ldr	r3, [r3, #32]
 801221c:	781b      	ldrb	r3, [r3, #0]
 801221e:	2b00      	cmp	r3, #0
 8012220:	d107      	bne.n	8012232 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8012222:	693b      	ldr	r3, [r7, #16]
 8012224:	3301      	adds	r3, #1
 8012226:	613b      	str	r3, [r7, #16]
 8012228:	693a      	ldr	r2, [r7, #16]
 801222a:	683b      	ldr	r3, [r7, #0]
 801222c:	429a      	cmp	r2, r3
 801222e:	d102      	bne.n	8012236 <dir_alloc+0x64>
 8012230:	e00c      	b.n	801224c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8012232:	2300      	movs	r3, #0
 8012234:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8012236:	2101      	movs	r1, #1
 8012238:	6878      	ldr	r0, [r7, #4]
 801223a:	f7ff fef4 	bl	8012026 <dir_next>
 801223e:	4603      	mov	r3, r0
 8012240:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8012242:	7dfb      	ldrb	r3, [r7, #23]
 8012244:	2b00      	cmp	r3, #0
 8012246:	d0d7      	beq.n	80121f8 <dir_alloc+0x26>
 8012248:	e000      	b.n	801224c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801224a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801224c:	7dfb      	ldrb	r3, [r7, #23]
 801224e:	2b04      	cmp	r3, #4
 8012250:	d101      	bne.n	8012256 <dir_alloc+0x84>
 8012252:	2307      	movs	r3, #7
 8012254:	75fb      	strb	r3, [r7, #23]
	return res;
 8012256:	7dfb      	ldrb	r3, [r7, #23]
}
 8012258:	4618      	mov	r0, r3
 801225a:	3718      	adds	r7, #24
 801225c:	46bd      	mov	sp, r7
 801225e:	bd80      	pop	{r7, pc}

08012260 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8012260:	b580      	push	{r7, lr}
 8012262:	b084      	sub	sp, #16
 8012264:	af00      	add	r7, sp, #0
 8012266:	6078      	str	r0, [r7, #4]
 8012268:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801226a:	683b      	ldr	r3, [r7, #0]
 801226c:	331a      	adds	r3, #26
 801226e:	4618      	mov	r0, r3
 8012270:	f7fe ffbe 	bl	80111f0 <ld_word>
 8012274:	4603      	mov	r3, r0
 8012276:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	781b      	ldrb	r3, [r3, #0]
 801227c:	2b03      	cmp	r3, #3
 801227e:	d109      	bne.n	8012294 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8012280:	683b      	ldr	r3, [r7, #0]
 8012282:	3314      	adds	r3, #20
 8012284:	4618      	mov	r0, r3
 8012286:	f7fe ffb3 	bl	80111f0 <ld_word>
 801228a:	4603      	mov	r3, r0
 801228c:	041b      	lsls	r3, r3, #16
 801228e:	68fa      	ldr	r2, [r7, #12]
 8012290:	4313      	orrs	r3, r2
 8012292:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8012294:	68fb      	ldr	r3, [r7, #12]
}
 8012296:	4618      	mov	r0, r3
 8012298:	3710      	adds	r7, #16
 801229a:	46bd      	mov	sp, r7
 801229c:	bd80      	pop	{r7, pc}

0801229e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801229e:	b580      	push	{r7, lr}
 80122a0:	b084      	sub	sp, #16
 80122a2:	af00      	add	r7, sp, #0
 80122a4:	60f8      	str	r0, [r7, #12]
 80122a6:	60b9      	str	r1, [r7, #8]
 80122a8:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80122aa:	68bb      	ldr	r3, [r7, #8]
 80122ac:	331a      	adds	r3, #26
 80122ae:	687a      	ldr	r2, [r7, #4]
 80122b0:	b292      	uxth	r2, r2
 80122b2:	4611      	mov	r1, r2
 80122b4:	4618      	mov	r0, r3
 80122b6:	f7fe ffd6 	bl	8011266 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80122ba:	68fb      	ldr	r3, [r7, #12]
 80122bc:	781b      	ldrb	r3, [r3, #0]
 80122be:	2b03      	cmp	r3, #3
 80122c0:	d109      	bne.n	80122d6 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80122c2:	68bb      	ldr	r3, [r7, #8]
 80122c4:	f103 0214 	add.w	r2, r3, #20
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	0c1b      	lsrs	r3, r3, #16
 80122cc:	b29b      	uxth	r3, r3
 80122ce:	4619      	mov	r1, r3
 80122d0:	4610      	mov	r0, r2
 80122d2:	f7fe ffc8 	bl	8011266 <st_word>
	}
}
 80122d6:	bf00      	nop
 80122d8:	3710      	adds	r7, #16
 80122da:	46bd      	mov	sp, r7
 80122dc:	bd80      	pop	{r7, pc}

080122de <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80122de:	b580      	push	{r7, lr}
 80122e0:	b086      	sub	sp, #24
 80122e2:	af00      	add	r7, sp, #0
 80122e4:	6078      	str	r0, [r7, #4]
 80122e6:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80122e8:	2304      	movs	r3, #4
 80122ea:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	681b      	ldr	r3, [r3, #0]
 80122f0:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 80122f2:	e03c      	b.n	801236e <dir_read+0x90>
		res = move_window(fs, dp->sect);
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	69db      	ldr	r3, [r3, #28]
 80122f8:	4619      	mov	r1, r3
 80122fa:	6938      	ldr	r0, [r7, #16]
 80122fc:	f7ff fa28 	bl	8011750 <move_window>
 8012300:	4603      	mov	r3, r0
 8012302:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012304:	7dfb      	ldrb	r3, [r7, #23]
 8012306:	2b00      	cmp	r3, #0
 8012308:	d136      	bne.n	8012378 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	6a1b      	ldr	r3, [r3, #32]
 801230e:	781b      	ldrb	r3, [r3, #0]
 8012310:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8012312:	7bfb      	ldrb	r3, [r7, #15]
 8012314:	2b00      	cmp	r3, #0
 8012316:	d102      	bne.n	801231e <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8012318:	2304      	movs	r3, #4
 801231a:	75fb      	strb	r3, [r7, #23]
 801231c:	e031      	b.n	8012382 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	6a1b      	ldr	r3, [r3, #32]
 8012322:	330b      	adds	r3, #11
 8012324:	781b      	ldrb	r3, [r3, #0]
 8012326:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801232a:	73bb      	strb	r3, [r7, #14]
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	7bba      	ldrb	r2, [r7, #14]
 8012330:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8012332:	7bfb      	ldrb	r3, [r7, #15]
 8012334:	2be5      	cmp	r3, #229	; 0xe5
 8012336:	d011      	beq.n	801235c <dir_read+0x7e>
 8012338:	7bfb      	ldrb	r3, [r7, #15]
 801233a:	2b2e      	cmp	r3, #46	; 0x2e
 801233c:	d00e      	beq.n	801235c <dir_read+0x7e>
 801233e:	7bbb      	ldrb	r3, [r7, #14]
 8012340:	2b0f      	cmp	r3, #15
 8012342:	d00b      	beq.n	801235c <dir_read+0x7e>
 8012344:	7bbb      	ldrb	r3, [r7, #14]
 8012346:	f023 0320 	bic.w	r3, r3, #32
 801234a:	2b08      	cmp	r3, #8
 801234c:	bf0c      	ite	eq
 801234e:	2301      	moveq	r3, #1
 8012350:	2300      	movne	r3, #0
 8012352:	b2db      	uxtb	r3, r3
 8012354:	461a      	mov	r2, r3
 8012356:	683b      	ldr	r3, [r7, #0]
 8012358:	4293      	cmp	r3, r2
 801235a:	d00f      	beq.n	801237c <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 801235c:	2100      	movs	r1, #0
 801235e:	6878      	ldr	r0, [r7, #4]
 8012360:	f7ff fe61 	bl	8012026 <dir_next>
 8012364:	4603      	mov	r3, r0
 8012366:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012368:	7dfb      	ldrb	r3, [r7, #23]
 801236a:	2b00      	cmp	r3, #0
 801236c:	d108      	bne.n	8012380 <dir_read+0xa2>
	while (dp->sect) {
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	69db      	ldr	r3, [r3, #28]
 8012372:	2b00      	cmp	r3, #0
 8012374:	d1be      	bne.n	80122f4 <dir_read+0x16>
 8012376:	e004      	b.n	8012382 <dir_read+0xa4>
		if (res != FR_OK) break;
 8012378:	bf00      	nop
 801237a:	e002      	b.n	8012382 <dir_read+0xa4>
				break;
 801237c:	bf00      	nop
 801237e:	e000      	b.n	8012382 <dir_read+0xa4>
		if (res != FR_OK) break;
 8012380:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8012382:	7dfb      	ldrb	r3, [r7, #23]
 8012384:	2b00      	cmp	r3, #0
 8012386:	d002      	beq.n	801238e <dir_read+0xb0>
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	2200      	movs	r2, #0
 801238c:	61da      	str	r2, [r3, #28]
	return res;
 801238e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012390:	4618      	mov	r0, r3
 8012392:	3718      	adds	r7, #24
 8012394:	46bd      	mov	sp, r7
 8012396:	bd80      	pop	{r7, pc}

08012398 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8012398:	b580      	push	{r7, lr}
 801239a:	b086      	sub	sp, #24
 801239c:	af00      	add	r7, sp, #0
 801239e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	681b      	ldr	r3, [r3, #0]
 80123a4:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80123a6:	2100      	movs	r1, #0
 80123a8:	6878      	ldr	r0, [r7, #4]
 80123aa:	f7ff fdb3 	bl	8011f14 <dir_sdi>
 80123ae:	4603      	mov	r3, r0
 80123b0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80123b2:	7dfb      	ldrb	r3, [r7, #23]
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	d001      	beq.n	80123bc <dir_find+0x24>
 80123b8:	7dfb      	ldrb	r3, [r7, #23]
 80123ba:	e03e      	b.n	801243a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	69db      	ldr	r3, [r3, #28]
 80123c0:	4619      	mov	r1, r3
 80123c2:	6938      	ldr	r0, [r7, #16]
 80123c4:	f7ff f9c4 	bl	8011750 <move_window>
 80123c8:	4603      	mov	r3, r0
 80123ca:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80123cc:	7dfb      	ldrb	r3, [r7, #23]
 80123ce:	2b00      	cmp	r3, #0
 80123d0:	d12f      	bne.n	8012432 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	6a1b      	ldr	r3, [r3, #32]
 80123d6:	781b      	ldrb	r3, [r3, #0]
 80123d8:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80123da:	7bfb      	ldrb	r3, [r7, #15]
 80123dc:	2b00      	cmp	r3, #0
 80123de:	d102      	bne.n	80123e6 <dir_find+0x4e>
 80123e0:	2304      	movs	r3, #4
 80123e2:	75fb      	strb	r3, [r7, #23]
 80123e4:	e028      	b.n	8012438 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	6a1b      	ldr	r3, [r3, #32]
 80123ea:	330b      	adds	r3, #11
 80123ec:	781b      	ldrb	r3, [r3, #0]
 80123ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80123f2:	b2da      	uxtb	r2, r3
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	6a1b      	ldr	r3, [r3, #32]
 80123fc:	330b      	adds	r3, #11
 80123fe:	781b      	ldrb	r3, [r3, #0]
 8012400:	f003 0308 	and.w	r3, r3, #8
 8012404:	2b00      	cmp	r3, #0
 8012406:	d10a      	bne.n	801241e <dir_find+0x86>
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	6a18      	ldr	r0, [r3, #32]
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	3324      	adds	r3, #36	; 0x24
 8012410:	220b      	movs	r2, #11
 8012412:	4619      	mov	r1, r3
 8012414:	f7fe ffaa 	bl	801136c <mem_cmp>
 8012418:	4603      	mov	r3, r0
 801241a:	2b00      	cmp	r3, #0
 801241c:	d00b      	beq.n	8012436 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801241e:	2100      	movs	r1, #0
 8012420:	6878      	ldr	r0, [r7, #4]
 8012422:	f7ff fe00 	bl	8012026 <dir_next>
 8012426:	4603      	mov	r3, r0
 8012428:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801242a:	7dfb      	ldrb	r3, [r7, #23]
 801242c:	2b00      	cmp	r3, #0
 801242e:	d0c5      	beq.n	80123bc <dir_find+0x24>
 8012430:	e002      	b.n	8012438 <dir_find+0xa0>
		if (res != FR_OK) break;
 8012432:	bf00      	nop
 8012434:	e000      	b.n	8012438 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8012436:	bf00      	nop

	return res;
 8012438:	7dfb      	ldrb	r3, [r7, #23]
}
 801243a:	4618      	mov	r0, r3
 801243c:	3718      	adds	r7, #24
 801243e:	46bd      	mov	sp, r7
 8012440:	bd80      	pop	{r7, pc}

08012442 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8012442:	b580      	push	{r7, lr}
 8012444:	b084      	sub	sp, #16
 8012446:	af00      	add	r7, sp, #0
 8012448:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	681b      	ldr	r3, [r3, #0]
 801244e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8012450:	2101      	movs	r1, #1
 8012452:	6878      	ldr	r0, [r7, #4]
 8012454:	f7ff febd 	bl	80121d2 <dir_alloc>
 8012458:	4603      	mov	r3, r0
 801245a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801245c:	7bfb      	ldrb	r3, [r7, #15]
 801245e:	2b00      	cmp	r3, #0
 8012460:	d11c      	bne.n	801249c <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	69db      	ldr	r3, [r3, #28]
 8012466:	4619      	mov	r1, r3
 8012468:	68b8      	ldr	r0, [r7, #8]
 801246a:	f7ff f971 	bl	8011750 <move_window>
 801246e:	4603      	mov	r3, r0
 8012470:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8012472:	7bfb      	ldrb	r3, [r7, #15]
 8012474:	2b00      	cmp	r3, #0
 8012476:	d111      	bne.n	801249c <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	6a1b      	ldr	r3, [r3, #32]
 801247c:	2220      	movs	r2, #32
 801247e:	2100      	movs	r1, #0
 8012480:	4618      	mov	r0, r3
 8012482:	f7fe ff58 	bl	8011336 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	6a18      	ldr	r0, [r3, #32]
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	3324      	adds	r3, #36	; 0x24
 801248e:	220b      	movs	r2, #11
 8012490:	4619      	mov	r1, r3
 8012492:	f7fe ff2f 	bl	80112f4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8012496:	68bb      	ldr	r3, [r7, #8]
 8012498:	2201      	movs	r2, #1
 801249a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801249c:	7bfb      	ldrb	r3, [r7, #15]
}
 801249e:	4618      	mov	r0, r3
 80124a0:	3710      	adds	r7, #16
 80124a2:	46bd      	mov	sp, r7
 80124a4:	bd80      	pop	{r7, pc}

080124a6 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 80124a6:	b580      	push	{r7, lr}
 80124a8:	b084      	sub	sp, #16
 80124aa:	af00      	add	r7, sp, #0
 80124ac:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	681b      	ldr	r3, [r3, #0]
 80124b2:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	69db      	ldr	r3, [r3, #28]
 80124b8:	4619      	mov	r1, r3
 80124ba:	68f8      	ldr	r0, [r7, #12]
 80124bc:	f7ff f948 	bl	8011750 <move_window>
 80124c0:	4603      	mov	r3, r0
 80124c2:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 80124c4:	7afb      	ldrb	r3, [r7, #11]
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d106      	bne.n	80124d8 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	6a1b      	ldr	r3, [r3, #32]
 80124ce:	22e5      	movs	r2, #229	; 0xe5
 80124d0:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 80124d2:	68fb      	ldr	r3, [r7, #12]
 80124d4:	2201      	movs	r2, #1
 80124d6:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 80124d8:	7afb      	ldrb	r3, [r7, #11]
}
 80124da:	4618      	mov	r0, r3
 80124dc:	3710      	adds	r7, #16
 80124de:	46bd      	mov	sp, r7
 80124e0:	bd80      	pop	{r7, pc}
	...

080124e4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80124e4:	b580      	push	{r7, lr}
 80124e6:	b088      	sub	sp, #32
 80124e8:	af00      	add	r7, sp, #0
 80124ea:	6078      	str	r0, [r7, #4]
 80124ec:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80124ee:	683b      	ldr	r3, [r7, #0]
 80124f0:	681b      	ldr	r3, [r3, #0]
 80124f2:	60fb      	str	r3, [r7, #12]
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	3324      	adds	r3, #36	; 0x24
 80124f8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80124fa:	220b      	movs	r2, #11
 80124fc:	2120      	movs	r1, #32
 80124fe:	68b8      	ldr	r0, [r7, #8]
 8012500:	f7fe ff19 	bl	8011336 <mem_set>
	si = i = 0; ni = 8;
 8012504:	2300      	movs	r3, #0
 8012506:	613b      	str	r3, [r7, #16]
 8012508:	693b      	ldr	r3, [r7, #16]
 801250a:	61fb      	str	r3, [r7, #28]
 801250c:	2308      	movs	r3, #8
 801250e:	617b      	str	r3, [r7, #20]
#if _FS_RPATH != 0
	if (p[si] == '.') { /* Is this a dot entry? */
 8012510:	68fa      	ldr	r2, [r7, #12]
 8012512:	69fb      	ldr	r3, [r7, #28]
 8012514:	4413      	add	r3, r2
 8012516:	781b      	ldrb	r3, [r3, #0]
 8012518:	2b2e      	cmp	r3, #46	; 0x2e
 801251a:	d12f      	bne.n	801257c <create_name+0x98>
		for (;;) {
			c = (BYTE)p[si++];
 801251c:	69fb      	ldr	r3, [r7, #28]
 801251e:	1c5a      	adds	r2, r3, #1
 8012520:	61fa      	str	r2, [r7, #28]
 8012522:	68fa      	ldr	r2, [r7, #12]
 8012524:	4413      	add	r3, r2
 8012526:	781b      	ldrb	r3, [r3, #0]
 8012528:	76fb      	strb	r3, [r7, #27]
			if (c != '.' || si >= 3) break;
 801252a:	7efb      	ldrb	r3, [r7, #27]
 801252c:	2b2e      	cmp	r3, #46	; 0x2e
 801252e:	d10a      	bne.n	8012546 <create_name+0x62>
 8012530:	69fb      	ldr	r3, [r7, #28]
 8012532:	2b02      	cmp	r3, #2
 8012534:	d807      	bhi.n	8012546 <create_name+0x62>
			sfn[i++] = c;
 8012536:	693b      	ldr	r3, [r7, #16]
 8012538:	1c5a      	adds	r2, r3, #1
 801253a:	613a      	str	r2, [r7, #16]
 801253c:	68ba      	ldr	r2, [r7, #8]
 801253e:	4413      	add	r3, r2
 8012540:	7efa      	ldrb	r2, [r7, #27]
 8012542:	701a      	strb	r2, [r3, #0]
			c = (BYTE)p[si++];
 8012544:	e7ea      	b.n	801251c <create_name+0x38>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 8012546:	7efb      	ldrb	r3, [r7, #27]
 8012548:	2b2f      	cmp	r3, #47	; 0x2f
 801254a:	d007      	beq.n	801255c <create_name+0x78>
 801254c:	7efb      	ldrb	r3, [r7, #27]
 801254e:	2b5c      	cmp	r3, #92	; 0x5c
 8012550:	d004      	beq.n	801255c <create_name+0x78>
 8012552:	7efb      	ldrb	r3, [r7, #27]
 8012554:	2b20      	cmp	r3, #32
 8012556:	d901      	bls.n	801255c <create_name+0x78>
 8012558:	2306      	movs	r3, #6
 801255a:	e084      	b.n	8012666 <create_name+0x182>
		*path = p + si;								/* Return pointer to the next segment */
 801255c:	68fa      	ldr	r2, [r7, #12]
 801255e:	69fb      	ldr	r3, [r7, #28]
 8012560:	441a      	add	r2, r3
 8012562:	683b      	ldr	r3, [r7, #0]
 8012564:	601a      	str	r2, [r3, #0]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
 8012566:	7efb      	ldrb	r3, [r7, #27]
 8012568:	2b20      	cmp	r3, #32
 801256a:	d801      	bhi.n	8012570 <create_name+0x8c>
 801256c:	2224      	movs	r2, #36	; 0x24
 801256e:	e000      	b.n	8012572 <create_name+0x8e>
 8012570:	2220      	movs	r2, #32
 8012572:	68bb      	ldr	r3, [r7, #8]
 8012574:	330b      	adds	r3, #11
 8012576:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 8012578:	2300      	movs	r3, #0
 801257a:	e074      	b.n	8012666 <create_name+0x182>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 801257c:	69fb      	ldr	r3, [r7, #28]
 801257e:	1c5a      	adds	r2, r3, #1
 8012580:	61fa      	str	r2, [r7, #28]
 8012582:	68fa      	ldr	r2, [r7, #12]
 8012584:	4413      	add	r3, r2
 8012586:	781b      	ldrb	r3, [r3, #0]
 8012588:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 801258a:	7efb      	ldrb	r3, [r7, #27]
 801258c:	2b20      	cmp	r3, #32
 801258e:	d94e      	bls.n	801262e <create_name+0x14a>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8012590:	7efb      	ldrb	r3, [r7, #27]
 8012592:	2b2f      	cmp	r3, #47	; 0x2f
 8012594:	d006      	beq.n	80125a4 <create_name+0xc0>
 8012596:	7efb      	ldrb	r3, [r7, #27]
 8012598:	2b5c      	cmp	r3, #92	; 0x5c
 801259a:	d110      	bne.n	80125be <create_name+0xda>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 801259c:	e002      	b.n	80125a4 <create_name+0xc0>
 801259e:	69fb      	ldr	r3, [r7, #28]
 80125a0:	3301      	adds	r3, #1
 80125a2:	61fb      	str	r3, [r7, #28]
 80125a4:	68fa      	ldr	r2, [r7, #12]
 80125a6:	69fb      	ldr	r3, [r7, #28]
 80125a8:	4413      	add	r3, r2
 80125aa:	781b      	ldrb	r3, [r3, #0]
 80125ac:	2b2f      	cmp	r3, #47	; 0x2f
 80125ae:	d0f6      	beq.n	801259e <create_name+0xba>
 80125b0:	68fa      	ldr	r2, [r7, #12]
 80125b2:	69fb      	ldr	r3, [r7, #28]
 80125b4:	4413      	add	r3, r2
 80125b6:	781b      	ldrb	r3, [r3, #0]
 80125b8:	2b5c      	cmp	r3, #92	; 0x5c
 80125ba:	d0f0      	beq.n	801259e <create_name+0xba>
			break;
 80125bc:	e038      	b.n	8012630 <create_name+0x14c>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80125be:	7efb      	ldrb	r3, [r7, #27]
 80125c0:	2b2e      	cmp	r3, #46	; 0x2e
 80125c2:	d003      	beq.n	80125cc <create_name+0xe8>
 80125c4:	693a      	ldr	r2, [r7, #16]
 80125c6:	697b      	ldr	r3, [r7, #20]
 80125c8:	429a      	cmp	r2, r3
 80125ca:	d30c      	bcc.n	80125e6 <create_name+0x102>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80125cc:	697b      	ldr	r3, [r7, #20]
 80125ce:	2b0b      	cmp	r3, #11
 80125d0:	d002      	beq.n	80125d8 <create_name+0xf4>
 80125d2:	7efb      	ldrb	r3, [r7, #27]
 80125d4:	2b2e      	cmp	r3, #46	; 0x2e
 80125d6:	d001      	beq.n	80125dc <create_name+0xf8>
 80125d8:	2306      	movs	r3, #6
 80125da:	e044      	b.n	8012666 <create_name+0x182>
			i = 8; ni = 11;				/* Goto extension */
 80125dc:	2308      	movs	r3, #8
 80125de:	613b      	str	r3, [r7, #16]
 80125e0:	230b      	movs	r3, #11
 80125e2:	617b      	str	r3, [r7, #20]
			continue;
 80125e4:	e022      	b.n	801262c <create_name+0x148>
		}
		if (c >= 0x80) {				/* Extended character? */
 80125e6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80125ea:	2b00      	cmp	r3, #0
 80125ec:	da04      	bge.n	80125f8 <create_name+0x114>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80125ee:	7efb      	ldrb	r3, [r7, #27]
 80125f0:	3b80      	subs	r3, #128	; 0x80
 80125f2:	4a1f      	ldr	r2, [pc, #124]	; (8012670 <create_name+0x18c>)
 80125f4:	5cd3      	ldrb	r3, [r2, r3]
 80125f6:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80125f8:	7efb      	ldrb	r3, [r7, #27]
 80125fa:	4619      	mov	r1, r3
 80125fc:	481d      	ldr	r0, [pc, #116]	; (8012674 <create_name+0x190>)
 80125fe:	f7fe fedc 	bl	80113ba <chk_chr>
 8012602:	4603      	mov	r3, r0
 8012604:	2b00      	cmp	r3, #0
 8012606:	d001      	beq.n	801260c <create_name+0x128>
 8012608:	2306      	movs	r3, #6
 801260a:	e02c      	b.n	8012666 <create_name+0x182>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 801260c:	7efb      	ldrb	r3, [r7, #27]
 801260e:	2b60      	cmp	r3, #96	; 0x60
 8012610:	d905      	bls.n	801261e <create_name+0x13a>
 8012612:	7efb      	ldrb	r3, [r7, #27]
 8012614:	2b7a      	cmp	r3, #122	; 0x7a
 8012616:	d802      	bhi.n	801261e <create_name+0x13a>
 8012618:	7efb      	ldrb	r3, [r7, #27]
 801261a:	3b20      	subs	r3, #32
 801261c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 801261e:	693b      	ldr	r3, [r7, #16]
 8012620:	1c5a      	adds	r2, r3, #1
 8012622:	613a      	str	r2, [r7, #16]
 8012624:	68ba      	ldr	r2, [r7, #8]
 8012626:	4413      	add	r3, r2
 8012628:	7efa      	ldrb	r2, [r7, #27]
 801262a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 801262c:	e7a6      	b.n	801257c <create_name+0x98>
		if (c <= ' ') break; 			/* Break if end of the path name */
 801262e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8012630:	68fa      	ldr	r2, [r7, #12]
 8012632:	69fb      	ldr	r3, [r7, #28]
 8012634:	441a      	add	r2, r3
 8012636:	683b      	ldr	r3, [r7, #0]
 8012638:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 801263a:	693b      	ldr	r3, [r7, #16]
 801263c:	2b00      	cmp	r3, #0
 801263e:	d101      	bne.n	8012644 <create_name+0x160>
 8012640:	2306      	movs	r3, #6
 8012642:	e010      	b.n	8012666 <create_name+0x182>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8012644:	68bb      	ldr	r3, [r7, #8]
 8012646:	781b      	ldrb	r3, [r3, #0]
 8012648:	2be5      	cmp	r3, #229	; 0xe5
 801264a:	d102      	bne.n	8012652 <create_name+0x16e>
 801264c:	68bb      	ldr	r3, [r7, #8]
 801264e:	2205      	movs	r2, #5
 8012650:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8012652:	7efb      	ldrb	r3, [r7, #27]
 8012654:	2b20      	cmp	r3, #32
 8012656:	d801      	bhi.n	801265c <create_name+0x178>
 8012658:	2204      	movs	r2, #4
 801265a:	e000      	b.n	801265e <create_name+0x17a>
 801265c:	2200      	movs	r2, #0
 801265e:	68bb      	ldr	r3, [r7, #8]
 8012660:	330b      	adds	r3, #11
 8012662:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8012664:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8012666:	4618      	mov	r0, r3
 8012668:	3720      	adds	r7, #32
 801266a:	46bd      	mov	sp, r7
 801266c:	bd80      	pop	{r7, pc}
 801266e:	bf00      	nop
 8012670:	0801a2dc 	.word	0x0801a2dc
 8012674:	0801a28c 	.word	0x0801a28c

08012678 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8012678:	b580      	push	{r7, lr}
 801267a:	b086      	sub	sp, #24
 801267c:	af00      	add	r7, sp, #0
 801267e:	6078      	str	r0, [r7, #4]
 8012680:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8012686:	693b      	ldr	r3, [r7, #16]
 8012688:	681b      	ldr	r3, [r3, #0]
 801268a:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 801268c:	683b      	ldr	r3, [r7, #0]
 801268e:	781b      	ldrb	r3, [r3, #0]
 8012690:	2b2f      	cmp	r3, #47	; 0x2f
 8012692:	d00b      	beq.n	80126ac <follow_path+0x34>
 8012694:	683b      	ldr	r3, [r7, #0]
 8012696:	781b      	ldrb	r3, [r3, #0]
 8012698:	2b5c      	cmp	r3, #92	; 0x5c
 801269a:	d007      	beq.n	80126ac <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 801269c:	68fb      	ldr	r3, [r7, #12]
 801269e:	699a      	ldr	r2, [r3, #24]
 80126a0:	693b      	ldr	r3, [r7, #16]
 80126a2:	609a      	str	r2, [r3, #8]
 80126a4:	e00d      	b.n	80126c2 <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80126a6:	683b      	ldr	r3, [r7, #0]
 80126a8:	3301      	adds	r3, #1
 80126aa:	603b      	str	r3, [r7, #0]
 80126ac:	683b      	ldr	r3, [r7, #0]
 80126ae:	781b      	ldrb	r3, [r3, #0]
 80126b0:	2b2f      	cmp	r3, #47	; 0x2f
 80126b2:	d0f8      	beq.n	80126a6 <follow_path+0x2e>
 80126b4:	683b      	ldr	r3, [r7, #0]
 80126b6:	781b      	ldrb	r3, [r3, #0]
 80126b8:	2b5c      	cmp	r3, #92	; 0x5c
 80126ba:	d0f4      	beq.n	80126a6 <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 80126bc:	693b      	ldr	r3, [r7, #16]
 80126be:	2200      	movs	r2, #0
 80126c0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80126c2:	683b      	ldr	r3, [r7, #0]
 80126c4:	781b      	ldrb	r3, [r3, #0]
 80126c6:	2b1f      	cmp	r3, #31
 80126c8:	d80a      	bhi.n	80126e0 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	2280      	movs	r2, #128	; 0x80
 80126ce:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80126d2:	2100      	movs	r1, #0
 80126d4:	6878      	ldr	r0, [r7, #4]
 80126d6:	f7ff fc1d 	bl	8011f14 <dir_sdi>
 80126da:	4603      	mov	r3, r0
 80126dc:	75fb      	strb	r3, [r7, #23]
 80126de:	e05b      	b.n	8012798 <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80126e0:	463b      	mov	r3, r7
 80126e2:	4619      	mov	r1, r3
 80126e4:	6878      	ldr	r0, [r7, #4]
 80126e6:	f7ff fefd 	bl	80124e4 <create_name>
 80126ea:	4603      	mov	r3, r0
 80126ec:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80126ee:	7dfb      	ldrb	r3, [r7, #23]
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	d14c      	bne.n	801278e <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 80126f4:	6878      	ldr	r0, [r7, #4]
 80126f6:	f7ff fe4f 	bl	8012398 <dir_find>
 80126fa:	4603      	mov	r3, r0
 80126fc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012704:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8012706:	7dfb      	ldrb	r3, [r7, #23]
 8012708:	2b00      	cmp	r3, #0
 801270a:	d01b      	beq.n	8012744 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 801270c:	7dfb      	ldrb	r3, [r7, #23]
 801270e:	2b04      	cmp	r3, #4
 8012710:	d13f      	bne.n	8012792 <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 8012712:	7afb      	ldrb	r3, [r7, #11]
 8012714:	f003 0320 	and.w	r3, r3, #32
 8012718:	2b00      	cmp	r3, #0
 801271a:	d00b      	beq.n	8012734 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 801271c:	7afb      	ldrb	r3, [r7, #11]
 801271e:	f003 0304 	and.w	r3, r3, #4
 8012722:	2b00      	cmp	r3, #0
 8012724:	d031      	beq.n	801278a <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	2280      	movs	r2, #128	; 0x80
 801272a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 801272e:	2300      	movs	r3, #0
 8012730:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 8012732:	e02e      	b.n	8012792 <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8012734:	7afb      	ldrb	r3, [r7, #11]
 8012736:	f003 0304 	and.w	r3, r3, #4
 801273a:	2b00      	cmp	r3, #0
 801273c:	d129      	bne.n	8012792 <follow_path+0x11a>
 801273e:	2305      	movs	r3, #5
 8012740:	75fb      	strb	r3, [r7, #23]
				break;
 8012742:	e026      	b.n	8012792 <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012744:	7afb      	ldrb	r3, [r7, #11]
 8012746:	f003 0304 	and.w	r3, r3, #4
 801274a:	2b00      	cmp	r3, #0
 801274c:	d123      	bne.n	8012796 <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801274e:	693b      	ldr	r3, [r7, #16]
 8012750:	799b      	ldrb	r3, [r3, #6]
 8012752:	f003 0310 	and.w	r3, r3, #16
 8012756:	2b00      	cmp	r3, #0
 8012758:	d102      	bne.n	8012760 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 801275a:	2305      	movs	r3, #5
 801275c:	75fb      	strb	r3, [r7, #23]
 801275e:	e01b      	b.n	8012798 <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8012760:	68fb      	ldr	r3, [r7, #12]
 8012762:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	695b      	ldr	r3, [r3, #20]
 801276a:	68fa      	ldr	r2, [r7, #12]
 801276c:	8992      	ldrh	r2, [r2, #12]
 801276e:	fbb3 f0f2 	udiv	r0, r3, r2
 8012772:	fb02 f200 	mul.w	r2, r2, r0
 8012776:	1a9b      	subs	r3, r3, r2
 8012778:	440b      	add	r3, r1
 801277a:	4619      	mov	r1, r3
 801277c:	68f8      	ldr	r0, [r7, #12]
 801277e:	f7ff fd6f 	bl	8012260 <ld_clust>
 8012782:	4602      	mov	r2, r0
 8012784:	693b      	ldr	r3, [r7, #16]
 8012786:	609a      	str	r2, [r3, #8]
 8012788:	e7aa      	b.n	80126e0 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 801278a:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801278c:	e7a8      	b.n	80126e0 <follow_path+0x68>
			if (res != FR_OK) break;
 801278e:	bf00      	nop
 8012790:	e002      	b.n	8012798 <follow_path+0x120>
				break;
 8012792:	bf00      	nop
 8012794:	e000      	b.n	8012798 <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012796:	bf00      	nop
			}
		}
	}

	return res;
 8012798:	7dfb      	ldrb	r3, [r7, #23]
}
 801279a:	4618      	mov	r0, r3
 801279c:	3718      	adds	r7, #24
 801279e:	46bd      	mov	sp, r7
 80127a0:	bd80      	pop	{r7, pc}

080127a2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80127a2:	b480      	push	{r7}
 80127a4:	b087      	sub	sp, #28
 80127a6:	af00      	add	r7, sp, #0
 80127a8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80127aa:	f04f 33ff 	mov.w	r3, #4294967295
 80127ae:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	681b      	ldr	r3, [r3, #0]
 80127b4:	2b00      	cmp	r3, #0
 80127b6:	d031      	beq.n	801281c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	681b      	ldr	r3, [r3, #0]
 80127bc:	617b      	str	r3, [r7, #20]
 80127be:	e002      	b.n	80127c6 <get_ldnumber+0x24>
 80127c0:	697b      	ldr	r3, [r7, #20]
 80127c2:	3301      	adds	r3, #1
 80127c4:	617b      	str	r3, [r7, #20]
 80127c6:	697b      	ldr	r3, [r7, #20]
 80127c8:	781b      	ldrb	r3, [r3, #0]
 80127ca:	2b20      	cmp	r3, #32
 80127cc:	d903      	bls.n	80127d6 <get_ldnumber+0x34>
 80127ce:	697b      	ldr	r3, [r7, #20]
 80127d0:	781b      	ldrb	r3, [r3, #0]
 80127d2:	2b3a      	cmp	r3, #58	; 0x3a
 80127d4:	d1f4      	bne.n	80127c0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80127d6:	697b      	ldr	r3, [r7, #20]
 80127d8:	781b      	ldrb	r3, [r3, #0]
 80127da:	2b3a      	cmp	r3, #58	; 0x3a
 80127dc:	d11c      	bne.n	8012818 <get_ldnumber+0x76>
			tp = *path;
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	681b      	ldr	r3, [r3, #0]
 80127e2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80127e4:	68fb      	ldr	r3, [r7, #12]
 80127e6:	1c5a      	adds	r2, r3, #1
 80127e8:	60fa      	str	r2, [r7, #12]
 80127ea:	781b      	ldrb	r3, [r3, #0]
 80127ec:	3b30      	subs	r3, #48	; 0x30
 80127ee:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80127f0:	68bb      	ldr	r3, [r7, #8]
 80127f2:	2b09      	cmp	r3, #9
 80127f4:	d80e      	bhi.n	8012814 <get_ldnumber+0x72>
 80127f6:	68fa      	ldr	r2, [r7, #12]
 80127f8:	697b      	ldr	r3, [r7, #20]
 80127fa:	429a      	cmp	r2, r3
 80127fc:	d10a      	bne.n	8012814 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80127fe:	68bb      	ldr	r3, [r7, #8]
 8012800:	2b00      	cmp	r3, #0
 8012802:	d107      	bne.n	8012814 <get_ldnumber+0x72>
					vol = (int)i;
 8012804:	68bb      	ldr	r3, [r7, #8]
 8012806:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8012808:	697b      	ldr	r3, [r7, #20]
 801280a:	3301      	adds	r3, #1
 801280c:	617b      	str	r3, [r7, #20]
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	697a      	ldr	r2, [r7, #20]
 8012812:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8012814:	693b      	ldr	r3, [r7, #16]
 8012816:	e002      	b.n	801281e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8012818:	2300      	movs	r3, #0
 801281a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801281c:	693b      	ldr	r3, [r7, #16]
}
 801281e:	4618      	mov	r0, r3
 8012820:	371c      	adds	r7, #28
 8012822:	46bd      	mov	sp, r7
 8012824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012828:	4770      	bx	lr
	...

0801282c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 801282c:	b580      	push	{r7, lr}
 801282e:	b082      	sub	sp, #8
 8012830:	af00      	add	r7, sp, #0
 8012832:	6078      	str	r0, [r7, #4]
 8012834:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	2200      	movs	r2, #0
 801283a:	70da      	strb	r2, [r3, #3]
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	f04f 32ff 	mov.w	r2, #4294967295
 8012842:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8012844:	6839      	ldr	r1, [r7, #0]
 8012846:	6878      	ldr	r0, [r7, #4]
 8012848:	f7fe ff82 	bl	8011750 <move_window>
 801284c:	4603      	mov	r3, r0
 801284e:	2b00      	cmp	r3, #0
 8012850:	d001      	beq.n	8012856 <check_fs+0x2a>
 8012852:	2304      	movs	r3, #4
 8012854:	e038      	b.n	80128c8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	3338      	adds	r3, #56	; 0x38
 801285a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801285e:	4618      	mov	r0, r3
 8012860:	f7fe fcc6 	bl	80111f0 <ld_word>
 8012864:	4603      	mov	r3, r0
 8012866:	461a      	mov	r2, r3
 8012868:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801286c:	429a      	cmp	r2, r3
 801286e:	d001      	beq.n	8012874 <check_fs+0x48>
 8012870:	2303      	movs	r3, #3
 8012872:	e029      	b.n	80128c8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801287a:	2be9      	cmp	r3, #233	; 0xe9
 801287c:	d009      	beq.n	8012892 <check_fs+0x66>
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012884:	2beb      	cmp	r3, #235	; 0xeb
 8012886:	d11e      	bne.n	80128c6 <check_fs+0x9a>
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 801288e:	2b90      	cmp	r3, #144	; 0x90
 8012890:	d119      	bne.n	80128c6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	3338      	adds	r3, #56	; 0x38
 8012896:	3336      	adds	r3, #54	; 0x36
 8012898:	4618      	mov	r0, r3
 801289a:	f7fe fcc1 	bl	8011220 <ld_dword>
 801289e:	4603      	mov	r3, r0
 80128a0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80128a4:	4a0a      	ldr	r2, [pc, #40]	; (80128d0 <check_fs+0xa4>)
 80128a6:	4293      	cmp	r3, r2
 80128a8:	d101      	bne.n	80128ae <check_fs+0x82>
 80128aa:	2300      	movs	r3, #0
 80128ac:	e00c      	b.n	80128c8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	3338      	adds	r3, #56	; 0x38
 80128b2:	3352      	adds	r3, #82	; 0x52
 80128b4:	4618      	mov	r0, r3
 80128b6:	f7fe fcb3 	bl	8011220 <ld_dword>
 80128ba:	4603      	mov	r3, r0
 80128bc:	4a05      	ldr	r2, [pc, #20]	; (80128d4 <check_fs+0xa8>)
 80128be:	4293      	cmp	r3, r2
 80128c0:	d101      	bne.n	80128c6 <check_fs+0x9a>
 80128c2:	2300      	movs	r3, #0
 80128c4:	e000      	b.n	80128c8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80128c6:	2302      	movs	r3, #2
}
 80128c8:	4618      	mov	r0, r3
 80128ca:	3708      	adds	r7, #8
 80128cc:	46bd      	mov	sp, r7
 80128ce:	bd80      	pop	{r7, pc}
 80128d0:	00544146 	.word	0x00544146
 80128d4:	33544146 	.word	0x33544146

080128d8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80128d8:	b580      	push	{r7, lr}
 80128da:	b096      	sub	sp, #88	; 0x58
 80128dc:	af00      	add	r7, sp, #0
 80128de:	60f8      	str	r0, [r7, #12]
 80128e0:	60b9      	str	r1, [r7, #8]
 80128e2:	4613      	mov	r3, r2
 80128e4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80128e6:	68bb      	ldr	r3, [r7, #8]
 80128e8:	2200      	movs	r2, #0
 80128ea:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80128ec:	68f8      	ldr	r0, [r7, #12]
 80128ee:	f7ff ff58 	bl	80127a2 <get_ldnumber>
 80128f2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80128f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	da01      	bge.n	80128fe <find_volume+0x26>
 80128fa:	230b      	movs	r3, #11
 80128fc:	e268      	b.n	8012dd0 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80128fe:	4ab0      	ldr	r2, [pc, #704]	; (8012bc0 <find_volume+0x2e8>)
 8012900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012902:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012906:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8012908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801290a:	2b00      	cmp	r3, #0
 801290c:	d101      	bne.n	8012912 <find_volume+0x3a>
 801290e:	230c      	movs	r3, #12
 8012910:	e25e      	b.n	8012dd0 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8012912:	68bb      	ldr	r3, [r7, #8]
 8012914:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012916:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8012918:	79fb      	ldrb	r3, [r7, #7]
 801291a:	f023 0301 	bic.w	r3, r3, #1
 801291e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8012920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012922:	781b      	ldrb	r3, [r3, #0]
 8012924:	2b00      	cmp	r3, #0
 8012926:	d01a      	beq.n	801295e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8012928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801292a:	785b      	ldrb	r3, [r3, #1]
 801292c:	4618      	mov	r0, r3
 801292e:	f7fe fbc1 	bl	80110b4 <disk_status>
 8012932:	4603      	mov	r3, r0
 8012934:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8012938:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801293c:	f003 0301 	and.w	r3, r3, #1
 8012940:	2b00      	cmp	r3, #0
 8012942:	d10c      	bne.n	801295e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8012944:	79fb      	ldrb	r3, [r7, #7]
 8012946:	2b00      	cmp	r3, #0
 8012948:	d007      	beq.n	801295a <find_volume+0x82>
 801294a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801294e:	f003 0304 	and.w	r3, r3, #4
 8012952:	2b00      	cmp	r3, #0
 8012954:	d001      	beq.n	801295a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8012956:	230a      	movs	r3, #10
 8012958:	e23a      	b.n	8012dd0 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 801295a:	2300      	movs	r3, #0
 801295c:	e238      	b.n	8012dd0 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801295e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012960:	2200      	movs	r2, #0
 8012962:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8012964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012966:	b2da      	uxtb	r2, r3
 8012968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801296a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801296c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801296e:	785b      	ldrb	r3, [r3, #1]
 8012970:	4618      	mov	r0, r3
 8012972:	f7fe fbb9 	bl	80110e8 <disk_initialize>
 8012976:	4603      	mov	r3, r0
 8012978:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801297c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012980:	f003 0301 	and.w	r3, r3, #1
 8012984:	2b00      	cmp	r3, #0
 8012986:	d001      	beq.n	801298c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8012988:	2303      	movs	r3, #3
 801298a:	e221      	b.n	8012dd0 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 801298c:	79fb      	ldrb	r3, [r7, #7]
 801298e:	2b00      	cmp	r3, #0
 8012990:	d007      	beq.n	80129a2 <find_volume+0xca>
 8012992:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012996:	f003 0304 	and.w	r3, r3, #4
 801299a:	2b00      	cmp	r3, #0
 801299c:	d001      	beq.n	80129a2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 801299e:	230a      	movs	r3, #10
 80129a0:	e216      	b.n	8012dd0 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80129a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129a4:	7858      	ldrb	r0, [r3, #1]
 80129a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129a8:	330c      	adds	r3, #12
 80129aa:	461a      	mov	r2, r3
 80129ac:	2102      	movs	r1, #2
 80129ae:	f7fe fc01 	bl	80111b4 <disk_ioctl>
 80129b2:	4603      	mov	r3, r0
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	d001      	beq.n	80129bc <find_volume+0xe4>
 80129b8:	2301      	movs	r3, #1
 80129ba:	e209      	b.n	8012dd0 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80129bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129be:	899b      	ldrh	r3, [r3, #12]
 80129c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80129c4:	d80d      	bhi.n	80129e2 <find_volume+0x10a>
 80129c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129c8:	899b      	ldrh	r3, [r3, #12]
 80129ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80129ce:	d308      	bcc.n	80129e2 <find_volume+0x10a>
 80129d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129d2:	899b      	ldrh	r3, [r3, #12]
 80129d4:	461a      	mov	r2, r3
 80129d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129d8:	899b      	ldrh	r3, [r3, #12]
 80129da:	3b01      	subs	r3, #1
 80129dc:	4013      	ands	r3, r2
 80129de:	2b00      	cmp	r3, #0
 80129e0:	d001      	beq.n	80129e6 <find_volume+0x10e>
 80129e2:	2301      	movs	r3, #1
 80129e4:	e1f4      	b.n	8012dd0 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80129e6:	2300      	movs	r3, #0
 80129e8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80129ea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80129ec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80129ee:	f7ff ff1d 	bl	801282c <check_fs>
 80129f2:	4603      	mov	r3, r0
 80129f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80129f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80129fc:	2b02      	cmp	r3, #2
 80129fe:	d14b      	bne.n	8012a98 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012a00:	2300      	movs	r3, #0
 8012a02:	643b      	str	r3, [r7, #64]	; 0x40
 8012a04:	e01f      	b.n	8012a46 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8012a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a08:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8012a0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012a0e:	011b      	lsls	r3, r3, #4
 8012a10:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8012a14:	4413      	add	r3, r2
 8012a16:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8012a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a1a:	3304      	adds	r3, #4
 8012a1c:	781b      	ldrb	r3, [r3, #0]
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	d006      	beq.n	8012a30 <find_volume+0x158>
 8012a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a24:	3308      	adds	r3, #8
 8012a26:	4618      	mov	r0, r3
 8012a28:	f7fe fbfa 	bl	8011220 <ld_dword>
 8012a2c:	4602      	mov	r2, r0
 8012a2e:	e000      	b.n	8012a32 <find_volume+0x15a>
 8012a30:	2200      	movs	r2, #0
 8012a32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012a34:	009b      	lsls	r3, r3, #2
 8012a36:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8012a3a:	440b      	add	r3, r1
 8012a3c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012a40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012a42:	3301      	adds	r3, #1
 8012a44:	643b      	str	r3, [r7, #64]	; 0x40
 8012a46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012a48:	2b03      	cmp	r3, #3
 8012a4a:	d9dc      	bls.n	8012a06 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8012a4c:	2300      	movs	r3, #0
 8012a4e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8012a50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	d002      	beq.n	8012a5c <find_volume+0x184>
 8012a56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012a58:	3b01      	subs	r3, #1
 8012a5a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8012a5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012a5e:	009b      	lsls	r3, r3, #2
 8012a60:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8012a64:	4413      	add	r3, r2
 8012a66:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8012a6a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8012a6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a6e:	2b00      	cmp	r3, #0
 8012a70:	d005      	beq.n	8012a7e <find_volume+0x1a6>
 8012a72:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012a74:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012a76:	f7ff fed9 	bl	801282c <check_fs>
 8012a7a:	4603      	mov	r3, r0
 8012a7c:	e000      	b.n	8012a80 <find_volume+0x1a8>
 8012a7e:	2303      	movs	r3, #3
 8012a80:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8012a84:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012a88:	2b01      	cmp	r3, #1
 8012a8a:	d905      	bls.n	8012a98 <find_volume+0x1c0>
 8012a8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012a8e:	3301      	adds	r3, #1
 8012a90:	643b      	str	r3, [r7, #64]	; 0x40
 8012a92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012a94:	2b03      	cmp	r3, #3
 8012a96:	d9e1      	bls.n	8012a5c <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8012a98:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012a9c:	2b04      	cmp	r3, #4
 8012a9e:	d101      	bne.n	8012aa4 <find_volume+0x1cc>
 8012aa0:	2301      	movs	r3, #1
 8012aa2:	e195      	b.n	8012dd0 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8012aa4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012aa8:	2b01      	cmp	r3, #1
 8012aaa:	d901      	bls.n	8012ab0 <find_volume+0x1d8>
 8012aac:	230d      	movs	r3, #13
 8012aae:	e18f      	b.n	8012dd0 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8012ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ab2:	3338      	adds	r3, #56	; 0x38
 8012ab4:	330b      	adds	r3, #11
 8012ab6:	4618      	mov	r0, r3
 8012ab8:	f7fe fb9a 	bl	80111f0 <ld_word>
 8012abc:	4603      	mov	r3, r0
 8012abe:	461a      	mov	r2, r3
 8012ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ac2:	899b      	ldrh	r3, [r3, #12]
 8012ac4:	429a      	cmp	r2, r3
 8012ac6:	d001      	beq.n	8012acc <find_volume+0x1f4>
 8012ac8:	230d      	movs	r3, #13
 8012aca:	e181      	b.n	8012dd0 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8012acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ace:	3338      	adds	r3, #56	; 0x38
 8012ad0:	3316      	adds	r3, #22
 8012ad2:	4618      	mov	r0, r3
 8012ad4:	f7fe fb8c 	bl	80111f0 <ld_word>
 8012ad8:	4603      	mov	r3, r0
 8012ada:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8012adc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	d106      	bne.n	8012af0 <find_volume+0x218>
 8012ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ae4:	3338      	adds	r3, #56	; 0x38
 8012ae6:	3324      	adds	r3, #36	; 0x24
 8012ae8:	4618      	mov	r0, r3
 8012aea:	f7fe fb99 	bl	8011220 <ld_dword>
 8012aee:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8012af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012af2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012af4:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8012af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012af8:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8012afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012afe:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8012b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b02:	789b      	ldrb	r3, [r3, #2]
 8012b04:	2b01      	cmp	r3, #1
 8012b06:	d005      	beq.n	8012b14 <find_volume+0x23c>
 8012b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b0a:	789b      	ldrb	r3, [r3, #2]
 8012b0c:	2b02      	cmp	r3, #2
 8012b0e:	d001      	beq.n	8012b14 <find_volume+0x23c>
 8012b10:	230d      	movs	r3, #13
 8012b12:	e15d      	b.n	8012dd0 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8012b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b16:	789b      	ldrb	r3, [r3, #2]
 8012b18:	461a      	mov	r2, r3
 8012b1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012b1c:	fb02 f303 	mul.w	r3, r2, r3
 8012b20:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8012b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012b28:	b29a      	uxth	r2, r3
 8012b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b2c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8012b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b30:	895b      	ldrh	r3, [r3, #10]
 8012b32:	2b00      	cmp	r3, #0
 8012b34:	d008      	beq.n	8012b48 <find_volume+0x270>
 8012b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b38:	895b      	ldrh	r3, [r3, #10]
 8012b3a:	461a      	mov	r2, r3
 8012b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b3e:	895b      	ldrh	r3, [r3, #10]
 8012b40:	3b01      	subs	r3, #1
 8012b42:	4013      	ands	r3, r2
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	d001      	beq.n	8012b4c <find_volume+0x274>
 8012b48:	230d      	movs	r3, #13
 8012b4a:	e141      	b.n	8012dd0 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8012b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b4e:	3338      	adds	r3, #56	; 0x38
 8012b50:	3311      	adds	r3, #17
 8012b52:	4618      	mov	r0, r3
 8012b54:	f7fe fb4c 	bl	80111f0 <ld_word>
 8012b58:	4603      	mov	r3, r0
 8012b5a:	461a      	mov	r2, r3
 8012b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b5e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8012b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b62:	891b      	ldrh	r3, [r3, #8]
 8012b64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012b66:	8992      	ldrh	r2, [r2, #12]
 8012b68:	0952      	lsrs	r2, r2, #5
 8012b6a:	b292      	uxth	r2, r2
 8012b6c:	fbb3 f1f2 	udiv	r1, r3, r2
 8012b70:	fb02 f201 	mul.w	r2, r2, r1
 8012b74:	1a9b      	subs	r3, r3, r2
 8012b76:	b29b      	uxth	r3, r3
 8012b78:	2b00      	cmp	r3, #0
 8012b7a:	d001      	beq.n	8012b80 <find_volume+0x2a8>
 8012b7c:	230d      	movs	r3, #13
 8012b7e:	e127      	b.n	8012dd0 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8012b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b82:	3338      	adds	r3, #56	; 0x38
 8012b84:	3313      	adds	r3, #19
 8012b86:	4618      	mov	r0, r3
 8012b88:	f7fe fb32 	bl	80111f0 <ld_word>
 8012b8c:	4603      	mov	r3, r0
 8012b8e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8012b90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012b92:	2b00      	cmp	r3, #0
 8012b94:	d106      	bne.n	8012ba4 <find_volume+0x2cc>
 8012b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b98:	3338      	adds	r3, #56	; 0x38
 8012b9a:	3320      	adds	r3, #32
 8012b9c:	4618      	mov	r0, r3
 8012b9e:	f7fe fb3f 	bl	8011220 <ld_dword>
 8012ba2:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8012ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ba6:	3338      	adds	r3, #56	; 0x38
 8012ba8:	330e      	adds	r3, #14
 8012baa:	4618      	mov	r0, r3
 8012bac:	f7fe fb20 	bl	80111f0 <ld_word>
 8012bb0:	4603      	mov	r3, r0
 8012bb2:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8012bb4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	d104      	bne.n	8012bc4 <find_volume+0x2ec>
 8012bba:	230d      	movs	r3, #13
 8012bbc:	e108      	b.n	8012dd0 <find_volume+0x4f8>
 8012bbe:	bf00      	nop
 8012bc0:	2003d4e0 	.word	0x2003d4e0

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8012bc4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012bc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012bc8:	4413      	add	r3, r2
 8012bca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012bcc:	8911      	ldrh	r1, [r2, #8]
 8012bce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012bd0:	8992      	ldrh	r2, [r2, #12]
 8012bd2:	0952      	lsrs	r2, r2, #5
 8012bd4:	b292      	uxth	r2, r2
 8012bd6:	fbb1 f2f2 	udiv	r2, r1, r2
 8012bda:	b292      	uxth	r2, r2
 8012bdc:	4413      	add	r3, r2
 8012bde:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8012be0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012be4:	429a      	cmp	r2, r3
 8012be6:	d201      	bcs.n	8012bec <find_volume+0x314>
 8012be8:	230d      	movs	r3, #13
 8012bea:	e0f1      	b.n	8012dd0 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8012bec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bf0:	1ad3      	subs	r3, r2, r3
 8012bf2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012bf4:	8952      	ldrh	r2, [r2, #10]
 8012bf6:	fbb3 f3f2 	udiv	r3, r3, r2
 8012bfa:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8012bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bfe:	2b00      	cmp	r3, #0
 8012c00:	d101      	bne.n	8012c06 <find_volume+0x32e>
 8012c02:	230d      	movs	r3, #13
 8012c04:	e0e4      	b.n	8012dd0 <find_volume+0x4f8>
		fmt = FS_FAT32;
 8012c06:	2303      	movs	r3, #3
 8012c08:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8012c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c0e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8012c12:	4293      	cmp	r3, r2
 8012c14:	d802      	bhi.n	8012c1c <find_volume+0x344>
 8012c16:	2302      	movs	r3, #2
 8012c18:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8012c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c1e:	f640 72f5 	movw	r2, #4085	; 0xff5
 8012c22:	4293      	cmp	r3, r2
 8012c24:	d802      	bhi.n	8012c2c <find_volume+0x354>
 8012c26:	2301      	movs	r3, #1
 8012c28:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8012c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c2e:	1c9a      	adds	r2, r3, #2
 8012c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c32:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8012c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c36:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012c38:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8012c3a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012c3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012c3e:	441a      	add	r2, r3
 8012c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c42:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8012c44:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c48:	441a      	add	r2, r3
 8012c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c4c:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8012c4e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012c52:	2b03      	cmp	r3, #3
 8012c54:	d11e      	bne.n	8012c94 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8012c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c58:	3338      	adds	r3, #56	; 0x38
 8012c5a:	332a      	adds	r3, #42	; 0x2a
 8012c5c:	4618      	mov	r0, r3
 8012c5e:	f7fe fac7 	bl	80111f0 <ld_word>
 8012c62:	4603      	mov	r3, r0
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	d001      	beq.n	8012c6c <find_volume+0x394>
 8012c68:	230d      	movs	r3, #13
 8012c6a:	e0b1      	b.n	8012dd0 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8012c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c6e:	891b      	ldrh	r3, [r3, #8]
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	d001      	beq.n	8012c78 <find_volume+0x3a0>
 8012c74:	230d      	movs	r3, #13
 8012c76:	e0ab      	b.n	8012dd0 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8012c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c7a:	3338      	adds	r3, #56	; 0x38
 8012c7c:	332c      	adds	r3, #44	; 0x2c
 8012c7e:	4618      	mov	r0, r3
 8012c80:	f7fe face 	bl	8011220 <ld_dword>
 8012c84:	4602      	mov	r2, r0
 8012c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c88:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8012c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c8c:	69db      	ldr	r3, [r3, #28]
 8012c8e:	009b      	lsls	r3, r3, #2
 8012c90:	647b      	str	r3, [r7, #68]	; 0x44
 8012c92:	e01f      	b.n	8012cd4 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8012c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c96:	891b      	ldrh	r3, [r3, #8]
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	d101      	bne.n	8012ca0 <find_volume+0x3c8>
 8012c9c:	230d      	movs	r3, #13
 8012c9e:	e097      	b.n	8012dd0 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8012ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ca2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012ca4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012ca6:	441a      	add	r2, r3
 8012ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012caa:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8012cac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012cb0:	2b02      	cmp	r3, #2
 8012cb2:	d103      	bne.n	8012cbc <find_volume+0x3e4>
 8012cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cb6:	69db      	ldr	r3, [r3, #28]
 8012cb8:	005b      	lsls	r3, r3, #1
 8012cba:	e00a      	b.n	8012cd2 <find_volume+0x3fa>
 8012cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cbe:	69da      	ldr	r2, [r3, #28]
 8012cc0:	4613      	mov	r3, r2
 8012cc2:	005b      	lsls	r3, r3, #1
 8012cc4:	4413      	add	r3, r2
 8012cc6:	085a      	lsrs	r2, r3, #1
 8012cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cca:	69db      	ldr	r3, [r3, #28]
 8012ccc:	f003 0301 	and.w	r3, r3, #1
 8012cd0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8012cd2:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8012cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cd6:	6a1a      	ldr	r2, [r3, #32]
 8012cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cda:	899b      	ldrh	r3, [r3, #12]
 8012cdc:	4619      	mov	r1, r3
 8012cde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012ce0:	440b      	add	r3, r1
 8012ce2:	3b01      	subs	r3, #1
 8012ce4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012ce6:	8989      	ldrh	r1, [r1, #12]
 8012ce8:	fbb3 f3f1 	udiv	r3, r3, r1
 8012cec:	429a      	cmp	r2, r3
 8012cee:	d201      	bcs.n	8012cf4 <find_volume+0x41c>
 8012cf0:	230d      	movs	r3, #13
 8012cf2:	e06d      	b.n	8012dd0 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8012cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cf6:	f04f 32ff 	mov.w	r2, #4294967295
 8012cfa:	615a      	str	r2, [r3, #20]
 8012cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cfe:	695a      	ldr	r2, [r3, #20]
 8012d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d02:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8012d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d06:	2280      	movs	r2, #128	; 0x80
 8012d08:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8012d0a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012d0e:	2b03      	cmp	r3, #3
 8012d10:	d149      	bne.n	8012da6 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8012d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d14:	3338      	adds	r3, #56	; 0x38
 8012d16:	3330      	adds	r3, #48	; 0x30
 8012d18:	4618      	mov	r0, r3
 8012d1a:	f7fe fa69 	bl	80111f0 <ld_word>
 8012d1e:	4603      	mov	r3, r0
 8012d20:	2b01      	cmp	r3, #1
 8012d22:	d140      	bne.n	8012da6 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8012d24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012d26:	3301      	adds	r3, #1
 8012d28:	4619      	mov	r1, r3
 8012d2a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012d2c:	f7fe fd10 	bl	8011750 <move_window>
 8012d30:	4603      	mov	r3, r0
 8012d32:	2b00      	cmp	r3, #0
 8012d34:	d137      	bne.n	8012da6 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8012d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d38:	2200      	movs	r2, #0
 8012d3a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8012d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d3e:	3338      	adds	r3, #56	; 0x38
 8012d40:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012d44:	4618      	mov	r0, r3
 8012d46:	f7fe fa53 	bl	80111f0 <ld_word>
 8012d4a:	4603      	mov	r3, r0
 8012d4c:	461a      	mov	r2, r3
 8012d4e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8012d52:	429a      	cmp	r2, r3
 8012d54:	d127      	bne.n	8012da6 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8012d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d58:	3338      	adds	r3, #56	; 0x38
 8012d5a:	4618      	mov	r0, r3
 8012d5c:	f7fe fa60 	bl	8011220 <ld_dword>
 8012d60:	4603      	mov	r3, r0
 8012d62:	4a1d      	ldr	r2, [pc, #116]	; (8012dd8 <find_volume+0x500>)
 8012d64:	4293      	cmp	r3, r2
 8012d66:	d11e      	bne.n	8012da6 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8012d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d6a:	3338      	adds	r3, #56	; 0x38
 8012d6c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8012d70:	4618      	mov	r0, r3
 8012d72:	f7fe fa55 	bl	8011220 <ld_dword>
 8012d76:	4603      	mov	r3, r0
 8012d78:	4a18      	ldr	r2, [pc, #96]	; (8012ddc <find_volume+0x504>)
 8012d7a:	4293      	cmp	r3, r2
 8012d7c:	d113      	bne.n	8012da6 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8012d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d80:	3338      	adds	r3, #56	; 0x38
 8012d82:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8012d86:	4618      	mov	r0, r3
 8012d88:	f7fe fa4a 	bl	8011220 <ld_dword>
 8012d8c:	4602      	mov	r2, r0
 8012d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d90:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8012d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d94:	3338      	adds	r3, #56	; 0x38
 8012d96:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8012d9a:	4618      	mov	r0, r3
 8012d9c:	f7fe fa40 	bl	8011220 <ld_dword>
 8012da0:	4602      	mov	r2, r0
 8012da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012da4:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8012da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012da8:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8012dac:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8012dae:	4b0c      	ldr	r3, [pc, #48]	; (8012de0 <find_volume+0x508>)
 8012db0:	881b      	ldrh	r3, [r3, #0]
 8012db2:	3301      	adds	r3, #1
 8012db4:	b29a      	uxth	r2, r3
 8012db6:	4b0a      	ldr	r3, [pc, #40]	; (8012de0 <find_volume+0x508>)
 8012db8:	801a      	strh	r2, [r3, #0]
 8012dba:	4b09      	ldr	r3, [pc, #36]	; (8012de0 <find_volume+0x508>)
 8012dbc:	881a      	ldrh	r2, [r3, #0]
 8012dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dc0:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 8012dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dc4:	2200      	movs	r2, #0
 8012dc6:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8012dc8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012dca:	f7fe fc59 	bl	8011680 <clear_lock>
#endif
	return FR_OK;
 8012dce:	2300      	movs	r3, #0
}
 8012dd0:	4618      	mov	r0, r3
 8012dd2:	3758      	adds	r7, #88	; 0x58
 8012dd4:	46bd      	mov	sp, r7
 8012dd6:	bd80      	pop	{r7, pc}
 8012dd8:	41615252 	.word	0x41615252
 8012ddc:	61417272 	.word	0x61417272
 8012de0:	2003d4e4 	.word	0x2003d4e4

08012de4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8012de4:	b580      	push	{r7, lr}
 8012de6:	b084      	sub	sp, #16
 8012de8:	af00      	add	r7, sp, #0
 8012dea:	6078      	str	r0, [r7, #4]
 8012dec:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8012dee:	2309      	movs	r3, #9
 8012df0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	d01c      	beq.n	8012e32 <validate+0x4e>
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	681b      	ldr	r3, [r3, #0]
 8012dfc:	2b00      	cmp	r3, #0
 8012dfe:	d018      	beq.n	8012e32 <validate+0x4e>
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	681b      	ldr	r3, [r3, #0]
 8012e04:	781b      	ldrb	r3, [r3, #0]
 8012e06:	2b00      	cmp	r3, #0
 8012e08:	d013      	beq.n	8012e32 <validate+0x4e>
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	889a      	ldrh	r2, [r3, #4]
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	681b      	ldr	r3, [r3, #0]
 8012e12:	88db      	ldrh	r3, [r3, #6]
 8012e14:	429a      	cmp	r2, r3
 8012e16:	d10c      	bne.n	8012e32 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	681b      	ldr	r3, [r3, #0]
 8012e1c:	785b      	ldrb	r3, [r3, #1]
 8012e1e:	4618      	mov	r0, r3
 8012e20:	f7fe f948 	bl	80110b4 <disk_status>
 8012e24:	4603      	mov	r3, r0
 8012e26:	f003 0301 	and.w	r3, r3, #1
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	d101      	bne.n	8012e32 <validate+0x4e>
			res = FR_OK;
 8012e2e:	2300      	movs	r3, #0
 8012e30:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8012e32:	7bfb      	ldrb	r3, [r7, #15]
 8012e34:	2b00      	cmp	r3, #0
 8012e36:	d102      	bne.n	8012e3e <validate+0x5a>
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	681b      	ldr	r3, [r3, #0]
 8012e3c:	e000      	b.n	8012e40 <validate+0x5c>
 8012e3e:	2300      	movs	r3, #0
 8012e40:	683a      	ldr	r2, [r7, #0]
 8012e42:	6013      	str	r3, [r2, #0]
	return res;
 8012e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8012e46:	4618      	mov	r0, r3
 8012e48:	3710      	adds	r7, #16
 8012e4a:	46bd      	mov	sp, r7
 8012e4c:	bd80      	pop	{r7, pc}
	...

08012e50 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8012e50:	b580      	push	{r7, lr}
 8012e52:	b088      	sub	sp, #32
 8012e54:	af00      	add	r7, sp, #0
 8012e56:	60f8      	str	r0, [r7, #12]
 8012e58:	60b9      	str	r1, [r7, #8]
 8012e5a:	4613      	mov	r3, r2
 8012e5c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8012e5e:	68bb      	ldr	r3, [r7, #8]
 8012e60:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8012e62:	f107 0310 	add.w	r3, r7, #16
 8012e66:	4618      	mov	r0, r3
 8012e68:	f7ff fc9b 	bl	80127a2 <get_ldnumber>
 8012e6c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8012e6e:	69fb      	ldr	r3, [r7, #28]
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	da01      	bge.n	8012e78 <f_mount+0x28>
 8012e74:	230b      	movs	r3, #11
 8012e76:	e02b      	b.n	8012ed0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8012e78:	4a17      	ldr	r2, [pc, #92]	; (8012ed8 <f_mount+0x88>)
 8012e7a:	69fb      	ldr	r3, [r7, #28]
 8012e7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012e80:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8012e82:	69bb      	ldr	r3, [r7, #24]
 8012e84:	2b00      	cmp	r3, #0
 8012e86:	d005      	beq.n	8012e94 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8012e88:	69b8      	ldr	r0, [r7, #24]
 8012e8a:	f7fe fbf9 	bl	8011680 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8012e8e:	69bb      	ldr	r3, [r7, #24]
 8012e90:	2200      	movs	r2, #0
 8012e92:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8012e94:	68fb      	ldr	r3, [r7, #12]
 8012e96:	2b00      	cmp	r3, #0
 8012e98:	d002      	beq.n	8012ea0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8012e9a:	68fb      	ldr	r3, [r7, #12]
 8012e9c:	2200      	movs	r2, #0
 8012e9e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8012ea0:	68fa      	ldr	r2, [r7, #12]
 8012ea2:	490d      	ldr	r1, [pc, #52]	; (8012ed8 <f_mount+0x88>)
 8012ea4:	69fb      	ldr	r3, [r7, #28]
 8012ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8012eaa:	68fb      	ldr	r3, [r7, #12]
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	d002      	beq.n	8012eb6 <f_mount+0x66>
 8012eb0:	79fb      	ldrb	r3, [r7, #7]
 8012eb2:	2b01      	cmp	r3, #1
 8012eb4:	d001      	beq.n	8012eba <f_mount+0x6a>
 8012eb6:	2300      	movs	r3, #0
 8012eb8:	e00a      	b.n	8012ed0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8012eba:	f107 010c 	add.w	r1, r7, #12
 8012ebe:	f107 0308 	add.w	r3, r7, #8
 8012ec2:	2200      	movs	r2, #0
 8012ec4:	4618      	mov	r0, r3
 8012ec6:	f7ff fd07 	bl	80128d8 <find_volume>
 8012eca:	4603      	mov	r3, r0
 8012ecc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8012ece:	7dfb      	ldrb	r3, [r7, #23]
}
 8012ed0:	4618      	mov	r0, r3
 8012ed2:	3720      	adds	r7, #32
 8012ed4:	46bd      	mov	sp, r7
 8012ed6:	bd80      	pop	{r7, pc}
 8012ed8:	2003d4e0 	.word	0x2003d4e0

08012edc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8012edc:	b580      	push	{r7, lr}
 8012ede:	b098      	sub	sp, #96	; 0x60
 8012ee0:	af00      	add	r7, sp, #0
 8012ee2:	60f8      	str	r0, [r7, #12]
 8012ee4:	60b9      	str	r1, [r7, #8]
 8012ee6:	4613      	mov	r3, r2
 8012ee8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8012eea:	68fb      	ldr	r3, [r7, #12]
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	d101      	bne.n	8012ef4 <f_open+0x18>
 8012ef0:	2309      	movs	r3, #9
 8012ef2:	e1ba      	b.n	801326a <f_open+0x38e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8012ef4:	79fb      	ldrb	r3, [r7, #7]
 8012ef6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012efa:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8012efc:	79fa      	ldrb	r2, [r7, #7]
 8012efe:	f107 0110 	add.w	r1, r7, #16
 8012f02:	f107 0308 	add.w	r3, r7, #8
 8012f06:	4618      	mov	r0, r3
 8012f08:	f7ff fce6 	bl	80128d8 <find_volume>
 8012f0c:	4603      	mov	r3, r0
 8012f0e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8012f12:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012f16:	2b00      	cmp	r3, #0
 8012f18:	f040 819e 	bne.w	8013258 <f_open+0x37c>
		dj.obj.fs = fs;
 8012f1c:	693b      	ldr	r3, [r7, #16]
 8012f1e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8012f20:	68ba      	ldr	r2, [r7, #8]
 8012f22:	f107 0314 	add.w	r3, r7, #20
 8012f26:	4611      	mov	r1, r2
 8012f28:	4618      	mov	r0, r3
 8012f2a:	f7ff fba5 	bl	8012678 <follow_path>
 8012f2e:	4603      	mov	r3, r0
 8012f30:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8012f34:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012f38:	2b00      	cmp	r3, #0
 8012f3a:	d11a      	bne.n	8012f72 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8012f3c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8012f40:	b25b      	sxtb	r3, r3
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	da03      	bge.n	8012f4e <f_open+0x72>
				res = FR_INVALID_NAME;
 8012f46:	2306      	movs	r3, #6
 8012f48:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012f4c:	e011      	b.n	8012f72 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012f4e:	79fb      	ldrb	r3, [r7, #7]
 8012f50:	f023 0301 	bic.w	r3, r3, #1
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	bf14      	ite	ne
 8012f58:	2301      	movne	r3, #1
 8012f5a:	2300      	moveq	r3, #0
 8012f5c:	b2db      	uxtb	r3, r3
 8012f5e:	461a      	mov	r2, r3
 8012f60:	f107 0314 	add.w	r3, r7, #20
 8012f64:	4611      	mov	r1, r2
 8012f66:	4618      	mov	r0, r3
 8012f68:	f7fe fa42 	bl	80113f0 <chk_lock>
 8012f6c:	4603      	mov	r3, r0
 8012f6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8012f72:	79fb      	ldrb	r3, [r7, #7]
 8012f74:	f003 031c 	and.w	r3, r3, #28
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	d07e      	beq.n	801307a <f_open+0x19e>
			if (res != FR_OK) {					/* No file, create new */
 8012f7c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012f80:	2b00      	cmp	r3, #0
 8012f82:	d017      	beq.n	8012fb4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8012f84:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012f88:	2b04      	cmp	r3, #4
 8012f8a:	d10e      	bne.n	8012faa <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8012f8c:	f7fe fa8c 	bl	80114a8 <enq_lock>
 8012f90:	4603      	mov	r3, r0
 8012f92:	2b00      	cmp	r3, #0
 8012f94:	d006      	beq.n	8012fa4 <f_open+0xc8>
 8012f96:	f107 0314 	add.w	r3, r7, #20
 8012f9a:	4618      	mov	r0, r3
 8012f9c:	f7ff fa51 	bl	8012442 <dir_register>
 8012fa0:	4603      	mov	r3, r0
 8012fa2:	e000      	b.n	8012fa6 <f_open+0xca>
 8012fa4:	2312      	movs	r3, #18
 8012fa6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8012faa:	79fb      	ldrb	r3, [r7, #7]
 8012fac:	f043 0308 	orr.w	r3, r3, #8
 8012fb0:	71fb      	strb	r3, [r7, #7]
 8012fb2:	e010      	b.n	8012fd6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8012fb4:	7ebb      	ldrb	r3, [r7, #26]
 8012fb6:	f003 0311 	and.w	r3, r3, #17
 8012fba:	2b00      	cmp	r3, #0
 8012fbc:	d003      	beq.n	8012fc6 <f_open+0xea>
					res = FR_DENIED;
 8012fbe:	2307      	movs	r3, #7
 8012fc0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012fc4:	e007      	b.n	8012fd6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8012fc6:	79fb      	ldrb	r3, [r7, #7]
 8012fc8:	f003 0304 	and.w	r3, r3, #4
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	d002      	beq.n	8012fd6 <f_open+0xfa>
 8012fd0:	2308      	movs	r3, #8
 8012fd2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8012fd6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012fda:	2b00      	cmp	r3, #0
 8012fdc:	d167      	bne.n	80130ae <f_open+0x1d2>
 8012fde:	79fb      	ldrb	r3, [r7, #7]
 8012fe0:	f003 0308 	and.w	r3, r3, #8
 8012fe4:	2b00      	cmp	r3, #0
 8012fe6:	d062      	beq.n	80130ae <f_open+0x1d2>
				dw = GET_FATTIME();
 8012fe8:	4ba2      	ldr	r3, [pc, #648]	; (8013274 <f_open+0x398>)
 8012fea:	653b      	str	r3, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8012fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012fee:	330e      	adds	r3, #14
 8012ff0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012ff2:	4618      	mov	r0, r3
 8012ff4:	f7fe f952 	bl	801129c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8012ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012ffa:	3316      	adds	r3, #22
 8012ffc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012ffe:	4618      	mov	r0, r3
 8013000:	f7fe f94c 	bl	801129c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8013004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013006:	330b      	adds	r3, #11
 8013008:	2220      	movs	r2, #32
 801300a:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801300c:	693b      	ldr	r3, [r7, #16]
 801300e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013010:	4611      	mov	r1, r2
 8013012:	4618      	mov	r0, r3
 8013014:	f7ff f924 	bl	8012260 <ld_clust>
 8013018:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801301a:	693b      	ldr	r3, [r7, #16]
 801301c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801301e:	2200      	movs	r2, #0
 8013020:	4618      	mov	r0, r3
 8013022:	f7ff f93c 	bl	801229e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8013026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013028:	331c      	adds	r3, #28
 801302a:	2100      	movs	r1, #0
 801302c:	4618      	mov	r0, r3
 801302e:	f7fe f935 	bl	801129c <st_dword>
					fs->wflag = 1;
 8013032:	693b      	ldr	r3, [r7, #16]
 8013034:	2201      	movs	r2, #1
 8013036:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8013038:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801303a:	2b00      	cmp	r3, #0
 801303c:	d037      	beq.n	80130ae <f_open+0x1d2>
						dw = fs->winsect;
 801303e:	693b      	ldr	r3, [r7, #16]
 8013040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013042:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8013044:	f107 0314 	add.w	r3, r7, #20
 8013048:	2200      	movs	r2, #0
 801304a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801304c:	4618      	mov	r0, r3
 801304e:	f7fe fe2c 	bl	8011caa <remove_chain>
 8013052:	4603      	mov	r3, r0
 8013054:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8013058:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801305c:	2b00      	cmp	r3, #0
 801305e:	d126      	bne.n	80130ae <f_open+0x1d2>
							res = move_window(fs, dw);
 8013060:	693b      	ldr	r3, [r7, #16]
 8013062:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013064:	4618      	mov	r0, r3
 8013066:	f7fe fb73 	bl	8011750 <move_window>
 801306a:	4603      	mov	r3, r0
 801306c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8013070:	693b      	ldr	r3, [r7, #16]
 8013072:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013074:	3a01      	subs	r2, #1
 8013076:	611a      	str	r2, [r3, #16]
 8013078:	e019      	b.n	80130ae <f_open+0x1d2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801307a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801307e:	2b00      	cmp	r3, #0
 8013080:	d115      	bne.n	80130ae <f_open+0x1d2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8013082:	7ebb      	ldrb	r3, [r7, #26]
 8013084:	f003 0310 	and.w	r3, r3, #16
 8013088:	2b00      	cmp	r3, #0
 801308a:	d003      	beq.n	8013094 <f_open+0x1b8>
					res = FR_NO_FILE;
 801308c:	2304      	movs	r3, #4
 801308e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013092:	e00c      	b.n	80130ae <f_open+0x1d2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8013094:	79fb      	ldrb	r3, [r7, #7]
 8013096:	f003 0302 	and.w	r3, r3, #2
 801309a:	2b00      	cmp	r3, #0
 801309c:	d007      	beq.n	80130ae <f_open+0x1d2>
 801309e:	7ebb      	ldrb	r3, [r7, #26]
 80130a0:	f003 0301 	and.w	r3, r3, #1
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	d002      	beq.n	80130ae <f_open+0x1d2>
						res = FR_DENIED;
 80130a8:	2307      	movs	r3, #7
 80130aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80130ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80130b2:	2b00      	cmp	r3, #0
 80130b4:	d128      	bne.n	8013108 <f_open+0x22c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80130b6:	79fb      	ldrb	r3, [r7, #7]
 80130b8:	f003 0308 	and.w	r3, r3, #8
 80130bc:	2b00      	cmp	r3, #0
 80130be:	d003      	beq.n	80130c8 <f_open+0x1ec>
				mode |= FA_MODIFIED;
 80130c0:	79fb      	ldrb	r3, [r7, #7]
 80130c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80130c6:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80130c8:	693b      	ldr	r3, [r7, #16]
 80130ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80130cc:	68fb      	ldr	r3, [r7, #12]
 80130ce:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80130d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80130d2:	68fb      	ldr	r3, [r7, #12]
 80130d4:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80130d6:	79fb      	ldrb	r3, [r7, #7]
 80130d8:	f023 0301 	bic.w	r3, r3, #1
 80130dc:	2b00      	cmp	r3, #0
 80130de:	bf14      	ite	ne
 80130e0:	2301      	movne	r3, #1
 80130e2:	2300      	moveq	r3, #0
 80130e4:	b2db      	uxtb	r3, r3
 80130e6:	461a      	mov	r2, r3
 80130e8:	f107 0314 	add.w	r3, r7, #20
 80130ec:	4611      	mov	r1, r2
 80130ee:	4618      	mov	r0, r3
 80130f0:	f7fe f9fc 	bl	80114ec <inc_lock>
 80130f4:	4602      	mov	r2, r0
 80130f6:	68fb      	ldr	r3, [r7, #12]
 80130f8:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80130fa:	68fb      	ldr	r3, [r7, #12]
 80130fc:	691b      	ldr	r3, [r3, #16]
 80130fe:	2b00      	cmp	r3, #0
 8013100:	d102      	bne.n	8013108 <f_open+0x22c>
 8013102:	2302      	movs	r3, #2
 8013104:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8013108:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801310c:	2b00      	cmp	r3, #0
 801310e:	f040 80a3 	bne.w	8013258 <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8013112:	693b      	ldr	r3, [r7, #16]
 8013114:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013116:	4611      	mov	r1, r2
 8013118:	4618      	mov	r0, r3
 801311a:	f7ff f8a1 	bl	8012260 <ld_clust>
 801311e:	4602      	mov	r2, r0
 8013120:	68fb      	ldr	r3, [r7, #12]
 8013122:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8013124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013126:	331c      	adds	r3, #28
 8013128:	4618      	mov	r0, r3
 801312a:	f7fe f879 	bl	8011220 <ld_dword>
 801312e:	4602      	mov	r2, r0
 8013130:	68fb      	ldr	r3, [r7, #12]
 8013132:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8013134:	68fb      	ldr	r3, [r7, #12]
 8013136:	2200      	movs	r2, #0
 8013138:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801313a:	693a      	ldr	r2, [r7, #16]
 801313c:	68fb      	ldr	r3, [r7, #12]
 801313e:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8013140:	693b      	ldr	r3, [r7, #16]
 8013142:	88da      	ldrh	r2, [r3, #6]
 8013144:	68fb      	ldr	r3, [r7, #12]
 8013146:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8013148:	68fb      	ldr	r3, [r7, #12]
 801314a:	79fa      	ldrb	r2, [r7, #7]
 801314c:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801314e:	68fb      	ldr	r3, [r7, #12]
 8013150:	2200      	movs	r2, #0
 8013152:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8013154:	68fb      	ldr	r3, [r7, #12]
 8013156:	2200      	movs	r2, #0
 8013158:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801315a:	68fb      	ldr	r3, [r7, #12]
 801315c:	2200      	movs	r2, #0
 801315e:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8013160:	68fb      	ldr	r3, [r7, #12]
 8013162:	3330      	adds	r3, #48	; 0x30
 8013164:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8013168:	2100      	movs	r1, #0
 801316a:	4618      	mov	r0, r3
 801316c:	f7fe f8e3 	bl	8011336 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8013170:	79fb      	ldrb	r3, [r7, #7]
 8013172:	f003 0320 	and.w	r3, r3, #32
 8013176:	2b00      	cmp	r3, #0
 8013178:	d06e      	beq.n	8013258 <f_open+0x37c>
 801317a:	68fb      	ldr	r3, [r7, #12]
 801317c:	68db      	ldr	r3, [r3, #12]
 801317e:	2b00      	cmp	r3, #0
 8013180:	d06a      	beq.n	8013258 <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8013182:	68fb      	ldr	r3, [r7, #12]
 8013184:	68da      	ldr	r2, [r3, #12]
 8013186:	68fb      	ldr	r3, [r7, #12]
 8013188:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801318a:	693b      	ldr	r3, [r7, #16]
 801318c:	895b      	ldrh	r3, [r3, #10]
 801318e:	461a      	mov	r2, r3
 8013190:	693b      	ldr	r3, [r7, #16]
 8013192:	899b      	ldrh	r3, [r3, #12]
 8013194:	fb03 f302 	mul.w	r3, r3, r2
 8013198:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801319a:	68fb      	ldr	r3, [r7, #12]
 801319c:	689b      	ldr	r3, [r3, #8]
 801319e:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80131a0:	68fb      	ldr	r3, [r7, #12]
 80131a2:	68db      	ldr	r3, [r3, #12]
 80131a4:	657b      	str	r3, [r7, #84]	; 0x54
 80131a6:	e016      	b.n	80131d6 <f_open+0x2fa>
					clst = get_fat(&fp->obj, clst);
 80131a8:	68fb      	ldr	r3, [r7, #12]
 80131aa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80131ac:	4618      	mov	r0, r3
 80131ae:	f7fe fb8c 	bl	80118ca <get_fat>
 80131b2:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80131b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80131b6:	2b01      	cmp	r3, #1
 80131b8:	d802      	bhi.n	80131c0 <f_open+0x2e4>
 80131ba:	2302      	movs	r3, #2
 80131bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80131c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80131c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80131c6:	d102      	bne.n	80131ce <f_open+0x2f2>
 80131c8:	2301      	movs	r3, #1
 80131ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80131ce:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80131d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80131d2:	1ad3      	subs	r3, r2, r3
 80131d4:	657b      	str	r3, [r7, #84]	; 0x54
 80131d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80131da:	2b00      	cmp	r3, #0
 80131dc:	d103      	bne.n	80131e6 <f_open+0x30a>
 80131de:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80131e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80131e2:	429a      	cmp	r2, r3
 80131e4:	d8e0      	bhi.n	80131a8 <f_open+0x2cc>
				}
				fp->clust = clst;
 80131e6:	68fb      	ldr	r3, [r7, #12]
 80131e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80131ea:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80131ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80131f0:	2b00      	cmp	r3, #0
 80131f2:	d131      	bne.n	8013258 <f_open+0x37c>
 80131f4:	693b      	ldr	r3, [r7, #16]
 80131f6:	899b      	ldrh	r3, [r3, #12]
 80131f8:	461a      	mov	r2, r3
 80131fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80131fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8013200:	fb02 f201 	mul.w	r2, r2, r1
 8013204:	1a9b      	subs	r3, r3, r2
 8013206:	2b00      	cmp	r3, #0
 8013208:	d026      	beq.n	8013258 <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801320a:	693b      	ldr	r3, [r7, #16]
 801320c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801320e:	4618      	mov	r0, r3
 8013210:	f7fe fb3c 	bl	801188c <clust2sect>
 8013214:	6478      	str	r0, [r7, #68]	; 0x44
 8013216:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013218:	2b00      	cmp	r3, #0
 801321a:	d103      	bne.n	8013224 <f_open+0x348>
						res = FR_INT_ERR;
 801321c:	2302      	movs	r3, #2
 801321e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013222:	e019      	b.n	8013258 <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8013224:	693b      	ldr	r3, [r7, #16]
 8013226:	899b      	ldrh	r3, [r3, #12]
 8013228:	461a      	mov	r2, r3
 801322a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801322c:	fbb3 f2f2 	udiv	r2, r3, r2
 8013230:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013232:	441a      	add	r2, r3
 8013234:	68fb      	ldr	r3, [r7, #12]
 8013236:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8013238:	693b      	ldr	r3, [r7, #16]
 801323a:	7858      	ldrb	r0, [r3, #1]
 801323c:	68fb      	ldr	r3, [r7, #12]
 801323e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013242:	68fb      	ldr	r3, [r7, #12]
 8013244:	6a1a      	ldr	r2, [r3, #32]
 8013246:	2301      	movs	r3, #1
 8013248:	f7fd ff74 	bl	8011134 <disk_read>
 801324c:	4603      	mov	r3, r0
 801324e:	2b00      	cmp	r3, #0
 8013250:	d002      	beq.n	8013258 <f_open+0x37c>
 8013252:	2301      	movs	r3, #1
 8013254:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8013258:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801325c:	2b00      	cmp	r3, #0
 801325e:	d002      	beq.n	8013266 <f_open+0x38a>
 8013260:	68fb      	ldr	r3, [r7, #12]
 8013262:	2200      	movs	r2, #0
 8013264:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8013266:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 801326a:	4618      	mov	r0, r3
 801326c:	3760      	adds	r7, #96	; 0x60
 801326e:	46bd      	mov	sp, r7
 8013270:	bd80      	pop	{r7, pc}
 8013272:	bf00      	nop
 8013274:	274a0000 	.word	0x274a0000

08013278 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8013278:	b580      	push	{r7, lr}
 801327a:	b08e      	sub	sp, #56	; 0x38
 801327c:	af00      	add	r7, sp, #0
 801327e:	60f8      	str	r0, [r7, #12]
 8013280:	60b9      	str	r1, [r7, #8]
 8013282:	607a      	str	r2, [r7, #4]
 8013284:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8013286:	68bb      	ldr	r3, [r7, #8]
 8013288:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 801328a:	683b      	ldr	r3, [r7, #0]
 801328c:	2200      	movs	r2, #0
 801328e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8013290:	68fb      	ldr	r3, [r7, #12]
 8013292:	f107 0214 	add.w	r2, r7, #20
 8013296:	4611      	mov	r1, r2
 8013298:	4618      	mov	r0, r3
 801329a:	f7ff fda3 	bl	8012de4 <validate>
 801329e:	4603      	mov	r3, r0
 80132a0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80132a4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80132a8:	2b00      	cmp	r3, #0
 80132aa:	d107      	bne.n	80132bc <f_read+0x44>
 80132ac:	68fb      	ldr	r3, [r7, #12]
 80132ae:	7d5b      	ldrb	r3, [r3, #21]
 80132b0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80132b4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80132b8:	2b00      	cmp	r3, #0
 80132ba:	d002      	beq.n	80132c2 <f_read+0x4a>
 80132bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80132c0:	e135      	b.n	801352e <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80132c2:	68fb      	ldr	r3, [r7, #12]
 80132c4:	7d1b      	ldrb	r3, [r3, #20]
 80132c6:	f003 0301 	and.w	r3, r3, #1
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	d101      	bne.n	80132d2 <f_read+0x5a>
 80132ce:	2307      	movs	r3, #7
 80132d0:	e12d      	b.n	801352e <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 80132d2:	68fb      	ldr	r3, [r7, #12]
 80132d4:	68da      	ldr	r2, [r3, #12]
 80132d6:	68fb      	ldr	r3, [r7, #12]
 80132d8:	699b      	ldr	r3, [r3, #24]
 80132da:	1ad3      	subs	r3, r2, r3
 80132dc:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80132de:	687a      	ldr	r2, [r7, #4]
 80132e0:	6a3b      	ldr	r3, [r7, #32]
 80132e2:	429a      	cmp	r2, r3
 80132e4:	f240 811e 	bls.w	8013524 <f_read+0x2ac>
 80132e8:	6a3b      	ldr	r3, [r7, #32]
 80132ea:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80132ec:	e11a      	b.n	8013524 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80132ee:	68fb      	ldr	r3, [r7, #12]
 80132f0:	699b      	ldr	r3, [r3, #24]
 80132f2:	697a      	ldr	r2, [r7, #20]
 80132f4:	8992      	ldrh	r2, [r2, #12]
 80132f6:	fbb3 f1f2 	udiv	r1, r3, r2
 80132fa:	fb02 f201 	mul.w	r2, r2, r1
 80132fe:	1a9b      	subs	r3, r3, r2
 8013300:	2b00      	cmp	r3, #0
 8013302:	f040 80d5 	bne.w	80134b0 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8013306:	68fb      	ldr	r3, [r7, #12]
 8013308:	699b      	ldr	r3, [r3, #24]
 801330a:	697a      	ldr	r2, [r7, #20]
 801330c:	8992      	ldrh	r2, [r2, #12]
 801330e:	fbb3 f3f2 	udiv	r3, r3, r2
 8013312:	697a      	ldr	r2, [r7, #20]
 8013314:	8952      	ldrh	r2, [r2, #10]
 8013316:	3a01      	subs	r2, #1
 8013318:	4013      	ands	r3, r2
 801331a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 801331c:	69fb      	ldr	r3, [r7, #28]
 801331e:	2b00      	cmp	r3, #0
 8013320:	d12f      	bne.n	8013382 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8013322:	68fb      	ldr	r3, [r7, #12]
 8013324:	699b      	ldr	r3, [r3, #24]
 8013326:	2b00      	cmp	r3, #0
 8013328:	d103      	bne.n	8013332 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 801332a:	68fb      	ldr	r3, [r7, #12]
 801332c:	689b      	ldr	r3, [r3, #8]
 801332e:	633b      	str	r3, [r7, #48]	; 0x30
 8013330:	e013      	b.n	801335a <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8013332:	68fb      	ldr	r3, [r7, #12]
 8013334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013336:	2b00      	cmp	r3, #0
 8013338:	d007      	beq.n	801334a <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801333a:	68fb      	ldr	r3, [r7, #12]
 801333c:	699b      	ldr	r3, [r3, #24]
 801333e:	4619      	mov	r1, r3
 8013340:	68f8      	ldr	r0, [r7, #12]
 8013342:	f7fe fdaf 	bl	8011ea4 <clmt_clust>
 8013346:	6338      	str	r0, [r7, #48]	; 0x30
 8013348:	e007      	b.n	801335a <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 801334a:	68fa      	ldr	r2, [r7, #12]
 801334c:	68fb      	ldr	r3, [r7, #12]
 801334e:	69db      	ldr	r3, [r3, #28]
 8013350:	4619      	mov	r1, r3
 8013352:	4610      	mov	r0, r2
 8013354:	f7fe fab9 	bl	80118ca <get_fat>
 8013358:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 801335a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801335c:	2b01      	cmp	r3, #1
 801335e:	d804      	bhi.n	801336a <f_read+0xf2>
 8013360:	68fb      	ldr	r3, [r7, #12]
 8013362:	2202      	movs	r2, #2
 8013364:	755a      	strb	r2, [r3, #21]
 8013366:	2302      	movs	r3, #2
 8013368:	e0e1      	b.n	801352e <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801336a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801336c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013370:	d104      	bne.n	801337c <f_read+0x104>
 8013372:	68fb      	ldr	r3, [r7, #12]
 8013374:	2201      	movs	r2, #1
 8013376:	755a      	strb	r2, [r3, #21]
 8013378:	2301      	movs	r3, #1
 801337a:	e0d8      	b.n	801352e <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 801337c:	68fb      	ldr	r3, [r7, #12]
 801337e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013380:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8013382:	697a      	ldr	r2, [r7, #20]
 8013384:	68fb      	ldr	r3, [r7, #12]
 8013386:	69db      	ldr	r3, [r3, #28]
 8013388:	4619      	mov	r1, r3
 801338a:	4610      	mov	r0, r2
 801338c:	f7fe fa7e 	bl	801188c <clust2sect>
 8013390:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8013392:	69bb      	ldr	r3, [r7, #24]
 8013394:	2b00      	cmp	r3, #0
 8013396:	d104      	bne.n	80133a2 <f_read+0x12a>
 8013398:	68fb      	ldr	r3, [r7, #12]
 801339a:	2202      	movs	r2, #2
 801339c:	755a      	strb	r2, [r3, #21]
 801339e:	2302      	movs	r3, #2
 80133a0:	e0c5      	b.n	801352e <f_read+0x2b6>
			sect += csect;
 80133a2:	69ba      	ldr	r2, [r7, #24]
 80133a4:	69fb      	ldr	r3, [r7, #28]
 80133a6:	4413      	add	r3, r2
 80133a8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80133aa:	697b      	ldr	r3, [r7, #20]
 80133ac:	899b      	ldrh	r3, [r3, #12]
 80133ae:	461a      	mov	r2, r3
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80133b6:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80133b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133ba:	2b00      	cmp	r3, #0
 80133bc:	d041      	beq.n	8013442 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80133be:	69fa      	ldr	r2, [r7, #28]
 80133c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133c2:	4413      	add	r3, r2
 80133c4:	697a      	ldr	r2, [r7, #20]
 80133c6:	8952      	ldrh	r2, [r2, #10]
 80133c8:	4293      	cmp	r3, r2
 80133ca:	d905      	bls.n	80133d8 <f_read+0x160>
					cc = fs->csize - csect;
 80133cc:	697b      	ldr	r3, [r7, #20]
 80133ce:	895b      	ldrh	r3, [r3, #10]
 80133d0:	461a      	mov	r2, r3
 80133d2:	69fb      	ldr	r3, [r7, #28]
 80133d4:	1ad3      	subs	r3, r2, r3
 80133d6:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80133d8:	697b      	ldr	r3, [r7, #20]
 80133da:	7858      	ldrb	r0, [r3, #1]
 80133dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133de:	69ba      	ldr	r2, [r7, #24]
 80133e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80133e2:	f7fd fea7 	bl	8011134 <disk_read>
 80133e6:	4603      	mov	r3, r0
 80133e8:	2b00      	cmp	r3, #0
 80133ea:	d004      	beq.n	80133f6 <f_read+0x17e>
 80133ec:	68fb      	ldr	r3, [r7, #12]
 80133ee:	2201      	movs	r2, #1
 80133f0:	755a      	strb	r2, [r3, #21]
 80133f2:	2301      	movs	r3, #1
 80133f4:	e09b      	b.n	801352e <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80133f6:	68fb      	ldr	r3, [r7, #12]
 80133f8:	7d1b      	ldrb	r3, [r3, #20]
 80133fa:	b25b      	sxtb	r3, r3
 80133fc:	2b00      	cmp	r3, #0
 80133fe:	da18      	bge.n	8013432 <f_read+0x1ba>
 8013400:	68fb      	ldr	r3, [r7, #12]
 8013402:	6a1a      	ldr	r2, [r3, #32]
 8013404:	69bb      	ldr	r3, [r7, #24]
 8013406:	1ad3      	subs	r3, r2, r3
 8013408:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801340a:	429a      	cmp	r2, r3
 801340c:	d911      	bls.n	8013432 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 801340e:	68fb      	ldr	r3, [r7, #12]
 8013410:	6a1a      	ldr	r2, [r3, #32]
 8013412:	69bb      	ldr	r3, [r7, #24]
 8013414:	1ad3      	subs	r3, r2, r3
 8013416:	697a      	ldr	r2, [r7, #20]
 8013418:	8992      	ldrh	r2, [r2, #12]
 801341a:	fb02 f303 	mul.w	r3, r2, r3
 801341e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013420:	18d0      	adds	r0, r2, r3
 8013422:	68fb      	ldr	r3, [r7, #12]
 8013424:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013428:	697b      	ldr	r3, [r7, #20]
 801342a:	899b      	ldrh	r3, [r3, #12]
 801342c:	461a      	mov	r2, r3
 801342e:	f7fd ff61 	bl	80112f4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8013432:	697b      	ldr	r3, [r7, #20]
 8013434:	899b      	ldrh	r3, [r3, #12]
 8013436:	461a      	mov	r2, r3
 8013438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801343a:	fb02 f303 	mul.w	r3, r2, r3
 801343e:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8013440:	e05c      	b.n	80134fc <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8013442:	68fb      	ldr	r3, [r7, #12]
 8013444:	6a1b      	ldr	r3, [r3, #32]
 8013446:	69ba      	ldr	r2, [r7, #24]
 8013448:	429a      	cmp	r2, r3
 801344a:	d02e      	beq.n	80134aa <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801344c:	68fb      	ldr	r3, [r7, #12]
 801344e:	7d1b      	ldrb	r3, [r3, #20]
 8013450:	b25b      	sxtb	r3, r3
 8013452:	2b00      	cmp	r3, #0
 8013454:	da18      	bge.n	8013488 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013456:	697b      	ldr	r3, [r7, #20]
 8013458:	7858      	ldrb	r0, [r3, #1]
 801345a:	68fb      	ldr	r3, [r7, #12]
 801345c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013460:	68fb      	ldr	r3, [r7, #12]
 8013462:	6a1a      	ldr	r2, [r3, #32]
 8013464:	2301      	movs	r3, #1
 8013466:	f7fd fe85 	bl	8011174 <disk_write>
 801346a:	4603      	mov	r3, r0
 801346c:	2b00      	cmp	r3, #0
 801346e:	d004      	beq.n	801347a <f_read+0x202>
 8013470:	68fb      	ldr	r3, [r7, #12]
 8013472:	2201      	movs	r2, #1
 8013474:	755a      	strb	r2, [r3, #21]
 8013476:	2301      	movs	r3, #1
 8013478:	e059      	b.n	801352e <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 801347a:	68fb      	ldr	r3, [r7, #12]
 801347c:	7d1b      	ldrb	r3, [r3, #20]
 801347e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013482:	b2da      	uxtb	r2, r3
 8013484:	68fb      	ldr	r3, [r7, #12]
 8013486:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8013488:	697b      	ldr	r3, [r7, #20]
 801348a:	7858      	ldrb	r0, [r3, #1]
 801348c:	68fb      	ldr	r3, [r7, #12]
 801348e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013492:	2301      	movs	r3, #1
 8013494:	69ba      	ldr	r2, [r7, #24]
 8013496:	f7fd fe4d 	bl	8011134 <disk_read>
 801349a:	4603      	mov	r3, r0
 801349c:	2b00      	cmp	r3, #0
 801349e:	d004      	beq.n	80134aa <f_read+0x232>
 80134a0:	68fb      	ldr	r3, [r7, #12]
 80134a2:	2201      	movs	r2, #1
 80134a4:	755a      	strb	r2, [r3, #21]
 80134a6:	2301      	movs	r3, #1
 80134a8:	e041      	b.n	801352e <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 80134aa:	68fb      	ldr	r3, [r7, #12]
 80134ac:	69ba      	ldr	r2, [r7, #24]
 80134ae:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80134b0:	697b      	ldr	r3, [r7, #20]
 80134b2:	899b      	ldrh	r3, [r3, #12]
 80134b4:	4618      	mov	r0, r3
 80134b6:	68fb      	ldr	r3, [r7, #12]
 80134b8:	699b      	ldr	r3, [r3, #24]
 80134ba:	697a      	ldr	r2, [r7, #20]
 80134bc:	8992      	ldrh	r2, [r2, #12]
 80134be:	fbb3 f1f2 	udiv	r1, r3, r2
 80134c2:	fb02 f201 	mul.w	r2, r2, r1
 80134c6:	1a9b      	subs	r3, r3, r2
 80134c8:	1ac3      	subs	r3, r0, r3
 80134ca:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80134cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80134ce:	687b      	ldr	r3, [r7, #4]
 80134d0:	429a      	cmp	r2, r3
 80134d2:	d901      	bls.n	80134d8 <f_read+0x260>
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80134d8:	68fb      	ldr	r3, [r7, #12]
 80134da:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80134de:	68fb      	ldr	r3, [r7, #12]
 80134e0:	699b      	ldr	r3, [r3, #24]
 80134e2:	697a      	ldr	r2, [r7, #20]
 80134e4:	8992      	ldrh	r2, [r2, #12]
 80134e6:	fbb3 f0f2 	udiv	r0, r3, r2
 80134ea:	fb02 f200 	mul.w	r2, r2, r0
 80134ee:	1a9b      	subs	r3, r3, r2
 80134f0:	440b      	add	r3, r1
 80134f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80134f4:	4619      	mov	r1, r3
 80134f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80134f8:	f7fd fefc 	bl	80112f4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80134fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80134fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013500:	4413      	add	r3, r2
 8013502:	627b      	str	r3, [r7, #36]	; 0x24
 8013504:	68fb      	ldr	r3, [r7, #12]
 8013506:	699a      	ldr	r2, [r3, #24]
 8013508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801350a:	441a      	add	r2, r3
 801350c:	68fb      	ldr	r3, [r7, #12]
 801350e:	619a      	str	r2, [r3, #24]
 8013510:	683b      	ldr	r3, [r7, #0]
 8013512:	681a      	ldr	r2, [r3, #0]
 8013514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013516:	441a      	add	r2, r3
 8013518:	683b      	ldr	r3, [r7, #0]
 801351a:	601a      	str	r2, [r3, #0]
 801351c:	687a      	ldr	r2, [r7, #4]
 801351e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013520:	1ad3      	subs	r3, r2, r3
 8013522:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	2b00      	cmp	r3, #0
 8013528:	f47f aee1 	bne.w	80132ee <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 801352c:	2300      	movs	r3, #0
}
 801352e:	4618      	mov	r0, r3
 8013530:	3738      	adds	r7, #56	; 0x38
 8013532:	46bd      	mov	sp, r7
 8013534:	bd80      	pop	{r7, pc}

08013536 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8013536:	b580      	push	{r7, lr}
 8013538:	b08c      	sub	sp, #48	; 0x30
 801353a:	af00      	add	r7, sp, #0
 801353c:	60f8      	str	r0, [r7, #12]
 801353e:	60b9      	str	r1, [r7, #8]
 8013540:	607a      	str	r2, [r7, #4]
 8013542:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8013544:	68bb      	ldr	r3, [r7, #8]
 8013546:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8013548:	683b      	ldr	r3, [r7, #0]
 801354a:	2200      	movs	r2, #0
 801354c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801354e:	68fb      	ldr	r3, [r7, #12]
 8013550:	f107 0210 	add.w	r2, r7, #16
 8013554:	4611      	mov	r1, r2
 8013556:	4618      	mov	r0, r3
 8013558:	f7ff fc44 	bl	8012de4 <validate>
 801355c:	4603      	mov	r3, r0
 801355e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8013562:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013566:	2b00      	cmp	r3, #0
 8013568:	d107      	bne.n	801357a <f_write+0x44>
 801356a:	68fb      	ldr	r3, [r7, #12]
 801356c:	7d5b      	ldrb	r3, [r3, #21]
 801356e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8013572:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013576:	2b00      	cmp	r3, #0
 8013578:	d002      	beq.n	8013580 <f_write+0x4a>
 801357a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801357e:	e16a      	b.n	8013856 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8013580:	68fb      	ldr	r3, [r7, #12]
 8013582:	7d1b      	ldrb	r3, [r3, #20]
 8013584:	f003 0302 	and.w	r3, r3, #2
 8013588:	2b00      	cmp	r3, #0
 801358a:	d101      	bne.n	8013590 <f_write+0x5a>
 801358c:	2307      	movs	r3, #7
 801358e:	e162      	b.n	8013856 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8013590:	68fb      	ldr	r3, [r7, #12]
 8013592:	699a      	ldr	r2, [r3, #24]
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	441a      	add	r2, r3
 8013598:	68fb      	ldr	r3, [r7, #12]
 801359a:	699b      	ldr	r3, [r3, #24]
 801359c:	429a      	cmp	r2, r3
 801359e:	f080 814c 	bcs.w	801383a <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80135a2:	68fb      	ldr	r3, [r7, #12]
 80135a4:	699b      	ldr	r3, [r3, #24]
 80135a6:	43db      	mvns	r3, r3
 80135a8:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80135aa:	e146      	b.n	801383a <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80135ac:	68fb      	ldr	r3, [r7, #12]
 80135ae:	699b      	ldr	r3, [r3, #24]
 80135b0:	693a      	ldr	r2, [r7, #16]
 80135b2:	8992      	ldrh	r2, [r2, #12]
 80135b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80135b8:	fb02 f201 	mul.w	r2, r2, r1
 80135bc:	1a9b      	subs	r3, r3, r2
 80135be:	2b00      	cmp	r3, #0
 80135c0:	f040 80f1 	bne.w	80137a6 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80135c4:	68fb      	ldr	r3, [r7, #12]
 80135c6:	699b      	ldr	r3, [r3, #24]
 80135c8:	693a      	ldr	r2, [r7, #16]
 80135ca:	8992      	ldrh	r2, [r2, #12]
 80135cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80135d0:	693a      	ldr	r2, [r7, #16]
 80135d2:	8952      	ldrh	r2, [r2, #10]
 80135d4:	3a01      	subs	r2, #1
 80135d6:	4013      	ands	r3, r2
 80135d8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80135da:	69bb      	ldr	r3, [r7, #24]
 80135dc:	2b00      	cmp	r3, #0
 80135de:	d143      	bne.n	8013668 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80135e0:	68fb      	ldr	r3, [r7, #12]
 80135e2:	699b      	ldr	r3, [r3, #24]
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	d10c      	bne.n	8013602 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80135e8:	68fb      	ldr	r3, [r7, #12]
 80135ea:	689b      	ldr	r3, [r3, #8]
 80135ec:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80135ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	d11a      	bne.n	801362a <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80135f4:	68fb      	ldr	r3, [r7, #12]
 80135f6:	2100      	movs	r1, #0
 80135f8:	4618      	mov	r0, r3
 80135fa:	f7fe fbbb 	bl	8011d74 <create_chain>
 80135fe:	62b8      	str	r0, [r7, #40]	; 0x28
 8013600:	e013      	b.n	801362a <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8013602:	68fb      	ldr	r3, [r7, #12]
 8013604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013606:	2b00      	cmp	r3, #0
 8013608:	d007      	beq.n	801361a <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801360a:	68fb      	ldr	r3, [r7, #12]
 801360c:	699b      	ldr	r3, [r3, #24]
 801360e:	4619      	mov	r1, r3
 8013610:	68f8      	ldr	r0, [r7, #12]
 8013612:	f7fe fc47 	bl	8011ea4 <clmt_clust>
 8013616:	62b8      	str	r0, [r7, #40]	; 0x28
 8013618:	e007      	b.n	801362a <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801361a:	68fa      	ldr	r2, [r7, #12]
 801361c:	68fb      	ldr	r3, [r7, #12]
 801361e:	69db      	ldr	r3, [r3, #28]
 8013620:	4619      	mov	r1, r3
 8013622:	4610      	mov	r0, r2
 8013624:	f7fe fba6 	bl	8011d74 <create_chain>
 8013628:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801362a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801362c:	2b00      	cmp	r3, #0
 801362e:	f000 8109 	beq.w	8013844 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8013632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013634:	2b01      	cmp	r3, #1
 8013636:	d104      	bne.n	8013642 <f_write+0x10c>
 8013638:	68fb      	ldr	r3, [r7, #12]
 801363a:	2202      	movs	r2, #2
 801363c:	755a      	strb	r2, [r3, #21]
 801363e:	2302      	movs	r3, #2
 8013640:	e109      	b.n	8013856 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013648:	d104      	bne.n	8013654 <f_write+0x11e>
 801364a:	68fb      	ldr	r3, [r7, #12]
 801364c:	2201      	movs	r2, #1
 801364e:	755a      	strb	r2, [r3, #21]
 8013650:	2301      	movs	r3, #1
 8013652:	e100      	b.n	8013856 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8013654:	68fb      	ldr	r3, [r7, #12]
 8013656:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013658:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801365a:	68fb      	ldr	r3, [r7, #12]
 801365c:	689b      	ldr	r3, [r3, #8]
 801365e:	2b00      	cmp	r3, #0
 8013660:	d102      	bne.n	8013668 <f_write+0x132>
 8013662:	68fb      	ldr	r3, [r7, #12]
 8013664:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013666:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8013668:	68fb      	ldr	r3, [r7, #12]
 801366a:	7d1b      	ldrb	r3, [r3, #20]
 801366c:	b25b      	sxtb	r3, r3
 801366e:	2b00      	cmp	r3, #0
 8013670:	da18      	bge.n	80136a4 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013672:	693b      	ldr	r3, [r7, #16]
 8013674:	7858      	ldrb	r0, [r3, #1]
 8013676:	68fb      	ldr	r3, [r7, #12]
 8013678:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801367c:	68fb      	ldr	r3, [r7, #12]
 801367e:	6a1a      	ldr	r2, [r3, #32]
 8013680:	2301      	movs	r3, #1
 8013682:	f7fd fd77 	bl	8011174 <disk_write>
 8013686:	4603      	mov	r3, r0
 8013688:	2b00      	cmp	r3, #0
 801368a:	d004      	beq.n	8013696 <f_write+0x160>
 801368c:	68fb      	ldr	r3, [r7, #12]
 801368e:	2201      	movs	r2, #1
 8013690:	755a      	strb	r2, [r3, #21]
 8013692:	2301      	movs	r3, #1
 8013694:	e0df      	b.n	8013856 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013696:	68fb      	ldr	r3, [r7, #12]
 8013698:	7d1b      	ldrb	r3, [r3, #20]
 801369a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801369e:	b2da      	uxtb	r2, r3
 80136a0:	68fb      	ldr	r3, [r7, #12]
 80136a2:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80136a4:	693a      	ldr	r2, [r7, #16]
 80136a6:	68fb      	ldr	r3, [r7, #12]
 80136a8:	69db      	ldr	r3, [r3, #28]
 80136aa:	4619      	mov	r1, r3
 80136ac:	4610      	mov	r0, r2
 80136ae:	f7fe f8ed 	bl	801188c <clust2sect>
 80136b2:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80136b4:	697b      	ldr	r3, [r7, #20]
 80136b6:	2b00      	cmp	r3, #0
 80136b8:	d104      	bne.n	80136c4 <f_write+0x18e>
 80136ba:	68fb      	ldr	r3, [r7, #12]
 80136bc:	2202      	movs	r2, #2
 80136be:	755a      	strb	r2, [r3, #21]
 80136c0:	2302      	movs	r3, #2
 80136c2:	e0c8      	b.n	8013856 <f_write+0x320>
			sect += csect;
 80136c4:	697a      	ldr	r2, [r7, #20]
 80136c6:	69bb      	ldr	r3, [r7, #24]
 80136c8:	4413      	add	r3, r2
 80136ca:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80136cc:	693b      	ldr	r3, [r7, #16]
 80136ce:	899b      	ldrh	r3, [r3, #12]
 80136d0:	461a      	mov	r2, r3
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80136d8:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80136da:	6a3b      	ldr	r3, [r7, #32]
 80136dc:	2b00      	cmp	r3, #0
 80136de:	d043      	beq.n	8013768 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80136e0:	69ba      	ldr	r2, [r7, #24]
 80136e2:	6a3b      	ldr	r3, [r7, #32]
 80136e4:	4413      	add	r3, r2
 80136e6:	693a      	ldr	r2, [r7, #16]
 80136e8:	8952      	ldrh	r2, [r2, #10]
 80136ea:	4293      	cmp	r3, r2
 80136ec:	d905      	bls.n	80136fa <f_write+0x1c4>
					cc = fs->csize - csect;
 80136ee:	693b      	ldr	r3, [r7, #16]
 80136f0:	895b      	ldrh	r3, [r3, #10]
 80136f2:	461a      	mov	r2, r3
 80136f4:	69bb      	ldr	r3, [r7, #24]
 80136f6:	1ad3      	subs	r3, r2, r3
 80136f8:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80136fa:	693b      	ldr	r3, [r7, #16]
 80136fc:	7858      	ldrb	r0, [r3, #1]
 80136fe:	6a3b      	ldr	r3, [r7, #32]
 8013700:	697a      	ldr	r2, [r7, #20]
 8013702:	69f9      	ldr	r1, [r7, #28]
 8013704:	f7fd fd36 	bl	8011174 <disk_write>
 8013708:	4603      	mov	r3, r0
 801370a:	2b00      	cmp	r3, #0
 801370c:	d004      	beq.n	8013718 <f_write+0x1e2>
 801370e:	68fb      	ldr	r3, [r7, #12]
 8013710:	2201      	movs	r2, #1
 8013712:	755a      	strb	r2, [r3, #21]
 8013714:	2301      	movs	r3, #1
 8013716:	e09e      	b.n	8013856 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8013718:	68fb      	ldr	r3, [r7, #12]
 801371a:	6a1a      	ldr	r2, [r3, #32]
 801371c:	697b      	ldr	r3, [r7, #20]
 801371e:	1ad3      	subs	r3, r2, r3
 8013720:	6a3a      	ldr	r2, [r7, #32]
 8013722:	429a      	cmp	r2, r3
 8013724:	d918      	bls.n	8013758 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8013726:	68fb      	ldr	r3, [r7, #12]
 8013728:	f103 0030 	add.w	r0, r3, #48	; 0x30
 801372c:	68fb      	ldr	r3, [r7, #12]
 801372e:	6a1a      	ldr	r2, [r3, #32]
 8013730:	697b      	ldr	r3, [r7, #20]
 8013732:	1ad3      	subs	r3, r2, r3
 8013734:	693a      	ldr	r2, [r7, #16]
 8013736:	8992      	ldrh	r2, [r2, #12]
 8013738:	fb02 f303 	mul.w	r3, r2, r3
 801373c:	69fa      	ldr	r2, [r7, #28]
 801373e:	18d1      	adds	r1, r2, r3
 8013740:	693b      	ldr	r3, [r7, #16]
 8013742:	899b      	ldrh	r3, [r3, #12]
 8013744:	461a      	mov	r2, r3
 8013746:	f7fd fdd5 	bl	80112f4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801374a:	68fb      	ldr	r3, [r7, #12]
 801374c:	7d1b      	ldrb	r3, [r3, #20]
 801374e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013752:	b2da      	uxtb	r2, r3
 8013754:	68fb      	ldr	r3, [r7, #12]
 8013756:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8013758:	693b      	ldr	r3, [r7, #16]
 801375a:	899b      	ldrh	r3, [r3, #12]
 801375c:	461a      	mov	r2, r3
 801375e:	6a3b      	ldr	r3, [r7, #32]
 8013760:	fb02 f303 	mul.w	r3, r2, r3
 8013764:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8013766:	e04b      	b.n	8013800 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013768:	68fb      	ldr	r3, [r7, #12]
 801376a:	6a1b      	ldr	r3, [r3, #32]
 801376c:	697a      	ldr	r2, [r7, #20]
 801376e:	429a      	cmp	r2, r3
 8013770:	d016      	beq.n	80137a0 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8013772:	68fb      	ldr	r3, [r7, #12]
 8013774:	699a      	ldr	r2, [r3, #24]
 8013776:	68fb      	ldr	r3, [r7, #12]
 8013778:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801377a:	429a      	cmp	r2, r3
 801377c:	d210      	bcs.n	80137a0 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801377e:	693b      	ldr	r3, [r7, #16]
 8013780:	7858      	ldrb	r0, [r3, #1]
 8013782:	68fb      	ldr	r3, [r7, #12]
 8013784:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013788:	2301      	movs	r3, #1
 801378a:	697a      	ldr	r2, [r7, #20]
 801378c:	f7fd fcd2 	bl	8011134 <disk_read>
 8013790:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8013792:	2b00      	cmp	r3, #0
 8013794:	d004      	beq.n	80137a0 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8013796:	68fb      	ldr	r3, [r7, #12]
 8013798:	2201      	movs	r2, #1
 801379a:	755a      	strb	r2, [r3, #21]
 801379c:	2301      	movs	r3, #1
 801379e:	e05a      	b.n	8013856 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 80137a0:	68fb      	ldr	r3, [r7, #12]
 80137a2:	697a      	ldr	r2, [r7, #20]
 80137a4:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80137a6:	693b      	ldr	r3, [r7, #16]
 80137a8:	899b      	ldrh	r3, [r3, #12]
 80137aa:	4618      	mov	r0, r3
 80137ac:	68fb      	ldr	r3, [r7, #12]
 80137ae:	699b      	ldr	r3, [r3, #24]
 80137b0:	693a      	ldr	r2, [r7, #16]
 80137b2:	8992      	ldrh	r2, [r2, #12]
 80137b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80137b8:	fb02 f201 	mul.w	r2, r2, r1
 80137bc:	1a9b      	subs	r3, r3, r2
 80137be:	1ac3      	subs	r3, r0, r3
 80137c0:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80137c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	429a      	cmp	r2, r3
 80137c8:	d901      	bls.n	80137ce <f_write+0x298>
 80137ca:	687b      	ldr	r3, [r7, #4]
 80137cc:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80137ce:	68fb      	ldr	r3, [r7, #12]
 80137d0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80137d4:	68fb      	ldr	r3, [r7, #12]
 80137d6:	699b      	ldr	r3, [r3, #24]
 80137d8:	693a      	ldr	r2, [r7, #16]
 80137da:	8992      	ldrh	r2, [r2, #12]
 80137dc:	fbb3 f0f2 	udiv	r0, r3, r2
 80137e0:	fb02 f200 	mul.w	r2, r2, r0
 80137e4:	1a9b      	subs	r3, r3, r2
 80137e6:	440b      	add	r3, r1
 80137e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80137ea:	69f9      	ldr	r1, [r7, #28]
 80137ec:	4618      	mov	r0, r3
 80137ee:	f7fd fd81 	bl	80112f4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80137f2:	68fb      	ldr	r3, [r7, #12]
 80137f4:	7d1b      	ldrb	r3, [r3, #20]
 80137f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80137fa:	b2da      	uxtb	r2, r3
 80137fc:	68fb      	ldr	r3, [r7, #12]
 80137fe:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8013800:	69fa      	ldr	r2, [r7, #28]
 8013802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013804:	4413      	add	r3, r2
 8013806:	61fb      	str	r3, [r7, #28]
 8013808:	68fb      	ldr	r3, [r7, #12]
 801380a:	699a      	ldr	r2, [r3, #24]
 801380c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801380e:	441a      	add	r2, r3
 8013810:	68fb      	ldr	r3, [r7, #12]
 8013812:	619a      	str	r2, [r3, #24]
 8013814:	68fb      	ldr	r3, [r7, #12]
 8013816:	68da      	ldr	r2, [r3, #12]
 8013818:	68fb      	ldr	r3, [r7, #12]
 801381a:	699b      	ldr	r3, [r3, #24]
 801381c:	429a      	cmp	r2, r3
 801381e:	bf38      	it	cc
 8013820:	461a      	movcc	r2, r3
 8013822:	68fb      	ldr	r3, [r7, #12]
 8013824:	60da      	str	r2, [r3, #12]
 8013826:	683b      	ldr	r3, [r7, #0]
 8013828:	681a      	ldr	r2, [r3, #0]
 801382a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801382c:	441a      	add	r2, r3
 801382e:	683b      	ldr	r3, [r7, #0]
 8013830:	601a      	str	r2, [r3, #0]
 8013832:	687a      	ldr	r2, [r7, #4]
 8013834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013836:	1ad3      	subs	r3, r2, r3
 8013838:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	2b00      	cmp	r3, #0
 801383e:	f47f aeb5 	bne.w	80135ac <f_write+0x76>
 8013842:	e000      	b.n	8013846 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013844:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8013846:	68fb      	ldr	r3, [r7, #12]
 8013848:	7d1b      	ldrb	r3, [r3, #20]
 801384a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801384e:	b2da      	uxtb	r2, r3
 8013850:	68fb      	ldr	r3, [r7, #12]
 8013852:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8013854:	2300      	movs	r3, #0
}
 8013856:	4618      	mov	r0, r3
 8013858:	3730      	adds	r7, #48	; 0x30
 801385a:	46bd      	mov	sp, r7
 801385c:	bd80      	pop	{r7, pc}
	...

08013860 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8013860:	b580      	push	{r7, lr}
 8013862:	b086      	sub	sp, #24
 8013864:	af00      	add	r7, sp, #0
 8013866:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8013868:	687b      	ldr	r3, [r7, #4]
 801386a:	f107 0208 	add.w	r2, r7, #8
 801386e:	4611      	mov	r1, r2
 8013870:	4618      	mov	r0, r3
 8013872:	f7ff fab7 	bl	8012de4 <validate>
 8013876:	4603      	mov	r3, r0
 8013878:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801387a:	7dfb      	ldrb	r3, [r7, #23]
 801387c:	2b00      	cmp	r3, #0
 801387e:	d167      	bne.n	8013950 <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	7d1b      	ldrb	r3, [r3, #20]
 8013884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013888:	2b00      	cmp	r3, #0
 801388a:	d061      	beq.n	8013950 <f_sync+0xf0>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	7d1b      	ldrb	r3, [r3, #20]
 8013890:	b25b      	sxtb	r3, r3
 8013892:	2b00      	cmp	r3, #0
 8013894:	da15      	bge.n	80138c2 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8013896:	68bb      	ldr	r3, [r7, #8]
 8013898:	7858      	ldrb	r0, [r3, #1]
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	6a1a      	ldr	r2, [r3, #32]
 80138a4:	2301      	movs	r3, #1
 80138a6:	f7fd fc65 	bl	8011174 <disk_write>
 80138aa:	4603      	mov	r3, r0
 80138ac:	2b00      	cmp	r3, #0
 80138ae:	d001      	beq.n	80138b4 <f_sync+0x54>
 80138b0:	2301      	movs	r3, #1
 80138b2:	e04e      	b.n	8013952 <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	7d1b      	ldrb	r3, [r3, #20]
 80138b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80138bc:	b2da      	uxtb	r2, r3
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80138c2:	4b26      	ldr	r3, [pc, #152]	; (801395c <f_sync+0xfc>)
 80138c4:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80138c6:	68ba      	ldr	r2, [r7, #8]
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138cc:	4619      	mov	r1, r3
 80138ce:	4610      	mov	r0, r2
 80138d0:	f7fd ff3e 	bl	8011750 <move_window>
 80138d4:	4603      	mov	r3, r0
 80138d6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80138d8:	7dfb      	ldrb	r3, [r7, #23]
 80138da:	2b00      	cmp	r3, #0
 80138dc:	d138      	bne.n	8013950 <f_sync+0xf0>
					dir = fp->dir_ptr;
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80138e2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80138e4:	68fb      	ldr	r3, [r7, #12]
 80138e6:	330b      	adds	r3, #11
 80138e8:	781a      	ldrb	r2, [r3, #0]
 80138ea:	68fb      	ldr	r3, [r7, #12]
 80138ec:	330b      	adds	r3, #11
 80138ee:	f042 0220 	orr.w	r2, r2, #32
 80138f2:	b2d2      	uxtb	r2, r2
 80138f4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	6818      	ldr	r0, [r3, #0]
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	689b      	ldr	r3, [r3, #8]
 80138fe:	461a      	mov	r2, r3
 8013900:	68f9      	ldr	r1, [r7, #12]
 8013902:	f7fe fccc 	bl	801229e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8013906:	68fb      	ldr	r3, [r7, #12]
 8013908:	f103 021c 	add.w	r2, r3, #28
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	68db      	ldr	r3, [r3, #12]
 8013910:	4619      	mov	r1, r3
 8013912:	4610      	mov	r0, r2
 8013914:	f7fd fcc2 	bl	801129c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8013918:	68fb      	ldr	r3, [r7, #12]
 801391a:	3316      	adds	r3, #22
 801391c:	6939      	ldr	r1, [r7, #16]
 801391e:	4618      	mov	r0, r3
 8013920:	f7fd fcbc 	bl	801129c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8013924:	68fb      	ldr	r3, [r7, #12]
 8013926:	3312      	adds	r3, #18
 8013928:	2100      	movs	r1, #0
 801392a:	4618      	mov	r0, r3
 801392c:	f7fd fc9b 	bl	8011266 <st_word>
					fs->wflag = 1;
 8013930:	68bb      	ldr	r3, [r7, #8]
 8013932:	2201      	movs	r2, #1
 8013934:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8013936:	68bb      	ldr	r3, [r7, #8]
 8013938:	4618      	mov	r0, r3
 801393a:	f7fd ff37 	bl	80117ac <sync_fs>
 801393e:	4603      	mov	r3, r0
 8013940:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8013942:	687b      	ldr	r3, [r7, #4]
 8013944:	7d1b      	ldrb	r3, [r3, #20]
 8013946:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801394a:	b2da      	uxtb	r2, r3
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8013950:	7dfb      	ldrb	r3, [r7, #23]
}
 8013952:	4618      	mov	r0, r3
 8013954:	3718      	adds	r7, #24
 8013956:	46bd      	mov	sp, r7
 8013958:	bd80      	pop	{r7, pc}
 801395a:	bf00      	nop
 801395c:	274a0000 	.word	0x274a0000

08013960 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8013960:	b580      	push	{r7, lr}
 8013962:	b084      	sub	sp, #16
 8013964:	af00      	add	r7, sp, #0
 8013966:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8013968:	6878      	ldr	r0, [r7, #4]
 801396a:	f7ff ff79 	bl	8013860 <f_sync>
 801396e:	4603      	mov	r3, r0
 8013970:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8013972:	7bfb      	ldrb	r3, [r7, #15]
 8013974:	2b00      	cmp	r3, #0
 8013976:	d118      	bne.n	80139aa <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	f107 0208 	add.w	r2, r7, #8
 801397e:	4611      	mov	r1, r2
 8013980:	4618      	mov	r0, r3
 8013982:	f7ff fa2f 	bl	8012de4 <validate>
 8013986:	4603      	mov	r3, r0
 8013988:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801398a:	7bfb      	ldrb	r3, [r7, #15]
 801398c:	2b00      	cmp	r3, #0
 801398e:	d10c      	bne.n	80139aa <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8013990:	687b      	ldr	r3, [r7, #4]
 8013992:	691b      	ldr	r3, [r3, #16]
 8013994:	4618      	mov	r0, r3
 8013996:	f7fd fe37 	bl	8011608 <dec_lock>
 801399a:	4603      	mov	r3, r0
 801399c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801399e:	7bfb      	ldrb	r3, [r7, #15]
 80139a0:	2b00      	cmp	r3, #0
 80139a2:	d102      	bne.n	80139aa <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	2200      	movs	r2, #0
 80139a8:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80139aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80139ac:	4618      	mov	r0, r3
 80139ae:	3710      	adds	r7, #16
 80139b0:	46bd      	mov	sp, r7
 80139b2:	bd80      	pop	{r7, pc}

080139b4 <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 80139b4:	b590      	push	{r4, r7, lr}
 80139b6:	b091      	sub	sp, #68	; 0x44
 80139b8:	af00      	add	r7, sp, #0
 80139ba:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 80139bc:	f107 0108 	add.w	r1, r7, #8
 80139c0:	1d3b      	adds	r3, r7, #4
 80139c2:	2200      	movs	r2, #0
 80139c4:	4618      	mov	r0, r3
 80139c6:	f7fe ff87 	bl	80128d8 <find_volume>
 80139ca:	4603      	mov	r3, r0
 80139cc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 80139d0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80139d4:	2b00      	cmp	r3, #0
 80139d6:	d131      	bne.n	8013a3c <f_chdir+0x88>
		dj.obj.fs = fs;
 80139d8:	68bb      	ldr	r3, [r7, #8]
 80139da:	60fb      	str	r3, [r7, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 80139dc:	687a      	ldr	r2, [r7, #4]
 80139de:	f107 030c 	add.w	r3, r7, #12
 80139e2:	4611      	mov	r1, r2
 80139e4:	4618      	mov	r0, r3
 80139e6:	f7fe fe47 	bl	8012678 <follow_path>
 80139ea:	4603      	mov	r3, r0
 80139ec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {					/* Follow completed */
 80139f0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80139f4:	2b00      	cmp	r3, #0
 80139f6:	d11a      	bne.n	8013a2e <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 80139f8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80139fc:	b25b      	sxtb	r3, r3
 80139fe:	2b00      	cmp	r3, #0
 8013a00:	da03      	bge.n	8013a0a <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 8013a02:	68bb      	ldr	r3, [r7, #8]
 8013a04:	697a      	ldr	r2, [r7, #20]
 8013a06:	619a      	str	r2, [r3, #24]
 8013a08:	e011      	b.n	8013a2e <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 8013a0a:	7cbb      	ldrb	r3, [r7, #18]
 8013a0c:	f003 0310 	and.w	r3, r3, #16
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	d009      	beq.n	8013a28 <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 8013a14:	68bb      	ldr	r3, [r7, #8]
 8013a16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013a18:	68bc      	ldr	r4, [r7, #8]
 8013a1a:	4611      	mov	r1, r2
 8013a1c:	4618      	mov	r0, r3
 8013a1e:	f7fe fc1f 	bl	8012260 <ld_clust>
 8013a22:	4603      	mov	r3, r0
 8013a24:	61a3      	str	r3, [r4, #24]
 8013a26:	e002      	b.n	8013a2e <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 8013a28:	2305      	movs	r3, #5
 8013a2a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8013a2e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013a32:	2b04      	cmp	r3, #4
 8013a34:	d102      	bne.n	8013a3c <f_chdir+0x88>
 8013a36:	2305      	movs	r3, #5
 8013a38:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	LEAVE_FF(fs, res);
 8013a3c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8013a40:	4618      	mov	r0, r3
 8013a42:	3744      	adds	r7, #68	; 0x44
 8013a44:	46bd      	mov	sp, r7
 8013a46:	bd90      	pop	{r4, r7, pc}

08013a48 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8013a48:	b580      	push	{r7, lr}
 8013a4a:	b090      	sub	sp, #64	; 0x40
 8013a4c:	af00      	add	r7, sp, #0
 8013a4e:	6078      	str	r0, [r7, #4]
 8013a50:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8013a52:	687b      	ldr	r3, [r7, #4]
 8013a54:	f107 0208 	add.w	r2, r7, #8
 8013a58:	4611      	mov	r1, r2
 8013a5a:	4618      	mov	r0, r3
 8013a5c:	f7ff f9c2 	bl	8012de4 <validate>
 8013a60:	4603      	mov	r3, r0
 8013a62:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8013a66:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	d103      	bne.n	8013a76 <f_lseek+0x2e>
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	7d5b      	ldrb	r3, [r3, #21]
 8013a72:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8013a76:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013a7a:	2b00      	cmp	r3, #0
 8013a7c:	d002      	beq.n	8013a84 <f_lseek+0x3c>
 8013a7e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013a82:	e201      	b.n	8013e88 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a88:	2b00      	cmp	r3, #0
 8013a8a:	f000 80d9 	beq.w	8013c40 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8013a8e:	683b      	ldr	r3, [r7, #0]
 8013a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a94:	d15a      	bne.n	8013b4c <f_lseek+0x104>
			tbl = fp->cltbl;
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a9a:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8013a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a9e:	1d1a      	adds	r2, r3, #4
 8013aa0:	627a      	str	r2, [r7, #36]	; 0x24
 8013aa2:	681b      	ldr	r3, [r3, #0]
 8013aa4:	617b      	str	r3, [r7, #20]
 8013aa6:	2302      	movs	r3, #2
 8013aa8:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8013aaa:	687b      	ldr	r3, [r7, #4]
 8013aac:	689b      	ldr	r3, [r3, #8]
 8013aae:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8013ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ab2:	2b00      	cmp	r3, #0
 8013ab4:	d03a      	beq.n	8013b2c <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8013ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ab8:	613b      	str	r3, [r7, #16]
 8013aba:	2300      	movs	r3, #0
 8013abc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ac0:	3302      	adds	r3, #2
 8013ac2:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8013ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ac6:	60fb      	str	r3, [r7, #12]
 8013ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013aca:	3301      	adds	r3, #1
 8013acc:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8013ace:	687b      	ldr	r3, [r7, #4]
 8013ad0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013ad2:	4618      	mov	r0, r3
 8013ad4:	f7fd fef9 	bl	80118ca <get_fat>
 8013ad8:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8013ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013adc:	2b01      	cmp	r3, #1
 8013ade:	d804      	bhi.n	8013aea <f_lseek+0xa2>
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	2202      	movs	r2, #2
 8013ae4:	755a      	strb	r2, [r3, #21]
 8013ae6:	2302      	movs	r3, #2
 8013ae8:	e1ce      	b.n	8013e88 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013af0:	d104      	bne.n	8013afc <f_lseek+0xb4>
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	2201      	movs	r2, #1
 8013af6:	755a      	strb	r2, [r3, #21]
 8013af8:	2301      	movs	r3, #1
 8013afa:	e1c5      	b.n	8013e88 <f_lseek+0x440>
					} while (cl == pcl + 1);
 8013afc:	68fb      	ldr	r3, [r7, #12]
 8013afe:	3301      	adds	r3, #1
 8013b00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013b02:	429a      	cmp	r2, r3
 8013b04:	d0de      	beq.n	8013ac4 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8013b06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013b08:	697b      	ldr	r3, [r7, #20]
 8013b0a:	429a      	cmp	r2, r3
 8013b0c:	d809      	bhi.n	8013b22 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8013b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b10:	1d1a      	adds	r2, r3, #4
 8013b12:	627a      	str	r2, [r7, #36]	; 0x24
 8013b14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013b16:	601a      	str	r2, [r3, #0]
 8013b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b1a:	1d1a      	adds	r2, r3, #4
 8013b1c:	627a      	str	r2, [r7, #36]	; 0x24
 8013b1e:	693a      	ldr	r2, [r7, #16]
 8013b20:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8013b22:	68bb      	ldr	r3, [r7, #8]
 8013b24:	69db      	ldr	r3, [r3, #28]
 8013b26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013b28:	429a      	cmp	r2, r3
 8013b2a:	d3c4      	bcc.n	8013ab6 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013b32:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8013b34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013b36:	697b      	ldr	r3, [r7, #20]
 8013b38:	429a      	cmp	r2, r3
 8013b3a:	d803      	bhi.n	8013b44 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8013b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b3e:	2200      	movs	r2, #0
 8013b40:	601a      	str	r2, [r3, #0]
 8013b42:	e19f      	b.n	8013e84 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8013b44:	2311      	movs	r3, #17
 8013b46:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8013b4a:	e19b      	b.n	8013e84 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	68db      	ldr	r3, [r3, #12]
 8013b50:	683a      	ldr	r2, [r7, #0]
 8013b52:	429a      	cmp	r2, r3
 8013b54:	d902      	bls.n	8013b5c <f_lseek+0x114>
 8013b56:	687b      	ldr	r3, [r7, #4]
 8013b58:	68db      	ldr	r3, [r3, #12]
 8013b5a:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8013b5c:	687b      	ldr	r3, [r7, #4]
 8013b5e:	683a      	ldr	r2, [r7, #0]
 8013b60:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8013b62:	683b      	ldr	r3, [r7, #0]
 8013b64:	2b00      	cmp	r3, #0
 8013b66:	f000 818d 	beq.w	8013e84 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8013b6a:	683b      	ldr	r3, [r7, #0]
 8013b6c:	3b01      	subs	r3, #1
 8013b6e:	4619      	mov	r1, r3
 8013b70:	6878      	ldr	r0, [r7, #4]
 8013b72:	f7fe f997 	bl	8011ea4 <clmt_clust>
 8013b76:	4602      	mov	r2, r0
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8013b7c:	68ba      	ldr	r2, [r7, #8]
 8013b7e:	687b      	ldr	r3, [r7, #4]
 8013b80:	69db      	ldr	r3, [r3, #28]
 8013b82:	4619      	mov	r1, r3
 8013b84:	4610      	mov	r0, r2
 8013b86:	f7fd fe81 	bl	801188c <clust2sect>
 8013b8a:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8013b8c:	69bb      	ldr	r3, [r7, #24]
 8013b8e:	2b00      	cmp	r3, #0
 8013b90:	d104      	bne.n	8013b9c <f_lseek+0x154>
 8013b92:	687b      	ldr	r3, [r7, #4]
 8013b94:	2202      	movs	r2, #2
 8013b96:	755a      	strb	r2, [r3, #21]
 8013b98:	2302      	movs	r3, #2
 8013b9a:	e175      	b.n	8013e88 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8013b9c:	683b      	ldr	r3, [r7, #0]
 8013b9e:	3b01      	subs	r3, #1
 8013ba0:	68ba      	ldr	r2, [r7, #8]
 8013ba2:	8992      	ldrh	r2, [r2, #12]
 8013ba4:	fbb3 f3f2 	udiv	r3, r3, r2
 8013ba8:	68ba      	ldr	r2, [r7, #8]
 8013baa:	8952      	ldrh	r2, [r2, #10]
 8013bac:	3a01      	subs	r2, #1
 8013bae:	4013      	ands	r3, r2
 8013bb0:	69ba      	ldr	r2, [r7, #24]
 8013bb2:	4413      	add	r3, r2
 8013bb4:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	699b      	ldr	r3, [r3, #24]
 8013bba:	68ba      	ldr	r2, [r7, #8]
 8013bbc:	8992      	ldrh	r2, [r2, #12]
 8013bbe:	fbb3 f1f2 	udiv	r1, r3, r2
 8013bc2:	fb02 f201 	mul.w	r2, r2, r1
 8013bc6:	1a9b      	subs	r3, r3, r2
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	f000 815b 	beq.w	8013e84 <f_lseek+0x43c>
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	6a1b      	ldr	r3, [r3, #32]
 8013bd2:	69ba      	ldr	r2, [r7, #24]
 8013bd4:	429a      	cmp	r2, r3
 8013bd6:	f000 8155 	beq.w	8013e84 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	7d1b      	ldrb	r3, [r3, #20]
 8013bde:	b25b      	sxtb	r3, r3
 8013be0:	2b00      	cmp	r3, #0
 8013be2:	da18      	bge.n	8013c16 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013be4:	68bb      	ldr	r3, [r7, #8]
 8013be6:	7858      	ldrb	r0, [r3, #1]
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	6a1a      	ldr	r2, [r3, #32]
 8013bf2:	2301      	movs	r3, #1
 8013bf4:	f7fd fabe 	bl	8011174 <disk_write>
 8013bf8:	4603      	mov	r3, r0
 8013bfa:	2b00      	cmp	r3, #0
 8013bfc:	d004      	beq.n	8013c08 <f_lseek+0x1c0>
 8013bfe:	687b      	ldr	r3, [r7, #4]
 8013c00:	2201      	movs	r2, #1
 8013c02:	755a      	strb	r2, [r3, #21]
 8013c04:	2301      	movs	r3, #1
 8013c06:	e13f      	b.n	8013e88 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8013c08:	687b      	ldr	r3, [r7, #4]
 8013c0a:	7d1b      	ldrb	r3, [r3, #20]
 8013c0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013c10:	b2da      	uxtb	r2, r3
 8013c12:	687b      	ldr	r3, [r7, #4]
 8013c14:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8013c16:	68bb      	ldr	r3, [r7, #8]
 8013c18:	7858      	ldrb	r0, [r3, #1]
 8013c1a:	687b      	ldr	r3, [r7, #4]
 8013c1c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013c20:	2301      	movs	r3, #1
 8013c22:	69ba      	ldr	r2, [r7, #24]
 8013c24:	f7fd fa86 	bl	8011134 <disk_read>
 8013c28:	4603      	mov	r3, r0
 8013c2a:	2b00      	cmp	r3, #0
 8013c2c:	d004      	beq.n	8013c38 <f_lseek+0x1f0>
 8013c2e:	687b      	ldr	r3, [r7, #4]
 8013c30:	2201      	movs	r2, #1
 8013c32:	755a      	strb	r2, [r3, #21]
 8013c34:	2301      	movs	r3, #1
 8013c36:	e127      	b.n	8013e88 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	69ba      	ldr	r2, [r7, #24]
 8013c3c:	621a      	str	r2, [r3, #32]
 8013c3e:	e121      	b.n	8013e84 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	68db      	ldr	r3, [r3, #12]
 8013c44:	683a      	ldr	r2, [r7, #0]
 8013c46:	429a      	cmp	r2, r3
 8013c48:	d908      	bls.n	8013c5c <f_lseek+0x214>
 8013c4a:	687b      	ldr	r3, [r7, #4]
 8013c4c:	7d1b      	ldrb	r3, [r3, #20]
 8013c4e:	f003 0302 	and.w	r3, r3, #2
 8013c52:	2b00      	cmp	r3, #0
 8013c54:	d102      	bne.n	8013c5c <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	68db      	ldr	r3, [r3, #12]
 8013c5a:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	699b      	ldr	r3, [r3, #24]
 8013c60:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8013c62:	2300      	movs	r3, #0
 8013c64:	637b      	str	r3, [r7, #52]	; 0x34
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013c6a:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8013c6c:	683b      	ldr	r3, [r7, #0]
 8013c6e:	2b00      	cmp	r3, #0
 8013c70:	f000 80b5 	beq.w	8013dde <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8013c74:	68bb      	ldr	r3, [r7, #8]
 8013c76:	895b      	ldrh	r3, [r3, #10]
 8013c78:	461a      	mov	r2, r3
 8013c7a:	68bb      	ldr	r3, [r7, #8]
 8013c7c:	899b      	ldrh	r3, [r3, #12]
 8013c7e:	fb03 f302 	mul.w	r3, r3, r2
 8013c82:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8013c84:	6a3b      	ldr	r3, [r7, #32]
 8013c86:	2b00      	cmp	r3, #0
 8013c88:	d01b      	beq.n	8013cc2 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8013c8a:	683b      	ldr	r3, [r7, #0]
 8013c8c:	1e5a      	subs	r2, r3, #1
 8013c8e:	69fb      	ldr	r3, [r7, #28]
 8013c90:	fbb2 f2f3 	udiv	r2, r2, r3
 8013c94:	6a3b      	ldr	r3, [r7, #32]
 8013c96:	1e59      	subs	r1, r3, #1
 8013c98:	69fb      	ldr	r3, [r7, #28]
 8013c9a:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8013c9e:	429a      	cmp	r2, r3
 8013ca0:	d30f      	bcc.n	8013cc2 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8013ca2:	6a3b      	ldr	r3, [r7, #32]
 8013ca4:	1e5a      	subs	r2, r3, #1
 8013ca6:	69fb      	ldr	r3, [r7, #28]
 8013ca8:	425b      	negs	r3, r3
 8013caa:	401a      	ands	r2, r3
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8013cb0:	687b      	ldr	r3, [r7, #4]
 8013cb2:	699b      	ldr	r3, [r3, #24]
 8013cb4:	683a      	ldr	r2, [r7, #0]
 8013cb6:	1ad3      	subs	r3, r2, r3
 8013cb8:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	69db      	ldr	r3, [r3, #28]
 8013cbe:	63bb      	str	r3, [r7, #56]	; 0x38
 8013cc0:	e022      	b.n	8013d08 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	689b      	ldr	r3, [r3, #8]
 8013cc6:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8013cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013cca:	2b00      	cmp	r3, #0
 8013ccc:	d119      	bne.n	8013d02 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	2100      	movs	r1, #0
 8013cd2:	4618      	mov	r0, r3
 8013cd4:	f7fe f84e 	bl	8011d74 <create_chain>
 8013cd8:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8013cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013cdc:	2b01      	cmp	r3, #1
 8013cde:	d104      	bne.n	8013cea <f_lseek+0x2a2>
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	2202      	movs	r2, #2
 8013ce4:	755a      	strb	r2, [r3, #21]
 8013ce6:	2302      	movs	r3, #2
 8013ce8:	e0ce      	b.n	8013e88 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013cf0:	d104      	bne.n	8013cfc <f_lseek+0x2b4>
 8013cf2:	687b      	ldr	r3, [r7, #4]
 8013cf4:	2201      	movs	r2, #1
 8013cf6:	755a      	strb	r2, [r3, #21]
 8013cf8:	2301      	movs	r3, #1
 8013cfa:	e0c5      	b.n	8013e88 <f_lseek+0x440>
					fp->obj.sclust = clst;
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013d00:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8013d02:	687b      	ldr	r3, [r7, #4]
 8013d04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013d06:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8013d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d0a:	2b00      	cmp	r3, #0
 8013d0c:	d067      	beq.n	8013dde <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8013d0e:	e03a      	b.n	8013d86 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8013d10:	683a      	ldr	r2, [r7, #0]
 8013d12:	69fb      	ldr	r3, [r7, #28]
 8013d14:	1ad3      	subs	r3, r2, r3
 8013d16:	603b      	str	r3, [r7, #0]
 8013d18:	687b      	ldr	r3, [r7, #4]
 8013d1a:	699a      	ldr	r2, [r3, #24]
 8013d1c:	69fb      	ldr	r3, [r7, #28]
 8013d1e:	441a      	add	r2, r3
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	7d1b      	ldrb	r3, [r3, #20]
 8013d28:	f003 0302 	and.w	r3, r3, #2
 8013d2c:	2b00      	cmp	r3, #0
 8013d2e:	d00b      	beq.n	8013d48 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013d34:	4618      	mov	r0, r3
 8013d36:	f7fe f81d 	bl	8011d74 <create_chain>
 8013d3a:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8013d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d3e:	2b00      	cmp	r3, #0
 8013d40:	d108      	bne.n	8013d54 <f_lseek+0x30c>
							ofs = 0; break;
 8013d42:	2300      	movs	r3, #0
 8013d44:	603b      	str	r3, [r7, #0]
 8013d46:	e022      	b.n	8013d8e <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8013d48:	687b      	ldr	r3, [r7, #4]
 8013d4a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013d4c:	4618      	mov	r0, r3
 8013d4e:	f7fd fdbc 	bl	80118ca <get_fat>
 8013d52:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d5a:	d104      	bne.n	8013d66 <f_lseek+0x31e>
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	2201      	movs	r2, #1
 8013d60:	755a      	strb	r2, [r3, #21]
 8013d62:	2301      	movs	r3, #1
 8013d64:	e090      	b.n	8013e88 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8013d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d68:	2b01      	cmp	r3, #1
 8013d6a:	d904      	bls.n	8013d76 <f_lseek+0x32e>
 8013d6c:	68bb      	ldr	r3, [r7, #8]
 8013d6e:	69db      	ldr	r3, [r3, #28]
 8013d70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013d72:	429a      	cmp	r2, r3
 8013d74:	d304      	bcc.n	8013d80 <f_lseek+0x338>
 8013d76:	687b      	ldr	r3, [r7, #4]
 8013d78:	2202      	movs	r2, #2
 8013d7a:	755a      	strb	r2, [r3, #21]
 8013d7c:	2302      	movs	r3, #2
 8013d7e:	e083      	b.n	8013e88 <f_lseek+0x440>
					fp->clust = clst;
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013d84:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8013d86:	683a      	ldr	r2, [r7, #0]
 8013d88:	69fb      	ldr	r3, [r7, #28]
 8013d8a:	429a      	cmp	r2, r3
 8013d8c:	d8c0      	bhi.n	8013d10 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	699a      	ldr	r2, [r3, #24]
 8013d92:	683b      	ldr	r3, [r7, #0]
 8013d94:	441a      	add	r2, r3
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8013d9a:	68bb      	ldr	r3, [r7, #8]
 8013d9c:	899b      	ldrh	r3, [r3, #12]
 8013d9e:	461a      	mov	r2, r3
 8013da0:	683b      	ldr	r3, [r7, #0]
 8013da2:	fbb3 f1f2 	udiv	r1, r3, r2
 8013da6:	fb02 f201 	mul.w	r2, r2, r1
 8013daa:	1a9b      	subs	r3, r3, r2
 8013dac:	2b00      	cmp	r3, #0
 8013dae:	d016      	beq.n	8013dde <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8013db0:	68bb      	ldr	r3, [r7, #8]
 8013db2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013db4:	4618      	mov	r0, r3
 8013db6:	f7fd fd69 	bl	801188c <clust2sect>
 8013dba:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8013dbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013dbe:	2b00      	cmp	r3, #0
 8013dc0:	d104      	bne.n	8013dcc <f_lseek+0x384>
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	2202      	movs	r2, #2
 8013dc6:	755a      	strb	r2, [r3, #21]
 8013dc8:	2302      	movs	r3, #2
 8013dca:	e05d      	b.n	8013e88 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8013dcc:	68bb      	ldr	r3, [r7, #8]
 8013dce:	899b      	ldrh	r3, [r3, #12]
 8013dd0:	461a      	mov	r2, r3
 8013dd2:	683b      	ldr	r3, [r7, #0]
 8013dd4:	fbb3 f3f2 	udiv	r3, r3, r2
 8013dd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013dda:	4413      	add	r3, r2
 8013ddc:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8013dde:	687b      	ldr	r3, [r7, #4]
 8013de0:	699a      	ldr	r2, [r3, #24]
 8013de2:	687b      	ldr	r3, [r7, #4]
 8013de4:	68db      	ldr	r3, [r3, #12]
 8013de6:	429a      	cmp	r2, r3
 8013de8:	d90a      	bls.n	8013e00 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	699a      	ldr	r2, [r3, #24]
 8013dee:	687b      	ldr	r3, [r7, #4]
 8013df0:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	7d1b      	ldrb	r3, [r3, #20]
 8013df6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013dfa:	b2da      	uxtb	r2, r3
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	699b      	ldr	r3, [r3, #24]
 8013e04:	68ba      	ldr	r2, [r7, #8]
 8013e06:	8992      	ldrh	r2, [r2, #12]
 8013e08:	fbb3 f1f2 	udiv	r1, r3, r2
 8013e0c:	fb02 f201 	mul.w	r2, r2, r1
 8013e10:	1a9b      	subs	r3, r3, r2
 8013e12:	2b00      	cmp	r3, #0
 8013e14:	d036      	beq.n	8013e84 <f_lseek+0x43c>
 8013e16:	687b      	ldr	r3, [r7, #4]
 8013e18:	6a1b      	ldr	r3, [r3, #32]
 8013e1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013e1c:	429a      	cmp	r2, r3
 8013e1e:	d031      	beq.n	8013e84 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8013e20:	687b      	ldr	r3, [r7, #4]
 8013e22:	7d1b      	ldrb	r3, [r3, #20]
 8013e24:	b25b      	sxtb	r3, r3
 8013e26:	2b00      	cmp	r3, #0
 8013e28:	da18      	bge.n	8013e5c <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013e2a:	68bb      	ldr	r3, [r7, #8]
 8013e2c:	7858      	ldrb	r0, [r3, #1]
 8013e2e:	687b      	ldr	r3, [r7, #4]
 8013e30:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013e34:	687b      	ldr	r3, [r7, #4]
 8013e36:	6a1a      	ldr	r2, [r3, #32]
 8013e38:	2301      	movs	r3, #1
 8013e3a:	f7fd f99b 	bl	8011174 <disk_write>
 8013e3e:	4603      	mov	r3, r0
 8013e40:	2b00      	cmp	r3, #0
 8013e42:	d004      	beq.n	8013e4e <f_lseek+0x406>
 8013e44:	687b      	ldr	r3, [r7, #4]
 8013e46:	2201      	movs	r2, #1
 8013e48:	755a      	strb	r2, [r3, #21]
 8013e4a:	2301      	movs	r3, #1
 8013e4c:	e01c      	b.n	8013e88 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013e4e:	687b      	ldr	r3, [r7, #4]
 8013e50:	7d1b      	ldrb	r3, [r3, #20]
 8013e52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013e56:	b2da      	uxtb	r2, r3
 8013e58:	687b      	ldr	r3, [r7, #4]
 8013e5a:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8013e5c:	68bb      	ldr	r3, [r7, #8]
 8013e5e:	7858      	ldrb	r0, [r3, #1]
 8013e60:	687b      	ldr	r3, [r7, #4]
 8013e62:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013e66:	2301      	movs	r3, #1
 8013e68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013e6a:	f7fd f963 	bl	8011134 <disk_read>
 8013e6e:	4603      	mov	r3, r0
 8013e70:	2b00      	cmp	r3, #0
 8013e72:	d004      	beq.n	8013e7e <f_lseek+0x436>
 8013e74:	687b      	ldr	r3, [r7, #4]
 8013e76:	2201      	movs	r2, #1
 8013e78:	755a      	strb	r2, [r3, #21]
 8013e7a:	2301      	movs	r3, #1
 8013e7c:	e004      	b.n	8013e88 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8013e7e:	687b      	ldr	r3, [r7, #4]
 8013e80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013e82:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8013e84:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8013e88:	4618      	mov	r0, r3
 8013e8a:	3740      	adds	r7, #64	; 0x40
 8013e8c:	46bd      	mov	sp, r7
 8013e8e:	bd80      	pop	{r7, pc}

08013e90 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8013e90:	b580      	push	{r7, lr}
 8013e92:	b09e      	sub	sp, #120	; 0x78
 8013e94:	af00      	add	r7, sp, #0
 8013e96:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8013e98:	2300      	movs	r3, #0
 8013e9a:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8013e9c:	f107 010c 	add.w	r1, r7, #12
 8013ea0:	1d3b      	adds	r3, r7, #4
 8013ea2:	2202      	movs	r2, #2
 8013ea4:	4618      	mov	r0, r3
 8013ea6:	f7fe fd17 	bl	80128d8 <find_volume>
 8013eaa:	4603      	mov	r3, r0
 8013eac:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 8013eb0:	68fb      	ldr	r3, [r7, #12]
 8013eb2:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 8013eb4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013eb8:	2b00      	cmp	r3, #0
 8013eba:	f040 80a4 	bne.w	8014006 <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8013ebe:	687a      	ldr	r2, [r7, #4]
 8013ec0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013ec4:	4611      	mov	r1, r2
 8013ec6:	4618      	mov	r0, r3
 8013ec8:	f7fe fbd6 	bl	8012678 <follow_path>
 8013ecc:	4603      	mov	r3, r0
 8013ece:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 8013ed2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013ed6:	2b00      	cmp	r3, #0
 8013ed8:	d108      	bne.n	8013eec <f_unlink+0x5c>
 8013eda:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8013ede:	f003 0320 	and.w	r3, r3, #32
 8013ee2:	2b00      	cmp	r3, #0
 8013ee4:	d002      	beq.n	8013eec <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 8013ee6:	2306      	movs	r3, #6
 8013ee8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8013eec:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013ef0:	2b00      	cmp	r3, #0
 8013ef2:	d108      	bne.n	8013f06 <f_unlink+0x76>
 8013ef4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013ef8:	2102      	movs	r1, #2
 8013efa:	4618      	mov	r0, r3
 8013efc:	f7fd fa78 	bl	80113f0 <chk_lock>
 8013f00:	4603      	mov	r3, r0
 8013f02:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8013f06:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013f0a:	2b00      	cmp	r3, #0
 8013f0c:	d17b      	bne.n	8014006 <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8013f0e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8013f12:	b25b      	sxtb	r3, r3
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	da03      	bge.n	8013f20 <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8013f18:	2306      	movs	r3, #6
 8013f1a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8013f1e:	e008      	b.n	8013f32 <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8013f20:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8013f24:	f003 0301 	and.w	r3, r3, #1
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	d002      	beq.n	8013f32 <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8013f2c:	2307      	movs	r3, #7
 8013f2e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 8013f32:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013f36:	2b00      	cmp	r3, #0
 8013f38:	d13d      	bne.n	8013fb6 <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8013f3a:	68fb      	ldr	r3, [r7, #12]
 8013f3c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013f3e:	4611      	mov	r1, r2
 8013f40:	4618      	mov	r0, r3
 8013f42:	f7fe f98d 	bl	8012260 <ld_clust>
 8013f46:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8013f48:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8013f4c:	f003 0310 	and.w	r3, r3, #16
 8013f50:	2b00      	cmp	r3, #0
 8013f52:	d030      	beq.n	8013fb6 <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 8013f54:	68fb      	ldr	r3, [r7, #12]
 8013f56:	699b      	ldr	r3, [r3, #24]
 8013f58:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8013f5a:	429a      	cmp	r2, r3
 8013f5c:	d103      	bne.n	8013f66 <f_unlink+0xd6>
						res = FR_DENIED;
 8013f5e:	2307      	movs	r3, #7
 8013f60:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8013f64:	e027      	b.n	8013fb6 <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8013f66:	68fb      	ldr	r3, [r7, #12]
 8013f68:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8013f6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013f6c:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8013f6e:	f107 0310 	add.w	r3, r7, #16
 8013f72:	2100      	movs	r1, #0
 8013f74:	4618      	mov	r0, r3
 8013f76:	f7fd ffcd 	bl	8011f14 <dir_sdi>
 8013f7a:	4603      	mov	r3, r0
 8013f7c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 8013f80:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013f84:	2b00      	cmp	r3, #0
 8013f86:	d116      	bne.n	8013fb6 <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 8013f88:	f107 0310 	add.w	r3, r7, #16
 8013f8c:	2100      	movs	r1, #0
 8013f8e:	4618      	mov	r0, r3
 8013f90:	f7fe f9a5 	bl	80122de <dir_read>
 8013f94:	4603      	mov	r3, r0
 8013f96:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8013f9a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013f9e:	2b00      	cmp	r3, #0
 8013fa0:	d102      	bne.n	8013fa8 <f_unlink+0x118>
 8013fa2:	2307      	movs	r3, #7
 8013fa4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8013fa8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013fac:	2b04      	cmp	r3, #4
 8013fae:	d102      	bne.n	8013fb6 <f_unlink+0x126>
 8013fb0:	2300      	movs	r3, #0
 8013fb2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 8013fb6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013fba:	2b00      	cmp	r3, #0
 8013fbc:	d123      	bne.n	8014006 <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8013fbe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013fc2:	4618      	mov	r0, r3
 8013fc4:	f7fe fa6f 	bl	80124a6 <dir_remove>
 8013fc8:	4603      	mov	r3, r0
 8013fca:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8013fce:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013fd2:	2b00      	cmp	r3, #0
 8013fd4:	d10c      	bne.n	8013ff0 <f_unlink+0x160>
 8013fd6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013fd8:	2b00      	cmp	r3, #0
 8013fda:	d009      	beq.n	8013ff0 <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8013fdc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013fe0:	2200      	movs	r2, #0
 8013fe2:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8013fe4:	4618      	mov	r0, r3
 8013fe6:	f7fd fe60 	bl	8011caa <remove_chain>
 8013fea:	4603      	mov	r3, r0
 8013fec:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8013ff0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013ff4:	2b00      	cmp	r3, #0
 8013ff6:	d106      	bne.n	8014006 <f_unlink+0x176>
 8013ff8:	68fb      	ldr	r3, [r7, #12]
 8013ffa:	4618      	mov	r0, r3
 8013ffc:	f7fd fbd6 	bl	80117ac <sync_fs>
 8014000:	4603      	mov	r3, r0
 8014002:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8014006:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 801400a:	4618      	mov	r0, r3
 801400c:	3778      	adds	r7, #120	; 0x78
 801400e:	46bd      	mov	sp, r7
 8014010:	bd80      	pop	{r7, pc}
	...

08014014 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8014014:	b580      	push	{r7, lr}
 8014016:	b096      	sub	sp, #88	; 0x58
 8014018:	af00      	add	r7, sp, #0
 801401a:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 801401c:	f107 0108 	add.w	r1, r7, #8
 8014020:	1d3b      	adds	r3, r7, #4
 8014022:	2202      	movs	r2, #2
 8014024:	4618      	mov	r0, r3
 8014026:	f7fe fc57 	bl	80128d8 <find_volume>
 801402a:	4603      	mov	r3, r0
 801402c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 8014030:	68bb      	ldr	r3, [r7, #8]
 8014032:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8014034:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014038:	2b00      	cmp	r3, #0
 801403a:	f040 80fe 	bne.w	801423a <f_mkdir+0x226>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 801403e:	687a      	ldr	r2, [r7, #4]
 8014040:	f107 030c 	add.w	r3, r7, #12
 8014044:	4611      	mov	r1, r2
 8014046:	4618      	mov	r0, r3
 8014048:	f7fe fb16 	bl	8012678 <follow_path>
 801404c:	4603      	mov	r3, r0
 801404e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8014052:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014056:	2b00      	cmp	r3, #0
 8014058:	d102      	bne.n	8014060 <f_mkdir+0x4c>
 801405a:	2308      	movs	r3, #8
 801405c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 8014060:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014064:	2b04      	cmp	r3, #4
 8014066:	d108      	bne.n	801407a <f_mkdir+0x66>
 8014068:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801406c:	f003 0320 	and.w	r3, r3, #32
 8014070:	2b00      	cmp	r3, #0
 8014072:	d002      	beq.n	801407a <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 8014074:	2306      	movs	r3, #6
 8014076:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 801407a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801407e:	2b04      	cmp	r3, #4
 8014080:	f040 80db 	bne.w	801423a <f_mkdir+0x226>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8014084:	f107 030c 	add.w	r3, r7, #12
 8014088:	2100      	movs	r1, #0
 801408a:	4618      	mov	r0, r3
 801408c:	f7fd fe72 	bl	8011d74 <create_chain>
 8014090:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8014092:	68bb      	ldr	r3, [r7, #8]
 8014094:	895b      	ldrh	r3, [r3, #10]
 8014096:	461a      	mov	r2, r3
 8014098:	68bb      	ldr	r3, [r7, #8]
 801409a:	899b      	ldrh	r3, [r3, #12]
 801409c:	fb03 f302 	mul.w	r3, r3, r2
 80140a0:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 80140a2:	2300      	movs	r3, #0
 80140a4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 80140a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80140aa:	2b00      	cmp	r3, #0
 80140ac:	d102      	bne.n	80140b4 <f_mkdir+0xa0>
 80140ae:	2307      	movs	r3, #7
 80140b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 80140b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80140b6:	2b01      	cmp	r3, #1
 80140b8:	d102      	bne.n	80140c0 <f_mkdir+0xac>
 80140ba:	2302      	movs	r3, #2
 80140bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 80140c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80140c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80140c6:	d102      	bne.n	80140ce <f_mkdir+0xba>
 80140c8:	2301      	movs	r3, #1
 80140ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 80140ce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80140d2:	2b00      	cmp	r3, #0
 80140d4:	d106      	bne.n	80140e4 <f_mkdir+0xd0>
 80140d6:	68bb      	ldr	r3, [r7, #8]
 80140d8:	4618      	mov	r0, r3
 80140da:	f7fd faf5 	bl	80116c8 <sync_window>
 80140de:	4603      	mov	r3, r0
 80140e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 80140e4:	4b58      	ldr	r3, [pc, #352]	; (8014248 <f_mkdir+0x234>)
 80140e6:	643b      	str	r3, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 80140e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80140ec:	2b00      	cmp	r3, #0
 80140ee:	d16c      	bne.n	80141ca <f_mkdir+0x1b6>
				dsc = clust2sect(fs, dcl);
 80140f0:	68bb      	ldr	r3, [r7, #8]
 80140f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80140f4:	4618      	mov	r0, r3
 80140f6:	f7fd fbc9 	bl	801188c <clust2sect>
 80140fa:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 80140fc:	68bb      	ldr	r3, [r7, #8]
 80140fe:	3338      	adds	r3, #56	; 0x38
 8014100:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 8014102:	68bb      	ldr	r3, [r7, #8]
 8014104:	899b      	ldrh	r3, [r3, #12]
 8014106:	461a      	mov	r2, r3
 8014108:	2100      	movs	r1, #0
 801410a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801410c:	f7fd f913 	bl	8011336 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8014110:	220b      	movs	r2, #11
 8014112:	2120      	movs	r1, #32
 8014114:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8014116:	f7fd f90e 	bl	8011336 <mem_set>
					dir[DIR_Name] = '.';
 801411a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801411c:	222e      	movs	r2, #46	; 0x2e
 801411e:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8014120:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014122:	330b      	adds	r3, #11
 8014124:	2210      	movs	r2, #16
 8014126:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8014128:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801412a:	3316      	adds	r3, #22
 801412c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801412e:	4618      	mov	r0, r3
 8014130:	f7fd f8b4 	bl	801129c <st_dword>
					st_clust(fs, dir, dcl);
 8014134:	68bb      	ldr	r3, [r7, #8]
 8014136:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014138:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801413a:	4618      	mov	r0, r3
 801413c:	f7fe f8af 	bl	801229e <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8014140:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014142:	3320      	adds	r3, #32
 8014144:	2220      	movs	r2, #32
 8014146:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014148:	4618      	mov	r0, r3
 801414a:	f7fd f8d3 	bl	80112f4 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 801414e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014150:	3321      	adds	r3, #33	; 0x21
 8014152:	222e      	movs	r2, #46	; 0x2e
 8014154:	701a      	strb	r2, [r3, #0]
 8014156:	697b      	ldr	r3, [r7, #20]
 8014158:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 801415a:	68bb      	ldr	r3, [r7, #8]
 801415c:	781b      	ldrb	r3, [r3, #0]
 801415e:	2b03      	cmp	r3, #3
 8014160:	d106      	bne.n	8014170 <f_mkdir+0x15c>
 8014162:	68bb      	ldr	r3, [r7, #8]
 8014164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014166:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014168:	429a      	cmp	r2, r3
 801416a:	d101      	bne.n	8014170 <f_mkdir+0x15c>
 801416c:	2300      	movs	r3, #0
 801416e:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 8014170:	68b8      	ldr	r0, [r7, #8]
 8014172:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014174:	3320      	adds	r3, #32
 8014176:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014178:	4619      	mov	r1, r3
 801417a:	f7fe f890 	bl	801229e <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 801417e:	68bb      	ldr	r3, [r7, #8]
 8014180:	895b      	ldrh	r3, [r3, #10]
 8014182:	653b      	str	r3, [r7, #80]	; 0x50
 8014184:	e01c      	b.n	80141c0 <f_mkdir+0x1ac>
					fs->winsect = dsc++;
 8014186:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014188:	1c5a      	adds	r2, r3, #1
 801418a:	64fa      	str	r2, [r7, #76]	; 0x4c
 801418c:	68ba      	ldr	r2, [r7, #8]
 801418e:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 8014190:	68bb      	ldr	r3, [r7, #8]
 8014192:	2201      	movs	r2, #1
 8014194:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8014196:	68bb      	ldr	r3, [r7, #8]
 8014198:	4618      	mov	r0, r3
 801419a:	f7fd fa95 	bl	80116c8 <sync_window>
 801419e:	4603      	mov	r3, r0
 80141a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 80141a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80141a8:	2b00      	cmp	r3, #0
 80141aa:	d10d      	bne.n	80141c8 <f_mkdir+0x1b4>
					mem_set(dir, 0, SS(fs));
 80141ac:	68bb      	ldr	r3, [r7, #8]
 80141ae:	899b      	ldrh	r3, [r3, #12]
 80141b0:	461a      	mov	r2, r3
 80141b2:	2100      	movs	r1, #0
 80141b4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80141b6:	f7fd f8be 	bl	8011336 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80141ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80141bc:	3b01      	subs	r3, #1
 80141be:	653b      	str	r3, [r7, #80]	; 0x50
 80141c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80141c2:	2b00      	cmp	r3, #0
 80141c4:	d1df      	bne.n	8014186 <f_mkdir+0x172>
 80141c6:	e000      	b.n	80141ca <f_mkdir+0x1b6>
					if (res != FR_OK) break;
 80141c8:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 80141ca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80141ce:	2b00      	cmp	r3, #0
 80141d0:	d107      	bne.n	80141e2 <f_mkdir+0x1ce>
				res = dir_register(&dj);	/* Register the object to the directoy */
 80141d2:	f107 030c 	add.w	r3, r7, #12
 80141d6:	4618      	mov	r0, r3
 80141d8:	f7fe f933 	bl	8012442 <dir_register>
 80141dc:	4603      	mov	r3, r0
 80141de:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 80141e2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80141e6:	2b00      	cmp	r3, #0
 80141e8:	d120      	bne.n	801422c <f_mkdir+0x218>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 80141ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141ec:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 80141ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80141f0:	3316      	adds	r3, #22
 80141f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80141f4:	4618      	mov	r0, r3
 80141f6:	f7fd f851 	bl	801129c <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 80141fa:	68bb      	ldr	r3, [r7, #8]
 80141fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80141fe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014200:	4618      	mov	r0, r3
 8014202:	f7fe f84c 	bl	801229e <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8014206:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014208:	330b      	adds	r3, #11
 801420a:	2210      	movs	r2, #16
 801420c:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 801420e:	68bb      	ldr	r3, [r7, #8]
 8014210:	2201      	movs	r2, #1
 8014212:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8014214:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014218:	2b00      	cmp	r3, #0
 801421a:	d10e      	bne.n	801423a <f_mkdir+0x226>
					res = sync_fs(fs);
 801421c:	68bb      	ldr	r3, [r7, #8]
 801421e:	4618      	mov	r0, r3
 8014220:	f7fd fac4 	bl	80117ac <sync_fs>
 8014224:	4603      	mov	r3, r0
 8014226:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 801422a:	e006      	b.n	801423a <f_mkdir+0x226>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 801422c:	f107 030c 	add.w	r3, r7, #12
 8014230:	2200      	movs	r2, #0
 8014232:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014234:	4618      	mov	r0, r3
 8014236:	f7fd fd38 	bl	8011caa <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 801423a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 801423e:	4618      	mov	r0, r3
 8014240:	3758      	adds	r7, #88	; 0x58
 8014242:	46bd      	mov	sp, r7
 8014244:	bd80      	pop	{r7, pc}
 8014246:	bf00      	nop
 8014248:	274a0000 	.word	0x274a0000

0801424c <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 801424c:	b580      	push	{r7, lr}
 801424e:	b088      	sub	sp, #32
 8014250:	af00      	add	r7, sp, #0
 8014252:	60f8      	str	r0, [r7, #12]
 8014254:	60b9      	str	r1, [r7, #8]
 8014256:	607a      	str	r2, [r7, #4]
	int n = 0;
 8014258:	2300      	movs	r3, #0
 801425a:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 801425c:	68fb      	ldr	r3, [r7, #12]
 801425e:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8014260:	e017      	b.n	8014292 <f_gets+0x46>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8014262:	f107 0310 	add.w	r3, r7, #16
 8014266:	f107 0114 	add.w	r1, r7, #20
 801426a:	2201      	movs	r2, #1
 801426c:	6878      	ldr	r0, [r7, #4]
 801426e:	f7ff f803 	bl	8013278 <f_read>
		if (rc != 1) break;
 8014272:	693b      	ldr	r3, [r7, #16]
 8014274:	2b01      	cmp	r3, #1
 8014276:	d112      	bne.n	801429e <f_gets+0x52>
		c = s[0];
 8014278:	7d3b      	ldrb	r3, [r7, #20]
 801427a:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
		*p++ = c;
 801427c:	69bb      	ldr	r3, [r7, #24]
 801427e:	1c5a      	adds	r2, r3, #1
 8014280:	61ba      	str	r2, [r7, #24]
 8014282:	7dfa      	ldrb	r2, [r7, #23]
 8014284:	701a      	strb	r2, [r3, #0]
		n++;
 8014286:	69fb      	ldr	r3, [r7, #28]
 8014288:	3301      	adds	r3, #1
 801428a:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 801428c:	7dfb      	ldrb	r3, [r7, #23]
 801428e:	2b0a      	cmp	r3, #10
 8014290:	d007      	beq.n	80142a2 <f_gets+0x56>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8014292:	68bb      	ldr	r3, [r7, #8]
 8014294:	3b01      	subs	r3, #1
 8014296:	69fa      	ldr	r2, [r7, #28]
 8014298:	429a      	cmp	r2, r3
 801429a:	dbe2      	blt.n	8014262 <f_gets+0x16>
 801429c:	e002      	b.n	80142a4 <f_gets+0x58>
		if (rc != 1) break;
 801429e:	bf00      	nop
 80142a0:	e000      	b.n	80142a4 <f_gets+0x58>
		if (c == '\n') break;		/* Break on EOL */
 80142a2:	bf00      	nop
	}
	*p = 0;
 80142a4:	69bb      	ldr	r3, [r7, #24]
 80142a6:	2200      	movs	r2, #0
 80142a8:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 80142aa:	69fb      	ldr	r3, [r7, #28]
 80142ac:	2b00      	cmp	r3, #0
 80142ae:	d001      	beq.n	80142b4 <f_gets+0x68>
 80142b0:	68fb      	ldr	r3, [r7, #12]
 80142b2:	e000      	b.n	80142b6 <f_gets+0x6a>
 80142b4:	2300      	movs	r3, #0
}
 80142b6:	4618      	mov	r0, r3
 80142b8:	3720      	adds	r7, #32
 80142ba:	46bd      	mov	sp, r7
 80142bc:	bd80      	pop	{r7, pc}
	...

080142c0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80142c0:	b480      	push	{r7}
 80142c2:	b087      	sub	sp, #28
 80142c4:	af00      	add	r7, sp, #0
 80142c6:	60f8      	str	r0, [r7, #12]
 80142c8:	60b9      	str	r1, [r7, #8]
 80142ca:	4613      	mov	r3, r2
 80142cc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80142ce:	2301      	movs	r3, #1
 80142d0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80142d2:	2300      	movs	r3, #0
 80142d4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80142d6:	4b1f      	ldr	r3, [pc, #124]	; (8014354 <FATFS_LinkDriverEx+0x94>)
 80142d8:	7a5b      	ldrb	r3, [r3, #9]
 80142da:	b2db      	uxtb	r3, r3
 80142dc:	2b00      	cmp	r3, #0
 80142de:	d131      	bne.n	8014344 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80142e0:	4b1c      	ldr	r3, [pc, #112]	; (8014354 <FATFS_LinkDriverEx+0x94>)
 80142e2:	7a5b      	ldrb	r3, [r3, #9]
 80142e4:	b2db      	uxtb	r3, r3
 80142e6:	461a      	mov	r2, r3
 80142e8:	4b1a      	ldr	r3, [pc, #104]	; (8014354 <FATFS_LinkDriverEx+0x94>)
 80142ea:	2100      	movs	r1, #0
 80142ec:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80142ee:	4b19      	ldr	r3, [pc, #100]	; (8014354 <FATFS_LinkDriverEx+0x94>)
 80142f0:	7a5b      	ldrb	r3, [r3, #9]
 80142f2:	b2db      	uxtb	r3, r3
 80142f4:	4a17      	ldr	r2, [pc, #92]	; (8014354 <FATFS_LinkDriverEx+0x94>)
 80142f6:	009b      	lsls	r3, r3, #2
 80142f8:	4413      	add	r3, r2
 80142fa:	68fa      	ldr	r2, [r7, #12]
 80142fc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80142fe:	4b15      	ldr	r3, [pc, #84]	; (8014354 <FATFS_LinkDriverEx+0x94>)
 8014300:	7a5b      	ldrb	r3, [r3, #9]
 8014302:	b2db      	uxtb	r3, r3
 8014304:	461a      	mov	r2, r3
 8014306:	4b13      	ldr	r3, [pc, #76]	; (8014354 <FATFS_LinkDriverEx+0x94>)
 8014308:	4413      	add	r3, r2
 801430a:	79fa      	ldrb	r2, [r7, #7]
 801430c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801430e:	4b11      	ldr	r3, [pc, #68]	; (8014354 <FATFS_LinkDriverEx+0x94>)
 8014310:	7a5b      	ldrb	r3, [r3, #9]
 8014312:	b2db      	uxtb	r3, r3
 8014314:	1c5a      	adds	r2, r3, #1
 8014316:	b2d1      	uxtb	r1, r2
 8014318:	4a0e      	ldr	r2, [pc, #56]	; (8014354 <FATFS_LinkDriverEx+0x94>)
 801431a:	7251      	strb	r1, [r2, #9]
 801431c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801431e:	7dbb      	ldrb	r3, [r7, #22]
 8014320:	3330      	adds	r3, #48	; 0x30
 8014322:	b2da      	uxtb	r2, r3
 8014324:	68bb      	ldr	r3, [r7, #8]
 8014326:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8014328:	68bb      	ldr	r3, [r7, #8]
 801432a:	3301      	adds	r3, #1
 801432c:	223a      	movs	r2, #58	; 0x3a
 801432e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8014330:	68bb      	ldr	r3, [r7, #8]
 8014332:	3302      	adds	r3, #2
 8014334:	222f      	movs	r2, #47	; 0x2f
 8014336:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8014338:	68bb      	ldr	r3, [r7, #8]
 801433a:	3303      	adds	r3, #3
 801433c:	2200      	movs	r2, #0
 801433e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8014340:	2300      	movs	r3, #0
 8014342:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8014344:	7dfb      	ldrb	r3, [r7, #23]
}
 8014346:	4618      	mov	r0, r3
 8014348:	371c      	adds	r7, #28
 801434a:	46bd      	mov	sp, r7
 801434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014350:	4770      	bx	lr
 8014352:	bf00      	nop
 8014354:	2003d508 	.word	0x2003d508

08014358 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8014358:	b580      	push	{r7, lr}
 801435a:	b082      	sub	sp, #8
 801435c:	af00      	add	r7, sp, #0
 801435e:	6078      	str	r0, [r7, #4]
 8014360:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8014362:	2200      	movs	r2, #0
 8014364:	6839      	ldr	r1, [r7, #0]
 8014366:	6878      	ldr	r0, [r7, #4]
 8014368:	f7ff ffaa 	bl	80142c0 <FATFS_LinkDriverEx>
 801436c:	4603      	mov	r3, r0
}
 801436e:	4618      	mov	r0, r3
 8014370:	3708      	adds	r7, #8
 8014372:	46bd      	mov	sp, r7
 8014374:	bd80      	pop	{r7, pc}

08014376 <__cxa_guard_acquire>:
 8014376:	6803      	ldr	r3, [r0, #0]
 8014378:	07db      	lsls	r3, r3, #31
 801437a:	d406      	bmi.n	801438a <__cxa_guard_acquire+0x14>
 801437c:	7843      	ldrb	r3, [r0, #1]
 801437e:	b103      	cbz	r3, 8014382 <__cxa_guard_acquire+0xc>
 8014380:	deff      	udf	#255	; 0xff
 8014382:	2301      	movs	r3, #1
 8014384:	7043      	strb	r3, [r0, #1]
 8014386:	4618      	mov	r0, r3
 8014388:	4770      	bx	lr
 801438a:	2000      	movs	r0, #0
 801438c:	4770      	bx	lr

0801438e <__cxa_guard_release>:
 801438e:	2301      	movs	r3, #1
 8014390:	6003      	str	r3, [r0, #0]
 8014392:	4770      	bx	lr
 8014394:	0000      	movs	r0, r0
	...

08014398 <cos>:
 8014398:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801439a:	ec51 0b10 	vmov	r0, r1, d0
 801439e:	4a1e      	ldr	r2, [pc, #120]	; (8014418 <cos+0x80>)
 80143a0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80143a4:	4293      	cmp	r3, r2
 80143a6:	dc06      	bgt.n	80143b6 <cos+0x1e>
 80143a8:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8014410 <cos+0x78>
 80143ac:	f000 faa4 	bl	80148f8 <__kernel_cos>
 80143b0:	ec51 0b10 	vmov	r0, r1, d0
 80143b4:	e007      	b.n	80143c6 <cos+0x2e>
 80143b6:	4a19      	ldr	r2, [pc, #100]	; (801441c <cos+0x84>)
 80143b8:	4293      	cmp	r3, r2
 80143ba:	dd09      	ble.n	80143d0 <cos+0x38>
 80143bc:	ee10 2a10 	vmov	r2, s0
 80143c0:	460b      	mov	r3, r1
 80143c2:	f7eb ff79 	bl	80002b8 <__aeabi_dsub>
 80143c6:	ec41 0b10 	vmov	d0, r0, r1
 80143ca:	b005      	add	sp, #20
 80143cc:	f85d fb04 	ldr.w	pc, [sp], #4
 80143d0:	4668      	mov	r0, sp
 80143d2:	f000 f89d 	bl	8014510 <__ieee754_rem_pio2>
 80143d6:	f000 0003 	and.w	r0, r0, #3
 80143da:	2801      	cmp	r0, #1
 80143dc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80143e0:	ed9d 0b00 	vldr	d0, [sp]
 80143e4:	d007      	beq.n	80143f6 <cos+0x5e>
 80143e6:	2802      	cmp	r0, #2
 80143e8:	d00e      	beq.n	8014408 <cos+0x70>
 80143ea:	2800      	cmp	r0, #0
 80143ec:	d0de      	beq.n	80143ac <cos+0x14>
 80143ee:	2001      	movs	r0, #1
 80143f0:	f000 fe8a 	bl	8015108 <__kernel_sin>
 80143f4:	e7dc      	b.n	80143b0 <cos+0x18>
 80143f6:	f000 fe87 	bl	8015108 <__kernel_sin>
 80143fa:	ec53 2b10 	vmov	r2, r3, d0
 80143fe:	ee10 0a10 	vmov	r0, s0
 8014402:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8014406:	e7de      	b.n	80143c6 <cos+0x2e>
 8014408:	f000 fa76 	bl	80148f8 <__kernel_cos>
 801440c:	e7f5      	b.n	80143fa <cos+0x62>
 801440e:	bf00      	nop
	...
 8014418:	3fe921fb 	.word	0x3fe921fb
 801441c:	7fefffff 	.word	0x7fefffff

08014420 <sin>:
 8014420:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014422:	ec51 0b10 	vmov	r0, r1, d0
 8014426:	4a20      	ldr	r2, [pc, #128]	; (80144a8 <sin+0x88>)
 8014428:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801442c:	4293      	cmp	r3, r2
 801442e:	dc07      	bgt.n	8014440 <sin+0x20>
 8014430:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 80144a0 <sin+0x80>
 8014434:	2000      	movs	r0, #0
 8014436:	f000 fe67 	bl	8015108 <__kernel_sin>
 801443a:	ec51 0b10 	vmov	r0, r1, d0
 801443e:	e007      	b.n	8014450 <sin+0x30>
 8014440:	4a1a      	ldr	r2, [pc, #104]	; (80144ac <sin+0x8c>)
 8014442:	4293      	cmp	r3, r2
 8014444:	dd09      	ble.n	801445a <sin+0x3a>
 8014446:	ee10 2a10 	vmov	r2, s0
 801444a:	460b      	mov	r3, r1
 801444c:	f7eb ff34 	bl	80002b8 <__aeabi_dsub>
 8014450:	ec41 0b10 	vmov	d0, r0, r1
 8014454:	b005      	add	sp, #20
 8014456:	f85d fb04 	ldr.w	pc, [sp], #4
 801445a:	4668      	mov	r0, sp
 801445c:	f000 f858 	bl	8014510 <__ieee754_rem_pio2>
 8014460:	f000 0003 	and.w	r0, r0, #3
 8014464:	2801      	cmp	r0, #1
 8014466:	ed9d 1b02 	vldr	d1, [sp, #8]
 801446a:	ed9d 0b00 	vldr	d0, [sp]
 801446e:	d004      	beq.n	801447a <sin+0x5a>
 8014470:	2802      	cmp	r0, #2
 8014472:	d005      	beq.n	8014480 <sin+0x60>
 8014474:	b970      	cbnz	r0, 8014494 <sin+0x74>
 8014476:	2001      	movs	r0, #1
 8014478:	e7dd      	b.n	8014436 <sin+0x16>
 801447a:	f000 fa3d 	bl	80148f8 <__kernel_cos>
 801447e:	e7dc      	b.n	801443a <sin+0x1a>
 8014480:	2001      	movs	r0, #1
 8014482:	f000 fe41 	bl	8015108 <__kernel_sin>
 8014486:	ec53 2b10 	vmov	r2, r3, d0
 801448a:	ee10 0a10 	vmov	r0, s0
 801448e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8014492:	e7dd      	b.n	8014450 <sin+0x30>
 8014494:	f000 fa30 	bl	80148f8 <__kernel_cos>
 8014498:	e7f5      	b.n	8014486 <sin+0x66>
 801449a:	bf00      	nop
 801449c:	f3af 8000 	nop.w
	...
 80144a8:	3fe921fb 	.word	0x3fe921fb
 80144ac:	7fefffff 	.word	0x7fefffff

080144b0 <tan>:
 80144b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80144b2:	ec51 0b10 	vmov	r0, r1, d0
 80144b6:	4a14      	ldr	r2, [pc, #80]	; (8014508 <tan+0x58>)
 80144b8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80144bc:	4293      	cmp	r3, r2
 80144be:	dc05      	bgt.n	80144cc <tan+0x1c>
 80144c0:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 8014500 <tan+0x50>
 80144c4:	2001      	movs	r0, #1
 80144c6:	f000 fedb 	bl	8015280 <__kernel_tan>
 80144ca:	e009      	b.n	80144e0 <tan+0x30>
 80144cc:	4a0f      	ldr	r2, [pc, #60]	; (801450c <tan+0x5c>)
 80144ce:	4293      	cmp	r3, r2
 80144d0:	dd09      	ble.n	80144e6 <tan+0x36>
 80144d2:	ee10 2a10 	vmov	r2, s0
 80144d6:	460b      	mov	r3, r1
 80144d8:	f7eb feee 	bl	80002b8 <__aeabi_dsub>
 80144dc:	ec41 0b10 	vmov	d0, r0, r1
 80144e0:	b005      	add	sp, #20
 80144e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80144e6:	4668      	mov	r0, sp
 80144e8:	f000 f812 	bl	8014510 <__ieee754_rem_pio2>
 80144ec:	0040      	lsls	r0, r0, #1
 80144ee:	f000 0002 	and.w	r0, r0, #2
 80144f2:	f1c0 0001 	rsb	r0, r0, #1
 80144f6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80144fa:	ed9d 0b00 	vldr	d0, [sp]
 80144fe:	e7e2      	b.n	80144c6 <tan+0x16>
	...
 8014508:	3fe921fb 	.word	0x3fe921fb
 801450c:	7fefffff 	.word	0x7fefffff

08014510 <__ieee754_rem_pio2>:
 8014510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014514:	ec57 6b10 	vmov	r6, r7, d0
 8014518:	4bc3      	ldr	r3, [pc, #780]	; (8014828 <__ieee754_rem_pio2+0x318>)
 801451a:	b08d      	sub	sp, #52	; 0x34
 801451c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8014520:	4598      	cmp	r8, r3
 8014522:	4604      	mov	r4, r0
 8014524:	9704      	str	r7, [sp, #16]
 8014526:	dc07      	bgt.n	8014538 <__ieee754_rem_pio2+0x28>
 8014528:	2200      	movs	r2, #0
 801452a:	2300      	movs	r3, #0
 801452c:	ed84 0b00 	vstr	d0, [r4]
 8014530:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8014534:	2500      	movs	r5, #0
 8014536:	e027      	b.n	8014588 <__ieee754_rem_pio2+0x78>
 8014538:	4bbc      	ldr	r3, [pc, #752]	; (801482c <__ieee754_rem_pio2+0x31c>)
 801453a:	4598      	cmp	r8, r3
 801453c:	dc75      	bgt.n	801462a <__ieee754_rem_pio2+0x11a>
 801453e:	9b04      	ldr	r3, [sp, #16]
 8014540:	4dbb      	ldr	r5, [pc, #748]	; (8014830 <__ieee754_rem_pio2+0x320>)
 8014542:	2b00      	cmp	r3, #0
 8014544:	ee10 0a10 	vmov	r0, s0
 8014548:	a3a9      	add	r3, pc, #676	; (adr r3, 80147f0 <__ieee754_rem_pio2+0x2e0>)
 801454a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801454e:	4639      	mov	r1, r7
 8014550:	dd36      	ble.n	80145c0 <__ieee754_rem_pio2+0xb0>
 8014552:	f7eb feb1 	bl	80002b8 <__aeabi_dsub>
 8014556:	45a8      	cmp	r8, r5
 8014558:	4606      	mov	r6, r0
 801455a:	460f      	mov	r7, r1
 801455c:	d018      	beq.n	8014590 <__ieee754_rem_pio2+0x80>
 801455e:	a3a6      	add	r3, pc, #664	; (adr r3, 80147f8 <__ieee754_rem_pio2+0x2e8>)
 8014560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014564:	f7eb fea8 	bl	80002b8 <__aeabi_dsub>
 8014568:	4602      	mov	r2, r0
 801456a:	460b      	mov	r3, r1
 801456c:	e9c4 2300 	strd	r2, r3, [r4]
 8014570:	4630      	mov	r0, r6
 8014572:	4639      	mov	r1, r7
 8014574:	f7eb fea0 	bl	80002b8 <__aeabi_dsub>
 8014578:	a39f      	add	r3, pc, #636	; (adr r3, 80147f8 <__ieee754_rem_pio2+0x2e8>)
 801457a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801457e:	f7eb fe9b 	bl	80002b8 <__aeabi_dsub>
 8014582:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014586:	2501      	movs	r5, #1
 8014588:	4628      	mov	r0, r5
 801458a:	b00d      	add	sp, #52	; 0x34
 801458c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014590:	a39b      	add	r3, pc, #620	; (adr r3, 8014800 <__ieee754_rem_pio2+0x2f0>)
 8014592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014596:	f7eb fe8f 	bl	80002b8 <__aeabi_dsub>
 801459a:	a39b      	add	r3, pc, #620	; (adr r3, 8014808 <__ieee754_rem_pio2+0x2f8>)
 801459c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145a0:	4606      	mov	r6, r0
 80145a2:	460f      	mov	r7, r1
 80145a4:	f7eb fe88 	bl	80002b8 <__aeabi_dsub>
 80145a8:	4602      	mov	r2, r0
 80145aa:	460b      	mov	r3, r1
 80145ac:	e9c4 2300 	strd	r2, r3, [r4]
 80145b0:	4630      	mov	r0, r6
 80145b2:	4639      	mov	r1, r7
 80145b4:	f7eb fe80 	bl	80002b8 <__aeabi_dsub>
 80145b8:	a393      	add	r3, pc, #588	; (adr r3, 8014808 <__ieee754_rem_pio2+0x2f8>)
 80145ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145be:	e7de      	b.n	801457e <__ieee754_rem_pio2+0x6e>
 80145c0:	f7eb fe7c 	bl	80002bc <__adddf3>
 80145c4:	45a8      	cmp	r8, r5
 80145c6:	4606      	mov	r6, r0
 80145c8:	460f      	mov	r7, r1
 80145ca:	d016      	beq.n	80145fa <__ieee754_rem_pio2+0xea>
 80145cc:	a38a      	add	r3, pc, #552	; (adr r3, 80147f8 <__ieee754_rem_pio2+0x2e8>)
 80145ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145d2:	f7eb fe73 	bl	80002bc <__adddf3>
 80145d6:	4602      	mov	r2, r0
 80145d8:	460b      	mov	r3, r1
 80145da:	e9c4 2300 	strd	r2, r3, [r4]
 80145de:	4630      	mov	r0, r6
 80145e0:	4639      	mov	r1, r7
 80145e2:	f7eb fe69 	bl	80002b8 <__aeabi_dsub>
 80145e6:	a384      	add	r3, pc, #528	; (adr r3, 80147f8 <__ieee754_rem_pio2+0x2e8>)
 80145e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145ec:	f7eb fe66 	bl	80002bc <__adddf3>
 80145f0:	f04f 35ff 	mov.w	r5, #4294967295
 80145f4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80145f8:	e7c6      	b.n	8014588 <__ieee754_rem_pio2+0x78>
 80145fa:	a381      	add	r3, pc, #516	; (adr r3, 8014800 <__ieee754_rem_pio2+0x2f0>)
 80145fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014600:	f7eb fe5c 	bl	80002bc <__adddf3>
 8014604:	a380      	add	r3, pc, #512	; (adr r3, 8014808 <__ieee754_rem_pio2+0x2f8>)
 8014606:	e9d3 2300 	ldrd	r2, r3, [r3]
 801460a:	4606      	mov	r6, r0
 801460c:	460f      	mov	r7, r1
 801460e:	f7eb fe55 	bl	80002bc <__adddf3>
 8014612:	4602      	mov	r2, r0
 8014614:	460b      	mov	r3, r1
 8014616:	e9c4 2300 	strd	r2, r3, [r4]
 801461a:	4630      	mov	r0, r6
 801461c:	4639      	mov	r1, r7
 801461e:	f7eb fe4b 	bl	80002b8 <__aeabi_dsub>
 8014622:	a379      	add	r3, pc, #484	; (adr r3, 8014808 <__ieee754_rem_pio2+0x2f8>)
 8014624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014628:	e7e0      	b.n	80145ec <__ieee754_rem_pio2+0xdc>
 801462a:	4b82      	ldr	r3, [pc, #520]	; (8014834 <__ieee754_rem_pio2+0x324>)
 801462c:	4598      	cmp	r8, r3
 801462e:	f300 80d0 	bgt.w	80147d2 <__ieee754_rem_pio2+0x2c2>
 8014632:	f000 fff1 	bl	8015618 <fabs>
 8014636:	ec57 6b10 	vmov	r6, r7, d0
 801463a:	ee10 0a10 	vmov	r0, s0
 801463e:	a374      	add	r3, pc, #464	; (adr r3, 8014810 <__ieee754_rem_pio2+0x300>)
 8014640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014644:	4639      	mov	r1, r7
 8014646:	f7eb ffef 	bl	8000628 <__aeabi_dmul>
 801464a:	2200      	movs	r2, #0
 801464c:	4b7a      	ldr	r3, [pc, #488]	; (8014838 <__ieee754_rem_pio2+0x328>)
 801464e:	f7eb fe35 	bl	80002bc <__adddf3>
 8014652:	f7ec fa99 	bl	8000b88 <__aeabi_d2iz>
 8014656:	4605      	mov	r5, r0
 8014658:	f7eb ff7c 	bl	8000554 <__aeabi_i2d>
 801465c:	a364      	add	r3, pc, #400	; (adr r3, 80147f0 <__ieee754_rem_pio2+0x2e0>)
 801465e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014662:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014666:	f7eb ffdf 	bl	8000628 <__aeabi_dmul>
 801466a:	4602      	mov	r2, r0
 801466c:	460b      	mov	r3, r1
 801466e:	4630      	mov	r0, r6
 8014670:	4639      	mov	r1, r7
 8014672:	f7eb fe21 	bl	80002b8 <__aeabi_dsub>
 8014676:	a360      	add	r3, pc, #384	; (adr r3, 80147f8 <__ieee754_rem_pio2+0x2e8>)
 8014678:	e9d3 2300 	ldrd	r2, r3, [r3]
 801467c:	4682      	mov	sl, r0
 801467e:	468b      	mov	fp, r1
 8014680:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014684:	f7eb ffd0 	bl	8000628 <__aeabi_dmul>
 8014688:	2d1f      	cmp	r5, #31
 801468a:	4606      	mov	r6, r0
 801468c:	460f      	mov	r7, r1
 801468e:	dc0c      	bgt.n	80146aa <__ieee754_rem_pio2+0x19a>
 8014690:	1e6a      	subs	r2, r5, #1
 8014692:	4b6a      	ldr	r3, [pc, #424]	; (801483c <__ieee754_rem_pio2+0x32c>)
 8014694:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014698:	4543      	cmp	r3, r8
 801469a:	d006      	beq.n	80146aa <__ieee754_rem_pio2+0x19a>
 801469c:	4632      	mov	r2, r6
 801469e:	463b      	mov	r3, r7
 80146a0:	4650      	mov	r0, sl
 80146a2:	4659      	mov	r1, fp
 80146a4:	f7eb fe08 	bl	80002b8 <__aeabi_dsub>
 80146a8:	e00e      	b.n	80146c8 <__ieee754_rem_pio2+0x1b8>
 80146aa:	4632      	mov	r2, r6
 80146ac:	463b      	mov	r3, r7
 80146ae:	4650      	mov	r0, sl
 80146b0:	4659      	mov	r1, fp
 80146b2:	f7eb fe01 	bl	80002b8 <__aeabi_dsub>
 80146b6:	ea4f 5328 	mov.w	r3, r8, asr #20
 80146ba:	9305      	str	r3, [sp, #20]
 80146bc:	9a05      	ldr	r2, [sp, #20]
 80146be:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80146c2:	1ad3      	subs	r3, r2, r3
 80146c4:	2b10      	cmp	r3, #16
 80146c6:	dc02      	bgt.n	80146ce <__ieee754_rem_pio2+0x1be>
 80146c8:	e9c4 0100 	strd	r0, r1, [r4]
 80146cc:	e039      	b.n	8014742 <__ieee754_rem_pio2+0x232>
 80146ce:	a34c      	add	r3, pc, #304	; (adr r3, 8014800 <__ieee754_rem_pio2+0x2f0>)
 80146d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80146d8:	f7eb ffa6 	bl	8000628 <__aeabi_dmul>
 80146dc:	4606      	mov	r6, r0
 80146de:	460f      	mov	r7, r1
 80146e0:	4602      	mov	r2, r0
 80146e2:	460b      	mov	r3, r1
 80146e4:	4650      	mov	r0, sl
 80146e6:	4659      	mov	r1, fp
 80146e8:	f7eb fde6 	bl	80002b8 <__aeabi_dsub>
 80146ec:	4602      	mov	r2, r0
 80146ee:	460b      	mov	r3, r1
 80146f0:	4680      	mov	r8, r0
 80146f2:	4689      	mov	r9, r1
 80146f4:	4650      	mov	r0, sl
 80146f6:	4659      	mov	r1, fp
 80146f8:	f7eb fdde 	bl	80002b8 <__aeabi_dsub>
 80146fc:	4632      	mov	r2, r6
 80146fe:	463b      	mov	r3, r7
 8014700:	f7eb fdda 	bl	80002b8 <__aeabi_dsub>
 8014704:	a340      	add	r3, pc, #256	; (adr r3, 8014808 <__ieee754_rem_pio2+0x2f8>)
 8014706:	e9d3 2300 	ldrd	r2, r3, [r3]
 801470a:	4606      	mov	r6, r0
 801470c:	460f      	mov	r7, r1
 801470e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014712:	f7eb ff89 	bl	8000628 <__aeabi_dmul>
 8014716:	4632      	mov	r2, r6
 8014718:	463b      	mov	r3, r7
 801471a:	f7eb fdcd 	bl	80002b8 <__aeabi_dsub>
 801471e:	4602      	mov	r2, r0
 8014720:	460b      	mov	r3, r1
 8014722:	4606      	mov	r6, r0
 8014724:	460f      	mov	r7, r1
 8014726:	4640      	mov	r0, r8
 8014728:	4649      	mov	r1, r9
 801472a:	f7eb fdc5 	bl	80002b8 <__aeabi_dsub>
 801472e:	9a05      	ldr	r2, [sp, #20]
 8014730:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8014734:	1ad3      	subs	r3, r2, r3
 8014736:	2b31      	cmp	r3, #49	; 0x31
 8014738:	dc20      	bgt.n	801477c <__ieee754_rem_pio2+0x26c>
 801473a:	e9c4 0100 	strd	r0, r1, [r4]
 801473e:	46c2      	mov	sl, r8
 8014740:	46cb      	mov	fp, r9
 8014742:	e9d4 8900 	ldrd	r8, r9, [r4]
 8014746:	4650      	mov	r0, sl
 8014748:	4642      	mov	r2, r8
 801474a:	464b      	mov	r3, r9
 801474c:	4659      	mov	r1, fp
 801474e:	f7eb fdb3 	bl	80002b8 <__aeabi_dsub>
 8014752:	463b      	mov	r3, r7
 8014754:	4632      	mov	r2, r6
 8014756:	f7eb fdaf 	bl	80002b8 <__aeabi_dsub>
 801475a:	9b04      	ldr	r3, [sp, #16]
 801475c:	2b00      	cmp	r3, #0
 801475e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014762:	f6bf af11 	bge.w	8014588 <__ieee754_rem_pio2+0x78>
 8014766:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801476a:	6063      	str	r3, [r4, #4]
 801476c:	f8c4 8000 	str.w	r8, [r4]
 8014770:	60a0      	str	r0, [r4, #8]
 8014772:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014776:	60e3      	str	r3, [r4, #12]
 8014778:	426d      	negs	r5, r5
 801477a:	e705      	b.n	8014588 <__ieee754_rem_pio2+0x78>
 801477c:	a326      	add	r3, pc, #152	; (adr r3, 8014818 <__ieee754_rem_pio2+0x308>)
 801477e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014782:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014786:	f7eb ff4f 	bl	8000628 <__aeabi_dmul>
 801478a:	4606      	mov	r6, r0
 801478c:	460f      	mov	r7, r1
 801478e:	4602      	mov	r2, r0
 8014790:	460b      	mov	r3, r1
 8014792:	4640      	mov	r0, r8
 8014794:	4649      	mov	r1, r9
 8014796:	f7eb fd8f 	bl	80002b8 <__aeabi_dsub>
 801479a:	4602      	mov	r2, r0
 801479c:	460b      	mov	r3, r1
 801479e:	4682      	mov	sl, r0
 80147a0:	468b      	mov	fp, r1
 80147a2:	4640      	mov	r0, r8
 80147a4:	4649      	mov	r1, r9
 80147a6:	f7eb fd87 	bl	80002b8 <__aeabi_dsub>
 80147aa:	4632      	mov	r2, r6
 80147ac:	463b      	mov	r3, r7
 80147ae:	f7eb fd83 	bl	80002b8 <__aeabi_dsub>
 80147b2:	a31b      	add	r3, pc, #108	; (adr r3, 8014820 <__ieee754_rem_pio2+0x310>)
 80147b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147b8:	4606      	mov	r6, r0
 80147ba:	460f      	mov	r7, r1
 80147bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80147c0:	f7eb ff32 	bl	8000628 <__aeabi_dmul>
 80147c4:	4632      	mov	r2, r6
 80147c6:	463b      	mov	r3, r7
 80147c8:	f7eb fd76 	bl	80002b8 <__aeabi_dsub>
 80147cc:	4606      	mov	r6, r0
 80147ce:	460f      	mov	r7, r1
 80147d0:	e764      	b.n	801469c <__ieee754_rem_pio2+0x18c>
 80147d2:	4b1b      	ldr	r3, [pc, #108]	; (8014840 <__ieee754_rem_pio2+0x330>)
 80147d4:	4598      	cmp	r8, r3
 80147d6:	dd35      	ble.n	8014844 <__ieee754_rem_pio2+0x334>
 80147d8:	ee10 2a10 	vmov	r2, s0
 80147dc:	463b      	mov	r3, r7
 80147de:	4630      	mov	r0, r6
 80147e0:	4639      	mov	r1, r7
 80147e2:	f7eb fd69 	bl	80002b8 <__aeabi_dsub>
 80147e6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80147ea:	e9c4 0100 	strd	r0, r1, [r4]
 80147ee:	e6a1      	b.n	8014534 <__ieee754_rem_pio2+0x24>
 80147f0:	54400000 	.word	0x54400000
 80147f4:	3ff921fb 	.word	0x3ff921fb
 80147f8:	1a626331 	.word	0x1a626331
 80147fc:	3dd0b461 	.word	0x3dd0b461
 8014800:	1a600000 	.word	0x1a600000
 8014804:	3dd0b461 	.word	0x3dd0b461
 8014808:	2e037073 	.word	0x2e037073
 801480c:	3ba3198a 	.word	0x3ba3198a
 8014810:	6dc9c883 	.word	0x6dc9c883
 8014814:	3fe45f30 	.word	0x3fe45f30
 8014818:	2e000000 	.word	0x2e000000
 801481c:	3ba3198a 	.word	0x3ba3198a
 8014820:	252049c1 	.word	0x252049c1
 8014824:	397b839a 	.word	0x397b839a
 8014828:	3fe921fb 	.word	0x3fe921fb
 801482c:	4002d97b 	.word	0x4002d97b
 8014830:	3ff921fb 	.word	0x3ff921fb
 8014834:	413921fb 	.word	0x413921fb
 8014838:	3fe00000 	.word	0x3fe00000
 801483c:	0801a35c 	.word	0x0801a35c
 8014840:	7fefffff 	.word	0x7fefffff
 8014844:	ea4f 5528 	mov.w	r5, r8, asr #20
 8014848:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 801484c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8014850:	4630      	mov	r0, r6
 8014852:	460f      	mov	r7, r1
 8014854:	f7ec f998 	bl	8000b88 <__aeabi_d2iz>
 8014858:	f7eb fe7c 	bl	8000554 <__aeabi_i2d>
 801485c:	4602      	mov	r2, r0
 801485e:	460b      	mov	r3, r1
 8014860:	4630      	mov	r0, r6
 8014862:	4639      	mov	r1, r7
 8014864:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8014868:	f7eb fd26 	bl	80002b8 <__aeabi_dsub>
 801486c:	2200      	movs	r2, #0
 801486e:	4b1f      	ldr	r3, [pc, #124]	; (80148ec <__ieee754_rem_pio2+0x3dc>)
 8014870:	f7eb feda 	bl	8000628 <__aeabi_dmul>
 8014874:	460f      	mov	r7, r1
 8014876:	4606      	mov	r6, r0
 8014878:	f7ec f986 	bl	8000b88 <__aeabi_d2iz>
 801487c:	f7eb fe6a 	bl	8000554 <__aeabi_i2d>
 8014880:	4602      	mov	r2, r0
 8014882:	460b      	mov	r3, r1
 8014884:	4630      	mov	r0, r6
 8014886:	4639      	mov	r1, r7
 8014888:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801488c:	f7eb fd14 	bl	80002b8 <__aeabi_dsub>
 8014890:	2200      	movs	r2, #0
 8014892:	4b16      	ldr	r3, [pc, #88]	; (80148ec <__ieee754_rem_pio2+0x3dc>)
 8014894:	f7eb fec8 	bl	8000628 <__aeabi_dmul>
 8014898:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801489c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 80148a0:	f04f 0803 	mov.w	r8, #3
 80148a4:	2600      	movs	r6, #0
 80148a6:	2700      	movs	r7, #0
 80148a8:	4632      	mov	r2, r6
 80148aa:	463b      	mov	r3, r7
 80148ac:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80148b0:	f108 3aff 	add.w	sl, r8, #4294967295
 80148b4:	f7ec f920 	bl	8000af8 <__aeabi_dcmpeq>
 80148b8:	b9b0      	cbnz	r0, 80148e8 <__ieee754_rem_pio2+0x3d8>
 80148ba:	4b0d      	ldr	r3, [pc, #52]	; (80148f0 <__ieee754_rem_pio2+0x3e0>)
 80148bc:	9301      	str	r3, [sp, #4]
 80148be:	2302      	movs	r3, #2
 80148c0:	9300      	str	r3, [sp, #0]
 80148c2:	462a      	mov	r2, r5
 80148c4:	4643      	mov	r3, r8
 80148c6:	4621      	mov	r1, r4
 80148c8:	a806      	add	r0, sp, #24
 80148ca:	f000 f8dd 	bl	8014a88 <__kernel_rem_pio2>
 80148ce:	9b04      	ldr	r3, [sp, #16]
 80148d0:	2b00      	cmp	r3, #0
 80148d2:	4605      	mov	r5, r0
 80148d4:	f6bf ae58 	bge.w	8014588 <__ieee754_rem_pio2+0x78>
 80148d8:	6863      	ldr	r3, [r4, #4]
 80148da:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80148de:	6063      	str	r3, [r4, #4]
 80148e0:	68e3      	ldr	r3, [r4, #12]
 80148e2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80148e6:	e746      	b.n	8014776 <__ieee754_rem_pio2+0x266>
 80148e8:	46d0      	mov	r8, sl
 80148ea:	e7dd      	b.n	80148a8 <__ieee754_rem_pio2+0x398>
 80148ec:	41700000 	.word	0x41700000
 80148f0:	0801a3dc 	.word	0x0801a3dc
 80148f4:	00000000 	.word	0x00000000

080148f8 <__kernel_cos>:
 80148f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148fc:	ec59 8b10 	vmov	r8, r9, d0
 8014900:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8014904:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8014908:	ed2d 8b02 	vpush	{d8}
 801490c:	eeb0 8a41 	vmov.f32	s16, s2
 8014910:	eef0 8a61 	vmov.f32	s17, s3
 8014914:	da07      	bge.n	8014926 <__kernel_cos+0x2e>
 8014916:	ee10 0a10 	vmov	r0, s0
 801491a:	4649      	mov	r1, r9
 801491c:	f7ec f934 	bl	8000b88 <__aeabi_d2iz>
 8014920:	2800      	cmp	r0, #0
 8014922:	f000 8089 	beq.w	8014a38 <__kernel_cos+0x140>
 8014926:	4642      	mov	r2, r8
 8014928:	464b      	mov	r3, r9
 801492a:	4640      	mov	r0, r8
 801492c:	4649      	mov	r1, r9
 801492e:	f7eb fe7b 	bl	8000628 <__aeabi_dmul>
 8014932:	2200      	movs	r2, #0
 8014934:	4b4e      	ldr	r3, [pc, #312]	; (8014a70 <__kernel_cos+0x178>)
 8014936:	4604      	mov	r4, r0
 8014938:	460d      	mov	r5, r1
 801493a:	f7eb fe75 	bl	8000628 <__aeabi_dmul>
 801493e:	a340      	add	r3, pc, #256	; (adr r3, 8014a40 <__kernel_cos+0x148>)
 8014940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014944:	4682      	mov	sl, r0
 8014946:	468b      	mov	fp, r1
 8014948:	4620      	mov	r0, r4
 801494a:	4629      	mov	r1, r5
 801494c:	f7eb fe6c 	bl	8000628 <__aeabi_dmul>
 8014950:	a33d      	add	r3, pc, #244	; (adr r3, 8014a48 <__kernel_cos+0x150>)
 8014952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014956:	f7eb fcb1 	bl	80002bc <__adddf3>
 801495a:	4622      	mov	r2, r4
 801495c:	462b      	mov	r3, r5
 801495e:	f7eb fe63 	bl	8000628 <__aeabi_dmul>
 8014962:	a33b      	add	r3, pc, #236	; (adr r3, 8014a50 <__kernel_cos+0x158>)
 8014964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014968:	f7eb fca6 	bl	80002b8 <__aeabi_dsub>
 801496c:	4622      	mov	r2, r4
 801496e:	462b      	mov	r3, r5
 8014970:	f7eb fe5a 	bl	8000628 <__aeabi_dmul>
 8014974:	a338      	add	r3, pc, #224	; (adr r3, 8014a58 <__kernel_cos+0x160>)
 8014976:	e9d3 2300 	ldrd	r2, r3, [r3]
 801497a:	f7eb fc9f 	bl	80002bc <__adddf3>
 801497e:	4622      	mov	r2, r4
 8014980:	462b      	mov	r3, r5
 8014982:	f7eb fe51 	bl	8000628 <__aeabi_dmul>
 8014986:	a336      	add	r3, pc, #216	; (adr r3, 8014a60 <__kernel_cos+0x168>)
 8014988:	e9d3 2300 	ldrd	r2, r3, [r3]
 801498c:	f7eb fc94 	bl	80002b8 <__aeabi_dsub>
 8014990:	4622      	mov	r2, r4
 8014992:	462b      	mov	r3, r5
 8014994:	f7eb fe48 	bl	8000628 <__aeabi_dmul>
 8014998:	a333      	add	r3, pc, #204	; (adr r3, 8014a68 <__kernel_cos+0x170>)
 801499a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801499e:	f7eb fc8d 	bl	80002bc <__adddf3>
 80149a2:	4622      	mov	r2, r4
 80149a4:	462b      	mov	r3, r5
 80149a6:	f7eb fe3f 	bl	8000628 <__aeabi_dmul>
 80149aa:	4622      	mov	r2, r4
 80149ac:	462b      	mov	r3, r5
 80149ae:	f7eb fe3b 	bl	8000628 <__aeabi_dmul>
 80149b2:	ec53 2b18 	vmov	r2, r3, d8
 80149b6:	4604      	mov	r4, r0
 80149b8:	460d      	mov	r5, r1
 80149ba:	4640      	mov	r0, r8
 80149bc:	4649      	mov	r1, r9
 80149be:	f7eb fe33 	bl	8000628 <__aeabi_dmul>
 80149c2:	460b      	mov	r3, r1
 80149c4:	4602      	mov	r2, r0
 80149c6:	4629      	mov	r1, r5
 80149c8:	4620      	mov	r0, r4
 80149ca:	f7eb fc75 	bl	80002b8 <__aeabi_dsub>
 80149ce:	4b29      	ldr	r3, [pc, #164]	; (8014a74 <__kernel_cos+0x17c>)
 80149d0:	429e      	cmp	r6, r3
 80149d2:	4680      	mov	r8, r0
 80149d4:	4689      	mov	r9, r1
 80149d6:	dc11      	bgt.n	80149fc <__kernel_cos+0x104>
 80149d8:	4602      	mov	r2, r0
 80149da:	460b      	mov	r3, r1
 80149dc:	4650      	mov	r0, sl
 80149de:	4659      	mov	r1, fp
 80149e0:	f7eb fc6a 	bl	80002b8 <__aeabi_dsub>
 80149e4:	460b      	mov	r3, r1
 80149e6:	4924      	ldr	r1, [pc, #144]	; (8014a78 <__kernel_cos+0x180>)
 80149e8:	4602      	mov	r2, r0
 80149ea:	2000      	movs	r0, #0
 80149ec:	f7eb fc64 	bl	80002b8 <__aeabi_dsub>
 80149f0:	ecbd 8b02 	vpop	{d8}
 80149f4:	ec41 0b10 	vmov	d0, r0, r1
 80149f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80149fc:	4b1f      	ldr	r3, [pc, #124]	; (8014a7c <__kernel_cos+0x184>)
 80149fe:	491e      	ldr	r1, [pc, #120]	; (8014a78 <__kernel_cos+0x180>)
 8014a00:	429e      	cmp	r6, r3
 8014a02:	bfcc      	ite	gt
 8014a04:	4d1e      	ldrgt	r5, [pc, #120]	; (8014a80 <__kernel_cos+0x188>)
 8014a06:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8014a0a:	2400      	movs	r4, #0
 8014a0c:	4622      	mov	r2, r4
 8014a0e:	462b      	mov	r3, r5
 8014a10:	2000      	movs	r0, #0
 8014a12:	f7eb fc51 	bl	80002b8 <__aeabi_dsub>
 8014a16:	4622      	mov	r2, r4
 8014a18:	4606      	mov	r6, r0
 8014a1a:	460f      	mov	r7, r1
 8014a1c:	462b      	mov	r3, r5
 8014a1e:	4650      	mov	r0, sl
 8014a20:	4659      	mov	r1, fp
 8014a22:	f7eb fc49 	bl	80002b8 <__aeabi_dsub>
 8014a26:	4642      	mov	r2, r8
 8014a28:	464b      	mov	r3, r9
 8014a2a:	f7eb fc45 	bl	80002b8 <__aeabi_dsub>
 8014a2e:	4602      	mov	r2, r0
 8014a30:	460b      	mov	r3, r1
 8014a32:	4630      	mov	r0, r6
 8014a34:	4639      	mov	r1, r7
 8014a36:	e7d9      	b.n	80149ec <__kernel_cos+0xf4>
 8014a38:	2000      	movs	r0, #0
 8014a3a:	490f      	ldr	r1, [pc, #60]	; (8014a78 <__kernel_cos+0x180>)
 8014a3c:	e7d8      	b.n	80149f0 <__kernel_cos+0xf8>
 8014a3e:	bf00      	nop
 8014a40:	be8838d4 	.word	0xbe8838d4
 8014a44:	bda8fae9 	.word	0xbda8fae9
 8014a48:	bdb4b1c4 	.word	0xbdb4b1c4
 8014a4c:	3e21ee9e 	.word	0x3e21ee9e
 8014a50:	809c52ad 	.word	0x809c52ad
 8014a54:	3e927e4f 	.word	0x3e927e4f
 8014a58:	19cb1590 	.word	0x19cb1590
 8014a5c:	3efa01a0 	.word	0x3efa01a0
 8014a60:	16c15177 	.word	0x16c15177
 8014a64:	3f56c16c 	.word	0x3f56c16c
 8014a68:	5555554c 	.word	0x5555554c
 8014a6c:	3fa55555 	.word	0x3fa55555
 8014a70:	3fe00000 	.word	0x3fe00000
 8014a74:	3fd33332 	.word	0x3fd33332
 8014a78:	3ff00000 	.word	0x3ff00000
 8014a7c:	3fe90000 	.word	0x3fe90000
 8014a80:	3fd20000 	.word	0x3fd20000
 8014a84:	00000000 	.word	0x00000000

08014a88 <__kernel_rem_pio2>:
 8014a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a8c:	ed2d 8b02 	vpush	{d8}
 8014a90:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8014a94:	1ed4      	subs	r4, r2, #3
 8014a96:	9308      	str	r3, [sp, #32]
 8014a98:	9101      	str	r1, [sp, #4]
 8014a9a:	4bc5      	ldr	r3, [pc, #788]	; (8014db0 <__kernel_rem_pio2+0x328>)
 8014a9c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8014a9e:	9009      	str	r0, [sp, #36]	; 0x24
 8014aa0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014aa4:	9304      	str	r3, [sp, #16]
 8014aa6:	9b08      	ldr	r3, [sp, #32]
 8014aa8:	3b01      	subs	r3, #1
 8014aaa:	9307      	str	r3, [sp, #28]
 8014aac:	2318      	movs	r3, #24
 8014aae:	fb94 f4f3 	sdiv	r4, r4, r3
 8014ab2:	f06f 0317 	mvn.w	r3, #23
 8014ab6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8014aba:	fb04 3303 	mla	r3, r4, r3, r3
 8014abe:	eb03 0a02 	add.w	sl, r3, r2
 8014ac2:	9b04      	ldr	r3, [sp, #16]
 8014ac4:	9a07      	ldr	r2, [sp, #28]
 8014ac6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8014da0 <__kernel_rem_pio2+0x318>
 8014aca:	eb03 0802 	add.w	r8, r3, r2
 8014ace:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8014ad0:	1aa7      	subs	r7, r4, r2
 8014ad2:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8014ad6:	ae22      	add	r6, sp, #136	; 0x88
 8014ad8:	2500      	movs	r5, #0
 8014ada:	4545      	cmp	r5, r8
 8014adc:	dd13      	ble.n	8014b06 <__kernel_rem_pio2+0x7e>
 8014ade:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8014da0 <__kernel_rem_pio2+0x318>
 8014ae2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8014ae6:	2600      	movs	r6, #0
 8014ae8:	9b04      	ldr	r3, [sp, #16]
 8014aea:	429e      	cmp	r6, r3
 8014aec:	dc32      	bgt.n	8014b54 <__kernel_rem_pio2+0xcc>
 8014aee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014af0:	9302      	str	r3, [sp, #8]
 8014af2:	9b08      	ldr	r3, [sp, #32]
 8014af4:	199d      	adds	r5, r3, r6
 8014af6:	ab22      	add	r3, sp, #136	; 0x88
 8014af8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8014afc:	9306      	str	r3, [sp, #24]
 8014afe:	ec59 8b18 	vmov	r8, r9, d8
 8014b02:	2700      	movs	r7, #0
 8014b04:	e01f      	b.n	8014b46 <__kernel_rem_pio2+0xbe>
 8014b06:	42ef      	cmn	r7, r5
 8014b08:	d407      	bmi.n	8014b1a <__kernel_rem_pio2+0x92>
 8014b0a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8014b0e:	f7eb fd21 	bl	8000554 <__aeabi_i2d>
 8014b12:	e8e6 0102 	strd	r0, r1, [r6], #8
 8014b16:	3501      	adds	r5, #1
 8014b18:	e7df      	b.n	8014ada <__kernel_rem_pio2+0x52>
 8014b1a:	ec51 0b18 	vmov	r0, r1, d8
 8014b1e:	e7f8      	b.n	8014b12 <__kernel_rem_pio2+0x8a>
 8014b20:	9906      	ldr	r1, [sp, #24]
 8014b22:	9d02      	ldr	r5, [sp, #8]
 8014b24:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8014b28:	9106      	str	r1, [sp, #24]
 8014b2a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8014b2e:	9502      	str	r5, [sp, #8]
 8014b30:	f7eb fd7a 	bl	8000628 <__aeabi_dmul>
 8014b34:	4602      	mov	r2, r0
 8014b36:	460b      	mov	r3, r1
 8014b38:	4640      	mov	r0, r8
 8014b3a:	4649      	mov	r1, r9
 8014b3c:	f7eb fbbe 	bl	80002bc <__adddf3>
 8014b40:	3701      	adds	r7, #1
 8014b42:	4680      	mov	r8, r0
 8014b44:	4689      	mov	r9, r1
 8014b46:	9b07      	ldr	r3, [sp, #28]
 8014b48:	429f      	cmp	r7, r3
 8014b4a:	dde9      	ble.n	8014b20 <__kernel_rem_pio2+0x98>
 8014b4c:	e8eb 8902 	strd	r8, r9, [fp], #8
 8014b50:	3601      	adds	r6, #1
 8014b52:	e7c9      	b.n	8014ae8 <__kernel_rem_pio2+0x60>
 8014b54:	9b04      	ldr	r3, [sp, #16]
 8014b56:	aa0e      	add	r2, sp, #56	; 0x38
 8014b58:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014b5c:	930c      	str	r3, [sp, #48]	; 0x30
 8014b5e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8014b60:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8014b64:	9c04      	ldr	r4, [sp, #16]
 8014b66:	930b      	str	r3, [sp, #44]	; 0x2c
 8014b68:	ab9a      	add	r3, sp, #616	; 0x268
 8014b6a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8014b6e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8014b72:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014b76:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8014b7a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8014b7e:	ab9a      	add	r3, sp, #616	; 0x268
 8014b80:	445b      	add	r3, fp
 8014b82:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8014b86:	2500      	movs	r5, #0
 8014b88:	1b63      	subs	r3, r4, r5
 8014b8a:	2b00      	cmp	r3, #0
 8014b8c:	dc78      	bgt.n	8014c80 <__kernel_rem_pio2+0x1f8>
 8014b8e:	4650      	mov	r0, sl
 8014b90:	ec49 8b10 	vmov	d0, r8, r9
 8014b94:	f000 fdd0 	bl	8015738 <scalbn>
 8014b98:	ec57 6b10 	vmov	r6, r7, d0
 8014b9c:	2200      	movs	r2, #0
 8014b9e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8014ba2:	ee10 0a10 	vmov	r0, s0
 8014ba6:	4639      	mov	r1, r7
 8014ba8:	f7eb fd3e 	bl	8000628 <__aeabi_dmul>
 8014bac:	ec41 0b10 	vmov	d0, r0, r1
 8014bb0:	f000 fd3e 	bl	8015630 <floor>
 8014bb4:	2200      	movs	r2, #0
 8014bb6:	ec51 0b10 	vmov	r0, r1, d0
 8014bba:	4b7e      	ldr	r3, [pc, #504]	; (8014db4 <__kernel_rem_pio2+0x32c>)
 8014bbc:	f7eb fd34 	bl	8000628 <__aeabi_dmul>
 8014bc0:	4602      	mov	r2, r0
 8014bc2:	460b      	mov	r3, r1
 8014bc4:	4630      	mov	r0, r6
 8014bc6:	4639      	mov	r1, r7
 8014bc8:	f7eb fb76 	bl	80002b8 <__aeabi_dsub>
 8014bcc:	460f      	mov	r7, r1
 8014bce:	4606      	mov	r6, r0
 8014bd0:	f7eb ffda 	bl	8000b88 <__aeabi_d2iz>
 8014bd4:	9006      	str	r0, [sp, #24]
 8014bd6:	f7eb fcbd 	bl	8000554 <__aeabi_i2d>
 8014bda:	4602      	mov	r2, r0
 8014bdc:	460b      	mov	r3, r1
 8014bde:	4630      	mov	r0, r6
 8014be0:	4639      	mov	r1, r7
 8014be2:	f7eb fb69 	bl	80002b8 <__aeabi_dsub>
 8014be6:	f1ba 0f00 	cmp.w	sl, #0
 8014bea:	4606      	mov	r6, r0
 8014bec:	460f      	mov	r7, r1
 8014bee:	dd6c      	ble.n	8014cca <__kernel_rem_pio2+0x242>
 8014bf0:	1e62      	subs	r2, r4, #1
 8014bf2:	ab0e      	add	r3, sp, #56	; 0x38
 8014bf4:	f1ca 0118 	rsb	r1, sl, #24
 8014bf8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8014bfc:	9d06      	ldr	r5, [sp, #24]
 8014bfe:	fa40 f301 	asr.w	r3, r0, r1
 8014c02:	441d      	add	r5, r3
 8014c04:	408b      	lsls	r3, r1
 8014c06:	1ac0      	subs	r0, r0, r3
 8014c08:	ab0e      	add	r3, sp, #56	; 0x38
 8014c0a:	9506      	str	r5, [sp, #24]
 8014c0c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8014c10:	f1ca 0317 	rsb	r3, sl, #23
 8014c14:	fa40 f303 	asr.w	r3, r0, r3
 8014c18:	9302      	str	r3, [sp, #8]
 8014c1a:	9b02      	ldr	r3, [sp, #8]
 8014c1c:	2b00      	cmp	r3, #0
 8014c1e:	dd62      	ble.n	8014ce6 <__kernel_rem_pio2+0x25e>
 8014c20:	9b06      	ldr	r3, [sp, #24]
 8014c22:	2200      	movs	r2, #0
 8014c24:	3301      	adds	r3, #1
 8014c26:	9306      	str	r3, [sp, #24]
 8014c28:	4615      	mov	r5, r2
 8014c2a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8014c2e:	4294      	cmp	r4, r2
 8014c30:	f300 8095 	bgt.w	8014d5e <__kernel_rem_pio2+0x2d6>
 8014c34:	f1ba 0f00 	cmp.w	sl, #0
 8014c38:	dd07      	ble.n	8014c4a <__kernel_rem_pio2+0x1c2>
 8014c3a:	f1ba 0f01 	cmp.w	sl, #1
 8014c3e:	f000 80a2 	beq.w	8014d86 <__kernel_rem_pio2+0x2fe>
 8014c42:	f1ba 0f02 	cmp.w	sl, #2
 8014c46:	f000 80c1 	beq.w	8014dcc <__kernel_rem_pio2+0x344>
 8014c4a:	9b02      	ldr	r3, [sp, #8]
 8014c4c:	2b02      	cmp	r3, #2
 8014c4e:	d14a      	bne.n	8014ce6 <__kernel_rem_pio2+0x25e>
 8014c50:	4632      	mov	r2, r6
 8014c52:	463b      	mov	r3, r7
 8014c54:	2000      	movs	r0, #0
 8014c56:	4958      	ldr	r1, [pc, #352]	; (8014db8 <__kernel_rem_pio2+0x330>)
 8014c58:	f7eb fb2e 	bl	80002b8 <__aeabi_dsub>
 8014c5c:	4606      	mov	r6, r0
 8014c5e:	460f      	mov	r7, r1
 8014c60:	2d00      	cmp	r5, #0
 8014c62:	d040      	beq.n	8014ce6 <__kernel_rem_pio2+0x25e>
 8014c64:	4650      	mov	r0, sl
 8014c66:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8014da8 <__kernel_rem_pio2+0x320>
 8014c6a:	f000 fd65 	bl	8015738 <scalbn>
 8014c6e:	4630      	mov	r0, r6
 8014c70:	4639      	mov	r1, r7
 8014c72:	ec53 2b10 	vmov	r2, r3, d0
 8014c76:	f7eb fb1f 	bl	80002b8 <__aeabi_dsub>
 8014c7a:	4606      	mov	r6, r0
 8014c7c:	460f      	mov	r7, r1
 8014c7e:	e032      	b.n	8014ce6 <__kernel_rem_pio2+0x25e>
 8014c80:	2200      	movs	r2, #0
 8014c82:	4b4e      	ldr	r3, [pc, #312]	; (8014dbc <__kernel_rem_pio2+0x334>)
 8014c84:	4640      	mov	r0, r8
 8014c86:	4649      	mov	r1, r9
 8014c88:	f7eb fcce 	bl	8000628 <__aeabi_dmul>
 8014c8c:	f7eb ff7c 	bl	8000b88 <__aeabi_d2iz>
 8014c90:	f7eb fc60 	bl	8000554 <__aeabi_i2d>
 8014c94:	2200      	movs	r2, #0
 8014c96:	4b4a      	ldr	r3, [pc, #296]	; (8014dc0 <__kernel_rem_pio2+0x338>)
 8014c98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014c9c:	f7eb fcc4 	bl	8000628 <__aeabi_dmul>
 8014ca0:	4602      	mov	r2, r0
 8014ca2:	460b      	mov	r3, r1
 8014ca4:	4640      	mov	r0, r8
 8014ca6:	4649      	mov	r1, r9
 8014ca8:	f7eb fb06 	bl	80002b8 <__aeabi_dsub>
 8014cac:	f7eb ff6c 	bl	8000b88 <__aeabi_d2iz>
 8014cb0:	ab0e      	add	r3, sp, #56	; 0x38
 8014cb2:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8014cb6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8014cba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014cbe:	f7eb fafd 	bl	80002bc <__adddf3>
 8014cc2:	3501      	adds	r5, #1
 8014cc4:	4680      	mov	r8, r0
 8014cc6:	4689      	mov	r9, r1
 8014cc8:	e75e      	b.n	8014b88 <__kernel_rem_pio2+0x100>
 8014cca:	d105      	bne.n	8014cd8 <__kernel_rem_pio2+0x250>
 8014ccc:	1e63      	subs	r3, r4, #1
 8014cce:	aa0e      	add	r2, sp, #56	; 0x38
 8014cd0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8014cd4:	15c3      	asrs	r3, r0, #23
 8014cd6:	e79f      	b.n	8014c18 <__kernel_rem_pio2+0x190>
 8014cd8:	2200      	movs	r2, #0
 8014cda:	4b3a      	ldr	r3, [pc, #232]	; (8014dc4 <__kernel_rem_pio2+0x33c>)
 8014cdc:	f7eb ff2a 	bl	8000b34 <__aeabi_dcmpge>
 8014ce0:	2800      	cmp	r0, #0
 8014ce2:	d139      	bne.n	8014d58 <__kernel_rem_pio2+0x2d0>
 8014ce4:	9002      	str	r0, [sp, #8]
 8014ce6:	2200      	movs	r2, #0
 8014ce8:	2300      	movs	r3, #0
 8014cea:	4630      	mov	r0, r6
 8014cec:	4639      	mov	r1, r7
 8014cee:	f7eb ff03 	bl	8000af8 <__aeabi_dcmpeq>
 8014cf2:	2800      	cmp	r0, #0
 8014cf4:	f000 80c7 	beq.w	8014e86 <__kernel_rem_pio2+0x3fe>
 8014cf8:	1e65      	subs	r5, r4, #1
 8014cfa:	462b      	mov	r3, r5
 8014cfc:	2200      	movs	r2, #0
 8014cfe:	9904      	ldr	r1, [sp, #16]
 8014d00:	428b      	cmp	r3, r1
 8014d02:	da6a      	bge.n	8014dda <__kernel_rem_pio2+0x352>
 8014d04:	2a00      	cmp	r2, #0
 8014d06:	f000 8088 	beq.w	8014e1a <__kernel_rem_pio2+0x392>
 8014d0a:	ab0e      	add	r3, sp, #56	; 0x38
 8014d0c:	f1aa 0a18 	sub.w	sl, sl, #24
 8014d10:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8014d14:	2b00      	cmp	r3, #0
 8014d16:	f000 80b4 	beq.w	8014e82 <__kernel_rem_pio2+0x3fa>
 8014d1a:	4650      	mov	r0, sl
 8014d1c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8014da8 <__kernel_rem_pio2+0x320>
 8014d20:	f000 fd0a 	bl	8015738 <scalbn>
 8014d24:	00ec      	lsls	r4, r5, #3
 8014d26:	ab72      	add	r3, sp, #456	; 0x1c8
 8014d28:	191e      	adds	r6, r3, r4
 8014d2a:	ec59 8b10 	vmov	r8, r9, d0
 8014d2e:	f106 0a08 	add.w	sl, r6, #8
 8014d32:	462f      	mov	r7, r5
 8014d34:	2f00      	cmp	r7, #0
 8014d36:	f280 80df 	bge.w	8014ef8 <__kernel_rem_pio2+0x470>
 8014d3a:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8014da0 <__kernel_rem_pio2+0x318>
 8014d3e:	f04f 0a00 	mov.w	sl, #0
 8014d42:	eba5 030a 	sub.w	r3, r5, sl
 8014d46:	2b00      	cmp	r3, #0
 8014d48:	f2c0 810a 	blt.w	8014f60 <__kernel_rem_pio2+0x4d8>
 8014d4c:	f8df b078 	ldr.w	fp, [pc, #120]	; 8014dc8 <__kernel_rem_pio2+0x340>
 8014d50:	ec59 8b18 	vmov	r8, r9, d8
 8014d54:	2700      	movs	r7, #0
 8014d56:	e0f5      	b.n	8014f44 <__kernel_rem_pio2+0x4bc>
 8014d58:	2302      	movs	r3, #2
 8014d5a:	9302      	str	r3, [sp, #8]
 8014d5c:	e760      	b.n	8014c20 <__kernel_rem_pio2+0x198>
 8014d5e:	ab0e      	add	r3, sp, #56	; 0x38
 8014d60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014d64:	b94d      	cbnz	r5, 8014d7a <__kernel_rem_pio2+0x2f2>
 8014d66:	b12b      	cbz	r3, 8014d74 <__kernel_rem_pio2+0x2ec>
 8014d68:	a80e      	add	r0, sp, #56	; 0x38
 8014d6a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8014d6e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8014d72:	2301      	movs	r3, #1
 8014d74:	3201      	adds	r2, #1
 8014d76:	461d      	mov	r5, r3
 8014d78:	e759      	b.n	8014c2e <__kernel_rem_pio2+0x1a6>
 8014d7a:	a80e      	add	r0, sp, #56	; 0x38
 8014d7c:	1acb      	subs	r3, r1, r3
 8014d7e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8014d82:	462b      	mov	r3, r5
 8014d84:	e7f6      	b.n	8014d74 <__kernel_rem_pio2+0x2ec>
 8014d86:	1e62      	subs	r2, r4, #1
 8014d88:	ab0e      	add	r3, sp, #56	; 0x38
 8014d8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014d8e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8014d92:	a90e      	add	r1, sp, #56	; 0x38
 8014d94:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8014d98:	e757      	b.n	8014c4a <__kernel_rem_pio2+0x1c2>
 8014d9a:	bf00      	nop
 8014d9c:	f3af 8000 	nop.w
	...
 8014dac:	3ff00000 	.word	0x3ff00000
 8014db0:	0801a528 	.word	0x0801a528
 8014db4:	40200000 	.word	0x40200000
 8014db8:	3ff00000 	.word	0x3ff00000
 8014dbc:	3e700000 	.word	0x3e700000
 8014dc0:	41700000 	.word	0x41700000
 8014dc4:	3fe00000 	.word	0x3fe00000
 8014dc8:	0801a4e8 	.word	0x0801a4e8
 8014dcc:	1e62      	subs	r2, r4, #1
 8014dce:	ab0e      	add	r3, sp, #56	; 0x38
 8014dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014dd4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8014dd8:	e7db      	b.n	8014d92 <__kernel_rem_pio2+0x30a>
 8014dda:	a90e      	add	r1, sp, #56	; 0x38
 8014ddc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8014de0:	3b01      	subs	r3, #1
 8014de2:	430a      	orrs	r2, r1
 8014de4:	e78b      	b.n	8014cfe <__kernel_rem_pio2+0x276>
 8014de6:	3301      	adds	r3, #1
 8014de8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8014dec:	2900      	cmp	r1, #0
 8014dee:	d0fa      	beq.n	8014de6 <__kernel_rem_pio2+0x35e>
 8014df0:	9a08      	ldr	r2, [sp, #32]
 8014df2:	4422      	add	r2, r4
 8014df4:	00d2      	lsls	r2, r2, #3
 8014df6:	a922      	add	r1, sp, #136	; 0x88
 8014df8:	18e3      	adds	r3, r4, r3
 8014dfa:	9206      	str	r2, [sp, #24]
 8014dfc:	440a      	add	r2, r1
 8014dfe:	9302      	str	r3, [sp, #8]
 8014e00:	f10b 0108 	add.w	r1, fp, #8
 8014e04:	f102 0308 	add.w	r3, r2, #8
 8014e08:	1c66      	adds	r6, r4, #1
 8014e0a:	910a      	str	r1, [sp, #40]	; 0x28
 8014e0c:	2500      	movs	r5, #0
 8014e0e:	930d      	str	r3, [sp, #52]	; 0x34
 8014e10:	9b02      	ldr	r3, [sp, #8]
 8014e12:	42b3      	cmp	r3, r6
 8014e14:	da04      	bge.n	8014e20 <__kernel_rem_pio2+0x398>
 8014e16:	461c      	mov	r4, r3
 8014e18:	e6a6      	b.n	8014b68 <__kernel_rem_pio2+0xe0>
 8014e1a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014e1c:	2301      	movs	r3, #1
 8014e1e:	e7e3      	b.n	8014de8 <__kernel_rem_pio2+0x360>
 8014e20:	9b06      	ldr	r3, [sp, #24]
 8014e22:	18ef      	adds	r7, r5, r3
 8014e24:	ab22      	add	r3, sp, #136	; 0x88
 8014e26:	441f      	add	r7, r3
 8014e28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014e2a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8014e2e:	f7eb fb91 	bl	8000554 <__aeabi_i2d>
 8014e32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014e34:	461c      	mov	r4, r3
 8014e36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014e38:	e9c7 0100 	strd	r0, r1, [r7]
 8014e3c:	eb03 0b05 	add.w	fp, r3, r5
 8014e40:	2700      	movs	r7, #0
 8014e42:	f04f 0800 	mov.w	r8, #0
 8014e46:	f04f 0900 	mov.w	r9, #0
 8014e4a:	9b07      	ldr	r3, [sp, #28]
 8014e4c:	429f      	cmp	r7, r3
 8014e4e:	dd08      	ble.n	8014e62 <__kernel_rem_pio2+0x3da>
 8014e50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014e52:	aa72      	add	r2, sp, #456	; 0x1c8
 8014e54:	18eb      	adds	r3, r5, r3
 8014e56:	4413      	add	r3, r2
 8014e58:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8014e5c:	3601      	adds	r6, #1
 8014e5e:	3508      	adds	r5, #8
 8014e60:	e7d6      	b.n	8014e10 <__kernel_rem_pio2+0x388>
 8014e62:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8014e66:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8014e6a:	f7eb fbdd 	bl	8000628 <__aeabi_dmul>
 8014e6e:	4602      	mov	r2, r0
 8014e70:	460b      	mov	r3, r1
 8014e72:	4640      	mov	r0, r8
 8014e74:	4649      	mov	r1, r9
 8014e76:	f7eb fa21 	bl	80002bc <__adddf3>
 8014e7a:	3701      	adds	r7, #1
 8014e7c:	4680      	mov	r8, r0
 8014e7e:	4689      	mov	r9, r1
 8014e80:	e7e3      	b.n	8014e4a <__kernel_rem_pio2+0x3c2>
 8014e82:	3d01      	subs	r5, #1
 8014e84:	e741      	b.n	8014d0a <__kernel_rem_pio2+0x282>
 8014e86:	f1ca 0000 	rsb	r0, sl, #0
 8014e8a:	ec47 6b10 	vmov	d0, r6, r7
 8014e8e:	f000 fc53 	bl	8015738 <scalbn>
 8014e92:	ec57 6b10 	vmov	r6, r7, d0
 8014e96:	2200      	movs	r2, #0
 8014e98:	4b99      	ldr	r3, [pc, #612]	; (8015100 <__kernel_rem_pio2+0x678>)
 8014e9a:	ee10 0a10 	vmov	r0, s0
 8014e9e:	4639      	mov	r1, r7
 8014ea0:	f7eb fe48 	bl	8000b34 <__aeabi_dcmpge>
 8014ea4:	b1f8      	cbz	r0, 8014ee6 <__kernel_rem_pio2+0x45e>
 8014ea6:	2200      	movs	r2, #0
 8014ea8:	4b96      	ldr	r3, [pc, #600]	; (8015104 <__kernel_rem_pio2+0x67c>)
 8014eaa:	4630      	mov	r0, r6
 8014eac:	4639      	mov	r1, r7
 8014eae:	f7eb fbbb 	bl	8000628 <__aeabi_dmul>
 8014eb2:	f7eb fe69 	bl	8000b88 <__aeabi_d2iz>
 8014eb6:	4680      	mov	r8, r0
 8014eb8:	f7eb fb4c 	bl	8000554 <__aeabi_i2d>
 8014ebc:	2200      	movs	r2, #0
 8014ebe:	4b90      	ldr	r3, [pc, #576]	; (8015100 <__kernel_rem_pio2+0x678>)
 8014ec0:	f7eb fbb2 	bl	8000628 <__aeabi_dmul>
 8014ec4:	460b      	mov	r3, r1
 8014ec6:	4602      	mov	r2, r0
 8014ec8:	4639      	mov	r1, r7
 8014eca:	4630      	mov	r0, r6
 8014ecc:	f7eb f9f4 	bl	80002b8 <__aeabi_dsub>
 8014ed0:	f7eb fe5a 	bl	8000b88 <__aeabi_d2iz>
 8014ed4:	1c65      	adds	r5, r4, #1
 8014ed6:	ab0e      	add	r3, sp, #56	; 0x38
 8014ed8:	f10a 0a18 	add.w	sl, sl, #24
 8014edc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8014ee0:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8014ee4:	e719      	b.n	8014d1a <__kernel_rem_pio2+0x292>
 8014ee6:	4630      	mov	r0, r6
 8014ee8:	4639      	mov	r1, r7
 8014eea:	f7eb fe4d 	bl	8000b88 <__aeabi_d2iz>
 8014eee:	ab0e      	add	r3, sp, #56	; 0x38
 8014ef0:	4625      	mov	r5, r4
 8014ef2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8014ef6:	e710      	b.n	8014d1a <__kernel_rem_pio2+0x292>
 8014ef8:	ab0e      	add	r3, sp, #56	; 0x38
 8014efa:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8014efe:	f7eb fb29 	bl	8000554 <__aeabi_i2d>
 8014f02:	4642      	mov	r2, r8
 8014f04:	464b      	mov	r3, r9
 8014f06:	f7eb fb8f 	bl	8000628 <__aeabi_dmul>
 8014f0a:	2200      	movs	r2, #0
 8014f0c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8014f10:	4b7c      	ldr	r3, [pc, #496]	; (8015104 <__kernel_rem_pio2+0x67c>)
 8014f12:	4640      	mov	r0, r8
 8014f14:	4649      	mov	r1, r9
 8014f16:	f7eb fb87 	bl	8000628 <__aeabi_dmul>
 8014f1a:	3f01      	subs	r7, #1
 8014f1c:	4680      	mov	r8, r0
 8014f1e:	4689      	mov	r9, r1
 8014f20:	e708      	b.n	8014d34 <__kernel_rem_pio2+0x2ac>
 8014f22:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8014f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f2a:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8014f2e:	f7eb fb7b 	bl	8000628 <__aeabi_dmul>
 8014f32:	4602      	mov	r2, r0
 8014f34:	460b      	mov	r3, r1
 8014f36:	4640      	mov	r0, r8
 8014f38:	4649      	mov	r1, r9
 8014f3a:	f7eb f9bf 	bl	80002bc <__adddf3>
 8014f3e:	3701      	adds	r7, #1
 8014f40:	4680      	mov	r8, r0
 8014f42:	4689      	mov	r9, r1
 8014f44:	9b04      	ldr	r3, [sp, #16]
 8014f46:	429f      	cmp	r7, r3
 8014f48:	dc01      	bgt.n	8014f4e <__kernel_rem_pio2+0x4c6>
 8014f4a:	45ba      	cmp	sl, r7
 8014f4c:	dae9      	bge.n	8014f22 <__kernel_rem_pio2+0x49a>
 8014f4e:	ab4a      	add	r3, sp, #296	; 0x128
 8014f50:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8014f54:	e9c3 8900 	strd	r8, r9, [r3]
 8014f58:	f10a 0a01 	add.w	sl, sl, #1
 8014f5c:	3e08      	subs	r6, #8
 8014f5e:	e6f0      	b.n	8014d42 <__kernel_rem_pio2+0x2ba>
 8014f60:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8014f62:	2b03      	cmp	r3, #3
 8014f64:	d85b      	bhi.n	801501e <__kernel_rem_pio2+0x596>
 8014f66:	e8df f003 	tbb	[pc, r3]
 8014f6a:	264a      	.short	0x264a
 8014f6c:	0226      	.short	0x0226
 8014f6e:	ab9a      	add	r3, sp, #616	; 0x268
 8014f70:	441c      	add	r4, r3
 8014f72:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8014f76:	46a2      	mov	sl, r4
 8014f78:	46ab      	mov	fp, r5
 8014f7a:	f1bb 0f00 	cmp.w	fp, #0
 8014f7e:	dc6c      	bgt.n	801505a <__kernel_rem_pio2+0x5d2>
 8014f80:	46a2      	mov	sl, r4
 8014f82:	46ab      	mov	fp, r5
 8014f84:	f1bb 0f01 	cmp.w	fp, #1
 8014f88:	f300 8086 	bgt.w	8015098 <__kernel_rem_pio2+0x610>
 8014f8c:	2000      	movs	r0, #0
 8014f8e:	2100      	movs	r1, #0
 8014f90:	2d01      	cmp	r5, #1
 8014f92:	f300 80a0 	bgt.w	80150d6 <__kernel_rem_pio2+0x64e>
 8014f96:	9b02      	ldr	r3, [sp, #8]
 8014f98:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8014f9c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8014fa0:	2b00      	cmp	r3, #0
 8014fa2:	f040 809e 	bne.w	80150e2 <__kernel_rem_pio2+0x65a>
 8014fa6:	9b01      	ldr	r3, [sp, #4]
 8014fa8:	e9c3 7800 	strd	r7, r8, [r3]
 8014fac:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8014fb0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8014fb4:	e033      	b.n	801501e <__kernel_rem_pio2+0x596>
 8014fb6:	3408      	adds	r4, #8
 8014fb8:	ab4a      	add	r3, sp, #296	; 0x128
 8014fba:	441c      	add	r4, r3
 8014fbc:	462e      	mov	r6, r5
 8014fbe:	2000      	movs	r0, #0
 8014fc0:	2100      	movs	r1, #0
 8014fc2:	2e00      	cmp	r6, #0
 8014fc4:	da3a      	bge.n	801503c <__kernel_rem_pio2+0x5b4>
 8014fc6:	9b02      	ldr	r3, [sp, #8]
 8014fc8:	2b00      	cmp	r3, #0
 8014fca:	d03d      	beq.n	8015048 <__kernel_rem_pio2+0x5c0>
 8014fcc:	4602      	mov	r2, r0
 8014fce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014fd2:	9c01      	ldr	r4, [sp, #4]
 8014fd4:	e9c4 2300 	strd	r2, r3, [r4]
 8014fd8:	4602      	mov	r2, r0
 8014fda:	460b      	mov	r3, r1
 8014fdc:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8014fe0:	f7eb f96a 	bl	80002b8 <__aeabi_dsub>
 8014fe4:	ae4c      	add	r6, sp, #304	; 0x130
 8014fe6:	2401      	movs	r4, #1
 8014fe8:	42a5      	cmp	r5, r4
 8014fea:	da30      	bge.n	801504e <__kernel_rem_pio2+0x5c6>
 8014fec:	9b02      	ldr	r3, [sp, #8]
 8014fee:	b113      	cbz	r3, 8014ff6 <__kernel_rem_pio2+0x56e>
 8014ff0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014ff4:	4619      	mov	r1, r3
 8014ff6:	9b01      	ldr	r3, [sp, #4]
 8014ff8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8014ffc:	e00f      	b.n	801501e <__kernel_rem_pio2+0x596>
 8014ffe:	ab9a      	add	r3, sp, #616	; 0x268
 8015000:	441c      	add	r4, r3
 8015002:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8015006:	2000      	movs	r0, #0
 8015008:	2100      	movs	r1, #0
 801500a:	2d00      	cmp	r5, #0
 801500c:	da10      	bge.n	8015030 <__kernel_rem_pio2+0x5a8>
 801500e:	9b02      	ldr	r3, [sp, #8]
 8015010:	b113      	cbz	r3, 8015018 <__kernel_rem_pio2+0x590>
 8015012:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015016:	4619      	mov	r1, r3
 8015018:	9b01      	ldr	r3, [sp, #4]
 801501a:	e9c3 0100 	strd	r0, r1, [r3]
 801501e:	9b06      	ldr	r3, [sp, #24]
 8015020:	f003 0007 	and.w	r0, r3, #7
 8015024:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8015028:	ecbd 8b02 	vpop	{d8}
 801502c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015030:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8015034:	f7eb f942 	bl	80002bc <__adddf3>
 8015038:	3d01      	subs	r5, #1
 801503a:	e7e6      	b.n	801500a <__kernel_rem_pio2+0x582>
 801503c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8015040:	f7eb f93c 	bl	80002bc <__adddf3>
 8015044:	3e01      	subs	r6, #1
 8015046:	e7bc      	b.n	8014fc2 <__kernel_rem_pio2+0x53a>
 8015048:	4602      	mov	r2, r0
 801504a:	460b      	mov	r3, r1
 801504c:	e7c1      	b.n	8014fd2 <__kernel_rem_pio2+0x54a>
 801504e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8015052:	f7eb f933 	bl	80002bc <__adddf3>
 8015056:	3401      	adds	r4, #1
 8015058:	e7c6      	b.n	8014fe8 <__kernel_rem_pio2+0x560>
 801505a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 801505e:	ed3a 7b02 	vldmdb	sl!, {d7}
 8015062:	4640      	mov	r0, r8
 8015064:	ec53 2b17 	vmov	r2, r3, d7
 8015068:	4649      	mov	r1, r9
 801506a:	ed8d 7b04 	vstr	d7, [sp, #16]
 801506e:	f7eb f925 	bl	80002bc <__adddf3>
 8015072:	4602      	mov	r2, r0
 8015074:	460b      	mov	r3, r1
 8015076:	4606      	mov	r6, r0
 8015078:	460f      	mov	r7, r1
 801507a:	4640      	mov	r0, r8
 801507c:	4649      	mov	r1, r9
 801507e:	f7eb f91b 	bl	80002b8 <__aeabi_dsub>
 8015082:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015086:	f7eb f919 	bl	80002bc <__adddf3>
 801508a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801508e:	e9ca 0100 	strd	r0, r1, [sl]
 8015092:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8015096:	e770      	b.n	8014f7a <__kernel_rem_pio2+0x4f2>
 8015098:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 801509c:	ed3a 7b02 	vldmdb	sl!, {d7}
 80150a0:	4630      	mov	r0, r6
 80150a2:	ec53 2b17 	vmov	r2, r3, d7
 80150a6:	4639      	mov	r1, r7
 80150a8:	ed8d 7b04 	vstr	d7, [sp, #16]
 80150ac:	f7eb f906 	bl	80002bc <__adddf3>
 80150b0:	4602      	mov	r2, r0
 80150b2:	460b      	mov	r3, r1
 80150b4:	4680      	mov	r8, r0
 80150b6:	4689      	mov	r9, r1
 80150b8:	4630      	mov	r0, r6
 80150ba:	4639      	mov	r1, r7
 80150bc:	f7eb f8fc 	bl	80002b8 <__aeabi_dsub>
 80150c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80150c4:	f7eb f8fa 	bl	80002bc <__adddf3>
 80150c8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80150cc:	e9ca 0100 	strd	r0, r1, [sl]
 80150d0:	e94a 8902 	strd	r8, r9, [sl, #-8]
 80150d4:	e756      	b.n	8014f84 <__kernel_rem_pio2+0x4fc>
 80150d6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80150da:	f7eb f8ef 	bl	80002bc <__adddf3>
 80150de:	3d01      	subs	r5, #1
 80150e0:	e756      	b.n	8014f90 <__kernel_rem_pio2+0x508>
 80150e2:	9b01      	ldr	r3, [sp, #4]
 80150e4:	9a01      	ldr	r2, [sp, #4]
 80150e6:	601f      	str	r7, [r3, #0]
 80150e8:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80150ec:	605c      	str	r4, [r3, #4]
 80150ee:	609d      	str	r5, [r3, #8]
 80150f0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80150f4:	60d3      	str	r3, [r2, #12]
 80150f6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80150fa:	6110      	str	r0, [r2, #16]
 80150fc:	6153      	str	r3, [r2, #20]
 80150fe:	e78e      	b.n	801501e <__kernel_rem_pio2+0x596>
 8015100:	41700000 	.word	0x41700000
 8015104:	3e700000 	.word	0x3e700000

08015108 <__kernel_sin>:
 8015108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801510c:	ec55 4b10 	vmov	r4, r5, d0
 8015110:	b085      	sub	sp, #20
 8015112:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8015116:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801511a:	ed8d 1b00 	vstr	d1, [sp]
 801511e:	9002      	str	r0, [sp, #8]
 8015120:	da06      	bge.n	8015130 <__kernel_sin+0x28>
 8015122:	ee10 0a10 	vmov	r0, s0
 8015126:	4629      	mov	r1, r5
 8015128:	f7eb fd2e 	bl	8000b88 <__aeabi_d2iz>
 801512c:	2800      	cmp	r0, #0
 801512e:	d051      	beq.n	80151d4 <__kernel_sin+0xcc>
 8015130:	4622      	mov	r2, r4
 8015132:	462b      	mov	r3, r5
 8015134:	4620      	mov	r0, r4
 8015136:	4629      	mov	r1, r5
 8015138:	f7eb fa76 	bl	8000628 <__aeabi_dmul>
 801513c:	4682      	mov	sl, r0
 801513e:	468b      	mov	fp, r1
 8015140:	4602      	mov	r2, r0
 8015142:	460b      	mov	r3, r1
 8015144:	4620      	mov	r0, r4
 8015146:	4629      	mov	r1, r5
 8015148:	f7eb fa6e 	bl	8000628 <__aeabi_dmul>
 801514c:	a341      	add	r3, pc, #260	; (adr r3, 8015254 <__kernel_sin+0x14c>)
 801514e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015152:	4680      	mov	r8, r0
 8015154:	4689      	mov	r9, r1
 8015156:	4650      	mov	r0, sl
 8015158:	4659      	mov	r1, fp
 801515a:	f7eb fa65 	bl	8000628 <__aeabi_dmul>
 801515e:	a33f      	add	r3, pc, #252	; (adr r3, 801525c <__kernel_sin+0x154>)
 8015160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015164:	f7eb f8a8 	bl	80002b8 <__aeabi_dsub>
 8015168:	4652      	mov	r2, sl
 801516a:	465b      	mov	r3, fp
 801516c:	f7eb fa5c 	bl	8000628 <__aeabi_dmul>
 8015170:	a33c      	add	r3, pc, #240	; (adr r3, 8015264 <__kernel_sin+0x15c>)
 8015172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015176:	f7eb f8a1 	bl	80002bc <__adddf3>
 801517a:	4652      	mov	r2, sl
 801517c:	465b      	mov	r3, fp
 801517e:	f7eb fa53 	bl	8000628 <__aeabi_dmul>
 8015182:	a33a      	add	r3, pc, #232	; (adr r3, 801526c <__kernel_sin+0x164>)
 8015184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015188:	f7eb f896 	bl	80002b8 <__aeabi_dsub>
 801518c:	4652      	mov	r2, sl
 801518e:	465b      	mov	r3, fp
 8015190:	f7eb fa4a 	bl	8000628 <__aeabi_dmul>
 8015194:	a337      	add	r3, pc, #220	; (adr r3, 8015274 <__kernel_sin+0x16c>)
 8015196:	e9d3 2300 	ldrd	r2, r3, [r3]
 801519a:	f7eb f88f 	bl	80002bc <__adddf3>
 801519e:	9b02      	ldr	r3, [sp, #8]
 80151a0:	4606      	mov	r6, r0
 80151a2:	460f      	mov	r7, r1
 80151a4:	b9db      	cbnz	r3, 80151de <__kernel_sin+0xd6>
 80151a6:	4602      	mov	r2, r0
 80151a8:	460b      	mov	r3, r1
 80151aa:	4650      	mov	r0, sl
 80151ac:	4659      	mov	r1, fp
 80151ae:	f7eb fa3b 	bl	8000628 <__aeabi_dmul>
 80151b2:	a325      	add	r3, pc, #148	; (adr r3, 8015248 <__kernel_sin+0x140>)
 80151b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151b8:	f7eb f87e 	bl	80002b8 <__aeabi_dsub>
 80151bc:	4642      	mov	r2, r8
 80151be:	464b      	mov	r3, r9
 80151c0:	f7eb fa32 	bl	8000628 <__aeabi_dmul>
 80151c4:	4602      	mov	r2, r0
 80151c6:	460b      	mov	r3, r1
 80151c8:	4620      	mov	r0, r4
 80151ca:	4629      	mov	r1, r5
 80151cc:	f7eb f876 	bl	80002bc <__adddf3>
 80151d0:	4604      	mov	r4, r0
 80151d2:	460d      	mov	r5, r1
 80151d4:	ec45 4b10 	vmov	d0, r4, r5
 80151d8:	b005      	add	sp, #20
 80151da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80151de:	2200      	movs	r2, #0
 80151e0:	4b1b      	ldr	r3, [pc, #108]	; (8015250 <__kernel_sin+0x148>)
 80151e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80151e6:	f7eb fa1f 	bl	8000628 <__aeabi_dmul>
 80151ea:	4632      	mov	r2, r6
 80151ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80151f0:	463b      	mov	r3, r7
 80151f2:	4640      	mov	r0, r8
 80151f4:	4649      	mov	r1, r9
 80151f6:	f7eb fa17 	bl	8000628 <__aeabi_dmul>
 80151fa:	4602      	mov	r2, r0
 80151fc:	460b      	mov	r3, r1
 80151fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015202:	f7eb f859 	bl	80002b8 <__aeabi_dsub>
 8015206:	4652      	mov	r2, sl
 8015208:	465b      	mov	r3, fp
 801520a:	f7eb fa0d 	bl	8000628 <__aeabi_dmul>
 801520e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015212:	f7eb f851 	bl	80002b8 <__aeabi_dsub>
 8015216:	a30c      	add	r3, pc, #48	; (adr r3, 8015248 <__kernel_sin+0x140>)
 8015218:	e9d3 2300 	ldrd	r2, r3, [r3]
 801521c:	4606      	mov	r6, r0
 801521e:	460f      	mov	r7, r1
 8015220:	4640      	mov	r0, r8
 8015222:	4649      	mov	r1, r9
 8015224:	f7eb fa00 	bl	8000628 <__aeabi_dmul>
 8015228:	4602      	mov	r2, r0
 801522a:	460b      	mov	r3, r1
 801522c:	4630      	mov	r0, r6
 801522e:	4639      	mov	r1, r7
 8015230:	f7eb f844 	bl	80002bc <__adddf3>
 8015234:	4602      	mov	r2, r0
 8015236:	460b      	mov	r3, r1
 8015238:	4620      	mov	r0, r4
 801523a:	4629      	mov	r1, r5
 801523c:	f7eb f83c 	bl	80002b8 <__aeabi_dsub>
 8015240:	e7c6      	b.n	80151d0 <__kernel_sin+0xc8>
 8015242:	bf00      	nop
 8015244:	f3af 8000 	nop.w
 8015248:	55555549 	.word	0x55555549
 801524c:	3fc55555 	.word	0x3fc55555
 8015250:	3fe00000 	.word	0x3fe00000
 8015254:	5acfd57c 	.word	0x5acfd57c
 8015258:	3de5d93a 	.word	0x3de5d93a
 801525c:	8a2b9ceb 	.word	0x8a2b9ceb
 8015260:	3e5ae5e6 	.word	0x3e5ae5e6
 8015264:	57b1fe7d 	.word	0x57b1fe7d
 8015268:	3ec71de3 	.word	0x3ec71de3
 801526c:	19c161d5 	.word	0x19c161d5
 8015270:	3f2a01a0 	.word	0x3f2a01a0
 8015274:	1110f8a6 	.word	0x1110f8a6
 8015278:	3f811111 	.word	0x3f811111
 801527c:	00000000 	.word	0x00000000

08015280 <__kernel_tan>:
 8015280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015284:	ec5b ab10 	vmov	sl, fp, d0
 8015288:	4bbf      	ldr	r3, [pc, #764]	; (8015588 <__kernel_tan+0x308>)
 801528a:	b089      	sub	sp, #36	; 0x24
 801528c:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 8015290:	429f      	cmp	r7, r3
 8015292:	ec59 8b11 	vmov	r8, r9, d1
 8015296:	4606      	mov	r6, r0
 8015298:	f8cd b008 	str.w	fp, [sp, #8]
 801529c:	dc22      	bgt.n	80152e4 <__kernel_tan+0x64>
 801529e:	ee10 0a10 	vmov	r0, s0
 80152a2:	4659      	mov	r1, fp
 80152a4:	f7eb fc70 	bl	8000b88 <__aeabi_d2iz>
 80152a8:	2800      	cmp	r0, #0
 80152aa:	d145      	bne.n	8015338 <__kernel_tan+0xb8>
 80152ac:	1c73      	adds	r3, r6, #1
 80152ae:	4652      	mov	r2, sl
 80152b0:	4313      	orrs	r3, r2
 80152b2:	433b      	orrs	r3, r7
 80152b4:	d110      	bne.n	80152d8 <__kernel_tan+0x58>
 80152b6:	ec4b ab10 	vmov	d0, sl, fp
 80152ba:	f000 f9ad 	bl	8015618 <fabs>
 80152be:	49b3      	ldr	r1, [pc, #716]	; (801558c <__kernel_tan+0x30c>)
 80152c0:	ec53 2b10 	vmov	r2, r3, d0
 80152c4:	2000      	movs	r0, #0
 80152c6:	f7eb fad9 	bl	800087c <__aeabi_ddiv>
 80152ca:	4682      	mov	sl, r0
 80152cc:	468b      	mov	fp, r1
 80152ce:	ec4b ab10 	vmov	d0, sl, fp
 80152d2:	b009      	add	sp, #36	; 0x24
 80152d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80152d8:	2e01      	cmp	r6, #1
 80152da:	d0f8      	beq.n	80152ce <__kernel_tan+0x4e>
 80152dc:	465b      	mov	r3, fp
 80152de:	2000      	movs	r0, #0
 80152e0:	49ab      	ldr	r1, [pc, #684]	; (8015590 <__kernel_tan+0x310>)
 80152e2:	e7f0      	b.n	80152c6 <__kernel_tan+0x46>
 80152e4:	4bab      	ldr	r3, [pc, #684]	; (8015594 <__kernel_tan+0x314>)
 80152e6:	429f      	cmp	r7, r3
 80152e8:	dd26      	ble.n	8015338 <__kernel_tan+0xb8>
 80152ea:	9b02      	ldr	r3, [sp, #8]
 80152ec:	2b00      	cmp	r3, #0
 80152ee:	da09      	bge.n	8015304 <__kernel_tan+0x84>
 80152f0:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80152f4:	469b      	mov	fp, r3
 80152f6:	ee10 aa10 	vmov	sl, s0
 80152fa:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80152fe:	ee11 8a10 	vmov	r8, s2
 8015302:	4699      	mov	r9, r3
 8015304:	4652      	mov	r2, sl
 8015306:	465b      	mov	r3, fp
 8015308:	a181      	add	r1, pc, #516	; (adr r1, 8015510 <__kernel_tan+0x290>)
 801530a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801530e:	f7ea ffd3 	bl	80002b8 <__aeabi_dsub>
 8015312:	4642      	mov	r2, r8
 8015314:	464b      	mov	r3, r9
 8015316:	4604      	mov	r4, r0
 8015318:	460d      	mov	r5, r1
 801531a:	a17f      	add	r1, pc, #508	; (adr r1, 8015518 <__kernel_tan+0x298>)
 801531c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015320:	f7ea ffca 	bl	80002b8 <__aeabi_dsub>
 8015324:	4622      	mov	r2, r4
 8015326:	462b      	mov	r3, r5
 8015328:	f7ea ffc8 	bl	80002bc <__adddf3>
 801532c:	f04f 0800 	mov.w	r8, #0
 8015330:	4682      	mov	sl, r0
 8015332:	468b      	mov	fp, r1
 8015334:	f04f 0900 	mov.w	r9, #0
 8015338:	4652      	mov	r2, sl
 801533a:	465b      	mov	r3, fp
 801533c:	4650      	mov	r0, sl
 801533e:	4659      	mov	r1, fp
 8015340:	f7eb f972 	bl	8000628 <__aeabi_dmul>
 8015344:	4602      	mov	r2, r0
 8015346:	460b      	mov	r3, r1
 8015348:	e9cd 0100 	strd	r0, r1, [sp]
 801534c:	f7eb f96c 	bl	8000628 <__aeabi_dmul>
 8015350:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015354:	4604      	mov	r4, r0
 8015356:	460d      	mov	r5, r1
 8015358:	4650      	mov	r0, sl
 801535a:	4659      	mov	r1, fp
 801535c:	f7eb f964 	bl	8000628 <__aeabi_dmul>
 8015360:	a36f      	add	r3, pc, #444	; (adr r3, 8015520 <__kernel_tan+0x2a0>)
 8015362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015366:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801536a:	4620      	mov	r0, r4
 801536c:	4629      	mov	r1, r5
 801536e:	f7eb f95b 	bl	8000628 <__aeabi_dmul>
 8015372:	a36d      	add	r3, pc, #436	; (adr r3, 8015528 <__kernel_tan+0x2a8>)
 8015374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015378:	f7ea ffa0 	bl	80002bc <__adddf3>
 801537c:	4622      	mov	r2, r4
 801537e:	462b      	mov	r3, r5
 8015380:	f7eb f952 	bl	8000628 <__aeabi_dmul>
 8015384:	a36a      	add	r3, pc, #424	; (adr r3, 8015530 <__kernel_tan+0x2b0>)
 8015386:	e9d3 2300 	ldrd	r2, r3, [r3]
 801538a:	f7ea ff97 	bl	80002bc <__adddf3>
 801538e:	4622      	mov	r2, r4
 8015390:	462b      	mov	r3, r5
 8015392:	f7eb f949 	bl	8000628 <__aeabi_dmul>
 8015396:	a368      	add	r3, pc, #416	; (adr r3, 8015538 <__kernel_tan+0x2b8>)
 8015398:	e9d3 2300 	ldrd	r2, r3, [r3]
 801539c:	f7ea ff8e 	bl	80002bc <__adddf3>
 80153a0:	4622      	mov	r2, r4
 80153a2:	462b      	mov	r3, r5
 80153a4:	f7eb f940 	bl	8000628 <__aeabi_dmul>
 80153a8:	a365      	add	r3, pc, #404	; (adr r3, 8015540 <__kernel_tan+0x2c0>)
 80153aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153ae:	f7ea ff85 	bl	80002bc <__adddf3>
 80153b2:	4622      	mov	r2, r4
 80153b4:	462b      	mov	r3, r5
 80153b6:	f7eb f937 	bl	8000628 <__aeabi_dmul>
 80153ba:	a363      	add	r3, pc, #396	; (adr r3, 8015548 <__kernel_tan+0x2c8>)
 80153bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153c0:	f7ea ff7c 	bl	80002bc <__adddf3>
 80153c4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80153c8:	f7eb f92e 	bl	8000628 <__aeabi_dmul>
 80153cc:	a360      	add	r3, pc, #384	; (adr r3, 8015550 <__kernel_tan+0x2d0>)
 80153ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153d2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80153d6:	4620      	mov	r0, r4
 80153d8:	4629      	mov	r1, r5
 80153da:	f7eb f925 	bl	8000628 <__aeabi_dmul>
 80153de:	a35e      	add	r3, pc, #376	; (adr r3, 8015558 <__kernel_tan+0x2d8>)
 80153e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153e4:	f7ea ff6a 	bl	80002bc <__adddf3>
 80153e8:	4622      	mov	r2, r4
 80153ea:	462b      	mov	r3, r5
 80153ec:	f7eb f91c 	bl	8000628 <__aeabi_dmul>
 80153f0:	a35b      	add	r3, pc, #364	; (adr r3, 8015560 <__kernel_tan+0x2e0>)
 80153f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153f6:	f7ea ff61 	bl	80002bc <__adddf3>
 80153fa:	4622      	mov	r2, r4
 80153fc:	462b      	mov	r3, r5
 80153fe:	f7eb f913 	bl	8000628 <__aeabi_dmul>
 8015402:	a359      	add	r3, pc, #356	; (adr r3, 8015568 <__kernel_tan+0x2e8>)
 8015404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015408:	f7ea ff58 	bl	80002bc <__adddf3>
 801540c:	4622      	mov	r2, r4
 801540e:	462b      	mov	r3, r5
 8015410:	f7eb f90a 	bl	8000628 <__aeabi_dmul>
 8015414:	a356      	add	r3, pc, #344	; (adr r3, 8015570 <__kernel_tan+0x2f0>)
 8015416:	e9d3 2300 	ldrd	r2, r3, [r3]
 801541a:	f7ea ff4f 	bl	80002bc <__adddf3>
 801541e:	4622      	mov	r2, r4
 8015420:	462b      	mov	r3, r5
 8015422:	f7eb f901 	bl	8000628 <__aeabi_dmul>
 8015426:	a354      	add	r3, pc, #336	; (adr r3, 8015578 <__kernel_tan+0x2f8>)
 8015428:	e9d3 2300 	ldrd	r2, r3, [r3]
 801542c:	f7ea ff46 	bl	80002bc <__adddf3>
 8015430:	4602      	mov	r2, r0
 8015432:	460b      	mov	r3, r1
 8015434:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015438:	f7ea ff40 	bl	80002bc <__adddf3>
 801543c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015440:	f7eb f8f2 	bl	8000628 <__aeabi_dmul>
 8015444:	4642      	mov	r2, r8
 8015446:	464b      	mov	r3, r9
 8015448:	f7ea ff38 	bl	80002bc <__adddf3>
 801544c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015450:	f7eb f8ea 	bl	8000628 <__aeabi_dmul>
 8015454:	4642      	mov	r2, r8
 8015456:	464b      	mov	r3, r9
 8015458:	f7ea ff30 	bl	80002bc <__adddf3>
 801545c:	a348      	add	r3, pc, #288	; (adr r3, 8015580 <__kernel_tan+0x300>)
 801545e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015462:	4604      	mov	r4, r0
 8015464:	460d      	mov	r5, r1
 8015466:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801546a:	f7eb f8dd 	bl	8000628 <__aeabi_dmul>
 801546e:	4622      	mov	r2, r4
 8015470:	462b      	mov	r3, r5
 8015472:	f7ea ff23 	bl	80002bc <__adddf3>
 8015476:	e9cd 0100 	strd	r0, r1, [sp]
 801547a:	460b      	mov	r3, r1
 801547c:	4602      	mov	r2, r0
 801547e:	4659      	mov	r1, fp
 8015480:	4650      	mov	r0, sl
 8015482:	f7ea ff1b 	bl	80002bc <__adddf3>
 8015486:	4b43      	ldr	r3, [pc, #268]	; (8015594 <__kernel_tan+0x314>)
 8015488:	429f      	cmp	r7, r3
 801548a:	4604      	mov	r4, r0
 801548c:	460d      	mov	r5, r1
 801548e:	f340 8083 	ble.w	8015598 <__kernel_tan+0x318>
 8015492:	4630      	mov	r0, r6
 8015494:	f7eb f85e 	bl	8000554 <__aeabi_i2d>
 8015498:	4622      	mov	r2, r4
 801549a:	4680      	mov	r8, r0
 801549c:	4689      	mov	r9, r1
 801549e:	462b      	mov	r3, r5
 80154a0:	4620      	mov	r0, r4
 80154a2:	4629      	mov	r1, r5
 80154a4:	f7eb f8c0 	bl	8000628 <__aeabi_dmul>
 80154a8:	4642      	mov	r2, r8
 80154aa:	4606      	mov	r6, r0
 80154ac:	460f      	mov	r7, r1
 80154ae:	464b      	mov	r3, r9
 80154b0:	4620      	mov	r0, r4
 80154b2:	4629      	mov	r1, r5
 80154b4:	f7ea ff02 	bl	80002bc <__adddf3>
 80154b8:	4602      	mov	r2, r0
 80154ba:	460b      	mov	r3, r1
 80154bc:	4630      	mov	r0, r6
 80154be:	4639      	mov	r1, r7
 80154c0:	f7eb f9dc 	bl	800087c <__aeabi_ddiv>
 80154c4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80154c8:	f7ea fef6 	bl	80002b8 <__aeabi_dsub>
 80154cc:	4602      	mov	r2, r0
 80154ce:	460b      	mov	r3, r1
 80154d0:	4650      	mov	r0, sl
 80154d2:	4659      	mov	r1, fp
 80154d4:	f7ea fef0 	bl	80002b8 <__aeabi_dsub>
 80154d8:	4602      	mov	r2, r0
 80154da:	460b      	mov	r3, r1
 80154dc:	f7ea feee 	bl	80002bc <__adddf3>
 80154e0:	4602      	mov	r2, r0
 80154e2:	460b      	mov	r3, r1
 80154e4:	4640      	mov	r0, r8
 80154e6:	4649      	mov	r1, r9
 80154e8:	f7ea fee6 	bl	80002b8 <__aeabi_dsub>
 80154ec:	9b02      	ldr	r3, [sp, #8]
 80154ee:	4604      	mov	r4, r0
 80154f0:	1798      	asrs	r0, r3, #30
 80154f2:	f000 0002 	and.w	r0, r0, #2
 80154f6:	f1c0 0001 	rsb	r0, r0, #1
 80154fa:	460d      	mov	r5, r1
 80154fc:	f7eb f82a 	bl	8000554 <__aeabi_i2d>
 8015500:	4602      	mov	r2, r0
 8015502:	460b      	mov	r3, r1
 8015504:	4620      	mov	r0, r4
 8015506:	4629      	mov	r1, r5
 8015508:	f7eb f88e 	bl	8000628 <__aeabi_dmul>
 801550c:	e6dd      	b.n	80152ca <__kernel_tan+0x4a>
 801550e:	bf00      	nop
 8015510:	54442d18 	.word	0x54442d18
 8015514:	3fe921fb 	.word	0x3fe921fb
 8015518:	33145c07 	.word	0x33145c07
 801551c:	3c81a626 	.word	0x3c81a626
 8015520:	74bf7ad4 	.word	0x74bf7ad4
 8015524:	3efb2a70 	.word	0x3efb2a70
 8015528:	32f0a7e9 	.word	0x32f0a7e9
 801552c:	3f12b80f 	.word	0x3f12b80f
 8015530:	1a8d1068 	.word	0x1a8d1068
 8015534:	3f3026f7 	.word	0x3f3026f7
 8015538:	fee08315 	.word	0xfee08315
 801553c:	3f57dbc8 	.word	0x3f57dbc8
 8015540:	e96e8493 	.word	0xe96e8493
 8015544:	3f8226e3 	.word	0x3f8226e3
 8015548:	1bb341fe 	.word	0x1bb341fe
 801554c:	3faba1ba 	.word	0x3faba1ba
 8015550:	db605373 	.word	0xdb605373
 8015554:	bef375cb 	.word	0xbef375cb
 8015558:	a03792a6 	.word	0xa03792a6
 801555c:	3f147e88 	.word	0x3f147e88
 8015560:	f2f26501 	.word	0xf2f26501
 8015564:	3f4344d8 	.word	0x3f4344d8
 8015568:	c9560328 	.word	0xc9560328
 801556c:	3f6d6d22 	.word	0x3f6d6d22
 8015570:	8406d637 	.word	0x8406d637
 8015574:	3f9664f4 	.word	0x3f9664f4
 8015578:	1110fe7a 	.word	0x1110fe7a
 801557c:	3fc11111 	.word	0x3fc11111
 8015580:	55555563 	.word	0x55555563
 8015584:	3fd55555 	.word	0x3fd55555
 8015588:	3e2fffff 	.word	0x3e2fffff
 801558c:	3ff00000 	.word	0x3ff00000
 8015590:	bff00000 	.word	0xbff00000
 8015594:	3fe59427 	.word	0x3fe59427
 8015598:	2e01      	cmp	r6, #1
 801559a:	d036      	beq.n	801560a <__kernel_tan+0x38a>
 801559c:	460f      	mov	r7, r1
 801559e:	4602      	mov	r2, r0
 80155a0:	460b      	mov	r3, r1
 80155a2:	2000      	movs	r0, #0
 80155a4:	491a      	ldr	r1, [pc, #104]	; (8015610 <__kernel_tan+0x390>)
 80155a6:	f7eb f969 	bl	800087c <__aeabi_ddiv>
 80155aa:	2600      	movs	r6, #0
 80155ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80155b0:	4652      	mov	r2, sl
 80155b2:	465b      	mov	r3, fp
 80155b4:	4630      	mov	r0, r6
 80155b6:	4639      	mov	r1, r7
 80155b8:	f7ea fe7e 	bl	80002b8 <__aeabi_dsub>
 80155bc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80155c0:	4602      	mov	r2, r0
 80155c2:	460b      	mov	r3, r1
 80155c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80155c8:	f7ea fe76 	bl	80002b8 <__aeabi_dsub>
 80155cc:	4632      	mov	r2, r6
 80155ce:	462b      	mov	r3, r5
 80155d0:	f7eb f82a 	bl	8000628 <__aeabi_dmul>
 80155d4:	4632      	mov	r2, r6
 80155d6:	4682      	mov	sl, r0
 80155d8:	468b      	mov	fp, r1
 80155da:	462b      	mov	r3, r5
 80155dc:	4630      	mov	r0, r6
 80155de:	4639      	mov	r1, r7
 80155e0:	f7eb f822 	bl	8000628 <__aeabi_dmul>
 80155e4:	2200      	movs	r2, #0
 80155e6:	4b0b      	ldr	r3, [pc, #44]	; (8015614 <__kernel_tan+0x394>)
 80155e8:	f7ea fe68 	bl	80002bc <__adddf3>
 80155ec:	4602      	mov	r2, r0
 80155ee:	460b      	mov	r3, r1
 80155f0:	4650      	mov	r0, sl
 80155f2:	4659      	mov	r1, fp
 80155f4:	f7ea fe62 	bl	80002bc <__adddf3>
 80155f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80155fc:	f7eb f814 	bl	8000628 <__aeabi_dmul>
 8015600:	4632      	mov	r2, r6
 8015602:	462b      	mov	r3, r5
 8015604:	f7ea fe5a 	bl	80002bc <__adddf3>
 8015608:	e65f      	b.n	80152ca <__kernel_tan+0x4a>
 801560a:	4682      	mov	sl, r0
 801560c:	468b      	mov	fp, r1
 801560e:	e65e      	b.n	80152ce <__kernel_tan+0x4e>
 8015610:	bff00000 	.word	0xbff00000
 8015614:	3ff00000 	.word	0x3ff00000

08015618 <fabs>:
 8015618:	ec51 0b10 	vmov	r0, r1, d0
 801561c:	ee10 2a10 	vmov	r2, s0
 8015620:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015624:	ec43 2b10 	vmov	d0, r2, r3
 8015628:	4770      	bx	lr
 801562a:	0000      	movs	r0, r0
 801562c:	0000      	movs	r0, r0
	...

08015630 <floor>:
 8015630:	ec51 0b10 	vmov	r0, r1, d0
 8015634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015638:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801563c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8015640:	2e13      	cmp	r6, #19
 8015642:	460c      	mov	r4, r1
 8015644:	ee10 5a10 	vmov	r5, s0
 8015648:	4680      	mov	r8, r0
 801564a:	dc34      	bgt.n	80156b6 <floor+0x86>
 801564c:	2e00      	cmp	r6, #0
 801564e:	da16      	bge.n	801567e <floor+0x4e>
 8015650:	a335      	add	r3, pc, #212	; (adr r3, 8015728 <floor+0xf8>)
 8015652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015656:	f7ea fe31 	bl	80002bc <__adddf3>
 801565a:	2200      	movs	r2, #0
 801565c:	2300      	movs	r3, #0
 801565e:	f7eb fa73 	bl	8000b48 <__aeabi_dcmpgt>
 8015662:	b148      	cbz	r0, 8015678 <floor+0x48>
 8015664:	2c00      	cmp	r4, #0
 8015666:	da59      	bge.n	801571c <floor+0xec>
 8015668:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801566c:	4a30      	ldr	r2, [pc, #192]	; (8015730 <floor+0x100>)
 801566e:	432b      	orrs	r3, r5
 8015670:	2500      	movs	r5, #0
 8015672:	42ab      	cmp	r3, r5
 8015674:	bf18      	it	ne
 8015676:	4614      	movne	r4, r2
 8015678:	4621      	mov	r1, r4
 801567a:	4628      	mov	r0, r5
 801567c:	e025      	b.n	80156ca <floor+0x9a>
 801567e:	4f2d      	ldr	r7, [pc, #180]	; (8015734 <floor+0x104>)
 8015680:	4137      	asrs	r7, r6
 8015682:	ea01 0307 	and.w	r3, r1, r7
 8015686:	4303      	orrs	r3, r0
 8015688:	d01f      	beq.n	80156ca <floor+0x9a>
 801568a:	a327      	add	r3, pc, #156	; (adr r3, 8015728 <floor+0xf8>)
 801568c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015690:	f7ea fe14 	bl	80002bc <__adddf3>
 8015694:	2200      	movs	r2, #0
 8015696:	2300      	movs	r3, #0
 8015698:	f7eb fa56 	bl	8000b48 <__aeabi_dcmpgt>
 801569c:	2800      	cmp	r0, #0
 801569e:	d0eb      	beq.n	8015678 <floor+0x48>
 80156a0:	2c00      	cmp	r4, #0
 80156a2:	bfbe      	ittt	lt
 80156a4:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80156a8:	fa43 f606 	asrlt.w	r6, r3, r6
 80156ac:	19a4      	addlt	r4, r4, r6
 80156ae:	ea24 0407 	bic.w	r4, r4, r7
 80156b2:	2500      	movs	r5, #0
 80156b4:	e7e0      	b.n	8015678 <floor+0x48>
 80156b6:	2e33      	cmp	r6, #51	; 0x33
 80156b8:	dd0b      	ble.n	80156d2 <floor+0xa2>
 80156ba:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80156be:	d104      	bne.n	80156ca <floor+0x9a>
 80156c0:	ee10 2a10 	vmov	r2, s0
 80156c4:	460b      	mov	r3, r1
 80156c6:	f7ea fdf9 	bl	80002bc <__adddf3>
 80156ca:	ec41 0b10 	vmov	d0, r0, r1
 80156ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80156d2:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80156d6:	f04f 33ff 	mov.w	r3, #4294967295
 80156da:	fa23 f707 	lsr.w	r7, r3, r7
 80156de:	4207      	tst	r7, r0
 80156e0:	d0f3      	beq.n	80156ca <floor+0x9a>
 80156e2:	a311      	add	r3, pc, #68	; (adr r3, 8015728 <floor+0xf8>)
 80156e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156e8:	f7ea fde8 	bl	80002bc <__adddf3>
 80156ec:	2200      	movs	r2, #0
 80156ee:	2300      	movs	r3, #0
 80156f0:	f7eb fa2a 	bl	8000b48 <__aeabi_dcmpgt>
 80156f4:	2800      	cmp	r0, #0
 80156f6:	d0bf      	beq.n	8015678 <floor+0x48>
 80156f8:	2c00      	cmp	r4, #0
 80156fa:	da02      	bge.n	8015702 <floor+0xd2>
 80156fc:	2e14      	cmp	r6, #20
 80156fe:	d103      	bne.n	8015708 <floor+0xd8>
 8015700:	3401      	adds	r4, #1
 8015702:	ea25 0507 	bic.w	r5, r5, r7
 8015706:	e7b7      	b.n	8015678 <floor+0x48>
 8015708:	2301      	movs	r3, #1
 801570a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801570e:	fa03 f606 	lsl.w	r6, r3, r6
 8015712:	4435      	add	r5, r6
 8015714:	4545      	cmp	r5, r8
 8015716:	bf38      	it	cc
 8015718:	18e4      	addcc	r4, r4, r3
 801571a:	e7f2      	b.n	8015702 <floor+0xd2>
 801571c:	2500      	movs	r5, #0
 801571e:	462c      	mov	r4, r5
 8015720:	e7aa      	b.n	8015678 <floor+0x48>
 8015722:	bf00      	nop
 8015724:	f3af 8000 	nop.w
 8015728:	8800759c 	.word	0x8800759c
 801572c:	7e37e43c 	.word	0x7e37e43c
 8015730:	bff00000 	.word	0xbff00000
 8015734:	000fffff 	.word	0x000fffff

08015738 <scalbn>:
 8015738:	b570      	push	{r4, r5, r6, lr}
 801573a:	ec55 4b10 	vmov	r4, r5, d0
 801573e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8015742:	4606      	mov	r6, r0
 8015744:	462b      	mov	r3, r5
 8015746:	b9aa      	cbnz	r2, 8015774 <scalbn+0x3c>
 8015748:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801574c:	4323      	orrs	r3, r4
 801574e:	d03b      	beq.n	80157c8 <scalbn+0x90>
 8015750:	4b31      	ldr	r3, [pc, #196]	; (8015818 <scalbn+0xe0>)
 8015752:	4629      	mov	r1, r5
 8015754:	2200      	movs	r2, #0
 8015756:	ee10 0a10 	vmov	r0, s0
 801575a:	f7ea ff65 	bl	8000628 <__aeabi_dmul>
 801575e:	4b2f      	ldr	r3, [pc, #188]	; (801581c <scalbn+0xe4>)
 8015760:	429e      	cmp	r6, r3
 8015762:	4604      	mov	r4, r0
 8015764:	460d      	mov	r5, r1
 8015766:	da12      	bge.n	801578e <scalbn+0x56>
 8015768:	a327      	add	r3, pc, #156	; (adr r3, 8015808 <scalbn+0xd0>)
 801576a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801576e:	f7ea ff5b 	bl	8000628 <__aeabi_dmul>
 8015772:	e009      	b.n	8015788 <scalbn+0x50>
 8015774:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8015778:	428a      	cmp	r2, r1
 801577a:	d10c      	bne.n	8015796 <scalbn+0x5e>
 801577c:	ee10 2a10 	vmov	r2, s0
 8015780:	4620      	mov	r0, r4
 8015782:	4629      	mov	r1, r5
 8015784:	f7ea fd9a 	bl	80002bc <__adddf3>
 8015788:	4604      	mov	r4, r0
 801578a:	460d      	mov	r5, r1
 801578c:	e01c      	b.n	80157c8 <scalbn+0x90>
 801578e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8015792:	460b      	mov	r3, r1
 8015794:	3a36      	subs	r2, #54	; 0x36
 8015796:	4432      	add	r2, r6
 8015798:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801579c:	428a      	cmp	r2, r1
 801579e:	dd0b      	ble.n	80157b8 <scalbn+0x80>
 80157a0:	ec45 4b11 	vmov	d1, r4, r5
 80157a4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8015810 <scalbn+0xd8>
 80157a8:	f000 f83c 	bl	8015824 <copysign>
 80157ac:	a318      	add	r3, pc, #96	; (adr r3, 8015810 <scalbn+0xd8>)
 80157ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157b2:	ec51 0b10 	vmov	r0, r1, d0
 80157b6:	e7da      	b.n	801576e <scalbn+0x36>
 80157b8:	2a00      	cmp	r2, #0
 80157ba:	dd08      	ble.n	80157ce <scalbn+0x96>
 80157bc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80157c0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80157c4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80157c8:	ec45 4b10 	vmov	d0, r4, r5
 80157cc:	bd70      	pop	{r4, r5, r6, pc}
 80157ce:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80157d2:	da0d      	bge.n	80157f0 <scalbn+0xb8>
 80157d4:	f24c 3350 	movw	r3, #50000	; 0xc350
 80157d8:	429e      	cmp	r6, r3
 80157da:	ec45 4b11 	vmov	d1, r4, r5
 80157de:	dce1      	bgt.n	80157a4 <scalbn+0x6c>
 80157e0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8015808 <scalbn+0xd0>
 80157e4:	f000 f81e 	bl	8015824 <copysign>
 80157e8:	a307      	add	r3, pc, #28	; (adr r3, 8015808 <scalbn+0xd0>)
 80157ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157ee:	e7e0      	b.n	80157b2 <scalbn+0x7a>
 80157f0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80157f4:	3236      	adds	r2, #54	; 0x36
 80157f6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80157fa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80157fe:	4620      	mov	r0, r4
 8015800:	4629      	mov	r1, r5
 8015802:	2200      	movs	r2, #0
 8015804:	4b06      	ldr	r3, [pc, #24]	; (8015820 <scalbn+0xe8>)
 8015806:	e7b2      	b.n	801576e <scalbn+0x36>
 8015808:	c2f8f359 	.word	0xc2f8f359
 801580c:	01a56e1f 	.word	0x01a56e1f
 8015810:	8800759c 	.word	0x8800759c
 8015814:	7e37e43c 	.word	0x7e37e43c
 8015818:	43500000 	.word	0x43500000
 801581c:	ffff3cb0 	.word	0xffff3cb0
 8015820:	3c900000 	.word	0x3c900000

08015824 <copysign>:
 8015824:	ec51 0b10 	vmov	r0, r1, d0
 8015828:	ee11 0a90 	vmov	r0, s3
 801582c:	ee10 2a10 	vmov	r2, s0
 8015830:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8015834:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8015838:	ea41 0300 	orr.w	r3, r1, r0
 801583c:	ec43 2b10 	vmov	d0, r2, r3
 8015840:	4770      	bx	lr
	...

08015844 <__errno>:
 8015844:	4b01      	ldr	r3, [pc, #4]	; (801584c <__errno+0x8>)
 8015846:	6818      	ldr	r0, [r3, #0]
 8015848:	4770      	bx	lr
 801584a:	bf00      	nop
 801584c:	2000000c 	.word	0x2000000c

08015850 <__libc_init_array>:
 8015850:	b570      	push	{r4, r5, r6, lr}
 8015852:	4e0d      	ldr	r6, [pc, #52]	; (8015888 <__libc_init_array+0x38>)
 8015854:	4c0d      	ldr	r4, [pc, #52]	; (801588c <__libc_init_array+0x3c>)
 8015856:	1ba4      	subs	r4, r4, r6
 8015858:	10a4      	asrs	r4, r4, #2
 801585a:	2500      	movs	r5, #0
 801585c:	42a5      	cmp	r5, r4
 801585e:	d109      	bne.n	8015874 <__libc_init_array+0x24>
 8015860:	4e0b      	ldr	r6, [pc, #44]	; (8015890 <__libc_init_array+0x40>)
 8015862:	4c0c      	ldr	r4, [pc, #48]	; (8015894 <__libc_init_array+0x44>)
 8015864:	f004 f9e0 	bl	8019c28 <_init>
 8015868:	1ba4      	subs	r4, r4, r6
 801586a:	10a4      	asrs	r4, r4, #2
 801586c:	2500      	movs	r5, #0
 801586e:	42a5      	cmp	r5, r4
 8015870:	d105      	bne.n	801587e <__libc_init_array+0x2e>
 8015872:	bd70      	pop	{r4, r5, r6, pc}
 8015874:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015878:	4798      	blx	r3
 801587a:	3501      	adds	r5, #1
 801587c:	e7ee      	b.n	801585c <__libc_init_array+0xc>
 801587e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015882:	4798      	blx	r3
 8015884:	3501      	adds	r5, #1
 8015886:	e7f2      	b.n	801586e <__libc_init_array+0x1e>
 8015888:	0801a874 	.word	0x0801a874
 801588c:	0801a874 	.word	0x0801a874
 8015890:	0801a874 	.word	0x0801a874
 8015894:	0801a87c 	.word	0x0801a87c

08015898 <memcpy>:
 8015898:	b510      	push	{r4, lr}
 801589a:	1e43      	subs	r3, r0, #1
 801589c:	440a      	add	r2, r1
 801589e:	4291      	cmp	r1, r2
 80158a0:	d100      	bne.n	80158a4 <memcpy+0xc>
 80158a2:	bd10      	pop	{r4, pc}
 80158a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80158a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80158ac:	e7f7      	b.n	801589e <memcpy+0x6>

080158ae <memset>:
 80158ae:	4402      	add	r2, r0
 80158b0:	4603      	mov	r3, r0
 80158b2:	4293      	cmp	r3, r2
 80158b4:	d100      	bne.n	80158b8 <memset+0xa>
 80158b6:	4770      	bx	lr
 80158b8:	f803 1b01 	strb.w	r1, [r3], #1
 80158bc:	e7f9      	b.n	80158b2 <memset+0x4>

080158be <__cvt>:
 80158be:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80158c2:	ec55 4b10 	vmov	r4, r5, d0
 80158c6:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80158c8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80158cc:	2d00      	cmp	r5, #0
 80158ce:	460e      	mov	r6, r1
 80158d0:	4691      	mov	r9, r2
 80158d2:	4619      	mov	r1, r3
 80158d4:	bfb8      	it	lt
 80158d6:	4622      	movlt	r2, r4
 80158d8:	462b      	mov	r3, r5
 80158da:	f027 0720 	bic.w	r7, r7, #32
 80158de:	bfbb      	ittet	lt
 80158e0:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80158e4:	461d      	movlt	r5, r3
 80158e6:	2300      	movge	r3, #0
 80158e8:	232d      	movlt	r3, #45	; 0x2d
 80158ea:	bfb8      	it	lt
 80158ec:	4614      	movlt	r4, r2
 80158ee:	2f46      	cmp	r7, #70	; 0x46
 80158f0:	700b      	strb	r3, [r1, #0]
 80158f2:	d004      	beq.n	80158fe <__cvt+0x40>
 80158f4:	2f45      	cmp	r7, #69	; 0x45
 80158f6:	d100      	bne.n	80158fa <__cvt+0x3c>
 80158f8:	3601      	adds	r6, #1
 80158fa:	2102      	movs	r1, #2
 80158fc:	e000      	b.n	8015900 <__cvt+0x42>
 80158fe:	2103      	movs	r1, #3
 8015900:	ab03      	add	r3, sp, #12
 8015902:	9301      	str	r3, [sp, #4]
 8015904:	ab02      	add	r3, sp, #8
 8015906:	9300      	str	r3, [sp, #0]
 8015908:	4632      	mov	r2, r6
 801590a:	4653      	mov	r3, sl
 801590c:	ec45 4b10 	vmov	d0, r4, r5
 8015910:	f001 fdf6 	bl	8017500 <_dtoa_r>
 8015914:	2f47      	cmp	r7, #71	; 0x47
 8015916:	4680      	mov	r8, r0
 8015918:	d102      	bne.n	8015920 <__cvt+0x62>
 801591a:	f019 0f01 	tst.w	r9, #1
 801591e:	d026      	beq.n	801596e <__cvt+0xb0>
 8015920:	2f46      	cmp	r7, #70	; 0x46
 8015922:	eb08 0906 	add.w	r9, r8, r6
 8015926:	d111      	bne.n	801594c <__cvt+0x8e>
 8015928:	f898 3000 	ldrb.w	r3, [r8]
 801592c:	2b30      	cmp	r3, #48	; 0x30
 801592e:	d10a      	bne.n	8015946 <__cvt+0x88>
 8015930:	2200      	movs	r2, #0
 8015932:	2300      	movs	r3, #0
 8015934:	4620      	mov	r0, r4
 8015936:	4629      	mov	r1, r5
 8015938:	f7eb f8de 	bl	8000af8 <__aeabi_dcmpeq>
 801593c:	b918      	cbnz	r0, 8015946 <__cvt+0x88>
 801593e:	f1c6 0601 	rsb	r6, r6, #1
 8015942:	f8ca 6000 	str.w	r6, [sl]
 8015946:	f8da 3000 	ldr.w	r3, [sl]
 801594a:	4499      	add	r9, r3
 801594c:	2200      	movs	r2, #0
 801594e:	2300      	movs	r3, #0
 8015950:	4620      	mov	r0, r4
 8015952:	4629      	mov	r1, r5
 8015954:	f7eb f8d0 	bl	8000af8 <__aeabi_dcmpeq>
 8015958:	b938      	cbnz	r0, 801596a <__cvt+0xac>
 801595a:	2230      	movs	r2, #48	; 0x30
 801595c:	9b03      	ldr	r3, [sp, #12]
 801595e:	454b      	cmp	r3, r9
 8015960:	d205      	bcs.n	801596e <__cvt+0xb0>
 8015962:	1c59      	adds	r1, r3, #1
 8015964:	9103      	str	r1, [sp, #12]
 8015966:	701a      	strb	r2, [r3, #0]
 8015968:	e7f8      	b.n	801595c <__cvt+0x9e>
 801596a:	f8cd 900c 	str.w	r9, [sp, #12]
 801596e:	9b03      	ldr	r3, [sp, #12]
 8015970:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015972:	eba3 0308 	sub.w	r3, r3, r8
 8015976:	4640      	mov	r0, r8
 8015978:	6013      	str	r3, [r2, #0]
 801597a:	b004      	add	sp, #16
 801597c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08015980 <__exponent>:
 8015980:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015982:	2900      	cmp	r1, #0
 8015984:	4604      	mov	r4, r0
 8015986:	bfba      	itte	lt
 8015988:	4249      	neglt	r1, r1
 801598a:	232d      	movlt	r3, #45	; 0x2d
 801598c:	232b      	movge	r3, #43	; 0x2b
 801598e:	2909      	cmp	r1, #9
 8015990:	f804 2b02 	strb.w	r2, [r4], #2
 8015994:	7043      	strb	r3, [r0, #1]
 8015996:	dd20      	ble.n	80159da <__exponent+0x5a>
 8015998:	f10d 0307 	add.w	r3, sp, #7
 801599c:	461f      	mov	r7, r3
 801599e:	260a      	movs	r6, #10
 80159a0:	fb91 f5f6 	sdiv	r5, r1, r6
 80159a4:	fb06 1115 	mls	r1, r6, r5, r1
 80159a8:	3130      	adds	r1, #48	; 0x30
 80159aa:	2d09      	cmp	r5, #9
 80159ac:	f803 1c01 	strb.w	r1, [r3, #-1]
 80159b0:	f103 32ff 	add.w	r2, r3, #4294967295
 80159b4:	4629      	mov	r1, r5
 80159b6:	dc09      	bgt.n	80159cc <__exponent+0x4c>
 80159b8:	3130      	adds	r1, #48	; 0x30
 80159ba:	3b02      	subs	r3, #2
 80159bc:	f802 1c01 	strb.w	r1, [r2, #-1]
 80159c0:	42bb      	cmp	r3, r7
 80159c2:	4622      	mov	r2, r4
 80159c4:	d304      	bcc.n	80159d0 <__exponent+0x50>
 80159c6:	1a10      	subs	r0, r2, r0
 80159c8:	b003      	add	sp, #12
 80159ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80159cc:	4613      	mov	r3, r2
 80159ce:	e7e7      	b.n	80159a0 <__exponent+0x20>
 80159d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80159d4:	f804 2b01 	strb.w	r2, [r4], #1
 80159d8:	e7f2      	b.n	80159c0 <__exponent+0x40>
 80159da:	2330      	movs	r3, #48	; 0x30
 80159dc:	4419      	add	r1, r3
 80159de:	7083      	strb	r3, [r0, #2]
 80159e0:	1d02      	adds	r2, r0, #4
 80159e2:	70c1      	strb	r1, [r0, #3]
 80159e4:	e7ef      	b.n	80159c6 <__exponent+0x46>
	...

080159e8 <_printf_float>:
 80159e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80159ec:	b08d      	sub	sp, #52	; 0x34
 80159ee:	460c      	mov	r4, r1
 80159f0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80159f4:	4616      	mov	r6, r2
 80159f6:	461f      	mov	r7, r3
 80159f8:	4605      	mov	r5, r0
 80159fa:	f002 fe73 	bl	80186e4 <_localeconv_r>
 80159fe:	6803      	ldr	r3, [r0, #0]
 8015a00:	9304      	str	r3, [sp, #16]
 8015a02:	4618      	mov	r0, r3
 8015a04:	f7ea fbfc 	bl	8000200 <strlen>
 8015a08:	2300      	movs	r3, #0
 8015a0a:	930a      	str	r3, [sp, #40]	; 0x28
 8015a0c:	f8d8 3000 	ldr.w	r3, [r8]
 8015a10:	9005      	str	r0, [sp, #20]
 8015a12:	3307      	adds	r3, #7
 8015a14:	f023 0307 	bic.w	r3, r3, #7
 8015a18:	f103 0208 	add.w	r2, r3, #8
 8015a1c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8015a20:	f8d4 b000 	ldr.w	fp, [r4]
 8015a24:	f8c8 2000 	str.w	r2, [r8]
 8015a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a2c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8015a30:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8015a34:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8015a38:	9307      	str	r3, [sp, #28]
 8015a3a:	f8cd 8018 	str.w	r8, [sp, #24]
 8015a3e:	f04f 32ff 	mov.w	r2, #4294967295
 8015a42:	4ba7      	ldr	r3, [pc, #668]	; (8015ce0 <_printf_float+0x2f8>)
 8015a44:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015a48:	f7eb f888 	bl	8000b5c <__aeabi_dcmpun>
 8015a4c:	bb70      	cbnz	r0, 8015aac <_printf_float+0xc4>
 8015a4e:	f04f 32ff 	mov.w	r2, #4294967295
 8015a52:	4ba3      	ldr	r3, [pc, #652]	; (8015ce0 <_printf_float+0x2f8>)
 8015a54:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015a58:	f7eb f862 	bl	8000b20 <__aeabi_dcmple>
 8015a5c:	bb30      	cbnz	r0, 8015aac <_printf_float+0xc4>
 8015a5e:	2200      	movs	r2, #0
 8015a60:	2300      	movs	r3, #0
 8015a62:	4640      	mov	r0, r8
 8015a64:	4649      	mov	r1, r9
 8015a66:	f7eb f851 	bl	8000b0c <__aeabi_dcmplt>
 8015a6a:	b110      	cbz	r0, 8015a72 <_printf_float+0x8a>
 8015a6c:	232d      	movs	r3, #45	; 0x2d
 8015a6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015a72:	4a9c      	ldr	r2, [pc, #624]	; (8015ce4 <_printf_float+0x2fc>)
 8015a74:	4b9c      	ldr	r3, [pc, #624]	; (8015ce8 <_printf_float+0x300>)
 8015a76:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8015a7a:	bf8c      	ite	hi
 8015a7c:	4690      	movhi	r8, r2
 8015a7e:	4698      	movls	r8, r3
 8015a80:	2303      	movs	r3, #3
 8015a82:	f02b 0204 	bic.w	r2, fp, #4
 8015a86:	6123      	str	r3, [r4, #16]
 8015a88:	6022      	str	r2, [r4, #0]
 8015a8a:	f04f 0900 	mov.w	r9, #0
 8015a8e:	9700      	str	r7, [sp, #0]
 8015a90:	4633      	mov	r3, r6
 8015a92:	aa0b      	add	r2, sp, #44	; 0x2c
 8015a94:	4621      	mov	r1, r4
 8015a96:	4628      	mov	r0, r5
 8015a98:	f000 f9e6 	bl	8015e68 <_printf_common>
 8015a9c:	3001      	adds	r0, #1
 8015a9e:	f040 808d 	bne.w	8015bbc <_printf_float+0x1d4>
 8015aa2:	f04f 30ff 	mov.w	r0, #4294967295
 8015aa6:	b00d      	add	sp, #52	; 0x34
 8015aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015aac:	4642      	mov	r2, r8
 8015aae:	464b      	mov	r3, r9
 8015ab0:	4640      	mov	r0, r8
 8015ab2:	4649      	mov	r1, r9
 8015ab4:	f7eb f852 	bl	8000b5c <__aeabi_dcmpun>
 8015ab8:	b110      	cbz	r0, 8015ac0 <_printf_float+0xd8>
 8015aba:	4a8c      	ldr	r2, [pc, #560]	; (8015cec <_printf_float+0x304>)
 8015abc:	4b8c      	ldr	r3, [pc, #560]	; (8015cf0 <_printf_float+0x308>)
 8015abe:	e7da      	b.n	8015a76 <_printf_float+0x8e>
 8015ac0:	6861      	ldr	r1, [r4, #4]
 8015ac2:	1c4b      	adds	r3, r1, #1
 8015ac4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8015ac8:	a80a      	add	r0, sp, #40	; 0x28
 8015aca:	d13e      	bne.n	8015b4a <_printf_float+0x162>
 8015acc:	2306      	movs	r3, #6
 8015ace:	6063      	str	r3, [r4, #4]
 8015ad0:	2300      	movs	r3, #0
 8015ad2:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8015ad6:	ab09      	add	r3, sp, #36	; 0x24
 8015ad8:	9300      	str	r3, [sp, #0]
 8015ada:	ec49 8b10 	vmov	d0, r8, r9
 8015ade:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8015ae2:	6022      	str	r2, [r4, #0]
 8015ae4:	f8cd a004 	str.w	sl, [sp, #4]
 8015ae8:	6861      	ldr	r1, [r4, #4]
 8015aea:	4628      	mov	r0, r5
 8015aec:	f7ff fee7 	bl	80158be <__cvt>
 8015af0:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8015af4:	2b47      	cmp	r3, #71	; 0x47
 8015af6:	4680      	mov	r8, r0
 8015af8:	d109      	bne.n	8015b0e <_printf_float+0x126>
 8015afa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015afc:	1cd8      	adds	r0, r3, #3
 8015afe:	db02      	blt.n	8015b06 <_printf_float+0x11e>
 8015b00:	6862      	ldr	r2, [r4, #4]
 8015b02:	4293      	cmp	r3, r2
 8015b04:	dd47      	ble.n	8015b96 <_printf_float+0x1ae>
 8015b06:	f1aa 0a02 	sub.w	sl, sl, #2
 8015b0a:	fa5f fa8a 	uxtb.w	sl, sl
 8015b0e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8015b12:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015b14:	d824      	bhi.n	8015b60 <_printf_float+0x178>
 8015b16:	3901      	subs	r1, #1
 8015b18:	4652      	mov	r2, sl
 8015b1a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8015b1e:	9109      	str	r1, [sp, #36]	; 0x24
 8015b20:	f7ff ff2e 	bl	8015980 <__exponent>
 8015b24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015b26:	1813      	adds	r3, r2, r0
 8015b28:	2a01      	cmp	r2, #1
 8015b2a:	4681      	mov	r9, r0
 8015b2c:	6123      	str	r3, [r4, #16]
 8015b2e:	dc02      	bgt.n	8015b36 <_printf_float+0x14e>
 8015b30:	6822      	ldr	r2, [r4, #0]
 8015b32:	07d1      	lsls	r1, r2, #31
 8015b34:	d501      	bpl.n	8015b3a <_printf_float+0x152>
 8015b36:	3301      	adds	r3, #1
 8015b38:	6123      	str	r3, [r4, #16]
 8015b3a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8015b3e:	2b00      	cmp	r3, #0
 8015b40:	d0a5      	beq.n	8015a8e <_printf_float+0xa6>
 8015b42:	232d      	movs	r3, #45	; 0x2d
 8015b44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015b48:	e7a1      	b.n	8015a8e <_printf_float+0xa6>
 8015b4a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8015b4e:	f000 8177 	beq.w	8015e40 <_printf_float+0x458>
 8015b52:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8015b56:	d1bb      	bne.n	8015ad0 <_printf_float+0xe8>
 8015b58:	2900      	cmp	r1, #0
 8015b5a:	d1b9      	bne.n	8015ad0 <_printf_float+0xe8>
 8015b5c:	2301      	movs	r3, #1
 8015b5e:	e7b6      	b.n	8015ace <_printf_float+0xe6>
 8015b60:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8015b64:	d119      	bne.n	8015b9a <_printf_float+0x1b2>
 8015b66:	2900      	cmp	r1, #0
 8015b68:	6863      	ldr	r3, [r4, #4]
 8015b6a:	dd0c      	ble.n	8015b86 <_printf_float+0x19e>
 8015b6c:	6121      	str	r1, [r4, #16]
 8015b6e:	b913      	cbnz	r3, 8015b76 <_printf_float+0x18e>
 8015b70:	6822      	ldr	r2, [r4, #0]
 8015b72:	07d2      	lsls	r2, r2, #31
 8015b74:	d502      	bpl.n	8015b7c <_printf_float+0x194>
 8015b76:	3301      	adds	r3, #1
 8015b78:	440b      	add	r3, r1
 8015b7a:	6123      	str	r3, [r4, #16]
 8015b7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015b7e:	65a3      	str	r3, [r4, #88]	; 0x58
 8015b80:	f04f 0900 	mov.w	r9, #0
 8015b84:	e7d9      	b.n	8015b3a <_printf_float+0x152>
 8015b86:	b913      	cbnz	r3, 8015b8e <_printf_float+0x1a6>
 8015b88:	6822      	ldr	r2, [r4, #0]
 8015b8a:	07d0      	lsls	r0, r2, #31
 8015b8c:	d501      	bpl.n	8015b92 <_printf_float+0x1aa>
 8015b8e:	3302      	adds	r3, #2
 8015b90:	e7f3      	b.n	8015b7a <_printf_float+0x192>
 8015b92:	2301      	movs	r3, #1
 8015b94:	e7f1      	b.n	8015b7a <_printf_float+0x192>
 8015b96:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8015b9a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8015b9e:	4293      	cmp	r3, r2
 8015ba0:	db05      	blt.n	8015bae <_printf_float+0x1c6>
 8015ba2:	6822      	ldr	r2, [r4, #0]
 8015ba4:	6123      	str	r3, [r4, #16]
 8015ba6:	07d1      	lsls	r1, r2, #31
 8015ba8:	d5e8      	bpl.n	8015b7c <_printf_float+0x194>
 8015baa:	3301      	adds	r3, #1
 8015bac:	e7e5      	b.n	8015b7a <_printf_float+0x192>
 8015bae:	2b00      	cmp	r3, #0
 8015bb0:	bfd4      	ite	le
 8015bb2:	f1c3 0302 	rsble	r3, r3, #2
 8015bb6:	2301      	movgt	r3, #1
 8015bb8:	4413      	add	r3, r2
 8015bba:	e7de      	b.n	8015b7a <_printf_float+0x192>
 8015bbc:	6823      	ldr	r3, [r4, #0]
 8015bbe:	055a      	lsls	r2, r3, #21
 8015bc0:	d407      	bmi.n	8015bd2 <_printf_float+0x1ea>
 8015bc2:	6923      	ldr	r3, [r4, #16]
 8015bc4:	4642      	mov	r2, r8
 8015bc6:	4631      	mov	r1, r6
 8015bc8:	4628      	mov	r0, r5
 8015bca:	47b8      	blx	r7
 8015bcc:	3001      	adds	r0, #1
 8015bce:	d12b      	bne.n	8015c28 <_printf_float+0x240>
 8015bd0:	e767      	b.n	8015aa2 <_printf_float+0xba>
 8015bd2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8015bd6:	f240 80dc 	bls.w	8015d92 <_printf_float+0x3aa>
 8015bda:	2200      	movs	r2, #0
 8015bdc:	2300      	movs	r3, #0
 8015bde:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015be2:	f7ea ff89 	bl	8000af8 <__aeabi_dcmpeq>
 8015be6:	2800      	cmp	r0, #0
 8015be8:	d033      	beq.n	8015c52 <_printf_float+0x26a>
 8015bea:	2301      	movs	r3, #1
 8015bec:	4a41      	ldr	r2, [pc, #260]	; (8015cf4 <_printf_float+0x30c>)
 8015bee:	4631      	mov	r1, r6
 8015bf0:	4628      	mov	r0, r5
 8015bf2:	47b8      	blx	r7
 8015bf4:	3001      	adds	r0, #1
 8015bf6:	f43f af54 	beq.w	8015aa2 <_printf_float+0xba>
 8015bfa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015bfe:	429a      	cmp	r2, r3
 8015c00:	db02      	blt.n	8015c08 <_printf_float+0x220>
 8015c02:	6823      	ldr	r3, [r4, #0]
 8015c04:	07d8      	lsls	r0, r3, #31
 8015c06:	d50f      	bpl.n	8015c28 <_printf_float+0x240>
 8015c08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015c0c:	4631      	mov	r1, r6
 8015c0e:	4628      	mov	r0, r5
 8015c10:	47b8      	blx	r7
 8015c12:	3001      	adds	r0, #1
 8015c14:	f43f af45 	beq.w	8015aa2 <_printf_float+0xba>
 8015c18:	f04f 0800 	mov.w	r8, #0
 8015c1c:	f104 091a 	add.w	r9, r4, #26
 8015c20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015c22:	3b01      	subs	r3, #1
 8015c24:	4543      	cmp	r3, r8
 8015c26:	dc09      	bgt.n	8015c3c <_printf_float+0x254>
 8015c28:	6823      	ldr	r3, [r4, #0]
 8015c2a:	079b      	lsls	r3, r3, #30
 8015c2c:	f100 8103 	bmi.w	8015e36 <_printf_float+0x44e>
 8015c30:	68e0      	ldr	r0, [r4, #12]
 8015c32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015c34:	4298      	cmp	r0, r3
 8015c36:	bfb8      	it	lt
 8015c38:	4618      	movlt	r0, r3
 8015c3a:	e734      	b.n	8015aa6 <_printf_float+0xbe>
 8015c3c:	2301      	movs	r3, #1
 8015c3e:	464a      	mov	r2, r9
 8015c40:	4631      	mov	r1, r6
 8015c42:	4628      	mov	r0, r5
 8015c44:	47b8      	blx	r7
 8015c46:	3001      	adds	r0, #1
 8015c48:	f43f af2b 	beq.w	8015aa2 <_printf_float+0xba>
 8015c4c:	f108 0801 	add.w	r8, r8, #1
 8015c50:	e7e6      	b.n	8015c20 <_printf_float+0x238>
 8015c52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015c54:	2b00      	cmp	r3, #0
 8015c56:	dc2b      	bgt.n	8015cb0 <_printf_float+0x2c8>
 8015c58:	2301      	movs	r3, #1
 8015c5a:	4a26      	ldr	r2, [pc, #152]	; (8015cf4 <_printf_float+0x30c>)
 8015c5c:	4631      	mov	r1, r6
 8015c5e:	4628      	mov	r0, r5
 8015c60:	47b8      	blx	r7
 8015c62:	3001      	adds	r0, #1
 8015c64:	f43f af1d 	beq.w	8015aa2 <_printf_float+0xba>
 8015c68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015c6a:	b923      	cbnz	r3, 8015c76 <_printf_float+0x28e>
 8015c6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015c6e:	b913      	cbnz	r3, 8015c76 <_printf_float+0x28e>
 8015c70:	6823      	ldr	r3, [r4, #0]
 8015c72:	07d9      	lsls	r1, r3, #31
 8015c74:	d5d8      	bpl.n	8015c28 <_printf_float+0x240>
 8015c76:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015c7a:	4631      	mov	r1, r6
 8015c7c:	4628      	mov	r0, r5
 8015c7e:	47b8      	blx	r7
 8015c80:	3001      	adds	r0, #1
 8015c82:	f43f af0e 	beq.w	8015aa2 <_printf_float+0xba>
 8015c86:	f04f 0900 	mov.w	r9, #0
 8015c8a:	f104 0a1a 	add.w	sl, r4, #26
 8015c8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015c90:	425b      	negs	r3, r3
 8015c92:	454b      	cmp	r3, r9
 8015c94:	dc01      	bgt.n	8015c9a <_printf_float+0x2b2>
 8015c96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015c98:	e794      	b.n	8015bc4 <_printf_float+0x1dc>
 8015c9a:	2301      	movs	r3, #1
 8015c9c:	4652      	mov	r2, sl
 8015c9e:	4631      	mov	r1, r6
 8015ca0:	4628      	mov	r0, r5
 8015ca2:	47b8      	blx	r7
 8015ca4:	3001      	adds	r0, #1
 8015ca6:	f43f aefc 	beq.w	8015aa2 <_printf_float+0xba>
 8015caa:	f109 0901 	add.w	r9, r9, #1
 8015cae:	e7ee      	b.n	8015c8e <_printf_float+0x2a6>
 8015cb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015cb2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015cb4:	429a      	cmp	r2, r3
 8015cb6:	bfa8      	it	ge
 8015cb8:	461a      	movge	r2, r3
 8015cba:	2a00      	cmp	r2, #0
 8015cbc:	4691      	mov	r9, r2
 8015cbe:	dd07      	ble.n	8015cd0 <_printf_float+0x2e8>
 8015cc0:	4613      	mov	r3, r2
 8015cc2:	4631      	mov	r1, r6
 8015cc4:	4642      	mov	r2, r8
 8015cc6:	4628      	mov	r0, r5
 8015cc8:	47b8      	blx	r7
 8015cca:	3001      	adds	r0, #1
 8015ccc:	f43f aee9 	beq.w	8015aa2 <_printf_float+0xba>
 8015cd0:	f104 031a 	add.w	r3, r4, #26
 8015cd4:	f04f 0b00 	mov.w	fp, #0
 8015cd8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015cdc:	9306      	str	r3, [sp, #24]
 8015cde:	e015      	b.n	8015d0c <_printf_float+0x324>
 8015ce0:	7fefffff 	.word	0x7fefffff
 8015ce4:	0801a53c 	.word	0x0801a53c
 8015ce8:	0801a538 	.word	0x0801a538
 8015cec:	0801a544 	.word	0x0801a544
 8015cf0:	0801a540 	.word	0x0801a540
 8015cf4:	0801a763 	.word	0x0801a763
 8015cf8:	2301      	movs	r3, #1
 8015cfa:	9a06      	ldr	r2, [sp, #24]
 8015cfc:	4631      	mov	r1, r6
 8015cfe:	4628      	mov	r0, r5
 8015d00:	47b8      	blx	r7
 8015d02:	3001      	adds	r0, #1
 8015d04:	f43f aecd 	beq.w	8015aa2 <_printf_float+0xba>
 8015d08:	f10b 0b01 	add.w	fp, fp, #1
 8015d0c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8015d10:	ebaa 0309 	sub.w	r3, sl, r9
 8015d14:	455b      	cmp	r3, fp
 8015d16:	dcef      	bgt.n	8015cf8 <_printf_float+0x310>
 8015d18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015d1c:	429a      	cmp	r2, r3
 8015d1e:	44d0      	add	r8, sl
 8015d20:	db15      	blt.n	8015d4e <_printf_float+0x366>
 8015d22:	6823      	ldr	r3, [r4, #0]
 8015d24:	07da      	lsls	r2, r3, #31
 8015d26:	d412      	bmi.n	8015d4e <_printf_float+0x366>
 8015d28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015d2a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015d2c:	eba3 020a 	sub.w	r2, r3, sl
 8015d30:	eba3 0a01 	sub.w	sl, r3, r1
 8015d34:	4592      	cmp	sl, r2
 8015d36:	bfa8      	it	ge
 8015d38:	4692      	movge	sl, r2
 8015d3a:	f1ba 0f00 	cmp.w	sl, #0
 8015d3e:	dc0e      	bgt.n	8015d5e <_printf_float+0x376>
 8015d40:	f04f 0800 	mov.w	r8, #0
 8015d44:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015d48:	f104 091a 	add.w	r9, r4, #26
 8015d4c:	e019      	b.n	8015d82 <_printf_float+0x39a>
 8015d4e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015d52:	4631      	mov	r1, r6
 8015d54:	4628      	mov	r0, r5
 8015d56:	47b8      	blx	r7
 8015d58:	3001      	adds	r0, #1
 8015d5a:	d1e5      	bne.n	8015d28 <_printf_float+0x340>
 8015d5c:	e6a1      	b.n	8015aa2 <_printf_float+0xba>
 8015d5e:	4653      	mov	r3, sl
 8015d60:	4642      	mov	r2, r8
 8015d62:	4631      	mov	r1, r6
 8015d64:	4628      	mov	r0, r5
 8015d66:	47b8      	blx	r7
 8015d68:	3001      	adds	r0, #1
 8015d6a:	d1e9      	bne.n	8015d40 <_printf_float+0x358>
 8015d6c:	e699      	b.n	8015aa2 <_printf_float+0xba>
 8015d6e:	2301      	movs	r3, #1
 8015d70:	464a      	mov	r2, r9
 8015d72:	4631      	mov	r1, r6
 8015d74:	4628      	mov	r0, r5
 8015d76:	47b8      	blx	r7
 8015d78:	3001      	adds	r0, #1
 8015d7a:	f43f ae92 	beq.w	8015aa2 <_printf_float+0xba>
 8015d7e:	f108 0801 	add.w	r8, r8, #1
 8015d82:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015d86:	1a9b      	subs	r3, r3, r2
 8015d88:	eba3 030a 	sub.w	r3, r3, sl
 8015d8c:	4543      	cmp	r3, r8
 8015d8e:	dcee      	bgt.n	8015d6e <_printf_float+0x386>
 8015d90:	e74a      	b.n	8015c28 <_printf_float+0x240>
 8015d92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015d94:	2a01      	cmp	r2, #1
 8015d96:	dc01      	bgt.n	8015d9c <_printf_float+0x3b4>
 8015d98:	07db      	lsls	r3, r3, #31
 8015d9a:	d53a      	bpl.n	8015e12 <_printf_float+0x42a>
 8015d9c:	2301      	movs	r3, #1
 8015d9e:	4642      	mov	r2, r8
 8015da0:	4631      	mov	r1, r6
 8015da2:	4628      	mov	r0, r5
 8015da4:	47b8      	blx	r7
 8015da6:	3001      	adds	r0, #1
 8015da8:	f43f ae7b 	beq.w	8015aa2 <_printf_float+0xba>
 8015dac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015db0:	4631      	mov	r1, r6
 8015db2:	4628      	mov	r0, r5
 8015db4:	47b8      	blx	r7
 8015db6:	3001      	adds	r0, #1
 8015db8:	f108 0801 	add.w	r8, r8, #1
 8015dbc:	f43f ae71 	beq.w	8015aa2 <_printf_float+0xba>
 8015dc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015dc2:	2200      	movs	r2, #0
 8015dc4:	f103 3aff 	add.w	sl, r3, #4294967295
 8015dc8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015dcc:	2300      	movs	r3, #0
 8015dce:	f7ea fe93 	bl	8000af8 <__aeabi_dcmpeq>
 8015dd2:	b9c8      	cbnz	r0, 8015e08 <_printf_float+0x420>
 8015dd4:	4653      	mov	r3, sl
 8015dd6:	4642      	mov	r2, r8
 8015dd8:	4631      	mov	r1, r6
 8015dda:	4628      	mov	r0, r5
 8015ddc:	47b8      	blx	r7
 8015dde:	3001      	adds	r0, #1
 8015de0:	d10e      	bne.n	8015e00 <_printf_float+0x418>
 8015de2:	e65e      	b.n	8015aa2 <_printf_float+0xba>
 8015de4:	2301      	movs	r3, #1
 8015de6:	4652      	mov	r2, sl
 8015de8:	4631      	mov	r1, r6
 8015dea:	4628      	mov	r0, r5
 8015dec:	47b8      	blx	r7
 8015dee:	3001      	adds	r0, #1
 8015df0:	f43f ae57 	beq.w	8015aa2 <_printf_float+0xba>
 8015df4:	f108 0801 	add.w	r8, r8, #1
 8015df8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015dfa:	3b01      	subs	r3, #1
 8015dfc:	4543      	cmp	r3, r8
 8015dfe:	dcf1      	bgt.n	8015de4 <_printf_float+0x3fc>
 8015e00:	464b      	mov	r3, r9
 8015e02:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8015e06:	e6de      	b.n	8015bc6 <_printf_float+0x1de>
 8015e08:	f04f 0800 	mov.w	r8, #0
 8015e0c:	f104 0a1a 	add.w	sl, r4, #26
 8015e10:	e7f2      	b.n	8015df8 <_printf_float+0x410>
 8015e12:	2301      	movs	r3, #1
 8015e14:	e7df      	b.n	8015dd6 <_printf_float+0x3ee>
 8015e16:	2301      	movs	r3, #1
 8015e18:	464a      	mov	r2, r9
 8015e1a:	4631      	mov	r1, r6
 8015e1c:	4628      	mov	r0, r5
 8015e1e:	47b8      	blx	r7
 8015e20:	3001      	adds	r0, #1
 8015e22:	f43f ae3e 	beq.w	8015aa2 <_printf_float+0xba>
 8015e26:	f108 0801 	add.w	r8, r8, #1
 8015e2a:	68e3      	ldr	r3, [r4, #12]
 8015e2c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015e2e:	1a9b      	subs	r3, r3, r2
 8015e30:	4543      	cmp	r3, r8
 8015e32:	dcf0      	bgt.n	8015e16 <_printf_float+0x42e>
 8015e34:	e6fc      	b.n	8015c30 <_printf_float+0x248>
 8015e36:	f04f 0800 	mov.w	r8, #0
 8015e3a:	f104 0919 	add.w	r9, r4, #25
 8015e3e:	e7f4      	b.n	8015e2a <_printf_float+0x442>
 8015e40:	2900      	cmp	r1, #0
 8015e42:	f43f ae8b 	beq.w	8015b5c <_printf_float+0x174>
 8015e46:	2300      	movs	r3, #0
 8015e48:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8015e4c:	ab09      	add	r3, sp, #36	; 0x24
 8015e4e:	9300      	str	r3, [sp, #0]
 8015e50:	ec49 8b10 	vmov	d0, r8, r9
 8015e54:	6022      	str	r2, [r4, #0]
 8015e56:	f8cd a004 	str.w	sl, [sp, #4]
 8015e5a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8015e5e:	4628      	mov	r0, r5
 8015e60:	f7ff fd2d 	bl	80158be <__cvt>
 8015e64:	4680      	mov	r8, r0
 8015e66:	e648      	b.n	8015afa <_printf_float+0x112>

08015e68 <_printf_common>:
 8015e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015e6c:	4691      	mov	r9, r2
 8015e6e:	461f      	mov	r7, r3
 8015e70:	688a      	ldr	r2, [r1, #8]
 8015e72:	690b      	ldr	r3, [r1, #16]
 8015e74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015e78:	4293      	cmp	r3, r2
 8015e7a:	bfb8      	it	lt
 8015e7c:	4613      	movlt	r3, r2
 8015e7e:	f8c9 3000 	str.w	r3, [r9]
 8015e82:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015e86:	4606      	mov	r6, r0
 8015e88:	460c      	mov	r4, r1
 8015e8a:	b112      	cbz	r2, 8015e92 <_printf_common+0x2a>
 8015e8c:	3301      	adds	r3, #1
 8015e8e:	f8c9 3000 	str.w	r3, [r9]
 8015e92:	6823      	ldr	r3, [r4, #0]
 8015e94:	0699      	lsls	r1, r3, #26
 8015e96:	bf42      	ittt	mi
 8015e98:	f8d9 3000 	ldrmi.w	r3, [r9]
 8015e9c:	3302      	addmi	r3, #2
 8015e9e:	f8c9 3000 	strmi.w	r3, [r9]
 8015ea2:	6825      	ldr	r5, [r4, #0]
 8015ea4:	f015 0506 	ands.w	r5, r5, #6
 8015ea8:	d107      	bne.n	8015eba <_printf_common+0x52>
 8015eaa:	f104 0a19 	add.w	sl, r4, #25
 8015eae:	68e3      	ldr	r3, [r4, #12]
 8015eb0:	f8d9 2000 	ldr.w	r2, [r9]
 8015eb4:	1a9b      	subs	r3, r3, r2
 8015eb6:	42ab      	cmp	r3, r5
 8015eb8:	dc28      	bgt.n	8015f0c <_printf_common+0xa4>
 8015eba:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8015ebe:	6822      	ldr	r2, [r4, #0]
 8015ec0:	3300      	adds	r3, #0
 8015ec2:	bf18      	it	ne
 8015ec4:	2301      	movne	r3, #1
 8015ec6:	0692      	lsls	r2, r2, #26
 8015ec8:	d42d      	bmi.n	8015f26 <_printf_common+0xbe>
 8015eca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015ece:	4639      	mov	r1, r7
 8015ed0:	4630      	mov	r0, r6
 8015ed2:	47c0      	blx	r8
 8015ed4:	3001      	adds	r0, #1
 8015ed6:	d020      	beq.n	8015f1a <_printf_common+0xb2>
 8015ed8:	6823      	ldr	r3, [r4, #0]
 8015eda:	68e5      	ldr	r5, [r4, #12]
 8015edc:	f8d9 2000 	ldr.w	r2, [r9]
 8015ee0:	f003 0306 	and.w	r3, r3, #6
 8015ee4:	2b04      	cmp	r3, #4
 8015ee6:	bf08      	it	eq
 8015ee8:	1aad      	subeq	r5, r5, r2
 8015eea:	68a3      	ldr	r3, [r4, #8]
 8015eec:	6922      	ldr	r2, [r4, #16]
 8015eee:	bf0c      	ite	eq
 8015ef0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015ef4:	2500      	movne	r5, #0
 8015ef6:	4293      	cmp	r3, r2
 8015ef8:	bfc4      	itt	gt
 8015efa:	1a9b      	subgt	r3, r3, r2
 8015efc:	18ed      	addgt	r5, r5, r3
 8015efe:	f04f 0900 	mov.w	r9, #0
 8015f02:	341a      	adds	r4, #26
 8015f04:	454d      	cmp	r5, r9
 8015f06:	d11a      	bne.n	8015f3e <_printf_common+0xd6>
 8015f08:	2000      	movs	r0, #0
 8015f0a:	e008      	b.n	8015f1e <_printf_common+0xb6>
 8015f0c:	2301      	movs	r3, #1
 8015f0e:	4652      	mov	r2, sl
 8015f10:	4639      	mov	r1, r7
 8015f12:	4630      	mov	r0, r6
 8015f14:	47c0      	blx	r8
 8015f16:	3001      	adds	r0, #1
 8015f18:	d103      	bne.n	8015f22 <_printf_common+0xba>
 8015f1a:	f04f 30ff 	mov.w	r0, #4294967295
 8015f1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015f22:	3501      	adds	r5, #1
 8015f24:	e7c3      	b.n	8015eae <_printf_common+0x46>
 8015f26:	18e1      	adds	r1, r4, r3
 8015f28:	1c5a      	adds	r2, r3, #1
 8015f2a:	2030      	movs	r0, #48	; 0x30
 8015f2c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015f30:	4422      	add	r2, r4
 8015f32:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015f36:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015f3a:	3302      	adds	r3, #2
 8015f3c:	e7c5      	b.n	8015eca <_printf_common+0x62>
 8015f3e:	2301      	movs	r3, #1
 8015f40:	4622      	mov	r2, r4
 8015f42:	4639      	mov	r1, r7
 8015f44:	4630      	mov	r0, r6
 8015f46:	47c0      	blx	r8
 8015f48:	3001      	adds	r0, #1
 8015f4a:	d0e6      	beq.n	8015f1a <_printf_common+0xb2>
 8015f4c:	f109 0901 	add.w	r9, r9, #1
 8015f50:	e7d8      	b.n	8015f04 <_printf_common+0x9c>
	...

08015f54 <_printf_i>:
 8015f54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015f58:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8015f5c:	460c      	mov	r4, r1
 8015f5e:	7e09      	ldrb	r1, [r1, #24]
 8015f60:	b085      	sub	sp, #20
 8015f62:	296e      	cmp	r1, #110	; 0x6e
 8015f64:	4617      	mov	r7, r2
 8015f66:	4606      	mov	r6, r0
 8015f68:	4698      	mov	r8, r3
 8015f6a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015f6c:	f000 80b3 	beq.w	80160d6 <_printf_i+0x182>
 8015f70:	d822      	bhi.n	8015fb8 <_printf_i+0x64>
 8015f72:	2963      	cmp	r1, #99	; 0x63
 8015f74:	d036      	beq.n	8015fe4 <_printf_i+0x90>
 8015f76:	d80a      	bhi.n	8015f8e <_printf_i+0x3a>
 8015f78:	2900      	cmp	r1, #0
 8015f7a:	f000 80b9 	beq.w	80160f0 <_printf_i+0x19c>
 8015f7e:	2958      	cmp	r1, #88	; 0x58
 8015f80:	f000 8083 	beq.w	801608a <_printf_i+0x136>
 8015f84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015f88:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8015f8c:	e032      	b.n	8015ff4 <_printf_i+0xa0>
 8015f8e:	2964      	cmp	r1, #100	; 0x64
 8015f90:	d001      	beq.n	8015f96 <_printf_i+0x42>
 8015f92:	2969      	cmp	r1, #105	; 0x69
 8015f94:	d1f6      	bne.n	8015f84 <_printf_i+0x30>
 8015f96:	6820      	ldr	r0, [r4, #0]
 8015f98:	6813      	ldr	r3, [r2, #0]
 8015f9a:	0605      	lsls	r5, r0, #24
 8015f9c:	f103 0104 	add.w	r1, r3, #4
 8015fa0:	d52a      	bpl.n	8015ff8 <_printf_i+0xa4>
 8015fa2:	681b      	ldr	r3, [r3, #0]
 8015fa4:	6011      	str	r1, [r2, #0]
 8015fa6:	2b00      	cmp	r3, #0
 8015fa8:	da03      	bge.n	8015fb2 <_printf_i+0x5e>
 8015faa:	222d      	movs	r2, #45	; 0x2d
 8015fac:	425b      	negs	r3, r3
 8015fae:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8015fb2:	486f      	ldr	r0, [pc, #444]	; (8016170 <_printf_i+0x21c>)
 8015fb4:	220a      	movs	r2, #10
 8015fb6:	e039      	b.n	801602c <_printf_i+0xd8>
 8015fb8:	2973      	cmp	r1, #115	; 0x73
 8015fba:	f000 809d 	beq.w	80160f8 <_printf_i+0x1a4>
 8015fbe:	d808      	bhi.n	8015fd2 <_printf_i+0x7e>
 8015fc0:	296f      	cmp	r1, #111	; 0x6f
 8015fc2:	d020      	beq.n	8016006 <_printf_i+0xb2>
 8015fc4:	2970      	cmp	r1, #112	; 0x70
 8015fc6:	d1dd      	bne.n	8015f84 <_printf_i+0x30>
 8015fc8:	6823      	ldr	r3, [r4, #0]
 8015fca:	f043 0320 	orr.w	r3, r3, #32
 8015fce:	6023      	str	r3, [r4, #0]
 8015fd0:	e003      	b.n	8015fda <_printf_i+0x86>
 8015fd2:	2975      	cmp	r1, #117	; 0x75
 8015fd4:	d017      	beq.n	8016006 <_printf_i+0xb2>
 8015fd6:	2978      	cmp	r1, #120	; 0x78
 8015fd8:	d1d4      	bne.n	8015f84 <_printf_i+0x30>
 8015fda:	2378      	movs	r3, #120	; 0x78
 8015fdc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015fe0:	4864      	ldr	r0, [pc, #400]	; (8016174 <_printf_i+0x220>)
 8015fe2:	e055      	b.n	8016090 <_printf_i+0x13c>
 8015fe4:	6813      	ldr	r3, [r2, #0]
 8015fe6:	1d19      	adds	r1, r3, #4
 8015fe8:	681b      	ldr	r3, [r3, #0]
 8015fea:	6011      	str	r1, [r2, #0]
 8015fec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015ff0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015ff4:	2301      	movs	r3, #1
 8015ff6:	e08c      	b.n	8016112 <_printf_i+0x1be>
 8015ff8:	681b      	ldr	r3, [r3, #0]
 8015ffa:	6011      	str	r1, [r2, #0]
 8015ffc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8016000:	bf18      	it	ne
 8016002:	b21b      	sxthne	r3, r3
 8016004:	e7cf      	b.n	8015fa6 <_printf_i+0x52>
 8016006:	6813      	ldr	r3, [r2, #0]
 8016008:	6825      	ldr	r5, [r4, #0]
 801600a:	1d18      	adds	r0, r3, #4
 801600c:	6010      	str	r0, [r2, #0]
 801600e:	0628      	lsls	r0, r5, #24
 8016010:	d501      	bpl.n	8016016 <_printf_i+0xc2>
 8016012:	681b      	ldr	r3, [r3, #0]
 8016014:	e002      	b.n	801601c <_printf_i+0xc8>
 8016016:	0668      	lsls	r0, r5, #25
 8016018:	d5fb      	bpl.n	8016012 <_printf_i+0xbe>
 801601a:	881b      	ldrh	r3, [r3, #0]
 801601c:	4854      	ldr	r0, [pc, #336]	; (8016170 <_printf_i+0x21c>)
 801601e:	296f      	cmp	r1, #111	; 0x6f
 8016020:	bf14      	ite	ne
 8016022:	220a      	movne	r2, #10
 8016024:	2208      	moveq	r2, #8
 8016026:	2100      	movs	r1, #0
 8016028:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801602c:	6865      	ldr	r5, [r4, #4]
 801602e:	60a5      	str	r5, [r4, #8]
 8016030:	2d00      	cmp	r5, #0
 8016032:	f2c0 8095 	blt.w	8016160 <_printf_i+0x20c>
 8016036:	6821      	ldr	r1, [r4, #0]
 8016038:	f021 0104 	bic.w	r1, r1, #4
 801603c:	6021      	str	r1, [r4, #0]
 801603e:	2b00      	cmp	r3, #0
 8016040:	d13d      	bne.n	80160be <_printf_i+0x16a>
 8016042:	2d00      	cmp	r5, #0
 8016044:	f040 808e 	bne.w	8016164 <_printf_i+0x210>
 8016048:	4665      	mov	r5, ip
 801604a:	2a08      	cmp	r2, #8
 801604c:	d10b      	bne.n	8016066 <_printf_i+0x112>
 801604e:	6823      	ldr	r3, [r4, #0]
 8016050:	07db      	lsls	r3, r3, #31
 8016052:	d508      	bpl.n	8016066 <_printf_i+0x112>
 8016054:	6923      	ldr	r3, [r4, #16]
 8016056:	6862      	ldr	r2, [r4, #4]
 8016058:	429a      	cmp	r2, r3
 801605a:	bfde      	ittt	le
 801605c:	2330      	movle	r3, #48	; 0x30
 801605e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8016062:	f105 35ff 	addle.w	r5, r5, #4294967295
 8016066:	ebac 0305 	sub.w	r3, ip, r5
 801606a:	6123      	str	r3, [r4, #16]
 801606c:	f8cd 8000 	str.w	r8, [sp]
 8016070:	463b      	mov	r3, r7
 8016072:	aa03      	add	r2, sp, #12
 8016074:	4621      	mov	r1, r4
 8016076:	4630      	mov	r0, r6
 8016078:	f7ff fef6 	bl	8015e68 <_printf_common>
 801607c:	3001      	adds	r0, #1
 801607e:	d14d      	bne.n	801611c <_printf_i+0x1c8>
 8016080:	f04f 30ff 	mov.w	r0, #4294967295
 8016084:	b005      	add	sp, #20
 8016086:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801608a:	4839      	ldr	r0, [pc, #228]	; (8016170 <_printf_i+0x21c>)
 801608c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8016090:	6813      	ldr	r3, [r2, #0]
 8016092:	6821      	ldr	r1, [r4, #0]
 8016094:	1d1d      	adds	r5, r3, #4
 8016096:	681b      	ldr	r3, [r3, #0]
 8016098:	6015      	str	r5, [r2, #0]
 801609a:	060a      	lsls	r2, r1, #24
 801609c:	d50b      	bpl.n	80160b6 <_printf_i+0x162>
 801609e:	07ca      	lsls	r2, r1, #31
 80160a0:	bf44      	itt	mi
 80160a2:	f041 0120 	orrmi.w	r1, r1, #32
 80160a6:	6021      	strmi	r1, [r4, #0]
 80160a8:	b91b      	cbnz	r3, 80160b2 <_printf_i+0x15e>
 80160aa:	6822      	ldr	r2, [r4, #0]
 80160ac:	f022 0220 	bic.w	r2, r2, #32
 80160b0:	6022      	str	r2, [r4, #0]
 80160b2:	2210      	movs	r2, #16
 80160b4:	e7b7      	b.n	8016026 <_printf_i+0xd2>
 80160b6:	064d      	lsls	r5, r1, #25
 80160b8:	bf48      	it	mi
 80160ba:	b29b      	uxthmi	r3, r3
 80160bc:	e7ef      	b.n	801609e <_printf_i+0x14a>
 80160be:	4665      	mov	r5, ip
 80160c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80160c4:	fb02 3311 	mls	r3, r2, r1, r3
 80160c8:	5cc3      	ldrb	r3, [r0, r3]
 80160ca:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80160ce:	460b      	mov	r3, r1
 80160d0:	2900      	cmp	r1, #0
 80160d2:	d1f5      	bne.n	80160c0 <_printf_i+0x16c>
 80160d4:	e7b9      	b.n	801604a <_printf_i+0xf6>
 80160d6:	6813      	ldr	r3, [r2, #0]
 80160d8:	6825      	ldr	r5, [r4, #0]
 80160da:	6961      	ldr	r1, [r4, #20]
 80160dc:	1d18      	adds	r0, r3, #4
 80160de:	6010      	str	r0, [r2, #0]
 80160e0:	0628      	lsls	r0, r5, #24
 80160e2:	681b      	ldr	r3, [r3, #0]
 80160e4:	d501      	bpl.n	80160ea <_printf_i+0x196>
 80160e6:	6019      	str	r1, [r3, #0]
 80160e8:	e002      	b.n	80160f0 <_printf_i+0x19c>
 80160ea:	066a      	lsls	r2, r5, #25
 80160ec:	d5fb      	bpl.n	80160e6 <_printf_i+0x192>
 80160ee:	8019      	strh	r1, [r3, #0]
 80160f0:	2300      	movs	r3, #0
 80160f2:	6123      	str	r3, [r4, #16]
 80160f4:	4665      	mov	r5, ip
 80160f6:	e7b9      	b.n	801606c <_printf_i+0x118>
 80160f8:	6813      	ldr	r3, [r2, #0]
 80160fa:	1d19      	adds	r1, r3, #4
 80160fc:	6011      	str	r1, [r2, #0]
 80160fe:	681d      	ldr	r5, [r3, #0]
 8016100:	6862      	ldr	r2, [r4, #4]
 8016102:	2100      	movs	r1, #0
 8016104:	4628      	mov	r0, r5
 8016106:	f7ea f883 	bl	8000210 <memchr>
 801610a:	b108      	cbz	r0, 8016110 <_printf_i+0x1bc>
 801610c:	1b40      	subs	r0, r0, r5
 801610e:	6060      	str	r0, [r4, #4]
 8016110:	6863      	ldr	r3, [r4, #4]
 8016112:	6123      	str	r3, [r4, #16]
 8016114:	2300      	movs	r3, #0
 8016116:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801611a:	e7a7      	b.n	801606c <_printf_i+0x118>
 801611c:	6923      	ldr	r3, [r4, #16]
 801611e:	462a      	mov	r2, r5
 8016120:	4639      	mov	r1, r7
 8016122:	4630      	mov	r0, r6
 8016124:	47c0      	blx	r8
 8016126:	3001      	adds	r0, #1
 8016128:	d0aa      	beq.n	8016080 <_printf_i+0x12c>
 801612a:	6823      	ldr	r3, [r4, #0]
 801612c:	079b      	lsls	r3, r3, #30
 801612e:	d413      	bmi.n	8016158 <_printf_i+0x204>
 8016130:	68e0      	ldr	r0, [r4, #12]
 8016132:	9b03      	ldr	r3, [sp, #12]
 8016134:	4298      	cmp	r0, r3
 8016136:	bfb8      	it	lt
 8016138:	4618      	movlt	r0, r3
 801613a:	e7a3      	b.n	8016084 <_printf_i+0x130>
 801613c:	2301      	movs	r3, #1
 801613e:	464a      	mov	r2, r9
 8016140:	4639      	mov	r1, r7
 8016142:	4630      	mov	r0, r6
 8016144:	47c0      	blx	r8
 8016146:	3001      	adds	r0, #1
 8016148:	d09a      	beq.n	8016080 <_printf_i+0x12c>
 801614a:	3501      	adds	r5, #1
 801614c:	68e3      	ldr	r3, [r4, #12]
 801614e:	9a03      	ldr	r2, [sp, #12]
 8016150:	1a9b      	subs	r3, r3, r2
 8016152:	42ab      	cmp	r3, r5
 8016154:	dcf2      	bgt.n	801613c <_printf_i+0x1e8>
 8016156:	e7eb      	b.n	8016130 <_printf_i+0x1dc>
 8016158:	2500      	movs	r5, #0
 801615a:	f104 0919 	add.w	r9, r4, #25
 801615e:	e7f5      	b.n	801614c <_printf_i+0x1f8>
 8016160:	2b00      	cmp	r3, #0
 8016162:	d1ac      	bne.n	80160be <_printf_i+0x16a>
 8016164:	7803      	ldrb	r3, [r0, #0]
 8016166:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801616a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801616e:	e76c      	b.n	801604a <_printf_i+0xf6>
 8016170:	0801a548 	.word	0x0801a548
 8016174:	0801a559 	.word	0x0801a559

08016178 <_scanf_float>:
 8016178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801617c:	469a      	mov	sl, r3
 801617e:	688b      	ldr	r3, [r1, #8]
 8016180:	4616      	mov	r6, r2
 8016182:	1e5a      	subs	r2, r3, #1
 8016184:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8016188:	b087      	sub	sp, #28
 801618a:	bf83      	ittte	hi
 801618c:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8016190:	189b      	addhi	r3, r3, r2
 8016192:	9301      	strhi	r3, [sp, #4]
 8016194:	2300      	movls	r3, #0
 8016196:	bf86      	itte	hi
 8016198:	f240 135d 	movwhi	r3, #349	; 0x15d
 801619c:	608b      	strhi	r3, [r1, #8]
 801619e:	9301      	strls	r3, [sp, #4]
 80161a0:	680b      	ldr	r3, [r1, #0]
 80161a2:	4688      	mov	r8, r1
 80161a4:	f04f 0b00 	mov.w	fp, #0
 80161a8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80161ac:	f848 3b1c 	str.w	r3, [r8], #28
 80161b0:	e9cd bb03 	strd	fp, fp, [sp, #12]
 80161b4:	4607      	mov	r7, r0
 80161b6:	460c      	mov	r4, r1
 80161b8:	4645      	mov	r5, r8
 80161ba:	465a      	mov	r2, fp
 80161bc:	46d9      	mov	r9, fp
 80161be:	f8cd b008 	str.w	fp, [sp, #8]
 80161c2:	68a1      	ldr	r1, [r4, #8]
 80161c4:	b181      	cbz	r1, 80161e8 <_scanf_float+0x70>
 80161c6:	6833      	ldr	r3, [r6, #0]
 80161c8:	781b      	ldrb	r3, [r3, #0]
 80161ca:	2b49      	cmp	r3, #73	; 0x49
 80161cc:	d071      	beq.n	80162b2 <_scanf_float+0x13a>
 80161ce:	d84d      	bhi.n	801626c <_scanf_float+0xf4>
 80161d0:	2b39      	cmp	r3, #57	; 0x39
 80161d2:	d840      	bhi.n	8016256 <_scanf_float+0xde>
 80161d4:	2b31      	cmp	r3, #49	; 0x31
 80161d6:	f080 8088 	bcs.w	80162ea <_scanf_float+0x172>
 80161da:	2b2d      	cmp	r3, #45	; 0x2d
 80161dc:	f000 8090 	beq.w	8016300 <_scanf_float+0x188>
 80161e0:	d815      	bhi.n	801620e <_scanf_float+0x96>
 80161e2:	2b2b      	cmp	r3, #43	; 0x2b
 80161e4:	f000 808c 	beq.w	8016300 <_scanf_float+0x188>
 80161e8:	f1b9 0f00 	cmp.w	r9, #0
 80161ec:	d003      	beq.n	80161f6 <_scanf_float+0x7e>
 80161ee:	6823      	ldr	r3, [r4, #0]
 80161f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80161f4:	6023      	str	r3, [r4, #0]
 80161f6:	3a01      	subs	r2, #1
 80161f8:	2a01      	cmp	r2, #1
 80161fa:	f200 80ea 	bhi.w	80163d2 <_scanf_float+0x25a>
 80161fe:	4545      	cmp	r5, r8
 8016200:	f200 80dc 	bhi.w	80163bc <_scanf_float+0x244>
 8016204:	2601      	movs	r6, #1
 8016206:	4630      	mov	r0, r6
 8016208:	b007      	add	sp, #28
 801620a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801620e:	2b2e      	cmp	r3, #46	; 0x2e
 8016210:	f000 809f 	beq.w	8016352 <_scanf_float+0x1da>
 8016214:	2b30      	cmp	r3, #48	; 0x30
 8016216:	d1e7      	bne.n	80161e8 <_scanf_float+0x70>
 8016218:	6820      	ldr	r0, [r4, #0]
 801621a:	f410 7f80 	tst.w	r0, #256	; 0x100
 801621e:	d064      	beq.n	80162ea <_scanf_float+0x172>
 8016220:	9b01      	ldr	r3, [sp, #4]
 8016222:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8016226:	6020      	str	r0, [r4, #0]
 8016228:	f109 0901 	add.w	r9, r9, #1
 801622c:	b11b      	cbz	r3, 8016236 <_scanf_float+0xbe>
 801622e:	3b01      	subs	r3, #1
 8016230:	3101      	adds	r1, #1
 8016232:	9301      	str	r3, [sp, #4]
 8016234:	60a1      	str	r1, [r4, #8]
 8016236:	68a3      	ldr	r3, [r4, #8]
 8016238:	3b01      	subs	r3, #1
 801623a:	60a3      	str	r3, [r4, #8]
 801623c:	6923      	ldr	r3, [r4, #16]
 801623e:	3301      	adds	r3, #1
 8016240:	6123      	str	r3, [r4, #16]
 8016242:	6873      	ldr	r3, [r6, #4]
 8016244:	3b01      	subs	r3, #1
 8016246:	2b00      	cmp	r3, #0
 8016248:	6073      	str	r3, [r6, #4]
 801624a:	f340 80ac 	ble.w	80163a6 <_scanf_float+0x22e>
 801624e:	6833      	ldr	r3, [r6, #0]
 8016250:	3301      	adds	r3, #1
 8016252:	6033      	str	r3, [r6, #0]
 8016254:	e7b5      	b.n	80161c2 <_scanf_float+0x4a>
 8016256:	2b45      	cmp	r3, #69	; 0x45
 8016258:	f000 8085 	beq.w	8016366 <_scanf_float+0x1ee>
 801625c:	2b46      	cmp	r3, #70	; 0x46
 801625e:	d06a      	beq.n	8016336 <_scanf_float+0x1be>
 8016260:	2b41      	cmp	r3, #65	; 0x41
 8016262:	d1c1      	bne.n	80161e8 <_scanf_float+0x70>
 8016264:	2a01      	cmp	r2, #1
 8016266:	d1bf      	bne.n	80161e8 <_scanf_float+0x70>
 8016268:	2202      	movs	r2, #2
 801626a:	e046      	b.n	80162fa <_scanf_float+0x182>
 801626c:	2b65      	cmp	r3, #101	; 0x65
 801626e:	d07a      	beq.n	8016366 <_scanf_float+0x1ee>
 8016270:	d818      	bhi.n	80162a4 <_scanf_float+0x12c>
 8016272:	2b54      	cmp	r3, #84	; 0x54
 8016274:	d066      	beq.n	8016344 <_scanf_float+0x1cc>
 8016276:	d811      	bhi.n	801629c <_scanf_float+0x124>
 8016278:	2b4e      	cmp	r3, #78	; 0x4e
 801627a:	d1b5      	bne.n	80161e8 <_scanf_float+0x70>
 801627c:	2a00      	cmp	r2, #0
 801627e:	d146      	bne.n	801630e <_scanf_float+0x196>
 8016280:	f1b9 0f00 	cmp.w	r9, #0
 8016284:	d145      	bne.n	8016312 <_scanf_float+0x19a>
 8016286:	6821      	ldr	r1, [r4, #0]
 8016288:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 801628c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8016290:	d13f      	bne.n	8016312 <_scanf_float+0x19a>
 8016292:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8016296:	6021      	str	r1, [r4, #0]
 8016298:	2201      	movs	r2, #1
 801629a:	e02e      	b.n	80162fa <_scanf_float+0x182>
 801629c:	2b59      	cmp	r3, #89	; 0x59
 801629e:	d01e      	beq.n	80162de <_scanf_float+0x166>
 80162a0:	2b61      	cmp	r3, #97	; 0x61
 80162a2:	e7de      	b.n	8016262 <_scanf_float+0xea>
 80162a4:	2b6e      	cmp	r3, #110	; 0x6e
 80162a6:	d0e9      	beq.n	801627c <_scanf_float+0x104>
 80162a8:	d815      	bhi.n	80162d6 <_scanf_float+0x15e>
 80162aa:	2b66      	cmp	r3, #102	; 0x66
 80162ac:	d043      	beq.n	8016336 <_scanf_float+0x1be>
 80162ae:	2b69      	cmp	r3, #105	; 0x69
 80162b0:	d19a      	bne.n	80161e8 <_scanf_float+0x70>
 80162b2:	f1bb 0f00 	cmp.w	fp, #0
 80162b6:	d138      	bne.n	801632a <_scanf_float+0x1b2>
 80162b8:	f1b9 0f00 	cmp.w	r9, #0
 80162bc:	d197      	bne.n	80161ee <_scanf_float+0x76>
 80162be:	6821      	ldr	r1, [r4, #0]
 80162c0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80162c4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80162c8:	d195      	bne.n	80161f6 <_scanf_float+0x7e>
 80162ca:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80162ce:	6021      	str	r1, [r4, #0]
 80162d0:	f04f 0b01 	mov.w	fp, #1
 80162d4:	e011      	b.n	80162fa <_scanf_float+0x182>
 80162d6:	2b74      	cmp	r3, #116	; 0x74
 80162d8:	d034      	beq.n	8016344 <_scanf_float+0x1cc>
 80162da:	2b79      	cmp	r3, #121	; 0x79
 80162dc:	d184      	bne.n	80161e8 <_scanf_float+0x70>
 80162de:	f1bb 0f07 	cmp.w	fp, #7
 80162e2:	d181      	bne.n	80161e8 <_scanf_float+0x70>
 80162e4:	f04f 0b08 	mov.w	fp, #8
 80162e8:	e007      	b.n	80162fa <_scanf_float+0x182>
 80162ea:	eb12 0f0b 	cmn.w	r2, fp
 80162ee:	f47f af7b 	bne.w	80161e8 <_scanf_float+0x70>
 80162f2:	6821      	ldr	r1, [r4, #0]
 80162f4:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 80162f8:	6021      	str	r1, [r4, #0]
 80162fa:	702b      	strb	r3, [r5, #0]
 80162fc:	3501      	adds	r5, #1
 80162fe:	e79a      	b.n	8016236 <_scanf_float+0xbe>
 8016300:	6821      	ldr	r1, [r4, #0]
 8016302:	0608      	lsls	r0, r1, #24
 8016304:	f57f af70 	bpl.w	80161e8 <_scanf_float+0x70>
 8016308:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801630c:	e7f4      	b.n	80162f8 <_scanf_float+0x180>
 801630e:	2a02      	cmp	r2, #2
 8016310:	d047      	beq.n	80163a2 <_scanf_float+0x22a>
 8016312:	f1bb 0f01 	cmp.w	fp, #1
 8016316:	d003      	beq.n	8016320 <_scanf_float+0x1a8>
 8016318:	f1bb 0f04 	cmp.w	fp, #4
 801631c:	f47f af64 	bne.w	80161e8 <_scanf_float+0x70>
 8016320:	f10b 0b01 	add.w	fp, fp, #1
 8016324:	fa5f fb8b 	uxtb.w	fp, fp
 8016328:	e7e7      	b.n	80162fa <_scanf_float+0x182>
 801632a:	f1bb 0f03 	cmp.w	fp, #3
 801632e:	d0f7      	beq.n	8016320 <_scanf_float+0x1a8>
 8016330:	f1bb 0f05 	cmp.w	fp, #5
 8016334:	e7f2      	b.n	801631c <_scanf_float+0x1a4>
 8016336:	f1bb 0f02 	cmp.w	fp, #2
 801633a:	f47f af55 	bne.w	80161e8 <_scanf_float+0x70>
 801633e:	f04f 0b03 	mov.w	fp, #3
 8016342:	e7da      	b.n	80162fa <_scanf_float+0x182>
 8016344:	f1bb 0f06 	cmp.w	fp, #6
 8016348:	f47f af4e 	bne.w	80161e8 <_scanf_float+0x70>
 801634c:	f04f 0b07 	mov.w	fp, #7
 8016350:	e7d3      	b.n	80162fa <_scanf_float+0x182>
 8016352:	6821      	ldr	r1, [r4, #0]
 8016354:	0588      	lsls	r0, r1, #22
 8016356:	f57f af47 	bpl.w	80161e8 <_scanf_float+0x70>
 801635a:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 801635e:	6021      	str	r1, [r4, #0]
 8016360:	f8cd 9008 	str.w	r9, [sp, #8]
 8016364:	e7c9      	b.n	80162fa <_scanf_float+0x182>
 8016366:	6821      	ldr	r1, [r4, #0]
 8016368:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 801636c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8016370:	d006      	beq.n	8016380 <_scanf_float+0x208>
 8016372:	0548      	lsls	r0, r1, #21
 8016374:	f57f af38 	bpl.w	80161e8 <_scanf_float+0x70>
 8016378:	f1b9 0f00 	cmp.w	r9, #0
 801637c:	f43f af3b 	beq.w	80161f6 <_scanf_float+0x7e>
 8016380:	0588      	lsls	r0, r1, #22
 8016382:	bf58      	it	pl
 8016384:	9802      	ldrpl	r0, [sp, #8]
 8016386:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801638a:	bf58      	it	pl
 801638c:	eba9 0000 	subpl.w	r0, r9, r0
 8016390:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8016394:	bf58      	it	pl
 8016396:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 801639a:	6021      	str	r1, [r4, #0]
 801639c:	f04f 0900 	mov.w	r9, #0
 80163a0:	e7ab      	b.n	80162fa <_scanf_float+0x182>
 80163a2:	2203      	movs	r2, #3
 80163a4:	e7a9      	b.n	80162fa <_scanf_float+0x182>
 80163a6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80163aa:	9205      	str	r2, [sp, #20]
 80163ac:	4631      	mov	r1, r6
 80163ae:	4638      	mov	r0, r7
 80163b0:	4798      	blx	r3
 80163b2:	9a05      	ldr	r2, [sp, #20]
 80163b4:	2800      	cmp	r0, #0
 80163b6:	f43f af04 	beq.w	80161c2 <_scanf_float+0x4a>
 80163ba:	e715      	b.n	80161e8 <_scanf_float+0x70>
 80163bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80163c0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80163c4:	4632      	mov	r2, r6
 80163c6:	4638      	mov	r0, r7
 80163c8:	4798      	blx	r3
 80163ca:	6923      	ldr	r3, [r4, #16]
 80163cc:	3b01      	subs	r3, #1
 80163ce:	6123      	str	r3, [r4, #16]
 80163d0:	e715      	b.n	80161fe <_scanf_float+0x86>
 80163d2:	f10b 33ff 	add.w	r3, fp, #4294967295
 80163d6:	2b06      	cmp	r3, #6
 80163d8:	d80a      	bhi.n	80163f0 <_scanf_float+0x278>
 80163da:	f1bb 0f02 	cmp.w	fp, #2
 80163de:	d968      	bls.n	80164b2 <_scanf_float+0x33a>
 80163e0:	f1ab 0b03 	sub.w	fp, fp, #3
 80163e4:	fa5f fb8b 	uxtb.w	fp, fp
 80163e8:	eba5 0b0b 	sub.w	fp, r5, fp
 80163ec:	455d      	cmp	r5, fp
 80163ee:	d14b      	bne.n	8016488 <_scanf_float+0x310>
 80163f0:	6823      	ldr	r3, [r4, #0]
 80163f2:	05da      	lsls	r2, r3, #23
 80163f4:	d51f      	bpl.n	8016436 <_scanf_float+0x2be>
 80163f6:	055b      	lsls	r3, r3, #21
 80163f8:	d468      	bmi.n	80164cc <_scanf_float+0x354>
 80163fa:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80163fe:	6923      	ldr	r3, [r4, #16]
 8016400:	2965      	cmp	r1, #101	; 0x65
 8016402:	f103 33ff 	add.w	r3, r3, #4294967295
 8016406:	f105 3bff 	add.w	fp, r5, #4294967295
 801640a:	6123      	str	r3, [r4, #16]
 801640c:	d00d      	beq.n	801642a <_scanf_float+0x2b2>
 801640e:	2945      	cmp	r1, #69	; 0x45
 8016410:	d00b      	beq.n	801642a <_scanf_float+0x2b2>
 8016412:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016416:	4632      	mov	r2, r6
 8016418:	4638      	mov	r0, r7
 801641a:	4798      	blx	r3
 801641c:	6923      	ldr	r3, [r4, #16]
 801641e:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8016422:	3b01      	subs	r3, #1
 8016424:	f1a5 0b02 	sub.w	fp, r5, #2
 8016428:	6123      	str	r3, [r4, #16]
 801642a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801642e:	4632      	mov	r2, r6
 8016430:	4638      	mov	r0, r7
 8016432:	4798      	blx	r3
 8016434:	465d      	mov	r5, fp
 8016436:	6826      	ldr	r6, [r4, #0]
 8016438:	f016 0610 	ands.w	r6, r6, #16
 801643c:	d17a      	bne.n	8016534 <_scanf_float+0x3bc>
 801643e:	702e      	strb	r6, [r5, #0]
 8016440:	6823      	ldr	r3, [r4, #0]
 8016442:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8016446:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801644a:	d142      	bne.n	80164d2 <_scanf_float+0x35a>
 801644c:	9b02      	ldr	r3, [sp, #8]
 801644e:	eba9 0303 	sub.w	r3, r9, r3
 8016452:	425a      	negs	r2, r3
 8016454:	2b00      	cmp	r3, #0
 8016456:	d149      	bne.n	80164ec <_scanf_float+0x374>
 8016458:	2200      	movs	r2, #0
 801645a:	4641      	mov	r1, r8
 801645c:	4638      	mov	r0, r7
 801645e:	f000 ff03 	bl	8017268 <_strtod_r>
 8016462:	6825      	ldr	r5, [r4, #0]
 8016464:	f8da 3000 	ldr.w	r3, [sl]
 8016468:	f015 0f02 	tst.w	r5, #2
 801646c:	f103 0204 	add.w	r2, r3, #4
 8016470:	ec59 8b10 	vmov	r8, r9, d0
 8016474:	f8ca 2000 	str.w	r2, [sl]
 8016478:	d043      	beq.n	8016502 <_scanf_float+0x38a>
 801647a:	681b      	ldr	r3, [r3, #0]
 801647c:	e9c3 8900 	strd	r8, r9, [r3]
 8016480:	68e3      	ldr	r3, [r4, #12]
 8016482:	3301      	adds	r3, #1
 8016484:	60e3      	str	r3, [r4, #12]
 8016486:	e6be      	b.n	8016206 <_scanf_float+0x8e>
 8016488:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801648c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8016490:	4632      	mov	r2, r6
 8016492:	4638      	mov	r0, r7
 8016494:	4798      	blx	r3
 8016496:	6923      	ldr	r3, [r4, #16]
 8016498:	3b01      	subs	r3, #1
 801649a:	6123      	str	r3, [r4, #16]
 801649c:	e7a6      	b.n	80163ec <_scanf_float+0x274>
 801649e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80164a2:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80164a6:	4632      	mov	r2, r6
 80164a8:	4638      	mov	r0, r7
 80164aa:	4798      	blx	r3
 80164ac:	6923      	ldr	r3, [r4, #16]
 80164ae:	3b01      	subs	r3, #1
 80164b0:	6123      	str	r3, [r4, #16]
 80164b2:	4545      	cmp	r5, r8
 80164b4:	d8f3      	bhi.n	801649e <_scanf_float+0x326>
 80164b6:	e6a5      	b.n	8016204 <_scanf_float+0x8c>
 80164b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80164bc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80164c0:	4632      	mov	r2, r6
 80164c2:	4638      	mov	r0, r7
 80164c4:	4798      	blx	r3
 80164c6:	6923      	ldr	r3, [r4, #16]
 80164c8:	3b01      	subs	r3, #1
 80164ca:	6123      	str	r3, [r4, #16]
 80164cc:	4545      	cmp	r5, r8
 80164ce:	d8f3      	bhi.n	80164b8 <_scanf_float+0x340>
 80164d0:	e698      	b.n	8016204 <_scanf_float+0x8c>
 80164d2:	9b03      	ldr	r3, [sp, #12]
 80164d4:	2b00      	cmp	r3, #0
 80164d6:	d0bf      	beq.n	8016458 <_scanf_float+0x2e0>
 80164d8:	9904      	ldr	r1, [sp, #16]
 80164da:	230a      	movs	r3, #10
 80164dc:	4632      	mov	r2, r6
 80164de:	3101      	adds	r1, #1
 80164e0:	4638      	mov	r0, r7
 80164e2:	f000 ff4d 	bl	8017380 <_strtol_r>
 80164e6:	9b03      	ldr	r3, [sp, #12]
 80164e8:	9d04      	ldr	r5, [sp, #16]
 80164ea:	1ac2      	subs	r2, r0, r3
 80164ec:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80164f0:	429d      	cmp	r5, r3
 80164f2:	bf28      	it	cs
 80164f4:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 80164f8:	490f      	ldr	r1, [pc, #60]	; (8016538 <_scanf_float+0x3c0>)
 80164fa:	4628      	mov	r0, r5
 80164fc:	f000 f858 	bl	80165b0 <siprintf>
 8016500:	e7aa      	b.n	8016458 <_scanf_float+0x2e0>
 8016502:	f015 0504 	ands.w	r5, r5, #4
 8016506:	d1b8      	bne.n	801647a <_scanf_float+0x302>
 8016508:	681f      	ldr	r7, [r3, #0]
 801650a:	ee10 2a10 	vmov	r2, s0
 801650e:	464b      	mov	r3, r9
 8016510:	ee10 0a10 	vmov	r0, s0
 8016514:	4649      	mov	r1, r9
 8016516:	f7ea fb21 	bl	8000b5c <__aeabi_dcmpun>
 801651a:	b128      	cbz	r0, 8016528 <_scanf_float+0x3b0>
 801651c:	4628      	mov	r0, r5
 801651e:	f000 f80d 	bl	801653c <nanf>
 8016522:	ed87 0a00 	vstr	s0, [r7]
 8016526:	e7ab      	b.n	8016480 <_scanf_float+0x308>
 8016528:	4640      	mov	r0, r8
 801652a:	4649      	mov	r1, r9
 801652c:	f7ea fb74 	bl	8000c18 <__aeabi_d2f>
 8016530:	6038      	str	r0, [r7, #0]
 8016532:	e7a5      	b.n	8016480 <_scanf_float+0x308>
 8016534:	2600      	movs	r6, #0
 8016536:	e666      	b.n	8016206 <_scanf_float+0x8e>
 8016538:	0801a56a 	.word	0x0801a56a

0801653c <nanf>:
 801653c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8016544 <nanf+0x8>
 8016540:	4770      	bx	lr
 8016542:	bf00      	nop
 8016544:	7fc00000 	.word	0x7fc00000

08016548 <sniprintf>:
 8016548:	b40c      	push	{r2, r3}
 801654a:	b530      	push	{r4, r5, lr}
 801654c:	4b17      	ldr	r3, [pc, #92]	; (80165ac <sniprintf+0x64>)
 801654e:	1e0c      	subs	r4, r1, #0
 8016550:	b09d      	sub	sp, #116	; 0x74
 8016552:	681d      	ldr	r5, [r3, #0]
 8016554:	da08      	bge.n	8016568 <sniprintf+0x20>
 8016556:	238b      	movs	r3, #139	; 0x8b
 8016558:	602b      	str	r3, [r5, #0]
 801655a:	f04f 30ff 	mov.w	r0, #4294967295
 801655e:	b01d      	add	sp, #116	; 0x74
 8016560:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016564:	b002      	add	sp, #8
 8016566:	4770      	bx	lr
 8016568:	f44f 7302 	mov.w	r3, #520	; 0x208
 801656c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016570:	bf14      	ite	ne
 8016572:	f104 33ff 	addne.w	r3, r4, #4294967295
 8016576:	4623      	moveq	r3, r4
 8016578:	9304      	str	r3, [sp, #16]
 801657a:	9307      	str	r3, [sp, #28]
 801657c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016580:	9002      	str	r0, [sp, #8]
 8016582:	9006      	str	r0, [sp, #24]
 8016584:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016588:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801658a:	ab21      	add	r3, sp, #132	; 0x84
 801658c:	a902      	add	r1, sp, #8
 801658e:	4628      	mov	r0, r5
 8016590:	9301      	str	r3, [sp, #4]
 8016592:	f002 fddf 	bl	8019154 <_svfiprintf_r>
 8016596:	1c43      	adds	r3, r0, #1
 8016598:	bfbc      	itt	lt
 801659a:	238b      	movlt	r3, #139	; 0x8b
 801659c:	602b      	strlt	r3, [r5, #0]
 801659e:	2c00      	cmp	r4, #0
 80165a0:	d0dd      	beq.n	801655e <sniprintf+0x16>
 80165a2:	9b02      	ldr	r3, [sp, #8]
 80165a4:	2200      	movs	r2, #0
 80165a6:	701a      	strb	r2, [r3, #0]
 80165a8:	e7d9      	b.n	801655e <sniprintf+0x16>
 80165aa:	bf00      	nop
 80165ac:	2000000c 	.word	0x2000000c

080165b0 <siprintf>:
 80165b0:	b40e      	push	{r1, r2, r3}
 80165b2:	b500      	push	{lr}
 80165b4:	b09c      	sub	sp, #112	; 0x70
 80165b6:	ab1d      	add	r3, sp, #116	; 0x74
 80165b8:	9002      	str	r0, [sp, #8]
 80165ba:	9006      	str	r0, [sp, #24]
 80165bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80165c0:	4809      	ldr	r0, [pc, #36]	; (80165e8 <siprintf+0x38>)
 80165c2:	9107      	str	r1, [sp, #28]
 80165c4:	9104      	str	r1, [sp, #16]
 80165c6:	4909      	ldr	r1, [pc, #36]	; (80165ec <siprintf+0x3c>)
 80165c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80165cc:	9105      	str	r1, [sp, #20]
 80165ce:	6800      	ldr	r0, [r0, #0]
 80165d0:	9301      	str	r3, [sp, #4]
 80165d2:	a902      	add	r1, sp, #8
 80165d4:	f002 fdbe 	bl	8019154 <_svfiprintf_r>
 80165d8:	9b02      	ldr	r3, [sp, #8]
 80165da:	2200      	movs	r2, #0
 80165dc:	701a      	strb	r2, [r3, #0]
 80165de:	b01c      	add	sp, #112	; 0x70
 80165e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80165e4:	b003      	add	sp, #12
 80165e6:	4770      	bx	lr
 80165e8:	2000000c 	.word	0x2000000c
 80165ec:	ffff0208 	.word	0xffff0208

080165f0 <siscanf>:
 80165f0:	b40e      	push	{r1, r2, r3}
 80165f2:	b530      	push	{r4, r5, lr}
 80165f4:	b09c      	sub	sp, #112	; 0x70
 80165f6:	ac1f      	add	r4, sp, #124	; 0x7c
 80165f8:	f44f 7201 	mov.w	r2, #516	; 0x204
 80165fc:	f854 5b04 	ldr.w	r5, [r4], #4
 8016600:	f8ad 2014 	strh.w	r2, [sp, #20]
 8016604:	9002      	str	r0, [sp, #8]
 8016606:	9006      	str	r0, [sp, #24]
 8016608:	f7e9 fdfa 	bl	8000200 <strlen>
 801660c:	4b0b      	ldr	r3, [pc, #44]	; (801663c <siscanf+0x4c>)
 801660e:	9003      	str	r0, [sp, #12]
 8016610:	9007      	str	r0, [sp, #28]
 8016612:	930b      	str	r3, [sp, #44]	; 0x2c
 8016614:	480a      	ldr	r0, [pc, #40]	; (8016640 <siscanf+0x50>)
 8016616:	9401      	str	r4, [sp, #4]
 8016618:	2300      	movs	r3, #0
 801661a:	930f      	str	r3, [sp, #60]	; 0x3c
 801661c:	9314      	str	r3, [sp, #80]	; 0x50
 801661e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016622:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016626:	462a      	mov	r2, r5
 8016628:	4623      	mov	r3, r4
 801662a:	a902      	add	r1, sp, #8
 801662c:	6800      	ldr	r0, [r0, #0]
 801662e:	f002 fee3 	bl	80193f8 <__ssvfiscanf_r>
 8016632:	b01c      	add	sp, #112	; 0x70
 8016634:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016638:	b003      	add	sp, #12
 801663a:	4770      	bx	lr
 801663c:	08016645 	.word	0x08016645
 8016640:	2000000c 	.word	0x2000000c

08016644 <__seofread>:
 8016644:	2000      	movs	r0, #0
 8016646:	4770      	bx	lr

08016648 <sulp>:
 8016648:	b570      	push	{r4, r5, r6, lr}
 801664a:	4604      	mov	r4, r0
 801664c:	460d      	mov	r5, r1
 801664e:	ec45 4b10 	vmov	d0, r4, r5
 8016652:	4616      	mov	r6, r2
 8016654:	f002 fb3a 	bl	8018ccc <__ulp>
 8016658:	ec51 0b10 	vmov	r0, r1, d0
 801665c:	b17e      	cbz	r6, 801667e <sulp+0x36>
 801665e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8016662:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016666:	2b00      	cmp	r3, #0
 8016668:	dd09      	ble.n	801667e <sulp+0x36>
 801666a:	051b      	lsls	r3, r3, #20
 801666c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8016670:	2400      	movs	r4, #0
 8016672:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8016676:	4622      	mov	r2, r4
 8016678:	462b      	mov	r3, r5
 801667a:	f7e9 ffd5 	bl	8000628 <__aeabi_dmul>
 801667e:	bd70      	pop	{r4, r5, r6, pc}

08016680 <_strtod_l>:
 8016680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016684:	461f      	mov	r7, r3
 8016686:	b0a1      	sub	sp, #132	; 0x84
 8016688:	2300      	movs	r3, #0
 801668a:	4681      	mov	r9, r0
 801668c:	4638      	mov	r0, r7
 801668e:	460e      	mov	r6, r1
 8016690:	9217      	str	r2, [sp, #92]	; 0x5c
 8016692:	931c      	str	r3, [sp, #112]	; 0x70
 8016694:	f002 f824 	bl	80186e0 <__localeconv_l>
 8016698:	4680      	mov	r8, r0
 801669a:	6800      	ldr	r0, [r0, #0]
 801669c:	f7e9 fdb0 	bl	8000200 <strlen>
 80166a0:	f04f 0a00 	mov.w	sl, #0
 80166a4:	4604      	mov	r4, r0
 80166a6:	f04f 0b00 	mov.w	fp, #0
 80166aa:	961b      	str	r6, [sp, #108]	; 0x6c
 80166ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80166ae:	781a      	ldrb	r2, [r3, #0]
 80166b0:	2a0d      	cmp	r2, #13
 80166b2:	d832      	bhi.n	801671a <_strtod_l+0x9a>
 80166b4:	2a09      	cmp	r2, #9
 80166b6:	d236      	bcs.n	8016726 <_strtod_l+0xa6>
 80166b8:	2a00      	cmp	r2, #0
 80166ba:	d03e      	beq.n	801673a <_strtod_l+0xba>
 80166bc:	2300      	movs	r3, #0
 80166be:	930d      	str	r3, [sp, #52]	; 0x34
 80166c0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80166c2:	782b      	ldrb	r3, [r5, #0]
 80166c4:	2b30      	cmp	r3, #48	; 0x30
 80166c6:	f040 80ac 	bne.w	8016822 <_strtod_l+0x1a2>
 80166ca:	786b      	ldrb	r3, [r5, #1]
 80166cc:	2b58      	cmp	r3, #88	; 0x58
 80166ce:	d001      	beq.n	80166d4 <_strtod_l+0x54>
 80166d0:	2b78      	cmp	r3, #120	; 0x78
 80166d2:	d167      	bne.n	80167a4 <_strtod_l+0x124>
 80166d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80166d6:	9301      	str	r3, [sp, #4]
 80166d8:	ab1c      	add	r3, sp, #112	; 0x70
 80166da:	9300      	str	r3, [sp, #0]
 80166dc:	9702      	str	r7, [sp, #8]
 80166de:	ab1d      	add	r3, sp, #116	; 0x74
 80166e0:	4a88      	ldr	r2, [pc, #544]	; (8016904 <_strtod_l+0x284>)
 80166e2:	a91b      	add	r1, sp, #108	; 0x6c
 80166e4:	4648      	mov	r0, r9
 80166e6:	f001 fd12 	bl	801810e <__gethex>
 80166ea:	f010 0407 	ands.w	r4, r0, #7
 80166ee:	4606      	mov	r6, r0
 80166f0:	d005      	beq.n	80166fe <_strtod_l+0x7e>
 80166f2:	2c06      	cmp	r4, #6
 80166f4:	d12b      	bne.n	801674e <_strtod_l+0xce>
 80166f6:	3501      	adds	r5, #1
 80166f8:	2300      	movs	r3, #0
 80166fa:	951b      	str	r5, [sp, #108]	; 0x6c
 80166fc:	930d      	str	r3, [sp, #52]	; 0x34
 80166fe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016700:	2b00      	cmp	r3, #0
 8016702:	f040 859a 	bne.w	801723a <_strtod_l+0xbba>
 8016706:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016708:	b1e3      	cbz	r3, 8016744 <_strtod_l+0xc4>
 801670a:	4652      	mov	r2, sl
 801670c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8016710:	ec43 2b10 	vmov	d0, r2, r3
 8016714:	b021      	add	sp, #132	; 0x84
 8016716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801671a:	2a2b      	cmp	r2, #43	; 0x2b
 801671c:	d015      	beq.n	801674a <_strtod_l+0xca>
 801671e:	2a2d      	cmp	r2, #45	; 0x2d
 8016720:	d004      	beq.n	801672c <_strtod_l+0xac>
 8016722:	2a20      	cmp	r2, #32
 8016724:	d1ca      	bne.n	80166bc <_strtod_l+0x3c>
 8016726:	3301      	adds	r3, #1
 8016728:	931b      	str	r3, [sp, #108]	; 0x6c
 801672a:	e7bf      	b.n	80166ac <_strtod_l+0x2c>
 801672c:	2201      	movs	r2, #1
 801672e:	920d      	str	r2, [sp, #52]	; 0x34
 8016730:	1c5a      	adds	r2, r3, #1
 8016732:	921b      	str	r2, [sp, #108]	; 0x6c
 8016734:	785b      	ldrb	r3, [r3, #1]
 8016736:	2b00      	cmp	r3, #0
 8016738:	d1c2      	bne.n	80166c0 <_strtod_l+0x40>
 801673a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801673c:	961b      	str	r6, [sp, #108]	; 0x6c
 801673e:	2b00      	cmp	r3, #0
 8016740:	f040 8579 	bne.w	8017236 <_strtod_l+0xbb6>
 8016744:	4652      	mov	r2, sl
 8016746:	465b      	mov	r3, fp
 8016748:	e7e2      	b.n	8016710 <_strtod_l+0x90>
 801674a:	2200      	movs	r2, #0
 801674c:	e7ef      	b.n	801672e <_strtod_l+0xae>
 801674e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016750:	b13a      	cbz	r2, 8016762 <_strtod_l+0xe2>
 8016752:	2135      	movs	r1, #53	; 0x35
 8016754:	a81e      	add	r0, sp, #120	; 0x78
 8016756:	f002 fbb1 	bl	8018ebc <__copybits>
 801675a:	991c      	ldr	r1, [sp, #112]	; 0x70
 801675c:	4648      	mov	r0, r9
 801675e:	f002 f81d 	bl	801879c <_Bfree>
 8016762:	3c01      	subs	r4, #1
 8016764:	2c04      	cmp	r4, #4
 8016766:	d806      	bhi.n	8016776 <_strtod_l+0xf6>
 8016768:	e8df f004 	tbb	[pc, r4]
 801676c:	1714030a 	.word	0x1714030a
 8016770:	0a          	.byte	0x0a
 8016771:	00          	.byte	0x00
 8016772:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8016776:	0730      	lsls	r0, r6, #28
 8016778:	d5c1      	bpl.n	80166fe <_strtod_l+0x7e>
 801677a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801677e:	e7be      	b.n	80166fe <_strtod_l+0x7e>
 8016780:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8016784:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8016786:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801678a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801678e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8016792:	e7f0      	b.n	8016776 <_strtod_l+0xf6>
 8016794:	f8df b170 	ldr.w	fp, [pc, #368]	; 8016908 <_strtod_l+0x288>
 8016798:	e7ed      	b.n	8016776 <_strtod_l+0xf6>
 801679a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801679e:	f04f 3aff 	mov.w	sl, #4294967295
 80167a2:	e7e8      	b.n	8016776 <_strtod_l+0xf6>
 80167a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80167a6:	1c5a      	adds	r2, r3, #1
 80167a8:	921b      	str	r2, [sp, #108]	; 0x6c
 80167aa:	785b      	ldrb	r3, [r3, #1]
 80167ac:	2b30      	cmp	r3, #48	; 0x30
 80167ae:	d0f9      	beq.n	80167a4 <_strtod_l+0x124>
 80167b0:	2b00      	cmp	r3, #0
 80167b2:	d0a4      	beq.n	80166fe <_strtod_l+0x7e>
 80167b4:	2301      	movs	r3, #1
 80167b6:	2500      	movs	r5, #0
 80167b8:	9306      	str	r3, [sp, #24]
 80167ba:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80167bc:	9308      	str	r3, [sp, #32]
 80167be:	9507      	str	r5, [sp, #28]
 80167c0:	9505      	str	r5, [sp, #20]
 80167c2:	220a      	movs	r2, #10
 80167c4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80167c6:	7807      	ldrb	r7, [r0, #0]
 80167c8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80167cc:	b2d9      	uxtb	r1, r3
 80167ce:	2909      	cmp	r1, #9
 80167d0:	d929      	bls.n	8016826 <_strtod_l+0x1a6>
 80167d2:	4622      	mov	r2, r4
 80167d4:	f8d8 1000 	ldr.w	r1, [r8]
 80167d8:	f003 f8f8 	bl	80199cc <strncmp>
 80167dc:	2800      	cmp	r0, #0
 80167de:	d031      	beq.n	8016844 <_strtod_l+0x1c4>
 80167e0:	2000      	movs	r0, #0
 80167e2:	9c05      	ldr	r4, [sp, #20]
 80167e4:	9004      	str	r0, [sp, #16]
 80167e6:	463b      	mov	r3, r7
 80167e8:	4602      	mov	r2, r0
 80167ea:	2b65      	cmp	r3, #101	; 0x65
 80167ec:	d001      	beq.n	80167f2 <_strtod_l+0x172>
 80167ee:	2b45      	cmp	r3, #69	; 0x45
 80167f0:	d114      	bne.n	801681c <_strtod_l+0x19c>
 80167f2:	b924      	cbnz	r4, 80167fe <_strtod_l+0x17e>
 80167f4:	b910      	cbnz	r0, 80167fc <_strtod_l+0x17c>
 80167f6:	9b06      	ldr	r3, [sp, #24]
 80167f8:	2b00      	cmp	r3, #0
 80167fa:	d09e      	beq.n	801673a <_strtod_l+0xba>
 80167fc:	2400      	movs	r4, #0
 80167fe:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8016800:	1c73      	adds	r3, r6, #1
 8016802:	931b      	str	r3, [sp, #108]	; 0x6c
 8016804:	7873      	ldrb	r3, [r6, #1]
 8016806:	2b2b      	cmp	r3, #43	; 0x2b
 8016808:	d078      	beq.n	80168fc <_strtod_l+0x27c>
 801680a:	2b2d      	cmp	r3, #45	; 0x2d
 801680c:	d070      	beq.n	80168f0 <_strtod_l+0x270>
 801680e:	f04f 0c00 	mov.w	ip, #0
 8016812:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8016816:	2f09      	cmp	r7, #9
 8016818:	d97c      	bls.n	8016914 <_strtod_l+0x294>
 801681a:	961b      	str	r6, [sp, #108]	; 0x6c
 801681c:	f04f 0e00 	mov.w	lr, #0
 8016820:	e09a      	b.n	8016958 <_strtod_l+0x2d8>
 8016822:	2300      	movs	r3, #0
 8016824:	e7c7      	b.n	80167b6 <_strtod_l+0x136>
 8016826:	9905      	ldr	r1, [sp, #20]
 8016828:	2908      	cmp	r1, #8
 801682a:	bfdd      	ittte	le
 801682c:	9907      	ldrle	r1, [sp, #28]
 801682e:	fb02 3301 	mlale	r3, r2, r1, r3
 8016832:	9307      	strle	r3, [sp, #28]
 8016834:	fb02 3505 	mlagt	r5, r2, r5, r3
 8016838:	9b05      	ldr	r3, [sp, #20]
 801683a:	3001      	adds	r0, #1
 801683c:	3301      	adds	r3, #1
 801683e:	9305      	str	r3, [sp, #20]
 8016840:	901b      	str	r0, [sp, #108]	; 0x6c
 8016842:	e7bf      	b.n	80167c4 <_strtod_l+0x144>
 8016844:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016846:	191a      	adds	r2, r3, r4
 8016848:	921b      	str	r2, [sp, #108]	; 0x6c
 801684a:	9a05      	ldr	r2, [sp, #20]
 801684c:	5d1b      	ldrb	r3, [r3, r4]
 801684e:	2a00      	cmp	r2, #0
 8016850:	d037      	beq.n	80168c2 <_strtod_l+0x242>
 8016852:	9c05      	ldr	r4, [sp, #20]
 8016854:	4602      	mov	r2, r0
 8016856:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801685a:	2909      	cmp	r1, #9
 801685c:	d913      	bls.n	8016886 <_strtod_l+0x206>
 801685e:	2101      	movs	r1, #1
 8016860:	9104      	str	r1, [sp, #16]
 8016862:	e7c2      	b.n	80167ea <_strtod_l+0x16a>
 8016864:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016866:	1c5a      	adds	r2, r3, #1
 8016868:	921b      	str	r2, [sp, #108]	; 0x6c
 801686a:	785b      	ldrb	r3, [r3, #1]
 801686c:	3001      	adds	r0, #1
 801686e:	2b30      	cmp	r3, #48	; 0x30
 8016870:	d0f8      	beq.n	8016864 <_strtod_l+0x1e4>
 8016872:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8016876:	2a08      	cmp	r2, #8
 8016878:	f200 84e4 	bhi.w	8017244 <_strtod_l+0xbc4>
 801687c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801687e:	9208      	str	r2, [sp, #32]
 8016880:	4602      	mov	r2, r0
 8016882:	2000      	movs	r0, #0
 8016884:	4604      	mov	r4, r0
 8016886:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 801688a:	f100 0101 	add.w	r1, r0, #1
 801688e:	d012      	beq.n	80168b6 <_strtod_l+0x236>
 8016890:	440a      	add	r2, r1
 8016892:	eb00 0c04 	add.w	ip, r0, r4
 8016896:	4621      	mov	r1, r4
 8016898:	270a      	movs	r7, #10
 801689a:	458c      	cmp	ip, r1
 801689c:	d113      	bne.n	80168c6 <_strtod_l+0x246>
 801689e:	1821      	adds	r1, r4, r0
 80168a0:	2908      	cmp	r1, #8
 80168a2:	f104 0401 	add.w	r4, r4, #1
 80168a6:	4404      	add	r4, r0
 80168a8:	dc19      	bgt.n	80168de <_strtod_l+0x25e>
 80168aa:	9b07      	ldr	r3, [sp, #28]
 80168ac:	210a      	movs	r1, #10
 80168ae:	fb01 e303 	mla	r3, r1, r3, lr
 80168b2:	9307      	str	r3, [sp, #28]
 80168b4:	2100      	movs	r1, #0
 80168b6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80168b8:	1c58      	adds	r0, r3, #1
 80168ba:	901b      	str	r0, [sp, #108]	; 0x6c
 80168bc:	785b      	ldrb	r3, [r3, #1]
 80168be:	4608      	mov	r0, r1
 80168c0:	e7c9      	b.n	8016856 <_strtod_l+0x1d6>
 80168c2:	9805      	ldr	r0, [sp, #20]
 80168c4:	e7d3      	b.n	801686e <_strtod_l+0x1ee>
 80168c6:	2908      	cmp	r1, #8
 80168c8:	f101 0101 	add.w	r1, r1, #1
 80168cc:	dc03      	bgt.n	80168d6 <_strtod_l+0x256>
 80168ce:	9b07      	ldr	r3, [sp, #28]
 80168d0:	437b      	muls	r3, r7
 80168d2:	9307      	str	r3, [sp, #28]
 80168d4:	e7e1      	b.n	801689a <_strtod_l+0x21a>
 80168d6:	2910      	cmp	r1, #16
 80168d8:	bfd8      	it	le
 80168da:	437d      	mulle	r5, r7
 80168dc:	e7dd      	b.n	801689a <_strtod_l+0x21a>
 80168de:	2c10      	cmp	r4, #16
 80168e0:	bfdc      	itt	le
 80168e2:	210a      	movle	r1, #10
 80168e4:	fb01 e505 	mlale	r5, r1, r5, lr
 80168e8:	e7e4      	b.n	80168b4 <_strtod_l+0x234>
 80168ea:	2301      	movs	r3, #1
 80168ec:	9304      	str	r3, [sp, #16]
 80168ee:	e781      	b.n	80167f4 <_strtod_l+0x174>
 80168f0:	f04f 0c01 	mov.w	ip, #1
 80168f4:	1cb3      	adds	r3, r6, #2
 80168f6:	931b      	str	r3, [sp, #108]	; 0x6c
 80168f8:	78b3      	ldrb	r3, [r6, #2]
 80168fa:	e78a      	b.n	8016812 <_strtod_l+0x192>
 80168fc:	f04f 0c00 	mov.w	ip, #0
 8016900:	e7f8      	b.n	80168f4 <_strtod_l+0x274>
 8016902:	bf00      	nop
 8016904:	0801a570 	.word	0x0801a570
 8016908:	7ff00000 	.word	0x7ff00000
 801690c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801690e:	1c5f      	adds	r7, r3, #1
 8016910:	971b      	str	r7, [sp, #108]	; 0x6c
 8016912:	785b      	ldrb	r3, [r3, #1]
 8016914:	2b30      	cmp	r3, #48	; 0x30
 8016916:	d0f9      	beq.n	801690c <_strtod_l+0x28c>
 8016918:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 801691c:	2f08      	cmp	r7, #8
 801691e:	f63f af7d 	bhi.w	801681c <_strtod_l+0x19c>
 8016922:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8016926:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016928:	930a      	str	r3, [sp, #40]	; 0x28
 801692a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801692c:	1c5f      	adds	r7, r3, #1
 801692e:	971b      	str	r7, [sp, #108]	; 0x6c
 8016930:	785b      	ldrb	r3, [r3, #1]
 8016932:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8016936:	f1b8 0f09 	cmp.w	r8, #9
 801693a:	d937      	bls.n	80169ac <_strtod_l+0x32c>
 801693c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801693e:	1a7f      	subs	r7, r7, r1
 8016940:	2f08      	cmp	r7, #8
 8016942:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8016946:	dc37      	bgt.n	80169b8 <_strtod_l+0x338>
 8016948:	45be      	cmp	lr, r7
 801694a:	bfa8      	it	ge
 801694c:	46be      	movge	lr, r7
 801694e:	f1bc 0f00 	cmp.w	ip, #0
 8016952:	d001      	beq.n	8016958 <_strtod_l+0x2d8>
 8016954:	f1ce 0e00 	rsb	lr, lr, #0
 8016958:	2c00      	cmp	r4, #0
 801695a:	d151      	bne.n	8016a00 <_strtod_l+0x380>
 801695c:	2800      	cmp	r0, #0
 801695e:	f47f aece 	bne.w	80166fe <_strtod_l+0x7e>
 8016962:	9a06      	ldr	r2, [sp, #24]
 8016964:	2a00      	cmp	r2, #0
 8016966:	f47f aeca 	bne.w	80166fe <_strtod_l+0x7e>
 801696a:	9a04      	ldr	r2, [sp, #16]
 801696c:	2a00      	cmp	r2, #0
 801696e:	f47f aee4 	bne.w	801673a <_strtod_l+0xba>
 8016972:	2b4e      	cmp	r3, #78	; 0x4e
 8016974:	d027      	beq.n	80169c6 <_strtod_l+0x346>
 8016976:	dc21      	bgt.n	80169bc <_strtod_l+0x33c>
 8016978:	2b49      	cmp	r3, #73	; 0x49
 801697a:	f47f aede 	bne.w	801673a <_strtod_l+0xba>
 801697e:	49a0      	ldr	r1, [pc, #640]	; (8016c00 <_strtod_l+0x580>)
 8016980:	a81b      	add	r0, sp, #108	; 0x6c
 8016982:	f001 fdf7 	bl	8018574 <__match>
 8016986:	2800      	cmp	r0, #0
 8016988:	f43f aed7 	beq.w	801673a <_strtod_l+0xba>
 801698c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801698e:	499d      	ldr	r1, [pc, #628]	; (8016c04 <_strtod_l+0x584>)
 8016990:	3b01      	subs	r3, #1
 8016992:	a81b      	add	r0, sp, #108	; 0x6c
 8016994:	931b      	str	r3, [sp, #108]	; 0x6c
 8016996:	f001 fded 	bl	8018574 <__match>
 801699a:	b910      	cbnz	r0, 80169a2 <_strtod_l+0x322>
 801699c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801699e:	3301      	adds	r3, #1
 80169a0:	931b      	str	r3, [sp, #108]	; 0x6c
 80169a2:	f8df b274 	ldr.w	fp, [pc, #628]	; 8016c18 <_strtod_l+0x598>
 80169a6:	f04f 0a00 	mov.w	sl, #0
 80169aa:	e6a8      	b.n	80166fe <_strtod_l+0x7e>
 80169ac:	210a      	movs	r1, #10
 80169ae:	fb01 3e0e 	mla	lr, r1, lr, r3
 80169b2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80169b6:	e7b8      	b.n	801692a <_strtod_l+0x2aa>
 80169b8:	46be      	mov	lr, r7
 80169ba:	e7c8      	b.n	801694e <_strtod_l+0x2ce>
 80169bc:	2b69      	cmp	r3, #105	; 0x69
 80169be:	d0de      	beq.n	801697e <_strtod_l+0x2fe>
 80169c0:	2b6e      	cmp	r3, #110	; 0x6e
 80169c2:	f47f aeba 	bne.w	801673a <_strtod_l+0xba>
 80169c6:	4990      	ldr	r1, [pc, #576]	; (8016c08 <_strtod_l+0x588>)
 80169c8:	a81b      	add	r0, sp, #108	; 0x6c
 80169ca:	f001 fdd3 	bl	8018574 <__match>
 80169ce:	2800      	cmp	r0, #0
 80169d0:	f43f aeb3 	beq.w	801673a <_strtod_l+0xba>
 80169d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80169d6:	781b      	ldrb	r3, [r3, #0]
 80169d8:	2b28      	cmp	r3, #40	; 0x28
 80169da:	d10e      	bne.n	80169fa <_strtod_l+0x37a>
 80169dc:	aa1e      	add	r2, sp, #120	; 0x78
 80169de:	498b      	ldr	r1, [pc, #556]	; (8016c0c <_strtod_l+0x58c>)
 80169e0:	a81b      	add	r0, sp, #108	; 0x6c
 80169e2:	f001 fddb 	bl	801859c <__hexnan>
 80169e6:	2805      	cmp	r0, #5
 80169e8:	d107      	bne.n	80169fa <_strtod_l+0x37a>
 80169ea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80169ec:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 80169f0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80169f4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80169f8:	e681      	b.n	80166fe <_strtod_l+0x7e>
 80169fa:	f8df b224 	ldr.w	fp, [pc, #548]	; 8016c20 <_strtod_l+0x5a0>
 80169fe:	e7d2      	b.n	80169a6 <_strtod_l+0x326>
 8016a00:	ebae 0302 	sub.w	r3, lr, r2
 8016a04:	9306      	str	r3, [sp, #24]
 8016a06:	9b05      	ldr	r3, [sp, #20]
 8016a08:	9807      	ldr	r0, [sp, #28]
 8016a0a:	2b00      	cmp	r3, #0
 8016a0c:	bf08      	it	eq
 8016a0e:	4623      	moveq	r3, r4
 8016a10:	2c10      	cmp	r4, #16
 8016a12:	9305      	str	r3, [sp, #20]
 8016a14:	46a0      	mov	r8, r4
 8016a16:	bfa8      	it	ge
 8016a18:	f04f 0810 	movge.w	r8, #16
 8016a1c:	f7e9 fd8a 	bl	8000534 <__aeabi_ui2d>
 8016a20:	2c09      	cmp	r4, #9
 8016a22:	4682      	mov	sl, r0
 8016a24:	468b      	mov	fp, r1
 8016a26:	dc13      	bgt.n	8016a50 <_strtod_l+0x3d0>
 8016a28:	9b06      	ldr	r3, [sp, #24]
 8016a2a:	2b00      	cmp	r3, #0
 8016a2c:	f43f ae67 	beq.w	80166fe <_strtod_l+0x7e>
 8016a30:	9b06      	ldr	r3, [sp, #24]
 8016a32:	dd7a      	ble.n	8016b2a <_strtod_l+0x4aa>
 8016a34:	2b16      	cmp	r3, #22
 8016a36:	dc61      	bgt.n	8016afc <_strtod_l+0x47c>
 8016a38:	4a75      	ldr	r2, [pc, #468]	; (8016c10 <_strtod_l+0x590>)
 8016a3a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8016a3e:	e9de 0100 	ldrd	r0, r1, [lr]
 8016a42:	4652      	mov	r2, sl
 8016a44:	465b      	mov	r3, fp
 8016a46:	f7e9 fdef 	bl	8000628 <__aeabi_dmul>
 8016a4a:	4682      	mov	sl, r0
 8016a4c:	468b      	mov	fp, r1
 8016a4e:	e656      	b.n	80166fe <_strtod_l+0x7e>
 8016a50:	4b6f      	ldr	r3, [pc, #444]	; (8016c10 <_strtod_l+0x590>)
 8016a52:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8016a56:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8016a5a:	f7e9 fde5 	bl	8000628 <__aeabi_dmul>
 8016a5e:	4606      	mov	r6, r0
 8016a60:	4628      	mov	r0, r5
 8016a62:	460f      	mov	r7, r1
 8016a64:	f7e9 fd66 	bl	8000534 <__aeabi_ui2d>
 8016a68:	4602      	mov	r2, r0
 8016a6a:	460b      	mov	r3, r1
 8016a6c:	4630      	mov	r0, r6
 8016a6e:	4639      	mov	r1, r7
 8016a70:	f7e9 fc24 	bl	80002bc <__adddf3>
 8016a74:	2c0f      	cmp	r4, #15
 8016a76:	4682      	mov	sl, r0
 8016a78:	468b      	mov	fp, r1
 8016a7a:	ddd5      	ble.n	8016a28 <_strtod_l+0x3a8>
 8016a7c:	9b06      	ldr	r3, [sp, #24]
 8016a7e:	eba4 0808 	sub.w	r8, r4, r8
 8016a82:	4498      	add	r8, r3
 8016a84:	f1b8 0f00 	cmp.w	r8, #0
 8016a88:	f340 8096 	ble.w	8016bb8 <_strtod_l+0x538>
 8016a8c:	f018 030f 	ands.w	r3, r8, #15
 8016a90:	d00a      	beq.n	8016aa8 <_strtod_l+0x428>
 8016a92:	495f      	ldr	r1, [pc, #380]	; (8016c10 <_strtod_l+0x590>)
 8016a94:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8016a98:	4652      	mov	r2, sl
 8016a9a:	465b      	mov	r3, fp
 8016a9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016aa0:	f7e9 fdc2 	bl	8000628 <__aeabi_dmul>
 8016aa4:	4682      	mov	sl, r0
 8016aa6:	468b      	mov	fp, r1
 8016aa8:	f038 080f 	bics.w	r8, r8, #15
 8016aac:	d073      	beq.n	8016b96 <_strtod_l+0x516>
 8016aae:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8016ab2:	dd47      	ble.n	8016b44 <_strtod_l+0x4c4>
 8016ab4:	2400      	movs	r4, #0
 8016ab6:	46a0      	mov	r8, r4
 8016ab8:	9407      	str	r4, [sp, #28]
 8016aba:	9405      	str	r4, [sp, #20]
 8016abc:	2322      	movs	r3, #34	; 0x22
 8016abe:	f8df b158 	ldr.w	fp, [pc, #344]	; 8016c18 <_strtod_l+0x598>
 8016ac2:	f8c9 3000 	str.w	r3, [r9]
 8016ac6:	f04f 0a00 	mov.w	sl, #0
 8016aca:	9b07      	ldr	r3, [sp, #28]
 8016acc:	2b00      	cmp	r3, #0
 8016ace:	f43f ae16 	beq.w	80166fe <_strtod_l+0x7e>
 8016ad2:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016ad4:	4648      	mov	r0, r9
 8016ad6:	f001 fe61 	bl	801879c <_Bfree>
 8016ada:	9905      	ldr	r1, [sp, #20]
 8016adc:	4648      	mov	r0, r9
 8016ade:	f001 fe5d 	bl	801879c <_Bfree>
 8016ae2:	4641      	mov	r1, r8
 8016ae4:	4648      	mov	r0, r9
 8016ae6:	f001 fe59 	bl	801879c <_Bfree>
 8016aea:	9907      	ldr	r1, [sp, #28]
 8016aec:	4648      	mov	r0, r9
 8016aee:	f001 fe55 	bl	801879c <_Bfree>
 8016af2:	4621      	mov	r1, r4
 8016af4:	4648      	mov	r0, r9
 8016af6:	f001 fe51 	bl	801879c <_Bfree>
 8016afa:	e600      	b.n	80166fe <_strtod_l+0x7e>
 8016afc:	9a06      	ldr	r2, [sp, #24]
 8016afe:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8016b02:	4293      	cmp	r3, r2
 8016b04:	dbba      	blt.n	8016a7c <_strtod_l+0x3fc>
 8016b06:	4d42      	ldr	r5, [pc, #264]	; (8016c10 <_strtod_l+0x590>)
 8016b08:	f1c4 040f 	rsb	r4, r4, #15
 8016b0c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8016b10:	4652      	mov	r2, sl
 8016b12:	465b      	mov	r3, fp
 8016b14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016b18:	f7e9 fd86 	bl	8000628 <__aeabi_dmul>
 8016b1c:	9b06      	ldr	r3, [sp, #24]
 8016b1e:	1b1c      	subs	r4, r3, r4
 8016b20:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8016b24:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016b28:	e78d      	b.n	8016a46 <_strtod_l+0x3c6>
 8016b2a:	f113 0f16 	cmn.w	r3, #22
 8016b2e:	dba5      	blt.n	8016a7c <_strtod_l+0x3fc>
 8016b30:	4a37      	ldr	r2, [pc, #220]	; (8016c10 <_strtod_l+0x590>)
 8016b32:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8016b36:	e9d2 2300 	ldrd	r2, r3, [r2]
 8016b3a:	4650      	mov	r0, sl
 8016b3c:	4659      	mov	r1, fp
 8016b3e:	f7e9 fe9d 	bl	800087c <__aeabi_ddiv>
 8016b42:	e782      	b.n	8016a4a <_strtod_l+0x3ca>
 8016b44:	2300      	movs	r3, #0
 8016b46:	4e33      	ldr	r6, [pc, #204]	; (8016c14 <_strtod_l+0x594>)
 8016b48:	ea4f 1828 	mov.w	r8, r8, asr #4
 8016b4c:	4650      	mov	r0, sl
 8016b4e:	4659      	mov	r1, fp
 8016b50:	461d      	mov	r5, r3
 8016b52:	f1b8 0f01 	cmp.w	r8, #1
 8016b56:	dc21      	bgt.n	8016b9c <_strtod_l+0x51c>
 8016b58:	b10b      	cbz	r3, 8016b5e <_strtod_l+0x4de>
 8016b5a:	4682      	mov	sl, r0
 8016b5c:	468b      	mov	fp, r1
 8016b5e:	4b2d      	ldr	r3, [pc, #180]	; (8016c14 <_strtod_l+0x594>)
 8016b60:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8016b64:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8016b68:	4652      	mov	r2, sl
 8016b6a:	465b      	mov	r3, fp
 8016b6c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8016b70:	f7e9 fd5a 	bl	8000628 <__aeabi_dmul>
 8016b74:	4b28      	ldr	r3, [pc, #160]	; (8016c18 <_strtod_l+0x598>)
 8016b76:	460a      	mov	r2, r1
 8016b78:	400b      	ands	r3, r1
 8016b7a:	4928      	ldr	r1, [pc, #160]	; (8016c1c <_strtod_l+0x59c>)
 8016b7c:	428b      	cmp	r3, r1
 8016b7e:	4682      	mov	sl, r0
 8016b80:	d898      	bhi.n	8016ab4 <_strtod_l+0x434>
 8016b82:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8016b86:	428b      	cmp	r3, r1
 8016b88:	bf86      	itte	hi
 8016b8a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8016c24 <_strtod_l+0x5a4>
 8016b8e:	f04f 3aff 	movhi.w	sl, #4294967295
 8016b92:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8016b96:	2300      	movs	r3, #0
 8016b98:	9304      	str	r3, [sp, #16]
 8016b9a:	e077      	b.n	8016c8c <_strtod_l+0x60c>
 8016b9c:	f018 0f01 	tst.w	r8, #1
 8016ba0:	d006      	beq.n	8016bb0 <_strtod_l+0x530>
 8016ba2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8016ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016baa:	f7e9 fd3d 	bl	8000628 <__aeabi_dmul>
 8016bae:	2301      	movs	r3, #1
 8016bb0:	3501      	adds	r5, #1
 8016bb2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8016bb6:	e7cc      	b.n	8016b52 <_strtod_l+0x4d2>
 8016bb8:	d0ed      	beq.n	8016b96 <_strtod_l+0x516>
 8016bba:	f1c8 0800 	rsb	r8, r8, #0
 8016bbe:	f018 020f 	ands.w	r2, r8, #15
 8016bc2:	d00a      	beq.n	8016bda <_strtod_l+0x55a>
 8016bc4:	4b12      	ldr	r3, [pc, #72]	; (8016c10 <_strtod_l+0x590>)
 8016bc6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016bca:	4650      	mov	r0, sl
 8016bcc:	4659      	mov	r1, fp
 8016bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016bd2:	f7e9 fe53 	bl	800087c <__aeabi_ddiv>
 8016bd6:	4682      	mov	sl, r0
 8016bd8:	468b      	mov	fp, r1
 8016bda:	ea5f 1828 	movs.w	r8, r8, asr #4
 8016bde:	d0da      	beq.n	8016b96 <_strtod_l+0x516>
 8016be0:	f1b8 0f1f 	cmp.w	r8, #31
 8016be4:	dd20      	ble.n	8016c28 <_strtod_l+0x5a8>
 8016be6:	2400      	movs	r4, #0
 8016be8:	46a0      	mov	r8, r4
 8016bea:	9407      	str	r4, [sp, #28]
 8016bec:	9405      	str	r4, [sp, #20]
 8016bee:	2322      	movs	r3, #34	; 0x22
 8016bf0:	f04f 0a00 	mov.w	sl, #0
 8016bf4:	f04f 0b00 	mov.w	fp, #0
 8016bf8:	f8c9 3000 	str.w	r3, [r9]
 8016bfc:	e765      	b.n	8016aca <_strtod_l+0x44a>
 8016bfe:	bf00      	nop
 8016c00:	0801a53d 	.word	0x0801a53d
 8016c04:	0801a5c3 	.word	0x0801a5c3
 8016c08:	0801a545 	.word	0x0801a545
 8016c0c:	0801a584 	.word	0x0801a584
 8016c10:	0801a668 	.word	0x0801a668
 8016c14:	0801a640 	.word	0x0801a640
 8016c18:	7ff00000 	.word	0x7ff00000
 8016c1c:	7ca00000 	.word	0x7ca00000
 8016c20:	fff80000 	.word	0xfff80000
 8016c24:	7fefffff 	.word	0x7fefffff
 8016c28:	f018 0310 	ands.w	r3, r8, #16
 8016c2c:	bf18      	it	ne
 8016c2e:	236a      	movne	r3, #106	; 0x6a
 8016c30:	4da0      	ldr	r5, [pc, #640]	; (8016eb4 <_strtod_l+0x834>)
 8016c32:	9304      	str	r3, [sp, #16]
 8016c34:	4650      	mov	r0, sl
 8016c36:	4659      	mov	r1, fp
 8016c38:	2300      	movs	r3, #0
 8016c3a:	f1b8 0f00 	cmp.w	r8, #0
 8016c3e:	f300 810a 	bgt.w	8016e56 <_strtod_l+0x7d6>
 8016c42:	b10b      	cbz	r3, 8016c48 <_strtod_l+0x5c8>
 8016c44:	4682      	mov	sl, r0
 8016c46:	468b      	mov	fp, r1
 8016c48:	9b04      	ldr	r3, [sp, #16]
 8016c4a:	b1bb      	cbz	r3, 8016c7c <_strtod_l+0x5fc>
 8016c4c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8016c50:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016c54:	2b00      	cmp	r3, #0
 8016c56:	4659      	mov	r1, fp
 8016c58:	dd10      	ble.n	8016c7c <_strtod_l+0x5fc>
 8016c5a:	2b1f      	cmp	r3, #31
 8016c5c:	f340 8107 	ble.w	8016e6e <_strtod_l+0x7ee>
 8016c60:	2b34      	cmp	r3, #52	; 0x34
 8016c62:	bfde      	ittt	le
 8016c64:	3b20      	suble	r3, #32
 8016c66:	f04f 32ff 	movle.w	r2, #4294967295
 8016c6a:	fa02 f303 	lslle.w	r3, r2, r3
 8016c6e:	f04f 0a00 	mov.w	sl, #0
 8016c72:	bfcc      	ite	gt
 8016c74:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8016c78:	ea03 0b01 	andle.w	fp, r3, r1
 8016c7c:	2200      	movs	r2, #0
 8016c7e:	2300      	movs	r3, #0
 8016c80:	4650      	mov	r0, sl
 8016c82:	4659      	mov	r1, fp
 8016c84:	f7e9 ff38 	bl	8000af8 <__aeabi_dcmpeq>
 8016c88:	2800      	cmp	r0, #0
 8016c8a:	d1ac      	bne.n	8016be6 <_strtod_l+0x566>
 8016c8c:	9b07      	ldr	r3, [sp, #28]
 8016c8e:	9300      	str	r3, [sp, #0]
 8016c90:	9a05      	ldr	r2, [sp, #20]
 8016c92:	9908      	ldr	r1, [sp, #32]
 8016c94:	4623      	mov	r3, r4
 8016c96:	4648      	mov	r0, r9
 8016c98:	f001 fdd2 	bl	8018840 <__s2b>
 8016c9c:	9007      	str	r0, [sp, #28]
 8016c9e:	2800      	cmp	r0, #0
 8016ca0:	f43f af08 	beq.w	8016ab4 <_strtod_l+0x434>
 8016ca4:	9a06      	ldr	r2, [sp, #24]
 8016ca6:	9b06      	ldr	r3, [sp, #24]
 8016ca8:	2a00      	cmp	r2, #0
 8016caa:	f1c3 0300 	rsb	r3, r3, #0
 8016cae:	bfa8      	it	ge
 8016cb0:	2300      	movge	r3, #0
 8016cb2:	930e      	str	r3, [sp, #56]	; 0x38
 8016cb4:	2400      	movs	r4, #0
 8016cb6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8016cba:	9316      	str	r3, [sp, #88]	; 0x58
 8016cbc:	46a0      	mov	r8, r4
 8016cbe:	9b07      	ldr	r3, [sp, #28]
 8016cc0:	4648      	mov	r0, r9
 8016cc2:	6859      	ldr	r1, [r3, #4]
 8016cc4:	f001 fd36 	bl	8018734 <_Balloc>
 8016cc8:	9005      	str	r0, [sp, #20]
 8016cca:	2800      	cmp	r0, #0
 8016ccc:	f43f aef6 	beq.w	8016abc <_strtod_l+0x43c>
 8016cd0:	9b07      	ldr	r3, [sp, #28]
 8016cd2:	691a      	ldr	r2, [r3, #16]
 8016cd4:	3202      	adds	r2, #2
 8016cd6:	f103 010c 	add.w	r1, r3, #12
 8016cda:	0092      	lsls	r2, r2, #2
 8016cdc:	300c      	adds	r0, #12
 8016cde:	f7fe fddb 	bl	8015898 <memcpy>
 8016ce2:	aa1e      	add	r2, sp, #120	; 0x78
 8016ce4:	a91d      	add	r1, sp, #116	; 0x74
 8016ce6:	ec4b ab10 	vmov	d0, sl, fp
 8016cea:	4648      	mov	r0, r9
 8016cec:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8016cf0:	f002 f862 	bl	8018db8 <__d2b>
 8016cf4:	901c      	str	r0, [sp, #112]	; 0x70
 8016cf6:	2800      	cmp	r0, #0
 8016cf8:	f43f aee0 	beq.w	8016abc <_strtod_l+0x43c>
 8016cfc:	2101      	movs	r1, #1
 8016cfe:	4648      	mov	r0, r9
 8016d00:	f001 fe2a 	bl	8018958 <__i2b>
 8016d04:	4680      	mov	r8, r0
 8016d06:	2800      	cmp	r0, #0
 8016d08:	f43f aed8 	beq.w	8016abc <_strtod_l+0x43c>
 8016d0c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8016d0e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8016d10:	2e00      	cmp	r6, #0
 8016d12:	bfab      	itete	ge
 8016d14:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8016d16:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8016d18:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8016d1a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8016d1c:	bfac      	ite	ge
 8016d1e:	18f7      	addge	r7, r6, r3
 8016d20:	1b9d      	sublt	r5, r3, r6
 8016d22:	9b04      	ldr	r3, [sp, #16]
 8016d24:	1af6      	subs	r6, r6, r3
 8016d26:	4416      	add	r6, r2
 8016d28:	4b63      	ldr	r3, [pc, #396]	; (8016eb8 <_strtod_l+0x838>)
 8016d2a:	3e01      	subs	r6, #1
 8016d2c:	429e      	cmp	r6, r3
 8016d2e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8016d32:	f280 80af 	bge.w	8016e94 <_strtod_l+0x814>
 8016d36:	1b9b      	subs	r3, r3, r6
 8016d38:	2b1f      	cmp	r3, #31
 8016d3a:	eba2 0203 	sub.w	r2, r2, r3
 8016d3e:	f04f 0101 	mov.w	r1, #1
 8016d42:	f300 809b 	bgt.w	8016e7c <_strtod_l+0x7fc>
 8016d46:	fa01 f303 	lsl.w	r3, r1, r3
 8016d4a:	930f      	str	r3, [sp, #60]	; 0x3c
 8016d4c:	2300      	movs	r3, #0
 8016d4e:	930a      	str	r3, [sp, #40]	; 0x28
 8016d50:	18be      	adds	r6, r7, r2
 8016d52:	9b04      	ldr	r3, [sp, #16]
 8016d54:	42b7      	cmp	r7, r6
 8016d56:	4415      	add	r5, r2
 8016d58:	441d      	add	r5, r3
 8016d5a:	463b      	mov	r3, r7
 8016d5c:	bfa8      	it	ge
 8016d5e:	4633      	movge	r3, r6
 8016d60:	42ab      	cmp	r3, r5
 8016d62:	bfa8      	it	ge
 8016d64:	462b      	movge	r3, r5
 8016d66:	2b00      	cmp	r3, #0
 8016d68:	bfc2      	ittt	gt
 8016d6a:	1af6      	subgt	r6, r6, r3
 8016d6c:	1aed      	subgt	r5, r5, r3
 8016d6e:	1aff      	subgt	r7, r7, r3
 8016d70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016d72:	b1bb      	cbz	r3, 8016da4 <_strtod_l+0x724>
 8016d74:	4641      	mov	r1, r8
 8016d76:	461a      	mov	r2, r3
 8016d78:	4648      	mov	r0, r9
 8016d7a:	f001 fe8d 	bl	8018a98 <__pow5mult>
 8016d7e:	4680      	mov	r8, r0
 8016d80:	2800      	cmp	r0, #0
 8016d82:	f43f ae9b 	beq.w	8016abc <_strtod_l+0x43c>
 8016d86:	4601      	mov	r1, r0
 8016d88:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016d8a:	4648      	mov	r0, r9
 8016d8c:	f001 fded 	bl	801896a <__multiply>
 8016d90:	900c      	str	r0, [sp, #48]	; 0x30
 8016d92:	2800      	cmp	r0, #0
 8016d94:	f43f ae92 	beq.w	8016abc <_strtod_l+0x43c>
 8016d98:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016d9a:	4648      	mov	r0, r9
 8016d9c:	f001 fcfe 	bl	801879c <_Bfree>
 8016da0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016da2:	931c      	str	r3, [sp, #112]	; 0x70
 8016da4:	2e00      	cmp	r6, #0
 8016da6:	dc7a      	bgt.n	8016e9e <_strtod_l+0x81e>
 8016da8:	9b06      	ldr	r3, [sp, #24]
 8016daa:	2b00      	cmp	r3, #0
 8016dac:	dd08      	ble.n	8016dc0 <_strtod_l+0x740>
 8016dae:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8016db0:	9905      	ldr	r1, [sp, #20]
 8016db2:	4648      	mov	r0, r9
 8016db4:	f001 fe70 	bl	8018a98 <__pow5mult>
 8016db8:	9005      	str	r0, [sp, #20]
 8016dba:	2800      	cmp	r0, #0
 8016dbc:	f43f ae7e 	beq.w	8016abc <_strtod_l+0x43c>
 8016dc0:	2d00      	cmp	r5, #0
 8016dc2:	dd08      	ble.n	8016dd6 <_strtod_l+0x756>
 8016dc4:	462a      	mov	r2, r5
 8016dc6:	9905      	ldr	r1, [sp, #20]
 8016dc8:	4648      	mov	r0, r9
 8016dca:	f001 feb3 	bl	8018b34 <__lshift>
 8016dce:	9005      	str	r0, [sp, #20]
 8016dd0:	2800      	cmp	r0, #0
 8016dd2:	f43f ae73 	beq.w	8016abc <_strtod_l+0x43c>
 8016dd6:	2f00      	cmp	r7, #0
 8016dd8:	dd08      	ble.n	8016dec <_strtod_l+0x76c>
 8016dda:	4641      	mov	r1, r8
 8016ddc:	463a      	mov	r2, r7
 8016dde:	4648      	mov	r0, r9
 8016de0:	f001 fea8 	bl	8018b34 <__lshift>
 8016de4:	4680      	mov	r8, r0
 8016de6:	2800      	cmp	r0, #0
 8016de8:	f43f ae68 	beq.w	8016abc <_strtod_l+0x43c>
 8016dec:	9a05      	ldr	r2, [sp, #20]
 8016dee:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016df0:	4648      	mov	r0, r9
 8016df2:	f001 ff0d 	bl	8018c10 <__mdiff>
 8016df6:	4604      	mov	r4, r0
 8016df8:	2800      	cmp	r0, #0
 8016dfa:	f43f ae5f 	beq.w	8016abc <_strtod_l+0x43c>
 8016dfe:	68c3      	ldr	r3, [r0, #12]
 8016e00:	930c      	str	r3, [sp, #48]	; 0x30
 8016e02:	2300      	movs	r3, #0
 8016e04:	60c3      	str	r3, [r0, #12]
 8016e06:	4641      	mov	r1, r8
 8016e08:	f001 fee8 	bl	8018bdc <__mcmp>
 8016e0c:	2800      	cmp	r0, #0
 8016e0e:	da55      	bge.n	8016ebc <_strtod_l+0x83c>
 8016e10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016e12:	b9e3      	cbnz	r3, 8016e4e <_strtod_l+0x7ce>
 8016e14:	f1ba 0f00 	cmp.w	sl, #0
 8016e18:	d119      	bne.n	8016e4e <_strtod_l+0x7ce>
 8016e1a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016e1e:	b9b3      	cbnz	r3, 8016e4e <_strtod_l+0x7ce>
 8016e20:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8016e24:	0d1b      	lsrs	r3, r3, #20
 8016e26:	051b      	lsls	r3, r3, #20
 8016e28:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8016e2c:	d90f      	bls.n	8016e4e <_strtod_l+0x7ce>
 8016e2e:	6963      	ldr	r3, [r4, #20]
 8016e30:	b913      	cbnz	r3, 8016e38 <_strtod_l+0x7b8>
 8016e32:	6923      	ldr	r3, [r4, #16]
 8016e34:	2b01      	cmp	r3, #1
 8016e36:	dd0a      	ble.n	8016e4e <_strtod_l+0x7ce>
 8016e38:	4621      	mov	r1, r4
 8016e3a:	2201      	movs	r2, #1
 8016e3c:	4648      	mov	r0, r9
 8016e3e:	f001 fe79 	bl	8018b34 <__lshift>
 8016e42:	4641      	mov	r1, r8
 8016e44:	4604      	mov	r4, r0
 8016e46:	f001 fec9 	bl	8018bdc <__mcmp>
 8016e4a:	2800      	cmp	r0, #0
 8016e4c:	dc67      	bgt.n	8016f1e <_strtod_l+0x89e>
 8016e4e:	9b04      	ldr	r3, [sp, #16]
 8016e50:	2b00      	cmp	r3, #0
 8016e52:	d171      	bne.n	8016f38 <_strtod_l+0x8b8>
 8016e54:	e63d      	b.n	8016ad2 <_strtod_l+0x452>
 8016e56:	f018 0f01 	tst.w	r8, #1
 8016e5a:	d004      	beq.n	8016e66 <_strtod_l+0x7e6>
 8016e5c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016e60:	f7e9 fbe2 	bl	8000628 <__aeabi_dmul>
 8016e64:	2301      	movs	r3, #1
 8016e66:	ea4f 0868 	mov.w	r8, r8, asr #1
 8016e6a:	3508      	adds	r5, #8
 8016e6c:	e6e5      	b.n	8016c3a <_strtod_l+0x5ba>
 8016e6e:	f04f 32ff 	mov.w	r2, #4294967295
 8016e72:	fa02 f303 	lsl.w	r3, r2, r3
 8016e76:	ea03 0a0a 	and.w	sl, r3, sl
 8016e7a:	e6ff      	b.n	8016c7c <_strtod_l+0x5fc>
 8016e7c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8016e80:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8016e84:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8016e88:	36e2      	adds	r6, #226	; 0xe2
 8016e8a:	fa01 f306 	lsl.w	r3, r1, r6
 8016e8e:	930a      	str	r3, [sp, #40]	; 0x28
 8016e90:	910f      	str	r1, [sp, #60]	; 0x3c
 8016e92:	e75d      	b.n	8016d50 <_strtod_l+0x6d0>
 8016e94:	2300      	movs	r3, #0
 8016e96:	930a      	str	r3, [sp, #40]	; 0x28
 8016e98:	2301      	movs	r3, #1
 8016e9a:	930f      	str	r3, [sp, #60]	; 0x3c
 8016e9c:	e758      	b.n	8016d50 <_strtod_l+0x6d0>
 8016e9e:	4632      	mov	r2, r6
 8016ea0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016ea2:	4648      	mov	r0, r9
 8016ea4:	f001 fe46 	bl	8018b34 <__lshift>
 8016ea8:	901c      	str	r0, [sp, #112]	; 0x70
 8016eaa:	2800      	cmp	r0, #0
 8016eac:	f47f af7c 	bne.w	8016da8 <_strtod_l+0x728>
 8016eb0:	e604      	b.n	8016abc <_strtod_l+0x43c>
 8016eb2:	bf00      	nop
 8016eb4:	0801a598 	.word	0x0801a598
 8016eb8:	fffffc02 	.word	0xfffffc02
 8016ebc:	465d      	mov	r5, fp
 8016ebe:	f040 8086 	bne.w	8016fce <_strtod_l+0x94e>
 8016ec2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016ec4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016ec8:	b32a      	cbz	r2, 8016f16 <_strtod_l+0x896>
 8016eca:	4aaf      	ldr	r2, [pc, #700]	; (8017188 <_strtod_l+0xb08>)
 8016ecc:	4293      	cmp	r3, r2
 8016ece:	d153      	bne.n	8016f78 <_strtod_l+0x8f8>
 8016ed0:	9b04      	ldr	r3, [sp, #16]
 8016ed2:	4650      	mov	r0, sl
 8016ed4:	b1d3      	cbz	r3, 8016f0c <_strtod_l+0x88c>
 8016ed6:	4aad      	ldr	r2, [pc, #692]	; (801718c <_strtod_l+0xb0c>)
 8016ed8:	402a      	ands	r2, r5
 8016eda:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8016ede:	f04f 31ff 	mov.w	r1, #4294967295
 8016ee2:	d816      	bhi.n	8016f12 <_strtod_l+0x892>
 8016ee4:	0d12      	lsrs	r2, r2, #20
 8016ee6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8016eea:	fa01 f303 	lsl.w	r3, r1, r3
 8016eee:	4298      	cmp	r0, r3
 8016ef0:	d142      	bne.n	8016f78 <_strtod_l+0x8f8>
 8016ef2:	4ba7      	ldr	r3, [pc, #668]	; (8017190 <_strtod_l+0xb10>)
 8016ef4:	429d      	cmp	r5, r3
 8016ef6:	d102      	bne.n	8016efe <_strtod_l+0x87e>
 8016ef8:	3001      	adds	r0, #1
 8016efa:	f43f addf 	beq.w	8016abc <_strtod_l+0x43c>
 8016efe:	4ba3      	ldr	r3, [pc, #652]	; (801718c <_strtod_l+0xb0c>)
 8016f00:	402b      	ands	r3, r5
 8016f02:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8016f06:	f04f 0a00 	mov.w	sl, #0
 8016f0a:	e7a0      	b.n	8016e4e <_strtod_l+0x7ce>
 8016f0c:	f04f 33ff 	mov.w	r3, #4294967295
 8016f10:	e7ed      	b.n	8016eee <_strtod_l+0x86e>
 8016f12:	460b      	mov	r3, r1
 8016f14:	e7eb      	b.n	8016eee <_strtod_l+0x86e>
 8016f16:	bb7b      	cbnz	r3, 8016f78 <_strtod_l+0x8f8>
 8016f18:	f1ba 0f00 	cmp.w	sl, #0
 8016f1c:	d12c      	bne.n	8016f78 <_strtod_l+0x8f8>
 8016f1e:	9904      	ldr	r1, [sp, #16]
 8016f20:	4a9a      	ldr	r2, [pc, #616]	; (801718c <_strtod_l+0xb0c>)
 8016f22:	465b      	mov	r3, fp
 8016f24:	b1f1      	cbz	r1, 8016f64 <_strtod_l+0x8e4>
 8016f26:	ea02 010b 	and.w	r1, r2, fp
 8016f2a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8016f2e:	dc19      	bgt.n	8016f64 <_strtod_l+0x8e4>
 8016f30:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8016f34:	f77f ae5b 	ble.w	8016bee <_strtod_l+0x56e>
 8016f38:	4a96      	ldr	r2, [pc, #600]	; (8017194 <_strtod_l+0xb14>)
 8016f3a:	2300      	movs	r3, #0
 8016f3c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8016f40:	4650      	mov	r0, sl
 8016f42:	4659      	mov	r1, fp
 8016f44:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8016f48:	f7e9 fb6e 	bl	8000628 <__aeabi_dmul>
 8016f4c:	4682      	mov	sl, r0
 8016f4e:	468b      	mov	fp, r1
 8016f50:	2900      	cmp	r1, #0
 8016f52:	f47f adbe 	bne.w	8016ad2 <_strtod_l+0x452>
 8016f56:	2800      	cmp	r0, #0
 8016f58:	f47f adbb 	bne.w	8016ad2 <_strtod_l+0x452>
 8016f5c:	2322      	movs	r3, #34	; 0x22
 8016f5e:	f8c9 3000 	str.w	r3, [r9]
 8016f62:	e5b6      	b.n	8016ad2 <_strtod_l+0x452>
 8016f64:	4013      	ands	r3, r2
 8016f66:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8016f6a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8016f6e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8016f72:	f04f 3aff 	mov.w	sl, #4294967295
 8016f76:	e76a      	b.n	8016e4e <_strtod_l+0x7ce>
 8016f78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016f7a:	b193      	cbz	r3, 8016fa2 <_strtod_l+0x922>
 8016f7c:	422b      	tst	r3, r5
 8016f7e:	f43f af66 	beq.w	8016e4e <_strtod_l+0x7ce>
 8016f82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016f84:	9a04      	ldr	r2, [sp, #16]
 8016f86:	4650      	mov	r0, sl
 8016f88:	4659      	mov	r1, fp
 8016f8a:	b173      	cbz	r3, 8016faa <_strtod_l+0x92a>
 8016f8c:	f7ff fb5c 	bl	8016648 <sulp>
 8016f90:	4602      	mov	r2, r0
 8016f92:	460b      	mov	r3, r1
 8016f94:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016f98:	f7e9 f990 	bl	80002bc <__adddf3>
 8016f9c:	4682      	mov	sl, r0
 8016f9e:	468b      	mov	fp, r1
 8016fa0:	e755      	b.n	8016e4e <_strtod_l+0x7ce>
 8016fa2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016fa4:	ea13 0f0a 	tst.w	r3, sl
 8016fa8:	e7e9      	b.n	8016f7e <_strtod_l+0x8fe>
 8016faa:	f7ff fb4d 	bl	8016648 <sulp>
 8016fae:	4602      	mov	r2, r0
 8016fb0:	460b      	mov	r3, r1
 8016fb2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016fb6:	f7e9 f97f 	bl	80002b8 <__aeabi_dsub>
 8016fba:	2200      	movs	r2, #0
 8016fbc:	2300      	movs	r3, #0
 8016fbe:	4682      	mov	sl, r0
 8016fc0:	468b      	mov	fp, r1
 8016fc2:	f7e9 fd99 	bl	8000af8 <__aeabi_dcmpeq>
 8016fc6:	2800      	cmp	r0, #0
 8016fc8:	f47f ae11 	bne.w	8016bee <_strtod_l+0x56e>
 8016fcc:	e73f      	b.n	8016e4e <_strtod_l+0x7ce>
 8016fce:	4641      	mov	r1, r8
 8016fd0:	4620      	mov	r0, r4
 8016fd2:	f001 ff40 	bl	8018e56 <__ratio>
 8016fd6:	ec57 6b10 	vmov	r6, r7, d0
 8016fda:	2200      	movs	r2, #0
 8016fdc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016fe0:	ee10 0a10 	vmov	r0, s0
 8016fe4:	4639      	mov	r1, r7
 8016fe6:	f7e9 fd9b 	bl	8000b20 <__aeabi_dcmple>
 8016fea:	2800      	cmp	r0, #0
 8016fec:	d077      	beq.n	80170de <_strtod_l+0xa5e>
 8016fee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016ff0:	2b00      	cmp	r3, #0
 8016ff2:	d04a      	beq.n	801708a <_strtod_l+0xa0a>
 8016ff4:	4b68      	ldr	r3, [pc, #416]	; (8017198 <_strtod_l+0xb18>)
 8016ff6:	2200      	movs	r2, #0
 8016ff8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8016ffc:	4f66      	ldr	r7, [pc, #408]	; (8017198 <_strtod_l+0xb18>)
 8016ffe:	2600      	movs	r6, #0
 8017000:	4b62      	ldr	r3, [pc, #392]	; (801718c <_strtod_l+0xb0c>)
 8017002:	402b      	ands	r3, r5
 8017004:	930f      	str	r3, [sp, #60]	; 0x3c
 8017006:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017008:	4b64      	ldr	r3, [pc, #400]	; (801719c <_strtod_l+0xb1c>)
 801700a:	429a      	cmp	r2, r3
 801700c:	f040 80ce 	bne.w	80171ac <_strtod_l+0xb2c>
 8017010:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017014:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017018:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 801701c:	ec4b ab10 	vmov	d0, sl, fp
 8017020:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8017024:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8017028:	f001 fe50 	bl	8018ccc <__ulp>
 801702c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017030:	ec53 2b10 	vmov	r2, r3, d0
 8017034:	f7e9 faf8 	bl	8000628 <__aeabi_dmul>
 8017038:	4652      	mov	r2, sl
 801703a:	465b      	mov	r3, fp
 801703c:	f7e9 f93e 	bl	80002bc <__adddf3>
 8017040:	460b      	mov	r3, r1
 8017042:	4952      	ldr	r1, [pc, #328]	; (801718c <_strtod_l+0xb0c>)
 8017044:	4a56      	ldr	r2, [pc, #344]	; (80171a0 <_strtod_l+0xb20>)
 8017046:	4019      	ands	r1, r3
 8017048:	4291      	cmp	r1, r2
 801704a:	4682      	mov	sl, r0
 801704c:	d95b      	bls.n	8017106 <_strtod_l+0xa86>
 801704e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017050:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8017054:	4293      	cmp	r3, r2
 8017056:	d103      	bne.n	8017060 <_strtod_l+0x9e0>
 8017058:	9b08      	ldr	r3, [sp, #32]
 801705a:	3301      	adds	r3, #1
 801705c:	f43f ad2e 	beq.w	8016abc <_strtod_l+0x43c>
 8017060:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8017190 <_strtod_l+0xb10>
 8017064:	f04f 3aff 	mov.w	sl, #4294967295
 8017068:	991c      	ldr	r1, [sp, #112]	; 0x70
 801706a:	4648      	mov	r0, r9
 801706c:	f001 fb96 	bl	801879c <_Bfree>
 8017070:	9905      	ldr	r1, [sp, #20]
 8017072:	4648      	mov	r0, r9
 8017074:	f001 fb92 	bl	801879c <_Bfree>
 8017078:	4641      	mov	r1, r8
 801707a:	4648      	mov	r0, r9
 801707c:	f001 fb8e 	bl	801879c <_Bfree>
 8017080:	4621      	mov	r1, r4
 8017082:	4648      	mov	r0, r9
 8017084:	f001 fb8a 	bl	801879c <_Bfree>
 8017088:	e619      	b.n	8016cbe <_strtod_l+0x63e>
 801708a:	f1ba 0f00 	cmp.w	sl, #0
 801708e:	d11a      	bne.n	80170c6 <_strtod_l+0xa46>
 8017090:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017094:	b9eb      	cbnz	r3, 80170d2 <_strtod_l+0xa52>
 8017096:	2200      	movs	r2, #0
 8017098:	4b3f      	ldr	r3, [pc, #252]	; (8017198 <_strtod_l+0xb18>)
 801709a:	4630      	mov	r0, r6
 801709c:	4639      	mov	r1, r7
 801709e:	f7e9 fd35 	bl	8000b0c <__aeabi_dcmplt>
 80170a2:	b9c8      	cbnz	r0, 80170d8 <_strtod_l+0xa58>
 80170a4:	4630      	mov	r0, r6
 80170a6:	4639      	mov	r1, r7
 80170a8:	2200      	movs	r2, #0
 80170aa:	4b3e      	ldr	r3, [pc, #248]	; (80171a4 <_strtod_l+0xb24>)
 80170ac:	f7e9 fabc 	bl	8000628 <__aeabi_dmul>
 80170b0:	4606      	mov	r6, r0
 80170b2:	460f      	mov	r7, r1
 80170b4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80170b8:	9618      	str	r6, [sp, #96]	; 0x60
 80170ba:	9319      	str	r3, [sp, #100]	; 0x64
 80170bc:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 80170c0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80170c4:	e79c      	b.n	8017000 <_strtod_l+0x980>
 80170c6:	f1ba 0f01 	cmp.w	sl, #1
 80170ca:	d102      	bne.n	80170d2 <_strtod_l+0xa52>
 80170cc:	2d00      	cmp	r5, #0
 80170ce:	f43f ad8e 	beq.w	8016bee <_strtod_l+0x56e>
 80170d2:	2200      	movs	r2, #0
 80170d4:	4b34      	ldr	r3, [pc, #208]	; (80171a8 <_strtod_l+0xb28>)
 80170d6:	e78f      	b.n	8016ff8 <_strtod_l+0x978>
 80170d8:	2600      	movs	r6, #0
 80170da:	4f32      	ldr	r7, [pc, #200]	; (80171a4 <_strtod_l+0xb24>)
 80170dc:	e7ea      	b.n	80170b4 <_strtod_l+0xa34>
 80170de:	4b31      	ldr	r3, [pc, #196]	; (80171a4 <_strtod_l+0xb24>)
 80170e0:	4630      	mov	r0, r6
 80170e2:	4639      	mov	r1, r7
 80170e4:	2200      	movs	r2, #0
 80170e6:	f7e9 fa9f 	bl	8000628 <__aeabi_dmul>
 80170ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80170ec:	4606      	mov	r6, r0
 80170ee:	460f      	mov	r7, r1
 80170f0:	b933      	cbnz	r3, 8017100 <_strtod_l+0xa80>
 80170f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80170f6:	9010      	str	r0, [sp, #64]	; 0x40
 80170f8:	9311      	str	r3, [sp, #68]	; 0x44
 80170fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80170fe:	e7df      	b.n	80170c0 <_strtod_l+0xa40>
 8017100:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8017104:	e7f9      	b.n	80170fa <_strtod_l+0xa7a>
 8017106:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801710a:	9b04      	ldr	r3, [sp, #16]
 801710c:	2b00      	cmp	r3, #0
 801710e:	d1ab      	bne.n	8017068 <_strtod_l+0x9e8>
 8017110:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8017114:	0d1b      	lsrs	r3, r3, #20
 8017116:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017118:	051b      	lsls	r3, r3, #20
 801711a:	429a      	cmp	r2, r3
 801711c:	465d      	mov	r5, fp
 801711e:	d1a3      	bne.n	8017068 <_strtod_l+0x9e8>
 8017120:	4639      	mov	r1, r7
 8017122:	4630      	mov	r0, r6
 8017124:	f7e9 fd30 	bl	8000b88 <__aeabi_d2iz>
 8017128:	f7e9 fa14 	bl	8000554 <__aeabi_i2d>
 801712c:	460b      	mov	r3, r1
 801712e:	4602      	mov	r2, r0
 8017130:	4639      	mov	r1, r7
 8017132:	4630      	mov	r0, r6
 8017134:	f7e9 f8c0 	bl	80002b8 <__aeabi_dsub>
 8017138:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801713a:	4606      	mov	r6, r0
 801713c:	460f      	mov	r7, r1
 801713e:	b933      	cbnz	r3, 801714e <_strtod_l+0xace>
 8017140:	f1ba 0f00 	cmp.w	sl, #0
 8017144:	d103      	bne.n	801714e <_strtod_l+0xace>
 8017146:	f3cb 0513 	ubfx	r5, fp, #0, #20
 801714a:	2d00      	cmp	r5, #0
 801714c:	d06d      	beq.n	801722a <_strtod_l+0xbaa>
 801714e:	a30a      	add	r3, pc, #40	; (adr r3, 8017178 <_strtod_l+0xaf8>)
 8017150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017154:	4630      	mov	r0, r6
 8017156:	4639      	mov	r1, r7
 8017158:	f7e9 fcd8 	bl	8000b0c <__aeabi_dcmplt>
 801715c:	2800      	cmp	r0, #0
 801715e:	f47f acb8 	bne.w	8016ad2 <_strtod_l+0x452>
 8017162:	a307      	add	r3, pc, #28	; (adr r3, 8017180 <_strtod_l+0xb00>)
 8017164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017168:	4630      	mov	r0, r6
 801716a:	4639      	mov	r1, r7
 801716c:	f7e9 fcec 	bl	8000b48 <__aeabi_dcmpgt>
 8017170:	2800      	cmp	r0, #0
 8017172:	f43f af79 	beq.w	8017068 <_strtod_l+0x9e8>
 8017176:	e4ac      	b.n	8016ad2 <_strtod_l+0x452>
 8017178:	94a03595 	.word	0x94a03595
 801717c:	3fdfffff 	.word	0x3fdfffff
 8017180:	35afe535 	.word	0x35afe535
 8017184:	3fe00000 	.word	0x3fe00000
 8017188:	000fffff 	.word	0x000fffff
 801718c:	7ff00000 	.word	0x7ff00000
 8017190:	7fefffff 	.word	0x7fefffff
 8017194:	39500000 	.word	0x39500000
 8017198:	3ff00000 	.word	0x3ff00000
 801719c:	7fe00000 	.word	0x7fe00000
 80171a0:	7c9fffff 	.word	0x7c9fffff
 80171a4:	3fe00000 	.word	0x3fe00000
 80171a8:	bff00000 	.word	0xbff00000
 80171ac:	9b04      	ldr	r3, [sp, #16]
 80171ae:	b333      	cbz	r3, 80171fe <_strtod_l+0xb7e>
 80171b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80171b2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80171b6:	d822      	bhi.n	80171fe <_strtod_l+0xb7e>
 80171b8:	a327      	add	r3, pc, #156	; (adr r3, 8017258 <_strtod_l+0xbd8>)
 80171ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171be:	4630      	mov	r0, r6
 80171c0:	4639      	mov	r1, r7
 80171c2:	f7e9 fcad 	bl	8000b20 <__aeabi_dcmple>
 80171c6:	b1a0      	cbz	r0, 80171f2 <_strtod_l+0xb72>
 80171c8:	4639      	mov	r1, r7
 80171ca:	4630      	mov	r0, r6
 80171cc:	f7e9 fd04 	bl	8000bd8 <__aeabi_d2uiz>
 80171d0:	2800      	cmp	r0, #0
 80171d2:	bf08      	it	eq
 80171d4:	2001      	moveq	r0, #1
 80171d6:	f7e9 f9ad 	bl	8000534 <__aeabi_ui2d>
 80171da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80171dc:	4606      	mov	r6, r0
 80171de:	460f      	mov	r7, r1
 80171e0:	bb03      	cbnz	r3, 8017224 <_strtod_l+0xba4>
 80171e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80171e6:	9012      	str	r0, [sp, #72]	; 0x48
 80171e8:	9313      	str	r3, [sp, #76]	; 0x4c
 80171ea:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80171ee:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80171f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80171f4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80171f6:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80171fa:	1a9b      	subs	r3, r3, r2
 80171fc:	930b      	str	r3, [sp, #44]	; 0x2c
 80171fe:	ed9d 0b08 	vldr	d0, [sp, #32]
 8017202:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8017206:	f001 fd61 	bl	8018ccc <__ulp>
 801720a:	4650      	mov	r0, sl
 801720c:	ec53 2b10 	vmov	r2, r3, d0
 8017210:	4659      	mov	r1, fp
 8017212:	f7e9 fa09 	bl	8000628 <__aeabi_dmul>
 8017216:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801721a:	f7e9 f84f 	bl	80002bc <__adddf3>
 801721e:	4682      	mov	sl, r0
 8017220:	468b      	mov	fp, r1
 8017222:	e772      	b.n	801710a <_strtod_l+0xa8a>
 8017224:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8017228:	e7df      	b.n	80171ea <_strtod_l+0xb6a>
 801722a:	a30d      	add	r3, pc, #52	; (adr r3, 8017260 <_strtod_l+0xbe0>)
 801722c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017230:	f7e9 fc6c 	bl	8000b0c <__aeabi_dcmplt>
 8017234:	e79c      	b.n	8017170 <_strtod_l+0xaf0>
 8017236:	2300      	movs	r3, #0
 8017238:	930d      	str	r3, [sp, #52]	; 0x34
 801723a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801723c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801723e:	6013      	str	r3, [r2, #0]
 8017240:	f7ff ba61 	b.w	8016706 <_strtod_l+0x86>
 8017244:	2b65      	cmp	r3, #101	; 0x65
 8017246:	f04f 0200 	mov.w	r2, #0
 801724a:	f43f ab4e 	beq.w	80168ea <_strtod_l+0x26a>
 801724e:	2101      	movs	r1, #1
 8017250:	4614      	mov	r4, r2
 8017252:	9104      	str	r1, [sp, #16]
 8017254:	f7ff bacb 	b.w	80167ee <_strtod_l+0x16e>
 8017258:	ffc00000 	.word	0xffc00000
 801725c:	41dfffff 	.word	0x41dfffff
 8017260:	94a03595 	.word	0x94a03595
 8017264:	3fcfffff 	.word	0x3fcfffff

08017268 <_strtod_r>:
 8017268:	4b05      	ldr	r3, [pc, #20]	; (8017280 <_strtod_r+0x18>)
 801726a:	681b      	ldr	r3, [r3, #0]
 801726c:	b410      	push	{r4}
 801726e:	6a1b      	ldr	r3, [r3, #32]
 8017270:	4c04      	ldr	r4, [pc, #16]	; (8017284 <_strtod_r+0x1c>)
 8017272:	2b00      	cmp	r3, #0
 8017274:	bf08      	it	eq
 8017276:	4623      	moveq	r3, r4
 8017278:	f85d 4b04 	ldr.w	r4, [sp], #4
 801727c:	f7ff ba00 	b.w	8016680 <_strtod_l>
 8017280:	2000000c 	.word	0x2000000c
 8017284:	20000070 	.word	0x20000070

08017288 <_strtol_l.isra.0>:
 8017288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801728c:	4680      	mov	r8, r0
 801728e:	4689      	mov	r9, r1
 8017290:	4692      	mov	sl, r2
 8017292:	461e      	mov	r6, r3
 8017294:	460f      	mov	r7, r1
 8017296:	463d      	mov	r5, r7
 8017298:	9808      	ldr	r0, [sp, #32]
 801729a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801729e:	f001 fa0d 	bl	80186bc <__locale_ctype_ptr_l>
 80172a2:	4420      	add	r0, r4
 80172a4:	7843      	ldrb	r3, [r0, #1]
 80172a6:	f013 0308 	ands.w	r3, r3, #8
 80172aa:	d132      	bne.n	8017312 <_strtol_l.isra.0+0x8a>
 80172ac:	2c2d      	cmp	r4, #45	; 0x2d
 80172ae:	d132      	bne.n	8017316 <_strtol_l.isra.0+0x8e>
 80172b0:	787c      	ldrb	r4, [r7, #1]
 80172b2:	1cbd      	adds	r5, r7, #2
 80172b4:	2201      	movs	r2, #1
 80172b6:	2e00      	cmp	r6, #0
 80172b8:	d05d      	beq.n	8017376 <_strtol_l.isra.0+0xee>
 80172ba:	2e10      	cmp	r6, #16
 80172bc:	d109      	bne.n	80172d2 <_strtol_l.isra.0+0x4a>
 80172be:	2c30      	cmp	r4, #48	; 0x30
 80172c0:	d107      	bne.n	80172d2 <_strtol_l.isra.0+0x4a>
 80172c2:	782b      	ldrb	r3, [r5, #0]
 80172c4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80172c8:	2b58      	cmp	r3, #88	; 0x58
 80172ca:	d14f      	bne.n	801736c <_strtol_l.isra.0+0xe4>
 80172cc:	786c      	ldrb	r4, [r5, #1]
 80172ce:	2610      	movs	r6, #16
 80172d0:	3502      	adds	r5, #2
 80172d2:	2a00      	cmp	r2, #0
 80172d4:	bf14      	ite	ne
 80172d6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80172da:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80172de:	2700      	movs	r7, #0
 80172e0:	fbb1 fcf6 	udiv	ip, r1, r6
 80172e4:	4638      	mov	r0, r7
 80172e6:	fb06 1e1c 	mls	lr, r6, ip, r1
 80172ea:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80172ee:	2b09      	cmp	r3, #9
 80172f0:	d817      	bhi.n	8017322 <_strtol_l.isra.0+0x9a>
 80172f2:	461c      	mov	r4, r3
 80172f4:	42a6      	cmp	r6, r4
 80172f6:	dd23      	ble.n	8017340 <_strtol_l.isra.0+0xb8>
 80172f8:	1c7b      	adds	r3, r7, #1
 80172fa:	d007      	beq.n	801730c <_strtol_l.isra.0+0x84>
 80172fc:	4584      	cmp	ip, r0
 80172fe:	d31c      	bcc.n	801733a <_strtol_l.isra.0+0xb2>
 8017300:	d101      	bne.n	8017306 <_strtol_l.isra.0+0x7e>
 8017302:	45a6      	cmp	lr, r4
 8017304:	db19      	blt.n	801733a <_strtol_l.isra.0+0xb2>
 8017306:	fb00 4006 	mla	r0, r0, r6, r4
 801730a:	2701      	movs	r7, #1
 801730c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017310:	e7eb      	b.n	80172ea <_strtol_l.isra.0+0x62>
 8017312:	462f      	mov	r7, r5
 8017314:	e7bf      	b.n	8017296 <_strtol_l.isra.0+0xe>
 8017316:	2c2b      	cmp	r4, #43	; 0x2b
 8017318:	bf04      	itt	eq
 801731a:	1cbd      	addeq	r5, r7, #2
 801731c:	787c      	ldrbeq	r4, [r7, #1]
 801731e:	461a      	mov	r2, r3
 8017320:	e7c9      	b.n	80172b6 <_strtol_l.isra.0+0x2e>
 8017322:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8017326:	2b19      	cmp	r3, #25
 8017328:	d801      	bhi.n	801732e <_strtol_l.isra.0+0xa6>
 801732a:	3c37      	subs	r4, #55	; 0x37
 801732c:	e7e2      	b.n	80172f4 <_strtol_l.isra.0+0x6c>
 801732e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8017332:	2b19      	cmp	r3, #25
 8017334:	d804      	bhi.n	8017340 <_strtol_l.isra.0+0xb8>
 8017336:	3c57      	subs	r4, #87	; 0x57
 8017338:	e7dc      	b.n	80172f4 <_strtol_l.isra.0+0x6c>
 801733a:	f04f 37ff 	mov.w	r7, #4294967295
 801733e:	e7e5      	b.n	801730c <_strtol_l.isra.0+0x84>
 8017340:	1c7b      	adds	r3, r7, #1
 8017342:	d108      	bne.n	8017356 <_strtol_l.isra.0+0xce>
 8017344:	2322      	movs	r3, #34	; 0x22
 8017346:	f8c8 3000 	str.w	r3, [r8]
 801734a:	4608      	mov	r0, r1
 801734c:	f1ba 0f00 	cmp.w	sl, #0
 8017350:	d107      	bne.n	8017362 <_strtol_l.isra.0+0xda>
 8017352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017356:	b102      	cbz	r2, 801735a <_strtol_l.isra.0+0xd2>
 8017358:	4240      	negs	r0, r0
 801735a:	f1ba 0f00 	cmp.w	sl, #0
 801735e:	d0f8      	beq.n	8017352 <_strtol_l.isra.0+0xca>
 8017360:	b10f      	cbz	r7, 8017366 <_strtol_l.isra.0+0xde>
 8017362:	f105 39ff 	add.w	r9, r5, #4294967295
 8017366:	f8ca 9000 	str.w	r9, [sl]
 801736a:	e7f2      	b.n	8017352 <_strtol_l.isra.0+0xca>
 801736c:	2430      	movs	r4, #48	; 0x30
 801736e:	2e00      	cmp	r6, #0
 8017370:	d1af      	bne.n	80172d2 <_strtol_l.isra.0+0x4a>
 8017372:	2608      	movs	r6, #8
 8017374:	e7ad      	b.n	80172d2 <_strtol_l.isra.0+0x4a>
 8017376:	2c30      	cmp	r4, #48	; 0x30
 8017378:	d0a3      	beq.n	80172c2 <_strtol_l.isra.0+0x3a>
 801737a:	260a      	movs	r6, #10
 801737c:	e7a9      	b.n	80172d2 <_strtol_l.isra.0+0x4a>
	...

08017380 <_strtol_r>:
 8017380:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017382:	4c06      	ldr	r4, [pc, #24]	; (801739c <_strtol_r+0x1c>)
 8017384:	4d06      	ldr	r5, [pc, #24]	; (80173a0 <_strtol_r+0x20>)
 8017386:	6824      	ldr	r4, [r4, #0]
 8017388:	6a24      	ldr	r4, [r4, #32]
 801738a:	2c00      	cmp	r4, #0
 801738c:	bf08      	it	eq
 801738e:	462c      	moveq	r4, r5
 8017390:	9400      	str	r4, [sp, #0]
 8017392:	f7ff ff79 	bl	8017288 <_strtol_l.isra.0>
 8017396:	b003      	add	sp, #12
 8017398:	bd30      	pop	{r4, r5, pc}
 801739a:	bf00      	nop
 801739c:	2000000c 	.word	0x2000000c
 80173a0:	20000070 	.word	0x20000070

080173a4 <_vsiprintf_r>:
 80173a4:	b500      	push	{lr}
 80173a6:	b09b      	sub	sp, #108	; 0x6c
 80173a8:	9100      	str	r1, [sp, #0]
 80173aa:	9104      	str	r1, [sp, #16]
 80173ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80173b0:	9105      	str	r1, [sp, #20]
 80173b2:	9102      	str	r1, [sp, #8]
 80173b4:	4905      	ldr	r1, [pc, #20]	; (80173cc <_vsiprintf_r+0x28>)
 80173b6:	9103      	str	r1, [sp, #12]
 80173b8:	4669      	mov	r1, sp
 80173ba:	f001 fecb 	bl	8019154 <_svfiprintf_r>
 80173be:	9b00      	ldr	r3, [sp, #0]
 80173c0:	2200      	movs	r2, #0
 80173c2:	701a      	strb	r2, [r3, #0]
 80173c4:	b01b      	add	sp, #108	; 0x6c
 80173c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80173ca:	bf00      	nop
 80173cc:	ffff0208 	.word	0xffff0208

080173d0 <vsiprintf>:
 80173d0:	4613      	mov	r3, r2
 80173d2:	460a      	mov	r2, r1
 80173d4:	4601      	mov	r1, r0
 80173d6:	4802      	ldr	r0, [pc, #8]	; (80173e0 <vsiprintf+0x10>)
 80173d8:	6800      	ldr	r0, [r0, #0]
 80173da:	f7ff bfe3 	b.w	80173a4 <_vsiprintf_r>
 80173de:	bf00      	nop
 80173e0:	2000000c 	.word	0x2000000c

080173e4 <quorem>:
 80173e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80173e8:	6903      	ldr	r3, [r0, #16]
 80173ea:	690c      	ldr	r4, [r1, #16]
 80173ec:	42a3      	cmp	r3, r4
 80173ee:	4680      	mov	r8, r0
 80173f0:	f2c0 8082 	blt.w	80174f8 <quorem+0x114>
 80173f4:	3c01      	subs	r4, #1
 80173f6:	f101 0714 	add.w	r7, r1, #20
 80173fa:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80173fe:	f100 0614 	add.w	r6, r0, #20
 8017402:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8017406:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801740a:	eb06 030c 	add.w	r3, r6, ip
 801740e:	3501      	adds	r5, #1
 8017410:	eb07 090c 	add.w	r9, r7, ip
 8017414:	9301      	str	r3, [sp, #4]
 8017416:	fbb0 f5f5 	udiv	r5, r0, r5
 801741a:	b395      	cbz	r5, 8017482 <quorem+0x9e>
 801741c:	f04f 0a00 	mov.w	sl, #0
 8017420:	4638      	mov	r0, r7
 8017422:	46b6      	mov	lr, r6
 8017424:	46d3      	mov	fp, sl
 8017426:	f850 2b04 	ldr.w	r2, [r0], #4
 801742a:	b293      	uxth	r3, r2
 801742c:	fb05 a303 	mla	r3, r5, r3, sl
 8017430:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8017434:	b29b      	uxth	r3, r3
 8017436:	ebab 0303 	sub.w	r3, fp, r3
 801743a:	0c12      	lsrs	r2, r2, #16
 801743c:	f8de b000 	ldr.w	fp, [lr]
 8017440:	fb05 a202 	mla	r2, r5, r2, sl
 8017444:	fa13 f38b 	uxtah	r3, r3, fp
 8017448:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 801744c:	fa1f fb82 	uxth.w	fp, r2
 8017450:	f8de 2000 	ldr.w	r2, [lr]
 8017454:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8017458:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801745c:	b29b      	uxth	r3, r3
 801745e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017462:	4581      	cmp	r9, r0
 8017464:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8017468:	f84e 3b04 	str.w	r3, [lr], #4
 801746c:	d2db      	bcs.n	8017426 <quorem+0x42>
 801746e:	f856 300c 	ldr.w	r3, [r6, ip]
 8017472:	b933      	cbnz	r3, 8017482 <quorem+0x9e>
 8017474:	9b01      	ldr	r3, [sp, #4]
 8017476:	3b04      	subs	r3, #4
 8017478:	429e      	cmp	r6, r3
 801747a:	461a      	mov	r2, r3
 801747c:	d330      	bcc.n	80174e0 <quorem+0xfc>
 801747e:	f8c8 4010 	str.w	r4, [r8, #16]
 8017482:	4640      	mov	r0, r8
 8017484:	f001 fbaa 	bl	8018bdc <__mcmp>
 8017488:	2800      	cmp	r0, #0
 801748a:	db25      	blt.n	80174d8 <quorem+0xf4>
 801748c:	3501      	adds	r5, #1
 801748e:	4630      	mov	r0, r6
 8017490:	f04f 0c00 	mov.w	ip, #0
 8017494:	f857 2b04 	ldr.w	r2, [r7], #4
 8017498:	f8d0 e000 	ldr.w	lr, [r0]
 801749c:	b293      	uxth	r3, r2
 801749e:	ebac 0303 	sub.w	r3, ip, r3
 80174a2:	0c12      	lsrs	r2, r2, #16
 80174a4:	fa13 f38e 	uxtah	r3, r3, lr
 80174a8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80174ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80174b0:	b29b      	uxth	r3, r3
 80174b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80174b6:	45b9      	cmp	r9, r7
 80174b8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80174bc:	f840 3b04 	str.w	r3, [r0], #4
 80174c0:	d2e8      	bcs.n	8017494 <quorem+0xb0>
 80174c2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80174c6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80174ca:	b92a      	cbnz	r2, 80174d8 <quorem+0xf4>
 80174cc:	3b04      	subs	r3, #4
 80174ce:	429e      	cmp	r6, r3
 80174d0:	461a      	mov	r2, r3
 80174d2:	d30b      	bcc.n	80174ec <quorem+0x108>
 80174d4:	f8c8 4010 	str.w	r4, [r8, #16]
 80174d8:	4628      	mov	r0, r5
 80174da:	b003      	add	sp, #12
 80174dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80174e0:	6812      	ldr	r2, [r2, #0]
 80174e2:	3b04      	subs	r3, #4
 80174e4:	2a00      	cmp	r2, #0
 80174e6:	d1ca      	bne.n	801747e <quorem+0x9a>
 80174e8:	3c01      	subs	r4, #1
 80174ea:	e7c5      	b.n	8017478 <quorem+0x94>
 80174ec:	6812      	ldr	r2, [r2, #0]
 80174ee:	3b04      	subs	r3, #4
 80174f0:	2a00      	cmp	r2, #0
 80174f2:	d1ef      	bne.n	80174d4 <quorem+0xf0>
 80174f4:	3c01      	subs	r4, #1
 80174f6:	e7ea      	b.n	80174ce <quorem+0xea>
 80174f8:	2000      	movs	r0, #0
 80174fa:	e7ee      	b.n	80174da <quorem+0xf6>
 80174fc:	0000      	movs	r0, r0
	...

08017500 <_dtoa_r>:
 8017500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017504:	ec57 6b10 	vmov	r6, r7, d0
 8017508:	b097      	sub	sp, #92	; 0x5c
 801750a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801750c:	9106      	str	r1, [sp, #24]
 801750e:	4604      	mov	r4, r0
 8017510:	920b      	str	r2, [sp, #44]	; 0x2c
 8017512:	9312      	str	r3, [sp, #72]	; 0x48
 8017514:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8017518:	e9cd 6700 	strd	r6, r7, [sp]
 801751c:	b93d      	cbnz	r5, 801752e <_dtoa_r+0x2e>
 801751e:	2010      	movs	r0, #16
 8017520:	f001 f8ee 	bl	8018700 <malloc>
 8017524:	6260      	str	r0, [r4, #36]	; 0x24
 8017526:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801752a:	6005      	str	r5, [r0, #0]
 801752c:	60c5      	str	r5, [r0, #12]
 801752e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017530:	6819      	ldr	r1, [r3, #0]
 8017532:	b151      	cbz	r1, 801754a <_dtoa_r+0x4a>
 8017534:	685a      	ldr	r2, [r3, #4]
 8017536:	604a      	str	r2, [r1, #4]
 8017538:	2301      	movs	r3, #1
 801753a:	4093      	lsls	r3, r2
 801753c:	608b      	str	r3, [r1, #8]
 801753e:	4620      	mov	r0, r4
 8017540:	f001 f92c 	bl	801879c <_Bfree>
 8017544:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017546:	2200      	movs	r2, #0
 8017548:	601a      	str	r2, [r3, #0]
 801754a:	1e3b      	subs	r3, r7, #0
 801754c:	bfbb      	ittet	lt
 801754e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8017552:	9301      	strlt	r3, [sp, #4]
 8017554:	2300      	movge	r3, #0
 8017556:	2201      	movlt	r2, #1
 8017558:	bfac      	ite	ge
 801755a:	f8c8 3000 	strge.w	r3, [r8]
 801755e:	f8c8 2000 	strlt.w	r2, [r8]
 8017562:	4baf      	ldr	r3, [pc, #700]	; (8017820 <_dtoa_r+0x320>)
 8017564:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8017568:	ea33 0308 	bics.w	r3, r3, r8
 801756c:	d114      	bne.n	8017598 <_dtoa_r+0x98>
 801756e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017570:	f242 730f 	movw	r3, #9999	; 0x270f
 8017574:	6013      	str	r3, [r2, #0]
 8017576:	9b00      	ldr	r3, [sp, #0]
 8017578:	b923      	cbnz	r3, 8017584 <_dtoa_r+0x84>
 801757a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 801757e:	2800      	cmp	r0, #0
 8017580:	f000 8542 	beq.w	8018008 <_dtoa_r+0xb08>
 8017584:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017586:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8017834 <_dtoa_r+0x334>
 801758a:	2b00      	cmp	r3, #0
 801758c:	f000 8544 	beq.w	8018018 <_dtoa_r+0xb18>
 8017590:	f10b 0303 	add.w	r3, fp, #3
 8017594:	f000 bd3e 	b.w	8018014 <_dtoa_r+0xb14>
 8017598:	e9dd 6700 	ldrd	r6, r7, [sp]
 801759c:	2200      	movs	r2, #0
 801759e:	2300      	movs	r3, #0
 80175a0:	4630      	mov	r0, r6
 80175a2:	4639      	mov	r1, r7
 80175a4:	f7e9 faa8 	bl	8000af8 <__aeabi_dcmpeq>
 80175a8:	4681      	mov	r9, r0
 80175aa:	b168      	cbz	r0, 80175c8 <_dtoa_r+0xc8>
 80175ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80175ae:	2301      	movs	r3, #1
 80175b0:	6013      	str	r3, [r2, #0]
 80175b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80175b4:	2b00      	cmp	r3, #0
 80175b6:	f000 8524 	beq.w	8018002 <_dtoa_r+0xb02>
 80175ba:	4b9a      	ldr	r3, [pc, #616]	; (8017824 <_dtoa_r+0x324>)
 80175bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80175be:	f103 3bff 	add.w	fp, r3, #4294967295
 80175c2:	6013      	str	r3, [r2, #0]
 80175c4:	f000 bd28 	b.w	8018018 <_dtoa_r+0xb18>
 80175c8:	aa14      	add	r2, sp, #80	; 0x50
 80175ca:	a915      	add	r1, sp, #84	; 0x54
 80175cc:	ec47 6b10 	vmov	d0, r6, r7
 80175d0:	4620      	mov	r0, r4
 80175d2:	f001 fbf1 	bl	8018db8 <__d2b>
 80175d6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80175da:	9004      	str	r0, [sp, #16]
 80175dc:	2d00      	cmp	r5, #0
 80175de:	d07c      	beq.n	80176da <_dtoa_r+0x1da>
 80175e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80175e4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80175e8:	46b2      	mov	sl, r6
 80175ea:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80175ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80175f2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80175f6:	2200      	movs	r2, #0
 80175f8:	4b8b      	ldr	r3, [pc, #556]	; (8017828 <_dtoa_r+0x328>)
 80175fa:	4650      	mov	r0, sl
 80175fc:	4659      	mov	r1, fp
 80175fe:	f7e8 fe5b 	bl	80002b8 <__aeabi_dsub>
 8017602:	a381      	add	r3, pc, #516	; (adr r3, 8017808 <_dtoa_r+0x308>)
 8017604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017608:	f7e9 f80e 	bl	8000628 <__aeabi_dmul>
 801760c:	a380      	add	r3, pc, #512	; (adr r3, 8017810 <_dtoa_r+0x310>)
 801760e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017612:	f7e8 fe53 	bl	80002bc <__adddf3>
 8017616:	4606      	mov	r6, r0
 8017618:	4628      	mov	r0, r5
 801761a:	460f      	mov	r7, r1
 801761c:	f7e8 ff9a 	bl	8000554 <__aeabi_i2d>
 8017620:	a37d      	add	r3, pc, #500	; (adr r3, 8017818 <_dtoa_r+0x318>)
 8017622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017626:	f7e8 ffff 	bl	8000628 <__aeabi_dmul>
 801762a:	4602      	mov	r2, r0
 801762c:	460b      	mov	r3, r1
 801762e:	4630      	mov	r0, r6
 8017630:	4639      	mov	r1, r7
 8017632:	f7e8 fe43 	bl	80002bc <__adddf3>
 8017636:	4606      	mov	r6, r0
 8017638:	460f      	mov	r7, r1
 801763a:	f7e9 faa5 	bl	8000b88 <__aeabi_d2iz>
 801763e:	2200      	movs	r2, #0
 8017640:	4682      	mov	sl, r0
 8017642:	2300      	movs	r3, #0
 8017644:	4630      	mov	r0, r6
 8017646:	4639      	mov	r1, r7
 8017648:	f7e9 fa60 	bl	8000b0c <__aeabi_dcmplt>
 801764c:	b148      	cbz	r0, 8017662 <_dtoa_r+0x162>
 801764e:	4650      	mov	r0, sl
 8017650:	f7e8 ff80 	bl	8000554 <__aeabi_i2d>
 8017654:	4632      	mov	r2, r6
 8017656:	463b      	mov	r3, r7
 8017658:	f7e9 fa4e 	bl	8000af8 <__aeabi_dcmpeq>
 801765c:	b908      	cbnz	r0, 8017662 <_dtoa_r+0x162>
 801765e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017662:	f1ba 0f16 	cmp.w	sl, #22
 8017666:	d859      	bhi.n	801771c <_dtoa_r+0x21c>
 8017668:	4970      	ldr	r1, [pc, #448]	; (801782c <_dtoa_r+0x32c>)
 801766a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 801766e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017672:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017676:	f7e9 fa67 	bl	8000b48 <__aeabi_dcmpgt>
 801767a:	2800      	cmp	r0, #0
 801767c:	d050      	beq.n	8017720 <_dtoa_r+0x220>
 801767e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017682:	2300      	movs	r3, #0
 8017684:	930f      	str	r3, [sp, #60]	; 0x3c
 8017686:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017688:	1b5d      	subs	r5, r3, r5
 801768a:	f1b5 0801 	subs.w	r8, r5, #1
 801768e:	bf49      	itett	mi
 8017690:	f1c5 0301 	rsbmi	r3, r5, #1
 8017694:	2300      	movpl	r3, #0
 8017696:	9305      	strmi	r3, [sp, #20]
 8017698:	f04f 0800 	movmi.w	r8, #0
 801769c:	bf58      	it	pl
 801769e:	9305      	strpl	r3, [sp, #20]
 80176a0:	f1ba 0f00 	cmp.w	sl, #0
 80176a4:	db3e      	blt.n	8017724 <_dtoa_r+0x224>
 80176a6:	2300      	movs	r3, #0
 80176a8:	44d0      	add	r8, sl
 80176aa:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80176ae:	9307      	str	r3, [sp, #28]
 80176b0:	9b06      	ldr	r3, [sp, #24]
 80176b2:	2b09      	cmp	r3, #9
 80176b4:	f200 8090 	bhi.w	80177d8 <_dtoa_r+0x2d8>
 80176b8:	2b05      	cmp	r3, #5
 80176ba:	bfc4      	itt	gt
 80176bc:	3b04      	subgt	r3, #4
 80176be:	9306      	strgt	r3, [sp, #24]
 80176c0:	9b06      	ldr	r3, [sp, #24]
 80176c2:	f1a3 0302 	sub.w	r3, r3, #2
 80176c6:	bfcc      	ite	gt
 80176c8:	2500      	movgt	r5, #0
 80176ca:	2501      	movle	r5, #1
 80176cc:	2b03      	cmp	r3, #3
 80176ce:	f200 808f 	bhi.w	80177f0 <_dtoa_r+0x2f0>
 80176d2:	e8df f003 	tbb	[pc, r3]
 80176d6:	7f7d      	.short	0x7f7d
 80176d8:	7131      	.short	0x7131
 80176da:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80176de:	441d      	add	r5, r3
 80176e0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80176e4:	2820      	cmp	r0, #32
 80176e6:	dd13      	ble.n	8017710 <_dtoa_r+0x210>
 80176e8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80176ec:	9b00      	ldr	r3, [sp, #0]
 80176ee:	fa08 f800 	lsl.w	r8, r8, r0
 80176f2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80176f6:	fa23 f000 	lsr.w	r0, r3, r0
 80176fa:	ea48 0000 	orr.w	r0, r8, r0
 80176fe:	f7e8 ff19 	bl	8000534 <__aeabi_ui2d>
 8017702:	2301      	movs	r3, #1
 8017704:	4682      	mov	sl, r0
 8017706:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 801770a:	3d01      	subs	r5, #1
 801770c:	9313      	str	r3, [sp, #76]	; 0x4c
 801770e:	e772      	b.n	80175f6 <_dtoa_r+0xf6>
 8017710:	9b00      	ldr	r3, [sp, #0]
 8017712:	f1c0 0020 	rsb	r0, r0, #32
 8017716:	fa03 f000 	lsl.w	r0, r3, r0
 801771a:	e7f0      	b.n	80176fe <_dtoa_r+0x1fe>
 801771c:	2301      	movs	r3, #1
 801771e:	e7b1      	b.n	8017684 <_dtoa_r+0x184>
 8017720:	900f      	str	r0, [sp, #60]	; 0x3c
 8017722:	e7b0      	b.n	8017686 <_dtoa_r+0x186>
 8017724:	9b05      	ldr	r3, [sp, #20]
 8017726:	eba3 030a 	sub.w	r3, r3, sl
 801772a:	9305      	str	r3, [sp, #20]
 801772c:	f1ca 0300 	rsb	r3, sl, #0
 8017730:	9307      	str	r3, [sp, #28]
 8017732:	2300      	movs	r3, #0
 8017734:	930e      	str	r3, [sp, #56]	; 0x38
 8017736:	e7bb      	b.n	80176b0 <_dtoa_r+0x1b0>
 8017738:	2301      	movs	r3, #1
 801773a:	930a      	str	r3, [sp, #40]	; 0x28
 801773c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801773e:	2b00      	cmp	r3, #0
 8017740:	dd59      	ble.n	80177f6 <_dtoa_r+0x2f6>
 8017742:	9302      	str	r3, [sp, #8]
 8017744:	4699      	mov	r9, r3
 8017746:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8017748:	2200      	movs	r2, #0
 801774a:	6072      	str	r2, [r6, #4]
 801774c:	2204      	movs	r2, #4
 801774e:	f102 0014 	add.w	r0, r2, #20
 8017752:	4298      	cmp	r0, r3
 8017754:	6871      	ldr	r1, [r6, #4]
 8017756:	d953      	bls.n	8017800 <_dtoa_r+0x300>
 8017758:	4620      	mov	r0, r4
 801775a:	f000 ffeb 	bl	8018734 <_Balloc>
 801775e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017760:	6030      	str	r0, [r6, #0]
 8017762:	f1b9 0f0e 	cmp.w	r9, #14
 8017766:	f8d3 b000 	ldr.w	fp, [r3]
 801776a:	f200 80e6 	bhi.w	801793a <_dtoa_r+0x43a>
 801776e:	2d00      	cmp	r5, #0
 8017770:	f000 80e3 	beq.w	801793a <_dtoa_r+0x43a>
 8017774:	ed9d 7b00 	vldr	d7, [sp]
 8017778:	f1ba 0f00 	cmp.w	sl, #0
 801777c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8017780:	dd74      	ble.n	801786c <_dtoa_r+0x36c>
 8017782:	4a2a      	ldr	r2, [pc, #168]	; (801782c <_dtoa_r+0x32c>)
 8017784:	f00a 030f 	and.w	r3, sl, #15
 8017788:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801778c:	ed93 7b00 	vldr	d7, [r3]
 8017790:	ea4f 162a 	mov.w	r6, sl, asr #4
 8017794:	06f0      	lsls	r0, r6, #27
 8017796:	ed8d 7b08 	vstr	d7, [sp, #32]
 801779a:	d565      	bpl.n	8017868 <_dtoa_r+0x368>
 801779c:	4b24      	ldr	r3, [pc, #144]	; (8017830 <_dtoa_r+0x330>)
 801779e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80177a2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80177a6:	f7e9 f869 	bl	800087c <__aeabi_ddiv>
 80177aa:	e9cd 0100 	strd	r0, r1, [sp]
 80177ae:	f006 060f 	and.w	r6, r6, #15
 80177b2:	2503      	movs	r5, #3
 80177b4:	4f1e      	ldr	r7, [pc, #120]	; (8017830 <_dtoa_r+0x330>)
 80177b6:	e04c      	b.n	8017852 <_dtoa_r+0x352>
 80177b8:	2301      	movs	r3, #1
 80177ba:	930a      	str	r3, [sp, #40]	; 0x28
 80177bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80177be:	4453      	add	r3, sl
 80177c0:	f103 0901 	add.w	r9, r3, #1
 80177c4:	9302      	str	r3, [sp, #8]
 80177c6:	464b      	mov	r3, r9
 80177c8:	2b01      	cmp	r3, #1
 80177ca:	bfb8      	it	lt
 80177cc:	2301      	movlt	r3, #1
 80177ce:	e7ba      	b.n	8017746 <_dtoa_r+0x246>
 80177d0:	2300      	movs	r3, #0
 80177d2:	e7b2      	b.n	801773a <_dtoa_r+0x23a>
 80177d4:	2300      	movs	r3, #0
 80177d6:	e7f0      	b.n	80177ba <_dtoa_r+0x2ba>
 80177d8:	2501      	movs	r5, #1
 80177da:	2300      	movs	r3, #0
 80177dc:	9306      	str	r3, [sp, #24]
 80177de:	950a      	str	r5, [sp, #40]	; 0x28
 80177e0:	f04f 33ff 	mov.w	r3, #4294967295
 80177e4:	9302      	str	r3, [sp, #8]
 80177e6:	4699      	mov	r9, r3
 80177e8:	2200      	movs	r2, #0
 80177ea:	2312      	movs	r3, #18
 80177ec:	920b      	str	r2, [sp, #44]	; 0x2c
 80177ee:	e7aa      	b.n	8017746 <_dtoa_r+0x246>
 80177f0:	2301      	movs	r3, #1
 80177f2:	930a      	str	r3, [sp, #40]	; 0x28
 80177f4:	e7f4      	b.n	80177e0 <_dtoa_r+0x2e0>
 80177f6:	2301      	movs	r3, #1
 80177f8:	9302      	str	r3, [sp, #8]
 80177fa:	4699      	mov	r9, r3
 80177fc:	461a      	mov	r2, r3
 80177fe:	e7f5      	b.n	80177ec <_dtoa_r+0x2ec>
 8017800:	3101      	adds	r1, #1
 8017802:	6071      	str	r1, [r6, #4]
 8017804:	0052      	lsls	r2, r2, #1
 8017806:	e7a2      	b.n	801774e <_dtoa_r+0x24e>
 8017808:	636f4361 	.word	0x636f4361
 801780c:	3fd287a7 	.word	0x3fd287a7
 8017810:	8b60c8b3 	.word	0x8b60c8b3
 8017814:	3fc68a28 	.word	0x3fc68a28
 8017818:	509f79fb 	.word	0x509f79fb
 801781c:	3fd34413 	.word	0x3fd34413
 8017820:	7ff00000 	.word	0x7ff00000
 8017824:	0801a764 	.word	0x0801a764
 8017828:	3ff80000 	.word	0x3ff80000
 801782c:	0801a668 	.word	0x0801a668
 8017830:	0801a640 	.word	0x0801a640
 8017834:	0801a5c9 	.word	0x0801a5c9
 8017838:	07f1      	lsls	r1, r6, #31
 801783a:	d508      	bpl.n	801784e <_dtoa_r+0x34e>
 801783c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017840:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017844:	f7e8 fef0 	bl	8000628 <__aeabi_dmul>
 8017848:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801784c:	3501      	adds	r5, #1
 801784e:	1076      	asrs	r6, r6, #1
 8017850:	3708      	adds	r7, #8
 8017852:	2e00      	cmp	r6, #0
 8017854:	d1f0      	bne.n	8017838 <_dtoa_r+0x338>
 8017856:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801785a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801785e:	f7e9 f80d 	bl	800087c <__aeabi_ddiv>
 8017862:	e9cd 0100 	strd	r0, r1, [sp]
 8017866:	e01a      	b.n	801789e <_dtoa_r+0x39e>
 8017868:	2502      	movs	r5, #2
 801786a:	e7a3      	b.n	80177b4 <_dtoa_r+0x2b4>
 801786c:	f000 80a0 	beq.w	80179b0 <_dtoa_r+0x4b0>
 8017870:	f1ca 0600 	rsb	r6, sl, #0
 8017874:	4b9f      	ldr	r3, [pc, #636]	; (8017af4 <_dtoa_r+0x5f4>)
 8017876:	4fa0      	ldr	r7, [pc, #640]	; (8017af8 <_dtoa_r+0x5f8>)
 8017878:	f006 020f 	and.w	r2, r6, #15
 801787c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017884:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8017888:	f7e8 fece 	bl	8000628 <__aeabi_dmul>
 801788c:	e9cd 0100 	strd	r0, r1, [sp]
 8017890:	1136      	asrs	r6, r6, #4
 8017892:	2300      	movs	r3, #0
 8017894:	2502      	movs	r5, #2
 8017896:	2e00      	cmp	r6, #0
 8017898:	d17f      	bne.n	801799a <_dtoa_r+0x49a>
 801789a:	2b00      	cmp	r3, #0
 801789c:	d1e1      	bne.n	8017862 <_dtoa_r+0x362>
 801789e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80178a0:	2b00      	cmp	r3, #0
 80178a2:	f000 8087 	beq.w	80179b4 <_dtoa_r+0x4b4>
 80178a6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80178aa:	2200      	movs	r2, #0
 80178ac:	4b93      	ldr	r3, [pc, #588]	; (8017afc <_dtoa_r+0x5fc>)
 80178ae:	4630      	mov	r0, r6
 80178b0:	4639      	mov	r1, r7
 80178b2:	f7e9 f92b 	bl	8000b0c <__aeabi_dcmplt>
 80178b6:	2800      	cmp	r0, #0
 80178b8:	d07c      	beq.n	80179b4 <_dtoa_r+0x4b4>
 80178ba:	f1b9 0f00 	cmp.w	r9, #0
 80178be:	d079      	beq.n	80179b4 <_dtoa_r+0x4b4>
 80178c0:	9b02      	ldr	r3, [sp, #8]
 80178c2:	2b00      	cmp	r3, #0
 80178c4:	dd35      	ble.n	8017932 <_dtoa_r+0x432>
 80178c6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80178ca:	9308      	str	r3, [sp, #32]
 80178cc:	4639      	mov	r1, r7
 80178ce:	2200      	movs	r2, #0
 80178d0:	4b8b      	ldr	r3, [pc, #556]	; (8017b00 <_dtoa_r+0x600>)
 80178d2:	4630      	mov	r0, r6
 80178d4:	f7e8 fea8 	bl	8000628 <__aeabi_dmul>
 80178d8:	e9cd 0100 	strd	r0, r1, [sp]
 80178dc:	9f02      	ldr	r7, [sp, #8]
 80178de:	3501      	adds	r5, #1
 80178e0:	4628      	mov	r0, r5
 80178e2:	f7e8 fe37 	bl	8000554 <__aeabi_i2d>
 80178e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80178ea:	f7e8 fe9d 	bl	8000628 <__aeabi_dmul>
 80178ee:	2200      	movs	r2, #0
 80178f0:	4b84      	ldr	r3, [pc, #528]	; (8017b04 <_dtoa_r+0x604>)
 80178f2:	f7e8 fce3 	bl	80002bc <__adddf3>
 80178f6:	4605      	mov	r5, r0
 80178f8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80178fc:	2f00      	cmp	r7, #0
 80178fe:	d15d      	bne.n	80179bc <_dtoa_r+0x4bc>
 8017900:	2200      	movs	r2, #0
 8017902:	4b81      	ldr	r3, [pc, #516]	; (8017b08 <_dtoa_r+0x608>)
 8017904:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017908:	f7e8 fcd6 	bl	80002b8 <__aeabi_dsub>
 801790c:	462a      	mov	r2, r5
 801790e:	4633      	mov	r3, r6
 8017910:	e9cd 0100 	strd	r0, r1, [sp]
 8017914:	f7e9 f918 	bl	8000b48 <__aeabi_dcmpgt>
 8017918:	2800      	cmp	r0, #0
 801791a:	f040 8288 	bne.w	8017e2e <_dtoa_r+0x92e>
 801791e:	462a      	mov	r2, r5
 8017920:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8017924:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017928:	f7e9 f8f0 	bl	8000b0c <__aeabi_dcmplt>
 801792c:	2800      	cmp	r0, #0
 801792e:	f040 827c 	bne.w	8017e2a <_dtoa_r+0x92a>
 8017932:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8017936:	e9cd 2300 	strd	r2, r3, [sp]
 801793a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801793c:	2b00      	cmp	r3, #0
 801793e:	f2c0 8150 	blt.w	8017be2 <_dtoa_r+0x6e2>
 8017942:	f1ba 0f0e 	cmp.w	sl, #14
 8017946:	f300 814c 	bgt.w	8017be2 <_dtoa_r+0x6e2>
 801794a:	4b6a      	ldr	r3, [pc, #424]	; (8017af4 <_dtoa_r+0x5f4>)
 801794c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8017950:	ed93 7b00 	vldr	d7, [r3]
 8017954:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017956:	2b00      	cmp	r3, #0
 8017958:	ed8d 7b02 	vstr	d7, [sp, #8]
 801795c:	f280 80d8 	bge.w	8017b10 <_dtoa_r+0x610>
 8017960:	f1b9 0f00 	cmp.w	r9, #0
 8017964:	f300 80d4 	bgt.w	8017b10 <_dtoa_r+0x610>
 8017968:	f040 825e 	bne.w	8017e28 <_dtoa_r+0x928>
 801796c:	2200      	movs	r2, #0
 801796e:	4b66      	ldr	r3, [pc, #408]	; (8017b08 <_dtoa_r+0x608>)
 8017970:	ec51 0b17 	vmov	r0, r1, d7
 8017974:	f7e8 fe58 	bl	8000628 <__aeabi_dmul>
 8017978:	e9dd 2300 	ldrd	r2, r3, [sp]
 801797c:	f7e9 f8da 	bl	8000b34 <__aeabi_dcmpge>
 8017980:	464f      	mov	r7, r9
 8017982:	464e      	mov	r6, r9
 8017984:	2800      	cmp	r0, #0
 8017986:	f040 8234 	bne.w	8017df2 <_dtoa_r+0x8f2>
 801798a:	2331      	movs	r3, #49	; 0x31
 801798c:	f10b 0501 	add.w	r5, fp, #1
 8017990:	f88b 3000 	strb.w	r3, [fp]
 8017994:	f10a 0a01 	add.w	sl, sl, #1
 8017998:	e22f      	b.n	8017dfa <_dtoa_r+0x8fa>
 801799a:	07f2      	lsls	r2, r6, #31
 801799c:	d505      	bpl.n	80179aa <_dtoa_r+0x4aa>
 801799e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80179a2:	f7e8 fe41 	bl	8000628 <__aeabi_dmul>
 80179a6:	3501      	adds	r5, #1
 80179a8:	2301      	movs	r3, #1
 80179aa:	1076      	asrs	r6, r6, #1
 80179ac:	3708      	adds	r7, #8
 80179ae:	e772      	b.n	8017896 <_dtoa_r+0x396>
 80179b0:	2502      	movs	r5, #2
 80179b2:	e774      	b.n	801789e <_dtoa_r+0x39e>
 80179b4:	f8cd a020 	str.w	sl, [sp, #32]
 80179b8:	464f      	mov	r7, r9
 80179ba:	e791      	b.n	80178e0 <_dtoa_r+0x3e0>
 80179bc:	4b4d      	ldr	r3, [pc, #308]	; (8017af4 <_dtoa_r+0x5f4>)
 80179be:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80179c2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80179c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80179c8:	2b00      	cmp	r3, #0
 80179ca:	d047      	beq.n	8017a5c <_dtoa_r+0x55c>
 80179cc:	4602      	mov	r2, r0
 80179ce:	460b      	mov	r3, r1
 80179d0:	2000      	movs	r0, #0
 80179d2:	494e      	ldr	r1, [pc, #312]	; (8017b0c <_dtoa_r+0x60c>)
 80179d4:	f7e8 ff52 	bl	800087c <__aeabi_ddiv>
 80179d8:	462a      	mov	r2, r5
 80179da:	4633      	mov	r3, r6
 80179dc:	f7e8 fc6c 	bl	80002b8 <__aeabi_dsub>
 80179e0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80179e4:	465d      	mov	r5, fp
 80179e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80179ea:	f7e9 f8cd 	bl	8000b88 <__aeabi_d2iz>
 80179ee:	4606      	mov	r6, r0
 80179f0:	f7e8 fdb0 	bl	8000554 <__aeabi_i2d>
 80179f4:	4602      	mov	r2, r0
 80179f6:	460b      	mov	r3, r1
 80179f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80179fc:	f7e8 fc5c 	bl	80002b8 <__aeabi_dsub>
 8017a00:	3630      	adds	r6, #48	; 0x30
 8017a02:	f805 6b01 	strb.w	r6, [r5], #1
 8017a06:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017a0a:	e9cd 0100 	strd	r0, r1, [sp]
 8017a0e:	f7e9 f87d 	bl	8000b0c <__aeabi_dcmplt>
 8017a12:	2800      	cmp	r0, #0
 8017a14:	d163      	bne.n	8017ade <_dtoa_r+0x5de>
 8017a16:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017a1a:	2000      	movs	r0, #0
 8017a1c:	4937      	ldr	r1, [pc, #220]	; (8017afc <_dtoa_r+0x5fc>)
 8017a1e:	f7e8 fc4b 	bl	80002b8 <__aeabi_dsub>
 8017a22:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017a26:	f7e9 f871 	bl	8000b0c <__aeabi_dcmplt>
 8017a2a:	2800      	cmp	r0, #0
 8017a2c:	f040 80b7 	bne.w	8017b9e <_dtoa_r+0x69e>
 8017a30:	eba5 030b 	sub.w	r3, r5, fp
 8017a34:	429f      	cmp	r7, r3
 8017a36:	f77f af7c 	ble.w	8017932 <_dtoa_r+0x432>
 8017a3a:	2200      	movs	r2, #0
 8017a3c:	4b30      	ldr	r3, [pc, #192]	; (8017b00 <_dtoa_r+0x600>)
 8017a3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017a42:	f7e8 fdf1 	bl	8000628 <__aeabi_dmul>
 8017a46:	2200      	movs	r2, #0
 8017a48:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017a4c:	4b2c      	ldr	r3, [pc, #176]	; (8017b00 <_dtoa_r+0x600>)
 8017a4e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017a52:	f7e8 fde9 	bl	8000628 <__aeabi_dmul>
 8017a56:	e9cd 0100 	strd	r0, r1, [sp]
 8017a5a:	e7c4      	b.n	80179e6 <_dtoa_r+0x4e6>
 8017a5c:	462a      	mov	r2, r5
 8017a5e:	4633      	mov	r3, r6
 8017a60:	f7e8 fde2 	bl	8000628 <__aeabi_dmul>
 8017a64:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017a68:	eb0b 0507 	add.w	r5, fp, r7
 8017a6c:	465e      	mov	r6, fp
 8017a6e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017a72:	f7e9 f889 	bl	8000b88 <__aeabi_d2iz>
 8017a76:	4607      	mov	r7, r0
 8017a78:	f7e8 fd6c 	bl	8000554 <__aeabi_i2d>
 8017a7c:	3730      	adds	r7, #48	; 0x30
 8017a7e:	4602      	mov	r2, r0
 8017a80:	460b      	mov	r3, r1
 8017a82:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017a86:	f7e8 fc17 	bl	80002b8 <__aeabi_dsub>
 8017a8a:	f806 7b01 	strb.w	r7, [r6], #1
 8017a8e:	42ae      	cmp	r6, r5
 8017a90:	e9cd 0100 	strd	r0, r1, [sp]
 8017a94:	f04f 0200 	mov.w	r2, #0
 8017a98:	d126      	bne.n	8017ae8 <_dtoa_r+0x5e8>
 8017a9a:	4b1c      	ldr	r3, [pc, #112]	; (8017b0c <_dtoa_r+0x60c>)
 8017a9c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017aa0:	f7e8 fc0c 	bl	80002bc <__adddf3>
 8017aa4:	4602      	mov	r2, r0
 8017aa6:	460b      	mov	r3, r1
 8017aa8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017aac:	f7e9 f84c 	bl	8000b48 <__aeabi_dcmpgt>
 8017ab0:	2800      	cmp	r0, #0
 8017ab2:	d174      	bne.n	8017b9e <_dtoa_r+0x69e>
 8017ab4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017ab8:	2000      	movs	r0, #0
 8017aba:	4914      	ldr	r1, [pc, #80]	; (8017b0c <_dtoa_r+0x60c>)
 8017abc:	f7e8 fbfc 	bl	80002b8 <__aeabi_dsub>
 8017ac0:	4602      	mov	r2, r0
 8017ac2:	460b      	mov	r3, r1
 8017ac4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017ac8:	f7e9 f820 	bl	8000b0c <__aeabi_dcmplt>
 8017acc:	2800      	cmp	r0, #0
 8017ace:	f43f af30 	beq.w	8017932 <_dtoa_r+0x432>
 8017ad2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017ad6:	2b30      	cmp	r3, #48	; 0x30
 8017ad8:	f105 32ff 	add.w	r2, r5, #4294967295
 8017adc:	d002      	beq.n	8017ae4 <_dtoa_r+0x5e4>
 8017ade:	f8dd a020 	ldr.w	sl, [sp, #32]
 8017ae2:	e04a      	b.n	8017b7a <_dtoa_r+0x67a>
 8017ae4:	4615      	mov	r5, r2
 8017ae6:	e7f4      	b.n	8017ad2 <_dtoa_r+0x5d2>
 8017ae8:	4b05      	ldr	r3, [pc, #20]	; (8017b00 <_dtoa_r+0x600>)
 8017aea:	f7e8 fd9d 	bl	8000628 <__aeabi_dmul>
 8017aee:	e9cd 0100 	strd	r0, r1, [sp]
 8017af2:	e7bc      	b.n	8017a6e <_dtoa_r+0x56e>
 8017af4:	0801a668 	.word	0x0801a668
 8017af8:	0801a640 	.word	0x0801a640
 8017afc:	3ff00000 	.word	0x3ff00000
 8017b00:	40240000 	.word	0x40240000
 8017b04:	401c0000 	.word	0x401c0000
 8017b08:	40140000 	.word	0x40140000
 8017b0c:	3fe00000 	.word	0x3fe00000
 8017b10:	e9dd 6700 	ldrd	r6, r7, [sp]
 8017b14:	465d      	mov	r5, fp
 8017b16:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017b1a:	4630      	mov	r0, r6
 8017b1c:	4639      	mov	r1, r7
 8017b1e:	f7e8 fead 	bl	800087c <__aeabi_ddiv>
 8017b22:	f7e9 f831 	bl	8000b88 <__aeabi_d2iz>
 8017b26:	4680      	mov	r8, r0
 8017b28:	f7e8 fd14 	bl	8000554 <__aeabi_i2d>
 8017b2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017b30:	f7e8 fd7a 	bl	8000628 <__aeabi_dmul>
 8017b34:	4602      	mov	r2, r0
 8017b36:	460b      	mov	r3, r1
 8017b38:	4630      	mov	r0, r6
 8017b3a:	4639      	mov	r1, r7
 8017b3c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8017b40:	f7e8 fbba 	bl	80002b8 <__aeabi_dsub>
 8017b44:	f805 6b01 	strb.w	r6, [r5], #1
 8017b48:	eba5 060b 	sub.w	r6, r5, fp
 8017b4c:	45b1      	cmp	r9, r6
 8017b4e:	4602      	mov	r2, r0
 8017b50:	460b      	mov	r3, r1
 8017b52:	d139      	bne.n	8017bc8 <_dtoa_r+0x6c8>
 8017b54:	f7e8 fbb2 	bl	80002bc <__adddf3>
 8017b58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017b5c:	4606      	mov	r6, r0
 8017b5e:	460f      	mov	r7, r1
 8017b60:	f7e8 fff2 	bl	8000b48 <__aeabi_dcmpgt>
 8017b64:	b9c8      	cbnz	r0, 8017b9a <_dtoa_r+0x69a>
 8017b66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017b6a:	4630      	mov	r0, r6
 8017b6c:	4639      	mov	r1, r7
 8017b6e:	f7e8 ffc3 	bl	8000af8 <__aeabi_dcmpeq>
 8017b72:	b110      	cbz	r0, 8017b7a <_dtoa_r+0x67a>
 8017b74:	f018 0f01 	tst.w	r8, #1
 8017b78:	d10f      	bne.n	8017b9a <_dtoa_r+0x69a>
 8017b7a:	9904      	ldr	r1, [sp, #16]
 8017b7c:	4620      	mov	r0, r4
 8017b7e:	f000 fe0d 	bl	801879c <_Bfree>
 8017b82:	2300      	movs	r3, #0
 8017b84:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017b86:	702b      	strb	r3, [r5, #0]
 8017b88:	f10a 0301 	add.w	r3, sl, #1
 8017b8c:	6013      	str	r3, [r2, #0]
 8017b8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017b90:	2b00      	cmp	r3, #0
 8017b92:	f000 8241 	beq.w	8018018 <_dtoa_r+0xb18>
 8017b96:	601d      	str	r5, [r3, #0]
 8017b98:	e23e      	b.n	8018018 <_dtoa_r+0xb18>
 8017b9a:	f8cd a020 	str.w	sl, [sp, #32]
 8017b9e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8017ba2:	2a39      	cmp	r2, #57	; 0x39
 8017ba4:	f105 33ff 	add.w	r3, r5, #4294967295
 8017ba8:	d108      	bne.n	8017bbc <_dtoa_r+0x6bc>
 8017baa:	459b      	cmp	fp, r3
 8017bac:	d10a      	bne.n	8017bc4 <_dtoa_r+0x6c4>
 8017bae:	9b08      	ldr	r3, [sp, #32]
 8017bb0:	3301      	adds	r3, #1
 8017bb2:	9308      	str	r3, [sp, #32]
 8017bb4:	2330      	movs	r3, #48	; 0x30
 8017bb6:	f88b 3000 	strb.w	r3, [fp]
 8017bba:	465b      	mov	r3, fp
 8017bbc:	781a      	ldrb	r2, [r3, #0]
 8017bbe:	3201      	adds	r2, #1
 8017bc0:	701a      	strb	r2, [r3, #0]
 8017bc2:	e78c      	b.n	8017ade <_dtoa_r+0x5de>
 8017bc4:	461d      	mov	r5, r3
 8017bc6:	e7ea      	b.n	8017b9e <_dtoa_r+0x69e>
 8017bc8:	2200      	movs	r2, #0
 8017bca:	4b9b      	ldr	r3, [pc, #620]	; (8017e38 <_dtoa_r+0x938>)
 8017bcc:	f7e8 fd2c 	bl	8000628 <__aeabi_dmul>
 8017bd0:	2200      	movs	r2, #0
 8017bd2:	2300      	movs	r3, #0
 8017bd4:	4606      	mov	r6, r0
 8017bd6:	460f      	mov	r7, r1
 8017bd8:	f7e8 ff8e 	bl	8000af8 <__aeabi_dcmpeq>
 8017bdc:	2800      	cmp	r0, #0
 8017bde:	d09a      	beq.n	8017b16 <_dtoa_r+0x616>
 8017be0:	e7cb      	b.n	8017b7a <_dtoa_r+0x67a>
 8017be2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017be4:	2a00      	cmp	r2, #0
 8017be6:	f000 808b 	beq.w	8017d00 <_dtoa_r+0x800>
 8017bea:	9a06      	ldr	r2, [sp, #24]
 8017bec:	2a01      	cmp	r2, #1
 8017bee:	dc6e      	bgt.n	8017cce <_dtoa_r+0x7ce>
 8017bf0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017bf2:	2a00      	cmp	r2, #0
 8017bf4:	d067      	beq.n	8017cc6 <_dtoa_r+0x7c6>
 8017bf6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8017bfa:	9f07      	ldr	r7, [sp, #28]
 8017bfc:	9d05      	ldr	r5, [sp, #20]
 8017bfe:	9a05      	ldr	r2, [sp, #20]
 8017c00:	2101      	movs	r1, #1
 8017c02:	441a      	add	r2, r3
 8017c04:	4620      	mov	r0, r4
 8017c06:	9205      	str	r2, [sp, #20]
 8017c08:	4498      	add	r8, r3
 8017c0a:	f000 fea5 	bl	8018958 <__i2b>
 8017c0e:	4606      	mov	r6, r0
 8017c10:	2d00      	cmp	r5, #0
 8017c12:	dd0c      	ble.n	8017c2e <_dtoa_r+0x72e>
 8017c14:	f1b8 0f00 	cmp.w	r8, #0
 8017c18:	dd09      	ble.n	8017c2e <_dtoa_r+0x72e>
 8017c1a:	4545      	cmp	r5, r8
 8017c1c:	9a05      	ldr	r2, [sp, #20]
 8017c1e:	462b      	mov	r3, r5
 8017c20:	bfa8      	it	ge
 8017c22:	4643      	movge	r3, r8
 8017c24:	1ad2      	subs	r2, r2, r3
 8017c26:	9205      	str	r2, [sp, #20]
 8017c28:	1aed      	subs	r5, r5, r3
 8017c2a:	eba8 0803 	sub.w	r8, r8, r3
 8017c2e:	9b07      	ldr	r3, [sp, #28]
 8017c30:	b1eb      	cbz	r3, 8017c6e <_dtoa_r+0x76e>
 8017c32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017c34:	2b00      	cmp	r3, #0
 8017c36:	d067      	beq.n	8017d08 <_dtoa_r+0x808>
 8017c38:	b18f      	cbz	r7, 8017c5e <_dtoa_r+0x75e>
 8017c3a:	4631      	mov	r1, r6
 8017c3c:	463a      	mov	r2, r7
 8017c3e:	4620      	mov	r0, r4
 8017c40:	f000 ff2a 	bl	8018a98 <__pow5mult>
 8017c44:	9a04      	ldr	r2, [sp, #16]
 8017c46:	4601      	mov	r1, r0
 8017c48:	4606      	mov	r6, r0
 8017c4a:	4620      	mov	r0, r4
 8017c4c:	f000 fe8d 	bl	801896a <__multiply>
 8017c50:	9904      	ldr	r1, [sp, #16]
 8017c52:	9008      	str	r0, [sp, #32]
 8017c54:	4620      	mov	r0, r4
 8017c56:	f000 fda1 	bl	801879c <_Bfree>
 8017c5a:	9b08      	ldr	r3, [sp, #32]
 8017c5c:	9304      	str	r3, [sp, #16]
 8017c5e:	9b07      	ldr	r3, [sp, #28]
 8017c60:	1bda      	subs	r2, r3, r7
 8017c62:	d004      	beq.n	8017c6e <_dtoa_r+0x76e>
 8017c64:	9904      	ldr	r1, [sp, #16]
 8017c66:	4620      	mov	r0, r4
 8017c68:	f000 ff16 	bl	8018a98 <__pow5mult>
 8017c6c:	9004      	str	r0, [sp, #16]
 8017c6e:	2101      	movs	r1, #1
 8017c70:	4620      	mov	r0, r4
 8017c72:	f000 fe71 	bl	8018958 <__i2b>
 8017c76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017c78:	4607      	mov	r7, r0
 8017c7a:	2b00      	cmp	r3, #0
 8017c7c:	f000 81d0 	beq.w	8018020 <_dtoa_r+0xb20>
 8017c80:	461a      	mov	r2, r3
 8017c82:	4601      	mov	r1, r0
 8017c84:	4620      	mov	r0, r4
 8017c86:	f000 ff07 	bl	8018a98 <__pow5mult>
 8017c8a:	9b06      	ldr	r3, [sp, #24]
 8017c8c:	2b01      	cmp	r3, #1
 8017c8e:	4607      	mov	r7, r0
 8017c90:	dc40      	bgt.n	8017d14 <_dtoa_r+0x814>
 8017c92:	9b00      	ldr	r3, [sp, #0]
 8017c94:	2b00      	cmp	r3, #0
 8017c96:	d139      	bne.n	8017d0c <_dtoa_r+0x80c>
 8017c98:	9b01      	ldr	r3, [sp, #4]
 8017c9a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017c9e:	2b00      	cmp	r3, #0
 8017ca0:	d136      	bne.n	8017d10 <_dtoa_r+0x810>
 8017ca2:	9b01      	ldr	r3, [sp, #4]
 8017ca4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017ca8:	0d1b      	lsrs	r3, r3, #20
 8017caa:	051b      	lsls	r3, r3, #20
 8017cac:	b12b      	cbz	r3, 8017cba <_dtoa_r+0x7ba>
 8017cae:	9b05      	ldr	r3, [sp, #20]
 8017cb0:	3301      	adds	r3, #1
 8017cb2:	9305      	str	r3, [sp, #20]
 8017cb4:	f108 0801 	add.w	r8, r8, #1
 8017cb8:	2301      	movs	r3, #1
 8017cba:	9307      	str	r3, [sp, #28]
 8017cbc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017cbe:	2b00      	cmp	r3, #0
 8017cc0:	d12a      	bne.n	8017d18 <_dtoa_r+0x818>
 8017cc2:	2001      	movs	r0, #1
 8017cc4:	e030      	b.n	8017d28 <_dtoa_r+0x828>
 8017cc6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017cc8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8017ccc:	e795      	b.n	8017bfa <_dtoa_r+0x6fa>
 8017cce:	9b07      	ldr	r3, [sp, #28]
 8017cd0:	f109 37ff 	add.w	r7, r9, #4294967295
 8017cd4:	42bb      	cmp	r3, r7
 8017cd6:	bfbf      	itttt	lt
 8017cd8:	9b07      	ldrlt	r3, [sp, #28]
 8017cda:	9707      	strlt	r7, [sp, #28]
 8017cdc:	1afa      	sublt	r2, r7, r3
 8017cde:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8017ce0:	bfbb      	ittet	lt
 8017ce2:	189b      	addlt	r3, r3, r2
 8017ce4:	930e      	strlt	r3, [sp, #56]	; 0x38
 8017ce6:	1bdf      	subge	r7, r3, r7
 8017ce8:	2700      	movlt	r7, #0
 8017cea:	f1b9 0f00 	cmp.w	r9, #0
 8017cee:	bfb5      	itete	lt
 8017cf0:	9b05      	ldrlt	r3, [sp, #20]
 8017cf2:	9d05      	ldrge	r5, [sp, #20]
 8017cf4:	eba3 0509 	sublt.w	r5, r3, r9
 8017cf8:	464b      	movge	r3, r9
 8017cfa:	bfb8      	it	lt
 8017cfc:	2300      	movlt	r3, #0
 8017cfe:	e77e      	b.n	8017bfe <_dtoa_r+0x6fe>
 8017d00:	9f07      	ldr	r7, [sp, #28]
 8017d02:	9d05      	ldr	r5, [sp, #20]
 8017d04:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8017d06:	e783      	b.n	8017c10 <_dtoa_r+0x710>
 8017d08:	9a07      	ldr	r2, [sp, #28]
 8017d0a:	e7ab      	b.n	8017c64 <_dtoa_r+0x764>
 8017d0c:	2300      	movs	r3, #0
 8017d0e:	e7d4      	b.n	8017cba <_dtoa_r+0x7ba>
 8017d10:	9b00      	ldr	r3, [sp, #0]
 8017d12:	e7d2      	b.n	8017cba <_dtoa_r+0x7ba>
 8017d14:	2300      	movs	r3, #0
 8017d16:	9307      	str	r3, [sp, #28]
 8017d18:	693b      	ldr	r3, [r7, #16]
 8017d1a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8017d1e:	6918      	ldr	r0, [r3, #16]
 8017d20:	f000 fdcc 	bl	80188bc <__hi0bits>
 8017d24:	f1c0 0020 	rsb	r0, r0, #32
 8017d28:	4440      	add	r0, r8
 8017d2a:	f010 001f 	ands.w	r0, r0, #31
 8017d2e:	d047      	beq.n	8017dc0 <_dtoa_r+0x8c0>
 8017d30:	f1c0 0320 	rsb	r3, r0, #32
 8017d34:	2b04      	cmp	r3, #4
 8017d36:	dd3b      	ble.n	8017db0 <_dtoa_r+0x8b0>
 8017d38:	9b05      	ldr	r3, [sp, #20]
 8017d3a:	f1c0 001c 	rsb	r0, r0, #28
 8017d3e:	4403      	add	r3, r0
 8017d40:	9305      	str	r3, [sp, #20]
 8017d42:	4405      	add	r5, r0
 8017d44:	4480      	add	r8, r0
 8017d46:	9b05      	ldr	r3, [sp, #20]
 8017d48:	2b00      	cmp	r3, #0
 8017d4a:	dd05      	ble.n	8017d58 <_dtoa_r+0x858>
 8017d4c:	461a      	mov	r2, r3
 8017d4e:	9904      	ldr	r1, [sp, #16]
 8017d50:	4620      	mov	r0, r4
 8017d52:	f000 feef 	bl	8018b34 <__lshift>
 8017d56:	9004      	str	r0, [sp, #16]
 8017d58:	f1b8 0f00 	cmp.w	r8, #0
 8017d5c:	dd05      	ble.n	8017d6a <_dtoa_r+0x86a>
 8017d5e:	4639      	mov	r1, r7
 8017d60:	4642      	mov	r2, r8
 8017d62:	4620      	mov	r0, r4
 8017d64:	f000 fee6 	bl	8018b34 <__lshift>
 8017d68:	4607      	mov	r7, r0
 8017d6a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017d6c:	b353      	cbz	r3, 8017dc4 <_dtoa_r+0x8c4>
 8017d6e:	4639      	mov	r1, r7
 8017d70:	9804      	ldr	r0, [sp, #16]
 8017d72:	f000 ff33 	bl	8018bdc <__mcmp>
 8017d76:	2800      	cmp	r0, #0
 8017d78:	da24      	bge.n	8017dc4 <_dtoa_r+0x8c4>
 8017d7a:	2300      	movs	r3, #0
 8017d7c:	220a      	movs	r2, #10
 8017d7e:	9904      	ldr	r1, [sp, #16]
 8017d80:	4620      	mov	r0, r4
 8017d82:	f000 fd22 	bl	80187ca <__multadd>
 8017d86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017d88:	9004      	str	r0, [sp, #16]
 8017d8a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017d8e:	2b00      	cmp	r3, #0
 8017d90:	f000 814d 	beq.w	801802e <_dtoa_r+0xb2e>
 8017d94:	2300      	movs	r3, #0
 8017d96:	4631      	mov	r1, r6
 8017d98:	220a      	movs	r2, #10
 8017d9a:	4620      	mov	r0, r4
 8017d9c:	f000 fd15 	bl	80187ca <__multadd>
 8017da0:	9b02      	ldr	r3, [sp, #8]
 8017da2:	2b00      	cmp	r3, #0
 8017da4:	4606      	mov	r6, r0
 8017da6:	dc4f      	bgt.n	8017e48 <_dtoa_r+0x948>
 8017da8:	9b06      	ldr	r3, [sp, #24]
 8017daa:	2b02      	cmp	r3, #2
 8017dac:	dd4c      	ble.n	8017e48 <_dtoa_r+0x948>
 8017dae:	e011      	b.n	8017dd4 <_dtoa_r+0x8d4>
 8017db0:	d0c9      	beq.n	8017d46 <_dtoa_r+0x846>
 8017db2:	9a05      	ldr	r2, [sp, #20]
 8017db4:	331c      	adds	r3, #28
 8017db6:	441a      	add	r2, r3
 8017db8:	9205      	str	r2, [sp, #20]
 8017dba:	441d      	add	r5, r3
 8017dbc:	4498      	add	r8, r3
 8017dbe:	e7c2      	b.n	8017d46 <_dtoa_r+0x846>
 8017dc0:	4603      	mov	r3, r0
 8017dc2:	e7f6      	b.n	8017db2 <_dtoa_r+0x8b2>
 8017dc4:	f1b9 0f00 	cmp.w	r9, #0
 8017dc8:	dc38      	bgt.n	8017e3c <_dtoa_r+0x93c>
 8017dca:	9b06      	ldr	r3, [sp, #24]
 8017dcc:	2b02      	cmp	r3, #2
 8017dce:	dd35      	ble.n	8017e3c <_dtoa_r+0x93c>
 8017dd0:	f8cd 9008 	str.w	r9, [sp, #8]
 8017dd4:	9b02      	ldr	r3, [sp, #8]
 8017dd6:	b963      	cbnz	r3, 8017df2 <_dtoa_r+0x8f2>
 8017dd8:	4639      	mov	r1, r7
 8017dda:	2205      	movs	r2, #5
 8017ddc:	4620      	mov	r0, r4
 8017dde:	f000 fcf4 	bl	80187ca <__multadd>
 8017de2:	4601      	mov	r1, r0
 8017de4:	4607      	mov	r7, r0
 8017de6:	9804      	ldr	r0, [sp, #16]
 8017de8:	f000 fef8 	bl	8018bdc <__mcmp>
 8017dec:	2800      	cmp	r0, #0
 8017dee:	f73f adcc 	bgt.w	801798a <_dtoa_r+0x48a>
 8017df2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017df4:	465d      	mov	r5, fp
 8017df6:	ea6f 0a03 	mvn.w	sl, r3
 8017dfa:	f04f 0900 	mov.w	r9, #0
 8017dfe:	4639      	mov	r1, r7
 8017e00:	4620      	mov	r0, r4
 8017e02:	f000 fccb 	bl	801879c <_Bfree>
 8017e06:	2e00      	cmp	r6, #0
 8017e08:	f43f aeb7 	beq.w	8017b7a <_dtoa_r+0x67a>
 8017e0c:	f1b9 0f00 	cmp.w	r9, #0
 8017e10:	d005      	beq.n	8017e1e <_dtoa_r+0x91e>
 8017e12:	45b1      	cmp	r9, r6
 8017e14:	d003      	beq.n	8017e1e <_dtoa_r+0x91e>
 8017e16:	4649      	mov	r1, r9
 8017e18:	4620      	mov	r0, r4
 8017e1a:	f000 fcbf 	bl	801879c <_Bfree>
 8017e1e:	4631      	mov	r1, r6
 8017e20:	4620      	mov	r0, r4
 8017e22:	f000 fcbb 	bl	801879c <_Bfree>
 8017e26:	e6a8      	b.n	8017b7a <_dtoa_r+0x67a>
 8017e28:	2700      	movs	r7, #0
 8017e2a:	463e      	mov	r6, r7
 8017e2c:	e7e1      	b.n	8017df2 <_dtoa_r+0x8f2>
 8017e2e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8017e32:	463e      	mov	r6, r7
 8017e34:	e5a9      	b.n	801798a <_dtoa_r+0x48a>
 8017e36:	bf00      	nop
 8017e38:	40240000 	.word	0x40240000
 8017e3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017e3e:	f8cd 9008 	str.w	r9, [sp, #8]
 8017e42:	2b00      	cmp	r3, #0
 8017e44:	f000 80fa 	beq.w	801803c <_dtoa_r+0xb3c>
 8017e48:	2d00      	cmp	r5, #0
 8017e4a:	dd05      	ble.n	8017e58 <_dtoa_r+0x958>
 8017e4c:	4631      	mov	r1, r6
 8017e4e:	462a      	mov	r2, r5
 8017e50:	4620      	mov	r0, r4
 8017e52:	f000 fe6f 	bl	8018b34 <__lshift>
 8017e56:	4606      	mov	r6, r0
 8017e58:	9b07      	ldr	r3, [sp, #28]
 8017e5a:	2b00      	cmp	r3, #0
 8017e5c:	d04c      	beq.n	8017ef8 <_dtoa_r+0x9f8>
 8017e5e:	6871      	ldr	r1, [r6, #4]
 8017e60:	4620      	mov	r0, r4
 8017e62:	f000 fc67 	bl	8018734 <_Balloc>
 8017e66:	6932      	ldr	r2, [r6, #16]
 8017e68:	3202      	adds	r2, #2
 8017e6a:	4605      	mov	r5, r0
 8017e6c:	0092      	lsls	r2, r2, #2
 8017e6e:	f106 010c 	add.w	r1, r6, #12
 8017e72:	300c      	adds	r0, #12
 8017e74:	f7fd fd10 	bl	8015898 <memcpy>
 8017e78:	2201      	movs	r2, #1
 8017e7a:	4629      	mov	r1, r5
 8017e7c:	4620      	mov	r0, r4
 8017e7e:	f000 fe59 	bl	8018b34 <__lshift>
 8017e82:	9b00      	ldr	r3, [sp, #0]
 8017e84:	f8cd b014 	str.w	fp, [sp, #20]
 8017e88:	f003 0301 	and.w	r3, r3, #1
 8017e8c:	46b1      	mov	r9, r6
 8017e8e:	9307      	str	r3, [sp, #28]
 8017e90:	4606      	mov	r6, r0
 8017e92:	4639      	mov	r1, r7
 8017e94:	9804      	ldr	r0, [sp, #16]
 8017e96:	f7ff faa5 	bl	80173e4 <quorem>
 8017e9a:	4649      	mov	r1, r9
 8017e9c:	4605      	mov	r5, r0
 8017e9e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8017ea2:	9804      	ldr	r0, [sp, #16]
 8017ea4:	f000 fe9a 	bl	8018bdc <__mcmp>
 8017ea8:	4632      	mov	r2, r6
 8017eaa:	9000      	str	r0, [sp, #0]
 8017eac:	4639      	mov	r1, r7
 8017eae:	4620      	mov	r0, r4
 8017eb0:	f000 feae 	bl	8018c10 <__mdiff>
 8017eb4:	68c3      	ldr	r3, [r0, #12]
 8017eb6:	4602      	mov	r2, r0
 8017eb8:	bb03      	cbnz	r3, 8017efc <_dtoa_r+0x9fc>
 8017eba:	4601      	mov	r1, r0
 8017ebc:	9008      	str	r0, [sp, #32]
 8017ebe:	9804      	ldr	r0, [sp, #16]
 8017ec0:	f000 fe8c 	bl	8018bdc <__mcmp>
 8017ec4:	9a08      	ldr	r2, [sp, #32]
 8017ec6:	4603      	mov	r3, r0
 8017ec8:	4611      	mov	r1, r2
 8017eca:	4620      	mov	r0, r4
 8017ecc:	9308      	str	r3, [sp, #32]
 8017ece:	f000 fc65 	bl	801879c <_Bfree>
 8017ed2:	9b08      	ldr	r3, [sp, #32]
 8017ed4:	b9a3      	cbnz	r3, 8017f00 <_dtoa_r+0xa00>
 8017ed6:	9a06      	ldr	r2, [sp, #24]
 8017ed8:	b992      	cbnz	r2, 8017f00 <_dtoa_r+0xa00>
 8017eda:	9a07      	ldr	r2, [sp, #28]
 8017edc:	b982      	cbnz	r2, 8017f00 <_dtoa_r+0xa00>
 8017ede:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8017ee2:	d029      	beq.n	8017f38 <_dtoa_r+0xa38>
 8017ee4:	9b00      	ldr	r3, [sp, #0]
 8017ee6:	2b00      	cmp	r3, #0
 8017ee8:	dd01      	ble.n	8017eee <_dtoa_r+0x9ee>
 8017eea:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8017eee:	9b05      	ldr	r3, [sp, #20]
 8017ef0:	1c5d      	adds	r5, r3, #1
 8017ef2:	f883 8000 	strb.w	r8, [r3]
 8017ef6:	e782      	b.n	8017dfe <_dtoa_r+0x8fe>
 8017ef8:	4630      	mov	r0, r6
 8017efa:	e7c2      	b.n	8017e82 <_dtoa_r+0x982>
 8017efc:	2301      	movs	r3, #1
 8017efe:	e7e3      	b.n	8017ec8 <_dtoa_r+0x9c8>
 8017f00:	9a00      	ldr	r2, [sp, #0]
 8017f02:	2a00      	cmp	r2, #0
 8017f04:	db04      	blt.n	8017f10 <_dtoa_r+0xa10>
 8017f06:	d125      	bne.n	8017f54 <_dtoa_r+0xa54>
 8017f08:	9a06      	ldr	r2, [sp, #24]
 8017f0a:	bb1a      	cbnz	r2, 8017f54 <_dtoa_r+0xa54>
 8017f0c:	9a07      	ldr	r2, [sp, #28]
 8017f0e:	bb0a      	cbnz	r2, 8017f54 <_dtoa_r+0xa54>
 8017f10:	2b00      	cmp	r3, #0
 8017f12:	ddec      	ble.n	8017eee <_dtoa_r+0x9ee>
 8017f14:	2201      	movs	r2, #1
 8017f16:	9904      	ldr	r1, [sp, #16]
 8017f18:	4620      	mov	r0, r4
 8017f1a:	f000 fe0b 	bl	8018b34 <__lshift>
 8017f1e:	4639      	mov	r1, r7
 8017f20:	9004      	str	r0, [sp, #16]
 8017f22:	f000 fe5b 	bl	8018bdc <__mcmp>
 8017f26:	2800      	cmp	r0, #0
 8017f28:	dc03      	bgt.n	8017f32 <_dtoa_r+0xa32>
 8017f2a:	d1e0      	bne.n	8017eee <_dtoa_r+0x9ee>
 8017f2c:	f018 0f01 	tst.w	r8, #1
 8017f30:	d0dd      	beq.n	8017eee <_dtoa_r+0x9ee>
 8017f32:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8017f36:	d1d8      	bne.n	8017eea <_dtoa_r+0x9ea>
 8017f38:	9b05      	ldr	r3, [sp, #20]
 8017f3a:	9a05      	ldr	r2, [sp, #20]
 8017f3c:	1c5d      	adds	r5, r3, #1
 8017f3e:	2339      	movs	r3, #57	; 0x39
 8017f40:	7013      	strb	r3, [r2, #0]
 8017f42:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017f46:	2b39      	cmp	r3, #57	; 0x39
 8017f48:	f105 32ff 	add.w	r2, r5, #4294967295
 8017f4c:	d04f      	beq.n	8017fee <_dtoa_r+0xaee>
 8017f4e:	3301      	adds	r3, #1
 8017f50:	7013      	strb	r3, [r2, #0]
 8017f52:	e754      	b.n	8017dfe <_dtoa_r+0x8fe>
 8017f54:	9a05      	ldr	r2, [sp, #20]
 8017f56:	2b00      	cmp	r3, #0
 8017f58:	f102 0501 	add.w	r5, r2, #1
 8017f5c:	dd06      	ble.n	8017f6c <_dtoa_r+0xa6c>
 8017f5e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8017f62:	d0e9      	beq.n	8017f38 <_dtoa_r+0xa38>
 8017f64:	f108 0801 	add.w	r8, r8, #1
 8017f68:	9b05      	ldr	r3, [sp, #20]
 8017f6a:	e7c2      	b.n	8017ef2 <_dtoa_r+0x9f2>
 8017f6c:	9a02      	ldr	r2, [sp, #8]
 8017f6e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8017f72:	eba5 030b 	sub.w	r3, r5, fp
 8017f76:	4293      	cmp	r3, r2
 8017f78:	d021      	beq.n	8017fbe <_dtoa_r+0xabe>
 8017f7a:	2300      	movs	r3, #0
 8017f7c:	220a      	movs	r2, #10
 8017f7e:	9904      	ldr	r1, [sp, #16]
 8017f80:	4620      	mov	r0, r4
 8017f82:	f000 fc22 	bl	80187ca <__multadd>
 8017f86:	45b1      	cmp	r9, r6
 8017f88:	9004      	str	r0, [sp, #16]
 8017f8a:	f04f 0300 	mov.w	r3, #0
 8017f8e:	f04f 020a 	mov.w	r2, #10
 8017f92:	4649      	mov	r1, r9
 8017f94:	4620      	mov	r0, r4
 8017f96:	d105      	bne.n	8017fa4 <_dtoa_r+0xaa4>
 8017f98:	f000 fc17 	bl	80187ca <__multadd>
 8017f9c:	4681      	mov	r9, r0
 8017f9e:	4606      	mov	r6, r0
 8017fa0:	9505      	str	r5, [sp, #20]
 8017fa2:	e776      	b.n	8017e92 <_dtoa_r+0x992>
 8017fa4:	f000 fc11 	bl	80187ca <__multadd>
 8017fa8:	4631      	mov	r1, r6
 8017faa:	4681      	mov	r9, r0
 8017fac:	2300      	movs	r3, #0
 8017fae:	220a      	movs	r2, #10
 8017fb0:	4620      	mov	r0, r4
 8017fb2:	f000 fc0a 	bl	80187ca <__multadd>
 8017fb6:	4606      	mov	r6, r0
 8017fb8:	e7f2      	b.n	8017fa0 <_dtoa_r+0xaa0>
 8017fba:	f04f 0900 	mov.w	r9, #0
 8017fbe:	2201      	movs	r2, #1
 8017fc0:	9904      	ldr	r1, [sp, #16]
 8017fc2:	4620      	mov	r0, r4
 8017fc4:	f000 fdb6 	bl	8018b34 <__lshift>
 8017fc8:	4639      	mov	r1, r7
 8017fca:	9004      	str	r0, [sp, #16]
 8017fcc:	f000 fe06 	bl	8018bdc <__mcmp>
 8017fd0:	2800      	cmp	r0, #0
 8017fd2:	dcb6      	bgt.n	8017f42 <_dtoa_r+0xa42>
 8017fd4:	d102      	bne.n	8017fdc <_dtoa_r+0xadc>
 8017fd6:	f018 0f01 	tst.w	r8, #1
 8017fda:	d1b2      	bne.n	8017f42 <_dtoa_r+0xa42>
 8017fdc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017fe0:	2b30      	cmp	r3, #48	; 0x30
 8017fe2:	f105 32ff 	add.w	r2, r5, #4294967295
 8017fe6:	f47f af0a 	bne.w	8017dfe <_dtoa_r+0x8fe>
 8017fea:	4615      	mov	r5, r2
 8017fec:	e7f6      	b.n	8017fdc <_dtoa_r+0xadc>
 8017fee:	4593      	cmp	fp, r2
 8017ff0:	d105      	bne.n	8017ffe <_dtoa_r+0xafe>
 8017ff2:	2331      	movs	r3, #49	; 0x31
 8017ff4:	f10a 0a01 	add.w	sl, sl, #1
 8017ff8:	f88b 3000 	strb.w	r3, [fp]
 8017ffc:	e6ff      	b.n	8017dfe <_dtoa_r+0x8fe>
 8017ffe:	4615      	mov	r5, r2
 8018000:	e79f      	b.n	8017f42 <_dtoa_r+0xa42>
 8018002:	f8df b064 	ldr.w	fp, [pc, #100]	; 8018068 <_dtoa_r+0xb68>
 8018006:	e007      	b.n	8018018 <_dtoa_r+0xb18>
 8018008:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801800a:	f8df b060 	ldr.w	fp, [pc, #96]	; 801806c <_dtoa_r+0xb6c>
 801800e:	b11b      	cbz	r3, 8018018 <_dtoa_r+0xb18>
 8018010:	f10b 0308 	add.w	r3, fp, #8
 8018014:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8018016:	6013      	str	r3, [r2, #0]
 8018018:	4658      	mov	r0, fp
 801801a:	b017      	add	sp, #92	; 0x5c
 801801c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018020:	9b06      	ldr	r3, [sp, #24]
 8018022:	2b01      	cmp	r3, #1
 8018024:	f77f ae35 	ble.w	8017c92 <_dtoa_r+0x792>
 8018028:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801802a:	9307      	str	r3, [sp, #28]
 801802c:	e649      	b.n	8017cc2 <_dtoa_r+0x7c2>
 801802e:	9b02      	ldr	r3, [sp, #8]
 8018030:	2b00      	cmp	r3, #0
 8018032:	dc03      	bgt.n	801803c <_dtoa_r+0xb3c>
 8018034:	9b06      	ldr	r3, [sp, #24]
 8018036:	2b02      	cmp	r3, #2
 8018038:	f73f aecc 	bgt.w	8017dd4 <_dtoa_r+0x8d4>
 801803c:	465d      	mov	r5, fp
 801803e:	4639      	mov	r1, r7
 8018040:	9804      	ldr	r0, [sp, #16]
 8018042:	f7ff f9cf 	bl	80173e4 <quorem>
 8018046:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801804a:	f805 8b01 	strb.w	r8, [r5], #1
 801804e:	9a02      	ldr	r2, [sp, #8]
 8018050:	eba5 030b 	sub.w	r3, r5, fp
 8018054:	429a      	cmp	r2, r3
 8018056:	ddb0      	ble.n	8017fba <_dtoa_r+0xaba>
 8018058:	2300      	movs	r3, #0
 801805a:	220a      	movs	r2, #10
 801805c:	9904      	ldr	r1, [sp, #16]
 801805e:	4620      	mov	r0, r4
 8018060:	f000 fbb3 	bl	80187ca <__multadd>
 8018064:	9004      	str	r0, [sp, #16]
 8018066:	e7ea      	b.n	801803e <_dtoa_r+0xb3e>
 8018068:	0801a763 	.word	0x0801a763
 801806c:	0801a5c0 	.word	0x0801a5c0

08018070 <rshift>:
 8018070:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018072:	6906      	ldr	r6, [r0, #16]
 8018074:	114b      	asrs	r3, r1, #5
 8018076:	429e      	cmp	r6, r3
 8018078:	f100 0414 	add.w	r4, r0, #20
 801807c:	dd30      	ble.n	80180e0 <rshift+0x70>
 801807e:	f011 011f 	ands.w	r1, r1, #31
 8018082:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8018086:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 801808a:	d108      	bne.n	801809e <rshift+0x2e>
 801808c:	4621      	mov	r1, r4
 801808e:	42b2      	cmp	r2, r6
 8018090:	460b      	mov	r3, r1
 8018092:	d211      	bcs.n	80180b8 <rshift+0x48>
 8018094:	f852 3b04 	ldr.w	r3, [r2], #4
 8018098:	f841 3b04 	str.w	r3, [r1], #4
 801809c:	e7f7      	b.n	801808e <rshift+0x1e>
 801809e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80180a2:	f1c1 0c20 	rsb	ip, r1, #32
 80180a6:	40cd      	lsrs	r5, r1
 80180a8:	3204      	adds	r2, #4
 80180aa:	4623      	mov	r3, r4
 80180ac:	42b2      	cmp	r2, r6
 80180ae:	4617      	mov	r7, r2
 80180b0:	d30c      	bcc.n	80180cc <rshift+0x5c>
 80180b2:	601d      	str	r5, [r3, #0]
 80180b4:	b105      	cbz	r5, 80180b8 <rshift+0x48>
 80180b6:	3304      	adds	r3, #4
 80180b8:	1b1a      	subs	r2, r3, r4
 80180ba:	42a3      	cmp	r3, r4
 80180bc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80180c0:	bf08      	it	eq
 80180c2:	2300      	moveq	r3, #0
 80180c4:	6102      	str	r2, [r0, #16]
 80180c6:	bf08      	it	eq
 80180c8:	6143      	streq	r3, [r0, #20]
 80180ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80180cc:	683f      	ldr	r7, [r7, #0]
 80180ce:	fa07 f70c 	lsl.w	r7, r7, ip
 80180d2:	433d      	orrs	r5, r7
 80180d4:	f843 5b04 	str.w	r5, [r3], #4
 80180d8:	f852 5b04 	ldr.w	r5, [r2], #4
 80180dc:	40cd      	lsrs	r5, r1
 80180de:	e7e5      	b.n	80180ac <rshift+0x3c>
 80180e0:	4623      	mov	r3, r4
 80180e2:	e7e9      	b.n	80180b8 <rshift+0x48>

080180e4 <__hexdig_fun>:
 80180e4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80180e8:	2b09      	cmp	r3, #9
 80180ea:	d802      	bhi.n	80180f2 <__hexdig_fun+0xe>
 80180ec:	3820      	subs	r0, #32
 80180ee:	b2c0      	uxtb	r0, r0
 80180f0:	4770      	bx	lr
 80180f2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80180f6:	2b05      	cmp	r3, #5
 80180f8:	d801      	bhi.n	80180fe <__hexdig_fun+0x1a>
 80180fa:	3847      	subs	r0, #71	; 0x47
 80180fc:	e7f7      	b.n	80180ee <__hexdig_fun+0xa>
 80180fe:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8018102:	2b05      	cmp	r3, #5
 8018104:	d801      	bhi.n	801810a <__hexdig_fun+0x26>
 8018106:	3827      	subs	r0, #39	; 0x27
 8018108:	e7f1      	b.n	80180ee <__hexdig_fun+0xa>
 801810a:	2000      	movs	r0, #0
 801810c:	4770      	bx	lr

0801810e <__gethex>:
 801810e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018112:	b08b      	sub	sp, #44	; 0x2c
 8018114:	468a      	mov	sl, r1
 8018116:	9002      	str	r0, [sp, #8]
 8018118:	9816      	ldr	r0, [sp, #88]	; 0x58
 801811a:	9306      	str	r3, [sp, #24]
 801811c:	4690      	mov	r8, r2
 801811e:	f000 fadf 	bl	80186e0 <__localeconv_l>
 8018122:	6803      	ldr	r3, [r0, #0]
 8018124:	9303      	str	r3, [sp, #12]
 8018126:	4618      	mov	r0, r3
 8018128:	f7e8 f86a 	bl	8000200 <strlen>
 801812c:	9b03      	ldr	r3, [sp, #12]
 801812e:	9001      	str	r0, [sp, #4]
 8018130:	4403      	add	r3, r0
 8018132:	f04f 0b00 	mov.w	fp, #0
 8018136:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801813a:	9307      	str	r3, [sp, #28]
 801813c:	f8da 3000 	ldr.w	r3, [sl]
 8018140:	3302      	adds	r3, #2
 8018142:	461f      	mov	r7, r3
 8018144:	f813 0b01 	ldrb.w	r0, [r3], #1
 8018148:	2830      	cmp	r0, #48	; 0x30
 801814a:	d06c      	beq.n	8018226 <__gethex+0x118>
 801814c:	f7ff ffca 	bl	80180e4 <__hexdig_fun>
 8018150:	4604      	mov	r4, r0
 8018152:	2800      	cmp	r0, #0
 8018154:	d16a      	bne.n	801822c <__gethex+0x11e>
 8018156:	9a01      	ldr	r2, [sp, #4]
 8018158:	9903      	ldr	r1, [sp, #12]
 801815a:	4638      	mov	r0, r7
 801815c:	f001 fc36 	bl	80199cc <strncmp>
 8018160:	2800      	cmp	r0, #0
 8018162:	d166      	bne.n	8018232 <__gethex+0x124>
 8018164:	9b01      	ldr	r3, [sp, #4]
 8018166:	5cf8      	ldrb	r0, [r7, r3]
 8018168:	18fe      	adds	r6, r7, r3
 801816a:	f7ff ffbb 	bl	80180e4 <__hexdig_fun>
 801816e:	2800      	cmp	r0, #0
 8018170:	d062      	beq.n	8018238 <__gethex+0x12a>
 8018172:	4633      	mov	r3, r6
 8018174:	7818      	ldrb	r0, [r3, #0]
 8018176:	2830      	cmp	r0, #48	; 0x30
 8018178:	461f      	mov	r7, r3
 801817a:	f103 0301 	add.w	r3, r3, #1
 801817e:	d0f9      	beq.n	8018174 <__gethex+0x66>
 8018180:	f7ff ffb0 	bl	80180e4 <__hexdig_fun>
 8018184:	fab0 f580 	clz	r5, r0
 8018188:	096d      	lsrs	r5, r5, #5
 801818a:	4634      	mov	r4, r6
 801818c:	f04f 0b01 	mov.w	fp, #1
 8018190:	463a      	mov	r2, r7
 8018192:	4616      	mov	r6, r2
 8018194:	3201      	adds	r2, #1
 8018196:	7830      	ldrb	r0, [r6, #0]
 8018198:	f7ff ffa4 	bl	80180e4 <__hexdig_fun>
 801819c:	2800      	cmp	r0, #0
 801819e:	d1f8      	bne.n	8018192 <__gethex+0x84>
 80181a0:	9a01      	ldr	r2, [sp, #4]
 80181a2:	9903      	ldr	r1, [sp, #12]
 80181a4:	4630      	mov	r0, r6
 80181a6:	f001 fc11 	bl	80199cc <strncmp>
 80181aa:	b950      	cbnz	r0, 80181c2 <__gethex+0xb4>
 80181ac:	b954      	cbnz	r4, 80181c4 <__gethex+0xb6>
 80181ae:	9b01      	ldr	r3, [sp, #4]
 80181b0:	18f4      	adds	r4, r6, r3
 80181b2:	4622      	mov	r2, r4
 80181b4:	4616      	mov	r6, r2
 80181b6:	3201      	adds	r2, #1
 80181b8:	7830      	ldrb	r0, [r6, #0]
 80181ba:	f7ff ff93 	bl	80180e4 <__hexdig_fun>
 80181be:	2800      	cmp	r0, #0
 80181c0:	d1f8      	bne.n	80181b4 <__gethex+0xa6>
 80181c2:	b10c      	cbz	r4, 80181c8 <__gethex+0xba>
 80181c4:	1ba4      	subs	r4, r4, r6
 80181c6:	00a4      	lsls	r4, r4, #2
 80181c8:	7833      	ldrb	r3, [r6, #0]
 80181ca:	2b50      	cmp	r3, #80	; 0x50
 80181cc:	d001      	beq.n	80181d2 <__gethex+0xc4>
 80181ce:	2b70      	cmp	r3, #112	; 0x70
 80181d0:	d140      	bne.n	8018254 <__gethex+0x146>
 80181d2:	7873      	ldrb	r3, [r6, #1]
 80181d4:	2b2b      	cmp	r3, #43	; 0x2b
 80181d6:	d031      	beq.n	801823c <__gethex+0x12e>
 80181d8:	2b2d      	cmp	r3, #45	; 0x2d
 80181da:	d033      	beq.n	8018244 <__gethex+0x136>
 80181dc:	1c71      	adds	r1, r6, #1
 80181de:	f04f 0900 	mov.w	r9, #0
 80181e2:	7808      	ldrb	r0, [r1, #0]
 80181e4:	f7ff ff7e 	bl	80180e4 <__hexdig_fun>
 80181e8:	1e43      	subs	r3, r0, #1
 80181ea:	b2db      	uxtb	r3, r3
 80181ec:	2b18      	cmp	r3, #24
 80181ee:	d831      	bhi.n	8018254 <__gethex+0x146>
 80181f0:	f1a0 0210 	sub.w	r2, r0, #16
 80181f4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80181f8:	f7ff ff74 	bl	80180e4 <__hexdig_fun>
 80181fc:	1e43      	subs	r3, r0, #1
 80181fe:	b2db      	uxtb	r3, r3
 8018200:	2b18      	cmp	r3, #24
 8018202:	d922      	bls.n	801824a <__gethex+0x13c>
 8018204:	f1b9 0f00 	cmp.w	r9, #0
 8018208:	d000      	beq.n	801820c <__gethex+0xfe>
 801820a:	4252      	negs	r2, r2
 801820c:	4414      	add	r4, r2
 801820e:	f8ca 1000 	str.w	r1, [sl]
 8018212:	b30d      	cbz	r5, 8018258 <__gethex+0x14a>
 8018214:	f1bb 0f00 	cmp.w	fp, #0
 8018218:	bf0c      	ite	eq
 801821a:	2706      	moveq	r7, #6
 801821c:	2700      	movne	r7, #0
 801821e:	4638      	mov	r0, r7
 8018220:	b00b      	add	sp, #44	; 0x2c
 8018222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018226:	f10b 0b01 	add.w	fp, fp, #1
 801822a:	e78a      	b.n	8018142 <__gethex+0x34>
 801822c:	2500      	movs	r5, #0
 801822e:	462c      	mov	r4, r5
 8018230:	e7ae      	b.n	8018190 <__gethex+0x82>
 8018232:	463e      	mov	r6, r7
 8018234:	2501      	movs	r5, #1
 8018236:	e7c7      	b.n	80181c8 <__gethex+0xba>
 8018238:	4604      	mov	r4, r0
 801823a:	e7fb      	b.n	8018234 <__gethex+0x126>
 801823c:	f04f 0900 	mov.w	r9, #0
 8018240:	1cb1      	adds	r1, r6, #2
 8018242:	e7ce      	b.n	80181e2 <__gethex+0xd4>
 8018244:	f04f 0901 	mov.w	r9, #1
 8018248:	e7fa      	b.n	8018240 <__gethex+0x132>
 801824a:	230a      	movs	r3, #10
 801824c:	fb03 0202 	mla	r2, r3, r2, r0
 8018250:	3a10      	subs	r2, #16
 8018252:	e7cf      	b.n	80181f4 <__gethex+0xe6>
 8018254:	4631      	mov	r1, r6
 8018256:	e7da      	b.n	801820e <__gethex+0x100>
 8018258:	1bf3      	subs	r3, r6, r7
 801825a:	3b01      	subs	r3, #1
 801825c:	4629      	mov	r1, r5
 801825e:	2b07      	cmp	r3, #7
 8018260:	dc49      	bgt.n	80182f6 <__gethex+0x1e8>
 8018262:	9802      	ldr	r0, [sp, #8]
 8018264:	f000 fa66 	bl	8018734 <_Balloc>
 8018268:	9b01      	ldr	r3, [sp, #4]
 801826a:	f100 0914 	add.w	r9, r0, #20
 801826e:	f04f 0b00 	mov.w	fp, #0
 8018272:	f1c3 0301 	rsb	r3, r3, #1
 8018276:	4605      	mov	r5, r0
 8018278:	f8cd 9010 	str.w	r9, [sp, #16]
 801827c:	46da      	mov	sl, fp
 801827e:	9308      	str	r3, [sp, #32]
 8018280:	42b7      	cmp	r7, r6
 8018282:	d33b      	bcc.n	80182fc <__gethex+0x1ee>
 8018284:	9804      	ldr	r0, [sp, #16]
 8018286:	f840 ab04 	str.w	sl, [r0], #4
 801828a:	eba0 0009 	sub.w	r0, r0, r9
 801828e:	1080      	asrs	r0, r0, #2
 8018290:	6128      	str	r0, [r5, #16]
 8018292:	0147      	lsls	r7, r0, #5
 8018294:	4650      	mov	r0, sl
 8018296:	f000 fb11 	bl	80188bc <__hi0bits>
 801829a:	f8d8 6000 	ldr.w	r6, [r8]
 801829e:	1a3f      	subs	r7, r7, r0
 80182a0:	42b7      	cmp	r7, r6
 80182a2:	dd64      	ble.n	801836e <__gethex+0x260>
 80182a4:	1bbf      	subs	r7, r7, r6
 80182a6:	4639      	mov	r1, r7
 80182a8:	4628      	mov	r0, r5
 80182aa:	f000 fe21 	bl	8018ef0 <__any_on>
 80182ae:	4682      	mov	sl, r0
 80182b0:	b178      	cbz	r0, 80182d2 <__gethex+0x1c4>
 80182b2:	1e7b      	subs	r3, r7, #1
 80182b4:	1159      	asrs	r1, r3, #5
 80182b6:	f003 021f 	and.w	r2, r3, #31
 80182ba:	f04f 0a01 	mov.w	sl, #1
 80182be:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80182c2:	fa0a f202 	lsl.w	r2, sl, r2
 80182c6:	420a      	tst	r2, r1
 80182c8:	d003      	beq.n	80182d2 <__gethex+0x1c4>
 80182ca:	4553      	cmp	r3, sl
 80182cc:	dc46      	bgt.n	801835c <__gethex+0x24e>
 80182ce:	f04f 0a02 	mov.w	sl, #2
 80182d2:	4639      	mov	r1, r7
 80182d4:	4628      	mov	r0, r5
 80182d6:	f7ff fecb 	bl	8018070 <rshift>
 80182da:	443c      	add	r4, r7
 80182dc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80182e0:	42a3      	cmp	r3, r4
 80182e2:	da52      	bge.n	801838a <__gethex+0x27c>
 80182e4:	4629      	mov	r1, r5
 80182e6:	9802      	ldr	r0, [sp, #8]
 80182e8:	f000 fa58 	bl	801879c <_Bfree>
 80182ec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80182ee:	2300      	movs	r3, #0
 80182f0:	6013      	str	r3, [r2, #0]
 80182f2:	27a3      	movs	r7, #163	; 0xa3
 80182f4:	e793      	b.n	801821e <__gethex+0x110>
 80182f6:	3101      	adds	r1, #1
 80182f8:	105b      	asrs	r3, r3, #1
 80182fa:	e7b0      	b.n	801825e <__gethex+0x150>
 80182fc:	1e73      	subs	r3, r6, #1
 80182fe:	9305      	str	r3, [sp, #20]
 8018300:	9a07      	ldr	r2, [sp, #28]
 8018302:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8018306:	4293      	cmp	r3, r2
 8018308:	d018      	beq.n	801833c <__gethex+0x22e>
 801830a:	f1bb 0f20 	cmp.w	fp, #32
 801830e:	d107      	bne.n	8018320 <__gethex+0x212>
 8018310:	9b04      	ldr	r3, [sp, #16]
 8018312:	f8c3 a000 	str.w	sl, [r3]
 8018316:	3304      	adds	r3, #4
 8018318:	f04f 0a00 	mov.w	sl, #0
 801831c:	9304      	str	r3, [sp, #16]
 801831e:	46d3      	mov	fp, sl
 8018320:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8018324:	f7ff fede 	bl	80180e4 <__hexdig_fun>
 8018328:	f000 000f 	and.w	r0, r0, #15
 801832c:	fa00 f00b 	lsl.w	r0, r0, fp
 8018330:	ea4a 0a00 	orr.w	sl, sl, r0
 8018334:	f10b 0b04 	add.w	fp, fp, #4
 8018338:	9b05      	ldr	r3, [sp, #20]
 801833a:	e00d      	b.n	8018358 <__gethex+0x24a>
 801833c:	9b05      	ldr	r3, [sp, #20]
 801833e:	9a08      	ldr	r2, [sp, #32]
 8018340:	4413      	add	r3, r2
 8018342:	42bb      	cmp	r3, r7
 8018344:	d3e1      	bcc.n	801830a <__gethex+0x1fc>
 8018346:	4618      	mov	r0, r3
 8018348:	9a01      	ldr	r2, [sp, #4]
 801834a:	9903      	ldr	r1, [sp, #12]
 801834c:	9309      	str	r3, [sp, #36]	; 0x24
 801834e:	f001 fb3d 	bl	80199cc <strncmp>
 8018352:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018354:	2800      	cmp	r0, #0
 8018356:	d1d8      	bne.n	801830a <__gethex+0x1fc>
 8018358:	461e      	mov	r6, r3
 801835a:	e791      	b.n	8018280 <__gethex+0x172>
 801835c:	1eb9      	subs	r1, r7, #2
 801835e:	4628      	mov	r0, r5
 8018360:	f000 fdc6 	bl	8018ef0 <__any_on>
 8018364:	2800      	cmp	r0, #0
 8018366:	d0b2      	beq.n	80182ce <__gethex+0x1c0>
 8018368:	f04f 0a03 	mov.w	sl, #3
 801836c:	e7b1      	b.n	80182d2 <__gethex+0x1c4>
 801836e:	da09      	bge.n	8018384 <__gethex+0x276>
 8018370:	1bf7      	subs	r7, r6, r7
 8018372:	4629      	mov	r1, r5
 8018374:	463a      	mov	r2, r7
 8018376:	9802      	ldr	r0, [sp, #8]
 8018378:	f000 fbdc 	bl	8018b34 <__lshift>
 801837c:	1be4      	subs	r4, r4, r7
 801837e:	4605      	mov	r5, r0
 8018380:	f100 0914 	add.w	r9, r0, #20
 8018384:	f04f 0a00 	mov.w	sl, #0
 8018388:	e7a8      	b.n	80182dc <__gethex+0x1ce>
 801838a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801838e:	42a0      	cmp	r0, r4
 8018390:	dd6a      	ble.n	8018468 <__gethex+0x35a>
 8018392:	1b04      	subs	r4, r0, r4
 8018394:	42a6      	cmp	r6, r4
 8018396:	dc2e      	bgt.n	80183f6 <__gethex+0x2e8>
 8018398:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801839c:	2b02      	cmp	r3, #2
 801839e:	d022      	beq.n	80183e6 <__gethex+0x2d8>
 80183a0:	2b03      	cmp	r3, #3
 80183a2:	d024      	beq.n	80183ee <__gethex+0x2e0>
 80183a4:	2b01      	cmp	r3, #1
 80183a6:	d115      	bne.n	80183d4 <__gethex+0x2c6>
 80183a8:	42a6      	cmp	r6, r4
 80183aa:	d113      	bne.n	80183d4 <__gethex+0x2c6>
 80183ac:	2e01      	cmp	r6, #1
 80183ae:	dc0b      	bgt.n	80183c8 <__gethex+0x2ba>
 80183b0:	9a06      	ldr	r2, [sp, #24]
 80183b2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80183b6:	6013      	str	r3, [r2, #0]
 80183b8:	2301      	movs	r3, #1
 80183ba:	612b      	str	r3, [r5, #16]
 80183bc:	f8c9 3000 	str.w	r3, [r9]
 80183c0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80183c2:	2762      	movs	r7, #98	; 0x62
 80183c4:	601d      	str	r5, [r3, #0]
 80183c6:	e72a      	b.n	801821e <__gethex+0x110>
 80183c8:	1e71      	subs	r1, r6, #1
 80183ca:	4628      	mov	r0, r5
 80183cc:	f000 fd90 	bl	8018ef0 <__any_on>
 80183d0:	2800      	cmp	r0, #0
 80183d2:	d1ed      	bne.n	80183b0 <__gethex+0x2a2>
 80183d4:	4629      	mov	r1, r5
 80183d6:	9802      	ldr	r0, [sp, #8]
 80183d8:	f000 f9e0 	bl	801879c <_Bfree>
 80183dc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80183de:	2300      	movs	r3, #0
 80183e0:	6013      	str	r3, [r2, #0]
 80183e2:	2750      	movs	r7, #80	; 0x50
 80183e4:	e71b      	b.n	801821e <__gethex+0x110>
 80183e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80183e8:	2b00      	cmp	r3, #0
 80183ea:	d0e1      	beq.n	80183b0 <__gethex+0x2a2>
 80183ec:	e7f2      	b.n	80183d4 <__gethex+0x2c6>
 80183ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80183f0:	2b00      	cmp	r3, #0
 80183f2:	d1dd      	bne.n	80183b0 <__gethex+0x2a2>
 80183f4:	e7ee      	b.n	80183d4 <__gethex+0x2c6>
 80183f6:	1e67      	subs	r7, r4, #1
 80183f8:	f1ba 0f00 	cmp.w	sl, #0
 80183fc:	d131      	bne.n	8018462 <__gethex+0x354>
 80183fe:	b127      	cbz	r7, 801840a <__gethex+0x2fc>
 8018400:	4639      	mov	r1, r7
 8018402:	4628      	mov	r0, r5
 8018404:	f000 fd74 	bl	8018ef0 <__any_on>
 8018408:	4682      	mov	sl, r0
 801840a:	117a      	asrs	r2, r7, #5
 801840c:	2301      	movs	r3, #1
 801840e:	f007 071f 	and.w	r7, r7, #31
 8018412:	fa03 f707 	lsl.w	r7, r3, r7
 8018416:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 801841a:	4621      	mov	r1, r4
 801841c:	421f      	tst	r7, r3
 801841e:	4628      	mov	r0, r5
 8018420:	bf18      	it	ne
 8018422:	f04a 0a02 	orrne.w	sl, sl, #2
 8018426:	1b36      	subs	r6, r6, r4
 8018428:	f7ff fe22 	bl	8018070 <rshift>
 801842c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8018430:	2702      	movs	r7, #2
 8018432:	f1ba 0f00 	cmp.w	sl, #0
 8018436:	d048      	beq.n	80184ca <__gethex+0x3bc>
 8018438:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801843c:	2b02      	cmp	r3, #2
 801843e:	d015      	beq.n	801846c <__gethex+0x35e>
 8018440:	2b03      	cmp	r3, #3
 8018442:	d017      	beq.n	8018474 <__gethex+0x366>
 8018444:	2b01      	cmp	r3, #1
 8018446:	d109      	bne.n	801845c <__gethex+0x34e>
 8018448:	f01a 0f02 	tst.w	sl, #2
 801844c:	d006      	beq.n	801845c <__gethex+0x34e>
 801844e:	f8d9 3000 	ldr.w	r3, [r9]
 8018452:	ea4a 0a03 	orr.w	sl, sl, r3
 8018456:	f01a 0f01 	tst.w	sl, #1
 801845a:	d10e      	bne.n	801847a <__gethex+0x36c>
 801845c:	f047 0710 	orr.w	r7, r7, #16
 8018460:	e033      	b.n	80184ca <__gethex+0x3bc>
 8018462:	f04f 0a01 	mov.w	sl, #1
 8018466:	e7d0      	b.n	801840a <__gethex+0x2fc>
 8018468:	2701      	movs	r7, #1
 801846a:	e7e2      	b.n	8018432 <__gethex+0x324>
 801846c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801846e:	f1c3 0301 	rsb	r3, r3, #1
 8018472:	9315      	str	r3, [sp, #84]	; 0x54
 8018474:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018476:	2b00      	cmp	r3, #0
 8018478:	d0f0      	beq.n	801845c <__gethex+0x34e>
 801847a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 801847e:	f105 0314 	add.w	r3, r5, #20
 8018482:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8018486:	eb03 010a 	add.w	r1, r3, sl
 801848a:	f04f 0c00 	mov.w	ip, #0
 801848e:	4618      	mov	r0, r3
 8018490:	f853 2b04 	ldr.w	r2, [r3], #4
 8018494:	f1b2 3fff 	cmp.w	r2, #4294967295
 8018498:	d01c      	beq.n	80184d4 <__gethex+0x3c6>
 801849a:	3201      	adds	r2, #1
 801849c:	6002      	str	r2, [r0, #0]
 801849e:	2f02      	cmp	r7, #2
 80184a0:	f105 0314 	add.w	r3, r5, #20
 80184a4:	d138      	bne.n	8018518 <__gethex+0x40a>
 80184a6:	f8d8 2000 	ldr.w	r2, [r8]
 80184aa:	3a01      	subs	r2, #1
 80184ac:	42b2      	cmp	r2, r6
 80184ae:	d10a      	bne.n	80184c6 <__gethex+0x3b8>
 80184b0:	1171      	asrs	r1, r6, #5
 80184b2:	2201      	movs	r2, #1
 80184b4:	f006 061f 	and.w	r6, r6, #31
 80184b8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80184bc:	fa02 f606 	lsl.w	r6, r2, r6
 80184c0:	421e      	tst	r6, r3
 80184c2:	bf18      	it	ne
 80184c4:	4617      	movne	r7, r2
 80184c6:	f047 0720 	orr.w	r7, r7, #32
 80184ca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80184cc:	601d      	str	r5, [r3, #0]
 80184ce:	9b06      	ldr	r3, [sp, #24]
 80184d0:	601c      	str	r4, [r3, #0]
 80184d2:	e6a4      	b.n	801821e <__gethex+0x110>
 80184d4:	4299      	cmp	r1, r3
 80184d6:	f843 cc04 	str.w	ip, [r3, #-4]
 80184da:	d8d8      	bhi.n	801848e <__gethex+0x380>
 80184dc:	68ab      	ldr	r3, [r5, #8]
 80184de:	4599      	cmp	r9, r3
 80184e0:	db12      	blt.n	8018508 <__gethex+0x3fa>
 80184e2:	6869      	ldr	r1, [r5, #4]
 80184e4:	9802      	ldr	r0, [sp, #8]
 80184e6:	3101      	adds	r1, #1
 80184e8:	f000 f924 	bl	8018734 <_Balloc>
 80184ec:	692a      	ldr	r2, [r5, #16]
 80184ee:	3202      	adds	r2, #2
 80184f0:	f105 010c 	add.w	r1, r5, #12
 80184f4:	4683      	mov	fp, r0
 80184f6:	0092      	lsls	r2, r2, #2
 80184f8:	300c      	adds	r0, #12
 80184fa:	f7fd f9cd 	bl	8015898 <memcpy>
 80184fe:	4629      	mov	r1, r5
 8018500:	9802      	ldr	r0, [sp, #8]
 8018502:	f000 f94b 	bl	801879c <_Bfree>
 8018506:	465d      	mov	r5, fp
 8018508:	692b      	ldr	r3, [r5, #16]
 801850a:	1c5a      	adds	r2, r3, #1
 801850c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8018510:	612a      	str	r2, [r5, #16]
 8018512:	2201      	movs	r2, #1
 8018514:	615a      	str	r2, [r3, #20]
 8018516:	e7c2      	b.n	801849e <__gethex+0x390>
 8018518:	692a      	ldr	r2, [r5, #16]
 801851a:	454a      	cmp	r2, r9
 801851c:	dd0b      	ble.n	8018536 <__gethex+0x428>
 801851e:	2101      	movs	r1, #1
 8018520:	4628      	mov	r0, r5
 8018522:	f7ff fda5 	bl	8018070 <rshift>
 8018526:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801852a:	3401      	adds	r4, #1
 801852c:	42a3      	cmp	r3, r4
 801852e:	f6ff aed9 	blt.w	80182e4 <__gethex+0x1d6>
 8018532:	2701      	movs	r7, #1
 8018534:	e7c7      	b.n	80184c6 <__gethex+0x3b8>
 8018536:	f016 061f 	ands.w	r6, r6, #31
 801853a:	d0fa      	beq.n	8018532 <__gethex+0x424>
 801853c:	449a      	add	sl, r3
 801853e:	f1c6 0620 	rsb	r6, r6, #32
 8018542:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8018546:	f000 f9b9 	bl	80188bc <__hi0bits>
 801854a:	42b0      	cmp	r0, r6
 801854c:	dbe7      	blt.n	801851e <__gethex+0x410>
 801854e:	e7f0      	b.n	8018532 <__gethex+0x424>

08018550 <L_shift>:
 8018550:	f1c2 0208 	rsb	r2, r2, #8
 8018554:	0092      	lsls	r2, r2, #2
 8018556:	b570      	push	{r4, r5, r6, lr}
 8018558:	f1c2 0620 	rsb	r6, r2, #32
 801855c:	6843      	ldr	r3, [r0, #4]
 801855e:	6804      	ldr	r4, [r0, #0]
 8018560:	fa03 f506 	lsl.w	r5, r3, r6
 8018564:	432c      	orrs	r4, r5
 8018566:	40d3      	lsrs	r3, r2
 8018568:	6004      	str	r4, [r0, #0]
 801856a:	f840 3f04 	str.w	r3, [r0, #4]!
 801856e:	4288      	cmp	r0, r1
 8018570:	d3f4      	bcc.n	801855c <L_shift+0xc>
 8018572:	bd70      	pop	{r4, r5, r6, pc}

08018574 <__match>:
 8018574:	b530      	push	{r4, r5, lr}
 8018576:	6803      	ldr	r3, [r0, #0]
 8018578:	3301      	adds	r3, #1
 801857a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801857e:	b914      	cbnz	r4, 8018586 <__match+0x12>
 8018580:	6003      	str	r3, [r0, #0]
 8018582:	2001      	movs	r0, #1
 8018584:	bd30      	pop	{r4, r5, pc}
 8018586:	f813 2b01 	ldrb.w	r2, [r3], #1
 801858a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801858e:	2d19      	cmp	r5, #25
 8018590:	bf98      	it	ls
 8018592:	3220      	addls	r2, #32
 8018594:	42a2      	cmp	r2, r4
 8018596:	d0f0      	beq.n	801857a <__match+0x6>
 8018598:	2000      	movs	r0, #0
 801859a:	e7f3      	b.n	8018584 <__match+0x10>

0801859c <__hexnan>:
 801859c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80185a0:	680b      	ldr	r3, [r1, #0]
 80185a2:	6801      	ldr	r1, [r0, #0]
 80185a4:	115f      	asrs	r7, r3, #5
 80185a6:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80185aa:	f013 031f 	ands.w	r3, r3, #31
 80185ae:	b087      	sub	sp, #28
 80185b0:	bf18      	it	ne
 80185b2:	3704      	addne	r7, #4
 80185b4:	2500      	movs	r5, #0
 80185b6:	1f3e      	subs	r6, r7, #4
 80185b8:	4682      	mov	sl, r0
 80185ba:	4690      	mov	r8, r2
 80185bc:	9301      	str	r3, [sp, #4]
 80185be:	f847 5c04 	str.w	r5, [r7, #-4]
 80185c2:	46b1      	mov	r9, r6
 80185c4:	4634      	mov	r4, r6
 80185c6:	9502      	str	r5, [sp, #8]
 80185c8:	46ab      	mov	fp, r5
 80185ca:	784a      	ldrb	r2, [r1, #1]
 80185cc:	1c4b      	adds	r3, r1, #1
 80185ce:	9303      	str	r3, [sp, #12]
 80185d0:	b342      	cbz	r2, 8018624 <__hexnan+0x88>
 80185d2:	4610      	mov	r0, r2
 80185d4:	9105      	str	r1, [sp, #20]
 80185d6:	9204      	str	r2, [sp, #16]
 80185d8:	f7ff fd84 	bl	80180e4 <__hexdig_fun>
 80185dc:	2800      	cmp	r0, #0
 80185de:	d143      	bne.n	8018668 <__hexnan+0xcc>
 80185e0:	9a04      	ldr	r2, [sp, #16]
 80185e2:	9905      	ldr	r1, [sp, #20]
 80185e4:	2a20      	cmp	r2, #32
 80185e6:	d818      	bhi.n	801861a <__hexnan+0x7e>
 80185e8:	9b02      	ldr	r3, [sp, #8]
 80185ea:	459b      	cmp	fp, r3
 80185ec:	dd13      	ble.n	8018616 <__hexnan+0x7a>
 80185ee:	454c      	cmp	r4, r9
 80185f0:	d206      	bcs.n	8018600 <__hexnan+0x64>
 80185f2:	2d07      	cmp	r5, #7
 80185f4:	dc04      	bgt.n	8018600 <__hexnan+0x64>
 80185f6:	462a      	mov	r2, r5
 80185f8:	4649      	mov	r1, r9
 80185fa:	4620      	mov	r0, r4
 80185fc:	f7ff ffa8 	bl	8018550 <L_shift>
 8018600:	4544      	cmp	r4, r8
 8018602:	d944      	bls.n	801868e <__hexnan+0xf2>
 8018604:	2300      	movs	r3, #0
 8018606:	f1a4 0904 	sub.w	r9, r4, #4
 801860a:	f844 3c04 	str.w	r3, [r4, #-4]
 801860e:	f8cd b008 	str.w	fp, [sp, #8]
 8018612:	464c      	mov	r4, r9
 8018614:	461d      	mov	r5, r3
 8018616:	9903      	ldr	r1, [sp, #12]
 8018618:	e7d7      	b.n	80185ca <__hexnan+0x2e>
 801861a:	2a29      	cmp	r2, #41	; 0x29
 801861c:	d14a      	bne.n	80186b4 <__hexnan+0x118>
 801861e:	3102      	adds	r1, #2
 8018620:	f8ca 1000 	str.w	r1, [sl]
 8018624:	f1bb 0f00 	cmp.w	fp, #0
 8018628:	d044      	beq.n	80186b4 <__hexnan+0x118>
 801862a:	454c      	cmp	r4, r9
 801862c:	d206      	bcs.n	801863c <__hexnan+0xa0>
 801862e:	2d07      	cmp	r5, #7
 8018630:	dc04      	bgt.n	801863c <__hexnan+0xa0>
 8018632:	462a      	mov	r2, r5
 8018634:	4649      	mov	r1, r9
 8018636:	4620      	mov	r0, r4
 8018638:	f7ff ff8a 	bl	8018550 <L_shift>
 801863c:	4544      	cmp	r4, r8
 801863e:	d928      	bls.n	8018692 <__hexnan+0xf6>
 8018640:	4643      	mov	r3, r8
 8018642:	f854 2b04 	ldr.w	r2, [r4], #4
 8018646:	f843 2b04 	str.w	r2, [r3], #4
 801864a:	42a6      	cmp	r6, r4
 801864c:	d2f9      	bcs.n	8018642 <__hexnan+0xa6>
 801864e:	2200      	movs	r2, #0
 8018650:	f843 2b04 	str.w	r2, [r3], #4
 8018654:	429e      	cmp	r6, r3
 8018656:	d2fb      	bcs.n	8018650 <__hexnan+0xb4>
 8018658:	6833      	ldr	r3, [r6, #0]
 801865a:	b91b      	cbnz	r3, 8018664 <__hexnan+0xc8>
 801865c:	4546      	cmp	r6, r8
 801865e:	d127      	bne.n	80186b0 <__hexnan+0x114>
 8018660:	2301      	movs	r3, #1
 8018662:	6033      	str	r3, [r6, #0]
 8018664:	2005      	movs	r0, #5
 8018666:	e026      	b.n	80186b6 <__hexnan+0x11a>
 8018668:	3501      	adds	r5, #1
 801866a:	2d08      	cmp	r5, #8
 801866c:	f10b 0b01 	add.w	fp, fp, #1
 8018670:	dd06      	ble.n	8018680 <__hexnan+0xe4>
 8018672:	4544      	cmp	r4, r8
 8018674:	d9cf      	bls.n	8018616 <__hexnan+0x7a>
 8018676:	2300      	movs	r3, #0
 8018678:	f844 3c04 	str.w	r3, [r4, #-4]
 801867c:	2501      	movs	r5, #1
 801867e:	3c04      	subs	r4, #4
 8018680:	6822      	ldr	r2, [r4, #0]
 8018682:	f000 000f 	and.w	r0, r0, #15
 8018686:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801868a:	6020      	str	r0, [r4, #0]
 801868c:	e7c3      	b.n	8018616 <__hexnan+0x7a>
 801868e:	2508      	movs	r5, #8
 8018690:	e7c1      	b.n	8018616 <__hexnan+0x7a>
 8018692:	9b01      	ldr	r3, [sp, #4]
 8018694:	2b00      	cmp	r3, #0
 8018696:	d0df      	beq.n	8018658 <__hexnan+0xbc>
 8018698:	f04f 32ff 	mov.w	r2, #4294967295
 801869c:	f1c3 0320 	rsb	r3, r3, #32
 80186a0:	fa22 f303 	lsr.w	r3, r2, r3
 80186a4:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80186a8:	401a      	ands	r2, r3
 80186aa:	f847 2c04 	str.w	r2, [r7, #-4]
 80186ae:	e7d3      	b.n	8018658 <__hexnan+0xbc>
 80186b0:	3e04      	subs	r6, #4
 80186b2:	e7d1      	b.n	8018658 <__hexnan+0xbc>
 80186b4:	2004      	movs	r0, #4
 80186b6:	b007      	add	sp, #28
 80186b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080186bc <__locale_ctype_ptr_l>:
 80186bc:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80186c0:	4770      	bx	lr
	...

080186c4 <__locale_ctype_ptr>:
 80186c4:	4b04      	ldr	r3, [pc, #16]	; (80186d8 <__locale_ctype_ptr+0x14>)
 80186c6:	4a05      	ldr	r2, [pc, #20]	; (80186dc <__locale_ctype_ptr+0x18>)
 80186c8:	681b      	ldr	r3, [r3, #0]
 80186ca:	6a1b      	ldr	r3, [r3, #32]
 80186cc:	2b00      	cmp	r3, #0
 80186ce:	bf08      	it	eq
 80186d0:	4613      	moveq	r3, r2
 80186d2:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 80186d6:	4770      	bx	lr
 80186d8:	2000000c 	.word	0x2000000c
 80186dc:	20000070 	.word	0x20000070

080186e0 <__localeconv_l>:
 80186e0:	30f0      	adds	r0, #240	; 0xf0
 80186e2:	4770      	bx	lr

080186e4 <_localeconv_r>:
 80186e4:	4b04      	ldr	r3, [pc, #16]	; (80186f8 <_localeconv_r+0x14>)
 80186e6:	681b      	ldr	r3, [r3, #0]
 80186e8:	6a18      	ldr	r0, [r3, #32]
 80186ea:	4b04      	ldr	r3, [pc, #16]	; (80186fc <_localeconv_r+0x18>)
 80186ec:	2800      	cmp	r0, #0
 80186ee:	bf08      	it	eq
 80186f0:	4618      	moveq	r0, r3
 80186f2:	30f0      	adds	r0, #240	; 0xf0
 80186f4:	4770      	bx	lr
 80186f6:	bf00      	nop
 80186f8:	2000000c 	.word	0x2000000c
 80186fc:	20000070 	.word	0x20000070

08018700 <malloc>:
 8018700:	4b02      	ldr	r3, [pc, #8]	; (801870c <malloc+0xc>)
 8018702:	4601      	mov	r1, r0
 8018704:	6818      	ldr	r0, [r3, #0]
 8018706:	f000 bc71 	b.w	8018fec <_malloc_r>
 801870a:	bf00      	nop
 801870c:	2000000c 	.word	0x2000000c

08018710 <__ascii_mbtowc>:
 8018710:	b082      	sub	sp, #8
 8018712:	b901      	cbnz	r1, 8018716 <__ascii_mbtowc+0x6>
 8018714:	a901      	add	r1, sp, #4
 8018716:	b142      	cbz	r2, 801872a <__ascii_mbtowc+0x1a>
 8018718:	b14b      	cbz	r3, 801872e <__ascii_mbtowc+0x1e>
 801871a:	7813      	ldrb	r3, [r2, #0]
 801871c:	600b      	str	r3, [r1, #0]
 801871e:	7812      	ldrb	r2, [r2, #0]
 8018720:	1c10      	adds	r0, r2, #0
 8018722:	bf18      	it	ne
 8018724:	2001      	movne	r0, #1
 8018726:	b002      	add	sp, #8
 8018728:	4770      	bx	lr
 801872a:	4610      	mov	r0, r2
 801872c:	e7fb      	b.n	8018726 <__ascii_mbtowc+0x16>
 801872e:	f06f 0001 	mvn.w	r0, #1
 8018732:	e7f8      	b.n	8018726 <__ascii_mbtowc+0x16>

08018734 <_Balloc>:
 8018734:	b570      	push	{r4, r5, r6, lr}
 8018736:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8018738:	4604      	mov	r4, r0
 801873a:	460e      	mov	r6, r1
 801873c:	b93d      	cbnz	r5, 801874e <_Balloc+0x1a>
 801873e:	2010      	movs	r0, #16
 8018740:	f7ff ffde 	bl	8018700 <malloc>
 8018744:	6260      	str	r0, [r4, #36]	; 0x24
 8018746:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801874a:	6005      	str	r5, [r0, #0]
 801874c:	60c5      	str	r5, [r0, #12]
 801874e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8018750:	68eb      	ldr	r3, [r5, #12]
 8018752:	b183      	cbz	r3, 8018776 <_Balloc+0x42>
 8018754:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018756:	68db      	ldr	r3, [r3, #12]
 8018758:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801875c:	b9b8      	cbnz	r0, 801878e <_Balloc+0x5a>
 801875e:	2101      	movs	r1, #1
 8018760:	fa01 f506 	lsl.w	r5, r1, r6
 8018764:	1d6a      	adds	r2, r5, #5
 8018766:	0092      	lsls	r2, r2, #2
 8018768:	4620      	mov	r0, r4
 801876a:	f000 fbe2 	bl	8018f32 <_calloc_r>
 801876e:	b160      	cbz	r0, 801878a <_Balloc+0x56>
 8018770:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8018774:	e00e      	b.n	8018794 <_Balloc+0x60>
 8018776:	2221      	movs	r2, #33	; 0x21
 8018778:	2104      	movs	r1, #4
 801877a:	4620      	mov	r0, r4
 801877c:	f000 fbd9 	bl	8018f32 <_calloc_r>
 8018780:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018782:	60e8      	str	r0, [r5, #12]
 8018784:	68db      	ldr	r3, [r3, #12]
 8018786:	2b00      	cmp	r3, #0
 8018788:	d1e4      	bne.n	8018754 <_Balloc+0x20>
 801878a:	2000      	movs	r0, #0
 801878c:	bd70      	pop	{r4, r5, r6, pc}
 801878e:	6802      	ldr	r2, [r0, #0]
 8018790:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8018794:	2300      	movs	r3, #0
 8018796:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801879a:	e7f7      	b.n	801878c <_Balloc+0x58>

0801879c <_Bfree>:
 801879c:	b570      	push	{r4, r5, r6, lr}
 801879e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80187a0:	4606      	mov	r6, r0
 80187a2:	460d      	mov	r5, r1
 80187a4:	b93c      	cbnz	r4, 80187b6 <_Bfree+0x1a>
 80187a6:	2010      	movs	r0, #16
 80187a8:	f7ff ffaa 	bl	8018700 <malloc>
 80187ac:	6270      	str	r0, [r6, #36]	; 0x24
 80187ae:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80187b2:	6004      	str	r4, [r0, #0]
 80187b4:	60c4      	str	r4, [r0, #12]
 80187b6:	b13d      	cbz	r5, 80187c8 <_Bfree+0x2c>
 80187b8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80187ba:	686a      	ldr	r2, [r5, #4]
 80187bc:	68db      	ldr	r3, [r3, #12]
 80187be:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80187c2:	6029      	str	r1, [r5, #0]
 80187c4:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80187c8:	bd70      	pop	{r4, r5, r6, pc}

080187ca <__multadd>:
 80187ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80187ce:	690d      	ldr	r5, [r1, #16]
 80187d0:	461f      	mov	r7, r3
 80187d2:	4606      	mov	r6, r0
 80187d4:	460c      	mov	r4, r1
 80187d6:	f101 0c14 	add.w	ip, r1, #20
 80187da:	2300      	movs	r3, #0
 80187dc:	f8dc 0000 	ldr.w	r0, [ip]
 80187e0:	b281      	uxth	r1, r0
 80187e2:	fb02 7101 	mla	r1, r2, r1, r7
 80187e6:	0c0f      	lsrs	r7, r1, #16
 80187e8:	0c00      	lsrs	r0, r0, #16
 80187ea:	fb02 7000 	mla	r0, r2, r0, r7
 80187ee:	b289      	uxth	r1, r1
 80187f0:	3301      	adds	r3, #1
 80187f2:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80187f6:	429d      	cmp	r5, r3
 80187f8:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80187fc:	f84c 1b04 	str.w	r1, [ip], #4
 8018800:	dcec      	bgt.n	80187dc <__multadd+0x12>
 8018802:	b1d7      	cbz	r7, 801883a <__multadd+0x70>
 8018804:	68a3      	ldr	r3, [r4, #8]
 8018806:	42ab      	cmp	r3, r5
 8018808:	dc12      	bgt.n	8018830 <__multadd+0x66>
 801880a:	6861      	ldr	r1, [r4, #4]
 801880c:	4630      	mov	r0, r6
 801880e:	3101      	adds	r1, #1
 8018810:	f7ff ff90 	bl	8018734 <_Balloc>
 8018814:	6922      	ldr	r2, [r4, #16]
 8018816:	3202      	adds	r2, #2
 8018818:	f104 010c 	add.w	r1, r4, #12
 801881c:	4680      	mov	r8, r0
 801881e:	0092      	lsls	r2, r2, #2
 8018820:	300c      	adds	r0, #12
 8018822:	f7fd f839 	bl	8015898 <memcpy>
 8018826:	4621      	mov	r1, r4
 8018828:	4630      	mov	r0, r6
 801882a:	f7ff ffb7 	bl	801879c <_Bfree>
 801882e:	4644      	mov	r4, r8
 8018830:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8018834:	3501      	adds	r5, #1
 8018836:	615f      	str	r7, [r3, #20]
 8018838:	6125      	str	r5, [r4, #16]
 801883a:	4620      	mov	r0, r4
 801883c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018840 <__s2b>:
 8018840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018844:	460c      	mov	r4, r1
 8018846:	4615      	mov	r5, r2
 8018848:	461f      	mov	r7, r3
 801884a:	2209      	movs	r2, #9
 801884c:	3308      	adds	r3, #8
 801884e:	4606      	mov	r6, r0
 8018850:	fb93 f3f2 	sdiv	r3, r3, r2
 8018854:	2100      	movs	r1, #0
 8018856:	2201      	movs	r2, #1
 8018858:	429a      	cmp	r2, r3
 801885a:	db20      	blt.n	801889e <__s2b+0x5e>
 801885c:	4630      	mov	r0, r6
 801885e:	f7ff ff69 	bl	8018734 <_Balloc>
 8018862:	9b08      	ldr	r3, [sp, #32]
 8018864:	6143      	str	r3, [r0, #20]
 8018866:	2d09      	cmp	r5, #9
 8018868:	f04f 0301 	mov.w	r3, #1
 801886c:	6103      	str	r3, [r0, #16]
 801886e:	dd19      	ble.n	80188a4 <__s2b+0x64>
 8018870:	f104 0809 	add.w	r8, r4, #9
 8018874:	46c1      	mov	r9, r8
 8018876:	442c      	add	r4, r5
 8018878:	f819 3b01 	ldrb.w	r3, [r9], #1
 801887c:	4601      	mov	r1, r0
 801887e:	3b30      	subs	r3, #48	; 0x30
 8018880:	220a      	movs	r2, #10
 8018882:	4630      	mov	r0, r6
 8018884:	f7ff ffa1 	bl	80187ca <__multadd>
 8018888:	45a1      	cmp	r9, r4
 801888a:	d1f5      	bne.n	8018878 <__s2b+0x38>
 801888c:	eb08 0405 	add.w	r4, r8, r5
 8018890:	3c08      	subs	r4, #8
 8018892:	1b2d      	subs	r5, r5, r4
 8018894:	1963      	adds	r3, r4, r5
 8018896:	42bb      	cmp	r3, r7
 8018898:	db07      	blt.n	80188aa <__s2b+0x6a>
 801889a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801889e:	0052      	lsls	r2, r2, #1
 80188a0:	3101      	adds	r1, #1
 80188a2:	e7d9      	b.n	8018858 <__s2b+0x18>
 80188a4:	340a      	adds	r4, #10
 80188a6:	2509      	movs	r5, #9
 80188a8:	e7f3      	b.n	8018892 <__s2b+0x52>
 80188aa:	f814 3b01 	ldrb.w	r3, [r4], #1
 80188ae:	4601      	mov	r1, r0
 80188b0:	3b30      	subs	r3, #48	; 0x30
 80188b2:	220a      	movs	r2, #10
 80188b4:	4630      	mov	r0, r6
 80188b6:	f7ff ff88 	bl	80187ca <__multadd>
 80188ba:	e7eb      	b.n	8018894 <__s2b+0x54>

080188bc <__hi0bits>:
 80188bc:	0c02      	lsrs	r2, r0, #16
 80188be:	0412      	lsls	r2, r2, #16
 80188c0:	4603      	mov	r3, r0
 80188c2:	b9b2      	cbnz	r2, 80188f2 <__hi0bits+0x36>
 80188c4:	0403      	lsls	r3, r0, #16
 80188c6:	2010      	movs	r0, #16
 80188c8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80188cc:	bf04      	itt	eq
 80188ce:	021b      	lsleq	r3, r3, #8
 80188d0:	3008      	addeq	r0, #8
 80188d2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80188d6:	bf04      	itt	eq
 80188d8:	011b      	lsleq	r3, r3, #4
 80188da:	3004      	addeq	r0, #4
 80188dc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80188e0:	bf04      	itt	eq
 80188e2:	009b      	lsleq	r3, r3, #2
 80188e4:	3002      	addeq	r0, #2
 80188e6:	2b00      	cmp	r3, #0
 80188e8:	db06      	blt.n	80188f8 <__hi0bits+0x3c>
 80188ea:	005b      	lsls	r3, r3, #1
 80188ec:	d503      	bpl.n	80188f6 <__hi0bits+0x3a>
 80188ee:	3001      	adds	r0, #1
 80188f0:	4770      	bx	lr
 80188f2:	2000      	movs	r0, #0
 80188f4:	e7e8      	b.n	80188c8 <__hi0bits+0xc>
 80188f6:	2020      	movs	r0, #32
 80188f8:	4770      	bx	lr

080188fa <__lo0bits>:
 80188fa:	6803      	ldr	r3, [r0, #0]
 80188fc:	f013 0207 	ands.w	r2, r3, #7
 8018900:	4601      	mov	r1, r0
 8018902:	d00b      	beq.n	801891c <__lo0bits+0x22>
 8018904:	07da      	lsls	r2, r3, #31
 8018906:	d423      	bmi.n	8018950 <__lo0bits+0x56>
 8018908:	0798      	lsls	r0, r3, #30
 801890a:	bf49      	itett	mi
 801890c:	085b      	lsrmi	r3, r3, #1
 801890e:	089b      	lsrpl	r3, r3, #2
 8018910:	2001      	movmi	r0, #1
 8018912:	600b      	strmi	r3, [r1, #0]
 8018914:	bf5c      	itt	pl
 8018916:	600b      	strpl	r3, [r1, #0]
 8018918:	2002      	movpl	r0, #2
 801891a:	4770      	bx	lr
 801891c:	b298      	uxth	r0, r3
 801891e:	b9a8      	cbnz	r0, 801894c <__lo0bits+0x52>
 8018920:	0c1b      	lsrs	r3, r3, #16
 8018922:	2010      	movs	r0, #16
 8018924:	f013 0fff 	tst.w	r3, #255	; 0xff
 8018928:	bf04      	itt	eq
 801892a:	0a1b      	lsreq	r3, r3, #8
 801892c:	3008      	addeq	r0, #8
 801892e:	071a      	lsls	r2, r3, #28
 8018930:	bf04      	itt	eq
 8018932:	091b      	lsreq	r3, r3, #4
 8018934:	3004      	addeq	r0, #4
 8018936:	079a      	lsls	r2, r3, #30
 8018938:	bf04      	itt	eq
 801893a:	089b      	lsreq	r3, r3, #2
 801893c:	3002      	addeq	r0, #2
 801893e:	07da      	lsls	r2, r3, #31
 8018940:	d402      	bmi.n	8018948 <__lo0bits+0x4e>
 8018942:	085b      	lsrs	r3, r3, #1
 8018944:	d006      	beq.n	8018954 <__lo0bits+0x5a>
 8018946:	3001      	adds	r0, #1
 8018948:	600b      	str	r3, [r1, #0]
 801894a:	4770      	bx	lr
 801894c:	4610      	mov	r0, r2
 801894e:	e7e9      	b.n	8018924 <__lo0bits+0x2a>
 8018950:	2000      	movs	r0, #0
 8018952:	4770      	bx	lr
 8018954:	2020      	movs	r0, #32
 8018956:	4770      	bx	lr

08018958 <__i2b>:
 8018958:	b510      	push	{r4, lr}
 801895a:	460c      	mov	r4, r1
 801895c:	2101      	movs	r1, #1
 801895e:	f7ff fee9 	bl	8018734 <_Balloc>
 8018962:	2201      	movs	r2, #1
 8018964:	6144      	str	r4, [r0, #20]
 8018966:	6102      	str	r2, [r0, #16]
 8018968:	bd10      	pop	{r4, pc}

0801896a <__multiply>:
 801896a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801896e:	4614      	mov	r4, r2
 8018970:	690a      	ldr	r2, [r1, #16]
 8018972:	6923      	ldr	r3, [r4, #16]
 8018974:	429a      	cmp	r2, r3
 8018976:	bfb8      	it	lt
 8018978:	460b      	movlt	r3, r1
 801897a:	4688      	mov	r8, r1
 801897c:	bfbc      	itt	lt
 801897e:	46a0      	movlt	r8, r4
 8018980:	461c      	movlt	r4, r3
 8018982:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8018986:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801898a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801898e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8018992:	eb07 0609 	add.w	r6, r7, r9
 8018996:	42b3      	cmp	r3, r6
 8018998:	bfb8      	it	lt
 801899a:	3101      	addlt	r1, #1
 801899c:	f7ff feca 	bl	8018734 <_Balloc>
 80189a0:	f100 0514 	add.w	r5, r0, #20
 80189a4:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80189a8:	462b      	mov	r3, r5
 80189aa:	2200      	movs	r2, #0
 80189ac:	4573      	cmp	r3, lr
 80189ae:	d316      	bcc.n	80189de <__multiply+0x74>
 80189b0:	f104 0214 	add.w	r2, r4, #20
 80189b4:	f108 0114 	add.w	r1, r8, #20
 80189b8:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80189bc:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80189c0:	9300      	str	r3, [sp, #0]
 80189c2:	9b00      	ldr	r3, [sp, #0]
 80189c4:	9201      	str	r2, [sp, #4]
 80189c6:	4293      	cmp	r3, r2
 80189c8:	d80c      	bhi.n	80189e4 <__multiply+0x7a>
 80189ca:	2e00      	cmp	r6, #0
 80189cc:	dd03      	ble.n	80189d6 <__multiply+0x6c>
 80189ce:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80189d2:	2b00      	cmp	r3, #0
 80189d4:	d05d      	beq.n	8018a92 <__multiply+0x128>
 80189d6:	6106      	str	r6, [r0, #16]
 80189d8:	b003      	add	sp, #12
 80189da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80189de:	f843 2b04 	str.w	r2, [r3], #4
 80189e2:	e7e3      	b.n	80189ac <__multiply+0x42>
 80189e4:	f8b2 b000 	ldrh.w	fp, [r2]
 80189e8:	f1bb 0f00 	cmp.w	fp, #0
 80189ec:	d023      	beq.n	8018a36 <__multiply+0xcc>
 80189ee:	4689      	mov	r9, r1
 80189f0:	46ac      	mov	ip, r5
 80189f2:	f04f 0800 	mov.w	r8, #0
 80189f6:	f859 4b04 	ldr.w	r4, [r9], #4
 80189fa:	f8dc a000 	ldr.w	sl, [ip]
 80189fe:	b2a3      	uxth	r3, r4
 8018a00:	fa1f fa8a 	uxth.w	sl, sl
 8018a04:	fb0b a303 	mla	r3, fp, r3, sl
 8018a08:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8018a0c:	f8dc 4000 	ldr.w	r4, [ip]
 8018a10:	4443      	add	r3, r8
 8018a12:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8018a16:	fb0b 840a 	mla	r4, fp, sl, r8
 8018a1a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8018a1e:	46e2      	mov	sl, ip
 8018a20:	b29b      	uxth	r3, r3
 8018a22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8018a26:	454f      	cmp	r7, r9
 8018a28:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8018a2c:	f84a 3b04 	str.w	r3, [sl], #4
 8018a30:	d82b      	bhi.n	8018a8a <__multiply+0x120>
 8018a32:	f8cc 8004 	str.w	r8, [ip, #4]
 8018a36:	9b01      	ldr	r3, [sp, #4]
 8018a38:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8018a3c:	3204      	adds	r2, #4
 8018a3e:	f1ba 0f00 	cmp.w	sl, #0
 8018a42:	d020      	beq.n	8018a86 <__multiply+0x11c>
 8018a44:	682b      	ldr	r3, [r5, #0]
 8018a46:	4689      	mov	r9, r1
 8018a48:	46a8      	mov	r8, r5
 8018a4a:	f04f 0b00 	mov.w	fp, #0
 8018a4e:	f8b9 c000 	ldrh.w	ip, [r9]
 8018a52:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8018a56:	fb0a 440c 	mla	r4, sl, ip, r4
 8018a5a:	445c      	add	r4, fp
 8018a5c:	46c4      	mov	ip, r8
 8018a5e:	b29b      	uxth	r3, r3
 8018a60:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8018a64:	f84c 3b04 	str.w	r3, [ip], #4
 8018a68:	f859 3b04 	ldr.w	r3, [r9], #4
 8018a6c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8018a70:	0c1b      	lsrs	r3, r3, #16
 8018a72:	fb0a b303 	mla	r3, sl, r3, fp
 8018a76:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8018a7a:	454f      	cmp	r7, r9
 8018a7c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8018a80:	d805      	bhi.n	8018a8e <__multiply+0x124>
 8018a82:	f8c8 3004 	str.w	r3, [r8, #4]
 8018a86:	3504      	adds	r5, #4
 8018a88:	e79b      	b.n	80189c2 <__multiply+0x58>
 8018a8a:	46d4      	mov	ip, sl
 8018a8c:	e7b3      	b.n	80189f6 <__multiply+0x8c>
 8018a8e:	46e0      	mov	r8, ip
 8018a90:	e7dd      	b.n	8018a4e <__multiply+0xe4>
 8018a92:	3e01      	subs	r6, #1
 8018a94:	e799      	b.n	80189ca <__multiply+0x60>
	...

08018a98 <__pow5mult>:
 8018a98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018a9c:	4615      	mov	r5, r2
 8018a9e:	f012 0203 	ands.w	r2, r2, #3
 8018aa2:	4606      	mov	r6, r0
 8018aa4:	460f      	mov	r7, r1
 8018aa6:	d007      	beq.n	8018ab8 <__pow5mult+0x20>
 8018aa8:	3a01      	subs	r2, #1
 8018aaa:	4c21      	ldr	r4, [pc, #132]	; (8018b30 <__pow5mult+0x98>)
 8018aac:	2300      	movs	r3, #0
 8018aae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8018ab2:	f7ff fe8a 	bl	80187ca <__multadd>
 8018ab6:	4607      	mov	r7, r0
 8018ab8:	10ad      	asrs	r5, r5, #2
 8018aba:	d035      	beq.n	8018b28 <__pow5mult+0x90>
 8018abc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8018abe:	b93c      	cbnz	r4, 8018ad0 <__pow5mult+0x38>
 8018ac0:	2010      	movs	r0, #16
 8018ac2:	f7ff fe1d 	bl	8018700 <malloc>
 8018ac6:	6270      	str	r0, [r6, #36]	; 0x24
 8018ac8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018acc:	6004      	str	r4, [r0, #0]
 8018ace:	60c4      	str	r4, [r0, #12]
 8018ad0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8018ad4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018ad8:	b94c      	cbnz	r4, 8018aee <__pow5mult+0x56>
 8018ada:	f240 2171 	movw	r1, #625	; 0x271
 8018ade:	4630      	mov	r0, r6
 8018ae0:	f7ff ff3a 	bl	8018958 <__i2b>
 8018ae4:	2300      	movs	r3, #0
 8018ae6:	f8c8 0008 	str.w	r0, [r8, #8]
 8018aea:	4604      	mov	r4, r0
 8018aec:	6003      	str	r3, [r0, #0]
 8018aee:	f04f 0800 	mov.w	r8, #0
 8018af2:	07eb      	lsls	r3, r5, #31
 8018af4:	d50a      	bpl.n	8018b0c <__pow5mult+0x74>
 8018af6:	4639      	mov	r1, r7
 8018af8:	4622      	mov	r2, r4
 8018afa:	4630      	mov	r0, r6
 8018afc:	f7ff ff35 	bl	801896a <__multiply>
 8018b00:	4639      	mov	r1, r7
 8018b02:	4681      	mov	r9, r0
 8018b04:	4630      	mov	r0, r6
 8018b06:	f7ff fe49 	bl	801879c <_Bfree>
 8018b0a:	464f      	mov	r7, r9
 8018b0c:	106d      	asrs	r5, r5, #1
 8018b0e:	d00b      	beq.n	8018b28 <__pow5mult+0x90>
 8018b10:	6820      	ldr	r0, [r4, #0]
 8018b12:	b938      	cbnz	r0, 8018b24 <__pow5mult+0x8c>
 8018b14:	4622      	mov	r2, r4
 8018b16:	4621      	mov	r1, r4
 8018b18:	4630      	mov	r0, r6
 8018b1a:	f7ff ff26 	bl	801896a <__multiply>
 8018b1e:	6020      	str	r0, [r4, #0]
 8018b20:	f8c0 8000 	str.w	r8, [r0]
 8018b24:	4604      	mov	r4, r0
 8018b26:	e7e4      	b.n	8018af2 <__pow5mult+0x5a>
 8018b28:	4638      	mov	r0, r7
 8018b2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018b2e:	bf00      	nop
 8018b30:	0801a730 	.word	0x0801a730

08018b34 <__lshift>:
 8018b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018b38:	460c      	mov	r4, r1
 8018b3a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018b3e:	6923      	ldr	r3, [r4, #16]
 8018b40:	6849      	ldr	r1, [r1, #4]
 8018b42:	eb0a 0903 	add.w	r9, sl, r3
 8018b46:	68a3      	ldr	r3, [r4, #8]
 8018b48:	4607      	mov	r7, r0
 8018b4a:	4616      	mov	r6, r2
 8018b4c:	f109 0501 	add.w	r5, r9, #1
 8018b50:	42ab      	cmp	r3, r5
 8018b52:	db32      	blt.n	8018bba <__lshift+0x86>
 8018b54:	4638      	mov	r0, r7
 8018b56:	f7ff fded 	bl	8018734 <_Balloc>
 8018b5a:	2300      	movs	r3, #0
 8018b5c:	4680      	mov	r8, r0
 8018b5e:	f100 0114 	add.w	r1, r0, #20
 8018b62:	461a      	mov	r2, r3
 8018b64:	4553      	cmp	r3, sl
 8018b66:	db2b      	blt.n	8018bc0 <__lshift+0x8c>
 8018b68:	6920      	ldr	r0, [r4, #16]
 8018b6a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018b6e:	f104 0314 	add.w	r3, r4, #20
 8018b72:	f016 021f 	ands.w	r2, r6, #31
 8018b76:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018b7a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8018b7e:	d025      	beq.n	8018bcc <__lshift+0x98>
 8018b80:	f1c2 0e20 	rsb	lr, r2, #32
 8018b84:	2000      	movs	r0, #0
 8018b86:	681e      	ldr	r6, [r3, #0]
 8018b88:	468a      	mov	sl, r1
 8018b8a:	4096      	lsls	r6, r2
 8018b8c:	4330      	orrs	r0, r6
 8018b8e:	f84a 0b04 	str.w	r0, [sl], #4
 8018b92:	f853 0b04 	ldr.w	r0, [r3], #4
 8018b96:	459c      	cmp	ip, r3
 8018b98:	fa20 f00e 	lsr.w	r0, r0, lr
 8018b9c:	d814      	bhi.n	8018bc8 <__lshift+0x94>
 8018b9e:	6048      	str	r0, [r1, #4]
 8018ba0:	b108      	cbz	r0, 8018ba6 <__lshift+0x72>
 8018ba2:	f109 0502 	add.w	r5, r9, #2
 8018ba6:	3d01      	subs	r5, #1
 8018ba8:	4638      	mov	r0, r7
 8018baa:	f8c8 5010 	str.w	r5, [r8, #16]
 8018bae:	4621      	mov	r1, r4
 8018bb0:	f7ff fdf4 	bl	801879c <_Bfree>
 8018bb4:	4640      	mov	r0, r8
 8018bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018bba:	3101      	adds	r1, #1
 8018bbc:	005b      	lsls	r3, r3, #1
 8018bbe:	e7c7      	b.n	8018b50 <__lshift+0x1c>
 8018bc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8018bc4:	3301      	adds	r3, #1
 8018bc6:	e7cd      	b.n	8018b64 <__lshift+0x30>
 8018bc8:	4651      	mov	r1, sl
 8018bca:	e7dc      	b.n	8018b86 <__lshift+0x52>
 8018bcc:	3904      	subs	r1, #4
 8018bce:	f853 2b04 	ldr.w	r2, [r3], #4
 8018bd2:	f841 2f04 	str.w	r2, [r1, #4]!
 8018bd6:	459c      	cmp	ip, r3
 8018bd8:	d8f9      	bhi.n	8018bce <__lshift+0x9a>
 8018bda:	e7e4      	b.n	8018ba6 <__lshift+0x72>

08018bdc <__mcmp>:
 8018bdc:	6903      	ldr	r3, [r0, #16]
 8018bde:	690a      	ldr	r2, [r1, #16]
 8018be0:	1a9b      	subs	r3, r3, r2
 8018be2:	b530      	push	{r4, r5, lr}
 8018be4:	d10c      	bne.n	8018c00 <__mcmp+0x24>
 8018be6:	0092      	lsls	r2, r2, #2
 8018be8:	3014      	adds	r0, #20
 8018bea:	3114      	adds	r1, #20
 8018bec:	1884      	adds	r4, r0, r2
 8018bee:	4411      	add	r1, r2
 8018bf0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8018bf4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8018bf8:	4295      	cmp	r5, r2
 8018bfa:	d003      	beq.n	8018c04 <__mcmp+0x28>
 8018bfc:	d305      	bcc.n	8018c0a <__mcmp+0x2e>
 8018bfe:	2301      	movs	r3, #1
 8018c00:	4618      	mov	r0, r3
 8018c02:	bd30      	pop	{r4, r5, pc}
 8018c04:	42a0      	cmp	r0, r4
 8018c06:	d3f3      	bcc.n	8018bf0 <__mcmp+0x14>
 8018c08:	e7fa      	b.n	8018c00 <__mcmp+0x24>
 8018c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8018c0e:	e7f7      	b.n	8018c00 <__mcmp+0x24>

08018c10 <__mdiff>:
 8018c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018c14:	460d      	mov	r5, r1
 8018c16:	4607      	mov	r7, r0
 8018c18:	4611      	mov	r1, r2
 8018c1a:	4628      	mov	r0, r5
 8018c1c:	4614      	mov	r4, r2
 8018c1e:	f7ff ffdd 	bl	8018bdc <__mcmp>
 8018c22:	1e06      	subs	r6, r0, #0
 8018c24:	d108      	bne.n	8018c38 <__mdiff+0x28>
 8018c26:	4631      	mov	r1, r6
 8018c28:	4638      	mov	r0, r7
 8018c2a:	f7ff fd83 	bl	8018734 <_Balloc>
 8018c2e:	2301      	movs	r3, #1
 8018c30:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8018c34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018c38:	bfa4      	itt	ge
 8018c3a:	4623      	movge	r3, r4
 8018c3c:	462c      	movge	r4, r5
 8018c3e:	4638      	mov	r0, r7
 8018c40:	6861      	ldr	r1, [r4, #4]
 8018c42:	bfa6      	itte	ge
 8018c44:	461d      	movge	r5, r3
 8018c46:	2600      	movge	r6, #0
 8018c48:	2601      	movlt	r6, #1
 8018c4a:	f7ff fd73 	bl	8018734 <_Balloc>
 8018c4e:	692b      	ldr	r3, [r5, #16]
 8018c50:	60c6      	str	r6, [r0, #12]
 8018c52:	6926      	ldr	r6, [r4, #16]
 8018c54:	f105 0914 	add.w	r9, r5, #20
 8018c58:	f104 0214 	add.w	r2, r4, #20
 8018c5c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8018c60:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8018c64:	f100 0514 	add.w	r5, r0, #20
 8018c68:	f04f 0e00 	mov.w	lr, #0
 8018c6c:	f852 ab04 	ldr.w	sl, [r2], #4
 8018c70:	f859 4b04 	ldr.w	r4, [r9], #4
 8018c74:	fa1e f18a 	uxtah	r1, lr, sl
 8018c78:	b2a3      	uxth	r3, r4
 8018c7a:	1ac9      	subs	r1, r1, r3
 8018c7c:	0c23      	lsrs	r3, r4, #16
 8018c7e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8018c82:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8018c86:	b289      	uxth	r1, r1
 8018c88:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8018c8c:	45c8      	cmp	r8, r9
 8018c8e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8018c92:	4694      	mov	ip, r2
 8018c94:	f845 3b04 	str.w	r3, [r5], #4
 8018c98:	d8e8      	bhi.n	8018c6c <__mdiff+0x5c>
 8018c9a:	45bc      	cmp	ip, r7
 8018c9c:	d304      	bcc.n	8018ca8 <__mdiff+0x98>
 8018c9e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8018ca2:	b183      	cbz	r3, 8018cc6 <__mdiff+0xb6>
 8018ca4:	6106      	str	r6, [r0, #16]
 8018ca6:	e7c5      	b.n	8018c34 <__mdiff+0x24>
 8018ca8:	f85c 1b04 	ldr.w	r1, [ip], #4
 8018cac:	fa1e f381 	uxtah	r3, lr, r1
 8018cb0:	141a      	asrs	r2, r3, #16
 8018cb2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8018cb6:	b29b      	uxth	r3, r3
 8018cb8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018cbc:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8018cc0:	f845 3b04 	str.w	r3, [r5], #4
 8018cc4:	e7e9      	b.n	8018c9a <__mdiff+0x8a>
 8018cc6:	3e01      	subs	r6, #1
 8018cc8:	e7e9      	b.n	8018c9e <__mdiff+0x8e>
	...

08018ccc <__ulp>:
 8018ccc:	4b12      	ldr	r3, [pc, #72]	; (8018d18 <__ulp+0x4c>)
 8018cce:	ee10 2a90 	vmov	r2, s1
 8018cd2:	401a      	ands	r2, r3
 8018cd4:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8018cd8:	2b00      	cmp	r3, #0
 8018cda:	dd04      	ble.n	8018ce6 <__ulp+0x1a>
 8018cdc:	2000      	movs	r0, #0
 8018cde:	4619      	mov	r1, r3
 8018ce0:	ec41 0b10 	vmov	d0, r0, r1
 8018ce4:	4770      	bx	lr
 8018ce6:	425b      	negs	r3, r3
 8018ce8:	151b      	asrs	r3, r3, #20
 8018cea:	2b13      	cmp	r3, #19
 8018cec:	f04f 0000 	mov.w	r0, #0
 8018cf0:	f04f 0100 	mov.w	r1, #0
 8018cf4:	dc04      	bgt.n	8018d00 <__ulp+0x34>
 8018cf6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8018cfa:	fa42 f103 	asr.w	r1, r2, r3
 8018cfe:	e7ef      	b.n	8018ce0 <__ulp+0x14>
 8018d00:	3b14      	subs	r3, #20
 8018d02:	2b1e      	cmp	r3, #30
 8018d04:	f04f 0201 	mov.w	r2, #1
 8018d08:	bfda      	itte	le
 8018d0a:	f1c3 031f 	rsble	r3, r3, #31
 8018d0e:	fa02 f303 	lslle.w	r3, r2, r3
 8018d12:	4613      	movgt	r3, r2
 8018d14:	4618      	mov	r0, r3
 8018d16:	e7e3      	b.n	8018ce0 <__ulp+0x14>
 8018d18:	7ff00000 	.word	0x7ff00000

08018d1c <__b2d>:
 8018d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018d1e:	6905      	ldr	r5, [r0, #16]
 8018d20:	f100 0714 	add.w	r7, r0, #20
 8018d24:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8018d28:	1f2e      	subs	r6, r5, #4
 8018d2a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8018d2e:	4620      	mov	r0, r4
 8018d30:	f7ff fdc4 	bl	80188bc <__hi0bits>
 8018d34:	f1c0 0320 	rsb	r3, r0, #32
 8018d38:	280a      	cmp	r0, #10
 8018d3a:	600b      	str	r3, [r1, #0]
 8018d3c:	f8df c074 	ldr.w	ip, [pc, #116]	; 8018db4 <__b2d+0x98>
 8018d40:	dc14      	bgt.n	8018d6c <__b2d+0x50>
 8018d42:	f1c0 0e0b 	rsb	lr, r0, #11
 8018d46:	fa24 f10e 	lsr.w	r1, r4, lr
 8018d4a:	42b7      	cmp	r7, r6
 8018d4c:	ea41 030c 	orr.w	r3, r1, ip
 8018d50:	bf34      	ite	cc
 8018d52:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018d56:	2100      	movcs	r1, #0
 8018d58:	3015      	adds	r0, #21
 8018d5a:	fa04 f000 	lsl.w	r0, r4, r0
 8018d5e:	fa21 f10e 	lsr.w	r1, r1, lr
 8018d62:	ea40 0201 	orr.w	r2, r0, r1
 8018d66:	ec43 2b10 	vmov	d0, r2, r3
 8018d6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018d6c:	42b7      	cmp	r7, r6
 8018d6e:	bf3a      	itte	cc
 8018d70:	f1a5 0608 	subcc.w	r6, r5, #8
 8018d74:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018d78:	2100      	movcs	r1, #0
 8018d7a:	380b      	subs	r0, #11
 8018d7c:	d015      	beq.n	8018daa <__b2d+0x8e>
 8018d7e:	4084      	lsls	r4, r0
 8018d80:	f1c0 0520 	rsb	r5, r0, #32
 8018d84:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8018d88:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8018d8c:	42be      	cmp	r6, r7
 8018d8e:	fa21 fc05 	lsr.w	ip, r1, r5
 8018d92:	ea44 030c 	orr.w	r3, r4, ip
 8018d96:	bf8c      	ite	hi
 8018d98:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8018d9c:	2400      	movls	r4, #0
 8018d9e:	fa01 f000 	lsl.w	r0, r1, r0
 8018da2:	40ec      	lsrs	r4, r5
 8018da4:	ea40 0204 	orr.w	r2, r0, r4
 8018da8:	e7dd      	b.n	8018d66 <__b2d+0x4a>
 8018daa:	ea44 030c 	orr.w	r3, r4, ip
 8018dae:	460a      	mov	r2, r1
 8018db0:	e7d9      	b.n	8018d66 <__b2d+0x4a>
 8018db2:	bf00      	nop
 8018db4:	3ff00000 	.word	0x3ff00000

08018db8 <__d2b>:
 8018db8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018dbc:	460e      	mov	r6, r1
 8018dbe:	2101      	movs	r1, #1
 8018dc0:	ec59 8b10 	vmov	r8, r9, d0
 8018dc4:	4615      	mov	r5, r2
 8018dc6:	f7ff fcb5 	bl	8018734 <_Balloc>
 8018dca:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8018dce:	4607      	mov	r7, r0
 8018dd0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018dd4:	bb34      	cbnz	r4, 8018e24 <__d2b+0x6c>
 8018dd6:	9301      	str	r3, [sp, #4]
 8018dd8:	f1b8 0300 	subs.w	r3, r8, #0
 8018ddc:	d027      	beq.n	8018e2e <__d2b+0x76>
 8018dde:	a802      	add	r0, sp, #8
 8018de0:	f840 3d08 	str.w	r3, [r0, #-8]!
 8018de4:	f7ff fd89 	bl	80188fa <__lo0bits>
 8018de8:	9900      	ldr	r1, [sp, #0]
 8018dea:	b1f0      	cbz	r0, 8018e2a <__d2b+0x72>
 8018dec:	9a01      	ldr	r2, [sp, #4]
 8018dee:	f1c0 0320 	rsb	r3, r0, #32
 8018df2:	fa02 f303 	lsl.w	r3, r2, r3
 8018df6:	430b      	orrs	r3, r1
 8018df8:	40c2      	lsrs	r2, r0
 8018dfa:	617b      	str	r3, [r7, #20]
 8018dfc:	9201      	str	r2, [sp, #4]
 8018dfe:	9b01      	ldr	r3, [sp, #4]
 8018e00:	61bb      	str	r3, [r7, #24]
 8018e02:	2b00      	cmp	r3, #0
 8018e04:	bf14      	ite	ne
 8018e06:	2102      	movne	r1, #2
 8018e08:	2101      	moveq	r1, #1
 8018e0a:	6139      	str	r1, [r7, #16]
 8018e0c:	b1c4      	cbz	r4, 8018e40 <__d2b+0x88>
 8018e0e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8018e12:	4404      	add	r4, r0
 8018e14:	6034      	str	r4, [r6, #0]
 8018e16:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8018e1a:	6028      	str	r0, [r5, #0]
 8018e1c:	4638      	mov	r0, r7
 8018e1e:	b003      	add	sp, #12
 8018e20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018e24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018e28:	e7d5      	b.n	8018dd6 <__d2b+0x1e>
 8018e2a:	6179      	str	r1, [r7, #20]
 8018e2c:	e7e7      	b.n	8018dfe <__d2b+0x46>
 8018e2e:	a801      	add	r0, sp, #4
 8018e30:	f7ff fd63 	bl	80188fa <__lo0bits>
 8018e34:	9b01      	ldr	r3, [sp, #4]
 8018e36:	617b      	str	r3, [r7, #20]
 8018e38:	2101      	movs	r1, #1
 8018e3a:	6139      	str	r1, [r7, #16]
 8018e3c:	3020      	adds	r0, #32
 8018e3e:	e7e5      	b.n	8018e0c <__d2b+0x54>
 8018e40:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8018e44:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8018e48:	6030      	str	r0, [r6, #0]
 8018e4a:	6918      	ldr	r0, [r3, #16]
 8018e4c:	f7ff fd36 	bl	80188bc <__hi0bits>
 8018e50:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8018e54:	e7e1      	b.n	8018e1a <__d2b+0x62>

08018e56 <__ratio>:
 8018e56:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e5a:	4688      	mov	r8, r1
 8018e5c:	4669      	mov	r1, sp
 8018e5e:	4681      	mov	r9, r0
 8018e60:	f7ff ff5c 	bl	8018d1c <__b2d>
 8018e64:	a901      	add	r1, sp, #4
 8018e66:	4640      	mov	r0, r8
 8018e68:	ec57 6b10 	vmov	r6, r7, d0
 8018e6c:	f7ff ff56 	bl	8018d1c <__b2d>
 8018e70:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018e74:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8018e78:	eba3 0c02 	sub.w	ip, r3, r2
 8018e7c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8018e80:	1a9b      	subs	r3, r3, r2
 8018e82:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8018e86:	ec5b ab10 	vmov	sl, fp, d0
 8018e8a:	2b00      	cmp	r3, #0
 8018e8c:	bfce      	itee	gt
 8018e8e:	463a      	movgt	r2, r7
 8018e90:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8018e94:	465a      	movle	r2, fp
 8018e96:	4659      	mov	r1, fp
 8018e98:	463d      	mov	r5, r7
 8018e9a:	bfd4      	ite	le
 8018e9c:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8018ea0:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8018ea4:	4630      	mov	r0, r6
 8018ea6:	ee10 2a10 	vmov	r2, s0
 8018eaa:	460b      	mov	r3, r1
 8018eac:	4629      	mov	r1, r5
 8018eae:	f7e7 fce5 	bl	800087c <__aeabi_ddiv>
 8018eb2:	ec41 0b10 	vmov	d0, r0, r1
 8018eb6:	b003      	add	sp, #12
 8018eb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018ebc <__copybits>:
 8018ebc:	3901      	subs	r1, #1
 8018ebe:	b510      	push	{r4, lr}
 8018ec0:	1149      	asrs	r1, r1, #5
 8018ec2:	6914      	ldr	r4, [r2, #16]
 8018ec4:	3101      	adds	r1, #1
 8018ec6:	f102 0314 	add.w	r3, r2, #20
 8018eca:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8018ece:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8018ed2:	42a3      	cmp	r3, r4
 8018ed4:	4602      	mov	r2, r0
 8018ed6:	d303      	bcc.n	8018ee0 <__copybits+0x24>
 8018ed8:	2300      	movs	r3, #0
 8018eda:	428a      	cmp	r2, r1
 8018edc:	d305      	bcc.n	8018eea <__copybits+0x2e>
 8018ede:	bd10      	pop	{r4, pc}
 8018ee0:	f853 2b04 	ldr.w	r2, [r3], #4
 8018ee4:	f840 2b04 	str.w	r2, [r0], #4
 8018ee8:	e7f3      	b.n	8018ed2 <__copybits+0x16>
 8018eea:	f842 3b04 	str.w	r3, [r2], #4
 8018eee:	e7f4      	b.n	8018eda <__copybits+0x1e>

08018ef0 <__any_on>:
 8018ef0:	f100 0214 	add.w	r2, r0, #20
 8018ef4:	6900      	ldr	r0, [r0, #16]
 8018ef6:	114b      	asrs	r3, r1, #5
 8018ef8:	4298      	cmp	r0, r3
 8018efa:	b510      	push	{r4, lr}
 8018efc:	db11      	blt.n	8018f22 <__any_on+0x32>
 8018efe:	dd0a      	ble.n	8018f16 <__any_on+0x26>
 8018f00:	f011 011f 	ands.w	r1, r1, #31
 8018f04:	d007      	beq.n	8018f16 <__any_on+0x26>
 8018f06:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8018f0a:	fa24 f001 	lsr.w	r0, r4, r1
 8018f0e:	fa00 f101 	lsl.w	r1, r0, r1
 8018f12:	428c      	cmp	r4, r1
 8018f14:	d10b      	bne.n	8018f2e <__any_on+0x3e>
 8018f16:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018f1a:	4293      	cmp	r3, r2
 8018f1c:	d803      	bhi.n	8018f26 <__any_on+0x36>
 8018f1e:	2000      	movs	r0, #0
 8018f20:	bd10      	pop	{r4, pc}
 8018f22:	4603      	mov	r3, r0
 8018f24:	e7f7      	b.n	8018f16 <__any_on+0x26>
 8018f26:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8018f2a:	2900      	cmp	r1, #0
 8018f2c:	d0f5      	beq.n	8018f1a <__any_on+0x2a>
 8018f2e:	2001      	movs	r0, #1
 8018f30:	e7f6      	b.n	8018f20 <__any_on+0x30>

08018f32 <_calloc_r>:
 8018f32:	b538      	push	{r3, r4, r5, lr}
 8018f34:	fb02 f401 	mul.w	r4, r2, r1
 8018f38:	4621      	mov	r1, r4
 8018f3a:	f000 f857 	bl	8018fec <_malloc_r>
 8018f3e:	4605      	mov	r5, r0
 8018f40:	b118      	cbz	r0, 8018f4a <_calloc_r+0x18>
 8018f42:	4622      	mov	r2, r4
 8018f44:	2100      	movs	r1, #0
 8018f46:	f7fc fcb2 	bl	80158ae <memset>
 8018f4a:	4628      	mov	r0, r5
 8018f4c:	bd38      	pop	{r3, r4, r5, pc}
	...

08018f50 <_free_r>:
 8018f50:	b538      	push	{r3, r4, r5, lr}
 8018f52:	4605      	mov	r5, r0
 8018f54:	2900      	cmp	r1, #0
 8018f56:	d045      	beq.n	8018fe4 <_free_r+0x94>
 8018f58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018f5c:	1f0c      	subs	r4, r1, #4
 8018f5e:	2b00      	cmp	r3, #0
 8018f60:	bfb8      	it	lt
 8018f62:	18e4      	addlt	r4, r4, r3
 8018f64:	f000 fe30 	bl	8019bc8 <__malloc_lock>
 8018f68:	4a1f      	ldr	r2, [pc, #124]	; (8018fe8 <_free_r+0x98>)
 8018f6a:	6813      	ldr	r3, [r2, #0]
 8018f6c:	4610      	mov	r0, r2
 8018f6e:	b933      	cbnz	r3, 8018f7e <_free_r+0x2e>
 8018f70:	6063      	str	r3, [r4, #4]
 8018f72:	6014      	str	r4, [r2, #0]
 8018f74:	4628      	mov	r0, r5
 8018f76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018f7a:	f000 be26 	b.w	8019bca <__malloc_unlock>
 8018f7e:	42a3      	cmp	r3, r4
 8018f80:	d90c      	bls.n	8018f9c <_free_r+0x4c>
 8018f82:	6821      	ldr	r1, [r4, #0]
 8018f84:	1862      	adds	r2, r4, r1
 8018f86:	4293      	cmp	r3, r2
 8018f88:	bf04      	itt	eq
 8018f8a:	681a      	ldreq	r2, [r3, #0]
 8018f8c:	685b      	ldreq	r3, [r3, #4]
 8018f8e:	6063      	str	r3, [r4, #4]
 8018f90:	bf04      	itt	eq
 8018f92:	1852      	addeq	r2, r2, r1
 8018f94:	6022      	streq	r2, [r4, #0]
 8018f96:	6004      	str	r4, [r0, #0]
 8018f98:	e7ec      	b.n	8018f74 <_free_r+0x24>
 8018f9a:	4613      	mov	r3, r2
 8018f9c:	685a      	ldr	r2, [r3, #4]
 8018f9e:	b10a      	cbz	r2, 8018fa4 <_free_r+0x54>
 8018fa0:	42a2      	cmp	r2, r4
 8018fa2:	d9fa      	bls.n	8018f9a <_free_r+0x4a>
 8018fa4:	6819      	ldr	r1, [r3, #0]
 8018fa6:	1858      	adds	r0, r3, r1
 8018fa8:	42a0      	cmp	r0, r4
 8018faa:	d10b      	bne.n	8018fc4 <_free_r+0x74>
 8018fac:	6820      	ldr	r0, [r4, #0]
 8018fae:	4401      	add	r1, r0
 8018fb0:	1858      	adds	r0, r3, r1
 8018fb2:	4282      	cmp	r2, r0
 8018fb4:	6019      	str	r1, [r3, #0]
 8018fb6:	d1dd      	bne.n	8018f74 <_free_r+0x24>
 8018fb8:	6810      	ldr	r0, [r2, #0]
 8018fba:	6852      	ldr	r2, [r2, #4]
 8018fbc:	605a      	str	r2, [r3, #4]
 8018fbe:	4401      	add	r1, r0
 8018fc0:	6019      	str	r1, [r3, #0]
 8018fc2:	e7d7      	b.n	8018f74 <_free_r+0x24>
 8018fc4:	d902      	bls.n	8018fcc <_free_r+0x7c>
 8018fc6:	230c      	movs	r3, #12
 8018fc8:	602b      	str	r3, [r5, #0]
 8018fca:	e7d3      	b.n	8018f74 <_free_r+0x24>
 8018fcc:	6820      	ldr	r0, [r4, #0]
 8018fce:	1821      	adds	r1, r4, r0
 8018fd0:	428a      	cmp	r2, r1
 8018fd2:	bf04      	itt	eq
 8018fd4:	6811      	ldreq	r1, [r2, #0]
 8018fd6:	6852      	ldreq	r2, [r2, #4]
 8018fd8:	6062      	str	r2, [r4, #4]
 8018fda:	bf04      	itt	eq
 8018fdc:	1809      	addeq	r1, r1, r0
 8018fde:	6021      	streq	r1, [r4, #0]
 8018fe0:	605c      	str	r4, [r3, #4]
 8018fe2:	e7c7      	b.n	8018f74 <_free_r+0x24>
 8018fe4:	bd38      	pop	{r3, r4, r5, pc}
 8018fe6:	bf00      	nop
 8018fe8:	2003d514 	.word	0x2003d514

08018fec <_malloc_r>:
 8018fec:	b570      	push	{r4, r5, r6, lr}
 8018fee:	1ccd      	adds	r5, r1, #3
 8018ff0:	f025 0503 	bic.w	r5, r5, #3
 8018ff4:	3508      	adds	r5, #8
 8018ff6:	2d0c      	cmp	r5, #12
 8018ff8:	bf38      	it	cc
 8018ffa:	250c      	movcc	r5, #12
 8018ffc:	2d00      	cmp	r5, #0
 8018ffe:	4606      	mov	r6, r0
 8019000:	db01      	blt.n	8019006 <_malloc_r+0x1a>
 8019002:	42a9      	cmp	r1, r5
 8019004:	d903      	bls.n	801900e <_malloc_r+0x22>
 8019006:	230c      	movs	r3, #12
 8019008:	6033      	str	r3, [r6, #0]
 801900a:	2000      	movs	r0, #0
 801900c:	bd70      	pop	{r4, r5, r6, pc}
 801900e:	f000 fddb 	bl	8019bc8 <__malloc_lock>
 8019012:	4a21      	ldr	r2, [pc, #132]	; (8019098 <_malloc_r+0xac>)
 8019014:	6814      	ldr	r4, [r2, #0]
 8019016:	4621      	mov	r1, r4
 8019018:	b991      	cbnz	r1, 8019040 <_malloc_r+0x54>
 801901a:	4c20      	ldr	r4, [pc, #128]	; (801909c <_malloc_r+0xb0>)
 801901c:	6823      	ldr	r3, [r4, #0]
 801901e:	b91b      	cbnz	r3, 8019028 <_malloc_r+0x3c>
 8019020:	4630      	mov	r0, r6
 8019022:	f000 fc91 	bl	8019948 <_sbrk_r>
 8019026:	6020      	str	r0, [r4, #0]
 8019028:	4629      	mov	r1, r5
 801902a:	4630      	mov	r0, r6
 801902c:	f000 fc8c 	bl	8019948 <_sbrk_r>
 8019030:	1c43      	adds	r3, r0, #1
 8019032:	d124      	bne.n	801907e <_malloc_r+0x92>
 8019034:	230c      	movs	r3, #12
 8019036:	6033      	str	r3, [r6, #0]
 8019038:	4630      	mov	r0, r6
 801903a:	f000 fdc6 	bl	8019bca <__malloc_unlock>
 801903e:	e7e4      	b.n	801900a <_malloc_r+0x1e>
 8019040:	680b      	ldr	r3, [r1, #0]
 8019042:	1b5b      	subs	r3, r3, r5
 8019044:	d418      	bmi.n	8019078 <_malloc_r+0x8c>
 8019046:	2b0b      	cmp	r3, #11
 8019048:	d90f      	bls.n	801906a <_malloc_r+0x7e>
 801904a:	600b      	str	r3, [r1, #0]
 801904c:	50cd      	str	r5, [r1, r3]
 801904e:	18cc      	adds	r4, r1, r3
 8019050:	4630      	mov	r0, r6
 8019052:	f000 fdba 	bl	8019bca <__malloc_unlock>
 8019056:	f104 000b 	add.w	r0, r4, #11
 801905a:	1d23      	adds	r3, r4, #4
 801905c:	f020 0007 	bic.w	r0, r0, #7
 8019060:	1ac3      	subs	r3, r0, r3
 8019062:	d0d3      	beq.n	801900c <_malloc_r+0x20>
 8019064:	425a      	negs	r2, r3
 8019066:	50e2      	str	r2, [r4, r3]
 8019068:	e7d0      	b.n	801900c <_malloc_r+0x20>
 801906a:	428c      	cmp	r4, r1
 801906c:	684b      	ldr	r3, [r1, #4]
 801906e:	bf16      	itet	ne
 8019070:	6063      	strne	r3, [r4, #4]
 8019072:	6013      	streq	r3, [r2, #0]
 8019074:	460c      	movne	r4, r1
 8019076:	e7eb      	b.n	8019050 <_malloc_r+0x64>
 8019078:	460c      	mov	r4, r1
 801907a:	6849      	ldr	r1, [r1, #4]
 801907c:	e7cc      	b.n	8019018 <_malloc_r+0x2c>
 801907e:	1cc4      	adds	r4, r0, #3
 8019080:	f024 0403 	bic.w	r4, r4, #3
 8019084:	42a0      	cmp	r0, r4
 8019086:	d005      	beq.n	8019094 <_malloc_r+0xa8>
 8019088:	1a21      	subs	r1, r4, r0
 801908a:	4630      	mov	r0, r6
 801908c:	f000 fc5c 	bl	8019948 <_sbrk_r>
 8019090:	3001      	adds	r0, #1
 8019092:	d0cf      	beq.n	8019034 <_malloc_r+0x48>
 8019094:	6025      	str	r5, [r4, #0]
 8019096:	e7db      	b.n	8019050 <_malloc_r+0x64>
 8019098:	2003d514 	.word	0x2003d514
 801909c:	2003d518 	.word	0x2003d518

080190a0 <__ssputs_r>:
 80190a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80190a4:	688e      	ldr	r6, [r1, #8]
 80190a6:	429e      	cmp	r6, r3
 80190a8:	4682      	mov	sl, r0
 80190aa:	460c      	mov	r4, r1
 80190ac:	4690      	mov	r8, r2
 80190ae:	4699      	mov	r9, r3
 80190b0:	d837      	bhi.n	8019122 <__ssputs_r+0x82>
 80190b2:	898a      	ldrh	r2, [r1, #12]
 80190b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80190b8:	d031      	beq.n	801911e <__ssputs_r+0x7e>
 80190ba:	6825      	ldr	r5, [r4, #0]
 80190bc:	6909      	ldr	r1, [r1, #16]
 80190be:	1a6f      	subs	r7, r5, r1
 80190c0:	6965      	ldr	r5, [r4, #20]
 80190c2:	2302      	movs	r3, #2
 80190c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80190c8:	fb95 f5f3 	sdiv	r5, r5, r3
 80190cc:	f109 0301 	add.w	r3, r9, #1
 80190d0:	443b      	add	r3, r7
 80190d2:	429d      	cmp	r5, r3
 80190d4:	bf38      	it	cc
 80190d6:	461d      	movcc	r5, r3
 80190d8:	0553      	lsls	r3, r2, #21
 80190da:	d530      	bpl.n	801913e <__ssputs_r+0x9e>
 80190dc:	4629      	mov	r1, r5
 80190de:	f7ff ff85 	bl	8018fec <_malloc_r>
 80190e2:	4606      	mov	r6, r0
 80190e4:	b950      	cbnz	r0, 80190fc <__ssputs_r+0x5c>
 80190e6:	230c      	movs	r3, #12
 80190e8:	f8ca 3000 	str.w	r3, [sl]
 80190ec:	89a3      	ldrh	r3, [r4, #12]
 80190ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80190f2:	81a3      	strh	r3, [r4, #12]
 80190f4:	f04f 30ff 	mov.w	r0, #4294967295
 80190f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80190fc:	463a      	mov	r2, r7
 80190fe:	6921      	ldr	r1, [r4, #16]
 8019100:	f7fc fbca 	bl	8015898 <memcpy>
 8019104:	89a3      	ldrh	r3, [r4, #12]
 8019106:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801910a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801910e:	81a3      	strh	r3, [r4, #12]
 8019110:	6126      	str	r6, [r4, #16]
 8019112:	6165      	str	r5, [r4, #20]
 8019114:	443e      	add	r6, r7
 8019116:	1bed      	subs	r5, r5, r7
 8019118:	6026      	str	r6, [r4, #0]
 801911a:	60a5      	str	r5, [r4, #8]
 801911c:	464e      	mov	r6, r9
 801911e:	454e      	cmp	r6, r9
 8019120:	d900      	bls.n	8019124 <__ssputs_r+0x84>
 8019122:	464e      	mov	r6, r9
 8019124:	4632      	mov	r2, r6
 8019126:	4641      	mov	r1, r8
 8019128:	6820      	ldr	r0, [r4, #0]
 801912a:	f000 fd34 	bl	8019b96 <memmove>
 801912e:	68a3      	ldr	r3, [r4, #8]
 8019130:	1b9b      	subs	r3, r3, r6
 8019132:	60a3      	str	r3, [r4, #8]
 8019134:	6823      	ldr	r3, [r4, #0]
 8019136:	441e      	add	r6, r3
 8019138:	6026      	str	r6, [r4, #0]
 801913a:	2000      	movs	r0, #0
 801913c:	e7dc      	b.n	80190f8 <__ssputs_r+0x58>
 801913e:	462a      	mov	r2, r5
 8019140:	f000 fd44 	bl	8019bcc <_realloc_r>
 8019144:	4606      	mov	r6, r0
 8019146:	2800      	cmp	r0, #0
 8019148:	d1e2      	bne.n	8019110 <__ssputs_r+0x70>
 801914a:	6921      	ldr	r1, [r4, #16]
 801914c:	4650      	mov	r0, sl
 801914e:	f7ff feff 	bl	8018f50 <_free_r>
 8019152:	e7c8      	b.n	80190e6 <__ssputs_r+0x46>

08019154 <_svfiprintf_r>:
 8019154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019158:	461d      	mov	r5, r3
 801915a:	898b      	ldrh	r3, [r1, #12]
 801915c:	061f      	lsls	r7, r3, #24
 801915e:	b09d      	sub	sp, #116	; 0x74
 8019160:	4680      	mov	r8, r0
 8019162:	460c      	mov	r4, r1
 8019164:	4616      	mov	r6, r2
 8019166:	d50f      	bpl.n	8019188 <_svfiprintf_r+0x34>
 8019168:	690b      	ldr	r3, [r1, #16]
 801916a:	b96b      	cbnz	r3, 8019188 <_svfiprintf_r+0x34>
 801916c:	2140      	movs	r1, #64	; 0x40
 801916e:	f7ff ff3d 	bl	8018fec <_malloc_r>
 8019172:	6020      	str	r0, [r4, #0]
 8019174:	6120      	str	r0, [r4, #16]
 8019176:	b928      	cbnz	r0, 8019184 <_svfiprintf_r+0x30>
 8019178:	230c      	movs	r3, #12
 801917a:	f8c8 3000 	str.w	r3, [r8]
 801917e:	f04f 30ff 	mov.w	r0, #4294967295
 8019182:	e0c8      	b.n	8019316 <_svfiprintf_r+0x1c2>
 8019184:	2340      	movs	r3, #64	; 0x40
 8019186:	6163      	str	r3, [r4, #20]
 8019188:	2300      	movs	r3, #0
 801918a:	9309      	str	r3, [sp, #36]	; 0x24
 801918c:	2320      	movs	r3, #32
 801918e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019192:	2330      	movs	r3, #48	; 0x30
 8019194:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019198:	9503      	str	r5, [sp, #12]
 801919a:	f04f 0b01 	mov.w	fp, #1
 801919e:	4637      	mov	r7, r6
 80191a0:	463d      	mov	r5, r7
 80191a2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80191a6:	b10b      	cbz	r3, 80191ac <_svfiprintf_r+0x58>
 80191a8:	2b25      	cmp	r3, #37	; 0x25
 80191aa:	d13e      	bne.n	801922a <_svfiprintf_r+0xd6>
 80191ac:	ebb7 0a06 	subs.w	sl, r7, r6
 80191b0:	d00b      	beq.n	80191ca <_svfiprintf_r+0x76>
 80191b2:	4653      	mov	r3, sl
 80191b4:	4632      	mov	r2, r6
 80191b6:	4621      	mov	r1, r4
 80191b8:	4640      	mov	r0, r8
 80191ba:	f7ff ff71 	bl	80190a0 <__ssputs_r>
 80191be:	3001      	adds	r0, #1
 80191c0:	f000 80a4 	beq.w	801930c <_svfiprintf_r+0x1b8>
 80191c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80191c6:	4453      	add	r3, sl
 80191c8:	9309      	str	r3, [sp, #36]	; 0x24
 80191ca:	783b      	ldrb	r3, [r7, #0]
 80191cc:	2b00      	cmp	r3, #0
 80191ce:	f000 809d 	beq.w	801930c <_svfiprintf_r+0x1b8>
 80191d2:	2300      	movs	r3, #0
 80191d4:	f04f 32ff 	mov.w	r2, #4294967295
 80191d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80191dc:	9304      	str	r3, [sp, #16]
 80191de:	9307      	str	r3, [sp, #28]
 80191e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80191e4:	931a      	str	r3, [sp, #104]	; 0x68
 80191e6:	462f      	mov	r7, r5
 80191e8:	2205      	movs	r2, #5
 80191ea:	f817 1b01 	ldrb.w	r1, [r7], #1
 80191ee:	4850      	ldr	r0, [pc, #320]	; (8019330 <_svfiprintf_r+0x1dc>)
 80191f0:	f7e7 f80e 	bl	8000210 <memchr>
 80191f4:	9b04      	ldr	r3, [sp, #16]
 80191f6:	b9d0      	cbnz	r0, 801922e <_svfiprintf_r+0xda>
 80191f8:	06d9      	lsls	r1, r3, #27
 80191fa:	bf44      	itt	mi
 80191fc:	2220      	movmi	r2, #32
 80191fe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8019202:	071a      	lsls	r2, r3, #28
 8019204:	bf44      	itt	mi
 8019206:	222b      	movmi	r2, #43	; 0x2b
 8019208:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801920c:	782a      	ldrb	r2, [r5, #0]
 801920e:	2a2a      	cmp	r2, #42	; 0x2a
 8019210:	d015      	beq.n	801923e <_svfiprintf_r+0xea>
 8019212:	9a07      	ldr	r2, [sp, #28]
 8019214:	462f      	mov	r7, r5
 8019216:	2000      	movs	r0, #0
 8019218:	250a      	movs	r5, #10
 801921a:	4639      	mov	r1, r7
 801921c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019220:	3b30      	subs	r3, #48	; 0x30
 8019222:	2b09      	cmp	r3, #9
 8019224:	d94d      	bls.n	80192c2 <_svfiprintf_r+0x16e>
 8019226:	b1b8      	cbz	r0, 8019258 <_svfiprintf_r+0x104>
 8019228:	e00f      	b.n	801924a <_svfiprintf_r+0xf6>
 801922a:	462f      	mov	r7, r5
 801922c:	e7b8      	b.n	80191a0 <_svfiprintf_r+0x4c>
 801922e:	4a40      	ldr	r2, [pc, #256]	; (8019330 <_svfiprintf_r+0x1dc>)
 8019230:	1a80      	subs	r0, r0, r2
 8019232:	fa0b f000 	lsl.w	r0, fp, r0
 8019236:	4318      	orrs	r0, r3
 8019238:	9004      	str	r0, [sp, #16]
 801923a:	463d      	mov	r5, r7
 801923c:	e7d3      	b.n	80191e6 <_svfiprintf_r+0x92>
 801923e:	9a03      	ldr	r2, [sp, #12]
 8019240:	1d11      	adds	r1, r2, #4
 8019242:	6812      	ldr	r2, [r2, #0]
 8019244:	9103      	str	r1, [sp, #12]
 8019246:	2a00      	cmp	r2, #0
 8019248:	db01      	blt.n	801924e <_svfiprintf_r+0xfa>
 801924a:	9207      	str	r2, [sp, #28]
 801924c:	e004      	b.n	8019258 <_svfiprintf_r+0x104>
 801924e:	4252      	negs	r2, r2
 8019250:	f043 0302 	orr.w	r3, r3, #2
 8019254:	9207      	str	r2, [sp, #28]
 8019256:	9304      	str	r3, [sp, #16]
 8019258:	783b      	ldrb	r3, [r7, #0]
 801925a:	2b2e      	cmp	r3, #46	; 0x2e
 801925c:	d10c      	bne.n	8019278 <_svfiprintf_r+0x124>
 801925e:	787b      	ldrb	r3, [r7, #1]
 8019260:	2b2a      	cmp	r3, #42	; 0x2a
 8019262:	d133      	bne.n	80192cc <_svfiprintf_r+0x178>
 8019264:	9b03      	ldr	r3, [sp, #12]
 8019266:	1d1a      	adds	r2, r3, #4
 8019268:	681b      	ldr	r3, [r3, #0]
 801926a:	9203      	str	r2, [sp, #12]
 801926c:	2b00      	cmp	r3, #0
 801926e:	bfb8      	it	lt
 8019270:	f04f 33ff 	movlt.w	r3, #4294967295
 8019274:	3702      	adds	r7, #2
 8019276:	9305      	str	r3, [sp, #20]
 8019278:	4d2e      	ldr	r5, [pc, #184]	; (8019334 <_svfiprintf_r+0x1e0>)
 801927a:	7839      	ldrb	r1, [r7, #0]
 801927c:	2203      	movs	r2, #3
 801927e:	4628      	mov	r0, r5
 8019280:	f7e6 ffc6 	bl	8000210 <memchr>
 8019284:	b138      	cbz	r0, 8019296 <_svfiprintf_r+0x142>
 8019286:	2340      	movs	r3, #64	; 0x40
 8019288:	1b40      	subs	r0, r0, r5
 801928a:	fa03 f000 	lsl.w	r0, r3, r0
 801928e:	9b04      	ldr	r3, [sp, #16]
 8019290:	4303      	orrs	r3, r0
 8019292:	3701      	adds	r7, #1
 8019294:	9304      	str	r3, [sp, #16]
 8019296:	7839      	ldrb	r1, [r7, #0]
 8019298:	4827      	ldr	r0, [pc, #156]	; (8019338 <_svfiprintf_r+0x1e4>)
 801929a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801929e:	2206      	movs	r2, #6
 80192a0:	1c7e      	adds	r6, r7, #1
 80192a2:	f7e6 ffb5 	bl	8000210 <memchr>
 80192a6:	2800      	cmp	r0, #0
 80192a8:	d038      	beq.n	801931c <_svfiprintf_r+0x1c8>
 80192aa:	4b24      	ldr	r3, [pc, #144]	; (801933c <_svfiprintf_r+0x1e8>)
 80192ac:	bb13      	cbnz	r3, 80192f4 <_svfiprintf_r+0x1a0>
 80192ae:	9b03      	ldr	r3, [sp, #12]
 80192b0:	3307      	adds	r3, #7
 80192b2:	f023 0307 	bic.w	r3, r3, #7
 80192b6:	3308      	adds	r3, #8
 80192b8:	9303      	str	r3, [sp, #12]
 80192ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80192bc:	444b      	add	r3, r9
 80192be:	9309      	str	r3, [sp, #36]	; 0x24
 80192c0:	e76d      	b.n	801919e <_svfiprintf_r+0x4a>
 80192c2:	fb05 3202 	mla	r2, r5, r2, r3
 80192c6:	2001      	movs	r0, #1
 80192c8:	460f      	mov	r7, r1
 80192ca:	e7a6      	b.n	801921a <_svfiprintf_r+0xc6>
 80192cc:	2300      	movs	r3, #0
 80192ce:	3701      	adds	r7, #1
 80192d0:	9305      	str	r3, [sp, #20]
 80192d2:	4619      	mov	r1, r3
 80192d4:	250a      	movs	r5, #10
 80192d6:	4638      	mov	r0, r7
 80192d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80192dc:	3a30      	subs	r2, #48	; 0x30
 80192de:	2a09      	cmp	r2, #9
 80192e0:	d903      	bls.n	80192ea <_svfiprintf_r+0x196>
 80192e2:	2b00      	cmp	r3, #0
 80192e4:	d0c8      	beq.n	8019278 <_svfiprintf_r+0x124>
 80192e6:	9105      	str	r1, [sp, #20]
 80192e8:	e7c6      	b.n	8019278 <_svfiprintf_r+0x124>
 80192ea:	fb05 2101 	mla	r1, r5, r1, r2
 80192ee:	2301      	movs	r3, #1
 80192f0:	4607      	mov	r7, r0
 80192f2:	e7f0      	b.n	80192d6 <_svfiprintf_r+0x182>
 80192f4:	ab03      	add	r3, sp, #12
 80192f6:	9300      	str	r3, [sp, #0]
 80192f8:	4622      	mov	r2, r4
 80192fa:	4b11      	ldr	r3, [pc, #68]	; (8019340 <_svfiprintf_r+0x1ec>)
 80192fc:	a904      	add	r1, sp, #16
 80192fe:	4640      	mov	r0, r8
 8019300:	f7fc fb72 	bl	80159e8 <_printf_float>
 8019304:	f1b0 3fff 	cmp.w	r0, #4294967295
 8019308:	4681      	mov	r9, r0
 801930a:	d1d6      	bne.n	80192ba <_svfiprintf_r+0x166>
 801930c:	89a3      	ldrh	r3, [r4, #12]
 801930e:	065b      	lsls	r3, r3, #25
 8019310:	f53f af35 	bmi.w	801917e <_svfiprintf_r+0x2a>
 8019314:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019316:	b01d      	add	sp, #116	; 0x74
 8019318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801931c:	ab03      	add	r3, sp, #12
 801931e:	9300      	str	r3, [sp, #0]
 8019320:	4622      	mov	r2, r4
 8019322:	4b07      	ldr	r3, [pc, #28]	; (8019340 <_svfiprintf_r+0x1ec>)
 8019324:	a904      	add	r1, sp, #16
 8019326:	4640      	mov	r0, r8
 8019328:	f7fc fe14 	bl	8015f54 <_printf_i>
 801932c:	e7ea      	b.n	8019304 <_svfiprintf_r+0x1b0>
 801932e:	bf00      	nop
 8019330:	0801a73c 	.word	0x0801a73c
 8019334:	0801a742 	.word	0x0801a742
 8019338:	0801a746 	.word	0x0801a746
 801933c:	080159e9 	.word	0x080159e9
 8019340:	080190a1 	.word	0x080190a1

08019344 <_sungetc_r>:
 8019344:	b538      	push	{r3, r4, r5, lr}
 8019346:	1c4b      	adds	r3, r1, #1
 8019348:	4614      	mov	r4, r2
 801934a:	d103      	bne.n	8019354 <_sungetc_r+0x10>
 801934c:	f04f 35ff 	mov.w	r5, #4294967295
 8019350:	4628      	mov	r0, r5
 8019352:	bd38      	pop	{r3, r4, r5, pc}
 8019354:	8993      	ldrh	r3, [r2, #12]
 8019356:	f023 0320 	bic.w	r3, r3, #32
 801935a:	8193      	strh	r3, [r2, #12]
 801935c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801935e:	6852      	ldr	r2, [r2, #4]
 8019360:	b2cd      	uxtb	r5, r1
 8019362:	b18b      	cbz	r3, 8019388 <_sungetc_r+0x44>
 8019364:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8019366:	4293      	cmp	r3, r2
 8019368:	dd08      	ble.n	801937c <_sungetc_r+0x38>
 801936a:	6823      	ldr	r3, [r4, #0]
 801936c:	1e5a      	subs	r2, r3, #1
 801936e:	6022      	str	r2, [r4, #0]
 8019370:	f803 5c01 	strb.w	r5, [r3, #-1]
 8019374:	6863      	ldr	r3, [r4, #4]
 8019376:	3301      	adds	r3, #1
 8019378:	6063      	str	r3, [r4, #4]
 801937a:	e7e9      	b.n	8019350 <_sungetc_r+0xc>
 801937c:	4621      	mov	r1, r4
 801937e:	f000 fbc3 	bl	8019b08 <__submore>
 8019382:	2800      	cmp	r0, #0
 8019384:	d0f1      	beq.n	801936a <_sungetc_r+0x26>
 8019386:	e7e1      	b.n	801934c <_sungetc_r+0x8>
 8019388:	6921      	ldr	r1, [r4, #16]
 801938a:	6823      	ldr	r3, [r4, #0]
 801938c:	b151      	cbz	r1, 80193a4 <_sungetc_r+0x60>
 801938e:	4299      	cmp	r1, r3
 8019390:	d208      	bcs.n	80193a4 <_sungetc_r+0x60>
 8019392:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8019396:	42a9      	cmp	r1, r5
 8019398:	d104      	bne.n	80193a4 <_sungetc_r+0x60>
 801939a:	3b01      	subs	r3, #1
 801939c:	3201      	adds	r2, #1
 801939e:	6023      	str	r3, [r4, #0]
 80193a0:	6062      	str	r2, [r4, #4]
 80193a2:	e7d5      	b.n	8019350 <_sungetc_r+0xc>
 80193a4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80193a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80193ac:	6363      	str	r3, [r4, #52]	; 0x34
 80193ae:	2303      	movs	r3, #3
 80193b0:	63a3      	str	r3, [r4, #56]	; 0x38
 80193b2:	4623      	mov	r3, r4
 80193b4:	f803 5f46 	strb.w	r5, [r3, #70]!
 80193b8:	6023      	str	r3, [r4, #0]
 80193ba:	2301      	movs	r3, #1
 80193bc:	e7dc      	b.n	8019378 <_sungetc_r+0x34>

080193be <__ssrefill_r>:
 80193be:	b510      	push	{r4, lr}
 80193c0:	460c      	mov	r4, r1
 80193c2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80193c4:	b169      	cbz	r1, 80193e2 <__ssrefill_r+0x24>
 80193c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80193ca:	4299      	cmp	r1, r3
 80193cc:	d001      	beq.n	80193d2 <__ssrefill_r+0x14>
 80193ce:	f7ff fdbf 	bl	8018f50 <_free_r>
 80193d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80193d4:	6063      	str	r3, [r4, #4]
 80193d6:	2000      	movs	r0, #0
 80193d8:	6360      	str	r0, [r4, #52]	; 0x34
 80193da:	b113      	cbz	r3, 80193e2 <__ssrefill_r+0x24>
 80193dc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80193de:	6023      	str	r3, [r4, #0]
 80193e0:	bd10      	pop	{r4, pc}
 80193e2:	6923      	ldr	r3, [r4, #16]
 80193e4:	6023      	str	r3, [r4, #0]
 80193e6:	2300      	movs	r3, #0
 80193e8:	6063      	str	r3, [r4, #4]
 80193ea:	89a3      	ldrh	r3, [r4, #12]
 80193ec:	f043 0320 	orr.w	r3, r3, #32
 80193f0:	81a3      	strh	r3, [r4, #12]
 80193f2:	f04f 30ff 	mov.w	r0, #4294967295
 80193f6:	e7f3      	b.n	80193e0 <__ssrefill_r+0x22>

080193f8 <__ssvfiscanf_r>:
 80193f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80193fc:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8019400:	460c      	mov	r4, r1
 8019402:	2100      	movs	r1, #0
 8019404:	9144      	str	r1, [sp, #272]	; 0x110
 8019406:	9145      	str	r1, [sp, #276]	; 0x114
 8019408:	499f      	ldr	r1, [pc, #636]	; (8019688 <__ssvfiscanf_r+0x290>)
 801940a:	91a0      	str	r1, [sp, #640]	; 0x280
 801940c:	f10d 0804 	add.w	r8, sp, #4
 8019410:	499e      	ldr	r1, [pc, #632]	; (801968c <__ssvfiscanf_r+0x294>)
 8019412:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8019690 <__ssvfiscanf_r+0x298>
 8019416:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801941a:	4606      	mov	r6, r0
 801941c:	4692      	mov	sl, r2
 801941e:	91a1      	str	r1, [sp, #644]	; 0x284
 8019420:	9300      	str	r3, [sp, #0]
 8019422:	270a      	movs	r7, #10
 8019424:	f89a 3000 	ldrb.w	r3, [sl]
 8019428:	2b00      	cmp	r3, #0
 801942a:	f000 812a 	beq.w	8019682 <__ssvfiscanf_r+0x28a>
 801942e:	4655      	mov	r5, sl
 8019430:	f7ff f948 	bl	80186c4 <__locale_ctype_ptr>
 8019434:	f815 bb01 	ldrb.w	fp, [r5], #1
 8019438:	4458      	add	r0, fp
 801943a:	7843      	ldrb	r3, [r0, #1]
 801943c:	f013 0308 	ands.w	r3, r3, #8
 8019440:	d01c      	beq.n	801947c <__ssvfiscanf_r+0x84>
 8019442:	6863      	ldr	r3, [r4, #4]
 8019444:	2b00      	cmp	r3, #0
 8019446:	dd12      	ble.n	801946e <__ssvfiscanf_r+0x76>
 8019448:	f7ff f93c 	bl	80186c4 <__locale_ctype_ptr>
 801944c:	6823      	ldr	r3, [r4, #0]
 801944e:	781a      	ldrb	r2, [r3, #0]
 8019450:	4410      	add	r0, r2
 8019452:	7842      	ldrb	r2, [r0, #1]
 8019454:	0712      	lsls	r2, r2, #28
 8019456:	d401      	bmi.n	801945c <__ssvfiscanf_r+0x64>
 8019458:	46aa      	mov	sl, r5
 801945a:	e7e3      	b.n	8019424 <__ssvfiscanf_r+0x2c>
 801945c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801945e:	3201      	adds	r2, #1
 8019460:	9245      	str	r2, [sp, #276]	; 0x114
 8019462:	6862      	ldr	r2, [r4, #4]
 8019464:	3301      	adds	r3, #1
 8019466:	3a01      	subs	r2, #1
 8019468:	6062      	str	r2, [r4, #4]
 801946a:	6023      	str	r3, [r4, #0]
 801946c:	e7e9      	b.n	8019442 <__ssvfiscanf_r+0x4a>
 801946e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8019470:	4621      	mov	r1, r4
 8019472:	4630      	mov	r0, r6
 8019474:	4798      	blx	r3
 8019476:	2800      	cmp	r0, #0
 8019478:	d0e6      	beq.n	8019448 <__ssvfiscanf_r+0x50>
 801947a:	e7ed      	b.n	8019458 <__ssvfiscanf_r+0x60>
 801947c:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8019480:	f040 8082 	bne.w	8019588 <__ssvfiscanf_r+0x190>
 8019484:	9343      	str	r3, [sp, #268]	; 0x10c
 8019486:	9341      	str	r3, [sp, #260]	; 0x104
 8019488:	f89a 3001 	ldrb.w	r3, [sl, #1]
 801948c:	2b2a      	cmp	r3, #42	; 0x2a
 801948e:	d103      	bne.n	8019498 <__ssvfiscanf_r+0xa0>
 8019490:	2310      	movs	r3, #16
 8019492:	9341      	str	r3, [sp, #260]	; 0x104
 8019494:	f10a 0502 	add.w	r5, sl, #2
 8019498:	46aa      	mov	sl, r5
 801949a:	f815 1b01 	ldrb.w	r1, [r5], #1
 801949e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80194a2:	2a09      	cmp	r2, #9
 80194a4:	d922      	bls.n	80194ec <__ssvfiscanf_r+0xf4>
 80194a6:	2203      	movs	r2, #3
 80194a8:	4879      	ldr	r0, [pc, #484]	; (8019690 <__ssvfiscanf_r+0x298>)
 80194aa:	f7e6 feb1 	bl	8000210 <memchr>
 80194ae:	b138      	cbz	r0, 80194c0 <__ssvfiscanf_r+0xc8>
 80194b0:	eba0 0309 	sub.w	r3, r0, r9
 80194b4:	2001      	movs	r0, #1
 80194b6:	4098      	lsls	r0, r3
 80194b8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80194ba:	4318      	orrs	r0, r3
 80194bc:	9041      	str	r0, [sp, #260]	; 0x104
 80194be:	46aa      	mov	sl, r5
 80194c0:	f89a 3000 	ldrb.w	r3, [sl]
 80194c4:	2b67      	cmp	r3, #103	; 0x67
 80194c6:	f10a 0501 	add.w	r5, sl, #1
 80194ca:	d82b      	bhi.n	8019524 <__ssvfiscanf_r+0x12c>
 80194cc:	2b65      	cmp	r3, #101	; 0x65
 80194ce:	f080 809f 	bcs.w	8019610 <__ssvfiscanf_r+0x218>
 80194d2:	2b47      	cmp	r3, #71	; 0x47
 80194d4:	d810      	bhi.n	80194f8 <__ssvfiscanf_r+0x100>
 80194d6:	2b45      	cmp	r3, #69	; 0x45
 80194d8:	f080 809a 	bcs.w	8019610 <__ssvfiscanf_r+0x218>
 80194dc:	2b00      	cmp	r3, #0
 80194de:	d06c      	beq.n	80195ba <__ssvfiscanf_r+0x1c2>
 80194e0:	2b25      	cmp	r3, #37	; 0x25
 80194e2:	d051      	beq.n	8019588 <__ssvfiscanf_r+0x190>
 80194e4:	2303      	movs	r3, #3
 80194e6:	9347      	str	r3, [sp, #284]	; 0x11c
 80194e8:	9742      	str	r7, [sp, #264]	; 0x108
 80194ea:	e027      	b.n	801953c <__ssvfiscanf_r+0x144>
 80194ec:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80194ee:	fb07 1303 	mla	r3, r7, r3, r1
 80194f2:	3b30      	subs	r3, #48	; 0x30
 80194f4:	9343      	str	r3, [sp, #268]	; 0x10c
 80194f6:	e7cf      	b.n	8019498 <__ssvfiscanf_r+0xa0>
 80194f8:	2b5b      	cmp	r3, #91	; 0x5b
 80194fa:	d06a      	beq.n	80195d2 <__ssvfiscanf_r+0x1da>
 80194fc:	d80c      	bhi.n	8019518 <__ssvfiscanf_r+0x120>
 80194fe:	2b58      	cmp	r3, #88	; 0x58
 8019500:	d1f0      	bne.n	80194e4 <__ssvfiscanf_r+0xec>
 8019502:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8019504:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019508:	9241      	str	r2, [sp, #260]	; 0x104
 801950a:	2210      	movs	r2, #16
 801950c:	9242      	str	r2, [sp, #264]	; 0x108
 801950e:	2b6e      	cmp	r3, #110	; 0x6e
 8019510:	bf8c      	ite	hi
 8019512:	2304      	movhi	r3, #4
 8019514:	2303      	movls	r3, #3
 8019516:	e010      	b.n	801953a <__ssvfiscanf_r+0x142>
 8019518:	2b63      	cmp	r3, #99	; 0x63
 801951a:	d065      	beq.n	80195e8 <__ssvfiscanf_r+0x1f0>
 801951c:	2b64      	cmp	r3, #100	; 0x64
 801951e:	d1e1      	bne.n	80194e4 <__ssvfiscanf_r+0xec>
 8019520:	9742      	str	r7, [sp, #264]	; 0x108
 8019522:	e7f4      	b.n	801950e <__ssvfiscanf_r+0x116>
 8019524:	2b70      	cmp	r3, #112	; 0x70
 8019526:	d04b      	beq.n	80195c0 <__ssvfiscanf_r+0x1c8>
 8019528:	d826      	bhi.n	8019578 <__ssvfiscanf_r+0x180>
 801952a:	2b6e      	cmp	r3, #110	; 0x6e
 801952c:	d062      	beq.n	80195f4 <__ssvfiscanf_r+0x1fc>
 801952e:	d84c      	bhi.n	80195ca <__ssvfiscanf_r+0x1d2>
 8019530:	2b69      	cmp	r3, #105	; 0x69
 8019532:	d1d7      	bne.n	80194e4 <__ssvfiscanf_r+0xec>
 8019534:	2300      	movs	r3, #0
 8019536:	9342      	str	r3, [sp, #264]	; 0x108
 8019538:	2303      	movs	r3, #3
 801953a:	9347      	str	r3, [sp, #284]	; 0x11c
 801953c:	6863      	ldr	r3, [r4, #4]
 801953e:	2b00      	cmp	r3, #0
 8019540:	dd68      	ble.n	8019614 <__ssvfiscanf_r+0x21c>
 8019542:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019544:	0659      	lsls	r1, r3, #25
 8019546:	d407      	bmi.n	8019558 <__ssvfiscanf_r+0x160>
 8019548:	f7ff f8bc 	bl	80186c4 <__locale_ctype_ptr>
 801954c:	6823      	ldr	r3, [r4, #0]
 801954e:	781a      	ldrb	r2, [r3, #0]
 8019550:	4410      	add	r0, r2
 8019552:	7842      	ldrb	r2, [r0, #1]
 8019554:	0712      	lsls	r2, r2, #28
 8019556:	d464      	bmi.n	8019622 <__ssvfiscanf_r+0x22a>
 8019558:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801955a:	2b02      	cmp	r3, #2
 801955c:	dc73      	bgt.n	8019646 <__ssvfiscanf_r+0x24e>
 801955e:	466b      	mov	r3, sp
 8019560:	4622      	mov	r2, r4
 8019562:	a941      	add	r1, sp, #260	; 0x104
 8019564:	4630      	mov	r0, r6
 8019566:	f000 f897 	bl	8019698 <_scanf_chars>
 801956a:	2801      	cmp	r0, #1
 801956c:	f000 8089 	beq.w	8019682 <__ssvfiscanf_r+0x28a>
 8019570:	2802      	cmp	r0, #2
 8019572:	f47f af71 	bne.w	8019458 <__ssvfiscanf_r+0x60>
 8019576:	e01d      	b.n	80195b4 <__ssvfiscanf_r+0x1bc>
 8019578:	2b75      	cmp	r3, #117	; 0x75
 801957a:	d0d1      	beq.n	8019520 <__ssvfiscanf_r+0x128>
 801957c:	2b78      	cmp	r3, #120	; 0x78
 801957e:	d0c0      	beq.n	8019502 <__ssvfiscanf_r+0x10a>
 8019580:	2b73      	cmp	r3, #115	; 0x73
 8019582:	d1af      	bne.n	80194e4 <__ssvfiscanf_r+0xec>
 8019584:	2302      	movs	r3, #2
 8019586:	e7d8      	b.n	801953a <__ssvfiscanf_r+0x142>
 8019588:	6863      	ldr	r3, [r4, #4]
 801958a:	2b00      	cmp	r3, #0
 801958c:	dd0c      	ble.n	80195a8 <__ssvfiscanf_r+0x1b0>
 801958e:	6823      	ldr	r3, [r4, #0]
 8019590:	781a      	ldrb	r2, [r3, #0]
 8019592:	455a      	cmp	r2, fp
 8019594:	d175      	bne.n	8019682 <__ssvfiscanf_r+0x28a>
 8019596:	3301      	adds	r3, #1
 8019598:	6862      	ldr	r2, [r4, #4]
 801959a:	6023      	str	r3, [r4, #0]
 801959c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801959e:	3a01      	subs	r2, #1
 80195a0:	3301      	adds	r3, #1
 80195a2:	6062      	str	r2, [r4, #4]
 80195a4:	9345      	str	r3, [sp, #276]	; 0x114
 80195a6:	e757      	b.n	8019458 <__ssvfiscanf_r+0x60>
 80195a8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80195aa:	4621      	mov	r1, r4
 80195ac:	4630      	mov	r0, r6
 80195ae:	4798      	blx	r3
 80195b0:	2800      	cmp	r0, #0
 80195b2:	d0ec      	beq.n	801958e <__ssvfiscanf_r+0x196>
 80195b4:	9844      	ldr	r0, [sp, #272]	; 0x110
 80195b6:	2800      	cmp	r0, #0
 80195b8:	d159      	bne.n	801966e <__ssvfiscanf_r+0x276>
 80195ba:	f04f 30ff 	mov.w	r0, #4294967295
 80195be:	e05c      	b.n	801967a <__ssvfiscanf_r+0x282>
 80195c0:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80195c2:	f042 0220 	orr.w	r2, r2, #32
 80195c6:	9241      	str	r2, [sp, #260]	; 0x104
 80195c8:	e79b      	b.n	8019502 <__ssvfiscanf_r+0x10a>
 80195ca:	2308      	movs	r3, #8
 80195cc:	9342      	str	r3, [sp, #264]	; 0x108
 80195ce:	2304      	movs	r3, #4
 80195d0:	e7b3      	b.n	801953a <__ssvfiscanf_r+0x142>
 80195d2:	4629      	mov	r1, r5
 80195d4:	4640      	mov	r0, r8
 80195d6:	f000 f9c7 	bl	8019968 <__sccl>
 80195da:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80195dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80195e0:	9341      	str	r3, [sp, #260]	; 0x104
 80195e2:	4605      	mov	r5, r0
 80195e4:	2301      	movs	r3, #1
 80195e6:	e7a8      	b.n	801953a <__ssvfiscanf_r+0x142>
 80195e8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80195ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80195ee:	9341      	str	r3, [sp, #260]	; 0x104
 80195f0:	2300      	movs	r3, #0
 80195f2:	e7a2      	b.n	801953a <__ssvfiscanf_r+0x142>
 80195f4:	9841      	ldr	r0, [sp, #260]	; 0x104
 80195f6:	06c3      	lsls	r3, r0, #27
 80195f8:	f53f af2e 	bmi.w	8019458 <__ssvfiscanf_r+0x60>
 80195fc:	9b00      	ldr	r3, [sp, #0]
 80195fe:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8019600:	1d19      	adds	r1, r3, #4
 8019602:	9100      	str	r1, [sp, #0]
 8019604:	681b      	ldr	r3, [r3, #0]
 8019606:	07c0      	lsls	r0, r0, #31
 8019608:	bf4c      	ite	mi
 801960a:	801a      	strhmi	r2, [r3, #0]
 801960c:	601a      	strpl	r2, [r3, #0]
 801960e:	e723      	b.n	8019458 <__ssvfiscanf_r+0x60>
 8019610:	2305      	movs	r3, #5
 8019612:	e792      	b.n	801953a <__ssvfiscanf_r+0x142>
 8019614:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8019616:	4621      	mov	r1, r4
 8019618:	4630      	mov	r0, r6
 801961a:	4798      	blx	r3
 801961c:	2800      	cmp	r0, #0
 801961e:	d090      	beq.n	8019542 <__ssvfiscanf_r+0x14a>
 8019620:	e7c8      	b.n	80195b4 <__ssvfiscanf_r+0x1bc>
 8019622:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8019624:	3201      	adds	r2, #1
 8019626:	9245      	str	r2, [sp, #276]	; 0x114
 8019628:	6862      	ldr	r2, [r4, #4]
 801962a:	3a01      	subs	r2, #1
 801962c:	2a00      	cmp	r2, #0
 801962e:	6062      	str	r2, [r4, #4]
 8019630:	dd02      	ble.n	8019638 <__ssvfiscanf_r+0x240>
 8019632:	3301      	adds	r3, #1
 8019634:	6023      	str	r3, [r4, #0]
 8019636:	e787      	b.n	8019548 <__ssvfiscanf_r+0x150>
 8019638:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801963a:	4621      	mov	r1, r4
 801963c:	4630      	mov	r0, r6
 801963e:	4798      	blx	r3
 8019640:	2800      	cmp	r0, #0
 8019642:	d081      	beq.n	8019548 <__ssvfiscanf_r+0x150>
 8019644:	e7b6      	b.n	80195b4 <__ssvfiscanf_r+0x1bc>
 8019646:	2b04      	cmp	r3, #4
 8019648:	dc06      	bgt.n	8019658 <__ssvfiscanf_r+0x260>
 801964a:	466b      	mov	r3, sp
 801964c:	4622      	mov	r2, r4
 801964e:	a941      	add	r1, sp, #260	; 0x104
 8019650:	4630      	mov	r0, r6
 8019652:	f000 f885 	bl	8019760 <_scanf_i>
 8019656:	e788      	b.n	801956a <__ssvfiscanf_r+0x172>
 8019658:	4b0e      	ldr	r3, [pc, #56]	; (8019694 <__ssvfiscanf_r+0x29c>)
 801965a:	2b00      	cmp	r3, #0
 801965c:	f43f aefc 	beq.w	8019458 <__ssvfiscanf_r+0x60>
 8019660:	466b      	mov	r3, sp
 8019662:	4622      	mov	r2, r4
 8019664:	a941      	add	r1, sp, #260	; 0x104
 8019666:	4630      	mov	r0, r6
 8019668:	f7fc fd86 	bl	8016178 <_scanf_float>
 801966c:	e77d      	b.n	801956a <__ssvfiscanf_r+0x172>
 801966e:	89a3      	ldrh	r3, [r4, #12]
 8019670:	f013 0f40 	tst.w	r3, #64	; 0x40
 8019674:	bf18      	it	ne
 8019676:	f04f 30ff 	movne.w	r0, #4294967295
 801967a:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 801967e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019682:	9844      	ldr	r0, [sp, #272]	; 0x110
 8019684:	e7f9      	b.n	801967a <__ssvfiscanf_r+0x282>
 8019686:	bf00      	nop
 8019688:	08019345 	.word	0x08019345
 801968c:	080193bf 	.word	0x080193bf
 8019690:	0801a742 	.word	0x0801a742
 8019694:	08016179 	.word	0x08016179

08019698 <_scanf_chars>:
 8019698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801969c:	4615      	mov	r5, r2
 801969e:	688a      	ldr	r2, [r1, #8]
 80196a0:	4680      	mov	r8, r0
 80196a2:	460c      	mov	r4, r1
 80196a4:	b932      	cbnz	r2, 80196b4 <_scanf_chars+0x1c>
 80196a6:	698a      	ldr	r2, [r1, #24]
 80196a8:	2a00      	cmp	r2, #0
 80196aa:	bf14      	ite	ne
 80196ac:	f04f 32ff 	movne.w	r2, #4294967295
 80196b0:	2201      	moveq	r2, #1
 80196b2:	608a      	str	r2, [r1, #8]
 80196b4:	6822      	ldr	r2, [r4, #0]
 80196b6:	06d1      	lsls	r1, r2, #27
 80196b8:	bf5f      	itttt	pl
 80196ba:	681a      	ldrpl	r2, [r3, #0]
 80196bc:	1d11      	addpl	r1, r2, #4
 80196be:	6019      	strpl	r1, [r3, #0]
 80196c0:	6817      	ldrpl	r7, [r2, #0]
 80196c2:	2600      	movs	r6, #0
 80196c4:	69a3      	ldr	r3, [r4, #24]
 80196c6:	b1db      	cbz	r3, 8019700 <_scanf_chars+0x68>
 80196c8:	2b01      	cmp	r3, #1
 80196ca:	d107      	bne.n	80196dc <_scanf_chars+0x44>
 80196cc:	682b      	ldr	r3, [r5, #0]
 80196ce:	6962      	ldr	r2, [r4, #20]
 80196d0:	781b      	ldrb	r3, [r3, #0]
 80196d2:	5cd3      	ldrb	r3, [r2, r3]
 80196d4:	b9a3      	cbnz	r3, 8019700 <_scanf_chars+0x68>
 80196d6:	2e00      	cmp	r6, #0
 80196d8:	d132      	bne.n	8019740 <_scanf_chars+0xa8>
 80196da:	e006      	b.n	80196ea <_scanf_chars+0x52>
 80196dc:	2b02      	cmp	r3, #2
 80196de:	d007      	beq.n	80196f0 <_scanf_chars+0x58>
 80196e0:	2e00      	cmp	r6, #0
 80196e2:	d12d      	bne.n	8019740 <_scanf_chars+0xa8>
 80196e4:	69a3      	ldr	r3, [r4, #24]
 80196e6:	2b01      	cmp	r3, #1
 80196e8:	d12a      	bne.n	8019740 <_scanf_chars+0xa8>
 80196ea:	2001      	movs	r0, #1
 80196ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80196f0:	f7fe ffe8 	bl	80186c4 <__locale_ctype_ptr>
 80196f4:	682b      	ldr	r3, [r5, #0]
 80196f6:	781b      	ldrb	r3, [r3, #0]
 80196f8:	4418      	add	r0, r3
 80196fa:	7843      	ldrb	r3, [r0, #1]
 80196fc:	071b      	lsls	r3, r3, #28
 80196fe:	d4ef      	bmi.n	80196e0 <_scanf_chars+0x48>
 8019700:	6823      	ldr	r3, [r4, #0]
 8019702:	06da      	lsls	r2, r3, #27
 8019704:	bf5e      	ittt	pl
 8019706:	682b      	ldrpl	r3, [r5, #0]
 8019708:	781b      	ldrbpl	r3, [r3, #0]
 801970a:	703b      	strbpl	r3, [r7, #0]
 801970c:	682a      	ldr	r2, [r5, #0]
 801970e:	686b      	ldr	r3, [r5, #4]
 8019710:	f102 0201 	add.w	r2, r2, #1
 8019714:	602a      	str	r2, [r5, #0]
 8019716:	68a2      	ldr	r2, [r4, #8]
 8019718:	f103 33ff 	add.w	r3, r3, #4294967295
 801971c:	f102 32ff 	add.w	r2, r2, #4294967295
 8019720:	606b      	str	r3, [r5, #4]
 8019722:	f106 0601 	add.w	r6, r6, #1
 8019726:	bf58      	it	pl
 8019728:	3701      	addpl	r7, #1
 801972a:	60a2      	str	r2, [r4, #8]
 801972c:	b142      	cbz	r2, 8019740 <_scanf_chars+0xa8>
 801972e:	2b00      	cmp	r3, #0
 8019730:	dcc8      	bgt.n	80196c4 <_scanf_chars+0x2c>
 8019732:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8019736:	4629      	mov	r1, r5
 8019738:	4640      	mov	r0, r8
 801973a:	4798      	blx	r3
 801973c:	2800      	cmp	r0, #0
 801973e:	d0c1      	beq.n	80196c4 <_scanf_chars+0x2c>
 8019740:	6823      	ldr	r3, [r4, #0]
 8019742:	f013 0310 	ands.w	r3, r3, #16
 8019746:	d105      	bne.n	8019754 <_scanf_chars+0xbc>
 8019748:	68e2      	ldr	r2, [r4, #12]
 801974a:	3201      	adds	r2, #1
 801974c:	60e2      	str	r2, [r4, #12]
 801974e:	69a2      	ldr	r2, [r4, #24]
 8019750:	b102      	cbz	r2, 8019754 <_scanf_chars+0xbc>
 8019752:	703b      	strb	r3, [r7, #0]
 8019754:	6923      	ldr	r3, [r4, #16]
 8019756:	441e      	add	r6, r3
 8019758:	6126      	str	r6, [r4, #16]
 801975a:	2000      	movs	r0, #0
 801975c:	e7c6      	b.n	80196ec <_scanf_chars+0x54>
	...

08019760 <_scanf_i>:
 8019760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019764:	469a      	mov	sl, r3
 8019766:	4b74      	ldr	r3, [pc, #464]	; (8019938 <_scanf_i+0x1d8>)
 8019768:	460c      	mov	r4, r1
 801976a:	4683      	mov	fp, r0
 801976c:	4616      	mov	r6, r2
 801976e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8019772:	b087      	sub	sp, #28
 8019774:	ab03      	add	r3, sp, #12
 8019776:	68a7      	ldr	r7, [r4, #8]
 8019778:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801977c:	4b6f      	ldr	r3, [pc, #444]	; (801993c <_scanf_i+0x1dc>)
 801977e:	69a1      	ldr	r1, [r4, #24]
 8019780:	4a6f      	ldr	r2, [pc, #444]	; (8019940 <_scanf_i+0x1e0>)
 8019782:	2903      	cmp	r1, #3
 8019784:	bf08      	it	eq
 8019786:	461a      	moveq	r2, r3
 8019788:	1e7b      	subs	r3, r7, #1
 801978a:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 801978e:	bf84      	itt	hi
 8019790:	f240 135d 	movwhi	r3, #349	; 0x15d
 8019794:	60a3      	strhi	r3, [r4, #8]
 8019796:	6823      	ldr	r3, [r4, #0]
 8019798:	9200      	str	r2, [sp, #0]
 801979a:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801979e:	bf88      	it	hi
 80197a0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80197a4:	f104 091c 	add.w	r9, r4, #28
 80197a8:	6023      	str	r3, [r4, #0]
 80197aa:	bf8c      	ite	hi
 80197ac:	197f      	addhi	r7, r7, r5
 80197ae:	2700      	movls	r7, #0
 80197b0:	464b      	mov	r3, r9
 80197b2:	f04f 0800 	mov.w	r8, #0
 80197b6:	9301      	str	r3, [sp, #4]
 80197b8:	6831      	ldr	r1, [r6, #0]
 80197ba:	ab03      	add	r3, sp, #12
 80197bc:	2202      	movs	r2, #2
 80197be:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80197c2:	7809      	ldrb	r1, [r1, #0]
 80197c4:	f7e6 fd24 	bl	8000210 <memchr>
 80197c8:	9b01      	ldr	r3, [sp, #4]
 80197ca:	b330      	cbz	r0, 801981a <_scanf_i+0xba>
 80197cc:	f1b8 0f01 	cmp.w	r8, #1
 80197d0:	d15a      	bne.n	8019888 <_scanf_i+0x128>
 80197d2:	6862      	ldr	r2, [r4, #4]
 80197d4:	b92a      	cbnz	r2, 80197e2 <_scanf_i+0x82>
 80197d6:	6822      	ldr	r2, [r4, #0]
 80197d8:	2108      	movs	r1, #8
 80197da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80197de:	6061      	str	r1, [r4, #4]
 80197e0:	6022      	str	r2, [r4, #0]
 80197e2:	6822      	ldr	r2, [r4, #0]
 80197e4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80197e8:	6022      	str	r2, [r4, #0]
 80197ea:	68a2      	ldr	r2, [r4, #8]
 80197ec:	1e51      	subs	r1, r2, #1
 80197ee:	60a1      	str	r1, [r4, #8]
 80197f0:	b19a      	cbz	r2, 801981a <_scanf_i+0xba>
 80197f2:	6832      	ldr	r2, [r6, #0]
 80197f4:	1c51      	adds	r1, r2, #1
 80197f6:	6031      	str	r1, [r6, #0]
 80197f8:	7812      	ldrb	r2, [r2, #0]
 80197fa:	701a      	strb	r2, [r3, #0]
 80197fc:	1c5d      	adds	r5, r3, #1
 80197fe:	6873      	ldr	r3, [r6, #4]
 8019800:	3b01      	subs	r3, #1
 8019802:	2b00      	cmp	r3, #0
 8019804:	6073      	str	r3, [r6, #4]
 8019806:	dc07      	bgt.n	8019818 <_scanf_i+0xb8>
 8019808:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801980c:	4631      	mov	r1, r6
 801980e:	4658      	mov	r0, fp
 8019810:	4798      	blx	r3
 8019812:	2800      	cmp	r0, #0
 8019814:	f040 8086 	bne.w	8019924 <_scanf_i+0x1c4>
 8019818:	462b      	mov	r3, r5
 801981a:	f108 0801 	add.w	r8, r8, #1
 801981e:	f1b8 0f03 	cmp.w	r8, #3
 8019822:	d1c8      	bne.n	80197b6 <_scanf_i+0x56>
 8019824:	6862      	ldr	r2, [r4, #4]
 8019826:	b90a      	cbnz	r2, 801982c <_scanf_i+0xcc>
 8019828:	220a      	movs	r2, #10
 801982a:	6062      	str	r2, [r4, #4]
 801982c:	6862      	ldr	r2, [r4, #4]
 801982e:	4945      	ldr	r1, [pc, #276]	; (8019944 <_scanf_i+0x1e4>)
 8019830:	6960      	ldr	r0, [r4, #20]
 8019832:	9301      	str	r3, [sp, #4]
 8019834:	1a89      	subs	r1, r1, r2
 8019836:	f000 f897 	bl	8019968 <__sccl>
 801983a:	9b01      	ldr	r3, [sp, #4]
 801983c:	f04f 0800 	mov.w	r8, #0
 8019840:	461d      	mov	r5, r3
 8019842:	68a3      	ldr	r3, [r4, #8]
 8019844:	6822      	ldr	r2, [r4, #0]
 8019846:	2b00      	cmp	r3, #0
 8019848:	d03a      	beq.n	80198c0 <_scanf_i+0x160>
 801984a:	6831      	ldr	r1, [r6, #0]
 801984c:	6960      	ldr	r0, [r4, #20]
 801984e:	f891 c000 	ldrb.w	ip, [r1]
 8019852:	f810 000c 	ldrb.w	r0, [r0, ip]
 8019856:	2800      	cmp	r0, #0
 8019858:	d032      	beq.n	80198c0 <_scanf_i+0x160>
 801985a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801985e:	d121      	bne.n	80198a4 <_scanf_i+0x144>
 8019860:	0510      	lsls	r0, r2, #20
 8019862:	d51f      	bpl.n	80198a4 <_scanf_i+0x144>
 8019864:	f108 0801 	add.w	r8, r8, #1
 8019868:	b117      	cbz	r7, 8019870 <_scanf_i+0x110>
 801986a:	3301      	adds	r3, #1
 801986c:	3f01      	subs	r7, #1
 801986e:	60a3      	str	r3, [r4, #8]
 8019870:	6873      	ldr	r3, [r6, #4]
 8019872:	3b01      	subs	r3, #1
 8019874:	2b00      	cmp	r3, #0
 8019876:	6073      	str	r3, [r6, #4]
 8019878:	dd1b      	ble.n	80198b2 <_scanf_i+0x152>
 801987a:	6833      	ldr	r3, [r6, #0]
 801987c:	3301      	adds	r3, #1
 801987e:	6033      	str	r3, [r6, #0]
 8019880:	68a3      	ldr	r3, [r4, #8]
 8019882:	3b01      	subs	r3, #1
 8019884:	60a3      	str	r3, [r4, #8]
 8019886:	e7dc      	b.n	8019842 <_scanf_i+0xe2>
 8019888:	f1b8 0f02 	cmp.w	r8, #2
 801988c:	d1ad      	bne.n	80197ea <_scanf_i+0x8a>
 801988e:	6822      	ldr	r2, [r4, #0]
 8019890:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8019894:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8019898:	d1bf      	bne.n	801981a <_scanf_i+0xba>
 801989a:	2110      	movs	r1, #16
 801989c:	6061      	str	r1, [r4, #4]
 801989e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80198a2:	e7a1      	b.n	80197e8 <_scanf_i+0x88>
 80198a4:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80198a8:	6022      	str	r2, [r4, #0]
 80198aa:	780b      	ldrb	r3, [r1, #0]
 80198ac:	702b      	strb	r3, [r5, #0]
 80198ae:	3501      	adds	r5, #1
 80198b0:	e7de      	b.n	8019870 <_scanf_i+0x110>
 80198b2:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80198b6:	4631      	mov	r1, r6
 80198b8:	4658      	mov	r0, fp
 80198ba:	4798      	blx	r3
 80198bc:	2800      	cmp	r0, #0
 80198be:	d0df      	beq.n	8019880 <_scanf_i+0x120>
 80198c0:	6823      	ldr	r3, [r4, #0]
 80198c2:	05d9      	lsls	r1, r3, #23
 80198c4:	d50c      	bpl.n	80198e0 <_scanf_i+0x180>
 80198c6:	454d      	cmp	r5, r9
 80198c8:	d908      	bls.n	80198dc <_scanf_i+0x17c>
 80198ca:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80198ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80198d2:	4632      	mov	r2, r6
 80198d4:	4658      	mov	r0, fp
 80198d6:	4798      	blx	r3
 80198d8:	1e6f      	subs	r7, r5, #1
 80198da:	463d      	mov	r5, r7
 80198dc:	454d      	cmp	r5, r9
 80198de:	d029      	beq.n	8019934 <_scanf_i+0x1d4>
 80198e0:	6822      	ldr	r2, [r4, #0]
 80198e2:	f012 0210 	ands.w	r2, r2, #16
 80198e6:	d113      	bne.n	8019910 <_scanf_i+0x1b0>
 80198e8:	702a      	strb	r2, [r5, #0]
 80198ea:	6863      	ldr	r3, [r4, #4]
 80198ec:	9e00      	ldr	r6, [sp, #0]
 80198ee:	4649      	mov	r1, r9
 80198f0:	4658      	mov	r0, fp
 80198f2:	47b0      	blx	r6
 80198f4:	f8da 3000 	ldr.w	r3, [sl]
 80198f8:	6821      	ldr	r1, [r4, #0]
 80198fa:	1d1a      	adds	r2, r3, #4
 80198fc:	f8ca 2000 	str.w	r2, [sl]
 8019900:	f011 0f20 	tst.w	r1, #32
 8019904:	681b      	ldr	r3, [r3, #0]
 8019906:	d010      	beq.n	801992a <_scanf_i+0x1ca>
 8019908:	6018      	str	r0, [r3, #0]
 801990a:	68e3      	ldr	r3, [r4, #12]
 801990c:	3301      	adds	r3, #1
 801990e:	60e3      	str	r3, [r4, #12]
 8019910:	eba5 0509 	sub.w	r5, r5, r9
 8019914:	44a8      	add	r8, r5
 8019916:	6925      	ldr	r5, [r4, #16]
 8019918:	4445      	add	r5, r8
 801991a:	6125      	str	r5, [r4, #16]
 801991c:	2000      	movs	r0, #0
 801991e:	b007      	add	sp, #28
 8019920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019924:	f04f 0800 	mov.w	r8, #0
 8019928:	e7ca      	b.n	80198c0 <_scanf_i+0x160>
 801992a:	07ca      	lsls	r2, r1, #31
 801992c:	bf4c      	ite	mi
 801992e:	8018      	strhmi	r0, [r3, #0]
 8019930:	6018      	strpl	r0, [r3, #0]
 8019932:	e7ea      	b.n	801990a <_scanf_i+0x1aa>
 8019934:	2001      	movs	r0, #1
 8019936:	e7f2      	b.n	801991e <_scanf_i+0x1be>
 8019938:	0801a29c 	.word	0x0801a29c
 801993c:	08017381 	.word	0x08017381
 8019940:	08019ae5 	.word	0x08019ae5
 8019944:	0801a75d 	.word	0x0801a75d

08019948 <_sbrk_r>:
 8019948:	b538      	push	{r3, r4, r5, lr}
 801994a:	4c06      	ldr	r4, [pc, #24]	; (8019964 <_sbrk_r+0x1c>)
 801994c:	2300      	movs	r3, #0
 801994e:	4605      	mov	r5, r0
 8019950:	4608      	mov	r0, r1
 8019952:	6023      	str	r3, [r4, #0]
 8019954:	f7ed fe10 	bl	8007578 <_sbrk>
 8019958:	1c43      	adds	r3, r0, #1
 801995a:	d102      	bne.n	8019962 <_sbrk_r+0x1a>
 801995c:	6823      	ldr	r3, [r4, #0]
 801995e:	b103      	cbz	r3, 8019962 <_sbrk_r+0x1a>
 8019960:	602b      	str	r3, [r5, #0]
 8019962:	bd38      	pop	{r3, r4, r5, pc}
 8019964:	20041eb4 	.word	0x20041eb4

08019968 <__sccl>:
 8019968:	b570      	push	{r4, r5, r6, lr}
 801996a:	780b      	ldrb	r3, [r1, #0]
 801996c:	2b5e      	cmp	r3, #94	; 0x5e
 801996e:	bf13      	iteet	ne
 8019970:	1c4a      	addne	r2, r1, #1
 8019972:	1c8a      	addeq	r2, r1, #2
 8019974:	784b      	ldrbeq	r3, [r1, #1]
 8019976:	2100      	movne	r1, #0
 8019978:	bf08      	it	eq
 801997a:	2101      	moveq	r1, #1
 801997c:	1e44      	subs	r4, r0, #1
 801997e:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8019982:	f804 1f01 	strb.w	r1, [r4, #1]!
 8019986:	42ac      	cmp	r4, r5
 8019988:	d1fb      	bne.n	8019982 <__sccl+0x1a>
 801998a:	b913      	cbnz	r3, 8019992 <__sccl+0x2a>
 801998c:	3a01      	subs	r2, #1
 801998e:	4610      	mov	r0, r2
 8019990:	bd70      	pop	{r4, r5, r6, pc}
 8019992:	f081 0401 	eor.w	r4, r1, #1
 8019996:	54c4      	strb	r4, [r0, r3]
 8019998:	1c51      	adds	r1, r2, #1
 801999a:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 801999e:	2d2d      	cmp	r5, #45	; 0x2d
 80199a0:	f101 36ff 	add.w	r6, r1, #4294967295
 80199a4:	460a      	mov	r2, r1
 80199a6:	d006      	beq.n	80199b6 <__sccl+0x4e>
 80199a8:	2d5d      	cmp	r5, #93	; 0x5d
 80199aa:	d0f0      	beq.n	801998e <__sccl+0x26>
 80199ac:	b90d      	cbnz	r5, 80199b2 <__sccl+0x4a>
 80199ae:	4632      	mov	r2, r6
 80199b0:	e7ed      	b.n	801998e <__sccl+0x26>
 80199b2:	462b      	mov	r3, r5
 80199b4:	e7ef      	b.n	8019996 <__sccl+0x2e>
 80199b6:	780e      	ldrb	r6, [r1, #0]
 80199b8:	2e5d      	cmp	r6, #93	; 0x5d
 80199ba:	d0fa      	beq.n	80199b2 <__sccl+0x4a>
 80199bc:	42b3      	cmp	r3, r6
 80199be:	dcf8      	bgt.n	80199b2 <__sccl+0x4a>
 80199c0:	3301      	adds	r3, #1
 80199c2:	429e      	cmp	r6, r3
 80199c4:	54c4      	strb	r4, [r0, r3]
 80199c6:	dcfb      	bgt.n	80199c0 <__sccl+0x58>
 80199c8:	3102      	adds	r1, #2
 80199ca:	e7e6      	b.n	801999a <__sccl+0x32>

080199cc <strncmp>:
 80199cc:	b510      	push	{r4, lr}
 80199ce:	b16a      	cbz	r2, 80199ec <strncmp+0x20>
 80199d0:	3901      	subs	r1, #1
 80199d2:	1884      	adds	r4, r0, r2
 80199d4:	f810 3b01 	ldrb.w	r3, [r0], #1
 80199d8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80199dc:	4293      	cmp	r3, r2
 80199de:	d103      	bne.n	80199e8 <strncmp+0x1c>
 80199e0:	42a0      	cmp	r0, r4
 80199e2:	d001      	beq.n	80199e8 <strncmp+0x1c>
 80199e4:	2b00      	cmp	r3, #0
 80199e6:	d1f5      	bne.n	80199d4 <strncmp+0x8>
 80199e8:	1a98      	subs	r0, r3, r2
 80199ea:	bd10      	pop	{r4, pc}
 80199ec:	4610      	mov	r0, r2
 80199ee:	e7fc      	b.n	80199ea <strncmp+0x1e>

080199f0 <_strtoul_l.isra.0>:
 80199f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80199f4:	4680      	mov	r8, r0
 80199f6:	4689      	mov	r9, r1
 80199f8:	4692      	mov	sl, r2
 80199fa:	461e      	mov	r6, r3
 80199fc:	460f      	mov	r7, r1
 80199fe:	463d      	mov	r5, r7
 8019a00:	9808      	ldr	r0, [sp, #32]
 8019a02:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019a06:	f7fe fe59 	bl	80186bc <__locale_ctype_ptr_l>
 8019a0a:	4420      	add	r0, r4
 8019a0c:	7843      	ldrb	r3, [r0, #1]
 8019a0e:	f013 0308 	ands.w	r3, r3, #8
 8019a12:	d130      	bne.n	8019a76 <_strtoul_l.isra.0+0x86>
 8019a14:	2c2d      	cmp	r4, #45	; 0x2d
 8019a16:	d130      	bne.n	8019a7a <_strtoul_l.isra.0+0x8a>
 8019a18:	787c      	ldrb	r4, [r7, #1]
 8019a1a:	1cbd      	adds	r5, r7, #2
 8019a1c:	2101      	movs	r1, #1
 8019a1e:	2e00      	cmp	r6, #0
 8019a20:	d05c      	beq.n	8019adc <_strtoul_l.isra.0+0xec>
 8019a22:	2e10      	cmp	r6, #16
 8019a24:	d109      	bne.n	8019a3a <_strtoul_l.isra.0+0x4a>
 8019a26:	2c30      	cmp	r4, #48	; 0x30
 8019a28:	d107      	bne.n	8019a3a <_strtoul_l.isra.0+0x4a>
 8019a2a:	782b      	ldrb	r3, [r5, #0]
 8019a2c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8019a30:	2b58      	cmp	r3, #88	; 0x58
 8019a32:	d14e      	bne.n	8019ad2 <_strtoul_l.isra.0+0xe2>
 8019a34:	786c      	ldrb	r4, [r5, #1]
 8019a36:	2610      	movs	r6, #16
 8019a38:	3502      	adds	r5, #2
 8019a3a:	f04f 32ff 	mov.w	r2, #4294967295
 8019a3e:	2300      	movs	r3, #0
 8019a40:	fbb2 f2f6 	udiv	r2, r2, r6
 8019a44:	fb06 fc02 	mul.w	ip, r6, r2
 8019a48:	ea6f 0c0c 	mvn.w	ip, ip
 8019a4c:	4618      	mov	r0, r3
 8019a4e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8019a52:	2f09      	cmp	r7, #9
 8019a54:	d817      	bhi.n	8019a86 <_strtoul_l.isra.0+0x96>
 8019a56:	463c      	mov	r4, r7
 8019a58:	42a6      	cmp	r6, r4
 8019a5a:	dd23      	ble.n	8019aa4 <_strtoul_l.isra.0+0xb4>
 8019a5c:	2b00      	cmp	r3, #0
 8019a5e:	db1e      	blt.n	8019a9e <_strtoul_l.isra.0+0xae>
 8019a60:	4282      	cmp	r2, r0
 8019a62:	d31c      	bcc.n	8019a9e <_strtoul_l.isra.0+0xae>
 8019a64:	d101      	bne.n	8019a6a <_strtoul_l.isra.0+0x7a>
 8019a66:	45a4      	cmp	ip, r4
 8019a68:	db19      	blt.n	8019a9e <_strtoul_l.isra.0+0xae>
 8019a6a:	fb00 4006 	mla	r0, r0, r6, r4
 8019a6e:	2301      	movs	r3, #1
 8019a70:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019a74:	e7eb      	b.n	8019a4e <_strtoul_l.isra.0+0x5e>
 8019a76:	462f      	mov	r7, r5
 8019a78:	e7c1      	b.n	80199fe <_strtoul_l.isra.0+0xe>
 8019a7a:	2c2b      	cmp	r4, #43	; 0x2b
 8019a7c:	bf04      	itt	eq
 8019a7e:	1cbd      	addeq	r5, r7, #2
 8019a80:	787c      	ldrbeq	r4, [r7, #1]
 8019a82:	4619      	mov	r1, r3
 8019a84:	e7cb      	b.n	8019a1e <_strtoul_l.isra.0+0x2e>
 8019a86:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8019a8a:	2f19      	cmp	r7, #25
 8019a8c:	d801      	bhi.n	8019a92 <_strtoul_l.isra.0+0xa2>
 8019a8e:	3c37      	subs	r4, #55	; 0x37
 8019a90:	e7e2      	b.n	8019a58 <_strtoul_l.isra.0+0x68>
 8019a92:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8019a96:	2f19      	cmp	r7, #25
 8019a98:	d804      	bhi.n	8019aa4 <_strtoul_l.isra.0+0xb4>
 8019a9a:	3c57      	subs	r4, #87	; 0x57
 8019a9c:	e7dc      	b.n	8019a58 <_strtoul_l.isra.0+0x68>
 8019a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8019aa2:	e7e5      	b.n	8019a70 <_strtoul_l.isra.0+0x80>
 8019aa4:	2b00      	cmp	r3, #0
 8019aa6:	da09      	bge.n	8019abc <_strtoul_l.isra.0+0xcc>
 8019aa8:	2322      	movs	r3, #34	; 0x22
 8019aaa:	f8c8 3000 	str.w	r3, [r8]
 8019aae:	f04f 30ff 	mov.w	r0, #4294967295
 8019ab2:	f1ba 0f00 	cmp.w	sl, #0
 8019ab6:	d107      	bne.n	8019ac8 <_strtoul_l.isra.0+0xd8>
 8019ab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019abc:	b101      	cbz	r1, 8019ac0 <_strtoul_l.isra.0+0xd0>
 8019abe:	4240      	negs	r0, r0
 8019ac0:	f1ba 0f00 	cmp.w	sl, #0
 8019ac4:	d0f8      	beq.n	8019ab8 <_strtoul_l.isra.0+0xc8>
 8019ac6:	b10b      	cbz	r3, 8019acc <_strtoul_l.isra.0+0xdc>
 8019ac8:	f105 39ff 	add.w	r9, r5, #4294967295
 8019acc:	f8ca 9000 	str.w	r9, [sl]
 8019ad0:	e7f2      	b.n	8019ab8 <_strtoul_l.isra.0+0xc8>
 8019ad2:	2430      	movs	r4, #48	; 0x30
 8019ad4:	2e00      	cmp	r6, #0
 8019ad6:	d1b0      	bne.n	8019a3a <_strtoul_l.isra.0+0x4a>
 8019ad8:	2608      	movs	r6, #8
 8019ada:	e7ae      	b.n	8019a3a <_strtoul_l.isra.0+0x4a>
 8019adc:	2c30      	cmp	r4, #48	; 0x30
 8019ade:	d0a4      	beq.n	8019a2a <_strtoul_l.isra.0+0x3a>
 8019ae0:	260a      	movs	r6, #10
 8019ae2:	e7aa      	b.n	8019a3a <_strtoul_l.isra.0+0x4a>

08019ae4 <_strtoul_r>:
 8019ae4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019ae6:	4c06      	ldr	r4, [pc, #24]	; (8019b00 <_strtoul_r+0x1c>)
 8019ae8:	4d06      	ldr	r5, [pc, #24]	; (8019b04 <_strtoul_r+0x20>)
 8019aea:	6824      	ldr	r4, [r4, #0]
 8019aec:	6a24      	ldr	r4, [r4, #32]
 8019aee:	2c00      	cmp	r4, #0
 8019af0:	bf08      	it	eq
 8019af2:	462c      	moveq	r4, r5
 8019af4:	9400      	str	r4, [sp, #0]
 8019af6:	f7ff ff7b 	bl	80199f0 <_strtoul_l.isra.0>
 8019afa:	b003      	add	sp, #12
 8019afc:	bd30      	pop	{r4, r5, pc}
 8019afe:	bf00      	nop
 8019b00:	2000000c 	.word	0x2000000c
 8019b04:	20000070 	.word	0x20000070

08019b08 <__submore>:
 8019b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019b0c:	460c      	mov	r4, r1
 8019b0e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8019b10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019b14:	4299      	cmp	r1, r3
 8019b16:	d11d      	bne.n	8019b54 <__submore+0x4c>
 8019b18:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8019b1c:	f7ff fa66 	bl	8018fec <_malloc_r>
 8019b20:	b918      	cbnz	r0, 8019b2a <__submore+0x22>
 8019b22:	f04f 30ff 	mov.w	r0, #4294967295
 8019b26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019b2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019b2e:	63a3      	str	r3, [r4, #56]	; 0x38
 8019b30:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8019b34:	6360      	str	r0, [r4, #52]	; 0x34
 8019b36:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8019b3a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8019b3e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8019b42:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8019b46:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8019b4a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8019b4e:	6020      	str	r0, [r4, #0]
 8019b50:	2000      	movs	r0, #0
 8019b52:	e7e8      	b.n	8019b26 <__submore+0x1e>
 8019b54:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8019b56:	0077      	lsls	r7, r6, #1
 8019b58:	463a      	mov	r2, r7
 8019b5a:	f000 f837 	bl	8019bcc <_realloc_r>
 8019b5e:	4605      	mov	r5, r0
 8019b60:	2800      	cmp	r0, #0
 8019b62:	d0de      	beq.n	8019b22 <__submore+0x1a>
 8019b64:	eb00 0806 	add.w	r8, r0, r6
 8019b68:	4601      	mov	r1, r0
 8019b6a:	4632      	mov	r2, r6
 8019b6c:	4640      	mov	r0, r8
 8019b6e:	f7fb fe93 	bl	8015898 <memcpy>
 8019b72:	f8c4 8000 	str.w	r8, [r4]
 8019b76:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8019b7a:	e7e9      	b.n	8019b50 <__submore+0x48>

08019b7c <__ascii_wctomb>:
 8019b7c:	b149      	cbz	r1, 8019b92 <__ascii_wctomb+0x16>
 8019b7e:	2aff      	cmp	r2, #255	; 0xff
 8019b80:	bf85      	ittet	hi
 8019b82:	238a      	movhi	r3, #138	; 0x8a
 8019b84:	6003      	strhi	r3, [r0, #0]
 8019b86:	700a      	strbls	r2, [r1, #0]
 8019b88:	f04f 30ff 	movhi.w	r0, #4294967295
 8019b8c:	bf98      	it	ls
 8019b8e:	2001      	movls	r0, #1
 8019b90:	4770      	bx	lr
 8019b92:	4608      	mov	r0, r1
 8019b94:	4770      	bx	lr

08019b96 <memmove>:
 8019b96:	4288      	cmp	r0, r1
 8019b98:	b510      	push	{r4, lr}
 8019b9a:	eb01 0302 	add.w	r3, r1, r2
 8019b9e:	d807      	bhi.n	8019bb0 <memmove+0x1a>
 8019ba0:	1e42      	subs	r2, r0, #1
 8019ba2:	4299      	cmp	r1, r3
 8019ba4:	d00a      	beq.n	8019bbc <memmove+0x26>
 8019ba6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019baa:	f802 4f01 	strb.w	r4, [r2, #1]!
 8019bae:	e7f8      	b.n	8019ba2 <memmove+0xc>
 8019bb0:	4283      	cmp	r3, r0
 8019bb2:	d9f5      	bls.n	8019ba0 <memmove+0xa>
 8019bb4:	1881      	adds	r1, r0, r2
 8019bb6:	1ad2      	subs	r2, r2, r3
 8019bb8:	42d3      	cmn	r3, r2
 8019bba:	d100      	bne.n	8019bbe <memmove+0x28>
 8019bbc:	bd10      	pop	{r4, pc}
 8019bbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019bc2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8019bc6:	e7f7      	b.n	8019bb8 <memmove+0x22>

08019bc8 <__malloc_lock>:
 8019bc8:	4770      	bx	lr

08019bca <__malloc_unlock>:
 8019bca:	4770      	bx	lr

08019bcc <_realloc_r>:
 8019bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019bce:	4607      	mov	r7, r0
 8019bd0:	4614      	mov	r4, r2
 8019bd2:	460e      	mov	r6, r1
 8019bd4:	b921      	cbnz	r1, 8019be0 <_realloc_r+0x14>
 8019bd6:	4611      	mov	r1, r2
 8019bd8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8019bdc:	f7ff ba06 	b.w	8018fec <_malloc_r>
 8019be0:	b922      	cbnz	r2, 8019bec <_realloc_r+0x20>
 8019be2:	f7ff f9b5 	bl	8018f50 <_free_r>
 8019be6:	4625      	mov	r5, r4
 8019be8:	4628      	mov	r0, r5
 8019bea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019bec:	f000 f814 	bl	8019c18 <_malloc_usable_size_r>
 8019bf0:	42a0      	cmp	r0, r4
 8019bf2:	d20f      	bcs.n	8019c14 <_realloc_r+0x48>
 8019bf4:	4621      	mov	r1, r4
 8019bf6:	4638      	mov	r0, r7
 8019bf8:	f7ff f9f8 	bl	8018fec <_malloc_r>
 8019bfc:	4605      	mov	r5, r0
 8019bfe:	2800      	cmp	r0, #0
 8019c00:	d0f2      	beq.n	8019be8 <_realloc_r+0x1c>
 8019c02:	4631      	mov	r1, r6
 8019c04:	4622      	mov	r2, r4
 8019c06:	f7fb fe47 	bl	8015898 <memcpy>
 8019c0a:	4631      	mov	r1, r6
 8019c0c:	4638      	mov	r0, r7
 8019c0e:	f7ff f99f 	bl	8018f50 <_free_r>
 8019c12:	e7e9      	b.n	8019be8 <_realloc_r+0x1c>
 8019c14:	4635      	mov	r5, r6
 8019c16:	e7e7      	b.n	8019be8 <_realloc_r+0x1c>

08019c18 <_malloc_usable_size_r>:
 8019c18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019c1c:	1f18      	subs	r0, r3, #4
 8019c1e:	2b00      	cmp	r3, #0
 8019c20:	bfbc      	itt	lt
 8019c22:	580b      	ldrlt	r3, [r1, r0]
 8019c24:	18c0      	addlt	r0, r0, r3
 8019c26:	4770      	bx	lr

08019c28 <_init>:
 8019c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019c2a:	bf00      	nop
 8019c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019c2e:	bc08      	pop	{r3}
 8019c30:	469e      	mov	lr, r3
 8019c32:	4770      	bx	lr

08019c34 <_fini>:
 8019c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019c36:	bf00      	nop
 8019c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019c3a:	bc08      	pop	{r3}
 8019c3c:	469e      	mov	lr, r3
 8019c3e:	4770      	bx	lr
